{"code": "jest.config.ts\n", "explanation": "This is a Jest configuration file in TypeScript, which contains settings for running unit tests with Jest.", "metadata": {"repo": "magiclabs/magic-admin-js", "file": ".eslintignore", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/magic-admin-js`\n\n**Purpose:** A JavaScript library for building custom Magic Admin interfaces.\n\n**Content:** Open-source codebase providing reusable UI components, APIs, and tools for creating personalized admin experiences with Magic Labs (a no-code platform).", "file_summary": "However, there is no code block provided.\n\nAlso, I must clarify that `.eslintignore` is not a Jest configuration file, but rather an ESLint configuration file that specifies files or directories that should be ignored by ESLint during linting.\n\nAssuming you meant to ask about a different file, if you provide the actual code block summaries, I'll be happy to create a concise and holistic summary for you."}
{"code": "---\nname: Bug Report\nabout: Use this template to report a bug.\ntitle: \"[DESCRIPTIVE BUG NAME]\"\nlabels: \ud83d\udc1b Bug Report, \ud83d\udd0d Needs Triage\n---\n\n### \u2705 Prerequisites\n\n- [ ] Did you perform a cursory search of open issues? Is this bug already reported elsewhere?\n- [ ] Are you running the latest SDK version?\n- [ ] Are you reporting to the correct repository (`@magic-sdk/admin`)?\n\n### \ud83d\udc1b Description\n\n[Description of the bug.]\n\n### \ud83e\udde9 Steps to Reproduce\n\n1. [First Step]\n2. [Second Step]\n3. [and so on...]\n\n### \ud83e\udd14 Expected behavior\n\n[What you expected to happen?]\n\n### \ud83d\ude2e Actual behavior\n\n[What actually happened? Please include any error stack traces you encounter.]\n\n### \ud83d\udcbb Code Sample\n\n[If possible, please provide a code repository, gist, code snippet or sample files to reproduce the issue.]\n\n### \ud83c\udf0e Environment\n\n| Software           | Version(s) |\n| ------------------ | ---------- |\n| `@magic-sdk/admin` |\n| Node               |\n| `yarn`             |\n| Operating System   |\n", "explanation": "**Purpose:** Bug Reporting Template\n\n**Functionality:**\n\nProvides a structured format for users to report bugs, including:\n\n* Prerequisites to ensure the issue is not already reported or related to user error\n* Description of the bug\n* Steps to reproduce the issue\n* Expected and actual behavior\n* Optional code sample and environment details.", "metadata": {"repo": "magiclabs/magic-admin-js", "file": ".github/ISSUE_TEMPLATE/bug_report.md", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/magic-admin-js`\n\n**Purpose:** A JavaScript library for building custom Magic Admin interfaces.\n\n**Content:** Open-source codebase providing reusable UI components, APIs, and tools for creating personalized admin experiences with Magic Labs (a no-code platform).", "file_summary": "Here is a concise summary of the file `.github/ISSUE_TEMPLATE/bug_report.md`:\n\n**Bug Report Template**\n\nA structured format for users to report bugs, including prerequisites, bug description, steps to reproduce, expected vs actual behavior, and optional code/sample details."}
{"code": "---\nname: Feature Request\nabout: Use this template to request a new feature.\ntitle: \"[DESCRIPTIVE FEATURE NAME]\"\nlabels: \u2728Feature Request\n---\n\n### \u2705 Prerequisites\n\n- [ ] Did you perform a cursory search of open issues? Is this feature already requested elsewhere?\n- [ ] Are you reporting to the correct repository (`@magic-sdk/admin`)?\n\n### \u2728 Feature Request\n\n[Description of the feature.]\n\n## \ud83e\udde9 Context\n\n[Explain any additional context or rationale for this feature. What are you trying to accomplish?]\n\n## \ud83d\udcbb Examples\n\n[Do you have any example(s) for the requested feature? If so, describe/demonstrate your example(s) here.]\n", "explanation": "**Purpose:** A template for submitting a new feature request.\n\n**Functionality:** Provides a structured format for users to propose a feature by describing its purpose, context, and examples, ensuring thoroughness and accuracy in their submission.", "metadata": {"repo": "magiclabs/magic-admin-js", "file": ".github/ISSUE_TEMPLATE/feature_request.md", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/magic-admin-js`\n\n**Purpose:** A JavaScript library for building custom Magic Admin interfaces.\n\n**Content:** Open-source codebase providing reusable UI components, APIs, and tools for creating personalized admin experiences with Magic Labs (a no-code platform).", "file_summary": "Here is a holistic summary of the file '.github/ISSUE_TEMPLATE/feature_request.md':\n\n**Feature Request Template**\n\nA template for submitting new feature requests with structured fields to ensure clear and concise proposals."}
{"code": "---\nname: Question\nabout: Use this template to request help or ask a question.\ntitle: \"[WHAT'S YOUR QUESTION?]\"\nlabels: \u2753Question\n---\n\n### \u2705 Prerequisites\n\n- [ ] Did you perform a cursory search of open issues? Is this question already asked elsewhere?\n- [ ] Are you reporting to the correct repository (`@magic-sdk/admin`)?\n\n### \u2753 Question\n\n[Ask your question here, please be as detailed as possible!]\n\n### \ud83c\udf0e Environment\n\n| Software           | Version(s) |\n| ------------------ | ---------- |\n| `@magic-sdk/admin` |\n| Node               |\n| `yarn`             |\n| Operating System   |\n", "explanation": "**Summary:**\n\nThis block is a template for requesting help or asking a question, specifically designed for the Magic Admin repository. It guides users through prerequisites to ensure they've searched existing issues and reported in the correct location before posing their query. The template includes space for users to ask their detailed question and provide environment information.", "metadata": {"repo": "magiclabs/magic-admin-js", "file": ".github/ISSUE_TEMPLATE/question.md", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/magic-admin-js`\n\n**Purpose:** A JavaScript library for building custom Magic Admin interfaces.\n\n**Content:** Open-source codebase providing reusable UI components, APIs, and tools for creating personalized admin experiences with Magic Labs (a no-code platform).", "file_summary": "Here is a holistic summary of the file '.github/ISSUE_TEMPLATE/question.md':\n\n**Summary:** A template for users to request help or ask questions about Magic Admin, ensuring they've searched existing issues before posting. Provides space for detailed queries and environment info."}
{"code": "### \ud83d\udce6 Pull Request\n\n<!-- Provide a general summary of the pull request here. -->\n\n### \u2705 Fixed Issues\n\n<!-- List any fixed issues here like: Fixes #XXXX -->\n\n### \ud83d\udea8 Test instructions\n\n<!-- Describe any additional context required to test the PR/feature/bug fix. -->\n\n### \u26a0\ufe0f Don't forget to add a [semver](https://semver.org/) label!\n<!--\n- `patch`: Bug Fix?\n- `minor`: New Feature?\n- `major`: Breaking Change?\n- `skip-release`: It's unnecessary to publish this change.\n-->\n", "explanation": "This block appears to be a template for a Pull Request (PR) in a version control system, such as GitHub.\n\n**Purpose:** To provide context and instructions for reviewing and testing a PR.\n\n**Functionality:**\n\n* Summarize the PR's purpose\n* List fixed issues related to the PR\n* Provide test instructions or additional context required to review the PR\n* Remind reviewers to add a Semver label indicating the type of change (e.g., bug fix, new feature)", "metadata": {"repo": "magiclabs/magic-admin-js", "file": ".github/PULL_REQUEST_TEMPLATE.md", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/magic-admin-js`\n\n**Purpose:** A JavaScript library for building custom Magic Admin interfaces.\n\n**Content:** Open-source codebase providing reusable UI components, APIs, and tools for creating personalized admin experiences with Magic Labs (a no-code platform).", "file_summary": "Here is a concise summary:\n\n`.github/PULL_REQUEST_TEMPLATE.md` provides a template for submitting a Pull Request with necessary context, including:\n\n* A brief summary of the PR's purpose\n* A list of issues fixed by the PR\n* Instructions for reviewers to test and verify the changes\n* A reminder to add a Semver label indicating the type of change (e.g., bug fix, new feature)"}
{"code": "name: Publish\non:\n  push:\n    branches:\n      - \"master\"\n\njobs:\n  publish:\n    runs-on: ubuntu-20.04\n    name: Publish\n    if: \"!contains(github.event.head_commit.message, 'ci skip') && !contains(github.event.head_commit.message, 'skip ci')\"\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          token: ${{ secrets.ADMIN_TOKEN }}\n\n      - name: Prepare repository\n        run: git fetch --unshallow --tags\n\n      - name: Setup node\n        uses: actions/setup-node@v3\n        with:\n          node-version: 20\n          cache: 'yarn'\n      - run: |\n          yarn -v\n          yarn\n\n      - name: Create Release\n        env:\n          GITHUB_TOKEN: ${{ secrets.ADMIN_TOKEN }}\n          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}\n        run: |\n          yarn\n          yarn build\n          yarn auto shipit\n", "explanation": "**Purpose:** Automatically publish code changes from GitHub repository on push to master branch.\n\n**Functionality:** Runs a series of steps on an Ubuntu 20.04 machine, including:\n\n1. Checking out the code.\n2. Fetching the latest repository data.\n3. Setting up Node.js and running yarn install.\n4. Creating a release using yarn auto shipit after building the project with yarn build.", "metadata": {"repo": "magiclabs/magic-admin-js", "file": ".github/workflows/publish.yml", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/magic-admin-js`\n\n**Purpose:** A JavaScript library for building custom Magic Admin interfaces.\n\n**Content:** Open-source codebase providing reusable UI components, APIs, and tools for creating personalized admin experiences with Magic Labs (a no-code platform).", "file_summary": "Here is a holistic summary of the file '.github/workflows/publish.yml':\n\n**Automated Publishing Workflow**\n\nPublishes code changes from GitHub repository on push to master branch, performing a series of automated steps including code checkout, setup, build, and release deployment."}
{"code": "name: Tests\nconcurrency:\n  group: tests-${{ github.ref }}\n  cancel-in-progress: true\non:\n  push:\n    branches:\n      - \"master\"\n  pull_request:\n\njobs:\n  test:\n    runs-on: ubuntu-20.04\n    name: Run style/security checks & tests\n    container:\n      image: node:16-slim\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Setup node\n        uses: actions/setup-node@v3\n        with:\n          node-version: 16\n          cache: 'yarn'\n      - run: |\n          yarn -v\n          yarn\n\n      - name: Lint\n        run: yarn run lint\n\n      - name: Audit Prod Dependencies\n        run: yarn audit --groups dependencies || true\n\n      - name: Build\n        run: yarn run build\n\n      - name: Test\n        run: yarn run test\n", "explanation": "Here is a concise summary of this block:\n\n**Purpose:** Run automated tests on push to master branch and pull requests.\n\n**Functionality:** A GitHub Actions workflow that checks out code, installs dependencies, runs linting, auditing, building, and testing scripts using Node.js.", "metadata": {"repo": "magiclabs/magic-admin-js", "file": ".github/workflows/test.yml", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/magic-admin-js`\n\n**Purpose:** A JavaScript library for building custom Magic Admin interfaces.\n\n**Content:** Open-source codebase providing reusable UI components, APIs, and tools for creating personalized admin experiences with Magic Labs (a no-code platform).", "file_summary": "Here is a concise summary of the file '.github/workflows/test.yml':\n\n**Purpose:** Run automated tests on push to master branch and pull requests.\n**Functionality:** Automated testing workflow that checks code, installs dependencies, and runs linting, building, and testing scripts using Node.js."}
{"code": "module.exports = require('@ikscodes/prettier-config');\n", "explanation": "**Purpose:** Exports a Prettier configuration module.\n\n**Functionality:** Imports and exposes a pre-defined Prettier configuration from the `@ikscodes/prettier-config` package.", "metadata": {"repo": "magiclabs/magic-admin-js", "file": ".prettierrc.js", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/magic-admin-js`\n\n**Purpose:** A JavaScript library for building custom Magic Admin interfaces.\n\n**Content:** Open-source codebase providing reusable UI components, APIs, and tools for creating personalized admin experiences with Magic Labs (a no-code platform).", "file_summary": "Here is a concise and to-the-point holistic summary of the file '.prettierrc.js':\n\n\".prettierrc.js\" exports a pre-defined Prettier configuration from \"@ikscodes/prettier-config\"."}
{"code": "# v2.4.1 (Tue Apr 23 2024)\n\n#### \ud83d\udc1b Bug Fix\n\n- feat: add username data field to metadata call response [#127](https://github.com/magiclabs/magic-admin-js/pull/127) ([@am-hernandez](https://github.com/am-hernandez))\n\n#### Authors: 1\n\n- A.M. Hernandez ([@am-hernandez](https://github.com/am-hernandez))\n\n---\n\n# v2.4.0 (Thu Apr 04 2024)\n\n#### \ud83d\ude80 Enhancement\n\n- Fixing ABIs [#126](https://github.com/magiclabs/magic-admin-js/pull/126) ([@bengriffin1](https://github.com/bengriffin1))\n\n#### Authors: 1\n\n- Ben Griffin ([@bengriffin1](https://github.com/bengriffin1))\n\n---\n\n# v2.3.0 (Thu Apr 04 2024)\n\n#### \ud83d\ude80 Enhancement\n\n- Updating yarn.lock [#125](https://github.com/magiclabs/magic-admin-js/pull/125) ([@bengriffin1](https://github.com/bengriffin1))\n- Switching to use ethers and accept RPC url for token gating validation [#124](https://github.com/magiclabs/magic-admin-js/pull/124) ([@bengriffin1](https://github.com/bengriffin1) [@Ethella](https://github.com/Ethella))\n\n#### Authors: 2\n", "explanation": "Here is a concise summary:\n\n**Change Log**\n\nThis block appears to be a changelog for the `magic-admin-js` library, listing versions `v2.4.1`, `v2.4.0`, and `v2.3.0`. Each version includes bug fixes/enhancements with corresponding pull requests and authors credited.", "metadata": {"repo": "magiclabs/magic-admin-js", "file": "CHANGELOG.md", "chunk_number": 1, "total_chunks": 19}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/magic-admin-js`\n\n**Purpose:** A JavaScript library for building custom Magic Admin interfaces.\n\n**Content:** Open-source codebase providing reusable UI components, APIs, and tools for creating personalized admin experiences with Magic Labs (a no-code platform).", "file_summary": "Here is a holistic summary of the file 'CHANGELOG.md':\n\n**CHANGELOG.md Summary**\n\nThis block is a changelog for the `magic-admin-js` library, documenting updates, bug fixes, enhancements, and contributors across different versions.\n\n**Key Functionality:**\n\n* Lists release versions with corresponding bug fixes/enhancements\n* Mentions authors and contributors for each change\n\n**Purpose:**\n\nTo document the evolution of the magic-admin-js library, highlighting new features and bug fixes across different versions."}
{"code": "- Ben Griffin ([@bengriffin1](https://github.com/bengriffin1))\n- Jerry Liu ([@Ethella](https://github.com/Ethella))\n\n---\n\n# v2.2.0 (Wed Apr 03 2024)\n\n#### \ud83d\ude80 Enhancement\n\n- Adding type and abis [#122](https://github.com/magiclabs/magic-admin-js/pull/122) ([@bengriffin1](https://github.com/bengriffin1) [@Ethella](https://github.com/Ethella))\n\n#### \ud83d\udc1b Bug Fix\n\n- Pdeexp 594 update admin sdk dependency versions to support web 3 [#123](https://github.com/magiclabs/magic-admin-js/pull/123) ([@Ethella](https://github.com/Ethella))\n\n#### Authors: 2\n\n- Ben Griffin ([@bengriffin1](https://github.com/bengriffin1))\n- Jerry Liu ([@Ethella](https://github.com/Ethella))\n\n---\n\n# v2.1.0 (Fri Jan 19 2024)\n\n#### \ud83d\ude80 Enhancement\n\n- Fix ESM bundle generation and imports [#119](https://github.com/magiclabs/magic-admin-js/pull/119) ([@romin-halltari](https://github.com/romin-halltari))\n\n#### Authors: 1\n\n- [@romin-halltari](https://github.com/romin-halltari)\n\n---\n\n# v2.0.1 (Wed Oct 04 2023)\n\n#### \ud83d\udc1b Bug Fix\n", "explanation": "This block appears to be a GitHub release note, likely in Markdown format. The purpose is to summarize changes made in specific releases of an open-source project.\n\nKey functionality:\n\n* Lists release versions (e.g., v2.2.0)\n* Mentions enhancements and bug fixes associated with each version\n* Displays authors and contributors for each change", "metadata": {"repo": "magiclabs/magic-admin-js", "file": "CHANGELOG.md", "chunk_number": 2, "total_chunks": 19}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/magic-admin-js`\n\n**Purpose:** A JavaScript library for building custom Magic Admin interfaces.\n\n**Content:** Open-source codebase providing reusable UI components, APIs, and tools for creating personalized admin experiences with Magic Labs (a no-code platform).", "file_summary": "Here is a holistic summary of the file 'CHANGELOG.md':\n\n**CHANGELOG.md Summary**\n\nThis block is a changelog for the `magic-admin-js` library, documenting updates, bug fixes, enhancements, and contributors across different versions.\n\n**Key Functionality:**\n\n* Lists release versions with corresponding bug fixes/enhancements\n* Mentions authors and contributors for each change\n\n**Purpose:**\n\nTo document the evolution of the magic-admin-js library, highlighting new features and bug fixes across different versions."}
{"code": "- update yarn.lock [#117](https://github.com/magiclabs/magic-admin-js/pull/117) ([@Ethella](https://github.com/Ethella))\n- Remove dependencies of atob [#116](https://github.com/magiclabs/magic-admin-js/pull/116) ([@Ethella](https://github.com/Ethella))\n\n#### Authors: 1\n\n- Jerry Liu ([@Ethella](https://github.com/Ethella))\n\n---\n\n# v2.0.0 (Mon Jul 10 2023)\n\n#### \ud83d\udca5 Breaking Change\n\n- Validate 'aud' in DID Token [#111](https://github.com/magiclabs/magic-admin-js/pull/111) ([@magic-ravi](https://github.com/magic-ravi))\n\n#### Authors: 1\n\n- Ravi Bhankharia ([@magic-ravi](https://github.com/magic-ravi))\n\n---\n\n# v2.0.0 (July 10, 2023)\n\n## Summary\n- \ud83d\ude80 **Added:** Magic Connect developers can now use the Admin SDK to validate DID tokens. [#111](https://github.com/magiclabs/magic-admin-js/pull/111) ([@magic-ravi](https://github.com/magic-ravi))", "explanation": "Here is a concise summary:\n\n**Purpose:** Update the yarn lock file and remove atob dependencies.\n\n**Functionality:** None, this appears to be a GitHub commit summary with no executable code.", "metadata": {"repo": "magiclabs/magic-admin-js", "file": "CHANGELOG.md", "chunk_number": 3, "total_chunks": 19}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/magic-admin-js`\n\n**Purpose:** A JavaScript library for building custom Magic Admin interfaces.\n\n**Content:** Open-source codebase providing reusable UI components, APIs, and tools for creating personalized admin experiences with Magic Labs (a no-code platform).", "file_summary": "Here is a holistic summary of the file 'CHANGELOG.md':\n\n**CHANGELOG.md Summary**\n\nThis block is a changelog for the `magic-admin-js` library, documenting updates, bug fixes, enhancements, and contributors across different versions.\n\n**Key Functionality:**\n\n* Lists release versions with corresponding bug fixes/enhancements\n* Mentions authors and contributors for each change\n\n**Purpose:**\n\nTo document the evolution of the magic-admin-js library, highlighting new features and bug fixes across different versions."}
{"code": "- \u26a0\ufe0f **Changed:** After creating the Magic instance, it is now necessary to call a new initialize method for Magic Connect developers that want to utilize the Admin SDK. [#111](https://github.com/magiclabs/magic-admin-js/pull/111) ([@magic-ravi](https://github.com/magic-ravi))\n- \ud83d\udee1\ufe0f **Security:** Additional validation of `aud` (client ID) is now being done during initialization of the SDK. [#111](https://github.com/magiclabs/magic-admin-js/pull/111) ([@magic-ravi](https://github.com/magic-ravi))\n\n## Developer Notes\n\n### \ud83d\ude80 Added\n\n#### Admin SDK for MC\nMagic Connect developers can now use the Admin SDK to validate DID tokens.\n\n**Details**\nThere is full support for all `TokenResource` SDK methods for MC. This is intended to be used with client side `magic-js` SDK which will now emit an `id-token-created` event with a DID token upon login via the `connectWithUI` method.\n\nThis functionality is replicated on our other SDKs on Python and Ruby.\n\n### \u26a0\ufe0f Changed\n\n#### Constructor initialization\n", "explanation": "Here is a concise summary:\n\n**Purpose:** Update Magic instance initialization for Magic Connect developers to use Admin SDK.\n**Functionality:** Validate DID tokens using full support for `TokenResource` SDK methods, with client-side magic-js emitting an `id-token-created` event upon login via `connectWithUI`.", "metadata": {"repo": "magiclabs/magic-admin-js", "file": "CHANGELOG.md", "chunk_number": 4, "total_chunks": 19}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/magic-admin-js`\n\n**Purpose:** A JavaScript library for building custom Magic Admin interfaces.\n\n**Content:** Open-source codebase providing reusable UI components, APIs, and tools for creating personalized admin experiences with Magic Labs (a no-code platform).", "file_summary": "Here is a holistic summary of the file 'CHANGELOG.md':\n\n**CHANGELOG.md Summary**\n\nThis block is a changelog for the `magic-admin-js` library, documenting updates, bug fixes, enhancements, and contributors across different versions.\n\n**Key Functionality:**\n\n* Lists release versions with corresponding bug fixes/enhancements\n* Mentions authors and contributors for each change\n\n**Purpose:**\n\nTo document the evolution of the magic-admin-js library, highlighting new features and bug fixes across different versions."}
{"code": "The existing constructor has been deprecated in place of a new async `init` method.\nThe `init` method will pull clientId from Magic servers if one is not provided in the `options` parameter.\n\n**Previous Version**\n```javascript\nconst magic = new Magic(secretKey);\ntry {\n  magic.token.validate(DIDT);\n} catch (e) {\n  console.log(e);\n}\ntry {\n  await magic.users.getMetadataByToken(DIDT);\n} catch (e) {\n  console.log(e);\n}\n```\n\n**Current Version**\n```javascript\nconst magic = await Magic.init(mcSecretKey);\ntry {\n    magic.token.validate(DIDT);\n} catch (e) {\n   console.log(e);\n}\ntry {\n    await magic.users.getMetadataByToken(DIDT);\n} catch (e) {\n    console.log(e);\n}\n```\n\n#### Attachment Validation\n\n- Skip validation of attachment if 'none' is passed in `validate`.\n\n### \ud83d\udee1\ufe0f Security\n\n#### Client ID Validation\n\nAdditional validation of `aud` (client ID) is now being done during initialization of the SDK. This is for both Magic Connect and Magic Auth developers.\n\n\n### \ud83d\udea8 Breaking\n\nNone, all changes are fully backwards compatiable.\n\n### Authors: 1\n", "explanation": "**Summary:**\n\nThe `init` method replaces the existing constructor, asynchronously initializing a Magic SDK instance with an optional clientId pulled from Magic servers if not provided in options. This ensures client ID validation during initialization.", "metadata": {"repo": "magiclabs/magic-admin-js", "file": "CHANGELOG.md", "chunk_number": 5, "total_chunks": 19}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/magic-admin-js`\n\n**Purpose:** A JavaScript library for building custom Magic Admin interfaces.\n\n**Content:** Open-source codebase providing reusable UI components, APIs, and tools for creating personalized admin experiences with Magic Labs (a no-code platform).", "file_summary": "Here is a holistic summary of the file 'CHANGELOG.md':\n\n**CHANGELOG.md Summary**\n\nThis block is a changelog for the `magic-admin-js` library, documenting updates, bug fixes, enhancements, and contributors across different versions.\n\n**Key Functionality:**\n\n* Lists release versions with corresponding bug fixes/enhancements\n* Mentions authors and contributors for each change\n\n**Purpose:**\n\nTo document the evolution of the magic-admin-js library, highlighting new features and bug fixes across different versions."}
{"code": "- Ravi Bhankharia ([@magic-ravi](https://github.com/magic-ravi))\n\n# v1.10.1 (Fri Jul 07 2023)\n\n#### \ud83d\udc1b Bug Fix\n\n- * add file extension [#112](https://github.com/magiclabs/magic-admin-js/pull/112) ([@Ethella](https://github.com/Ethella))\n\n#### Authors: 1\n\n- Jerry Liu ([@Ethella](https://github.com/Ethella))\n\n---\n\n# v1.10.0 (Wed May 03 2023)\n\n#### \ud83d\ude80 Enhancement\n\n- [FIX]: removing unneeded NFT module and related code [#108](https://github.com/magiclabs/magic-admin-js/pull/108) ([@bengriffin1](https://github.com/bengriffin1))\n\n#### Authors: 1\n\n- Ben Griffin ([@bengriffin1](https://github.com/bengriffin1))\n\n---\n\n# v1.9.2 (Fri Mar 24 2023)\n\n#### \ud83d\udc1b Bug Fix\n\n- [FIX]: adding json header [#107](https://github.com/magiclabs/magic-admin-js/pull/107) ([@bengriffin1](https://github.com/bengriffin1))\n\n#### Authors: 1\n\n- Ben Griffin ([@bengriffin1](https://github.com/bengriffin1))\n\n---\n\n# v1.9.1 (Fri Mar 24 2023)\n\n#### \ud83d\udc1b Bug Fix\n", "explanation": "This block appears to be a changelog for a GitHub repository, specifically \"magiclabs/magic-admin-js\". It lists versions of the project with corresponding bug fixes, enhancements, and authors who contributed to those changes.", "metadata": {"repo": "magiclabs/magic-admin-js", "file": "CHANGELOG.md", "chunk_number": 6, "total_chunks": 19}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/magic-admin-js`\n\n**Purpose:** A JavaScript library for building custom Magic Admin interfaces.\n\n**Content:** Open-source codebase providing reusable UI components, APIs, and tools for creating personalized admin experiences with Magic Labs (a no-code platform).", "file_summary": "Here is a holistic summary of the file 'CHANGELOG.md':\n\n**CHANGELOG.md Summary**\n\nThis block is a changelog for the `magic-admin-js` library, documenting updates, bug fixes, enhancements, and contributors across different versions.\n\n**Key Functionality:**\n\n* Lists release versions with corresponding bug fixes/enhancements\n* Mentions authors and contributors for each change\n\n**Purpose:**\n\nTo document the evolution of the magic-admin-js library, highlighting new features and bug fixes across different versions."}
{"code": "- [FIX]: updating response from API server to fit new schema [#106](https://github.com/magiclabs/magic-admin-js/pull/106) ([@bengriffin1](https://github.com/bengriffin1))\n\n#### Authors: 1\n\n- Ben Griffin ([@bengriffin1](https://github.com/bengriffin1))\n\n---\n\n# v1.9.1 (Wed Mar 22 2023)\n\n#### \ud83d\udc1b Bug Fix\n\n- Update modules/mint/index.ts to account for new API response format [#106](https://github.com/magiclabs/magic-admin-js/pull/106) ([@bengriffin1](https://github.com/bengriffin1))\n\n#### Authors: 1\n\n- Ben Griffin ([@bengriffin1](https://github.com/bengriffin1))\n\n---\n\n# v1.9.0 (Wed Mar 22 2023)\n\n#### \ud83d\ude80 Enhancement\n\n- Adding mint module for minting NFTs [#105](https://github.com/magiclabs/magic-admin-js/pull/105) ([@bengriffin1](https://github.com/bengriffin1))\n\n#### \ud83d\udc1b Bug Fix\n\n- Update CHANGELOG.md [#104](https://github.com/magiclabs/magic-admin-js/pull/104) ([@justinnout](https://github.com/justinnout))\n\n#### Authors: 2\n\n- Ben Griffin ([@bengriffin1](https://github.com/bengriffin1))", "explanation": "Here is a concise summary:\n\n**Purpose:** Update the API response format in the Magic Admin JS library.\n\n**Functionality:** Fix bug by updating code to fit new schema, specifically in the \"mint\" module.", "metadata": {"repo": "magiclabs/magic-admin-js", "file": "CHANGELOG.md", "chunk_number": 7, "total_chunks": 19}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/magic-admin-js`\n\n**Purpose:** A JavaScript library for building custom Magic Admin interfaces.\n\n**Content:** Open-source codebase providing reusable UI components, APIs, and tools for creating personalized admin experiences with Magic Labs (a no-code platform).", "file_summary": "Here is a holistic summary of the file 'CHANGELOG.md':\n\n**CHANGELOG.md Summary**\n\nThis block is a changelog for the `magic-admin-js` library, documenting updates, bug fixes, enhancements, and contributors across different versions.\n\n**Key Functionality:**\n\n* Lists release versions with corresponding bug fixes/enhancements\n* Mentions authors and contributors for each change\n\n**Purpose:**\n\nTo document the evolution of the magic-admin-js library, highlighting new features and bug fixes across different versions."}
{"code": "- Justin Herrera ([@justinnout](https://github.com/justinnout))\n\n---\n\n# v1.9.0 (Mon Mar 20 2023)\n\n#### \ud83d\ude80 Enhancement\n\n- New module for NFT minting + delivery [#105](https://github.com/magiclabs/magic-admin-js/pull/105) ([@bengriffin1](https://github.com/bengriffin1))\n\n#### Authors: 1\n\n- Ben Griffin ([@bengriffin1](https://github.com/bengriffin1))\n\n---\n# v1.8.0 (Fri Feb 17 2023)\n\n#### \ud83d\ude80 Enhancement\n\n- Support new multi-chain wallet functionality [#100](https://github.com/magiclabs/magic-admin-js/pull/100) ([@justinnout](https://github.com/justinnout))\n\n#### Authors: 1\n\n- Justin Herrera ([@justinnout](https://github.com/justinnout))\n\n---\n# v1.4.1 (Sat Apr 16 2022)\n\n#### \ud83d\udc1b Bug Fix\n\n- Add shims for atob [#88](https://github.com/magiclabs/magic-admin-js/pull/88) ([@Ethella](https://github.com/Ethella))\n\n#### Authors: 1\n\n- Jerry Liu ([@Ethella](https://github.com/Ethella))\n\n---\n\n# v1.4.0 (Tue Mar 29 2022)\n\n#### \ud83d\ude80 Enhancement\n", "explanation": "**Summary:** \n\nThis block is a GitHub release note for a JavaScript library, magic-admin-js, detailing its updates and changes across different versions.\n\nThe functionality includes:\n\n* NFT minting and delivery (v1.9.0)\n* Multi-chain wallet support (v1.8.0)\n* Bug fix for atob shim (v1.4.1)\n\n**Purpose:** \n\nTo document the evolution of the magic-admin-js library, highlighting new features and bug fixes across different versions.", "metadata": {"repo": "magiclabs/magic-admin-js", "file": "CHANGELOG.md", "chunk_number": 8, "total_chunks": 19}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/magic-admin-js`\n\n**Purpose:** A JavaScript library for building custom Magic Admin interfaces.\n\n**Content:** Open-source codebase providing reusable UI components, APIs, and tools for creating personalized admin experiences with Magic Labs (a no-code platform).", "file_summary": "Here is a holistic summary of the file 'CHANGELOG.md':\n\n**CHANGELOG.md Summary**\n\nThis block is a changelog for the `magic-admin-js` library, documenting updates, bug fixes, enhancements, and contributors across different versions.\n\n**Key Functionality:**\n\n* Lists release versions with corresponding bug fixes/enhancements\n* Mentions authors and contributors for each change\n\n**Purpose:**\n\nTo document the evolution of the magic-admin-js library, highlighting new features and bug fixes across different versions."}
{"code": "- feature: make package environment agnostic [#81](https://github.com/magiclabs/magic-admin-js/pull/81) ([@f5io](https://github.com/f5io))\n\n#### \u26a0\ufe0f Pushed to `master`\n\n- Update CircleCI to use Node 16 ([@smithki](https://github.com/smithki))\n\n#### \ud83c\udfe0 Internal\n\n- Converted all Ava and Sinon testing to Jest [#83](https://github.com/magiclabs/magic-admin-js/pull/83) ([@mushfichowdhury-magic](https://github.com/mushfichowdhury-magic))\n\n#### Authors: 3\n\n- [@mushfichowdhury-magic](https://github.com/mushfichowdhury-magic)\n- Ian K Smith ([@smithki](https://github.com/smithki))\n- Joe Harlow ([@f5io](https://github.com/f5io))\n\n---\n\n# v1.3.4 (Thu Dec 23 2021)\n\n#### \ud83d\udc1b Bug Fix\n\n- Fixed broken docs link in README [#72](https://github.com/magiclabs/magic-admin-js/pull/72) ([@lukecarr](https://github.com/lukecarr) [@smithki](https://github.com/smithki))\n\n#### \ud83d\udd29 Dependency Updates\n", "explanation": "**Summary:**\n\nThis is a changelog, not code or functionality. It lists recent updates to the `magic-admin-js` package, including bug fixes, dependency updates, and feature enhancements, such as making the package environment agnostic and switching from Ava/Sinon testing to Jest.", "metadata": {"repo": "magiclabs/magic-admin-js", "file": "CHANGELOG.md", "chunk_number": 9, "total_chunks": 19}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/magic-admin-js`\n\n**Purpose:** A JavaScript library for building custom Magic Admin interfaces.\n\n**Content:** Open-source codebase providing reusable UI components, APIs, and tools for creating personalized admin experiences with Magic Labs (a no-code platform).", "file_summary": "Here is a holistic summary of the file 'CHANGELOG.md':\n\n**CHANGELOG.md Summary**\n\nThis block is a changelog for the `magic-admin-js` library, documenting updates, bug fixes, enhancements, and contributors across different versions.\n\n**Key Functionality:**\n\n* Lists release versions with corresponding bug fixes/enhancements\n* Mentions authors and contributors for each change\n\n**Purpose:**\n\nTo document the evolution of the magic-admin-js library, highlighting new features and bug fixes across different versions."}
{"code": "- Bump path-parse from 1.0.6 to 1.0.7 [#63](https://github.com/magiclabs/magic-admin-js/pull/63) ([@dependabot[bot]](https://github.com/dependabot[bot]) [@smithki](https://github.com/smithki))\n- Bump glob-parent from 5.1.0 to 5.1.2 [#61](https://github.com/magiclabs/magic-admin-js/pull/61) ([@dependabot[bot]](https://github.com/dependabot[bot]) [@smithki](https://github.com/smithki))\n- Bump normalize-url from 4.5.0 to 4.5.1 [#60](https://github.com/magiclabs/magic-admin-js/pull/60) ([@dependabot[bot]](https://github.com/dependabot[bot]) [@smithki](https://github.com/smithki))\n- Bump hosted-git-info from 2.8.7 to 2.8.9 [#59](https://github.com/magiclabs/magic-admin-js/pull/59) ([@dependabot[bot]](https://github.com/dependabot[bot]) [@smithki](https://github.com/smithki))\n- Bump lodash from 4.17.19 to 4.17.21 [#58](https://github.com/magiclabs/magic-admin-js/pull/58) ([@dependabot[bot]](https://github.com/dependabot[bot]) [@smithki](https://github.com/smithki))", "explanation": "**Purpose:** Update dependencies for magic-admin-js project.\n\n**Functionality:** Incrementally upgrade versions of various Node.js packages (e.g., path-parse, glob-parent, normalize-url) to their latest minor releases using Dependabot automated updates.", "metadata": {"repo": "magiclabs/magic-admin-js", "file": "CHANGELOG.md", "chunk_number": 10, "total_chunks": 19}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/magic-admin-js`\n\n**Purpose:** A JavaScript library for building custom Magic Admin interfaces.\n\n**Content:** Open-source codebase providing reusable UI components, APIs, and tools for creating personalized admin experiences with Magic Labs (a no-code platform).", "file_summary": "Here is a holistic summary of the file 'CHANGELOG.md':\n\n**CHANGELOG.md Summary**\n\nThis block is a changelog for the `magic-admin-js` library, documenting updates, bug fixes, enhancements, and contributors across different versions.\n\n**Key Functionality:**\n\n* Lists release versions with corresponding bug fixes/enhancements\n* Mentions authors and contributors for each change\n\n**Purpose:**\n\nTo document the evolution of the magic-admin-js library, highlighting new features and bug fixes across different versions."}
{"code": "- Bump gitlog from 4.0.3 to 4.0.4 [#57](https://github.com/magiclabs/magic-admin-js/pull/57) ([@dependabot[bot]](https://github.com/dependabot[bot]) [@smithki](https://github.com/smithki))\n- Bump y18n from 4.0.0 to 4.0.1 [#56](https://github.com/magiclabs/magic-admin-js/pull/56) ([@dependabot[bot]](https://github.com/dependabot[bot]) [@smithki](https://github.com/smithki))\n- Bump elliptic from 6.5.3 to 6.5.4 [#53](https://github.com/magiclabs/magic-admin-js/pull/53) ([@dependabot[bot]](https://github.com/dependabot[bot]) [@smithki](https://github.com/smithki))\n- Bump ini from 1.3.5 to 1.3.8 [#51](https://github.com/magiclabs/magic-admin-js/pull/51) ([@dependabot[bot]](https://github.com/dependabot[bot]) [@smithki](https://github.com/smithki))\n\n#### Authors: 3\n\n- [@dependabot[bot]](https://github.com/dependabot[bot])\n- Ian K Smith ([@smithki](https://github.com/smithki))\n- Luke Carr ([@lukecarr](https://github.com/lukecarr))\n\n---\n\n# v1.3.3 (Thu Dec 23 2021)\n\n#### \ud83d\udc1b Bug Fix\n", "explanation": "This block is a changelog summary, detailing version updates to various dependencies in the magic-admin-js project, including bumping versions of gitlog, y18n, elliptic, and ini.", "metadata": {"repo": "magiclabs/magic-admin-js", "file": "CHANGELOG.md", "chunk_number": 11, "total_chunks": 19}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/magic-admin-js`\n\n**Purpose:** A JavaScript library for building custom Magic Admin interfaces.\n\n**Content:** Open-source codebase providing reusable UI components, APIs, and tools for creating personalized admin experiences with Magic Labs (a no-code platform).", "file_summary": "Here is a holistic summary of the file 'CHANGELOG.md':\n\n**CHANGELOG.md Summary**\n\nThis block is a changelog for the `magic-admin-js` library, documenting updates, bug fixes, enhancements, and contributors across different versions.\n\n**Key Functionality:**\n\n* Lists release versions with corresponding bug fixes/enhancements\n* Mentions authors and contributors for each change\n\n**Purpose:**\n\nTo document the evolution of the magic-admin-js library, highlighting new features and bug fixes across different versions."}
{"code": "- getMetadata calls now return phone number [#74](https://github.com/magiclabs/magic-admin-js/pull/74) ([@hcote](https://github.com/hcote))\n\n#### Authors: 1\n\n- Hunter Cote ([@hcote](https://github.com/hcote))\n\n---\n\n# v1.3.2 (Fri Nov 12 2021)\n\n#### \ud83d\udc1b Bug Fix\n\n- allow getMetadata calls to return social provider [#71](https://github.com/magiclabs/magic-admin-js/pull/71) ([@hcote](https://github.com/hcote))\n\n#### Authors: 1\n\n- Hunter Cote ([@hcote](https://github.com/hcote))\n\n---\n\n# v1.3.1 (Tue Oct 05 2021)\n\n#### \ud83d\udc1b Bug Fix\n\n- fix: prevent URI encoding [#69](https://github.com/magiclabs/magic-admin-js/pull/69) ([@chiefGui](https://github.com/chiefGui))\n\n#### \ud83c\udfe0 Internal\n\n- Cleanup internal scripts [#47](https://github.com/magiclabs/magic-admin-js/pull/47) ([@smithki](https://github.com/smithki))\n\n#### Authors: 2\n\n- Guilherme Oderdenge ([@chiefGui](https://github.com/chiefGui))\n- Ian K Smith ([@smithki](https://github.com/smithki))\n\n---\n\n# v1.3.0 (Tue Nov 17 2020)\n\n#### \ud83d\ude80 Enhancement\n", "explanation": "**Purpose:** Update getMetadata calls.\n\n**Functionality:** Allow getMetadata calls to return phone number and social provider information.", "metadata": {"repo": "magiclabs/magic-admin-js", "file": "CHANGELOG.md", "chunk_number": 12, "total_chunks": 19}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/magic-admin-js`\n\n**Purpose:** A JavaScript library for building custom Magic Admin interfaces.\n\n**Content:** Open-source codebase providing reusable UI components, APIs, and tools for creating personalized admin experiences with Magic Labs (a no-code platform).", "file_summary": "Here is a holistic summary of the file 'CHANGELOG.md':\n\n**CHANGELOG.md Summary**\n\nThis block is a changelog for the `magic-admin-js` library, documenting updates, bug fixes, enhancements, and contributors across different versions.\n\n**Key Functionality:**\n\n* Lists release versions with corresponding bug fixes/enhancements\n* Mentions authors and contributors for each change\n\n**Purpose:**\n\nTo document the evolution of the magic-admin-js library, highlighting new features and bug fixes across different versions."}
{"code": "- Add continuous delivery via 'auto' package [#46](https://github.com/magiclabs/magic-admin-js/pull/46) ([@smithki](https://github.com/smithki))\n\n#### \ud83d\udc1b Bug Fix\n\n- Update validate function to support attachment feature [#15](https://github.com/magiclabs/magic-admin-js/pull/15) ([@smithki](https://github.com/smithki))\n- Fix misspelling of 'argumenet' [#43](https://github.com/magiclabs/magic-admin-js/pull/43) ([@brianrlewis](https://github.com/brianrlewis))\n- Add 'UtilsModule' & 'parseAuthorizationHeader' helper [#39](https://github.com/magiclabs/magic-admin-js/pull/39) ([@smithki](https://github.com/smithki))\n- Remove vulnerability badge [#38](https://github.com/magiclabs/magic-admin-js/pull/38) ([@FYJen](https://github.com/FYJen))\n- Add vulnerabilities and circleci badges [#35](https://github.com/magiclabs/magic-admin-js/pull/35) ([@FYJen](https://github.com/FYJen))", "explanation": "Here is a concise summary:\n\n**Block Summary**\n\nThis block lists various pull requests (issues fixed in code) that have been merged into the Magic Admin JS project, including bug fixes, feature updates, and code improvements.", "metadata": {"repo": "magiclabs/magic-admin-js", "file": "CHANGELOG.md", "chunk_number": 13, "total_chunks": 19}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/magic-admin-js`\n\n**Purpose:** A JavaScript library for building custom Magic Admin interfaces.\n\n**Content:** Open-source codebase providing reusable UI components, APIs, and tools for creating personalized admin experiences with Magic Labs (a no-code platform).", "file_summary": "Here is a holistic summary of the file 'CHANGELOG.md':\n\n**CHANGELOG.md Summary**\n\nThis block is a changelog for the `magic-admin-js` library, documenting updates, bug fixes, enhancements, and contributors across different versions.\n\n**Key Functionality:**\n\n* Lists release versions with corresponding bug fixes/enhancements\n* Mentions authors and contributors for each change\n\n**Purpose:**\n\nTo document the evolution of the magic-admin-js library, highlighting new features and bug fixes across different versions."}
{"code": "- Add issue templates and contributing guide [#26](https://github.com/magiclabs/magic-admin-js/pull/26) ([@smithki](https://github.com/smithki))\n- Encode query URI components and implement logout v2 [#22](https://github.com/magiclabs/magic-admin-js/pull/22) ([@smithki](https://github.com/smithki))\n- Add 'getUserBy*' methods and generalize REST API services [#18](https://github.com/magiclabs/magic-admin-js/pull/18) ([@smithki](https://github.com/smithki))\n- Validate `nbf` field [#40](https://github.com/magiclabs/magic-admin-js/pull/40) ([@smithki](https://github.com/smithki))\n- fix name of logout request body [#14](https://github.com/magiclabs/magic-admin-js/pull/14) ([@Dizigen](https://github.com/Dizigen))\n- Add logoutByIssuer method [#13](https://github.com/magiclabs/magic-admin-js/pull/13) ([@smithki](https://github.com/smithki))\n- Remove middlewares [#12](https://github.com/magiclabs/magic-admin-js/pull/12) ([@smithki](https://github.com/smithki))", "explanation": "**Summary:**\n\nThis block lists a series of GitHub pull requests related to the Magic Admin JS library, including feature additions, bug fixes, and code improvements. The contributions involve updating API services, implementing logout functionality, adding user methods, validating token fields, and refactoring code.", "metadata": {"repo": "magiclabs/magic-admin-js", "file": "CHANGELOG.md", "chunk_number": 14, "total_chunks": 19}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/magic-admin-js`\n\n**Purpose:** A JavaScript library for building custom Magic Admin interfaces.\n\n**Content:** Open-source codebase providing reusable UI components, APIs, and tools for creating personalized admin experiences with Magic Labs (a no-code platform).", "file_summary": "Here is a holistic summary of the file 'CHANGELOG.md':\n\n**CHANGELOG.md Summary**\n\nThis block is a changelog for the `magic-admin-js` library, documenting updates, bug fixes, enhancements, and contributors across different versions.\n\n**Key Functionality:**\n\n* Lists release versions with corresponding bug fixes/enhancements\n* Mentions authors and contributors for each change\n\n**Purpose:**\n\nTo document the evolution of the magic-admin-js library, highlighting new features and bug fixes across different versions."}
{"code": "- Add new header + fix decode type signature [#11](https://github.com/magiclabs/magic-admin-js/pull/11) ([@smithki](https://github.com/smithki))\n- Remove default exports [#10](https://github.com/magiclabs/magic-admin-js/pull/10) ([@smithki](https://github.com/smithki))\n- Add CircleCI config [#8](https://github.com/magiclabs/magic-admin-js/pull/8) ([@smithki](https://github.com/smithki))\n- Add unit tests [#7](https://github.com/magiclabs/magic-admin-js/pull/7) ([@smithki](https://github.com/smithki))\n\n#### \u26a0\ufe0f Pushed to `master`\n\n- v0.1.0-beta.8 ([@smithki](https://github.com/smithki))\n- 1.2.2 ([@smithki](https://github.com/smithki))\n- Rename variable for clarity ([@smithki](https://github.com/smithki))\n- Fix logical error related to 'nbf' check ([@smithki](https://github.com/smithki))\n- 1.2.1 ([@smithki](https://github.com/smithki))\n- Add 'files' field to 'package.json' ([@smithki](https://github.com/smithki))\n- 1.2.0 ([@smithki](https://github.com/smithki))", "explanation": "**Summary:**\n\nThis block lists a series of code commits, including adding new features, fixing bugs, and updating versions, all made by the user @smithki on the GitHub repository magiclabs/magic-admin-js.", "metadata": {"repo": "magiclabs/magic-admin-js", "file": "CHANGELOG.md", "chunk_number": 15, "total_chunks": 19}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/magic-admin-js`\n\n**Purpose:** A JavaScript library for building custom Magic Admin interfaces.\n\n**Content:** Open-source codebase providing reusable UI components, APIs, and tools for creating personalized admin experiences with Magic Labs (a no-code platform).", "file_summary": "Here is a holistic summary of the file 'CHANGELOG.md':\n\n**CHANGELOG.md Summary**\n\nThis block is a changelog for the `magic-admin-js` library, documenting updates, bug fixes, enhancements, and contributors across different versions.\n\n**Key Functionality:**\n\n* Lists release versions with corresponding bug fixes/enhancements\n* Mentions authors and contributors for each change\n\n**Purpose:**\n\nTo document the evolution of the magic-admin-js library, highlighting new features and bug fixes across different versions."}
{"code": "- Fix broken CircleCI badge ([@smithki](https://github.com/smithki))\n- 1.1.0 ([@smithki](https://github.com/smithki))\n- Update CONTRIBUTING.md ([@smithki](https://github.com/smithki))\n- Update README.md ([@smithki](https://github.com/smithki))\n- Update issue templates ([@smithki](https://github.com/smithki))\n- v1.0.0 ([@smithki](https://github.com/smithki))\n- v0.1.0-beta.10 ([@smithki](https://github.com/smithki))\n- v0.1.0-beta.9 ([@smithki](https://github.com/smithki))\n- Update CHANGELOG ([@smithki](https://github.com/smithki))\n- v0.1.0-beta.7 ([@smithki](https://github.com/smithki))\n- Remove console statement ([@smithki](https://github.com/smithki))\n- Fix bug in 'isDIDTClaim' ([@smithki](https://github.com/smithki))\n- v0.1.0-beta.6 ([@smithki](https://github.com/smithki))\n- 0.1.0-beta.5 ([@Dizigen](https://github.com/Dizigen))\n- Update TypeScript to 3.8.3 ([@smithki](https://github.com/smithki))\n- Remove node E2E ([@smithki](https://github.com/smithki))", "explanation": "This block appears to be a list of GitHub commits, summarized as:\n\n**Commits by smithki**\n\nA series of updates to various files, including badges, documentation, and code fixes.", "metadata": {"repo": "magiclabs/magic-admin-js", "file": "CHANGELOG.md", "chunk_number": 16, "total_chunks": 19}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/magic-admin-js`\n\n**Purpose:** A JavaScript library for building custom Magic Admin interfaces.\n\n**Content:** Open-source codebase providing reusable UI components, APIs, and tools for creating personalized admin experiences with Magic Labs (a no-code platform).", "file_summary": "Here is a holistic summary of the file 'CHANGELOG.md':\n\n**CHANGELOG.md Summary**\n\nThis block is a changelog for the `magic-admin-js` library, documenting updates, bug fixes, enhancements, and contributors across different versions.\n\n**Key Functionality:**\n\n* Lists release versions with corresponding bug fixes/enhancements\n* Mentions authors and contributors for each change\n\n**Purpose:**\n\nTo document the evolution of the magic-admin-js library, highlighting new features and bug fixes across different versions."}
{"code": "- v0.1.0-beta.4 ([@smithki](https://github.com/smithki))\n- Update README ([@smithki](https://github.com/smithki))\n- Fix test ([@smithki](https://github.com/smithki))\n- v0.1.0-beta.3 ([@smithki](https://github.com/smithki))\n- v0.1.0-beta.2 ([@smithki](https://github.com/smithki))\n- v0.1.0-beta.0 ([@smithki](https://github.com/smithki))\n- Add boilerplate code ([@smithki](https://github.com/smithki))\n- Initial commit ([@FYJen](https://github.com/FYJen))\n\n#### \ud83d\udd29 Dependency Updates\n\n- Bump lodash from 4.17.15 to 4.17.19 [#41](https://github.com/magiclabs/magic-admin-js/pull/41) ([@dependabot[bot]](https://github.com/dependabot[bot]))\n- Bump elliptic from 6.5.2 to 6.5.3 [#42](https://github.com/magiclabs/magic-admin-js/pull/42) ([@dependabot[bot]](https://github.com/dependabot[bot]))\n- Bump node-fetch from 2.6.0 to 2.6.1 [#45](https://github.com/magiclabs/magic-admin-js/pull/45) ([@dependabot[bot]](https://github.com/dependabot[bot]))", "explanation": "**Summary:**\n\nThis block appears to be a changelog from a GitHub repository, specifically for the `magic-admin-js` project. It lists various commits, updates, and dependencies changes. The primary purpose is to document the history of changes made to the project.", "metadata": {"repo": "magiclabs/magic-admin-js", "file": "CHANGELOG.md", "chunk_number": 17, "total_chunks": 19}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/magic-admin-js`\n\n**Purpose:** A JavaScript library for building custom Magic Admin interfaces.\n\n**Content:** Open-source codebase providing reusable UI components, APIs, and tools for creating personalized admin experiences with Magic Labs (a no-code platform).", "file_summary": "Here is a holistic summary of the file 'CHANGELOG.md':\n\n**CHANGELOG.md Summary**\n\nThis block is a changelog for the `magic-admin-js` library, documenting updates, bug fixes, enhancements, and contributors across different versions.\n\n**Key Functionality:**\n\n* Lists release versions with corresponding bug fixes/enhancements\n* Mentions authors and contributors for each change\n\n**Purpose:**\n\nTo document the evolution of the magic-admin-js library, highlighting new features and bug fixes across different versions."}
{"code": "- Bump acorn from 7.1.0 to 7.1.1 [#36](https://github.com/magiclabs/magic-admin-js/pull/36) ([@dependabot[bot]](https://github.com/dependabot[bot]) [@smithki](https://github.com/smithki))\n\n#### Authors: 5\n\n- [@dependabot[bot]](https://github.com/dependabot[bot])\n- Arthur Jen ([@FYJen](https://github.com/FYJen))\n- Brian Lewis ([@brianrlewis](https://github.com/brianrlewis))\n- David He ([@Dizigen](https://github.com/Dizigen))\n- Ian K Smith ([@smithki](https://github.com/smithki))\n\n---\n\n## Upcoming Changes\n\n#### Fixed\n\n- ...\n\n#### Changed\n\n- ...\n\n#### Added\n\n- ...\n\n## `1.2.2` - 06/11/2020\n\n#### Fixed\n\n- Fixed a logical error that would incorrectly parse the `nbf` field.\n\n## `1.2.1` - 06/11/2020\n\n#### Changed\n\n- Added `\"files\"` field to `package.json` to make the NPM package less cumbersome.\n\n## `1.2.0` - 06/11/2020\n\n#### Added\n\n- Enforce the `nbf` field for DID Tokens parsed via `TokenModule.validate`.\n\n## `1.1.0` - 05/25/2020\n\n#### Added\n\n- Introduced `UtilsModule` along with a `parseAuthorizationHeader` helper method.\n", "explanation": "This block appears to be a GitHub pull request comment, specifically a \"changelog\" entry for a version update of the `acorn` library from 7.1.0 to 7.1.1. It lists authors and contributors, but the main content is a changelog summary of previous updates to the project.", "metadata": {"repo": "magiclabs/magic-admin-js", "file": "CHANGELOG.md", "chunk_number": 18, "total_chunks": 19}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/magic-admin-js`\n\n**Purpose:** A JavaScript library for building custom Magic Admin interfaces.\n\n**Content:** Open-source codebase providing reusable UI components, APIs, and tools for creating personalized admin experiences with Magic Labs (a no-code platform).", "file_summary": "Here is a holistic summary of the file 'CHANGELOG.md':\n\n**CHANGELOG.md Summary**\n\nThis block is a changelog for the `magic-admin-js` library, documenting updates, bug fixes, enhancements, and contributors across different versions.\n\n**Key Functionality:**\n\n* Lists release versions with corresponding bug fixes/enhancements\n* Mentions authors and contributors for each change\n\n**Purpose:**\n\nTo document the evolution of the magic-admin-js library, highlighting new features and bug fixes across different versions."}
{"code": "## `1.0.0` - 04/09/2020\n\nThis is the first release our changelog records. Future updates will be logged in the following format:\n\n#### Fixed\n\n- Bug fixes and patches will be described here.\n\n#### Changed\n\n- Changes (breaking or otherwise) to current APIs will be described here.\n\n#### Added\n\n- New features or APIs will be described here.\n", "explanation": "**Summary:**\n\nThis block is a changelog template, outlining how updates to a project will be documented in a structured format. It defines sections for bug fixes, changes to APIs, and new features.", "metadata": {"repo": "magiclabs/magic-admin-js", "file": "CHANGELOG.md", "chunk_number": 19, "total_chunks": 19}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/magic-admin-js`\n\n**Purpose:** A JavaScript library for building custom Magic Admin interfaces.\n\n**Content:** Open-source codebase providing reusable UI components, APIs, and tools for creating personalized admin experiences with Magic Labs (a no-code platform).", "file_summary": "Here is a holistic summary of the file 'CHANGELOG.md':\n\n**CHANGELOG.md Summary**\n\nThis block is a changelog for the `magic-admin-js` library, documenting updates, bug fixes, enhancements, and contributors across different versions.\n\n**Key Functionality:**\n\n* Lists release versions with corresponding bug fixes/enhancements\n* Mentions authors and contributors for each change\n\n**Purpose:**\n\nTo document the evolution of the magic-admin-js library, highlighting new features and bug fixes across different versions."}
{"code": "# Contributing\n\nWhen contributing to this repository, please first discuss the change you wish to make via an **issue**. This can be a feature request or a bug report. After a maintainer has triaged your issue, you are welcome to collaborate on a pull request. If your change is small or uncomplicated, you are welcome to open an issue and pull request simultaneously.\n\nPlease note we have a **code of conduct**, please follow it in all your interactions with the project.\n\n## Setting up for Local Development\n\n1. Fork this repostiory.\n2. Clone your fork.\n3. Create a new branch in your local repository with the following pattern:\n\n- For bug fixes: `bug/#[issue_number]/[descriptive_bug_name]`\n- For features: `feature/#[issue_number]/[descriptive_feature_name]`\n- For chores/the rest: `chore/[descriptive_chore_name]`\n\n4. Install dependencies with Yarn: `yarn install`\n5. Start building for development: `yarn start`\n\n## Opening a Pull Request\n", "explanation": "**Summary:**\n\nThis block outlines the guidelines for contributing to a repository, including:\n\n* Discussing changes via an issue before making a pull request\n* Following a code of conduct in project interactions\n* A step-by-step guide for setting up local development, including:\n\t+ Forking and cloning the repository\n\t+ Creating a new branch with a specific naming pattern\n\t+ Installing dependencies and starting development\n\nThe block also provides instructions on how to open a pull request.", "metadata": {"repo": "magiclabs/magic-admin-js", "file": "CONTRIBUTING.md", "chunk_number": 1, "total_chunks": 8}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/magic-admin-js`\n\n**Purpose:** A JavaScript library for building custom Magic Admin interfaces.\n\n**Content:** Open-source codebase providing reusable UI components, APIs, and tools for creating personalized admin experiences with Magic Labs (a no-code platform).", "file_summary": "Here's a holistic summary of the file 'CONTRIBUTING.md':\n\n**Summary:** Guidelines for contributing to the repository and interacting with the community.\n\n**Purpose:** Establish a clear process for contributing code changes, following a code of conduct, and resolving conflicts in a fair and respectful manner.\n\n**Key Points:**\n\n* Discuss changes before making a pull request\n* Follow a code of conduct for all interactions\n* Set up local development environment correctly\n* Open pull requests with clear instructions\n* Report incidents of abusive behavior using established procedures\n\n**Core Values:** Respect, empathy, and constructive feedback are expected from all community members. Unacceptable behaviors, such as harassment or sustained rule-breaking, will be addressed through a disciplinary system."}
{"code": "1. Open a pull request from your fork/branch to the upstream `master` branch of _this_ repository.\n2. Add a label for the [semver](https://semver.org/) update corresponding to your changes: `patch`, `minor`, or `major`.\n3. A maintainer will review your code changes and offer feedback or suggestions if necessary. Once your changes are approved, a maintainer will merge the pull request for you and publish a release.\n\n## Cutting a release\n\nWe use [`auto`](https://github.com/intuit/auto) as our continous delivery tool. Cutting a release is just a matter of merging to `master`. For pre-releases, you can create a `next` branch as the base for your experimental/W.I.P. feature. Please familiarize yourself with the [documentation for `auto`](https://intuit.github.io/auto/docs) if you are in a position to cut a release.\n\n## Contributor Covenant Code of Conduct\n\n### Our Pledge\n\nWe as members, contributors, and leaders pledge to make participation in our", "explanation": "**Purpose:** Open pull requests with code changes for review and approval.\n\n**Functionality:**\n\n* Review and label changes (patch/minor/major) based on semver updates\n* Maintainer feedback and approval\n* Automated release via `auto` continuous delivery tool upon merge to `master` branch.", "metadata": {"repo": "magiclabs/magic-admin-js", "file": "CONTRIBUTING.md", "chunk_number": 2, "total_chunks": 8}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/magic-admin-js`\n\n**Purpose:** A JavaScript library for building custom Magic Admin interfaces.\n\n**Content:** Open-source codebase providing reusable UI components, APIs, and tools for creating personalized admin experiences with Magic Labs (a no-code platform).", "file_summary": "Here's a holistic summary of the file 'CONTRIBUTING.md':\n\n**Summary:** Guidelines for contributing to the repository and interacting with the community.\n\n**Purpose:** Establish a clear process for contributing code changes, following a code of conduct, and resolving conflicts in a fair and respectful manner.\n\n**Key Points:**\n\n* Discuss changes before making a pull request\n* Follow a code of conduct for all interactions\n* Set up local development environment correctly\n* Open pull requests with clear instructions\n* Report incidents of abusive behavior using established procedures\n\n**Core Values:** Respect, empathy, and constructive feedback are expected from all community members. Unacceptable behaviors, such as harassment or sustained rule-breaking, will be addressed through a disciplinary system."}
{"code": "community a harassment-free experience for everyone, regardless of age, body\nsize, visible or invisible disability, ethnicity, sex characteristics, gender\nidentity and expression, level of experience, education, socio-economic status,\nnationality, personal appearance, race, religion, or sexual identity\nand orientation.\n\nWe pledge to act and interact in ways that contribute to an open, welcoming,\ndiverse, inclusive, and healthy community.\n\n### Our Standards\n\nExamples of behavior that contributes to a positive environment for our\ncommunity include:\n\n- Demonstrating empathy and kindness toward other people\n- Being respectful of differing opinions, viewpoints, and experiences\n- Giving and gracefully accepting constructive feedback\n- Accepting responsibility and apologizing to those affected by our mistakes, and learning from the experience\n- Focusing on what is best not just for us as individuals, but for the overall community\n\nExamples of unacceptable behavior include:\n", "explanation": "**Summary:**\n\nThis block establishes a code of conduct that promotes a harassment-free community environment. It outlines expected standards of behavior, such as empathy, respect, and constructive feedback, while also explicitly prohibiting unacceptable behaviors.", "metadata": {"repo": "magiclabs/magic-admin-js", "file": "CONTRIBUTING.md", "chunk_number": 3, "total_chunks": 8}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/magic-admin-js`\n\n**Purpose:** A JavaScript library for building custom Magic Admin interfaces.\n\n**Content:** Open-source codebase providing reusable UI components, APIs, and tools for creating personalized admin experiences with Magic Labs (a no-code platform).", "file_summary": "Here's a holistic summary of the file 'CONTRIBUTING.md':\n\n**Summary:** Guidelines for contributing to the repository and interacting with the community.\n\n**Purpose:** Establish a clear process for contributing code changes, following a code of conduct, and resolving conflicts in a fair and respectful manner.\n\n**Key Points:**\n\n* Discuss changes before making a pull request\n* Follow a code of conduct for all interactions\n* Set up local development environment correctly\n* Open pull requests with clear instructions\n* Report incidents of abusive behavior using established procedures\n\n**Core Values:** Respect, empathy, and constructive feedback are expected from all community members. Unacceptable behaviors, such as harassment or sustained rule-breaking, will be addressed through a disciplinary system."}
{"code": "- The use of sexualized language or imagery, and sexual attention or advances of any kind\n- Trolling, insulting or derogatory comments, and personal or political attacks\n- Public or private harassment\n- Publishing others' private information, such as a physical or email address, without their explicit permission\n- Other conduct which could reasonably be considered inappropriate in a professional setting\n\n### Enforcement Responsibilities\n\nCommunity leaders are responsible for clarifying and enforcing our standards of\nacceptable behavior and will take appropriate and fair corrective action in\nresponse to any behavior that they deem inappropriate, threatening, offensive,\nor harmful.\n\nCommunity leaders have the right and responsibility to remove, edit, or reject\ncomments, commits, code, wiki edits, issues, and other contributions that are\nnot aligned to this Code of Conduct, and will communicate reasons for moderation\ndecisions when appropriate.\n\n### Scope\n", "explanation": "**Summary:** This block outlines the rules of conduct for a community, prohibiting behavior such as harassment, trolling, and personal attacks, as well as other forms of unacceptable behavior in a professional setting. Community leaders are responsible for enforcing these standards.", "metadata": {"repo": "magiclabs/magic-admin-js", "file": "CONTRIBUTING.md", "chunk_number": 4, "total_chunks": 8}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/magic-admin-js`\n\n**Purpose:** A JavaScript library for building custom Magic Admin interfaces.\n\n**Content:** Open-source codebase providing reusable UI components, APIs, and tools for creating personalized admin experiences with Magic Labs (a no-code platform).", "file_summary": "Here's a holistic summary of the file 'CONTRIBUTING.md':\n\n**Summary:** Guidelines for contributing to the repository and interacting with the community.\n\n**Purpose:** Establish a clear process for contributing code changes, following a code of conduct, and resolving conflicts in a fair and respectful manner.\n\n**Key Points:**\n\n* Discuss changes before making a pull request\n* Follow a code of conduct for all interactions\n* Set up local development environment correctly\n* Open pull requests with clear instructions\n* Report incidents of abusive behavior using established procedures\n\n**Core Values:** Respect, empathy, and constructive feedback are expected from all community members. Unacceptable behaviors, such as harassment or sustained rule-breaking, will be addressed through a disciplinary system."}
{"code": "This Code of Conduct applies within all community spaces, and also applies when\nan individual is officially representing the community in public spaces.\nExamples of representing our community include using an official e-mail address,\nposting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event.\n\n### Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported to the community leaders responsible for enforcement at [support@magic.link](mailto:support@magic.link).\nAll complaints will be reviewed and investigated promptly and fairly.\n\nAll community leaders are obligated to respect the privacy and security of the\nreporter of any incident.\n\n### Enforcement Guidelines\n\nCommunity leaders will follow these Community Impact Guidelines in determining\nthe consequences for any action they deem in violation of this Code of Conduct:\n\n#### 1. Correction\n\n**Community Impact**: Use of inappropriate language or other behavior deemed", "explanation": "Here is a concise summary:\n\n**Purpose:** Establish guidelines for community behavior and enforcement of the Code of Conduct.\n\n**Functionality:** Outline procedures for reporting, investigating, and resolving incidents of abusive or unacceptable behavior within community spaces and when representing the community in public spaces.", "metadata": {"repo": "magiclabs/magic-admin-js", "file": "CONTRIBUTING.md", "chunk_number": 5, "total_chunks": 8}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/magic-admin-js`\n\n**Purpose:** A JavaScript library for building custom Magic Admin interfaces.\n\n**Content:** Open-source codebase providing reusable UI components, APIs, and tools for creating personalized admin experiences with Magic Labs (a no-code platform).", "file_summary": "Here's a holistic summary of the file 'CONTRIBUTING.md':\n\n**Summary:** Guidelines for contributing to the repository and interacting with the community.\n\n**Purpose:** Establish a clear process for contributing code changes, following a code of conduct, and resolving conflicts in a fair and respectful manner.\n\n**Key Points:**\n\n* Discuss changes before making a pull request\n* Follow a code of conduct for all interactions\n* Set up local development environment correctly\n* Open pull requests with clear instructions\n* Report incidents of abusive behavior using established procedures\n\n**Core Values:** Respect, empathy, and constructive feedback are expected from all community members. Unacceptable behaviors, such as harassment or sustained rule-breaking, will be addressed through a disciplinary system."}
{"code": "unprofessional or unwelcome in the community.\n\n**Consequence**: A private, written warning from community leaders, providing\nclarity around the nature of the violation and an explanation of why the\nbehavior was inappropriate. A public apology may be requested.\n\n#### 2. Warning\n\n**Community Impact**: A violation through a single incident or series\nof actions.\n\n**Consequence**: A warning with consequences for continued behavior. No\ninteraction with the people involved, including unsolicited interaction with\nthose enforcing the Code of Conduct, for a specified period of time. This\nincludes avoiding interactions in community spaces as well as external channels\nlike social media. Violating these terms may lead to a temporary or\npermanent ban.\n\n#### 3. Temporary Ban\n\n**Community Impact**: A serious violation of community standards, including\nsustained inappropriate behavior.\n\n**Consequence**: A temporary ban from any sort of interaction or public", "explanation": "This block describes a disciplinary system with three levels of consequence:\n\n1. Private warning for minor infractions\n2. Warning with consequences and no interaction for a specified period\n3. Temporary ban for serious violations, including sustained inappropriate behavior.", "metadata": {"repo": "magiclabs/magic-admin-js", "file": "CONTRIBUTING.md", "chunk_number": 6, "total_chunks": 8}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/magic-admin-js`\n\n**Purpose:** A JavaScript library for building custom Magic Admin interfaces.\n\n**Content:** Open-source codebase providing reusable UI components, APIs, and tools for creating personalized admin experiences with Magic Labs (a no-code platform).", "file_summary": "Here's a holistic summary of the file 'CONTRIBUTING.md':\n\n**Summary:** Guidelines for contributing to the repository and interacting with the community.\n\n**Purpose:** Establish a clear process for contributing code changes, following a code of conduct, and resolving conflicts in a fair and respectful manner.\n\n**Key Points:**\n\n* Discuss changes before making a pull request\n* Follow a code of conduct for all interactions\n* Set up local development environment correctly\n* Open pull requests with clear instructions\n* Report incidents of abusive behavior using established procedures\n\n**Core Values:** Respect, empathy, and constructive feedback are expected from all community members. Unacceptable behaviors, such as harassment or sustained rule-breaking, will be addressed through a disciplinary system."}
{"code": "communication with the community for a specified period of time. No public or\nprivate interaction with the people involved, including unsolicited interaction\nwith those enforcing the Code of Conduct, is allowed during this period.\nViolating these terms may lead to a permanent ban.\n\n#### 4. Permanent Ban\n\n**Community Impact**: Demonstrating a pattern of violation of community\nstandards, including sustained inappropriate behavior,  harassment of an\nindividual, or aggression toward or disparagement of classes of individuals.\n\n**Consequence**: A permanent ban from any sort of public interaction within\nthe community.\n\n### Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant](https://www.contributor-covenant.org),\nversion 2.0, available at\nhttps://www.contributor-covenant.org/version/2/0/code_of_conduct.html.\n\nCommunity Impact Guidelines were inspired by [Mozilla's code of conduct\nenforcement ladder](https://github.com/mozilla/diversity).\n", "explanation": "**Purpose:** This block outlines rules for community interactions during a specified time period, specifically prohibiting communication with the community or its enforcers.\n\n**Functionality:** It sets consequences for violating these terms, including a permanent ban from public interaction within the community, which is typically reserved for severe cases of harassment or sustained rule-breaking.", "metadata": {"repo": "magiclabs/magic-admin-js", "file": "CONTRIBUTING.md", "chunk_number": 7, "total_chunks": 8}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/magic-admin-js`\n\n**Purpose:** A JavaScript library for building custom Magic Admin interfaces.\n\n**Content:** Open-source codebase providing reusable UI components, APIs, and tools for creating personalized admin experiences with Magic Labs (a no-code platform).", "file_summary": "Here's a holistic summary of the file 'CONTRIBUTING.md':\n\n**Summary:** Guidelines for contributing to the repository and interacting with the community.\n\n**Purpose:** Establish a clear process for contributing code changes, following a code of conduct, and resolving conflicts in a fair and respectful manner.\n\n**Key Points:**\n\n* Discuss changes before making a pull request\n* Follow a code of conduct for all interactions\n* Set up local development environment correctly\n* Open pull requests with clear instructions\n* Report incidents of abusive behavior using established procedures\n\n**Core Values:** Respect, empathy, and constructive feedback are expected from all community members. Unacceptable behaviors, such as harassment or sustained rule-breaking, will be addressed through a disciplinary system."}
{"code": "For answers to common questions about this code of conduct, see the FAQ at\nhttps://www.contributor-covenant.org/faq. Translations are available at\nhttps://www.contributor-covenant.org/translations.\n\n", "explanation": "This block provides links to FAQs and translations for a code of conduct, likely intended to educate users on its purpose and functionality.", "metadata": {"repo": "magiclabs/magic-admin-js", "file": "CONTRIBUTING.md", "chunk_number": 8, "total_chunks": 8}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/magic-admin-js`\n\n**Purpose:** A JavaScript library for building custom Magic Admin interfaces.\n\n**Content:** Open-source codebase providing reusable UI components, APIs, and tools for creating personalized admin experiences with Magic Labs (a no-code platform).", "file_summary": "Here's a holistic summary of the file 'CONTRIBUTING.md':\n\n**Summary:** Guidelines for contributing to the repository and interacting with the community.\n\n**Purpose:** Establish a clear process for contributing code changes, following a code of conduct, and resolving conflicts in a fair and respectful manner.\n\n**Key Points:**\n\n* Discuss changes before making a pull request\n* Follow a code of conduct for all interactions\n* Set up local development environment correctly\n* Open pull requests with clear instructions\n* Report incidents of abusive behavior using established procedures\n\n**Core Values:** Respect, empathy, and constructive feedback are expected from all community members. Unacceptable behaviors, such as harassment or sustained rule-breaking, will be addressed through a disciplinary system."}
{"code": "# Magic Authentication Admin Javascript SDK\n\n[![Publish](https://github.com/magiclabs/magic-admin-js/actions/workflows/publish.yml/badge.svg?branch=master)](https://github.com/magiclabs/magic-admin-js/actions/workflows/publish.yml)\n> The Magic Admin SDK lets developers secure endpoints, manage users, and create middlewares via easy-to-use utilities.\n\n<p align=\"center\">\n  <a href=\"./LICENSE\">License</a> \u00b7\n  <a href=\"./CHANGELOG.md\">Changelog</a> \u00b7\n  <a href=\"./CONTRIBUTING.md\">Contributing Guide</a>\n</p>\n\n## \ud83d\udcd6 Documentation\n\nSee the [developer documentation](https://magic.link/docs/api-reference/server-side-sdks/node) to learn how you can master the Magic Admin SDK in a matter of minutes.\n\n## \ud83d\udd17 Installation\n\nIntegrating your Node.js application with Magic will require our server-side NPM package:\n\n```bash\n# Via NPM:\nnpm install --save @magic-sdk/admin\n\n# Via Yarn:\nyarn add @magic-sdk/admin\n```\n\n## \u26a1\ufe0f Quick Start\n", "explanation": "Here is a concise summary of the purpose and functionality of this block:\n\n**Purpose:** The Magic Admin SDK allows developers to secure endpoints, manage users, and create middlewares with ease.\n\n**Functionality:** Provides an easy-to-use JavaScript library for authentication, user management, and middleware creation in Node.js applications.", "metadata": {"repo": "magiclabs/magic-admin-js", "file": "README.md", "chunk_number": 1, "total_chunks": 2}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/magic-admin-js`\n\n**Purpose:** A JavaScript library for building custom Magic Admin interfaces.\n\n**Content:** Open-source codebase providing reusable UI components, APIs, and tools for creating personalized admin experiences with Magic Labs (a no-code platform).", "file_summary": "Here is a holistic summary of the file 'README.md':\n\nThe Magic Admin SDK enables secure authentication, user management, and middleware creation in Node.js applications through an easy-to-use JavaScript library. It also allows interaction with Magic's administration APIs using API keys, facilitating tasks such as token validation and user metadata retrieval."}
{"code": "Sign up or log in to the [developer dashboard](https://dashboard.magic.link) to receive API keys that will allow your application to interact with Magic's administration APIs.\n\n```ts\nconst { Magic } = require('@magic-sdk/admin');\n\n// In async function:\nconst magic = await Magic.init('YOUR_SECRET_API_KEY');\n// OR\nMagic.init('YOUR_SECRET_API_KEY').then((magic) => {\n  magic\n});\n// Validate a token\ntry {\n  magic.token.validate(\"DIDToken\");\n} catch (e) {\n  console.log(e);\n}\n// Magic Auth - Get User Email\ntry {\n  await magic.users.getMetadataByToken(\"DIDToken\");\n} catch (e) {\n  console.log(e);\n}\n```\n", "explanation": "**Purpose:** Obtain API keys for interacting with Magic's administration APIs.\n\n**Functionality:** Initialize the Magic SDK, validate tokens, and retrieve user metadata using the provided API key.", "metadata": {"repo": "magiclabs/magic-admin-js", "file": "README.md", "chunk_number": 2, "total_chunks": 2}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/magic-admin-js`\n\n**Purpose:** A JavaScript library for building custom Magic Admin interfaces.\n\n**Content:** Open-source codebase providing reusable UI components, APIs, and tools for creating personalized admin experiences with Magic Labs (a no-code platform).", "file_summary": "Here is a holistic summary of the file 'README.md':\n\nThe Magic Admin SDK enables secure authentication, user management, and middleware creation in Node.js applications through an easy-to-use JavaScript library. It also allows interaction with Magic's administration APIs using API keys, facilitating tasks such as token validation and user metadata retrieval."}
{"code": "{\n  \"compilerOptions\": {\n    \"lib\": [\"es2018\", \"dom\"],\n    \"module\": \"commonjs\",\n    \"moduleResolution\": \"node\",\n    \"target\": \"es6\",\n    \"strict\": true,\n    \"allowSyntheticDefaultImports\": true,\n    \"experimentalDecorators\": true,\n    \"noImplicitReturns\": true,\n    \"noImplicitThis\": true,\n    \"esModuleInterop\": true,\n    \"downlevelIteration\": true,\n    \"resolveJsonModule\": true,\n    \"allowJs\": true,\n    \"sourceMap\": true,\n    \"declaration\": true,\n  },\n  \"include\": [\"../src/**/*.ts\"],\n  \"exclude\": [\"../node_modules\"]\n}\n", "explanation": "This block is a configuration for a TypeScript compiler, specifying build settings and file inclusion/exclusion rules.", "metadata": {"repo": "magiclabs/magic-admin-js", "file": "config/tsconfig.base.json", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/magic-admin-js`\n\n**Purpose:** A JavaScript library for building custom Magic Admin interfaces.\n\n**Content:** Open-source codebase providing reusable UI components, APIs, and tools for creating personalized admin experiences with Magic Labs (a no-code platform).", "file_summary": "Here is a concise and to-the-point summary:\n\n`config/tsconfig.base.json`: A base TypeScript configuration file that sets up build settings and file inclusion/exclusion rules for subsequent TypeScript configurations."}
{"code": "{\n  \"extends\": \"./tsconfig.base.json\",\n  \"compilerOptions\": {\n    \"outDir\": \"../dist/cjs\",\n  },\n  \"include\": [\"../src/**/*.ts\"]\n}\n", "explanation": "**Configuration Block Summary**\n\nThis is a JSON configuration block for a TypeScript compiler, extending from a base configuration file (`./tsconfig.base.json`). It specifies output directory (`outDir`) and includes files to compile in the `../src` directory using the `.ts` extension.", "metadata": {"repo": "magiclabs/magic-admin-js", "file": "config/tsconfig.sdk.cjs.json", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/magic-admin-js`\n\n**Purpose:** A JavaScript library for building custom Magic Admin interfaces.\n\n**Content:** Open-source codebase providing reusable UI components, APIs, and tools for creating personalized admin experiences with Magic Labs (a no-code platform).", "file_summary": "Here's a concise summary of the file 'config/tsconfig.sdk.cjs.json':\n\n**Config Summary**\n\nExtends base config, outputs to `./outDir`, compiles `.ts` files from `../src`."}
{"code": "{\n  \"extends\": \"./tsconfig.base.json\",\n  \"compilerOptions\": {\n    \"lib\": [\"es2020\", \"dom\"],\n    \"target\": \"es2020\",\n    \"module\": \"es2020\",\n    \"outDir\": \"../dist/esm\"\n  },\n  \"include\": [\"../src/**/*.ts\"]\n}\n", "explanation": "**Configuration Block**\n\nThis block configures a TypeScript project.\n\n* **Purpose:** To extend an existing configuration file (`./tsconfig.base.json`) and set up specific compiler options.\n* **Functionality:**\n\t+ Specifies libraries to use (`es2020` and `dom`).\n\t+ Sets the target JavaScript version (`es2020`).\n\t+ Configures module output (`es2020`).\n\t+ Specifies the output directory for compiled files (`../dist/esm`).\n\t+ Includes all TypeScript files in the project's source directory (`../src/**/*.ts`) for compilation.", "metadata": {"repo": "magiclabs/magic-admin-js", "file": "config/tsconfig.sdk.esm.json", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/magic-admin-js`\n\n**Purpose:** A JavaScript library for building custom Magic Admin interfaces.\n\n**Content:** Open-source codebase providing reusable UI components, APIs, and tools for creating personalized admin experiences with Magic Labs (a no-code platform).", "file_summary": "Here is a concise and to-the-point summary:\n\n**config/tsconfig.sdk.esm.json**\n\nConfigures a TypeScript project by extending `./tsconfig.base.json` with specific compiler options, targeting ES2020 JavaScript version, using es2020 and dom libraries, outputting compiled files to `../dist/esm`, and compiling all `.ts` files in `../src`."}
{"code": "{\n  \"extends\": \"./tsconfig.base.json\",\n  \"compilerOptions\": {\n    \"module\": \"commonjs\",\n    \"target\": \"es6\",\n    \"strict\": false,\n    \"noImplicitAny\": false,\n    \"downlevelIteration\": true,\n    \"esModuleInterop\": true\n  },\n  \"include\": [\"../test/**/*.ts\"]\n}\n", "explanation": "This block is a JSON configuration file for TypeScript, defining settings for compilation, including module format, target version, and debugging options, as well as specifying files to include in the build process.", "metadata": {"repo": "magiclabs/magic-admin-js", "file": "config/tsconfig.test.json", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/magic-admin-js`\n\n**Purpose:** A JavaScript library for building custom Magic Admin interfaces.\n\n**Content:** Open-source codebase providing reusable UI components, APIs, and tools for creating personalized admin experiences with Magic Labs (a no-code platform).", "file_summary": "Here is a concise summary of the `config/tsconfig.test.json` file:\n\n**Configures TypeScript test compilation**\n\n Defines settings for building test code, including module format and debugging options."}
{"code": "import type { Config } from '@jest/types';\n\nconst config: Config.InitialOptions = {\n  maxWorkers: 2,\n  preset: 'ts-jest',\n  coverageReporters: ['text-summary', 'html'],\n  collectCoverageFrom: ['./src/**/*.{ts,tsx,}'],\n  collectCoverage: true,\n  testTimeout: 30000, // 30s\n  coverageThreshold: {\n    global: {\n      lines: 99,\n      statements: 99,\n      functions: 99,\n      branches: 99,\n    }\n  },\n  globals: {\n    'ts-jest': {\n      tsconfig: './test/tsconfig.json',\n      isolatedModules: true,\n    },\n  },\n};\n\nexport default config;", "explanation": "This block defines a Jest configuration object, specifying settings for running tests, including:\n\n* Number of workers\n* Test timeout\n* Code coverage reporters\n* Thresholds for code coverage\n* TypeScript configuration options", "metadata": {"repo": "magiclabs/magic-admin-js", "file": "jest.config.ts", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/magic-admin-js`\n\n**Purpose:** A JavaScript library for building custom Magic Admin interfaces.\n\n**Content:** Open-source codebase providing reusable UI components, APIs, and tools for creating personalized admin experiences with Magic Labs (a no-code platform).", "file_summary": "Here is a concise summary of the `jest.config.ts` file:\n\n**Configures Jest testing environment**\n\nSpecifies settings for running tests, including worker count, timeouts, code coverage reporting, and TypeScript options."}
{"code": "#!/usr/bin/env bash\n\necho\nboxen --border-color cyan --dim-border --padding 1 \"\ud83c\udfd7 Building Magic Admin SDK for production.\"\necho\n\n# Increase memory limit for Node\nexport NODE_OPTIONS=--max_old_space_size=4096\n\nexport NODE_ENV=production\n\n# Generate type declarations\nnpx tsc -p ./config/tsconfig.sdk.esm.json --declaration --emitDeclarationOnly\n\n# Build ESM bundle\nnpm run build-esm\n\n#Build CJS bundle\nnpx tsc -p ./config/tsconfig.sdk.cjs.json\n", "explanation": "**Purpose:** Automate the build process for a Node.js application.\n\n**Functionality:**\n\n1. Print a message indicating the start of the build process.\n2. Set environment variables:\n\t* Increase memory limit for Node.\n\t* Set NODE_ENV to \"production\".\n3. Generate type declarations using TSC (TypeScript Compiler).\n4. Build ESM (ES Module) and CJS (CommonJS) bundles using NPM scripts.", "metadata": {"repo": "magiclabs/magic-admin-js", "file": "scripts/build.sh", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/magic-admin-js`\n\n**Purpose:** A JavaScript library for building custom Magic Admin interfaces.\n\n**Content:** Open-source codebase providing reusable UI components, APIs, and tools for creating personalized admin experiences with Magic Labs (a no-code platform).", "file_summary": "Here is a concise and holistic summary of the file 'scripts/build.sh':\n\n**Scripts/build.sh:** Automates Node.js application build process, setting environment variables, generating type declarations, and building ESM/CJS bundles for production deployment."}
{"code": "#!/usr/bin/env bash\n\necho\nboxen --border-color cyan --dim-border --padding 1 \"\ud83c\udfd7 Building Magic Admin SDK for development.\"\necho\n\n# Increase memory limit for Node\nexport NODE_OPTIONS=--max_old_space_size=4096\n\nexport NODE_ENV=development\n\nnpx tsc -w -p ./config/tsconfig.sdk.json\n", "explanation": "Here is a summary of the block's purpose and functionality:\n\n**Purpose:** Initialize development environment for Magic Admin SDK project.\n\n**Functionality:**\n\n* Print a message indicating the start of building the SDK.\n* Set Node.js memory limit to 4096MB.\n* Set environment variable `NODE_ENV` to \"development\".\n* Run TypeScript compiler in watch mode using `npx tsc`.", "metadata": {"repo": "magiclabs/magic-admin-js", "file": "scripts/start.sh", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/magic-admin-js`\n\n**Purpose:** A JavaScript library for building custom Magic Admin interfaces.\n\n**Content:** Open-source codebase providing reusable UI components, APIs, and tools for creating personalized admin experiences with Magic Labs (a no-code platform).", "file_summary": "Here is a concise summary:\n\n**scripts/start.sh:** Initializes development environment for Magic Admin SDK project, setting up Node.js memory limit, environment variables, and compiling TypeScript code in watch mode."}
{"code": "#!/usr/bin/env bash\n\necho\nboxen --border-color cyan --dim-border --padding 1 \"\ud83d\udea6 Running unit tests...\"\necho\n\n# Increase memory limit for Node\nexport NODE_OPTIONS=--max_old_space_size=4096\n\nexport NODE_ENV=test\n\nexport TS_NODE_PROJECT=\"test/tsconfig.json\"\n\njest $input\n", "explanation": "Here is a concise summary:\n\n**Purpose:** Run unit tests using Jest.\n\n**Functionality:** Sets up environment, increases Node memory limit, runs Jest with specified input.", "metadata": {"repo": "magiclabs/magic-admin-js", "file": "scripts/test.sh", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/magic-admin-js`\n\n**Purpose:** A JavaScript library for building custom Magic Admin interfaces.\n\n**Content:** Open-source codebase providing reusable UI components, APIs, and tools for creating personalized admin experiences with Magic Labs (a no-code platform).", "file_summary": "Here's a concise summary of the file 'scripts/test.sh':\n\n**Test Script:** Runs Jest unit tests, setting up environment and increasing Node memory limit."}
{"code": "import { ErrorCode } from '../types';\n\n// --- Base SDK error class\n\nexport class MagicAdminSDKError extends Error {\n  __proto__ = Error;\n\n  constructor(\n    public code: ErrorCode,\n    message: string,\n    public data: any[] = [],\n  ) {\n    super(`Magic Admin SDK Error: [${code}] ${message}`);\n    Object.setPrototypeOf(this, MagicAdminSDKError.prototype);\n  }\n}\n\n// --- SDK error factories\n\nexport function createTokenExpiredError() {\n  return new MagicAdminSDKError(ErrorCode.TokenExpired, 'DID Token has expired. Request failed authentication.');\n}\n\nexport function createTokenCannotBeUsedYetError() {\n  return new MagicAdminSDKError(\n    ErrorCode.TokenCannotBeUsedYet,\n    'Given DID Token cannot be used at this time. Please check the `nbf` field and regenerate a new token with a suitable value.',\n  );\n}\n\nexport function createIncorrectSignerAddressError() {\n  return new MagicAdminSDKError(\n    ErrorCode.IncorrectSignerAddress,\n    'Incorrect signer address for DID Token. Request failed authentication.',\n  );\n}\n", "explanation": "**Summary**\n\nThis block defines a custom error class `MagicAdminSDKError` and related factory functions for creating specific errors in an SDK. The purpose is to handle and represent distinct error scenarios, providing a clear and structured way to communicate errors.", "metadata": {"repo": "magiclabs/magic-admin-js", "file": "src/core/sdk-exceptions.ts", "chunk_number": 1, "total_chunks": 3}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/magic-admin-js`\n\n**Purpose:** A JavaScript library for building custom Magic Admin interfaces.\n\n**Content:** Open-source codebase providing reusable UI components, APIs, and tools for creating personalized admin experiences with Magic Labs (a no-code platform).", "file_summary": "Here's a concise and holistic summary of the file 'src/core/sdk-exceptions.ts':\n\n**Purpose:** Define custom error classes for the SDK, enabling structured error handling.\n\n**Functionality:** Export factory functions that create `MagicAdminSDKError` instances with specific error codes and messages for various API-related issues."}
{"code": "export function createFailedRecoveringProofError() {\n  return new MagicAdminSDKError(\n    ErrorCode.FailedRecoveryProof,\n    'Failed to recover proof. Request failed authentication.',\n  );\n}\n\nexport function createApiKeyMissingError() {\n  return new MagicAdminSDKError(\n    ErrorCode.ApiKeyMissing,\n    'Please provide a secret Magic API key that you acquired from the developer dashboard.',\n  );\n}\n\nexport function createMalformedTokenError() {\n  return new MagicAdminSDKError(ErrorCode.MalformedTokenError, 'The DID token is malformed or failed to parse.');\n}\n\nexport function createServiceError(...nestedErrors: any[]) {\n  return new MagicAdminSDKError(\n    ErrorCode.ServiceError,\n    'A service error occurred while communicating with the Magic API. Check the `data` key of this error object to see nested errors with additional context.',\n    nestedErrors,\n  );\n}\n\nexport function createExpectedBearerStringError() {\n  return new MagicAdminSDKError(\n    ErrorCode.ExpectedBearerString,", "explanation": "**Purpose:** Create custom error objects for various API-related issues.\n\n**Functionality:**\n\n* The code exports functions that return instances of `MagicAdminSDKError` with specific error codes and messages.\n* Each function creates a new error object with a unique error code, message, and optional nested errors (if applicable).", "metadata": {"repo": "magiclabs/magic-admin-js", "file": "src/core/sdk-exceptions.ts", "chunk_number": 2, "total_chunks": 3}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/magic-admin-js`\n\n**Purpose:** A JavaScript library for building custom Magic Admin interfaces.\n\n**Content:** Open-source codebase providing reusable UI components, APIs, and tools for creating personalized admin experiences with Magic Labs (a no-code platform).", "file_summary": "Here's a concise and holistic summary of the file 'src/core/sdk-exceptions.ts':\n\n**Purpose:** Define custom error classes for the SDK, enabling structured error handling.\n\n**Functionality:** Export factory functions that create `MagicAdminSDKError` instances with specific error codes and messages for various API-related issues."}
{"code": "    'Expected argument to be a string in the `Bearer {token}` format.',\n  );\n}\n\nexport function createAudienceMismatchError() {\n  return new MagicAdminSDKError(\n    ErrorCode.AudienceMismatch,\n    'Audience does not match client ID. Please ensure your secret key matches the application which generated the DID token.',\n  );\n}\n", "explanation": "Here is a concise summary:\n\nThis block defines two functions that create error objects for invalid input (a non-string argument) and audience mismatch, respectively.", "metadata": {"repo": "magiclabs/magic-admin-js", "file": "src/core/sdk-exceptions.ts", "chunk_number": 3, "total_chunks": 3}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/magic-admin-js`\n\n**Purpose:** A JavaScript library for building custom Magic Admin interfaces.\n\n**Content:** Open-source codebase providing reusable UI components, APIs, and tools for creating personalized admin experiences with Magic Labs (a no-code platform).", "file_summary": "Here's a concise and holistic summary of the file 'src/core/sdk-exceptions.ts':\n\n**Purpose:** Define custom error classes for the SDK, enabling structured error handling.\n\n**Functionality:** Export factory functions that create `MagicAdminSDKError` instances with specific error codes and messages for various API-related issues."}
{"code": "import { createApiKeyMissingError } from './sdk-exceptions';\nimport { TokenModule } from '../modules/token';\nimport { UsersModule } from '../modules/users';\nimport { UtilsModule } from '../modules/utils';\nimport { MagicAdminSDKAdditionalConfiguration } from '../types';\nimport { get } from '../utils/rest';\n\nexport class MagicAdminSDK {\n  public readonly apiBaseUrl: string;\n\n  /**\n   * Contains utilities for interacting with Decentralized Identity Tokens\n   * (DIDTs).\n   */\n  public readonly token: TokenModule;\n\n  /**\n   * Contains utilities for interacting with your Magic Authentication user\n   * model.\n   */\n  public readonly users: UsersModule;\n\n  /**\n   * Contains general utilities for Magic Admin SDK.\n   */\n  public readonly utils: UtilsModule;\n\n  /**\n   * Unique client identifier\n   */\n  public clientId: string | null;\n\n  /**\n   * Deprecated. Use `init` instead.\n   * @param secretApiKey\n   * @param options\n   */\n  constructor(\n    public readonly secretApiKey?: string,\n    options?: MagicAdminSDKAdditionalConfiguration,", "explanation": "**Summary:**\n\nThis block is a JavaScript class (`MagicAdminSDK`) that provides a set of utilities for interacting with the Magic Admin SDK. It includes methods and properties for handling Decentralized Identity Tokens (DIDTs), user management, general utility functions, and configuration options. The class can be initialized with an API key or other custom configurations.", "metadata": {"repo": "magiclabs/magic-admin-js", "file": "src/core/sdk.ts", "chunk_number": 1, "total_chunks": 2}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/magic-admin-js`\n\n**Purpose:** A JavaScript library for building custom Magic Admin interfaces.\n\n**Content:** Open-source codebase providing reusable UI components, APIs, and tools for creating personalized admin experiences with Magic Labs (a no-code platform).", "file_summary": "Here is a concise holistic summary of the file 'src/core/sdk.ts':\n\nThe `MagicAdminSDK` class provides utilities for interacting with Magic Admin SDK, enabling token management, user management, general utilities, and configuration options through a single instance initialized with an API key or custom configurations."}
{"code": "  ) {\n    const endpoint = options?.endpoint ?? 'https://api.magic.link';\n    this.apiBaseUrl = endpoint.replace(/\\/+$/, '');\n    this.clientId = options?.clientId ?? null;\n    // Assign API Modules\n    this.token = new TokenModule(this);\n    this.users = new UsersModule(this);\n    this.utils = new UtilsModule(this);\n  }\n\n  public static async init(secretApiKey?: string, options?: MagicAdminSDKAdditionalConfiguration) {\n    if (!secretApiKey) throw createApiKeyMissingError();\n\n    let hydratedOptions = options ?? {};\n\n    const endpoint = hydratedOptions.endpoint ?? 'https://api.magic.link';\n    const apiBaseUrl = endpoint.replace(/\\/+$/, '');\n\n    if (!hydratedOptions.clientId) {\n      const resp = await get<{\n        client_id: string | null;\n        app_scope: string | null;\n      }>(`${apiBaseUrl}/v1/admin/client/get`, secretApiKey);\n      hydratedOptions = { ...hydratedOptions, clientId: resp.client_id };\n    }\n\n    return new MagicAdminSDK(secretApiKey, hydratedOptions);\n  }\n}\n", "explanation": "Here is a concise summary:\n\nThis block initializes an instance of `MagicAdminSDK` with the provided secret API key and options. It sets up API endpoints and assigns necessary modules for token management, user interaction, and utility functions.", "metadata": {"repo": "magiclabs/magic-admin-js", "file": "src/core/sdk.ts", "chunk_number": 2, "total_chunks": 2}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/magic-admin-js`\n\n**Purpose:** A JavaScript library for building custom Magic Admin interfaces.\n\n**Content:** Open-source codebase providing reusable UI components, APIs, and tools for creating personalized admin experiences with Magic Labs (a no-code platform).", "file_summary": "Here is a concise holistic summary of the file 'src/core/sdk.ts':\n\nThe `MagicAdminSDK` class provides utilities for interacting with Magic Admin SDK, enabling token management, user management, general utilities, and configuration options through a single instance initialized with an API key or custom configurations."}
{"code": "export { MagicAdminSDK as Magic } from './core/sdk';\nexport { MagicAdminSDKError as SDKError } from './core/sdk-exceptions';\nexport * from './types';\n", "explanation": "This block exports functions and classes from other files for use in a project, making them accessible under shorter aliases (\"Magic\" and \"SDKError\") or re-exporting all exported items from another file (\"types\").", "metadata": {"repo": "magiclabs/magic-admin-js", "file": "src/index.ts", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/magic-admin-js`\n\n**Purpose:** A JavaScript library for building custom Magic Admin interfaces.\n\n**Content:** Open-source codebase providing reusable UI components, APIs, and tools for creating personalized admin experiences with Magic Labs (a no-code platform).", "file_summary": "Here is a holistic summary of the file 'src/index.ts':\n\n**Exports essential functions and classes**\n\nThis file serves as an entry point, making various project components (functions and classes) accessible via shorter aliases or re-exporting entire exports from other files for convenient use throughout the project."}
{"code": "import { MagicAdminSDK } from '../core/sdk';\n\nexport abstract class BaseModule {\n  constructor(protected readonly sdk: MagicAdminSDK) {}\n}\n", "explanation": "**Summary**\n\nThis block defines an abstract base class `BaseModule` that takes a `MagicAdminSDK` instance as a dependency, allowing subclasses to inherit and utilize SDK functionality.", "metadata": {"repo": "magiclabs/magic-admin-js", "file": "src/modules/base-module.ts", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/magic-admin-js`\n\n**Purpose:** A JavaScript library for building custom Magic Admin interfaces.\n\n**Content:** Open-source codebase providing reusable UI components, APIs, and tools for creating personalized admin experiences with Magic Labs (a no-code platform).", "file_summary": "Here is a concise and to-the-point holistic summary of the file 'src/modules/base-module.ts':\n\n**Summary**\n\nThe `BaseModule` abstract class provides a foundation for custom modules, leveraging the `MagicAdminSDK` instance as a dependency to enable subclass inheritance and utilization of SDK functionality."}
{"code": "/* eslint-disable prefer-destructuring */\nimport { BaseModule } from '../base-module';\nimport { ParsedDIDToken } from '../../types';\nimport {\n  createFailedRecoveringProofError,\n  createIncorrectSignerAddressError,\n  createTokenExpiredError,\n  createMalformedTokenError,\n  createTokenCannotBeUsedYetError,\n  createAudienceMismatchError,\n} from '../../core/sdk-exceptions';\nimport { ecRecover } from '../../utils/ec-recover';\nimport { parseDIDToken } from '../../utils/parse-didt';\nimport { parsePublicAddressFromIssuer } from '../../utils/issuer';\n\nexport class TokenModule extends BaseModule {\n  public validate(DIDToken: string, attachment = 'none') {\n    let tokenSigner = '';\n    let attachmentSigner: string | null = null;\n    let claimedIssuer = '';\n    let parsedClaim;\n    let proof: string;\n    let claim: string;\n\n    try {\n      const tokenParseResult = parseDIDToken(DIDToken);\n      [proof, claim] = tokenParseResult.raw;\n      parsedClaim = tokenParseResult.withParsedClaim[1];", "explanation": "Here is a concise summary:\n\n**Purpose:** Validates a DID Token (Decentralized Identifier) string.\n\n**Functionality:** \n\n* Parses the DID Token using `parseDIDToken` function.\n* Extracts signers, issuer, and claim data from the parsed token.\n* Throws specific errors if validation fails (e.g. invalid signature, expired token, etc.).", "metadata": {"repo": "magiclabs/magic-admin-js", "file": "src/modules/token/index.ts", "chunk_number": 1, "total_chunks": 3}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/magic-admin-js`\n\n**Purpose:** A JavaScript library for building custom Magic Admin interfaces.\n\n**Content:** Open-source codebase providing reusable UI components, APIs, and tools for creating personalized admin experiences with Magic Labs (a no-code platform).", "file_summary": "Here is a concise summary of the file 'src/modules/token/index.ts':\n\n**Purpose:** Validates and verifies the integrity of Decentralized Identifier (DID) tokens.\n\n**Functionality:** Decodes DID tokens, checks validity, audience matching, and provides methods for issuer information and public address retrieval."}
{"code": "      claimedIssuer = parsePublicAddressFromIssuer(parsedClaim.iss);\n    } catch {\n      throw createMalformedTokenError();\n    }\n\n    try {\n      // Recover the token signer\n      tokenSigner = ecRecover(claim, proof).toLowerCase();\n\n      // Recover the attachment signer\n      if (attachment && attachment !== 'none') {\n        attachmentSigner = ecRecover(attachment, parsedClaim.add).toLowerCase();\n      }\n    } catch {\n      throw createFailedRecoveringProofError();\n    }\n\n    // Assert the expected signer\n    if (claimedIssuer !== tokenSigner || (attachmentSigner && claimedIssuer !== attachmentSigner)) {\n      throw createIncorrectSignerAddressError();\n    }\n\n    const timeSecs = Math.floor(Date.now() / 1000);\n    const nbfLeeway = 300; // 5 min grace period\n\n    // Assert the token is not expired\n    if (parsedClaim.ext < timeSecs) {\n      throw createTokenExpiredError();\n    }\n\n    // Assert the token is not used before allowed.\n    if (parsedClaim.nbf - nbfLeeway > timeSecs) {", "explanation": "Here is a concise summary of the purpose and functionality of this block:\n\n**Purpose:** Verify the validity of an Ethereum claim (token) by checking its signature, expiration date, and usage restrictions.\n\n**Functionality:**\n\n1. Recover the token signer from the claim's issuer address.\n2. Verify that the recovered signer matches the expected signer.\n3. Check if the token is not expired (not before timestamp).\n4. Ensure the token has not been used before its allowed time (nbf constraint).", "metadata": {"repo": "magiclabs/magic-admin-js", "file": "src/modules/token/index.ts", "chunk_number": 2, "total_chunks": 3}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/magic-admin-js`\n\n**Purpose:** A JavaScript library for building custom Magic Admin interfaces.\n\n**Content:** Open-source codebase providing reusable UI components, APIs, and tools for creating personalized admin experiences with Magic Labs (a no-code platform).", "file_summary": "Here is a concise summary of the file 'src/modules/token/index.ts':\n\n**Purpose:** Validates and verifies the integrity of Decentralized Identifier (DID) tokens.\n\n**Functionality:** Decodes DID tokens, checks validity, audience matching, and provides methods for issuer information and public address retrieval."}
{"code": "      throw createTokenCannotBeUsedYetError();\n    }\n\n    // Assert the audience matches the client ID.\n    if (this.sdk.clientId && parsedClaim.aud !== this.sdk.clientId) {\n      throw createAudienceMismatchError();\n    }\n  }\n\n  public decode(DIDToken: string): ParsedDIDToken {\n    const parsedToken = parseDIDToken(DIDToken);\n    return parsedToken.withParsedClaim;\n  }\n\n  public getPublicAddress(DIDToken: string): string {\n    const claim = this.decode(DIDToken)[1];\n    const claimedIssuer = claim.iss.split(':')[2];\n    return claimedIssuer;\n  }\n\n  public getIssuer(DIDToken: string): string {\n    return this.decode(DIDToken)[1].iss;\n  }\n}\n", "explanation": "Here is a concise summary:\n\nThis block appears to be a class or function that decodes and verifies DID (Decentralized Identifier) tokens. It ensures token validity, checks audience matching, and provides methods for decoding, getting public address, and retrieving issuer information from a DID token.", "metadata": {"repo": "magiclabs/magic-admin-js", "file": "src/modules/token/index.ts", "chunk_number": 3, "total_chunks": 3}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/magic-admin-js`\n\n**Purpose:** A JavaScript library for building custom Magic Admin interfaces.\n\n**Content:** Open-source codebase providing reusable UI components, APIs, and tools for creating personalized admin experiences with Magic Labs (a no-code platform).", "file_summary": "Here is a concise summary of the file 'src/modules/token/index.ts':\n\n**Purpose:** Validates and verifies the integrity of Decentralized Identifier (DID) tokens.\n\n**Functionality:** Decodes DID tokens, checks validity, audience matching, and provides methods for issuer information and public address retrieval."}
{"code": "import { BaseModule } from '../base-module';\nimport { createApiKeyMissingError } from '../../core/sdk-exceptions';\nimport { post, get } from '../../utils/rest';\nimport { generateIssuerFromPublicAddress } from '../../utils/issuer';\nimport { MagicUserMetadata, MagicWallet, WalletType } from '../../types';\n\nexport class UsersModule extends BaseModule {\n  // --- User logout endpoints\n\n  public async logoutByIssuer(issuer: string): Promise<void> {\n    if (!this.sdk.secretApiKey) throw createApiKeyMissingError();\n    const body = { issuer };\n    await post(`${this.sdk.apiBaseUrl}/v2/admin/auth/user/logout`, this.sdk.secretApiKey, body);\n  }\n\n  public async logoutByPublicAddress(publicAddress: string): Promise<void> {\n    const issuer = generateIssuerFromPublicAddress(publicAddress);\n    await this.logoutByIssuer(issuer);\n  }\n\n  public async logoutByToken(DIDToken: string): Promise<void> {\n    const issuer = this.sdk.token.getIssuer(DIDToken);\n    await this.logoutByIssuer(issuer);\n  }\n", "explanation": "**Summary**\n\nThe UsersModule class provides an interface for logging out Magic users based on their issuer, public address, or DID token. It utilizes API endpoints to perform the logout actions, requiring a secret API key for authentication.", "metadata": {"repo": "magiclabs/magic-admin-js", "file": "src/modules/users/index.ts", "chunk_number": 1, "total_chunks": 3}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/magic-admin-js`\n\n**Purpose:** A JavaScript library for building custom Magic Admin interfaces.\n\n**Content:** Open-source codebase providing reusable UI components, APIs, and tools for creating personalized admin experiences with Magic Labs (a no-code platform).", "file_summary": "Here is a concise summary of the file 'src/modules/users/index.ts':\n\n\"The UsersModule provides an interface for logging out Magic users and retrieving user metadata by issuer, DID token, or public address from an API.\""}
{"code": "  // --- User metadata endpoints\n\n  public async getMetadataByIssuer(issuer: string): Promise<MagicUserMetadata> {\n    return this.getMetadataByIssuerAndWallet(issuer, WalletType.NONE);\n  }\n\n  public async getMetadataByToken(DIDToken: string): Promise<MagicUserMetadata> {\n    const issuer = this.sdk.token.getIssuer(DIDToken);\n    return this.getMetadataByIssuer(issuer);\n  }\n\n  public async getMetadataByPublicAddress(publicAddress: string): Promise<MagicUserMetadata> {\n    const issuer = generateIssuerFromPublicAddress(publicAddress);\n    return this.getMetadataByIssuer(issuer);\n  }\n\n  public async getMetadataByTokenAndWallet(DIDToken: string, walletType: WalletType): Promise<MagicUserMetadata> {\n    const issuer = this.sdk.token.getIssuer(DIDToken);\n    return this.getMetadataByIssuerAndWallet(issuer, walletType);\n  }\n\n  public async getMetadataByPublicAddressAndWallet(\n    publicAddress: string,\n    walletType: WalletType,\n  ): Promise<MagicUserMetadata> {", "explanation": "**Purpose:** Provide user metadata retrieval endpoints.\n\n**Functionality:** A set of methods that fetch user metadata based on various identifiers (issuer, DID token, public address) with optional wallet type filtering.", "metadata": {"repo": "magiclabs/magic-admin-js", "file": "src/modules/users/index.ts", "chunk_number": 2, "total_chunks": 3}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/magic-admin-js`\n\n**Purpose:** A JavaScript library for building custom Magic Admin interfaces.\n\n**Content:** Open-source codebase providing reusable UI components, APIs, and tools for creating personalized admin experiences with Magic Labs (a no-code platform).", "file_summary": "Here is a concise summary of the file 'src/modules/users/index.ts':\n\n\"The UsersModule provides an interface for logging out Magic users and retrieving user metadata by issuer, DID token, or public address from an API.\""}
{"code": "    const issuer = generateIssuerFromPublicAddress(publicAddress);\n    return this.getMetadataByIssuerAndWallet(issuer, walletType);\n  }\n\n  public async getMetadataByIssuerAndWallet(issuer: string, walletType: WalletType): Promise<MagicUserMetadata> {\n    if (!this.sdk.secretApiKey) throw createApiKeyMissingError();\n\n    const data = await get<{\n      issuer: string | null;\n      public_address: string | null;\n      email: string | null;\n      oauth_provider: string | null;\n      phone_number: string | null;\n      username: string | null;\n      wallets: MagicWallet[] | null;\n    }>(`${this.sdk.apiBaseUrl}/v1/admin/auth/user/get`, this.sdk.secretApiKey, { issuer, wallet_type: walletType });\n\n    return {\n      issuer: data.issuer ?? null,\n      publicAddress: data.public_address ?? null,\n      email: data.email ?? null,\n      oauthProvider: data.oauth_provider ?? null,\n      phoneNumber: data.phone_number ?? null,\n      username: data.username ?? null,\n      wallets: data.wallets ?? null,\n    };\n  }\n}\n", "explanation": "Here is a concise summary:\n\nThis block retrieves user metadata by issuer and wallet type from an API, returning a structured object with user attributes such as email, public address, and wallets.", "metadata": {"repo": "magiclabs/magic-admin-js", "file": "src/modules/users/index.ts", "chunk_number": 3, "total_chunks": 3}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/magic-admin-js`\n\n**Purpose:** A JavaScript library for building custom Magic Admin interfaces.\n\n**Content:** Open-source codebase providing reusable UI components, APIs, and tools for creating personalized admin experiences with Magic Labs (a no-code platform).", "file_summary": "Here is a concise summary of the file 'src/modules/users/index.ts':\n\n\"The UsersModule provides an interface for logging out Magic users and retrieving user metadata by issuer, DID token, or public address from an API.\""}
{"code": "import { ethers } from \"ethers\";\nimport { BaseModule } from '../base-module';\nimport {createExpectedBearerStringError} from '../../core/sdk-exceptions';\nimport { ValidateTokenOwnershipResponse } from '../../types';\nimport { ERC1155ContractABI, ERC721ContractABI } from './ownershipABIs';\nimport { ErrorCode } from '../../types';\n\nexport class UtilsModule extends BaseModule {\n  /**\n   * Parse a raw DID Token from the given Authorization header.\n   */\n  public parseAuthorizationHeader(header: string) {\n    if (!header.toLowerCase().startsWith('bearer ')) {\n      throw createExpectedBearerStringError();\n    }\n\n    return header.substring(7);\n  }\n\n  // Token Gating function validates user ownership of wallet + NFT\n  public async validateTokenOwnership(\n    didToken: string,\n    contractAddress: string,\n    contractType: 'ERC721' | 'ERC1155',\n    rpcURL: string,\n    tokenId?: string,\n  ): Promise<ValidateTokenOwnershipResponse> {\n    // Make sure if ERC1155 has a tokenId\n    if (contractType === 'ERC1155' && !tokenId) {", "explanation": "**Summary**\n\nThis block of code defines a `UtilsModule` class that provides two main functions:\n\n1. **parseAuthorizationHeader**: Extracts a DID token from an Authorization header.\n2. **validateTokenOwnership**: Verifies user ownership of an NFT (ERC721 or ERC1155) using the provided contract address, RPC URL, and token ID (if applicable).", "metadata": {"repo": "magiclabs/magic-admin-js", "file": "src/modules/utils/index.ts", "chunk_number": 1, "total_chunks": 3}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/magic-admin-js`\n\n**Purpose:** A JavaScript library for building custom Magic Admin interfaces.\n\n**Content:** Open-source codebase providing reusable UI components, APIs, and tools for creating personalized admin experiences with Magic Labs (a no-code platform).", "file_summary": "Here is a concise and holistic summary of the file 'src/modules/utils/index.ts':\n\nThis module provides two utility functions for validating DID tokens and NFT ownership:\n\n1. `parseAuthorizationHeader`: Extracts a DID token from an Authorization header.\n2. `validateTokenOwnership`: Verifies user ownership of an NFT (ERC721 or ERC1155) using Ethers.js, checking validity and contract on-chain data.\n\nIn short, this module enables DID token validation and NFT ownership verification."}
{"code": "      throw new Error('ERC1155 requires a tokenId');\n    }\n    // Validate DID token\n    let walletAddress;\n    try {\n      await this.sdk.token.validate(didToken);\n      walletAddress = this.sdk.token.getPublicAddress(didToken);\n    } catch (e: any) {\n      // Check if code is malformed token\n      if (e.code && e.code === 'ERROR_MALFORMED_TOKEN') {\n        return {\n          valid: false,\n          error_code: 'UNAUTHORIZED',\n          message: 'Invalid DID token: ' + ErrorCode.MalformedTokenError,\n        };\n      }\n      if (e.code === ErrorCode.TokenExpired) {\n        return {\n          valid: false,\n          error_code: 'UNAUTHORIZED',\n          message: 'Invalid DID token: ' + ErrorCode.TokenExpired,\n        };\n      }\n      throw new Error(e);\n    }\n    \n\n    // Check on-chain if user owns NFT by calling contract with web3\n    let balance = BigInt(0);\n    const provider = new ethers.JsonRpcProvider(rpcURL);\n    if (contractType === 'ERC721') {", "explanation": "Here is a concise summary of the purpose and functionality of this block:\n\n**Purpose:** Validate a DID token and check ownership of an NFT on-chain.\n\n**Functionality:**\n\n1. Validate the DID token using a SDK.\n2. Check if the token is valid, and return an error if it's malformed or expired.\n3. Verify the user owns an NFT by calling a contract on-chain with Web3 (Ethers.js).", "metadata": {"repo": "magiclabs/magic-admin-js", "file": "src/modules/utils/index.ts", "chunk_number": 2, "total_chunks": 3}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/magic-admin-js`\n\n**Purpose:** A JavaScript library for building custom Magic Admin interfaces.\n\n**Content:** Open-source codebase providing reusable UI components, APIs, and tools for creating personalized admin experiences with Magic Labs (a no-code platform).", "file_summary": "Here is a concise and holistic summary of the file 'src/modules/utils/index.ts':\n\nThis module provides two utility functions for validating DID tokens and NFT ownership:\n\n1. `parseAuthorizationHeader`: Extracts a DID token from an Authorization header.\n2. `validateTokenOwnership`: Verifies user ownership of an NFT (ERC721 or ERC1155) using Ethers.js, checking validity and contract on-chain data.\n\nIn short, this module enables DID token validation and NFT ownership verification."}
{"code": "      const contract = new ethers.Contract(contractAddress, ERC721ContractABI, provider);\n      balance = BigInt(await contract.balanceOf(walletAddress));\n    } else {\n      const contract = new ethers.Contract(contractAddress, ERC1155ContractABI, provider);\n      balance = BigInt(await contract.balanceOf(walletAddress, tokenId));\n    }\n    if (balance > BigInt(0)) {\n      return {\n        valid: true,\n        error_code: '',\n        message: '',\n      };\n    }\n    return {\n      valid: false,\n      error_code: 'NO_OWNERSHIP',\n      message: 'User does not own this token.',\n    };\n  }\n}\n", "explanation": "Here is a concise summary:\n\n**Functionality:** Verifies user ownership of an NFT (ERC721 or ERC1155) using the Ethers.js library.\n\n**Purpose:** Returns `valid: true` if the user owns the token, otherwise returns an error message indicating \"NO_OWNERSHIP\".", "metadata": {"repo": "magiclabs/magic-admin-js", "file": "src/modules/utils/index.ts", "chunk_number": 3, "total_chunks": 3}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/magic-admin-js`\n\n**Purpose:** A JavaScript library for building custom Magic Admin interfaces.\n\n**Content:** Open-source codebase providing reusable UI components, APIs, and tools for creating personalized admin experiences with Magic Labs (a no-code platform).", "file_summary": "Here is a concise and holistic summary of the file 'src/modules/utils/index.ts':\n\nThis module provides two utility functions for validating DID tokens and NFT ownership:\n\n1. `parseAuthorizationHeader`: Extracts a DID token from an Authorization header.\n2. `validateTokenOwnership`: Verifies user ownership of an NFT (ERC721 or ERC1155) using Ethers.js, checking validity and contract on-chain data.\n\nIn short, this module enables DID token validation and NFT ownership verification."}
{"code": "export const ERC721ContractABI = [\n    \"function balanceOf(address owner) view returns (uint balance)\",\n]\nexport const ERC1155ContractABI = [\n    \"function balanceOf(address owner, uint id) view returns (uint balance)\",\n]\n", "explanation": "Here is a concise summary:\n\nThis code defines two contracts' Application Binary Interfaces (ABIs): one for an ERC721 contract that returns a user's token balance, and another for an ERC1155 contract that returns a specific token ID's balance.", "metadata": {"repo": "magiclabs/magic-admin-js", "file": "src/modules/utils/ownershipABIs.ts", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/magic-admin-js`\n\n**Purpose:** A JavaScript library for building custom Magic Admin interfaces.\n\n**Content:** Open-source codebase providing reusable UI components, APIs, and tools for creating personalized admin experiences with Magic Labs (a no-code platform).", "file_summary": "Here is a concise and holistic summary of the file 'src/modules/utils/ownershipABIs.ts':\n\n**Summary:** This file defines ABIs for two contracts: an ERC721 contract returning user token balances, and an ERC1155 contract returning specific token ID balances."}
{"code": "/** The shape of metadata encoded within a DID Token. */\nexport interface Claim {\n  iat: number; // Issued At Timestamp\n  ext: number; // Expiration Timestamp\n  iss: string; // Issuer of DID Token\n  sub: string; // Subject\n  aud: string; // Audience\n  nbf: number; // Not Before Timestamp\n  tid: string; // DID Token ID\n  add: string; // Encrypted signature of arbitrary data\n}\n\nexport type ParsedDIDToken = [string, Claim];\n", "explanation": "Here is a concise summary:\n\n**Purpose:** Define the structure of metadata in a Digital Identity Token (DID Token).\n\n**Functionality:** Specify key-value pairs for timestamping, identification, and data encryption within a DID Token.", "metadata": {"repo": "magiclabs/magic-admin-js", "file": "src/types/didt-types.ts", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/magic-admin-js`\n\n**Purpose:** A JavaScript library for building custom Magic Admin interfaces.\n\n**Content:** Open-source codebase providing reusable UI components, APIs, and tools for creating personalized admin experiences with Magic Labs (a no-code platform).", "file_summary": "Here's a concise and holistic summary of the file 'src/types/didt-types.ts':\n\n**Purpose:** Define metadata structure in Digital Identity Tokens (DID Tokens).\n\n**Functionality:** Specify timestamping, identification, and encryption details for DID Tokens."}
{"code": "export enum ErrorCode {\n  MissingAuthHeader = 'ERROR_MISSING_AUTH_HEADER',\n  TokenExpired = 'ERROR_DIDT_EXPIRED',\n  TokenCannotBeUsedYet = 'ERROR_DIDT_CANNOT_BE_USED_YET',\n  IncorrectSignerAddress = 'ERROR_INCORRECT_SIGNER_ADDR',\n  FailedRecoveryProof = 'ERROR_FAILED_RECOVERING_PROOF',\n  ApiKeyMissing = 'ERROR_SECRET_API_KEY_MISSING',\n  MalformedTokenError = 'ERROR_MALFORMED_TOKEN',\n  ServiceError = 'SERVICE_ERROR',\n  ExpectedBearerString = 'EXPECTED_BEARER_STRING',\n  AudienceMismatch = 'ERROR_AUDIENCE_MISMATCH',\n}\n", "explanation": "**Summary:**\n\nThis block defines an enumeration (enum) called `ErrorCode` that contains a list of predefined error codes with descriptive names. It appears to be used for handling errors in an API or authentication system, providing a standardized way to categorize and report errors.", "metadata": {"repo": "magiclabs/magic-admin-js", "file": "src/types/exception-types.ts", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/magic-admin-js`\n\n**Purpose:** A JavaScript library for building custom Magic Admin interfaces.\n\n**Content:** Open-source codebase providing reusable UI components, APIs, and tools for creating personalized admin experiences with Magic Labs (a no-code platform).", "file_summary": "Here is a concise summary:\n\n**Summary:**\n\nThe \"src/types/exception-types.ts\" file defines a standardized `ErrorCode` enum with descriptive error codes for API/authentication error handling."}
{"code": "export * from './didt-types';\nexport * from './exception-types';\nexport * from './sdk-types';\nexport * from './wallet-types';\nexport * from './utils-types';\n", "explanation": "**Purpose:** Exports types from various modules.\n\n**Functionality:** Re-exports types from specified modules, making them available globally.", "metadata": {"repo": "magiclabs/magic-admin-js", "file": "src/types/index.ts", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/magic-admin-js`\n\n**Purpose:** A JavaScript library for building custom Magic Admin interfaces.\n\n**Content:** Open-source codebase providing reusable UI components, APIs, and tools for creating personalized admin experiences with Magic Labs (a no-code platform).", "file_summary": "Here is a concise and to-the-point holistic summary:\n\n**Summary:** The `src/types/index.ts` file serves as a centralized hub for exporting types from various modules, making them globally accessible."}
{"code": "export interface MagicAdminSDKAdditionalConfiguration {\n  endpoint?: string;\n  clientId?: string | null;\n}\n\nexport interface MagicWallet {\n  network: string | null;\n  publicAddress: string | null;\n  walletType: string | null;\n}\n\nexport interface MagicUserMetadata {\n  issuer: string | null;\n  publicAddress: string | null;\n  email: string | null;\n  oauthProvider: string | null;\n  phoneNumber: string | null;\n  username: string | null;\n  wallets: MagicWallet[] | null;\n}\n", "explanation": "Here is a summary of the purpose and functionality of this block:\n\n**Defining interfaces for MagicAdmin SDK configuration, user wallet data, and user metadata**\n\nThis code defines three interfaces:\n\n1. `MagicAdminSDKAdditionalConfiguration`: for additional configuration settings.\n2. `MagicWallet`: for storing wallet information (network, public address, and type).\n3. `MagicUserMetadata`: for storing user metadata (issuer, public address, email, etc.).", "metadata": {"repo": "magiclabs/magic-admin-js", "file": "src/types/sdk-types.ts", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/magic-admin-js`\n\n**Purpose:** A JavaScript library for building custom Magic Admin interfaces.\n\n**Content:** Open-source codebase providing reusable UI components, APIs, and tools for creating personalized admin experiences with Magic Labs (a no-code platform).", "file_summary": "Here is a concise and to-the-point summary:\n\n**src/types/sdk-types.ts**\n\nDefines interfaces for MagicAdmin SDK configuration, wallet data, and user metadata, including additional configuration settings, wallet information, and user profile details."}
{"code": "export interface ValidateTokenOwnershipResponse {\n  valid: boolean;\n  error_code: string;\n  message: string;\n}\n", "explanation": "This is a TypeScript interface definition for a response object, specifically designed to hold the result of validating token ownership. \n\nIt has three properties:\n\n* `valid`: a boolean indicating whether the validation was successful\n* `error_code`: a string representing any error code that occurred\n* `message`: a string describing the outcome or error message", "metadata": {"repo": "magiclabs/magic-admin-js", "file": "src/types/utils-types.ts", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/magic-admin-js`\n\n**Purpose:** A JavaScript library for building custom Magic Admin interfaces.\n\n**Content:** Open-source codebase providing reusable UI components, APIs, and tools for creating personalized admin experiences with Magic Labs (a no-code platform).", "file_summary": "Here is a concise summary of the file 'src/types/utils-types.ts':\n\n**src/types/utils-types.ts**: Defines a response object interface for token ownership validation, containing status (`valid`), error code (`error_code`), and outcome/message (`message`)."}
{"code": "export enum WalletType {\n  ETH = 'ETH',\n  HARMONY = 'HARMONY',\n  ICON = 'ICON',\n  FLOW = 'FLOW',\n  TEZOS = 'TEZOS',\n  ZILLIQA = 'ZILLIQA',\n  POLKADOT = 'POLKADOT',\n  SOLANA = 'SOLANA',\n  AVAX = 'AVAX',\n  ALGOD = 'ALGOD',\n  COSMOS = 'COSMOS',\n  CELO = 'CELO',\n  BITCOIN = 'BITCOIN',\n  NEAR = 'NEAR',\n  HELIUM = 'HELIUM',\n  CONFLUX = 'CONFLUX',\n  TERRA = 'TERRA',\n  TAQUITO = 'TAQUITO',\n  ED = 'ED',\n  HEDERA = 'HEDERA',\n  NONE = 'NONE',\n  ANY = 'ANY',\n}\n", "explanation": "This block defines an enumeration (enum) of wallet types, listing various blockchain networks and cryptocurrencies supported by a wallet system.", "metadata": {"repo": "magiclabs/magic-admin-js", "file": "src/types/wallet-types.ts", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/magic-admin-js`\n\n**Purpose:** A JavaScript library for building custom Magic Admin interfaces.\n\n**Content:** Open-source codebase providing reusable UI components, APIs, and tools for creating personalized admin experiences with Magic Labs (a no-code platform).", "file_summary": "Here is a concise and to-the-point holistic summary:\n\n`wallet-types.ts`: Enumerates wallet types for various blockchain networks and cryptocurrencies supported by a wallet system."}
{"code": "/*\n * Check if global object window is defined\n */\nexport function isBrowser() {\n  return typeof window !== 'undefined';\n}\n\n/*\n * Decode base64 value, returns string\n * @Params: string\n */\nexport function decodeValue(value: string): string {\n  if (!value) {\n    return '';\n  }\n\n  const valueToString = value.toString();\n\n  if (isBrowser()) {\n    return atob(valueToString);\n  }\n\n  const buff = Buffer.from(valueToString, 'base64');\n  return buff.toString('ascii');\n}\n", "explanation": "Here is a concise summary:\n\n**Two functions:**\n\n1. `isBrowser()`: Checks if the code is running in a browser environment.\n2. `decodeValue()` : Decodes a base64 string into a regular string, using atob() in browsers and Buffer in non-browser environments.", "metadata": {"repo": "magiclabs/magic-admin-js", "file": "src/utils/codec.ts", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/magic-admin-js`\n\n**Purpose:** A JavaScript library for building custom Magic Admin interfaces.\n\n**Content:** Open-source codebase providing reusable UI components, APIs, and tools for creating personalized admin experiences with Magic Labs (a no-code platform).", "file_summary": "Here is a holistic summary of the file 'src/utils/codec.ts':\n\n**Codec Utility Functions**\n\nThis module provides two utility functions for encoding and decoding data:\n\n1. `isBrowser()`: Checks if the code is running in a browser environment.\n2. `decodeValue()`: Decodes base64 strings into regular strings, using atob() in browsers and Buffer in non-browser environments."}
{"code": "import { keccak256 } from 'ethereum-cryptography/keccak.js';\nimport { ecdsaRecover, publicKeyConvert } from 'ethereum-cryptography/secp256k1-compat.js';\nimport { utf8ToBytes, bytesToHex, hexToBytes } from 'ethereum-cryptography/utils.js';\n\nfunction hashPersonalMessage(message: Uint8Array): Uint8Array {\n  const prefix = utf8ToBytes(`\\u0019Ethereum Signed Message:\\n${message.length}`);\n  const totalLength = prefix.length + message.length;\n\n  const output = new Uint8Array(totalLength);\n  output.set(prefix);\n  output.set(message, prefix.length);\n\n  return keccak256(output);\n}\n\nfunction getRecoveryBit(signature: Uint8Array): number {\n  const bit = signature[64];\n  return bit - 27;\n}\n\nfunction prepareSignature(signature: string): string {\n  return signature.slice(2); // strip the `0x` prefix\n}\n\nfunction publicKeyToAddress(publicKey: Uint8Array): string {\n  const address = keccak256(publicKey.slice(1)).slice(-20);\n  return `0x${bytesToHex(address)}`;\n}\n\n/**\n * Recover the signer from an Elliptic Curve signature.\n */", "explanation": "**Purpose:** Ethereum signature verification utility functions.\n\n**Functionality:**\n\n* Hash personal messages for signing\n* Extract recovery bit from signatures\n* Prepare signatures for use (strip prefix)\n* Convert public keys to Ethereum addresses", "metadata": {"repo": "magiclabs/magic-admin-js", "file": "src/utils/ec-recover.ts", "chunk_number": 1, "total_chunks": 2}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/magic-admin-js`\n\n**Purpose:** A JavaScript library for building custom Magic Admin interfaces.\n\n**Content:** Open-source codebase providing reusable UI components, APIs, and tools for creating personalized admin experiences with Magic Labs (a no-code platform).", "file_summary": "Here is a concise summary of the file 'src/utils/ec-recover.ts':\n\n\"Ethereum signature verification utility functions for recovering public keys from signatures.\""}
{"code": "export function ecRecover(data: string, signature: string) {\n  // Use ecdsaRecover on the Proof, to validate if it recovers to the expected\n  // Claim, and expected Signer Address.\n\n  const msg = utf8ToBytes(data);\n  const sig = hexToBytes(prepareSignature(signature));\n  const recovery = getRecoveryBit(sig);\n  const hash = hashPersonalMessage(msg);\n\n  const publicKey = ecdsaRecover(sig.slice(0, 64), recovery, hash, false);\n  const assertPublicKey = publicKeyConvert(publicKey, false);\n\n  return publicKeyToAddress(assertPublicKey);\n}\n", "explanation": "Here is a concise summary:\n\n**ecRecover function**\n\nRecovers a public key from an Ethereum signature, verifying its validity against a provided claim and expected signer address.\n\n(Note: I assume this is code, possibly written in JavaScript or TypeScript)", "metadata": {"repo": "magiclabs/magic-admin-js", "file": "src/utils/ec-recover.ts", "chunk_number": 2, "total_chunks": 2}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/magic-admin-js`\n\n**Purpose:** A JavaScript library for building custom Magic Admin interfaces.\n\n**Content:** Open-source codebase providing reusable UI components, APIs, and tools for creating personalized admin experiences with Magic Labs (a no-code platform).", "file_summary": "Here is a concise summary of the file 'src/utils/ec-recover.ts':\n\n\"Ethereum signature verification utility functions for recovering public keys from signatures.\""}
{"code": "import { RequestInit, Response } from 'node-fetch';\n\ntype Fetch = (url: string, init?: RequestInit) => Promise<Response>;\n\n/* istanbul ignore next */\nexport const fetch: Fetch = !(globalThis as any).fetch\n  ? (url, init) => import('node-fetch').then(({ default: f }) => f(url, init))\n  : (globalThis as any).fetch;\n", "explanation": "Here is a concise summary of the block:\n\n**Function**: Provides a polyfill for the `fetch` API, ensuring it is available globally even if not natively supported by the environment.\n\nIn simpler terms: It makes sure you can use the `fetch` function everywhere, regardless of whether your environment supports it out-of-the-box.", "metadata": {"repo": "magiclabs/magic-admin-js", "file": "src/utils/fetch.ts", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/magic-admin-js`\n\n**Purpose:** A JavaScript library for building custom Magic Admin interfaces.\n\n**Content:** Open-source codebase providing reusable UI components, APIs, and tools for creating personalized admin experiences with Magic Labs (a no-code platform).", "file_summary": "Here is a concise summary:\n\n**Fetch Utility**: A polyfill for the fetch API, ensuring global availability even in environments without native support."}
{"code": "export function generateIssuerFromPublicAddress(publicAddress: string, method = 'ethr') {\n  return `did:${method}:${publicAddress}`;\n}\n\nexport function parsePublicAddressFromIssuer(issuer: string) {\n  return issuer.split(':')[2]?.toLowerCase() ?? '';\n}\n", "explanation": "Here is a concise summary:\n\nThis block contains two functions:\n\n1. **generateIssuerFromPublicAddress**: Creates a decentralized identifier (did) from a public Ethereum address.\n2. **parsePublicAddressFromIssuer**: Extracts a public Ethereum address from a did string.", "metadata": {"repo": "magiclabs/magic-admin-js", "file": "src/utils/issuer.ts", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/magic-admin-js`\n\n**Purpose:** A JavaScript library for building custom Magic Admin interfaces.\n\n**Content:** Open-source codebase providing reusable UI components, APIs, and tools for creating personalized admin experiences with Magic Labs (a no-code platform).", "file_summary": "Here is a concise summary of the file 'src/utils/issuer.ts':\n\n**Issuer Utility Functions**\n\nThis module provides two functions for working with decentralized identifiers (did) related to Ethereum addresses:\n\n* `generateIssuerFromPublicAddress`: Creates a did from a public Ethereum address.\n* `parsePublicAddressFromIssuer`: Extracts a public Ethereum address from a did string."}
{"code": "import { decodeValue } from './codec';\nimport { isDIDTClaim } from './type-guards';\nimport { createMalformedTokenError } from '../core/sdk-exceptions';\nimport { Claim, ParsedDIDToken } from '../types';\n\ninterface ParseDIDTokenResult {\n  raw: [string, string];\n  withParsedClaim: ParsedDIDToken;\n}\n\n/**\n * Parses a DID Token so that the encoded `claim` is in object form.\n */\nexport function parseDIDToken(didToken: string): ParseDIDTokenResult {\n  try {\n    const [proof, claim] = JSON.parse(decodeValue(didToken)) as [string, string];\n    const parsedClaim = JSON.parse(claim) as Claim;\n    if (isDIDTClaim(parsedClaim)) return { raw: [proof, claim], withParsedClaim: [proof, parsedClaim] };\n    throw new Error();\n  } catch {\n    throw createMalformedTokenError();\n  }\n}\n", "explanation": "Here is a concise summary:\n\n**Purpose:** Parse a DID Token into a structured format.\n\n**Functionality:** Decodes and parses a DID token string, extracting claim data from JSON objects and returning it in a formatted object with optional claim parsing.", "metadata": {"repo": "magiclabs/magic-admin-js", "file": "src/utils/parse-didt.ts", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/magic-admin-js`\n\n**Purpose:** A JavaScript library for building custom Magic Admin interfaces.\n\n**Content:** Open-source codebase providing reusable UI components, APIs, and tools for creating personalized admin experiences with Magic Labs (a no-code platform).", "file_summary": "Here is a concise summary of the file 'src/utils/parse-didt.ts':\n\n**Summary:** Parses a DID Token into a structured format, decoding and extracting claim data from JSON objects."}
{"code": "import { RequestInit } from 'node-fetch';\n\nimport { fetch } from './fetch';\nimport { createServiceError } from '../core/sdk-exceptions';\n\ninterface MagicAPIResponse<TData> {\n  data?: TData;\n  error_code?: string;\n  message?: string;\n  status?: string | number;\n}\n\n/**\n * Performs a `fetch` to the given URL with the configured `init` object.\n */\nasync function emitRequest<TResponse>(url: string, init?: RequestInit): Promise<Partial<TResponse>> {\n  const json: MagicAPIResponse<TResponse> = await fetch(url, init)\n    .then((res) => res.json())\n    .catch((err) => {\n      throw createServiceError(err);\n    });\n\n  if (json.status !== 'ok') {\n    throw createServiceError(json);\n  }\n\n  return json.data ?? {};\n}\n\n/**\n * Generates an encoded URL with query string from a dictionary of values.\n */\nfunction generateQuery<T extends Record<string, string | number | boolean>>(url: string, params?: T) {\n  let query = '?';\n  if (params) {\n    for (const [key, value] of Object.entries(params)) query += `${key}=${value}&`;", "explanation": "**Summary:**\n\nThis block provides a set of functions for making HTTP requests to a Magic API:\n\n1. `emitRequest`: Performs a fetch request to the given URL with optional initialization, returns a promise with a partial response object.\n2. `generateQuery`: Generates an encoded query string from a dictionary of values.\n\nBoth functions are designed to handle errors and return structured data.", "metadata": {"repo": "magiclabs/magic-admin-js", "file": "src/utils/rest.ts", "chunk_number": 1, "total_chunks": 2}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/magic-admin-js`\n\n**Purpose:** A JavaScript library for building custom Magic Admin interfaces.\n\n**Content:** Open-source codebase providing reusable UI components, APIs, and tools for creating personalized admin experiences with Magic Labs (a no-code platform).", "file_summary": "Here is a concise summary of the file 'src/utils/rest.ts':\n\n**Magic API Utility Functions**\n\nThis file provides functions for interacting with Magic's API, including posting and getting data using a secret API key, as well as helper functions for generating queries and handling requests."}
{"code": "    query = query.slice(0, -1); // Remove trailing \"&\"\n  }\n  return params ? `${url}${query}` : url;\n}\n\n/**\n * POSTs to Magic's API.\n */\nexport function post<TBody extends Record<string, string | number | boolean>, TResponse>(\n  url: string,\n  secretApiKey: string,\n  body: TBody,\n) {\n  return emitRequest<TResponse>(url, {\n    method: 'POST',\n    headers: { 'X-Magic-Secret-key': secretApiKey },\n    body: JSON.stringify(body),\n  });\n}\n\n/**\n * GETs from Magic's API.\n */\nexport function get<TResponse>(url: string, secretApiKey: string, params?: any) {\n  const urlWithParams = generateQuery(url, params);\n  return emitRequest<TResponse>(urlWithParams, {\n    method: 'GET',\n    headers: { 'X-Magic-Secret-key': secretApiKey },\n  });\n}\n", "explanation": "Here is a concise summary of the code block:\n\n**Functions for interacting with Magic's API**\n\n* `post`: Posts data to Magic's API using a provided secret API key.\n* `get`: Retrieves data from Magic's API, optionally appending query parameters, using a provided secret API key.\n* A helper function `emitRequest` is not shown but appears to be used by both `post` and `get`.", "metadata": {"repo": "magiclabs/magic-admin-js", "file": "src/utils/rest.ts", "chunk_number": 2, "total_chunks": 2}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/magic-admin-js`\n\n**Purpose:** A JavaScript library for building custom Magic Admin interfaces.\n\n**Content:** Open-source codebase providing reusable UI components, APIs, and tools for creating personalized admin experiences with Magic Labs (a no-code platform).", "file_summary": "Here is a concise summary of the file 'src/utils/rest.ts':\n\n**Magic API Utility Functions**\n\nThis file provides functions for interacting with Magic's API, including posting and getting data using a secret API key, as well as helper functions for generating queries and handling requests."}
{"code": "/*\n  This file contains our type guards.\n\n  Type guards are a feature of TypeScript which narrow the type signature of\n  intesection types (types that can be one thing or another).\n\n  @see\n  https://www.typescriptlang.org/docs/handbook/advanced-types.html#type-guards-and-differentiating-types\n */\n\nimport { Claim } from '../types';\n\n/** Assert `value` is `undefined`. */\nfunction isUndefined(value: any): value is undefined {\n  return typeof value === 'undefined';\n}\n\n/** Assert `value` is `null`. */\nfunction isNull(value: any): value is null {\n  return value === null;\n}\n\n/** Assert `value` is `null` or `undefined`. */\nfunction isNil(value: any): value is null | undefined {\n  return isNull(value) || isUndefined(value);\n}\n\n/** Assert `value` contains all required DID Token members. */\nexport function isDIDTClaim(value: any): value is Claim {\n  return (\n    !isNil(value) &&\n    !isNil(value.iat) &&\n    !isNil(value.ext) &&\n    !isNil(value.iss) &&\n    !isNil(value.sub) &&\n    !isNil(value.aud) &&\n    !isNil(value.nbf) &&", "explanation": "**Purpose:** This block contains type guards, which are functions that narrow the type signature of intersection types in TypeScript.\n\n**Functionality:**\n\n* 3 type guard functions:\n\t+ `isUndefined`: checks if a value is `undefined`.\n\t+ `isNull`: checks if a value is `null`.\n\t+ `isNil`: checks if a value is either `null` or `undefined`.\n* 1 export function:\n\t+ `isDIDTClaim`: checks if an object has all required properties to be considered a valid DID Token claim.", "metadata": {"repo": "magiclabs/magic-admin-js", "file": "src/utils/type-guards.ts", "chunk_number": 1, "total_chunks": 2}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/magic-admin-js`\n\n**Purpose:** A JavaScript library for building custom Magic Admin interfaces.\n\n**Content:** Open-source codebase providing reusable UI components, APIs, and tools for creating personalized admin experiences with Magic Labs (a no-code platform).", "file_summary": "Here's a holistic summary of the file 'src/utils/type-guards.ts':\n\nThis file contains type guard functions that narrow intersection types in TypeScript, including checks for undefined, null, and nil values. It also exports a single function, `isDIDTClaim`, which validates an object against specific properties required for a valid DID Token claim."}
{"code": "    !isNil(value.tid) &&\n    !isNil(value.add)\n  );\n}\n", "explanation": "This is a conditional statement that checks if two properties (`tid` and `add`) of an object (`value`) are not null or undefined, using the `!isNil()` function.", "metadata": {"repo": "magiclabs/magic-admin-js", "file": "src/utils/type-guards.ts", "chunk_number": 2, "total_chunks": 2}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/magic-admin-js`\n\n**Purpose:** A JavaScript library for building custom Magic Admin interfaces.\n\n**Content:** Open-source codebase providing reusable UI components, APIs, and tools for creating personalized admin experiences with Magic Labs (a no-code platform).", "file_summary": "Here's a holistic summary of the file 'src/utils/type-guards.ts':\n\nThis file contains type guard functions that narrow intersection types in TypeScript, including checks for undefined, null, and nil values. It also exports a single function, `isDIDTClaim`, which validates an object against specific properties required for a valid DID Token claim."}
{"code": "export const API_FULL_URL = 'https://api.magic.link';\nexport const API_KEY = 'sk_test_123';\n\nexport const VALID_DIDT =\n  'WyIweGUwMjQzNTVlNDI5ZGNhZDM1MTdhZDk5ZWEzNDEwYWJmZDQ1YjBiNjM5OGIwNjY1NGRiYTQxNzljODdlMTYyNzgxNTc1YjA5ODFjNjU4ZjcwMjYwZTQ5MjMwZGE5NDg4YTA0ZDk5NzBlYjM4ZTZmZGRlY2Q2NTA5YTAyN2IwOGI5MWIiLCJ7XCJpYXRcIjoxNTg1MDExMjA0LFwiZXh0XCI6MTkwMDQxMTIwNCxcImlzc1wiOlwiZGlkOmV0aHI6MHhCMmVjOWI2MTY5OTc2MjQ5MWI2NTQyMjc4RTlkRkVDOTA1MGY4MDg5XCIsXCJzdWJcIjpcIjZ0RlhUZlJ4eWt3TUtPT2pTTWJkUHJFTXJwVWwzbTNqOERReWNGcU8ydHc9XCIsXCJhdWRcIjpcImRpZDptYWdpYzpmNTQxNjhlOS05Y2U5LTQ3ZjItODFjOC03Y2IyYTk2YjI2YmFcIixcIm5iZlwiOjE1ODUwMTEyMDQsXCJ0aWRcIjpcIjJkZGY1OTgzLTk4M2ItNDg3ZC1iNDY0LWJjNWUyODNhMDNjNVwiLFwiYWRkXCI6XCIweDkxZmJlNzRiZTZjNmJmZDhkZGRkZDkzMDExYjA1OWI5MjUzZjEwNzg1NjQ5NzM4YmEyMTdlNTFlMGUzZGYxMzgxZDIwZjUyMWEzNjQxZjIzZWI5OWNjYjM0ZTNiYzVkOTYzMzJmZGViYzhlZmE1MGNkYjQxNWU0NTUwMDk1MmNkMWNcIn0iXQ==';\n", "explanation": "Here is a summary of the block:\n\n**Purpose:** Define constants for API keys and URLs.\n\n**Functionality:**\n\n* `API_FULL_URL`: URL for the Magic Link API.\n* `API_KEY`: Secret key for testing purposes.\n* `VALID_DIDT`: A string representing a JSON Web Token (JWT) with encrypted data.", "metadata": {"repo": "magiclabs/magic-admin-js", "file": "test/lib/constants.ts", "chunk_number": 1, "total_chunks": 9}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/magic-admin-js`\n\n**Purpose:** A JavaScript library for building custom Magic Admin interfaces.\n\n**Content:** Open-source codebase providing reusable UI components, APIs, and tools for creating personalized admin experiences with Magic Labs (a no-code platform).", "file_summary": "Here's a concise summary:\n\n**test/lib/constants.ts:**\n\nThis file exports several constants for API keys, URLs, and Decentralized Identifiers (DIDs). It defines:\n\n* Constants for Magic Link API keys and URLs\n* A valid DID in JSON Web Token (JWT) format with encrypted data\n* Valid claims for a DID in the DID-T specification\n* Cryptographic data, including a DID token, audit record, and public key hash\n\nThese constants appear to be used for testing or demonstrating digital identity verification."}
{"code": "export const DECODED_DIDT = `[\"0xe024355e429dcad3517ad99ea3410abfd45b0b6398b06654dba4179c87e162781575b0981c658f70260e49230da9488a04d9970eb38e6fddecd6509a027b08b91b\",\"{\\\\\"iat\\\\\":1585011204,\\\\\"ext\\\\\":1900411204,\\\\\"iss\\\\\":\\\\\"did:ethr:0xB2ec9b61699762491b6542278E9dFEC9050f8089\\\\\",\\\\\"sub\\\\\":\\\\\"6tFXTfRxykwMKOOjSMbdPrEMrpUl3m3j8DQycFqO2tw=\\\\\",\\\\\"aud\\\\\":\\\\\"did:magic:f54168e9-9ce9-47f2-81c8-7cb2a96b26ba\\\\\",\\\\\"nbf\\\\\":1585011204,\\\\\"tid\\\\\":\\\\\"2ddf5983-983b-487d-b464-bc5e283a03c5\\\\\",\\\\\"add\\\\\":\\\\\"0x91fbe74be6c6bfd8ddddd93011b059b9253f10785649738ba217e51e0e3df1381d20f521a3641f23eb99ccb34e3bc5d96332fdebc8efa50cdb415e45500952cd1c\\\\\"}\"]`;\nexport const VALID_DIDT_WITH_INVALID_RECOVERY_BIT =", "explanation": "Here is a concise summary:\n\n**Block Purpose:** Exporting a DID (Decentralized Identifier) in JSON Web Token (JWT) format.\n\n**Functionality:** The block exports two values: \n\n1. A list of strings representing a DID.\n2. A JSON object containing additional metadata for the DID.", "metadata": {"repo": "magiclabs/magic-admin-js", "file": "test/lib/constants.ts", "chunk_number": 2, "total_chunks": 9}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/magic-admin-js`\n\n**Purpose:** A JavaScript library for building custom Magic Admin interfaces.\n\n**Content:** Open-source codebase providing reusable UI components, APIs, and tools for creating personalized admin experiences with Magic Labs (a no-code platform).", "file_summary": "Here's a concise summary:\n\n**test/lib/constants.ts:**\n\nThis file exports several constants for API keys, URLs, and Decentralized Identifiers (DIDs). It defines:\n\n* Constants for Magic Link API keys and URLs\n* A valid DID in JSON Web Token (JWT) format with encrypted data\n* Valid claims for a DID in the DID-T specification\n* Cryptographic data, including a DID token, audit record, and public key hash\n\nThese constants appear to be used for testing or demonstrating digital identity verification."}
{"code": "  'WyIweGUwMjQzNTVlNDI5ZGNhZDM1MTdhZDk5ZWEzNDEwYWJmZDQ1YjBiNjM5OGIwNjY1NGRiYTQxNzljODdlMTYyNzgxNTc1YjA5ODFjNjU4ZjcwMjYwZTQ5MjMwZGE5NDg4YTA0ZDk5NzBlYjM4ZTZmZGRlY2Q2NTA5YTAyN2IwOGI5MjMiLCJ7XCJpYXRcIjoxNTg1MDExMjA0LFwiZXh0XCI6MTkwMDQxMTIwNCxcImlzc1wiOlwiZGlkOmV0aHI6MHhCMmVjOWI2MTY5OTc2MjQ5MWI2NTQyMjc4RTlkRkVDOTA1MGY4MDg5XCIsXCJzdWJcIjpcIjZ0RlhUZlJ4eWt3TUtPT2pTTWJkUHJFTXJwVWwzbTNqOERReWNGcU8ydHc9XCIsXCJhdWRcIjpcImRpZDptYWdpYzpmNTQxNjhlOS05Y2U5LTQ3ZjItODFjOC03Y2IyYTk2YjI2YmFcIixcIm5iZlwiOjE1ODUwMTEyMDQsXCJ0aWRcIjpcIjJkZGY1OTgzLTk4M2ItNDg3ZC1iNDY0LWJjNWUyODNhMDNjNVwiLFwiYWRkXCI6XCIweDkxZmJlNzRiZTZjNmJmZDhkZGRkZDkzMDExYjA1OWI5MjUzZjEwNzg1NjQ5NzM4YmEyMTdlNTFlMGUzZGYxMzgxZDIwZjUyMWEzNjQxZjIzZWI5OWNjYjM0ZTNiYzVkOTYzMzJmZGViYzhlZmE1MGNkYjQxNWU0NTUwMDk1MmNkMWNcIn0iXQ==';\n\nexport const VALID_DIDT_PARSED_CLAIMS = {\n  iat: 1585011204,\n  ext: 1900411204,\n  iss: 'did:ethr:0xB2ec9b61699762491b6542278E9dFEC9050f8089',\n  sub: '6tFXTfRxykwMKOOjSMbdPrEMrpUl3m3j8DQycFqO2tw=',", "explanation": "**Purpose:** The `VALID_DIDT_PARSED_CLAIMS` constant appears to be a set of valid claims for a Decentralized Identifier (DID) in the DID-T specification.\n\n**Functionality:** It contains a JSON object with several key-value pairs, including timestamps (`iat`, `ext`), issuer information (`iss`), and subject identifiers (`sub`).", "metadata": {"repo": "magiclabs/magic-admin-js", "file": "test/lib/constants.ts", "chunk_number": 3, "total_chunks": 9}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/magic-admin-js`\n\n**Purpose:** A JavaScript library for building custom Magic Admin interfaces.\n\n**Content:** Open-source codebase providing reusable UI components, APIs, and tools for creating personalized admin experiences with Magic Labs (a no-code platform).", "file_summary": "Here's a concise summary:\n\n**test/lib/constants.ts:**\n\nThis file exports several constants for API keys, URLs, and Decentralized Identifiers (DIDs). It defines:\n\n* Constants for Magic Link API keys and URLs\n* A valid DID in JSON Web Token (JWT) format with encrypted data\n* Valid claims for a DID in the DID-T specification\n* Cryptographic data, including a DID token, audit record, and public key hash\n\nThese constants appear to be used for testing or demonstrating digital identity verification."}
{"code": "  aud: 'did:magic:f54168e9-9ce9-47f2-81c8-7cb2a96b26ba',\n  nbf: 1585011204,\n  tid: '2ddf5983-983b-487d-b464-bc5e283a03c5',\n  add:\n    '0x91fbe74be6c6bfd8ddddd93011b059b9253f10785649738ba217e51e0e3df1381d20f521a3641f23eb99ccb34e3bc5d96332fdebc8efa50cdb415e45500952cd1c',\n};\n\nexport const VALID_DIDT_DECODED = [\n  '0xe024355e429dcad3517ad99ea3410abfd45b0b6398b06654dba4179c87e162781575b0981c658f70260e49230da9488a04d9970eb38e6fddecd6509a027b08b91b',\n  VALID_DIDT_PARSED_CLAIMS,\n];\n\nexport const VALID_FUTURE_MARKED_DIDT =", "explanation": "Here is a concise summary:\n\nThis block contains cryptographic data, specifically a DID (Decentralized Identifier) token (`tid`), an audit record (`aud`), and a public key hash (`add`). The `VALID_DIDT_DECODED` export lists a valid encoded ID and a parsed claim, while `VALID_FUTURE_MARKED_DIDT` is currently unknown.", "metadata": {"repo": "magiclabs/magic-admin-js", "file": "test/lib/constants.ts", "chunk_number": 4, "total_chunks": 9}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/magic-admin-js`\n\n**Purpose:** A JavaScript library for building custom Magic Admin interfaces.\n\n**Content:** Open-source codebase providing reusable UI components, APIs, and tools for creating personalized admin experiences with Magic Labs (a no-code platform).", "file_summary": "Here's a concise summary:\n\n**test/lib/constants.ts:**\n\nThis file exports several constants for API keys, URLs, and Decentralized Identifiers (DIDs). It defines:\n\n* Constants for Magic Link API keys and URLs\n* A valid DID in JSON Web Token (JWT) format with encrypted data\n* Valid claims for a DID in the DID-T specification\n* Cryptographic data, including a DID token, audit record, and public key hash\n\nThese constants appear to be used for testing or demonstrating digital identity verification."}
{"code": "  'WyIweDkzZjRiNTViYzRlN2E1ZWJkZTdmMzVkYzczMWE5NWFmOGYwZjVlMWQyMWQ5ZDYwZWQxM2Y4YmYzMmNiN2UwOTQ1MDM0MGI1Y2IyNTIxODZkNWQ3OTFiOTAyODZhYmY1NzM3YzMxN2M5NzNhMmQzMGY0MWZmYmFlNGU0NTdmMjE4MWIiLCJ7XCJpYXRcIjoxNTkxOTE0NTgyLFwiZXh0XCI6MjIyMjcxNDU4MixcImlzc1wiOlwiZGlkOmV0aHI6MHg0YzMzMmQ5QzRhMmEwNjY1YzNmODg1MTU1YjlFOTFmZEIzMDBlRTc2XCIsXCJzdWJcIjpcIms4NUtaR09Ycl9vMTYxNGdFVGN6Yzlac0phTjV4cjF2TVFXSWhnbjQ1Slk9XCIsXCJhdWRcIjpcImRpZDptYWdpYzoyMWI4ZjRkZS02ZmIzLTQ0M2YtOGM0MC04ODcwODJjNDQ1MjNcIixcIm5iZlwiOjE5MDczMTQ1ODIsXCJ0aWRcIjpcIjVhMjhjMjQwLWRmYzYtNDg2Ni04ODk1LTVkYzBhOTVkNWJkN1wiLFwiYWRkXCI6XCIweGRlMmI1ODgyNjUyZGExOTY4YWNlZTIyYWUyNGI2OWYxNThlZjg1NDQzOGE0OTlmMThjZGZlZDU3MzEwOGIxNzExYjQ2OWQ3MzQ5NzdhNGQ4NGJlM2RiODc2OTBkZjFmZjk4MTVjN2Y3NDIxNjIxMGY4Y2JhMGJmYzQ2ZGIwYjhkMWNcIn0iXQ==';\n\nexport const INVALID_DIDT_MALFORMED_CLAIM =", "explanation": "This block appears to be a JSON Web Token (JWT) encoded string, containing user or system information, likely in the form of claims.", "metadata": {"repo": "magiclabs/magic-admin-js", "file": "test/lib/constants.ts", "chunk_number": 5, "total_chunks": 9}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/magic-admin-js`\n\n**Purpose:** A JavaScript library for building custom Magic Admin interfaces.\n\n**Content:** Open-source codebase providing reusable UI components, APIs, and tools for creating personalized admin experiences with Magic Labs (a no-code platform).", "file_summary": "Here's a concise summary:\n\n**test/lib/constants.ts:**\n\nThis file exports several constants for API keys, URLs, and Decentralized Identifiers (DIDs). It defines:\n\n* Constants for Magic Link API keys and URLs\n* A valid DID in JSON Web Token (JWT) format with encrypted data\n* Valid claims for a DID in the DID-T specification\n* Cryptographic data, including a DID token, audit record, and public key hash\n\nThese constants appear to be used for testing or demonstrating digital identity verification."}
{"code": "  'WyIweDRiN2Y0ODgzNTczOGM2ZjViZmI5MTIyYmEzN2EwN2EyZDYwMTUwZjM2NGNhMDIwZjUyYWVlZjc3MmNlODk2ZWExYmJlYzc3OGZlMmFhNWNjODc3ZmVmOWQyOTJmN2U2MWZhMGZjY2M2NWIwZWZlZGVkMThmNzI0MzZkNjQ4MzdjMWMiLCJ7XCJ0aGlzSXNXUk9OR1wiOlwiSEVMTE8gV09STERcIn0iXQ==';\n\nexport const MALFORMED_DIDT_PARSED_CLAIMS = {\n  thisIsWRONG: 'HELLO WORLD',\n};\n\nexport const INVALID_DIDT_MALFORMED_CLAIM_DECODED = [\n  '0x4b7f48835738c6f5bfb9122ba37a07a2d60150f364ca020f52aeef772ce896ea1bbec778fe2aa5cc877fef9d292f7e61fa0fccc65b0efeded18f72436d64837c1c',\n  MALFORMED_DIDT_PARSED_CLAIMS,\n];\n\nexport const INVALID_SIGNER_DIDT =", "explanation": "This block appears to be a JavaScript code snippet that defines three constants:\n\n* `MALFORMED_DIDT_PARSED_CLAIMS`: An object with a single property containing a string value.\n* `INVALID_DIDT_MALFORMED_CLAIM_DECODED`: An array containing two elements: a hexadecimal string and another constant (`MALFORMED_DIDT_PARSED_CLAIMS`).\n* `INVALID_SIGNER_DIDT`: A constant not provided in the snippet, but likely related to digital identity verification.\n\nThe purpose of this code is unclear without more context, but it seems to be testing or demonstrating some aspect of digital identity verification.", "metadata": {"repo": "magiclabs/magic-admin-js", "file": "test/lib/constants.ts", "chunk_number": 6, "total_chunks": 9}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/magic-admin-js`\n\n**Purpose:** A JavaScript library for building custom Magic Admin interfaces.\n\n**Content:** Open-source codebase providing reusable UI components, APIs, and tools for creating personalized admin experiences with Magic Labs (a no-code platform).", "file_summary": "Here's a concise summary:\n\n**test/lib/constants.ts:**\n\nThis file exports several constants for API keys, URLs, and Decentralized Identifiers (DIDs). It defines:\n\n* Constants for Magic Link API keys and URLs\n* A valid DID in JSON Web Token (JWT) format with encrypted data\n* Valid claims for a DID in the DID-T specification\n* Cryptographic data, including a DID token, audit record, and public key hash\n\nThese constants appear to be used for testing or demonstrating digital identity verification."}
{"code": "  'WyIweDBhNTk4NmE1NDdiMzNhMDAxODIxNmRiNjk0YzNiMDg3YTU3MTk1Nzg4ZTZmMDc2NDg4NzA2ZTQ3ZmFhNjFhYzMzZDczZTM4ZmM5ZDA0YzU2YWVmZWNiMTAxMDA4OGEwNmFlOWFiZTE5ZDIyYWQ4MzNiMDhhM2VlNWNmZWM5ZDQ0MWMiLCJ7XCJpYXRcIjoxNTg1MDEwODIxLFwiZXh0XCI6MTkwMDQxMDgyMSxcImlzc1wiOlwiXFxcImRpZDpldGhyOjB4MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMFxcXCJcIixcInN1YlwiOlwiNnRGWFRmUnh5a3dNS09PalNNYmRQckVNcnBVbDNtM2o4RFF5Y0ZxTzJ0dz1cIixcImF1ZFwiOlwiZGlkOm1hZ2ljOjMzZjAxNGVlLTNkZDUtNGRmZi1iYzE2LTgxNTU3MTFiN2UwMlwiLFwibmJmXCI6MTU4NTAxMDgyMSxcInRpZFwiOlwiOGEzYjdkZDUtZTFjZi00OTY1LWFlMmItZDIwZjE4OGU2ZWMyXCIsXCJhZGRcIjpcIjB4OTFmYmU3NGJlNmM2YmZkOGRkZGRkOTMwMTFiMDU5YjkyNTNmMTA3ODU2NDk3MzhiYTIxN2U1MWUwZTNkZjEzODFkMjBmNTIxYTM2NDFmMjNlYjk5Y2NiMzRlM2JjNWQ5NjMzMmZkZWJjOGVmYTUwY2RiNDE1ZTQ1NTAwOTUyY2QxY1wifSJd';\n\nexport const EXPIRED_DIDT =", "explanation": "This appears to be a Base64 encoded string, likely containing JSON data or a serialized object.", "metadata": {"repo": "magiclabs/magic-admin-js", "file": "test/lib/constants.ts", "chunk_number": 7, "total_chunks": 9}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/magic-admin-js`\n\n**Purpose:** A JavaScript library for building custom Magic Admin interfaces.\n\n**Content:** Open-source codebase providing reusable UI components, APIs, and tools for creating personalized admin experiences with Magic Labs (a no-code platform).", "file_summary": "Here's a concise summary:\n\n**test/lib/constants.ts:**\n\nThis file exports several constants for API keys, URLs, and Decentralized Identifiers (DIDs). It defines:\n\n* Constants for Magic Link API keys and URLs\n* A valid DID in JSON Web Token (JWT) format with encrypted data\n* Valid claims for a DID in the DID-T specification\n* Cryptographic data, including a DID token, audit record, and public key hash\n\nThese constants appear to be used for testing or demonstrating digital identity verification."}
{"code": "  'WyIweGE3MDUzYzg3OTI2ZjMzZDBjMTZiMjMyYjYwMWYxZDc2NmRiNWY3YWM4MTg2MzUyMzY4ZjAyMzIyMGEwNzJjYzkzM2JjYjI2MmU4ODQyNWViZDA0MzcyZGU3YTc0NzMwYjRmYWYzOGU0ZjgwNmYzOTJjMTVkNzY2YmVkMjVlZmUxMWIiLCJ7XCJpYXRcIjoxNTg1MDEwODM1LFwiZXh0XCI6MTU4NTAxMDgzNixcImlzc1wiOlwiZGlkOmV0aHI6MHhCMmVjOWI2MTY5OTc2MjQ5MWI2NTQyMjc4RTlkRkVDOTA1MGY4MDg5XCIsXCJzdWJcIjpcIjZ0RlhUZlJ4eWt3TUtPT2pTTWJkUHJFTXJwVWwzbTNqOERReWNGcU8ydHc9XCIsXCJhdWRcIjpcImRpZDptYWdpYzpkNGMwMjgxYi04YzViLTQ5NDMtODUwOS0xNDIxNzUxYTNjNzdcIixcIm5iZlwiOjE1ODUwMTA4MzUsXCJ0aWRcIjpcImFjMmE4YzFjLWE4OWEtNDgwOC1hY2QxLWM1ODg1ZTI2YWZiY1wiLFwiYWRkXCI6XCIweDkxZmJlNzRiZTZjNmJmZDhkZGRkZDkzMDExYjA1OWI5MjUzZjEwNzg1NjQ5NzM4YmEyMTdlNTFlMGUzZGYxMzgxZDIwZjUyMWEzNjQxZjIzZWI5OWNjYjM0ZTNiYzVkOTYzMzJmZGViYzhlZmE1MGNkYjQxNWU0NTUwMDk1MmNkMWNcIn0iXQ==';\n\nexport const VALID_ATTACHMENT_DIDT =", "explanation": "This block appears to be a string of encoded data, likely Base64 encoded. Its purpose is not explicitly stated, but it may hold a DID (Decentralized Identifier) token or some form of authentication credentials.", "metadata": {"repo": "magiclabs/magic-admin-js", "file": "test/lib/constants.ts", "chunk_number": 8, "total_chunks": 9}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/magic-admin-js`\n\n**Purpose:** A JavaScript library for building custom Magic Admin interfaces.\n\n**Content:** Open-source codebase providing reusable UI components, APIs, and tools for creating personalized admin experiences with Magic Labs (a no-code platform).", "file_summary": "Here's a concise summary:\n\n**test/lib/constants.ts:**\n\nThis file exports several constants for API keys, URLs, and Decentralized Identifiers (DIDs). It defines:\n\n* Constants for Magic Link API keys and URLs\n* A valid DID in JSON Web Token (JWT) format with encrypted data\n* Valid claims for a DID in the DID-T specification\n* Cryptographic data, including a DID token, audit record, and public key hash\n\nThese constants appear to be used for testing or demonstrating digital identity verification."}
{"code": "  'WyIweGVkMWMwNWRlMTVlMWFkY2Y5ZmEyZWNkNjVjZjg5NWMzYTgzMzQ2OGMwOGFhMmE3YjQ5ZDgyMjFiZWEyMWU1YjgzNDRiNWEwMzAzNmQxMzA5MzQyNTgzMWIxZTFjZGIwZWQ2NTgyMDI4MWU1NzhlMjU5ODJhYzdkYmNkZWJhN2I1MWMiLCJ7XCJpYXRcIjoxNjg4MDYzMTA4LFwiZXh0XCI6MS4wMDAwMDAwMDAwMDE2ODgxZSsyMSxcImlzc1wiOlwiZGlkOmV0aHI6MHhhMWI0YzA5NDI2NDdlNzkwY0ZEMmEwNUE1RkQyNkMwMmM0MjEzOWFlXCIsXCJzdWJcIjpcIjhaTUJnOXNwMFgwQ0FNanhzcVFaOGRzRTJwNVlZWm9lYkRPeWNPUFNNbDA9XCIsXCJhdWRcIjpcIjN3X216VmktaDNtUzc3cFZ4b19ydlJhWjR2WXpOZ0Vudm05ZGcwWnkzYzg9XCIsXCJuYmZcIjoxNjg4MDYzMTA4LFwidGlkXCI6XCJjM2U5ZWRiYy04MDU2LTQ3NGItOGFkMy1hOGI2MzM3NThlOTRcIixcImFkZFwiOlwiMHgzZGExZTM3MmU1ZWU5MjI4YzdlYjBkNmQwZDE2MTAxZjBkNjE5MDY0ODVhYjgzNDMzNWI3Y2YxOGE5ZDNmZWEzNjRmYzFjMTFiNzRlYzBhNTQ0ZTkzNmJkNjQ1Y2U3ZDdkZTIyMTRlNTJlYjZhOThjZTIyNzI1OTEwNDg0ZjJkOTFjXCJ9Il0';\n", "explanation": "This appears to be a URL-safe base64-encoded string, likely containing JSON data.", "metadata": {"repo": "magiclabs/magic-admin-js", "file": "test/lib/constants.ts", "chunk_number": 9, "total_chunks": 9}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/magic-admin-js`\n\n**Purpose:** A JavaScript library for building custom Magic Admin interfaces.\n\n**Content:** Open-source codebase providing reusable UI components, APIs, and tools for creating personalized admin experiences with Magic Labs (a no-code platform).", "file_summary": "Here's a concise summary:\n\n**test/lib/constants.ts:**\n\nThis file exports several constants for API keys, URLs, and Decentralized Identifiers (DIDs). It defines:\n\n* Constants for Magic Link API keys and URLs\n* A valid DID in JSON Web Token (JWT) format with encrypted data\n* Valid claims for a DID in the DID-T specification\n* Cryptographic data, including a DID token, audit record, and public key hash\n\nThese constants appear to be used for testing or demonstrating digital identity verification."}
{"code": "import { API_FULL_URL, API_KEY } from './constants';\nimport { MagicAdminSDK } from '../../src/core/sdk';\n\nexport function createMagicAdminSDK(endpoint = API_FULL_URL, clientId = null) {\n  return new MagicAdminSDK(API_KEY, { endpoint, clientId });\n}\n", "explanation": "Here is a concise summary:\n\n**Purpose:** Creates an instance of the MagicAdmin SDK.\n\n**Functionality:** Takes optional `endpoint` and `clientId` parameters, defaults to `API_FULL_URL` and `null`, respectively, and returns a new instance of `MagicAdminSDK` with API key and configured endpoint.", "metadata": {"repo": "magiclabs/magic-admin-js", "file": "test/lib/factories.ts", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/magic-admin-js`\n\n**Purpose:** A JavaScript library for building custom Magic Admin interfaces.\n\n**Content:** Open-source codebase providing reusable UI components, APIs, and tools for creating personalized admin experiences with Magic Labs (a no-code platform).", "file_summary": "Here is a concise summary:\n\n**File Summary:**\n\n**test/lib/factories.ts**\nCreates a MagicAdmin SDK instance with configurable endpoint and API key."}
{"code": "/* eslint-disable no-underscore-dangle */\nimport {\n  MagicAdminSDKError,\n  createTokenExpiredError,\n  createIncorrectSignerAddressError,\n  createFailedRecoveringProofError,\n  createApiKeyMissingError,\n  createServiceError,\n  createExpectedBearerStringError,\n  createTokenCannotBeUsedYetError,\n  createAudienceMismatchError,\n} from '../../../../src/core/sdk-exceptions';\n\nfunction errorAssertions(\n  error: MagicAdminSDKError,\n  expectedCode: string,\n  expectedMessage: string,\n  expectedData: any[] = [],\n) {\n  expect(error instanceof MagicAdminSDKError).toBe(true);\n  expect(error.code).toBe(expectedCode);\n  expect(error.message).toBe(`Magic Admin SDK Error: [${expectedCode}] ${expectedMessage}`);\n  expect(error.data).toEqual(expectedData);\n}\n\ntest('Creates `ERROR_DIDT_EXPIRED` error', async () => {\n  const error = createTokenExpiredError();\n  errorAssertions(error, 'ERROR_DIDT_EXPIRED', 'DID Token has expired. Request failed authentication.');\n});\n\ntest('Creates `ERROR_DIDT_CANNOT_BE_USED_YET` error', async () => {", "explanation": "**Summary:**\n\nThis code block imports various error classes from a SDK, defines an `errorAssertions` function to verify error objects, and tests the creation of two specific error types using those functions.\n\n**Functionality:**\n\n* Imports multiple error classes for handling different errors in a Magic Admin SDK\n* Defines a reusable `errorAssertions` function to check if an object is a valid error instance with specific properties\n* Tests the creation of two error instances (`ERROR_DIDT_EXPIRED` and `ERROR_DIDT_CANNOT_BE_USED_YET`) using the `errorAssertions` function", "metadata": {"repo": "magiclabs/magic-admin-js", "file": "test/spec/core/sdk-exceptions/error-factories.spec.ts", "chunk_number": 1, "total_chunks": 4}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/magic-admin-js`\n\n**Purpose:** A JavaScript library for building custom Magic Admin interfaces.\n\n**Content:** Open-source codebase providing reusable UI components, APIs, and tools for creating personalized admin experiences with Magic Labs (a no-code platform).", "file_summary": "Here's a holistic summary of the file 'test/spec/core/sdk-exceptions/error-factories.spec.ts':\n\n**Summary:**\n\nThis code block contains test cases for verifying the correct creation of specific errors in a Magic Admin SDK, using reusable assertions to check error properties and messages.\n\n**Key Functionality:**\n\n* Tests the creation of multiple error types (e.g., `ERROR_DIDT_EXPIRED`, `ERROR_DIDT_CANNOT_BE_USED_YET`) with expected properties and messages\n* Verifies correct behavior of error functions for debugging and troubleshooting purposes\n\nThis code block appears to be a set of Jest test cases that ensure errors are being created correctly in a Node.js application."}
{"code": "  const error = createTokenCannotBeUsedYetError();\n  errorAssertions(\n    error,\n    'ERROR_DIDT_CANNOT_BE_USED_YET',\n    'Given DID Token cannot be used at this time. Please check the `nbf` field and regenerate a new token with a suitable value.',\n  );\n});\n\ntest('Creates `ERROR_INCORRECT_SIGNER_ADDR` error', async () => {\n  const error = createIncorrectSignerAddressError();\n  errorAssertions(\n    error,\n    'ERROR_INCORRECT_SIGNER_ADDR',\n    'Incorrect signer address for DID Token. Request failed authentication.',\n  );\n});\n\ntest('Creates `ERROR_FAILED_RECOVERING_PROOF` error', async () => {\n  const error = createFailedRecoveringProofError();\n  errorAssertions(error, 'ERROR_FAILED_RECOVERING_PROOF', 'Failed to recover proof. Request failed authentication.');\n});\n\ntest('Creates `ERROR_SECRET_API_KEY_MISSING` error', async () => {\n  const error = createApiKeyMissingError();\n  errorAssertions(\n    error,\n    'ERROR_SECRET_API_KEY_MISSING',", "explanation": "**Summary:**\n\nThis block is a set of test cases that verify the functionality of creating specific errors in a DID (Decentralized Identifier) token system.\n\nEach test case:\n\n1. Creates an error using a specific function (e.g., `createTokenCannotBeUsedYetError`)\n2. Asserts the error's expected properties and message using the `errorAssertions` function\n\nThe purpose is to ensure that these error functions behave as intended, providing useful information for debugging and troubleshooting in the DID token system.", "metadata": {"repo": "magiclabs/magic-admin-js", "file": "test/spec/core/sdk-exceptions/error-factories.spec.ts", "chunk_number": 2, "total_chunks": 4}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/magic-admin-js`\n\n**Purpose:** A JavaScript library for building custom Magic Admin interfaces.\n\n**Content:** Open-source codebase providing reusable UI components, APIs, and tools for creating personalized admin experiences with Magic Labs (a no-code platform).", "file_summary": "Here's a holistic summary of the file 'test/spec/core/sdk-exceptions/error-factories.spec.ts':\n\n**Summary:**\n\nThis code block contains test cases for verifying the correct creation of specific errors in a Magic Admin SDK, using reusable assertions to check error properties and messages.\n\n**Key Functionality:**\n\n* Tests the creation of multiple error types (e.g., `ERROR_DIDT_EXPIRED`, `ERROR_DIDT_CANNOT_BE_USED_YET`) with expected properties and messages\n* Verifies correct behavior of error functions for debugging and troubleshooting purposes\n\nThis code block appears to be a set of Jest test cases that ensure errors are being created correctly in a Node.js application."}
{"code": "    'Please provide a secret Magic API key that you acquired from the developer dashboard.',\n  );\n});\n\ntest('Creates `SERVICE_ERROR` error with empty `data` property', async () => {\n  const error = createServiceError();\n  errorAssertions(\n    error,\n    'SERVICE_ERROR',\n    'A service error occurred while communicating with the Magic API. Check the `data` key of this error object to see nested errors with additional context.',\n  );\n});\n\ntest('Creates `SERVICE_ERROR` error with non-empty `data` property', async () => {\n  const error = createServiceError('hello', 'world');\n  errorAssertions(\n    error,\n    'SERVICE_ERROR',\n    'A service error occurred while communicating with the Magic API. Check the `data` key of this error object to see nested errors with additional context.',\n    ['hello', 'world'],\n  );\n});\n\ntest('Creates `EXPECTED_BEARER_STRING` error', async () => {\n  const error = createExpectedBearerStringError();", "explanation": "Here is a concise summary:\n\nThis block appears to be a set of test cases for an error creation function, specifically testing the creation of two types of errors: `SERVICE_ERROR` (with and without data) and `EXPECTED_BEARER_STRING` error.", "metadata": {"repo": "magiclabs/magic-admin-js", "file": "test/spec/core/sdk-exceptions/error-factories.spec.ts", "chunk_number": 3, "total_chunks": 4}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/magic-admin-js`\n\n**Purpose:** A JavaScript library for building custom Magic Admin interfaces.\n\n**Content:** Open-source codebase providing reusable UI components, APIs, and tools for creating personalized admin experiences with Magic Labs (a no-code platform).", "file_summary": "Here's a holistic summary of the file 'test/spec/core/sdk-exceptions/error-factories.spec.ts':\n\n**Summary:**\n\nThis code block contains test cases for verifying the correct creation of specific errors in a Magic Admin SDK, using reusable assertions to check error properties and messages.\n\n**Key Functionality:**\n\n* Tests the creation of multiple error types (e.g., `ERROR_DIDT_EXPIRED`, `ERROR_DIDT_CANNOT_BE_USED_YET`) with expected properties and messages\n* Verifies correct behavior of error functions for debugging and troubleshooting purposes\n\nThis code block appears to be a set of Jest test cases that ensure errors are being created correctly in a Node.js application."}
{"code": "  errorAssertions(error, 'EXPECTED_BEARER_STRING', 'Expected argument to be a string in the `Bearer {token}` format.');\n});\n\ntest('Creates `AUDIENCE_MISMATCH` error', async () => {\n  const error = createAudienceMismatchError();\n  errorAssertions(\n    error,\n    'ERROR_AUDIENCE_MISMATCH',\n    'Audience does not match client ID. Please ensure your secret key matches the application which generated the DID token.',\n  );\n});\n", "explanation": "This block appears to be a set of Jest test cases that verify the functionality of error assertions in a Node.js application. \n\nThe purpose is to check if errors are being created correctly with specific expected messages.\n\nFunctionality:\n\n* Verifies creation of `AUDIENCE_MISMATCH` error\n* Uses `errorAssertions` function to validate error properties and messages", "metadata": {"repo": "magiclabs/magic-admin-js", "file": "test/spec/core/sdk-exceptions/error-factories.spec.ts", "chunk_number": 4, "total_chunks": 4}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/magic-admin-js`\n\n**Purpose:** A JavaScript library for building custom Magic Admin interfaces.\n\n**Content:** Open-source codebase providing reusable UI components, APIs, and tools for creating personalized admin experiences with Magic Labs (a no-code platform).", "file_summary": "Here's a holistic summary of the file 'test/spec/core/sdk-exceptions/error-factories.spec.ts':\n\n**Summary:**\n\nThis code block contains test cases for verifying the correct creation of specific errors in a Magic Admin SDK, using reusable assertions to check error properties and messages.\n\n**Key Functionality:**\n\n* Tests the creation of multiple error types (e.g., `ERROR_DIDT_EXPIRED`, `ERROR_DIDT_CANNOT_BE_USED_YET`) with expected properties and messages\n* Verifies correct behavior of error functions for debugging and troubleshooting purposes\n\nThis code block appears to be a set of Jest test cases that ensure errors are being created correctly in a Node.js application."}
{"code": "import { MagicAdminSDKError } from '../../../../../src/core/sdk-exceptions';\n\ntest('Instantiates `MagicAdminSDKError` with empty `data` property', () => {\n  const error = new MagicAdminSDKError('TEST_CODE' as any, 'test message');\n  expect(error instanceof MagicAdminSDKError).toBe(true);\n  expect(error.message).toBe('Magic Admin SDK Error: [TEST_CODE] test message');\n  expect(error.code).toBe('TEST_CODE');\n  expect(error.data).toEqual([]);\n});\n\ntest('Instantiates `MagicAdminSDKError` with non-empty `data` property', () => {\n  const error = new MagicAdminSDKError('TEST_CODE' as any, 'test message', ['hello world']);\n  expect(error instanceof MagicAdminSDKError).toBe(true);\n  expect(error.message).toBe('Magic Admin SDK Error: [TEST_CODE] test message');\n  expect(error.code).toBe('TEST_CODE');\n  expect(error.data).toEqual(['hello world']);\n});\n", "explanation": "**Purpose:** Tests instantiating `MagicAdminSDKError` class with various data properties.\n\n**Functionality:** Verifies correct instantiation of `MagicAdminSDKError` with empty or non-empty `data` property, checking for expected behavior in code and message output.", "metadata": {"repo": "magiclabs/magic-admin-js", "file": "test/spec/core/sdk-exceptions/magic-admin-sdk-error/constructor.spec.ts", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/magic-admin-js`\n\n**Purpose:** A JavaScript library for building custom Magic Admin interfaces.\n\n**Content:** Open-source codebase providing reusable UI components, APIs, and tools for creating personalized admin experiences with Magic Labs (a no-code platform).", "file_summary": "Here is a concise summary:\n\nThis file tests the `MagicAdminSDKError` class constructor by verifying it can be instantiated correctly with both empty and non-empty data properties, ensuring accurate code and message output."}
{"code": "/* eslint-disable no-new */\nimport { Magic } from '../../../../src/index';\nimport { API_FULL_URL, API_KEY } from '../../../lib/constants';\nimport { TokenModule } from '../../../../src/modules/token';\nimport { UsersModule } from '../../../../src/modules/users';\nimport { UtilsModule } from '../../../../src/modules/utils';\nimport { get } from '../../../../src/utils/rest';\nimport { createApiKeyMissingError } from '../../../../src/core/sdk-exceptions';\n\ntest('Initialize `MagicAdminSDK`', () => {\n  const magic = new Magic(API_KEY);\n\n  expect(magic.secretApiKey).toBe(API_KEY);\n  expect(magic.apiBaseUrl).toBe(API_FULL_URL);\n  expect(magic.token instanceof TokenModule).toBe(true);\n  expect(magic.users instanceof UsersModule).toBe(true);\n});\n\ntest('Initialize `MagicAdminSDK` with custom endpoint', () => {\n  const magic = new Magic(API_KEY, { endpoint: 'https://example.com' });\n\n  expect(magic.secretApiKey).toBe(API_KEY);\n  expect(magic.apiBaseUrl).toBe('https://example.com');", "explanation": "**Block Purpose:** Test initialization of `MagicAdminSDK` instance.\n\n**Functionality:**\n\n* Creates a `Magic` instance with an API key.\n* Verifies that the instance has correct properties:\n\t+ Secret API key matches the provided key.\n\t+ Base URL is set to the full API URL.\n\t+ Token and users modules are instances of `TokenModule` and `UsersModule`, respectively.\n* Tests initialization with a custom endpoint.", "metadata": {"repo": "magiclabs/magic-admin-js", "file": "test/spec/core/sdk/constructor.spec.ts", "chunk_number": 1, "total_chunks": 4}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/magic-admin-js`\n\n**Purpose:** A JavaScript library for building custom Magic Admin interfaces.\n\n**Content:** Open-source codebase providing reusable UI components, APIs, and tools for creating personalized admin experiences with Magic Labs (a no-code platform).", "file_summary": "Here is a concise summary:\n\n**File Purpose:** Jest unit tests for Magic Admin SDK initialization and functionality.\n\n**Summary:** This file contains tests verifying successful and failed initialization of `MagicAdminSDK` using various scenarios, including static init with options, custom endpoint, and error handling for missing API key."}
{"code": "  expect(magic.token instanceof TokenModule).toBe(true);\n  expect(magic.users instanceof UsersModule).toBe(true);\n  expect(magic.utils instanceof UtilsModule).toBe(true);\n});\n\ntest('Strips trailing slash(es) from custom endpoint argument', () => {\n  const magicA = new Magic(API_KEY, { endpoint: 'https://example.com/' });\n  const magicB = new Magic(API_KEY, { endpoint: 'https://example.com//' });\n  const magicC = new Magic(API_KEY, { endpoint: 'https://example.com///' });\n\n  expect(magicA.apiBaseUrl).toBe('https://example.com');\n  expect(magicB.apiBaseUrl).toBe('https://example.com');\n  expect(magicC.apiBaseUrl).toBe('https://example.com');\n});\n\ntest('Initialize `MagicAdminSDK` using static init and empty options', async () => {\n  const successRes = Promise.resolve({\n    client_id: 'foo',\n    app_scope: 'GLOBAL',\n  });\n  (get as any) = jest.fn().mockImplementation(() => successRes);\n\n  const magic = await Magic.init(API_KEY, {});\n\n  expect(magic.secretApiKey).toBe(API_KEY);", "explanation": "Here is a concise summary:\n\n**Block Purpose:** A set of tests for a JavaScript library (Magic) to verify its functionality.\n\n**Functionalities Tested:**\n\n1. Initialization and instance checks\n2. Custom endpoint URL trimming (stripping trailing slashes)\n3. MagicAdminSDK initialization using static init method", "metadata": {"repo": "magiclabs/magic-admin-js", "file": "test/spec/core/sdk/constructor.spec.ts", "chunk_number": 2, "total_chunks": 4}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/magic-admin-js`\n\n**Purpose:** A JavaScript library for building custom Magic Admin interfaces.\n\n**Content:** Open-source codebase providing reusable UI components, APIs, and tools for creating personalized admin experiences with Magic Labs (a no-code platform).", "file_summary": "Here is a concise summary:\n\n**File Purpose:** Jest unit tests for Magic Admin SDK initialization and functionality.\n\n**Summary:** This file contains tests verifying successful and failed initialization of `MagicAdminSDK` using various scenarios, including static init with options, custom endpoint, and error handling for missing API key."}
{"code": "  expect(magic.apiBaseUrl).toBe(API_FULL_URL);\n  expect(magic.token instanceof TokenModule).toBe(true);\n  expect(magic.users instanceof UsersModule).toBe(true);\n});\n\ntest('Initialize `MagicAdminSDK` using static init and undefined options', async () => {\n  const successRes = Promise.resolve({\n    client_id: 'foo',\n    app_scope: 'GLOBAL',\n  });\n  (get as any) = jest.fn().mockImplementation(() => successRes);\n\n  const magic = await Magic.init(API_KEY);\n\n  expect(magic.secretApiKey).toBe(API_KEY);\n  expect(magic.apiBaseUrl).toBe(API_FULL_URL);\n  expect(magic.token instanceof TokenModule).toBe(true);\n  expect(magic.users instanceof UsersModule).toBe(true);\n});\n\ntest('Initialize `MagicAdminSDK` using static init and client ID', async () => {\n  const magic = await Magic.init(API_KEY, { clientId: '1234' });\n\n  expect(magic.secretApiKey).toBe(API_KEY);\n  expect(magic.apiBaseUrl).toBe(API_FULL_URL);\n  expect(magic.token instanceof TokenModule).toBe(true);\n  expect(magic.users instanceof UsersModule).toBe(true);\n});\n", "explanation": "**Summary**\n\nThis block is a series of Jest unit tests for the Magic Admin SDK. The tests verify the initialization and functionality of the SDK using different methods, including static init with and without options.", "metadata": {"repo": "magiclabs/magic-admin-js", "file": "test/spec/core/sdk/constructor.spec.ts", "chunk_number": 3, "total_chunks": 4}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/magic-admin-js`\n\n**Purpose:** A JavaScript library for building custom Magic Admin interfaces.\n\n**Content:** Open-source codebase providing reusable UI components, APIs, and tools for creating personalized admin experiences with Magic Labs (a no-code platform).", "file_summary": "Here is a concise summary:\n\n**File Purpose:** Jest unit tests for Magic Admin SDK initialization and functionality.\n\n**Summary:** This file contains tests verifying successful and failed initialization of `MagicAdminSDK` using various scenarios, including static init with options, custom endpoint, and error handling for missing API key."}
{"code": "test('Initialize `MagicAdminSDK` using static init and endpoint', async () => {\n  const successRes = Promise.resolve({\n    client_id: 'foo',\n    app_scope: 'GLOBAL',\n  });\n  (get as any) = jest.fn().mockImplementation(() => successRes);\n\n  const magic = await Magic.init(API_KEY, { endpoint: 'https://example.com' });\n\n  expect(magic.secretApiKey).toBe(API_KEY);\n  expect(magic.apiBaseUrl).toBe('https://example.com');\n  expect(magic.token instanceof TokenModule).toBe(true);\n  expect(magic.users instanceof UsersModule).toBe(true);\n});\n\ntest('Initialize `MagicAdminSDK` missing API Key', async () => {\n  const expectedError = createApiKeyMissingError();\n  expect(Magic.init(null, { clientId: '1234' })).rejects.toThrow(expectedError);\n});\n", "explanation": "Here is a concise summary:\n\n**Block Purpose:** Test initialization of MagicAdminSDK using various scenarios.\n\n**Functionality:**\n\n* Tests successful initialization with API key and endpoint.\n* Verifies expected properties are set on the initialized instance.\n* Tests error handling for missing API key.", "metadata": {"repo": "magiclabs/magic-admin-js", "file": "test/spec/core/sdk/constructor.spec.ts", "chunk_number": 4, "total_chunks": 4}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/magic-admin-js`\n\n**Purpose:** A JavaScript library for building custom Magic Admin interfaces.\n\n**Content:** Open-source codebase providing reusable UI components, APIs, and tools for creating personalized admin experiences with Magic Labs (a no-code platform).", "file_summary": "Here is a concise summary:\n\n**File Purpose:** Jest unit tests for Magic Admin SDK initialization and functionality.\n\n**Summary:** This file contains tests verifying successful and failed initialization of `MagicAdminSDK` using various scenarios, including static init with options, custom endpoint, and error handling for missing API key."}
{"code": "import * as MagicAdmin from '../../src/index';\n\ndescribe('MagicAdmin', () => {\n  it('should have exports', () => {\n    expect(MagicAdmin).toEqual(expect.any(Object));\n  });\n\n  it('should not have undefined exports', () => {\n    for (const k of Object.keys(MagicAdmin))\n      expect(MagicAdmin).not.toHaveProperty(k, undefined);\n  });\n});", "explanation": "This block is a test suite in JavaScript that verifies the functionality of the MagicAdmin module. It checks if the module exports an object and ensures that all exported properties are defined.", "metadata": {"repo": "magiclabs/magic-admin-js", "file": "test/spec/index.spec.ts", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/magic-admin-js`\n\n**Purpose:** A JavaScript library for building custom Magic Admin interfaces.\n\n**Content:** Open-source codebase providing reusable UI components, APIs, and tools for creating personalized admin experiences with Magic Labs (a no-code platform).", "file_summary": "Here is a concise holistic summary:\n\n**test/spec/index.spec.ts**\n\nTest suite verifying the functionality of the MagicAdmin module, ensuring it exports an object with properly defined properties."}
{"code": "import { MagicAdminSDK } from '../../../../src/core/sdk';\nimport { BaseModule } from '../../../../src/modules/base-module';\nimport { createMagicAdminSDK } from '../../../lib/factories';\n\ntest('Initializes `BaseModule`', () => {\n  const sdk = createMagicAdminSDK();\n\n  const baseModule: any = new (BaseModule as any)(sdk);\n\n  expect(baseModule instanceof BaseModule).toBe(true);\n  expect(baseModule.sdk instanceof MagicAdminSDK).toBe(true);\n});\n", "explanation": "**Summary:**\n\nThis block tests the initialization of a `BaseModule` object with a `MagicAdminSDK` instance, ensuring it inherits from `BaseModule` and its SDK property is an instance of `MagicAdminSDK`.", "metadata": {"repo": "magiclabs/magic-admin-js", "file": "test/spec/modules/base-module/constructor.spec.ts", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/magic-admin-js`\n\n**Purpose:** A JavaScript library for building custom Magic Admin interfaces.\n\n**Content:** Open-source codebase providing reusable UI components, APIs, and tools for creating personalized admin experiences with Magic Labs (a no-code platform).", "file_summary": "Here is a concise summary:\n\n`test/spec/modules/base-module/constructor.spec.ts`: Tests the initialization of a `BaseModule` object with a `MagicAdminSDK` instance, ensuring proper inheritance and SDK assignment."}
{"code": "import { createMagicAdminSDK } from '../../../lib/factories';\nimport { VALID_DIDT, VALID_DIDT_DECODED, INVALID_DIDT_MALFORMED_CLAIM } from '../../../lib/constants';\nimport { createMalformedTokenError } from '../../../../src/core/sdk-exceptions';\n\ntest('Successfully decodes DIDT', async () => {\n  const sdk = createMagicAdminSDK();\n  const result = sdk.token.decode(VALID_DIDT);\n  expect(result).toEqual(VALID_DIDT_DECODED);\n});\n\ntest('Throws error if token is malformed', async () => {\n  const sdk = createMagicAdminSDK();\n  const expectedError = createMalformedTokenError();\n  expect(() => sdk.token.decode(INVALID_DIDT_MALFORMED_CLAIM)).toThrow(expectedError);\n});\n", "explanation": "This block tests the functionality of a token decoding SDK.\n\nIt has two test cases:\n\n1. Decoding a valid DIDT token.\n2. Throwing an error when given a malformed token.", "metadata": {"repo": "magiclabs/magic-admin-js", "file": "test/spec/modules/token/decode.spec.ts", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/magic-admin-js`\n\n**Purpose:** A JavaScript library for building custom Magic Admin interfaces.\n\n**Content:** Open-source codebase providing reusable UI components, APIs, and tools for creating personalized admin experiences with Magic Labs (a no-code platform).", "file_summary": "Here is a concise and holistic summary:\n\n**test/spec/modules/token/decode.spec.ts**\n\nTests the token decoding SDK with two scenarios: \n\n* Successfully decodes a valid DIDT token\n* Throws an error for a malformed token"}
{"code": "import { createMagicAdminSDK } from '../../../lib/factories';\nimport { VALID_DIDT, VALID_DIDT_PARSED_CLAIMS } from '../../../lib/constants';\n\ntest('Successfully gets issuer from DIDT', () => {\n  const sdk = createMagicAdminSDK();\n  const result = sdk.token.getIssuer(VALID_DIDT);\n  const expected = VALID_DIDT_PARSED_CLAIMS.iss;\n  expect(result).toBe(expected);\n});\n", "explanation": "Here is a concise summary:\n\nThis block tests the functionality of retrieving an issuer from a DIDT (Decentralized Identifier Token) using Magic Admin SDK.", "metadata": {"repo": "magiclabs/magic-admin-js", "file": "test/spec/modules/token/getIssuer.spec.ts", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/magic-admin-js`\n\n**Purpose:** A JavaScript library for building custom Magic Admin interfaces.\n\n**Content:** Open-source codebase providing reusable UI components, APIs, and tools for creating personalized admin experiences with Magic Labs (a no-code platform).", "file_summary": "Here's a holistic, concise, and to-the-point summary of the file 'test/spec/modules/token/getIssuer.spec.ts':\n\n**Summary:** This test suite verifies the retrieval of issuer information from a Decentralized Identifier Token (DIDT) using the Magic Admin SDK."}
{"code": "import { createMagicAdminSDK } from '../../../lib/factories';\nimport { VALID_DIDT, VALID_DIDT_PARSED_CLAIMS } from '../../../lib/constants';\n\ntest('Successfully gets public address from DIDT', () => {\n  const sdk = createMagicAdminSDK();\n  const result = sdk.token.getPublicAddress(VALID_DIDT);\n  const expected = VALID_DIDT_PARSED_CLAIMS.iss.split(':')[2];\n  expect(result).toBe(expected);\n});\n", "explanation": "Here is a concise summary:\n\n**Purpose:** Test if public address can be retrieved from DIDT (Decentralized Identifier Token) using Magic Admin SDK.\n\n**Functionality:** Verifies that `getPublicAddress` method returns the expected public address when given a valid DIDT.", "metadata": {"repo": "magiclabs/magic-admin-js", "file": "test/spec/modules/token/getPublicAddress.spec.ts", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/magic-admin-js`\n\n**Purpose:** A JavaScript library for building custom Magic Admin interfaces.\n\n**Content:** Open-source codebase providing reusable UI components, APIs, and tools for creating personalized admin experiences with Magic Labs (a no-code platform).", "file_summary": "Here is a concise summary of the file 'test/spec/modules/token/getPublicAddress.spec.ts':\n\n**Summary:**\nThis test suite verifies that the Magic Admin SDK's `getPublicAddress` method correctly retrieves the public address from a Decentralized Identifier Token (DIDT)."}
{"code": "import { createMagicAdminSDK } from '../../../lib/factories';\nimport {\n  VALID_DIDT,\n  VALID_DIDT_WITH_INVALID_RECOVERY_BIT,\n  INVALID_SIGNER_DIDT,\n  EXPIRED_DIDT,\n  INVALID_DIDT_MALFORMED_CLAIM,\n  VALID_FUTURE_MARKED_DIDT,\n  VALID_ATTACHMENT_DIDT,\n} from '../../../lib/constants';\nimport {\n  createIncorrectSignerAddressError,\n  createTokenExpiredError,\n  createFailedRecoveringProofError,\n  createMalformedTokenError,\n  createTokenCannotBeUsedYetError,\n  createAudienceMismatchError,\n} from '../../../../src/core/sdk-exceptions';\n\ntest('Successfully validates DIDT', async () => {\n  const sdk = createMagicAdminSDK(undefined, 'did:magic:f54168e9-9ce9-47f2-81c8-7cb2a96b26ba');\n  expect(() => sdk.token.validate(VALID_DIDT)).not.toThrow();\n});\n\ntest('Successfully validates DIDT without checking audience', async () => {\n  const sdk = createMagicAdminSDK();\n  expect(() => sdk.token.validate(VALID_DIDT)).not.toThrow();\n});\n\ntest('Successfully validates DIDT with attachment', async () => {\n  const sdk = createMagicAdminSDK();", "explanation": "**Summary:**\n\nThis code block tests the validation functionality of a Magic Admin SDK, ensuring it correctly identifies valid Digital Identity Tokens (DIDTs) and rejects invalid ones, including expired, malformed, or incorrectly signed tokens.", "metadata": {"repo": "magiclabs/magic-admin-js", "file": "test/spec/modules/token/validate.spec.ts", "chunk_number": 1, "total_chunks": 3}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/magic-admin-js`\n\n**Purpose:** A JavaScript library for building custom Magic Admin interfaces.\n\n**Content:** Open-source codebase providing reusable UI components, APIs, and tools for creating personalized admin experiences with Magic Labs (a no-code platform).", "file_summary": "Here is a concise summary of the file 'test/spec/modules/token/validate.spec.ts':\n\n\"This file contains automated tests for the Magic Admin SDK's token validation functionality, ensuring it correctly identifies valid Digital Identity Tokens (DIDTs) and rejects invalid ones due to various errors.\""}
{"code": "  expect(() => sdk.token.validate(VALID_ATTACHMENT_DIDT, 'ravi@magic.link')).not.toThrow();\n});\n\ntest('Fails when signer address mismatches signature', async () => {\n  const sdk = createMagicAdminSDK();\n  const expectedError = createIncorrectSignerAddressError();\n  expect(() => sdk.token.validate(INVALID_SIGNER_DIDT)).toThrow(expectedError);\n});\n\ntest('Fails when given expired token', async () => {\n  const sdk = createMagicAdminSDK();\n  const expectedError = createTokenExpiredError();\n  expect(() => sdk.token.validate(EXPIRED_DIDT)).toThrow(expectedError);\n});\n\ntest('Fails when given a token with a future `nbf` timestamp', async () => {\n  const sdk = createMagicAdminSDK();\n  const expectedError = createTokenCannotBeUsedYetError();\n  expect(() => sdk.token.validate(VALID_FUTURE_MARKED_DIDT)).toThrow(expectedError);\n});\n\ntest('Fails if signature recovery rejects', async () => {\n  const sdk = createMagicAdminSDK();\n  const expectedError = createFailedRecoveringProofError();", "explanation": "This block is a set of automated tests (using Jest's `expect` function) for a token validation functionality within an SDK (Software Development Kit). The tests ensure that the SDK correctly:\n\n* Validates a valid attachment\n* Throws errors for:\n\t+ Signer address mismatch\n\t+ Expired tokens\n\t+ Tokens with future `nbf` timestamps\n\t+ Failed signature recovery", "metadata": {"repo": "magiclabs/magic-admin-js", "file": "test/spec/modules/token/validate.spec.ts", "chunk_number": 2, "total_chunks": 3}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/magic-admin-js`\n\n**Purpose:** A JavaScript library for building custom Magic Admin interfaces.\n\n**Content:** Open-source codebase providing reusable UI components, APIs, and tools for creating personalized admin experiences with Magic Labs (a no-code platform).", "file_summary": "Here is a concise summary of the file 'test/spec/modules/token/validate.spec.ts':\n\n\"This file contains automated tests for the Magic Admin SDK's token validation functionality, ensuring it correctly identifies valid Digital Identity Tokens (DIDTs) and rejects invalid ones due to various errors.\""}
{"code": "  expect(() => sdk.token.validate(VALID_DIDT_WITH_INVALID_RECOVERY_BIT)).toThrow(expectedError);\n});\n\ntest('Fails if decoding token fails', async () => {\n  const sdk = createMagicAdminSDK();\n  const expectedError = createMalformedTokenError();\n  expect(() => sdk.token.validate(INVALID_DIDT_MALFORMED_CLAIM)).toThrow(expectedError);\n});\n\ntest('Fails if aud is incorrect', async () => {\n  const sdk = createMagicAdminSDK(undefined, 'different');\n  const expectedError = createAudienceMismatchError();\n  expect(() => sdk.token.validate(VALID_DIDT)).toThrow(expectedError);\n});\n", "explanation": "**Summary:**\n\nThis block is a series of tests that use Jest's `expect` function to validate the behavior of a token validation function in a SDK. It checks for expected errors when:\n\n* A DID token with an invalid recovery bit is validated\n* A malformed claim is decoded from a DID token\n* An incorrect audience (\"aud\") is specified in a DID token", "metadata": {"repo": "magiclabs/magic-admin-js", "file": "test/spec/modules/token/validate.spec.ts", "chunk_number": 3, "total_chunks": 3}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/magic-admin-js`\n\n**Purpose:** A JavaScript library for building custom Magic Admin interfaces.\n\n**Content:** Open-source codebase providing reusable UI components, APIs, and tools for creating personalized admin experiences with Magic Labs (a no-code platform).", "file_summary": "Here is a concise summary of the file 'test/spec/modules/token/validate.spec.ts':\n\n\"This file contains automated tests for the Magic Admin SDK's token validation functionality, ensuring it correctly identifies valid Digital Identity Tokens (DIDTs) and rejects invalid ones due to various errors.\""}
{"code": "import { createApiKeyMissingError } from '../../../../src/core/sdk-exceptions';\nimport { WalletType } from '../../../../src/types/wallet-types';\nimport { get } from '../../../../src/utils/rest';\nimport { API_KEY } from '../../../lib/constants';\nimport { createMagicAdminSDK } from '../../../lib/factories';\n\nconst successRes = Promise.resolve({\n  issuer: 'foo',\n  public_address: 'bar',\n  email: 'baz',\n  oauth_provider: 'foo1',\n  phone_number: '+1234',\n  username: 'buzz',\n});\nconst successResWithWallets = Promise.resolve({\n  issuer: 'foo',\n  public_address: 'bar',\n  email: 'baz',\n  oauth_provider: 'foo1',\n  phone_number: '+1234',\n  username: 'buzz',\n  wallets: [\n    {\n      wallet_type: 'SOLANA',\n      network: 'MAINNET',\n      public_address: 'barxyz',\n    },\n  ],\n});\nconst nullRes = Promise.resolve({});\n\ntest('Successfully GETs to metadata endpoint via issuer', async () => {\n  const sdk = createMagicAdminSDK('https://example.com');\n\n  const getStub = jest.fn().mockImplementation(() => successRes);", "explanation": "**Summary:**\n\nThis block is a test case for an SDK (Software Development Kit) function `createMagicAdminSDK`. It tests that the function correctly retrieves metadata from an API endpoint via issuer, returning expected response data or empty object in cases of success or failure, respectively.", "metadata": {"repo": "magiclabs/magic-admin-js", "file": "test/spec/modules/users/getMetadataByIssuer.spec.ts", "chunk_number": 1, "total_chunks": 4}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/magic-admin-js`\n\n**Purpose:** A JavaScript library for building custom Magic Admin interfaces.\n\n**Content:** Open-source codebase providing reusable UI components, APIs, and tools for creating personalized admin experiences with Magic Labs (a no-code platform).", "file_summary": "Here is a concise summary of the file 'test/spec/modules/users/getMetadataByIssuer.spec.ts':\n\n**Test File Summary:**\n\nThis test file validates the `users.getMetadataByIssuer` function in Magic Admin SDK, ensuring it retrieves metadata correctly by issuer, handles missing API keys, and returns expected data from API endpoints."}
{"code": "  (get as any) = getStub;\n\n  const result = await sdk.users.getMetadataByIssuer('did:ethr:0x1234');\n\n  console.log(result);\n\n  const getArguments = getStub.mock.calls[0];\n  expect(getArguments).toEqual([\n    'https://example.com/v1/admin/auth/user/get',\n    API_KEY,\n    { issuer: 'did:ethr:0x1234', wallet_type: 'NONE' },\n  ]);\n\n  expect(result).toEqual({\n    issuer: 'foo',\n    publicAddress: 'bar',\n    email: 'baz',\n    oauthProvider: 'foo1',\n    phoneNumber: '+1234',\n    username: 'buzz',\n    wallets: null,\n  });\n});\n\ntest('Successfully GETs `null` metadata endpoint via issuer', async () => {\n  const sdk = createMagicAdminSDK('https://example.com');\n\n  const getStub = jest.fn().mockImplementation(() => nullRes);\n  (get as any) = getStub;\n\n  const result = await sdk.users.getMetadataByIssuer('did:ethr:0x1234');\n\n  const getArguments = getStub.mock.calls[0];\n  expect(getArguments).toEqual([\n    'https://example.com/v1/admin/auth/user/get',\n    API_KEY,\n    { issuer: 'did:ethr:0x1234', wallet_type: 'NONE' },\n  ]);", "explanation": "Here is a concise summary:\n\n**Purpose:** Test the `users.getMetadataByIssuer` function of Magic Admin SDK.\n\n**Functionality:** Verifies that the function correctly retrieves metadata by issuer when given a valid DID (Decentralized Identifier) and returns expected data, or an empty response if the endpoint returns null.", "metadata": {"repo": "magiclabs/magic-admin-js", "file": "test/spec/modules/users/getMetadataByIssuer.spec.ts", "chunk_number": 2, "total_chunks": 4}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/magic-admin-js`\n\n**Purpose:** A JavaScript library for building custom Magic Admin interfaces.\n\n**Content:** Open-source codebase providing reusable UI components, APIs, and tools for creating personalized admin experiences with Magic Labs (a no-code platform).", "file_summary": "Here is a concise summary of the file 'test/spec/modules/users/getMetadataByIssuer.spec.ts':\n\n**Test File Summary:**\n\nThis test file validates the `users.getMetadataByIssuer` function in Magic Admin SDK, ensuring it retrieves metadata correctly by issuer, handles missing API keys, and returns expected data from API endpoints."}
{"code": "  expect(result).toEqual({\n    issuer: null,\n    publicAddress: null,\n    email: null,\n    oauthProvider: null,\n    phoneNumber: null,\n    username: null,\n    wallets: null,\n  });\n});\n\ntest('Fails GET if API key is missing', async () => {\n  const sdk = createMagicAdminSDK('https://example.com');\n  (sdk as any).secretApiKey = undefined;\n\n  const getStub = jest.fn().mockImplementation();\n  (get as any) = getStub;\n\n  const expectedError = createApiKeyMissingError();\n  expect(sdk.users.getMetadataByIssuer('did:ethr:0x1234')).rejects.toThrow(expectedError);\n\n  expect(getStub).not.toBeCalled();\n});\n\ntest('Successfully GETs to metadata endpoint via issuer and wallet type', async () => {\n  const sdk = createMagicAdminSDK('https://example.com');\n\n  const getStub = jest.fn().mockImplementation(() => successResWithWallets);\n  (get as any) = getStub;\n\n  const result = await sdk.users.getMetadataByIssuerAndWallet('did:ethr:0x1234', WalletType.SOLANA);\n\n  const getArguments = getStub.mock.calls[0];\n  expect(getArguments).toEqual([", "explanation": "Here is a concise summary of the purpose and functionality of this block:\n\n**Purpose:** Test cases for Magic Admin SDK's users.getMetadataByIssuer and users.getMetadataByIssuerAndWallet methods.\n\n**Functionality:**\n\n1. Verifies that getting metadata by issuer fails if API key is missing.\n2. Tests that getting metadata by issuer and wallet type successfully returns metadata from the API endpoint.", "metadata": {"repo": "magiclabs/magic-admin-js", "file": "test/spec/modules/users/getMetadataByIssuer.spec.ts", "chunk_number": 3, "total_chunks": 4}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/magic-admin-js`\n\n**Purpose:** A JavaScript library for building custom Magic Admin interfaces.\n\n**Content:** Open-source codebase providing reusable UI components, APIs, and tools for creating personalized admin experiences with Magic Labs (a no-code platform).", "file_summary": "Here is a concise summary of the file 'test/spec/modules/users/getMetadataByIssuer.spec.ts':\n\n**Test File Summary:**\n\nThis test file validates the `users.getMetadataByIssuer` function in Magic Admin SDK, ensuring it retrieves metadata correctly by issuer, handles missing API keys, and returns expected data from API endpoints."}
{"code": "    'https://example.com/v1/admin/auth/user/get',\n    API_KEY,\n    { issuer: 'did:ethr:0x1234', wallet_type: 'SOLANA'},\n  ]);\n  expect(result).toEqual({\n    issuer: 'foo',\n    publicAddress: 'bar',\n    email: 'baz',\n    oauthProvider: 'foo1',\n    phoneNumber: '+1234',\n    username: 'buzz',\n    wallets: [\n      {\n        wallet_type: 'SOLANA',\n        network: 'MAINNET',\n        public_address: 'barxyz',\n      },\n    ],\n  });\n});\n", "explanation": "This block makes a GET request to an API endpoint, passing in an API key and authentication data, and expects the response to match a specified JSON object.", "metadata": {"repo": "magiclabs/magic-admin-js", "file": "test/spec/modules/users/getMetadataByIssuer.spec.ts", "chunk_number": 4, "total_chunks": 4}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/magic-admin-js`\n\n**Purpose:** A JavaScript library for building custom Magic Admin interfaces.\n\n**Content:** Open-source codebase providing reusable UI components, APIs, and tools for creating personalized admin experiences with Magic Labs (a no-code platform).", "file_summary": "Here is a concise summary of the file 'test/spec/modules/users/getMetadataByIssuer.spec.ts':\n\n**Test File Summary:**\n\nThis test file validates the `users.getMetadataByIssuer` function in Magic Admin SDK, ensuring it retrieves metadata correctly by issuer, handles missing API keys, and returns expected data from API endpoints."}
{"code": "import { WalletType } from '../../../../src/types/wallet-types';\nimport { createMagicAdminSDK } from '../../../lib/factories';\n\ntest('Successfully GETs to metadata endpoint via public address', async () => {\n  const sdk = createMagicAdminSDK('https://example.com');\n\n  const getMetadataStub = jest.fn().mockImplementation(() => Promise.resolve());\n  (sdk.users.getMetadataByIssuer as any) = getMetadataStub;\n\n  await expect(sdk.users.getMetadataByPublicAddress('0x1234')).resolves.not.toThrow();\n\n  const getMetadataArguments = getMetadataStub.mock.calls[0];\n  expect(getMetadataArguments).toEqual(['did:ethr:0x1234']);\n});\n\ntest('Successfully GETs to metadata endpoint via public address and wallet type', async () => {\n  const sdk = createMagicAdminSDK('https://example.com');\n\n  const getMetadataStub = jest.fn().mockImplementation(() => Promise.resolve());\n  (sdk.users.getMetadataByIssuerAndWallet as any) = getMetadataStub;\n", "explanation": "Here is a concise summary:\n\n**Block Summary**\n\nThis block is a test suite for an SDK (Software Development Kit) that interacts with Magic Admin metadata endpoints via public addresses. It checks if the SDK can successfully retrieve metadata using `getMetadataByPublicAddress` and `getMetadataByIssuerAndWallet` methods without throwing errors.", "metadata": {"repo": "magiclabs/magic-admin-js", "file": "test/spec/modules/users/getMetadataByPublicAddress.spec.ts", "chunk_number": 1, "total_chunks": 2}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/magic-admin-js`\n\n**Purpose:** A JavaScript library for building custom Magic Admin interfaces.\n\n**Content:** Open-source codebase providing reusable UI components, APIs, and tools for creating personalized admin experiences with Magic Labs (a no-code platform).", "file_summary": "Here is a concise summary of the file:\n\n**Test Suite Summary**\n\nThis test suite verifies that the SDK can successfully retrieve metadata using `getMetadataByPublicAddress` without errors, including an API call with expected arguments and underlying function calls."}
{"code": "  await expect(sdk.users.getMetadataByPublicAddressAndWallet('0x1234', WalletType.ANY)).resolves.not.toThrow();\n\n  const getMetadataArguments = getMetadataStub.mock.calls[0];\n  expect(getMetadataArguments).toEqual(['did:ethr:0x1234', 'ANY']);\n});\n", "explanation": "This block is a test assertion, verifying that:\n\n* An API call to `sdk.users.getMetadataByPublicAddressAndWallet` with arguments `'0x1234'` and `WalletType.ANY` returns without errors.\n* The underlying function `getMetadataStub` was called once with the expected arguments `['did:ethr:0x1234', 'ANY']`.", "metadata": {"repo": "magiclabs/magic-admin-js", "file": "test/spec/modules/users/getMetadataByPublicAddress.spec.ts", "chunk_number": 2, "total_chunks": 2}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/magic-admin-js`\n\n**Purpose:** A JavaScript library for building custom Magic Admin interfaces.\n\n**Content:** Open-source codebase providing reusable UI components, APIs, and tools for creating personalized admin experiences with Magic Labs (a no-code platform).", "file_summary": "Here is a concise summary of the file:\n\n**Test Suite Summary**\n\nThis test suite verifies that the SDK can successfully retrieve metadata using `getMetadataByPublicAddress` without errors, including an API call with expected arguments and underlying function calls."}
{"code": "import { createMagicAdminSDK } from '../../../lib/factories';\nimport { VALID_DIDT, VALID_DIDT_PARSED_CLAIMS } from '../../../lib/constants';\nimport { WalletType } from '../../../../src/types/wallet-types';\n\ntest('Successfully GETs to metadata endpoint via public address', async () => {\n  const sdk = createMagicAdminSDK('https://example.com');\n\n  const getMetadataStub = jest.fn().mockImplementation(() => Promise.resolve());\n  (sdk.users.getMetadataByIssuer as any) = getMetadataStub;\n\n  await expect(sdk.users.getMetadataByToken(VALID_DIDT)).resolves.not.toThrow();\n\n  const getMetadataArguments = getMetadataStub.mock.calls[0];\n  expect(getMetadataArguments).toEqual([VALID_DIDT_PARSED_CLAIMS.iss]);\n});\n\ntest('Successfully GETs to metadata endpoint via public address and wallet type', async () => {\n  const sdk = createMagicAdminSDK('https://example.com');\n\n  const getMetadataStub = jest.fn().mockImplementation(() => Promise.resolve());\n  (sdk.users.getMetadataByIssuerAndWallet as any) = getMetadataStub;\n", "explanation": "Here is a concise summary:\n\nThis block of code tests two scenarios for retrieving metadata from an endpoint via public address, using the Magic Admin SDK. It mocks the `getMetadata` function to resolve successfully and checks that it is called with expected arguments.", "metadata": {"repo": "magiclabs/magic-admin-js", "file": "test/spec/modules/users/getMetadataByToken.spec.ts", "chunk_number": 1, "total_chunks": 2}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/magic-admin-js`\n\n**Purpose:** A JavaScript library for building custom Magic Admin interfaces.\n\n**Content:** Open-source codebase providing reusable UI components, APIs, and tools for creating personalized admin experiences with Magic Labs (a no-code platform).", "file_summary": "Here is a concise summary of the file 'test/spec/modules/users/getMetadataByToken.spec.ts':\n\nThis test suite checks that the `getMetadataByTokenAndWallet` function successfully retrieves metadata via public address using various wallet types (ALGOD, NONE) without throwing an error."}
{"code": "  await expect(sdk.users.getMetadataByTokenAndWallet(VALID_DIDT, WalletType.ALGOD)).resolves.not.toThrow();\n\n  const getMetadataArguments = getMetadataStub.mock.calls[0];\n  expect(getMetadataArguments).toEqual([VALID_DIDT_PARSED_CLAIMS.iss, 'ALGOD']);\n});\n\ntest('Successfully GETs to metadata endpoint via public address and none wallet type', async () => {\n  const sdk = createMagicAdminSDK('https://example.com');\n\n  const getMetadataStub = jest.fn().mockImplementation(() => Promise.resolve());\n  (sdk.users.getMetadataByIssuerAndWallet as any) = getMetadataStub;\n\n  await expect(sdk.users.getMetadataByTokenAndWallet(VALID_DIDT, WalletType.NONE)).resolves.not.toThrow();\n\n  const getMetadataArguments = getMetadataStub.mock.calls[0];\n  expect(getMetadataArguments).toEqual([VALID_DIDT_PARSED_CLAIMS.iss, 'NONE']);\n});\n", "explanation": "Here is a concise summary:\n\nThis block tests that the `getMetadataByTokenAndWallet` function successfully retrieves metadata via public address (using ALGOD or NONE wallet type) without throwing an error.", "metadata": {"repo": "magiclabs/magic-admin-js", "file": "test/spec/modules/users/getMetadataByToken.spec.ts", "chunk_number": 2, "total_chunks": 2}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/magic-admin-js`\n\n**Purpose:** A JavaScript library for building custom Magic Admin interfaces.\n\n**Content:** Open-source codebase providing reusable UI components, APIs, and tools for creating personalized admin experiences with Magic Labs (a no-code platform).", "file_summary": "Here is a concise summary of the file 'test/spec/modules/users/getMetadataByToken.spec.ts':\n\nThis test suite checks that the `getMetadataByTokenAndWallet` function successfully retrieves metadata via public address using various wallet types (ALGOD, NONE) without throwing an error."}
{"code": "import { createMagicAdminSDK } from '../../../lib/factories';\nimport { API_KEY } from '../../../lib/constants';\nimport { createApiKeyMissingError } from '../../../../src/core/sdk-exceptions';\nimport { post } from '../../../../src/utils/rest';\n\ntest('Successfully POSTs to logout endpoint via DIDT', async () => {\n  const sdk = createMagicAdminSDK('https://example.com');\n\n  const postStub = jest.fn();\n  (post as any) = postStub;\n\n  await expect(sdk.users.logoutByIssuer('did:ethr:0x1234')).resolves.not.toThrow();\n\n  const postArguments = postStub.mock.calls[0];\n  expect(postArguments).toEqual([\n    'https://example.com/v2/admin/auth/user/logout',\n    API_KEY,\n    { issuer: 'did:ethr:0x1234' },\n  ]);\n});\n\ntest('Fails POST if API key is missing', async () => {\n  const sdk = createMagicAdminSDK('https://example.com');\n  (sdk as any).secretApiKey = undefined;\n\n  const postStub = jest.fn();\n  (post as any) = postStub;\n\n  const expectedError = createApiKeyMissingError();\n", "explanation": "**Summary:**\n\nThis block tests the functionality of a Magic Admin SDK, specifically the `logoutByIssuer` method using the DIDT (Decentralized Identifier Technology) protocol. It verifies that a successful POST request is made to the logout endpoint with the correct API key and parameters, and also checks for an error if the API key is missing.", "metadata": {"repo": "magiclabs/magic-admin-js", "file": "test/spec/modules/users/logoutByIssuer.spec.ts", "chunk_number": 1, "total_chunks": 2}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/magic-admin-js`\n\n**Purpose:** A JavaScript library for building custom Magic Admin interfaces.\n\n**Content:** Open-source codebase providing reusable UI components, APIs, and tools for creating personalized admin experiences with Magic Labs (a no-code platform).", "file_summary": "Here's a concise and holistic summary of the file 'test/spec/modules/users/logoutByIssuer.spec.ts':\n\n**Summary:**\n\nThis test suite verifies the `logoutByIssuer` method of the Magic Admin SDK using DIDT protocol, ensuring correct API key usage and error handling on missing keys or failed logout requests."}
{"code": "  await expect(sdk.users.logoutByIssuer('did:ethr:0x1234')).rejects.toThrow(expectedError);\n\n  expect(postStub).not.toBeCalled();\n});\n", "explanation": "This block tests that a logout request fails with an expected error, without calling an unintended post stub.", "metadata": {"repo": "magiclabs/magic-admin-js", "file": "test/spec/modules/users/logoutByIssuer.spec.ts", "chunk_number": 2, "total_chunks": 2}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/magic-admin-js`\n\n**Purpose:** A JavaScript library for building custom Magic Admin interfaces.\n\n**Content:** Open-source codebase providing reusable UI components, APIs, and tools for creating personalized admin experiences with Magic Labs (a no-code platform).", "file_summary": "Here's a concise and holistic summary of the file 'test/spec/modules/users/logoutByIssuer.spec.ts':\n\n**Summary:**\n\nThis test suite verifies the `logoutByIssuer` method of the Magic Admin SDK using DIDT protocol, ensuring correct API key usage and error handling on missing keys or failed logout requests."}
{"code": "import { createMagicAdminSDK } from '../../../lib/factories';\n\ntest('Successfully GETs to metadata endpoint via public address', async () => {\n  const sdk = createMagicAdminSDK('https://example.com');\n\n  const logoutStub = jest.fn().mockImplementation(() => Promise.resolve());\n  (sdk.users.logoutByIssuer as any) = logoutStub;\n\n  await expect(sdk.users.logoutByPublicAddress('0x1234')).resolves.not.toThrow();\n\n  const logoutArguments = logoutStub.mock.calls[0];\n  expect(logoutArguments).toEqual(['did:ethr:0x1234']);\n});\n", "explanation": "Here is a concise summary:\n\n**Block Purpose:** Test Magic Admin SDK functionality\n**Functionality:** Verifies successful GET request to metadata endpoint via public address, specifically tests logoutByPublicAddress method.", "metadata": {"repo": "magiclabs/magic-admin-js", "file": "test/spec/modules/users/logoutByPublicAddress.spec.ts", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/magic-admin-js`\n\n**Purpose:** A JavaScript library for building custom Magic Admin interfaces.\n\n**Content:** Open-source codebase providing reusable UI components, APIs, and tools for creating personalized admin experiences with Magic Labs (a no-code platform).", "file_summary": "Here is a concise holistic summary of the file 'test/spec/modules/users/logoutByPublicAddress.spec.ts':\n\n**Summary:** Tests Magic Admin SDK's logout functionality using GET requests through a public address endpoint."}
{"code": "import { createMagicAdminSDK } from '../../../lib/factories';\nimport { VALID_DIDT, VALID_DIDT_PARSED_CLAIMS } from '../../../lib/constants';\n\ntest('Successfully GETs to metadata endpoint via public address', async () => {\n  const sdk = createMagicAdminSDK('https://example.com');\n\n  const logoutStub = jest.fn().mockImplementation(() => Promise.resolve());\n  (sdk.users.logoutByIssuer as any) = logoutStub;\n\n  await expect(sdk.users.logoutByToken(VALID_DIDT)).resolves.not.toThrow();\n\n  const logoutArguments = logoutStub.mock.calls[0];\n  expect(logoutArguments).toEqual([VALID_DIDT_PARSED_CLAIMS.iss]);\n});\n", "explanation": "Here is a concise summary:\n\n**Purpose:** Test a function that logs out a user via public address.\n\n**Functionality:** Simulates a GET request to metadata endpoint using Magic Admin SDK, verifying successful logout without errors.", "metadata": {"repo": "magiclabs/magic-admin-js", "file": "test/spec/modules/users/logoutByToken.spec.ts", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/magic-admin-js`\n\n**Purpose:** A JavaScript library for building custom Magic Admin interfaces.\n\n**Content:** Open-source codebase providing reusable UI components, APIs, and tools for creating personalized admin experiences with Magic Labs (a no-code platform).", "file_summary": "Here's a concise holistic summary of the file 'test/spec/modules/users/logoutByToken.spec.ts':\n\n**Test File: Logout By Token**\n\nThis test file verifies that a user can be logged out successfully via public address by simulating a GET request to the metadata endpoint using the Magic Admin SDK, without any errors."}
{"code": "import { createMagicAdminSDK } from '../../../lib/factories';\nimport { VALID_DIDT } from '../../../lib/constants';\nimport { createExpectedBearerStringError } from '../../../../src/core/sdk-exceptions';\n\ntest('Successfully parses raw DIDT from `Bearer` authorization header', async () => {\n  const sdk = createMagicAdminSDK();\n  const result = sdk.utils.parseAuthorizationHeader(`Bearer ${VALID_DIDT}`);\n  expect(result).toEqual(VALID_DIDT);\n});\n\ntest('Raises error if header is in the wrong format', async () => {\n  const sdk = createMagicAdminSDK();\n  const expectedError = createExpectedBearerStringError();\n  expect(() => sdk.utils.parseAuthorizationHeader(`Ooops ${VALID_DIDT}`)).toThrow(expectedError);\n});\n", "explanation": "Here is a concise summary:\n\n**Purpose:** Test `parseAuthorizationHeader` function in Magic Admin SDK.\n\n**Functionality:** Verify correct parsing of DIDT from Bearer header, and raise error on invalid input format.", "metadata": {"repo": "magiclabs/magic-admin-js", "file": "test/spec/modules/utils/parseAuthorizationHeader.spec.ts", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/magic-admin-js`\n\n**Purpose:** A JavaScript library for building custom Magic Admin interfaces.\n\n**Content:** Open-source codebase providing reusable UI components, APIs, and tools for creating personalized admin experiences with Magic Labs (a no-code platform).", "file_summary": "Here's a concise and holistic summary of the file 'test/spec/modules/utils/parseAuthorizationHeader.spec.ts':\n\n**Summary**: Tests the `parseAuthorizationHeader` function in Magic Admin SDK to correctly parse DIDT from Bearer headers and raise errors on invalid input formats."}
{"code": "import { createMagicAdminSDK } from '../../../lib/factories';\n\njest.mock('ethers', () => {\n  const originalModule = jest.requireActual('ethers');\n  return {\n      ...originalModule,\n      ethers: {\n          ...originalModule.ethers,\n          Contract: jest.fn(() => ({\n            balanceOf: jest.fn().mockImplementation((walletAddress: string, tokenId?: string) => {\n                if (tokenId === '2') {\n                    return BigInt(1); // User owns token\n                } else {\n                    return BigInt(0); // User doesn't own token\n                }\n            }),\n          })),\n      },\n  };\n});\n\n\ntest('Throws an error if ERC1155 and no token provided', async () => {\n  const sdk = createMagicAdminSDK('https://example.com');\n\n  await expect(sdk.utils.validateTokenOwnership('did:ethr:0x123', '0xfoo', 'ERC1155', 'https://example.com')).rejects.toThrow(\n    'ERC1155 requires a tokenId',\n  );\n});\n\ntest('Returns an error if DID token is malformed', async () => {", "explanation": "Here is a concise summary of the purpose and functionality of this block:\n\n**Purpose:** Mocks the `ethers` library for testing Magic Admin SDK functionality.\n\n**Functionality:**\n\n* Sets up a mock implementation for the `Contract` class in the `ethers` library.\n* Tests two scenarios:\n\t1. Verifies that an error is thrown when trying to validate token ownership with ERC1155 and no token ID provided.\n\t2. Tests that an error is returned if the DID token is malformed.", "metadata": {"repo": "magiclabs/magic-admin-js", "file": "test/spec/modules/utils/validateTokenOwnership.spec.ts", "chunk_number": 1, "total_chunks": 5}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/magic-admin-js`\n\n**Purpose:** A JavaScript library for building custom Magic Admin interfaces.\n\n**Content:** Open-source codebase providing reusable UI components, APIs, and tools for creating personalized admin experiences with Magic Labs (a no-code platform).", "file_summary": "Here is a concise summary of the file 'test/spec/modules/utils/validateTokenOwnership.spec.ts':\n\n**Purpose:** Validate token ownership using Magic Admin SDK.\n\n**Functionality:** Tests token ownership validation scenarios for ERC1155 and DID tokens, ensuring correct error handling and results."}
{"code": "  const sdk = createMagicAdminSDK('https://example.com');\n\n  // Mock the magic token validation by setting the code to ERROR_MALFORMED_TOKEN\n  sdk.token.validate = jest.fn().mockRejectedValue({ code: 'ERROR_MALFORMED_TOKEN' });\n\n  await expect(sdk.utils.validateTokenOwnership('did:ethr:0x123', '0xfoo', 'ERC1155', 'https://example.com', '1')).resolves.toEqual({\n    valid: false,\n    error_code: 'UNAUTHORIZED',\n    message: 'Invalid DID token: ERROR_MALFORMED_TOKEN',\n  });\n});\n\ntest('Returns an error if DID token is expired', async () => {\n  const sdk = createMagicAdminSDK('https://example.com');\n\n  // Mock the magic token validation by setting the code to ERROR_DIDT_EXPIRED\n  sdk.token.validate = jest.fn().mockRejectedValue({ code: 'ERROR_DIDT_EXPIRED' });\n\n  await expect(sdk.utils.validateTokenOwnership('did:ethr:0x123', '0xfoo', 'ERC1155', 'https://example.com', '1')).resolves.toEqual({\n    valid: false,\n    error_code: 'UNAUTHORIZED',\n    message: 'Invalid DID token: ERROR_DIDT_EXPIRED',\n  });\n});\n", "explanation": "Here is a summary of the block:\n\n**Purpose:** Test the validation of DID (Decentralized Identifier) tokens for ownership using Magic Admin SDK.\n\n**Functionality:** Mocks the Magic token validation to return an error, then verifies that the `validateTokenOwnership` function returns an \"unauthorized\" result with an error message.", "metadata": {"repo": "magiclabs/magic-admin-js", "file": "test/spec/modules/utils/validateTokenOwnership.spec.ts", "chunk_number": 2, "total_chunks": 5}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/magic-admin-js`\n\n**Purpose:** A JavaScript library for building custom Magic Admin interfaces.\n\n**Content:** Open-source codebase providing reusable UI components, APIs, and tools for creating personalized admin experiences with Magic Labs (a no-code platform).", "file_summary": "Here is a concise summary of the file 'test/spec/modules/utils/validateTokenOwnership.spec.ts':\n\n**Purpose:** Validate token ownership using Magic Admin SDK.\n\n**Functionality:** Tests token ownership validation scenarios for ERC1155 and DID tokens, ensuring correct error handling and results."}
{"code": "test('Throws an error if DID token validation returns unexpected error code', async () => {\n  const sdk = createMagicAdminSDK('https://example.com');\n\n  // Mock the magic token validation by setting the code to ERROR_MALFORMED_TOKEN\n  sdk.token.validate = jest.fn().mockRejectedValue({ code: 'UNKNOWN' });\n\n  await expect(sdk.utils.validateTokenOwnership('did:ethr:0x123', '0xfoo', 'ERC1155', 'https://example.com', '1')).rejects.toThrow();\n});\n\ntest('Returns an error if ERC721 token is not owned by user', async () => {\n  const sdk = createMagicAdminSDK('https://example.com');\n\n  // Mock the magic token validation to return ok\n  sdk.token.validate = jest.fn().mockResolvedValue({});\n  // Mock the getPublicAddress to return valid email and wallet\n  sdk.token.getPublicAddress = jest.fn().mockReturnValue('0x610dcb8fd5cf7f544b85290889a456916fbeaba2');\n\n  await expect(\n    sdk.utils.validateTokenOwnership(\n      'did:ethr:0x123',\n      '0x610dcb8fd5cf7f544b85290889a456916fbeaba2',\n      'ERC721',", "explanation": "**Block Purpose:** Test the functionality of token ownership validation in Magic Admin SDK.\n\n**Functionality Summary:**\n\nThis block contains two tests:\n\n1. Verifies that an error is thrown if DID token validation returns an unexpected error code.\n2. Ensures that an error is returned if an ERC721 token is not owned by a user.\n\nBoth tests utilize Jest mocking to simulate different scenarios and validate the SDK's behavior.", "metadata": {"repo": "magiclabs/magic-admin-js", "file": "test/spec/modules/utils/validateTokenOwnership.spec.ts", "chunk_number": 3, "total_chunks": 5}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/magic-admin-js`\n\n**Purpose:** A JavaScript library for building custom Magic Admin interfaces.\n\n**Content:** Open-source codebase providing reusable UI components, APIs, and tools for creating personalized admin experiences with Magic Labs (a no-code platform).", "file_summary": "Here is a concise summary of the file 'test/spec/modules/utils/validateTokenOwnership.spec.ts':\n\n**Purpose:** Validate token ownership using Magic Admin SDK.\n\n**Functionality:** Tests token ownership validation scenarios for ERC1155 and DID tokens, ensuring correct error handling and results."}
{"code": "      'https://example.com',\n      '1',\n    ),\n  ).resolves.toEqual({\n    valid: false,\n    error_code: 'NO_OWNERSHIP',\n    message: 'User does not own this token.',\n  });\n});\n\ntest('Returns an error if ERC1155 token is not owned by user', async () => {\n  const sdk = createMagicAdminSDK('https://example.com');\n\n  // Mock the magic token validation to return ok\n  sdk.token.validate = jest.fn().mockResolvedValue({});\n  // Mock the getPublicAddress to return valid email and wallet\n  sdk.token.getPublicAddress = jest.fn().mockReturnValue('0x610dcb8fd5cf7f544b85290889a456916fbeaba2');\n\n  await expect(\n    sdk.utils.validateTokenOwnership(\n      'did:ethr:0x123',\n      '0x610dcb8fd5cf7f544b85290889a456916fbeaba2',\n      'ERC1155',\n      'https://example.com',\n      '1',\n    ),\n  ).resolves.toEqual({\n    valid: false,\n    error_code: 'NO_OWNERSHIP',\n    message: 'User does not own this token.',\n  });\n});\n\ntest('Returns success if ERC1155 token is owned by user', async () => {", "explanation": "Here is a concise summary:\n\n**Purpose:** Validate ownership of an ERC1155 token for a given user.\n \n**Functionality:** Returns an object with `valid` set to false and error message if the token is not owned by the user, or returns a success response (valid: true) if the token is owned.", "metadata": {"repo": "magiclabs/magic-admin-js", "file": "test/spec/modules/utils/validateTokenOwnership.spec.ts", "chunk_number": 4, "total_chunks": 5}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/magic-admin-js`\n\n**Purpose:** A JavaScript library for building custom Magic Admin interfaces.\n\n**Content:** Open-source codebase providing reusable UI components, APIs, and tools for creating personalized admin experiences with Magic Labs (a no-code platform).", "file_summary": "Here is a concise summary of the file 'test/spec/modules/utils/validateTokenOwnership.spec.ts':\n\n**Purpose:** Validate token ownership using Magic Admin SDK.\n\n**Functionality:** Tests token ownership validation scenarios for ERC1155 and DID tokens, ensuring correct error handling and results."}
{"code": "  const sdk = createMagicAdminSDK('https://example.com');\n\n  // Mock the magic token validation to return ok\n  sdk.token.validate = jest.fn().mockResolvedValue({});\n  // Mock the getPublicAddress to return valid email and wallet\n  sdk.token.getPublicAddress = jest.fn().mockReturnValue('0x610dcb8fd5cf7f544b85290889a456916fbeaba2');\n\n  await expect(\n    sdk.utils.validateTokenOwnership(\n      'did:ethr:0x123',\n      '0x610dcb8fd5cf7f544b85290889a456916fbeaba2',\n      'ERC1155',\n      'https://example.com',\n      '2',\n    ),\n  ).resolves.toEqual({\n    valid: true,\n    error_code: '',\n    message: '',\n  });\n});\n", "explanation": "**Summary**\n\nThis block sets up a test environment for validating token ownership using the Magic Admin SDK. It mocks the SDK's functionality to return expected results, then tests the `validateTokenOwnership` method with specific inputs, verifying its successful execution.", "metadata": {"repo": "magiclabs/magic-admin-js", "file": "test/spec/modules/utils/validateTokenOwnership.spec.ts", "chunk_number": 5, "total_chunks": 5}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/magic-admin-js`\n\n**Purpose:** A JavaScript library for building custom Magic Admin interfaces.\n\n**Content:** Open-source codebase providing reusable UI components, APIs, and tools for creating personalized admin experiences with Magic Labs (a no-code platform).", "file_summary": "Here is a concise summary of the file 'test/spec/modules/utils/validateTokenOwnership.spec.ts':\n\n**Purpose:** Validate token ownership using Magic Admin SDK.\n\n**Functionality:** Tests token ownership validation scenarios for ERC1155 and DID tokens, ensuring correct error handling and results."}
{"code": "import * as codec from '../../../src/utils/codec';\nimport { DECODED_DIDT, VALID_DIDT } from '../../lib/constants';\n\ntest('Decoding', async () => {\n  const decodedString = codec.decodeValue(VALID_DIDT);\n\n  expect(decodedString).toBe(DECODED_DIDT);\n});\n\ntest('Decoding malformed string', async () => {\n  const decodedString = codec.decodeValue(`tRollGoat${VALID_DIDT}`);\n\n  expect(decodedString).not.toBe(DECODED_DIDT);\n});\n\ntest('Decoding null value', async () => {\n  const decodedString = codec.decodeValue(null);\n\n  expect(decodedString).toBe('');\n});\n\ntest('Decoding undefined', async () => {\n  const decodedString = codec.decodeValue(undefined);\n\n  expect(decodedString).toBe('');\n});\n\nit('should return decoded value if running in browser', () => {\n  // Mocking the window object\n  (global as any).window = {\n    atob: jest.fn().mockReturnValue(DECODED_DIDT) // Mocking atob method\n  };\n\n  jest.spyOn(codec, 'isBrowser').mockReturnValue(true);\n\n  expect(codec.decodeValue(VALID_DIDT)).toBe(DECODED_DIDT);\n});", "explanation": "Here is a concise summary:\n\n**Block Purpose:** Tests the functionality of a `codec` utility module's `decodeValue` function.\n\n**Functionality:**\n\n* Decodes valid DIDT strings\n* Returns an empty string for invalid or missing inputs (null, undefined)\n* Uses browser-specific decoding if running in a browser environment", "metadata": {"repo": "magiclabs/magic-admin-js", "file": "test/spec/utils/codec.spec.ts", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/magic-admin-js`\n\n**Purpose:** A JavaScript library for building custom Magic Admin interfaces.\n\n**Content:** Open-source codebase providing reusable UI components, APIs, and tools for creating personalized admin experiences with Magic Labs (a no-code platform).", "file_summary": "Here is a concise summary of the file 'test/spec/utils/codec.spec.ts':\n\n**Tests the `decodeValue` function of the `codec` module, ensuring correct behavior for valid DIDT strings, handling invalid or missing inputs (null, undefined), and leveraging browser-specific decoding when applicable.**"}
{"code": "import { generateIssuerFromPublicAddress } from '../../../../src/utils/issuer';\n\ntest('Successfully builds issuer string from public address', async () => {\n  const result = generateIssuerFromPublicAddress('0x1234');\n  expect(result).toBe('did:ethr:0x1234');\n});\n\ntest('Successfully builds issuer string from public address with overrided method', async () => {\n  const result = generateIssuerFromPublicAddress('0x1234', 'test');\n  expect(result).toBe('did:test:0x1234');\n});\n", "explanation": "Here is a summary of the block:\n\n**Purpose:** Test the `generateIssuerFromPublicAddress` function.\n\n**Functionality:** Verifies that the function generates a valid issuer string from a public address, with an optional method override.", "metadata": {"repo": "magiclabs/magic-admin-js", "file": "test/spec/utils/issuer/generateIssuerFromPublicAddress.spec.ts", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/magic-admin-js`\n\n**Purpose:** A JavaScript library for building custom Magic Admin interfaces.\n\n**Content:** Open-source codebase providing reusable UI components, APIs, and tools for creating personalized admin experiences with Magic Labs (a no-code platform).", "file_summary": "Here's a concise holistic summary:\n\nThis file tests the `generateIssuerFromPublicAddress` function, verifying it correctly generates a valid issuer string from a public address, including edge cases when overriding the default method."}
{"code": "import { parsePublicAddressFromIssuer } from '../../../../src/utils/issuer';\n\ntest('Successfully parses public address from issuer string', async () => {\n  const result = parsePublicAddressFromIssuer('did:ethr:0x1234');\n  expect(result).toBe('0x1234');\n});\n\ntest('Returns empty string if public address fails to parse', async () => {\n  // Notice that public address should be undefined\n  const result = parsePublicAddressFromIssuer('did:ethr');\n  expect(result).toBe('');\n});\n", "explanation": "Here is a concise summary:\n\n**Purpose:** Test parsing of public addresses from issuer strings using `parsePublicAddressFromIssuer` function.\n\n**Functionality:** Two test cases validate the function's ability to extract public address from DID string, returning the correct value or an empty string on failure.", "metadata": {"repo": "magiclabs/magic-admin-js", "file": "test/spec/utils/issuer/parsePublicAddressFromIssuer.spec.ts", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/magic-admin-js`\n\n**Purpose:** A JavaScript library for building custom Magic Admin interfaces.\n\n**Content:** Open-source codebase providing reusable UI components, APIs, and tools for creating personalized admin experiences with Magic Labs (a no-code platform).", "file_summary": "Here is a holistic summary of the file 'test/spec/utils/issuer/parsePublicAddressFromIssuer.spec.ts':\n\n**Test File:** Validates parsing of public addresses from issuer strings using `parsePublicAddressFromIssuer` function, ensuring correct extraction or empty string on failure."}
{"code": "import { VALID_DIDT, VALID_DIDT_DECODED, INVALID_DIDT_MALFORMED_CLAIM } from '../../lib/constants';\nimport { createMalformedTokenError } from '../../../src/core/sdk-exceptions';\nimport { parseDIDToken } from '../../../src/utils/parse-didt';\n\ntest('Successfully parses DIDT', async () => {\n  const result = parseDIDToken(VALID_DIDT);\n  expect(result.withParsedClaim).toEqual(VALID_DIDT_DECODED);\n});\n\ntest('Throws error if token is malformed', async () => {\n  const expectedError = createMalformedTokenError();\n  expect(() => parseDIDToken(INVALID_DIDT_MALFORMED_CLAIM)).toThrow(expectedError);\n});\n", "explanation": "**Summary:**\n\nThis code block tests the functionality of a `parseDIDToken` function, ensuring it:\n\n1. Successfully parses a valid DIDT (Decentralized Identifier Token) and returns a decoded claim.\n2. Throws an error if the input token is malformed or invalid.\n\nThe code uses Jest testing framework to write two test cases for this functionality.", "metadata": {"repo": "magiclabs/magic-admin-js", "file": "test/spec/utils/parse-didt.spec.ts", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/magic-admin-js`\n\n**Purpose:** A JavaScript library for building custom Magic Admin interfaces.\n\n**Content:** Open-source codebase providing reusable UI components, APIs, and tools for creating personalized admin experiences with Magic Labs (a no-code platform).", "file_summary": "Here is a concise summary of the file 'test/spec/utils/parse-didt.spec.ts':\n\n**Summary:**\n\nThis file tests the `parseDIDToken` function, verifying its ability to correctly parse valid DIDT tokens and throw errors on invalid inputs."}
{"code": "import { fetch } from '../../../../src/utils/fetch';\nimport { API_KEY } from '../../../lib/constants';\nimport { get } from '../../../../src/utils/rest';\nimport { createServiceError } from '../../../../src/core/sdk-exceptions';\n\n/*\n  We test remaining code paths to the private function `emitRequest` via the\n  public `get` function.\n */\n\nconst URL = 'https://example.com/hello/world';\n\nconst failWithTypeError = Promise.resolve({\n  json: undefined,\n});\n\nconst failWithBadStatus = Promise.resolve({\n  json: () =>\n    Promise.resolve({\n      status: 'qwerty', // Only 'ok' with succeed\n    }),\n});\n\nconst failWithEmptyStatus = Promise.resolve({\n  json: () =>\n    Promise.resolve({\n      // No status defined will assume non-'ok'\n    }),\n});\n\nconst successResEmptyData = Promise.resolve({\n  json: () =>\n    Promise.resolve({\n      status: 'ok',\n    }),\n});\n\ntest('Fails with TypeError if `res.json` is undefined', async () => {\n  // This test allow us to force `fetch` to catch. This test is primarily for", "explanation": "**Summary**\n\nThis block of code defines a set of tests for a private function `emitRequest` via a public `get` function. It checks how the function handles different scenarios, such as: \n\n* Failing with TypeError if `res.json()` returns undefined\n* Failing with bad status\n* Failing with empty status\n* Succeeding with empty data", "metadata": {"repo": "magiclabs/magic-admin-js", "file": "test/spec/utils/rest/emitRequest.spec.ts", "chunk_number": 1, "total_chunks": 3}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/magic-admin-js`\n\n**Purpose:** A JavaScript library for building custom Magic Admin interfaces.\n\n**Content:** Open-source codebase providing reusable UI components, APIs, and tools for creating personalized admin experiences with Magic Labs (a no-code platform).", "file_summary": "Here is a concise and to-the-point summary of the file 'test/spec/utils/rest/emitRequest.spec.ts':\n\n**Summary:**\n\nThis test suite verifies the `get` function's error handling and fallback behavior for various scenarios, including non-OK HTTP statuses, unexpected errors, and empty status responses."}
{"code": "  // coverage purposes. This case should likely never happen.\n\n  const fetchStub = jest.fn().mockImplementation(() => failWithTypeError);\n  (fetch as any) = fetchStub;\n\n  const expectedError = createServiceError({ status: 'qwerty' });\n\n  await expect(get(URL, API_KEY)).rejects.toThrow(expectedError);\n});\n\ntest('Fails with non-OK status in response JSON', async () => {\n  const fetchStub = jest.fn().mockImplementation(() => failWithBadStatus);\n  (fetch as any) = fetchStub;\n\n  const expectedError = createServiceError({ status: 'qwerty' });\n\n  await expect(get(URL, API_KEY)).rejects.toThrow(expectedError);\n});\n\ntest('Succeeds with empty data in response JSON, returning `{}` as fallback', async () => {\n  const fetchStub = jest.fn().mockImplementation(() => successResEmptyData);\n  (fetch as any) = fetchStub;\n  await expect(get(URL, API_KEY)).resolves.toEqual({});\n});\n\ntest('Fails with empty status in response', async () => {\n  const fetchStub = jest.fn().mockImplementation(() => failWithEmptyStatus);", "explanation": "**Purpose:** Test suite for `get` function.\n\n**Functionality:**\n\n* Tests error handling for non-OK HTTP statuses, unexpected error types, and empty status responses.\n* Verifies correct fallback behavior when data is missing in API response JSON.\n* Uses Jest mocks to simulate different scenarios.", "metadata": {"repo": "magiclabs/magic-admin-js", "file": "test/spec/utils/rest/emitRequest.spec.ts", "chunk_number": 2, "total_chunks": 3}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/magic-admin-js`\n\n**Purpose:** A JavaScript library for building custom Magic Admin interfaces.\n\n**Content:** Open-source codebase providing reusable UI components, APIs, and tools for creating personalized admin experiences with Magic Labs (a no-code platform).", "file_summary": "Here is a concise and to-the-point summary of the file 'test/spec/utils/rest/emitRequest.spec.ts':\n\n**Summary:**\n\nThis test suite verifies the `get` function's error handling and fallback behavior for various scenarios, including non-OK HTTP statuses, unexpected errors, and empty status responses."}
{"code": "  (fetch as any) = fetchStub;\n\n  const expectedError = createServiceError({ status: 'qwerty' });\n\n  expect(get(URL, API_KEY)).rejects.toThrow(expectedError);\n});\n", "explanation": "This block is a test case that:\n\n* Uses a mock API (fetchStub) to mimic an incorrect fetch request\n* Creates an error with a specific status code (\"qwerty\")\n* Expects the get() function to reject with this error when called with specified URL and API key parameters.", "metadata": {"repo": "magiclabs/magic-admin-js", "file": "test/spec/utils/rest/emitRequest.spec.ts", "chunk_number": 3, "total_chunks": 3}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/magic-admin-js`\n\n**Purpose:** A JavaScript library for building custom Magic Admin interfaces.\n\n**Content:** Open-source codebase providing reusable UI components, APIs, and tools for creating personalized admin experiences with Magic Labs (a no-code platform).", "file_summary": "Here is a concise and to-the-point summary of the file 'test/spec/utils/rest/emitRequest.spec.ts':\n\n**Summary:**\n\nThis test suite verifies the `get` function's error handling and fallback behavior for various scenarios, including non-OK HTTP statuses, unexpected errors, and empty status responses."}
{"code": "import { fetch } from '../../../../src/utils/fetch';\nimport { API_KEY } from '../../../lib/constants';\nimport { get } from '../../../../src/utils/rest';\n\nconst successRes = Promise.resolve({\n  json: () =>\n    Promise.resolve({\n      data: 'hello world',\n      status: 'ok',\n    }),\n});\n\ntest('Successfully GETs to the given endpoint & stringifies query params', async () => {\n  const fetchStub = jest.fn().mockImplementation(() => successRes);\n  (fetch as any) = fetchStub;\n  await expect(get('https://example.com/hello/world', API_KEY, { foo: 'hello', bar: 'world' })).resolves.toBe(\n    'hello world',\n  );\n\n  const fetchArguments = fetchStub.mock.calls[0];\n  expect(fetchArguments).toEqual([\n    'https://example.com/hello/world?foo=hello&bar=world',\n    {\n      method: 'GET',\n      headers: { 'X-Magic-Secret-key': API_KEY },\n    },\n  ]);\n});\n\ntest('Successfully GETs to the given endpoint with no query params', async () => {\n  const fetchStub = jest.fn().mockImplementation(() => successRes);\n  (fetch as any) = fetchStub;\n", "explanation": "**Summary:**\n\nThis block is a test suite for a `get` function, which uses the `fetch` utility to make GET requests to an API endpoint. The tests verify that the `get` function correctly:\n\n* Makes a GET request with query parameters\n* Returns the expected response data\n* Uses the correct method (GET) and headers (with API key)\n\nThe test suite uses Jest mocking to isolate the dependencies and simulate the fetch behavior.", "metadata": {"repo": "magiclabs/magic-admin-js", "file": "test/spec/utils/rest/get.spec.ts", "chunk_number": 1, "total_chunks": 2}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/magic-admin-js`\n\n**Purpose:** A JavaScript library for building custom Magic Admin interfaces.\n\n**Content:** Open-source codebase providing reusable UI components, APIs, and tools for creating personalized admin experiences with Magic Labs (a no-code platform).", "file_summary": "Here is a concise and holistic summary of the file 'test/spec/utils/rest/get.spec.ts':\n\n**Summary:**\nThis test suite verifies that the `get` function correctly makes GET requests with query params, returns expected response data, and uses the correct method (GET) and headers (with API key)."}
{"code": "  await expect(get('https://example.com/hello/world', API_KEY)).resolves.toBe('hello world');\n\n  const fetchArguments = fetchStub.mock.calls[0];\n  expect(fetchArguments).toEqual([\n    'https://example.com/hello/world',\n    {\n      method: 'GET',\n      headers: { 'X-Magic-Secret-key': API_KEY },\n    },\n  ]);\n});\n", "explanation": "Here is a concise summary:\n\n**Testing Fetch Functionality**\n\nThis block tests that an HTTP GET request with a specific key returns the expected response (\"hello world\") and verifies the fetch function's parameters (URL, method, headers) match the test's expectations.", "metadata": {"repo": "magiclabs/magic-admin-js", "file": "test/spec/utils/rest/get.spec.ts", "chunk_number": 2, "total_chunks": 2}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/magic-admin-js`\n\n**Purpose:** A JavaScript library for building custom Magic Admin interfaces.\n\n**Content:** Open-source codebase providing reusable UI components, APIs, and tools for creating personalized admin experiences with Magic Labs (a no-code platform).", "file_summary": "Here is a concise and holistic summary of the file 'test/spec/utils/rest/get.spec.ts':\n\n**Summary:**\nThis test suite verifies that the `get` function correctly makes GET requests with query params, returns expected response data, and uses the correct method (GET) and headers (with API key)."}
{"code": "import fetch from 'node-fetch';\nimport { API_KEY } from '../../../lib/constants';\nimport { post } from '../../../../src/utils/rest';\n\nconst successRes = Promise.resolve({\n  json: () =>\n    Promise.resolve({\n      data: 'hello world',\n      status: 'ok',\n    }),\n});\n\ntest('Successfully POSTs to the given endpoint & stringifies body', async () => {\n  const fetchStub = jest.fn().mockImplementation(() => successRes);\n  (fetch as any) = fetchStub;\n\n  await expect(post('https://example.com/hello/world', API_KEY, { public_address: '0x0123' })).resolves.toBe(\n    'hello world',\n  );\n\n  const fetchArguments = fetchStub.mock.calls[0];\n  expect(fetchArguments).toEqual([\n    'https://example.com/hello/world',\n    {\n      method: 'POST',\n      headers: { 'X-Magic-Secret-key': API_KEY },\n      body: '{\"public_address\":\"0x0123\"}',\n    },\n  ]);\n});\n", "explanation": "**Block Summary**\n\nThis block is a test case for an HTTP POST request function (`post`) that uses Jest to mock the `fetch` library. It ensures the function correctly sends a POST request with a JSON body and a secret API key, and returns the expected response data.", "metadata": {"repo": "magiclabs/magic-admin-js", "file": "test/spec/utils/rest/post.spec.ts", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/magic-admin-js`\n\n**Purpose:** A JavaScript library for building custom Magic Admin interfaces.\n\n**Content:** Open-source codebase providing reusable UI components, APIs, and tools for creating personalized admin experiences with Magic Labs (a no-code platform).", "file_summary": "Here's a concise summary of the file 'test/spec/utils/rest/post.spec.ts':\n\n\"Test suite for HTTP POST requests using Jest, ensuring correct sending of JSON body and API key.\""}
{"code": "import { isDIDTClaim } from '../../../../src/utils/type-guards';\n\ntest('Returns false given `undefined`', async () => {\n  expect(isDIDTClaim(undefined)).toBe(false);\n});\n\ntest('Returns false given `null`', async () => {\n  expect(isDIDTClaim(null)).toBe(false);\n});\n\ntest('Returns false given without `Claim.iat`', async () => {\n  expect(isDIDTClaim({ ext: 123, iss: 'asdf', sub: 'asdf', aud: 'asdf', nbf: 123, tid: 'asdf', add: '0x0123' })).toBe(\n    false,\n  );\n});\n\ntest('Returns false given without `Claim.ext`', async () => {\n  expect(isDIDTClaim({ iat: 123, iss: 'asdf', sub: 'asdf', aud: 'asdf', nbf: 123, tid: 'asdf', add: '0x0123' })).toBe(\n    false,\n  );\n});\n\ntest('Returns false given without `Claim.iss`', async () => {\n  expect(isDIDTClaim({ iat: 123, ext: 123, sub: 'asdf', aud: 'asdf', nbf: 123, tid: 'asdf', add: '0x0123' })).toBe(\n    false,\n  );\n});\n\ntest('Returns false given without `Claim.sub`', async () => {", "explanation": "**Summary:**\n\nThis block tests a utility function `isDIDTClaim` that checks if an object conforms to a specific DID T Claim structure. The tests verify that the function returns `false` when the input object is missing any of the required properties (`iat`, `ext`, `iss`, `sub`, or `aud`).", "metadata": {"repo": "magiclabs/magic-admin-js", "file": "test/spec/utils/type-guards/isDIDTClaim.spec.ts", "chunk_number": 1, "total_chunks": 3}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/magic-admin-js`\n\n**Purpose:** A JavaScript library for building custom Magic Admin interfaces.\n\n**Content:** Open-source codebase providing reusable UI components, APIs, and tools for creating personalized admin experiences with Magic Labs (a no-code platform).", "file_summary": "Here's a concise summary:\n\n**Summary:**\n\nThis file tests the `isDIDTClaim` utility function, which verifies if an object conforms to the required structure of a DID T Claim by checking for the presence of specific properties (`iat`, `ext`, `iss`, `sub`, `aud`, etc.). The test cases ensure that the function returns `false` when any required property is missing."}
{"code": "  expect(isDIDTClaim({ iat: 123, ext: 123, iss: 'asdf', aud: 'asdf', nbf: 123, tid: 'asdf', add: '0x0123' })).toBe(\n    false,\n  );\n});\n\ntest('Returns false given without `Claim.aud`', async () => {\n  expect(isDIDTClaim({ iat: 123, ext: 123, iss: 'asdf', sub: 'asdf', nbf: 123, tid: 'asdf', add: '0x0123' })).toBe(\n    false,\n  );\n});\n\ntest('Returns false given without `Claim.nbf`', async () => {\n  expect(isDIDTClaim({ iat: 123, ext: 123, iss: 'asdf', sub: 'asdf', aud: 'asdf', tid: 'asdf', add: '0x0123' })).toBe(\n    false,\n  );\n});\n\ntest('Returns false given without `Claim.tid`', async () => {\n  expect(isDIDTClaim({ iat: 123, ext: 123, iss: 'asdf', sub: 'asdf', aud: 'asdf', nbf: 123, add: '0x0123' })).toBe(\n    false,\n  );\n});\n\ntest('Returns false given without `Claim.add`', async () => {\n  expect(isDIDTClaim({ iat: 123, ext: 123, iss: 'asdf', sub: 'asdf', aud: 'asdf', nbf: 123, tid: 'asdf' })).toBe(false);\n});\n\ntest('Returns true given with all required properties', async () => {\n  expect(", "explanation": "This block appears to be a set of test cases for a function named `isDIDTClaim`. The purpose is to verify that the function returns correct results based on the presence or absence of specific properties in an object.\n\nThe functionality is to check if an input object contains all required properties (iat, ext, iss, aud, nbf, tid, and add) for a DID-T claim. If any of these properties are missing, the function should return false; otherwise, it should return true.", "metadata": {"repo": "magiclabs/magic-admin-js", "file": "test/spec/utils/type-guards/isDIDTClaim.spec.ts", "chunk_number": 2, "total_chunks": 3}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/magic-admin-js`\n\n**Purpose:** A JavaScript library for building custom Magic Admin interfaces.\n\n**Content:** Open-source codebase providing reusable UI components, APIs, and tools for creating personalized admin experiences with Magic Labs (a no-code platform).", "file_summary": "Here's a concise summary:\n\n**Summary:**\n\nThis file tests the `isDIDTClaim` utility function, which verifies if an object conforms to the required structure of a DID T Claim by checking for the presence of specific properties (`iat`, `ext`, `iss`, `sub`, `aud`, etc.). The test cases ensure that the function returns `false` when any required property is missing."}
{"code": "    isDIDTClaim({ iat: 123, ext: 123, iss: 'asdf', sub: 'asdf', aud: 'asdf', nbf: 123, tid: 'asdf', add: '0x0123' }),\n  ).toBe(true);\n});\n", "explanation": "This block is a test statement that checks if a specific DID (Decentralized Identifier) claim meets certain conditions, returning `true` if it does.", "metadata": {"repo": "magiclabs/magic-admin-js", "file": "test/spec/utils/type-guards/isDIDTClaim.spec.ts", "chunk_number": 3, "total_chunks": 3}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/magic-admin-js`\n\n**Purpose:** A JavaScript library for building custom Magic Admin interfaces.\n\n**Content:** Open-source codebase providing reusable UI components, APIs, and tools for creating personalized admin experiences with Magic Labs (a no-code platform).", "file_summary": "Here's a concise summary:\n\n**Summary:**\n\nThis file tests the `isDIDTClaim` utility function, which verifies if an object conforms to the required structure of a DID T Claim by checking for the presence of specific properties (`iat`, `ext`, `iss`, `sub`, `aud`, etc.). The test cases ensure that the function returns `false` when any required property is missing."}
{"code": "{\n  \"extends\": \"../config/tsconfig.test.json\",\n  \"compilerOptions\": {\n    \"target\": \"es5\"\n  }\n}\n", "explanation": "This is a JSON configuration block for Webpack, specifically for testing purposes.\n\nPurpose: Configure Webpack for testing.\n\nFunctionality:\n\n* Extends an existing `tsconfig` file (`../config/tsconfig.test.json`)\n* Specifies the target JavaScript version as ES5.", "metadata": {"repo": "magiclabs/magic-admin-js", "file": "test/tsconfig.json", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/magic-admin-js`\n\n**Purpose:** A JavaScript library for building custom Magic Admin interfaces.\n\n**Content:** Open-source codebase providing reusable UI components, APIs, and tools for creating personalized admin experiences with Magic Labs (a no-code platform).", "file_summary": "Here is a concise summary of the 'test/tsconfig.json' file:\n\nJSON configuration block for Webpack testing, extending '../config/tsconfig.test.json', targeting ES5 JavaScript."}
{"code": "{\n  \"extends\": \"./config/tsconfig.base.json\",\n  \"compilerOptions\": {\n    \"target\": \"es5\"\n  }\n}\n", "explanation": "This is a JSON configuration file for TypeScript, defining compiler options. It:\n\n* Extends a base config file (`./config/tsconfig.base.json`)\n* Specifies the target JavaScript version as ES5.", "metadata": {"repo": "magiclabs/magic-admin-js", "file": "tsconfig.json", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/magic-admin-js`\n\n**Purpose:** A JavaScript library for building custom Magic Admin interfaces.\n\n**Content:** Open-source codebase providing reusable UI components, APIs, and tools for creating personalized admin experiences with Magic Labs (a no-code platform).", "file_summary": "Here's a concise holistic summary of the 'tsconfig.json' file:\n\n`tsconfig.json`: A TypeScript configuration file extending a base config, targeting JavaScript ES5."}

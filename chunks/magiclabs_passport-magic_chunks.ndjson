{"code": "---\nname: Bug Report\nabout: Use this template to report a bug.\ntitle: \"[DESCRIPTIVE BUG NAME]\"\nlabels: \ud83d\udc1b Bug Report, \ud83d\udd0d Needs Triage\n---\n\n### \u2705 Prerequisites\n\n- [ ] Did you perform a cursory search of open issues? Is this bug already reported elsewhere?\n- [ ] Are you running the latest SDK version?\n- [ ] Are you reporting to the correct repository (`passport-magic`)?\n\n### \ud83d\udc1b Description\n\n[Description of the bug.]\n\n### \ud83e\udde9 Steps to Reproduce\n\n1. [First Step]\n2. [Second Step]\n3. [and so on...]\n\n### \ud83e\udd14 Expected behavior\n\n[What you expected to happen?]\n\n### \ud83d\ude2e Actual behavior\n\n[What actually happened? Please include any error stack traces you encounter.]\n\n### \ud83d\udcbb Code Sample\n\n[If possible, please provide a code repository, gist, code snippet or sample files to reproduce the issue.]\n\n### \ud83c\udf0e Environment\n\n| Software         | Version(s) |\n| ---------------- | ---------- |\n| `passport-magic` |\n| Node             |\n| `yarn`           |\n| Operating System |\n", "explanation": "**Purpose:** A template for reporting bugs, ensuring a structured approach to issue submission.\n\n**Functionality:**\n\n* Guides users through a step-by-step process of reporting a bug.\n* Includes fields for:\n\t+ Prerequisites (searching existing issues, running latest SDK version, etc.)\n\t+ Bug description\n\t+ Steps to reproduce the issue\n\t+ Expected and actual behavior\n\t+ Code sample (optional)\n\t+ Environment details\n* Uses labels \ud83d\udc1b Bug Report and \ud83d\udd0d Needs Triage to categorize and prioritize the bug.", "metadata": {"repo": "magiclabs/passport-magic", "file": ".github/ISSUE_TEMPLATE/bug_report.md", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "This repository, `magiclabs/passport-magic`, is a Passport.js strategy for Magic (formerly known as Stripe Identity) authentication.\n\nContent:\n\n* A single file (`index.js`) that exports a Passport strategy\n* Implementation of Magic authentication logic\n* Example usage code in the README and/or tests", "file_summary": "Here is a holistic summary of the file '.github/ISSUE_TEMPLATE/bug_report.md':\n\n**Bug Report Template**: A structured template for reporting bugs, guiding users through a step-by-step process with fields for prerequisites, description, reproduction steps, expected vs actual behavior, code sample (optional), and environment details."}
{"code": "---\nname: Feature Request\nabout: Use this template to request a new feature.\ntitle: \"[DESCRIPTIVE FEATURE NAME]\"\nlabels: \u2728Feature Request\n---\n\n### \u2705 Prerequisites\n\n- [ ] Did you perform a cursory search of open issues? Is this feature already requested elsewhere?\n- [ ] Are you reporting to the correct repository (`passport-magic`)?\n\n### \u2728 Feature Request\n\n[Description of the feature.]\n\n## \ud83e\udde9 Context\n\n[Explain any additional context or rationale for this feature. What are you trying to accomplish?]\n\n## \ud83d\udcbb Examples\n\n[Do you have any example(s) for the requested feature? If so, describe/demonstrate your example(s) here.]\n", "explanation": "Here is a concise summary of the purpose and functionality of this block:\n\n**Purpose:** A template for submitting new feature requests.\n\n**Functionality:** Provides guidelines and fields for users to propose and explain a desired feature, including prerequisites, context, examples, and description.", "metadata": {"repo": "magiclabs/passport-magic", "file": ".github/ISSUE_TEMPLATE/feature_request.md", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "This repository, `magiclabs/passport-magic`, is a Passport.js strategy for Magic (formerly known as Stripe Identity) authentication.\n\nContent:\n\n* A single file (`index.js`) that exports a Passport strategy\n* Implementation of Magic authentication logic\n* Example usage code in the README and/or tests", "file_summary": "Here is a concise holistic summary:\n\n**Feature Request Template:**\nA guide for proposing new features, outlining prerequisites, context, examples, and detailed descriptions to help users effectively submit their requests."}
{"code": "---\nname: Question\nabout: Use this template to request help or ask a question.\ntitle: \"[WHAT'S YOUR QUESTION?]\"\nlabels: \u2753Question\n---\n\n### \u2705 Prerequisites\n\n- [ ] Did you perform a cursory search of open issues? Is this question already asked elsewhere?\n- [ ] Are you reporting to the correct repository (`passport-magic`)?\n\n### \u2753 Question\n\n[Ask your question here, please be as detailed as possible!]\n\n### \ud83c\udf0e Environment\n\n| Software         | Version(s) |\n| ---------------- | ---------- |\n| `passport-magic` |\n| Node             |\n| `yarn`           |\n| Operating System |\n", "explanation": "Here is a concise summary:\n\n**Purpose:** A template for users to request help or ask questions.\n\n**Functionality:** Provides a structured format for users to submit a question, including prerequisites to ensure the issue hasn't already been addressed, a space to describe the problem in detail, and an environment section to specify relevant software versions and OS.", "metadata": {"repo": "magiclabs/passport-magic", "file": ".github/ISSUE_TEMPLATE/question.md", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "This repository, `magiclabs/passport-magic`, is a Passport.js strategy for Magic (formerly known as Stripe Identity) authentication.\n\nContent:\n\n* A single file (`index.js`) that exports a Passport strategy\n* Implementation of Magic authentication logic\n* Example usage code in the README and/or tests", "file_summary": "Here is a concise summary:\n\n**File '.github/ISSUE_TEMPLATE/question.md':**\n\n**Purpose:** A template for users to request help or ask questions.\n**Functionality:** Structured format for submitting questions, including prerequisites, detailed problem description, and environment specifications."}
{"code": "### \ud83d\udce6 Pull Request\n\n[Provide a general summary of the pull request here.]\n\n### \ud83d\udddc Versioning\n\n(Check _one!_)\n\n- [ ] Patch: Bug Fix?\n- [ ] Minor: New Feature?\n- [ ] Major: Breaking Change?\n\n### \u2705 Fixed Issues\n\n- [List any fixed issues here like: Fixes #XXXX]\n\n### \ud83d\udea8 Test instructions\n\n[Describe any additional context required to test the PR/feature/bug fix.]\n\n### \u26a0\ufe0f Update `CHANGELOG.md`\n\n- [ ] I have updated the `Upcoming Changes` section of `CHANGELOG.md` with context related to this Pull Request.\n", "explanation": "**Purpose:** Documenting a Pull Request (PR) for review.\n\n**Functionality:**\n\n1. **Summary**: Briefly describe the PR's purpose.\n2. **Versioning**: Categorize the PR as a patch, minor, or major update based on its impact (bug fix, new feature, or breaking change).\n3. **Fixed Issues**: List any related issues fixed by this PR.\n4. **Test Instructions**: Provide additional context for testing the PR.\n5. **CHANGELOG Update**: Confirm whether the `CHANGELOG.md` has been updated to reflect changes made in this PR.", "metadata": {"repo": "magiclabs/passport-magic", "file": ".github/PULL_REQUEST_TEMPLATE.md", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "This repository, `magiclabs/passport-magic`, is a Passport.js strategy for Magic (formerly known as Stripe Identity) authentication.\n\nContent:\n\n* A single file (`index.js`) that exports a Passport strategy\n* Implementation of Magic authentication logic\n* Example usage code in the README and/or tests", "file_summary": "Here is a concise summary of the file '.github/PULL_REQUEST_TEMPLATE.md':\n\n**Template for documenting Pull Requests**\n\nThis template provides a structured format for reviewing Pull Requests, including:\n\n* Brief description of purpose\n* Versioning category (patch/minor/major update)\n* List of related issues fixed\n* Additional test instructions\n* Confirmation of CHANGELOG.md update"}
{"code": "name: Tests\nconcurrency:\n  group: tests-${{ github.ref }}\n  cancel-in-progress: true\non:\n  push:\n    branches:\n      - \"master\"\n  pull_request:\n\njobs:\n  lint:\n    runs-on: ubuntu-20.04\n    name: Run linter and package audit\n    steps:\n      - uses: actions/checkout@v3\n\n      - uses: actions/setup-python@v4\n        with:\n          python-version: '3'\n\n      - name: Setup node\n        uses: actions/setup-node@v3\n        with:\n          node-version: 16\n          cache: 'yarn'\n      - run: |\n          yarn -v\n          python -V\n          yarn\n\n      - name: Lint\n        run: yarn run lint\n\n      - name: Audit Production Dependencies\n        run: yarn audit --groups dependencies || true\n\n  test:\n    runs-on: ubuntu-20.04\n    name: Run tests\n    steps:\n      - uses: actions/checkout@v3\n\n      - uses: actions/setup-python@v4\n        with:\n          python-version: '3'\n\n      - name: Setup node\n        uses: actions/setup-node@v3\n        with:\n          node-version: 16\n          cache: 'yarn'\n      - run: |\n          yarn -v", "explanation": "Here is a summary of the purpose and functionality:\n\n**Purpose:** Run automated tests (linting, auditing, and testing) for code changes on GitHub.\n\n**Functionality:** Two jobs are defined:\n\n1. **Lint**: Runs linter and package audit tools to check for coding errors and security vulnerabilities.\n2. **Test**: Executes tests using Python and Node.js environments.", "metadata": {"repo": "magiclabs/passport-magic", "file": ".github/workflows/test.yaml", "chunk_number": 1, "total_chunks": 2}, "repository_explanation": "This repository, `magiclabs/passport-magic`, is a Passport.js strategy for Magic (formerly known as Stripe Identity) authentication.\n\nContent:\n\n* A single file (`index.js`) that exports a Passport strategy\n* Implementation of Magic authentication logic\n* Example usage code in the README and/or tests", "file_summary": "Here is a concise summary of the file '.github/workflows/test.yaml':\n\n**Automated Testing Workflow**\n\nThis YAML file configures a GitHub Actions workflow to automate testing for code changes, consisting of two jobs: **Lint** (error checking) and **Test** (execution with Python and Node.js environments)."}
{"code": "          python -V\n          yarn\n\n      - name: Test\n        run: |\n          yarn build\n          yarn run test\n", "explanation": "**Block Summary**\n\nThis block is a GitHub Actions workflow configuration.\n\n* The first two lines are commands executed in a shell environment, listing Python and Yarn versions.\n* The third section defines a job named \"Test\" that runs two commands:\n\t1. Builds the project using `yarn build`.\n\t2. Runs tests using `yarn run test`.", "metadata": {"repo": "magiclabs/passport-magic", "file": ".github/workflows/test.yaml", "chunk_number": 2, "total_chunks": 2}, "repository_explanation": "This repository, `magiclabs/passport-magic`, is a Passport.js strategy for Magic (formerly known as Stripe Identity) authentication.\n\nContent:\n\n* A single file (`index.js`) that exports a Passport strategy\n* Implementation of Magic authentication logic\n* Example usage code in the README and/or tests", "file_summary": "Here is a concise summary of the file '.github/workflows/test.yaml':\n\n**Automated Testing Workflow**\n\nThis YAML file configures a GitHub Actions workflow to automate testing for code changes, consisting of two jobs: **Lint** (error checking) and **Test** (execution with Python and Node.js environments)."}
{"code": "module.exports = require('@ikscodes/prettier-config');\n", "explanation": "This block exports a Prettier configuration module from the `@ikscodes/prettier-config` package.", "metadata": {"repo": "magiclabs/passport-magic", "file": ".prettierrc.js", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "This repository, `magiclabs/passport-magic`, is a Passport.js strategy for Magic (formerly known as Stripe Identity) authentication.\n\nContent:\n\n* A single file (`index.js`) that exports a Passport strategy\n* Implementation of Magic authentication logic\n* Example usage code in the README and/or tests", "file_summary": "Here is a concise summary:\n\nThe `.prettierrc.js` file imports and exports a Prettier configuration module from the `@ikscodes/prettier-config` package, providing a unified code formatting standard."}
{"code": "## Upcoming Changes\n\n#### Fixed\n\n- ...\n\n#### Changed\n\n- ...\n\n#### Added\n\n- ...\n\n## `1.0.0` - 04/09/2020\n\nThis is the first release our changelog records. Future updates will be logged in the following format:\n\n#### Fixed\n\n- Bug fixes and patches will be described here.\n\n#### Changed\n\n- Changes (breaking or otherwise) to current APIs will be described here.\n\n#### Added\n\n- New features or APIs will be described here.\n", "explanation": "**Summary:**\n\nThis block is a changelog, listing updates to software or code with sections for:\n\n* Fixed: Bug fixes and patches\n* Changed: API changes (breaking or otherwise)\n* Added: New features or APIs", "metadata": {"repo": "magiclabs/passport-magic", "file": "CHANGELOG.md", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "This repository, `magiclabs/passport-magic`, is a Passport.js strategy for Magic (formerly known as Stripe Identity) authentication.\n\nContent:\n\n* A single file (`index.js`) that exports a Passport strategy\n* Implementation of Magic authentication logic\n* Example usage code in the README and/or tests", "file_summary": "Here's a holistic summary of the file 'CHANGELOG.md':\n\n**Summary:** A changelog file that logs updates to software or code, categorized by bug fixes (\"Fixed\"), API changes (\"Changed\"), and new features or additions (\"Added\")."}
{"code": "# Contributing\n\nWhen contributing to this repository, please first discuss the change you wish to make via an **issue**. This can be a feature request or a bug report. After a maintainer has triaged your issue, you are welcome to collaborate on a pull request. If your change is small or uncomplicated, you are welcome to open an issue and pull request simultaneously.\n\nPlease note we have a **code of conduct**, please follow it in all your interactions with the project.\n\n## Setting up for Local Development\n\n1. Fork this repostiory.\n2. Clone your fork.\n3. Create a new branch in your local repository with the following pattern:\n\n- For bug fixes: `bug/#[issue_number]/[descriptive_bug_name]`\n- For features: `feature/#[issue_number]/[descriptive_feature_name]`\n- For chores/the rest: `chore/[descriptive_chore_name]`\n\n4. Install dependencies with Yarn: `yarn install`\n5. Start building for development: `yarn start`\n\n## Opening a Pull Request\n", "explanation": "Here is a concise summary of the purpose and functionality of this block:\n\n**Purpose:** Guidelines for contributing to a repository, including setting up local development and opening pull requests.\n\n**Functionality:** Explains how to contribute code by proposing an issue, collaborating on a pull request, and provides instructions for setting up local development.", "metadata": {"repo": "magiclabs/passport-magic", "file": "CONTRIBUTING.md", "chunk_number": 1, "total_chunks": 7}, "repository_explanation": "This repository, `magiclabs/passport-magic`, is a Passport.js strategy for Magic (formerly known as Stripe Identity) authentication.\n\nContent:\n\n* A single file (`index.js`) that exports a Passport strategy\n* Implementation of Magic authentication logic\n* Example usage code in the README and/or tests", "file_summary": "Here is a holistic summary of the file 'CONTRIBUTING.md':\n\nThis document outlines guidelines for contributing to a repository, including setting up local development and submitting pull requests. It also establishes community standards for respectful behavior, reports abusive behavior, and defines consequences for violating these standards, ranging from warnings to permanent bans."}
{"code": "1. Update the **`Upcoming Changes`** section of [`CHANGELOG.md`](./CHANGELOG.md) with your fixes, changes, or additions. A maintainer will label your changes with a version number and release date once they are published.\n2. Open a pull request from your fork/branch to the upstream `master` branch of _this_ repository.\n3. A maintainer will review your code changes and offer feedback or suggestions if necessary. Once your changes are approved, a maintainer will merge the pull request for you and publish a release.\n\n## Contributor Covenant Code of Conduct\n\n### Our Pledge\n\nWe as members, contributors, and leaders pledge to make participation in our\ncommunity a harassment-free experience for everyone, regardless of age, body\nsize, visible or invisible disability, ethnicity, sex characteristics, gender\nidentity and expression, level of experience, education, socio-economic status,\nnationality, personal appearance, race, religion, or sexual identity\nand orientation.\n", "explanation": "Here is a concise summary:\n\nThis block outlines the process for contributors to propose changes to the repository: update the CHANGELOG, submit a pull request with code changes, receive review and feedback, and have the changes merged and released by maintainers.", "metadata": {"repo": "magiclabs/passport-magic", "file": "CONTRIBUTING.md", "chunk_number": 2, "total_chunks": 7}, "repository_explanation": "This repository, `magiclabs/passport-magic`, is a Passport.js strategy for Magic (formerly known as Stripe Identity) authentication.\n\nContent:\n\n* A single file (`index.js`) that exports a Passport strategy\n* Implementation of Magic authentication logic\n* Example usage code in the README and/or tests", "file_summary": "Here is a holistic summary of the file 'CONTRIBUTING.md':\n\nThis document outlines guidelines for contributing to a repository, including setting up local development and submitting pull requests. It also establishes community standards for respectful behavior, reports abusive behavior, and defines consequences for violating these standards, ranging from warnings to permanent bans."}
{"code": "We pledge to act and interact in ways that contribute to an open, welcoming,\ndiverse, inclusive, and healthy community.\n\n### Our Standards\n\nExamples of behavior that contributes to a positive environment for our\ncommunity include:\n\n- Demonstrating empathy and kindness toward other people\n- Being respectful of differing opinions, viewpoints, and experiences\n- Giving and gracefully accepting constructive feedback\n- Accepting responsibility and apologizing to those affected by our mistakes, and learning from the experience\n- Focusing on what is best not just for us as individuals, but for the overall community\n\nExamples of unacceptable behavior include:\n\n- The use of sexualized language or imagery, and sexual attention or advances of any kind\n- Trolling, insulting or derogatory comments, and personal or political attacks\n- Public or private harassment\n- Publishing others' private information, such as a physical or email address, without their explicit permission", "explanation": "**Purpose:** Establish community standards for respectful behavior.\n\n**Functionality:** Outlines expectations for positive interaction and behavior, while prohibiting unacceptable actions such as harassment, insults, and invasion of privacy.", "metadata": {"repo": "magiclabs/passport-magic", "file": "CONTRIBUTING.md", "chunk_number": 3, "total_chunks": 7}, "repository_explanation": "This repository, `magiclabs/passport-magic`, is a Passport.js strategy for Magic (formerly known as Stripe Identity) authentication.\n\nContent:\n\n* A single file (`index.js`) that exports a Passport strategy\n* Implementation of Magic authentication logic\n* Example usage code in the README and/or tests", "file_summary": "Here is a holistic summary of the file 'CONTRIBUTING.md':\n\nThis document outlines guidelines for contributing to a repository, including setting up local development and submitting pull requests. It also establishes community standards for respectful behavior, reports abusive behavior, and defines consequences for violating these standards, ranging from warnings to permanent bans."}
{"code": "- Other conduct which could reasonably be considered inappropriate in a professional setting\n\n### Enforcement Responsibilities\n\nCommunity leaders are responsible for clarifying and enforcing our standards of\nacceptable behavior and will take appropriate and fair corrective action in\nresponse to any behavior that they deem inappropriate, threatening, offensive,\nor harmful.\n\nCommunity leaders have the right and responsibility to remove, edit, or reject\ncomments, commits, code, wiki edits, issues, and other contributions that are\nnot aligned to this Code of Conduct, and will communicate reasons for moderation\ndecisions when appropriate.\n\n### Scope\n\nThis Code of Conduct applies within all community spaces, and also applies when\nan individual is officially representing the community in public spaces.\nExamples of representing our community include using an official e-mail address,\nposting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event.\n\n### Enforcement\n", "explanation": "**Summary:**\n\nThis block outlines a Code of Conduct for a professional setting, outlining expected behavior and consequences for unacceptable conduct. It defines community leaders' roles in enforcing the code, moderating content, and taking corrective action when necessary.", "metadata": {"repo": "magiclabs/passport-magic", "file": "CONTRIBUTING.md", "chunk_number": 4, "total_chunks": 7}, "repository_explanation": "This repository, `magiclabs/passport-magic`, is a Passport.js strategy for Magic (formerly known as Stripe Identity) authentication.\n\nContent:\n\n* A single file (`index.js`) that exports a Passport strategy\n* Implementation of Magic authentication logic\n* Example usage code in the README and/or tests", "file_summary": "Here is a holistic summary of the file 'CONTRIBUTING.md':\n\nThis document outlines guidelines for contributing to a repository, including setting up local development and submitting pull requests. It also establishes community standards for respectful behavior, reports abusive behavior, and defines consequences for violating these standards, ranging from warnings to permanent bans."}
{"code": "Instances of abusive, harassing, or otherwise unacceptable behavior may be\nreported to the community leaders responsible for enforcement at [support@magic.link](mailto:support@magic.link).\nAll complaints will be reviewed and investigated promptly and fairly.\n\nAll community leaders are obligated to respect the privacy and security of the\nreporter of any incident.\n\n### Enforcement Guidelines\n\nCommunity leaders will follow these Community Impact Guidelines in determining\nthe consequences for any action they deem in violation of this Code of Conduct:\n\n#### 1. Correction\n\n**Community Impact**: Use of inappropriate language or other behavior deemed\nunprofessional or unwelcome in the community.\n\n**Consequence**: A private, written warning from community leaders, providing\nclarity around the nature of the violation and an explanation of why the\nbehavior was inappropriate. A public apology may be requested.\n\n#### 2. Warning\n\n**Community Impact**: A violation through a single incident or series\nof actions.\n", "explanation": "Here is a concise summary:\n\nThis block outlines a reporting process for abusive behavior in a community, including guidelines for investigating and enforcing consequences on offenders.", "metadata": {"repo": "magiclabs/passport-magic", "file": "CONTRIBUTING.md", "chunk_number": 5, "total_chunks": 7}, "repository_explanation": "This repository, `magiclabs/passport-magic`, is a Passport.js strategy for Magic (formerly known as Stripe Identity) authentication.\n\nContent:\n\n* A single file (`index.js`) that exports a Passport strategy\n* Implementation of Magic authentication logic\n* Example usage code in the README and/or tests", "file_summary": "Here is a holistic summary of the file 'CONTRIBUTING.md':\n\nThis document outlines guidelines for contributing to a repository, including setting up local development and submitting pull requests. It also establishes community standards for respectful behavior, reports abusive behavior, and defines consequences for violating these standards, ranging from warnings to permanent bans."}
{"code": "**Consequence**: A warning with consequences for continued behavior. No\ninteraction with the people involved, including unsolicited interaction with\nthose enforcing the Code of Conduct, for a specified period of time. This\nincludes avoiding interactions in community spaces as well as external channels\nlike social media. Violating these terms may lead to a temporary or\npermanent ban.\n\n#### 3. Temporary Ban\n\n**Community Impact**: A serious violation of community standards, including\nsustained inappropriate behavior.\n\n**Consequence**: A temporary ban from any sort of interaction or public\ncommunication with the community for a specified period of time. No public or\nprivate interaction with the people involved, including unsolicited interaction\nwith those enforcing the Code of Conduct, is allowed during this period.\nViolating these terms may lead to a permanent ban.\n\n#### 4. Permanent Ban\n\n**Community Impact**: Demonstrating a pattern of violation of community", "explanation": "This block outlines three consequences for violating a code of conduct:\n\n1. **Consequence**: A warning with a specified time period, during which interaction is avoided.\n2. **Temporary Ban**: A temporary ban from interacting with the community for a set period, potentially leading to a permanent ban if violated again.\n3. **Permanent Ban**: A permanent removal from the community due to persistent and serious violations of community standards.", "metadata": {"repo": "magiclabs/passport-magic", "file": "CONTRIBUTING.md", "chunk_number": 6, "total_chunks": 7}, "repository_explanation": "This repository, `magiclabs/passport-magic`, is a Passport.js strategy for Magic (formerly known as Stripe Identity) authentication.\n\nContent:\n\n* A single file (`index.js`) that exports a Passport strategy\n* Implementation of Magic authentication logic\n* Example usage code in the README and/or tests", "file_summary": "Here is a holistic summary of the file 'CONTRIBUTING.md':\n\nThis document outlines guidelines for contributing to a repository, including setting up local development and submitting pull requests. It also establishes community standards for respectful behavior, reports abusive behavior, and defines consequences for violating these standards, ranging from warnings to permanent bans."}
{"code": "standards, including sustained inappropriate behavior,  harassment of an\nindividual, or aggression toward or disparagement of classes of individuals.\n\n**Consequence**: A permanent ban from any sort of public interaction within\nthe community.\n\n### Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant](https://www.contributor-covenant.org),\nversion 2.0, available at\nhttps://www.contributor-covenant.org/version/2/0/code_of_conduct.html.\n\nCommunity Impact Guidelines were inspired by [Mozilla's code of conduct\nenforcement ladder](https://github.com/mozilla/diversity).\n\nFor answers to common questions about this code of conduct, see the FAQ at\nhttps://www.contributor-covenant.org/faq. Translations are available at\nhttps://www.contributor-covenant.org/translations.\n\n", "explanation": "**Purpose:** Establishes community standards and outlines consequences for violating them.\n\n**Functionality:** Defines prohibited behaviors (e.g. harassment, disparagement) and enforces a permanent ban from public interaction within the community as a consequence of such behavior.", "metadata": {"repo": "magiclabs/passport-magic", "file": "CONTRIBUTING.md", "chunk_number": 7, "total_chunks": 7}, "repository_explanation": "This repository, `magiclabs/passport-magic`, is a Passport.js strategy for Magic (formerly known as Stripe Identity) authentication.\n\nContent:\n\n* A single file (`index.js`) that exports a Passport strategy\n* Implementation of Magic authentication logic\n* Example usage code in the README and/or tests", "file_summary": "Here is a holistic summary of the file 'CONTRIBUTING.md':\n\nThis document outlines guidelines for contributing to a repository, including setting up local development and submitting pull requests. It also establishes community standards for respectful behavior, reports abusive behavior, and defines consequences for violating these standards, ranging from warnings to permanent bans."}
{"code": "# Magic Authentication For Passport JS\n\n[![Tests](https://github.com/magiclabs/passport-magic/actions/workflows/test.yaml/badge.svg)](https://github.com/magiclabs/passport-magic/actions/workflows/test.yaml)\n\n> Integrate [Magic](https://magic.link) passwordless authentication with your Passport.js application.\n\n<p align=\"center\">\n  <a href=\"./LICENSE\">License</a> \u00b7\n  <a href=\"./CHANGELOG.md\">Changelog</a> \u00b7\n  <a href=\"./CONTRIBUTING.md\">Contributing Guide</a>\n</p>\n\n## \ud83d\udcd6 Documentation\n\nSee the [developer documentation](https://docs.magic.link/tutorials/full-stack-node-js) to learn how you can integrate Magic into your Passport.js application in a matter of minutes.\n\n## \ud83d\udd17 Installation\n\nIntegrating your Passport.js application with Magic will require our server-side NPM package:\n\n```bash\n# Via NPM:\nnpm install --save passport-magic\n\n# Via Yarn:\nyarn add passport-magic\n```\n\n## \u26a1\ufe0f Quick Start\n\n```ts\nconst passport = require(\"passport\");\nconst MagicStrategy = require(\"passport-magic\").Strategy;\n", "explanation": "**Summary:**\n\nThis block is a GitHub repository for a package called \"passport-magic\" that enables passwordless authentication using the Magic service with Passport.js applications. It provides installation instructions, documentation links, and a quick start guide.", "metadata": {"repo": "magiclabs/passport-magic", "file": "README.md", "chunk_number": 1, "total_chunks": 2}, "repository_explanation": "This repository, `magiclabs/passport-magic`, is a Passport.js strategy for Magic (formerly known as Stripe Identity) authentication.\n\nContent:\n\n* A single file (`index.js`) that exports a Passport strategy\n* Implementation of Magic authentication logic\n* Example usage code in the README and/or tests", "file_summary": "Here's a concise and to-the-point holistic summary of the 'README.md' file:\n\n**Passport Magic Repository**\n\nThis repository provides passwordless authentication using the Magic service with Passport.js applications, offering installation instructions, documentation links, and a quick start guide. It defines a login strategy that checks for existing users by issuer, creating new ones or logging in existing users."}
{"code": "const strategy = new MagicStrategy(async function(user, done) {\n  const userMetadata = await magic.users.getMetadataByIssuer(user.issuer);\n  const existingUser = await users.findOne({ issuer: user.issuer });\n  if (!existingUser) {\n    /* Create new user if doesn't exist */\n    return signup(user, userMetadata, done);\n  } else {\n    /* Login user if otherwise */\n    return login(user, done);\n  }\n});\n\npassport.use(strategy);\n```\n", "explanation": "Here is a concise summary:\n\nThis block defines a login strategy that checks for existing users by issuer, creating a new one with `signup` or logging in an existing user with `login`.", "metadata": {"repo": "magiclabs/passport-magic", "file": "README.md", "chunk_number": 2, "total_chunks": 2}, "repository_explanation": "This repository, `magiclabs/passport-magic`, is a Passport.js strategy for Magic (formerly known as Stripe Identity) authentication.\n\nContent:\n\n* A single file (`index.js`) that exports a Passport strategy\n* Implementation of Magic authentication logic\n* Example usage code in the README and/or tests", "file_summary": "Here's a concise and to-the-point holistic summary of the 'README.md' file:\n\n**Passport Magic Repository**\n\nThis repository provides passwordless authentication using the Magic service with Passport.js applications, offering installation instructions, documentation links, and a quick start guide. It defines a login strategy that checks for existing users by issuer, creating new ones or logging in existing users."}
{"code": "{\n  \"compilerOptions\": {\n    \"lib\": [\"es2018\"],\n    \"module\": \"commonjs\",\n    \"moduleResolution\": \"node\",\n    \"target\": \"es5\",\n    \"strict\": true,\n    \"allowSyntheticDefaultImports\": true,\n    \"experimentalDecorators\": true,\n    \"noImplicitReturns\": true,\n    \"noImplicitThis\": true,\n    \"esModuleInterop\": true,\n    \"downlevelIteration\": true,\n    \"resolveJsonModule\": true,\n    \"allowJs\": true,\n    \"sourceMap\": true,\n    \"declaration\": true,\n  },\n  \"include\": [\"../src/**/*.ts\"],\n  \"exclude\": [\"../node_modules\"]\n}\n", "explanation": "This block is a configuration object for a TypeScript compiler. It sets various options such as module system, target browser version, strictness levels, and other settings to compile TypeScript files.", "metadata": {"repo": "magiclabs/passport-magic", "file": "config/tsconfig.base.json", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "This repository, `magiclabs/passport-magic`, is a Passport.js strategy for Magic (formerly known as Stripe Identity) authentication.\n\nContent:\n\n* A single file (`index.js`) that exports a Passport strategy\n* Implementation of Magic authentication logic\n* Example usage code in the README and/or tests", "file_summary": "Here is a concise summary:\n\n`config/tsconfig.base.json`: A base configuration file for TypeScript compilation, setting up module system, target browser, strictness levels, and other essential compiler options."}
{"code": "{\n  \"extends\": \"./tsconfig.base.json\",\n  \"compilerOptions\": {\n    \"outDir\": \"../dist\",\n  },\n  \"include\": [\"../src/**/*.ts\"]\n}\n", "explanation": "This block is a configuration file for TypeScript, specifically a tsconfig.json file. It extends a base configuration, sets output directory to ../dist, and includes all TypeScript files in the src directory.", "metadata": {"repo": "magiclabs/passport-magic", "file": "config/tsconfig.lib.json", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "This repository, `magiclabs/passport-magic`, is a Passport.js strategy for Magic (formerly known as Stripe Identity) authentication.\n\nContent:\n\n* A single file (`index.js`) that exports a Passport strategy\n* Implementation of Magic authentication logic\n* Example usage code in the README and/or tests", "file_summary": "Here is a holistic summary of the file 'config/tsconfig.lib.json':\n\n**Configures TypeScript compiler for library builds**\n\n* Extends base configuration\n* Outputs compiled code to `../dist` directory\n* Includes all `.ts` files from `src` directory"}
{"code": "{\n  \"extends\": \"./tsconfig.base.json\",\n  \"compilerOptions\": {\n    \"module\": \"commonjs\",\n    \"target\": \"es6\",\n    \"strict\": false,\n    \"noImplicitAny\": false,\n    \"downlevelIteration\": true,\n    \"esModuleInterop\": true\n  },\n  \"include\": [\"../test/**/*.ts\"]\n}\n", "explanation": "**Purpose:** Configures a TypeScript project.\n\n**Functionality:** Specifies compiler options for a project, including module type, target environment, and interop settings, with file inclusion rules for testing purposes.", "metadata": {"repo": "magiclabs/passport-magic", "file": "config/tsconfig.test.json", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "This repository, `magiclabs/passport-magic`, is a Passport.js strategy for Magic (formerly known as Stripe Identity) authentication.\n\nContent:\n\n* A single file (`index.js`) that exports a Passport strategy\n* Implementation of Magic authentication logic\n* Example usage code in the README and/or tests", "file_summary": "Here is a concise holistic summary:\n\n`config/tsconfig.test.json`: A TypeScript configuration file that specifies test-specific compiler options, including module type, target environment, and interop settings, while excluding unnecessary files from compilation."}
{"code": "#!/usr/bin/env bash\n\necho\necho \"Building passport-magic for production.\"\necho\n\n# Increase memory limit for Node\nexport NODE_OPTIONS=--max_old_space_size=4096\n\nexport NODE_ENV=production\n\nnpx tsc -p ./config/tsconfig.lib.json\n", "explanation": "**Purpose:** Build a Node.js project (passport-magic) for production.\n\n**Functionality:**\n\n* Increases Node's memory limit to 4GB.\n* Sets environment variable `NODE_ENV` to 'production'.\n* Compiles TypeScript code using `tsc`.", "metadata": {"repo": "magiclabs/passport-magic", "file": "scripts/build.sh", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "This repository, `magiclabs/passport-magic`, is a Passport.js strategy for Magic (formerly known as Stripe Identity) authentication.\n\nContent:\n\n* A single file (`index.js`) that exports a Passport strategy\n* Implementation of Magic authentication logic\n* Example usage code in the README and/or tests", "file_summary": "Here is a concise and to-the-point summary of the file 'scripts/build.sh':\n\n**Builds passport-magic for production:**\n\nIncreases memory limit, sets NODE_ENV to 'production', and compiles TypeScript code."}
{"code": "#!/usr/bin/env bash\n\necho\necho \"Building passport-magic for development.\"\necho\n\n# Increase memory limit for Node\nexport NODE_OPTIONS=--max_old_space_size=4096\n\nexport NODE_ENV=development\n\nnpx tsc -w -p ./config/tsconfig.lib.json\n", "explanation": "Here is a summary of the block:\n\n**Purpose:** Script to build Passport-Magic for development environment.\n\n**Functionality:** Sets environment variables, increases Node memory limit, and compiles TypeScript code with TSC.", "metadata": {"repo": "magiclabs/passport-magic", "file": "scripts/start.sh", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "This repository, `magiclabs/passport-magic`, is a Passport.js strategy for Magic (formerly known as Stripe Identity) authentication.\n\nContent:\n\n* A single file (`index.js`) that exports a Passport strategy\n* Implementation of Magic authentication logic\n* Example usage code in the README and/or tests", "file_summary": "Here is a concise holistic summary of the file 'scripts/start.sh':\n\n\"Script to setup and compile Passport-Magic for local development environment.\""}
{"code": "#!/usr/bin/env bash\n\necho\necho \"Running unit tests...\"\necho\n\n# Increase memory limit for Node\nexport NODE_OPTIONS=--max_old_space_size=4096\n\nexport NODE_ENV=test\n\nif [ -n \"$1\" ]; then\n  input=$(echo $(npx glob $1))\nfi\n\nexport TS_NODE_PROJECT=\"test/tsconfig.json\"\nnpx nyc --reporter=lcov --reporter=text-summary ava $input\n", "explanation": "Here is a concise summary of the block:\n\n**Purpose:** Run unit tests using Ava framework.\n\n**Functionality:** Executes Node.js scripts, sets test environment variables, and runs tests with reporting, based on input file patterns specified as command-line arguments.", "metadata": {"repo": "magiclabs/passport-magic", "file": "scripts/test.sh", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "This repository, `magiclabs/passport-magic`, is a Passport.js strategy for Magic (formerly known as Stripe Identity) authentication.\n\nContent:\n\n* A single file (`index.js`) that exports a Passport strategy\n* Implementation of Magic authentication logic\n* Example usage code in the README and/or tests", "file_summary": "Here is a concise and to-the-point holistic summary of the file 'scripts/test.sh':\n\n**Summary:** Run unit tests using Ava framework with Node.js script execution, test environment variable setup, and report-based testing for patterns specified via command-line arguments."}
{"code": "export * from './strategy';\nexport * from './types';\n", "explanation": "**Purpose:** Re-exporting modules.\n\n**Functionality:** Exports all exports from the './strategy' and './types' files, making them available in this file.", "metadata": {"repo": "magiclabs/passport-magic", "file": "src/index.ts", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "This repository, `magiclabs/passport-magic`, is a Passport.js strategy for Magic (formerly known as Stripe Identity) authentication.\n\nContent:\n\n* A single file (`index.js`) that exports a Passport strategy\n* Implementation of Magic authentication logic\n* Example usage code in the README and/or tests", "file_summary": "Here is a concise summary of the 'src/index.ts' file:\n\n\"Re-exports modules from './strategy' and './types', making their exports globally accessible.\""}
{"code": "/*\n  eslint-disable\n\n  no-template-curly-in-string,\n  no-multi-assign,\n  prefer-rest-params\n */\n\nimport { Strategy as BaseStrategy } from 'passport-strategy';\nimport { Magic, SDKError as MagicSDKError } from '@magic-sdk/admin';\nimport { Request } from 'express';\nimport { VerifyFunc, VerifyFuncWithReq, StrategyOptions, StrategyOptionsWithReq, MagicUser, DoneFunc } from './types';\n\nexport class Strategy extends BaseStrategy {\n  public readonly name = 'magic';\n  private readonly verify: VerifyFunc;\n  private readonly verifyWithReq: VerifyFuncWithReq;\n  private readonly passReqToCallback: boolean;\n  private readonly attachmentAttribute: string;\n  private readonly magicInstance: Magic;\n\n  /**\n   * Creates an instance of `MagicStrategy`.\n   *\n   * This authentication strategy validates requests based on an authorization\n   * header containing a Decentralized ID Token (DIDT).\n   *\n   * Applications must supply a `verify` callback which accepts a `MagicUser`\n   * object with the following information:\n   *", "explanation": "Here is a concise summary of the purpose and functionality of this block:\n\n**Purpose:** Create an authentication strategy using Magic, a decentralized login solution.\n\n**Functionality:** This block imports necessary dependencies, defines a `Strategy` class that extends `passport-strategy`, and sets up various properties (e.g. `verify`, `magicInstance`) to enable authentication with Magic.", "metadata": {"repo": "magiclabs/passport-magic", "file": "src/strategy.ts", "chunk_number": 1, "total_chunks": 6}, "repository_explanation": "This repository, `magiclabs/passport-magic`, is a Passport.js strategy for Magic (formerly known as Stripe Identity) authentication.\n\nContent:\n\n* A single file (`index.js`) that exports a Passport strategy\n* Implementation of Magic authentication logic\n* Example usage code in the README and/or tests", "file_summary": "Here is a concise summary of the file 'src/strategy.ts':\n\n**Authentication Strategy**: This file defines classes and functions for verifying user identity using decentralized authentication solutions (Magic, DIDT claims). It provides callback-based verification logic, initialization of MagicStrategy instances, and token validation via the Magic library."}
{"code": "   *   1. `claim`: The validated and parsed DIDT claim.\n   *   2. `id`: The user's Decentralized Identfier. This should be used as the\n   *      ID column in your user tables.\n   *   3. `publicAddress`: The public address of the signing user. DIDTs are\n   *      generated using Elliptic Curve public/private key pairs.\n   *\n   * The `verify` callback also supplies a `done` callback, which should be\n   * called with the user's resolved profile information or set to `false` if\n   * the credentials are not valid (i.e.: due to a replay attack).\n   *\n   * If an exception occurred, `err` should be set.\n   *\n   * An `options` object can be passed to the constructor to customize behavior of the `verify` callback:\n   *\n   * Options:\n   *   - `magicInstance`: A custom Magic SDK instance to use.\n   *   - `passReqToCallback`: When `true`, `req` is the first argument to the verify callback (default: `false`).\n   *\n   * **NOTE: Parameters can be provided in any order!**\n   *", "explanation": "Here is a concise summary:\n\n**Purpose:** Verify user identity using DIDT claims.\n\n**Functionality:** Supplies user's Decentralized Identifier, public address, and resolved profile information (or indicates invalid credentials) via callback function, with optional customization through an options object.", "metadata": {"repo": "magiclabs/passport-magic", "file": "src/strategy.ts", "chunk_number": 2, "total_chunks": 6}, "repository_explanation": "This repository, `magiclabs/passport-magic`, is a Passport.js strategy for Magic (formerly known as Stripe Identity) authentication.\n\nContent:\n\n* A single file (`index.js`) that exports a Passport strategy\n* Implementation of Magic authentication logic\n* Example usage code in the README and/or tests", "file_summary": "Here is a concise summary of the file 'src/strategy.ts':\n\n**Authentication Strategy**: This file defines classes and functions for verifying user identity using decentralized authentication solutions (Magic, DIDT claims). It provides callback-based verification logic, initialization of MagicStrategy instances, and token validation via the Magic library."}
{"code": "   * @param options - Options to customize the functionality of `verify`.\n   * @param verify - A callback to validate the authentication request.\n   *\n   * @see https://docs.magic.link/tutorials/decentralized-id\n   * @see https://w3c-ccg.github.io/did-primer/\n   *\n   * @example\n   *     passport.use(new MagicStrategy(\n   *       ({ id }, done) => {\n   *         try {\n   *           const user = await User.findOne(id);\n   *           done(null, user);\n   *         } catch (err) {\n   *           done(err);\n   *         }\n   *       }\n   *     ));\n   */\n  /* eslint-disable prettier/prettier */\n  constructor(options: StrategyOptions,         verify:  VerifyFunc);\n  constructor(options: StrategyOptionsWithReq,  verify:  VerifyFuncWithReq);\n  constructor(verify:  VerifyFunc,              options: StrategyOptions);\n  constructor(verify:  VerifyFuncWithReq,       options: StrategyOptionsWithReq);\n  constructor(verify:  VerifyFunc);\n  /* eslint-enable prettier/prettier */\n  constructor(", "explanation": "Here is a concise summary:\n\nThis block defines a `MagicStrategy` constructor with multiple overloads for customizing authentication verification using Magic Link, allowing users to be verified via a callback function (`verify`).", "metadata": {"repo": "magiclabs/passport-magic", "file": "src/strategy.ts", "chunk_number": 3, "total_chunks": 6}, "repository_explanation": "This repository, `magiclabs/passport-magic`, is a Passport.js strategy for Magic (formerly known as Stripe Identity) authentication.\n\nContent:\n\n* A single file (`index.js`) that exports a Passport strategy\n* Implementation of Magic authentication logic\n* Example usage code in the README and/or tests", "file_summary": "Here is a concise summary of the file 'src/strategy.ts':\n\n**Authentication Strategy**: This file defines classes and functions for verifying user identity using decentralized authentication solutions (Magic, DIDT claims). It provides callback-based verification logic, initialization of MagicStrategy instances, and token validation via the Magic library."}
{"code": "    arg0: VerifyFunc | VerifyFuncWithReq | StrategyOptions | StrategyOptionsWithReq,\n    arg1?: VerifyFunc | VerifyFuncWithReq | StrategyOptions | StrategyOptionsWithReq,\n  ) {\n    super();\n\n    // Extract options from arguments -- parameters can be provided in any order.\n    const args = Array.from(arguments);\n    const verify = args.find(arg => typeof arg === 'function') as VerifyFunc | VerifyFuncWithReq;\n    const options = args.find(arg => typeof arg !== 'function') as StrategyOptions | StrategyOptionsWithReq | undefined;\n\n    if (!verify) throw new TypeError('`MagicStrategy` requires a `verify` callback.');\n\n    this.verify = this.verifyWithReq = verify as any;\n    this.passReqToCallback = !!options?.passReqToCallback;\n    this.attachmentAttribute = options?.attachmentAttribute ?? 'attachment';\n    this.magicInstance = options?.magicInstance || new Magic();\n  }\n\n  /**\n   * Authenticate request based on the authorization header.\n   *\n   * @param req - A request object from Express.\n   */", "explanation": "Here is a summary of the block's purpose and functionality:\n\n**Purpose:** Initialize a `MagicStrategy` instance with verification logic.\n\n**Functionality:**\n\n* Extracts options from arguments (can be in any order)\n* Sets up verification callback (`verify`) and related properties\n* Optionally sets attachment attribute, Magic instance, and passes request to callback", "metadata": {"repo": "magiclabs/passport-magic", "file": "src/strategy.ts", "chunk_number": 4, "total_chunks": 6}, "repository_explanation": "This repository, `magiclabs/passport-magic`, is a Passport.js strategy for Magic (formerly known as Stripe Identity) authentication.\n\nContent:\n\n* A single file (`index.js`) that exports a Passport strategy\n* Implementation of Magic authentication logic\n* Example usage code in the README and/or tests", "file_summary": "Here is a concise summary of the file 'src/strategy.ts':\n\n**Authentication Strategy**: This file defines classes and functions for verifying user identity using decentralized authentication solutions (Magic, DIDT claims). It provides callback-based verification logic, initialization of MagicStrategy instances, and token validation via the Magic library."}
{"code": "  public async authenticate(req: Request) {\n    const hasAuthorizationHeader = !!req.headers.authorization;\n    const isFormattedCorrectly = req.headers.authorization?.toLowerCase().startsWith('bearer ');\n\n    if (!hasAuthorizationHeader) return this.fail({ message: 'Missing authorization header.' }, 400);\n    if (!isFormattedCorrectly) {\n      return this.fail({ message: 'Malformed authorization header. Please use the `Bearer ${token}` format.' }, 400);\n    }\n\n    const didToken = req.headers.authorization!.substring(7);\n    const attachment = (req as any)[this.attachmentAttribute] ?? 'none';\n\n    try {\n      this.magicInstance.token.validate(didToken, attachment);\n      const user: MagicUser = {\n        issuer: this.magicInstance.token.getIssuer(didToken),\n        publicAddress: this.magicInstance.token.getPublicAddress(didToken),\n        claim: this.magicInstance.token.decode(didToken)[1],\n      };\n\n      const done: DoneFunc = (_err, _user, _info: any) => {\n        if (_err) return this.error(_err);", "explanation": "**Summary**\n\nThis block is an asynchronous authentication function that checks for a valid Bearer authorization header in incoming requests. It verifies the header's format and content, then uses the Magic library to validate the token and extract user information. If successful, it proceeds with authentication; otherwise, it returns an error response.", "metadata": {"repo": "magiclabs/passport-magic", "file": "src/strategy.ts", "chunk_number": 5, "total_chunks": 6}, "repository_explanation": "This repository, `magiclabs/passport-magic`, is a Passport.js strategy for Magic (formerly known as Stripe Identity) authentication.\n\nContent:\n\n* A single file (`index.js`) that exports a Passport strategy\n* Implementation of Magic authentication logic\n* Example usage code in the README and/or tests", "file_summary": "Here is a concise summary of the file 'src/strategy.ts':\n\n**Authentication Strategy**: This file defines classes and functions for verifying user identity using decentralized authentication solutions (Magic, DIDT claims). It provides callback-based verification logic, initialization of MagicStrategy instances, and token validation via the Magic library."}
{"code": "        if (!_user) return this.fail(_info);\n        this.success(_user, _info);\n      };\n\n      try {\n        if (this.passReqToCallback) this.verifyWithReq(req, user, done);\n        else this.verify(user, done);\n      } catch (err) {\n        return this.error(err);\n      }\n    } catch (err) {\n      if (err instanceof MagicSDKError) return this.fail({ message: err.message, error_code: err.code }, 401);\n      return this.fail({ message: 'Invalid DID token.' }, 401);\n    }\n  }\n}\n", "explanation": "**Summary**\n\nThis block is a callback function that verifies a user's credentials using an external service (MagicSDK). It takes in a request object (`req`) and a `done` callback, and returns an error or success response based on the verification outcome.", "metadata": {"repo": "magiclabs/passport-magic", "file": "src/strategy.ts", "chunk_number": 6, "total_chunks": 6}, "repository_explanation": "This repository, `magiclabs/passport-magic`, is a Passport.js strategy for Magic (formerly known as Stripe Identity) authentication.\n\nContent:\n\n* A single file (`index.js`) that exports a Passport strategy\n* Implementation of Magic authentication logic\n* Example usage code in the README and/or tests", "file_summary": "Here is a concise summary of the file 'src/strategy.ts':\n\n**Authentication Strategy**: This file defines classes and functions for verifying user identity using decentralized authentication solutions (Magic, DIDT claims). It provides callback-based verification logic, initialization of MagicStrategy instances, and token validation via the Magic library."}
{"code": "import { Magic, Claim } from '@magic-sdk/admin';\nimport { Request } from 'express';\n\nexport interface StrategyOptionsWithReq {\n  magicInstance?: Magic;\n  passReqToCallback?: true;\n  attachmentAttribute?: string;\n}\n\nexport interface StrategyOptions {\n  magicInstance?: Magic;\n  passReqToCallback?: false;\n  attachmentAttribute?: string;\n}\n\nexport interface AuthenticateOptions {\n  attachment?: string;\n}\n\nexport interface MagicUser {\n  issuer: string;\n  publicAddress: string;\n  claim: Claim;\n}\n\nexport interface DoneFuncInfo {\n  message: string;\n}\n\nexport interface DoneFunc {\n  (error: any, user?: any, info?: DoneFuncInfo): void;\n}\n\nexport interface VerifyFuncWithReq {\n  (req: Request, user: MagicUser, done: DoneFunc): void;\n}\n\nexport interface VerifyFunc {\n  (user: MagicUser, done: DoneFunc): void;\n}\n", "explanation": "This block defines interfaces for authentication strategies using the Magic SDK:\n\n* Describes options for authentication, including passing request objects and custom attributes.\n* Defines a Magic user object with issuer, public address, and claim information.\n* Specifies callback functions for authenticating users with or without request objects.", "metadata": {"repo": "magiclabs/passport-magic", "file": "src/types.ts", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "This repository, `magiclabs/passport-magic`, is a Passport.js strategy for Magic (formerly known as Stripe Identity) authentication.\n\nContent:\n\n* A single file (`index.js`) that exports a Passport strategy\n* Implementation of Magic authentication logic\n* Example usage code in the README and/or tests", "file_summary": "Here is a concise summary of the file 'src/types.ts':\n\nThis file defines interfaces for authentication strategies using the Magic SDK, including options for authentication, user data, and callback functions."}
{"code": "export const VALID_DIDT =\n  'WyIweDE5YTIyMzg5MzZhNDAwYmE0MzZhZWFlNGYyMjJkMTNkYmM4MGNmODJkZDdlYTBiODU1NWVmMDU0NDY0NDc2ODMzMWI3MTBhOGJhZWNmYjljNmM5MzU0MGYwOWU4YWIzZmFmMWI0NTAyOTBiMTQ1ZjQ3NTRmZWJhNDIwMWE5ZmJhMWIiLCJ7XCJpYXRcIjoxNTg1MDE1ODQ5LFwiZXh0XCI6MTkwMDQxNTg0OSxcImlzc1wiOlwiZGlkOmV0aHI6MHhCMmVjOWI2MTY5OTc2MjQ5MWI2NTQyMjc4RTlkRkVDOTA1MGY4MDg5XCIsXCJzdWJcIjpcIjZ0RlhUZlJ4eWt3TUtPT2pTTWJkUHJFTXJwVWwzbTNqOERReWNGcU8ydHc9XCIsXCJhdWRcIjpcImRpZDptYWdpYzoxYjNhNTcwZS04ZmUzLTQ0MTItYmU3MS1mNDg2ZjI3ZWE3YWZcIixcIm5iZlwiOjE1ODUwMTU4NDksXCJ0aWRcIjpcIjRmMzAxZDIzLTBjNDAtNDhmMS1hNTIyLTQxOTQwOTFmZjIyOFwiLFwiYWRkXCI6XCIweDkxZmJlNzRiZTZjNmJmZDhkZGRkZDkzMDExYjA1OWI5MjUzZjEwNzg1NjQ5NzM4YmEyMTdlNTFlMGUzZGYxMzgxZDIwZjUyMWEzNjQxZjIzZWI5OWNjYjM0ZTNiYzVkOTYzMzJmZGViYzhlZmE1MGNkYjQxNWU0NTUwMDk1MmNkMWNcIn0iXQ==';\n\nexport const VALID_DIDT_PARSED_CLAIMS = {\n  iat: 1585015849,\n  ext: 1900415849,\n  iss: 'did:ethr:0xB2ec9b61699762491b6542278E9dFEC9050f8089',\n  sub: '6tFXTfRxykwMKOOjSMbdPrEMrpUl3m3j8DQycFqO2tw=',", "explanation": "**Purpose:** This block exports a valid DIDT (Decentralized Identifier Token) and its parsed claims.\n\n**Functionality:**\n\n* `VALID_DIDT`: A string representing a valid DIDT.\n* `VALID_DIDT_PARSED_CLAIMS`: An object containing the parsed claims of the DIDT, including:\n\t+ `iat`: Issued At timestamp (1585015849)\n\t+ `ext`: Expires At timestamp (1900415849)\n\t+ `iss`: Issuer's DID (did:ethr:0xB2ec9b61699762491b6542278E9dFEC9050f8089)\n\t+ `sub`: Subject's identifier (6tFXTfRxykwMKOOjSMbdPrEMrpUl3m3j8DQycFqO2tw=)", "metadata": {"repo": "magiclabs/passport-magic", "file": "test/lib/constants.ts", "chunk_number": 1, "total_chunks": 5}, "repository_explanation": "This repository, `magiclabs/passport-magic`, is a Passport.js strategy for Magic (formerly known as Stripe Identity) authentication.\n\nContent:\n\n* A single file (`index.js`) that exports a Passport strategy\n* Implementation of Magic authentication logic\n* Example usage code in the README and/or tests", "file_summary": "Here is a holistic summary of the file 'test/lib/constants.ts':\n\n**Summary:** Defines a set of pre-defined DID (Decentralized Identifier) tokens with authentication details, including issuer, subject, expiration time, and more. This JSON object provides example values for valid and expired claims, enabling testing and verification of DID token functionality."}
{"code": "  aud: 'did:magic:1b3a570e-8fe3-4412-be71-f486f27ea7af',\n  nbf: 1585015849,\n  tid: '4f301d23-0c40-48f1-a522-4194091ff228',\n  add:\n    '0x91fbe74be6c6bfd8ddddd93011b059b9253f10785649738ba217e51e0e3df1381d20f521a3641f23eb99ccb34e3bc5d96332fdebc8efa50cdb415e45500952cd1c',\n};\n\nexport const VALID_DIDT_DECODED = [\n  '0x19a2238936a400ba436aeae4f222d13dbc80cf82dd7ea0b8555ef0544644768331b710a8baecfb9c6c93540f09e8ab3faf1b450290b145f4754feba4201a9fba1b',\n  VALID_DIDT_PARSED_CLAIMS,\n];\n\nexport const VALID_DIDT_WITH_ATTACHMENT =", "explanation": "Here is a summary of the block's purpose and functionality:\n\n**Purpose:** Define valid DID (Decentralized Identifier) data.\n\n**Functionality:** Provide pre-defined examples of DID strings, including a decoded DID token and two different valid DID tokens with attachments.", "metadata": {"repo": "magiclabs/passport-magic", "file": "test/lib/constants.ts", "chunk_number": 2, "total_chunks": 5}, "repository_explanation": "This repository, `magiclabs/passport-magic`, is a Passport.js strategy for Magic (formerly known as Stripe Identity) authentication.\n\nContent:\n\n* A single file (`index.js`) that exports a Passport strategy\n* Implementation of Magic authentication logic\n* Example usage code in the README and/or tests", "file_summary": "Here is a holistic summary of the file 'test/lib/constants.ts':\n\n**Summary:** Defines a set of pre-defined DID (Decentralized Identifier) tokens with authentication details, including issuer, subject, expiration time, and more. This JSON object provides example values for valid and expired claims, enabling testing and verification of DID token functionality."}
{"code": "  'WyIweDA4MWMzODBlMzc5NTdjNjZiZmIwYTUwMzI4YWJiMmZlY2E3OTUzNjVhZGFlMjhkNDU5NTFiMzg3MzI2OTM1NTgwMTQ4NjA0NTYwZGIwMDRhOTc2YTZmZjA4NWUxODExNmMwZGI5OWE2MWNiMjg0NDcxNDQ4MzVlODI2ZjIwOTI5MWIiLCJ7XCJpYXRcIjoxNTg1MDE2MzA3LFwiZXh0XCI6MTkwMDQxNjMwNyxcImlzc1wiOlwiZGlkOmV0aHI6MHhCMmVjOWI2MTY5OTc2MjQ5MWI2NTQyMjc4RTlkRkVDOTA1MGY4MDg5XCIsXCJzdWJcIjpcIjZ0RlhUZlJ4eWt3TUtPT2pTTWJkUHJFTXJwVWwzbTNqOERReWNGcU8ydHc9XCIsXCJhdWRcIjpcImRpZDptYWdpYzo1OGYxOTdhNy1hMDVhLTQ4YTEtYjhkZi0xZjgyMjdjNTZhZTJcIixcIm5iZlwiOjE1ODUwMTYzMDcsXCJ0aWRcIjpcImY1ZmE4ZTA5LWZjMDMtNDBhZC05MGVhLTQ2YmNkZDg1YWExYlwiLFwiYWRkXCI6XCIweGM1MGI4M2U1ZGEzOGY1ODc1NzcwOTM4ZGZhNjU1N2M0ZDRmYTM3ZTc1MTMxZWE0NjA5MDVkOGNlYzZiOGNhMjcxNmRlNzExM2Q1YjQ1ZTc2NjI3MmFlMTMwMzc2NzYzYjRiNjA4NWVhNGU3MGNiOTQ2YjlkNDU3MmYzZmJiYWJjMWJcIn0iXQ==';\n\nexport const VALID_DIDT_WITH_ATTACHMENT_PARSED_CLAIMS = {\n  iat: 1585016307,\n  ext: 1900416307,\n  iss: 'did:ethr:0xB2ec9b61699762491b6542278E9dFEC9050f8089',\n  sub: '6tFXTfRxykwMKOOjSMbdPrEMrpUl3m3j8DQycFqO2tw=',", "explanation": "This block appears to be a JSON object, specifically a JWT (JSON Web Token) claim set. It contains a set of key-value pairs that describe a DID (Decentralized Identifier) token with an attachment, including its issuer, subject, expiration time, and others.", "metadata": {"repo": "magiclabs/passport-magic", "file": "test/lib/constants.ts", "chunk_number": 3, "total_chunks": 5}, "repository_explanation": "This repository, `magiclabs/passport-magic`, is a Passport.js strategy for Magic (formerly known as Stripe Identity) authentication.\n\nContent:\n\n* A single file (`index.js`) that exports a Passport strategy\n* Implementation of Magic authentication logic\n* Example usage code in the README and/or tests", "file_summary": "Here is a holistic summary of the file 'test/lib/constants.ts':\n\n**Summary:** Defines a set of pre-defined DID (Decentralized Identifier) tokens with authentication details, including issuer, subject, expiration time, and more. This JSON object provides example values for valid and expired claims, enabling testing and verification of DID token functionality."}
{"code": "  aud: 'did:magic:58f197a7-a05a-48a1-b8df-1f8227c56ae2',\n  nbf: 1585016307,\n  tid: 'f5fa8e09-fc03-40ad-90ea-46bcdd85aa1b',\n  add:\n    '0xc50b83e5da38f5875770938dfa6557c4d4fa37e75131ea460905d8cec6b8ca2716de7113d5b45e766272ae130376763b4b6085ea4e70cb946b9d4572f3fbbabc1b',\n};\n\nexport const VALID_DIDT_WITH_ATTACHMENT_DECODED = [\n  '0x081c380e37957c66bfb0a50328abb2feca795365adae28d45951b387326935580148604560db004a976a6ff085e18116c0db99a61cb28447144835e826f209291b',\n  VALID_DIDT_WITH_ATTACHMENT_PARSED_CLAIMS,\n];\n\nexport const EXPIRED_DIDT =", "explanation": "Here is a concise summary:\n\n**Purpose:** A data block containing claims and authentication details.\n\n**Functionality:** It appears to be a JSON object that holds identification (ID) and claim information, including a digital signature and expiration date. The code also defines two constant arrays: `VALID_DIDT_WITH_ATTACHMENT_DECODED` and `EXPIRED_DIDT`, which seem to hold example values for valid and expired claims respectively.", "metadata": {"repo": "magiclabs/passport-magic", "file": "test/lib/constants.ts", "chunk_number": 4, "total_chunks": 5}, "repository_explanation": "This repository, `magiclabs/passport-magic`, is a Passport.js strategy for Magic (formerly known as Stripe Identity) authentication.\n\nContent:\n\n* A single file (`index.js`) that exports a Passport strategy\n* Implementation of Magic authentication logic\n* Example usage code in the README and/or tests", "file_summary": "Here is a holistic summary of the file 'test/lib/constants.ts':\n\n**Summary:** Defines a set of pre-defined DID (Decentralized Identifier) tokens with authentication details, including issuer, subject, expiration time, and more. This JSON object provides example values for valid and expired claims, enabling testing and verification of DID token functionality."}
{"code": "  'WyIweDM1MjcyZmExYmU5NGViODY3MTgxMDdlYmYxM2Y2YmYzYzE5MTE1MGJjZTM1NmYwNDlmM2NlMTRhMjUwMjk1ZjA0NGVhMDBjZDcxMGYxYjhiMTZlYjdiNzRkNzdjOTk2ODRjN2JkNDNmMGFhOTJmNTk1MTU4ZWFhMDkwZDZlNWI5MWMiLCJ7XCJpYXRcIjoxNTg1MDE1ODg3LFwiZXh0XCI6MTU4NTAxNTg4OCxcImlzc1wiOlwiZGlkOmV0aHI6MHhCMmVjOWI2MTY5OTc2MjQ5MWI2NTQyMjc4RTlkRkVDOTA1MGY4MDg5XCIsXCJzdWJcIjpcIjZ0RlhUZlJ4eWt3TUtPT2pTTWJkUHJFTXJwVWwzbTNqOERReWNGcU8ydHc9XCIsXCJhdWRcIjpcImRpZDptYWdpYzoyMTFjZTZhZC05ZjAyLTQ5NTMtODU3NC1jMGM2N2QyNThjMzRcIixcIm5iZlwiOjE1ODUwMTU4ODcsXCJ0aWRcIjpcImVkNGZiMWQ2LTZjYjEtNGQ5MS04ZmI3LTAyZGQ0YTYxZjMwM1wiLFwiYWRkXCI6XCIweDkxZmJlNzRiZTZjNmJmZDhkZGRkZDkzMDExYjA1OWI5MjUzZjEwNzg1NjQ5NzM4YmEyMTdlNTFlMGUzZGYxMzgxZDIwZjUyMWEzNjQxZjIzZWI5OWNjYjM0ZTNiYzVkOTYzMzJmZGViYzhlZmE1MGNkYjQxNWU0NTUwMDk1MmNkMWNcIn0iXQ==';\n", "explanation": "This block appears to be a Base64 encoded string.", "metadata": {"repo": "magiclabs/passport-magic", "file": "test/lib/constants.ts", "chunk_number": 5, "total_chunks": 5}, "repository_explanation": "This repository, `magiclabs/passport-magic`, is a Passport.js strategy for Magic (formerly known as Stripe Identity) authentication.\n\nContent:\n\n* A single file (`index.js`) that exports a Passport strategy\n* Implementation of Magic authentication logic\n* Example usage code in the README and/or tests", "file_summary": "Here is a holistic summary of the file 'test/lib/constants.ts':\n\n**Summary:** Defines a set of pre-defined DID (Decentralized Identifier) tokens with authentication details, including issuer, subject, expiration time, and more. This JSON object provides example values for valid and expired claims, enabling testing and verification of DID token functionality."}
{"code": "import sinon from 'sinon';\nimport { Strategy } from '../../src/strategy';\n\nexport function createStrategyInstance(\n  options: {\n    passReqToCallback?: boolean;\n    shouldFailVerification?: boolean;\n    shouldErrorVerification?: boolean;\n    shouldThrowVerification?: boolean;\n  } = {} as any,\n) {\n  const optionsWithDefaults = {\n    passReqToCallback: false,\n    shouldFailVerification: false,\n    shouldErrorVerification: false,\n    shouldThrowVerification: false,\n    ...options,\n  };\n\n  const verifyStub = sinon.spy((user, done) => {\n    if (optionsWithDefaults.shouldThrowVerification) throw new Error('uh oh!');\n\n    done(\n      optionsWithDefaults.shouldErrorVerification ? { message: 'hello world' } : null,\n      optionsWithDefaults.shouldFailVerification ? false : user,\n      optionsWithDefaults.shouldFailVerification ? { message: 'goodbye world' } : undefined,\n    );\n  });\n\n  const verifyStubWithReq = sinon.spy((req, user, done) => {\n    if (optionsWithDefaults.shouldThrowVerification) throw new Error('uh oh!');\n", "explanation": "Here is a concise summary:\n\n**Purpose:** Creates a mock strategy instance for testing.\n\n**Functionality:** Returns an instance of `Strategy` with customizable verification logic, allowing for testing various scenarios (e.g., failed verification, error messages).", "metadata": {"repo": "magiclabs/passport-magic", "file": "test/lib/factories.ts", "chunk_number": 1, "total_chunks": 2}, "repository_explanation": "This repository, `magiclabs/passport-magic`, is a Passport.js strategy for Magic (formerly known as Stripe Identity) authentication.\n\nContent:\n\n* A single file (`index.js`) that exports a Passport strategy\n* Implementation of Magic authentication logic\n* Example usage code in the README and/or tests", "file_summary": "Here's a concise summary of the file 'test/lib/factories.ts':\n\n**Purpose:** Provides a mock strategy instance for testing.\n\n**Summary:** Creates customizable `Strategy` instances for testing various verification scenarios, returning stubs for failure, error, and success cases."}
{"code": "    done(\n      optionsWithDefaults.shouldErrorVerification ? { message: 'hello world' } : null,\n      optionsWithDefaults.shouldFailVerification ? false : user,\n      optionsWithDefaults.shouldFailVerification ? { message: 'goodbye world' } : undefined,\n    );\n  });\n\n  const strat = new Strategy(optionsWithDefaults.passReqToCallback ? verifyStubWithReq : verifyStub, {\n    passReqToCallback: optionsWithDefaults.passReqToCallback,\n  } as any);\n\n  const failStub = sinon.stub();\n  const errorStub = sinon.stub();\n  const successStub = sinon.stub();\n\n  strat.fail = failStub;\n  strat.error = errorStub;\n  strat.success = successStub;\n\n  return {\n    verifyStub,\n    verifyStubWithReq,\n    strat,\n    failStub,\n    errorStub,\n    successStub,\n  };\n}\n", "explanation": "This block is a function that:\n\n* Tests different verification scenarios\n* Creates a new authentication strategy instance with customized settings\n* Returns various test-related variables, including stubs for testing failure, error, and success cases.", "metadata": {"repo": "magiclabs/passport-magic", "file": "test/lib/factories.ts", "chunk_number": 2, "total_chunks": 2}, "repository_explanation": "This repository, `magiclabs/passport-magic`, is a Passport.js strategy for Magic (formerly known as Stripe Identity) authentication.\n\nContent:\n\n* A single file (`index.js`) that exports a Passport strategy\n* Implementation of Magic authentication logic\n* Example usage code in the README and/or tests", "file_summary": "Here's a concise summary of the file 'test/lib/factories.ts':\n\n**Purpose:** Provides a mock strategy instance for testing.\n\n**Summary:** Creates customizable `Strategy` instances for testing various verification scenarios, returning stubs for failure, error, and success cases."}
{"code": "/* eslint-disable no-template-curly-in-string */\n\nimport test from 'ava';\nimport sinon from 'sinon';\nimport { ErrorCode as MagicSDKErrorCode } from '@magic-sdk/admin';\nimport {\n  VALID_DIDT,\n  VALID_DIDT_PARSED_CLAIMS,\n  EXPIRED_DIDT,\n  VALID_DIDT_WITH_ATTACHMENT,\n  VALID_DIDT_WITH_ATTACHMENT_PARSED_CLAIMS,\n} from '../../lib/constants';\nimport { createStrategyInstance } from '../../lib/factories';\n\nconst invalidReq: any = { headers: { authorization: `Bearer ${EXPIRED_DIDT}` } };\n\nconst validReq: any = { headers: { authorization: `Bearer ${VALID_DIDT}` } };\nconst validUser: any = {\n  issuer: VALID_DIDT_PARSED_CLAIMS.iss,\n  publicAddress: VALID_DIDT_PARSED_CLAIMS.iss.split(':')[2],\n  claim: VALID_DIDT_PARSED_CLAIMS,\n};\n\nconst validReqWithAttachment: any = {\n  headers: { authorization: `Bearer ${VALID_DIDT_WITH_ATTACHMENT}` },\n  attachment: 'asdf',\n};\nconst validUserWithAttachment: any = {\n  issuer: VALID_DIDT_WITH_ATTACHMENT_PARSED_CLAIMS.iss,", "explanation": "Here is a concise summary of the purpose and functionality of this block:\n\n**Purpose:** Test authentication with DIDt (Decentralized Identifier) using Ava testing framework.\n\n**Functionality:** The code sets up test scenarios for valid and invalid DIDt requests, as well as users with or without attachments, to verify proper authentication logic.", "metadata": {"repo": "magiclabs/passport-magic", "file": "test/spec/strategy/authenticate.spec.ts", "chunk_number": 1, "total_chunks": 5}, "repository_explanation": "This repository, `magiclabs/passport-magic`, is a Passport.js strategy for Magic (formerly known as Stripe Identity) authentication.\n\nContent:\n\n* A single file (`index.js`) that exports a Passport strategy\n* Implementation of Magic authentication logic\n* Example usage code in the README and/or tests", "file_summary": "Here is a concise summary of the file 'test/spec/strategy/authenticate.spec.ts':\n\nThis file contains test cases for authenticating users using DIDt (Decentralized Identifier) with Ava testing framework, verifying proper authentication logic in various scenarios. The tests cover valid and invalid requests, user attachments, and correct behavior of the `authenticate` method under different conditions, including error handling."}
{"code": "  publicAddress: VALID_DIDT_WITH_ATTACHMENT_PARSED_CLAIMS.iss.split(':')[2],\n  claim: VALID_DIDT_WITH_ATTACHMENT_PARSED_CLAIMS,\n};\n\ntest('#01: Fails with status 400 if authorization header is missing', async t => {\n  const { strat, verifyStub, failStub } = createStrategyInstance();\n\n  await strat.authenticate({ headers: { authorization: undefined } } as any);\n\n  t.true(failStub.calledOnceWith({ message: 'Missing authorization header.' }, 400));\n  t.true(verifyStub.notCalled);\n});\n\ntest('#02: Fails with status 400 if authorization header is malformed', async t => {\n  const { strat, verifyStub, failStub } = createStrategyInstance();\n\n  await strat.authenticate({ headers: { authorization: `notarealtoken` } } as any);\n\n  t.true(\n    failStub.calledOnceWith(\n      { message: 'Malformed authorization header. Please use the `Bearer ${token}` format.' },\n      400,\n    ),\n  );\n  t.true(verifyStub.notCalled);\n});\n\ntest('#03: Succeeds validation with a valid DIDT', async t => {", "explanation": "**Summary**\n\nThis block is an object containing two properties:\n\n1. `publicAddress`: extracts the public address from a VALID_DIDT_WITH_ATTACHMENT_PARSED_CLAIMS string.\n2. `claim`: references the entire VALID_DIDT_WITH_ATTACHMENT_PARSED_CLAIMS object.\n\nThe code that follows tests the functionality of an authentication strategy, specifically its behavior when:\n\n* The authorization header is missing (test #01)\n* The authorization header is malformed (test #02)\n* A valid DIDT is provided (test #03)\n\nThese tests verify the correctness of the authentication strategy in various scenarios.", "metadata": {"repo": "magiclabs/passport-magic", "file": "test/spec/strategy/authenticate.spec.ts", "chunk_number": 2, "total_chunks": 5}, "repository_explanation": "This repository, `magiclabs/passport-magic`, is a Passport.js strategy for Magic (formerly known as Stripe Identity) authentication.\n\nContent:\n\n* A single file (`index.js`) that exports a Passport strategy\n* Implementation of Magic authentication logic\n* Example usage code in the README and/or tests", "file_summary": "Here is a concise summary of the file 'test/spec/strategy/authenticate.spec.ts':\n\nThis file contains test cases for authenticating users using DIDt (Decentralized Identifier) with Ava testing framework, verifying proper authentication logic in various scenarios. The tests cover valid and invalid requests, user attachments, and correct behavior of the `authenticate` method under different conditions, including error handling."}
{"code": "  const { strat, verifyStub, verifyStubWithReq, successStub } = createStrategyInstance();\n\n  await strat.authenticate(validReq);\n\n  t.true(verifyStubWithReq.notCalled);\n  t.deepEqual(verifyStub.args[0][0], validUser);\n  t.true(successStub.calledOnceWith(validUser, undefined));\n});\n\ntest('#04: Succeeds validation with a valid DIDT and `passReqToCallback` is `true`', async t => {\n  const { strat, verifyStub, verifyStubWithReq, successStub } = createStrategyInstance({ passReqToCallback: true });\n\n  await strat.authenticate(validReq);\n\n  t.true(verifyStub.notCalled);\n  t.deepEqual(verifyStubWithReq.args[0][0], validReq);\n  t.deepEqual(verifyStubWithReq.args[0][1], validUser);\n  t.true(successStub.calledOnceWith(validUser, undefined));\n});\n\ntest('#05: Handles failure case from user-provided verification function', async t => {\n  const { strat, verifyStub, failStub } = createStrategyInstance({ shouldFailVerification: true });\n\n  await strat.authenticate(validReq);\n\n  t.deepEqual(verifyStub.args[0][0], validUser);", "explanation": "Here is a concise summary:\n\n**Purpose:** Test strategies for authentication and verification functions.\n\n**Functionality:**\n\n* Tests scenarios where user-provided verification functions succeed or fail.\n* Verifies that the correct arguments are passed to the verification function.\n* Asserts that the correct result is returned from the strategy's authenticate method.", "metadata": {"repo": "magiclabs/passport-magic", "file": "test/spec/strategy/authenticate.spec.ts", "chunk_number": 3, "total_chunks": 5}, "repository_explanation": "This repository, `magiclabs/passport-magic`, is a Passport.js strategy for Magic (formerly known as Stripe Identity) authentication.\n\nContent:\n\n* A single file (`index.js`) that exports a Passport strategy\n* Implementation of Magic authentication logic\n* Example usage code in the README and/or tests", "file_summary": "Here is a concise summary of the file 'test/spec/strategy/authenticate.spec.ts':\n\nThis file contains test cases for authenticating users using DIDt (Decentralized Identifier) with Ava testing framework, verifying proper authentication logic in various scenarios. The tests cover valid and invalid requests, user attachments, and correct behavior of the `authenticate` method under different conditions, including error handling."}
{"code": "  t.true(failStub.calledOnceWith({ message: 'goodbye world' }));\n});\n\ntest('#06: Uses attachment from `req[attachmentAttribute]`', async t => {\n  const { strat, verifyStub, failStub } = createStrategyInstance({ shouldFailVerification: true });\n\n  await strat.authenticate(validReqWithAttachment);\n\n  t.deepEqual(verifyStub.args[0][0], validUserWithAttachment);\n  t.true(failStub.calledOnceWith({ message: 'goodbye world' }));\n});\n\ntest('#07: Handles error case from user-provided verification function', async t => {\n  const { strat, verifyStub, errorStub } = createStrategyInstance({ shouldErrorVerification: true });\n\n  await strat.authenticate(validReq);\n\n  t.deepEqual(verifyStub.args[0][0], validUser);\n  t.true(errorStub.calledOnceWith({ message: 'hello world' }));\n});\n\ntest('#08: Handles exception while executing user-provided verification function', async t => {\n  const { strat, verifyStub, errorStub } = createStrategyInstance({ shouldThrowVerification: true });\n\n  await strat.authenticate(validReq);\n", "explanation": "Here is a concise summary:\n\n**Block Purpose:** Testing authentication strategy functionality with various scenarios.\n\n**Functionality:**\n\n* Verify correct behavior of `authenticate` method under different conditions (e.g., attachment usage, error handling).\n* Test stubs (verifyStub, failStub, errorStub) to ensure expected interactions occur.", "metadata": {"repo": "magiclabs/passport-magic", "file": "test/spec/strategy/authenticate.spec.ts", "chunk_number": 4, "total_chunks": 5}, "repository_explanation": "This repository, `magiclabs/passport-magic`, is a Passport.js strategy for Magic (formerly known as Stripe Identity) authentication.\n\nContent:\n\n* A single file (`index.js`) that exports a Passport strategy\n* Implementation of Magic authentication logic\n* Example usage code in the README and/or tests", "file_summary": "Here is a concise summary of the file 'test/spec/strategy/authenticate.spec.ts':\n\nThis file contains test cases for authenticating users using DIDt (Decentralized Identifier) with Ava testing framework, verifying proper authentication logic in various scenarios. The tests cover valid and invalid requests, user attachments, and correct behavior of the `authenticate` method under different conditions, including error handling."}
{"code": "  t.deepEqual(verifyStub.args[0][0], validUser);\n  t.is(errorStub.args[0][0].message, 'uh oh!');\n});\n\ntest('#09: Handles exceptions from Magic Admin SDK during token validation', async t => {\n  const { strat, verifyStub, failStub } = createStrategyInstance();\n\n  await strat.authenticate(invalidReq);\n\n  t.true(verifyStub.notCalled);\n  t.true(Object.values(MagicSDKErrorCode).includes(failStub.args[0][0].error_code));\n  t.is(failStub.args[0][1], 401);\n});\n\ntest('#10: Handles generic exceptions during token validation', async t => {\n  const { strat, verifyStub, failStub } = createStrategyInstance();\n\n  (strat as any).magicInstance.token.validate = sinon.spy(() => {\n    throw new Error();\n  });\n  await strat.authenticate(validReq);\n\n  t.true(verifyStub.notCalled);\n  t.true(failStub.calledWith({ message: 'Invalid DID token.' }, 401));\n});\n", "explanation": "Here is a summary of the block:\n\nThis block contains three test cases that verify the functionality of an authentication strategy in handling exceptions during token validation using the Magic Admin SDK.\n\nThe tests cover scenarios where:\n\n* An exception occurs from the Magic Admin SDK with a specific error message\n* A generic exception occurs from the token validation process", "metadata": {"repo": "magiclabs/passport-magic", "file": "test/spec/strategy/authenticate.spec.ts", "chunk_number": 5, "total_chunks": 5}, "repository_explanation": "This repository, `magiclabs/passport-magic`, is a Passport.js strategy for Magic (formerly known as Stripe Identity) authentication.\n\nContent:\n\n* A single file (`index.js`) that exports a Passport strategy\n* Implementation of Magic authentication logic\n* Example usage code in the README and/or tests", "file_summary": "Here is a concise summary of the file 'test/spec/strategy/authenticate.spec.ts':\n\nThis file contains test cases for authenticating users using DIDt (Decentralized Identifier) with Ava testing framework, verifying proper authentication logic in various scenarios. The tests cover valid and invalid requests, user attachments, and correct behavior of the `authenticate` method under different conditions, including error handling."}
{"code": "import test from 'ava';\nimport { Strategy as BaseStrategy } from 'passport-strategy';\nimport { Magic } from '@magic-sdk/admin';\nimport { Strategy } from '../../../src/strategy';\n\ntest('#01: Initialize `MagicStrategy`', t => {\n  const verify = () => {};\n  const strat = new Strategy(verify);\n\n  t.true(strat instanceof BaseStrategy);\n  t.is(strat.name, 'magic');\n  t.is((strat as any).verify, verify);\n  t.is((strat as any).verifyWithReq, verify);\n  t.is((strat as any).attachmentAttribute, 'attachment');\n  t.true((strat as any).magicInstance instanceof Magic);\n  t.false((strat as any).passReqToCallback);\n});\n\ntest('#02: Initialize `MagicStrategy` with custom Magic Admin SDK instance', t => {\n  const customMagicInst = new Magic('API_KEY');\n  const strat = new Strategy({ magicInstance: customMagicInst }, () => {});\n\n  t.is((strat as any).magicInstance, customMagicInst);\n});\n\ntest('#03: Initialize `MagicStrategy` with custom attachment attribute name', t => {\n  const customMagicInst = new Magic('API_KEY');", "explanation": "Here is a concise summary:\n\n**Purpose:** Test the functionality of the `MagicStrategy` class, which initializes a passport strategy using the Magic Admin SDK.\n\n**Functionality:**\n\n* Initializes with a verify function\n* Sets the name to 'magic'\n* Exposes various functions (`verify`, `verifyWithReq`, etc.) from the underlying Magic instance\n* Can be initialized with a custom Magic Admin SDK instance or attachment attribute name.", "metadata": {"repo": "magiclabs/passport-magic", "file": "test/spec/strategy/constructor.spec.ts", "chunk_number": 1, "total_chunks": 3}, "repository_explanation": "This repository, `magiclabs/passport-magic`, is a Passport.js strategy for Magic (formerly known as Stripe Identity) authentication.\n\nContent:\n\n* A single file (`index.js`) that exports a Passport strategy\n* Implementation of Magic authentication logic\n* Example usage code in the README and/or tests", "file_summary": "Here is a concise summary:\n\n**File Purpose:** Unit test file for the `Strategy` class, ensuring proper initialization and configuration.\n\n**Summary:** Tests various aspects of the `Strategy` class, including correct initialization, error handling, property assignment, and verification method functionality."}
{"code": "  const strat = new Strategy({ attachmentAttribute: 'foobar' }, () => {});\n\n  t.is((strat as any).attachmentAttribute, 'foobar');\n});\n\ntest('#04: Fail to initialize `MagicStrategy` without a `verify` callback', t => {\n  // Given `undefined` as only argument.\n  t.throws(() => new Strategy(undefined), {\n    instanceOf: TypeError,\n    message: '`MagicStrategy` requires a `verify` callback.',\n  });\n\n  // Given `undefined` as first argument.\n  t.throws(() => new Strategy(undefined, {}), {\n    instanceOf: TypeError,\n    message: '`MagicStrategy` requires a `verify` callback.',\n  });\n\n  // Given `undefined` as second argument.\n  t.throws(() => new Strategy({}, undefined), {\n    instanceOf: TypeError,\n    message: '`MagicStrategy` requires a `verify` callback.',\n  });\n});\n\ntest('#05: Arguments can be provided in any order', t => {\n  const verify = () => {};\n  const options = { passReqToCallback: true } as const;\n\n  // With `verify` as first argument.\n  const strat1 = new Strategy(verify, options);", "explanation": "Here is a summary of the purpose and functionality of this block:\n\n**Purpose:** Unit testing for a \"Strategy\" class.\n\n**Functionality:**\n\n* Tests the correct initialization of the Strategy class with a callback function.\n* Tests that an error is thrown when trying to initialize the Strategy without a verify callback.\n* Demonstrates that arguments can be provided in any order when initializing the Strategy.", "metadata": {"repo": "magiclabs/passport-magic", "file": "test/spec/strategy/constructor.spec.ts", "chunk_number": 2, "total_chunks": 3}, "repository_explanation": "This repository, `magiclabs/passport-magic`, is a Passport.js strategy for Magic (formerly known as Stripe Identity) authentication.\n\nContent:\n\n* A single file (`index.js`) that exports a Passport strategy\n* Implementation of Magic authentication logic\n* Example usage code in the README and/or tests", "file_summary": "Here is a concise summary:\n\n**File Purpose:** Unit test file for the `Strategy` class, ensuring proper initialization and configuration.\n\n**Summary:** Tests various aspects of the `Strategy` class, including correct initialization, error handling, property assignment, and verification method functionality."}
{"code": "  t.is((strat1 as any).verify, verify);\n  t.is((strat1 as any).verifyWithReq, verify);\n  t.true((strat1 as any).passReqToCallback);\n\n  // With `verify` as second argument.\n  const strat2 = new Strategy(options, verify);\n  t.is((strat2 as any).verify, verify);\n  t.is((strat2 as any).verifyWithReq, verify);\n  t.true((strat2 as any).passReqToCallback);\n});\n", "explanation": "**Purpose:** Test strategy objects for correct property assignment.\n\n**Functionality:** Verify that two instances of a strategy object are correctly configured with different verification methods and callbacks.", "metadata": {"repo": "magiclabs/passport-magic", "file": "test/spec/strategy/constructor.spec.ts", "chunk_number": 3, "total_chunks": 3}, "repository_explanation": "This repository, `magiclabs/passport-magic`, is a Passport.js strategy for Magic (formerly known as Stripe Identity) authentication.\n\nContent:\n\n* A single file (`index.js`) that exports a Passport strategy\n* Implementation of Magic authentication logic\n* Example usage code in the README and/or tests", "file_summary": "Here is a concise summary:\n\n**File Purpose:** Unit test file for the `Strategy` class, ensuring proper initialization and configuration.\n\n**Summary:** Tests various aspects of the `Strategy` class, including correct initialization, error handling, property assignment, and verification method functionality."}
{"code": "{\n  \"extends\": \"../config/tsconfig.test.json\"\n}\n", "explanation": "This block extends a configuration file (`tsconfig.test.json`) from a parent location (`../config/`).", "metadata": {"repo": "magiclabs/passport-magic", "file": "test/tsconfig.json", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "This repository, `magiclabs/passport-magic`, is a Passport.js strategy for Magic (formerly known as Stripe Identity) authentication.\n\nContent:\n\n* A single file (`index.js`) that exports a Passport strategy\n* Implementation of Magic authentication logic\n* Example usage code in the README and/or tests", "file_summary": "Here is a concise and to-the-point holistic summary of the file 'test/tsconfig.json':\n\n**Extends tsconfig test config from parent location**\n\n(No changes were made, just an extension of an existing configuration)"}
{"code": "{\n  \"extends\": \"./config/tsconfig.base.json\"\n}\n", "explanation": "This block is a JSON configuration file snippet that extends another configuration file located at `./config/tsconfig.base.json`.", "metadata": {"repo": "magiclabs/passport-magic", "file": "tsconfig.json", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "This repository, `magiclabs/passport-magic`, is a Passport.js strategy for Magic (formerly known as Stripe Identity) authentication.\n\nContent:\n\n* A single file (`index.js`) that exports a Passport strategy\n* Implementation of Magic authentication logic\n* Example usage code in the README and/or tests", "file_summary": "Here is a concise summary:\n\n`tsconfig.json`: Extends `./config/tsconfig.base.json` configuration."}

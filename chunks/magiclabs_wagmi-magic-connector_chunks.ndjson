{"code": "# Changesets\n\nHello and welcome! This folder has been automatically generated by `@changesets/cli`, a build tool that works\nwith multi-package repos, or single-package repos to help you version and publish your code. You can\nfind the full documentation for it [in our repository](https://github.com/changesets/changesets)\n\nWe have a quick list of common questions to get you started engaging with this project in\n[our documentation](https://github.com/changesets/changesets/blob/main/docs/common-questions.md)\n", "explanation": "**Purpose:** A generated folder for managing code changes using `@changesets/cli`.\n\n**Functionality:** Provides tools for versioning and publishing code in multi-package or single-package repositories.", "metadata": {"repo": "magiclabs/wagmi-magic-connector", "file": ".changeset/README.md", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/wagmi-magic-connector`\n\n**Purpose:** A Wagmi connector for Magic API, enabling seamless integration with Magic's authentication and identity verification services in React applications.\n\n**Content:**\n\n* Code for a custom Wagmi connector\n* Documentation on how to use the connector in your project\n* Potential example code or demo apps demonstrating the connector's usage", "file_summary": "Here is a concise summary of the file '.changeset/README.md':\n\n\"A generated folder for versioning and publishing code changes, providing tools for managing changes across multiple packages.\""}
{"code": "{\n  \"$schema\": \"https://unpkg.com/@changesets/config@2.0.0/schema.json\",\n  \"changelog\": \"@changesets/cli/changelog\",\n  \"commit\": false,\n  \"fixed\": [],\n  \"linked\": [],\n  \"access\": \"restricted\",\n  \"baseBranch\": \"main\",\n  \"updateInternalDependencies\": \"patch\",\n  \"ignore\": []\n}\n", "explanation": "This block appears to be a configuration object for managing changesets, specifically setting up changelog generation and dependency updates.", "metadata": {"repo": "magiclabs/wagmi-magic-connector", "file": ".changeset/config.json", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/wagmi-magic-connector`\n\n**Purpose:** A Wagmi connector for Magic API, enabling seamless integration with Magic's authentication and identity verification services in React applications.\n\n**Content:**\n\n* Code for a custom Wagmi connector\n* Documentation on how to use the connector in your project\n* Potential example code or demo apps demonstrating the connector's usage", "file_summary": "Here is a concise and to-the-point holistic summary:\n\n**'config.json' File Summary:**\n\nThis JSON file configures settings for managing changesets, including changelog generation and dependency updates."}
{"code": "# Example Contributing Guidelines\n\nThis is an example of GitHub's contributing guidelines file. Check out GitHub's [CONTRIBUTING.md help center article](https://help.github.com/articles/setting-guidelines-for-repository-contributors/) for more information.\n", "explanation": "**Purpose:** Provides an example of GitHub's contributing guidelines file.\n\n**Functionality:** A pointer to a resource (GitHub help center article) with further instructions on setting up contribution guidelines.", "metadata": {"repo": "magiclabs/wagmi-magic-connector", "file": ".github/CONTRIBUTING.md", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/wagmi-magic-connector`\n\n**Purpose:** A Wagmi connector for Magic API, enabling seamless integration with Magic's authentication and identity verification services in React applications.\n\n**Content:**\n\n* Code for a custom Wagmi connector\n* Documentation on how to use the connector in your project\n* Potential example code or demo apps demonstrating the connector's usage", "file_summary": "Here is a concise and holistic summary of the file '.github/CONTRIBUTING.md':\n\n**File Summary:**\nThis file provides an example of GitHub's contributing guidelines, linking to a resource with step-by-step instructions for setting up and maintaining contributor-friendly policies."}
{"code": "- **I'm submitting a ...**\n  - [ ] bug report\n  - [ ] feature request\n  - [ ] question about the decisions made in the repository\n  - [ ] question about how to use this project\n\n- **Summary**\n\n- **Attachments** (e.g. screenshots, logs, source code, etc.)\n\n- **[StackBlitz](https://stackblitz.com/) reproduction link** (If applicable)\n\n- **Version** (e.g. 1.0.0)\n  - @magiclabs/wagmi-connector version:\n  - wagmi version:\n", "explanation": "Here is a concise summary:\n\nThis block appears to be a template for submitting issues or questions about a project, specifically **@magiclabs/wagmi-connector** and **wagmi**, including a brief description (summary), attachments, and links to StackBlitz reproductions if applicable.", "metadata": {"repo": "magiclabs/wagmi-magic-connector", "file": ".github/ISSUE_TEMPLATE.md", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/wagmi-magic-connector`\n\n**Purpose:** A Wagmi connector for Magic API, enabling seamless integration with Magic's authentication and identity verification services in React applications.\n\n**Content:**\n\n* Code for a custom Wagmi connector\n* Documentation on how to use the connector in your project\n* Potential example code or demo apps demonstrating the connector's usage", "file_summary": "Here is a holistic summary of the file '.github/ISSUE_TEMPLATE.md':\n\n**Issue Submission Template**\n\nA template for submitting issues or questions about **@magiclabs/wagmi-connector** and **wagmi**, including summary, attachments, and links to StackBlitz reproductions if applicable."}
{"code": "---\nname: Bug report\nabout: Create a report to help us improve\ntitle: ''\nlabels: ''\nassignees: ''\n\n---\n\n**Describe the bug**\nA clear and concise description of what the bug is.\n\n**To Reproduce**\nSteps to reproduce the behavior:\n1. Go to '...'\n2. Click on '....'\n3. Scroll down to '....'\n4. See error\n\n**Expected behavior**\nA clear and concise description of what you expected to happen.\n\n**Screenshots**\nIf applicable, add screenshots to help explain your problem.\n\n**Desktop (please complete the following information):**\n - OS: [e.g. iOS]\n - Browser [e.g. chrome, safari]\n - Version [e.g. 22]\n\n**Smartphone (please complete the following information):**\n - Device: [e.g. iPhone6]\n - OS: [e.g. iOS8.1]\n - Browser [e.g. stock browser, safari]\n - Version [e.g. 22]\n\n**Additional context**\nAdd any other context about the problem here.\n", "explanation": "This block is a template for reporting bugs or issues. It provides a structured format to:\n\n* Describe the bug clearly\n* Reproduce the issue with step-by-step instructions\n* Specify expected behavior\n* Add screenshots (if applicable)\n* Provide device and browser information for desktop and smartphone environments\n* Include additional context about the problem", "metadata": {"repo": "magiclabs/wagmi-magic-connector", "file": ".github/ISSUE_TEMPLATE/bug_report.md", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/wagmi-magic-connector`\n\n**Purpose:** A Wagmi connector for Magic API, enabling seamless integration with Magic's authentication and identity verification services in React applications.\n\n**Content:**\n\n* Code for a custom Wagmi connector\n* Documentation on how to use the connector in your project\n* Potential example code or demo apps demonstrating the connector's usage", "file_summary": "Here is a concise holistic summary of the '.github/ISSUE_TEMPLATE/bug_report.md' file:\n\n**Bug Report Template**\n\nProvides a structured format for reporting bugs/issues, including:\n\n* Bug description\n* Step-by-step reproduction instructions\n* Expected behavior\n* Optional screenshots and device/browser info."}
{"code": "---\nname: Feature request\nabout: Suggest an idea for this project\ntitle: ''\nlabels: ''\nassignees: ''\n\n---\n\n**Is your feature request related to a problem? Please describe.**\nA clear and concise description of what the problem is. Ex. I'm always frustrated when [...]\n\n**Describe the solution you'd like**\nA clear and concise description of what you want to happen.\n\n**Describe alternatives you've considered**\nA clear and concise description of any alternative solutions or features you've considered.\n\n**Additional context**\nAdd any other context or screenshots about the feature request here.\n", "explanation": "This block appears to be a template for submitting feature requests in a project management system, likely GitHub. Its purpose is to guide users in describing their feature idea, its relationship to a problem, and potential alternative solutions. The functionality includes filling out fields with relevant information about the request.", "metadata": {"repo": "magiclabs/wagmi-magic-connector", "file": ".github/ISSUE_TEMPLATE/feature_request.md", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/wagmi-magic-connector`\n\n**Purpose:** A Wagmi connector for Magic API, enabling seamless integration with Magic's authentication and identity verification services in React applications.\n\n**Content:**\n\n* Code for a custom Wagmi connector\n* Documentation on how to use the connector in your project\n* Potential example code or demo apps demonstrating the connector's usage", "file_summary": "Here's a holistic summary of the file '.github/ISSUE_TEMPLATE/feature_request.md':\n\n**Feature Request Template**\n\nA guided template for submitting feature requests, helping users describe their idea, its problem-solving aspect, and alternative solutions."}
{"code": "- **What kind of change does this PR introduce?** (Bug fix, feature, docs update, ...)\n\n- **What is the current behavior?** (You can also link to an open issue here)\n\n- **What is the new behavior (if this is a feature change)?**\n\n- **Other information**:\n", "explanation": "This block appears to be a template or checklist for a Pull Request (PR) in a version control system, likely GitHub. It's used to document the purpose and impact of a PR.\n\nHere's a concise summary:\n\n**Purpose:** Documenting changes in a PR.\n**Functionality:** Lists questions to answer about the PR, including type of change, current behavior, new behavior, and additional information.", "metadata": {"repo": "magiclabs/wagmi-magic-connector", "file": ".github/PULL_REQUEST_TEMPLATE.md", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/wagmi-magic-connector`\n\n**Purpose:** A Wagmi connector for Magic API, enabling seamless integration with Magic's authentication and identity verification services in React applications.\n\n**Content:**\n\n* Code for a custom Wagmi connector\n* Documentation on how to use the connector in your project\n* Potential example code or demo apps demonstrating the connector's usage", "file_summary": "Here is a concise and holistic summary of the file '.github/PULL_REQUEST_TEMPLATE.md':\n\nThis template serves as a checklist for documenting changes in a Pull Request (PR), prompting users to answer key questions about the PR's purpose and impact."}
{"code": "name: Lint Checks\non: [push]\njobs:\n  ci:\n    name: Lint using rome\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          fetch-depth: 1\n      - uses: actions/setup-node@v3\n        with:\n          node-version: 18\n      - name: Installing dependencies\n        run: yarn install --frozen-lockfile\n      - name: Lint rome\n        run: yarn rome ci .\n", "explanation": "Here is a concise summary:\n\n**Purpose:** Run lint checks on code changes using Rome.\n**Functionality:** Automated process that installs dependencies, runs linting with Rome, and triggers on push events.", "metadata": {"repo": "magiclabs/wagmi-magic-connector", "file": ".github/workflows/lint.yml", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/wagmi-magic-connector`\n\n**Purpose:** A Wagmi connector for Magic API, enabling seamless integration with Magic's authentication and identity verification services in React applications.\n\n**Content:**\n\n* Code for a custom Wagmi connector\n* Documentation on how to use the connector in your project\n* Potential example code or demo apps demonstrating the connector's usage", "file_summary": "Here's a holistic summary of the file '.github/workflows/lint.yml':\n\n**Code Linting Workflow**: This YAML file automates code review using Rome, triggered by Git push events, to ensure consistent code quality and style."}
{"code": "name: Release\n\non:\n  push:\n    branches:\n      - main\n\nconcurrency: ${{ github.workflow }}-${{ github.ref }}\n\njobs:\n  release:\n    name: Release\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout Repo\n        uses: actions/checkout@v2\n\n      - name: Setup Node.js 18.x\n        uses: actions/setup-node@v2\n        with:\n          node-version: 18.x\n\n      - name: Install Dependencies\n        run: yarn\n\n      - name: Create Release Pull Request or Publish to npm\n        id: changesets\n        uses: changesets/action@v1\n        with:\n          publish: yarn release\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}\n", "explanation": "Here is a concise summary:\n\n**Release Block**\n\nAutomates the release process for GitHub repository on push to main branch, creating a release pull request or publishing to npm with dependencies installed using yarn.", "metadata": {"repo": "magiclabs/wagmi-magic-connector", "file": ".github/workflows/release.yml", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/wagmi-magic-connector`\n\n**Purpose:** A Wagmi connector for Magic API, enabling seamless integration with Magic's authentication and identity verification services in React applications.\n\n**Content:**\n\n* Code for a custom Wagmi connector\n* Documentation on how to use the connector in your project\n* Potential example code or demo apps demonstrating the connector's usage", "file_summary": "Here's a concise and holistic summary of the file '.github/workflows/release.yml':\n\n**Auto-Release Workflow**\n\nAutomates releases on push to main, triggering either a release PR or npm publish with Yarn dependencies."}
{"code": "name: Snapshot\n\non: workflow_dispatch\n\njobs:\n  release:\n    name: Publish snapshot version\n    runs-on: ubuntu-latest\n    env:\n      CI: true\n    steps:\n      - name: Check out repo\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n          token: ${{ secrets.GITHUB_TOKEN }}\n\n      - name: Set up Node.js 18.x\n        uses: actions/setup-node@v3\n        with:\n          node-version: 18.x\n\n      - name: Install dependencies\n        run: yarn install --frozen-lockfile\n\n      - name: Publish\n        uses: seek-oss/changesets-snapshot@v0\n        with:\n          pre-publish: yarn build\n        env:\n          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n", "explanation": "**Summary**\n\nThis is a GitHub Actions workflow named \"Snapshot\" that triggers on workflow dispatch. Its purpose is to publish a snapshot version of a repository.\n\n**Functionality**\n\nThe workflow:\n\n1. Checks out the repository\n2. Installs Node.js 18.x\n3. Installs dependencies with yarn\n4. Publishes a snapshot using changesets-snapshot, executing pre-publish script \"yarn build\" before publishing.", "metadata": {"repo": "magiclabs/wagmi-magic-connector", "file": ".github/workflows/snapshot.yml", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/wagmi-magic-connector`\n\n**Purpose:** A Wagmi connector for Magic API, enabling seamless integration with Magic's authentication and identity verification services in React applications.\n\n**Content:**\n\n* Code for a custom Wagmi connector\n* Documentation on how to use the connector in your project\n* Potential example code or demo apps demonstrating the connector's usage", "file_summary": "Here is a concise and holistic summary of the file '.github/workflows/snapshot.yml':\n\n**Snapshot Workflow**\n\nPublishes a snapshot version of this repository on workflow dispatch, checking out the code, installing dependencies, and executing a pre-publish script before publication."}
{"code": "# @magiclabs/wagmi-magic-connector\n\n## 2.1.0\n\n### Minor Changes\n\n- 0ab4b4c: Adds redirect result to localStorage\n\n## 2.0.0\n\n### Major Changes\n\n- Update to support WAGMI v2\n\n## 1.1.6\n\n### Patch Changes\n\n- Fix bug where email login couldn't be disabled\n\n## 1.1.5\n\n### Patch Changes\n\n- 417a1bf: Updates dedicated connector to use email OTP\n\n## 1.1.4\n\n### Patch Changes\n\n- 7e727a0: Updates @wagmi-core dependency\n\n## 1.1.3\n\n### Patch Changes\n\n- e381c54: Updates package to use new Magic product names (Dedicated and Universal Wallet)\n\n## 1.1.2\n\n### Patch Changes\n\n- 8dd286f: Updates viem dependency\n\n## 1.1.1\n\n### Patch Changes\n\n- Updates WAGMI and Magic dependencies\n\n## 1.1.0\n\n### Minor Changes\n\n- Moves package ownership to @magiclabs and adds @everipedianetwork as maintainers\n\n## 1.0.2\n\n### Patch Changes\n\n- 6e648bb: Adds post processing to build to fix bundling issues\n\n## 1.0.1\n\n### Patch Changes\n\n- eb25ae1: Makes package es module from package json type\n\n## 1.0.0\n\n### Major Changes\n\n- 9e97169: Adds support to use the connectors with wagmi v1.", "explanation": "**Purpose:** The `@magiclabs/wagmi-magic-connector` block is a Magic Wallet connector for WAGMI.\n\n**Functionality:** It provides an interface to interact with Magic Wallet, supporting features such as email login, email OTP, and wallet management, while also being compatible with various versions of WAGMI.", "metadata": {"repo": "magiclabs/wagmi-magic-connector", "file": "CHANGELOG.md", "chunk_number": 1, "total_chunks": 6}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/wagmi-magic-connector`\n\n**Purpose:** A Wagmi connector for Magic API, enabling seamless integration with Magic's authentication and identity verification services in React applications.\n\n**Content:**\n\n* Code for a custom Wagmi connector\n* Documentation on how to use the connector in your project\n* Potential example code or demo apps demonstrating the connector's usage", "file_summary": "Here's a concise and holistic summary of the file 'CHANGELOG.md':\n\n**CHANGELOG Summary**\n\nThis CHANGELOG document tracks updates to the `@magiclabs/wagmi-magic-connector` package. Updates include:\n\n* Supporting Wagmi v1\n* Migrating from Ethers to Viem\n* Improving OAuth buttons and redesigning modal layout\n* Adding optional email authentication\n* Requiring email input for connect flow\n* Creating new classes (`MagicAuthConnector` and `MagicConnectConnector`)\n* Refactoring code for improved functionality and compatibility\n* Updating dependencies, fixing minor bugs, and migrating to the latest Magic SDK and Wagmi Core."}
{"code": "  Major version bump to support wagmi v1 \u270c\ufe0f\n\n  For migration:\n\n  1. update the connector version to 1.0.0\n  2. update Wagmi to v1 and install Viem (https://viem.sh) in place of ethers\n  3. follow migration guide https://wagmi.sh/react/migration-guide#1xx-breaking-changes to adapt your code to the new wagmi api.\n\n  Note: The connector itself has no API change.\n\n## 0.12.1\n\n### Patch Changes\n\n- 897ed1f: Fixes magic auth not working with oauth login. updates magic sdk and wagmi versions to latest\n\n## 0.12.0\n\n### Minor Changes\n\n- c09ccc0: Add support for switchChain for MagicConnectConnector\n  You can now pass a list of network accepted to switch chain\n  ```ts\n  new MagicConnectConnector({\n    chains: chains,\n    options: {\n      apiKey: environment.MAGIC_API_KEY,\n      networks: [\n        { chainId: 1, rpcUrl: \"https://your-ethereum-rpc-url\" },\n        { chainId: 137, rpcUrl: \"https://your-polygon-rpc-url\" },\n        // ...\n      ],\n    },\n  });\n  ```\n\n## 0.11.0\n\n### Minor Changes\n", "explanation": "Here is a concise summary:\n\n**Purpose:** Update to support Wagmi v1.\n\n**Functionality:**\n\n* Update connector version to 1.0.0.\n* Migrate from Ethers to Viem.\n* Follow Wagmi migration guide for API changes.\n* No API change in the connector itself.", "metadata": {"repo": "magiclabs/wagmi-magic-connector", "file": "CHANGELOG.md", "chunk_number": 2, "total_chunks": 6}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/wagmi-magic-connector`\n\n**Purpose:** A Wagmi connector for Magic API, enabling seamless integration with Magic's authentication and identity verification services in React applications.\n\n**Content:**\n\n* Code for a custom Wagmi connector\n* Documentation on how to use the connector in your project\n* Potential example code or demo apps demonstrating the connector's usage", "file_summary": "Here's a concise and holistic summary of the file 'CHANGELOG.md':\n\n**CHANGELOG Summary**\n\nThis CHANGELOG document tracks updates to the `@magiclabs/wagmi-magic-connector` package. Updates include:\n\n* Supporting Wagmi v1\n* Migrating from Ethers to Viem\n* Improving OAuth buttons and redesigning modal layout\n* Adding optional email authentication\n* Requiring email input for connect flow\n* Creating new classes (`MagicAuthConnector` and `MagicConnectConnector`)\n* Refactoring code for improved functionality and compatibility\n* Updating dependencies, fixing minor bugs, and migrating to the latest Magic SDK and Wagmi Core."}
{"code": "- 58b39f3: Update Magic Connect Connector to use Magic Connect's Modal UI\n  - This will use Magic Connect's Modal instead of homemade one.\n  - Remove the styling props to constructor for migration\n\n## 0.10.1\n\n### Patch Changes\n\n- febd0a3: ### Patch Changes\n\n  - Fixing a bug that prevents login with email because of a MagicSDK naming convention recent change.\n  - Dependencies update.\n\n## 0.10.0\n\n### Minor Changes\n\n- 82a5174: Throws `api key not provided` error instead of `user rejected request` error\n\n## 0.9.1\n\n### Patch Changes\n\n- 5a555d8: Adds post processing on build output for adding .js ext for ESM resolution\n\n## 0.9.0\n\n### Minor Changes\n\n- adb6e07: Changes @everipedia/wagmi-magic-connector to a pure ESM Module package.\n\n  Requires Node 12.20.0 or higher. it fixes resolution issues of latest wagmi and magic packages and should work well out of the box with Nextjs and other react frameworks without the need for any extra configuration.\n\n## 0.8.0\n\n### Minor Changes\n", "explanation": "Here is a concise summary:\n\n**Update and Change Log**\n\nThis block appears to be a change log for a software library, specifically `@everipedia/wagmi-magic-connector`. It documents updates, bug fixes, and changes in functionality across various versions (0.8.0 to 0.10.1).", "metadata": {"repo": "magiclabs/wagmi-magic-connector", "file": "CHANGELOG.md", "chunk_number": 3, "total_chunks": 6}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/wagmi-magic-connector`\n\n**Purpose:** A Wagmi connector for Magic API, enabling seamless integration with Magic's authentication and identity verification services in React applications.\n\n**Content:**\n\n* Code for a custom Wagmi connector\n* Documentation on how to use the connector in your project\n* Potential example code or demo apps demonstrating the connector's usage", "file_summary": "Here's a concise and holistic summary of the file 'CHANGELOG.md':\n\n**CHANGELOG Summary**\n\nThis CHANGELOG document tracks updates to the `@magiclabs/wagmi-magic-connector` package. Updates include:\n\n* Supporting Wagmi v1\n* Migrating from Ethers to Viem\n* Improving OAuth buttons and redesigning modal layout\n* Adding optional email authentication\n* Requiring email input for connect flow\n* Creating new classes (`MagicAuthConnector` and `MagicConnectConnector`)\n* Refactoring code for improved functionality and compatibility\n* Updating dependencies, fixing minor bugs, and migrating to the latest Magic SDK and Wagmi Core."}
{"code": "- a5d6191: Updates packages to use latest magic sdk and wagmi core\n\n## 0.7.1\n\n### Patch Changes\n\n- b19d703: - `magic.user.disconnect()` is no available for Magic Connect, relying on local storage instead\n  - Require email input for `connect()` flow to continue once modal is open. Otherwise the Magic Connect\n    modals appears even if the user quits the process manually.\n\n## 0.7.0\n\n### Minor Changes\n\n- 38dd8cc: ### Major\n\n  - Creation of two classes `MagicAuthConnector` & `MagicConnectConnector`\n    - `MagicAuthConnector`: Connector integrating with [Magic Auth](https://magic.link/docs/auth/overview). Most of the code comes from previous implementation\n    - `MagicConnectConnector`: Connector integrating with [Magic Connect](https://magic.link/docs/connect/overview).\n  - Made `MagicConnector` an abstract class containing shared logic between `MagicAuthConnector` & `MagicConnectConnector`\n  - Renamed `options.additionalMagicOptions` to `options.magicSdkConfiguration`, which seemed to be a clearer name", "explanation": "Here is a concise summary:\n\nThis block updates packages to use the latest Magic SDK and Wagmi Core, and makes changes to the Magic Connect connector functionality, including:\n\n* Replacing `magic.user.disconnect()` with local storage for Magic Connect\n* Requiring email input for the connect flow to proceed\n* Creating two new classes (`MagicAuthConnector` and `MagicConnectConnector`) and renaming options.", "metadata": {"repo": "magiclabs/wagmi-magic-connector", "file": "CHANGELOG.md", "chunk_number": 4, "total_chunks": 6}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/wagmi-magic-connector`\n\n**Purpose:** A Wagmi connector for Magic API, enabling seamless integration with Magic's authentication and identity verification services in React applications.\n\n**Content:**\n\n* Code for a custom Wagmi connector\n* Documentation on how to use the connector in your project\n* Potential example code or demo apps demonstrating the connector's usage", "file_summary": "Here's a concise and holistic summary of the file 'CHANGELOG.md':\n\n**CHANGELOG Summary**\n\nThis CHANGELOG document tracks updates to the `@magiclabs/wagmi-magic-connector` package. Updates include:\n\n* Supporting Wagmi v1\n* Migrating from Ethers to Viem\n* Improving OAuth buttons and redesigning modal layout\n* Adding optional email authentication\n* Requiring email input for connect flow\n* Creating new classes (`MagicAuthConnector` and `MagicConnectConnector`)\n* Refactoring code for improved functionality and compatibility\n* Updating dependencies, fixing minor bugs, and migrating to the latest Magic SDK and Wagmi Core."}
{"code": "  - Renamed `enableSMSlogin` to `enableSMSLogin`\n  - Updated documentation in README to fit changes\n\n  ### Minor\n\n  - Fixed some typos in the README\n  - Fixed Rainbow Kit example in the README and specified that `options.magicSdkConfiguration.network.chainId` needs to be specified. This comes from the fact that in their most recent version Rainbow Kit makes a `getChainId()` call on the connector before calling the `connect()` method.\n  - Fixed typo in enableSMSlogin -> enableSMSLogin\n\n## 0.6.5\n\n### Patch Changes\n\n- d5c95eb: updates email regex to take +\n\n## 0.6.4\n\n### Patch Changes\n\n- d49c203: updated dependancies to latest versions\n\n## 0.6.3\n\n### Patch Changes\n\n- 4288ba5: Prevent changing chainId type from number to string\n\n## 0.6.2\n\n### Patch Changes\n\n- 127b67e: added implementation for getChainId\n\n## 0.6.1\n\n### Patch Changes\n\n- 85cc525: Fix Custom header images not working\n\n## 0.6.0\n\n### Minor Changes\n\n- 1001fbf: - Made dark mode styles overridable by converting darkmode styles to pure css", "explanation": "Here is a concise summary:\n\n**Purpose:** Update various parts of a package, including documentation, code fixes, and dependency updates.\n\n**Functionality:** Fixes minor bugs, updates dependencies, and refactors code to improve functionality and compatibility.", "metadata": {"repo": "magiclabs/wagmi-magic-connector", "file": "CHANGELOG.md", "chunk_number": 5, "total_chunks": 6}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/wagmi-magic-connector`\n\n**Purpose:** A Wagmi connector for Magic API, enabling seamless integration with Magic's authentication and identity verification services in React applications.\n\n**Content:**\n\n* Code for a custom Wagmi connector\n* Documentation on how to use the connector in your project\n* Potential example code or demo apps demonstrating the connector's usage", "file_summary": "Here's a concise and holistic summary of the file 'CHANGELOG.md':\n\n**CHANGELOG Summary**\n\nThis CHANGELOG document tracks updates to the `@magiclabs/wagmi-magic-connector` package. Updates include:\n\n* Supporting Wagmi v1\n* Migrating from Ethers to Viem\n* Improving OAuth buttons and redesigning modal layout\n* Adding optional email authentication\n* Requiring email input for connect flow\n* Creating new classes (`MagicAuthConnector` and `MagicConnectConnector`)\n* Refactoring code for improved functionality and compatibility\n* Updating dependencies, fixing minor bugs, and migrating to the latest Magic SDK and Wagmi Core."}
{"code": "  - Fixed OAuth provider buttons not following the order they are passed in\n  - Redesigned Modal look and feel\n  - Changed Github and Default header icons\n\n## 0.5.0\n\n### Minor Changes\n\n- 075cf2b: Made Email Authentication Optional. To remove the email authentication requirement, you can set `enableEmailLogin` to `false` in connector configuration's options object.\n\n## 0.4.1\n\n### Patch Changes\n\n- 7ab9877: fixes animations not working while opening and closing modal\n", "explanation": "Here is a concise summary:\n\n**Purpose:** Update connector functionality and design.\n\n**Functionality:** Improved OAuth buttons, redesigned modal layout, optional email authentication, and fixed animation issues.", "metadata": {"repo": "magiclabs/wagmi-magic-connector", "file": "CHANGELOG.md", "chunk_number": 6, "total_chunks": 6}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/wagmi-magic-connector`\n\n**Purpose:** A Wagmi connector for Magic API, enabling seamless integration with Magic's authentication and identity verification services in React applications.\n\n**Content:**\n\n* Code for a custom Wagmi connector\n* Documentation on how to use the connector in your project\n* Potential example code or demo apps demonstrating the connector's usage", "file_summary": "Here's a concise and holistic summary of the file 'CHANGELOG.md':\n\n**CHANGELOG Summary**\n\nThis CHANGELOG document tracks updates to the `@magiclabs/wagmi-magic-connector` package. Updates include:\n\n* Supporting Wagmi v1\n* Migrating from Ethers to Viem\n* Improving OAuth buttons and redesigning modal layout\n* Adding optional email authentication\n* Requiring email input for connect flow\n* Creating new classes (`MagicAuthConnector` and `MagicConnectConnector`)\n* Refactoring code for improved functionality and compatibility\n* Updating dependencies, fixing minor bugs, and migrating to the latest Magic SDK and Wagmi Core."}
{"code": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nWe as members, contributors, and leaders pledge to make participation in our\ncommunity a harassment-free experience for everyone, regardless of age, body\nsize, visible or invisible disability, ethnicity, sex characteristics, gender\nidentity and expression, level of experience, education, socio-economic status,\nnationality, personal appearance, race, religion, or sexual identity\nand orientation.\n\nWe pledge to act and interact in ways that contribute to an open, welcoming,\ndiverse, inclusive, and healthy community.\n\n## Our Standards\n\nExamples of behavior that contributes to a positive environment for our\ncommunity include:\n\n* Demonstrating empathy and kindness toward other people\n* Being respectful of differing opinions, viewpoints, and experiences\n* Giving and gracefully accepting constructive feedback\n* Accepting responsibility and apologizing to those affected by our mistakes,\n  and learning from the experience", "explanation": "**Purpose:** Establishes community standards for inclusivity and respect.\n\n**Functionality:** Defines expected behavior for contributors, leaders, and members of a community, promoting a welcoming and harassment-free environment.", "metadata": {"repo": "magiclabs/wagmi-magic-connector", "file": "CODE_OF_CONDUCT.md", "chunk_number": 1, "total_chunks": 6}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/wagmi-magic-connector`\n\n**Purpose:** A Wagmi connector for Magic API, enabling seamless integration with Magic's authentication and identity verification services in React applications.\n\n**Content:**\n\n* Code for a custom Wagmi connector\n* Documentation on how to use the connector in your project\n* Potential example code or demo apps demonstrating the connector's usage", "file_summary": "Here is a concise summary:\n\n**CODE_OF_CONDUCT.md**\n\nEstablishes community standards for inclusivity and respect, promoting a welcoming and harassment-free environment. Defines expected behavior, outlines reporting process, and prescribes consequences for misconduct, including a three-stage disciplinary process: Correction, Warning, and Temporary/Permanent Ban."}
{"code": "* Focusing on what is best not just for us as individuals, but for the\n  overall community\n\nExamples of unacceptable behavior include:\n\n* The use of sexualized language or imagery, and sexual attention or\n  advances of any kind\n* Trolling, insulting or derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or email\n  address, without their explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n  professional setting\n\n## Enforcement Responsibilities\n\nCommunity leaders are responsible for clarifying and enforcing our standards of\nacceptable behavior and will take appropriate and fair corrective action in\nresponse to any behavior that they deem inappropriate, threatening, offensive,\nor harmful.\n\nCommunity leaders have the right and responsibility to remove, edit, or reject\ncomments, commits, code, wiki edits, issues, and other contributions that are", "explanation": "**Purpose:** Establish community standards of acceptable behavior for individual contributors and enforce them through a team of community leaders.\n\n**Functionality:** Define what behavior is unacceptable (e.g. harassment, insults, private info sharing), and outline the responsibilities of community leaders to take corrective action and remove problematic content.", "metadata": {"repo": "magiclabs/wagmi-magic-connector", "file": "CODE_OF_CONDUCT.md", "chunk_number": 2, "total_chunks": 6}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/wagmi-magic-connector`\n\n**Purpose:** A Wagmi connector for Magic API, enabling seamless integration with Magic's authentication and identity verification services in React applications.\n\n**Content:**\n\n* Code for a custom Wagmi connector\n* Documentation on how to use the connector in your project\n* Potential example code or demo apps demonstrating the connector's usage", "file_summary": "Here is a concise summary:\n\n**CODE_OF_CONDUCT.md**\n\nEstablishes community standards for inclusivity and respect, promoting a welcoming and harassment-free environment. Defines expected behavior, outlines reporting process, and prescribes consequences for misconduct, including a three-stage disciplinary process: Correction, Warning, and Temporary/Permanent Ban."}
{"code": "not aligned to this Code of Conduct, and will communicate reasons for moderation\ndecisions when appropriate.\n\n## Scope\n\nThis Code of Conduct applies within all community spaces, and also applies when\nan individual is officially representing the community in public spaces.\nExamples of representing our community include using an official e-mail address,\nposting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported to the community leaders responsible for enforcement at\nhello@everipedia.org.\nAll complaints will be reviewed and investigated promptly and fairly.\n\nAll community leaders are obligated to respect the privacy and security of the\nreporter of any incident.\n\n## Enforcement Guidelines\n\nCommunity leaders will follow these Community Impact Guidelines in determining\nthe consequences for any action they deem in violation of this Code of Conduct:\n", "explanation": "Here is a concise summary:\n\n**Purpose:** Establishes guidelines for community behavior and moderation, ensuring a respectful and inclusive environment.\n\n**Functionality:**\n\n* Defines unacceptable behavior and enforcement procedures\n* Outlines reporting process (hello@everipedia.org)\n* Mandates investigation of complaints and respect for reporter's privacy\n* Provides Community Impact Guidelines for determining consequences.", "metadata": {"repo": "magiclabs/wagmi-magic-connector", "file": "CODE_OF_CONDUCT.md", "chunk_number": 3, "total_chunks": 6}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/wagmi-magic-connector`\n\n**Purpose:** A Wagmi connector for Magic API, enabling seamless integration with Magic's authentication and identity verification services in React applications.\n\n**Content:**\n\n* Code for a custom Wagmi connector\n* Documentation on how to use the connector in your project\n* Potential example code or demo apps demonstrating the connector's usage", "file_summary": "Here is a concise summary:\n\n**CODE_OF_CONDUCT.md**\n\nEstablishes community standards for inclusivity and respect, promoting a welcoming and harassment-free environment. Defines expected behavior, outlines reporting process, and prescribes consequences for misconduct, including a three-stage disciplinary process: Correction, Warning, and Temporary/Permanent Ban."}
{"code": "### 1. Correction\n\n**Community Impact**: Use of inappropriate language or other behavior deemed\nunprofessional or unwelcome in the community.\n\n**Consequence**: A private, written warning from community leaders, providing\nclarity around the nature of the violation and an explanation of why the\nbehavior was inappropriate. A public apology may be requested.\n\n### 2. Warning\n\n**Community Impact**: A violation through a single incident or series\nof actions.\n\n**Consequence**: A warning with consequences for continued behavior. No\ninteraction with the people involved, including unsolicited interaction with\nthose enforcing the Code of Conduct, for a specified period of time. This\nincludes avoiding interactions in community spaces as well as external channels\nlike social media. Violating these terms may lead to a temporary or\npermanent ban.\n\n### 3. Temporary Ban\n\n**Community Impact**: A serious violation of community standards, including\nsustained inappropriate behavior.\n", "explanation": "This block outlines a three-stage disciplinary process for addressing community conduct issues:\n\n1. **Correction**: Private warning for minor infractions.\n2. **Warning**: Warning with consequences for continued behavior, potentially leading to temporary ban.\n3. **Temporary Ban**: Short-term ban for serious sustained misconduct.", "metadata": {"repo": "magiclabs/wagmi-magic-connector", "file": "CODE_OF_CONDUCT.md", "chunk_number": 4, "total_chunks": 6}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/wagmi-magic-connector`\n\n**Purpose:** A Wagmi connector for Magic API, enabling seamless integration with Magic's authentication and identity verification services in React applications.\n\n**Content:**\n\n* Code for a custom Wagmi connector\n* Documentation on how to use the connector in your project\n* Potential example code or demo apps demonstrating the connector's usage", "file_summary": "Here is a concise summary:\n\n**CODE_OF_CONDUCT.md**\n\nEstablishes community standards for inclusivity and respect, promoting a welcoming and harassment-free environment. Defines expected behavior, outlines reporting process, and prescribes consequences for misconduct, including a three-stage disciplinary process: Correction, Warning, and Temporary/Permanent Ban."}
{"code": "**Consequence**: A temporary ban from any sort of interaction or public\ncommunication with the community for a specified period of time. No public or\nprivate interaction with the people involved, including unsolicited interaction\nwith those enforcing the Code of Conduct, is allowed during this period.\nViolating these terms may lead to a permanent ban.\n\n### 4. Permanent Ban\n\n**Community Impact**: Demonstrating a pattern of violation of community\nstandards, including sustained inappropriate behavior,  harassment of an\nindividual, or aggression toward or disparagement of classes of individuals.\n\n**Consequence**: A permanent ban from any sort of public interaction within\nthe community.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage],\nversion 2.0, available at\nhttps://www.contributor-covenant.org/version/2/0/code_of_conduct.html.\n\nCommunity Impact Guidelines were inspired by [Mozilla's code of conduct\nenforcement ladder](https://github.com/mozilla/diversity).\n", "explanation": "Here is a concise summary:\n\n**Temporary Ban**: A temporary ban from interacting with the community for a specified period, violating which may lead to a permanent ban.\n\n**Permanent Ban**: A permanent removal from public interaction in the community due to sustained inappropriate behavior or harassment of individuals.", "metadata": {"repo": "magiclabs/wagmi-magic-connector", "file": "CODE_OF_CONDUCT.md", "chunk_number": 5, "total_chunks": 6}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/wagmi-magic-connector`\n\n**Purpose:** A Wagmi connector for Magic API, enabling seamless integration with Magic's authentication and identity verification services in React applications.\n\n**Content:**\n\n* Code for a custom Wagmi connector\n* Documentation on how to use the connector in your project\n* Potential example code or demo apps demonstrating the connector's usage", "file_summary": "Here is a concise summary:\n\n**CODE_OF_CONDUCT.md**\n\nEstablishes community standards for inclusivity and respect, promoting a welcoming and harassment-free environment. Defines expected behavior, outlines reporting process, and prescribes consequences for misconduct, including a three-stage disciplinary process: Correction, Warning, and Temporary/Permanent Ban."}
{"code": "[homepage]: https://www.contributor-covenant.org\n\nFor answers to common questions about this code of conduct, see the FAQ at\nhttps://www.contributor-covenant.org/faq. Translations are available at\nhttps://www.contributor-covenant.org/translations.\n", "explanation": "This block provides a link to the Contributor Covenant Code of Conduct (https://www.contributor-covenant.org) and directs users to FAQs, translations, and possibly other resources related to it.", "metadata": {"repo": "magiclabs/wagmi-magic-connector", "file": "CODE_OF_CONDUCT.md", "chunk_number": 6, "total_chunks": 6}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/wagmi-magic-connector`\n\n**Purpose:** A Wagmi connector for Magic API, enabling seamless integration with Magic's authentication and identity verification services in React applications.\n\n**Content:**\n\n* Code for a custom Wagmi connector\n* Documentation on how to use the connector in your project\n* Potential example code or demo apps demonstrating the connector's usage", "file_summary": "Here is a concise summary:\n\n**CODE_OF_CONDUCT.md**\n\nEstablishes community standards for inclusivity and respect, promoting a welcoming and harassment-free environment. Defines expected behavior, outlines reporting process, and prescribes consequences for misconduct, including a three-stage disciplinary process: Correction, Warning, and Temporary/Permanent Ban."}
{"code": "# WAGMI Magic Connector\n\n[WAGMI](https://wagmi.sh/) Connector to connect with [Magic](https://magic.link/). Magic is a developer SDK that you can integrate into your application to enable passwordless authentication using magic links, OTPs, OAuth from third-party services, and more for your web3 App.\n\nSpecial thanks to the [Everipedia](https://github.com/EveripediaNetwork) team for creating the connector and working with us for ongoing support and maintenance.\n\n![Frame 184 (4)](https://user-images.githubusercontent.com/52039218/174133833-fc63f237-63bf-4134-a22b-ce77ae0f2a9b.png)\n\n# Table of Contents\n\n- [WAGMI Magic Connector](#wagmi-magic-connector)\n- [Table of Contents](#table-of-contents)\n- [\u2b07\ufe0f Install](#\ufe0f-install)\n- [\ud83d\udd0e Package TL;DR](#-package-tldr)\n- [\u2b50 Usage](#-usage)\n- [\ud83d\udcd6 API](#-api)\n  - [`options`](#options)\n  - [`options.OAuthOptions`](#optionsoauthoptions)\n    - [Providers](#providers)\n    - [Callback URL](#callback-url)\n- [\ud83c\udf40 Supported Logins](#-supported-logins)\n- [\ud83d\udd06 Examples](#-examples)", "explanation": "Here is a concise summary of the purpose and functionality:\n\n**Purpose:** The WAGMI Magic Connector enables passwordless authentication for web3 apps using magic links, OTPs, OAuth from third-party services, etc.\n\n**Functionality:** A developer SDK that integrates with Magic to provide authentication solutions for web3 applications.", "metadata": {"repo": "magiclabs/wagmi-magic-connector", "file": "README.md", "chunk_number": 1, "total_chunks": 14}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/wagmi-magic-connector`\n\n**Purpose:** A Wagmi connector for Magic API, enabling seamless integration with Magic's authentication and identity verification services in React applications.\n\n**Content:**\n\n* Code for a custom Wagmi connector\n* Documentation on how to use the connector in your project\n* Potential example code or demo apps demonstrating the connector's usage", "file_summary": "Here is a holistic summary of the file 'README.md':\n\nThe `wagmi-magic-connector` library enables passwordless authentication for web3 apps using magic links, OTPs, OAuth from third-party services, etc. It provides two versions: V1 (supports WAGMI version 1) and V2 (Beta, supports WAGMI version 2). The library offers features such as social login, SMS authentication, modal customization, and more.\n\nThe library is designed to be highly configurable, allowing developers to customize the user experience and authentication options. It provides two connector classes: `DedicatedWalletConnector` and `UniversalWalletConnector`, which can be used to assign addresses or wallets to users.\n\nTo use the library, developers can configure the Magic SDK instance with their desired settings, such as network configurations, OAuth options, and more. The library also supports social logins, SMS authentication, and modal customization.\n\nOverall, the `wagmi-magic-connector` library is a powerful tool for enabling passwordless authentication in web3 apps, providing developers with flexibility and customization options to create a seamless user experience."}
{"code": "  - [\ud83c\udf1f Enable Login by Socials (OAuth)](#-enable-login-by-socials-oauth)\n  - [\ud83d\udcf2 Enable SMS Authentication](#-enable-sms-authentication)\n  - [\ud83d\udce7 Disable Email Authentication](#-disable-email-authentication)\n  - [\ud83c\udfa8 Modal Customization](#-modal-customization)\n- [\ud83d\udcda Additional Resources](#-additional-resources)\n  - [Usage with RainbowKit](#usage-with-rainbowkit)\n  - [**Example repositories:**](#example-repositories)\n\n# \u2b07\ufe0f Install\nTwo versions of the `wagmi-magic-connector` are available, each designed to support different WAGMI versions. \n\nNote: **It is crucial not to mix up these versions to ensure compatibility and functionality.**\n\n**V1**\nThis version utilizes WAGMI version 1. To install, use the following command:\n\n`npm install @magiclabs/wagmi-connector@1.1.5`\nor\n`yarn install @magiclabs/wagmi-connector@1.1.5`\n\n**V2 (Beta)**\nThis version utilizes and includes the latest WAGMI v2 features.\n\nTo install, use the following command:\n\n`npm install @magiclabs/wagmi-connector`\nor\n`yarn install @magiclabs/wagmi-connector`\n", "explanation": "**Purpose:**\n\nThe `wagmi-magic-connector` library provides functionality for enabling various authentication methods and customizing user experiences.\n\n**Functionality:**\n\nTwo versions of the library are available:\n\n* V1: Supports WAGMI version 1\n* V2 (Beta): Supports WAGMI version 2 and includes its features\n\nAdditionally, it offers features such as:\n\n* Enable Login by Socials (OAuth)\n* Enable SMS Authentication\n* Disable Email Authentication\n* Modal Customization", "metadata": {"repo": "magiclabs/wagmi-magic-connector", "file": "README.md", "chunk_number": 2, "total_chunks": 14}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/wagmi-magic-connector`\n\n**Purpose:** A Wagmi connector for Magic API, enabling seamless integration with Magic's authentication and identity verification services in React applications.\n\n**Content:**\n\n* Code for a custom Wagmi connector\n* Documentation on how to use the connector in your project\n* Potential example code or demo apps demonstrating the connector's usage", "file_summary": "Here is a holistic summary of the file 'README.md':\n\nThe `wagmi-magic-connector` library enables passwordless authentication for web3 apps using magic links, OTPs, OAuth from third-party services, etc. It provides two versions: V1 (supports WAGMI version 1) and V2 (Beta, supports WAGMI version 2). The library offers features such as social login, SMS authentication, modal customization, and more.\n\nThe library is designed to be highly configurable, allowing developers to customize the user experience and authentication options. It provides two connector classes: `DedicatedWalletConnector` and `UniversalWalletConnector`, which can be used to assign addresses or wallets to users.\n\nTo use the library, developers can configure the Magic SDK instance with their desired settings, such as network configurations, OAuth options, and more. The library also supports social logins, SMS authentication, and modal customization.\n\nOverall, the `wagmi-magic-connector` library is a powerful tool for enabling passwordless authentication in web3 apps, providing developers with flexibility and customization options to create a seamless user experience."}
{"code": "We actively encourage the community to participate in testing the versions of `wagmi-magic-connector` and to report [any issues or suggestions](https://github.com/magiclabs/wagmi-magic-connector/issues/new/choose) for improvement. Your feedback is invaluable in helping us enhance the quality and stability of the connector.\n\n# \ud83d\udd0e Package TL;DR\n\nThe package contains two main connector classes: `DedicatedWalletConnector` & `UniversalWalletConnector`\n\n`DedicatedWalletConnector` is a connector integrated to the [Dedicated Wallet](https://magic.link/docs/dedicated/overview)\nproduct. It is useful if you need to assign an address to your user. \n\n`UniversalWalletConnector` is a connector integrated to the [Universal Wallet](https://magic.link/docs/universal/overview)\nproduct. It can be used to assign a read-write wallet to your user.\n", "explanation": "Here is a concise summary:\n\n**Purpose:** Encourage community testing and feedback for `wagmi-magic-connector` improvements.\n\n**Functionality:** Provides two connector classes: `DedicatedWalletConnector` (assigns address) and `UniversalWalletConnector` (assigns read-write wallet).", "metadata": {"repo": "magiclabs/wagmi-magic-connector", "file": "README.md", "chunk_number": 3, "total_chunks": 14}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/wagmi-magic-connector`\n\n**Purpose:** A Wagmi connector for Magic API, enabling seamless integration with Magic's authentication and identity verification services in React applications.\n\n**Content:**\n\n* Code for a custom Wagmi connector\n* Documentation on how to use the connector in your project\n* Potential example code or demo apps demonstrating the connector's usage", "file_summary": "Here is a holistic summary of the file 'README.md':\n\nThe `wagmi-magic-connector` library enables passwordless authentication for web3 apps using magic links, OTPs, OAuth from third-party services, etc. It provides two versions: V1 (supports WAGMI version 1) and V2 (Beta, supports WAGMI version 2). The library offers features such as social login, SMS authentication, modal customization, and more.\n\nThe library is designed to be highly configurable, allowing developers to customize the user experience and authentication options. It provides two connector classes: `DedicatedWalletConnector` and `UniversalWalletConnector`, which can be used to assign addresses or wallets to users.\n\nTo use the library, developers can configure the Magic SDK instance with their desired settings, such as network configurations, OAuth options, and more. The library also supports social logins, SMS authentication, and modal customization.\n\nOverall, the `wagmi-magic-connector` library is a powerful tool for enabling passwordless authentication in web3 apps, providing developers with flexibility and customization options to create a seamless user experience."}
{"code": "DEPRECATED: `MagicAuthConnector` and `MagicConnectConnector` have been replaced by `DedicatedWalletConnector` and `UniversalWalletConnector` in order to line up with Magic's [product names changes](https://magic.link/docs/universal/resources/faqs#why-were-magic-product-names-changed-from-magic-connect-and-magic-auth). However, they are still usable and will function as they did before.\n\n# \u2b50 Usage\n\n```javascript\nimport { DedicatedWalletConnector, UniversalWalletConnector } from '@magiclabs/wagmi-connector';\n\n// Dedicated Wallet integration\nconst connector = new DedicatedWalletConnector({\n  options: {\n    apiKey: YOUR_MAGIC_PUBLISHABLE_API_KEY, //required\n    //...Other options\n  },\n});\n\n// Universal Wallet integration \nconst connector = new UniversalWalletConnector({\n  options: {\n    apiKey: YOUR_MAGIC_PUBLISHABLE_API_KEY, //required\n    //...Other options\n  },\n});\n```\n\n# \ud83d\udcd6 API\n\n## `options`\n\nThe following can be passed to connector options object:\n", "explanation": "Here is a concise summary of the purpose and functionality:\n\n**Summary:** This block describes an updated version of the Magic Wallet Connector, with new classes (`DedicatedWalletConnector` and `UniversalWalletConnector`) replacing deprecated ones (`MagicAuthConnector` and `MagicConnectConnector`). It provides code examples for integrating these connectors into applications.", "metadata": {"repo": "magiclabs/wagmi-magic-connector", "file": "README.md", "chunk_number": 4, "total_chunks": 14}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/wagmi-magic-connector`\n\n**Purpose:** A Wagmi connector for Magic API, enabling seamless integration with Magic's authentication and identity verification services in React applications.\n\n**Content:**\n\n* Code for a custom Wagmi connector\n* Documentation on how to use the connector in your project\n* Potential example code or demo apps demonstrating the connector's usage", "file_summary": "Here is a holistic summary of the file 'README.md':\n\nThe `wagmi-magic-connector` library enables passwordless authentication for web3 apps using magic links, OTPs, OAuth from third-party services, etc. It provides two versions: V1 (supports WAGMI version 1) and V2 (Beta, supports WAGMI version 2). The library offers features such as social login, SMS authentication, modal customization, and more.\n\nThe library is designed to be highly configurable, allowing developers to customize the user experience and authentication options. It provides two connector classes: `DedicatedWalletConnector` and `UniversalWalletConnector`, which can be used to assign addresses or wallets to users.\n\nTo use the library, developers can configure the Magic SDK instance with their desired settings, such as network configurations, OAuth options, and more. The library also supports social logins, SMS authentication, and modal customization.\n\nOverall, the `wagmi-magic-connector` library is a powerful tool for enabling passwordless authentication in web3 apps, providing developers with flexibility and customization options to create a seamless user experience."}
{"code": "| Key                   | Value                      | `DedicatedWalletConnector` support | `UniversalWalletConnector` support | Description                                                                                                                                                                    |\n|-----------------------|----------------------------|------------------------------|---------------------------------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| accentColor           | css color (hex/rgb/etc...) | \u2714\ufe0f\t                          | \u2714\ufe0f                              | \ud83c\udfa8 (Optional) Makes modal to use the custom accentColor instead of default purple                                                                                              |", "explanation": "Here is a concise summary:\n\n**Block Purpose:** Configuration settings for wallet connectors.\n\n**Functionality:** Specifies support for different types of wallet connectors, as well as an optional feature to customize the accent color in modals.", "metadata": {"repo": "magiclabs/wagmi-magic-connector", "file": "README.md", "chunk_number": 5, "total_chunks": 14}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/wagmi-magic-connector`\n\n**Purpose:** A Wagmi connector for Magic API, enabling seamless integration with Magic's authentication and identity verification services in React applications.\n\n**Content:**\n\n* Code for a custom Wagmi connector\n* Documentation on how to use the connector in your project\n* Potential example code or demo apps demonstrating the connector's usage", "file_summary": "Here is a holistic summary of the file 'README.md':\n\nThe `wagmi-magic-connector` library enables passwordless authentication for web3 apps using magic links, OTPs, OAuth from third-party services, etc. It provides two versions: V1 (supports WAGMI version 1) and V2 (Beta, supports WAGMI version 2). The library offers features such as social login, SMS authentication, modal customization, and more.\n\nThe library is designed to be highly configurable, allowing developers to customize the user experience and authentication options. It provides two connector classes: `DedicatedWalletConnector` and `UniversalWalletConnector`, which can be used to assign addresses or wallets to users.\n\nTo use the library, developers can configure the Magic SDK instance with their desired settings, such as network configurations, OAuth options, and more. The library also supports social logins, SMS authentication, and modal customization.\n\nOverall, the `wagmi-magic-connector` library is a powerful tool for enabling passwordless authentication in web3 apps, providing developers with flexibility and customization options to create a seamless user experience."}
{"code": "| isDarkMode            | true / false               | \u2714\ufe0f\t                          | \u2714\ufe0f                              | \ud83c\udfa8 (Optional) Makes modal dark mode if true. Default value is false                                                                                                            |\n| customLogo            | path_to_logo / url         | \u2714\ufe0f\t                          | \u2714\ufe0f                              | \ud83c\udfa8 (Optional) Makes modal to use the custom logo instead of default magic logo                                                                                                 |\n| customHeaderText            | string                     | \u2714\ufe0f\t                          | \u2714\ufe0f                              | \ud83c\udfa8 (Optional) Makes modal to use the custom header text instead of default text at the bottom of logo                                                                          |", "explanation": "This block configures modal window options, specifically:\n\n* Toggles dark mode on/off\n* Allows for a custom logo or URL\n* Enables a custom header text display", "metadata": {"repo": "magiclabs/wagmi-magic-connector", "file": "README.md", "chunk_number": 6, "total_chunks": 14}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/wagmi-magic-connector`\n\n**Purpose:** A Wagmi connector for Magic API, enabling seamless integration with Magic's authentication and identity verification services in React applications.\n\n**Content:**\n\n* Code for a custom Wagmi connector\n* Documentation on how to use the connector in your project\n* Potential example code or demo apps demonstrating the connector's usage", "file_summary": "Here is a holistic summary of the file 'README.md':\n\nThe `wagmi-magic-connector` library enables passwordless authentication for web3 apps using magic links, OTPs, OAuth from third-party services, etc. It provides two versions: V1 (supports WAGMI version 1) and V2 (Beta, supports WAGMI version 2). The library offers features such as social login, SMS authentication, modal customization, and more.\n\nThe library is designed to be highly configurable, allowing developers to customize the user experience and authentication options. It provides two connector classes: `DedicatedWalletConnector` and `UniversalWalletConnector`, which can be used to assign addresses or wallets to users.\n\nTo use the library, developers can configure the Magic SDK instance with their desired settings, such as network configurations, OAuth options, and more. The library also supports social logins, SMS authentication, and modal customization.\n\nOverall, the `wagmi-magic-connector` library is a powerful tool for enabling passwordless authentication in web3 apps, providing developers with flexibility and customization options to create a seamless user experience."}
{"code": "| enableSMSLogin        | true / false               | \u2714\ufe0f\t                          | \u274c                               | \ud83c\udf1f (Optional) Makes modal to enable SMS login if true. Default value is false                                                                                                  |\n| enableEmailLogin      | true / false               | \u2714\ufe0f\t                          | \u274c                               | \ud83c\udf1f (Optional) Makes modal to disable Email login if false. Default value is true                                                                                               |\n| OAuthOptions          | object                     | \u2714\ufe0f\t                          | \u274c                               | \ud83c\udf1f (Optional) Makes modal to enable OAuth login according to configuration passed.                                                                                             |", "explanation": "Here is a concise summary:\n\nThis block controls user login options, with three settings:\n1. Enable SMS login\n2. Disable Email login\n3. Configure OAuth login options (if optional)", "metadata": {"repo": "magiclabs/wagmi-magic-connector", "file": "README.md", "chunk_number": 7, "total_chunks": 14}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/wagmi-magic-connector`\n\n**Purpose:** A Wagmi connector for Magic API, enabling seamless integration with Magic's authentication and identity verification services in React applications.\n\n**Content:**\n\n* Code for a custom Wagmi connector\n* Documentation on how to use the connector in your project\n* Potential example code or demo apps demonstrating the connector's usage", "file_summary": "Here is a holistic summary of the file 'README.md':\n\nThe `wagmi-magic-connector` library enables passwordless authentication for web3 apps using magic links, OTPs, OAuth from third-party services, etc. It provides two versions: V1 (supports WAGMI version 1) and V2 (Beta, supports WAGMI version 2). The library offers features such as social login, SMS authentication, modal customization, and more.\n\nThe library is designed to be highly configurable, allowing developers to customize the user experience and authentication options. It provides two connector classes: `DedicatedWalletConnector` and `UniversalWalletConnector`, which can be used to assign addresses or wallets to users.\n\nTo use the library, developers can configure the Magic SDK instance with their desired settings, such as network configurations, OAuth options, and more. The library also supports social logins, SMS authentication, and modal customization.\n\nOverall, the `wagmi-magic-connector` library is a powerful tool for enabling passwordless authentication in web3 apps, providing developers with flexibility and customization options to create a seamless user experience."}
{"code": "| magicSdkConfiguration | object                     | \u2714\ufe0f\t                          | \u2714\ufe0f                              | \ud83d\udee0\ufe0f (Optional) Pass additional options to Magic constructor (refer [Magic API documentation](https://magic.link/docs/api-reference/client-side-sdks/web#constructor) for more) |\n| networks              | array of EthNetworkConfiguration | \u274c                     | \u2714\ufe0f                              | \ud83d\udee0\ufe0f (Optional) Pass the list of network compatible to switch networks |\n\n## `options.OAuthOptions`\n\nThe following can be passed to options.OAuthOptions object to configure OAuth login:\n\n| Key         | Value           | Description                                                                                               |\n|-------------|------------------|-----------------------------------------------------------------------------------------------------------|", "explanation": "Here is a summary of the purpose and functionality of this block:\n\n**Purpose:** Configure Magic SDK and OAuth login options.\n\n**Functionality:**\n\n* `magicSdkConfiguration`: Options for the Magic constructor (optional).\n* `networks`: List of network configurations (optional).\n* `options.OAuthOptions`: Configuration options for OAuth login.", "metadata": {"repo": "magiclabs/wagmi-magic-connector", "file": "README.md", "chunk_number": 8, "total_chunks": 14}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/wagmi-magic-connector`\n\n**Purpose:** A Wagmi connector for Magic API, enabling seamless integration with Magic's authentication and identity verification services in React applications.\n\n**Content:**\n\n* Code for a custom Wagmi connector\n* Documentation on how to use the connector in your project\n* Potential example code or demo apps demonstrating the connector's usage", "file_summary": "Here is a holistic summary of the file 'README.md':\n\nThe `wagmi-magic-connector` library enables passwordless authentication for web3 apps using magic links, OTPs, OAuth from third-party services, etc. It provides two versions: V1 (supports WAGMI version 1) and V2 (Beta, supports WAGMI version 2). The library offers features such as social login, SMS authentication, modal customization, and more.\n\nThe library is designed to be highly configurable, allowing developers to customize the user experience and authentication options. It provides two connector classes: `DedicatedWalletConnector` and `UniversalWalletConnector`, which can be used to assign addresses or wallets to users.\n\nTo use the library, developers can configure the Magic SDK instance with their desired settings, such as network configurations, OAuth options, and more. The library also supports social logins, SMS authentication, and modal customization.\n\nOverall, the `wagmi-magic-connector` library is a powerful tool for enabling passwordless authentication in web3 apps, providing developers with flexibility and customization options to create a seamless user experience."}
{"code": "| providers   | array of strings | \ud83c\udf1f (Required) List of providers to enable. check out all possible providers in OAuthOptions section above |\n| callbackUrl | string           | \ud83c\udf1f (Optional) Callback URL to redirect to after authentication. Default value is current URL.             |\n\n### Providers\n\nHere are all the possible providers:\n\n- google\n- facebook\n- apple\n- github\n- bitbucket\n- gitlab\n- linkedin\n- twitter\n- discord\n- twitch\n- microsoft\n\n### Callback URL\n\nYou can provide a callback URL to redirect the user to after authentication. the default callback URL is set to the current URL.\n\n# \ud83c\udf40 Supported Logins\n\n| Key                        | `DedicatedWalletConnector` support | `UniversalWalletConnector` support |\n|----------------------------|------------------------------|---------------------------------|\n| Email                      | \u2714\ufe0f\t                          | \u2714\ufe0f\t                             |\n| SMS                        | \u2714\ufe0f\t                          | \u274c                               |", "explanation": "Here is a concise summary:\n\n**Purpose:** This block configures authentication options for a login system.\n\n**Functionality:**\n\n* **Providers:** Specifies a list of providers (e.g. Google, Facebook) to enable.\n* **Callback URL:** Sets a custom redirect URL after authentication; defaults to the current URL if not specified.", "metadata": {"repo": "magiclabs/wagmi-magic-connector", "file": "README.md", "chunk_number": 9, "total_chunks": 14}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/wagmi-magic-connector`\n\n**Purpose:** A Wagmi connector for Magic API, enabling seamless integration with Magic's authentication and identity verification services in React applications.\n\n**Content:**\n\n* Code for a custom Wagmi connector\n* Documentation on how to use the connector in your project\n* Potential example code or demo apps demonstrating the connector's usage", "file_summary": "Here is a holistic summary of the file 'README.md':\n\nThe `wagmi-magic-connector` library enables passwordless authentication for web3 apps using magic links, OTPs, OAuth from third-party services, etc. It provides two versions: V1 (supports WAGMI version 1) and V2 (Beta, supports WAGMI version 2). The library offers features such as social login, SMS authentication, modal customization, and more.\n\nThe library is designed to be highly configurable, allowing developers to customize the user experience and authentication options. It provides two connector classes: `DedicatedWalletConnector` and `UniversalWalletConnector`, which can be used to assign addresses or wallets to users.\n\nTo use the library, developers can configure the Magic SDK instance with their desired settings, such as network configurations, OAuth options, and more. The library also supports social logins, SMS authentication, and modal customization.\n\nOverall, the `wagmi-magic-connector` library is a powerful tool for enabling passwordless authentication in web3 apps, providing developers with flexibility and customization options to create a seamless user experience."}
{"code": "| Social Logins              | \u2714\ufe0f\t                          | \u274c                               |\n| WebAuthn                   | \u274c                            | \u274c                               |\n| Multifactor Authentication | \u274c                            | \u274c                               |\n\n# \ud83d\udd06 Examples\n\n## \ud83c\udf1f Enable Login by Socials (OAuth)\n\nYou configure OAuth with magic by adding the following options to the connector:\n\n```javascript\nconst connector = new DedicatedWalletConnector({\n  options: {\n    apiKey: YOUR_MAGIC_PUBLISHABLE_API_KEY, //required\n    oauthOptions : {\n      providers: ['facebook', 'google', 'twitter'],\n      callbackUrl: 'https://your-callback-url.com', //optional\n    }\n  },\n})\n```\n\nTo retrieve the Magic redirect result when a user is authenticated and logged in, use `JSON.parse(localStorage.getItem(\"magicRedirectResult\"))`. This will give you access to the redirect result object. The object will be removed from localStorage once the user disconnects.\n\n\n## \ud83d\udcf2 Enable SMS Authentication\n", "explanation": "**Summary:**\n\nThis block appears to be related to authentication options for a login system, specifically:\n\n* Social logins (OAuth) are enabled/disabled\n* WebAuthn is disabled\n* Multifactor authentication is disabled\n\nThe accompanying text explains how to enable social logins and SMS authentication using specific code examples.", "metadata": {"repo": "magiclabs/wagmi-magic-connector", "file": "README.md", "chunk_number": 10, "total_chunks": 14}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/wagmi-magic-connector`\n\n**Purpose:** A Wagmi connector for Magic API, enabling seamless integration with Magic's authentication and identity verification services in React applications.\n\n**Content:**\n\n* Code for a custom Wagmi connector\n* Documentation on how to use the connector in your project\n* Potential example code or demo apps demonstrating the connector's usage", "file_summary": "Here is a holistic summary of the file 'README.md':\n\nThe `wagmi-magic-connector` library enables passwordless authentication for web3 apps using magic links, OTPs, OAuth from third-party services, etc. It provides two versions: V1 (supports WAGMI version 1) and V2 (Beta, supports WAGMI version 2). The library offers features such as social login, SMS authentication, modal customization, and more.\n\nThe library is designed to be highly configurable, allowing developers to customize the user experience and authentication options. It provides two connector classes: `DedicatedWalletConnector` and `UniversalWalletConnector`, which can be used to assign addresses or wallets to users.\n\nTo use the library, developers can configure the Magic SDK instance with their desired settings, such as network configurations, OAuth options, and more. The library also supports social logins, SMS authentication, and modal customization.\n\nOverall, the `wagmi-magic-connector` library is a powerful tool for enabling passwordless authentication in web3 apps, providing developers with flexibility and customization options to create a seamless user experience."}
{"code": "You can enable SMS authentication by adding the following options to the connector:\n\n```javascript\nconst connector = new DedicatedWalletConnector({\n  options: {\n    apiKey: YOUR_MAGIC_PUBLISHABLE_API_KEY, //required\n    enableSMSLogin: true, //optional (default: false)\n    //...Other options\n  },\n});\n```\n\nYou have to enable SMS authentication in your [Magic dashboard](https://dashboard.magic.link) first to make it work.\n\n## \ud83d\udce7 Disable Email Authentication\n\nBy default Email is set to true as default. if you wish to remove Email OTP, pass `enableEmailLogin: false` in options object as follows :\n\n```javascript\nconst connector = new DedicatedWalletConnector({\n  options: {\n    apiKey: YOUR_MAGIC_PUBLISHABLE_API_KEY, //required\n    enableEmailLogin: false, //optional (default: true)\n    //...Other options\n  },\n});\n```\n  \n\n## \ud83c\udfa8 Modal Customization\n\nYou can customize the modal's theme, default accent color, logo and header text.\n\n```javascript\nimport { DedicatedWalletConnector } from '@magiclabs/wagmi-connector';\n", "explanation": "Here is a summary of the block:\n\n**Purpose:** Configure Magic connector options for authentication (SMS, Email, Modal customization).\n\n**Functionality:**\n\n* Enable/disable SMS or Email authentication\n* Customize modal theme, accent color, logo, and header text\n\nThis block provides concise code snippets to modify the default settings of the Magic connector.", "metadata": {"repo": "magiclabs/wagmi-magic-connector", "file": "README.md", "chunk_number": 11, "total_chunks": 14}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/wagmi-magic-connector`\n\n**Purpose:** A Wagmi connector for Magic API, enabling seamless integration with Magic's authentication and identity verification services in React applications.\n\n**Content:**\n\n* Code for a custom Wagmi connector\n* Documentation on how to use the connector in your project\n* Potential example code or demo apps demonstrating the connector's usage", "file_summary": "Here is a holistic summary of the file 'README.md':\n\nThe `wagmi-magic-connector` library enables passwordless authentication for web3 apps using magic links, OTPs, OAuth from third-party services, etc. It provides two versions: V1 (supports WAGMI version 1) and V2 (Beta, supports WAGMI version 2). The library offers features such as social login, SMS authentication, modal customization, and more.\n\nThe library is designed to be highly configurable, allowing developers to customize the user experience and authentication options. It provides two connector classes: `DedicatedWalletConnector` and `UniversalWalletConnector`, which can be used to assign addresses or wallets to users.\n\nTo use the library, developers can configure the Magic SDK instance with their desired settings, such as network configurations, OAuth options, and more. The library also supports social logins, SMS authentication, and modal customization.\n\nOverall, the `wagmi-magic-connector` library is a powerful tool for enabling passwordless authentication in web3 apps, providing developers with flexibility and customization options to create a seamless user experience."}
{"code": "const connector = new DedicatedWalletConnector({\n  options: {\n    apiKey: YOUR_MAGIC_PUBLISHABLE_API_KEY,\n    accentColor: '#ff0000',\n    customLogo: 'https://example.com/logo.png',\n    headerText: 'Login to your account',\n    isDarkMode: true,\n  },\n});\n```\n\ncheck out the [API Section](#-api) for more information.\nfor complete styling, you can override styles of the modal with ```! important```.\n\n# \ud83d\udcda Additional Resources\n\n## Usage with RainbowKit\n\nTo use the connector with Rainbow kit, create a new file `RainbowMagicConnector.ts` with following contents:\n\n```javascript\n// RainbowMagicConnector.ts\n\nimport { UniversalWalletConnector } from '@magiclabs/wagmi-connector';\n\nexport const rainbowMagicConnector = ({ chains }: any) => ({\n  id: 'magic',\n  name: 'Magic',\n  iconUrl: 'https://svgshare.com/i/iJK.svg',\n  iconBackground: '#fff',\n  createConnector: () => {\n    const connector = new UniversalWalletConnector({\n      chains: chains,\n      options: {\n        apiKey: 'YOUR_MAGIC_CONNECT_API_KEY',", "explanation": "**Summary:**\n\nThis block of code sets up a Magic Dedicated Wallet Connector instance with customizable options (e.g., API key, logo, color scheme). It also provides links to additional resources for using the connector with RainbowKit.", "metadata": {"repo": "magiclabs/wagmi-magic-connector", "file": "README.md", "chunk_number": 12, "total_chunks": 14}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/wagmi-magic-connector`\n\n**Purpose:** A Wagmi connector for Magic API, enabling seamless integration with Magic's authentication and identity verification services in React applications.\n\n**Content:**\n\n* Code for a custom Wagmi connector\n* Documentation on how to use the connector in your project\n* Potential example code or demo apps demonstrating the connector's usage", "file_summary": "Here is a holistic summary of the file 'README.md':\n\nThe `wagmi-magic-connector` library enables passwordless authentication for web3 apps using magic links, OTPs, OAuth from third-party services, etc. It provides two versions: V1 (supports WAGMI version 1) and V2 (Beta, supports WAGMI version 2). The library offers features such as social login, SMS authentication, modal customization, and more.\n\nThe library is designed to be highly configurable, allowing developers to customize the user experience and authentication options. It provides two connector classes: `DedicatedWalletConnector` and `UniversalWalletConnector`, which can be used to assign addresses or wallets to users.\n\nTo use the library, developers can configure the Magic SDK instance with their desired settings, such as network configurations, OAuth options, and more. The library also supports social logins, SMS authentication, and modal customization.\n\nOverall, the `wagmi-magic-connector` library is a powerful tool for enabling passwordless authentication in web3 apps, providing developers with flexibility and customization options to create a seamless user experience."}
{"code": "        magicSdkConfiguration: {\n          network: {\n            rpcUrl: 'https://polygon-rpc.com', // your ethereum, polygon, or optimism mainnet/testnet rpc URL\n            chainId: 137,\n          },\n        },\n        //...Other options (check out full API below)\n      },\n    });\n    return {\n      connector,\n    };\n  },\n});\n```\n\n> Note: `options.magicSdkConfiguration.network.chainId` is mandatory for the integration with RainbowKit\n> to properly work.\n\nImport the above file to your application root where you wrap your application with `WagmiConfig` component.\npass the ```client``` prop with ```createClient``` instance to the `WagmiConfig` component as shown below:\n\n```javascript\n// App.tsx\n\n// ...\nconst { chains, publicClient, webSocketPublicClient } =\n  configureChains(YOUR_CHAIN_CONFIG);\nconst connectors = connectorsForWallets([\n  {\n    groupName: 'Recommended',\n    wallets: [\n      //... other wallets connectors\n      rainbowMagicConnector({ chains }),\n    ],\n  },\n]);\nconst wagmiConfig = createConfig({", "explanation": "**Summary**\n\nThis code block configures a Magic SDK instance, specifying:\n\n* A network configuration with an RPC URL (`https://polygon-rpc.com`) and chain ID (137)\n* This is required for integration with RainbowKit to work properly\n\nThe configured `client` instance should be passed as a prop to the `WagmiConfig` component in the application root.", "metadata": {"repo": "magiclabs/wagmi-magic-connector", "file": "README.md", "chunk_number": 13, "total_chunks": 14}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/wagmi-magic-connector`\n\n**Purpose:** A Wagmi connector for Magic API, enabling seamless integration with Magic's authentication and identity verification services in React applications.\n\n**Content:**\n\n* Code for a custom Wagmi connector\n* Documentation on how to use the connector in your project\n* Potential example code or demo apps demonstrating the connector's usage", "file_summary": "Here is a holistic summary of the file 'README.md':\n\nThe `wagmi-magic-connector` library enables passwordless authentication for web3 apps using magic links, OTPs, OAuth from third-party services, etc. It provides two versions: V1 (supports WAGMI version 1) and V2 (Beta, supports WAGMI version 2). The library offers features such as social login, SMS authentication, modal customization, and more.\n\nThe library is designed to be highly configurable, allowing developers to customize the user experience and authentication options. It provides two connector classes: `DedicatedWalletConnector` and `UniversalWalletConnector`, which can be used to assign addresses or wallets to users.\n\nTo use the library, developers can configure the Magic SDK instance with their desired settings, such as network configurations, OAuth options, and more. The library also supports social logins, SMS authentication, and modal customization.\n\nOverall, the `wagmi-magic-connector` library is a powerful tool for enabling passwordless authentication in web3 apps, providing developers with flexibility and customization options to create a seamless user experience."}
{"code": "\tautoConnect: false,\n\tconnectors,\n\tpublicClient,\n\twebSocketPublicClient\n});\nfunction MyApp({ Component, pageProps }: AppProps) {\n  return (\n    <WagmiConfig config={wagmiConfig}>\n      <RainbowKitProvider chains={chains}>\n        <Component {...pageProps} />\n      </RainbowKitProvider>\n    </WagmiConfig>\n  );\n}\nexport default MyApp;\n```\n\nThis procedure might change depending on the version of Rainbow kit you are using so please check the documentation of the Rainbow kit if it is not working.\n\n## **Example repositories:** \n- https://github.com/Royal-lobster/vanilla-magic-example\n- https://github.com/Royal-lobster/rainbow-magic-example (With Rainbowkit \ud83c\udf08)\n", "explanation": "**Summary:**\n\nThis code defines a React app's entry point (`MyApp` function) that sets up a provider for Web3 functionality using Wagmi and RainbowKit, allowing components to access blockchain data and other features. \n\n**Key Functions:**\n\n- `WagmiConfig`: Configures the Web3 provider.\n- `RainbowKitProvider`: Provides a UI for users to interact with blockchain chains.\n\n**Purpose:** To enable React components to use Web3 and blockchain features in their application.", "metadata": {"repo": "magiclabs/wagmi-magic-connector", "file": "README.md", "chunk_number": 14, "total_chunks": 14}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/wagmi-magic-connector`\n\n**Purpose:** A Wagmi connector for Magic API, enabling seamless integration with Magic's authentication and identity verification services in React applications.\n\n**Content:**\n\n* Code for a custom Wagmi connector\n* Documentation on how to use the connector in your project\n* Potential example code or demo apps demonstrating the connector's usage", "file_summary": "Here is a holistic summary of the file 'README.md':\n\nThe `wagmi-magic-connector` library enables passwordless authentication for web3 apps using magic links, OTPs, OAuth from third-party services, etc. It provides two versions: V1 (supports WAGMI version 1) and V2 (Beta, supports WAGMI version 2). The library offers features such as social login, SMS authentication, modal customization, and more.\n\nThe library is designed to be highly configurable, allowing developers to customize the user experience and authentication options. It provides two connector classes: `DedicatedWalletConnector` and `UniversalWalletConnector`, which can be used to assign addresses or wallets to users.\n\nTo use the library, developers can configure the Magic SDK instance with their desired settings, such as network configurations, OAuth options, and more. The library also supports social logins, SMS authentication, and modal customization.\n\nOverall, the `wagmi-magic-connector` library is a powerful tool for enabling passwordless authentication in web3 apps, providing developers with flexibility and customization options to create a seamless user experience."}
{"code": "# Security Policy\n\n## Supported Versions\n\n| Version | Supported          |\n| ------- | ------------------ |\n| 0.7.x   | :white_check_mark: |\n| 0.6.x   | :white_check_mark: |\n| < 5.0   | :x:                |\n\n## Reporting a Vulnerability\n\nCreate a Issue at https://github.com/magiclabs/wagmi-magic-connector/issues or Pull Request at https://github.com/magiclabs/wagmi-magic-connector/pulls describing the vulnerablility, we will take action as soon as possible.\n", "explanation": "Here is a concise summary:\n\n**Security Policy Block**\n\n* Lists supported versions of software (0.7.x and 0.6.x).\n* Provides instructions for reporting vulnerabilities through GitHub issues or pull requests.", "metadata": {"repo": "magiclabs/wagmi-magic-connector", "file": "SECURITY.md", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/wagmi-magic-connector`\n\n**Purpose:** A Wagmi connector for Magic API, enabling seamless integration with Magic's authentication and identity verification services in React applications.\n\n**Content:**\n\n* Code for a custom Wagmi connector\n* Documentation on how to use the connector in your project\n* Potential example code or demo apps demonstrating the connector's usage", "file_summary": "Here's a concise summary of the file 'SECURITY.md':\n\n**SECURITY POLICY SUMMARY**\n\nThis document outlines our security policy, which includes supported software versions (0.7.x and 0.6.x) and guidelines for reporting vulnerabilities through GitHub issues or pull requests."}
{"code": "{\n  \"$schema\": \"./node_modules/rome/configuration_schema.json\",\n  \"organizeImports\": {\n    \"enabled\": false\n  },\n  \"files\": {\n    \"ignore\": [\"**/node_modules\", \"dist\", \"yarn.lock\", \".vscode/\"]\n  },\n  \"formatter\": {\n    \"enabled\": true,\n    \"formatWithErrors\": false,\n    \"indentStyle\": \"space\",\n    \"indentSize\": 2,\n    \"lineWidth\": 80\n  },\n  \"linter\": {\n    \"enabled\": true,\n    \"rules\": {\n      \"recommended\": true,\n      \"correctness\": {\n        \"noUnusedVariables\": \"error\"\n      },\n      \"performance\": {\n        \"noDelete\": \"off\"\n      },\n      \"style\": {\n        \"noNonNullAssertion\": \"off\",\n        \"useShorthandArrayType\": \"error\"\n      },\n      \"suspicious\": {\n        \"noArrayIndexKey\": \"off\",\n        \"noExplicitAny\": \"off\"\n      }\n    }\n  },\n  \"javascript\": {\n    \"formatter\": {\n      \"quoteStyle\": \"single\",\n      \"trailingComma\": \"all\",\n      \"semicolons\": \"asNeeded\"\n    }\n  }\n}\n", "explanation": "**Configuration Block Summary**\n\nThis block is a configuration file for a code linter/formatter tool, likely Rome or similar. It sets various options for formatting and linting JavaScript code, including:\n\n* Ignore certain directories\n* Enable/disable specific linter rules\n* Specify formatting styles (e.g., indentation, line width)\n* Configure JavaScript-specific settings\n\nOverall, it customizes the behavior of a code linter/formatter to suit specific development needs.", "metadata": {"repo": "magiclabs/wagmi-magic-connector", "file": "rome.json", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/wagmi-magic-connector`\n\n**Purpose:** A Wagmi connector for Magic API, enabling seamless integration with Magic's authentication and identity verification services in React applications.\n\n**Content:**\n\n* Code for a custom Wagmi connector\n* Documentation on how to use the connector in your project\n* Potential example code or demo apps demonstrating the connector's usage", "file_summary": "Here is a concise summary:\n\n`rome.json`: A configuration file for Rome, a code linter/formatter tool, specifying formatting styles, ignored directories, and enabled/disabled rules for JavaScript code."}
{"code": "export * from './lib/connectors/dedicatedWalletConnector'\nexport * from './lib/connectors/universalWalletConnector'\n", "explanation": "**Summary:**\n\nThis block exports all functionality from two separate modules:\n\n1. `dedicatedWalletConnector`\n2. `universalWalletConnector`\n\nMaking their functions and variables accessible for use elsewhere in the codebase.", "metadata": {"repo": "magiclabs/wagmi-magic-connector", "file": "src/index.ts", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/wagmi-magic-connector`\n\n**Purpose:** A Wagmi connector for Magic API, enabling seamless integration with Magic's authentication and identity verification services in React applications.\n\n**Content:**\n\n* Code for a custom Wagmi connector\n* Documentation on how to use the connector in your project\n* Potential example code or demo apps demonstrating the connector's usage", "file_summary": "Here is a concise and holistic summary of the file 'src/index.ts':\n\n**Summary:** Exports combined functionality from two modules: `dedicatedWalletConnector` and `universalWalletConnector`, making them globally accessible."}
{"code": "import type { OAuthExtension, OAuthProvider } from '@magic-ext/oauth'\nimport type {\n  InstanceWithExtensions,\n  MagicSDKAdditionalConfiguration,\n  SDKBase,\n} from '@magic-sdk/provider'\nimport { createConnector, normalizeChainId } from '@wagmi/core'\nimport {\n  type MagicConnectorParams,\n  type MagicOptions,\n  magicConnector,\n} from './magicConnector'\nimport { UserRejectedRequestError, getAddress } from 'viem'\nimport { createModal } from '../modal/view'\n\ninterface UserDetails {\n  email: string\n  phoneNumber: string\n  oauthProvider: OAuthProvider\n}\n\n/**\n * Dedicated Wallet Connector class used to connect to wallet using Dedicated Wallet.\n * It uses modal UI defined in our package which also takes in various styling options\n * for custom experience.\n *\n * @example\n * ```typescript\n * import { DedicatedWalletConnector } from '@magiclabs/wagmi-connector';\n * const connector = new DedicatedWalletConnector({\n *  options: {\n *     apiKey: YOUR_MAGIC_LINK_API_KEY, //required\n *    //...Other options\n *  },\n * });\n * ```", "explanation": "Here is a concise summary:\n\n**Dedicated Wallet Connector**\n\nA class that connects users to a wallet using a modal UI, providing email, phone number, and OAuth provider details via Magic Labs' API.", "metadata": {"repo": "magiclabs/wagmi-magic-connector", "file": "src/lib/connectors/dedicatedWalletConnector.ts", "chunk_number": 1, "total_chunks": 7}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/wagmi-magic-connector`\n\n**Purpose:** A Wagmi connector for Magic API, enabling seamless integration with Magic's authentication and identity verification services in React applications.\n\n**Content:**\n\n* Code for a custom Wagmi connector\n* Documentation on how to use the connector in your project\n* Potential example code or demo apps demonstrating the connector's usage", "file_summary": "Here's a holistic summary of the file 'src/lib/connectors/dedicatedWalletConnector.ts':\n\n**Dedicated Wallet Connector**\n\nA class that provides authentication functionality using Magic Labs' API, allowing users to log in via email, SMS, or OAuth providers through a modal UI, and manages Ethereum provider connections/disconnections."}
{"code": " * @see https://github.com/magiclabs/wagmi-magic-connector#-usage\n * @see https://magic.link/docs/dedicated/overview\n */\n\ninterface DedicatedWalletOptions extends MagicOptions {\n  enableEmailLogin?: boolean\n  enableSMSLogin?: boolean\n  oauthOptions?: {\n    providers: OAuthProvider[]\n    callbackUrl?: string\n  }\n  magicSdkConfiguration?: MagicSDKAdditionalConfiguration<\n    string,\n    OAuthExtension[]\n  >\n}\n\nexport interface DedicatedWalletConnectorParams extends MagicConnectorParams {\n  options: DedicatedWalletOptions\n}\n\nexport function dedicatedWalletConnector({\n  chains,\n  options,\n}: DedicatedWalletConnectorParams) {\n  let {\n    id,\n    name,\n    type,\n    isModalOpen,\n    getAccount,\n    getMagicSDK,\n    getProvider,\n    onAccountsChanged,\n  } = magicConnector({\n    chains,\n    options: { ...options, connectorType: 'dedicated' },\n  })\n\n  const oauthProviders = options.oauthOptions?.providers ?? []\n  const oauthCallbackUrl = options.oauthOptions?.callbackUrl\n  const enableSMSLogin = options.enableSMSLogin ?? false", "explanation": "Here is a concise summary of the purpose and functionality of this block:\n\n**Purpose:** A dedicated wallet connector for Magic Labs' Wagmi framework.\n\n**Functionality:** This code exports an interface and function to connect a user's dedicated Magic wallet, allowing login via email, SMS, or OAuth providers.", "metadata": {"repo": "magiclabs/wagmi-magic-connector", "file": "src/lib/connectors/dedicatedWalletConnector.ts", "chunk_number": 2, "total_chunks": 7}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/wagmi-magic-connector`\n\n**Purpose:** A Wagmi connector for Magic API, enabling seamless integration with Magic's authentication and identity verification services in React applications.\n\n**Content:**\n\n* Code for a custom Wagmi connector\n* Documentation on how to use the connector in your project\n* Potential example code or demo apps demonstrating the connector's usage", "file_summary": "Here's a holistic summary of the file 'src/lib/connectors/dedicatedWalletConnector.ts':\n\n**Dedicated Wallet Connector**\n\nA class that provides authentication functionality using Magic Labs' API, allowing users to log in via email, SMS, or OAuth providers through a modal UI, and manages Ethereum provider connections/disconnections."}
{"code": "  const enableEmailLogin = options.enableEmailLogin ?? true\n\n  /**\n   * This method is used to get user details from the modal UI\n   * It first creates the modal UI and then waits for the user to\n   * fill in the details and submit the form.\n   */\n  const getUserDetailsByForm = async (\n    enableSMSLogin: boolean,\n    enableEmailLogin: boolean,\n    oauthProviders: OAuthProvider[],\n  ): Promise<UserDetails> => {\n    const output: UserDetails = (await createModal({\n      accentColor: options.accentColor,\n      isDarkMode: options.isDarkMode,\n      customLogo: options.customLogo,\n      customHeaderText: options.customHeaderText,\n      enableSMSLogin: enableSMSLogin,\n      enableEmailLogin: enableEmailLogin,\n      oauthProviders,\n    })) as UserDetails\n\n    isModalOpen = false\n    return output\n  }\n\n  return createConnector((config) => ({\n    id,\n    type,\n    name,\n    getProvider,\n    connect: async function () {\n      if (!options.apiKey) {\n        throw new Error('Magic API Key is not provided.')\n      }\n", "explanation": "Here's a concise summary:\n\n**Purpose:** This block provides functionality for user authentication through email login and modal UI form submission.\n\n**Functionality:**\n\n* Retrieves user details via email login and/or SMS login (configurable)\n* Creates a modal UI for user input\n* Returns user details as a promise", "metadata": {"repo": "magiclabs/wagmi-magic-connector", "file": "src/lib/connectors/dedicatedWalletConnector.ts", "chunk_number": 3, "total_chunks": 7}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/wagmi-magic-connector`\n\n**Purpose:** A Wagmi connector for Magic API, enabling seamless integration with Magic's authentication and identity verification services in React applications.\n\n**Content:**\n\n* Code for a custom Wagmi connector\n* Documentation on how to use the connector in your project\n* Potential example code or demo apps demonstrating the connector's usage", "file_summary": "Here's a holistic summary of the file 'src/lib/connectors/dedicatedWalletConnector.ts':\n\n**Dedicated Wallet Connector**\n\nA class that provides authentication functionality using Magic Labs' API, allowing users to log in via email, SMS, or OAuth providers through a modal UI, and manages Ethereum provider connections/disconnections."}
{"code": "      const provider = await getProvider()\n\n      if (provider?.on) {\n        provider.on('accountsChanged', this.onAccountsChanged.bind(this))\n        provider.on('chainChanged', this.onChainChanged.bind(this))\n        provider.on('disconnect', this.onDisconnect.bind(this))\n      }\n\n      let chainId: number\n      try {\n        chainId = await this.getChainId()\n      } catch {\n        chainId = 0\n      }\n\n      if (await this.isAuthorized()) {\n        return {\n          chainId,\n          accounts: [await getAccount()],\n        }\n      }\n\n      if (!isModalOpen) {\n        const modalOutput = await getUserDetailsByForm(\n          enableSMSLogin,\n          enableEmailLogin,\n          oauthProviders,\n        )\n\n        const magic = getMagicSDK() as InstanceWithExtensions<\n          SDKBase,\n          OAuthExtension[]\n        >\n\n        // LOGIN WITH MAGIC USING OAUTH PROVIDER\n        if (modalOutput.oauthProvider)\n          await magic.oauth.loginWithRedirect({\n            provider: modalOutput.oauthProvider,", "explanation": "Here is a concise summary:\n\n**Purpose:** Initialize Ethereum provider and handle login/auth interactions.\n\n**Functionality:**\n\n* Set up event listeners for provider changes (accounts, chain, disconnect).\n* Get current chain ID.\n* Check user authorization; if authorized, return account info.\n* If not authorized, open modal to collect user details and attempt login using OAuth/Magic.", "metadata": {"repo": "magiclabs/wagmi-magic-connector", "file": "src/lib/connectors/dedicatedWalletConnector.ts", "chunk_number": 4, "total_chunks": 7}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/wagmi-magic-connector`\n\n**Purpose:** A Wagmi connector for Magic API, enabling seamless integration with Magic's authentication and identity verification services in React applications.\n\n**Content:**\n\n* Code for a custom Wagmi connector\n* Documentation on how to use the connector in your project\n* Potential example code or demo apps demonstrating the connector's usage", "file_summary": "Here's a holistic summary of the file 'src/lib/connectors/dedicatedWalletConnector.ts':\n\n**Dedicated Wallet Connector**\n\nA class that provides authentication functionality using Magic Labs' API, allowing users to log in via email, SMS, or OAuth providers through a modal UI, and manages Ethereum provider connections/disconnections."}
{"code": "            redirectURI: oauthCallbackUrl ?? window.location.href,\n          })\n\n        // LOGIN WITH MAGIC USING EMAIL\n        if (modalOutput.email)\n          await magic.auth.loginWithEmailOTP({\n            email: modalOutput.email,\n          })\n\n        // LOGIN WITH MAGIC USING PHONE NUMBER\n        if (modalOutput.phoneNumber)\n          await magic.auth.loginWithSMS({\n            phoneNumber: modalOutput.phoneNumber,\n          })\n\n        if (await magic.user.isLoggedIn())\n          return {\n            accounts: [await getAccount()],\n            chainId,\n          }\n      }\n      throw new UserRejectedRequestError(Error('User Rejected Request'))\n    },\n\n    disconnect: async () => {\n      try {\n        const magic = getMagicSDK()\n        await magic?.wallet.disconnect()\n        localStorage.removeItem('magicRedirectResult')\n        config.emitter.emit('disconnect')\n      } catch (error) {\n        console.error('Error disconnecting from Magic SDK:', error)\n      }\n    },\n\n    getAccounts: async () => {", "explanation": "**Purpose:** A block of code that handles login and disconnection logic using the Magic SDK.\n\n**Functionality:**\n\n1. Redirects user to a callback URL.\n2. Attempts to log in with email or phone number using Magic SDK.\n3. If logged in, returns account information.\n4. Provides a `disconnect` function to disconnect from Magic SDK.\n5. Includes error handling for disconnection and login attempts.", "metadata": {"repo": "magiclabs/wagmi-magic-connector", "file": "src/lib/connectors/dedicatedWalletConnector.ts", "chunk_number": 5, "total_chunks": 7}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/wagmi-magic-connector`\n\n**Purpose:** A Wagmi connector for Magic API, enabling seamless integration with Magic's authentication and identity verification services in React applications.\n\n**Content:**\n\n* Code for a custom Wagmi connector\n* Documentation on how to use the connector in your project\n* Potential example code or demo apps demonstrating the connector's usage", "file_summary": "Here's a holistic summary of the file 'src/lib/connectors/dedicatedWalletConnector.ts':\n\n**Dedicated Wallet Connector**\n\nA class that provides authentication functionality using Magic Labs' API, allowing users to log in via email, SMS, or OAuth providers through a modal UI, and manages Ethereum provider connections/disconnections."}
{"code": "      const provider = await getProvider()\n      const accounts = (await provider?.request({\n        method: 'eth_accounts',\n      })) as string[]\n      return accounts.map((x) => getAddress(x))\n    },\n\n    getChainId: async (): Promise<number> => {\n      const provider = await getProvider()\n      if (provider) {\n        const chainId = await provider.request({\n          method: 'eth_chainId',\n          params: [],\n        })\n        return normalizeChainId(chainId)\n      }\n      const networkOptions = options.magicSdkConfiguration?.network\n      if (typeof networkOptions === 'object') {\n        const chainID = networkOptions.chainId\n        if (chainID) return normalizeChainId(chainID)\n      }\n      throw new Error('Chain ID is not defined')\n    },\n\n    isAuthorized: async () => {\n      try {\n        const magic = getMagicSDK() as InstanceWithExtensions<\n          SDKBase,\n          OAuthExtension[]\n        >\n\n        if (!magic) {\n          return false\n        }\n", "explanation": "Here is a summary of the purpose and functionality of this block:\n\n**Block Summary:**\n\nThis code block retrieves and returns the following Ethereum-related information:\n\n* `getAccounts`: An array of Ethereum account addresses.\n* `getChainId`: The numeric ID of the blockchain network (e.g., 1 for Ethereum Mainnet).\n* `isAuthorized`: A boolean indicating whether an authorized user is present on the current page.", "metadata": {"repo": "magiclabs/wagmi-magic-connector", "file": "src/lib/connectors/dedicatedWalletConnector.ts", "chunk_number": 6, "total_chunks": 7}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/wagmi-magic-connector`\n\n**Purpose:** A Wagmi connector for Magic API, enabling seamless integration with Magic's authentication and identity verification services in React applications.\n\n**Content:**\n\n* Code for a custom Wagmi connector\n* Documentation on how to use the connector in your project\n* Potential example code or demo apps demonstrating the connector's usage", "file_summary": "Here's a holistic summary of the file 'src/lib/connectors/dedicatedWalletConnector.ts':\n\n**Dedicated Wallet Connector**\n\nA class that provides authentication functionality using Magic Labs' API, allowing users to log in via email, SMS, or OAuth providers through a modal UI, and manages Ethereum provider connections/disconnections."}
{"code": "        const isLoggedIn = await magic.user.isLoggedIn()\n        const result = await magic.oauth.getRedirectResult()\n        if (result) {\n          localStorage.setItem('magicRedirectResult', JSON.stringify(result))\n        }\n\n        if (isLoggedIn) return true\n\n        return result !== null\n      } catch {}\n      return false\n    },\n\n    onAccountsChanged,\n\n    onChainChanged(chain) {\n      const chainId = normalizeChainId(chain)\n      config.emitter.emit('change', { chainId })\n    },\n\n    async onConnect(connectInfo) {\n      const chainId = normalizeChainId(connectInfo.chainId)\n      const accounts = await this.getAccounts()\n      config.emitter.emit('connect', { accounts, chainId })\n    },\n\n    onDisconnect: () => {\n      config.emitter.emit('disconnect')\n    },\n  }))\n}\n", "explanation": "This block appears to be a function or method that handles user authentication and blockchain connection/disconnection events.\n\n**Purpose:** Handle login checks, redirect results, and chain connections/disconnections.\n\n**Functionality:**\n\n* Checks if user is logged in using Magic OAuth\n* Stores redirect result in local storage if available\n* Emits events for chain changes, connections, and disconnections.", "metadata": {"repo": "magiclabs/wagmi-magic-connector", "file": "src/lib/connectors/dedicatedWalletConnector.ts", "chunk_number": 7, "total_chunks": 7}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/wagmi-magic-connector`\n\n**Purpose:** A Wagmi connector for Magic API, enabling seamless integration with Magic's authentication and identity verification services in React applications.\n\n**Content:**\n\n* Code for a custom Wagmi connector\n* Documentation on how to use the connector in your project\n* Potential example code or demo apps demonstrating the connector's usage", "file_summary": "Here's a holistic summary of the file 'src/lib/connectors/dedicatedWalletConnector.ts':\n\n**Dedicated Wallet Connector**\n\nA class that provides authentication functionality using Magic Labs' API, allowing users to log in via email, SMS, or OAuth providers through a modal UI, and manages Ethereum provider connections/disconnections."}
{"code": "import { OAuthExtension } from '@magic-ext/oauth'\nimport type {\n  InstanceWithExtensions,\n  MagicSDKAdditionalConfiguration,\n  MagicSDKExtensionsOption,\n  SDKBase,\n} from '@magic-sdk/provider'\nimport { type EthNetworkConfiguration, Magic } from 'magic-sdk'\nimport { type Chain, createWalletClient, custom, getAddress } from 'viem'\n\nconst IS_SERVER = typeof window === 'undefined'\n\nexport interface MagicOptions {\n  apiKey: string\n  accentColor?: string\n  isDarkMode?: boolean\n  customLogo?: string\n  customHeaderText?: string\n  connectorType?: 'dedicated' | 'universal'\n  magicSdkConfiguration?: MagicSDKAdditionalConfiguration\n  networks?: EthNetworkConfiguration[]\n}\n\n/**\n * Magic Connector class is a base class for Dedicated Wallet and Universal Wallet Connectors\n * It implements the common functionality of both the connectors\n *\n * Dedicated Wallet Connector and Universal Wallet Connector are the two connectors provided by this library\n * And both of them extend this class.\n */\n\nexport interface MagicConnectorParams {", "explanation": "Here is a concise summary:\n\n**Purpose:** The Magic Connector block provides common functionality for Dedicated Wallet and Universal Wallet Connectors.\n\n**Functionality:** It handles configuration options, SDK management, and wallet client creation, enabling secure authentication and authorization using Magic's OAuth extension.", "metadata": {"repo": "magiclabs/wagmi-magic-connector", "file": "src/lib/connectors/magicConnector.ts", "chunk_number": 1, "total_chunks": 4}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/wagmi-magic-connector`\n\n**Purpose:** A Wagmi connector for Magic API, enabling seamless integration with Magic's authentication and identity verification services in React applications.\n\n**Content:**\n\n* Code for a custom Wagmi connector\n* Documentation on how to use the connector in your project\n* Potential example code or demo apps demonstrating the connector's usage", "file_summary": "Here is a concise and holistic summary of the file 'src/lib/connectors/magicConnector.ts':\n\n**Magic Connector**\n\nProvides common functionality for Dedicated Wallet and Universal Wallet Connectors, enabling secure authentication and authorization using Magic's OAuth extension.\n\n**Key Features:**\n\n* Validates Magic API Key presence\n* Returns RPC provider instance based on connector type (dedicated or universal) and configuration options\n* Exposes asynchronous method to get RPC provider instance\n\n**Ethereum-related Functions:**\n\n* Retrieves user's Ethereum account (`getAccount`)\n* Creates wallet client instance using account and chain data (`getWalletClient`)\n* Emits events when user's accounts change (`onAccountsChanged`)"}
{"code": "  chains: readonly Chain[]\n  options: MagicOptions\n}\n\nexport function magicConnector({ chains = [], options }: MagicConnectorParams) {\n  if (!options.apiKey) {\n    throw new Error(\n      'Magic API Key is required. Get one at https://dashboard.magic.link/',\n    )\n  }\n\n  const getMagicSDK = ():\n    | InstanceWithExtensions<SDKBase, OAuthExtension[]>\n    | InstanceWithExtensions<SDKBase, MagicSDKExtensionsOption<string>>\n    | null => {\n    if (options.connectorType === 'dedicated') {\n      return new Magic(options.apiKey, {\n        ...options.magicSdkConfiguration,\n        extensions: [new OAuthExtension()],\n      })\n    }\n    if (options.connectorType === 'universal') {\n      return new Magic(options.apiKey, {\n        ...options.magicSdkConfiguration,\n        network:\n          options.magicSdkConfiguration?.network ?? options?.networks?.[0],\n      })\n    }\n    return null\n  }\n\n  const getProvider = async () => {\n    const magic = getMagicSDK()\n    if (!magic) return null\n    return magic.rpcProvider\n  }\n", "explanation": "Here is a summary of the purpose and functionality of this block:\n\n**Purpose:** A function (`magicConnector`) that returns an RPC provider instance from Magic API.\n\n**Functionality:**\n\n* Validates presence of Magic API Key.\n* Returns an RPC provider instance based on `connectorType` (dedicated or universal) and configuration options.\n* Exposes a method to get the RPC provider instance asynchronously.", "metadata": {"repo": "magiclabs/wagmi-magic-connector", "file": "src/lib/connectors/magicConnector.ts", "chunk_number": 2, "total_chunks": 4}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/wagmi-magic-connector`\n\n**Purpose:** A Wagmi connector for Magic API, enabling seamless integration with Magic's authentication and identity verification services in React applications.\n\n**Content:**\n\n* Code for a custom Wagmi connector\n* Documentation on how to use the connector in your project\n* Potential example code or demo apps demonstrating the connector's usage", "file_summary": "Here is a concise and holistic summary of the file 'src/lib/connectors/magicConnector.ts':\n\n**Magic Connector**\n\nProvides common functionality for Dedicated Wallet and Universal Wallet Connectors, enabling secure authentication and authorization using Magic's OAuth extension.\n\n**Key Features:**\n\n* Validates Magic API Key presence\n* Returns RPC provider instance based on connector type (dedicated or universal) and configuration options\n* Exposes asynchronous method to get RPC provider instance\n\n**Ethereum-related Functions:**\n\n* Retrieves user's Ethereum account (`getAccount`)\n* Creates wallet client instance using account and chain data (`getWalletClient`)\n* Emits events when user's accounts change (`onAccountsChanged`)"}
{"code": "  const getAccount = async () => {\n    const provider = await getProvider()\n    const accounts = await provider?.request({\n      method: 'eth_accounts',\n    })\n    const account = getAddress(accounts[0] as string)\n    return account\n  }\n\n  const getWalletClient = async ({ chainId }: { chainId?: number } = {}) => {\n    const provider = await getProvider()\n    const account = await getAccount()\n    const chain = chains.find((x) => x.id === chainId) ?? chains[0]\n    if (!provider) throw new Error('provider is required.')\n    return createWalletClient({\n      account,\n      chain,\n      transport: custom(provider),\n    })\n  }\n\n  const onAccountsChanged = async (accounts: string[]) => {\n    const provider = await getProvider()\n    if (accounts.length === 0 || !accounts[0]) provider?.emit('disconnect')\n    else provider?.emit('change', { account: getAddress(accounts[0]) })\n  }\n\n  return {\n    id: 'magic',\n    name: 'Magic',\n    type: 'Magic',\n    isModalOpen: false,\n    isReady: IS_SERVER,\n    getProvider,\n    getMagicSDK,", "explanation": "Here is a concise summary:\n\nThis block contains three functions that interact with an Ethereum provider and wallet client. They are:\n\n1. **getAccount**: Retrieves the user's Ethereum account.\n2. **getWalletClient**: Creates a wallet client instance using the account and chain data.\n3. **onAccountsChanged**: Emits events when the user's accounts change (e.g., disconnects or switches).\n\nThese functions appear to be part of an Ethereum-related library or plugin, likely used in a web application.", "metadata": {"repo": "magiclabs/wagmi-magic-connector", "file": "src/lib/connectors/magicConnector.ts", "chunk_number": 3, "total_chunks": 4}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/wagmi-magic-connector`\n\n**Purpose:** A Wagmi connector for Magic API, enabling seamless integration with Magic's authentication and identity verification services in React applications.\n\n**Content:**\n\n* Code for a custom Wagmi connector\n* Documentation on how to use the connector in your project\n* Potential example code or demo apps demonstrating the connector's usage", "file_summary": "Here is a concise and holistic summary of the file 'src/lib/connectors/magicConnector.ts':\n\n**Magic Connector**\n\nProvides common functionality for Dedicated Wallet and Universal Wallet Connectors, enabling secure authentication and authorization using Magic's OAuth extension.\n\n**Key Features:**\n\n* Validates Magic API Key presence\n* Returns RPC provider instance based on connector type (dedicated or universal) and configuration options\n* Exposes asynchronous method to get RPC provider instance\n\n**Ethereum-related Functions:**\n\n* Retrieves user's Ethereum account (`getAccount`)\n* Creates wallet client instance using account and chain data (`getWalletClient`)\n* Emits events when user's accounts change (`onAccountsChanged`)"}
{"code": "    getAccount,\n    getWalletClient,\n    onAccountsChanged,\n  }\n}\n", "explanation": "This block appears to define an object with three methods:\n\n* `getAccount` (purpose unknown)\n* `getWalletClient` (likely retrieves a wallet client instance)\n* `onAccountsChanged` (a callback function for handling account changes)", "metadata": {"repo": "magiclabs/wagmi-magic-connector", "file": "src/lib/connectors/magicConnector.ts", "chunk_number": 4, "total_chunks": 4}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/wagmi-magic-connector`\n\n**Purpose:** A Wagmi connector for Magic API, enabling seamless integration with Magic's authentication and identity verification services in React applications.\n\n**Content:**\n\n* Code for a custom Wagmi connector\n* Documentation on how to use the connector in your project\n* Potential example code or demo apps demonstrating the connector's usage", "file_summary": "Here is a concise and holistic summary of the file 'src/lib/connectors/magicConnector.ts':\n\n**Magic Connector**\n\nProvides common functionality for Dedicated Wallet and Universal Wallet Connectors, enabling secure authentication and authorization using Magic's OAuth extension.\n\n**Key Features:**\n\n* Validates Magic API Key presence\n* Returns RPC provider instance based on connector type (dedicated or universal) and configuration options\n* Exposes asynchronous method to get RPC provider instance\n\n**Ethereum-related Functions:**\n\n* Retrieves user's Ethereum account (`getAccount`)\n* Creates wallet client instance using account and chain data (`getWalletClient`)\n* Emits events when user's accounts change (`onAccountsChanged`)"}
{"code": "import type { MagicSDKAdditionalConfiguration } from '@magic-sdk/provider'\nimport type { RPCProviderModule } from '@magic-sdk/provider/dist/types/modules/rpc-provider'\nimport type { EthNetworkConfiguration } from '@magic-sdk/types'\nimport { createConnector } from '@wagmi/core'\nimport { normalizeChainId } from '../utils'\nimport { magicConnector } from './magicConnector'\nimport { type Chain, getAddress } from 'viem'\n\nexport interface UniversalWalletOptions {\n  apiKey: string\n  magicSdkConfiguration?: MagicSDKAdditionalConfiguration\n  networks?: EthNetworkConfiguration[]\n}\n\n/**\n * Universal Wallet Connector class used to connect to wallet using Universal Wallet modal\n * This uses the modal UI from Magic itself and styles for it can be configured using\n * magic dashboard.\n *\n * @example\n * ```typescript\n * import { UniversalWalletConnector } from '@magiclabs/wagmi-connector';\n * const connector = new UniversalWalletConnector({\n *  options: {\n *     apiKey: YOUR_MAGIC_LINK_API_KEY, //required", "explanation": "**Summary**\n\nThis block imports necessary types and modules for creating a Magic SDK-based wallet connector, specifically the `UniversalWalletConnector` class. It enables connecting to wallets using a modal UI from Magic, with customizable styling through the Magic dashboard.", "metadata": {"repo": "magiclabs/wagmi-magic-connector", "file": "src/lib/connectors/universalWalletConnector.ts", "chunk_number": 1, "total_chunks": 5}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/wagmi-magic-connector`\n\n**Purpose:** A Wagmi connector for Magic API, enabling seamless integration with Magic's authentication and identity verification services in React applications.\n\n**Content:**\n\n* Code for a custom Wagmi connector\n* Documentation on how to use the connector in your project\n* Potential example code or demo apps demonstrating the connector's usage", "file_summary": "Here is a concise summary of the file 'src/lib/connectors/universalWalletConnector.ts':\n\nThis file creates a Magic SDK-based wallet connector that enables users to connect to blockchain networks using a modal UI, with customizable styling options. It handles user authentication, event listeners for account and chain changes, and error handling for missing chain IDs."}
{"code": " *    //...Other options\n *  },\n * });\n * ```\n * @see https://github.com/magiclabs/wagmi-magic-connector#-usage\n * @see https://magic.link/docs/universal/overview\n */\n\ninterface UniversalWalletConnectorParams {\n  chains: readonly Chain[]\n  options: UniversalWalletOptions\n}\n\nexport function universalWalletConnector({\n  chains,\n  options,\n}: UniversalWalletConnectorParams) {\n  const {\n    id,\n    name,\n    type,\n    getAccount,\n    getMagicSDK,\n    getProvider,\n    onAccountsChanged,\n  } = magicConnector({\n    chains,\n    options: { ...options, connectorType: 'universal' },\n  })\n\n  const magic = getMagicSDK()\n\n  const registerProviderEventListeners = (\n    provider: RPCProviderModule,\n    onChainChanged: (chain: string) => void,\n    onDisconnect: () => void,\n  ) => {\n    if (provider.on) {\n      provider.on('accountsChanged', onAccountsChanged)\n      provider.on('chainChanged', (chain) => onChainChanged(chain))\n      provider.on('disconnect', onDisconnect)\n    }\n  }\n\n  return createConnector((config) => ({\n    id,\n    name,\n    type,", "explanation": "**Summary:**\n\nThis is a JavaScript function that creates a universal wallet connector using Magic Labs' Wagmi-Magic Connector library. It takes an object with `chains` and `options` properties as input, and returns a connector instance with event listeners for accounts and chain changes.", "metadata": {"repo": "magiclabs/wagmi-magic-connector", "file": "src/lib/connectors/universalWalletConnector.ts", "chunk_number": 2, "total_chunks": 5}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/wagmi-magic-connector`\n\n**Purpose:** A Wagmi connector for Magic API, enabling seamless integration with Magic's authentication and identity verification services in React applications.\n\n**Content:**\n\n* Code for a custom Wagmi connector\n* Documentation on how to use the connector in your project\n* Potential example code or demo apps demonstrating the connector's usage", "file_summary": "Here is a concise summary of the file 'src/lib/connectors/universalWalletConnector.ts':\n\nThis file creates a Magic SDK-based wallet connector that enables users to connect to blockchain networks using a modal UI, with customizable styling options. It handles user authentication, event listeners for account and chain changes, and error handling for missing chain IDs."}
{"code": "    getProvider,\n    connect: async function () {\n      await magic?.wallet.connectWithUI()\n      const provider = await getProvider()\n      const chainId = await this.getChainId()\n      provider &&\n        registerProviderEventListeners(\n          provider,\n          (chain) => {\n            const chainId = normalizeChainId(chain)\n            config.emitter.emit('change', { chainId })\n          },\n          this.onDisconnect,\n        )\n      const account = await getAccount()\n      return {\n        accounts: [account],\n        chainId,\n      }\n    },\n    onAccountsChanged,\n    getAccounts: async () => {\n      const provider = await getProvider()\n      const accounts = (await provider?.request({\n        method: 'eth_accounts',\n      })) as string[]\n      return accounts.map((x) => getAddress(x))\n    },\n\n    onChainChanged: (chain) => {\n      const chainId = normalizeChainId(chain)\n      config.emitter.emit('change', { chainId })\n    },\n    async onConnect(connectInfo) {", "explanation": "Here is a concise summary of the purpose and functionality of this block:\n\n**Purpose:** Establish a blockchain connection and retrieve user accounts.\n\n**Functionality:**\n\n* Connects to a blockchain using Magic Wallet UI\n* Retrieves provider, chain ID, and user account(s)\n* Registers event listeners for changes in network and account connections\n* Returns connected account information (accounts and chain ID)", "metadata": {"repo": "magiclabs/wagmi-magic-connector", "file": "src/lib/connectors/universalWalletConnector.ts", "chunk_number": 3, "total_chunks": 5}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/wagmi-magic-connector`\n\n**Purpose:** A Wagmi connector for Magic API, enabling seamless integration with Magic's authentication and identity verification services in React applications.\n\n**Content:**\n\n* Code for a custom Wagmi connector\n* Documentation on how to use the connector in your project\n* Potential example code or demo apps demonstrating the connector's usage", "file_summary": "Here is a concise summary of the file 'src/lib/connectors/universalWalletConnector.ts':\n\nThis file creates a Magic SDK-based wallet connector that enables users to connect to blockchain networks using a modal UI, with customizable styling options. It handles user authentication, event listeners for account and chain changes, and error handling for missing chain IDs."}
{"code": "      const chainId = normalizeChainId(connectInfo.chainId)\n      const accounts = await this.getAccounts()\n      config.emitter.emit('connect', { accounts, chainId })\n    },\n    disconnect: async () => {\n      try {\n        await magic?.wallet.disconnect()\n        config.emitter.emit('disconnect')\n      } catch (error) {\n        console.error('Error disconnecting from Magic SDK:', error)\n      }\n    },\n    isAuthorized: async () => {\n      try {\n        const walletInfo = await magic?.wallet.getInfo()\n        return !!walletInfo\n      } catch {\n        return false\n      }\n    },\n    getChainId: async (): Promise<number> => {\n      const provider = await getProvider()\n      if (provider) {\n        const chainId = await provider.request({\n          method: 'eth_chainId',\n          params: [],\n        })\n        return normalizeChainId(chainId)\n      }\n      const networkOptions = options.magicSdkConfiguration?.network\n      if (typeof networkOptions === 'object') {\n        const chainID = networkOptions.chainId", "explanation": "Here is a concise summary:\n\nThis block manages user authentication with the Magic SDK, allowing users to connect and disconnect from a blockchain network. It also checks authorization status and retrieves the blockchain chain ID.", "metadata": {"repo": "magiclabs/wagmi-magic-connector", "file": "src/lib/connectors/universalWalletConnector.ts", "chunk_number": 4, "total_chunks": 5}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/wagmi-magic-connector`\n\n**Purpose:** A Wagmi connector for Magic API, enabling seamless integration with Magic's authentication and identity verification services in React applications.\n\n**Content:**\n\n* Code for a custom Wagmi connector\n* Documentation on how to use the connector in your project\n* Potential example code or demo apps demonstrating the connector's usage", "file_summary": "Here is a concise summary of the file 'src/lib/connectors/universalWalletConnector.ts':\n\nThis file creates a Magic SDK-based wallet connector that enables users to connect to blockchain networks using a modal UI, with customizable styling options. It handles user authentication, event listeners for account and chain changes, and error handling for missing chain IDs."}
{"code": "        if (chainID) return normalizeChainId(chainID)\n      }\n      throw new Error('Chain ID is not defined')\n    },\n\n    onDisconnect: () => {\n      config.emitter.emit('disconnect')\n    },\n  }))\n}\n", "explanation": "**Purpose:** Error handling for missing chain ID.\n\n**Functionality:** Returns normalized chain ID if present, otherwise throws an error. Also emits a \"disconnect\" event when the onDisconnect callback is triggered.", "metadata": {"repo": "magiclabs/wagmi-magic-connector", "file": "src/lib/connectors/universalWalletConnector.ts", "chunk_number": 5, "total_chunks": 5}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/wagmi-magic-connector`\n\n**Purpose:** A Wagmi connector for Magic API, enabling seamless integration with Magic's authentication and identity verification services in React applications.\n\n**Content:**\n\n* Code for a custom Wagmi connector\n* Documentation on how to use the connector in your project\n* Potential example code or demo apps demonstrating the connector's usage", "file_summary": "Here is a concise summary of the file 'src/lib/connectors/universalWalletConnector.ts':\n\nThis file creates a Magic SDK-based wallet connector that enables users to connect to blockchain networks using a modal UI, with customizable styling options. It handles user authentication, event listeners for account and chain changes, and error handling for missing chain IDs."}
{"code": "export const MagicLogo = `\n<svg width=\"65\" height=\"65\" viewBox=\"0 0 65 65\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<rect width=\"65\" height=\"65\" rx=\"14\" fill=\"#6851FF\"/>\n<path d=\"M32.9375 10C34.9919 12.3852 37.258 14.6002 39.7083 16.6194C38.0756 21.6391 37.1965 26.9723 37.1965 32.5C37.1965 38.0277 38.0756 43.3609 39.7083 48.3806C37.258 50.3997 34.9919 52.6149 32.9375 55C30.883 52.6149 28.617 50.3997 26.1666 48.3806C27.7994 43.3609 28.6784 38.0277 28.6784 32.5C28.6784 26.9723 27.7994 21.6391 26.1666 16.6194C28.617 14.6002 30.883 12.3852 32.9375 10Z\" fill=\"white\"/>\n<path d=\"M21.4831 44.9102C18.8894 43.1868 16.1367 41.6639 13.25 40.365C14.0507 37.8772 14.4815 35.2363 14.4815 32.5C14.4815 29.7638 14.0507 27.123 13.25 24.635C16.1366 23.3361 18.8894 21.8132 21.4831 20.09C22.4749 24.074 22.9997 28.2288 22.9997 32.5C22.9997 36.7712 22.4749 40.9261 21.4831 44.9102Z\" fill=\"white\"/>", "explanation": "**Purpose:** A reusable SVG component named MagicLogo.\n\n**Functionality:** Displays a logo icon consisting of two interconnected shapes, with customizable appearance through attributes like color.", "metadata": {"repo": "magiclabs/wagmi-magic-connector", "file": "src/lib/modal/logos.ts", "chunk_number": 1, "total_chunks": 17}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/wagmi-magic-connector`\n\n**Purpose:** A Wagmi connector for Magic API, enabling seamless integration with Magic's authentication and identity verification services in React applications.\n\n**Content:**\n\n* Code for a custom Wagmi connector\n* Documentation on how to use the connector in your project\n* Potential example code or demo apps demonstrating the connector's usage", "file_summary": "Here is a concise summary:\n\n**src/lib/modal/logos.ts**: A collection of SVG logo code snippets, reusable as MagicLogo components, displaying various company logos (e.g. Google, Discord, Bitbucket, LinkedIn) for use in GUI applications or web development projects."}
{"code": "<path d=\"M42.8753 32.5C42.8753 36.7712 43.4001 40.9261 44.3919 44.9102C46.9856 43.1868 49.7384 41.6639 52.625 40.365C51.8242 37.8772 51.3935 35.2363 51.3935 32.5C51.3935 29.7638 51.8242 27.123 52.625 24.635C49.7384 23.3361 46.9856 21.8132 44.3919 20.09C43.4001 24.074 42.8753 28.2288 42.8753 32.5Z\" fill=\"white\"/>\n</svg>\n`\n\nexport const googleLogo = `\n<svg width=\"45\" height=\"45\" viewBox=\"0 0 45 45\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M44.5624 18.0934H42.75V18H22.5V27H35.2159C33.3607 32.2391 28.3759 36 22.5 36C15.0446 36 9 29.9554 9 22.5C9 15.0446 15.0446 9 22.5 9C25.9414 9 29.0722 10.2982 31.4561 12.4189L37.8202 6.05475C33.8017 2.30962 28.4265 0 22.5 0C10.0744 0 0 10.0744 0 22.5C0 34.9256 10.0744 45 22.5 45C34.9256 45 45 34.9256 45 22.5C45 20.9914 44.8447 19.5187 44.5624 18.0934Z\" fill=\"#FBC02D\"/>", "explanation": "**Purpose:** This block appears to be an SVG icon, specifically a Google logo.\n\n**Functionality:** It is likely used as an image or icon in a graphical user interface (GUI), possibly as a brand identifier for Google.", "metadata": {"repo": "magiclabs/wagmi-magic-connector", "file": "src/lib/modal/logos.ts", "chunk_number": 2, "total_chunks": 17}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/wagmi-magic-connector`\n\n**Purpose:** A Wagmi connector for Magic API, enabling seamless integration with Magic's authentication and identity verification services in React applications.\n\n**Content:**\n\n* Code for a custom Wagmi connector\n* Documentation on how to use the connector in your project\n* Potential example code or demo apps demonstrating the connector's usage", "file_summary": "Here is a concise summary:\n\n**src/lib/modal/logos.ts**: A collection of SVG logo code snippets, reusable as MagicLogo components, displaying various company logos (e.g. Google, Discord, Bitbucket, LinkedIn) for use in GUI applications or web development projects."}
{"code": "<path d=\"M2.59421 12.0274L9.98658 17.4487C11.9868 12.4965 16.8311 9 22.5 9C25.9413 9 29.0722 10.2982 31.4561 12.4189L37.8202 6.05475C33.8017 2.30962 28.4265 0 22.5 0C13.8577 0 6.36296 4.87912 2.59421 12.0274Z\" fill=\"#E53935\"/>\n<path d=\"M22.4998 45C28.3116 45 33.5923 42.7759 37.585 39.159L30.6212 33.2663C28.3622 34.9774 25.5542 36 22.4998 36C16.6476 36 11.6785 32.2684 9.80646 27.0608L2.46921 32.7139C6.19296 40.0005 13.7552 45 22.4998 45Z\" fill=\"#4CAF50\"/>\n<path d=\"M44.5621 18.0934L44.5441 18H42.7498H22.4998V27H35.2156C34.3246 29.5166 32.7058 31.6867 30.6178 33.2674C30.6189 33.2662 30.62 33.2662 30.6211 33.2651L37.5849 39.1579C37.0921 39.6056 44.9998 33.75 44.9998 22.5C44.9998 20.9914 44.8445 19.5187 44.5621 18.0934Z\" fill=\"#1565C0\"/>\n</svg>\n`\n\nexport const twitchLogo = `\n<svg width=\"46\" height=\"45\" viewBox=\"0 0 46 45\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">", "explanation": "This block appears to be an SVG (Scalable Vector Graphics) code snippet, which is a graphical markup language used for creating vector graphics.\n\nThe purpose of this code is to display a collection of three logos or icons on top of each other, likely intended to represent different branding elements, possibly from various companies or platforms.\n\nEach logo/path is defined by a set of coordinates and shapes, using the `<path>` element. The `fill` attribute specifies the color for filling the path.\n\nNo specific functionality beyond rendering these logos is evident in this code snippet alone; it seems to be a static graphic representation.", "metadata": {"repo": "magiclabs/wagmi-magic-connector", "file": "src/lib/modal/logos.ts", "chunk_number": 3, "total_chunks": 17}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/wagmi-magic-connector`\n\n**Purpose:** A Wagmi connector for Magic API, enabling seamless integration with Magic's authentication and identity verification services in React applications.\n\n**Content:**\n\n* Code for a custom Wagmi connector\n* Documentation on how to use the connector in your project\n* Potential example code or demo apps demonstrating the connector's usage", "file_summary": "Here is a concise summary:\n\n**src/lib/modal/logos.ts**: A collection of SVG logo code snippets, reusable as MagicLogo components, displaying various company logos (e.g. Google, Discord, Bitbucket, LinkedIn) for use in GUI applications or web development projects."}
{"code": "<path d=\"M22.5104 45C34.9368 45 45.0104 34.9264 45.0104 22.5C45.0104 10.0736 34.9368 0 22.5104 0C10.084 0 0.010437 10.0736 0.010437 22.5C0.010437 34.9264 10.084 45 22.5104 45Z\" fill=\"#6441A4\"/>\n<path d=\"M13.2204 12.2168L11.7526 16.1323V31.7813H17.1315V34.7168H20.0671L22.9982 31.7813H27.4016L33.2683 25.9146V12.2168H13.2204ZM15.176 14.1724H31.3171V24.9346L27.8937 28.3579H22.5104L19.5793 31.2891V28.3579H15.176V14.1724ZM20.5549 23.9546H22.5104V18.0879H20.5549V23.9546ZM25.9338 23.9546H27.8893V18.0879H25.9338V23.9546Z\" fill=\"white\"/>\n</svg>\n`\n\nexport const discordLogo = `\n<svg width=\"46\" height=\"45\" viewBox=\"0 0 46 45\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M22.5208 45C34.9473 45 45.0208 34.9264 45.0208 22.5C45.0208 10.0736 34.9473 0 22.5208 0C10.0944 0 0.0208435 10.0736 0.0208435 22.5C0.0208435 34.9264 10.0944 45 22.5208 45Z\" fill=\"#586CF5\"/>", "explanation": "**Purpose:** Display a Discord logo.\n\n**Functionality:** A Scalable Vector Graphics (SVG) image that renders a white Discord logo on top of a purple background, with customizable dimensions.", "metadata": {"repo": "magiclabs/wagmi-magic-connector", "file": "src/lib/modal/logos.ts", "chunk_number": 4, "total_chunks": 17}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/wagmi-magic-connector`\n\n**Purpose:** A Wagmi connector for Magic API, enabling seamless integration with Magic's authentication and identity verification services in React applications.\n\n**Content:**\n\n* Code for a custom Wagmi connector\n* Documentation on how to use the connector in your project\n* Potential example code or demo apps demonstrating the connector's usage", "file_summary": "Here is a concise summary:\n\n**src/lib/modal/logos.ts**: A collection of SVG logo code snippets, reusable as MagicLogo components, displaying various company logos (e.g. Google, Discord, Bitbucket, LinkedIn) for use in GUI applications or web development projects."}
{"code": "<path d=\"M31.9325 13.8447C30.2018 13.0504 28.3451 12.4653 26.4045 12.1302C26.3693 12.124 26.3341 12.1401 26.3156 12.1722C26.0767 12.5968 25.8126 13.1504 25.6274 13.5861C23.5399 13.2738 21.4629 13.2738 19.4186 13.5861C19.2334 13.1411 18.9593 12.5968 18.7192 12.1722C18.7007 12.1407 18.6655 12.1247 18.6303 12.1302C16.6903 12.4641 14.8343 13.0492 13.1023 13.8447C13.0875 13.8508 13.0745 13.8619 13.0659 13.8761C9.54515 19.1356 8.5804 24.266 9.05382 29.3322C9.05567 29.3569 9.06987 29.381 9.089 29.3958C11.4117 31.1016 13.6622 32.1372 15.8706 32.8235C15.9058 32.834 15.9435 32.8216 15.9657 32.792C16.4879 32.0786 16.9539 31.3269 17.3533 30.5357C17.3767 30.4894 17.3545 30.4345 17.3063 30.4159C16.5675 30.1357 15.8645 29.7945 15.188 29.4063C15.1343 29.3748 15.13 29.2983 15.1793 29.2619C15.3219 29.1551 15.4639 29.044 15.6003 28.9323C15.625 28.9119 15.6589 28.9076 15.6879 28.9206C20.1327 30.9498 24.9447 30.9498 29.337 28.9206C29.366 28.9064 29.4 28.9107 29.4259 28.9311C29.5617 29.0434 29.7043 29.1551 29.8475 29.2619C29.8968 29.2983 29.8938 29.3748 29.8401 29.4063C29.1636 29.8019 28.4599 30.1357 27.7205 30.4147C27.6723 30.4332 27.6507 30.4888 27.6742 30.5357C28.0822 31.3256 28.5476 32.0773 29.0605 32.7908C29.0821 32.821 29.1204 32.834 29.1555 32.8228C31.3745 32.1366 33.625 31.101 35.9477 29.3952C35.968 29.3803 35.981 29.3575 35.9829 29.3328C36.5489 23.4754 35.0342 18.3876 31.9677 13.8768C31.9603 13.8619 31.9473 13.8508 31.9325 13.8447ZM18.0168 26.247C16.6786 26.247 15.5762 25.0189 15.5762 23.51C15.5762 22.001 16.6576 20.7729 18.0168 20.7729C19.3871 20.7729 20.479 22.0121 20.4574 23.51C20.458 25.0183 19.3766 26.247 18.0168 26.247ZM27.0415 26.247C25.7033 26.247 24.6009 25.0189 24.6009 23.51C24.6009 22.001 25.6823 20.7729 27.0415 20.7729C28.4118 20.7729 29.5037 22.0121 29.4821 23.51C29.4821 25.0183 28.4118 26.247 27.0415 26.247Z\" fill=\"white\"/>", "explanation": "This block is a SVG path element that represents an icon or graphic, likely used for visual purposes on a webpage or application. Its purpose is primarily decorative, displaying a complex shape with various lines and curves.", "metadata": {"repo": "magiclabs/wagmi-magic-connector", "file": "src/lib/modal/logos.ts", "chunk_number": 5, "total_chunks": 17}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/wagmi-magic-connector`\n\n**Purpose:** A Wagmi connector for Magic API, enabling seamless integration with Magic's authentication and identity verification services in React applications.\n\n**Content:**\n\n* Code for a custom Wagmi connector\n* Documentation on how to use the connector in your project\n* Potential example code or demo apps demonstrating the connector's usage", "file_summary": "Here is a concise summary:\n\n**src/lib/modal/logos.ts**: A collection of SVG logo code snippets, reusable as MagicLogo components, displaying various company logos (e.g. Google, Discord, Bitbucket, LinkedIn) for use in GUI applications or web development projects."}
{"code": "</svg>\n`\n\nexport const bitbucketLogo = `\n<svg width=\"46\" height=\"45\" viewBox=\"0 0 46 45\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M22.5313 45C34.9577 45 45.0313 34.9264 45.0313 22.5C45.0313 10.0736 34.9577 0 22.5313 0C10.1049 0 0.0312805 10.0736 0.0312805 22.5C0.0312805 34.9264 10.1049 45 22.5313 45Z\" fill=\"#0052CC\"/>\n<path d=\"M12.0107 12.3882C11.6151 12.3838 11.2856 12.7002 11.2812 13.1001C11.2812 13.144 11.2812 13.1836 11.2899 13.2275L14.3485 31.7988C14.4276 32.2646 14.8319 32.6118 15.3065 32.6162H29.9843C30.3402 32.6206 30.6479 32.3613 30.705 32.0098L33.7724 13.2275C33.8383 12.8364 33.5702 12.4673 33.1791 12.4014C33.1352 12.3926 33.0956 12.3926 33.0561 12.3926L12.0107 12.3882ZM24.8954 25.8091H20.2065L18.9408 19.1865H26.0292L24.8954 25.8091Z\" fill=\"white\"/>\n</svg>\n`\n\nexport const linkedinLogo = `\n<svg width=\"46\" height=\"45\" viewBox=\"0 0 46 45\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">", "explanation": "This block appears to be a snippet of code, specifically SVG (Scalable Vector Graphics) code, that defines two logos: Bitbucket and LinkedIn.\n\nThe purpose is to export these logo definitions as JavaScript constants (`bitbucketLogo` and `linkedinLogo`) for use in other parts of the application or website. \n\nThe functionality is simply to render the logos on a webpage or other visual interface, using the SVG code to draw the shapes that make up each logo.", "metadata": {"repo": "magiclabs/wagmi-magic-connector", "file": "src/lib/modal/logos.ts", "chunk_number": 6, "total_chunks": 17}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/wagmi-magic-connector`\n\n**Purpose:** A Wagmi connector for Magic API, enabling seamless integration with Magic's authentication and identity verification services in React applications.\n\n**Content:**\n\n* Code for a custom Wagmi connector\n* Documentation on how to use the connector in your project\n* Potential example code or demo apps demonstrating the connector's usage", "file_summary": "Here is a concise summary:\n\n**src/lib/modal/logos.ts**: A collection of SVG logo code snippets, reusable as MagicLogo components, displaying various company logos (e.g. Google, Discord, Bitbucket, LinkedIn) for use in GUI applications or web development projects."}
{"code": "<path d=\"M22.5417 45C34.9681 45 45.0417 34.9264 45.0417 22.5C45.0417 10.0736 34.9681 0 22.5417 0C10.1153 0 0.0417023 10.0736 0.0417023 22.5C0.0417023 34.9264 10.1153 45 22.5417 45Z\" fill=\"#0A66C2\"/>\n<path d=\"M30.5001 30.4629H27.1602V25.2334C27.1602 23.9854 27.1339 22.3813 25.42 22.3813C23.6798 22.3813 23.4117 23.7393 23.4117 25.1411V30.4629H20.0719V19.7051H23.2799V21.1729H23.3238C23.772 20.3291 24.8619 19.437 26.4879 19.437C29.8717 19.437 30.4957 21.665 30.4957 24.561L30.5001 30.4629ZM16.3057 18.2329C15.2291 18.2329 14.3678 17.3628 14.3678 16.2949C14.3678 15.2271 15.2335 14.3569 16.3057 14.3569C17.378 14.3569 18.2437 15.2271 18.2437 16.2949C18.2437 17.3628 17.3736 18.2329 16.3057 18.2329ZM17.9801 30.4629H14.6314V19.7051H17.9801V30.4629ZM32.17 11.25H12.9571C12.0387 11.25 11.2916 11.9751 11.2916 12.876V32.168C11.2916 33.0645 12.0343 33.7939 12.9571 33.7939H32.1656C33.0841 33.7939 33.8355 33.0688 33.8355 32.168V12.876C33.8355 11.9751 33.0841 11.25 32.17 11.25V11.25Z\" fill=\"white\"/>\n</svg>\n`\n", "explanation": "This block is an SVG (Scalable Vector Graphics) image containing two paths, one filled with a blue color (#0A66C2) and the other filled with white. It appears to be a button or icon graphic, likely used as a visual element in a UI design.", "metadata": {"repo": "magiclabs/wagmi-magic-connector", "file": "src/lib/modal/logos.ts", "chunk_number": 7, "total_chunks": 17}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/wagmi-magic-connector`\n\n**Purpose:** A Wagmi connector for Magic API, enabling seamless integration with Magic's authentication and identity verification services in React applications.\n\n**Content:**\n\n* Code for a custom Wagmi connector\n* Documentation on how to use the connector in your project\n* Potential example code or demo apps demonstrating the connector's usage", "file_summary": "Here is a concise summary:\n\n**src/lib/modal/logos.ts**: A collection of SVG logo code snippets, reusable as MagicLogo components, displaying various company logos (e.g. Google, Discord, Bitbucket, LinkedIn) for use in GUI applications or web development projects."}
{"code": "export const appleLogo = `\n<svg width=\"46\" height=\"45\" viewBox=\"0 0 46 45\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M22.5521 45C34.9785 45 45.0521 34.9264 45.0521 22.5C45.0521 10.0736 34.9785 0 22.5521 0C10.1257 0 0.0521393 10.0736 0.0521393 22.5C0.0521393 34.9264 10.1257 45 22.5521 45Z\" fill=\"#999999\"/>", "explanation": "This block exports an SVG image, specifically a stylized apple logo, as a JavaScript constant named \"appleLogo\".", "metadata": {"repo": "magiclabs/wagmi-magic-connector", "file": "src/lib/modal/logos.ts", "chunk_number": 8, "total_chunks": 17}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/wagmi-magic-connector`\n\n**Purpose:** A Wagmi connector for Magic API, enabling seamless integration with Magic's authentication and identity verification services in React applications.\n\n**Content:**\n\n* Code for a custom Wagmi connector\n* Documentation on how to use the connector in your project\n* Potential example code or demo apps demonstrating the connector's usage", "file_summary": "Here is a concise summary:\n\n**src/lib/modal/logos.ts**: A collection of SVG logo code snippets, reusable as MagicLogo components, displaying various company logos (e.g. Google, Discord, Bitbucket, LinkedIn) for use in GUI applications or web development projects."}
{"code": "<path d=\"M17.9465 31.7329C17.5026 31.4385 17.1115 31.0737 16.7819 30.6563C16.4216 30.2212 16.092 29.7642 15.7844 29.2939C15.0681 28.2437 14.5056 27.0967 14.1144 25.8882C13.6442 24.4819 13.4201 23.1328 13.4201 21.8145C13.4201 20.3423 13.7365 19.0591 14.3605 17.9824C14.8176 17.1387 15.5031 16.4355 16.3293 15.939C17.1247 15.4424 18.0519 15.1699 18.9924 15.1523C19.322 15.1523 19.6779 15.2007 20.0515 15.293C20.3239 15.3677 20.6491 15.4907 21.0534 15.6401C21.5676 15.8379 21.8488 15.9565 21.9455 15.9873C22.2443 16.1016 22.4992 16.1455 22.697 16.1455C22.8464 16.1455 23.0617 16.0972 23.3034 16.0225C23.4396 15.9741 23.6989 15.8906 24.0637 15.7324C24.424 15.6006 24.714 15.4907 24.9382 15.4028C25.2853 15.3018 25.6193 15.2051 25.9225 15.1611C26.2873 15.104 26.652 15.0864 26.9992 15.1128C27.6628 15.1611 28.2736 15.3018 28.8185 15.5083C29.7722 15.8906 30.5456 16.4927 31.1213 17.3452C30.8796 17.4946 30.6511 17.6704 30.4401 17.8594C29.9831 18.2637 29.5964 18.7383 29.2888 19.27C28.8845 19.9907 28.6779 20.8081 28.6867 21.6299C28.6999 22.645 28.9592 23.5371 29.4733 24.3105C29.8381 24.873 30.3215 25.3564 30.9103 25.7476C31.2004 25.9453 31.4553 26.0815 31.697 26.1694C31.5827 26.521 31.4597 26.8638 31.319 27.2021C30.9938 27.958 30.6071 28.6831 30.1457 29.3687C29.7414 29.9575 29.4206 30.4014 29.1789 30.6914C28.801 31.1397 28.4406 31.478 28.0715 31.7197C27.6672 31.9878 27.197 32.1284 26.7092 32.1284C26.3796 32.1416 26.0544 32.1021 25.7424 32.0098C25.4699 31.9219 25.2018 31.8208 24.9382 31.7065C24.6657 31.5791 24.3801 31.4736 24.09 31.3901C23.7341 31.2979 23.3693 31.2495 23.0002 31.2539C22.6266 31.2539 22.2619 31.3022 21.9147 31.3901C21.6247 31.4736 21.3434 31.5747 21.0666 31.6934C20.6711 31.856 20.4162 31.9658 20.2668 32.0098C19.9636 32.0977 19.6515 32.1548 19.3395 32.1724C18.8517 32.1724 18.3991 32.0317 17.9465 31.7505V31.7329ZM24.3669 14.436C23.7297 14.7524 23.1232 14.8887 22.5168 14.8447C22.4245 14.2383 22.5168 13.6187 22.7717 12.9375C22.9958 12.3574 23.2946 11.8301 23.7077 11.3643C24.1384 10.8765 24.6525 10.4722 25.237 10.1821C25.8566 9.86572 26.4455 9.69434 27.008 9.66797C27.0827 10.3052 27.008 10.9336 26.7751 11.606C26.5598 12.2036 26.2433 12.7573 25.839 13.2539C25.4304 13.7417 24.925 14.146 24.3537 14.436H24.3669Z\" fill=\"white\"/>", "explanation": "This block is a SVG path element, representing a graphical shape with white fill color.", "metadata": {"repo": "magiclabs/wagmi-magic-connector", "file": "src/lib/modal/logos.ts", "chunk_number": 9, "total_chunks": 17}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/wagmi-magic-connector`\n\n**Purpose:** A Wagmi connector for Magic API, enabling seamless integration with Magic's authentication and identity verification services in React applications.\n\n**Content:**\n\n* Code for a custom Wagmi connector\n* Documentation on how to use the connector in your project\n* Potential example code or demo apps demonstrating the connector's usage", "file_summary": "Here is a concise summary:\n\n**src/lib/modal/logos.ts**: A collection of SVG logo code snippets, reusable as MagicLogo components, displaying various company logos (e.g. Google, Discord, Bitbucket, LinkedIn) for use in GUI applications or web development projects."}
{"code": "</svg>\n`\n\nexport const twitterLogo = `\n<svg width=\"46\" height=\"45\" viewBox=\"0 0 46 45\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M22.5626 45C34.989 45 45.0626 34.9264 45.0626 22.5C45.0626 10.0736 34.989 0 22.5626 0C10.1362 0 0.062561 10.0736 0.062561 22.5C0.062561 34.9264 10.1362 45 22.5626 45Z\" fill=\"#1DA1F2\"/>", "explanation": "The purpose of this block is to define a Twitter logo as an SVG (Scalable Vector Graphics) icon. The functionality is to display the logo with specified dimensions and colors.", "metadata": {"repo": "magiclabs/wagmi-magic-connector", "file": "src/lib/modal/logos.ts", "chunk_number": 10, "total_chunks": 17}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/wagmi-magic-connector`\n\n**Purpose:** A Wagmi connector for Magic API, enabling seamless integration with Magic's authentication and identity verification services in React applications.\n\n**Content:**\n\n* Code for a custom Wagmi connector\n* Documentation on how to use the connector in your project\n* Potential example code or demo apps demonstrating the connector's usage", "file_summary": "Here is a concise summary:\n\n**src/lib/modal/logos.ts**: A collection of SVG logo code snippets, reusable as MagicLogo components, displaying various company logos (e.g. Google, Discord, Bitbucket, LinkedIn) for use in GUI applications or web development projects."}
{"code": "<path d=\"M34.2521 15.5918C33.4259 15.9565 32.5426 16.2026 31.611 16.3169C32.5602 15.7456 33.2897 14.8447 33.6325 13.7725C32.7448 14.291 31.756 14.6689 30.7101 14.8799C29.8708 13.9834 28.6799 13.4209 27.3527 13.4209C24.8127 13.4209 22.7516 15.4819 22.7516 18.0176C22.7516 18.3823 22.7956 18.7339 22.8703 19.0679C19.047 18.8877 15.6545 17.0508 13.3869 14.2734C12.987 14.9502 12.7629 15.7324 12.7629 16.5894C12.7629 18.189 13.5759 19.5952 14.8107 20.4214C14.0549 20.395 13.3473 20.1885 12.7277 19.8457V19.9028C12.7277 22.1353 14.3097 23.9941 16.4191 24.416C16.0324 24.5215 15.6237 24.5742 15.2062 24.5742C14.9118 24.5742 14.6305 24.5479 14.3493 24.4951C14.9382 26.3232 16.6344 27.6548 18.6559 27.6899C17.0871 28.9248 15.092 29.6587 12.9518 29.6587C12.5871 29.6587 12.2223 29.6367 11.8576 29.5972C13.9054 30.9023 16.318 31.6626 18.924 31.6626C27.3835 31.6626 32.0109 24.6533 32.0109 18.5845C32.0109 18.3911 32.0109 18.1934 31.9977 17.9956C32.8942 17.3496 33.6808 16.5366 34.2961 15.6138L34.2521 15.5918Z\" fill=\"white\"/>", "explanation": "This block is a vector graphic path that draws an icon, likely used for visual representation in a digital context, such as a web page or application.", "metadata": {"repo": "magiclabs/wagmi-magic-connector", "file": "src/lib/modal/logos.ts", "chunk_number": 11, "total_chunks": 17}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/wagmi-magic-connector`\n\n**Purpose:** A Wagmi connector for Magic API, enabling seamless integration with Magic's authentication and identity verification services in React applications.\n\n**Content:**\n\n* Code for a custom Wagmi connector\n* Documentation on how to use the connector in your project\n* Potential example code or demo apps demonstrating the connector's usage", "file_summary": "Here is a concise summary:\n\n**src/lib/modal/logos.ts**: A collection of SVG logo code snippets, reusable as MagicLogo components, displaying various company logos (e.g. Google, Discord, Bitbucket, LinkedIn) for use in GUI applications or web development projects."}
{"code": "</svg>\n`\n\nexport const facebookLogo = `\n<svg width=\"46\" height=\"45\" viewBox=\"0 0 46 45\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M22.573 0C10.1462 0 0.0729866 10.0783 0.0729866 22.5114C0.0729866 33.7986 8.37436 43.1442 19.2025 44.7717C20.3016 44.9372 21.4277 41.646 22.573 41.646C23.6069 41.646 24.625 44.9529 25.6229 44.8179C36.6074 43.3287 45.073 33.91 45.073 22.5114C45.073 10.0783 34.9997 0 22.573 0Z\" fill=\"url(#paint0_linear_4_56)\"/>\n<path opacity=\"0.05\" d=\"M26.7561 19.3289C26.7561 17.7277 27.0989 15.8196 28.731 15.8196H33.5454L33.5443 9.50388L33.4881 8.54589L32.5371 8.41771C31.8537 8.32551 30.4317 8.13324 27.8093 8.13324C21.5494 8.13324 18.1019 11.8606 18.1019 18.6284V21.4371H12.5401V29.598H18.1019V44.5502C19.552 44.8437 21.0526 45 22.5892 45C24.0145 45 25.4038 44.8527 26.7561 44.5986V29.5969H32.4135L33.6747 21.436H26.7561V19.3289Z\" fill=\"black\"/>", "explanation": "This block appears to be an SVG (Scalable Vector Graphics) code snippet for a Facebook logo, which can be used in various contexts such as web development or design projects.", "metadata": {"repo": "magiclabs/wagmi-magic-connector", "file": "src/lib/modal/logos.ts", "chunk_number": 12, "total_chunks": 17}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/wagmi-magic-connector`\n\n**Purpose:** A Wagmi connector for Magic API, enabling seamless integration with Magic's authentication and identity verification services in React applications.\n\n**Content:**\n\n* Code for a custom Wagmi connector\n* Documentation on how to use the connector in your project\n* Potential example code or demo apps demonstrating the connector's usage", "file_summary": "Here is a concise summary:\n\n**src/lib/modal/logos.ts**: A collection of SVG logo code snippets, reusable as MagicLogo components, displaying various company logos (e.g. Google, Discord, Bitbucket, LinkedIn) for use in GUI applications or web development projects."}
{"code": "<path opacity=\"0.05\" d=\"M26.1865 19.3091C26.1865 17.7867 26.5164 15.2346 28.7275 15.2346H32.9865V9.50924L32.9572 9.01412L32.4697 8.94773C31.7976 8.85659 30.4005 8.66754 27.8055 8.66754C21.8127 8.66754 18.6458 12.1052 18.6458 18.6081V21.9816H13.0741V29.0235H18.6447V44.6354C19.9236 44.8605 21.2318 45 22.576 45C23.8077 45 25.0078 44.874 26.1865 44.6838V29.0224H31.9327L33.0214 21.9805H26.1854V19.3091H26.1865Z\" fill=\"black\"/>\n<path d=\"M25.6374 28.4741H31.4564L32.3704 22.5626H25.6374V19.3314C25.6374 16.876 26.4401 14.6982 28.7369 14.6982H32.4277V9.54002C31.7791 9.45233 30.4075 9.2612 27.8162 9.2612C22.4042 9.2612 19.2316 12.1191 19.2316 18.631V22.5637H13.6678V28.4752H19.2305V44.7493C20.3322 44.9134 21.4486 45 22.5942 45C23.6296 45 24.6403 44.9303 25.6374 44.7954V28.4741Z\" fill=\"white\"/>\n<defs>\n<linearGradient id=\"paint0_linear_4_56\" x1=\"6.81511\" y1=\"6.74553\" x2=\"41.2823\" y2=\"41.1953\" gradientUnits=\"userSpaceOnUse\">\n<stop stop-color=\"#2AA4F4\"/>\n<stop offset=\"1\" stop-color=\"#007AD9\"/>", "explanation": "Here is a concise summary of the purpose and functionality of this block:\n\n**Purpose:** A graphical representation of a map or a geographic area, likely used for illustration or design purposes.\n\n**Functionality:** Two paths (shapes) are defined with different fill colors (black and white), creating a visual representation of a region. The shapes are connected by lines to form a single entity.", "metadata": {"repo": "magiclabs/wagmi-magic-connector", "file": "src/lib/modal/logos.ts", "chunk_number": 13, "total_chunks": 17}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/wagmi-magic-connector`\n\n**Purpose:** A Wagmi connector for Magic API, enabling seamless integration with Magic's authentication and identity verification services in React applications.\n\n**Content:**\n\n* Code for a custom Wagmi connector\n* Documentation on how to use the connector in your project\n* Potential example code or demo apps demonstrating the connector's usage", "file_summary": "Here is a concise summary:\n\n**src/lib/modal/logos.ts**: A collection of SVG logo code snippets, reusable as MagicLogo components, displaying various company logos (e.g. Google, Discord, Bitbucket, LinkedIn) for use in GUI applications or web development projects."}
{"code": "</linearGradient>\n</defs>\n</svg>\n`\n\nexport const githubLogo = `\n<svg width=\"45\" height=\"45\" viewBox=\"0 0 45 45\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M0 22.5C0 10.0736 10.0736 0 22.5 0V0C34.9264 0 45 10.0736 45 22.5V22.5C45 34.9264 34.9264 45 22.5 45V45C10.0736 45 0 34.9264 0 22.5V22.5Z\" fill=\"black\"/>\n<rect x=\"7\" y=\"4\" width=\"31\" height=\"32\" rx=\"15.5\" fill=\"white\"/>", "explanation": "Here is a concise summary:\n\nThis block appears to be SVG code, containing a logo design for GitHub. The code defines an SVG element with a path representing the logo's shape and a rectangle over it with rounded corners, effectively creating a white background with a black outline.", "metadata": {"repo": "magiclabs/wagmi-magic-connector", "file": "src/lib/modal/logos.ts", "chunk_number": 14, "total_chunks": 17}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/wagmi-magic-connector`\n\n**Purpose:** A Wagmi connector for Magic API, enabling seamless integration with Magic's authentication and identity verification services in React applications.\n\n**Content:**\n\n* Code for a custom Wagmi connector\n* Documentation on how to use the connector in your project\n* Potential example code or demo apps demonstrating the connector's usage", "file_summary": "Here is a concise summary:\n\n**src/lib/modal/logos.ts**: A collection of SVG logo code snippets, reusable as MagicLogo components, displaying various company logos (e.g. Google, Discord, Bitbucket, LinkedIn) for use in GUI applications or web development projects."}
{"code": "<path d=\"M22.3626 4.00406C13.3264 4.00406 6 11.2809 6 20.2562C6 27.4376 10.6879 33.5281 17.19 35.6774C18.0081 35.8277 18.3088 35.3239 18.3088 34.8953L18.3088 34.8912C18.3087 34.4984 18.2924 33.2227 18.2863 31.8703C13.7334 32.8536 12.7741 29.9526 12.7741 29.9526C12.0296 28.0734 10.9579 27.5737 10.9579 27.5737C9.47296 26.564 11.0704 26.5864 11.0704 26.5864C12.7128 26.7001 13.5779 28.2603 13.5779 28.2603C15.0383 30.7449 17.4068 30.0257 18.3395 29.6113C18.4867 28.561 18.9101 27.8439 19.3785 27.4376C15.7439 27.0272 11.9233 25.6336 11.9233 19.405C11.9233 17.6315 12.5635 16.181 13.6086 15.0433C13.4389 14.6329 12.8784 12.9813 13.7661 10.7426C13.7661 10.7426 15.1406 10.3058 18.2679 12.4084C19.5728 12.0489 20.9718 11.8681 22.3626 11.862C23.7534 11.8681 25.1545 12.0489 26.4614 12.4084C29.5847 10.3058 30.9571 10.7426 30.9571 10.7426C31.8468 12.9813 31.2884 14.635 31.1187 15.0433C32.1679 16.181 32.802 17.6315 32.802 19.405C32.802 25.6478 28.9731 27.0211 25.3304 27.4234C25.9174 27.9272 26.441 28.9165 26.441 30.432C26.441 32.6058 26.4226 34.3569 26.4226 34.8912C26.4226 35.3239 26.7171 35.8298 27.5475 35.6713C34.0455 33.5199 38.7273 27.4295 38.7273 20.2521C38.7273 11.2769 31.4009 4 22.3647 4L22.3626 4.00406Z\" fill=\"black\"/>", "explanation": "This block is a SVG path element, used to draw a custom shape (likely a logo or icon) on a graphical interface.", "metadata": {"repo": "magiclabs/wagmi-magic-connector", "file": "src/lib/modal/logos.ts", "chunk_number": 15, "total_chunks": 17}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/wagmi-magic-connector`\n\n**Purpose:** A Wagmi connector for Magic API, enabling seamless integration with Magic's authentication and identity verification services in React applications.\n\n**Content:**\n\n* Code for a custom Wagmi connector\n* Documentation on how to use the connector in your project\n* Potential example code or demo apps demonstrating the connector's usage", "file_summary": "Here is a concise summary:\n\n**src/lib/modal/logos.ts**: A collection of SVG logo code snippets, reusable as MagicLogo components, displaying various company logos (e.g. Google, Discord, Bitbucket, LinkedIn) for use in GUI applications or web development projects."}
{"code": "</svg>\n\n`\n\nexport const gitlabLogo = `\n<svg width=\"48\" height=\"48\" viewBox=\"0 0 48 48\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M23.5 48C35.9264 48 46 37.9264 46 25.5C46 13.0736 35.9264 3 23.5 3C11.0736 3 1 13.0736 1 25.5C1 37.9264 11.0736 48 23.5 48Z\" fill=\"#E8E8E8\"/>\n<path d=\"M24 39L18.2857 22.6579H29.7143L24 39Z\" fill=\"#E53935\"/>\n<path d=\"M24 39L36.8571 22.6579H29.7143L24 39Z\" fill=\"#FF7043\"/>\n<path d=\"M33.2857 12L36.8571 22.6579H29.7143L33.2857 12Z\" fill=\"#E53935\"/>\n<path d=\"M24 39L36.8571 22.6579L39 28.3421L24 39Z\" fill=\"#FFA726\"/>\n<path d=\"M24 39L11.1429 22.6579H18.2857L24 39Z\" fill=\"#FF7043\"/>\n<path d=\"M14.7143 12L11.1429 22.6579H18.2857L14.7143 12Z\" fill=\"#E53935\"/>\n<path d=\"M24 39L11.1429 22.6579L9 28.3421L24 39Z\" fill=\"#FFA726\"/>\n</svg>\n`\n\nexport const microsoftLogo = `\n<svg width=\"45\" height=\"45\" viewBox=\"0 0 45 45\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">", "explanation": "Here is a concise summary:\n\nThis block contains two SVG logos: \"gitlabLogo\" and \"microsoftLogo\", each consisting of multiple paths that define the visual appearance of the logos. They are likely used for branding or UI purposes in an application.", "metadata": {"repo": "magiclabs/wagmi-magic-connector", "file": "src/lib/modal/logos.ts", "chunk_number": 16, "total_chunks": 17}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/wagmi-magic-connector`\n\n**Purpose:** A Wagmi connector for Magic API, enabling seamless integration with Magic's authentication and identity verification services in React applications.\n\n**Content:**\n\n* Code for a custom Wagmi connector\n* Documentation on how to use the connector in your project\n* Potential example code or demo apps demonstrating the connector's usage", "file_summary": "Here is a concise summary:\n\n**src/lib/modal/logos.ts**: A collection of SVG logo code snippets, reusable as MagicLogo components, displaying various company logos (e.g. Google, Discord, Bitbucket, LinkedIn) for use in GUI applications or web development projects."}
{"code": "<path d=\"M22.5 45C34.9264 45 45 34.9264 45 22.5C45 10.0736 34.9264 0 22.5 0C10.0736 0 0 10.0736 0 22.5C0 34.9264 10.0736 45 22.5 45Z\" fill=\"#E8E8E8\"/>\n<path d=\"M20.7609 21.7391H10.7609L10.7609 11.7391L20.7609 11.7391V21.7391Z\" fill=\"#FF5722\"/>\n<path d=\"M33.2609 21.7391H23.2609V11.7391L33.2609 11.7391V21.7391Z\" fill=\"#4CAF50\"/>\n<path d=\"M33.2609 34.2391H23.2609V24.2391H33.2609V34.2391Z\" fill=\"#FFC107\"/>\n<path d=\"M20.7609 34.2391H10.7609L10.7609 24.2391H20.7609V34.2391Z\" fill=\"#03A9F4\"/>\n</svg>\n`\n", "explanation": "**Summary:**\n\nThis SVG block represents a chart with five bars, each with a different color representing a specific category or value. The blocks of text within each bar indicate the data values associated with each category.", "metadata": {"repo": "magiclabs/wagmi-magic-connector", "file": "src/lib/modal/logos.ts", "chunk_number": 17, "total_chunks": 17}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/wagmi-magic-connector`\n\n**Purpose:** A Wagmi connector for Magic API, enabling seamless integration with Magic's authentication and identity verification services in React applications.\n\n**Content:**\n\n* Code for a custom Wagmi connector\n* Documentation on how to use the connector in your project\n* Potential example code or demo apps demonstrating the connector's usage", "file_summary": "Here is a concise summary:\n\n**src/lib/modal/logos.ts**: A collection of SVG logo code snippets, reusable as MagicLogo components, displaying various company logos (e.g. Google, Discord, Bitbucket, LinkedIn) for use in GUI applications or web development projects."}
{"code": "export const modalStyles = (accentColor = '#6452f7') => `\n@import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;700&display=swap');  \n.Magic__formOverlay {\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background-color: rgba(255, 255, 255, 0.7);\n    backdrop-filter: blur(6px);\n    z-index: 2147483647;\n  }\n .Magic__formOverlay.Magic__dark {\n    background-color: rgba(0, 0, 0, 0.8);\n  }\n  .Magic__formContainer {\n    display: flex;\n    flex-direction: column;\n    font-family: 'Inter', sans-serif;\n    text-align: center;\n    gap: 30px;\n    align-items: center;\n    justify-content: start;\n    position: fixed;\n    overflow: hidden;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%) scale(0);\n    transition: all 0.2s ease-in-out;\n    width: min(400px, 90%);\n    z-index: 9999;\n    box-shadow: 0 12px 56px rgb(119 118 122 / 15%);\n    border-radius: 30px;\n    padding: 80px 20px;\n    background-color: #fff;\n  }\n  .Magic__formContainer.Magic__dark {", "explanation": "**Summary:** \n\nThis is a CSS block that defines styles for a modal overlay. It sets up an overlay with adjustable background color, font family, and layout properties for various forms or containers. The styles can be customized based on the accent color provided.", "metadata": {"repo": "magiclabs/wagmi-magic-connector", "file": "src/lib/modal/styles.ts", "chunk_number": 1, "total_chunks": 5}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/wagmi-magic-connector`\n\n**Purpose:** A Wagmi connector for Magic API, enabling seamless integration with Magic's authentication and identity verification services in React applications.\n\n**Content:**\n\n* Code for a custom Wagmi connector\n* Documentation on how to use the connector in your project\n* Potential example code or demo apps demonstrating the connector's usage", "file_summary": "Here's a concise summary of the file 'src/lib/modal/styles.ts':\n\nThis file defines CSS styles for a modal overlay, including adjustable background color, font family, and layout properties. The styles can be customized based on an accent color and are used to create a visually appealing form UI component with features such as a close button, form header, custom logo, form body, and form labels."}
{"code": "    background-color: #333333;\n    box-shadow: 0 12px 56px #00000021;\n    color: white;\n  }\n  .Magic__closeButton {\n    position: absolute;\n    top: 0;\n    right: 15px;\n    padding: 10px;\n    border: none;\n    background-color: transparent;\n    cursor: pointer;\n    font-size: 30px;\n    color: #ccc;\n    z-index: 9999;\n  }\n  .Magic__dark .Magic__closeButton {\n    color: #555;\n  }\n  .Magic__formHeader{\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    gap: 5px;\n    width: 100%;\n  }\n  .Magic__customLogo{\n    height: 80px;\n    object-fit: contain;\n  }\n  .Magic__logoText{\n    font-size: 22px;\n    font-weight: bold;\n    color: #333;\n  }\n  .Magic__dark .Magic__logoText{\n    color: white;\n  }\n  .Magic__formBody{\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    gap: 10px;\n    width: 100%;\n    height: 100%;\n  }\n  .Magic__formLabel{\n    font-size: 17px;\n    font-weight: 500;\n  }\n  .Magic__formInput {\n    padding: 10px;\n    width: 100%;", "explanation": "This block is a CSS code snippet that defines styles for various HTML elements, including:\n\n* A close button with specific positioning and appearance\n* A form header with center-aligned content\n* A custom logo with height and object-fit properties\n* A logo text with font size and color variations depending on the theme (light or dark)\n* A form body with flexbox layout and padding properties\n* Form labels with font size and weight properties\n\nThese styles are likely used to create a modal window or a form UI component.", "metadata": {"repo": "magiclabs/wagmi-magic-connector", "file": "src/lib/modal/styles.ts", "chunk_number": 2, "total_chunks": 5}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/wagmi-magic-connector`\n\n**Purpose:** A Wagmi connector for Magic API, enabling seamless integration with Magic's authentication and identity verification services in React applications.\n\n**Content:**\n\n* Code for a custom Wagmi connector\n* Documentation on how to use the connector in your project\n* Potential example code or demo apps demonstrating the connector's usage", "file_summary": "Here's a concise summary of the file 'src/lib/modal/styles.ts':\n\nThis file defines CSS styles for a modal overlay, including adjustable background color, font family, and layout properties. The styles can be customized based on an accent color and are used to create a visually appealing form UI component with features such as a close button, form header, custom logo, form body, and form labels."}
{"code": "    height: 45px;\n    max-width: 300px;\n    text-align: center;\n    margin-bottom: 10px;\n    border-width: 1px;\n    border-style: solid;\n    border-color: #D6D6D6;\n    color: #333;\n    font-size: 17px;\n    font-weight: 400;\n    border-radius: 10px;\n    accent-color: ${accentColor};\n    background-color: transparent;\n  }\n  .Magic__dark .Magic__formInput {\n    border-color: #444;\n    color: white;\n  }\n  .Magic__formInput::placeholder { \n    color: #D6D6D6;\n    opacity: 1; \n  }\n  .Magic__dark .Magic__formInput::placeholder {\n    color: #555;\n  }\n  .Magic__divider {\n      display: block;\n      text-align: center;\n      color: #D6D6D6;\n      font-size: 14px;\n  }\n  .Magic__dark .Magic__divider {\n    color: #444;\n  }\n  .Magic__submitButton {\n    display: block;\n    width: 100%;\n    max-width: 300px;\n    padding: 15px 30px;\n    border: none;\n    cursor: pointer;\n    color: white;\n    margin-bottom: 10px;\n    font-size: 17px;\n    font-weight: 500;\n    border-radius: 100px;\n    background-color: ${accentColor};\n  }", "explanation": "This block is a CSS styles definition for a form input element, including its appearance, layout, and behavior in different themes (\"Magic__dark\"). It defines various properties such as color, font size, border style, and background color to control how the input field looks on a webpage.", "metadata": {"repo": "magiclabs/wagmi-magic-connector", "file": "src/lib/modal/styles.ts", "chunk_number": 3, "total_chunks": 5}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/wagmi-magic-connector`\n\n**Purpose:** A Wagmi connector for Magic API, enabling seamless integration with Magic's authentication and identity verification services in React applications.\n\n**Content:**\n\n* Code for a custom Wagmi connector\n* Documentation on how to use the connector in your project\n* Potential example code or demo apps demonstrating the connector's usage", "file_summary": "Here's a concise summary of the file 'src/lib/modal/styles.ts':\n\nThis file defines CSS styles for a modal overlay, including adjustable background color, font family, and layout properties. The styles can be customized based on an accent color and are used to create a visually appealing form UI component with features such as a close button, form header, custom logo, form body, and form labels."}
{"code": "  .Magic__submitButton:hover {\n    background-image: linear-gradient(rgba(0, 0, 0, 0.4) 0 0)\n  }\n  .Magic__oauthButtonsContainer{\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    flex-wrap: wrap;\n    justify-content: center;\n    gap: 10px;\n    width: 90%;\n  }\n  .Magic__oauthButton{\n    display: block;\n    padding: 5px;\n    border: none;\n    background-color: transparent;\n    cursor: pointer;\n    border-radius: 100px;\n  }\n  .Magic__aloneOauthContainer > .Magic__oauthButton{\n    width: 100%;\n    max-width: 300px;\n    height: 50px;\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    padding: 0 15px;\n    border: 1px solid #D6D6D6;\n    color: #333;\n  }\n  .Magic__dark .Magic__aloneOauthContainer > .Magic__oauthButton{\n    border-color: #444;\n    color: white;\n  }\n  .Magic__aloneOauthContainer .Magic__oauthButtonIcon > svg{\n    width: 30px;\n    margin-top: 5px;\n  }\n  .Magic__aloneOauthContainer .Magic__oauthButtonName{\n    position: absolute;\n    left: 50%;", "explanation": "Here is a summary of the purpose and functionality:\n\nThis block defines CSS styles for a submit button, OAuth buttons container, and individual OAuth buttons on a web page.\n\n* It sets up a visually appealing design for the submit button with hover effects.\n* It styles an OAuth buttons container to display buttons horizontally or vertically depending on screen size.\n* It customizes the appearance of individual OAuth buttons, including their layout, padding, border, color, and icon styling.", "metadata": {"repo": "magiclabs/wagmi-magic-connector", "file": "src/lib/modal/styles.ts", "chunk_number": 4, "total_chunks": 5}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/wagmi-magic-connector`\n\n**Purpose:** A Wagmi connector for Magic API, enabling seamless integration with Magic's authentication and identity verification services in React applications.\n\n**Content:**\n\n* Code for a custom Wagmi connector\n* Documentation on how to use the connector in your project\n* Potential example code or demo apps demonstrating the connector's usage", "file_summary": "Here's a concise summary of the file 'src/lib/modal/styles.ts':\n\nThis file defines CSS styles for a modal overlay, including adjustable background color, font family, and layout properties. The styles can be customized based on an accent color and are used to create a visually appealing form UI component with features such as a close button, form header, custom logo, form body, and form labels."}
{"code": "    transform: translateX(-50%);\n    font-size: 16px;\n    text-transform: capitalize;\n  }\n`\n", "explanation": "This block is a CSS style rule that:\n\n* Translates an element horizontally by 50% of its width.\n* Sets the font size to 16 pixels.\n* Capitalizes the first letter of each word in the text.", "metadata": {"repo": "magiclabs/wagmi-magic-connector", "file": "src/lib/modal/styles.ts", "chunk_number": 5, "total_chunks": 5}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/wagmi-magic-connector`\n\n**Purpose:** A Wagmi connector for Magic API, enabling seamless integration with Magic's authentication and identity verification services in React applications.\n\n**Content:**\n\n* Code for a custom Wagmi connector\n* Documentation on how to use the connector in your project\n* Potential example code or demo apps demonstrating the connector's usage", "file_summary": "Here's a concise summary of the file 'src/lib/modal/styles.ts':\n\nThis file defines CSS styles for a modal overlay, including adjustable background color, font family, and layout properties. The styles can be customized based on an accent color and are used to create a visually appealing form UI component with features such as a close button, form header, custom logo, form body, and form labels."}
{"code": "import type { OAuthProvider } from '@magic-ext/oauth'\n\nimport {\n  appleLogo,\n  bitbucketLogo,\n  discordLogo,\n  facebookLogo,\n  githubLogo,\n  gitlabLogo,\n  googleLogo,\n  linkedinLogo,\n  MagicLogo,\n  microsoftLogo,\n  twitchLogo,\n  twitterLogo,\n} from './logos'\nimport { modalStyles } from './styles'\n\nexport const createModal = async (props: {\n  accentColor?: string\n  isDarkMode?: boolean\n  customLogo?: string\n  customHeaderText?: string\n  enableSMSLogin?: boolean\n  enableEmailLogin?: boolean\n  oauthProviders?: OAuthProvider[]\n}) => {\n  // INJECT FORM STYLES\n  const style = document.createElement('style')\n  style.innerHTML = modalStyles(props.accentColor)\n  document.head.appendChild(style)\n\n  // PROVIDERS FOR OAUTH BUTTONS\n  const allProviders = [\n    { name: 'google', icon: googleLogo },\n    { name: 'facebook', icon: facebookLogo },\n    { name: 'apple', icon: appleLogo },\n    { name: 'github', icon: githubLogo },\n    { name: 'bitbucket', icon: bitbucketLogo },\n    { name: 'gitlab', icon: gitlabLogo },", "explanation": "**Purpose:** Create a modal window with customizable login options.\n\n**Functionality:** The `createModal` function takes props to customize the modal's appearance, logo, and login options, including OAuth providers (e.g., Google, Facebook) and custom login methods (e.g., SMS, email).", "metadata": {"repo": "magiclabs/wagmi-magic-connector", "file": "src/lib/modal/view.ts", "chunk_number": 1, "total_chunks": 7}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/wagmi-magic-connector`\n\n**Purpose:** A Wagmi connector for Magic API, enabling seamless integration with Magic's authentication and identity verification services in React applications.\n\n**Content:**\n\n* Code for a custom Wagmi connector\n* Documentation on how to use the connector in your project\n* Potential example code or demo apps demonstrating the connector's usage", "file_summary": "Here is a concise summary of the file 'src/lib/modal/view.ts':\n\nThis code defines a modal window for customizable login options, including social media icons, OAuth providers, email, and phone number login methods. It generates HTML for the modal, conditionally renders login options based on props, and handles form submission and OAuth button clicks."}
{"code": "    { name: 'linkedin', icon: linkedinLogo },\n    { name: 'twitter', icon: twitterLogo },\n    { name: 'discord', icon: discordLogo },\n    { name: 'twitch', icon: twitchLogo },\n    { name: 'microsoft', icon: microsoftLogo },\n  ]\n\n  // make providers included in oauthProviders\n  const providers = props.oauthProviders\n    ?.map((provider) => {\n      return allProviders.find((p) => p.name === provider)\n    })\n    .filter((p) => p !== undefined)\n\n  const phoneNumberRegex = '(\\\\+|00)[0-9]{1,3}[0-9]{4,14}(?:x.+)?$'\n  const emailRegex =\n    '^([a-zA-Z0-9_.-])+(\\\\+[a-zA-Z0-9-]+)?@(([a-zA-Z0-9-])+.)+([a-zA-Z0-9]{2,4})'\n\n  // MODAL HTML\n  const modal = `\n    <div class=\"Magic__formContainer ${props.isDarkMode ? 'Magic__dark' : ''}\" id=\"MagicModalBody\">\n      <button class=\"Magic__closeButton\" id=\"MagicCloseBtn\">&times;</button>\n      <div class=\"Magic__formHeader\">\n        ${\n          props.customLogo\n            ? `<img class=\"Magic__customLogo\" src=\"${props.customLogo}\" />`", "explanation": "Here is a summary of the purpose and functionality of this block:\n\n**Summary:** This code defines social media icons, parses OAuth providers, and generates HTML for a modal window.\n\n**Key Points:**\n\n* Defines an array of social media icons with names and logos.\n* Filters OAuth provider options based on available services.\n* Regulates phone number and email formats using regular expressions.\n* Generates HTML for a modal window with a customizable logo and close button.", "metadata": {"repo": "magiclabs/wagmi-magic-connector", "file": "src/lib/modal/view.ts", "chunk_number": 2, "total_chunks": 7}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/wagmi-magic-connector`\n\n**Purpose:** A Wagmi connector for Magic API, enabling seamless integration with Magic's authentication and identity verification services in React applications.\n\n**Content:**\n\n* Code for a custom Wagmi connector\n* Documentation on how to use the connector in your project\n* Potential example code or demo apps demonstrating the connector's usage", "file_summary": "Here is a concise summary of the file 'src/lib/modal/view.ts':\n\nThis code defines a modal window for customizable login options, including social media icons, OAuth providers, email, and phone number login methods. It generates HTML for the modal, conditionally renders login options based on props, and handles form submission and OAuth button clicks."}
{"code": "            : `<div class=\"Magic__logo\">${MagicLogo}</div>`\n        }\n        <h1 class='Magic__logoText'> ${props.customHeaderText || 'Magic'} </h1>\n\n        <form class=\"Magic__formBody\" id=\"MagicForm\">\n          ${\n            props.enableSMSLogin && props.enableEmailLogin\n              ? `\n               <label class=\"Magic__FormLabel\">Sign-in with Phone or Email</label>\n               <input class=\"Magic__formInput\" id=\"MagicFormInput\" required pattern = \"${emailRegex}|${phoneNumberRegex}\" placeholder=\"Phone or Email\" />\n               `\n              : props.enableEmailLogin\n              ? `\n               <label class=\"Magic__FormLabel\">Sign-in with Email</label>\n               <input class=\"Magic__formInput\" id=\"MagicFormInput\" required type=\"email\" placeholder=\"address@example.com\" />\n               `\n              : props.enableSMSLogin\n              ? `\n                <label class=\"Magic__FormLabel\">Sign-in with Phone</label>", "explanation": "Here is a concise summary:\n\n**Purpose:** Display Magic logo, header text, and login form.\n\n**Functionality:** Conditionally renders login options based on props, including email and/or phone number input fields.", "metadata": {"repo": "magiclabs/wagmi-magic-connector", "file": "src/lib/modal/view.ts", "chunk_number": 3, "total_chunks": 7}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/wagmi-magic-connector`\n\n**Purpose:** A Wagmi connector for Magic API, enabling seamless integration with Magic's authentication and identity verification services in React applications.\n\n**Content:**\n\n* Code for a custom Wagmi connector\n* Documentation on how to use the connector in your project\n* Potential example code or demo apps demonstrating the connector's usage", "file_summary": "Here is a concise summary of the file 'src/lib/modal/view.ts':\n\nThis code defines a modal window for customizable login options, including social media icons, OAuth providers, email, and phone number login methods. It generates HTML for the modal, conditionally renders login options based on props, and handles form submission and OAuth button clicks."}
{"code": "                <input class=\"Magic__formInput\" id=\"MagicFormInput\" required type=\"tel\" pattern=\"${phoneNumberRegex}\" placeholder=\"+11234567890\" />\n              `\n              : ''\n          }\n          ${\n            props.enableSMSLogin || props.enableEmailLogin\n              ? ` <button class=\"Magic__submitButton\" type=\"submit\">\n                Log in / Sign up\n              </button>`\n              : ''\n          }\n        </form>\n        ${\n          providers &&\n          providers.length > 0 &&\n          (props.enableSMSLogin || props.enableEmailLogin)\n            ? `<div class=\"Magic__divider\">\n        &#9135;&#9135;&#9135; OR &#9135;&#9135;&#9135;\n        </div>`\n            : ''\n        }\n        <div class=\"${\n          !props.enableEmailLogin && !props.enableSMSLogin\n            ? 'Magic__oauthButtonsContainer Magic__aloneOauthContainer'\n            : 'Magic__oauthButtonsContainer'\n        }\">\n          ${providers\n            ?.map((provider) => {\n              return `", "explanation": "Here is a concise summary of the purpose and functionality of this block:\n\n**Purpose:** A login form with optional SMS/Email login and OAuth buttons for various providers.\n\n**Functionality:**\n\n* The form contains an input field for phone number (with required attribute) if enabled.\n* A submit button is displayed if either SMS or Email login is enabled.\n* A divider line separates the form from the OAuth buttons.\n* A container displays available OAuth buttons for different providers, such as Google, Facebook, etc.", "metadata": {"repo": "magiclabs/wagmi-magic-connector", "file": "src/lib/modal/view.ts", "chunk_number": 4, "total_chunks": 7}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/wagmi-magic-connector`\n\n**Purpose:** A Wagmi connector for Magic API, enabling seamless integration with Magic's authentication and identity verification services in React applications.\n\n**Content:**\n\n* Code for a custom Wagmi connector\n* Documentation on how to use the connector in your project\n* Potential example code or demo apps demonstrating the connector's usage", "file_summary": "Here is a concise summary of the file 'src/lib/modal/view.ts':\n\nThis code defines a modal window for customizable login options, including social media icons, OAuth providers, email, and phone number login methods. It generates HTML for the modal, conditionally renders login options based on props, and handles form submission and OAuth button clicks."}
{"code": "                <button class=\"Magic__oauthButton\" id=\"MagicOauth${\n                  provider?.name\n                }\" data-provider=\"${provider?.name}\" >\n                  <span class=\"Magic__oauthButtonIcon\">${provider?.icon}</span>\n                  ${\n                    !props.enableSMSLogin && !props.enableEmailLogin\n                      ? `<span class=\"Magic__oauthButtonName\">${provider?.name}</span>`\n                      : ''\n                  }\n                </button>\n              `\n            })\n            .join('')}\n        </div>\n        ${\n          !props.enableEmailLogin &&\n          !props.enableEmailLogin &&\n          providers?.length === 0\n            ? '<div>No Login Methods Configured \ud83d\ude25</div>'\n            : ''\n        }\n      </div>\n    </div>\n  `\n\n  // ADD FORM TO BODY\n  const overlay = document.createElement('div')\n  overlay.classList.add('Magic__formOverlay')\n  if (props.isDarkMode) overlay.classList.add('Magic__dark')\n  document.body.appendChild(overlay)\n  overlay.innerHTML = modal", "explanation": "Here is a concise summary of the block's purpose and functionality:\n\n**Purpose:** Display an OAuth login button for a given provider.\n\n**Functionality:** The code generates a button with an icon and text (if enabled) that, when clicked, likely triggers an authentication flow with the specified provider. The button is conditionally rendered based on the presence of providers and the enablement of email/SMS login methods.", "metadata": {"repo": "magiclabs/wagmi-magic-connector", "file": "src/lib/modal/view.ts", "chunk_number": 5, "total_chunks": 7}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/wagmi-magic-connector`\n\n**Purpose:** A Wagmi connector for Magic API, enabling seamless integration with Magic's authentication and identity verification services in React applications.\n\n**Content:**\n\n* Code for a custom Wagmi connector\n* Documentation on how to use the connector in your project\n* Potential example code or demo apps demonstrating the connector's usage", "file_summary": "Here is a concise summary of the file 'src/lib/modal/view.ts':\n\nThis code defines a modal window for customizable login options, including social media icons, OAuth providers, email, and phone number login methods. It generates HTML for the modal, conditionally renders login options based on props, and handles form submission and OAuth button clicks."}
{"code": "  const formBody = document.getElementById('MagicModalBody')\n  setTimeout(() => {\n    if (formBody) formBody.style.transform = 'translate(-50%, -50%) scale(1)'\n  }, 100)\n\n  // FORM SUBMIT HANDLER\n  const removeForm = () => {\n    if (formBody) formBody.style.transform = 'translate(-50%, -50%) scale(0)'\n    setTimeout(() => {\n      overlay.remove()\n    }, 200)\n  }\n\n  return new Promise((resolve) => {\n    // FORM CLOSE BUTTON\n    document.getElementById('MagicCloseBtn')?.addEventListener('click', () => {\n      removeForm()\n      resolve({\n        email: '',\n        phoneNumber: '',\n        isGoogle: false,\n        isDiscord: false,\n      })\n    })\n\n    // EMAIL FORM SUBMIT HANDLER\n    document.getElementById('MagicForm')?.addEventListener('submit', (e) => {\n      e.preventDefault()\n      const formInputField = document.getElementById(\n        'MagicFormInput',\n      ) as HTMLInputElement\n      const isFormValid = formInputField?.checkValidity()\n      if (isFormValid) {\n        let output", "explanation": "Here is a concise summary of the purpose and functionality of this block:\n\n**Purpose:** To handle the display and submission of a modal form.\n\n**Functionality:**\n\n* Initialize the modal body with a translation and scaling effect.\n* Define a `removeForm` function to hide the form and overlay after submitting or closing the modal.\n* Add event listeners for the form submit button and close button, which call the `removeForm` function and resolve a promise when the modal is closed.", "metadata": {"repo": "magiclabs/wagmi-magic-connector", "file": "src/lib/modal/view.ts", "chunk_number": 6, "total_chunks": 7}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/wagmi-magic-connector`\n\n**Purpose:** A Wagmi connector for Magic API, enabling seamless integration with Magic's authentication and identity verification services in React applications.\n\n**Content:**\n\n* Code for a custom Wagmi connector\n* Documentation on how to use the connector in your project\n* Potential example code or demo apps demonstrating the connector's usage", "file_summary": "Here is a concise summary of the file 'src/lib/modal/view.ts':\n\nThis code defines a modal window for customizable login options, including social media icons, OAuth providers, email, and phone number login methods. It generates HTML for the modal, conditionally renders login options based on props, and handles form submission and OAuth button clicks."}
{"code": "        if (RegExp(phoneNumberRegex).test(formInputField.value)) {\n          output = {\n            phoneNumber: formInputField?.value,\n          }\n        } else {\n          output = {\n            email: formInputField?.value,\n          }\n        }\n        removeForm()\n        resolve(output)\n      }\n    })\n\n    // OAUTH BUTTONS\n    providers?.forEach((provider) => {\n      const oauthButton = document.getElementById(`MagicOauth${provider?.name}`)\n      oauthButton?.addEventListener('click', () => {\n        const output = {\n          oauthProvider: provider?.name as OAuthProvider,\n        }\n        removeForm()\n        resolve(output)\n      })\n    })\n  })\n}\n", "explanation": "Here is a concise summary:\n\nThis block checks if user input matches a phone number pattern, then resolves with an object containing either the phone number or email (if phone number doesn't match). It also listens for OAuth button clicks, resolving with an object indicating the chosen OAuth provider.", "metadata": {"repo": "magiclabs/wagmi-magic-connector", "file": "src/lib/modal/view.ts", "chunk_number": 7, "total_chunks": 7}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/wagmi-magic-connector`\n\n**Purpose:** A Wagmi connector for Magic API, enabling seamless integration with Magic's authentication and identity verification services in React applications.\n\n**Content:**\n\n* Code for a custom Wagmi connector\n* Documentation on how to use the connector in your project\n* Potential example code or demo apps demonstrating the connector's usage", "file_summary": "Here is a concise summary of the file 'src/lib/modal/view.ts':\n\nThis code defines a modal window for customizable login options, including social media icons, OAuth providers, email, and phone number login methods. It generates HTML for the modal, conditionally renders login options based on props, and handles form submission and OAuth button clicks."}
{"code": "export function normalizeChainId(chainId: string | number | bigint) {\n  if (typeof chainId === 'string')\n    return Number.parseInt(chainId, chainId.trim().startsWith('0x') ? 16 : 10)\n  if (typeof chainId === 'bigint') return Number(chainId)\n  return chainId\n}\n", "explanation": "**Purpose:** Normalizes a blockchain ID to a numerical value.\n\n**Functionality:** Converts string, number, or bigint inputs to a unified numerical output, handling different radix values (10 or 16) for hexadecimal inputs.", "metadata": {"repo": "magiclabs/wagmi-magic-connector", "file": "src/lib/utils.ts", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/wagmi-magic-connector`\n\n**Purpose:** A Wagmi connector for Magic API, enabling seamless integration with Magic's authentication and identity verification services in React applications.\n\n**Content:**\n\n* Code for a custom Wagmi connector\n* Documentation on how to use the connector in your project\n* Potential example code or demo apps demonstrating the connector's usage", "file_summary": "Here is a holistic summary of the file 'src/lib/utils.ts':\n\nNormalizes blockchain IDs to a unified numerical value, supporting input types (string, number, bigint) and hexadecimal radix values (10 or 16)."}
{"code": "{\n  \"compilerOptions\": {\n    \"declaration\": true,\n    \"declarationDir\": \"dist\",\n    \"esModuleInterop\": true,\n    \"verbatimModuleSyntax\": false,\n    \"isolatedModules\": true,\n    \"target\": \"ESNext\",\n    \"module\": \"ESNext\",\n    \"moduleResolution\": \"node\",\n    \"outDir\": \"dist\",\n    \"resolveJsonModule\": true,\n    \"skipLibCheck\": true,\n    \"strict\": true,\n    \"types\": [\"node\"],\n    \"typeRoots\": [\"node_modules/@types\"]\n  },\n  \"exclude\": [\"node_modules\", \"dist\", \"src/__test__/**\", \"**/*.md\"]\n}\n", "explanation": "**Purpose:** Configuration for a TypeScript compiler.\n\n**Functionality:** Specifies options for compiling TypeScript code, including output directory, module resolution, and strict mode enforcement. Also excludes certain directories and files from compilation.", "metadata": {"repo": "magiclabs/wagmi-magic-connector", "file": "tsconfig.json", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** `magiclabs/wagmi-magic-connector`\n\n**Purpose:** A Wagmi connector for Magic API, enabling seamless integration with Magic's authentication and identity verification services in React applications.\n\n**Content:**\n\n* Code for a custom Wagmi connector\n* Documentation on how to use the connector in your project\n* Potential example code or demo apps demonstrating the connector's usage", "file_summary": "Here is a concise summary of the file 'tsconfig.json':\n\n**Configures TypeScript compiler settings**, including output path, module resolution, and strictness, while excluding specific directories and files from compilation."}

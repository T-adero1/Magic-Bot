{"code": "\nconst eleventyNavigationPlugin = require(\"@11ty/eleventy-navigation\");\n\nmodule.exports = function(eleventyConfig) {\n    eleventyConfig.addWatchTarget(\"/src/sass\");\n    eleventyConfig.addPassthroughCopy(\"/src/css\");\n    eleventyConfig.addPlugin(eleventyNavigationPlugin);\n\n    eleventyConfig.addFilter(\"randomPost\", (arr) => {\n        arr.sort(() => {\n            return 0.5 - Math.random();\n        })\n        return arr.slice(0, 1);\n    });\n\n    return {\n        dir: {\n            input: \"src\",\n            output: \"public\",\n        }\n    }\n}", "explanation": "**Summary:**\n\nThis is an Eleventy configuration file that sets up a website build process. It:\n\n* Watches and compiles SCSS files in `/src/sass` to CSS files in `/src/css`\n* Adds the `eleventy-navigation` plugin for navigation bar generation\n* Creates a custom filter called `randomPost` that returns a random item from an array\n* Specifies the input directory as `src` and output directory as `public`", "metadata": {"repo": "magiclabs/example-11ty", "file": ".eleventy.js", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "The `magiclabs/example-11ty` repository is a demonstration project showcasing the integration of 11ty (a static site generator) with Magic Labs, a headless database and backend solution. \n\nThe repository provides a simple example blog application with frontend and backend components, illustrating how to:\n\n- Set up an 11ty project\n- Integrate Magic Labs for data storage and authentication\n- Create a simple blog with user-generated content\n- Configure frontend routes and render dynamic data using 11ty's templating engine\n\nIt serves as a starting point for developers to build more complex web applications using 11ty and Magic Labs.", "file_summary": "Here's a concise and holistic summary of the '.eleventy.js' file:\n\n**Eleventy Configuration File: `.eleventy.js`**\n\nThis configuration file sets up an Eleventy website build process with the following features:\n\n* SCSS compilation (`/src/sass` to `/src/css`)\n* Navigation bar generation via `eleventy-navigation` plugin\n* Custom `randomPost` filter for retrieving random array items\n* Standard input (`src`) and output (`public`) directories.\n\nThis file centralizes configuration for building and optimizing Eleventy-based websites."}
{"code": "\n# Demo\nHere's a demo of the Magic x 11ty blog: [example-11ty.vercel.app](example-11ty.vercel.app).\n\n# Quick Start\n1. `git clone https://github.com/seemcat/magic-11ty.git`\n2. `cd magic-11ty`\n3. `npm install`\n4. Grab your `Public Key` from your [**Magic Dashboard**](https://dashboard.magic.link) and paste it into header.njk.\n`npm start`\n\n# Tutorial\n\ud83e\ude84 For a step-by-step tutorial on how to integrate Magic with 11ty: [https://magic.link/posts/magic-11ty](https://magic.link/posts/magic-11ty). \ud83c\udf70\n", "explanation": "This text provides a step-by-step guide to quickly set up a Magic x 11ty blog, including cloning the repository, installing dependencies, and configuring Magic authentication.", "metadata": {"repo": "magiclabs/example-11ty", "file": "README.md", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "The `magiclabs/example-11ty` repository is a demonstration project showcasing the integration of 11ty (a static site generator) with Magic Labs, a headless database and backend solution. \n\nThe repository provides a simple example blog application with frontend and backend components, illustrating how to:\n\n- Set up an 11ty project\n- Integrate Magic Labs for data storage and authentication\n- Create a simple blog with user-generated content\n- Configure frontend routes and render dynamic data using 11ty's templating engine\n\nIt serves as a starting point for developers to build more complex web applications using 11ty and Magic Labs.", "file_summary": "# README.md\n\n## Setting up a Magic x 11ty Blog\n\nThis guide provides a quick setup process for a Magic x 11ty blog, covering:\n\n* Cloning the repository\n* Installing dependencies\n* Configuring Magic authentication\n\nFollow the step-by-step instructions to get started."}
{"code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Post 1</title>\n    <link rel=\"stylesheet\" href=\"/css/style.css\" />\n</head>\n\n<body>\n<!-- 1. Get Magic SDK -->\n<script src=\"https://cdn.jsdelivr.net/npm/magic-sdk/dist/magic.js\"></script>\n<!-- 2. Initialize Magic -->\n<script>\n  const magic = new Magic(\"pk_live_DD34028215F74A14\"); // Replace with your public key\n</script>\n\n<!-- 3. Add loader to wait for Magic SDK -->\n<div id=\"loader\" class=\"loader\">\n  <img src=\"https://uploads-ssl.webflow.com/5fea770e7aaf96ddaa86827a/5fea8840f0097516e5f5f931_wSdvIvS.gif\" class=\"loaderImage\"/>\n</div>\n\n<!-- 4. Create our Navigation links -->\n<a id=\"home\" href=\"/\">Home</a> \u2661\n<a id=\"profile\" href=\"/profile/\">Profile</a> \u2661\n<a id=\"login\" href=\"/login\">Login</a> \u2661\n<button id=\"logout\" onclick=\"logout()\">Logout</button>\n", "explanation": "**Summary**\n\nThis HTML block sets up a basic web page with the following functionality:\n\n* Defines the document type and character encoding\n* Includes a link to a stylesheet and metadata for the page\n* Initializes the Magic SDK for authentication\n* Displays a loader image while waiting for the SDK to load\n* Provides navigation links for Home, Profile, Login, and Logout\n\nNote: The Magic SDK is initialized with a public key that should be replaced with the actual key.", "metadata": {"repo": "magiclabs/example-11ty", "file": "public/articles/post-1/index.html", "chunk_number": 1, "total_chunks": 4}, "repository_explanation": "The `magiclabs/example-11ty` repository is a demonstration project showcasing the integration of 11ty (a static site generator) with Magic Labs, a headless database and backend solution. \n\nThe repository provides a simple example blog application with frontend and backend components, illustrating how to:\n\n- Set up an 11ty project\n- Integrate Magic Labs for data storage and authentication\n- Create a simple blog with user-generated content\n- Configure frontend routes and render dynamic data using 11ty's templating engine\n\nIt serves as a starting point for developers to build more complex web applications using 11ty and Magic Labs.", "file_summary": "Here's a holistic summary of the file 'public/articles/post-1/index.html':\n\nThis HTML file sets up a basic web page with navigation links for Home, Profile, Login, and Logout, leveraging the Magic SDK for authentication. The file initializes the Magic SDK, displays a loader image, and controls user access to different pages based on their login status. It redirects logged-in users from public pages to the root URL and logged-out users from private pages to the login page, also handling logout functionality through the Magic SDK."}
{"code": "<!-- 5. Update visible pages depending on whether or not the user is logged in -->\n<script>\nlet privatePages = [\"/profile/\", \"/\", \"/articles/post-1/\", \"/articles/post-2/\", \"/articles/post-3/\"];\nlet publicPages = [\"/login/\"];\n\nconst loginElement = document.querySelector(\"#login\");\nconst profileElement = document.querySelector(\"#profile\");\nconst logoutElement = document.querySelector(\"#logout\");\nconst homeElement = document.querySelector(\"#home\");\nconst loaderElement = document.querySelector(\"#loader\");\n\n// Get the user & check whether or not they are logged in.\n// Show or hide pages depending on the outcome.\nconst getUser = async () => {\n  // Gets the page user is currently on\n  const currentPath = window.location.pathname;\n  const test = window.location.origin\n  console.log('currentPath: ', currentPath);\n  console.log('test: ', test);\n\n  // Checks if user is currently logged into the Magic SDK\n  const isLoggedIn = await magic.user.isLoggedIn();\n  console.log('isLoggedIn: ', isLoggedIn)\n", "explanation": "This block of code checks if a user is logged in and updates the visibility of specific pages based on their login status. It:\n\n* Defines arrays of private and public pages\n* Retrieves the current page and checks if the user is logged in using the Magic SDK\n* Intends to show or hide pages (_loginElement_, _profileElement_, _logoutElement_, _homeElement_, _loaderElement_) based on the login status, although this functionality is not fully implemented in this snippet.", "metadata": {"repo": "magiclabs/example-11ty", "file": "public/articles/post-1/index.html", "chunk_number": 2, "total_chunks": 4}, "repository_explanation": "The `magiclabs/example-11ty` repository is a demonstration project showcasing the integration of 11ty (a static site generator) with Magic Labs, a headless database and backend solution. \n\nThe repository provides a simple example blog application with frontend and backend components, illustrating how to:\n\n- Set up an 11ty project\n- Integrate Magic Labs for data storage and authentication\n- Create a simple blog with user-generated content\n- Configure frontend routes and render dynamic data using 11ty's templating engine\n\nIt serves as a starting point for developers to build more complex web applications using 11ty and Magic Labs.", "file_summary": "Here's a holistic summary of the file 'public/articles/post-1/index.html':\n\nThis HTML file sets up a basic web page with navigation links for Home, Profile, Login, and Logout, leveraging the Magic SDK for authentication. The file initializes the Magic SDK, displays a loader image, and controls user access to different pages based on their login status. It redirects logged-in users from public pages to the root URL and logged-out users from private pages to the login page, also handling logout functionality through the Magic SDK."}
{"code": "  // If the user is logged in...\n  if (isLoggedIn) {\n    console.log('isLoggedIn inside IF statement: ', isLoggedIn)\n    // ...prevent them from accessing public pages.\n    if (publicPages.includes(currentPath)) {\n      window.location.replace(\"/\");\n    } else {\n      // Or hide links they don\u2019t need to see\n      loginElement.style.display = \"none\";\n      // Get rid of the loader once the user reaches the correct page\n      loaderElement.style.display = \"none\";\n    }\n  } else {\n    // If a logged out user tries to to access a private page, send them back to the login page\n    if (privatePages.includes(currentPath)) {\n      window.location.replace(\"/login\");\n    } else {\n      // Hide links logged out users shouldn't be able to see\n      profileElement.style.display = \"none\";\n      logoutElement.style.display = \"none\";\n      homeElement.style.display = \"none\";\n      // Get rid of the loader once the user reaches the correct page\n      loader.style.display = \"none\";\n    }\n  }\n};\n\ngetUser();\n</script>\n", "explanation": "**Purpose:** This block of code controls user access to different pages based on their login status.\n\n**Functionality:**\n\n* If the user is logged in, it redirects them from public pages to the root URL and hides certain navigation elements.\n* If the user is not logged in, it redirects them from private pages to the login page and hides certain navigation elements.\n* The code also hides the loader element once the user reaches the correct page.", "metadata": {"repo": "magiclabs/example-11ty", "file": "public/articles/post-1/index.html", "chunk_number": 3, "total_chunks": 4}, "repository_explanation": "The `magiclabs/example-11ty` repository is a demonstration project showcasing the integration of 11ty (a static site generator) with Magic Labs, a headless database and backend solution. \n\nThe repository provides a simple example blog application with frontend and backend components, illustrating how to:\n\n- Set up an 11ty project\n- Integrate Magic Labs for data storage and authentication\n- Create a simple blog with user-generated content\n- Configure frontend routes and render dynamic data using 11ty's templating engine\n\nIt serves as a starting point for developers to build more complex web applications using 11ty and Magic Labs.", "file_summary": "Here's a holistic summary of the file 'public/articles/post-1/index.html':\n\nThis HTML file sets up a basic web page with navigation links for Home, Profile, Login, and Logout, leveraging the Magic SDK for authentication. The file initializes the Magic SDK, displays a loader image, and controls user access to different pages based on their login status. It redirects logged-in users from public pages to the root URL and logged-out users from private pages to the login page, also handling logout functionality through the Magic SDK."}
{"code": "<!-- 6. Log out the currently authenticated Magic user -->\n<script>\n  const logout = async () => {\n    try {\n      await magic\n        .user\n        .logout();\n      window\n        .location\n        .replace(\"/login\");\n    } catch (error) {\n      // Handle errors if required!\n      console.log('Ran into this error while logging out: ', error);\n    }\n    console.log('WHOO! User has logged out of all Magic SDK sessions.');\n  }\n</script>\n\n\n    <h1>Post 1</h1>\n\n    \n\n</body>\n</html>\n", "explanation": "**Logout Functionality**\n\nThis block logs out the currently authenticated Magic user from all sessions. When the `logout` function is called, it sends a logout request to the Magic SDK and then redirects the user to the login page. If an error occurs during the process, it is caught and logged to the console. Upon successful logout, a confirmation log message is displayed.", "metadata": {"repo": "magiclabs/example-11ty", "file": "public/articles/post-1/index.html", "chunk_number": 4, "total_chunks": 4}, "repository_explanation": "The `magiclabs/example-11ty` repository is a demonstration project showcasing the integration of 11ty (a static site generator) with Magic Labs, a headless database and backend solution. \n\nThe repository provides a simple example blog application with frontend and backend components, illustrating how to:\n\n- Set up an 11ty project\n- Integrate Magic Labs for data storage and authentication\n- Create a simple blog with user-generated content\n- Configure frontend routes and render dynamic data using 11ty's templating engine\n\nIt serves as a starting point for developers to build more complex web applications using 11ty and Magic Labs.", "file_summary": "Here's a holistic summary of the file 'public/articles/post-1/index.html':\n\nThis HTML file sets up a basic web page with navigation links for Home, Profile, Login, and Logout, leveraging the Magic SDK for authentication. The file initializes the Magic SDK, displays a loader image, and controls user access to different pages based on their login status. It redirects logged-in users from public pages to the root URL and logged-out users from private pages to the login page, also handling logout functionality through the Magic SDK."}
{"code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Post 2</title>\n    <link rel=\"stylesheet\" href=\"/css/style.css\" />\n</head>\n\n<body>\n<!-- 1. Get Magic SDK -->\n<script src=\"https://cdn.jsdelivr.net/npm/magic-sdk/dist/magic.js\"></script>\n<!-- 2. Initialize Magic -->\n<script>\n  const magic = new Magic(\"pk_live_DD34028215F74A14\"); // Replace with your public key\n</script>\n\n<!-- 3. Add loader to wait for Magic SDK -->\n<div id=\"loader\" class=\"loader\">\n  <img src=\"https://uploads-ssl.webflow.com/5fea770e7aaf96ddaa86827a/5fea8840f0097516e5f5f931_wSdvIvS.gif\" class=\"loaderImage\"/>\n</div>\n\n<!-- 4. Create our Navigation links -->\n<a id=\"home\" href=\"/\">Home</a> \u2661\n<a id=\"profile\" href=\"/profile/\">Profile</a> \u2661\n<a id=\"login\" href=\"/login\">Login</a> \u2661\n<button id=\"logout\" onclick=\"logout()\">Logout</button>\n", "explanation": "**Summary**\n\nThis HTML block sets up a basic webpage with a Magic SDK integration, which is a decentralized authentication platform. The code:\n\n* Initializes the HTML document with a DOCTYPE, language, character encoding, and metadata.\n* Links to a stylesheet for styling.\n* Loads the Magic SDK from a CDN.\n* Initializes the Magic SDK with a public key (which needs to be replaced with a valid key).\n* Displays a loader while the SDK loads.\n* Creates navigation links for Home, Profile, Login, and Logout buttons.\n\nNote that the Logout button has an onclick event handler that is not defined in this code snippet.", "metadata": {"repo": "magiclabs/example-11ty", "file": "public/articles/post-2/index.html", "chunk_number": 1, "total_chunks": 4}, "repository_explanation": "The `magiclabs/example-11ty` repository is a demonstration project showcasing the integration of 11ty (a static site generator) with Magic Labs, a headless database and backend solution. \n\nThe repository provides a simple example blog application with frontend and backend components, illustrating how to:\n\n- Set up an 11ty project\n- Integrate Magic Labs for data storage and authentication\n- Create a simple blog with user-generated content\n- Configure frontend routes and render dynamic data using 11ty's templating engine\n\nIt serves as a starting point for developers to build more complex web applications using 11ty and Magic Labs.", "file_summary": "**Summary of public/articles/post-2/index.html**\n\nThis HTML file sets up a webpage with Magic SDK integration for decentralized authentication. It initializes the Magic SDK with a public key, loads a stylesheet, and creates navigation links for Home, Profile, Login, and Logout. The script checks the user's login status using the Magic SDK and controls the visibility of UI elements accordingly, redirecting users to the correct page if they try to access restricted areas. Upon clicking the Logout button, it logs out the user using the Magic SDK's `logout` function and redirects them to the login page."}
{"code": "<!-- 5. Update visible pages depending on whether or not the user is logged in -->\n<script>\nlet privatePages = [\"/profile/\", \"/\", \"/articles/post-1/\", \"/articles/post-2/\", \"/articles/post-3/\"];\nlet publicPages = [\"/login/\"];\n\nconst loginElement = document.querySelector(\"#login\");\nconst profileElement = document.querySelector(\"#profile\");\nconst logoutElement = document.querySelector(\"#logout\");\nconst homeElement = document.querySelector(\"#home\");\nconst loaderElement = document.querySelector(\"#loader\");\n\n// Get the user & check whether or not they are logged in.\n// Show or hide pages depending on the outcome.\nconst getUser = async () => {\n  // Gets the page user is currently on\n  const currentPath = window.location.pathname;\n  const test = window.location.origin\n  console.log('currentPath: ', currentPath);\n  console.log('test: ', test);\n\n  // Checks if user is currently logged into the Magic SDK\n  const isLoggedIn = await magic.user.isLoggedIn();\n  console.log('isLoggedIn: ', isLoggedIn)\n", "explanation": "**Purpose and Functionality Summary**\n\nThis code block updates the visibility of web pages based on the user's login status. It checks if the user is logged in using the Magic SDK, then hides or shows specific pages accordingly. The script differentiates between private and public pages, controlling the visibility of elements with IDs `#login`, `#profile`, `#logout`, and `#home` based on the user's authentication status.", "metadata": {"repo": "magiclabs/example-11ty", "file": "public/articles/post-2/index.html", "chunk_number": 2, "total_chunks": 4}, "repository_explanation": "The `magiclabs/example-11ty` repository is a demonstration project showcasing the integration of 11ty (a static site generator) with Magic Labs, a headless database and backend solution. \n\nThe repository provides a simple example blog application with frontend and backend components, illustrating how to:\n\n- Set up an 11ty project\n- Integrate Magic Labs for data storage and authentication\n- Create a simple blog with user-generated content\n- Configure frontend routes and render dynamic data using 11ty's templating engine\n\nIt serves as a starting point for developers to build more complex web applications using 11ty and Magic Labs.", "file_summary": "**Summary of public/articles/post-2/index.html**\n\nThis HTML file sets up a webpage with Magic SDK integration for decentralized authentication. It initializes the Magic SDK with a public key, loads a stylesheet, and creates navigation links for Home, Profile, Login, and Logout. The script checks the user's login status using the Magic SDK and controls the visibility of UI elements accordingly, redirecting users to the correct page if they try to access restricted areas. Upon clicking the Logout button, it logs out the user using the Magic SDK's `logout` function and redirects them to the login page."}
{"code": "  // If the user is logged in...\n  if (isLoggedIn) {\n    console.log('isLoggedIn inside IF statement: ', isLoggedIn)\n    // ...prevent them from accessing public pages.\n    if (publicPages.includes(currentPath)) {\n      window.location.replace(\"/\");\n    } else {\n      // Or hide links they don\u2019t need to see\n      loginElement.style.display = \"none\";\n      // Get rid of the loader once the user reaches the correct page\n      loaderElement.style.display = \"none\";\n    }\n  } else {\n    // If a logged out user tries to to access a private page, send them back to the login page\n    if (privatePages.includes(currentPath)) {\n      window.location.replace(\"/login\");\n    } else {\n      // Hide links logged out users shouldn't be able to see\n      profileElement.style.display = \"none\";\n      logoutElement.style.display = \"none\";\n      homeElement.style.display = \"none\";\n      // Get rid of the loader once the user reaches the correct page\n      loader.style.display = \"none\";\n    }\n  }\n};\n\ngetUser();\n</script>\n", "explanation": "**Summary**\n\nThis code block controls user access and visibility of UI elements based on their login status. It checks whether the user is logged in and redirects them to the correct page if they try to access restricted areas. If logged in, it hides unnecessary links, and if logged out, it hides links that require authentication.", "metadata": {"repo": "magiclabs/example-11ty", "file": "public/articles/post-2/index.html", "chunk_number": 3, "total_chunks": 4}, "repository_explanation": "The `magiclabs/example-11ty` repository is a demonstration project showcasing the integration of 11ty (a static site generator) with Magic Labs, a headless database and backend solution. \n\nThe repository provides a simple example blog application with frontend and backend components, illustrating how to:\n\n- Set up an 11ty project\n- Integrate Magic Labs for data storage and authentication\n- Create a simple blog with user-generated content\n- Configure frontend routes and render dynamic data using 11ty's templating engine\n\nIt serves as a starting point for developers to build more complex web applications using 11ty and Magic Labs.", "file_summary": "**Summary of public/articles/post-2/index.html**\n\nThis HTML file sets up a webpage with Magic SDK integration for decentralized authentication. It initializes the Magic SDK with a public key, loads a stylesheet, and creates navigation links for Home, Profile, Login, and Logout. The script checks the user's login status using the Magic SDK and controls the visibility of UI elements accordingly, redirecting users to the correct page if they try to access restricted areas. Upon clicking the Logout button, it logs out the user using the Magic SDK's `logout` function and redirects them to the login page."}
{"code": "<!-- 6. Log out the currently authenticated Magic user -->\n<script>\n  const logout = async () => {\n    try {\n      await magic\n        .user\n        .logout();\n      window\n        .location\n        .replace(\"/login\");\n    } catch (error) {\n      // Handle errors if required!\n      console.log('Ran into this error while logging out: ', error);\n    }\n    console.log('WHOO! User has logged out of all Magic SDK sessions.');\n  }\n</script>\n\n\n    <h1>Post 2</h1>\n\n    \n\n</body>\n</html>\n", "explanation": "**Purpose and Functionality:**\n\nThis code block logs out the currently authenticated Magic user and redirects them to the login page. It uses the Magic SDK's `logout` function and handles any potential errors that may occur during the logout process.", "metadata": {"repo": "magiclabs/example-11ty", "file": "public/articles/post-2/index.html", "chunk_number": 4, "total_chunks": 4}, "repository_explanation": "The `magiclabs/example-11ty` repository is a demonstration project showcasing the integration of 11ty (a static site generator) with Magic Labs, a headless database and backend solution. \n\nThe repository provides a simple example blog application with frontend and backend components, illustrating how to:\n\n- Set up an 11ty project\n- Integrate Magic Labs for data storage and authentication\n- Create a simple blog with user-generated content\n- Configure frontend routes and render dynamic data using 11ty's templating engine\n\nIt serves as a starting point for developers to build more complex web applications using 11ty and Magic Labs.", "file_summary": "**Summary of public/articles/post-2/index.html**\n\nThis HTML file sets up a webpage with Magic SDK integration for decentralized authentication. It initializes the Magic SDK with a public key, loads a stylesheet, and creates navigation links for Home, Profile, Login, and Logout. The script checks the user's login status using the Magic SDK and controls the visibility of UI elements accordingly, redirecting users to the correct page if they try to access restricted areas. Upon clicking the Logout button, it logs out the user using the Magic SDK's `logout` function and redirects them to the login page."}
{"code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Post 3</title>\n    <link rel=\"stylesheet\" href=\"/css/style.css\" />\n</head>\n\n<body>\n<!-- 1. Get Magic SDK -->\n<script src=\"https://cdn.jsdelivr.net/npm/magic-sdk/dist/magic.js\"></script>\n<!-- 2. Initialize Magic -->\n<script>\n  const magic = new Magic(\"pk_live_DD34028215F74A14\"); // Replace with your public key\n</script>\n\n<!-- 3. Add loader to wait for Magic SDK -->\n<div id=\"loader\" class=\"loader\">\n  <img src=\"https://uploads-ssl.webflow.com/5fea770e7aaf96ddaa86827a/5fea8840f0097516e5f5f931_wSdvIvS.gif\" class=\"loaderImage\"/>\n</div>\n\n<!-- 4. Create our Navigation links -->\n<a id=\"home\" href=\"/\">Home</a> \u2661\n<a id=\"profile\" href=\"/profile/\">Profile</a> \u2661\n<a id=\"login\" href=\"/login\">Login</a> \u2661\n<button id=\"logout\" onclick=\"logout()\">Logout</button>\n", "explanation": "**Summary:**\n\nThis HTML block serves as a basic template for a web page, specifically set up for integration with the Magic authentication platform. It includes:\n\n1. Standard HTML structure and metadata\n2. Importing Magic SDK and initializing it with a public key\n3. A loading animation to wait for the Magic SDK to load\n4. Navigation links for Home, Profile, Login, and a Logout button that triggers a `logout()` function.\n\nThe code is prepared for further authentication and user session management using the Magic platform.", "metadata": {"repo": "magiclabs/example-11ty", "file": "public/articles/post-3/index.html", "chunk_number": 1, "total_chunks": 4}, "repository_explanation": "The `magiclabs/example-11ty` repository is a demonstration project showcasing the integration of 11ty (a static site generator) with Magic Labs, a headless database and backend solution. \n\nThe repository provides a simple example blog application with frontend and backend components, illustrating how to:\n\n- Set up an 11ty project\n- Integrate Magic Labs for data storage and authentication\n- Create a simple blog with user-generated content\n- Configure frontend routes and render dynamic data using 11ty's templating engine\n\nIt serves as a starting point for developers to build more complex web applications using 11ty and Magic Labs."}
{"code": "<!-- 5. Update visible pages depending on whether or not the user is logged in -->\n<script>\nlet privatePages = [\"/profile/\", \"/\", \"/articles/post-1/\", \"/articles/post-2/\", \"/articles/post-3/\"];\nlet publicPages = [\"/login/\"];\n\nconst loginElement = document.querySelector(\"#login\");\nconst profileElement = document.querySelector(\"#profile\");\nconst logoutElement = document.querySelector(\"#logout\");\nconst homeElement = document.querySelector(\"#home\");\nconst loaderElement = document.querySelector(\"#loader\");\n\n// Get the user & check whether or not they are logged in.\n// Show or hide pages depending on the outcome.\nconst getUser = async () => {\n  // Gets the page user is currently on\n  const currentPath = window.location.pathname;\n  const test = window.location.origin\n  console.log('currentPath: ', currentPath);\n  console.log('test: ', test);\n\n  // Checks if user is currently logged into the Magic SDK\n  const isLoggedIn = await magic.user.isLoggedIn();\n  console.log('isLoggedIn: ', isLoggedIn)\n", "explanation": "**Summary**\n\nThis code block checks whether a user is logged in or not using the Magic SDK, and updates the visibility of certain web pages accordingly. It defines arrays of private and public pages, retrieves the user's login status, and logs relevant information to the console. Based on the login status, it can hide or show specific HTML elements with IDs `login`, `profile`, `logout`, `home`, and `loader`.", "metadata": {"repo": "magiclabs/example-11ty", "file": "public/articles/post-3/index.html", "chunk_number": 2, "total_chunks": 4}, "repository_explanation": "The `magiclabs/example-11ty` repository is a demonstration project showcasing the integration of 11ty (a static site generator) with Magic Labs, a headless database and backend solution. \n\nThe repository provides a simple example blog application with frontend and backend components, illustrating how to:\n\n- Set up an 11ty project\n- Integrate Magic Labs for data storage and authentication\n- Create a simple blog with user-generated content\n- Configure frontend routes and render dynamic data using 11ty's templating engine\n\nIt serves as a starting point for developers to build more complex web applications using 11ty and Magic Labs."}
{"code": "  // If the user is logged in...\n  if (isLoggedIn) {\n    console.log('isLoggedIn inside IF statement: ', isLoggedIn)\n    // ...prevent them from accessing public pages.\n    if (publicPages.includes(currentPath)) {\n      window.location.replace(\"/\");\n    } else {\n      // Or hide links they don\u2019t need to see\n      loginElement.style.display = \"none\";\n      // Get rid of the loader once the user reaches the correct page\n      loaderElement.style.display = \"none\";\n    }\n  } else {\n    // If a logged out user tries to to access a private page, send them back to the login page\n    if (privatePages.includes(currentPath)) {\n      window.location.replace(\"/login\");\n    } else {\n      // Hide links logged out users shouldn't be able to see\n      profileElement.style.display = \"none\";\n      logoutElement.style.display = \"none\";\n      homeElement.style.display = \"none\";\n      // Get rid of the loader once the user reaches the correct page\n      loader.style.display = \"none\";\n    }\n  }\n};\n\ngetUser();\n</script>\n", "explanation": "This code block controls page access and element visibility based on user login status. \n\n- If a user is logged in, it:\n  - Redirects them from public pages to the root directory (\"/\").\n  - Hides irrelevant login links and loader elements.\n\n- If a user is logged out:\n  - Redirects them from private pages to the login page (\"/login\").\n  - Hides links to private pages and loader elements.\n\nIt ensures users see only relevant content and are redirected to the correct pages based on their login status.", "metadata": {"repo": "magiclabs/example-11ty", "file": "public/articles/post-3/index.html", "chunk_number": 3, "total_chunks": 4}, "repository_explanation": "The `magiclabs/example-11ty` repository is a demonstration project showcasing the integration of 11ty (a static site generator) with Magic Labs, a headless database and backend solution. \n\nThe repository provides a simple example blog application with frontend and backend components, illustrating how to:\n\n- Set up an 11ty project\n- Integrate Magic Labs for data storage and authentication\n- Create a simple blog with user-generated content\n- Configure frontend routes and render dynamic data using 11ty's templating engine\n\nIt serves as a starting point for developers to build more complex web applications using 11ty and Magic Labs."}
{"code": "<!-- 6. Log out the currently authenticated Magic user -->\n<script>\n  const logout = async () => {\n    try {\n      await magic\n        .user\n        .logout();\n      window\n        .location\n        .replace(\"/login\");\n    } catch (error) {\n      // Handle errors if required!\n      console.log('Ran into this error while logging out: ', error);\n    }\n    console.log('WHOO! User has logged out of all Magic SDK sessions.');\n  }\n</script>\n\n\n    <h1>Post 3</h1>\n\n    \n\n</body>\n</html>\n", "explanation": "**Logout Functionality**\n\nThis block logs out the currently authenticated Magic user and redirects them to the login page. It achieves this by:\n\n1. Calling the `logout` method on the Magic SDK user object.\n2. Replacing the current window location with the login page upon successful logout.\n3. Catching and logging any errors that occur during the logout process.\n4. Logging a success message upon successful logout.", "metadata": {"repo": "magiclabs/example-11ty", "file": "public/articles/post-3/index.html", "chunk_number": 4, "total_chunks": 4}, "repository_explanation": "The `magiclabs/example-11ty` repository is a demonstration project showcasing the integration of 11ty (a static site generator) with Magic Labs, a headless database and backend solution. \n\nThe repository provides a simple example blog application with frontend and backend components, illustrating how to:\n\n- Set up an 11ty project\n- Integrate Magic Labs for data storage and authentication\n- Create a simple blog with user-generated content\n- Configure frontend routes and render dynamic data using 11ty's templating engine\n\nIt serves as a starting point for developers to build more complex web applications using 11ty and Magic Labs."}
{"code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Blog</title>\n    <link rel=\"stylesheet\" href=\"/css/style.css\" />\n</head>\n<body>\n\n<ul><li><a href=\"/\">Home</a></li>\n<li><a href=\"/profile/\">Profile</a></li>\n<li><a href=\"/login/\">Login</a></li>\n<li><a href=\"/logout/\">Logout</a></li></ul>\n    <h1>Blog</h1>\n\n    <h2>Blog posts</h2>\n<ul>\n<li><a href=\"/blog/my-first-post/\">My second post</a></li>\n<li><a href=\"/blog/my-second-post/\">My first post</a></li>\n</ul>\n\n</body>\n</html>", "explanation": "This block is HTML code that serves as a basic webpage template for a blog, including:\n\n* A navigation menu with links to home, profile, login, and logout pages\n* A title and heading for the blog page\n* A list of two blog posts with corresponding links\n\nIn essence, it's a simple layout for displaying a blog with some basic navigation.", "metadata": {"repo": "magiclabs/example-11ty", "file": "public/blog/index.html", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "This repository appears to be an example project for Eleventy (11ty), a static site generator. The purpose is likely to showcase best practices or specific features of 11ty.\n\nThe content likely includes:\n\n* A sample website structure\n* Configuration files (e.g., `.eleventy.js`)\n* HTML templates and Markdown pages\n* Possibly, example data files or APIs for demonstration purposes\n\nIn essence, it's a sandbox project for developers to learn from or experiment with Eleventy features.", "file_summary": "Here is a concise summary:\n\n**public/blog/index.html**\n\nA basic HTML template for a blog webpage, featuring navigation menu links and a list of 2 blog posts with corresponding links."}
{"code": "<p>First post content.</p>\n", "explanation": "This block is a paragraph containing basic HTML content, specifically a single <p> tag with a short text string.", "metadata": {"repo": "magiclabs/example-11ty", "file": "public/blog/my-first-post copy/index.html", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "This repository appears to be an example project for Eleventy (11ty), a static site generator. The purpose is likely to showcase best practices or specific features of 11ty.\n\nThe content likely includes:\n\n* A sample website structure\n* Configuration files (e.g., `.eleventy.js`)\n* HTML templates and Markdown pages\n* Possibly, example data files or APIs for demonstration purposes\n\nIn essence, it's a sandbox project for developers to learn from or experiment with Eleventy features.", "file_summary": "Here's a concise summary:\n\nThe file 'public/blog/my-first-post copy/index.html' contains a basic HTML page with a single paragraph of text."}
{"code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>My second post</title>\n    <link rel=\"stylesheet\" href=\"/css/style.css\" />\n</head>\n<body>\n\n<ul><li><a href=\"/\">Home</a></li>\n<li><a href=\"/profile/\">Profile</a></li>\n<li><a href=\"/login/\">Login</a></li>\n<li><a href=\"/logout/\">Logout</a></li></ul>\n    <h1>My second post</h1>\n\n    <p>Second post content.</p>\n\n\n</body>\n</html>", "explanation": "This block is an HTML document that serves as a basic web page template, containing:\n\n* A header with metadata (charset, compatibility, viewport settings)\n* A link to an external stylesheet\n* A navigation menu with links to Home, Profile, Login, and Logout pages\n* A title (\"My second post\") and main content paragraph", "metadata": {"repo": "magiclabs/example-11ty", "file": "public/blog/my-first-post/index.html", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "This repository appears to be an example project for Eleventy (11ty), a static site generator. The purpose is likely to showcase best practices or specific features of 11ty.\n\nThe content likely includes:\n\n* A sample website structure\n* Configuration files (e.g., `.eleventy.js`)\n* HTML templates and Markdown pages\n* Possibly, example data files or APIs for demonstration purposes\n\nIn essence, it's a sandbox project for developers to learn from or experiment with Eleventy features.", "file_summary": "Here is a concise summary:\n\n**public/blog/my-first-post/index.html**\n\nA basic web page template with metadata, linked stylesheet, navigation menu, and main content area."}
{"code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>My first post</title>\n    <link rel=\"stylesheet\" href=\"/css/style.css\" />\n</head>\n<body>\n\n<ul><li><a href=\"/\">Home</a></li>\n<li><a href=\"/profile/\">Profile</a></li>\n<li><a href=\"/login/\">Login</a></li>\n<li><a href=\"/logout/\">Logout</a></li></ul>\n    <h1>My first post</h1>\n\n    <p>First post content.</p>\n\n\n</body>\n</html>", "explanation": "This block is an HTML document that:\n\n* Defines a basic web page structure\n* Includes a navigation menu with links to home, profile, login, and logout pages\n* Displays a title (\"My first post\") and content (\"First post content.\") on the main page.", "metadata": {"repo": "magiclabs/example-11ty", "file": "public/blog/my-second-post/index.html", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "This repository appears to be an example project for Eleventy (11ty), a static site generator. The purpose is likely to showcase best practices or specific features of 11ty.\n\nThe content likely includes:\n\n* A sample website structure\n* Configuration files (e.g., `.eleventy.js`)\n* HTML templates and Markdown pages\n* Possibly, example data files or APIs for demonstration purposes\n\nIn essence, it's a sandbox project for developers to learn from or experiment with Eleventy features.", "file_summary": "Here is a concise summary of the file 'public/blog/my-second-post/index.html':\n\nThis HTML document defines a basic web page with navigation menu links, displaying a title and content, but with different text than previously assumed (it's actually \"My second post\" instead of \"My first post\")."}
{"code": "body {\n  font-family: sans-serif;\n  color: palevioletred;\n}\n\n.loader {\n  width: 100%;\n  height: 100%;\n  position: fixed;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: white;\n}\n\n.loaderImage {\n  height: 100px;\n  width: 100px;\n}\n\n/*# sourceMappingURL=style.css.map */\n", "explanation": "This block defines a set of styles for a web page:\n\n* Sets default font and text color.\n* Defines a loader element with full-page dimensions, centered content, and white background.\n* Specifies a size for an image displayed in the loader element.", "metadata": {"repo": "magiclabs/example-11ty", "file": "public/css/style.css", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "This repository appears to be an example project for Eleventy (11ty), a static site generator. The purpose is likely to showcase best practices or specific features of 11ty.\n\nThe content likely includes:\n\n* A sample website structure\n* Configuration files (e.g., `.eleventy.js`)\n* HTML templates and Markdown pages\n* Possibly, example data files or APIs for demonstration purposes\n\nIn essence, it's a sandbox project for developers to learn from or experiment with Eleventy features.", "file_summary": "Here is a concise summary:\n\n**public/css/style.css**\n\nDefines global styles for the web page, including font and text color, as well as customizations for a loader element with a centered image."}
{"code": "{\"version\":3,\"sourceRoot\":\"\",\"sources\":[\"../../src/sass/style.scss\"],\"names\":[],\"mappings\":\"AAAA;EACI;EACA;;;AAGJ;EACI;EACA;EACA;EACA;EACA;EACA;EACA;;;AAGJ;EACI;EACA\",\"file\":\"style.css\"}", "explanation": "This block is a JSON object representing a Webpack module, containing information about a CSS file (\"style.css\") compiled from a SASS source file (\"../../src/sass/style.scss\").", "metadata": {"repo": "magiclabs/example-11ty", "file": "public/css/style.css.map", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "This repository appears to be an example project for Eleventy (11ty), a static site generator. The purpose is likely to showcase best practices or specific features of 11ty.\n\nThe content likely includes:\n\n* A sample website structure\n* Configuration files (e.g., `.eleventy.js`)\n* HTML templates and Markdown pages\n* Possibly, example data files or APIs for demonstration purposes\n\nIn essence, it's a sandbox project for developers to learn from or experiment with Eleventy features.", "file_summary": "Here's a concise summary:\n\n`public/css/style.css.map`: A JSON-formatted Webpack module containing metadata for \"style.css\", which was compiled from a SASS source file \"style.scss\"."}
{"code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>My Cool Blog</title>\n    <link rel=\"stylesheet\" href=\"/css/style.css\" />\n</head>\n\n<body>\n<!-- 1. Get Magic SDK -->\n<script src=\"https://cdn.jsdelivr.net/npm/magic-sdk/dist/magic.js\"></script>\n<!-- 2. Initialize Magic -->\n<script>\n  const magic = new Magic(\"pk_live_DD34028215F74A14\"); // Replace with your public key\n</script>\n\n<!-- 3. Add loader to wait for Magic SDK -->\n<div id=\"loader\" class=\"loader\">\n  <img src=\"https://uploads-ssl.webflow.com/5fea770e7aaf96ddaa86827a/5fea8840f0097516e5f5f931_wSdvIvS.gif\" class=\"loaderImage\"/>\n</div>\n\n<!-- 4. Create our Navigation links -->\n<a id=\"home\" href=\"/\">Home</a> \u2661\n<a id=\"profile\" href=\"/profile/\">Profile</a> \u2661\n<a id=\"login\" href=\"/login\">Login</a> \u2661\n<button id=\"logout\" onclick=\"logout()\">Logout</button>\n", "explanation": "Here is a concise summary of the purpose and functionality of this block:\n\n**Purpose:** Initialize Magic JavaScript SDK for authentication purposes.\n\n**Functionality:**\n\n1. Loads Magic SDK from CDN.\n2. Initializes Magic instance with public key.\n3. Displays loading animation while waiting for Magic SDK to load.\n4. Provides navigation links (Home, Profile, Login) and Logout button.\n5. Allows user to logout using `logout()` function.", "metadata": {"repo": "magiclabs/example-11ty", "file": "public/index.html", "chunk_number": 1, "total_chunks": 5}, "repository_explanation": "This repository appears to be an example project for Eleventy (11ty), a static site generator. The purpose is likely to showcase best practices or specific features of 11ty.\n\nThe content likely includes:\n\n* A sample website structure\n* Configuration files (e.g., `.eleventy.js`)\n* HTML templates and Markdown pages\n* Possibly, example data files or APIs for demonstration purposes\n\nIn essence, it's a sandbox project for developers to learn from or experiment with Eleventy features.", "file_summary": "Here is a concise summary of the file 'public/index.html':\n\nThis HTML file controls user access and authentication using Magic JavaScript SDK. It loads the SDK, initializes the Magic instance, displays navigation links and login/logout buttons, and updates page elements based on user login status. The file also handles logout functionality and redirects users to relevant pages."}
{"code": "<!-- 5. Update visible pages depending on whether or not the user is logged in -->\n<script>\nlet privatePages = [\"/profile/\", \"/\", \"/articles/post-1/\", \"/articles/post-2/\", \"/articles/post-3/\"];\nlet publicPages = [\"/login/\"];\n\nconst loginElement = document.querySelector(\"#login\");\nconst profileElement = document.querySelector(\"#profile\");\nconst logoutElement = document.querySelector(\"#logout\");\nconst homeElement = document.querySelector(\"#home\");\nconst loaderElement = document.querySelector(\"#loader\");\n\n// Get the user & check whether or not they are logged in.\n// Show or hide pages depending on the outcome.\nconst getUser = async () => {\n  // Gets the page user is currently on\n  const currentPath = window.location.pathname;\n  const test = window.location.origin\n  console.log('currentPath: ', currentPath);\n  console.log('test: ', test);\n\n  // Checks if user is currently logged into the Magic SDK\n  const isLoggedIn = await magic.user.isLoggedIn();\n  console.log('isLoggedIn: ', isLoggedIn)\n", "explanation": "Here is a concise summary:\n\n**Block Purpose:** Update visible pages based on user login status.\n\n**Functionality:** Hides or shows specific page elements (e.g., login, profile, logout) depending on whether the user is logged in using Magic SDK.", "metadata": {"repo": "magiclabs/example-11ty", "file": "public/index.html", "chunk_number": 2, "total_chunks": 5}, "repository_explanation": "This repository appears to be an example project for Eleventy (11ty), a static site generator. The purpose is likely to showcase best practices or specific features of 11ty.\n\nThe content likely includes:\n\n* A sample website structure\n* Configuration files (e.g., `.eleventy.js`)\n* HTML templates and Markdown pages\n* Possibly, example data files or APIs for demonstration purposes\n\nIn essence, it's a sandbox project for developers to learn from or experiment with Eleventy features.", "file_summary": "Here is a concise summary of the file 'public/index.html':\n\nThis HTML file controls user access and authentication using Magic JavaScript SDK. It loads the SDK, initializes the Magic instance, displays navigation links and login/logout buttons, and updates page elements based on user login status. The file also handles logout functionality and redirects users to relevant pages."}
{"code": "  // If the user is logged in...\n  if (isLoggedIn) {\n    console.log('isLoggedIn inside IF statement: ', isLoggedIn)\n    // ...prevent them from accessing public pages.\n    if (publicPages.includes(currentPath)) {\n      window.location.replace(\"/\");\n    } else {\n      // Or hide links they don\u2019t need to see\n      loginElement.style.display = \"none\";\n      // Get rid of the loader once the user reaches the correct page\n      loaderElement.style.display = \"none\";\n    }\n  } else {\n    // If a logged out user tries to to access a private page, send them back to the login page\n    if (privatePages.includes(currentPath)) {\n      window.location.replace(\"/login\");\n    } else {\n      // Hide links logged out users shouldn't be able to see\n      profileElement.style.display = \"none\";\n      logoutElement.style.display = \"none\";\n      homeElement.style.display = \"none\";\n      // Get rid of the loader once the user reaches the correct page\n      loader.style.display = \"none\";\n    }\n  }\n};\n\ngetUser();\n</script>\n", "explanation": "Here is a concise summary:\n\n**Purpose:** Control access to web pages based on user login status.\n\n**Functionality:** Redirects users to login or public pages, hides unnecessary links, and removes loader elements accordingly, depending on whether they are logged in or out.", "metadata": {"repo": "magiclabs/example-11ty", "file": "public/index.html", "chunk_number": 3, "total_chunks": 5}, "repository_explanation": "This repository appears to be an example project for Eleventy (11ty), a static site generator. The purpose is likely to showcase best practices or specific features of 11ty.\n\nThe content likely includes:\n\n* A sample website structure\n* Configuration files (e.g., `.eleventy.js`)\n* HTML templates and Markdown pages\n* Possibly, example data files or APIs for demonstration purposes\n\nIn essence, it's a sandbox project for developers to learn from or experiment with Eleventy features.", "file_summary": "Here is a concise summary of the file 'public/index.html':\n\nThis HTML file controls user access and authentication using Magic JavaScript SDK. It loads the SDK, initializes the Magic instance, displays navigation links and login/logout buttons, and updates page elements based on user login status. The file also handles logout functionality and redirects users to relevant pages."}
{"code": "<!-- 6. Log out the currently authenticated Magic user -->\n<script>\n  const logout = async () => {\n    try {\n      await magic\n        .user\n        .logout();\n      window\n        .location\n        .replace(\"/login\");\n    } catch (error) {\n      // Handle errors if required!\n      console.log('Ran into this error while logging out: ', error);\n    }\n    console.log('WHOO! User has logged out of all Magic SDK sessions.');\n  }\n</script>\n\n\n    <h1>My Cool Blog</h1>\n\n    <!-- 0. HTML -->\n<h2>Articles</h2>\n<div id=\"content\">\n</div>\n<!-- 1. Only share articles with logged in users -->\n<script>\n// Assumes user is already logged in\nlet contentElement = document.getElementById(\"content\");\nconst articles = `<ul>\n\n<li><a href=\"/articles/post-1/\">Post 1</li>\n\n<li><a href=\"/articles/post-2/\">Post 2</li>\n\n<li><a href=\"/articles/post-3/\">Post 3</li>\n\n</ul>`;\nconst loginMessage = `Please log in to see my blog!`;\n\ntry {\n  magic.user.isLoggedIn();\n  contentElement.innerHTML = articles;\n} catch {\n  // Handle errors if required!", "explanation": "**Purpose:** Log out a Magic user and redirect to login page.\n\n**Functionality:** A script logs out an authenticated Magic user, catches any potential errors, and redirects the user to the login page via `window.location.replace(\"/login\")`.", "metadata": {"repo": "magiclabs/example-11ty", "file": "public/index.html", "chunk_number": 4, "total_chunks": 5}, "repository_explanation": "This repository appears to be an example project for Eleventy (11ty), a static site generator. The purpose is likely to showcase best practices or specific features of 11ty.\n\nThe content likely includes:\n\n* A sample website structure\n* Configuration files (e.g., `.eleventy.js`)\n* HTML templates and Markdown pages\n* Possibly, example data files or APIs for demonstration purposes\n\nIn essence, it's a sandbox project for developers to learn from or experiment with Eleventy features.", "file_summary": "Here is a concise summary of the file 'public/index.html':\n\nThis HTML file controls user access and authentication using Magic JavaScript SDK. It loads the SDK, initializes the Magic instance, displays navigation links and login/logout buttons, and updates page elements based on user login status. The file also handles logout functionality and redirects users to relevant pages."}
{"code": "  contentElement.innerHTML = loginMessage;\n}\n</script>\n\n\n</body>\n</html>\n", "explanation": "**Block Purpose:** Set HTML element's innerHTML property to a string value.\n\n**Functionality:** Replace the existing content of `contentElement` with the text from `loginMessage`.", "metadata": {"repo": "magiclabs/example-11ty", "file": "public/index.html", "chunk_number": 5, "total_chunks": 5}, "repository_explanation": "This repository appears to be an example project for Eleventy (11ty), a static site generator. The purpose is likely to showcase best practices or specific features of 11ty.\n\nThe content likely includes:\n\n* A sample website structure\n* Configuration files (e.g., `.eleventy.js`)\n* HTML templates and Markdown pages\n* Possibly, example data files or APIs for demonstration purposes\n\nIn essence, it's a sandbox project for developers to learn from or experiment with Eleventy features.", "file_summary": "Here is a concise summary of the file 'public/index.html':\n\nThis HTML file controls user access and authentication using Magic JavaScript SDK. It loads the SDK, initializes the Magic instance, displays navigation links and login/logout buttons, and updates page elements based on user login status. The file also handles logout functionality and redirects users to relevant pages."}
{"code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Login</title>\n    <link rel=\"stylesheet\" href=\"/css/style.css\" />\n</head>\n\n<body>\n<!-- 1. Get Magic SDK -->\n<script src=\"https://cdn.jsdelivr.net/npm/magic-sdk/dist/magic.js\"></script>\n<!-- 2. Initialize Magic -->\n<script>\n  const magic = new Magic(\"pk_live_DD34028215F74A14\"); // Replace with your public key\n</script>\n\n<!-- 3. Add loader to wait for Magic SDK -->\n<div id=\"loader\" class=\"loader\">\n  <img src=\"https://uploads-ssl.webflow.com/5fea770e7aaf96ddaa86827a/5fea8840f0097516e5f5f931_wSdvIvS.gif\" class=\"loaderImage\"/>\n</div>\n\n<!-- 4. Create our Navigation links -->\n<a id=\"home\" href=\"/\">Home</a> \u2661\n<a id=\"profile\" href=\"/profile/\">Profile</a> \u2661\n<a id=\"login\" href=\"/login\">Login</a> \u2661\n<button id=\"logout\" onclick=\"logout()\">Logout</button>\n", "explanation": "**Summary:**\n\nThis block is an HTML snippet that sets up a login interface using Magic, a JavaScript SDK for authentication. It initializes Magic with a public key, adds a loader animation while waiting for the SDK to load, and creates navigation links with a logout button.", "metadata": {"repo": "magiclabs/example-11ty", "file": "public/login/index.html", "chunk_number": 1, "total_chunks": 5}, "repository_explanation": "This repository appears to be an example project for Eleventy (11ty), a static site generator. The purpose is likely to showcase best practices or specific features of 11ty.\n\nThe content likely includes:\n\n* A sample website structure\n* Configuration files (e.g., `.eleventy.js`)\n* HTML templates and Markdown pages\n* Possibly, example data files or APIs for demonstration purposes\n\nIn essence, it's a sandbox project for developers to learn from or experiment with Eleventy features.", "file_summary": "Here is a concise summary of the file 'public/login/index.html':\n\nThis HTML snippet sets up a login interface using Magic SDK authentication, controlling access to private pages based on user login status by hiding or redirecting users accordingly."}
{"code": "<!-- 5. Update visible pages depending on whether or not the user is logged in -->\n<script>\nlet privatePages = [\"/profile/\", \"/\", \"/articles/post-1/\", \"/articles/post-2/\", \"/articles/post-3/\"];\nlet publicPages = [\"/login/\"];\n\nconst loginElement = document.querySelector(\"#login\");\nconst profileElement = document.querySelector(\"#profile\");\nconst logoutElement = document.querySelector(\"#logout\");\nconst homeElement = document.querySelector(\"#home\");\nconst loaderElement = document.querySelector(\"#loader\");\n\n// Get the user & check whether or not they are logged in.\n// Show or hide pages depending on the outcome.\nconst getUser = async () => {\n  // Gets the page user is currently on\n  const currentPath = window.location.pathname;\n  const test = window.location.origin\n  console.log('currentPath: ', currentPath);\n  console.log('test: ', test);\n\n  // Checks if user is currently logged into the Magic SDK\n  const isLoggedIn = await magic.user.isLoggedIn();\n  console.log('isLoggedIn: ', isLoggedIn)\n", "explanation": "Here is a concise summary:\n\n**Purpose:** Update visible pages based on user login status.\n\n**Functionality:** Hides or shows specific page elements (e.g., profile, login) depending on whether the user is logged in using Magic SDK authentication.", "metadata": {"repo": "magiclabs/example-11ty", "file": "public/login/index.html", "chunk_number": 2, "total_chunks": 5}, "repository_explanation": "This repository appears to be an example project for Eleventy (11ty), a static site generator. The purpose is likely to showcase best practices or specific features of 11ty.\n\nThe content likely includes:\n\n* A sample website structure\n* Configuration files (e.g., `.eleventy.js`)\n* HTML templates and Markdown pages\n* Possibly, example data files or APIs for demonstration purposes\n\nIn essence, it's a sandbox project for developers to learn from or experiment with Eleventy features.", "file_summary": "Here is a concise summary of the file 'public/login/index.html':\n\nThis HTML snippet sets up a login interface using Magic SDK authentication, controlling access to private pages based on user login status by hiding or redirecting users accordingly."}
{"code": "  // If the user is logged in...\n  if (isLoggedIn) {\n    console.log('isLoggedIn inside IF statement: ', isLoggedIn)\n    // ...prevent them from accessing public pages.\n    if (publicPages.includes(currentPath)) {\n      window.location.replace(\"/\");\n    } else {\n      // Or hide links they don\u2019t need to see\n      loginElement.style.display = \"none\";\n      // Get rid of the loader once the user reaches the correct page\n      loaderElement.style.display = \"none\";\n    }\n  } else {\n    // If a logged out user tries to to access a private page, send them back to the login page\n    if (privatePages.includes(currentPath)) {\n      window.location.replace(\"/login\");\n    } else {\n      // Hide links logged out users shouldn't be able to see\n      profileElement.style.display = \"none\";\n      logoutElement.style.display = \"none\";\n      homeElement.style.display = \"none\";\n      // Get rid of the loader once the user reaches the correct page\n      loader.style.display = \"none\";\n    }\n  }\n};\n\ngetUser();\n</script>\n", "explanation": "Here is a concise summary:\n\n**Block Purpose:** Restrict access to private pages based on user login status.\n\n**Functionality:**\n\n* If logged in, prevent public page access or hide unnecessary links.\n* If logged out, redirect to login page for private page attempts or hide sensitive links.", "metadata": {"repo": "magiclabs/example-11ty", "file": "public/login/index.html", "chunk_number": 3, "total_chunks": 5}, "repository_explanation": "This repository appears to be an example project for Eleventy (11ty), a static site generator. The purpose is likely to showcase best practices or specific features of 11ty.\n\nThe content likely includes:\n\n* A sample website structure\n* Configuration files (e.g., `.eleventy.js`)\n* HTML templates and Markdown pages\n* Possibly, example data files or APIs for demonstration purposes\n\nIn essence, it's a sandbox project for developers to learn from or experiment with Eleventy features.", "file_summary": "Here is a concise summary of the file 'public/login/index.html':\n\nThis HTML snippet sets up a login interface using Magic SDK authentication, controlling access to private pages based on user login status by hiding or redirecting users accordingly."}
{"code": "<!-- 6. Log out the currently authenticated Magic user -->\n<script>\n  const logout = async () => {\n    try {\n      await magic\n        .user\n        .logout();\n      window\n        .location\n        .replace(\"/login\");\n    } catch (error) {\n      // Handle errors if required!\n      console.log('Ran into this error while logging out: ', error);\n    }\n    console.log('WHOO! User has logged out of all Magic SDK sessions.');\n  }\n</script>\n\n\n    <h1>Login</h1>\n\n    <!-- 0. HTML -->\n<form id=\"form\">\n    <input id=\"input\" type=\"email\" />\n    <button type=\"submit\">Login</button>\n</form>\n<div id=\"result\">\n<!-- 1. Use loginWithMagicLink to authenticate user -->\n<script>\nconst form = document.querySelector(\"#form\");\nconst input = document.querySelector(\"#input\");\nconst result = document.querySelector(\"#result\");\nform.onsubmit = async (e) => {\n  e.preventDefault();\n  const email = input.value;\n  const didToken = await magic.auth.loginWithMagicLink({\n    email,\n  });\n  result.innerText = didToken; // Display the user\u2019s DID token", "explanation": "Here is a concise summary:\n\n**Purpose:** This block logs out a Magic user when they click the \"Login\" button.\n\n**Functionality:** When clicked, it sends a logout request using the `magic` library, redirects the user to the login page, and displays a success message upon successful logout.", "metadata": {"repo": "magiclabs/example-11ty", "file": "public/login/index.html", "chunk_number": 4, "total_chunks": 5}, "repository_explanation": "This repository appears to be an example project for Eleventy (11ty), a static site generator. The purpose is likely to showcase best practices or specific features of 11ty.\n\nThe content likely includes:\n\n* A sample website structure\n* Configuration files (e.g., `.eleventy.js`)\n* HTML templates and Markdown pages\n* Possibly, example data files or APIs for demonstration purposes\n\nIn essence, it's a sandbox project for developers to learn from or experiment with Eleventy features.", "file_summary": "Here is a concise summary of the file 'public/login/index.html':\n\nThis HTML snippet sets up a login interface using Magic SDK authentication, controlling access to private pages based on user login status by hiding or redirecting users accordingly."}
{"code": "  if (didToken) {\n    window.location.replace(`${window.location.origin}/profile`);\n  }\n};\n</script>\n\n</body>\n</html>\n", "explanation": "**Purpose:** Redirect user to \"/profile\" page when a token is present.\n\n**Functionality:** A JavaScript script that checks for a \"didToken\" condition, then redirects the browser to a new URL if true.", "metadata": {"repo": "magiclabs/example-11ty", "file": "public/login/index.html", "chunk_number": 5, "total_chunks": 5}, "repository_explanation": "This repository appears to be an example project for Eleventy (11ty), a static site generator. The purpose is likely to showcase best practices or specific features of 11ty.\n\nThe content likely includes:\n\n* A sample website structure\n* Configuration files (e.g., `.eleventy.js`)\n* HTML templates and Markdown pages\n* Possibly, example data files or APIs for demonstration purposes\n\nIn essence, it's a sandbox project for developers to learn from or experiment with Eleventy features.", "file_summary": "Here is a concise summary of the file 'public/login/index.html':\n\nThis HTML snippet sets up a login interface using Magic SDK authentication, controlling access to private pages based on user login status by hiding or redirecting users accordingly."}
{"code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Logout</title>\n    <link rel=\"stylesheet\" href=\"/css/style.css\" />\n</head>\n\n<body>\n<!-- 1. Get Magic SDK -->\n<script src=\"https://cdn.jsdelivr.net/npm/magic-sdk/dist/magic.js\"></script>\n<!-- 2. Initialize Magic -->\n<script>\nconst magic = new Magic('pk_live_DD34028215F74A14');\n</script>\n\n<div id=\"loader\" class=\"loader\">\n<img src=\"https://uploads-ssl.webflow.com/5fea770e7aaf96ddaa86827a/5fea8840f0097516e5f5f931_wSdvIvS.gif\" class=\"loaderImage\"/>\n</div>\n\n<a id=\"home\" href=\"/\">Home</a> \u2661\n<a id=\"profile\" href=\"/profile\">Profile</a> \u2661\n<a id=\"login\" href=\"/login\">Login</a> \u2661\n<button id=\"logout\" onclick=\"logOut()\">Logout</button>\n\n<!-- 4. When the user is logged in/logged out. -->\n<script>\n\n  let privatePages = [\n    '/profile',\n    '/',\n    '/logout'\n  ];\n\n  let publicPages = [\n    '/login'\n  ]\n", "explanation": "Here is a concise summary of the purpose and functionality of this block:\n\n**Purpose:** Logout page with user interface and Magic SDK initialization for authentication.\n\n**Functionality:**\n\n* Initializes Magic SDK for login and logout functionality\n* Displays loader animation while logging out\n* Provides links to home, profile, login, and logout pages\n* Logs out user on button click using `logOut()` function (not shown in this snippet)", "metadata": {"repo": "magiclabs/example-11ty", "file": "public/logout/index.html", "chunk_number": 1, "total_chunks": 4}, "repository_explanation": "This repository appears to be an example project for Eleventy (11ty), a static site generator. The purpose is likely to showcase best practices or specific features of 11ty.\n\nThe content likely includes:\n\n* A sample website structure\n* Configuration files (e.g., `.eleventy.js`)\n* HTML templates and Markdown pages\n* Possibly, example data files or APIs for demonstration purposes\n\nIn essence, it's a sandbox project for developers to learn from or experiment with Eleventy features.", "file_summary": "Here is a concise summary of the file 'public/logout/index.html':\n\nThis code logs out Magic SDK-authenticated users by checking their login status, logging them out, and redirecting them to the login page upon clicking the \"Logout\" button."}
{"code": "  const loginElement = document.querySelector(\"#login\")\n  const profileElement = document.querySelector(\"#profile\")\n  const logoutElement = document.querySelector(\"#logout\")\n  const homeElement = document.querySelector(\"#home\")\n  const loaderElement = document.querySelector(\"#loader\")\n\n  // Get the user & check whether or\n  // not the user is logged in. Show or\n  // hide pages depending on the outcome.\n  const getUser = async () => {\n\n    // The page user is currently on\n    const currentPath = window.location.pathname;\n\n    // Checks if a user is currently logged in\n    // to the Magic SDK\n    const isLoggedIn = await magic.user.isLoggedIn();\n\n    // If the user is logged in...\n    if (isLoggedIn) {\n\n      // prevent them from accessing public pages.\n      if (publicPages.includes(currentPath)) {\n        window.location.replace('/');\n      } else {\n        // Or hide links they don\u2019t need to see\n        loginElement.style.display = 'none';\n        // Get rid of loader when user gets to correct page", "explanation": "Here is a concise summary:\n\nThis block of code:\n\n* Retrieves elements by their IDs (login, profile, logout, home, and loader)\n* Checks if a user is logged in using the Magic SDK\n* Based on login status:\n\t+ Hides or shows page links accordingly (e.g. hides login link if logged in)", "metadata": {"repo": "magiclabs/example-11ty", "file": "public/logout/index.html", "chunk_number": 2, "total_chunks": 4}, "repository_explanation": "This repository appears to be an example project for Eleventy (11ty), a static site generator. The purpose is likely to showcase best practices or specific features of 11ty.\n\nThe content likely includes:\n\n* A sample website structure\n* Configuration files (e.g., `.eleventy.js`)\n* HTML templates and Markdown pages\n* Possibly, example data files or APIs for demonstration purposes\n\nIn essence, it's a sandbox project for developers to learn from or experiment with Eleventy features.", "file_summary": "Here is a concise summary of the file 'public/logout/index.html':\n\nThis code logs out Magic SDK-authenticated users by checking their login status, logging them out, and redirecting them to the login page upon clicking the \"Logout\" button."}
{"code": "        loaderElement.style.display = 'none';\n      }\n    } else {\n\n      // If the user is logged out and\n      // they try to access a private page,\n      // send them back to the login page.\n      if (privatePages.includes(currentPath)) {\n        window.location.replace('/login');\n      } else {\n\n        // Or hide links they shouldn\u2019t be able to see\n        profileElement.style.display = 'none';\n        logoutElement.style.display = 'none';\n        homeElement.style.display = 'none';\n        // Get rid of loader when user gets to correct page\n        loader.style.display = 'none';\n      }\n    }\n  };\n\n  getUser();\n</script>\n\n<!-- 3. Log out the currently authenticated Magic user. -->\n<script>\n  const logOut = async () => {\n    try {\n      const isLoggedIn = await magic.user.isLoggedIn();\n      await magic.user.logout();\n      window.location.replace(`${window.location.origin}/login`);\n    } catch (error) {\n      // Handle errors if required!\n      console.log('Ran into this error while logging out: ', error);\n    }", "explanation": "Here is a concise summary:\n\n**Purpose:** Conditional page navigation and hiding elements based on user authentication status.\n\n**Functionality:**\n\n* Hides loader element when user reaches correct page.\n* Redirects user to login page if accessing private pages while logged out.\n* Hides profile, logout, and home links for unauthenticated users.\n* Logs out authenticated Magic user.", "metadata": {"repo": "magiclabs/example-11ty", "file": "public/logout/index.html", "chunk_number": 3, "total_chunks": 4}, "repository_explanation": "This repository appears to be an example project for Eleventy (11ty), a static site generator. The purpose is likely to showcase best practices or specific features of 11ty.\n\nThe content likely includes:\n\n* A sample website structure\n* Configuration files (e.g., `.eleventy.js`)\n* HTML templates and Markdown pages\n* Possibly, example data files or APIs for demonstration purposes\n\nIn essence, it's a sandbox project for developers to learn from or experiment with Eleventy features.", "file_summary": "Here is a concise summary of the file 'public/logout/index.html':\n\nThis code logs out Magic SDK-authenticated users by checking their login status, logging them out, and redirecting them to the login page upon clicking the \"Logout\" button."}
{"code": "    console.log('WHOO! User has logged out of all Magic SDK sessions.');\n  }\n  \n  // Call the logOut function when the user\n  // clicks the Log Out Nav Link.\n  logOutLink.addEventListener('click', logOut);\n</script>\n\n\n    <h1>Logout</h1>\n\n    <!-- 0. HTML -->\n<p><button type=\"submit\" id=\"logOutLink\">Logout</button></p>\n<!-- 3. Log out the currently authenticated Magic user. -->\n<script>\n  const logOut = async () => {\n    try {\n      const isLoggedIn = await magic.user.isLoggedIn();\n      await magic.user.logout();\n      window.location.replace(`${window.location.origin}/login`);\n    } catch (error) {\n      // Handle errors if required!\n      console.log('Ran into this error while logging out: ', error);\n    }\n    console.log('WHOO! User has logged out of all Magic SDK sessions.');\n  }\n  \n  // Call the logOut function when the user\n  // clicks the Log Out Nav Link.\n  logOutLink.addEventListener('click', logOut);\n</script>\n\n\n</body>\n</html>\n", "explanation": "**Summary:**\n\nThis block of code logs out a Magic SDK- authenticated user by:\n\n1. Checking if the user is logged in\n2. Logging them out\n3. Redirecting them to the login page\n\nIt also triggers on-click event when the \"Logout\" button is clicked.", "metadata": {"repo": "magiclabs/example-11ty", "file": "public/logout/index.html", "chunk_number": 4, "total_chunks": 4}, "repository_explanation": "This repository appears to be an example project for Eleventy (11ty), a static site generator. The purpose is likely to showcase best practices or specific features of 11ty.\n\nThe content likely includes:\n\n* A sample website structure\n* Configuration files (e.g., `.eleventy.js`)\n* HTML templates and Markdown pages\n* Possibly, example data files or APIs for demonstration purposes\n\nIn essence, it's a sandbox project for developers to learn from or experiment with Eleventy features.", "file_summary": "Here is a concise summary of the file 'public/logout/index.html':\n\nThis code logs out Magic SDK-authenticated users by checking their login status, logging them out, and redirecting them to the login page upon clicking the \"Logout\" button."}
{"code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Profile</title>\n    <link rel=\"stylesheet\" href=\"/css/style.css\" />\n</head>\n\n<body>\n<!-- 1. Get Magic SDK -->\n<script src=\"https://cdn.jsdelivr.net/npm/magic-sdk/dist/magic.js\"></script>\n<!-- 2. Initialize Magic -->\n<script>\n  const magic = new Magic(\"pk_live_DD34028215F74A14\"); // Replace with your public key\n</script>\n\n<!-- 3. Add loader to wait for Magic SDK -->\n<div id=\"loader\" class=\"loader\">\n  <img src=\"https://uploads-ssl.webflow.com/5fea770e7aaf96ddaa86827a/5fea8840f0097516e5f5f931_wSdvIvS.gif\" class=\"loaderImage\"/>\n</div>\n\n<!-- 4. Create our Navigation links -->\n<a id=\"home\" href=\"/\">Home</a> \u2661\n<a id=\"profile\" href=\"/profile/\">Profile</a> \u2661\n<a id=\"login\" href=\"/login\">Login</a> \u2661\n<button id=\"logout\" onclick=\"logout()\">Logout</button>\n", "explanation": "Here is a concise summary:\n\n**Purpose:** Initialize Magic.js SDK for authentication and add navigation links.\n\n**Functionality:** Displays a loader, adds login/logout buttons, and initializes Magic.js SDK with public key.", "metadata": {"repo": "magiclabs/example-11ty", "file": "public/profile/index.html", "chunk_number": 1, "total_chunks": 5}, "repository_explanation": "This repository appears to be an example project for Eleventy (11ty), a static site generator. The purpose is likely to showcase best practices or specific features of 11ty.\n\nThe content likely includes:\n\n* A sample website structure\n* Configuration files (e.g., `.eleventy.js`)\n* HTML templates and Markdown pages\n* Possibly, example data files or APIs for demonstration purposes\n\nIn essence, it's a sandbox project for developers to learn from or experiment with Eleventy features.", "file_summary": "Here is a concise summary of the file 'public/profile/index.html':\n\n**Purpose:** Initialize Magic.js SDK for authentication and manage page visibility based on user login status.\n\n**Functionality:** Display a loader, add login/logout buttons, and update page visibility according to logged-in or logged-out status. Also includes functionality to log out users and redirect them to the login page."}
{"code": "<!-- 5. Update visible pages depending on whether or not the user is logged in -->\n<script>\nlet privatePages = [\"/profile/\", \"/\", \"/articles/post-1/\", \"/articles/post-2/\", \"/articles/post-3/\"];\nlet publicPages = [\"/login/\"];\n\nconst loginElement = document.querySelector(\"#login\");\nconst profileElement = document.querySelector(\"#profile\");\nconst logoutElement = document.querySelector(\"#logout\");\nconst homeElement = document.querySelector(\"#home\");\nconst loaderElement = document.querySelector(\"#loader\");\n\n// Get the user & check whether or not they are logged in.\n// Show or hide pages depending on the outcome.\nconst getUser = async () => {\n  // Gets the page user is currently on\n  const currentPath = window.location.pathname;\n  const test = window.location.origin\n  console.log('currentPath: ', currentPath);\n  console.log('test: ', test);\n\n  // Checks if user is currently logged into the Magic SDK\n  const isLoggedIn = await magic.user.isLoggedIn();\n  console.log('isLoggedIn: ', isLoggedIn)\n", "explanation": "Here is a concise summary:\n\n**Purpose:** Dynamically update page visibility based on user login status.\n\n**Functionality:** Hides or shows specific pages (e.g., profile, home) depending on whether the user is logged in or not, using a library like Magic SDK to check login status.", "metadata": {"repo": "magiclabs/example-11ty", "file": "public/profile/index.html", "chunk_number": 2, "total_chunks": 5}, "repository_explanation": "This repository appears to be an example project for Eleventy (11ty), a static site generator. The purpose is likely to showcase best practices or specific features of 11ty.\n\nThe content likely includes:\n\n* A sample website structure\n* Configuration files (e.g., `.eleventy.js`)\n* HTML templates and Markdown pages\n* Possibly, example data files or APIs for demonstration purposes\n\nIn essence, it's a sandbox project for developers to learn from or experiment with Eleventy features.", "file_summary": "Here is a concise summary of the file 'public/profile/index.html':\n\n**Purpose:** Initialize Magic.js SDK for authentication and manage page visibility based on user login status.\n\n**Functionality:** Display a loader, add login/logout buttons, and update page visibility according to logged-in or logged-out status. Also includes functionality to log out users and redirect them to the login page."}
{"code": "  // If the user is logged in...\n  if (isLoggedIn) {\n    console.log('isLoggedIn inside IF statement: ', isLoggedIn)\n    // ...prevent them from accessing public pages.\n    if (publicPages.includes(currentPath)) {\n      window.location.replace(\"/\");\n    } else {\n      // Or hide links they don\u2019t need to see\n      loginElement.style.display = \"none\";\n      // Get rid of the loader once the user reaches the correct page\n      loaderElement.style.display = \"none\";\n    }\n  } else {\n    // If a logged out user tries to to access a private page, send them back to the login page\n    if (privatePages.includes(currentPath)) {\n      window.location.replace(\"/login\");\n    } else {\n      // Hide links logged out users shouldn't be able to see\n      profileElement.style.display = \"none\";\n      logoutElement.style.display = \"none\";\n      homeElement.style.display = \"none\";\n      // Get rid of the loader once the user reaches the correct page\n      loader.style.display = \"none\";\n    }\n  }\n};\n\ngetUser();\n</script>\n", "explanation": "This block of code:\n\n**Hides or redirects users based on login status**\n\nIt checks if a user is logged in, and if so, prevents access to public pages and hides unnecessary links. If not logged in, it redirects private page attempts to the login page and hides relevant links for logged out users.", "metadata": {"repo": "magiclabs/example-11ty", "file": "public/profile/index.html", "chunk_number": 3, "total_chunks": 5}, "repository_explanation": "This repository appears to be an example project for Eleventy (11ty), a static site generator. The purpose is likely to showcase best practices or specific features of 11ty.\n\nThe content likely includes:\n\n* A sample website structure\n* Configuration files (e.g., `.eleventy.js`)\n* HTML templates and Markdown pages\n* Possibly, example data files or APIs for demonstration purposes\n\nIn essence, it's a sandbox project for developers to learn from or experiment with Eleventy features.", "file_summary": "Here is a concise summary of the file 'public/profile/index.html':\n\n**Purpose:** Initialize Magic.js SDK for authentication and manage page visibility based on user login status.\n\n**Functionality:** Display a loader, add login/logout buttons, and update page visibility according to logged-in or logged-out status. Also includes functionality to log out users and redirect them to the login page."}
{"code": "<!-- 6. Log out the currently authenticated Magic user -->\n<script>\n  const logout = async () => {\n    try {\n      await magic\n        .user\n        .logout();\n      window\n        .location\n        .replace(\"/login\");\n    } catch (error) {\n      // Handle errors if required!\n      console.log('Ran into this error while logging out: ', error);\n    }\n    console.log('WHOO! User has logged out of all Magic SDK sessions.');\n  }\n</script>\n\n\n    <h1>Profile</h1>\n\n    <!-- 0. HTML -->\n<h3>Welcome \ud83d\udc47\ud83c\udffc</h3>\n<h3 id=\"email\"></h3>\n<h3>Public Address \ud83d\udc47\ud83c\udffc</h3>\n<h3 id=\"publicAddress\"></h3>\n<!-- 1. Ensure the user\u2019s info is displayed -->\n<script>\n// Assumes a user is already logged in\nconst displayUserInfo = async () => {\n  let emailElement = document.getElementById(\"email\");\n  let publicAddressElement = document.getElementById(\"publicAddress\");\n  try {\n    const { email, publicAddress } = await magic.user.getMetadata();\n    emailElement.innerHTML = email;\n    publicAddressElement.innerHTML = publicAddress;\n  } catch {", "explanation": "Here is a summary of the purpose and functionality of this block:\n\n**Purpose:** Log out an authenticated Magic user and redirect them to the login page.\n\n**Functionality:** A single click event handler (`logout`) that uses the Magic SDK to log out the currently authenticated user, then redirects them to the login page using `window.location.replace(\"/login\")`.", "metadata": {"repo": "magiclabs/example-11ty", "file": "public/profile/index.html", "chunk_number": 4, "total_chunks": 5}, "repository_explanation": "This repository appears to be an example project for Eleventy (11ty), a static site generator. The purpose is likely to showcase best practices or specific features of 11ty.\n\nThe content likely includes:\n\n* A sample website structure\n* Configuration files (e.g., `.eleventy.js`)\n* HTML templates and Markdown pages\n* Possibly, example data files or APIs for demonstration purposes\n\nIn essence, it's a sandbox project for developers to learn from or experiment with Eleventy features.", "file_summary": "Here is a concise summary of the file 'public/profile/index.html':\n\n**Purpose:** Initialize Magic.js SDK for authentication and manage page visibility based on user login status.\n\n**Functionality:** Display a loader, add login/logout buttons, and update page visibility according to logged-in or logged-out status. Also includes functionality to log out users and redirect them to the login page."}
{"code": "    // Handle errors if required!\n    emailElement.innerHTML = \"DNE\";\n    publicAddressElement.innerHTML = \"DNE\";\n  }\n};\ndisplayUserInfo();\n</script>\n\n\n</body>\n</html>\n", "explanation": "This block is a script that displays an error message (\"DNE\") in two HTML elements (`emailElement` and `publicAddressElement`) when executed, followed by a call to display user info using the `displayUserInfo()` function.", "metadata": {"repo": "magiclabs/example-11ty", "file": "public/profile/index.html", "chunk_number": 5, "total_chunks": 5}, "repository_explanation": "This repository appears to be an example project for Eleventy (11ty), a static site generator. The purpose is likely to showcase best practices or specific features of 11ty.\n\nThe content likely includes:\n\n* A sample website structure\n* Configuration files (e.g., `.eleventy.js`)\n* HTML templates and Markdown pages\n* Possibly, example data files or APIs for demonstration purposes\n\nIn essence, it's a sandbox project for developers to learn from or experiment with Eleventy features.", "file_summary": "Here is a concise summary of the file 'public/profile/index.html':\n\n**Purpose:** Initialize Magic.js SDK for authentication and manage page visibility based on user login status.\n\n**Functionality:** Display a loader, add login/logout buttons, and update page visibility according to logged-in or logged-out status. Also includes functionality to log out users and redirect them to the login page."}
{"code": "<ul>\n\n<li><a href=\"/articles/post-1/\">Post 1</li>\n\n<li><a href=\"/articles/post-2/\">Post 2</li>\n\n<li><a href=\"/articles/post-3/\">Post 3</li>\n\n</ul>", "explanation": "This block is a list of links to articles, with each article represented by a numbered item in an unordered list (UL).", "metadata": {"repo": "magiclabs/example-11ty", "file": "public/test/index.html", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "This repository appears to be an example project for Eleventy (11ty), a static site generator. The purpose is likely to showcase best practices or specific features of 11ty.\n\nThe content likely includes:\n\n* A sample website structure\n* Configuration files (e.g., `.eleventy.js`)\n* HTML templates and Markdown pages\n* Possibly, example data files or APIs for demonstration purposes\n\nIn essence, it's a sandbox project for developers to learn from or experiment with Eleventy features.", "file_summary": "Here is a concise and to-the-point summary:\n\n`public/test/index.html`: A webpage listing articles via an unordered list of links."}
{"code": "const axios = require(\"axios\");\n\nmodule.exports = async () => {\n    const { data } = await axios.get(\"https://my-json-server.typicode.com/typicode/demo/posts\");\n\n    return data.slice(0, 3);\n}", "explanation": "This block:\n\n* Retrieves a limited subset (first 3) of JSON data from an external API using Axios.\n* Exports a function that returns this subset of data.", "metadata": {"repo": "magiclabs/example-11ty", "file": "src/_data/cms.js", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "This repository appears to be an example project for Eleventy (11ty), a static site generator. The purpose is likely to showcase best practices or specific features of 11ty.\n\nThe content likely includes:\n\n* A sample website structure\n* Configuration files (e.g., `.eleventy.js`)\n* HTML templates and Markdown pages\n* Possibly, example data files or APIs for demonstration purposes\n\nIn essence, it's a sandbox project for developers to learn from or experiment with Eleventy features.", "file_summary": "Here is a concise summary:\n\n`src/_data/cms.js`: Retrieves first 3 items from an external API using Axios and exports a function returning the subset of data."}
{"code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>{{ title }}</title>\n    <link rel=\"stylesheet\" href=\"{{ '/css/style.css' | url }}\" />\n</head>\n\n<body>\n{% include \"header.njk\" %}\n\n{{ collections.all | eleventyNavigation | eleventyNavigationToHtml | safe }}\n    <h1>{{ title }}</h1>\n\n    {{ content | safe }}\n\n</body>\n</html>", "explanation": "**HTML Template**\n\nThis block generates an HTML page with:\n\n* A dynamic title based on a variable `title`\n* A linked stylesheet from `/css/style.css`\n* An included header section\n* A list of collections in navigation format\n* A main content area displaying text stored in the `content` variable", "metadata": {"repo": "magiclabs/example-11ty", "file": "src/_includes/base.njk", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "This repository appears to be an example project for Eleventy (11ty), a static site generator. The purpose is likely to showcase best practices or specific features of 11ty.\n\nThe content likely includes:\n\n* A sample website structure\n* Configuration files (e.g., `.eleventy.js`)\n* HTML templates and Markdown pages\n* Possibly, example data files or APIs for demonstration purposes\n\nIn essence, it's a sandbox project for developers to learn from or experiment with Eleventy features.", "file_summary": "Here is a holistic summary of the file 'src/_includes/base.njk':\n\n**Base HTML Template**\n\nGenerates a dynamic HTML page with title, stylesheets, header, navigation menu, and main content area, using variables for customization."}
{"code": "<!-- 1. Get Magic SDK -->\n<script src=\"https://cdn.jsdelivr.net/npm/magic-sdk/dist/magic.js\"></script>\n<!-- 2. Initialize Magic -->\n<script>\n  const magic = new Magic(\"pk_live_DD34028215F74A14\"); // Replace with your public key\n</script>\n\n<!-- 3. Add loader to wait for Magic SDK -->\n<div id=\"loader\" class=\"loader\">\n  <img src=\"https://uploads-ssl.webflow.com/5fea770e7aaf96ddaa86827a/5fea8840f0097516e5f5f931_wSdvIvS.gif\" class=\"loaderImage\"/>\n</div>\n\n<!-- 4. Create our Navigation links -->\n<a id=\"home\" href=\"/\">Home</a> \u2661\n<a id=\"profile\" href=\"/profile/\">Profile</a> \u2661\n<a id=\"login\" href=\"/login\">Login</a> \u2661\n<button id=\"logout\" onclick=\"logout()\">Logout</button>\n\n<!-- 5. Update visible pages depending on whether or not the user is logged in -->\n<script>\nlet privatePages = [\n  \"/\",\n  \"/profile/\",\n  \"/profile\",\n  \"/articles/post-1/\",\n  \"/articles/post-1\",\n  \"/articles/post-2/\",\n  \"/articles/post-2\",\n  \"/articles/post-3/\",\n  \"/articles/post-3\",\n];\nlet publicPages = [\"/login/\", \"/login\"];\n", "explanation": "Here is a concise summary:\n\n**Purpose:** Initialize Magic (a user authentication SDK) and create navigation links with dynamic page visibility based on logged-in status.\n\n**Functionality:**\n\n1. Load Magic SDK\n2. Initialize Magic with public key\n3. Display loader while Magic SDK loads\n4. Create navigation links (Home, Profile, Login, Logout)\n5. Hide/show private pages depending on user login status", "metadata": {"repo": "magiclabs/example-11ty", "file": "src/_includes/header.njk", "chunk_number": 1, "total_chunks": 3}, "repository_explanation": "This repository appears to be an example project for Eleventy (11ty), a static site generator. The purpose is likely to showcase best practices or specific features of 11ty.\n\nThe content likely includes:\n\n* A sample website structure\n* Configuration files (e.g., `.eleventy.js`)\n* HTML templates and Markdown pages\n* Possibly, example data files or APIs for demonstration purposes\n\nIn essence, it's a sandbox project for developers to learn from or experiment with Eleventy features.", "file_summary": "Here's a concise summary of the file 'src/_includes/header.njk':\n\n**Purpose:** Authenticate users using Magic SDK and manage page access based on login status.\n\n**Functionality:**\n\n* Load Magic SDK and initialize with public key\n* Display navigation links (Home, Profile, Login, Logout) and adjust visibility based on user login status\n* Hide/show private pages and redirect logged out users to login page when necessary."}
{"code": "const loginElement = document.querySelector(\"#login\");\nconst profileElement = document.querySelector(\"#profile\");\nconst logoutElement = document.querySelector(\"#logout\");\nconst homeElement = document.querySelector(\"#home\");\nconst loaderElement = document.querySelector(\"#loader\");\n\n// Get the user & check whether or not they are logged in.\n// Show or hide pages depending on the outcome.\nconst getUser = async () => {\n  // Gets the page user is currently on\n  const currentPath = window.location.pathname;\n  const test = window.location.origin\n\n  // Checks if user is currently logged into the Magic SDK\n  const isLoggedIn = await magic.user.isLoggedIn();\n\n  // If the user is logged in...\n  if (isLoggedIn) {\n    // ...prevent them from accessing public pages.\n    if (publicPages.includes(currentPath)) {\n      window.location.replace(\"/\");\n    } else {\n      // Or hide links they don\u2019t need to see\n      loginElement.style.display = \"none\";\n      // Get rid of the loader once the user reaches the correct page", "explanation": "Here is a concise summary:\n\n**Purpose:** Check if user is logged in using Magic SDK, and adjust page layout accordingly.\n\n**Functionality:** \n\n1. Queries DOM for various HTML elements (login, profile, logout, etc.) based on their IDs.\n2. Checks if user is currently logged in through the Magic SDK.\n3. If logged in, redirects to homepage or hides unnecessary links and login button.\n4. Hides loader element once correct page is reached.", "metadata": {"repo": "magiclabs/example-11ty", "file": "src/_includes/header.njk", "chunk_number": 2, "total_chunks": 3}, "repository_explanation": "This repository appears to be an example project for Eleventy (11ty), a static site generator. The purpose is likely to showcase best practices or specific features of 11ty.\n\nThe content likely includes:\n\n* A sample website structure\n* Configuration files (e.g., `.eleventy.js`)\n* HTML templates and Markdown pages\n* Possibly, example data files or APIs for demonstration purposes\n\nIn essence, it's a sandbox project for developers to learn from or experiment with Eleventy features.", "file_summary": "Here's a concise summary of the file 'src/_includes/header.njk':\n\n**Purpose:** Authenticate users using Magic SDK and manage page access based on login status.\n\n**Functionality:**\n\n* Load Magic SDK and initialize with public key\n* Display navigation links (Home, Profile, Login, Logout) and adjust visibility based on user login status\n* Hide/show private pages and redirect logged out users to login page when necessary."}
{"code": "      loaderElement.style.display = \"none\";\n    }\n  } else {\n    // If a logged out user tries to to access a private page, send them back to the login page\n    if (privatePages.includes(currentPath)) {\n      window.location.replace(\"/login\");\n    } else {\n      // Hide links logged out users shouldn't be able to see\n      profileElement.style.display = \"none\";\n      logoutElement.style.display = \"none\";\n      homeElement.style.display = \"none\";\n      // Get rid of the loader once the user reaches the correct page\n      loader.style.display = \"none\";\n    }\n  }\n};\n\ngetUser();\n</script>\n\n<!-- 6. Log out the currently authenticated Magic user -->\n<script>\n  const logout = async () => {\n    try {\n      await magic\n        .user\n        .logout();\n      window\n        .location\n        .replace(\"/login\");\n    } catch (error) {\n      // Handle errors if required!\n      console.log('Ran into this error while logging out: ', error);\n    }\n    console.log('WHOO! User has logged out of all Magic SDK sessions.');\n  }\n</script>\n", "explanation": "Here is a concise summary:\n\n**Block Purpose:** Authenticate user with Magic SDK and manage page access based on login status.\n\n**Functionality:**\n\n* Hides/Shows elements on the page based on user authentication.\n* Redirects logged out users trying to access private pages to the login page.\n* Logs out the user when logout button is clicked, replacing the current page with the login page.", "metadata": {"repo": "magiclabs/example-11ty", "file": "src/_includes/header.njk", "chunk_number": 3, "total_chunks": 3}, "repository_explanation": "This repository appears to be an example project for Eleventy (11ty), a static site generator. The purpose is likely to showcase best practices or specific features of 11ty.\n\nThe content likely includes:\n\n* A sample website structure\n* Configuration files (e.g., `.eleventy.js`)\n* HTML templates and Markdown pages\n* Possibly, example data files or APIs for demonstration purposes\n\nIn essence, it's a sandbox project for developers to learn from or experiment with Eleventy features.", "file_summary": "Here's a concise summary of the file 'src/_includes/header.njk':\n\n**Purpose:** Authenticate users using Magic SDK and manage page access based on login status.\n\n**Functionality:**\n\n* Load Magic SDK and initialize with public key\n* Display navigation links (Home, Profile, Login, Logout) and adjust visibility based on user login status\n* Hide/show private pages and redirect logged out users to login page when necessary."}
{"code": "---\npagination:\n    data: cms\n    size: 1\n    alias: article\n    addAllPagesToCollections: true\nlayout: base.njk\ntags: articles\npermalink: \"/articles/{{ article.title | slug }}/\"\ntemplateEngineOverride: md, njk\neleventyComputed:\n    title: \"{{ article.title }}\"\n---\n\n{{ article.body | safe }}", "explanation": "**Summary:** This block configures pagination for an Eleventy collection called \"article\" with a size of 1 page. It also sets up layout, tags, permalink, and template engine override for each page in the collection. The `eleventyComputed` section generates a title from the article's title field.", "metadata": {"repo": "magiclabs/example-11ty", "file": "src/articles.njk", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "This repository appears to be an example project for Eleventy (11ty), a static site generator. The purpose is likely to showcase best practices or specific features of 11ty.\n\nThe content likely includes:\n\n* A sample website structure\n* Configuration files (e.g., `.eleventy.js`)\n* HTML templates and Markdown pages\n* Possibly, example data files or APIs for demonstration purposes\n\nIn essence, it's a sandbox project for developers to learn from or experiment with Eleventy features.", "file_summary": "Here is a concise summary:\n\n**Summary:** Configures Eleventy collection \"article\" with pagination, layout settings, and template engine overrides."}
{"code": "body {\n    font-family: sans-serif;\n}", "explanation": "This block is a CSS rule that sets the default font family for an HTML document's body content to sans-serif.", "metadata": {"repo": "magiclabs/example-11ty", "file": "src/css/style.css", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "This repository appears to be an example project for Eleventy (11ty), a static site generator. The purpose is likely to showcase best practices or specific features of 11ty.\n\nThe content likely includes:\n\n* A sample website structure\n* Configuration files (e.g., `.eleventy.js`)\n* HTML templates and Markdown pages\n* Possibly, example data files or APIs for demonstration purposes\n\nIn essence, it's a sandbox project for developers to learn from or experiment with Eleventy features.", "file_summary": "Here is a holistic summary:\n\n**src/css/style.css**: Sets default font family for HTML body content to sans-serif."}
{"code": "---\ntitle: \"My Cool Blog\"\nlayout: \"base.njk\"\ntemplateEngineOverride: njk,md\n---\n\n<!-- 0. HTML -->\n\n## Articles\n\n<div id=\"content\">\n</div>\n\n<!-- 1. Only share articles with logged in users -->\n<script>\n// Assumes user is already logged in\nlet contentElement = document.getElementById(\"content\");\nconst articles = `<ul>\n{% for article in collections.articles %}\n<li><a href=\"{{ article.url }}\">{{ article.data.title }}</li>\n{% endfor %}\n</ul>`;\nconst loginMessage = `Please log in to see my blog!`;\n\ntry {\n  magic.user.isLoggedIn();\n  contentElement.innerHTML = articles;\n} catch {\n  // Handle errors if required!\n  contentElement.innerHTML = loginMessage;\n}\n</script>\n", "explanation": "Here is a concise summary of the block's purpose and functionality:\n\n**Purpose:** Display blog articles to logged-in users only.\n\n**Functionality:** Hides articles from non-logged in users, displaying a \"log in\" message instead. Uses JavaScript to check user login status and populate content based on authentication.", "metadata": {"repo": "magiclabs/example-11ty", "file": "src/index.md", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "This repository appears to be an example project for Eleventy (11ty), a static site generator. The purpose is likely to showcase best practices or specific features of 11ty.\n\nThe content likely includes:\n\n* A sample website structure\n* Configuration files (e.g., `.eleventy.js`)\n* HTML templates and Markdown pages\n* Possibly, example data files or APIs for demonstration purposes\n\nIn essence, it's a sandbox project for developers to learn from or experiment with Eleventy features.", "file_summary": "Here is a concise summary of the file 'src/index.md':\n\n**File Summary:**\nDisplays blog articles only to logged-in users, hiding content from non-logged in users and prompting them to log in instead."}
{"code": "---\ntitle: \"Login\"\nlayout: \"base.njk\"\ntemplateEngineOverride: njk,md\n---\n\n<!-- 0. HTML -->\n<form id=\"form\">\n    <input id=\"input\" type=\"email\" />\n    <button type=\"submit\">Login</button>\n</form>\n<div id=\"result\">\n\n<!-- 1. Use loginWithMagicLink to authenticate user -->\n<script>\nconst form = document.querySelector(\"#form\");\nconst input = document.querySelector(\"#input\");\nconst result = document.querySelector(\"#result\");\nform.onsubmit = async (e) => {\n  e.preventDefault();\n  const email = input.value;\n  const didToken = await magic.auth.loginWithMagicLink({\n    email,\n  });\n  result.innerText = didToken; // Display the user\u2019s DID token\n  if (didToken) {\n    window.location.replace(`${window.location.origin}/profile`);\n  }\n};\n</script>", "explanation": "**Summary:**\n\nThis block is a login form that uses JavaScript to authenticate users with Magic Link, a decentralized authentication service. It collects an email input from the user, sends it to Magic Link for verification, and displays the resulting DID token. If authenticated, it redirects the user to the profile page.", "metadata": {"repo": "magiclabs/example-11ty", "file": "src/login.md", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "This repository appears to be an example project for Eleventy (11ty), a static site generator. The purpose is likely to showcase best practices or specific features of 11ty.\n\nThe content likely includes:\n\n* A sample website structure\n* Configuration files (e.g., `.eleventy.js`)\n* HTML templates and Markdown pages\n* Possibly, example data files or APIs for demonstration purposes\n\nIn essence, it's a sandbox project for developers to learn from or experiment with Eleventy features.", "file_summary": "Here is a concise holistic summary of the file 'src/login.md':\n\n**Summary:** The login form authenticates users with Magic Link using JavaScript, collects an email input, verifies through Magic Link, displays a DID token, and redirects to the profile page on successful authentication."}
{"code": "---\ntitle: \"Profile\"\nlayout: \"base.njk\"\ntemplateEngineOverride: njk,md\n---\n\n<!-- 0. HTML -->\n<h3>Welcome \ud83d\udc47\ud83c\udffc</h3>\n<h3 id=\"email\"></h3>\n<h3>Public Address \ud83d\udc47\ud83c\udffc</h3>\n<h3 id=\"publicAddress\"></h3>\n\n<!-- 1. Ensure the user\u2019s info is displayed -->\n<script>\n// Assumes a user is already logged in\nconst displayUserInfo = async () => {\n  let emailElement = document.getElementById(\"email\");\n  let publicAddressElement = document.getElementById(\"publicAddress\");\n  try {\n    const { email, publicAddress } = await magic.user.getMetadata();\n    emailElement.innerHTML = email;\n    publicAddressElement.innerHTML = publicAddress;\n  } catch {\n    // Handle errors if required!\n    emailElement.innerHTML = \"DNE\";\n    publicAddressElement.innerHTML = \"DNE\";\n  }\n};\ndisplayUserInfo();\n</script>\n", "explanation": "Here is a concise summary:\n\nThis block displays a user's profile information, including their email address and public address, using JavaScript and the Magic.js library to retrieve metadata from an already logged-in user.", "metadata": {"repo": "magiclabs/example-11ty", "file": "src/profile.md", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "This repository appears to be an example project for Eleventy (11ty), a static site generator. The purpose is likely to showcase best practices or specific features of 11ty.\n\nThe content likely includes:\n\n* A sample website structure\n* Configuration files (e.g., `.eleventy.js`)\n* HTML templates and Markdown pages\n* Possibly, example data files or APIs for demonstration purposes\n\nIn essence, it's a sandbox project for developers to learn from or experiment with Eleventy features.", "file_summary": "Here is a holistic summary of the file 'src/profile.md':\n\n**Display User Profile**\n\nA block that retrieves and displays a logged-in user's profile information, including email and public address, using JavaScript and Magic.js."}
{"code": "body {\n    font-family: sans-serif;\n    color: palevioletred;\n}\n\n.loader {\n    width: 100%;\n    height: 100%;\n    position: fixed;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    background-color: white;\n}\n\n.loaderImage {\n    height: 100px;\n    width: 100px;\n}", "explanation": "**Summary:**\n\nThis block is a collection of CSS styles that define layout and visual properties for three HTML elements:\n\n1. The `body` element sets the font family and text color.\n2. The `.loader` class styles a full-screen overlay with a centered white background, used as a loading indicator.\n3. The `.loaderImage` class sizes an image to 100x100 pixels.\n\nNote: This appears to be CSS code, not functional code.", "metadata": {"repo": "magiclabs/example-11ty", "file": "src/sass/style.scss", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "This repository appears to be an example project for Eleventy (11ty), a static site generator. The purpose is likely to showcase best practices or specific features of 11ty.\n\nThe content likely includes:\n\n* A sample website structure\n* Configuration files (e.g., `.eleventy.js`)\n* HTML templates and Markdown pages\n* Possibly, example data files or APIs for demonstration purposes\n\nIn essence, it's a sandbox project for developers to learn from or experiment with Eleventy features.", "file_summary": "Here is a concise summary of the file 'src/sass/style.scss':\n\n**Summary:** This SASS file defines layout and visual styles for three HTML elements: `body`, `.loader`, and `.loaderImage`."}

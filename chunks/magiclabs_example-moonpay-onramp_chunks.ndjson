{"code": "{\n  \"extends\": \"next/core-web-vitals\",\n  \"rules\": {\n    \"quotes\": [1, \"single\"],\n    \"indent\": [1, 2]\n  }\n}\n", "explanation": "This block is a configuration file for code formatting rules, specifically:\n\n* Extending Next.js core web vitals\n* Enforcing single quotes for strings and 2-space indentation.", "metadata": {"repo": "magiclabs/example-moonpay-onramp", "file": ".eslintrc.json", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "This repository appears to be an example implementation for integrating MoonPay's on-ramp solution into a Magic Labs project. \n\nKey points:\n\n* Purpose: Example code for MoonPay integration\n* Content: Code snippet(s) illustrating how to use MoonPay API in a Magic Labs context", "file_summary": "Here's a holistic summary of the '.eslintrc.json' file in a few words:\n\n\"Configures ESLint with Next.js core web vital rules and enforces consistent string quoting and indentation.\""}
{"code": "This scaffold is meant to help you bootstrap your own projects with Magic's [Dedicated Wallet](https://magic.link/docs/auth/overview). Magic is a developer SDK that integrates with your application to enable passwordless Web3 onboarding.\n\nThe folder structure of this scaffold is designed to encapsulate all things Magic into one place so you can easily add or remove components and functionality. For example, all Magic-specific components are in the `src/components/magic` directory while generic UI components are in the `src/components/ui` directory.\n\n## Next.js\n\nThis is a [Next.js](https://nextjs.org/) project bootstrapped with [`create-next-app`](https://github.com/vercel/next.js/tree/canary/packages/create-next-app).\n\n### Getting Started\n\nFirst, run the development server:\n\n```bash\nnpm run dev\n# or\nyarn dev\n# or\npnpm dev\n```\n\nOpen [http://localhost:3000](http://localhost:3000) with your browser to see the result.\n", "explanation": "Here is a concise summary:\n\n**Purpose:** Bootstrapping project for passwordless Web3 onboarding using Magic's Dedicated Wallet.\n\n**Functionality:** Provides a Next.js project structure with organized components, allowing developers to easily add or remove functionality and UI components.", "metadata": {"repo": "magiclabs/example-moonpay-onramp", "file": "README.md", "chunk_number": 1, "total_chunks": 3}, "repository_explanation": "This repository appears to be an example implementation for integrating MoonPay's on-ramp solution into a Magic Labs project. \n\nKey points:\n\n* Purpose: Example code for MoonPay integration\n* Content: Code snippet(s) illustrating how to use MoonPay API in a Magic Labs context", "file_summary": "Here is a holistic summary of the file 'README.md' in one sentence:\n\nThis project provides a bootstrapped Next.js structure with organized components for passwordless Web3 onboarding using Magic's Dedicated Wallet, along with resources for learning more about Next.js and deploying the app on Vercel."}
{"code": "You can start editing the page by modifying `pages/index.tsx`. The page auto-updates as you edit the file.\n\n[API routes](https://nextjs.org/docs/api-routes/introduction) can be accessed on [http://localhost:3000/api/hello](http://localhost:3000/api/hello). This endpoint can be edited in `pages/api/hello.ts`.\n\nThe `pages/api` directory is mapped to `/api/*`. Files in this directory are treated as [API routes](https://nextjs.org/docs/api-routes/introduction) instead of React pages.\n\nThis project uses [`next/font`](https://nextjs.org/docs/basic-features/font-optimization) to automatically optimize and load Inter, a custom Google Font.\n\n### Learn More\n\nTo learn more about Next.js, take a look at the following resources:\n\n- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.\n- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.\n", "explanation": "Here is a concise summary of the purpose and functionality of this block:\n\n**Summary:** Introduction to editing Next.js pages, API routes, and font optimization. Provides links to additional resources for learning more about Next.js.", "metadata": {"repo": "magiclabs/example-moonpay-onramp", "file": "README.md", "chunk_number": 2, "total_chunks": 3}, "repository_explanation": "This repository appears to be an example implementation for integrating MoonPay's on-ramp solution into a Magic Labs project. \n\nKey points:\n\n* Purpose: Example code for MoonPay integration\n* Content: Code snippet(s) illustrating how to use MoonPay API in a Magic Labs context", "file_summary": "Here is a holistic summary of the file 'README.md' in one sentence:\n\nThis project provides a bootstrapped Next.js structure with organized components for passwordless Web3 onboarding using Magic's Dedicated Wallet, along with resources for learning more about Next.js and deploying the app on Vercel."}
{"code": "You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js/) - your feedback and contributions are welcome!\n\n### Deploy on Vercel\n\nThe easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.\n\nCheck out our [Next.js deployment documentation](https://nextjs.org/docs/deployment) for more details.\n", "explanation": "Here is a concise summary:\n\n**Purpose:** To inform users about deploying their Next.js app using Vercel.\n\n**Functionality:** Provides links to resources, including GitHub repository, deployment documentation, and Vercel Platform sign-up, for easy app deployment.", "metadata": {"repo": "magiclabs/example-moonpay-onramp", "file": "README.md", "chunk_number": 3, "total_chunks": 3}, "repository_explanation": "This repository appears to be an example implementation for integrating MoonPay's on-ramp solution into a Magic Labs project. \n\nKey points:\n\n* Purpose: Example code for MoonPay integration\n* Content: Code snippet(s) illustrating how to use MoonPay API in a Magic Labs context", "file_summary": "Here is a holistic summary of the file 'README.md' in one sentence:\n\nThis project provides a bootstrapped Next.js structure with organized components for passwordless Web3 onboarding using Magic's Dedicated Wallet, along with resources for learning more about Next.js and deploying the app on Vercel."}
{"code": "module.exports = {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n", "explanation": "This block configures plugins for a CSS build process, specifically enabling Tailwind CSS and Autoprefixer functionality.", "metadata": {"repo": "magiclabs/example-moonpay-onramp", "file": "postcss.config.js", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "This repository appears to be an example implementation for integrating MoonPay's on-ramp solution into a Magic Labs project. \n\nKey points:\n\n* Purpose: Example code for MoonPay integration\n* Content: Code snippet(s) illustrating how to use MoonPay API in a Magic Labs context", "file_summary": "Here is a concise summary:\n\n`postcss.config.js` enables Tailwind CSS and Autoprefixer for a CSS build process, configuring necessary plugins for optimization and compatibility."}
{"code": "<svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M12 2C6.47581 2 2 6.51613 2 12C2 17.5242 6.47581 22 12 22C17.4839 22 22 17.5242 22 12C22 6.51613 17.4839 2 12 2ZM11.9999 6.19352C11.2741 6.19352 10.7096 6.79835 10.7096 7.48384C10.7096 8.20964 11.2741 8.77416 11.9999 8.77416C12.6854 8.77416 13.2903 8.20964 13.2903 7.48384C13.2903 6.79835 12.6854 6.19352 11.9999 6.19352ZM10.5483 15.8709C10.2661 15.8709 10.0645 16.1129 10.0645 16.3548V16.6774C10.0645 16.9596 10.2661 17.1613 10.5483 17.1613H13.4515C13.6935 17.1613 13.9354 16.9596 13.9354 16.6774V16.3548C13.9354 16.1129 13.6935 15.8709 13.4515 15.8709H12.9677V10.2258C12.9677 9.98384 12.7257 9.7419 12.4838 9.7419H10.5483C10.2661 9.7419 10.0645 9.98384 10.0645 10.2258V10.5484C10.0645 10.8306 10.2661 11.0322 10.5483 11.0322H11.0322V15.8709H10.5483Z\" fill=\"#4E4D52\"/>\n</svg>", "explanation": "This block is an SVG (Scalable Vector Graphics) icon, likely used for a \"Menu\" or \"Navigation\" button in a user interface, featuring a stylized grid pattern with menu lines and a triangle indicating expand/collapse functionality.", "metadata": {"repo": "magiclabs/example-moonpay-onramp", "file": "public/info.svg", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "This repository appears to be an example implementation for integrating MoonPay's on-ramp solution into a Magic Labs project. \n\nKey points:\n\n* Purpose: Example code for MoonPay integration\n* Content: Code snippet(s) illustrating how to use MoonPay API in a Magic Labs context", "file_summary": "Here's a concise summary of the file 'public/info.svg':\n\n\"An SVG icon representing a stylized grid menu with an expand/collapse triangle.\""}
{"code": "<svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">", "explanation": "This block is an SVG (Scalable Vector Graphics) element, which is a code block used to display graphics or icons on a webpage. It defines a rectangular shape with width 24 and height 24, containing no fill color, and uses XML namespace \"http://www.w3.org/2000/svg\".", "metadata": {"repo": "magiclabs/example-moonpay-onramp", "file": "public/link.svg", "chunk_number": 1, "total_chunks": 3}, "repository_explanation": "This repository appears to be an example implementation for integrating MoonPay's on-ramp solution into a Magic Labs project. \n\nKey points:\n\n* Purpose: Example code for MoonPay integration\n* Content: Code snippet(s) illustrating how to use MoonPay API in a Magic Labs context", "file_summary": "Here is a concise summary:\n\n\"public/link.svg\": A 24x24 rectangular SVG icon with no fill color, rendered as a graphical representation using XML namespace \"http://www.w3.org/2000/svg\"."}
{"code": "<path d=\"M5.38889 6.33333C5.38889 6.08285 5.48839 5.84263 5.66551 5.66551C5.84263 5.48839 6.08285 5.38889 6.33333 5.38889H10.1111C10.3616 5.38889 10.6018 5.28938 10.7789 5.11227C10.9561 4.93515 11.0556 4.69493 11.0556 4.44444C11.0556 4.19396 10.9561 3.95374 10.7789 3.77662C10.6018 3.5995 10.3616 3.5 10.1111 3.5H6.33333C5.58189 3.5 4.86122 3.79851 4.32986 4.32986C3.79851 4.86122 3.5 5.58189 3.5 6.33333V17.6667C3.5 18.4181 3.79851 19.1388 4.32986 19.6701C4.86122 20.2015 5.58189 20.5 6.33333 20.5H17.6667C18.4181 20.5 19.1388 20.2015 19.6701 19.6701C20.2015 19.1388 20.5 18.4181 20.5 17.6667V13.8889C20.5 13.6384 20.4005 13.3982 20.2234 13.2211C20.0463 13.0439 19.806 12.9444 19.5556 12.9444C19.3051 12.9444 19.0648 13.0439 18.8877 13.2211C18.7106 13.3982 18.6111 13.6384 18.6111 13.8889V17.6667C18.6111 17.9171 18.5116 18.1574 18.3345 18.3345C18.1574 18.5116 17.9171 18.6111 17.6667 18.6111H6.33333C6.08285 18.6111 5.84263 18.5116 5.66551 18.3345C5.48839 18.1574 5.38889 17.9171 5.38889 17.6667V6.33333ZM14.8333 3.5C14.5829 3.5 14.3426 3.5995 14.1655 3.77662C13.9884 3.95374 13.8889 4.19396 13.8889 4.44444C13.8889 4.69493 13.9884 4.93515 14.1655 5.11227C14.3426 5.28938 14.5829 5.38889 14.8333 5.38889H17.2757L11.3323 11.3323C11.1602 11.5104 11.065 11.749 11.0672 11.9966C11.0693 12.2442 11.1687 12.4811 11.3438 12.6562C11.5189 12.8313 11.7558 12.9307 12.0034 12.9328C12.251 12.935 12.4896 12.8398 12.6677 12.6677L18.6111 6.72433V9.16667C18.6111 9.41715 18.7106 9.65737 18.8877 9.83449C19.0648 10.0116 19.3051 10.1111 19.5556 10.1111C19.806 10.1111 20.0463 10.0116 20.2234 9.83449C20.4005 9.65737 20.5 9.41715 20.5 9.16667V4.44444C20.5 4.19396 20.4005 3.95374 20.2234 3.77662C20.0463 3.5995 19.806 3.5 19.5556 3.5H14.8333Z\" fill=\"#6851FF\"/>", "explanation": "This block appears to be a graphical representation of an SVG path, likely used for design purposes. Its purpose is to draw a custom shape with specific coordinates, and its functionality is to render this shape as a visual element on a digital canvas.", "metadata": {"repo": "magiclabs/example-moonpay-onramp", "file": "public/link.svg", "chunk_number": 2, "total_chunks": 3}, "repository_explanation": "This repository appears to be an example implementation for integrating MoonPay's on-ramp solution into a Magic Labs project. \n\nKey points:\n\n* Purpose: Example code for MoonPay integration\n* Content: Code snippet(s) illustrating how to use MoonPay API in a Magic Labs context", "file_summary": "Here is a concise summary:\n\n\"public/link.svg\": A 24x24 rectangular SVG icon with no fill color, rendered as a graphical representation using XML namespace \"http://www.w3.org/2000/svg\"."}
{"code": "</svg>\n", "explanation": "This is an SVG (Scalable Vector Graphics) element, likely used for rendering graphics on a web page.", "metadata": {"repo": "magiclabs/example-moonpay-onramp", "file": "public/link.svg", "chunk_number": 3, "total_chunks": 3}, "repository_explanation": "This repository appears to be an example implementation for integrating MoonPay's on-ramp solution into a Magic Labs project. \n\nKey points:\n\n* Purpose: Example code for MoonPay integration\n* Content: Code snippet(s) illustrating how to use MoonPay API in a Magic Labs context", "file_summary": "Here is a concise summary:\n\n\"public/link.svg\": A 24x24 rectangular SVG icon with no fill color, rendered as a graphical representation using XML namespace \"http://www.w3.org/2000/svg\"."}
{"code": "<svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">", "explanation": "This block is an SVG (Scalable Vector Graphics) image, likely used for visual representation on a website or application.", "metadata": {"repo": "magiclabs/example-moonpay-onramp", "file": "public/link_white.svg", "chunk_number": 1, "total_chunks": 3}, "repository_explanation": "This repository appears to be an example implementation for integrating MoonPay's on-ramp solution into a Magic Labs project. \n\nKey points:\n\n* Purpose: Example code for MoonPay integration\n* Content: Code snippet(s) illustrating how to use MoonPay API in a Magic Labs context", "file_summary": "Here's a concise summary of 'public/link_white.svg':\n\n\"A white link icon represented by a complex SVG path with multiple segments and curves.\""}
{"code": "<path d=\"M5.38889 6.33333C5.38889 6.08285 5.48839 5.84263 5.66551 5.66551C5.84263 5.48839 6.08285 5.38889 6.33333 5.38889H10.1111C10.3616 5.38889 10.6018 5.28938 10.7789 5.11227C10.9561 4.93515 11.0556 4.69493 11.0556 4.44444C11.0556 4.19396 10.9561 3.95374 10.7789 3.77662C10.6018 3.5995 10.3616 3.5 10.1111 3.5H6.33333C5.58189 3.5 4.86122 3.79851 4.32986 4.32986C3.79851 4.86122 3.5 5.58189 3.5 6.33333V17.6667C3.5 18.4181 3.79851 19.1388 4.32986 19.6701C4.86122 20.2015 5.58189 20.5 6.33333 20.5H17.6667C18.4181 20.5 19.1388 20.2015 19.6701 19.6701C20.2015 19.1388 20.5 18.4181 20.5 17.6667V13.8889C20.5 13.6384 20.4005 13.3982 20.2234 13.2211C20.0463 13.0439 19.806 12.9444 19.5556 12.9444C19.3051 12.9444 19.0648 13.0439 18.8877 13.2211C18.7106 13.3982 18.6111 13.6384 18.6111 13.8889V17.6667C18.6111 17.9171 18.5116 18.1574 18.3345 18.3345C18.1574 18.5116 17.9171 18.6111 17.6667 18.6111H6.33333C6.08285 18.6111 5.84263 18.5116 5.66551 18.3345C5.48839 18.1574 5.38889 17.9171 5.38889 17.6667V6.33333ZM14.8333 3.5C14.5829 3.5 14.3426 3.5995 14.1655 3.77662C13.9884 3.95374 13.8889 4.19396 13.8889 4.44444C13.8889 4.69493 13.9884 4.93515 14.1655 5.11227C14.3426 5.28938 14.5829 5.38889 14.8333 5.38889H17.2757L11.3323 11.3323C11.1602 11.5104 11.065 11.749 11.0672 11.9966C11.0693 12.2442 11.1687 12.4811 11.3438 12.6562C11.5189 12.8313 11.7558 12.9307 12.0034 12.9328C12.251 12.935 12.4896 12.8398 12.6677 12.6677L18.6111 6.72433V9.16667C18.6111 9.41715 18.7106 9.65737 18.8877 9.83449C19.0648 10.0116 19.3051 10.1111 19.5556 10.1111C19.806 10.1111 20.0463 10.0116 20.2234 9.83449C20.4005 9.65737 20.5 9.41715 20.5 9.16667V4.44444C20.5 4.19396 20.4005 3.95374 20.2234 3.77662C20.0463 3.5995 19.806 3.5 19.5556 3.5H14.8333Z\" fill=\"#FFFFFF\"/>", "explanation": "This block is a SVG path element, specifically a complex shape with multiple segments and curves. Its purpose is to define a visual representation of an icon or image. The functionality is to draw a specific geometric figure on the screen, which can be used for various purposes such as graphics, design, or user interface elements.", "metadata": {"repo": "magiclabs/example-moonpay-onramp", "file": "public/link_white.svg", "chunk_number": 2, "total_chunks": 3}, "repository_explanation": "This repository appears to be an example implementation for integrating MoonPay's on-ramp solution into a Magic Labs project. \n\nKey points:\n\n* Purpose: Example code for MoonPay integration\n* Content: Code snippet(s) illustrating how to use MoonPay API in a Magic Labs context", "file_summary": "Here's a concise summary of 'public/link_white.svg':\n\n\"A white link icon represented by a complex SVG path with multiple segments and curves.\""}
{"code": "</svg>", "explanation": "This is an SVG (Scalable Vector Graphics) tag, which is likely a graphical element used to display an image or icon on a webpage.", "metadata": {"repo": "magiclabs/example-moonpay-onramp", "file": "public/link_white.svg", "chunk_number": 3, "total_chunks": 3}, "repository_explanation": "This repository appears to be an example implementation for integrating MoonPay's on-ramp solution into a Magic Labs project. \n\nKey points:\n\n* Purpose: Example code for MoonPay integration\n* Content: Code snippet(s) illustrating how to use MoonPay API in a Magic Labs context", "file_summary": "Here's a concise summary of 'public/link_white.svg':\n\n\"A white link icon represented by a complex SVG path with multiple segments and curves.\""}
{"code": "<svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<g id=\"Logo\">\n<g id=\"Favicon\">\n<path d=\"M16 0C17.461 1.69611 19.0723 3.27125 20.8148 4.70713C19.6537 8.27674 19.0287 12.0692 19.0287 16C19.0287 19.9308 19.6537 23.7233 20.8148 27.2929C19.0723 28.7288 17.461 30.3039 16 32C14.539 30.3039 12.9277 28.7287 11.1852 27.2929C12.3463 23.7233 12.9713 19.9308 12.9713 16C12.9713 12.0692 12.3463 8.27675 11.1852 4.70713C12.9277 3.27126 14.539 1.69612 16 0Z\" fill=\"white\"/>\n<path d=\"M7.85464 24.8249C6.01021 23.5995 4.05274 22.5166 2 21.5929C2.56942 19.8237 2.87573 17.9458 2.87573 16C2.87573 14.0542 2.56942 12.1763 2 10.4071C4.05273 9.48345 6.0102 8.40049 7.85464 7.17508C8.55991 10.0081 8.93309 12.9628 8.93309 16C8.93309 19.0372 8.55991 21.9919 7.85464 24.8249Z\" fill=\"white\"/>", "explanation": "This block is an SVG (Scalable Vector Graphics) logo consisting of two intertwined shapes, likely a custom brand icon or favicon, with a white fill color on a transparent background.", "metadata": {"repo": "magiclabs/example-moonpay-onramp", "file": "public/logo.svg", "chunk_number": 1, "total_chunks": 2}, "repository_explanation": "This repository appears to be an example implementation for integrating MoonPay's on-ramp solution into a Magic Labs project. \n\nKey points:\n\n* Purpose: Example code for MoonPay integration\n* Content: Code snippet(s) illustrating how to use MoonPay API in a Magic Labs context", "file_summary": "Here is a concise holistic summary:\n\nThe 'public/logo.svg' file contains a custom logo design consisting of two intertwined shapes on a transparent background with a white fill color."}
{"code": "<path d=\"M23.0669 16C23.0669 19.0373 23.4401 21.9919 24.1454 24.8249C25.9898 23.5995 27.9473 22.5166 30 21.5929C29.4306 19.8237 29.1243 17.9458 29.1243 16C29.1243 14.0542 29.4306 12.1763 30 10.4071C27.9473 9.48345 25.9898 8.40049 24.1454 7.17507C23.4401 10.0081 23.0669 12.9628 23.0669 16Z\" fill=\"white\"/>\n</g>\n</g>\n</svg>", "explanation": "This is an SVG (Scalable Vector Graphics) code snippet that represents a geometric shape, likely a rectangle or square, with a white fill color and specific coordinates defining its path.", "metadata": {"repo": "magiclabs/example-moonpay-onramp", "file": "public/logo.svg", "chunk_number": 2, "total_chunks": 2}, "repository_explanation": "This repository appears to be an example implementation for integrating MoonPay's on-ramp solution into a Magic Labs project. \n\nKey points:\n\n* Purpose: Example code for MoonPay integration\n* Content: Code snippet(s) illustrating how to use MoonPay API in a Magic Labs context", "file_summary": "Here is a concise holistic summary:\n\nThe 'public/logo.svg' file contains a custom logo design consisting of two intertwined shapes on a transparent background with a white fill color."}
{"code": "import React from 'react';\nimport WalletMethods from './cards/WalletMethodsCard';\nimport SendTransaction from './cards/SendTransactionCard';\nimport Spacer from '@/components/ui/Spacer';\nimport { LoginProps } from '@/utils/types';\nimport UserInfo from './cards/UserInfoCard';\nimport DevLinks from './DevLinks';\nimport Header from './Header';\n\nexport default function Dashboard({ token, setToken }: LoginProps) {\n  return (\n    <div className=\"home-page\">\n      <Header />\n      <div className=\"cards-container\">\n        <UserInfo token={token} setToken={setToken} />\n        <Spacer size={10} />\n        <SendTransaction />\n        <Spacer size={10} />\n        <WalletMethods token={token} setToken={setToken} />\n        <Spacer size={15} />\n      </div>\n      <DevLinks primary />\n    </div>\n  );\n}\n", "explanation": "**Summary:**\n\nThis block is a React component named \"Dashboard\" that renders a user interface with various cards, including:\n\n* User information\n* Send transaction functionality\n* Wallet methods\n* Links to developer resources\n\nIt also includes a header and spacers for layout management. The component accepts two props: `token` and `setToken`, which are used to manage login state.", "metadata": {"repo": "magiclabs/example-moonpay-onramp", "file": "src/components/magic/Dashboard.tsx", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "This repository appears to be an example implementation for integrating MoonPay's on-ramp solution into a Magic Labs project. \n\nKey points:\n\n* Purpose: Example code for MoonPay integration\n* Content: Code snippet(s) illustrating how to use MoonPay API in a Magic Labs context", "file_summary": "Here is a concise summary of the file 'src/components/magic/Dashboard.tsx':\n\n**Summary:** A React \"Dashboard\" component that displays user interface cards, including user info, transaction sending, wallet methods, and developer links, with layout management and login state control via `token` and `setToken` props."}
{"code": "import classNames from 'classnames';\nimport Link from 'next/link';\n\nconst DevLinks = ({ primary = false, footer = false }: { primary?: boolean; footer?: boolean }) => (\n  <div className={`links ${footer ? 'footer-links' : ''}`}>\n    <div className={`link ${primary ? 'text-[#6851ff]' : 'text-[#fff]'}`}>\n      <a href=\"https://magic.link/docs/home/welcome\" target=\"_blank\" rel=\"noreferrer\">\n        Dev Docs\n      </a>\n    </div>\n    <div className={`link-divider ${primary ? 'bg-[#DDDBE0]' : 'bg-[#a270d3]'}`} />\n    <div className={`link ${primary ? 'text-[#6851ff]' : 'text-[#fff]'}`}>\n      <a href=\"https://dashboard.magic.link/signup\" target=\"_blank\" rel=\"noreferrer\">\n        Dashboard\n      </a>\n    </div>\n    <div className={`link-divider ${primary ? 'bg-[#DDDBE0]' : 'bg-[#a270d3]'}`} />\n    <div className={`link ${primary ? 'text-[#6851ff]' : 'text-[#fff]'}`}>\n      <a href=\"https://discord.gg/magiclabs\" target=\"_blank\" rel=\"noreferrer\">\n        Discord\n      </a>\n    </div>\n  </div>\n);\n", "explanation": "Here is a concise summary:\n\n**Purpose:** Display links to dev documentation, dashboard, and Discord community.\n\n**Functionality:** Renders a list of links with customizable styling based on context (primary/secondary), including divider elements.", "metadata": {"repo": "magiclabs/example-moonpay-onramp", "file": "src/components/magic/DevLinks.tsx", "chunk_number": 1, "total_chunks": 2}, "repository_explanation": "This repository appears to be an example implementation for integrating MoonPay's on-ramp solution into a Magic Labs project. \n\nKey points:\n\n* Purpose: Example code for MoonPay integration\n* Content: Code snippet(s) illustrating how to use MoonPay API in a Magic Labs context", "file_summary": "Here is a concise summary:\n\n**File:** `src/components/magic/DevLinks.tsx`\n\n**Purpose:** Display links to dev resources (docs, dashboard, Discord) with customizable styling.\n\n**Functionality:** Renders a list of links with dividers, exportable as \"DevLinks\" module."}
{"code": "export default DevLinks;\n", "explanation": "This line exports a JavaScript module named \"DevLinks\" as the default export, making it available for use elsewhere in the application.", "metadata": {"repo": "magiclabs/example-moonpay-onramp", "file": "src/components/magic/DevLinks.tsx", "chunk_number": 2, "total_chunks": 2}, "repository_explanation": "This repository appears to be an example implementation for integrating MoonPay's on-ramp solution into a Magic Labs project. \n\nKey points:\n\n* Purpose: Example code for MoonPay integration\n* Content: Code snippet(s) illustrating how to use MoonPay API in a Magic Labs context", "file_summary": "Here is a concise summary:\n\n**File:** `src/components/magic/DevLinks.tsx`\n\n**Purpose:** Display links to dev resources (docs, dashboard, Discord) with customizable styling.\n\n**Functionality:** Renders a list of links with dividers, exportable as \"DevLinks\" module."}
{"code": "import Image from 'next/image';\nimport Logo from 'public/logo.svg';\nimport DevLinks from './DevLinks';\n\nconst Header = () => {\n  return (\n    <div className=\"app-header-container\">\n      <div className=\"flex flex-col gap-2.5 items-center\">\n        <Image src={Logo} alt=\"logo\" />\n        <div className=\"text-center text-white text-xl font-extrabold font-['Inter'] leading-[30px]\">Magic</div>\n        <div className=\"text-center text-white text-opacity-50 text-base font-normal font-['SF Mono'] leading-normal\">\n          Demo\n        </div>\n      </div>\n      <DevLinks />\n    </div>\n  );\n};\n\nexport default Header;\n", "explanation": "**Summary**\n\nThis is a React component named `Header`. It renders a header section with:\n\n* A logo image\n* Text \"Magic\" in bold font\n* Text \"Demo\" with lower opacity\n\nThe component imports necessary libraries and components, including Next.js's Image library and custom Logo and DevLinks components.", "metadata": {"repo": "magiclabs/example-moonpay-onramp", "file": "src/components/magic/Header.tsx", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "This repository appears to be an example implementation for integrating MoonPay's on-ramp solution into a Magic Labs project. \n\nKey points:\n\n* Purpose: Example code for MoonPay integration\n* Content: Code snippet(s) illustrating how to use MoonPay API in a Magic Labs context", "file_summary": "Here is a concise summary of the file 'src/components/magic/Header.tsx':\n\n**Summary**\n\nA React `Header` component rendering a logo image, \"Magic\" in bold text, and \"Demo\" with lower opacity, utilizing Next.js Image library and custom components."}
{"code": "import { LoginProps } from '@/utils/types'\nimport Header from './Header'\n\nimport EmailOTP from './auth/EmailOTP';\n\nconst Login = ({ token, setToken }: LoginProps) => {\n  return (\n    <div className=\"login-page\">\n      <Header />\n      <div className={`max-w-[100%] grid grid-cols-1 grid-flow-row auto-rows-fr gap-5 p-4 mt-8`}>\n      \n      \n        <EmailOTP token={token} setToken={setToken} />      \n  \t\t\n      </div>\n    </div>\n  )\n}\n\nexport default Login\n", "explanation": "**Summary:**\n\nThis is a React component named `Login`. Its purpose is to render a login page with a header and an EmailOTP (email-based one-time password) form, allowing users to authenticate and obtain a token.", "metadata": {"repo": "magiclabs/example-moonpay-onramp", "file": "src/components/magic/Login.tsx", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "This repository appears to be an example implementation for integrating MoonPay's on-ramp solution into a Magic Labs project. \n\nKey points:\n\n* Purpose: Example code for MoonPay integration\n* Content: Code snippet(s) illustrating how to use MoonPay API in a Magic Labs context", "file_summary": "Here is a concise summary:\n\n`Login.tsx`: A React component rendering a login page with an EmailOTP form for user authentication and token acquisition."}
{"code": "import React, { useCallback } from 'react';\nimport DevLinks from './DevLinks';\nimport Image from 'next/image';\nimport Info from 'public/info.svg';\nimport Link from 'public/link_white.svg';\nimport Logo from 'public/logo.svg';\n\nconst MagicDashboardRedirect = () => {\n  const onClick = useCallback(() => {\n    window.open('https://dashboard.magic.link/signup', '_blank');\n  }, []);\n\n  return (\n    <div className=\"redirect-container\">\n      <div className=\"flex flex-col mt-10 gap-2.5 items-center\">\n        <Image src={Logo} alt=\"logo\" />\n        <div className=\"text-center text-white text-xl font-extrabold font-['Inter'] leading-[30px]\">Magic</div>\n        <div className=\"text-center text-white text-opacity-50 text-base font-normal font-['SF Mono'] leading-normal\">\n          Demo\n        </div>\n      </div>\n      <div className=\"flex flex-col items-center flex-1\">\n        <div className=\"redirect-card\">\n          <div className=\"flex gap-2 mx-4 my-2 \">\n            <Image src={Info} alt=\"logo\" />", "explanation": "Here is a concise summary of the block:\n\n**Purpose:** Redirect user to Magic Dashboard signup page.\n\n**Functionality:** Displays logo, title \"Magic\", and tagline \"Demo\". Contains a redirect card that opens the dashboard signup URL in a new tab when clicked.", "metadata": {"repo": "magiclabs/example-moonpay-onramp", "file": "src/components/magic/MagicDashboardRedirect.tsx", "chunk_number": 1, "total_chunks": 2}, "repository_explanation": "This repository appears to be an example implementation for integrating MoonPay's on-ramp solution into a Magic Labs project. \n\nKey points:\n\n* Purpose: Example code for MoonPay integration\n* Content: Code snippet(s) illustrating how to use MoonPay API in a Magic Labs context", "file_summary": "Here's a concise summary of the file 'src/components/magic/MagicDashboardRedirect.tsx':\n\n**Redirects user to Magic Dashboard signup page with a call-to-action card.**\n\n(I condensed the original summaries into one sentence, capturing the main purpose and functionality of the code block)"}
{"code": "            <h3 className=\"max-w-[480px] text-[#4E4D52] text-base font-normal\">\n              Please set your <code>NEXT_PUBLIC_MAGIC_API_KEY</code> environment variable in <code>.env</code>. You can\n              get your Magic API key from the Magic Dashboard.\n            </h3>\n          </div>\n        </div>\n\n        <button className=\"api-button\" onClick={onClick} disabled={false}>\n          Get API keys\n          <Image src={Link} alt=\"link-icon\" className=\"ml-[6px] my-auto\" />\n        </button>\n      </div>\n      <DevLinks />\n    </div>\n  );\n};\n\nexport default MagicDashboardRedirect;\n", "explanation": "**Summary**\n\nThis block is a message prompting users to set their Magic API key in an environment variable, with a button to retrieve the key from the Magic Dashboard.", "metadata": {"repo": "magiclabs/example-moonpay-onramp", "file": "src/components/magic/MagicDashboardRedirect.tsx", "chunk_number": 2, "total_chunks": 2}, "repository_explanation": "This repository appears to be an example implementation for integrating MoonPay's on-ramp solution into a Magic Labs project. \n\nKey points:\n\n* Purpose: Example code for MoonPay integration\n* Content: Code snippet(s) illustrating how to use MoonPay API in a Magic Labs context", "file_summary": "Here's a concise summary of the file 'src/components/magic/MagicDashboardRedirect.tsx':\n\n**Redirects user to Magic Dashboard signup page with a call-to-action card.**\n\n(I condensed the original summaries into one sentence, capturing the main purpose and functionality of the code block)"}
{"code": "import { getChainId, getNetworkUrl } from '@/utils/network';\nimport { OAuthExtension } from '@magic-ext/oauth';\nimport { Magic as MagicBase } from 'magic-sdk';\nimport { ReactNode, createContext, useContext, useEffect, useMemo, useState } from 'react';\nconst { Web3 } = require('web3');\n\nexport type Magic = MagicBase<OAuthExtension[]>;\n\ntype MagicContextType = {\n  magic: Magic | null;\n  web3: typeof Web3 | null;\n};\n\nconst MagicContext = createContext<MagicContextType>({\n  magic: null,\n  web3: null,\n});\n\nexport const useMagic = () => useContext(MagicContext);\n\nconst MagicProvider = ({ children }: { children: ReactNode }) => {\n  const [magic, setMagic] = useState<Magic | null>(null);\n  const [web3, setWeb3] = useState<typeof Web3 | null>(null);\n\n  useEffect(() => {\n    if (process.env.NEXT_PUBLIC_MAGIC_API_KEY) {\n      const magic = new MagicBase(process.env.NEXT_PUBLIC_MAGIC_API_KEY as string, {\n        network: {\n          rpcUrl: getNetworkUrl(),\n          chainId: getChainId(),\n        },", "explanation": "Here is a concise summary of the purpose and functionality of this block:\n\n**Purpose:** Create a Magic SDK context provider for React applications.\n\n**Functionality:** Provides access to the Magic SDK and Web3.js libraries through a React Context API, enabling users to authenticate with Magic and interact with Ethereum blockchain using Web3.", "metadata": {"repo": "magiclabs/example-moonpay-onramp", "file": "src/components/magic/MagicProvider.tsx", "chunk_number": 1, "total_chunks": 2}, "repository_explanation": "This repository appears to be an example implementation for integrating MoonPay's on-ramp solution into a Magic Labs project. \n\nKey points:\n\n* Purpose: Example code for MoonPay integration\n* Content: Code snippet(s) illustrating how to use MoonPay API in a Magic Labs context", "file_summary": "Here is a concise and holistic summary of the file 'src/components/magic/MagicProvider.tsx':\n\nProvides a Magic SDK context for React apps, enabling authentication via Magic and Ethereum interactions through Web3.js, including setup of OAuth extension and initialization of Magic and Web3 providers."}
{"code": "        extensions: [new OAuthExtension()],\n      });\n\n      setMagic(magic);\n      setWeb3(new Web3((magic as any).rpcProvider));\n    }\n  }, []);\n\n  const value = useMemo(() => {\n    return {\n      magic,\n      web3,\n    };\n  }, [magic, web3]);\n\n  return <MagicContext.Provider value={value}>{children}</MagicContext.Provider>;\n};\n\nexport default MagicProvider;\n", "explanation": "Here is a concise summary:\n\n**Purpose:** Provides a Web3 context with Magic RPC provider.\n\n**Functionality:** Sets up an OAuth extension, initializes Magic and Web3 providers, and returns a Magic Context provider with necessary values.", "metadata": {"repo": "magiclabs/example-moonpay-onramp", "file": "src/components/magic/MagicProvider.tsx", "chunk_number": 2, "total_chunks": 2}, "repository_explanation": "This repository appears to be an example implementation for integrating MoonPay's on-ramp solution into a Magic Labs project. \n\nKey points:\n\n* Purpose: Example code for MoonPay integration\n* Content: Code snippet(s) illustrating how to use MoonPay API in a Magic Labs context", "file_summary": "Here is a concise and holistic summary of the file 'src/components/magic/MagicProvider.tsx':\n\nProvides a Magic SDK context for React apps, enabling authentication via Magic and Ethereum interactions through Web3.js, including setup of OAuth extension and initialization of Magic and Web3 providers."}
{"code": "import { useMagic } from '../MagicProvider';\nimport showToast from '@/utils/showToast';\nimport Spinner from '../../ui/Spinner';\nimport { RPCError, RPCErrorCode } from 'magic-sdk';\nimport { LoginProps } from '@/utils/types';\nimport { saveUserInfo } from '@/utils/common';\nimport Card from '../../ui/Card';\nimport CardHeader from '../../ui/CardHeader';\nimport { useState } from 'react';\nimport FormInput from '@/components/ui/FormInput';\n\nconst EmailOTP = ({ token, setToken }: LoginProps) => {\n  const { magic } = useMagic();\n  const [email, setEmail] = useState('');\n  const [emailError, setEmailError] = useState(false);\n  const [isLoginInProgress, setLoginInProgress] = useState(false);\n\n  const handleLogin = async () => {\n    if (!email.match(/^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/)) {\n      setEmailError(true);\n    } else {\n      try {\n        setLoginInProgress(true);\n        setEmailError(false);\n        const token = await magic?.auth.loginWithEmailOTP({ email });\n", "explanation": "**Summary:**\n\nThis block is a React component named `EmailOTP` that handles email-based login with OTP (One-Time Password) verification using the Magic SDK. It accepts a `token` prop, updates the user's info upon successful login, and displays a spinner during the authentication process.", "metadata": {"repo": "magiclabs/example-moonpay-onramp", "file": "src/components/magic/auth/EmailOTP.tsx", "chunk_number": 1, "total_chunks": 3}, "repository_explanation": "This repository appears to be an example implementation for integrating MoonPay's on-ramp solution into a Magic Labs project. \n\nKey points:\n\n* Purpose: Example code for MoonPay integration\n* Content: Code snippet(s) illustrating how to use MoonPay API in a Magic Labs context", "file_summary": "Here is a concise holistic summary of the file 'src/components/magic/auth/EmailOTP.tsx':\n\nThe `EmailOTP` component handles email-based login with OTP verification using the Magic SDK, updating user info upon successful login while displaying a spinner during authentication. It enables users to input their email, validate login credentials, and save user information, all within a controlled UI state that reflects the login progress."}
{"code": "        const metadata = await magic?.user.getMetadata();\n\n        if (!token || !metadata?.publicAddress) {\n          throw new Error('Magic login failed');\n        }\n\n        setToken(token);\n        saveUserInfo(token, 'EMAIL', metadata?.publicAddress);\n        setEmail('');\n      } catch (e) {\n        console.log('login error: ' + JSON.stringify(e));\n        if (e instanceof RPCError) {\n          switch (e.code) {\n            case RPCErrorCode.MagicLinkFailedVerification:\n            case RPCErrorCode.MagicLinkExpired:\n            case RPCErrorCode.MagicLinkRateLimited:\n            case RPCErrorCode.UserAlreadyLoggedIn:\n              showToast({ message: e.message, type: 'error' });\n              break;\n            default:\n              showToast({\n                message: 'Something went wrong. Please try again',\n                type: 'error',\n              });\n          }\n        }\n      } finally {\n        setLoginInProgress(false);\n      }\n    }\n  };\n\n  return (\n    <Card>", "explanation": "Here is a concise summary of the block's purpose and functionality:\n\n**Purpose:** Handle Magic Login verification and user info saving.\n\n**Functionality:**\n\n1. Retrieves metadata from Magic User API.\n2. Validates login token and public address.\n3. Saves user info if valid.\n4. Handles login errors and shows error messages.\n5. Updates UI state to reflect login progress.", "metadata": {"repo": "magiclabs/example-moonpay-onramp", "file": "src/components/magic/auth/EmailOTP.tsx", "chunk_number": 2, "total_chunks": 3}, "repository_explanation": "This repository appears to be an example implementation for integrating MoonPay's on-ramp solution into a Magic Labs project. \n\nKey points:\n\n* Purpose: Example code for MoonPay integration\n* Content: Code snippet(s) illustrating how to use MoonPay API in a Magic Labs context", "file_summary": "Here is a concise holistic summary of the file 'src/components/magic/auth/EmailOTP.tsx':\n\nThe `EmailOTP` component handles email-based login with OTP verification using the Magic SDK, updating user info upon successful login while displaying a spinner during authentication. It enables users to input their email, validate login credentials, and save user information, all within a controlled UI state that reflects the login progress."}
{"code": "      <CardHeader id=\"login\">Email OTP Login</CardHeader>\n      <div className=\"login-method-grid-item-container\">\n        <FormInput\n          onChange={(e) => {\n            if (emailError) setEmailError(false);\n            setEmail(e.target.value);\n          }}\n          placeholder={token.length > 0 ? 'Already logged in' : 'Email'}\n          value={email}\n        />\n        {emailError && <span className=\"error\">Enter a valid email</span>}\n        <button\n          className=\"login-button\"\n          disabled={isLoginInProgress || (token.length > 0 ? false : email.length == 0)}\n          onClick={() => handleLogin()}\n        >\n          {isLoginInProgress ? <Spinner /> : 'Log in / Sign up'}\n        </button>\n      </div>\n    </Card>\n  );\n};\n\nexport default EmailOTP;\n", "explanation": "Here is a concise summary:\n\n**Purpose:** Email OTP Login functionality.\n\n**Functionality:** Allows user to input email, displays error message if invalid, and enables login button with spinner animation. Button triggers login process when clicked.", "metadata": {"repo": "magiclabs/example-moonpay-onramp", "file": "src/components/magic/auth/EmailOTP.tsx", "chunk_number": 3, "total_chunks": 3}, "repository_explanation": "This repository appears to be an example implementation for integrating MoonPay's on-ramp solution into a Magic Labs project. \n\nKey points:\n\n* Purpose: Example code for MoonPay integration\n* Content: Code snippet(s) illustrating how to use MoonPay API in a Magic Labs context", "file_summary": "Here is a concise holistic summary of the file 'src/components/magic/auth/EmailOTP.tsx':\n\nThe `EmailOTP` component handles email-based login with OTP verification using the Magic SDK, updating user info upon successful login while displaying a spinner during authentication. It enables users to input their email, validate login credentials, and save user information, all within a controlled UI state that reflects the login progress."}
{"code": "import React, { useCallback, useEffect, useState } from 'react';\nimport Divider from '@/components/ui/Divider';\nimport { useMagic } from '../MagicProvider';\nimport FormButton from '@/components/ui/FormButton';\nimport FormInput from '@/components/ui/FormInput';\nimport ErrorText from '@/components/ui/ErrorText';\nimport Card from '@/components/ui/Card';\nimport CardHeader from '@/components/ui/CardHeader';\nimport { getFaucetUrl, getNetworkToken } from '@/utils/network';\nimport showToast from '@/utils/showToast';\nimport Spacer from '@/components/ui/Spacer';\nimport TransactionHistory from '@/components/ui/TransactionHistory';\nimport Image from 'next/image';\nimport Link from 'public/link.svg';\n\nimport dynamic from 'next/dynamic';\n\nconst MoonPayBuyWidget = dynamic(\n  () => import('@moonpay/moonpay-react').then((mod) => mod.MoonPayBuyWidget),\n  { ssr: false },\n);\n\nconst SendTransaction = () => {\n  const { web3 } = useMagic();\n  const [toAddress, setToAddress] = useState('');\n  const [amount, setAmount] = useState('');", "explanation": "**Summary**\n\nThis code block is a React functional component named `SendTransaction`. Its purpose is to facilitate sending cryptocurrency transactions using a third-party service (`MoonPayBuyWidget`) integrated with a custom magic provider (`useMagic`). It also manages form inputs for recipient address and amount, displays error messages, and shows transaction history.", "metadata": {"repo": "magiclabs/example-moonpay-onramp", "file": "src/components/magic/cards/SendTransactionCard.tsx", "chunk_number": 1, "total_chunks": 5}, "repository_explanation": "This repository appears to be an example implementation for integrating MoonPay's on-ramp solution into a Magic Labs project. \n\nKey points:\n\n* Purpose: Example code for MoonPay integration\n* Content: Code snippet(s) illustrating how to use MoonPay API in a Magic Labs context", "file_summary": "Here's a concise summary of the file 'src/components/magic/cards/SendTransactionCard.tsx':\n\n**Purpose:** Handle sending cryptocurrency transactions using MoonPay Buy Widget.\n\n**Functionality:**\n\n* Validate user input for recipient address and amount.\n* Send Ethereum transaction using Web3 library when validated inputs are provided.\n* Display success/failure messages, update UI state, and clear input fields on transaction completion.\n* Conditionally render a `TransactionHistory` component within a `Card` based on a specific condition (`hash`)."}
{"code": "  const [disabled, setDisabled] = useState(!toAddress || !amount);\n  const [hash, setHash] = useState('');\n  const [toAddressError, setToAddressError] = useState(false);\n  const [amountError, setAmountError] = useState(false);\n  const publicAddress = localStorage.getItem('user');\n  const [isVisible, setIsVisible] = useState<boolean>(false)\n\n  useEffect(() => {\n    setDisabled(!toAddress || !amount);\n    setAmountError(false);\n    setToAddressError(false);\n  }, [amount, toAddress]);\n\n  const sendTransaction = useCallback(() => {\n    if (!web3?.utils.isAddress(toAddress)) {\n      return setToAddressError(true);\n    }\n    if (isNaN(Number(amount))) {\n      return setAmountError(true);\n    }\n    setDisabled(true);\n    const txnParams = {\n      from: publicAddress,\n      to: toAddress,\n      value: web3.utils.toWei(amount, 'ether'),\n      gas: 21000,\n    };\n    web3.eth\n      .sendTransaction(txnParams as any)\n      .on('transactionHash', (txHash) => {\n        setHash(txHash);", "explanation": "Here is a concise summary of the purpose and functionality of this block:\n\n**Purpose:** Handle user input and send Ethereum transaction.\n\n**Functionality:**\n\n* Validate user input for toAddress and amount.\n* Enable/disable submit button based on input validation.\n* Send Ethereum transaction using Web3 library when validated inputs are provided.", "metadata": {"repo": "magiclabs/example-moonpay-onramp", "file": "src/components/magic/cards/SendTransactionCard.tsx", "chunk_number": 2, "total_chunks": 5}, "repository_explanation": "This repository appears to be an example implementation for integrating MoonPay's on-ramp solution into a Magic Labs project. \n\nKey points:\n\n* Purpose: Example code for MoonPay integration\n* Content: Code snippet(s) illustrating how to use MoonPay API in a Magic Labs context", "file_summary": "Here's a concise summary of the file 'src/components/magic/cards/SendTransactionCard.tsx':\n\n**Purpose:** Handle sending cryptocurrency transactions using MoonPay Buy Widget.\n\n**Functionality:**\n\n* Validate user input for recipient address and amount.\n* Send Ethereum transaction using Web3 library when validated inputs are provided.\n* Display success/failure messages, update UI state, and clear input fields on transaction completion.\n* Conditionally render a `TransactionHistory` component within a `Card` based on a specific condition (`hash`)."}
{"code": "        console.log('Transaction hash:', txHash);\n      })\n      .then((receipt) => {\n        showToast({\n          message: 'Transaction Successful',\n          type: 'success',\n        });\n        setToAddress('');\n        setAmount('');\n        console.log('Transaction receipt:', receipt);\n      })\n      .catch((error) => {\n        console.error(error);\n        setDisabled(false);\n      });\n  }, [web3, amount, publicAddress, toAddress]);\n\n  return (\n    <Card>\n      <CardHeader id=\"send-transaction\">Send Transaction</CardHeader>\n      {getFaucetUrl() && (\n        <div className=\"flex flex-col gap-2\">\n          <a href={getFaucetUrl()} target=\"_blank\" rel=\"noreferrer\">\n            <FormButton onClick={() => null} disabled={false}>\n              Get Test {getNetworkToken()}\n              <Image src={Link} alt=\"link-icon\" className=\"ml-[3px]\" />\n            </FormButton>\n          </a>\n          <FormButton onClick={() => setIsVisible(true)} disabled={false}>\n            Buy Crypto with Moonpay", "explanation": "Here is a concise summary of the block:\n\n**Purpose:** Handle sending a transaction, displaying success/failure messages, and updating UI state.\n\n**Functionality:**\n\n1. Send a transaction using `web3` (catches errors)\n2. Display \"Transaction Successful\" message and clear input fields on success\n3. Log console messages for debugging purposes\n\nThis block is likely part of a React component that handles sending transactions to a blockchain network.", "metadata": {"repo": "magiclabs/example-moonpay-onramp", "file": "src/components/magic/cards/SendTransactionCard.tsx", "chunk_number": 3, "total_chunks": 5}, "repository_explanation": "This repository appears to be an example implementation for integrating MoonPay's on-ramp solution into a Magic Labs project. \n\nKey points:\n\n* Purpose: Example code for MoonPay integration\n* Content: Code snippet(s) illustrating how to use MoonPay API in a Magic Labs context", "file_summary": "Here's a concise summary of the file 'src/components/magic/cards/SendTransactionCard.tsx':\n\n**Purpose:** Handle sending cryptocurrency transactions using MoonPay Buy Widget.\n\n**Functionality:**\n\n* Validate user input for recipient address and amount.\n* Send Ethereum transaction using Web3 library when validated inputs are provided.\n* Display success/failure messages, update UI state, and clear input fields on transaction completion.\n* Conditionally render a `TransactionHistory` component within a `Card` based on a specific condition (`hash`)."}
{"code": "            <Image src={Link} alt=\"link-icon\" className=\"ml-[3px]\" />\n          </FormButton>\n          <MoonPayBuyWidget\n            variant=\"overlay\"\n            baseCurrencyCode=\"usd\"\n            baseCurrencyAmount=\"100\"\n            defaultCurrencyCode=\"eth\"\n            visible={isVisible}\n            onCloseOverlay={() => setIsVisible(!isVisible)}\n          />\n          <Divider />\n        </div>\n      )}\n\n      <FormInput\n        value={toAddress}\n        onChange={(e: any) => setToAddress(e.target.value)}\n        placeholder=\"Receiving Address\"\n      />\n      {toAddressError ? <ErrorText>Invalid address</ErrorText> : null}\n      <FormInput\n        value={amount}\n        onChange={(e: any) => setAmount(e.target.value)}\n        placeholder={`Amount (${getNetworkToken()})`}\n      />\n      {amountError ? <ErrorText className=\"error\">Invalid amount</ErrorText> : null}\n      <FormButton onClick={sendTransaction} disabled={!toAddress || !amount || disabled}>\n        Send Transaction\n      </FormButton>\n", "explanation": "Here is a summary of the purpose and functionality of this block:\n\n**Purpose:** A form for sending a cryptocurrency transaction, featuring an icon button, wallet widget, input fields, error messages, and a submit button.\n\n**Functionality:**\n\n* User inputs recipient address and amount.\n* Displays errors if address or amount are invalid.\n* Allows user to select default currency using a MoonPay wallet widget.\n* Submits the transaction when \"Send Transaction\" button is clicked.", "metadata": {"repo": "magiclabs/example-moonpay-onramp", "file": "src/components/magic/cards/SendTransactionCard.tsx", "chunk_number": 4, "total_chunks": 5}, "repository_explanation": "This repository appears to be an example implementation for integrating MoonPay's on-ramp solution into a Magic Labs project. \n\nKey points:\n\n* Purpose: Example code for MoonPay integration\n* Content: Code snippet(s) illustrating how to use MoonPay API in a Magic Labs context", "file_summary": "Here's a concise summary of the file 'src/components/magic/cards/SendTransactionCard.tsx':\n\n**Purpose:** Handle sending cryptocurrency transactions using MoonPay Buy Widget.\n\n**Functionality:**\n\n* Validate user input for recipient address and amount.\n* Send Ethereum transaction using Web3 library when validated inputs are provided.\n* Display success/failure messages, update UI state, and clear input fields on transaction completion.\n* Conditionally render a `TransactionHistory` component within a `Card` based on a specific condition (`hash`)."}
{"code": "      {hash ? (\n        <>\n          <Spacer size={20} />\n          <TransactionHistory />\n        </>\n      ) : null}\n    </Card>\n  );\n};\n\nexport default SendTransaction;\n", "explanation": "**Summary**\n\nThis block conditionally renders a `TransactionHistory` component within a `Card` when a certain condition (`hash`) is met, otherwise it returns nothing (`null`).", "metadata": {"repo": "magiclabs/example-moonpay-onramp", "file": "src/components/magic/cards/SendTransactionCard.tsx", "chunk_number": 5, "total_chunks": 5}, "repository_explanation": "This repository appears to be an example implementation for integrating MoonPay's on-ramp solution into a Magic Labs project. \n\nKey points:\n\n* Purpose: Example code for MoonPay integration\n* Content: Code snippet(s) illustrating how to use MoonPay API in a Magic Labs context", "file_summary": "Here's a concise summary of the file 'src/components/magic/cards/SendTransactionCard.tsx':\n\n**Purpose:** Handle sending cryptocurrency transactions using MoonPay Buy Widget.\n\n**Functionality:**\n\n* Validate user input for recipient address and amount.\n* Send Ethereum transaction using Web3 library when validated inputs are provided.\n* Display success/failure messages, update UI state, and clear input fields on transaction completion.\n* Conditionally render a `TransactionHistory` component within a `Card` based on a specific condition (`hash`)."}
{"code": "import { useCallback, useEffect, useMemo, useState } from 'react';\nimport Divider from '@/components/ui/Divider';\nimport { LoginProps } from '@/utils/types';\nimport { logout } from '@/utils/common';\nimport { useMagic } from '../MagicProvider';\nimport Card from '@/components/ui/Card';\nimport CardHeader from '@/components/ui/CardHeader';\nimport CardLabel from '@/components/ui/CardLabel';\nimport Spinner from '@/components/ui/Spinner';\nimport { getNetworkName, getNetworkToken } from '@/utils/network';\n\nconst UserInfo = ({ token, setToken }: LoginProps) => {\n  const { magic, web3 } = useMagic();\n\n  const [balance, setBalance] = useState('...');\n  const [copied, setCopied] = useState('Copy');\n  const [isRefreshing, setIsRefreshing] = useState(false);\n\n  const [publicAddress] = useState(localStorage.getItem('user'));\n\n  const getBalance = useCallback(async () => {\n    if (publicAddress && web3) {\n      const balance = await web3.eth.getBalance(publicAddress);\n      if (balance == BigInt(0)) {", "explanation": "**Summary:**\n\nThis block is a React functional component named `UserInfo`. It displays user information, including:\n\n* Balance\n* Public address (copied to clipboard)\n* Refreshing status\n\nThe component uses the `useMagic` hook to access Magic.js and Web3 functionality. It also uses local storage to retrieve the public address of the logged-in user.\n\nKey functions include:\n\n* Getting the balance of the user's account\n* Handling copy and refresh states", "metadata": {"repo": "magiclabs/example-moonpay-onramp", "file": "src/components/magic/cards/UserInfoCard.tsx", "chunk_number": 1, "total_chunks": 3}, "repository_explanation": "This repository appears to be an example implementation for integrating MoonPay's on-ramp solution into a Magic Labs project. \n\nKey points:\n\n* Purpose: Example code for MoonPay integration\n* Content: Code snippet(s) illustrating how to use MoonPay API in a Magic Labs context", "file_summary": "Here is a concise summary:\n\nThis React component, `UserInfoCard`, displays user account information in a card format, including balance, network address, and connection status. It provides options to refresh the balance and copy the public address, with buttons for disconnecting."}
{"code": "        setBalance('0');\n      } else {\n        setBalance(web3.utils.fromWei(balance, 'ether'));\n      }\n      console.log('BALANCE: ', balance);\n    }\n  }, [web3, publicAddress]);\n\n  const refresh = useCallback(async () => {\n    setIsRefreshing(true);\n    await getBalance();\n    setTimeout(() => {\n      setIsRefreshing(false);\n    }, 500);\n  }, [getBalance]);\n\n  useEffect(() => {\n    if (web3) {\n      refresh();\n    }\n  }, [web3, refresh]);\n\n  useEffect(() => {\n    setBalance('...');\n  }, [magic]);\n\n  const disconnect = useCallback(async () => {\n    if (magic) {\n      await logout(setToken, magic);\n    }\n  }, [magic, setToken]);\n\n  const copy = useCallback(() => {\n    if (publicAddress && copied === 'Copy') {\n      setCopied('Copied!');\n      navigator.clipboard.writeText(publicAddress);\n      setTimeout(() => {\n        setCopied('Copy');\n      }, 1000);\n    }\n  }, [copied, publicAddress]);\n\n  return (\n    <Card>\n      <CardHeader id=\"Wallet\">Wallet</CardHeader>", "explanation": "Here is a concise summary:\n\nThis block of code manages a cryptocurrency wallet's balance display.\n\n* It updates the balance on changes in web3 instance or public address.\n* It refreshes the balance every 500ms when the web3 instance changes.\n* It displays a loading animation while refreshing the balance.\n* It provides buttons to disconnect and copy the public address.", "metadata": {"repo": "magiclabs/example-moonpay-onramp", "file": "src/components/magic/cards/UserInfoCard.tsx", "chunk_number": 2, "total_chunks": 3}, "repository_explanation": "This repository appears to be an example implementation for integrating MoonPay's on-ramp solution into a Magic Labs project. \n\nKey points:\n\n* Purpose: Example code for MoonPay integration\n* Content: Code snippet(s) illustrating how to use MoonPay API in a Magic Labs context", "file_summary": "Here is a concise summary:\n\nThis React component, `UserInfoCard`, displays user account information in a card format, including balance, network address, and connection status. It provides options to refresh the balance and copy the public address, with buttons for disconnecting."}
{"code": "      <CardLabel leftHeader=\"Status\" rightAction={<div onClick={disconnect}>Disconnect</div>} isDisconnect />\n      <div className=\"flex-row\">\n        <div className=\"green-dot\" />\n        <div className=\"connected\">Connected to {getNetworkName()}</div>\n      </div>\n      <Divider />\n      <CardLabel leftHeader=\"Address\" rightAction={!publicAddress ? <Spinner /> : <div onClick={copy}>{copied}</div>} />\n      <div className=\"code\">{publicAddress?.length == 0 ? 'Fetching address..' : publicAddress}</div>\n      <Divider />\n      <CardLabel\n        leftHeader=\"Balance\"\n        rightAction={\n          isRefreshing ? (\n            <div className=\"loading-container\">\n              <Spinner />\n            </div>\n          ) : (\n            <div onClick={refresh}>Refresh</div>\n          )\n        }\n      />\n      <div className=\"code\">\n        {balance.substring(0, 7)} {getNetworkToken()}\n      </div>\n    </Card>\n  );\n};\n\nexport default UserInfo;\n", "explanation": "Here is a concise summary:\n\n**Purpose:** Displays user account information in a card format.\n\n**Functionality:**\n\n* Shows connection status (connected/disconnected)\n* Displays network address (fetching/address available)\n* Displays balance with option to refresh\n* Includes buttons for disconnecting and copying public address.", "metadata": {"repo": "magiclabs/example-moonpay-onramp", "file": "src/components/magic/cards/UserInfoCard.tsx", "chunk_number": 3, "total_chunks": 3}, "repository_explanation": "This repository appears to be an example implementation for integrating MoonPay's on-ramp solution into a Magic Labs project. \n\nKey points:\n\n* Purpose: Example code for MoonPay integration\n* Content: Code snippet(s) illustrating how to use MoonPay API in a Magic Labs context", "file_summary": "Here is a concise summary:\n\nThis React component, `UserInfoCard`, displays user account information in a card format, including balance, network address, and connection status. It provides options to refresh the balance and copy the public address, with buttons for disconnecting."}
{"code": "import React, { useState } from 'react';\nimport Disconnect from '../wallet-methods/Disconnect';\nimport GetIdToken from '../wallet-methods/GetIdToken';\nimport GetMetadata from '../wallet-methods/GetMetadata';\nimport Divider from '@/components/ui/Divider';\nimport { LoginProps } from '@/utils/types';\nimport Card from '@/components/ui/Card';\nimport CardHeader from '@/components/ui/CardHeader';\nimport { LoginMethod } from '@/utils/common';\n\nimport UpdateEmail from '../wallet-methods/UpdateEmail'\n\nconst WalletMethods = ({ token, setToken }: LoginProps) => {\n  const [loginMethod, setLoginMethod] = useState<LoginMethod | null>(\n    localStorage.getItem('loginMethod') as LoginMethod,\n  );\n  return (\n    <Card>\n      <CardHeader id=\"methods\">User Methods</CardHeader>\n\t  \n\t  \t{loginMethod && loginMethod == 'EMAIL' && (\n\t\t\t<>\n\t\t\t\t<UpdateEmail />\n\t\t\t\t<Divider />\n\t\t\t</>\n\t\t)}\t  \n      <GetIdToken />\n      <Divider />\n      <GetMetadata />\n      <Divider />\n      <Disconnect token={token} setToken={setToken} />\n    </Card>\n  );\n};\n", "explanation": "**Summary:**\n\nThis block is a React component that displays various wallet methods, including login options and account management features. It uses local storage to store and retrieve the current login method. The functionality includes:\n\n* Displaying user methods (login options)\n* Updating email\n* Getting ID token\n* Getting metadata\n* Disconnecting from the wallet", "metadata": {"repo": "magiclabs/example-moonpay-onramp", "file": "src/components/magic/cards/WalletMethodsCard.tsx", "chunk_number": 1, "total_chunks": 2}, "repository_explanation": "This repository appears to be an example implementation for integrating MoonPay's on-ramp solution into a Magic Labs project. \n\nKey points:\n\n* Purpose: Example code for MoonPay integration\n* Content: Code snippet(s) illustrating how to use MoonPay API in a Magic Labs context", "file_summary": "Here is a concise summary of the file 'src/components/magic/cards/WalletMethodsCard.tsx':\n\n**Summary:**\nThis React component displays wallet methods, including login options, account management features, and logout functionality, leveraging local storage for method persistence."}
{"code": "export default WalletMethods;\n", "explanation": "This line exports a JavaScript module named \"WalletMethods\" as the default export.", "metadata": {"repo": "magiclabs/example-moonpay-onramp", "file": "src/components/magic/cards/WalletMethodsCard.tsx", "chunk_number": 2, "total_chunks": 2}, "repository_explanation": "This repository appears to be an example implementation for integrating MoonPay's on-ramp solution into a Magic Labs project. \n\nKey points:\n\n* Purpose: Example code for MoonPay integration\n* Content: Code snippet(s) illustrating how to use MoonPay API in a Magic Labs context", "file_summary": "Here is a concise summary of the file 'src/components/magic/cards/WalletMethodsCard.tsx':\n\n**Summary:**\nThis React component displays wallet methods, including login options, account management features, and logout functionality, leveraging local storage for method persistence."}
{"code": "import React, { useCallback, useState } from 'react';\nimport { logout } from '@/utils/common';\nimport { LoginProps } from '@/utils/types';\nimport { useMagic } from '../MagicProvider';\nimport Spinner from '@/components/ui/Spinner';\n\nconst Disconnect = ({ setToken }: LoginProps) => {\n  const { magic } = useMagic();\n  const [disabled, setDisabled] = useState(false);\n\n  const disconnect = useCallback(async () => {\n    if (!magic) return;\n    try {\n      setDisabled(true);\n      await logout(setToken, magic);\n      setDisabled(false);\n    } catch (error) {\n      setDisabled(false);\n      console.error(error);\n    }\n  }, [magic, setToken]);\n\n  return (\n    <div className=\"wallet-method-container\">\n      <button className=\"wallet-method\" onClick={disconnect} disabled={disabled}>\n        {disabled ? (\n          <div className=\"loading-container w-[115px]\">\n            <Spinner />\n          </div>\n        ) : (\n          'disconnect()'\n        )}\n      </button>", "explanation": "Here is a concise summary:\n\n**Purpose:** Disconnect user from Magic authentication service.\n\n**Functionality:** Button that, when clicked, logs out user and updates token state, displaying a loading spinner during the process.", "metadata": {"repo": "magiclabs/example-moonpay-onramp", "file": "src/components/magic/wallet-methods/Disconnect.tsx", "chunk_number": 1, "total_chunks": 2}, "repository_explanation": "This repository appears to be an example implementation for integrating MoonPay's on-ramp solution into a Magic Labs project. \n\nKey points:\n\n* Purpose: Example code for MoonPay integration\n* Content: Code snippet(s) illustrating how to use MoonPay API in a Magic Labs context", "file_summary": "Here is a concise summary of the file 'src/components/magic/wallet-methods/Disconnect.tsx':\n\n**Disconnect User**: Button to logout user from Magic authentication service, updating token state and displaying a loading spinner during logout process, allowing users to disconnect from a dApp."}
{"code": "      <div className=\"wallet-method-desc\">Disconnects user from dApp.</div>\n    </div>\n  );\n};\n\nexport default Disconnect;\n", "explanation": "**Purpose:** Allows users to disconnect from a decentralized application (dApp).\n\n**Functionality:** A button or option that logs out the user and terminates their session with the dApp.", "metadata": {"repo": "magiclabs/example-moonpay-onramp", "file": "src/components/magic/wallet-methods/Disconnect.tsx", "chunk_number": 2, "total_chunks": 2}, "repository_explanation": "This repository appears to be an example implementation for integrating MoonPay's on-ramp solution into a Magic Labs project. \n\nKey points:\n\n* Purpose: Example code for MoonPay integration\n* Content: Code snippet(s) illustrating how to use MoonPay API in a Magic Labs context", "file_summary": "Here is a concise summary of the file 'src/components/magic/wallet-methods/Disconnect.tsx':\n\n**Disconnect User**: Button to logout user from Magic authentication service, updating token state and displaying a loading spinner during logout process, allowing users to disconnect from a dApp."}
{"code": "import React, { useCallback, useState } from 'react';\nimport { useMagic } from '../MagicProvider';\nimport showToast from '@/utils/showToast';\nimport Spinner from '@/components/ui/Spinner';\n\nconst GetIdToken = () => {\n  const { magic } = useMagic();\n  const [disabled, setDisabled] = useState(false);\n\n  const getWalletType = useCallback(async () => {\n    if (!magic) return;\n    try {\n      setDisabled(true);\n      const idToken = await magic.user.getIdToken();\n      setDisabled(false);\n      console.log('ID Token: ' + idToken);\n      showToast({\n        message: 'Please check console for the ID Token Log',\n        type: 'success',\n      });\n    } catch (error) {\n      setDisabled(false);\n      console.error(error);\n    }\n  }, [magic]);\n\n  return (\n    <div className=\"wallet-method-container\">\n      <button className=\"wallet-method\" onClick={getWalletType} disabled={disabled}>\n        {disabled ? (\n          <div className=\"loading-container w-[86px]\">\n            <Spinner />\n          </div>\n        ) : (", "explanation": "Here is a concise summary:\n\n**Purpose:** Retrieves an ID token from the Magic user authentication service.\n\n**Functionality:**\n\n1. Uses the `useMagic` hook to access the Magic user object.\n2. Toggles a disabled state when retrieving the ID token.\n3. Calls the `magic.user.getIdToken()` method to retrieve the ID token.\n4. Displays a success message and logs the ID token to the console on success.\n5. Disables the button until the ID token is retrieved, displaying a loading spinner.", "metadata": {"repo": "magiclabs/example-moonpay-onramp", "file": "src/components/magic/wallet-methods/GetIdToken.tsx", "chunk_number": 1, "total_chunks": 2}, "repository_explanation": "This repository appears to be an example implementation for integrating MoonPay's on-ramp solution into a Magic Labs project. \n\nKey points:\n\n* Purpose: Example code for MoonPay integration\n* Content: Code snippet(s) illustrating how to use MoonPay API in a Magic Labs context", "file_summary": "Here's a concise and to-the-point holistic summary:\n\n**GetIdToken**: Retrieves an ID token from Magic, disabling the button until successful, and logs a success message with the retrieved token."}
{"code": "          'getIdToken()'\n        )}\n      </button>\n      <div className=\"wallet-method-desc\">\n        Generates a Decentralized Id Token which acts as a proof of authentication to resource servers.\n      </div>\n    </div>\n  );\n};\n\nexport default GetIdToken;\n", "explanation": "This block generates a Decentralized ID token, providing proof of authentication for access to resources.", "metadata": {"repo": "magiclabs/example-moonpay-onramp", "file": "src/components/magic/wallet-methods/GetIdToken.tsx", "chunk_number": 2, "total_chunks": 2}, "repository_explanation": "This repository appears to be an example implementation for integrating MoonPay's on-ramp solution into a Magic Labs project. \n\nKey points:\n\n* Purpose: Example code for MoonPay integration\n* Content: Code snippet(s) illustrating how to use MoonPay API in a Magic Labs context", "file_summary": "Here's a concise and to-the-point holistic summary:\n\n**GetIdToken**: Retrieves an ID token from Magic, disabling the button until successful, and logs a success message with the retrieved token."}
{"code": "import React, { useCallback, useState } from 'react';\nimport showToast from '@/utils/showToast';\nimport { useMagic } from '../MagicProvider';\nimport Spinner from '@/components/ui/Spinner';\n\nconst GetMetadata = () => {\n  const { magic } = useMagic();\n  const [disabled, setDisabled] = useState(false);\n\n  const getMetadata = useCallback(async () => {\n    if (!magic) return;\n    try {\n      setDisabled(true);\n      const userInfo = await magic.user.getInfo();\n      setDisabled(false);\n      showToast({\n        message: `Public Address: ${userInfo.publicAddress}`,\n        type: 'success',\n      });\n    } catch (error) {\n      setDisabled(false);\n      console.error(error);\n    }\n  }, [magic]);\n\n  return (\n    <div className=\"wallet-method-container\">\n      <button className=\"wallet-method\" onClick={getMetadata} disabled={disabled}>\n        {disabled ? (\n          <div className=\"loading-container w-[220px]\">\n            <Spinner />\n          </div>\n        ) : (\n          'getInfo()'\n        )}\n      </button>", "explanation": "Here is a concise summary:\n\n**Purpose:** Get user metadata (public address) using the Magic library.\n\n**Functionality:** When clicked, displays a loading spinner and retrieves user info, then shows a toast message with the public address.", "metadata": {"repo": "magiclabs/example-moonpay-onramp", "file": "src/components/magic/wallet-methods/GetMetadata.tsx", "chunk_number": 1, "total_chunks": 2}, "repository_explanation": "This repository appears to be an example implementation for integrating MoonPay's on-ramp solution into a Magic Labs project. \n\nKey points:\n\n* Purpose: Example code for MoonPay integration\n* Content: Code snippet(s) illustrating how to use MoonPay API in a Magic Labs context", "file_summary": "Here is a concise and holistic summary of the file 'src/components/magic/wallet-methods/GetMetadata.tsx':\n\n**Purpose:** Retrieves user metadata (public address) using Magic library, displaying progress and result in a toast message."}
{"code": "      <div className=\"wallet-method-desc\">Retrieves information for the authenticated user.</div>\n    </div>\n  );\n};\n\nexport default GetMetadata;\n", "explanation": "This block retrieves information about an authenticated user.", "metadata": {"repo": "magiclabs/example-moonpay-onramp", "file": "src/components/magic/wallet-methods/GetMetadata.tsx", "chunk_number": 2, "total_chunks": 2}, "repository_explanation": "This repository appears to be an example implementation for integrating MoonPay's on-ramp solution into a Magic Labs project. \n\nKey points:\n\n* Purpose: Example code for MoonPay integration\n* Content: Code snippet(s) illustrating how to use MoonPay API in a Magic Labs context", "file_summary": "Here is a concise and holistic summary of the file 'src/components/magic/wallet-methods/GetMetadata.tsx':\n\n**Purpose:** Retrieves user metadata (public address) using Magic library, displaying progress and result in a toast message."}
{"code": "import React, { useCallback, useState } from 'react';\nimport ErrorText from '@/components/ui/ErrorText';\nimport Spacer from '@/components/ui/Spacer';\nimport { useMagic } from '../MagicProvider';\nimport Spinner from '@/components/ui/Spinner';\nimport FormInput from '@/components/ui/FormInput';\nimport showToast from '@/utils/showToast';\nimport { RPCError } from 'magic-sdk';\n\nconst UpdateEmail = () => {\n  const { magic } = useMagic();\n  const [disabled, setDisabled] = useState(false);\n  const [email, setEmail] = useState('');\n  const [emailError, setEmailError] = useState(false);\n\n  const updateEmail = useCallback(async () => {\n    if (!magic) return;\n    try {\n      if (!email.match(/^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/)) {\n        setEmailError(true);\n        setDisabled(false);\n      } else {\n        setDisabled(true);\n        await magic.auth.updateEmailWithUI({ email, showUI: true });\n        showToast({ message: 'Email Updated!', type: 'success' });", "explanation": "Here is a concise summary of the purpose and functionality of this block:\n\n**Purpose:** Update user's email address using Magic SDK.\n\n**Functionality:** Handles form input, validates email format, and updates email address via Magic SDK API, displaying success message on completion.", "metadata": {"repo": "magiclabs/example-moonpay-onramp", "file": "src/components/magic/wallet-methods/UpdateEmail.tsx", "chunk_number": 1, "total_chunks": 3}, "repository_explanation": "This repository appears to be an example implementation for integrating MoonPay's on-ramp solution into a Magic Labs project. \n\nKey points:\n\n* Purpose: Example code for MoonPay integration\n* Content: Code snippet(s) illustrating how to use MoonPay API in a Magic Labs context", "file_summary": "Here is a concise holistic summary of the file 'src/components/magic/wallet-methods/UpdateEmail.tsx':\n\n**Purpose:** Updates a user's email address using Magic SDK.\n\n**Functionality:** Handles email input validation, updates email on success, displays error message on failure, and manages button state to prevent concurrent requests."}
{"code": "        setDisabled(false);\n        setEmail('');\n      }\n    } catch (error) {\n      setDisabled(false);\n      console.error(error);\n      if (error instanceof RPCError) {\n        showToast({ message: error.message, type: 'error' });\n      } else {\n        showToast({ message: 'Update email failed', type: 'error' });\n      }\n    }\n  }, [magic, email]);\n\n  const handleEmailChange = (e: any) => {\n    setEmailError(false);\n    setEmail(e.target.value);\n  };\n\n  return (\n    <div className=\"wallet-method-container\">\n      <FormInput value={email} onChange={handleEmailChange} placeholder=\"New Email\" />\n      <button className=\"wallet-method\" onClick={updateEmail} disabled={disabled}>\n        {disabled ? (\n          <div className=\"loading-container w-[76px]\">\n            <Spinner />\n          </div>\n        ) : (\n          'updateEmail()'\n        )}\n      </button>\n      <div className=\"wallet-method-desc\">\n        Initiates the update email flow that allows a user to change their email address.\n      </div>", "explanation": "Here is a concise summary:\n\n**Purpose:** Updates a user's email address.\n\n**Functionality:**\n\n* Accepts new email input from the user\n* Validates and updates the email on success or error\n* Displays an error message if update fails\n* Disabled/Enabled button to prevent multiple simultaneous requests", "metadata": {"repo": "magiclabs/example-moonpay-onramp", "file": "src/components/magic/wallet-methods/UpdateEmail.tsx", "chunk_number": 2, "total_chunks": 3}, "repository_explanation": "This repository appears to be an example implementation for integrating MoonPay's on-ramp solution into a Magic Labs project. \n\nKey points:\n\n* Purpose: Example code for MoonPay integration\n* Content: Code snippet(s) illustrating how to use MoonPay API in a Magic Labs context", "file_summary": "Here is a concise holistic summary of the file 'src/components/magic/wallet-methods/UpdateEmail.tsx':\n\n**Purpose:** Updates a user's email address using Magic SDK.\n\n**Functionality:** Handles email input validation, updates email on success, displays error message on failure, and manages button state to prevent concurrent requests."}
{"code": "      {emailError ? (\n        <div className=\"mb-[-10px]\">\n          <Spacer size={20} />\n          <ErrorText>Enter a valid email!</ErrorText>\n        </div>\n      ) : null}\n    </div>\n  );\n};\n\nexport default UpdateEmail;\n", "explanation": "Here is a concise summary:\n\n**Purpose:** Display an error message if an invalid email is entered.\n\n**Functionality:** Conditionally renders a message asking for a valid email, spaced below other UI elements.", "metadata": {"repo": "magiclabs/example-moonpay-onramp", "file": "src/components/magic/wallet-methods/UpdateEmail.tsx", "chunk_number": 3, "total_chunks": 3}, "repository_explanation": "This repository appears to be an example implementation for integrating MoonPay's on-ramp solution into a Magic Labs project. \n\nKey points:\n\n* Purpose: Example code for MoonPay integration\n* Content: Code snippet(s) illustrating how to use MoonPay API in a Magic Labs context", "file_summary": "Here is a concise holistic summary of the file 'src/components/magic/wallet-methods/UpdateEmail.tsx':\n\n**Purpose:** Updates a user's email address using Magic SDK.\n\n**Functionality:** Handles email input validation, updates email on success, displays error message on failure, and manages button state to prevent concurrent requests."}
{"code": "import React from 'react';\n\ninterface Props {\n  children: React.ReactNode;\n}\n\nconst Card = ({ children }: Props) => {\n  return <div className=\"card\">{children}</div>;\n};\n\nexport default Card;\n", "explanation": "**Summary**\n\nThis block is a React functional component named `Card`. It takes arbitrary content (`children`) as an input and renders it within a `<div>` element with a CSS class of \"card\".", "metadata": {"repo": "magiclabs/example-moonpay-onramp", "file": "src/components/ui/Card.tsx", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "This repository appears to be an example implementation for integrating MoonPay's on-ramp solution into a Magic Labs project. \n\nKey points:\n\n* Purpose: Example code for MoonPay integration\n* Content: Code snippet(s) illustrating how to use MoonPay API in a Magic Labs context", "file_summary": "Here is a concise summary:\n\n`Card.tsx`: A reusable React component that wraps arbitrary content in a `.card` container, accepting children as input."}
{"code": "import React from 'react'\n\ninterface Props {\n  children: React.ReactNode\n  id: string\n}\n\nconst CardHeader = ({ children, id }: Props) => {\n  return (\n    <h1 className=\"card-header\" id={id}>\n      {children}\n    </h1>\n  )\n}\n\nexport default CardHeader\n", "explanation": "**Purpose:** A reusable React component for a card header.\n\n**Functionality:** Displays its children (content) as an `<h1>` element with a customizable `id` attribute.", "metadata": {"repo": "magiclabs/example-moonpay-onramp", "file": "src/components/ui/CardHeader.tsx", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "This repository appears to be an example implementation for integrating MoonPay's on-ramp solution into a Magic Labs project. \n\nKey points:\n\n* Purpose: Example code for MoonPay integration\n* Content: Code snippet(s) illustrating how to use MoonPay API in a Magic Labs context", "file_summary": "Here is a concise summary:\n\n**src/components/ui/CardHeader.tsx:**\nA reusable React card header component that displays its content as a customizable `<h1>` title."}
{"code": "import React from 'react';\n\ninterface Props {\n  leftHeader?: React.ReactNode;\n  rightAction?: React.ReactNode;\n  isDisconnect?: boolean;\n  [rest: string]: any;\n}\n\nconst CardLabel = ({ leftHeader, rightAction, isDisconnect, ...rest }: Props) => {\n  return (\n    <div className=\"card-label-container\" {...rest}>\n      <div className=\"card-label\">{leftHeader}</div>\n      {rightAction ? (\n        <div className={`card-label ${isDisconnect ? 'disconnect-button' : 'action-button'}`}>{rightAction}</div>\n      ) : null}\n    </div>\n  );\n};\n\nexport default CardLabel;\n", "explanation": "Here is a concise summary:\n\n**Purpose:** A reusable React component for rendering a card label with customizable left header and right action buttons.\n\n**Functionality:** Displays a label on the left and an optional button (or other content) on the right, with dynamic styling based on the `isDisconnect` prop.", "metadata": {"repo": "magiclabs/example-moonpay-onramp", "file": "src/components/ui/CardLabel.tsx", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "This repository appears to be an example implementation for integrating MoonPay's on-ramp solution into a Magic Labs project. \n\nKey points:\n\n* Purpose: Example code for MoonPay integration\n* Content: Code snippet(s) illustrating how to use MoonPay API in a Magic Labs context", "file_summary": "Here is a concise and to-the-point summary of the file 'src/components/ui/CardLabel.tsx':\n\n**CardLabel**: A customizable React component displaying a label on the left and optional button/action content on the right, with dynamic styling based on `isDisconnect` prop."}
{"code": "import React from 'react'\n\nconst Divider = () => {\n  return <div className='divider' />\n}\n\nexport default Divider\n", "explanation": "**Purpose:** A reusable React component for rendering a simple divider.\n\n**Functionality:** Returns an empty `<div>` element with the class `divider`.", "metadata": {"repo": "magiclabs/example-moonpay-onramp", "file": "src/components/ui/Divider.tsx", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "This repository appears to be an example implementation for integrating MoonPay's on-ramp solution into a Magic Labs project. \n\nKey points:\n\n* Purpose: Example code for MoonPay integration\n* Content: Code snippet(s) illustrating how to use MoonPay API in a Magic Labs context", "file_summary": "Here is a concise summary of the file 'src/components/ui/Divider.tsx':\n\n\"Reusable Divider component: renders an empty `<div>` with class `divider`.\""}
{"code": "import React from 'react'\n\nconst ErrorText = ({children}: any) => {\n  return <div className='error'>{children}</div>\n}\n\nexport default ErrorText\n", "explanation": "**Summary:**\n\nThis is a reusable React component called `ErrorText`. Its purpose is to render a simple error message in a `<div>` element with class name \"error\", displaying the provided text or content (children).", "metadata": {"repo": "magiclabs/example-moonpay-onramp", "file": "src/components/ui/ErrorText.tsx", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "This repository appears to be an example implementation for integrating MoonPay's on-ramp solution into a Magic Labs project. \n\nKey points:\n\n* Purpose: Example code for MoonPay integration\n* Content: Code snippet(s) illustrating how to use MoonPay API in a Magic Labs context", "file_summary": "Here is a concise summary:\n\n\"Reusable ErrorText React component displays error messages within a 'error' div.\""}
{"code": "import React from 'react'\n\ninterface Props {\n\tchildren: React.ReactNode\n\tonClick: () => void\n\tdisabled: boolean\n}\n\nconst FormButton = ({children, onClick, disabled}: Props) => {\n  return (\n    <button className='form-button' disabled={disabled} onClick={onClick}>\n      {children}\n    </button>\n  )\n}\n\nexport default FormButton\n", "explanation": "Here is a concise summary:\n\n**Purpose:** A reusable React button component.\n\n**Functionality:** Renders a customizable button with optional click event handling, disabled state, and child content display.", "metadata": {"repo": "magiclabs/example-moonpay-onramp", "file": "src/components/ui/FormButton.tsx", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "This repository appears to be an example implementation for integrating MoonPay's on-ramp solution into a Magic Labs project. \n\nKey points:\n\n* Purpose: Example code for MoonPay integration\n* Content: Code snippet(s) illustrating how to use MoonPay API in a Magic Labs context", "file_summary": "Here is a concise and holistic summary of the file 'src/components/ui/FormButton.tsx':\n\n**Summary:** A customizable React button component for reusable UI functionality."}
{"code": "import React from 'react'\n\ninterface Props {\n\tvalue: string\n\tonChange: (e: any) => void\n\tplaceholder: string\n}\n\nconst FormInput = ({value, onChange, placeholder}: Props) => {\n  return (\n    <input\n      className='form-input'\n      value={value}\n      onChange={onChange}\n      placeholder={placeholder}\n    />\n  )\n}\n\nexport default FormInput\n", "explanation": "**Purpose:** A reusable form input component.\n\n**Functionality:** Displays an input field with a dynamic value, and allows users to edit its content through a change event.", "metadata": {"repo": "magiclabs/example-moonpay-onramp", "file": "src/components/ui/FormInput.tsx", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "This repository appears to be an example implementation for integrating MoonPay's on-ramp solution into a Magic Labs project. \n\nKey points:\n\n* Purpose: Example code for MoonPay integration\n* Content: Code snippet(s) illustrating how to use MoonPay API in a Magic Labs context", "file_summary": "Here is a holistic summary of the file 'src/components/ui/FormInput.tsx':\n\nA reusable form input component that displays editable content with a dynamic value, triggering changes via user input."}
{"code": "import React from 'react'\n\nconst Spacer = ({ size }: { size: number }) => {\n  return <div style={{ height: `${size}px` }} />\n}\n\nexport default Spacer\n", "explanation": "This block is a reusable React component called \"Spacer\" that takes a single prop \"size\" and renders a div element with a specified height, allowing for vertical spacing in UI layouts.", "metadata": {"repo": "magiclabs/example-moonpay-onramp", "file": "src/components/ui/Spacer.tsx", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "This repository appears to be an example implementation for integrating MoonPay's on-ramp solution into a Magic Labs project. \n\nKey points:\n\n* Purpose: Example code for MoonPay integration\n* Content: Code snippet(s) illustrating how to use MoonPay API in a Magic Labs context", "file_summary": "Here is a concise holistic summary of the file 'src/components/ui/Spacer.tsx':\n\n\"The Spacer component is a reusable React component that adds vertical space to UI layouts by rendering a div element with a specified height based on its `size` prop.\""}
{"code": "const Spinner = () => (\n  <div className='flex items-center justify-center'>\n    <svg\n      height='12'\n      width='12'\n      aria-hidden='true'\n      className='w-6 h-6 mr-2 text-gray-200 animate-spin dark:text-gray-600 fill-blue-600'\n      viewBox='0 0 100 101'\n      fill='none'\n      xmlns='http://www.w3.org/2000/svg'>\n      <path\n        d='M100 50.5908C100 78.2051 77.6142 100.591 50 100.591C22.3858 100.591 0 78.2051 0 50.5908C0 22.9766 22.3858 0.59082 50 0.59082C77.6142 0.59082 100 22.9766 100 50.5908ZM9.08144 50.5908C9.08144 73.1895 27.4013 91.5094 50 91.5094C72.5987 91.5094 90.9186 73.1895 90.9186 50.5908C90.9186 27.9921 72.5987 9.67226 50 9.67226C27.4013 9.67226 9.08144 27.9921 9.08144 50.5908Z'\n        fill='currentColor'\n      />\n      <path", "explanation": "**Summary:**\n\nThis is a React component, named `Spinner`, which renders a loading animation in the form of an SVG spinner icon with a blue color scheme. The icon spins when animated.", "metadata": {"repo": "magiclabs/example-moonpay-onramp", "file": "src/components/ui/Spinner.tsx", "chunk_number": 1, "total_chunks": 2}, "repository_explanation": "This repository appears to be an example implementation for integrating MoonPay's on-ramp solution into a Magic Labs project. \n\nKey points:\n\n* Purpose: Example code for MoonPay integration\n* Content: Code snippet(s) illustrating how to use MoonPay API in a Magic Labs context", "file_summary": "Here is a concise and to-the-point summary:\n\n**Summary:** The `Spinner` React component renders a spinning blue SVG icon serving as a loading animation and/or progress indicator."}
{"code": "        d='M93.9676 39.0409C96.393 38.4038 97.8624 35.9116 97.0079 33.5539C95.2932 28.8227 92.871 24.3692 89.8167 20.348C85.8452 15.1192 80.8826 10.7238 75.2124 7.41289C69.5422 4.10194 63.2754 1.94025 56.7698 1.05124C51.7666 0.367541 46.6976 0.446843 41.7345 1.27873C39.2613 1.69328 37.813 4.19778 38.4501 6.62326C39.0873 9.04874 41.5694 10.4717 44.0505 10.1071C47.8511 9.54855 51.7191 9.52689 55.5402 10.0491C60.8642 10.7766 65.9928 12.5457 70.6331 15.2552C75.2735 17.9648 79.3347 21.5619 82.5849 25.841C84.9175 28.9121 86.7997 32.2913 88.1811 35.8758C89.083 38.2158 91.5421 39.6781 93.9676 39.0409Z'\n        fill='currentFill'\n      />\n    </svg>\n  </div>\n)\n\nexport default Spinner\n", "explanation": "This block appears to be an SVG component representing a spinning animation, likely used as a loading indicator or progress spinner. It takes its color from a variable called `currentFill`.", "metadata": {"repo": "magiclabs/example-moonpay-onramp", "file": "src/components/ui/Spinner.tsx", "chunk_number": 2, "total_chunks": 2}, "repository_explanation": "This repository appears to be an example implementation for integrating MoonPay's on-ramp solution into a Magic Labs project. \n\nKey points:\n\n* Purpose: Example code for MoonPay integration\n* Content: Code snippet(s) illustrating how to use MoonPay API in a Magic Labs context", "file_summary": "Here is a concise and to-the-point summary:\n\n**Summary:** The `Spinner` React component renders a spinning blue SVG icon serving as a loading animation and/or progress indicator."}
{"code": "import React from 'react';\nimport Image from 'next/image';\nimport Link from 'public/link.svg';\nimport { getBlockExplorer } from '@/utils/network';\n\nconst TransactionHistory = () => {\n  const publicAddress = localStorage.getItem('user');\n\n  return (\n    <a className=\"action-button\" href={getBlockExplorer(publicAddress as string)} target=\"_blank\" rel=\"noreferrer\">\n      <div className=\"flex items-center justify-center\">\n        Transaction History <Image src={Link} alt=\"link-icon\" className=\"ml-[3px]\" />\n      </div>\n    </a>\n  );\n};\n\nexport default TransactionHistory;\n", "explanation": "**Summary**\n\nThis is a React component (`TransactionHistory`) that generates an \"Action Button\" linking to a blockchain transaction history page based on a user's public address stored in local storage.", "metadata": {"repo": "magiclabs/example-moonpay-onramp", "file": "src/components/ui/TransactionHistory.tsx", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "This repository appears to be an example implementation for integrating MoonPay's on-ramp solution into a Magic Labs project. \n\nKey points:\n\n* Purpose: Example code for MoonPay integration\n* Content: Code snippet(s) illustrating how to use MoonPay API in a Magic Labs context", "file_summary": "Here is a concise holistic summary of the file 'src/components/ui/TransactionHistory.tsx':\n\n**Summary**\n\nReact component (`TransactionHistory`) that renders an \"Action Button\" linking to a blockchain transaction history page based on a user's public address stored in local storage."}
{"code": "import '@/styles/globals.css'\nimport type { AppProps } from 'next/app'\n\nexport default function App({ Component, pageProps }: AppProps) {\n  return <Component {...pageProps} />\n}\n", "explanation": "**Purpose:** Next.js app entry point\n\n**Functionality:** Renders the main application component with its props.", "metadata": {"repo": "magiclabs/example-moonpay-onramp", "file": "src/pages/_app.tsx", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "This repository appears to be an example implementation for integrating MoonPay's on-ramp solution into a Magic Labs project. \n\nKey points:\n\n* Purpose: Example code for MoonPay integration\n* Content: Code snippet(s) illustrating how to use MoonPay API in a Magic Labs context", "file_summary": "Here is a concise and to-the-point summary:\n\n**Summary:** The \"src/pages/_app.tsx\" file serves as the Next.js app entry point, rendering the main application component with its associated props."}
{"code": "import { Html, Head, Main, NextScript } from 'next/document'\n\nexport default function Document() {\n  return (\n    <Html lang=\"en\">\n      <Head />\n      <body>\n        <Main />\n        <NextScript />\n      </body>\n    </Html>\n  )\n}\n", "explanation": "This block is a Next.js document template, responsible for rendering the HTML structure of a web page, including the head, body, main content, and JavaScript script tags.", "metadata": {"repo": "magiclabs/example-moonpay-onramp", "file": "src/pages/_document.tsx", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "This repository appears to be an example implementation for integrating MoonPay's on-ramp solution into a Magic Labs project. \n\nKey points:\n\n* Purpose: Example code for MoonPay integration\n* Content: Code snippet(s) illustrating how to use MoonPay API in a Magic Labs context", "file_summary": "Here's a concise summary:\n\n**src/pages/_document.tsx**\n\nTemplate for rendering HTML structure of Next.js pages, containing head, body, and main content with associated JavaScript script tags."}
{"code": "import MagicProvider from '../components/magic/MagicProvider';\nimport { useEffect, useState } from 'react';\nimport { ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport Login from '@/components/magic/Login';\nimport Dashboard from '@/components/magic/Dashboard';\nimport MagicDashboardRedirect from '@/components/magic/MagicDashboardRedirect';\nimport dynamic from 'next/dynamic';\n\nexport default function Home() {\n  const [token, setToken] = useState('');\n  const MoonPayProvider = dynamic(\n    () => import('@moonpay/moonpay-react').then((mod) => mod.MoonPayProvider),\n    { ssr: false },\n  );\n  useEffect(() => {\n    setToken(localStorage.getItem('token') ?? '');\n  }, [setToken]);\n\n  return (\n    <MagicProvider>\n      <MoonPayProvider\n        apiKey={process.env.NEXT_PUBLIC_MOONPAY_API_KEY || \"\"}\n        debug\n      >\n        <ToastContainer />\n        {process.env.NEXT_PUBLIC_MAGIC_API_KEY ? (\n          token.length > 0 ? (", "explanation": "**Purpose:** This block is a React component, specifically the \"Home\" page of an application.\n\n**Functionality:**\n\n* It uses the `MagicProvider` component to wrap the app.\n* It imports components for login and dashboard functionality.\n* It uses Next.js's dynamic import feature to load the MoonPay provider only on client-side rendering.\n* It sets a token state variable based on the presence of a \"token\" in local storage.\n* It renders a Toast container for displaying notifications.\n* If both Magic API key and MoonPay API key are set, it conditionally renders either the Login or Dashboard component depending on whether a token is present.", "metadata": {"repo": "magiclabs/example-moonpay-onramp", "file": "src/pages/index.tsx", "chunk_number": 1, "total_chunks": 2}, "repository_explanation": "This repository appears to be an example implementation for integrating MoonPay's on-ramp solution into a Magic Labs project. \n\nKey points:\n\n* Purpose: Example code for MoonPay integration\n* Content: Code snippet(s) illustrating how to use MoonPay API in a Magic Labs context", "file_summary": "Here's a concise summary:\n\n**src/pages/index.tsx**: The React component for the Home page of an application, which renders either login or dashboard functionality based on Magic API key, MoonPay API key, and token presence in local storage."}
{"code": "            <Dashboard token={token} setToken={setToken} />\n          ) : (\n            <Login token={token} setToken={setToken} />\n          )\n        ) : (\n          <MagicDashboardRedirect />\n        )}\n      </MoonPayProvider>\n\n    </MagicProvider >\n  );\n}\n", "explanation": "Conditional rendering of three components:\n\n1. `Dashboard` (if conditions met)\n2. `Login` (if conditions met, but not Dashboard)\n3. `MagicDashboardRedirect` (as a fallback)", "metadata": {"repo": "magiclabs/example-moonpay-onramp", "file": "src/pages/index.tsx", "chunk_number": 2, "total_chunks": 2}, "repository_explanation": "This repository appears to be an example implementation for integrating MoonPay's on-ramp solution into a Magic Labs project. \n\nKey points:\n\n* Purpose: Example code for MoonPay integration\n* Content: Code snippet(s) illustrating how to use MoonPay API in a Magic Labs context", "file_summary": "Here's a concise summary:\n\n**src/pages/index.tsx**: The React component for the Home page of an application, which renders either login or dashboard functionality based on Magic API key, MoonPay API key, and token presence in local storage."}
{"code": "@import url('https://fonts.googleapis.com/css2?family=Inter&display=swap');\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --foreground-rgb: 0, 0, 0;\n  --background-start-rgb: 214, 219, 220;\n  --background-end-rgb: 255, 255, 255;\n}\n\n@media (prefers-color-scheme: dark) {\n  :root {\n    --foreground-rgb: 255, 255, 255;\n    --background-start-rgb: 0, 0, 0;\n    --background-end-rgb: 0, 0, 0;\n  }\n}\n\nhtml,\nbody {\n  @apply m-0 p-0 bg-[#f8f8fa] scroll-pt-12;\n  font-family: 'Inter', sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\nnav > ul > li {\n  @apply text-left list-none text-[#777679] cursor-pointer mb-[15px];\n}\n\nul {\n  @apply w-fit m-0 pl-[30px] pr-0 py-0;\n}\n\n.active {\n  @apply text-[#6851ff] font-semibold;\n}\n\n.active::before {\n  @apply content-['\\2022'] text-[#6851ff] font-[bold] inline-block w-[1em] ml-[-1em];\n}\n\n.nft {\n  @apply text-[#777679];\n}\n\n.nft-name {\n  @apply font-semibold text-black;\n  font-family: 'Inter';\n}\n\n.nft-list {\n  @apply overflow-auto max-h-[270px];\n}\n", "explanation": "Here is a concise summary:\n\n**Purpose:** Define global styles for a web application.\n\n**Functionality:**\n\n* Import Google Fonts (Inter) and Tailwind CSS.\n* Set default color scheme variables.\n* Apply styles to HTML, body, nav, ul, li, and other elements using Tailwind's utility-first approach.", "metadata": {"repo": "magiclabs/example-moonpay-onramp", "file": "src/styles/globals.css", "chunk_number": 1, "total_chunks": 8}, "repository_explanation": "This repository appears to be an example implementation for integrating MoonPay's on-ramp solution into a Magic Labs project. \n\nKey points:\n\n* Purpose: Example code for MoonPay integration\n* Content: Code snippet(s) illustrating how to use MoonPay API in a Magic Labs context", "file_summary": "Here's a holistic summary of the file 'src/styles/globals.css':\n\n**Purpose:** Define global styles for a web application using Tailwind CSS.\n\n**Functionality:** Apply consistent visual styles across various HTML elements, including typography, colors, spacing, animations, and layouts, while also defining specific design properties for different UI components."}
{"code": ".nft:not(:last-child) {\n  @apply mb-2.5;\n}\n\n.cards-container {\n  @apply relative top-[30px] md:top-[-60px] lg:top-[-60px];\n}\n\n@media only screen and (max-width: 767px) {\n  .cards-container {\n    @apply mt-[-89px];\n  }\n}\n\n.network-dropdown {\n  @apply m-auto w-fit rounded-xl;\n}\n\n.active-network {\n  @apply border w-[264px] flex items-center cursor-pointer justify-between m-auto px-4 py-3 rounded-xl border-solid border-[#dddbe0] bg-[#fff];\n}\n\n.active-network::selection {\n  @apply bg-transparent;\n}\n\n.rotate {\n  @apply rotate-180;\n}\n\n.network-options {\n  @apply overflow-hidden w-fit border mx-auto my-[5px] px-0 py-[5px] rounded-xl border-solid border-[#dddbe0] bg-[#fff];\n}\n\n.network-dropdown-option {\n  @apply w-[264px] flex items-center justify-start transition-[0.1s] m-auto px-4 py-3 bg-[#fff];\n}\n\n.network-dropdown-option:hover {\n  @apply text-white cursor-pointer bg-[#6851ff];\n}\n\n.network-dropdown-option:active {\n  @apply opacity-50;\n}\n.magic-logo {\n  @apply mb-[15px] mx-0 text-center;\n}\n.demo-sub-header {", "explanation": "Here is a summary of the block's purpose and functionality:\n\n**Styling Block**\n\nThis block defines various CSS classes for styling elements, including:\n\n* Spacing and positioning\n* Button-like elements (e.g., `.active-network`)\n* Dropdown menu options (e.g., `.network-dropdown-option`)\n* Logo styles (e.g., `.magic-logo`)\n\nThe block also includes media queries to adjust styling based on screen width.", "metadata": {"repo": "magiclabs/example-moonpay-onramp", "file": "src/styles/globals.css", "chunk_number": 2, "total_chunks": 8}, "repository_explanation": "This repository appears to be an example implementation for integrating MoonPay's on-ramp solution into a Magic Labs project. \n\nKey points:\n\n* Purpose: Example code for MoonPay integration\n* Content: Code snippet(s) illustrating how to use MoonPay API in a Magic Labs context", "file_summary": "Here's a holistic summary of the file 'src/styles/globals.css':\n\n**Purpose:** Define global styles for a web application using Tailwind CSS.\n\n**Functionality:** Apply consistent visual styles across various HTML elements, including typography, colors, spacing, animations, and layouts, while also defining specific design properties for different UI components."}
{"code": "  @apply text-[rgba(255,255,255,0.5)] text-xl font-normal m-0;\n  font-family: monospace;\n}\n\n.home-page {\n  @apply flex flex-col justify-center items-center min-h-screen relative bg-[length:100vw_320px] bg-no-repeat;\n}\n\n.login-page {\n  @apply flex flex-col items-center min-h-screen bg-gray-300;\n}\n.login-method-grid {\n  @apply max-w-[100%] grid-rows-3 gap-5 p-4 mt-8;\n}\n\n.login-method-grid-item-container {\n  @apply flex flex-col items-center justify-center;\n}\n\n.login-button {\n  @apply w-full h-12 text-white font-semibold text-base leading-6 transition-[0.1s] text-center transition-[0.1s] m-auto px-2 py-3 rounded-[300px] border-[none];\n  background: #8271f3;\n}\n\n.login-button:disabled {\n  background: #a799ff;\n}\n\n.login-button:hover:enabled {\n  @apply cursor-pointer;\n  background: linear-gradient(0deg, rgba(0, 0, 0, 0.05), rgba(0, 0, 0, 0.05)), #a799ff;\n}\n.login-button:active:enabled {\n  @apply opacity-50 cursor-pointer scale-[0.99];\n  background: #a799ff;\n}\n\n.links {", "explanation": "This block appears to be a collection of CSS styles, likely in Tailwind CSS format.\n\n**Purpose:** Define various visual styles for different HTML elements on a web page.\n\n**Functionality:** Apply specific design properties (e.g., colors, fonts, spacing) to HTML elements with corresponding class names (e.g., `.home-page`, `.login-button`).", "metadata": {"repo": "magiclabs/example-moonpay-onramp", "file": "src/styles/globals.css", "chunk_number": 3, "total_chunks": 8}, "repository_explanation": "This repository appears to be an example implementation for integrating MoonPay's on-ramp solution into a Magic Labs project. \n\nKey points:\n\n* Purpose: Example code for MoonPay integration\n* Content: Code snippet(s) illustrating how to use MoonPay API in a Magic Labs context", "file_summary": "Here's a holistic summary of the file 'src/styles/globals.css':\n\n**Purpose:** Define global styles for a web application using Tailwind CSS.\n\n**Functionality:** Apply consistent visual styles across various HTML elements, including typography, colors, spacing, animations, and layouts, while also defining specific design properties for different UI components."}
{"code": "  @apply flex justify-center mx-auto mt-5 text-sm mb-3 font-semibold text-white;\n}\n.link {\n  @apply transition-[0.1s] px-[30px] py-0;\n}\n\n@media only screen and (max-width: 420px) {\n  .link {\n    @apply px-[15px] py-0;\n  }\n}\n@media only screen and (max-width: 320px) {\n  .link {\n    @apply px-[5px] py-0;\n  }\n}\n\n.link > a {\n  @apply cursor-pointer;\n}\n.link-divider {\n  @apply w-px h-5;\n}\n\n.footer-links {\n  @apply flex items-center absolute w-full mt-[30px] mb-0 mx-auto bottom-10;\n}\n.wallet-method-container {\n  @apply text-left;\n}\n\n.wallet-method {\n  @apply w-fit text-[#522fd4] bg-[#edebff] text-base cursor-pointer font-medium transition-[0.1s] h-8 px-3 py-1.5 rounded-[32px] border-[none];\n  font-family: monospace;\n}\n\n.wallet-method:hover:enabled {\n  background: linear-gradient(0deg, rgba(0, 0, 0, 0.05), rgba(0, 0, 0, 0.05)), #edebff;\n  background-blend-mode: color-burn, normal;\n}\n\n.wallet-method:active:enabled {\n  @apply opacity-50 scale-[0.99];\n  background: linear-gradient(0deg, rgba(0, 0, 0, 0.05), rgba(0, 0, 0, 0.05)), #edebff;", "explanation": "**Purpose:** Define styles for various HTML elements using CSS utility classes.\n\n**Functionality:**\n\n* Apply global styles to elements such as flexbox layout, text alignment, spacing, and typography.\n* Define specific styles for links (e.g., transition effects, padding, responsiveness).\n* Style footer links, wallet method containers, and individual wallet methods with custom colors, fonts, and animations.", "metadata": {"repo": "magiclabs/example-moonpay-onramp", "file": "src/styles/globals.css", "chunk_number": 4, "total_chunks": 8}, "repository_explanation": "This repository appears to be an example implementation for integrating MoonPay's on-ramp solution into a Magic Labs project. \n\nKey points:\n\n* Purpose: Example code for MoonPay integration\n* Content: Code snippet(s) illustrating how to use MoonPay API in a Magic Labs context", "file_summary": "Here's a holistic summary of the file 'src/styles/globals.css':\n\n**Purpose:** Define global styles for a web application using Tailwind CSS.\n\n**Functionality:** Apply consistent visual styles across various HTML elements, including typography, colors, spacing, animations, and layouts, while also defining specific design properties for different UI components."}
{"code": "}\n.wallet-method-desc {\n  @apply text-[#77767a] text-left text-sm mt-2.5;\n}\n\n.form-input {\n  @apply box-border flex flex-row items-center w-full h-12 border text-base leading-6 text-[#18171a] mb-[15px] px-4 py-3 rounded-[10px] border-solid border-[#dddbe0];\n  background: #ffffff;\n}\n\n.form-input::placeholder {\n  color: #77767a;\n}\n\n.form-button {\n  @apply flex flex-row justify-center items-center w-full h-12 text-[#522fd4] font-semibold text-base leading-6 transition-[0.1s] px-6 py-3 rounded-[300px] border-[none] bg-[#edebff];\n}\n\n.form-button:disabled {\n  @apply opacity-50;\n}\n\n.form-button:hover:enabled {\n  @apply cursor-pointer;\n  background: linear-gradient(0deg, rgba(0, 0, 0, 0.05), rgba(0, 0, 0, 0.05)), #edebff;\n}\n.form-button:active:enabled {\n  @apply opacity-50 scale-[0.99];\n  background: linear-gradient(0deg, rgba(0, 0, 0, 0.05), rgba(0, 0, 0, 0.05)), #edebff;\n}\n\n.loading-container {\n  @apply w-[50px] text-center flex items-center justify-center cursor-default;\n}\n.loading {\n  @apply cursor-default animate-spin;\n}\n", "explanation": "This block appears to be a collection of CSS styles for various HTML form elements, including input fields, buttons, and loading indicators. The styles define layout, color schemes, typography, and animations for each element.", "metadata": {"repo": "magiclabs/example-moonpay-onramp", "file": "src/styles/globals.css", "chunk_number": 5, "total_chunks": 8}, "repository_explanation": "This repository appears to be an example implementation for integrating MoonPay's on-ramp solution into a Magic Labs project. \n\nKey points:\n\n* Purpose: Example code for MoonPay integration\n* Content: Code snippet(s) illustrating how to use MoonPay API in a Magic Labs context", "file_summary": "Here's a holistic summary of the file 'src/styles/globals.css':\n\n**Purpose:** Define global styles for a web application using Tailwind CSS.\n\n**Functionality:** Apply consistent visual styles across various HTML elements, including typography, colors, spacing, animations, and layouts, while also defining specific design properties for different UI components."}
{"code": "@keyframes rotation {\n  0% {\n    transform: rotate(0);\n  }\n  100% {\n    transform: rotate(360deg);\n  }\n}\n\n.card {\n  @apply w-[344px] flex flex-col shadow-[0px_4px_24px_rgba(49,49,49,0.1)] mt-0 mb-[27px] mx-auto px-6 py-8 rounded-2xl bg-[#ffffff];\n}\n\n.card-header {\n  @apply text-xl font-semibold text-left mt-0 mb-[25px];\n}\n.card-label-container {\n  @apply flex items-center justify-between mb-3;\n}\n\n.card-label {\n  @apply text-sm font-medium cursor-pointer;\n}\n.toast {\n  @apply fixed w-fit text-white font-medium shadow-[4px_8px_20px_rgba(0,0,0,0.15)] mx-auto my-0 px-4 py-2 rounded-[10px] top-[30px] inset-x-0 bg-[#00875f];\n}\n\n.action-button {\n  @apply font-semibold text-[#6851ff] cursor-pointer transition-[0.1s];\n}\n.disconnect-button {\n  @apply font-semibold text-[#d43100] cursor-pointer transition-[0.1s];\n}\n.action-button:hover,\n.disconnect-button:hover {\n  @apply opacity-70;\n}\n.action-button:active,\n.disconnect-button:active {\n  @apply scale-[0.98];\n}\n.code {\n  @apply text-base text-left p-2.5 rounded-[10px];", "explanation": "**Summary**\n\nThis block is a collection of CSS styles, using Tailwind CSS classes, that define visual layouts and behaviors for various UI components:\n\n* Animations: A rotation animation (`@keyframes rotation`)\n* Cards: A layout for cards with headers, labels, and content\n* Toast notifications: A fixed position notification bar\n* Action buttons: Styling for buttons that trigger actions\n* Disconnect button: Similar to action button but with a different color scheme", "metadata": {"repo": "magiclabs/example-moonpay-onramp", "file": "src/styles/globals.css", "chunk_number": 6, "total_chunks": 8}, "repository_explanation": "This repository appears to be an example implementation for integrating MoonPay's on-ramp solution into a Magic Labs project. \n\nKey points:\n\n* Purpose: Example code for MoonPay integration\n* Content: Code snippet(s) illustrating how to use MoonPay API in a Magic Labs context", "file_summary": "Here's a holistic summary of the file 'src/styles/globals.css':\n\n**Purpose:** Define global styles for a web application using Tailwind CSS.\n\n**Functionality:** Apply consistent visual styles across various HTML elements, including typography, colors, spacing, animations, and layouts, while also defining specific design properties for different UI components."}
{"code": "  font-family: monospace;\n  background: #f8f8fa;\n  word-wrap: break-word;\n}\n.error {\n  @apply self-start text-xs font-semibold text-red-700 justify-self-start;\n}\n.divider {\n  @apply mx-0 my-[15px] border-b-[#ededf3] border-b border-solid;\n}\n.flex-row {\n  @apply flex items-center;\n}\n.green-dot {\n  @apply h-1.5 w-1.5 bg-[#00cc8f] mr-2.5 rounded-[50%];\n}\n.connected {\n  @apply text-base mx-0 my-[5px];\n}\na {\n  all: unset;\n}\n\n.app-header-container {\n  @apply block w-full drop-shadow-[0_35px_35px_rgba(0,0,0,0.25)] min-h-[40%] flex-col gap-2.5 p-8 items-center bg-[url('/login_bg.png')] bg-cover bg-no-repeat pb-20;\n  text-align: -webkit-center;\n}\n\n.redirect-container {\n  @apply flex flex-col items-center h-screen bg-center bg-cover bg-no-repeat bg-[url('/redirect_bg.png')];\n}\n\n.redirect-card {\n  @apply bg-[#F8F8FA] rounded-[10px] shadow-[0px_4px_24px_rgba(49,49,49,0.1)] p-2 m-12;\n}\n\n.social-login-button {", "explanation": "Here is a summary of the purpose and functionality of this block:\n\n**CSS Styles**\n\nThis block contains a collection of CSS styles that can be applied to HTML elements using various classes (e.g., `.error`, `.divider`, etc.). These styles define visual properties such as colors, font sizes, padding, borders, backgrounds, and more.", "metadata": {"repo": "magiclabs/example-moonpay-onramp", "file": "src/styles/globals.css", "chunk_number": 7, "total_chunks": 8}, "repository_explanation": "This repository appears to be an example implementation for integrating MoonPay's on-ramp solution into a Magic Labs project. \n\nKey points:\n\n* Purpose: Example code for MoonPay integration\n* Content: Code snippet(s) illustrating how to use MoonPay API in a Magic Labs context", "file_summary": "Here's a holistic summary of the file 'src/styles/globals.css':\n\n**Purpose:** Define global styles for a web application using Tailwind CSS.\n\n**Functionality:** Apply consistent visual styles across various HTML elements, including typography, colors, spacing, animations, and layouts, while also defining specific design properties for different UI components."}
{"code": "  @apply flex flex-row min-w-[296px] h-12 text-[#3C4043] transition-[0.1s] px-6 py-3 rounded-[300px] bg-[#ffffff] border-2 border-[#DADCE0] relative top-16;\n}\n\n.social-login-button:disabled {\n  @apply opacity-50;\n}\n\n.social-login-button:hover:enabled {\n  @apply cursor-pointer;\n  background: linear-gradient(0deg, rgba(0, 0, 0, 0.05), rgba(0, 0, 0, 0.05)), #ffffff;\n}\n.social-login-button:active:enabled {\n  @apply opacity-50 scale-[0.99];\n  background: linear-gradient(0deg, rgba(0, 0, 0, 0.05), rgba(0, 0, 0, 0.05)), #ffffff;\n}\n\n.api-button {\n  @apply bg-[#6844bc] text-[#FFFFFF] flex w-[280px] justify-center items-center h-12 font-semibold text-base leading-6 transition-[0.1s] px-6 py-3 rounded-[300px] border-[none];\n}\n", "explanation": "Here is a concise summary:\n\nThis block defines CSS styles for two types of buttons: `.social-login-button` and `.api-button`. The styles control appearance, hover, active, and disabled states, including colors, spacing, opacity, and cursor effects.", "metadata": {"repo": "magiclabs/example-moonpay-onramp", "file": "src/styles/globals.css", "chunk_number": 8, "total_chunks": 8}, "repository_explanation": "This repository appears to be an example implementation for integrating MoonPay's on-ramp solution into a Magic Labs project. \n\nKey points:\n\n* Purpose: Example code for MoonPay integration\n* Content: Code snippet(s) illustrating how to use MoonPay API in a Magic Labs context", "file_summary": "Here's a holistic summary of the file 'src/styles/globals.css':\n\n**Purpose:** Define global styles for a web application using Tailwind CSS.\n\n**Functionality:** Apply consistent visual styles across various HTML elements, including typography, colors, spacing, animations, and layouts, while also defining specific design properties for different UI components."}
{"code": "import { Magic } from './types';\nimport { Dispatch, SetStateAction } from 'react';\n\nexport type LoginMethod = 'EMAIL' | 'SMS' | 'SOCIAL' | 'FORM';\n\nexport const logout = async (setToken: Dispatch<SetStateAction<string>>, magic: Magic | null) => {\n  if (await magic?.user.isLoggedIn()) {\n    await magic?.user.logout();\n  }\n  localStorage.setItem('token', '');\n  localStorage.setItem('user', '');\n  setToken('');\n};\n\nexport const saveUserInfo = (token: string, loginMethod: LoginMethod, userAddress: string) => {\n  localStorage.setItem('token', token);\n  localStorage.setItem('isAuthLoading', 'false');\n  localStorage.setItem('loginMethod', loginMethod);\n  localStorage.setItem('user', userAddress);\n};\n", "explanation": "Here is a concise summary:\n\n**Block Purpose:** Manages user authentication, specifically logout and saving user information.\n\n**Functionality:**\n\n* `logout`: Logs out current user and clears local storage.\n* `saveUserInfo`: Saves token, login method, and user address in local storage when a user logs in.", "metadata": {"repo": "magiclabs/example-moonpay-onramp", "file": "src/utils/common.ts", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "This repository appears to be an example implementation for integrating MoonPay's on-ramp solution into a Magic Labs project. \n\nKey points:\n\n* Purpose: Example code for MoonPay integration\n* Content: Code snippet(s) illustrating how to use MoonPay API in a Magic Labs context", "file_summary": "Here is a concise and holistic summary of the file 'src/utils/common.ts':\n\n**Common Utilities**\n\nThis module provides basic authentication utilities, including:\n\n* User logout functionality\n* Saving user information (token, login method, and address) to local storage upon login"}
{"code": "export enum Network {\n  POLYGON_AMOY = 'polygon-amoy',\n  POLYGON = 'polygon',\n  ETHEREUM_SEPOLIA = 'ethereum-sepolia',\n  ETHEREUM = 'ethereum',\n  ZKSYNC = 'zksync',\n  ZKSYNC_SEPOLIA = 'zksync-sepolia',\n}\n\nexport const getNetworkUrl = () => {\n  switch (process.env.NEXT_PUBLIC_BLOCKCHAIN_NETWORK) {\n    case Network.POLYGON:\n      return 'https://polygon-rpc.com/';\n    case Network.POLYGON_AMOY:\n      return 'https://rpc-amoy.polygon.technology/';\n    case Network.ETHEREUM_SEPOLIA:\n      return 'https://eth-sepolia.g.alchemy.com/v2/fYFybLQFR9Zr2GCRcgALmAktStFKr0i0';\n    case Network.ETHEREUM:\n      return 'https://eth-mainnet.g.alchemy.com/v2/fYFybLQFR9Zr2GCRcgALmAktStFKr0i0';\n    case Network.ZKSYNC:\n      return 'https://mainnet.era.zksync.io';\n    case Network.ZKSYNC_SEPOLIA:\n      return 'https://sepolia.era.zksync.dev';\n    default:\n      throw new Error('Network not supported');\n  }\n};\n\nexport const getChainId = () => {\n  switch (process.env.NEXT_PUBLIC_BLOCKCHAIN_NETWORK) {\n    case Network.POLYGON:", "explanation": "Here is a concise summary:\n\n**Purpose:** This block defines a set of constants for different blockchain networks and provides functions to retrieve their corresponding URLs and chain IDs.\n\n**Functionality:**\n\n* Enum `Network` lists supported blockchain networks (e.g., Polygon, Ethereum).\n* Function `getNetworkUrl()` returns the URL for a given network based on an environment variable.\n* Function `getChainId()` returns the chain ID for a given network.", "metadata": {"repo": "magiclabs/example-moonpay-onramp", "file": "src/utils/network.ts", "chunk_number": 1, "total_chunks": 4}, "repository_explanation": "This repository appears to be an example implementation for integrating MoonPay's on-ramp solution into a Magic Labs project. \n\nKey points:\n\n* Purpose: Example code for MoonPay integration\n* Content: Code snippet(s) illustrating how to use MoonPay API in a Magic Labs context", "file_summary": "Here is a concise summary:\n\n**Purpose:** This file defines utility functions for various blockchain networks, including constants, URLs, and chain IDs.\n\n**Functionality:** Provides network-specific information such as token symbols, faucet URLs, names, and block explorer URLs based on environment variables or input parameters."}
{"code": "      return 137;\n    case Network.POLYGON_AMOY:\n      return 80002;\n    case Network.ETHEREUM_SEPOLIA:\n      return 11155111;\n    case Network.ZKSYNC:\n      return 324;\n    case Network.ZKSYNC_SEPOLIA:\n      return 300;\n    case Network.ETHEREUM:\n      return 1;\n  }\n};\n\nexport const getNetworkToken = () => {\n  switch (process.env.NEXT_PUBLIC_BLOCKCHAIN_NETWORK) {\n    case Network.POLYGON_AMOY:\n    case Network.POLYGON:\n      return 'MATIC';\n    case Network.ETHEREUM:\n    case Network.ETHEREUM_SEPOLIA:\n    case Network.ZKSYNC:\n    case Network.ZKSYNC_SEPOLIA:\n      return 'ETH';\n  }\n};\n\nexport const getFaucetUrl = () => {\n  switch (process.env.NEXT_PUBLIC_BLOCKCHAIN_NETWORK) {\n    case Network.POLYGON_AMOY:\n      return 'https://faucet.polygon.technology/';\n    case Network.ETHEREUM_SEPOLIA:\n      return 'https://sepoliafaucet.com/';\n    case Network.ZKSYNC_SEPOLIA:\n      return 'https://faucet.quicknode.com/ethereum/sepolia'\n  }\n};\n\nexport const getNetworkName = () => {", "explanation": "Here is a summary of the purpose and functionality of this code:\n\n**Purpose:** This block defines three utility functions (`getNetworkToken`, `getFaucetUrl`, and `getNetworkName`) that return specific values based on the blockchain network being used.\n\n**Functionality:**\n\n* `getNetworkToken`: Returns the token symbol ('MATIC' or 'ETH') for a given blockchain network.\n* `getFaucetUrl`: Returns the faucet URL for a specific blockchain network.\n* `getNetworkName` (not shown in full): Not implemented, likely intended to return the name of the blockchain network.", "metadata": {"repo": "magiclabs/example-moonpay-onramp", "file": "src/utils/network.ts", "chunk_number": 2, "total_chunks": 4}, "repository_explanation": "This repository appears to be an example implementation for integrating MoonPay's on-ramp solution into a Magic Labs project. \n\nKey points:\n\n* Purpose: Example code for MoonPay integration\n* Content: Code snippet(s) illustrating how to use MoonPay API in a Magic Labs context", "file_summary": "Here is a concise summary:\n\n**Purpose:** This file defines utility functions for various blockchain networks, including constants, URLs, and chain IDs.\n\n**Functionality:** Provides network-specific information such as token symbols, faucet URLs, names, and block explorer URLs based on environment variables or input parameters."}
{"code": "  switch (process.env.NEXT_PUBLIC_BLOCKCHAIN_NETWORK) {\n    case Network.POLYGON:\n      return 'Polygon (Mainnet)';\n    case Network.POLYGON_AMOY:\n      return 'Polygon (Amoy)';\n    case Network.ETHEREUM_SEPOLIA:\n      return 'Ethereum (Sepolia)';\n    case Network.ETHEREUM:\n      return 'Ethereum (Mainnet)';\n    case Network.ZKSYNC:\n      return 'zkSync (Mainnet)';\n    case Network.ZKSYNC_SEPOLIA:\n      return 'zkSync (Sepolia)';\n  }\n};\n\nexport const getBlockExplorer = (address: string) => {\n  switch (process.env.NEXT_PUBLIC_BLOCKCHAIN_NETWORK) {\n    case Network.POLYGON:\n      return `https://polygonscan.com/address/${address}`;\n    case Network.POLYGON_AMOY:\n      return `https://www.oklink.com/amoy/address/${address}`;\n    case Network.ETHEREUM:\n      return `https://etherscan.io/address/${address}`;\n    case Network.ETHEREUM_SEPOLIA:\n      return `https://sepolia.etherscan.io/address/${address}`;\n    case Network.ZKSYNC:\n      return `https://explorer.zksync.io/address/${address}`;", "explanation": "Here is a concise summary:\n\n**Purpose:** Determine the blockchain network and return its name.\n\n**Functionality:** Returns the name of the blockchain network based on an environment variable, and also provides a block explorer URL for each network.", "metadata": {"repo": "magiclabs/example-moonpay-onramp", "file": "src/utils/network.ts", "chunk_number": 3, "total_chunks": 4}, "repository_explanation": "This repository appears to be an example implementation for integrating MoonPay's on-ramp solution into a Magic Labs project. \n\nKey points:\n\n* Purpose: Example code for MoonPay integration\n* Content: Code snippet(s) illustrating how to use MoonPay API in a Magic Labs context", "file_summary": "Here is a concise summary:\n\n**Purpose:** This file defines utility functions for various blockchain networks, including constants, URLs, and chain IDs.\n\n**Functionality:** Provides network-specific information such as token symbols, faucet URLs, names, and block explorer URLs based on environment variables or input parameters."}
{"code": "    case Network.ZKSYNC_SEPOLIA:\n      return `https://sepolia.explorer.zksync.io/address/${address}`;\n  }\n};\n", "explanation": "**Summary**\n\nThis block is a function that returns a URL for a specific blockchain explorer (ZkSync Sepolia) based on an input address. It takes an \"address\" parameter and returns a string in the format of a URL.", "metadata": {"repo": "magiclabs/example-moonpay-onramp", "file": "src/utils/network.ts", "chunk_number": 4, "total_chunks": 4}, "repository_explanation": "This repository appears to be an example implementation for integrating MoonPay's on-ramp solution into a Magic Labs project. \n\nKey points:\n\n* Purpose: Example code for MoonPay integration\n* Content: Code snippet(s) illustrating how to use MoonPay API in a Magic Labs context", "file_summary": "Here is a concise summary:\n\n**Purpose:** This file defines utility functions for various blockchain networks, including constants, URLs, and chain IDs.\n\n**Functionality:** Provides network-specific information such as token symbols, faucet URLs, names, and block explorer URLs based on environment variables or input parameters."}
{"code": "import { toast } from 'react-toastify'\nconst showToast = ({\n  message,\n  type = 'default',\n}: {\n  message: string\n  type: 'success' | 'error' | 'info' | 'default' | 'warning'\n}) => {\n  switch (type) {\n  case 'default':\n    toast(message, {\n      position: 'top-center',\n      autoClose: 3000,\n      hideProgressBar: false,\n      closeOnClick: true,\n      pauseOnHover: true,\n      draggable: true,\n      progress: undefined,\n      theme: 'light',\n    })\n    break\n  case 'info':\n    toast.info(message, {\n      position: 'top-center',\n      autoClose: 3000,\n      hideProgressBar: false,\n      closeOnClick: true,\n      pauseOnHover: true,\n      draggable: true,\n      progress: undefined,\n      theme: 'light',\n    })\n    break\n  case 'success':\n    toast.success(message, {\n      position: 'top-center',\n      autoClose: 3000,\n      hideProgressBar: false,\n      closeOnClick: true,\n      pauseOnHover: true,\n      draggable: true,\n      progress: undefined,\n      theme: 'light',\n    })\n    break\n  case 'warning':\n    toast.warn(message, {", "explanation": "Here is a concise summary:\n\n**Purpose:** Show a toast notification with customizable type (success, error, info, warning, or default).\n\n**Functionality:** Calls `toast` from `react-toastify` library with pre-configured options, allowing for specific message types and appearance.", "metadata": {"repo": "magiclabs/example-moonpay-onramp", "file": "src/utils/showToast.ts", "chunk_number": 1, "total_chunks": 2}, "repository_explanation": "This repository appears to be an example implementation for integrating MoonPay's on-ramp solution into a Magic Labs project. \n\nKey points:\n\n* Purpose: Example code for MoonPay integration\n* Content: Code snippet(s) illustrating how to use MoonPay API in a Magic Labs context", "file_summary": "Here is a concise summary of the file 'src/utils/showToast.ts':\n\n**Purpose:** Show a customizable toast notification with various types and styles.\n**Functionality:** Displays a toast alert message with options for type, position, duration, and design customization."}
{"code": "      position: 'top-center',\n      autoClose: 3000,\n      hideProgressBar: false,\n      closeOnClick: true,\n      pauseOnHover: true,\n      draggable: true,\n      progress: undefined,\n      theme: 'light',\n    })\n    break\n  case 'error':\n    toast.error(message, {\n      position: 'top-center',\n      autoClose: 3000,\n      hideProgressBar: false,\n      closeOnClick: true,\n      pauseOnHover: true,\n      draggable: true,\n      progress: undefined,\n      theme: 'light',\n    })\n    break\n  }\n}\n\nexport default showToast\n", "explanation": "**Purpose:** Display a toast notification with customizable settings.\n\n**Functionality:** Shows an alert message (success or error) with options for positioning, duration, and design customization.", "metadata": {"repo": "magiclabs/example-moonpay-onramp", "file": "src/utils/showToast.ts", "chunk_number": 2, "total_chunks": 2}, "repository_explanation": "This repository appears to be an example implementation for integrating MoonPay's on-ramp solution into a Magic Labs project. \n\nKey points:\n\n* Purpose: Example code for MoonPay integration\n* Content: Code snippet(s) illustrating how to use MoonPay API in a Magic Labs context", "file_summary": "Here is a concise summary of the file 'src/utils/showToast.ts':\n\n**Purpose:** Show a customizable toast notification with various types and styles.\n**Functionality:** Displays a toast alert message with options for type, position, duration, and design customization."}
{"code": "import { Dispatch, SetStateAction } from 'react'\n\nexport type LoginProps = {\n  token: string\n  setToken: Dispatch<SetStateAction<string>>\n}\n\nexport type { Magic } from '../components/magic/MagicProvider'\n", "explanation": "Here is a concise summary:\n\nThis block defines two types: `LoginProps` (an object with `token` and `setToken` properties) and imports a `Magic` type from another file, making it available for use.", "metadata": {"repo": "magiclabs/example-moonpay-onramp", "file": "src/utils/types.ts", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "This repository appears to be an example implementation for integrating MoonPay's on-ramp solution into a Magic Labs project. \n\nKey points:\n\n* Purpose: Example code for MoonPay integration\n* Content: Code snippet(s) illustrating how to use MoonPay API in a Magic Labs context", "file_summary": "Here is a concise and to-the-point holistic summary of the file 'src/utils/types.ts':\n\n\"Defines `LoginProps` type with token management properties and imports `Magic` type.\""}
{"code": "/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  content: [\n    './src/pages/**/*.{js,ts,jsx,tsx,mdx}',\n    './src/components/**/*.{js,ts,jsx,tsx,mdx}',\n    './src/app/**/*.{js,ts,jsx,tsx,mdx}',\n  ],\n  theme: {\n    extend: {\n      backgroundImage: {\n        'gradient-radial': 'radial-gradient(var(--tw-gradient-stops))',\n        'gradient-conic': 'conic-gradient(from 180deg at 50% 50%, var(--tw-gradient-stops))',\n      },\n    },\n  },\n  plugins: [],\n};\n", "explanation": "This is a Tailwind CSS configuration file.\n\n**Purpose:** Configure Tailwind CSS for use in a project.\n\n**Functionality:** \n\n* Specifies where to look for HTML content (files with `.js`, `.ts`, `.jsx`, `.tsx`, and `.mdx` extensions) to generate CSS classes from.\n* Defines custom background image gradients using the `extend` property.\n* Registers no additional plugins.", "metadata": {"repo": "magiclabs/example-moonpay-onramp", "file": "tailwind.config.js", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "This repository appears to be an example implementation for integrating MoonPay's on-ramp solution into a Magic Labs project. \n\nKey points:\n\n* Purpose: Example code for MoonPay integration\n* Content: Code snippet(s) illustrating how to use MoonPay API in a Magic Labs context", "file_summary": "Here is a concise summary of the file 'tailwind.config.js':\n\n**Summary:** This file configures Tailwind CSS for a project, specifying where to look for HTML content and defining custom background image gradients."}
{"code": "{\n  \"compilerOptions\": {\n    \"target\": \"es5\",\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"allowJs\": true,\n    \"skipLibCheck\": true,\n    \"strict\": true,\n    \"forceConsistentCasingInFileNames\": true,\n    \"noEmit\": true,\n    \"esModuleInterop\": true,\n    \"module\": \"esnext\",\n    \"moduleResolution\": \"node\",\n    \"resolveJsonModule\": true,\n    \"isolatedModules\": true,\n    \"jsx\": \"preserve\",\n    \"incremental\": true,\n    \"paths\": {\n      \"@/*\": [\"./src/*\"]\n    }\n  },\n  \"include\": [\"next-env.d.ts\", \"**/*.ts\", \"**/*.tsx\"],\n  \"exclude\": [\"node_modules\"]\n}\n", "explanation": "This block configures TypeScript compilation settings for a project:\n\n* Specifies target environment (ES5)\n* Sets up module resolution and naming conventions\n* Includes and excludes certain files and directories\n* Enables incremental compilation and preserves JSX syntax.", "metadata": {"repo": "magiclabs/example-moonpay-onramp", "file": "tsconfig.json", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "This repository appears to be an example implementation for integrating MoonPay's on-ramp solution into a Magic Labs project. \n\nKey points:\n\n* Purpose: Example code for MoonPay integration\n* Content: Code snippet(s) illustrating how to use MoonPay API in a Magic Labs context", "file_summary": "Here is a concise summary of the file 'tsconfig.json':\n\n**Configures TypeScript build settings for ES5 target environment, enabling incremental compilation and JSX support.**\n\nLet me know if this meets your requirements!"}

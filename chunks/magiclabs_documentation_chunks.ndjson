{"code": "---\ndescription: 'Hello, world of auth. Change is coming your way.'\n---\n\n# \ud83c\udfa9 Welcome\n\n## \u2728 What is Magic?\n\n**Magic** is a developer SDK which you can integrate into your application to enable **passwordless** authentication using **magic links** - similar to Slack and Medium.\n\nWhen users want to sign up or log in to your application:\n\n1. User requests a **magic link** sent to their email address\n2. User clicks on that magic link\n3. User is securely logged into the application\n\nIf it's a web application, users are logged into the _original_ tab, even if the user clicked on the magic link on a different browser or mobile device!\n\n![Logging in with a magic link is easy and familiar to users.](.gitbook/assets/passwordless-login.gif)\n\nWith Magic SDK, you can enable blazing-fast, hardware-secured, passwordless login with a few lines of code. It is also plug-n-playable even if you already have an existing auth solution!\n\n#### Can't wait to try it out? \ud83d\udd25Jump straight to our Get Started tutorial!\n", "explanation": "**Summary:** \nThis block describes the Magic SDK, a developer tool for integrating passwordless authentication using magic links into applications. The SDK allows users to log in securely by clicking a link sent to their email, providing a seamless experience across devices.", "metadata": {"repo": "magiclabs/documentation", "file": "README.md", "chunk_number": 1, "total_chunks": 5}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "**README.md Summary:**\nThe Magic SDK provides a developer tool for integrating passwordless authentication into applications using magic links, enhancing security and user experience. This solution addresses the risks and costs associated with traditional password management, citing statistics on cybersecurity spending and breach damages. Magic generates public-private key pairs, eliminating password storage and management, to streamline user databases and improve privacy. By introducing a passwordless authentication system, Magic aims to simplify user flow, increase conversion rates, and improve online security, and encourages developers to get started with the linked resources."}
{"code": "{% page-ref page=\"get-started.md\" %}\n\n_Currently Magic only supports web-based application, and coming very soon to mobile platforms._\n\n## \ud83e\udd14 Why Passwordless?\n\n### \ud83d\udcaa Upgrade Security\n\nProperly managing user credentials, passwords, secrets, or sessions require tremendous amount of resources. Poor passwords actually account for 81% of all security breaches, since over 59% of people reuse their passwords _everywhere_ \\[[Source](https://enterprise.verizon.com/resources/reports/2017_dbir.pdf)\\]. This will cost companies up to $240,000 for every 1,000 records compromised \\[[Source](https://digitalguardian.com/blog/whats-cost-data-breach-2019)\\] - increasing risk and liability for your company. \n\nType your email in [HaveIBeenPwned](https://haveibeenpwned.com/) and realize that your sensitive data and passwords have likely been compromised in many high profile breaches impacting companies like Equifax, Dropbox, Adobe, Kickstarter, LinkedIn, Tumblr, and so many more.\n", "explanation": "This block of text presents the purpose and benefits of a passwordless solution, \"Magic\", highlighting its enhanced security features and the risks associated with traditional password management.", "metadata": {"repo": "magiclabs/documentation", "file": "README.md", "chunk_number": 2, "total_chunks": 5}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "**README.md Summary:**\nThe Magic SDK provides a developer tool for integrating passwordless authentication into applications using magic links, enhancing security and user experience. This solution addresses the risks and costs associated with traditional password management, citing statistics on cybersecurity spending and breach damages. Magic generates public-private key pairs, eliminating password storage and management, to streamline user databases and improve privacy. By introducing a passwordless authentication system, Magic aims to simplify user flow, increase conversion rates, and improve online security, and encourages developers to get started with the linked resources."}
{"code": "Worldwide spending on cybersecurity is projected to reach $133.7 billion in 2022 \\[[Gartner](https://www.gartner.com/en/newsroom/press-releases/2018-08-15-gartner-forecasts-worldwide-information-security-spending-to-exceed-124-billion-in-2019)\\], and the average cost of a breach has skyrocketed to around $3.92 million as of 2019 \\[[Security Intelligence](https://securityintelligence.com/posts/whats-new-in-the-2019-cost-of-a-data-breach-report/)\\]. Even though Equifax was breached in 2017, the company is still paying off the $4 billion damages in total.\n\n\ud83d\udee1\ufe0f [Read more about our security](security.md)\n\n### \ud83d\udcb0 Reduce Overhead\n", "explanation": "This block highlights the importance of cybersecurity by citing statistics on projected spending and the average cost of a breach. It includes references to external sources and a personal example of a company (Equifax) that suffered significant damages due to a breach. The block then briefly introduces a solution by mentioning a way to \"Reduce Overhead\", likely in relation to cybersecurity costs.", "metadata": {"repo": "magiclabs/documentation", "file": "README.md", "chunk_number": 3, "total_chunks": 5}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "**README.md Summary:**\nThe Magic SDK provides a developer tool for integrating passwordless authentication into applications using magic links, enhancing security and user experience. This solution addresses the risks and costs associated with traditional password management, citing statistics on cybersecurity spending and breach damages. Magic generates public-private key pairs, eliminating password storage and management, to streamline user databases and improve privacy. By introducing a passwordless authentication system, Magic aims to simplify user flow, increase conversion rates, and improve online security, and encourages developers to get started with the linked resources."}
{"code": "Users tend to set passwords that are easy to crack, yet hard to remember, and account recovery support can be costly. **50% of all support tickets** are related to lost and forgotten passwords. Handling 10 tickets daily will cost your organization around **$128,000 annually**! \ud83d\udcb8\\[[Source](https://www.okta.com/blog/2019/08/how-much-are-password-resets-costing-your-company/)\\]\n\nIn addition, Magic leverages blockchain-based, standardized public-private key cryptography to achieve identity management. When a new user signs up to your service, a public-private key pair is generated for them. Private keys are used to sign cryptographic proofs of a user's identity, which means in order to authenticate requests, your resource server will no longer need to store and manage \\(1\\) hashed+salted password or \\(2\\) user sessions in their user database table - making user tables super clean and lightweight. In applications that heavily focus on privacy,  they can still work even without user tables!\n", "explanation": "This block highlights the security and cost issues with traditional password-based authentication and introduces a blockchain-based identity management solution. It explains how the solution, Magic, generates a public-private key pair for users, eliminating the need for password storage and management, ultimately streamlining the user database and enhancing privacy.", "metadata": {"repo": "magiclabs/documentation", "file": "README.md", "chunk_number": 4, "total_chunks": 5}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "**README.md Summary:**\nThe Magic SDK provides a developer tool for integrating passwordless authentication into applications using magic links, enhancing security and user experience. This solution addresses the risks and costs associated with traditional password management, citing statistics on cybersecurity spending and breach damages. Magic generates public-private key pairs, eliminating password storage and management, to streamline user databases and improve privacy. By introducing a passwordless authentication system, Magic aims to simplify user flow, increase conversion rates, and improve online security, and encourages developers to get started with the linked resources."}
{"code": "### \ud83d\ude80 **Boost Conversion**\n\nPasswords are a major source of on-boarding and conversion funnel friction.\n\n![Sign up user flow with passwords](.gitbook/assets/password-signup.png)\n\n![Passwordless sign up user flows with magic link](.gitbook/assets/passwordless-signup.png)\n\nWe can clearly see removing passwords reduces the number of login/signup steps by over 66%. This has the potential to **increase conversion rates by 54%** reported by eCommerce websites \\[[Source](https://www.cio.com/article/3193206/ditching-passwords-and-increasing-ecommerce-conversion-rates-by-54.html)\\].\n\nPasswordless is the future of online security. By delegating authentication to a user's email, mobile, or hardware device, they no longer have to wrestle with remembering passwords for the ever-increasing number of services that they interact with.\n\n#### That's enough of an explanation. It's time to get started! \ud83d\udcab\n\n{% page-ref page=\"get-started.md\" %}\n\n", "explanation": "This block aims to promote a \"passwordless\" authentication system, highlighting its potential to increase conversion rates by reducing friction in the on-boarding process. It suggests that eliminating passwords can simplify user flow and improve online security. A 'Get Started' page is linked for further information.", "metadata": {"repo": "magiclabs/documentation", "file": "README.md", "chunk_number": 5, "total_chunks": 5}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "**README.md Summary:**\nThe Magic SDK provides a developer tool for integrating passwordless authentication into applications using magic links, enhancing security and user experience. This solution addresses the risks and costs associated with traditional password management, citing statistics on cybersecurity spending and breach damages. Magic generates public-private key pairs, eliminating password storage and management, to streamline user databases and improve privacy. By introducing a passwordless authentication system, Magic aims to simplify user flow, increase conversion rates, and improve online security, and encourages developers to get started with the linked resources."}
{"code": "# Table of contents\n\n* [\ud83c\udfa9 Welcome](README.md)\n* [\ud83d\ude80 Get Started](get-started.md)\n* [\ud83d\udee1\ufe0f Security](security.md)\n* [\ud83d\udc64 Decentralized ID](decentralized-id.md)\n* [\ud83c\udfa8 Customization](customization.md)\n* [\ud83d\udcac FAQ](faq.md)\n\n## \ud83d\udca1 Technologies\n\n* [Node.js Integration](technologies/full-stack-node-js.md)\n* [Firebase Integration](technologies/firebase-integration.md)\n* [Next.js Integration](technologies/next-js-integration.md)\n\n## \ud83c\udf10 Client SDK Reference <a id=\"client-sdk\"></a>\n\n* [Browser JavaScript](client-sdk/browser-js/README.md)\n  * [\ud83d\ude80 Get Started](client-sdk/browser-js/get-started.md)\n  * [\ud83d\uddc4 SDK](client-sdk/browser-js/sdk/README.md)\n    * [Constructor](client-sdk/browser-js/sdk/constructor.md)\n    * [Global Methods](client-sdk/browser-js/sdk/global-methods/README.md)\n      * [preload](client-sdk/browser-js/sdk/global-methods/preload.md)\n    * [Auth Module](client-sdk/browser-js/sdk/auth-module/README.md)\n      * [loginWithMagicLink](client-sdk/browser-js/sdk/auth-module/login-with-magic-link.md)", "explanation": "This block is a table of contents for a documentation system, likely for a software or application. It provides navigation links to various sections, including getting started guides, security information, decentralized ID setup, customization options, and FAQs. Additionally, it lists integrations with specific technologies (Node.js, Firebase, Next.js) and references a client-side SDK, with further documentation for browser JavaScript usage and SDK-related topics.", "metadata": {"repo": "magiclabs/documentation", "file": "SUMMARY.md", "chunk_number": 1, "total_chunks": 10}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "# SUMMARY.md\n\n## Table of Contents\n\n### Overview\n\n* [Getting Started](#getting-started)\n* [Security](#security)\n* [Decentralized ID Setup](#decentralized-id-setup)\n* [Customization Options](#customization-options)\n* [FAQs](#faqs)\n\n### SDK Documentation\n\n* [Client-Side SDK](#client-side-sdk)\n\t+ User Module: authentication and management\n\t+ Errors & Warnings and PromiEvents\n\t+ Examples: tutorials and migration guides\n* [Admin SDK](#admin-sdk)\n\t+ Token Module: token-related operations\n\t+ Users Module: user management and metadata\n\t+ Utils Module: utility functions\n* [Platform Support](#platform-support)\n\t+ Browser JavaScript\n\t+ React Native JavaScript\n\t+ iOS\n\t+ Android\n\t+ Node.js\n\t+ Python\n\n### Integration Guides\n\n* [Node.js Integration](#node-js-integration)\n* [Firebase Integration](#firebase-integration)\n* [Next.js Integration](#next-js-integration)\n\n### Advanced Topics\n\n* [Ethereum Integration](#ethereum-integration)\n* [Blockchain Platforms](#blockchain-platforms)\n\t+ Ethereum (iOS and Android)\n\t+ Tezos\n\t+ ICON\n\t+ Zilliqa\n\n### Additional Resources\n\n* [Response and Error Handling](#response-and-error-handling)\n* [SDK Details](#sdk-details)\n\t+ Constructors\n\t+ Resources\n\t+ Methods (e.g., token decoding)"}
{"code": "    * [User Module](client-sdk/browser-js/sdk/user-module/README.md)\n      * [updateEmail](client-sdk/browser-js/sdk/user-module/updateemail.md)\n      * [getIdToken](client-sdk/browser-js/sdk/user-module/getidtoken.md)\n      * [generateIdToken](client-sdk/browser-js/sdk/user-module/generateidtoken.md)\n      * [getMetadata](client-sdk/browser-js/sdk/user-module/getmetadata.md)\n      * [isLoggedIn](client-sdk/browser-js/sdk/user-module/isloggedin.md)\n      * [logout](client-sdk/browser-js/sdk/user-module/logout.md)\n    * [Errors & Warnings](client-sdk/browser-js/sdk/errors-and-warnings.md)\n    * [PromiEvents](client-sdk/browser-js/sdk/promievents.md)\n  * [\ud83e\udde9 Examples](client-sdk/browser-js/examples/README.md)\n    * [Re-authenticate Users](client-sdk/browser-js/examples/re-authenticate-users.md)\n    * [Migrating From Fortmatic](client-sdk/browser-js/examples/migrating-from-fortmatic.md)\n* [React Native JavaScript](client-sdk/react-native/README.md)", "explanation": "This block appears to be a table of contents for a software development kit (SDK) documentation. The summary is as follows:\n\nThe SDK documentation is divided into sections: \n- User Module: provides functionality for user authentication and management, including email updates, token generation, and session management.\n- Errors & Warnings and PromiEvents: documents error handling and event handling mechanisms.\n- Examples: provides tutorials on re-authenticating users and migrating from Fortmatic.\n\nIt supports multiple platforms: browser-based JavaScript and React Native JavaScript.", "metadata": {"repo": "magiclabs/documentation", "file": "SUMMARY.md", "chunk_number": 2, "total_chunks": 10}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "# SUMMARY.md\n\n## Table of Contents\n\n### Overview\n\n* [Getting Started](#getting-started)\n* [Security](#security)\n* [Decentralized ID Setup](#decentralized-id-setup)\n* [Customization Options](#customization-options)\n* [FAQs](#faqs)\n\n### SDK Documentation\n\n* [Client-Side SDK](#client-side-sdk)\n\t+ User Module: authentication and management\n\t+ Errors & Warnings and PromiEvents\n\t+ Examples: tutorials and migration guides\n* [Admin SDK](#admin-sdk)\n\t+ Token Module: token-related operations\n\t+ Users Module: user management and metadata\n\t+ Utils Module: utility functions\n* [Platform Support](#platform-support)\n\t+ Browser JavaScript\n\t+ React Native JavaScript\n\t+ iOS\n\t+ Android\n\t+ Node.js\n\t+ Python\n\n### Integration Guides\n\n* [Node.js Integration](#node-js-integration)\n* [Firebase Integration](#firebase-integration)\n* [Next.js Integration](#next-js-integration)\n\n### Advanced Topics\n\n* [Ethereum Integration](#ethereum-integration)\n* [Blockchain Platforms](#blockchain-platforms)\n\t+ Ethereum (iOS and Android)\n\t+ Tezos\n\t+ ICON\n\t+ Zilliqa\n\n### Additional Resources\n\n* [Response and Error Handling](#response-and-error-handling)\n* [SDK Details](#sdk-details)\n\t+ Constructors\n\t+ Resources\n\t+ Methods (e.g., token decoding)"}
{"code": "  * [\ud83d\ude80 Get Started](client-sdk/react-native/get-started.md)\n* [iOS](client-sdk/ios/README.md)\n  * [\ud83d\ude80 Get Started](client-sdk/ios/get-started.md)\n  * [\ud83d\uddc4 SDK](client-sdk/ios/sdk/README.md)\n    * [Constructor](client-sdk/ios/sdk/constructor.md)\n    * [User Module](client-sdk/ios/sdk/user-module/README.md)\n      * [updateEmail](client-sdk/ios/sdk/user-module/updateemail.md)\n      * [getIdToken](client-sdk/ios/sdk/user-module/getidtoken.md)\n      * [generateIdToken](client-sdk/ios/sdk/user-module/generateidtoken.md)\n      * [getMetadata](client-sdk/ios/sdk/user-module/getmetadata.md)\n      * [isLoggedIn](client-sdk/ios/sdk/user-module/isloggedin.md)\n      * [logout](client-sdk/ios/sdk/user-module/logout.md)\n    * [Auth Module](client-sdk/ios/sdk/auth-module/README.md)\n      * [loginWithMagicLink](client-sdk/ios/sdk/auth-module/loginwithmagiclink.md)\n* [Android](client-sdk/android/README.md)\n  * [\ud83d\ude80 Get Started](client-sdk/android/get-started.md)\n  * [\ud83d\uddc4 SDK](client-sdk/android/sdk/README.md)", "explanation": "This block appears to be a table of contents for a client-side SDK documentation. It provides links to guides and API references for various platforms (React Native, iOS, and Android), covering topics such as getting started, user and auth modules, and specific SDK functions, like user authentication and token management.", "metadata": {"repo": "magiclabs/documentation", "file": "SUMMARY.md", "chunk_number": 3, "total_chunks": 10}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "# SUMMARY.md\n\n## Table of Contents\n\n### Overview\n\n* [Getting Started](#getting-started)\n* [Security](#security)\n* [Decentralized ID Setup](#decentralized-id-setup)\n* [Customization Options](#customization-options)\n* [FAQs](#faqs)\n\n### SDK Documentation\n\n* [Client-Side SDK](#client-side-sdk)\n\t+ User Module: authentication and management\n\t+ Errors & Warnings and PromiEvents\n\t+ Examples: tutorials and migration guides\n* [Admin SDK](#admin-sdk)\n\t+ Token Module: token-related operations\n\t+ Users Module: user management and metadata\n\t+ Utils Module: utility functions\n* [Platform Support](#platform-support)\n\t+ Browser JavaScript\n\t+ React Native JavaScript\n\t+ iOS\n\t+ Android\n\t+ Node.js\n\t+ Python\n\n### Integration Guides\n\n* [Node.js Integration](#node-js-integration)\n* [Firebase Integration](#firebase-integration)\n* [Next.js Integration](#next-js-integration)\n\n### Advanced Topics\n\n* [Ethereum Integration](#ethereum-integration)\n* [Blockchain Platforms](#blockchain-platforms)\n\t+ Ethereum (iOS and Android)\n\t+ Tezos\n\t+ ICON\n\t+ Zilliqa\n\n### Additional Resources\n\n* [Response and Error Handling](#response-and-error-handling)\n* [SDK Details](#sdk-details)\n\t+ Constructors\n\t+ Resources\n\t+ Methods (e.g., token decoding)"}
{"code": "    * [Constructor](client-sdk/android/sdk/constructor1.md)\n    * [User Module](client-sdk/android/sdk/user-module/README.md)\n      * [updateEmail](client-sdk/android/sdk/user-module/updateemail.md)\n      * [getIdToken](client-sdk/android/sdk/user-module/getidtoken.md)\n      * [generateIdToken](client-sdk/android/sdk/user-module/generateidtoken.md)\n      * [getMetadata](client-sdk/android/sdk/user-module/getmetadata.md)\n      * [isLoggedIn](client-sdk/android/sdk/user-module/isloggedin.md)\n      * [logout](client-sdk/android/sdk/user-module/logout.md)\n    * [Auth module](client-sdk/android/sdk/auth-module/README.md)\n      * [loginWithMagicLink](client-sdk/android/sdk/auth-module/loginwithmagiclink.md)\n* [Coming Soon](client-sdk/coming-soon.md)\n\n## \ud83d\udce1 Admin SDK Reference <a id=\"admin-sdk\"></a>\n\n* [Node.js](admin-sdk/node-js/README.md)\n  * [\ud83d\ude80 Get Started](admin-sdk/node-js/get-started.md)\n  * [\ud83d\uddc4 SDK](admin-sdk/node-js/sdk/README.md)\n    * [Constructor](admin-sdk/node-js/sdk/constructor.md)", "explanation": "The provided block appears to be a table of contents for an SDK (Software Development Kit) documentation. It outlines the structure and contents of the SDK, covering client SDKs for Android and Admin SDK for Node.js. The table of contents provides links to various modules, functions, and getting started guides, likely detailing how to use the SDK for authentication, user management, and other tasks.", "metadata": {"repo": "magiclabs/documentation", "file": "SUMMARY.md", "chunk_number": 4, "total_chunks": 10}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "# SUMMARY.md\n\n## Table of Contents\n\n### Overview\n\n* [Getting Started](#getting-started)\n* [Security](#security)\n* [Decentralized ID Setup](#decentralized-id-setup)\n* [Customization Options](#customization-options)\n* [FAQs](#faqs)\n\n### SDK Documentation\n\n* [Client-Side SDK](#client-side-sdk)\n\t+ User Module: authentication and management\n\t+ Errors & Warnings and PromiEvents\n\t+ Examples: tutorials and migration guides\n* [Admin SDK](#admin-sdk)\n\t+ Token Module: token-related operations\n\t+ Users Module: user management and metadata\n\t+ Utils Module: utility functions\n* [Platform Support](#platform-support)\n\t+ Browser JavaScript\n\t+ React Native JavaScript\n\t+ iOS\n\t+ Android\n\t+ Node.js\n\t+ Python\n\n### Integration Guides\n\n* [Node.js Integration](#node-js-integration)\n* [Firebase Integration](#firebase-integration)\n* [Next.js Integration](#next-js-integration)\n\n### Advanced Topics\n\n* [Ethereum Integration](#ethereum-integration)\n* [Blockchain Platforms](#blockchain-platforms)\n\t+ Ethereum (iOS and Android)\n\t+ Tezos\n\t+ ICON\n\t+ Zilliqa\n\n### Additional Resources\n\n* [Response and Error Handling](#response-and-error-handling)\n* [SDK Details](#sdk-details)\n\t+ Constructors\n\t+ Resources\n\t+ Methods (e.g., token decoding)"}
{"code": "    * [Token Module](admin-sdk/node-js/sdk/token-module/README.md)\n      * [getIssuer](admin-sdk/node-js/sdk/token-module/getissuer.md)\n      * [getPublicAddress](admin-sdk/node-js/sdk/token-module/getpublicaddress.md)\n      * [decode](admin-sdk/node-js/sdk/token-module/decode.md)\n      * [validate](admin-sdk/node-js/sdk/token-module/validate.md)\n    * [Users Module](admin-sdk/node-js/sdk/users-module/README.md)\n      * [logoutByIssuer](admin-sdk/node-js/sdk/users-module/logoutbyissuer.md)\n      * [logoutByPublicAddress](admin-sdk/node-js/sdk/users-module/logoutbypublicaddress.md)\n      * [logoutByToken](admin-sdk/node-js/sdk/users-module/logoutbytoken.md)\n      * [getMetadataByIssuer](admin-sdk/node-js/sdk/users-module/getmetadatabyissuer.md)\n      * [getMetadataByPublicAddress](admin-sdk/node-js/sdk/users-module/getmetadatabypublicaddress.md)\n      * [getMetadataByToken](admin-sdk/node-js/sdk/users-module/getmetadatabytoken.md)\n    * [Utils Module](admin-sdk/node-js/sdk/utils-module/README.md)", "explanation": "This block appears to be a table of contents for an Admin SDK documentation, outlining the functionality of three modules: \n\n1. Token Module: Handles various token-related operations such as getting issuer, public address, decoding, and validating tokens.\n2. Users Module: Manages user-related actions, including logout, and retrieving metadata for users identified by their issuer, public address, or token.\n3. Utils Module: Provides utility functions for general purposes (no specific functionality mentioned).", "metadata": {"repo": "magiclabs/documentation", "file": "SUMMARY.md", "chunk_number": 5, "total_chunks": 10}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "# SUMMARY.md\n\n## Table of Contents\n\n### Overview\n\n* [Getting Started](#getting-started)\n* [Security](#security)\n* [Decentralized ID Setup](#decentralized-id-setup)\n* [Customization Options](#customization-options)\n* [FAQs](#faqs)\n\n### SDK Documentation\n\n* [Client-Side SDK](#client-side-sdk)\n\t+ User Module: authentication and management\n\t+ Errors & Warnings and PromiEvents\n\t+ Examples: tutorials and migration guides\n* [Admin SDK](#admin-sdk)\n\t+ Token Module: token-related operations\n\t+ Users Module: user management and metadata\n\t+ Utils Module: utility functions\n* [Platform Support](#platform-support)\n\t+ Browser JavaScript\n\t+ React Native JavaScript\n\t+ iOS\n\t+ Android\n\t+ Node.js\n\t+ Python\n\n### Integration Guides\n\n* [Node.js Integration](#node-js-integration)\n* [Firebase Integration](#firebase-integration)\n* [Next.js Integration](#next-js-integration)\n\n### Advanced Topics\n\n* [Ethereum Integration](#ethereum-integration)\n* [Blockchain Platforms](#blockchain-platforms)\n\t+ Ethereum (iOS and Android)\n\t+ Tezos\n\t+ ICON\n\t+ Zilliqa\n\n### Additional Resources\n\n* [Response and Error Handling](#response-and-error-handling)\n* [SDK Details](#sdk-details)\n\t+ Constructors\n\t+ Resources\n\t+ Methods (e.g., token decoding)"}
{"code": "      * [parseAuthorizationHeader](admin-sdk/node-js/sdk/utils-module/parseauthorizationheader.md)\n    * [Errors & Warnings](admin-sdk/node-js/sdk/errors-and-warnings.md)\n  * [\ud83e\udde9 Examples](admin-sdk/node-js/examples/README.md)\n    * [Log Out a User's Magic Session](admin-sdk/node-js/examples/log-out-a-users-magic-session.md)\n* [Python](admin-sdk/python/README.md)\n  * [\ud83d\ude80 Get Started](admin-sdk/python/python-get-started.md)\n  * [\ud83d\uddc4 SDK](admin-sdk/python/python-sdk/README.md)\n    * [Constructor](admin-sdk/python/python-sdk/python-constructor.md)\n    * [Resources](admin-sdk/python/python-sdk/python-resources/README.md)\n      * [Token](admin-sdk/python/python-sdk/python-resources/python-token/README.md)\n        * [get\\_issuer](admin-sdk/python/python-sdk/python-resources/python-token/get_issuer.md)\n        * [get\\_public\\_address](admin-sdk/python/python-sdk/python-resources/python-token/get_public_address.md)\n        * [decode](admin-sdk/python/python-sdk/python-resources/python-token/decode.md)", "explanation": "This block appears to be a directory structure for a Software Development Kit (SDK) documentation in two programming languages: Node.js and Python. It provides links to various guides and resources for using the SDK, including errors and warnings, examples, getting started, and SDK details such as constructors, resources, and methods (e.g., token decoding).", "metadata": {"repo": "magiclabs/documentation", "file": "SUMMARY.md", "chunk_number": 6, "total_chunks": 10}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "# SUMMARY.md\n\n## Table of Contents\n\n### Overview\n\n* [Getting Started](#getting-started)\n* [Security](#security)\n* [Decentralized ID Setup](#decentralized-id-setup)\n* [Customization Options](#customization-options)\n* [FAQs](#faqs)\n\n### SDK Documentation\n\n* [Client-Side SDK](#client-side-sdk)\n\t+ User Module: authentication and management\n\t+ Errors & Warnings and PromiEvents\n\t+ Examples: tutorials and migration guides\n* [Admin SDK](#admin-sdk)\n\t+ Token Module: token-related operations\n\t+ Users Module: user management and metadata\n\t+ Utils Module: utility functions\n* [Platform Support](#platform-support)\n\t+ Browser JavaScript\n\t+ React Native JavaScript\n\t+ iOS\n\t+ Android\n\t+ Node.js\n\t+ Python\n\n### Integration Guides\n\n* [Node.js Integration](#node-js-integration)\n* [Firebase Integration](#firebase-integration)\n* [Next.js Integration](#next-js-integration)\n\n### Advanced Topics\n\n* [Ethereum Integration](#ethereum-integration)\n* [Blockchain Platforms](#blockchain-platforms)\n\t+ Ethereum (iOS and Android)\n\t+ Tezos\n\t+ ICON\n\t+ Zilliqa\n\n### Additional Resources\n\n* [Response and Error Handling](#response-and-error-handling)\n* [SDK Details](#sdk-details)\n\t+ Constructors\n\t+ Resources\n\t+ Methods (e.g., token decoding)"}
{"code": "        * [validate](admin-sdk/python/python-sdk/python-resources/python-token/validate.md)\n      * [User](admin-sdk/python/python-sdk/python-resources/python-user/README.md)\n        * [get\\_metadata\\_by\\_issuer](admin-sdk/python/python-sdk/python-resources/python-user/get_metadata_by_issuer.md)\n        * [get\\_metadata\\_by\\_public\\_address](admin-sdk/python/python-sdk/python-resources/python-user/get_metadata_by_public_address.md)\n        * [get\\_metadata\\_by\\_token](admin-sdk/python/python-sdk/python-resources/python-user/get_metadata_by_token.md)\n        * [logout\\_by\\_issuer](admin-sdk/python/python-sdk/python-resources/python-user/logout_by_issuer.md)\n        * [logout\\_by\\_public\\_address](admin-sdk/python/python-sdk/python-resources/python-user/logout_by_public_address.md)\n        * [logout\\_by\\_token](admin-sdk/python/python-sdk/python-resources/python-user/logout_by_token.md)\n    * [Response and Error Handling](admin-sdk/python/python-sdk/python-response-and-error-handling.md)", "explanation": "This block outlines the functionality of a Python SDK for user authentication. It provides methods for:\n\n- Token validation\n- User metadata retrieval (by issuer, public address, or token)\n- User logout (by issuer, public address, or token)\n\nAdditionally, it includes documentation on response and error handling within the SDK.", "metadata": {"repo": "magiclabs/documentation", "file": "SUMMARY.md", "chunk_number": 7, "total_chunks": 10}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "# SUMMARY.md\n\n## Table of Contents\n\n### Overview\n\n* [Getting Started](#getting-started)\n* [Security](#security)\n* [Decentralized ID Setup](#decentralized-id-setup)\n* [Customization Options](#customization-options)\n* [FAQs](#faqs)\n\n### SDK Documentation\n\n* [Client-Side SDK](#client-side-sdk)\n\t+ User Module: authentication and management\n\t+ Errors & Warnings and PromiEvents\n\t+ Examples: tutorials and migration guides\n* [Admin SDK](#admin-sdk)\n\t+ Token Module: token-related operations\n\t+ Users Module: user management and metadata\n\t+ Utils Module: utility functions\n* [Platform Support](#platform-support)\n\t+ Browser JavaScript\n\t+ React Native JavaScript\n\t+ iOS\n\t+ Android\n\t+ Node.js\n\t+ Python\n\n### Integration Guides\n\n* [Node.js Integration](#node-js-integration)\n* [Firebase Integration](#firebase-integration)\n* [Next.js Integration](#next-js-integration)\n\n### Advanced Topics\n\n* [Ethereum Integration](#ethereum-integration)\n* [Blockchain Platforms](#blockchain-platforms)\n\t+ Ethereum (iOS and Android)\n\t+ Tezos\n\t+ ICON\n\t+ Zilliqa\n\n### Additional Resources\n\n* [Response and Error Handling](#response-and-error-handling)\n* [SDK Details](#sdk-details)\n\t+ Constructors\n\t+ Resources\n\t+ Methods (e.g., token decoding)"}
{"code": "  * [\ud83e\udde9 Examples](admin-sdk/python/python-examples/README.md)\n    * [User Signup](admin-sdk/python/python-examples/user-signup.md)\n    * [User Login](admin-sdk/python/python-examples/user-login.md)\n    * [User Logout](admin-sdk/python/python-examples/user-logout.md)\n* [Coming Soon](admin-sdk/coming-soon.md)\n\n## \u26d3 Advanced\n\n* [Ethereum](advanced/ethereum/README.md)\n  * [JavaScript](advanced/ethereum/javascript/README.md)\n    * [\ud83d\ude80 Get Started](advanced/ethereum/javascript/get-started.md)\n    * [\ud83d\udc64 Get User Info](advanced/ethereum/javascript/get-user-info.md)\n    * [\ud83d\udcb8 Send Transaction](advanced/ethereum/javascript/send-transaction.md)\n    * [\u270f\ufe0f Sign Message](advanced/ethereum/javascript/sign-message.md)\n    * [\ud83d\udcdc Smart Contract](advanced/ethereum/javascript/smart-contract.md)\n  * [iOS](advanced/ethereum/ios/README.md)\n    * [\ud83d\ude80 Get Started](advanced/ethereum/ios/get-started.md)\n    * [\ud83d\udc64 Get User Info](advanced/ethereum/ios/get-user-info.md)\n    * [\ud83d\udcb8 Send Transaction](advanced/ethereum/ios/send-transaction.md)", "explanation": "This block appears to be a table of contents for documentation, likely for a software development kit (SDK) or API. It provides links to various example use cases and advanced features for different programming languages and technologies, including Ethereum integration.", "metadata": {"repo": "magiclabs/documentation", "file": "SUMMARY.md", "chunk_number": 8, "total_chunks": 10}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "# SUMMARY.md\n\n## Table of Contents\n\n### Overview\n\n* [Getting Started](#getting-started)\n* [Security](#security)\n* [Decentralized ID Setup](#decentralized-id-setup)\n* [Customization Options](#customization-options)\n* [FAQs](#faqs)\n\n### SDK Documentation\n\n* [Client-Side SDK](#client-side-sdk)\n\t+ User Module: authentication and management\n\t+ Errors & Warnings and PromiEvents\n\t+ Examples: tutorials and migration guides\n* [Admin SDK](#admin-sdk)\n\t+ Token Module: token-related operations\n\t+ Users Module: user management and metadata\n\t+ Utils Module: utility functions\n* [Platform Support](#platform-support)\n\t+ Browser JavaScript\n\t+ React Native JavaScript\n\t+ iOS\n\t+ Android\n\t+ Node.js\n\t+ Python\n\n### Integration Guides\n\n* [Node.js Integration](#node-js-integration)\n* [Firebase Integration](#firebase-integration)\n* [Next.js Integration](#next-js-integration)\n\n### Advanced Topics\n\n* [Ethereum Integration](#ethereum-integration)\n* [Blockchain Platforms](#blockchain-platforms)\n\t+ Ethereum (iOS and Android)\n\t+ Tezos\n\t+ ICON\n\t+ Zilliqa\n\n### Additional Resources\n\n* [Response and Error Handling](#response-and-error-handling)\n* [SDK Details](#sdk-details)\n\t+ Constructors\n\t+ Resources\n\t+ Methods (e.g., token decoding)"}
{"code": "    * [\u270f\ufe0f Sign Message](advanced/ethereum/ios/sign-message.md)\n    * [\ud83d\udcdc Smart Contract](advanced/ethereum/ios/smart-contract.md)\n  * [Android](advanced/ethereum/android/README.md)\n    * [\ud83d\ude80 Get Started](advanced/ethereum/android/get-started.md)\n    * [\ud83d\udc64 Get User Info](advanced/ethereum/android/get-user-info.md)\n    * [\ud83d\udcb8 Send Transaction](advanced/ethereum/android/send-transaction.md)\n    * [\u270f\ufe0f Sign Message](advanced/ethereum/android/sign-message.md)\n    * [\ud83d\udcdc Smart Contract](advanced/ethereum/android/smart-contract.md)\n* [Tezos](advanced/tezos/README.md)\n  * [\ud83d\ude80 Get Started](advanced/tezos/get-started.md)\n  * [\ud83d\udc64 Get User Info](advanced/tezos/get-user-info.md)\n  * [\ud83d\udcb8 Send Transaction](advanced/tezos/send-transaction.md)\n  * [\ud83d\udcdc Smart Contract](advanced/tezos/smart-contract.md)\n* [ICON](advanced/icon/README.md)\n  * [\ud83d\ude80 Get Started](advanced/icon/get-started.md)\n  * [\ud83d\udc64 Get User Info](advanced/icon/get-user-info.md)\n  * [\ud83d\udcb8 Send Transaction](advanced/icon/send-transaction.md)", "explanation": "The provided block is a table of contents for advanced development guides on various blockchain platforms, including Ethereum (iOS and Android), Tezos, and ICON. It outlines the different functionalities and topics covered in each platform, such as getting started, user info, sending transactions, smart contracts, and signing messages.", "metadata": {"repo": "magiclabs/documentation", "file": "SUMMARY.md", "chunk_number": 9, "total_chunks": 10}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "# SUMMARY.md\n\n## Table of Contents\n\n### Overview\n\n* [Getting Started](#getting-started)\n* [Security](#security)\n* [Decentralized ID Setup](#decentralized-id-setup)\n* [Customization Options](#customization-options)\n* [FAQs](#faqs)\n\n### SDK Documentation\n\n* [Client-Side SDK](#client-side-sdk)\n\t+ User Module: authentication and management\n\t+ Errors & Warnings and PromiEvents\n\t+ Examples: tutorials and migration guides\n* [Admin SDK](#admin-sdk)\n\t+ Token Module: token-related operations\n\t+ Users Module: user management and metadata\n\t+ Utils Module: utility functions\n* [Platform Support](#platform-support)\n\t+ Browser JavaScript\n\t+ React Native JavaScript\n\t+ iOS\n\t+ Android\n\t+ Node.js\n\t+ Python\n\n### Integration Guides\n\n* [Node.js Integration](#node-js-integration)\n* [Firebase Integration](#firebase-integration)\n* [Next.js Integration](#next-js-integration)\n\n### Advanced Topics\n\n* [Ethereum Integration](#ethereum-integration)\n* [Blockchain Platforms](#blockchain-platforms)\n\t+ Ethereum (iOS and Android)\n\t+ Tezos\n\t+ ICON\n\t+ Zilliqa\n\n### Additional Resources\n\n* [Response and Error Handling](#response-and-error-handling)\n* [SDK Details](#sdk-details)\n\t+ Constructors\n\t+ Resources\n\t+ Methods (e.g., token decoding)"}
{"code": "  * [\ud83d\udcdc Smart Contract](advanced/icon/smart-contract.md)\n* [Zilliqa](advanced/zilliqa/README.md)\n  * [\ud83d\ude80 Get Started](advanced/zilliqa/get-started.md)\n  * [\ud83d\udc64 Get User Wallet](advanced/zilliqa/get-user-wallet.md)\n  * [\ud83d\udcb8 Send Transaction](advanced/zilliqa/send-transaction.md)\n  * [\ud83d\udcdc Smart Contract](advanced/zilliqa/smart-contract.md)\n\n", "explanation": "This block appears to be a table of contents for a documentation or tutorial on blockchain-related topics, specifically about the Zilliqa platform. It provides links to various sections, including a getting started guide, wallet and transaction instructions, and information on smart contracts.", "metadata": {"repo": "magiclabs/documentation", "file": "SUMMARY.md", "chunk_number": 10, "total_chunks": 10}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "# SUMMARY.md\n\n## Table of Contents\n\n### Overview\n\n* [Getting Started](#getting-started)\n* [Security](#security)\n* [Decentralized ID Setup](#decentralized-id-setup)\n* [Customization Options](#customization-options)\n* [FAQs](#faqs)\n\n### SDK Documentation\n\n* [Client-Side SDK](#client-side-sdk)\n\t+ User Module: authentication and management\n\t+ Errors & Warnings and PromiEvents\n\t+ Examples: tutorials and migration guides\n* [Admin SDK](#admin-sdk)\n\t+ Token Module: token-related operations\n\t+ Users Module: user management and metadata\n\t+ Utils Module: utility functions\n* [Platform Support](#platform-support)\n\t+ Browser JavaScript\n\t+ React Native JavaScript\n\t+ iOS\n\t+ Android\n\t+ Node.js\n\t+ Python\n\n### Integration Guides\n\n* [Node.js Integration](#node-js-integration)\n* [Firebase Integration](#firebase-integration)\n* [Next.js Integration](#next-js-integration)\n\n### Advanced Topics\n\n* [Ethereum Integration](#ethereum-integration)\n* [Blockchain Platforms](#blockchain-platforms)\n\t+ Ethereum (iOS and Android)\n\t+ Tezos\n\t+ ICON\n\t+ Zilliqa\n\n### Additional Resources\n\n* [Response and Error Handling](#response-and-error-handling)\n* [SDK Details](#sdk-details)\n\t+ Constructors\n\t+ Resources\n\t+ Methods (e.g., token decoding)"}
{"code": "# Coming Soon\n\n## Server Admin SDK\n\n* Ruby\n* Go\n* Rust\n* PHP\n\n", "explanation": "This block appears to be a teaser or placeholder for an upcoming \"Server Admin SDK\" that will be available in multiple programming languages: Ruby, Go, Rust, and PHP.", "metadata": {"repo": "magiclabs/documentation", "file": "admin-sdk/coming-soon.md", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "The 'admin-sdk/coming-soon.md' file serves as a placeholder, announcing the forthcoming release of a Server Admin SDK. The SDK will provide administrators with a multi-language support, including Ruby, Go, Rust, and PHP, allowing them to develop and automate server management tasks efficiently."}
{"code": "# Node.js\n\n## \ud83d\ude80 Welcome to the Magic Node.js SDK\n\nThe Magic server-side JavaScript SDK makes it easy to leverage[ Decentralized ID Tokens](../../decentralized-id.md) to protect routes and restricted resources for your app. This guide will cover some important topics for getting started with server-side APIs and to make the most of Magic's features.\n\n**\ud83d\udc49 Go to our** [**Getting Started**](get-started.md) **tutorial to begin your integration**\n\n**\ud83d\udc49 Visit the** [**API documentation**](sdk/) **to learn the methods you'll be using**\n\n**\ud83d\udc49 Go to** [**Examples**](examples/) **for an introduction to common patterns and use-cases**\n\n### Looking for a client-side API? Start with one of these:\n\n{% page-ref page=\"../../client-sdk/browser-js/\" %}\n\n{% page-ref page=\"../../client-sdk/react-native/\" %}\n\n\n\n\n\n", "explanation": "**Summary:**\n\nThis block is a README or introduction to the Magic Node.js SDK, providing a brief overview and serving as an entry point for developers to integrate the SDK with their application. It includes links to getting started tutorials, API documentation, and example use cases for server-side APIs and common patterns. It also offers alternatives for client-side APIs.", "metadata": {"repo": "magiclabs/documentation", "file": "admin-sdk/node-js/README.md", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "# Magic Node.js SDK README\n\nOverview\n--------\n\nThe Magic Node.js SDK is a library that allows developers to integrate Magic's authentication and authorization features into their Node.js applications. This README serves as an entry point for developers to get started with the SDK.\n\nGetting Started\n---------------\n\n- Follow our [getting started tutorials](link) to integrate Magic into your application.\n- Explore our [API documentation](link) for detailed information on available endpoints and methods.\n\nExample Use Cases\n-----------------\n\n- Server-side APIs: Use the Magic SDK to authenticate users and authorize access to protected routes.\n- Common Patterns: Implement common authentication patterns such as login, logout, and user management.\n\nAlternatives\n------------\n\n- Client-side APIs: If you need to authenticate users on the client-side, consider using our [Magic Client SDK](link) instead.\n\nBy following this guide, you'll be able to effectively integrate the Magic Node.js SDK into your application and enhance your authentication and authorization capabilities."}
{"code": "# \ud83e\udde9 Examples\n\n", "explanation": "This block appears to be a heading for a section that provides examples, likely for a programming tutorial, API reference, or documentation.", "metadata": {"repo": "magiclabs/documentation", "file": "admin-sdk/node-js/examples/README.md", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "Based on the code block summaries, here is a concise and holistic summary of the file 'admin-sdk/node-js/examples/README.md':\n\nThis README file provides a collection of Node.js examples for the Admin SDK. It serves as a resource for developers to learn and reference various use cases and implementations of the Admin SDK in their Node.js applications."}
{"code": "# Log Out a User's Magic Session\n\nSometimes you will find yourself needing to log your users out from the server-side. This provides a small example of how to do so.\n\n## Prerequisite\n\n* [Install server-side JavaScript SDK](../get-started.md#installation)\n\n## Step 1: Invalidate the user session\n\n{% tabs %}\n{% tab title=\"With public address\" %}\n```javascript\napp.post('/logout', (req: any, res: any) => {\n  const userPublicAddress = magicAdmin.token.getPublicAddress(\n    req.headers.authorization\n  );\n  magicAdmin.users.logoutByPublicAddress(userPublicAddress);\n});\n```\n{% endtab %}\n\n{% tab title=\"With DID Token\" %}\n```javascript\napp.post('/logout', (req: any, res: any) => {\n  magicAdmin.token.invalidate(req.headers.authorization);\n});\n```\n{% endtab %}\n{% endtabs %}\n\n", "explanation": "**Purpose and Functionality Summary**\n\nThis code block provides a server-side example of how to log out a Magic user session. It offers two methods:\n\n1. **Invalidate session by public address**: Retrieves the user's public address from the authorization header and uses it to log out the user.\n2. **Invalidate session by DID Token**: Directly invalidates the token in the authorization header to log out the user.\n\nBoth methods provide a way to remotely log out a user, typically used when a user initiates a logout request from the client-side.", "metadata": {"repo": "magiclabs/documentation", "file": "admin-sdk/node-js/examples/log-out-a-users-magic-session.md", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "Here is a concise and holistic summary of the file 'admin-sdk/node-js/examples/log-out-a-users-magic-session.md':\n\nThis example demonstrates how to log out a Magic user session on the server-side using Node.js. It offers two methods: invalidating a session by the user's public address or by directly invalidating the DID Token in the authorization header, allowing for remote user logout initiated from the client-side."}
{"code": "# \ud83d\ude80 Get Started\n\n## \ud83d\udce6 Installation\n\n{% tabs %}\n{% tab title=\"NPM\" %}\n```bash\nnpm install --save @magic-sdk/admin\n```\n{% endtab %}\n\n{% tab title=\"Yarn\" %}\n```bash\nyarn add @magic-sdk/admin\n```\n{% endtab %}\n{% endtabs %}\n\n## \u26a1\ufe0f Creating an SDK Instance\n\n{% tabs %}\n{% tab title=\"CommonJS\" %}\n```typescript\nconst { Magic } = require('@magic-sdk/admin');\n\nconst mAdmin = new Magic('SECRET_API_KEY'); // \u2728\n```\n{% endtab %}\n\n{% tab title=\"ES Modules/TypeScript\" %}\n```typescript\nimport { Magic } from '@magic-sdk/admin';\n\nconst mAdmin = new Magic('SECRET_API_KEY'); // \u2728\n```\n{% endtab %}\n{% endtabs %}\n\n{% hint style=\"info\" %}\nExamples for the server-side JavaScript SDK use the CommonJS pattern by default.\n{% endhint %}\n\n\n\n", "explanation": "This block provides instructions on how to get started with the Magic SDK. It includes:\n\n1. Installation instructions using npm or yarn.\n2. Instructions on creating an SDK instance in both CommonJS and ES Modules/TypeScript.", "metadata": {"repo": "magiclabs/documentation", "file": "admin-sdk/node-js/get-started.md", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "The 'admin-sdk/node-js/get-started.md' file provides a step-by-step guide for setting up the Magic SDK in a Node.js environment. It includes the following key steps:\n\n* Installing the Magic SDK using either npm or yarn package managers.\n* Creating an instance of the SDK, with instructions provided for both CommonJS and ES Modules/TypeScript syntax. This enables developers to integrate the Magic SDK into their Node.js applications, regardless of their chosen module system."}
{"code": "# \ud83d\uddc4 SDK\n\n", "explanation": "This line appears to be a heading for a section related to a Software Development Kit (SDK).", "metadata": {"repo": "magiclabs/documentation", "file": "admin-sdk/node-js/sdk/README.md", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "Based on the provided information, I can only generate a partial summary. However, here's a holistic summary based on common SDK documentation:\n\nThe 'admin-sdk/node-js/sdk/README.md' file is a documentation guide for the Admin SDK in Node.js. It serves as an introduction and overview of the SDK, outlining its features, functionality, and usage. The guide likely covers setup and installation instructions, configuration options, and examples of how to integrate the Admin SDK into a Node.js application. It may also include information on dependencies, compatibility, and troubleshooting."}
{"code": "# Constructor\n\n### Arguments\n\n`new Magic(secretApiKey, options?)`\n\n* `secretApiKey` \\(String\\): Your **secret** API Key retrieved from the [Magic Dashboard](https://dashboard.magic.link).\n* `options.endpoint?`\\(String\\): A URL pointing to the Magic API. You should not need to provide this value except in case you are building highly custom integration tests.\n\n### Example\n\n```typescript\nconst { Magic } = require('@magic-sdk/admin');\n\nlet m;\n\n// Construct with an API key:\nm = new Magic('API_KEY');\n\n// Construct with an API key plus options:\nm = new Magic('API_KEY', { endpoint: '...' });\n```\n\n", "explanation": "This code block defines the constructor for a Magic object, which requires a `secretApiKey` and accepts optional `options`, including a custom `endpoint`. It initializes a Magic instance for interacting with the Magic API.", "metadata": {"repo": "magiclabs/documentation", "file": "admin-sdk/node-js/sdk/constructor.md", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "The 'admin-sdk/node-js/sdk/constructor.md' file defines a Magic object constructor, which initializes an instance for interacting with the Magic API. The constructor requires a 'secretApiKey' and optionally accepts 'options', allowing for customization of the API endpoint."}
{"code": "# Errors & Warnings\n\n## `SDKError`\n\nThe `SDKError` class is exposed for `instanceof` operations.\n\n```typescript\nimport { SDKError } from '@magic-sdk/admin';\n\ntry {\n  // Something async...\ncatch (err) {\n  if (err instanceof SDKError) {\n    // Handle...\n  }\n}\n```\n\nAdditionally, an enumeration of relevant error codes is also exposed for convenience and human readability:\n\n```typescript\nimport { ErrorCode } from '@magic-sdk/admin';\n\nErrorCode.MissingApiKey\nErrorCode.MissingAuthHeader\nErrorCode.IncorrectSignerAddress\n// and so forth...\n// Please reference the `Enum Key` column of the error table below.\n```\n\n### Error Codes\n\n| Enum Key | Description |\n| :--- | :--- |\n| `TokenExpired` | The supplied DID Token is invalid due to an expired timestamp. |\n| `TokenCannotBeUsedYet` | The `nbf` \\(\"not before\"\\) field of the supplied DID Token is set in the future. By default, a 5 minute leeway is added to the timestamp. |", "explanation": "**Summary:**\n\nThe `SDKError` class and `ErrorCode` enumeration handle and categorize errors within the Magic SDK. The `SDKError` class allows for instance checking in error handling, while the `ErrorCode` enumeration provides human-readable error codes for convenience.", "metadata": {"repo": "magiclabs/documentation", "file": "admin-sdk/node-js/sdk/errors-and-warnings.md", "chunk_number": 1, "total_chunks": 2}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "The `admin-sdk/node-js/sdk/errors-and-warnings.md` file defines a set of error handling mechanisms for the Magic SDK. It implements the `SDKError` class and `ErrorCode` enumeration to categorize and provide readable error codes for:\n\n* Authentication errors (invalid/malformed tokens, mismatched addresses, failed recovery proofs)\n* Missing/malformed API keys\n* General service errors with additional context\n\nThis enables standardized error handling and reporting within the SDK."}
{"code": "| `IncorrectSignerAddress` | The supplied DID Token is invalid due to a mismatch between the signature origin and the claimed user public address. |\n| `FailedRecoveryProof` | The supplied DID Token could not be recovered using Elliptic Curve recovery. |\n| `ApiKeyMissing` | The API key required for a particular action is missing or malformed. |\n| `MalformedTokenError` | The supplied DID Token could not be successfully parsed. |\n| `ServiceError` | An error occurred while communicating with the Magic API. Be sure to check the `data` property of the error object for additional context. |\n\n### `data` & Nested Errors\n\nFor additional context about an error, the `SDKError.data` property contains an array of potentially illuminating metadata. At the moment, this property is reserved for service errors when communication to Magic APIs fail. \n\n", "explanation": "This block defines a set of error types in a SDK, along with their descriptions. The errors include:\n\n- Authentication issues (Invalid DID token, mismatched signer address, failed recovery proof, malformed token)\n- Missing/malformed API key\n- General service error (with extra context in the `data` property)\n\nThese error types provide a standardized way to handle and report errors in the SDK.", "metadata": {"repo": "magiclabs/documentation", "file": "admin-sdk/node-js/sdk/errors-and-warnings.md", "chunk_number": 2, "total_chunks": 2}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "The `admin-sdk/node-js/sdk/errors-and-warnings.md` file defines a set of error handling mechanisms for the Magic SDK. It implements the `SDKError` class and `ErrorCode` enumeration to categorize and provide readable error codes for:\n\n* Authentication errors (invalid/malformed tokens, mismatched addresses, failed recovery proofs)\n* Missing/malformed API keys\n* General service errors with additional context\n\nThis enables standardized error handling and reporting within the SDK."}
{"code": "# Token Module\n\nThe Token Module and its members are accessible on the Magic Admin SDK instance by the `token` property.\n\n```typescript\nconst { Magic } = require('@magic-sdk/admin');\n\nconst mAdmin = new Magic('SECRET_API_KEY');\n\nmAdmin.token;\nmAdmin.token.getIssuer;\nmAdmin.token.getPublicAddress;\nmAdmin.token.decode;\nmAdmin.token.validate;\n```\n\n## Members\n\n{% page-ref page=\"getissuer.md\" %}\n\n{% page-ref page=\"getpublicaddress.md\" %}\n\n{% page-ref page=\"decode.md\" %}\n\n{% page-ref page=\"validate.md\" %}\n\n\n\n", "explanation": "The Token Module is a part of the Magic Admin SDK that provides access to token-related functionality through the `token` property. It offers methods to retrieve the issuer and public address, as well as decode and validate tokens.", "metadata": {"repo": "magiclabs/documentation", "file": "admin-sdk/node-js/sdk/token-module/README.md", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "**admin-sdk/node-js/sdk/token-module/README.md**\n\nThe Token Module is a component of the Magic Admin SDK that enables token management through the `token` property, offering methods for:\n\n* Retrieving issuer and public address\n* Decoding tokens\n* Validating tokens"}
{"code": "---\ndescription: >-\n  Decodes a Decentralized ID Token from a Base64 string into a tuple of its\n  individual components.\n---\n\n# decode\n\n### Arguments\n\n`decode(didToken)`\n\n* `didToken` \\(String\\): A [Decentralized ID Token](../../../../decentralized-id.md) generated by a Magic user on the client-side.\n\n### Returns\n\n`[string, Claim]`: containing the `[proof, claim]` that composes the DID Token. The `claim`, while given as a JSON string, is automatically parsed to the following interface:\n\n```typescript\ninterface Claim {\n  iat: number; // Issued At Timestamp\n  ext: number; // Expiration Timestamp\n  iss: string; // Issuer of DID Token\n  sub: string; // Subject\n  aud: string; // Audience\n  nbf: number; // Not Before Timestamp\n  tid: string; // DID Token ID\n  add: string; // (optional) Misc additional signed data\n}\n```\n\nAs a convenience, the above interface is available to your code in [TypeScript](https://www.typescriptlang.org/):\n\n```typescript\nimport { Claim } from '@magic-sdk/admin';\n```\n\n### Example\n\n```typescript", "explanation": "This function, `decode`, decodes a Base64-encoded Decentralized ID Token into its individual components, returning a tuple containing the token's proof and claim.", "metadata": {"repo": "magiclabs/documentation", "file": "admin-sdk/node-js/sdk/token-module/decode.md", "chunk_number": 1, "total_chunks": 2}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "The file 'admin-sdk/node-js/sdk/token-module/decode.md' contains a function called `decode` which takes a Base64-encoded Decentralized ID Token as input, decodes it, and returns its components - specifically the token's proof and claim - as a tuple. This function is utilized in a login request handler to verify user authentication information from a Decentralized Identifier (DID) token in the Authorization header, leveraging the Magic SDK for decoding."}
{"code": "const { Magic } = require('@magic-sdk/admin');\nconst mAdmin = new Magic('SECRET_API_KEY');\n\n...\n\n/* Gets the DID token from a login request */\napp.get('/login', async (req: any, res: any) => {\n  /*\n    Assumes DIDToken was passed in the Authorization header\n    in the standard `Bearer {token}` format.\n   */\n  const DIDToken = req.headers.authorization.substring(7);\n  const [proof, claim] =  mAdmin.token.decode(DIDToken);\n  \n  console.log(proof); // => string\n  \n  console.log(claim);\n  /*\n    => {\n      iat: number,\n      ext: number,\n      iss: string,\n      sub: string,\n      aud: string,\n      nbf: number,\n      tid: string\n    }\n   */\n});\n\n```\n\n", "explanation": "**Summary:**\n\nThis code block handles a login request, extracting and verifying a Decentralized Identifier (DID) token from the Authorization header. It uses the Magic SDK to decode the token into a proof and claim, which contain user authentication information.", "metadata": {"repo": "magiclabs/documentation", "file": "admin-sdk/node-js/sdk/token-module/decode.md", "chunk_number": 2, "total_chunks": 2}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "The file 'admin-sdk/node-js/sdk/token-module/decode.md' contains a function called `decode` which takes a Base64-encoded Decentralized ID Token as input, decodes it, and returns its components - specifically the token's proof and claim - as a tuple. This function is utilized in a login request handler to verify user authentication information from a Decentralized Identifier (DID) token in the Authorization header, leveraging the Magic SDK for decoding."}
{"code": "# getIssuer\n\n### Arguments\n\n`getIssuer(didToken)`\n\n* `didToken` \\(String\\): A [Decentralized ID Token](../../../../decentralized-id.md) generated by a Magic user on the client-side.\n\n### Returns\n\n`string`: The Decentralized ID of the Magic User who generated the DID Token.\n\n### Example\n\n```typescript\nconst { Magic } = require('@magic-sdk/admin');\nconst mAdmin = new Magic('SECRET_API_KEY');\n\n...\n\n/* Gets the DID token from a login request */\napp.get('/login', async (req: any, res: any) => {\n  /*\n    Assumes DIDToken was passed in the Authorization header\n    in the standard `Bearer {token}` format.\n   */\n  const DIDToken = req.headers.authorization.substring(7);\n  const issuer = mAdmin.token.getIssuer(DIDToken);\n  /* You can use this as the ID column in your own tables */\n});\n```\n\n", "explanation": "**Purpose and Functionality Summary:**\n\nThe `getIssuer` function takes a Decentralized ID Token as an input and returns the associated Decentralized ID of the Magic User who generated the token. This allows developers to authenticate and identify Magic Users by extracting their Decentralized ID from the token.", "metadata": {"repo": "magiclabs/documentation", "file": "admin-sdk/node-js/sdk/token-module/getissuer.md", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "The 'getIssuer' function in 'admin-sdk/node-js/sdk/token-module/getissuer.md' is a utility for extracting the associated Decentralized ID of a Magic User from a given Decentralized ID Token, enabling user authentication and identification."}
{"code": "---\ndescription: >-\n  Gets the cryptographic public address of the Magic User who generated the\n  supplied token.\n---\n\n# getPublicAddress\n\n### Arguments\n\n`getPublicAddress(didToken)`\n\n* `didToken` \\(String\\): A [Decentralized ID Token](../../../../decentralized-id.md) generated by a Magic user on the client-side.\n\n### Returns\n\n`string`: The [public address](https://support.blockchain.com/hc/en-us/articles/360000951966-Public-and-private-keys) of the Magic User who generated the DID Token.\n\n### Example\n\n```typescript\nconst { Magic } = require('@magic-sdk/admin');\nconst mAdmin = new Magic('SECRET_API_KEY');\n\n...\n\n/* Gets the DID token from a login request */\napp.get('/login', async (req: any, res: any) => {\n  /*\n    Assumes DIDToken was passed in the Authorization header\n    in the standard `Bearer {token}` format.\n   */\n  const DIDToken = req.headers.authorization.substring(7);\n  const publicAddress = mAdmin.token.getPublicAddress(DIDToken);\n  /* You can use this as the ID column in your own tables */\n});\n\n```\n\n", "explanation": "**Purpose**: The `getPublicAddress` function retrieves the cryptographic public address of a Magic User from a supplied Decentralized ID Token.\n\n**Functionality**: It takes a DID Token as input, extracts the public address associated with the token, and returns it as a string.", "metadata": {"repo": "magiclabs/documentation", "file": "admin-sdk/node-js/sdk/token-module/getpublicaddress.md", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "The 'getPublicAddress' function within 'admin-sdk/node-js/sdk/token-module/getpublicaddress.md' retrieves a Magic User's cryptographic public address from a provided Decentralized ID (DID) Token."}
{"code": "---\ndescription: Validates a Decentralized ID token.\n---\n\n# validate\n\n### Arguments\n\n`validate(didToken, attachment? = 'none')`\n\n* `didToken` \\(String\\): A [Decentralized ID Token](../../../../decentralized-id.md) generated by a Magic user on the client-side.\n* `attachment?` \\(String\\): Arbitrary, serialized data to be used for recovery of the `add` field on the Decentralized ID Token \\(Defaults to `\"none\"`\\).\n\n### Returns\n\n`void`: The function will return if the specified DID token is authentic and not expired. If the token is forged or otherwise invalid, the function will throw a descriptive error.\n\n### Example\n\n```typescript\nconst { Magic } = require('@magic-sdk/admin');\nconst mAdmin = new Magic('SECRET_API_KEY');\n\n...\n\n/* Gets the DID token from a login request */\napp.get('/login', async (req: any, res: any) => {\n  /*\n    Assumes DIDToken was passed in the Authorization header\n    in the standard `Bearer {token}` format.\n   */\n  const DIDToken = req.headers.authorization.substring(7);", "explanation": "**Summary:**\n\nThe `validate` block is a function that authenticates a Decentralized ID token. It takes a `didToken` and an optional `attachment` string as input, and returns `void` if the token is valid and not expired. If the token is invalid or forged, it throws a descriptive error.", "metadata": {"repo": "magiclabs/documentation", "file": "admin-sdk/node-js/sdk/token-module/validate.md", "chunk_number": 1, "total_chunks": 2}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "**Overview of `validate` Function in `token-module/validate.md`**\n\nThe `validate` function is a core component of the admin SDK used for authenticating Decentralized ID (DID) tokens. It takes a required `didToken` and an optional `attachment` string as input, verifying the token's validity and checking for expiration. Upon successful validation, the function returns `void` and allows the user to proceed to the next step (e.g., setting cookies), while invalid or forged tokens trigger a descriptive error."}
{"code": "  mAdmin.token.validate(DIDToken);\n  /* User is logged in. Set cookies! */\n});\n\n```\n\n", "explanation": "This block validates a DID token using the `mAdmin.token.validate` function. Upon successful validation, it indicates that the user is logged in, implying the next step is to set cookies.", "metadata": {"repo": "magiclabs/documentation", "file": "admin-sdk/node-js/sdk/token-module/validate.md", "chunk_number": 2, "total_chunks": 2}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "**Overview of `validate` Function in `token-module/validate.md`**\n\nThe `validate` function is a core component of the admin SDK used for authenticating Decentralized ID (DID) tokens. It takes a required `didToken` and an optional `attachment` string as input, verifying the token's validity and checking for expiration. Upon successful validation, the function returns `void` and allows the user to proceed to the next step (e.g., setting cookies), while invalid or forged tokens trigger a descriptive error."}
{"code": "# Users Module\n\nThe Users Module and it's members are accessible on the Magic Admin SDK instance by the `users` property.\n\n```typescript\nconst { Magic } = require('@magic-sdk/admin');\n\nconst mAdmin = new Magic('SECRET_API_KEY');\n\nmAdmin.users;\nmAdmin.users.logoutByIssuer;\nmAdmin.users.logoutByPublicAddress;\nmAdmin.users.logoutByToken;\nmAdmin.users.getMetadataByIssuer;\nmAdmin.users.getMetadataByPublicAddress;\nmAdmin.users.getMetadataByToken;\n```\n\n## Members\n\n{% page-ref page=\"logoutbyissuer.md\" %}\n\n{% page-ref page=\"logoutbypublicaddress.md\" %}\n\n{% page-ref page=\"logoutbytoken.md\" %}\n\n{% page-ref page=\"getmetadatabyissuer.md\" %}\n\n{% page-ref page=\"getmetadatabypublicaddress.md\" %}\n\n{% page-ref page=\"getmetadatabytoken.md\" %}\n\n", "explanation": "**Summary**\n\nThe Users Module is a component of the Magic Admin SDK, accessible via the `users` property. It provides methods for managing user sessions and retrieving metadata, including logout and get metadata functions by issuer, public address, or token.", "metadata": {"repo": "magiclabs/documentation", "file": "admin-sdk/node-js/sdk/users-module/README.md", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "The `users-module` in the Magic Admin SDK is a component for user session management and metadata retrieval. It offers a range of methods for interacting with user data, including:\n\n- Logging out users\n- Retrieving metadata by:\n  - Issuer\n  - Public address\n  - Token\n\nThis module is accessible via the `users` property, streamlining user management processes."}
{"code": "---\ndescription: Retrieves information about user by the supplied \"issuer\".\n---\n\n# getMetadataByIssuer\n\n### Arguments\n\n`getMetadataByIssuer(issuer)`\n\n* `issuer` \\(String\\): The user's [Decentralized ID](../../../../decentralized-id.md), which can be parsed using [`TokenModule.getIssuer`](../token-module/getissuer.md).\n\n### Returns\n\n`Promise<{ issuer, email, publicAddress }>`: an object containing the issuer, email and cryptographic [public address ](https://support.blockchain.com/hc/en-us/articles/360000951966-Public-and-private-keys)of the authenticated user.\n\n* `issuer` \\(String\\): The Decentralized ID of the user.  We recommend this value to be used as the user ID in your own tables.\n* `email` \\(String\\): Email address of the authenticated user.\n* `publicAddress`\\(String\\): The authenticated user's public address \\(a.k.a.: public key\\). Currently, this value is associated with the Ethereum blockchain.\n\n### Example\n\n```typescript\nconst { Magic } = require('@magic-sdk/admin');", "explanation": "**Summary**\n\nThe `getMetadataByIssuer` function retrieves user information based on a supplied \"issuer\" (Decentralized ID). It returns a promise containing the user's issuer, email, and public address.", "metadata": {"repo": "magiclabs/documentation", "file": "admin-sdk/node-js/sdk/users-module/getmetadatabyissuer.md", "chunk_number": 1, "total_chunks": 2}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "**getMetadataByIssuer Function Summary**\n\nRetrieves user information based on a supplied Decentralized ID (issuer). Returns a promise containing the user's:\n\n* Issuer (Decentralized ID)\n* Email\n* Public address\n\nFunctionality:\n\n* Extracts the issuer from the provided DID Token\n* Fetches the associated user metadata from a Magic admin instance using the extracted issuer."}
{"code": "const mAdmin = new Magic('SECRET_API_KEY');\n\n...\n\n// Grabs the issuer from a DID Token\nconst issuer = mAdmin.token.getIssuer(DIDToken);\n\n// Gets user metadata based on the given issuer\nconst metadata = await mAdmin.users.getMetadataByIssuer(issuer);\n```\n\n", "explanation": "This code block retrieves a user's metadata from a Magic admin instance using a DID Token. It does this by:\n\n1. Extracting the issuer from the DID Token.\n2. Fetching the user's metadata associated with the extracted issuer.", "metadata": {"repo": "magiclabs/documentation", "file": "admin-sdk/node-js/sdk/users-module/getmetadatabyissuer.md", "chunk_number": 2, "total_chunks": 2}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "**getMetadataByIssuer Function Summary**\n\nRetrieves user information based on a supplied Decentralized ID (issuer). Returns a promise containing the user's:\n\n* Issuer (Decentralized ID)\n* Email\n* Public address\n\nFunctionality:\n\n* Extracts the issuer from the provided DID Token\n* Fetches the associated user metadata from a Magic admin instance using the extracted issuer."}
{"code": "---\ndescription: Retrieves information about user by the supplied public address.\n---\n\n# getMetadataByPublicAddress\n\n### Arguments\n\n`getMetadataByPublicAddress(publicAddress)`\n\n* `publicAddress` \\(String\\): The user's Ethereum public address, which can be parsed using [`TokenModule.getPublicAddress`](../token-module/getpublicaddress.md).\n\n### Returns\n\n`Promise<{ issuer, email, publicAddress }>`: an object containing the issuer, email and cryptographic [public address ](https://support.blockchain.com/hc/en-us/articles/360000951966-Public-and-private-keys)of the authenticated user.\n\n* `issuer` \\(String\\): The Decentralized ID of the user.  We recommend this value to be used as the user ID in your own tables.\n* `email` \\(String\\): Email address of the authenticated user.\n* `publicAddress`\\(String\\): The authenticated user's public address \\(a.k.a.: public key\\). Currently, this value is associated with the Ethereum blockchain.\n\n### Example\n\n```typescript\nconst { Magic } = require('@magic-sdk/admin');", "explanation": "**Summary:** \nThe `getMetadataByPublicAddress` block retrieves user information (issuer, email, and public address) based on their Ethereum public address.", "metadata": {"repo": "magiclabs/documentation", "file": "admin-sdk/node-js/sdk/users-module/getmetadatabypublicaddress.md", "chunk_number": 1, "total_chunks": 2}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "The `admin-sdk/node-js/sdk/users-module/getmetadatabypublicaddress.md` file describes the `getMetadataByPublicAddress` function, which retrieves user metadata, including issuer, email, and public address, from the Magic Admin API using a user's Ethereum public address extracted from a provided DID token."}
{"code": "const mAdmin = new Magic('SECRET_API_KEY');\n\n...\n\n// Grabs the issuer from a DID Token\nconst userPublicAddress = mAdmin.token.getPublicAddress(DIDToken);\n\n// Gets user metadata based on the given issuer\nconst metadata = await mAdmin.users.getMetadataByPublicAddress(userPublicAddress);\n```\n\n", "explanation": "This block retrieves user metadata from Magic Admin API. It first extracts the user's public address from a provided DID token, then uses this address to fetch the user's metadata associated with it.", "metadata": {"repo": "magiclabs/documentation", "file": "admin-sdk/node-js/sdk/users-module/getmetadatabypublicaddress.md", "chunk_number": 2, "total_chunks": 2}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "The `admin-sdk/node-js/sdk/users-module/getmetadatabypublicaddress.md` file describes the `getMetadataByPublicAddress` function, which retrieves user metadata, including issuer, email, and public address, from the Magic Admin API using a user's Ethereum public address extracted from a provided DID token."}
{"code": "---\ndescription: Retrieves information about user by the supplied DID Token.\n---\n\n# getMetadataByToken\n\n### Arguments\n\n`getMetadataByToken(didToken)`\n\n* `didToken` \\(String\\): A valid [Decentralized ID Token](../../../../decentralized-id.md) generated client-side by a Magic user.\n\n### Returns\n\n`Promise<{ issuer, email, publicAddress }>`: an object containing the issuer, email and cryptographic [public address ](https://support.blockchain.com/hc/en-us/articles/360000951966-Public-and-private-keys)of the authenticated user.\n\n* `issuer` \\(String\\): The Decentralized ID of the user.  We recommend this value to be used as the user ID in your own tables.\n* `email` \\(String\\): Email address of the authenticated user.\n* `publicAddress`\\(String\\): The authenticated user's public address \\(a.k.a.: public key\\). Currently, this value is associated with the Ethereum blockchain.\n\n### Example\n\n```typescript\nconst { Magic } = require('@magic-sdk/admin');\nconst mAdmin = new Magic('SECRET_API_KEY');\n\n...\n", "explanation": "The `getMetadataByToken` function retrieves user information, including their Decentralized ID, email, and public address, using a supplied DID Token. It returns a promise with the user's metadata.", "metadata": {"repo": "magiclabs/documentation", "file": "admin-sdk/node-js/sdk/users-module/getmetadatabytoken.md", "chunk_number": 1, "total_chunks": 2}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "The `getMetadataByToken` function retrieves user information, including Decentralized ID, email, and public address, from a database or authentication service (`mAdmin`) using a provided DID Token, returning a promise with the user's metadata."}
{"code": "// Get a token however you wish! Perhaps this is attached\n// to `req.authorization`\nconst DIDToken = // ...\n\n// Retrieves user information by DID token\nconst metadata = await mAdmin.users.getMetadataByToken(DIDToken);\n```\n\n", "explanation": "**Retrieving User Information by DID Token**\n\nThis block retrieves a user's metadata from a database or authentication service (`mAdmin`) using a provided DID (Decentralized Identifier) token, typically obtained from a request's authorization header.", "metadata": {"repo": "magiclabs/documentation", "file": "admin-sdk/node-js/sdk/users-module/getmetadatabytoken.md", "chunk_number": 2, "total_chunks": 2}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "The `getMetadataByToken` function retrieves user information, including Decentralized ID, email, and public address, from a database or authentication service (`mAdmin`) using a provided DID Token, returning a promise with the user's metadata."}
{"code": "---\ndescription: >-\n  Logs a user out of all client-side Magic SDK sessions given the user's\n  Decentralized ID.\n---\n\n# logoutByIssuer\n\n### Arguments\n\n`logoutByIssuer(issuer)`\n\n* `issuer` \\(String\\): The user's [Decentralized ID](../../../../decentralized-id.md), which can be parsed using [`TokenModule.getIssuer`](../token-module/getissuer.md).\n\n### Returns\n\n`Promise<void>`\n\n### Example\n\n```typescript\nconst { Magic } = require('@magic-sdk/admin');\nconst mAdmin = new Magic('SECRET_API_KEY');\n\n...\n\n// Grabs user's Decentralized ID from the DID Token\nconst issuer = mAdmin.token.getIssuer(DIDToken);\n\n// logs the user out of all valid browser sessions.\nawait mAdmin.users.logoutByIssuer(issuer);\n```\n\n", "explanation": "**Purpose and Functionality:**\nLogs a user out of all client-side Magic SDK sessions using their Decentralized ID (issuer). It takes the issuer as an argument, returns a Promise of void, and logs the user out of all valid browser sessions.", "metadata": {"repo": "magiclabs/documentation", "file": "admin-sdk/node-js/sdk/users-module/logoutbyissuer.md", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "**Logout by Issuer Functionality**\n\nThe `logoutbyissuer` function logs a user out of all client-side Magic SDK sessions. It requires a Decentralized ID (issuer) as an argument and returns a Promise that resolves to void. This function allows for global session termination, effectively logging the user out of all valid browser sessions associated with the provided issuer."}
{"code": "---\ndescription: >-\n  Logs a user out of all client-side Magic SDK sessions given the user's public\n  address.\n---\n\n# logoutByPublicAddress\n\n### Arguments\n\n`logoutByPublicAddress(publicAddress)`\n\n* `publicAddress` \\(String\\): The user's [public address](https://support.blockchain.com/hc/en-us/articles/360000951966-Public-and-private-keys) to log out via the Magic API.\n\n### Returns\n\n`Promise<void>`\n\n### Example\n\n```typescript\nconst { Magic } = require('@magic-sdk/admin');\nconst mAdmin = new Magic('SECRET_API_KEY');\n\n...\n\n// Grabs user's public address by DIDToken\nconst userPublicAddress = mAdmin.token.getPublicAddress(DIDToken);\n\n// logs the user out of all valid browser sessions.\nawait mAdmin.users.logoutByPublicAddress(userPublicAddress);\n```\n\n", "explanation": "The `logoutByPublicAddress` function logs a user out of all valid Magic SDK sessions by their public address.", "metadata": {"repo": "magiclabs/documentation", "file": "admin-sdk/node-js/sdk/users-module/logoutbypublicaddress.md", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "## Logout by Public Address in Admin SDK\n\nThe `logoutByPublicAddress` function allows administrators to log a user out of all valid Magic SDK sessions associated with their public address. This function provides a way to remotely terminate user sessions, enhancing security and management capabilities within the application."}
{"code": "---\ndescription: >-\n  Logs a user out of all client-side Magic SDK sessions given the user's public\n  address.\n---\n\n# logoutByToken\n\n### Arguments\n\n`logoutByToken(didToken)`\n\n* `didToken` \\(String\\): A valid [Decentralized ID Token](../../../../decentralized-id.md) generated client-side by a Magic user.\n\n### Returns\n\n`Promise<void>`\n\n### Example\n\n```typescript\nconst { Magic } = require('@magic-sdk/admin');\nconst mAdmin = new Magic('SECRET_API_KEY');\n\n...\n\n// Get a token however you wish! Perhaps this is attached\n// to `req.authorization`\nconst DIDToken = // ...\n\n// logs the user out of all valid browser sessions.\nawait mAdmin.users.logoutByToken(DIDToken);\n```\n\n", "explanation": "**Summary:** \nThis block describes the `logoutByToken` function, which logs a user out of all client-side Magic SDK sessions using a provided Decentralized ID Token.", "metadata": {"repo": "magiclabs/documentation", "file": "admin-sdk/node-js/sdk/users-module/logoutbytoken.md", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "The 'admin-sdk/node-js/sdk/users-module/logoutbytoken.md' file provides documentation for the `logoutByToken` function. This function is used to log a user out of all client-side Magic SDK sessions by utilizing a provided Decentralized ID Token."}
{"code": "# Utils Module\n\nThe Utils Module and it's members are accessible on the Magic Admin SDK instance by the `utils` property.\n\n```typescript\nconst { Magic } = require('@magic-sdk/admin');\n\nconst mAdmin = new Magic();\n\nmAdmin.utils;\nmAdmin.utils.parseAuthorizationHeader;\n```\n\n", "explanation": "**Summary:**\nThe Utils Module provides additional functionality accessible via the `utils` property of the Magic Admin SDK instance. It allows users to utilize utility functions, such as `parseAuthorizationHeader`, for handling authorization headers.", "metadata": {"repo": "magiclabs/documentation", "file": "admin-sdk/node-js/sdk/utils-module/README.md", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "The 'admin-sdk/node-js/sdk/utils-module/README.md' file provides an overview of the Utils Module integrated with the Magic Admin SDK. This module introduces a `utils` property to the SDK instance, allowing users to access a range of utility functions to simplify tasks, such as handling authorization headers with `parseAuthorizationHeader`."}
{"code": "# parseAuthorizationHeader\n\n### Arguments\n\n`parseAuthorizationHeader(header)`\n\n* `header` \\(String\\): A request authorization header passed in front the client-side application that looks like `Bearer WyIweG...n0iXQ==`.\n\n### Returns\n\n`string`: The DID token embedded in the authorization header.\n\n{% hint style=\"info\" %}\nThis is only available to Admin SDK version **1.1.0** and above.\n{% endhint %}\n\n### Example\n\n```typescript\nconst { Magic } = require('@magic-sdk/admin');\nconst mAdmin = new Magic();\n\n...\n\n/* Gets the DID token from a login request */\napp.get('/login', async (req: any, res: any) => {\n  /*\n    Assumes DIDToken was passed in the Authorization header\n    in the standard `Bearer {token}` format.\n   */\n  const didToken = mAdmin.utils.parseAuthorizationHeader(req.headers.authorization);\n  /* You can now do stuff with the DID token */\n});\n```\n\n", "explanation": "**parseAuthorizationHeader Functionality**\n\nThe `parseAuthorizationHeader` function takes an authorization header string as input and extracts the embedded DID token. It returns the DID token as a string, allowing for further processing and verification.", "metadata": {"repo": "magiclabs/documentation", "file": "admin-sdk/node-js/sdk/utils-module/parseauthorizationheader.md", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "The 'admin-sdk/node-js/sdk/utils-module/parseauthorizationheader.md' file describes the `parseAuthorizationHeader` function, which extracts a DID token from a provided authorization header string, returning the token for further processing and verification."}
{"code": "# Python\n\n## \ud83d\ude80 Welcome to the Magic Admin Python SDK\n\n{% hint style=\"info\" %}\nWe will also be releasing `magic-admin-django` and `magic-admin-flask` to offer the direct `magic-admin` SDK integration for the Python Web frameworks.\n{% endhint %}\n\nThe Magic server-side Python SDK makes it easy to leverage[ Decentralized ID Tokens](../../decentralized-id.md) to authenticate your users for your app. This guide will cover some important topics for getting started with server-side APIs and to make the most of Magic's features.\n\n**\ud83d\udc49 Go to our** [**Getting Started**](python-get-started.md) **tutorial to begin your integration**\n\n**\ud83d\udc49 Visit the** [**API documentation**](python-sdk/) **to learn the methods you'll be using**\n\n**\ud83d\udc49 Go to** [**Examples**](python-examples/) **for an introduction to common patterns and use-cases**\n\n### Looking for a client-side API? Start with one of these:\n\n{% page-ref page=\"../../client-sdk/browser-js/\" %}\n\n{% page-ref page=\"../../client-sdk/react-native/\" %}\n\n", "explanation": "This block is a documentation introduction for the Magic Admin Python SDK, providing an overview and links to get started, API documentation, examples, and client-side API alternatives.", "metadata": {"repo": "magiclabs/documentation", "file": "admin-sdk/python/README.md", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "The 'admin-sdk/python/README.md' file provides a comprehensive introduction to the Magic Admin Python SDK. It offers an overview of the SDK, along with links to key resources such as 'Getting Started' guides, API documentation, example use cases, and client-side API alternatives."}
{"code": "# \ud83e\udde9 Examples\n\n", "explanation": "This is not a block of code, but a section header indicating that the content below will consist of examples, likely demonstrations or illustrations of a concept or functionality.", "metadata": {"repo": "magiclabs/documentation", "file": "admin-sdk/python/python-examples/README.md", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "# Admin SDK Examples\n\nThis file provides a collection of examples for using the Admin SDK in a Python environment. The examples are designed to illustrate various use cases and functionalities of the Admin SDK, allowing users to learn from and apply the concepts in their own applications.\n\nThe examples cover a range of topics, including but not limited to:\n\n* Service account setup and authentication\n* API calls and responses\n* Data manipulation and processing\n* Error handling and debugging\n\nEach example is a self-contained demonstration of a specific concept or functionality, providing users with a hands-on understanding of how to work with the Admin SDK in Python."}
{"code": "# User Login\n\nThis example shows how you can implement  user `login` on the server side using the [DID Token](../../../decentralized-id.md). \n\nThe example assumes:\n\n* You have already configured your client-side app with the [Brower.JS](../../../client-sdk/browser-js/)\n* You are already using a Python Web Framework \\(Django, Flask, Cherrypy, etc.\\)  Web framework's specific imports are omitted in favor of the simplicity of the example. Only the `magic_admin` related imports are shown below\n\n```python\nfrom magic_admin import Magic\n# A util provided by `magic_admin` to parse the auth header value.\nfrom magic_admin.utils.http import parse_authorization_header_value\nfrom magic_admin.error import DIDTokenError\nfrom magic_admin.error import RequestError\n\n\n@user.route('/v1/user/login', method=['POST'])\ndef user_login(self, email):\n    did_token = parse_authorization_header_value(\n        requests.headers.get('Authorization'),\n    )\n    if did_token is None:\n        raise BadRequest(", "explanation": "**Summary:**\nThis code block implements user login functionality on a server-side using DID Token. It verifies the user's authentication header value and raises an error if the DID token is invalid or missing. The code assumes a Python web framework and utilizes the `magic_admin` library.", "metadata": {"repo": "magiclabs/documentation", "file": "admin-sdk/python/python-examples/user-login.md", "chunk_number": 1, "total_chunks": 2}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "**User Login with DID Token in Python**\n\n### Overview\n\nThis code demonstrates a server-side user login functionality using DID Token authentication in Python. It leverages the `magic_admin` library to validate DID Tokens and authorize users.\n\n### Key Steps\n\n1. Verify the presence and validity of the DID Token in the authentication header.\n2. Validate the DID Token using the Magic API.\n3. Retrieve user information based on the token's issuer.\n4. Compare the user's email with the token's issuer to authorize the user.\n\n### Purpose\n\nThis code ensures secure user authentication by verifying DID Tokens and checking user authorization, providing a robust server-side login functionality in Python."}
{"code": "            'Authorization header is missing or header value is invalid',\n        )\n    \n    magic = Magic(api_secret_key='<YOUR_API_SECRET_KEY>')\n    \n    # Validate the did_token.\n    try:\n        magic.Token.validate(did_token)\n        issuer = magic.Token.get_issuer(did_token)\n    except DIDTokenError as e:\n        raise BadRequest('DID Token is invalid: {}'.format(e))\n    except RequestError as e:\n        # You can also remap this error to your own application error.\n        return HttpError(str(e))\n    \n    # Call your appilication logic to load the user.\n    user_info = logic.User.load_by(email=email)\n    \n    if user_info.issuer != issuer:\n        return UnAuthorizedError('UnAuthorized user login')\n    \n    return HttpResponse(user_info)\n```\n\n{% hint style=\"warning\" %}\nIt is important to always validate the DID Token before using.\n{% endhint %}\n\n", "explanation": "**Token Validation and User Authorization**\n\nThis block validates a DID Token and authorizes a user based on the token's issuer and the user's email. It:\n\n1. Checks for an Authorization header and a valid DID Token.\n2. Validates the DID Token using the Magic API.\n3. Retrieves the token's issuer and loads the corresponding user information.\n4. Verifies that the user's email matches the token's issuer.\n5. Returns the user information if authorized, or an error if validation fails or the user is not authorized.", "metadata": {"repo": "magiclabs/documentation", "file": "admin-sdk/python/python-examples/user-login.md", "chunk_number": 2, "total_chunks": 2}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "**User Login with DID Token in Python**\n\n### Overview\n\nThis code demonstrates a server-side user login functionality using DID Token authentication in Python. It leverages the `magic_admin` library to validate DID Tokens and authorize users.\n\n### Key Steps\n\n1. Verify the presence and validity of the DID Token in the authentication header.\n2. Validate the DID Token using the Magic API.\n3. Retrieve user information based on the token's issuer.\n4. Compare the user's email with the token's issuer to authorize the user.\n\n### Purpose\n\nThis code ensures secure user authentication by verifying DID Tokens and checking user authorization, providing a robust server-side login functionality in Python."}
{"code": "# User Logout\n\nThis example shows how you can implement  user `logout` on the server side using the [DID Token](../../../decentralized-id.md). \n\nThe example assumes:\n\n* You have already configured your client-side app with the [Brower.JS](../../../client-sdk/browser-js/)\n* You are already using a Python Web Framework \\(Django, Flask, Cherrypy, etc.\\)  Web framework's specific imports are omitted in favor of the simplicity of the example. Only the `magic_admin` related imports are shown below\n\n```python\nfrom magic_admin import Magic\n# A util provided by `magic_admin` to parse the auth header value.\nfrom magic_admin.utils.http import parse_authorization_header_value\nfrom magic_admin.error import DIDTokenError\nfrom magic_admin.error import RequestError\n\n\n@user.route('/v1/user/logout', method=['POST'])\ndef user_logout(self, email):\n    did_token = parse_authorization_header_value(\n        requests.headers.get('Authorization'),\n    )\n    if did_token is None:\n        raise BadRequest(", "explanation": "**User Logout Functionality**\n\nThis block of code implements a user logout feature on the server-side using a DID (Decentralized ID) token. The function checks for the presence of a DID token in the 'Authorization' header, and if it's missing, raises a 'BadRequest' error. The code assumes prior configuration of a client-side app with Brower.JS and a Python web framework.", "metadata": {"repo": "magiclabs/documentation", "file": "admin-sdk/python/python-examples/user-logout.md", "chunk_number": 1, "total_chunks": 3}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "The `user-logout.md` file in the `admin-sdk/python/python-examples` directory provides a Python example that implements a server-side user logout functionality using a Decentralized ID (DID) token. The code uses the Magic SDK to validate the DID token, verify the issuer, and log out the user. The process involves:\n\n1. Checking for the presence of a DID token in the 'Authorization' header and raising a `BadRequest` error if it's missing.\n2. Validating the DID token using the Magic SDK.\n3. Verifying the issuer matches with the user's issuer to prevent unauthorized access.\n4. Logging out the user using the Magic SDK with the verified issuer.\n\nUpon successful logout, the code returns the user information in an HTTP response. A key note is that DID token validation is crucial to prevent potential security issues."}
{"code": "            'Authorization header is missing or header value is invalid',\n        )\n    \n    magic = Magic(api_secret_key='<YOUR_API_SECRET_KEY>')\n    \n    # Validate the did_token.\n    try:\n        magic.Token.validate(did_token)\n        issuer = magic.Token.get_issuer(did_token)\n    except DIDTokenError as e:\n        raise BadRequest('DID Token is invalid: {}'.format(e))\n    except RequestError as e:\n        # You can also remap this error to your own application error.\n        return HttpError(str(e))\n    \n    # Call your appilication logic to load the user.\n    user_info = logic.User.load_by(email=email)\n    \n    if user_info.issuer != issuer:\n        return UnAuthorizedError('UnAuthorized user login')\n    \n    try:\n        magic.User.logout_by_issuer(issuer)\n    except RequestError as e:\n        # You can also remap this error to your own application error.\n        return HttpError(str(e))\n    \n    # Any other cleanup from your application. Expunge the cookies and etc.\n    \n    return HttpResponse(user_info)", "explanation": "**Summary**\n\nThis block of code handles a logout request based on a DID token validation using the Magic SDK. It performs the following steps:\n\n1. Validates the DID token using the Magic SDK.\n2. Retrieves the issuer from the validated DID token.\n3. Checks if the issuer matches with the user's issuer. If not, it returns an Unauthorized error.\n4. Calls the Magic SDK to log out the user using the issuer.\n5. Returns the user information in an HTTP response after successful logout.\n\n**Functionality**\n\n* DID token validation\n* Issuer verification\n* User logout using Magic SDK\n* Returns user information after successful logout", "metadata": {"repo": "magiclabs/documentation", "file": "admin-sdk/python/python-examples/user-logout.md", "chunk_number": 2, "total_chunks": 3}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "The `user-logout.md` file in the `admin-sdk/python/python-examples` directory provides a Python example that implements a server-side user logout functionality using a Decentralized ID (DID) token. The code uses the Magic SDK to validate the DID token, verify the issuer, and log out the user. The process involves:\n\n1. Checking for the presence of a DID token in the 'Authorization' header and raising a `BadRequest` error if it's missing.\n2. Validating the DID token using the Magic SDK.\n3. Verifying the issuer matches with the user's issuer to prevent unauthorized access.\n4. Logging out the user using the Magic SDK with the verified issuer.\n\nUpon successful logout, the code returns the user information in an HTTP response. A key note is that DID token validation is crucial to prevent potential security issues."}
{"code": "```\n\n{% hint style=\"warning\" %}\nIt is important to always validate the DID Token before using.\n{% endhint %}\n\n", "explanation": "This is a note, not code. It serves as a warning to validate a DID Token before using it to ensure its legitimacy and prevent potential issues.", "metadata": {"repo": "magiclabs/documentation", "file": "admin-sdk/python/python-examples/user-logout.md", "chunk_number": 3, "total_chunks": 3}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "The `user-logout.md` file in the `admin-sdk/python/python-examples` directory provides a Python example that implements a server-side user logout functionality using a Decentralized ID (DID) token. The code uses the Magic SDK to validate the DID token, verify the issuer, and log out the user. The process involves:\n\n1. Checking for the presence of a DID token in the 'Authorization' header and raising a `BadRequest` error if it's missing.\n2. Validating the DID token using the Magic SDK.\n3. Verifying the issuer matches with the user's issuer to prevent unauthorized access.\n4. Logging out the user using the Magic SDK with the verified issuer.\n\nUpon successful logout, the code returns the user information in an HTTP response. A key note is that DID token validation is crucial to prevent potential security issues."}
{"code": "# User Signup\n\nThis example shows how you can implement  user `signup` on the server side using the [DID Token](../../../decentralized-id.md). \n\nThe example assumes:\n\n* You have already configured your client-side app with the [Brower.JS](../../../client-sdk/browser-js/)\n* You are already using a Python Web Framework \\(Django, Flask, Cherrypy, etc.\\)  Web framework's specific imports are omitted in favor of the simplicity of the example. Only the `magic_admin` related imports are shown below\n\n```python\nfrom magic_admin import Magic\n# A util provided by `magic_admin` to parse the auth header value.\nfrom magic_admin.utils.http import parse_authorization_header_value\nfrom magic_admin.error import DIDTokenError\nfrom magic_admin.error import RequestError\n\n\n@user.route('/v1/user/signup', method=['POST'])\ndef user_signup(self, name, email):\n    did_token = parse_authorization_header_value(\n        requests.headers.get('Authorization'),\n    )\n    if did_token is None:\n        raise BadRequest(", "explanation": "**Summary**\n\nThis block is a Python function implementing user signup on the server side using the Magic DID Token. It parses the DID Token from the Authorization header and handles potential errors, but appears to be incomplete as it does not actually process the signup request.", "metadata": {"repo": "magiclabs/documentation", "file": "admin-sdk/python/python-examples/user-signup.md", "chunk_number": 1, "total_chunks": 2}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "The Python script in 'admin-sdk/python/python-examples/user-signup.md' handles user signup on the server-side using Magic DID Tokens. Here's a concise summary:\n\n1. The script extracts the DID Token from the Authorization header and checks for potential errors.\n2. It validates the DID Token using the Magic SDK, verifying the issuer and retrieving user metadata.\n3. Upon successful validation, it executes application logic to add the user.\n4. If any errors occur during validation or execution, it raises errors such as BadRequest, DIDTokenError, or UnauthorizedError.\n\nThe script ensures authorized access through email verification and handles errors, but appears to require completion to fully process the signup request."}
{"code": "            'Authorization header is missing or header value is invalid',\n        )\n    \n    magic = Magic(api_secret_key='<YOUR_API_SECRET_KEY>')\n    \n    # Validate the did_token.\n    try:\n        magic.Token.validate(did_token)\n        issuer = magic.Token.get_issuer(did_token)\n        user_meta = magic.User.get_metadata_by_issuer(issuer)\n    except DIDTokenError as e:\n        raise BadRequest('DID Token is invalid: {}'.format(e))\n    except RequestError as e:\n        # You can also remap this error to your own application error.\n        return HttpError(str(e))\n    \n    if user_meta.data['email'] != email:\n        return UnAuthorizedError('UnAuthorized user signup')\n    \n    # Call your application logic to save the user.\n    logic.User.add(name, email, issuer)\n    \n    return HttpResponse()\n```\n\nYou will only need to handle the DID Token. No more password handling \u2728\n\n{% hint style=\"warning\" %}\nIt is important to always validate the DID Token before using.\n{% endhint %}\n\n", "explanation": "**Summary**\n\nThis block validates a DID Token and verifies the user's email to ensure authorized access. It uses the Magic SDK to validate the token, retrieve the issuer, and obtain user metadata. If validation succeeds, it proceeds to execute application logic to add the user. If any errors occur during validation or execution, it raises corresponding errors (BadRequest, DIDTokenError, or UnauthorizedError).", "metadata": {"repo": "magiclabs/documentation", "file": "admin-sdk/python/python-examples/user-signup.md", "chunk_number": 2, "total_chunks": 2}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "The Python script in 'admin-sdk/python/python-examples/user-signup.md' handles user signup on the server-side using Magic DID Tokens. Here's a concise summary:\n\n1. The script extracts the DID Token from the Authorization header and checks for potential errors.\n2. It validates the DID Token using the Magic SDK, verifying the issuer and retrieving user metadata.\n3. Upon successful validation, it executes application logic to add the user.\n4. If any errors occur during validation or execution, it raises errors such as BadRequest, DIDTokenError, or UnauthorizedError.\n\nThe script ensures authorized access through email verification and handles errors, but appears to require completion to fully process the signup request."}
{"code": "# \ud83d\ude80 Get Started\n\n## \ud83d\udce6 Installation\n\n{% tabs %}\n{% tab title=\"PIP\" %}\n```text\npip install magic-admin\n```\n{% endtab %}\n\n{% tab title=\"Conda\" %}\n```text\nconda install magic-admin\n```\n{% endtab %}\n{% endtabs %}\n\n{% hint style=\"info\" %}\nCurrent SDK is built with Python3.6. Testing for Python3.6+ will be added soon. If you are interested in using the SDK with the earlier versions of Python \\(ex: 2.7+\\), please create a ticket in this [repo](https://github.com/fortmatic/magic-admin-python) and let us know :\\)\n{% endhint %}\n\n## \u26a1\ufe0f Creating an SDK Instance\n\n{% tabs %}\n{% tab title=\"Instantiation\" %}\n```python\nfrom magic_admin import Magic\n\n# Pass your API secret key directly to the Magic.\nmagic = Magic(api_secret_key='<YOUR_API_SECRET_KEY>')\n\n# Or add an environment variable, `MAGIC_API_SECRET_KEY`\nmagic = Magic()\n```\n{% endtab %}\n{% endtabs %}\n\n\n\n", "explanation": "**Purpose:** This block provides instructions on installing and setting up the Magic Admin SDK.\n\n**Functionality:** The block contains:\n\n1. Installation instructions using PIP and Conda package managers.\n2. Information on SDK compatibility with different Python versions.\n3. Example code for creating an SDK instance by passing an API secret key directly or using an environment variable.", "metadata": {"repo": "magiclabs/documentation", "file": "admin-sdk/python/python-get-started.md", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "**Getting Started with Magic Admin SDK in Python**\n\nThis guide provides a step-by-step setup for the Magic Admin SDK in Python. It includes installation instructions using PIP and Conda package managers, compatibility information for various Python versions, and example code snippets for initializing the SDK with an API secret key."}
{"code": "# \ud83d\uddc4 SDK\n\n", "explanation": "This block appears to be a header or title indicating the start of the Software Development Kit (SDK) section.", "metadata": {"repo": "magiclabs/documentation", "file": "admin-sdk/python/python-sdk/README.md", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "\"Admin SDK Python Client Library\n\nOverview\n--------\n\nThis library provides a Python client for the Admin SDK, allowing developers to access and manage various Google services programmatically.\n\nIt looks like there is not enough information provided to create an accurate and detailed summary of the README file. However, here is a more complete example:\n\n\"Admin SDK Python Client Library\"\n\nAdmin SDK Python Client Library\n=============================\n\nThe Admin SDK Python Client Library is a set of Python classes that provide a convenient interface to the Google Admin SDK. This API is used to manage enterprise's Google services programmatically. \n\n### Installing the client library \n\n pip install google-auth google-auth-oauthlib google-auth-httplib2 google-api-python-client google-api-core google-admin-sdk\n\nNote (Please keep in mind that this response may not be complete without the inclusion of potentially relevant blocks: Prerequisites, API Documentation and Examples).\""}
{"code": "# Constructor\n\n### Magic\n\nThe constructor allows you to specify your own API secret key and HTTP request strategy when your application is interacting with the Magic API.\n\n```python\nMagic(api_secret_key=None, retries=3, timeout=10, backoff_factor=0.02)\n```\n\n#### Arguments:\n\n* `api_secret_key`\\(str\\): Your API **secret** Key retrieved from the [Magic Dashboard](https://dashboard.magic.link).\n* `retries`\\(num\\): Total number of retries to allow.\n* `timeout`\\(num\\): A period of time the request is going to wait for a response.\n* `backoff_factor`\\(num\\): A backoff factor to apply between retry attempts.\n\n#### Returns:\n\n* A `Magic` object  that provides access to all the supported [resources](python-resources/).\n\n#### Examples:\n\n```python\nfrom magic_admin import Magic\n\nmagic = Magic(\n    api_secret_key='<YOUR_API_SECRET_KEY>'\n    retries=5,\n    timeout=5,\n    backoff_factor=0.01,\n)\n```\n\n", "explanation": "**Summary:** \nThe `Magic` constructor creates an object for interacting with the Magic API, allowing customization of API secret key, HTTP request retries, timeouts, and backoff factors for error handling.", "metadata": {"repo": "magiclabs/documentation", "file": "admin-sdk/python/python-sdk/python-constructor.md", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "The `python-constructor.md` file describes the `Magic` constructor in the Python Admin SDK. This constructor enables users to create a customizable interface for interacting with the Magic API by specifying parameters such as the API secret key, HTTP request retries, timeouts, and backoff factors for error handling."}
{"code": "# Resources\n\n{% page-ref page=\"python-token/\" %}\n\n{% page-ref page=\"python-user/\" %}\n\n\n\n", "explanation": "This block of code is a markdown snippet that links to two external resources using the `page-ref` syntax. It serves as a quick navigation or referral system to two specific pages, \"python-token\" and \"python-user\".", "metadata": {"repo": "magiclabs/documentation", "file": "admin-sdk/python/python-sdk/python-resources/README.md", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "# README for Admin SDK Python Resources\n\n## Table of Contents\n- [Overview](#overview)\n- [Getting Started](#getting-started)\n- [Important Pages](#important-pages)\n\n## Overview\nThis Python SDK provides resources and tools for interacting with the Admin SDK. It offers various functionalities such as authentication and user management.\n\n## Getting Started\nTo begin using the Python SDK, ensure you have the necessary dependencies installed. Familiarize yourself with the available resources and start building your application.\n\n## Important Pages\n- [Token Management](python-token): Explore how to handle tokens for secure authentication and authorization.\n- [User Management](python-user): Learn how to efficiently manage users within your application.\n\nNavigate to these pages for more information on utilizing the Admin SDK Python Resources."}
{"code": "---\ndescription: This resource provides methods to interact with the DID Token.\n---\n\n# Token\n\nThe token resource and its methods are accessible on the Magic instance by the `Token` attribute. \n\n{% hint style=\"info\" %}\nThe token resource does not make any API calls to the Magic server.\n{% endhint %}\n\n```python\nfrom magic_admin import Magic\n\nmagic = Magic(api_secret_key='sk_live_...')\n\nmagic.Token\nmagic.Token.get_issuer\nmagic.Token.get_public_address\nmagic.Token.decode\nmagic.Token.validate\n```\n\n## Methods\n\n{% page-ref page=\"get\\_issuer.md\" %}\n\n{% page-ref page=\"get\\_public\\_address.md\" %}\n\n{% page-ref page=\"decode.md\" %}\n\n{% page-ref page=\"validate.md\" %}\n\n", "explanation": "**Purpose and Functionality:**\nThis block describes the 'Token' resource of the Magic instance, which provides methods to interact with the DID Token. The methods include getting the issuer, getting the public address, decoding, and validating the token, without making any API calls to the Magic server.", "metadata": {"repo": "magiclabs/documentation", "file": "admin-sdk/python/python-sdk/python-resources/python-token/README.md", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "The 'Token' resource in the Magic instance SDK allows users to interact with DID Tokens directly, providing methods to retrieve the issuer, public address, decode, and validate tokens without relying on Magic server API calls."}
{"code": "# decode\n\nDecodes a [DID Token](../../../../../decentralized-id.md) from a Base64 string into a tuple of its individual components: `proof` and `claim`. This method allows you decode the DID Token and inspect the token. You can apply your own rules and validations on top of the current [Token.validate](validate.md) method. \n\n```text\nToken.decode(did_token)\n```\n\n### Arguments:\n\n* `did_token` \\(str\\): A [DID Token](../../../../../decentralized-id.md) generated by a Magic user on the client-side.\n\n### Raises:\n\n* `DIDTokenError` if the given DID Token is malformed.\n\n### Returns:\n\n* `proof` \\(str\\): A digital signature that proves the validity of the given `claim`\n* `claim` \\(dict\\): Unsigned data the user asserts. This should equal the `proof` after Elliptic Curve recovery. See [Decentralized ID Token Specification](../../../../../decentralized-id.md#decentralized-id-token-specification) for fields inside the `claim`.\n\n### Examples:\n\n```python\nfrom magic_admin import Magic", "explanation": "**Token Decoding Functionality**\n\nThis function, `Token.decode(did_token)`, decodes a DID Token from a Base64 string into its individual components, `proof` and `claim`, allowing for inspection and custom validation of the token.", "metadata": {"repo": "magiclabs/documentation", "file": "admin-sdk/python/python-sdk/python-resources/python-token/decode.md", "chunk_number": 1, "total_chunks": 3}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "The `decode.md` file in the `python-token` directory of the Python Resources SDK for Admin provides a token decoding functionality. This allows for the decoding of a DID Token from a Base64 string into its individual components (`proof` and `claim`) for inspection and custom validation.\n\nThe file is part of an authentication process, where a validation of a DID Token is performed on an API request to `/v1/user/info`. It uses the `magic_admin` library to validate the token authenticity using a provided API secret key.\n\nHere's a high-level summary of the process:\n\n1. Extract the DID Token from the `Authorization` header.\n2. Validate and decode the token using the `magic_admin` library.\n3. Check DID token claims and ensure they match expected values.\n4. If valid, retrieve user information using application logic and return it as an HTTP response."}
{"code": "# A util provided by `magic_admin` to parse the auth header value.\nfrom magic_admin.utils.http import parse_authorization_header_value\nfrom magic_admin.error import DIDTokenError\n\n\n# An exmaple of user info view.\n@user.route('/v1/user/info', method=['GET'])\ndef user_info(self):\n    \"\"\"An exmaple of user info view that uses DID Token to ensure\n    authenticity of a request before returning user info.\n    \"\"\"\n    # Parse the `Authorization` header value for did_token.\n    did_token = parse_authorization_header_value(\n        requests.headers.get('Authorization'),\n    )\n    if did_token is None:\n        raise BadRequest(\n            'Authorization header is missing or header value is invalid',\n        )\n    \n    magic = Magic(api_secret_key='<YOUR_API_SECRET_KEY>')\n\n    # Validate and decode the token.\n    try:\n        magic.Token.validate(did_token)\n        proof, claim = magic.Token.decode(did_token)\n    except DIDTokenError as e:\n        raise BadRequest('DID Token is malformed: {}'.format(e))\n    ", "explanation": "**Block Summary**\n\nThis block of code handles an API request to `/v1/user/info` and validates the request authenticity using a DID (Decentralized Identifier) Token.\n\n**Functionality**\n\n1. Parses the `Authorization` header value to extract the DID Token.\n2. Validates and decodes the DID Token using the `magic_admin` library and a provided API secret key.\n3. Raises an error if the token is missing, malformed, or invalid.\n4. Only returns user information if the token is valid.", "metadata": {"repo": "magiclabs/documentation", "file": "admin-sdk/python/python-sdk/python-resources/python-token/decode.md", "chunk_number": 2, "total_chunks": 3}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "The `decode.md` file in the `python-token` directory of the Python Resources SDK for Admin provides a token decoding functionality. This allows for the decoding of a DID Token from a Base64 string into its individual components (`proof` and `claim`) for inspection and custom validation.\n\nThe file is part of an authentication process, where a validation of a DID Token is performed on an API request to `/v1/user/info`. It uses the `magic_admin` library to validate the token authenticity using a provided API secret key.\n\nHere's a high-level summary of the process:\n\n1. Extract the DID Token from the `Authorization` header.\n2. Validate and decode the token using the `magic_admin` library.\n3. Check DID token claims and ensure they match expected values.\n4. If valid, retrieve user information using application logic and return it as an HTTP response."}
{"code": "    # You can perform your own validations on the claim fields.\n    if claim['iss'] != 'troll_goat' and claim['aud'] != 'app':\n        raise BadRequest()\n    \n    # Use your application logic to load the user info.\n    user_info = logic.User.load_by(issuer=issuer)\n    \n    return HttpResponse(user_info)\n```\n\n{% hint style=\"warning\" %}\nIt is important to always validate the DID Token before using.\n{% endhint %}\n\n", "explanation": "**Validation and User Info Retrieval Block**\n\nThis block checks Decentralized Identifier (DID) token claims ('iss' and 'aud') and validates them against expected values. Upon successful validation, it loads user information using application logic and returns the user info as an HTTP response.", "metadata": {"repo": "magiclabs/documentation", "file": "admin-sdk/python/python-sdk/python-resources/python-token/decode.md", "chunk_number": 3, "total_chunks": 3}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "The `decode.md` file in the `python-token` directory of the Python Resources SDK for Admin provides a token decoding functionality. This allows for the decoding of a DID Token from a Base64 string into its individual components (`proof` and `claim`) for inspection and custom validation.\n\nThe file is part of an authentication process, where a validation of a DID Token is performed on an API request to `/v1/user/info`. It uses the `magic_admin` library to validate the token authenticity using a provided API secret key.\n\nHere's a high-level summary of the process:\n\n1. Extract the DID Token from the `Authorization` header.\n2. Validate and decode the token using the `magic_admin` library.\n3. Check DID token claims and ensure they match expected values.\n4. If valid, retrieve user information using application logic and return it as an HTTP response."}
{"code": "# get\\_issuer\n\nExtracts the `iss` from the [DID Token](../../../../../decentralized-id.md).\n\n```python\nToken.get_issuer(did_token)\n```\n\n### Arguments:\n\n* `did_token` \\(str\\): A [DID Token](../../../../../decentralized-id.md) generated by a Magic User on the client-side.\n\n### Raises:\n\n* `DIDTokenError` if the given DID Token is malformed.\n\n### Returns:\n\n* A Decentralized ID \\(`iss`\\) of the Magic user who generated the DID Token.\n\n### Example:\n\nThe example below is assuming you are already using a Python Web Framework \\(Django, Flask, Cherrypy, etc.\\)  Web framework's specific imports are omitted in favor of the simplicity of the example. Only the `magic_admin` related imports are shown below.\n\n```python\nfrom magic_admin import Magic\n# A util provided by `magic_admin` to parse the auth header value.\nfrom magic_admin.utils.http import parse_authorization_header_value\nfrom magic_admin.error import DIDTokenError\n\n\n@user.route('/v1/user/info', method=['GET'])\ndef user_info(self):", "explanation": "The `get_issuer` function extracts the issuer (`iss`) from a provided DID (Decentralized ID) Token. It takes a DID Token as input, checks for validity, and returns the Decentralized ID of the token's issuer, raising a `DIDTokenError` if the token is malformed.", "metadata": {"repo": "magiclabs/documentation", "file": "admin-sdk/python/python-sdk/python-resources/python-token/get_issuer.md", "chunk_number": 1, "total_chunks": 2}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "# get_issuer Function Summary\n\nThe `get_issuer` function authenticates a request using a provided DID (Decentralized ID) Token. It extracts the token's issuer, validates the token, and returns the user information associated with the issuer if the token is valid.\n\n**Functionality Overview:**\n\n* Parses the DID Token from the `Authorization` header\n* Validates the DID Token using an API secret key\n* Extracts and returns the token issuer\n* Returns associated user information if the token is valid, or raises a `DIDTokenError` if malformed."}
{"code": "    \"\"\"An exmaple of user info view that uses DID Token to ensure\n    authenticity of a request before returning user info.\n    \"\"\"\n    did_token = parse_authorization_header_value(\n        requests.headers.get('Authorization'),\n    )\n    if did_token is None:\n        raise BadRequest(\n            'Authorization header is missing or header value is invalid',\n        )\n    \n    magic = Magic(api_secret_key='<YOUR_API_SECRET_KEY>')\n    \n    # Validate the did_token\n    try:\n        magic.Token.validate(did_token)\n        issuer = magic.Token.get_issuer(did_token)\n    except DIDTokenError as e:\n        raise BadRequest('DID Token is invalid: {}'.format(e))\n    \n    # Use your application logic to load the user info.\n    user_info = logic.User.load_by(issuer=issuer)\n    \n    return HttpResponse(user_info)\n    \n```\n\n{% hint style=\"warning\" %}\nIt is important to always validate the DID Token before using.\n{% endhint %}\n\n", "explanation": "**Purpose:** Authenticates a request using a DID Token and returns user information if valid.\n\n**Functionality:**\n\n1. Parses the `Authorization` header for a DID Token.\n2. Validates the DID Token using an API secret key.\n3. Extracts the token issuer.\n4. Uses the issuer to load and return the associated user information if the token is valid.", "metadata": {"repo": "magiclabs/documentation", "file": "admin-sdk/python/python-sdk/python-resources/python-token/get_issuer.md", "chunk_number": 2, "total_chunks": 2}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "# get_issuer Function Summary\n\nThe `get_issuer` function authenticates a request using a provided DID (Decentralized ID) Token. It extracts the token's issuer, validates the token, and returns the user information associated with the issuer if the token is valid.\n\n**Functionality Overview:**\n\n* Parses the DID Token from the `Authorization` header\n* Validates the DID Token using an API secret key\n* Extracts and returns the token issuer\n* Returns associated user information if the token is valid, or raises a `DIDTokenError` if malformed."}
{"code": "# get\\_public\\_address\n\nGets the cryptographic [public address](https://support.blockchain.com/hc/en-us/articles/360000951966-Public-and-private-keys) of the Magic User who generated the supplied [DID Token](../../../../../decentralized-id.md).\n\n```python\nToken.get_public_address(did_token)\n```\n\n### Arguments:\n\n* `did_token` \\(str\\): A [DID Token](../../../../../decentralized-id.md) generated by a Magic user on the client-side.\n\n### Raises:\n\n* `DIDTokenError` if the given DID Token is malformed.\n\n### Returns:\n\n* A [public address](https://support.blockchain.com/hc/en-us/articles/360000951966-Public-and-private-keys) of the Magic User who generated the DID Token.\n\n### Example:\n\nThe example below is assuming you are already using a Python Web Framework \\(Django, Flask, Cherrypy, etc.\\)  Web framework's specific imports are omitted in favor of the simplicity of the example. Only the `magic_admin` related imports are shown below.\n\n```python\nfrom magic_admin import Magic", "explanation": "This code block gets the public address of a Magic User who generated a DID Token. It takes a DID Token as an argument and returns the user's public address if valid, otherwise raises a DIDTokenError if the token is malformed.", "metadata": {"repo": "magiclabs/documentation", "file": "admin-sdk/python/python-sdk/python-resources/python-token/get_public_address.md", "chunk_number": 1, "total_chunks": 3}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "**Admin SDK User Info Endpoint Authentication and Data Retrieval**\n\nThe `get_public_address.md` file in the Python SDK handles user authentication and information retrieval for the `/v1/user/info` endpoint. It takes a DID Token, verifies its authenticity using the Magic API, and extracts the user's public address. Upon successful authentication, the code fetches user information from a database using the public address and returns it as an HTTP response. This ensures that only authorized requests can access user data, enhancing endpoint security."}
{"code": "# A util provided by `magic_admin` to parse the auth header value.\nfrom magic_admin.utils.http import parse_authorization_header_value\nfrom magic_admin.error import DIDTokenError\n\n\n@user.route('/v1/user/info', method=['GET'])\ndef user_info(self):\n    \"\"\"An exmaple of user info view that uses DID Token to ensure\n    authenticity of a request before returning user info.\n    \"\"\"\n    did_token = parse_authorization_header_value(\n        requests.headers.get('Authorization'),\n    )\n    if did_token is None:\n        raise BadRequest(\n            'Authorization header is missing or header value is invalid',\n        )\n    \n    magic = Magic(api_secret_key='<YOUR_API_SECRET_KEY>')\n    \n    # Validate the did_token.\n    try:\n        magic.Token.validate(did_token)\n        public_address = magic.Token.get_public_address(did_token)\n    except DIDTokenError as e:\n        raise BadRequest('DID Token is invalid: {}'.format(e))\n    \n    # Use your application logic to load the user info.", "explanation": "**User Info Endpoint Authentication**\n\nThis block verifies the authenticity of incoming requests to the `/v1/user/info` endpoint using a DID Token. It:\n\n1. Parses the `Authorization` header value.\n2. Validates the DID Token using the Magic API.\n3. Retrieves the user's public address from the validated token.\n4. Proceeds to load user information if authentication is successful.\n\n**Purpose:** Ensures authentic requests before providing user information.", "metadata": {"repo": "magiclabs/documentation", "file": "admin-sdk/python/python-sdk/python-resources/python-token/get_public_address.md", "chunk_number": 2, "total_chunks": 3}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "**Admin SDK User Info Endpoint Authentication and Data Retrieval**\n\nThe `get_public_address.md` file in the Python SDK handles user authentication and information retrieval for the `/v1/user/info` endpoint. It takes a DID Token, verifies its authenticity using the Magic API, and extracts the user's public address. Upon successful authentication, the code fetches user information from a database using the public address and returns it as an HTTP response. This ensures that only authorized requests can access user data, enhancing endpoint security."}
{"code": "    user_info = logic.User.load_by(public_address=public_address)\n    \n    return HttpResponse(user_info)\n```\n\n{% hint style=\"warning\" %}\nIt is important to always validate the DID Token before using.\n{% endhint %}\n\n", "explanation": "**Functionality Summary:**\n\nThis code block retrieves user information from a database using a `public_address` and returns the data as an HTTP response. A hint is provided, cautioning about the importance of validating the DID Token before processing.", "metadata": {"repo": "magiclabs/documentation", "file": "admin-sdk/python/python-sdk/python-resources/python-token/get_public_address.md", "chunk_number": 3, "total_chunks": 3}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "**Admin SDK User Info Endpoint Authentication and Data Retrieval**\n\nThe `get_public_address.md` file in the Python SDK handles user authentication and information retrieval for the `/v1/user/info` endpoint. It takes a DID Token, verifies its authenticity using the Magic API, and extracts the user's public address. Upon successful authentication, the code fetches user information from a database using the public address and returns it as an HTTP response. This ensures that only authorized requests can access user data, enhancing endpoint security."}
{"code": "# validate\n\nValidates a [DID token](../../../../../decentralized-id.md).\n\n```text\nmagic.Token.validate(did_token)\n```\n\n### Arguments:\n\n* `did_token` \\(str\\): A [DID Token](../../../../../decentralized-id.md) generated by a Magic user on the client-side.\n\n### Raises:\n\n* `DIDTokenError` if the given DID Token is invalid or malformed.\n\n### Returns:\n\n* None.\n\n### Example:\n\nThe example below is assuming you are already using a Python Web Framework \\(Django, Flask, Cherrypy, etc.\\)  Web framework's specific imports are omitted in favor of the simplicity of the example. Only the `magic_admin` related imports are shown below.\n\n```python\nfrom magic_admin import Magic\n# A util provided by `magic_admin` to parse the auth header value.\nfrom magic_admin.utils.http import parse_authorization_header_value\nfrom magic_admin.error import DIDTokenError\n\n\n# An exmaple of user info view.\n@user.route('/v1/user/info', method=['GET'])\ndef user_info(self):\n    \"\"\"An exmaple of user info view that uses DID Token to ensure", "explanation": "**Purpose and Functionality:**\n\nThis block validates a user-generated DID (Decentralized ID) token using the `magic.Token.validate()` method. It checks if the provided token is valid and raises a `DIDTokenError` if the token is invalid or malformed. If the token is valid, the method returns `None`.", "metadata": {"repo": "magiclabs/documentation", "file": "admin-sdk/python/python-sdk/python-resources/python-token/validate.md", "chunk_number": 1, "total_chunks": 2}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "The 'validate.md' file within the 'admin-sdk' python package contains code blocks responsible for validating user-generated Decentralized ID (DID) tokens. Key functionalities include:\n\n1. Token Validation: Verifies the validity of a provided DID token using `magic.Token.validate()`. \n2. Request Authentication and UserInfo Retrieval: Authenticate requests by parsing and validating the `Authorization` header's DID token, then retrieving user information based on the token's issuer.\n\nIn summary, the 'validate.md' file provides essential functions for authenticating and verifying DID tokens, as well as extracting relevant user information."}
{"code": "    authenticity of a request before returning user info.\n    \"\"\"\n    # Parse the `Authorization` header value for did_token.\n    did_token = parse_authorization_header_value(\n        requests.headers.get('Authorization'),\n    )\n    if did_token is None:\n        raise BadRequest(\n            'Authorization header is missing or header value is invalid',\n        )\n    \n    magic = Magic(api_secret_key='<YOUR_API_SECRET_KEY>')\n    \n    # Validate the did_token\n    try:\n        magic.Token.validate(did_token)\n        issuer = magic.Token.get_issuer(did_token)\n    except DIDTokenError as e:\n        raise BadRequest('DID Token is invalid: {}'.format(e))\n    \n    # Use your application logic to load the user info.\n    user_info = logic.User.load_by(issuer=issuer)\n    \n    return HttpResponse(user_info)\n```\n\n{% hint style=\"warning\" %}\nIt is important to always validate the DID Token before using.\n{% endhint %}\n\n", "explanation": "**Request Authentication and UserInfo Retrieval**\n\nThis block verifies the authenticity of a request by parsing and validating the `Authorization` header's DID token. If valid, it extracts the issuer and uses it to load and return the corresponding user information.", "metadata": {"repo": "magiclabs/documentation", "file": "admin-sdk/python/python-sdk/python-resources/python-token/validate.md", "chunk_number": 2, "total_chunks": 2}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "The 'validate.md' file within the 'admin-sdk' python package contains code blocks responsible for validating user-generated Decentralized ID (DID) tokens. Key functionalities include:\n\n1. Token Validation: Verifies the validity of a provided DID token using `magic.Token.validate()`. \n2. Request Authentication and UserInfo Retrieval: Authenticate requests by parsing and validating the `Authorization` header's DID token, then retrieving user information based on the token's issuer.\n\nIn summary, the 'validate.md' file provides essential functions for authenticating and verifying DID tokens, as well as extracting relevant user information."}
{"code": "---\ndescription: This resource provides methods to interact with the User.\n---\n\n# User\n\nThe user resource and its methods are accessible on the Magic instance by the `User` attribute.\n\n```python\nfrom magic_admin import Magic\n\nmagic = Magic(api_secret_key='sk_live_...')\n\nmagic.User\nmagic.User.get_metadata_by_issuer\nmagic.User.get_metadata_by_public_address\nmagic.User.get_metadata_by_token\nmagic.User.logout_by_issuer\nmagic.User.logout_by_public_address\nmagic.User.logout_by_token\n```\n\n{% page-ref page=\"get\\_metadata\\_by\\_issuer.md\" %}\n\n{% page-ref page=\"get\\_metadata\\_by\\_public\\_address.md\" %}\n\n{% page-ref page=\"get\\_metadata\\_by\\_token.md\" %}\n\n{% page-ref page=\"logout\\_by\\_issuer.md\" %}\n\n{% page-ref page=\"logout\\_by\\_public\\_address.md\" %}\n\n{% page-ref page=\"logout\\_by\\_token.md\" %}\n\n", "explanation": "**User Resource:**\n\nThe `User` resource provides methods for interacting with users in the Magic instance. It offers functionality for retrieving user metadata and logging out users based on various identifiers (issuer, public address, and token).", "metadata": {"repo": "magiclabs/documentation", "file": "admin-sdk/python/python-sdk/python-resources/python-user/README.md", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "The 'admin-sdk/python/python-sdk/python-resources/python-user/README.md' file provides documentation for the `User` resource in the Magic instance. It outlines methods for user interaction, including retrieval of user metadata and logout functionality based on issuer, public address, or token identifiers."}
{"code": "# get\\_metadata\\_by\\_issuer\n\nRetrieves information about the user by the supplied `iss` from the [DID Token](../../../../../decentralized-id.md). This method is useful if you store the `iss` with your user data, **which is recommended**.\n\n```text\nUser.get_metadata_by_issuer(issuer)\n```\n\n### Arguments:\n\n* issuer \\(str\\): The user's Decentralized ID, which can be parsed using [Token.get\\_issuer](../python-token/get_issuer.md)\n\n### Raises:\n\n* `RateLimitingError`: If you have sent too many requests within a given period of time.\n* `BadRequestError`: If the supplied parameters are invalid.\n* `AuthenticationError`: If your API secret key cannot be authenticated with Magic API server.\n* `ForbiddenError`:  If your API secret key is not authorized to access the resources.\n* `APIError`: For any other API error.\n* `APIConnectionError`: If your server cannot communicate with the Magic server. Normally this is a network communication error.\n\n{% hint style=\"info\" %}", "explanation": "This block retrieves user metadata using the user's Decentralized ID (issuer) through the `get_metadata_by_issuer` method. It takes an 'issuer' string as an argument and returns user information, throwing various exceptions for errors.", "metadata": {"repo": "magiclabs/documentation", "file": "admin-sdk/python/python-sdk/python-resources/python-user/get_metadata_by_issuer.md", "chunk_number": 1, "total_chunks": 3}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "**admin-sdk/python/python-sdk/python-resources/python-user/get_metadata_by_issuer.md**\n\nThis file provides functionality to retrieve and update user metadata through the `get_metadata_by_issuer` method. It takes an issuer string as input, fetches user metadata from Magic using the stored issuer identifier, and updates the user's email in the database if a mismatch is found. The method returns user information and throws exceptions for errors. Key features include:\n\n* Retrieve user data by ID\n* Fetch user metadata from Magic using an issuer identifier\n* Update the user's email if it differs from the one retrieved from Magic"}
{"code": "See [Error Handling](../../python-response-and-error-handling.md) for more examples.\n{% endhint %}\n\n### Returns:\n\n* A [`MagicResponse`](../../python-response-and-error-handling.md#magicresponse): The `data` field contains all of the user meta information.\n  * `issuer` \\(str\\): The user's Decentralized ID.\n  * `email` \\(str\\): The user's email address.\n  * `public_address` \\(str\\): The authenticated user's public address \\(a.k.a.: public key\\). Currently, this value is associated with the Ethereum blockchain.\n\n### Example:\n\nThe example below is assuming you are already using a Python Web Framework \\(Django, Flask, Cherrypy, etc.\\)  Web framework's specific imports are omitted in favor of the simplicity of the example. Only the `magic_admin` related imports are shown below.\n\n```python\nfrom magic_admin import Magic\nfrom magic_admin.error import DIDTokenError\nfrom magic_admin.error import RequestError\n\n\n@user.route('/v1/user/update', method=['POST'])\ndef update_user_info(self, user_id):", "explanation": "This block is for a user endpoint that returns and potentially updates a user's meta information.", "metadata": {"repo": "magiclabs/documentation", "file": "admin-sdk/python/python-sdk/python-resources/python-user/get_metadata_by_issuer.md", "chunk_number": 2, "total_chunks": 3}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "**admin-sdk/python/python-sdk/python-resources/python-user/get_metadata_by_issuer.md**\n\nThis file provides functionality to retrieve and update user metadata through the `get_metadata_by_issuer` method. It takes an issuer string as input, fetches user metadata from Magic using the stored issuer identifier, and updates the user's email in the database if a mismatch is found. The method returns user information and throws exceptions for errors. Key features include:\n\n* Retrieve user data by ID\n* Fetch user metadata from Magic using an issuer identifier\n* Update the user's email if it differs from the one retrieved from Magic"}
{"code": "    \"\"\"An exmaple of user update view that uses `iss` stored in the\n    databoase to fresh user metadata.\n    \"\"\"\n    magic = Magic(api_secret_key='<YOUR_API_SECRET_KEY>')\n    \n    # User your application logic to get the use data.\n    user_info = logic.User.get_by_id(user_id)\n    \n    try:\n        magic_response = magic.User.get_metadata_by_issuer(\n            user_info.issuer,\n        )\n    except RequestError as e:\n        # You can also remap this error to your own application error.\n        return HttpError(str(e))\n    \n    if user_info.email != magic_response.data['email']:\n        # Use your application logic to update the user info.\n        logic.User.update_by(\n            user_id,\n            email=magic_response.data['email'],\n        )\n    \n    return HttpResponse()\n```\n\n", "explanation": "This code block is an example of a user update view. It retrieves a user's metadata from a third-party service (Magic) using the user's stored `issuer` identifier. If the retrieved email does not match the current email in the database, it updates the user's email in the database accordingly. \n\nFunctionality:\n- Retrieve user data by ID\n- Fetch user metadata from Magic using an issuer identifier\n- Update the user's email if it differs from the one retrieved from Magic", "metadata": {"repo": "magiclabs/documentation", "file": "admin-sdk/python/python-sdk/python-resources/python-user/get_metadata_by_issuer.md", "chunk_number": 3, "total_chunks": 3}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "**admin-sdk/python/python-sdk/python-resources/python-user/get_metadata_by_issuer.md**\n\nThis file provides functionality to retrieve and update user metadata through the `get_metadata_by_issuer` method. It takes an issuer string as input, fetches user metadata from Magic using the stored issuer identifier, and updates the user's email in the database if a mismatch is found. The method returns user information and throws exceptions for errors. Key features include:\n\n* Retrieve user data by ID\n* Fetch user metadata from Magic using an issuer identifier\n* Update the user's email if it differs from the one retrieved from Magic"}
{"code": "# get\\_metadata\\_by\\_public\\_address\n\nRetrieves information about the user by the supplied `public_address`. This method is useful if you store the `public_address` with your user data.\n\n```text\nUser.get_metadata_by_public_address(public_address)\n```\n\n### Arguments:\n\n* public\\_address \\(str\\): The user's Ethereum public address, which can be parsed using [Token.get\\_public\\_address](../python-token/get_public_address.md).\n\n### Raises:\n\n* `RateLimitingError`: If you have sent too many requests within a given period of time.\n* `BadRequestError`: If the supplied parameters are invalid.\n* `AuthenticationError`: If your API secret key cannot be authenticated with Magic API server.\n* `ForbiddenError`:  If your API secret key is not authorized to access the resources.\n* `APIError`: For any other API error.\n* `APIConnectionError`: If your server cannot communicate with the Magic server. Normally this is a network communication error.\n\n{% hint style=\"info\" %}", "explanation": "**Block Purpose and Functionality:**\n\nThis method, `User.get_metadata_by_public_address`, retrieves a user's information based on their Ethereum public address. It takes a single `public_address` argument and returns the associated user data, or raises an error if the request is invalid, rate-limited, or unauthorized.", "metadata": {"repo": "magiclabs/documentation", "file": "admin-sdk/python/python-sdk/python-resources/python-user/get_metadata_by_public_address.md", "chunk_number": 1, "total_chunks": 4}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "The 'admin-sdk/python/python-sdk/python-resources/python-user/get_metadata_by_public_address.md' file documents a method, `User.get_metadata_by_public_address`, that retrieves a user's metadata information based on their public Ethereum address using the Magic Admin API. \n\nThe method takes a `public_address` as an input and returns the associated user data. The response includes fields such as the user's Decentralized ID, email address, and public Ethereum address.\n\nAdditionally, this file is also related to a Flask API endpoint `/v1/user/update` that handles user information updates. It authenticates requests, validates DID tokens, retrieves public addresses, and updates user metadata.\n\nThe code handles errors and exceptions raised during the API request including missing or invalid `Authorization` headers, invalid DID tokens, and Magic Admin API request failures."}
{"code": "See [Error Handling](../../python-response-and-error-handling.md) for more examples.\n{% endhint %}\n\n### Returns:\n\n* A [`MagicResponse`](../../python-response-and-error-handling.md#magicresponse): The `data` field contains all of the user meta information.\n  * `issuer` \\(str\\): The user's Decentralized ID.\n  * `email` \\(str\\): The user's email address.\n  * `public_address` \\(str\\): The authenticated user's public address \\(a.k.a.: public key\\). Currently, this value is associated with the Ethereum blockchain.\n\n### Example:\n\nThe example below is assuming you are already using a Python Web Framework \\(Django, Flask, Cherrypy, etc.\\)  Web framework's specific imports are omitted in favor of the simplicity of the example. Only the `magic_admin` related imports are shown below.\n\n```python\nfrom magic_admin import Magic\n# A util provided by `magic_admin` to parse the auth header value.\nfrom magic_admin.utils.http import parse_authorization_header_value\nfrom magic_admin.error import DIDTokenError", "explanation": "**Block Summary:**\n\nThis block documents a function's return data, specifically user meta information retrieved from the Magic Admin API. It includes fields for the user's Decentralized ID, email address, and public Ethereum address. \n\nNote: This is not a code block but a documentation block describing the expected response from a function or API call.", "metadata": {"repo": "magiclabs/documentation", "file": "admin-sdk/python/python-sdk/python-resources/python-user/get_metadata_by_public_address.md", "chunk_number": 2, "total_chunks": 4}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "The 'admin-sdk/python/python-sdk/python-resources/python-user/get_metadata_by_public_address.md' file documents a method, `User.get_metadata_by_public_address`, that retrieves a user's metadata information based on their public Ethereum address using the Magic Admin API. \n\nThe method takes a `public_address` as an input and returns the associated user data. The response includes fields such as the user's Decentralized ID, email address, and public Ethereum address.\n\nAdditionally, this file is also related to a Flask API endpoint `/v1/user/update` that handles user information updates. It authenticates requests, validates DID tokens, retrieves public addresses, and updates user metadata.\n\nThe code handles errors and exceptions raised during the API request including missing or invalid `Authorization` headers, invalid DID tokens, and Magic Admin API request failures."}
{"code": "from magic_admin.error import RequestError\n\n\n@user.route('/v1/user/update', method=['POST'])\ndef update_user_info(self, user_id):\n    \"\"\"An exmaple of user update view that uses DID Token from the\n    client-side to ensure authenticity of a request before updating\n    the user meta.\n    \"\"\"\n    did_token = parse_authorization_header_value(\n        requests.headers.get('Authorization'),\n    )\n    if did_token is None:\n        raise BadRequest(\n            'Authorization header is missing or header value is invalid',\n        )\n    \n    magic = Magic(api_secret_key='<YOUR_API_SECRET_KEY>')\n    \n    # Validate the did_token\n    try:\n        magic.Token.validate(did_token)\n        pub_addr = magic.Token.get_public_address(did_token)\n    except DIDTokenError as e:\n        raise BadRequest('DID Token is invalid: {}'.format(e))\n    \n    try:\n        magic_response = magic.User.get_metadata_by_public_address(pub_addr)\n    except RequestError as e:\n        # You can also remap this error to your own application error.", "explanation": "**User Update Endpoint**\n\nThis block defines a Flask API endpoint (`/v1/user/update`) that updates user information. \n\n**Functionality:**\n\n1. Authenticates requests using a DID (Decentralized Identifier) token from the `Authorization` header.\n2. Validates the DID token using the Magic Admin API.\n3. Retrieves the user's public address from the validated DID token.\n4. Uses the public address to fetch user metadata from the Magic Admin API.\n5. Updates the user's information if the previous steps are successful.\n\n**Error Handling:**\n\n* Raises `BadRequest` if the `Authorization` header is missing or invalid.\n* Raises `BadRequest` if the DID token is invalid.\n* Catches `RequestError` if the Magic Admin API request fails.", "metadata": {"repo": "magiclabs/documentation", "file": "admin-sdk/python/python-sdk/python-resources/python-user/get_metadata_by_public_address.md", "chunk_number": 3, "total_chunks": 4}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "The 'admin-sdk/python/python-sdk/python-resources/python-user/get_metadata_by_public_address.md' file documents a method, `User.get_metadata_by_public_address`, that retrieves a user's metadata information based on their public Ethereum address using the Magic Admin API. \n\nThe method takes a `public_address` as an input and returns the associated user data. The response includes fields such as the user's Decentralized ID, email address, and public Ethereum address.\n\nAdditionally, this file is also related to a Flask API endpoint `/v1/user/update` that handles user information updates. It authenticates requests, validates DID tokens, retrieves public addresses, and updates user metadata.\n\nThe code handles errors and exceptions raised during the API request including missing or invalid `Authorization` headers, invalid DID tokens, and Magic Admin API request failures."}
{"code": "        return HttpError(str(e))\n    \n    # Use your application logic to update the user info.\n    user_info = logic.User.update_by(\n        user_id,\n        email=magic_response.data['email'],\n    )\n    \n    return HttpResponse(user_info)\n```\n\n{% hint style=\"warning\" %}\nIt is important to always validate the DID Token before using.\n{% endhint %}\n\n", "explanation": "**Purpose and Functionality Summary**\n\nThis code block is part of a function that handles user updates. It first attempts to update user information using an `update_by` method, and if successful, returns the updated `user_info` as an HTTP response. If an error occurs during the update, it catches the exception and returns an HTTP error response with the error message.", "metadata": {"repo": "magiclabs/documentation", "file": "admin-sdk/python/python-sdk/python-resources/python-user/get_metadata_by_public_address.md", "chunk_number": 4, "total_chunks": 4}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "The 'admin-sdk/python/python-sdk/python-resources/python-user/get_metadata_by_public_address.md' file documents a method, `User.get_metadata_by_public_address`, that retrieves a user's metadata information based on their public Ethereum address using the Magic Admin API. \n\nThe method takes a `public_address` as an input and returns the associated user data. The response includes fields such as the user's Decentralized ID, email address, and public Ethereum address.\n\nAdditionally, this file is also related to a Flask API endpoint `/v1/user/update` that handles user information updates. It authenticates requests, validates DID tokens, retrieves public addresses, and updates user metadata.\n\nThe code handles errors and exceptions raised during the API request including missing or invalid `Authorization` headers, invalid DID tokens, and Magic Admin API request failures."}
{"code": "# get\\_metadata\\_by\\_token\n\nRetrieves information about the user by the supplied [DID Token](../../../../../decentralized-id.md).\n\n```text\nUser.get_metadata_by_token(did_token)\n```\n\n### Arguments:\n\n* did\\_token \\(str\\): A [DID Token](../../../../../decentralized-id.md) generated by a Magic User on the client-side.\n\n### Raises:\n\n* `RateLimitingError`: If you have sent too many requests within a given period of time.\n* `BadRequestError`: If the supplied parameters are invalid.\n* `AuthenticationError`: If your API secret key cannot be authenticated with Magic API server.\n* `ForbiddenError`:  If your API secret key is not authorized to access the resources.\n* `APIError`: For any other API error.\n* `APIConnectionError`: If your server cannot communicate with the Magic server. Normally this is a network communication error.\n\n{% hint style=\"info\" %}\nSee [Error Handling](../../python-response-and-error-handling.md) for more examples.\n{% endhint %}\n\n### Returns:\n", "explanation": "This block retrieves user metadata using a supplied DID Token. It takes a DID Token string as input and returns user information, handling various errors such as rate limiting, authentication, and API connection issues.", "metadata": {"repo": "magiclabs/documentation", "file": "admin-sdk/python/python-sdk/python-resources/python-user/get_metadata_by_token.md", "chunk_number": 1, "total_chunks": 4}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "The 'get_metadata_by_token' endpoint retrieves and updates user metadata using a provided DID Token. It takes the token from the 'Authorization' header, validates it, and returns the user's information, including Decentralized ID, email, and public address. The endpoint handles potential errors, such as authentication issues and rate limiting, and leverages the Magic Admin library for authentication and user management."}
{"code": "* A [`MagicResponse`](../../python-response-and-error-handling.md#magicresponse): The `data` field contains all of the user meta information.\n  * `issuer` \\(str\\): The user's Decentralized ID.\n  * `email` \\(str\\): The user's email address.\n  * `public_address` \\(str\\): The authenticated user's public address \\(a.k.a.: public key\\). Currently, this value is associated with the Ethereum blockchain.\n\n### Example:\n\nThe example below is assuming you are already using a Python Web Framework \\(Django, Flask, Cherrypy, etc.\\)  Web framework's specific imports are omitted in favor of the simplicity of the example. Only the `magic_admin` related imports are shown below.\n\n```python\nfrom magic_admin import Magic\n# A util provided by `magic_admin` to parse the auth header value.\nfrom magic_admin.utils.http import parse_authorization_header_value\nfrom magic_admin.error import DIDTokenError\nfrom magic_admin.error import RequestError\n\n\n@user.route('/v1/user/update', method=['POST'])\ndef update_user_info(self, user_id):", "explanation": "This block is a Python API endpoint that handles user information updates. It expects an authentication header value, which is parsed to retrieve user meta information, including Decentralized ID, email, and public address. The endpoint appears to be part of a larger system that utilizes the Magic Admin library for authentication and user management.", "metadata": {"repo": "magiclabs/documentation", "file": "admin-sdk/python/python-sdk/python-resources/python-user/get_metadata_by_token.md", "chunk_number": 2, "total_chunks": 4}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "The 'get_metadata_by_token' endpoint retrieves and updates user metadata using a provided DID Token. It takes the token from the 'Authorization' header, validates it, and returns the user's information, including Decentralized ID, email, and public address. The endpoint handles potential errors, such as authentication issues and rate limiting, and leverages the Magic Admin library for authentication and user management."}
{"code": "    # Parse the `Authorization` header value for did_token.\n    did_token = parse_authorization_header_value(\n        requests.headers.get('Authorization'),\n    )\n    if did_token is None:\n        raise BadRequest(\n            'Authorization header is missing or header value is invalid',\n        )\n    \n    magic = Magic(api_secret_key='<YOUR_API_SECRET_KEY>')\n    \n    # Validate the did_token\n    try:\n        magic.Token.validate(did_token)\n    except DIDTokenError as e:\n        raise BadRequest('DID Token is invalid: {}'.format(e))\n    \n    try:\n        magic_response = magic.User.get_metadata_by_token(did_token)\n    except RequestError as e:\n        # You can also remap this error to your own application error.\n        return HttpError(str(e))\n    \n    # Use your application logic to update the user info.\n    user_info = logic.User.update_by(\n        user_id,\n        email=magic_response.data['email'],\n    )\n    \n    return HttpResponse(user_info)\n```\n\n{% hint style=\"warning\" %}", "explanation": "**Summary:**\nThis code block validates a DID token in the `Authorization` header and uses it to retrieve user metadata. If valid, it updates the user's information using custom application logic and returns the updated user info. If any errors occur during the validation or retrieval process, it raises a `BadRequest` or returns an `HttpError` with a custom message.", "metadata": {"repo": "magiclabs/documentation", "file": "admin-sdk/python/python-sdk/python-resources/python-user/get_metadata_by_token.md", "chunk_number": 3, "total_chunks": 4}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "The 'get_metadata_by_token' endpoint retrieves and updates user metadata using a provided DID Token. It takes the token from the 'Authorization' header, validates it, and returns the user's information, including Decentralized ID, email, and public address. The endpoint handles potential errors, such as authentication issues and rate limiting, and leverages the Magic Admin library for authentication and user management."}
{"code": "It is important to always validate the DID Token before using.\n{% endhint %}\n\n", "explanation": "This block emphasizes the importance of validating a DID (Decentralized Identifier) Token before using it.", "metadata": {"repo": "magiclabs/documentation", "file": "admin-sdk/python/python-sdk/python-resources/python-user/get_metadata_by_token.md", "chunk_number": 4, "total_chunks": 4}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "The 'get_metadata_by_token' endpoint retrieves and updates user metadata using a provided DID Token. It takes the token from the 'Authorization' header, validates it, and returns the user's information, including Decentralized ID, email, and public address. The endpoint handles potential errors, such as authentication issues and rate limiting, and leverages the Magic Admin library for authentication and user management."}
{"code": "# logout\\_by\\_issuer\n\nLogs a user out of all Magic SDK sessions given the user's Decentralized ID \\(`iss`\\). This method is useful if you store the `iss` with your user data, which is recommended.\n\n```text\nUser.logout_by_issuer(issuer)\n```\n\n### Arguments:\n\n* issuer \\(str\\): The user's Decentralized ID, which can be parsed using [Token.get\\_issuer](../python-token/get_issuer.md)\n\n### Raises:\n\n* `RateLimitingError`: If you have sent too many requests within a given period of time.\n* `BadRequestError`: If the supplied parameters are invalid.\n* `AuthenticationError`: If your API secret key cannot be authenticated with Magic API server.\n* `ForbiddenError`:  If your API secret key is not authorized to access the resources.\n* `APIError`: For any other API error.\n* `APIConnectionError`: If your server cannot communicate with the Magic server. Normally this is a network communication error.\n\n{% hint style=\"info\" %}\nSee [Error Handling](../../python-response-and-error-handling.md) for more examples.\n{% endhint %}\n", "explanation": "This block allows administrators to log out a user from all Magic SDK sessions using their Decentralized ID (iss). It takes the iss as an argument and handles potential errors such as rate limiting, bad requests, authentication issues, and API connection problems.", "metadata": {"repo": "magiclabs/documentation", "file": "admin-sdk/python/python-sdk/python-resources/python-user/logout_by_issuer.md", "chunk_number": 1, "total_chunks": 2}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "The 'logout_by_issuer' function allows administrators to log out a user from all Magic SDK sessions using their Decentralized ID (iss). It takes the iss as an argument, handles potential errors, and utilizes the Magic Admin API for user logout functionality."}
{"code": "### Returns:\n\n* A [`MagicResponse`](../../python-response-and-error-handling.md#magicresponse).\n\n### Example:\n\nThe example below is assuming you are already using a Python Web Framework \\(Django, Flask, Cherrypy, etc.\\)  Web framework's specific imports are omitted in favor of the simplicity of the example. Only the `magic_admin` related imports are shown below.\n\n```python\nfrom magic_admin import Magic\nfrom magic_admin.error import DIDTokenError\nfrom magic_admin.error import RequestError\n\n\n@user.route('/v1/user/logout', method=['POST'])\ndef user_logout(self, user_id):\n    magic = Magic(api_secret_key='<YOUR_API_SECRET_KEY>')\n\n    # Load user by user_id.\n    user = logic.User.load_by_id(user_id)\n    \n    try:\n        magic.User.logout_by_issuer(user.issuer)\n    except RequestError as e:\n        # You can also remap this error to your own application error.\n        return HttpError(str(e))\n    \n    return HttpResponse()\n```\n\n", "explanation": "This block handles user logout functionality using the Magic Admin API. It loads a user by ID, then calls the Magic Admin API to log out the user by their issuer ID. If the logout request fails, it returns an HTTP error; otherwise, it returns a successful HTTP response.", "metadata": {"repo": "magiclabs/documentation", "file": "admin-sdk/python/python-sdk/python-resources/python-user/logout_by_issuer.md", "chunk_number": 2, "total_chunks": 2}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "The 'logout_by_issuer' function allows administrators to log out a user from all Magic SDK sessions using their Decentralized ID (iss). It takes the iss as an argument, handles potential errors, and utilizes the Magic Admin API for user logout functionality."}
{"code": "# logout\\_by\\_public\\_address\n\nLogs a user out of all Magic SDK sessions given the user's public address. This method is useful if you store the `public_address` . \n\n```text\nUser.logout_by_public_address(public_address)\n```\n\n### Arguments:\n\n* public\\_address \\(str\\): The user's Ethereum public address.\n\n### Raises:\n\n* `RateLimitingError`: If you have sent too many requests within a given period of time.\n* `BadRequestError`: If the supplied parameters are invalid.\n* `AuthenticationError`: If your API secret key cannot be authenticated with Magic API server.\n* `ForbiddenError`:  If your API secret key is not authorized to access the resources.\n* `APIError`: For any other API error.\n* `APIConnectionError`: If your server cannot communicate with the Magic server. Normally this is a network communication error.\n\n{% hint style=\"info\" %}\nSee [Error Handling](../../python-response-and-error-handling.md) for more examples.\n{% endhint %}\n\n### Returns:\n", "explanation": "This block logs a user out of all Magic SDK sessions using their Ethereum public address. \n\nFunction: `User.logout_by_public_address(public_address)`\nArgument: User's Ethereum public address as a string.", "metadata": {"repo": "magiclabs/documentation", "file": "admin-sdk/python/python-sdk/python-resources/python-user/logout_by_public_address.md", "chunk_number": 1, "total_chunks": 2}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "**User Logout by Public Address**\n\nThis code handles user logout functionality using the Magic Admin API. It logs a user out of all Magic SDK sessions by their Ethereum public address.\n\n**Function Summary:**\n\n* The `User.logout_by_public_address` function takes a user's Ethereum public address as a string and creates a Magic Admin instance using an API secret key.\n* It loads the user and initiates a logout request, catching any `RequestError` and returning an HTTP error response if encountered.\n* Upon successful logout, the function returns a success HTTP response."}
{"code": "* A [`MagicResponse`](../../python-response-and-error-handling.md#magicresponse).\n\n### Example:\n\nThe example below is assuming you are already using a Python Web Framework \\(Django, Flask, Cherrypy, etc.\\)  Web framework's specific imports are omitted in favor of the simplicity of the example. Only the `magic_admin` related imports are shown below.\n\n```python\nfrom magic_admin import Magic\nfrom magic_admin.error import DIDTokenError\nfrom magic_admin.error import RequestError\n\n\n@user.route('/v1/user/logout', method=['POST'])\ndef user_logout(self, user_id):\n    magic = Magic(api_secret_key='<YOUR_API_SECRET_KEY>')\n\n    # Load user by user_id.\n    user = logic.User.load_by_id(user_id)\n    \n    try:\n        magic.User.logout_by_public_address(user.public_address)\n    except RequestError as e:\n        # You can also remap this error to your own application error.\n        return HttpError(str(e))\n    \n    return HttpResponse()\n```\n\n", "explanation": "**Purpose:** \nThis code block handles user logout functionality by integrating with the Magic Admin API.\n\n**Functionality:**\n\n1. It creates a Magic Admin instance using an API secret key.\n2. It loads a user by their unique ID using the `logic.User.load_by_id` method.\n3. It initiates a logout request using the `magic.User.logout_by_public_address` method, passing the user's public address.\n4. If a `RequestError` occurs during the logout process, it catches the error and returns an HTTP error response.\n5. Upon successful logout, it returns a success HTTP response.", "metadata": {"repo": "magiclabs/documentation", "file": "admin-sdk/python/python-sdk/python-resources/python-user/logout_by_public_address.md", "chunk_number": 2, "total_chunks": 2}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "**User Logout by Public Address**\n\nThis code handles user logout functionality using the Magic Admin API. It logs a user out of all Magic SDK sessions by their Ethereum public address.\n\n**Function Summary:**\n\n* The `User.logout_by_public_address` function takes a user's Ethereum public address as a string and creates a Magic Admin instance using an API secret key.\n* It loads the user and initiates a logout request, catching any `RequestError` and returning an HTTP error response if encountered.\n* Upon successful logout, the function returns a success HTTP response."}
{"code": "# logout\\_by\\_token\n\nLogs a user out of all Magic SDK sessions given the DID Token. \n\n```text\nUser.logout_by_token(did_token)\n```\n\n### Arguments:\n\n* did\\_token \\(str\\):  A [DID Token](../../../../../decentralized-id.md) generated by a Magic user on the client-side.\n\n### Raises:\n\n* `RateLimitingError`: If you have sent too many requests within a given period of time.\n* `BadRequestError`: If the supplied parameters are invalid.\n* `AuthenticationError`: If your API secret key cannot be authenticated with Magic API server.\n* `ForbiddenError`:  If your API secret key is not authorized to access the resources.\n* `APIError`: For any other API error.\n* `APIConnectionError`: If your server cannot communicate with the Magic server. Normally this is a network communication error.\n\n{% hint style=\"info\" %}\nSee [Error Handling](../../python-response-and-error-handling.md) for more examples.\n{% endhint %}\n\n### Returns:\n\n* A [`MagicResponse`](../../python-response-and-error-handling.md#magicresponse).\n\n### Example:\n", "explanation": "**Purpose:** The `logout_by_token` function logs a user out of all Magic SDK sessions.\n\n**Functionality:** It takes a `did_token` (a decentralized ID token generated by a Magic user) as an argument and initiates a logout process, returning a `MagicResponse` object.", "metadata": {"repo": "magiclabs/documentation", "file": "admin-sdk/python/python-sdk/python-resources/python-user/logout_by_token.md", "chunk_number": 1, "total_chunks": 3}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "**Summary:**\n\nThe `logout_by_token` function in `python-user/logout_by_token.md` logs a user out of all Magic SDK sessions. It takes a decentralized ID token (`did_token`) as an argument, validates the token using the `magic_admin` library, and initiates a logout process. If the token is invalid or missing, an error is raised. Upon successful validation, the user is logged out, and a successful `MagicResponse` object is returned."}
{"code": "The example below is assuming you are already using a Python Web Framework \\(Django, Flask, Cherrypy, etc.\\)  Web framework's specific imports are omitted in favor of the simplicity of the example. Only the `magic_admin` related imports are shown below.\n\n```python\nfrom magic_admin import Magic\n# A util provided by `magic_admin` to parse the auth header value.\nfrom magic_admin.utils.http import parse_authorization_header_value\nfrom magic_admin.error import DIDTokenError\nfrom magic_admin.error import RequestError\n\n\n@user.route('/v1/user/logout', method=['POST'])\ndef user_logout(self, user_id):\n    did_token = parse_authorization_header_value(\n        requests.headers.get('Authorization'),\n    )\n    if did_token is None:\n        raise BadRequest(\n            'Authorization header is missing or header value is invalid',\n        )\n    \n    magic = Magic(api_secret_key='<YOUR_API_SECRET_KEY>')\n    \n    # Validate the did_token.\n    try:\n        magic.Token.validate(did_token)", "explanation": "**Summary**\n\nThis code block handles a user logout endpoint in a Python web application. It checks for a valid `Authorization` header containing a DID token, parses and validates the token using the `magic_admin` library, and raises an error if the token is invalid or missing.", "metadata": {"repo": "magiclabs/documentation", "file": "admin-sdk/python/python-sdk/python-resources/python-user/logout_by_token.md", "chunk_number": 2, "total_chunks": 3}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "**Summary:**\n\nThe `logout_by_token` function in `python-user/logout_by_token.md` logs a user out of all Magic SDK sessions. It takes a decentralized ID token (`did_token`) as an argument, validates the token using the `magic_admin` library, and initiates a logout process. If the token is invalid or missing, an error is raised. Upon successful validation, the user is logged out, and a successful `MagicResponse` object is returned."}
{"code": "        issuer = magic.Token.get_issuer(did_token)\n    except DIDTokenError as e:\n        raise BadRequest('DID Token is invalid: {}'.format(e))\n    \n    # Use your application logic to load the user info.\n    user_info = logic.User.load_by_id(user_id)\n    \n    if user_info.issuer != issuer:\n        raise AuthorizationError('You are not authorized for the given ')\n    \n    try:\n        magic.User.logout_by_token(did_token)\n    except RequestError as e:\n        # You can also remap this error to your own application error.\n        return HttpError(str(e))\n    \n    return HttpResponse()\n```\n\n{% hint style=\"warning\" %}\nIt is important to always validate the DID Token before using.\n{% endhint %}\n\n", "explanation": "**Functionality Summary**\n\nThis block of code validates a Decentralized Identifier (DID) token and logs out a user. If the token is invalid or the issuer does not match the user's issuer, it raises an error. If successful, the user is logged out and a successful HTTP response is returned.", "metadata": {"repo": "magiclabs/documentation", "file": "admin-sdk/python/python-sdk/python-resources/python-user/logout_by_token.md", "chunk_number": 3, "total_chunks": 3}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "**Summary:**\n\nThe `logout_by_token` function in `python-user/logout_by_token.md` logs a user out of all Magic SDK sessions. It takes a decentralized ID token (`did_token`) as an argument, validates the token using the `magic_admin` library, and initiates a logout process. If the token is invalid or missing, an error is raised. Upon successful validation, the user is logged out, and a successful `MagicResponse` object is returned."}
{"code": "# Response and Error Handling\n\n## Response\n\nThere is only one response object that will be returned from a successful API call.\n\n### MagicResponse\n\nThis is the interface to interact Magic API responses. It will only be returned if the API request status code is between 200 \\(inclusive\\) and 300 \\(exclusive\\).\n\nYou will have access to the following attributes:\n\n* `content` \\(bytes\\): Raw content returned by the API response.\n* `status_code` \\(num\\): HTTP status code for the given request.\n* `data` \\(dict\\): Parsed content.\n\n```python\nfrom magic_admin.response import MagicResponse\n\nMagicResponse.content\nMagicResponse.status\nMagicResponse.data\n```\n\n## Errors\n\nThe conventional HTTP response is adopted by the SDK. For the status code in :\n\n* `2XX` - Indicates success\n* `4XX` - Indicates client errors. Information provided to the SDK is invalid.\n* `5XX` - Indicates server errors\n\nBelow is the error class inheritance which can help  developers to programmatically handle the error cases.\n\n```text\nMagicError\n    |", "explanation": "**Purpose and Functionality Summary**\n\nThis block describes the response and error handling functionality of the Magic API.\n\n- **Response Handling**: A single response object (`MagicResponse`) is returned for successful API calls (status code 200-300). Attributes include `content`, `status_code`, and parsed `data`.\n\n- **Error Handling**: The API adopts conventional HTTP responses:\n  - `2XX` indicates success\n  - `4XX` indicates client errors\n  - `5XX` indicates server errors\n  An error class hierarchy is provided (e.g., `MagicError`) for developers to programmatically handle errors.", "metadata": {"repo": "magiclabs/documentation", "file": "admin-sdk/python/python-sdk/python-response-and-error-handling.md", "chunk_number": 1, "total_chunks": 3}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "The file 'admin-sdk/python/python-sdk/python-response-and-error-handling.md' describes the response and error handling functionality of the Magic API. \n\n**Key Points:**\n\n1. **Response Handling**: A single response object (`MagicResponse`) is returned for successful API calls, including attributes such as `content`, `status_code`, and parsed `data`.\n\n2. **Error Handling**: \n   - HTTP responses indicate success (`2XX`), client errors (`4XX`), or server errors (`5XX`).\n   - A custom error class hierarchy is provided for programmatically handling errors:\n     - `MagicError` (base error class)\n     - `DIDTokenError` (DID token issues)\n     - `RequestError` (API request errors, with sub-classes for specific error types)\n\n3. **Error Handling Structure**: A try-except block structure is recommended for catching and handling specific error types, enabling graceful error handling in API requests.\n\nThe file aims to provide a comprehensive error handling mechanism for Magic API, ensuring developers can handle various error scenarios efficiently and effectively."}
{"code": "    |------- DIDTokenError\n    |\n    |------- RequestError\n                  |\n                  | ------- RateLimitingError\n                  | ------- BadRequestError\n                  | ------- AuthenticationError\n                  | ------- ForbiddenError\n                  | ------- APIError\n                  | ------- APIConnectionError\n```\n\n### MagicError\n\nThis is the base class of all the Magic SDK errors.\n\n```python\nMagicError(message=None)\n```\n\n### DIDTokenError\n\nAny DID Token related error. This can mean the given token is malformed or invalid.\n\n### RequestError\n\nThis is the base class of all the Magic API request errors. This error class will provide details of unsuccessful API requests.\n\n```python\nRequestError(\n    message=None, http_status=None, http_code=None, http_resp_data=None,\n    http_message=None, http_error_code=None, http_request_params=None,\n    http_request_data=None, http_method=None,\n)\n```\n\n#### RateLimitingError\n\n\\[**429**\\]: Too many requests are submitted for a given period of time.\n", "explanation": "This block describes a hierarchy of custom error classes for the Magic SDK, including:\n\n- `MagicError`: The base error class\n- `DIDTokenError`: For DID token-related issues\n- `RequestError`: The base class for API request errors\n- Sub-classes of `RequestError`:\n  - `RateLimitingError`: For too many requests in a given time period (HTTP 429 error)\n  - `BadRequestError`\n  - `AuthenticationError`\n  - `ForbiddenError`\n  - `APIError`\n  - `APIConnectionError`\n\nThe `RequestError` class provides details of unsuccessful API requests, including HTTP status, code, response data, and more.", "metadata": {"repo": "magiclabs/documentation", "file": "admin-sdk/python/python-sdk/python-response-and-error-handling.md", "chunk_number": 2, "total_chunks": 3}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "The file 'admin-sdk/python/python-sdk/python-response-and-error-handling.md' describes the response and error handling functionality of the Magic API. \n\n**Key Points:**\n\n1. **Response Handling**: A single response object (`MagicResponse`) is returned for successful API calls, including attributes such as `content`, `status_code`, and parsed `data`.\n\n2. **Error Handling**: \n   - HTTP responses indicate success (`2XX`), client errors (`4XX`), or server errors (`5XX`).\n   - A custom error class hierarchy is provided for programmatically handling errors:\n     - `MagicError` (base error class)\n     - `DIDTokenError` (DID token issues)\n     - `RequestError` (API request errors, with sub-classes for specific error types)\n\n3. **Error Handling Structure**: A try-except block structure is recommended for catching and handling specific error types, enabling graceful error handling in API requests.\n\nThe file aims to provide a comprehensive error handling mechanism for Magic API, ensuring developers can handle various error scenarios efficiently and effectively."}
{"code": "#### BadRequestError\n\n\\[**400**\\]:  The API requests might have missing required fields or bad inputs.\n\n#### AuthenticationError\n\n\\[**401**\\]: This means your API secret key is invalid.\n\n#### ForbiddenError\n\n\\[**403**\\]: This normally means the given API secret key doesn't have permission to perform the action on the given resources.\n\n#### APIError\n\nThis is a generic API error that handlers other status codes that are not explicitly handled. Ex: `500` , `404` , etc.\n\n#### APIConnectionError\n\nNetwork connection error. This normally means the connection between between your application and Magic API server cannot be established.\n\n### Error Handling\n\nIt is recommended to handle the API errors gracefully.\n\n```python\ntry:\n    # Make requests to Magic server.  \nexcept DIDTokenError as e:\n    pass\nexcept RateLimitingError as e:\n    pass\nexcept BadRequestError as e:\n    pass\nexcept AuthenticationError as e:\n    pass\nexcept ForbiddenError as e:\n    pass\nexcept APIError as e:\n    pass\nexcept APIConnectionError as e:\n    pass\n```\n\n", "explanation": "**Error Handling Block Summary**\n\nThis block defines a set of custom error classes for handling API errors and provides a recommended error handling structure using try-except blocks in Python. The error classes include:\n\n- `BadRequestError`: 400, missing required fields or bad inputs\n- `AuthenticationError`: 401, invalid API secret key\n- `ForbiddenError`: 403, insufficient permissions\n- `APIError`: generic API error (500, 404, etc.)\n- `APIConnectionError`: network connection error\n\nThe try-except block structure catches and handles each error type, allowing for graceful error handling in API requests.", "metadata": {"repo": "magiclabs/documentation", "file": "admin-sdk/python/python-sdk/python-response-and-error-handling.md", "chunk_number": 3, "total_chunks": 3}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "The file 'admin-sdk/python/python-sdk/python-response-and-error-handling.md' describes the response and error handling functionality of the Magic API. \n\n**Key Points:**\n\n1. **Response Handling**: A single response object (`MagicResponse`) is returned for successful API calls, including attributes such as `content`, `status_code`, and parsed `data`.\n\n2. **Error Handling**: \n   - HTTP responses indicate success (`2XX`), client errors (`4XX`), or server errors (`5XX`).\n   - A custom error class hierarchy is provided for programmatically handling errors:\n     - `MagicError` (base error class)\n     - `DIDTokenError` (DID token issues)\n     - `RequestError` (API request errors, with sub-classes for specific error types)\n\n3. **Error Handling Structure**: A try-except block structure is recommended for catching and handling specific error types, enabling graceful error handling in API requests.\n\nThe file aims to provide a comprehensive error handling mechanism for Magic API, ensuring developers can handle various error scenarios efficiently and effectively."}
{"code": "# Ethereum\n\n", "explanation": "No code or functional text is provided, only a hashtag stating \"Ethereum\", likely referring to the blockchain platform.", "metadata": {"repo": "magiclabs/documentation", "file": "advanced/ethereum/README.md", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "Within the \"advanced/ethereum/README.md\" file, it appears to focus on advanced topics related to the Ethereum blockchain platform. The content of the file likely provides an overview, explanations, or walkthroughs of complex Ethereum-related concepts and techniques."}
{"code": "# Android\n\n", "explanation": "The given block is a text heading indicating that the following content or code is related to Android, likely a programming or development context for Android operating system.", "metadata": {"repo": "magiclabs/documentation", "file": "advanced/ethereum/android/README.md", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "Based on the given text heading, here's a concise and holistic summary of the 'README.md' file:\n\nThe 'README.md' file in the 'advanced/ethereum/android' directory provides an overview and guidelines for developing and integrating Ethereum-related applications and technologies on the Android operating system."}
{"code": "# \ud83d\ude80 Get Started\n\n### \ud83d\udce6 Installation\n\nTo interact with the Ethereum blockchain, Magic Android SDK integrates [`Web3j`](https://github.com/web3j/web3j) __as sub dependency. \n\nAdd the following dependencies in `build.gradle`\n\n```java\ndependencies {\n    implementation 'link.magic:magic-android:0.3.0'\n    implementation 'org.web3j:core:4.6.0-android' // Not required\n    implementation 'org.web3j:geth:4.6.0-android' // Only for personal Sign\n}\n```\n\n## \u26a1\ufe0f Initializing Provider\n\n{% hint style=\"info\" %}\nThe following example is using **Kotlin 1.3**. Android demo will be open-sourced soon. \n\nYou may use Android Studio to convert Java to Kotlin or vise versa. \n{% endhint %}\n\n```swift\nclass MagicActivity: AppCompatActivity() {\n\n    lateinit var magic: Magic\n    lateinit var web3j: Web3j\n    lateinit var gethWeb3j: Geth\n    \n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        magic = Magic(this, \"YOUR_PUBLISHABLE_API_KEY\")\n        web3j = Web3j.build(magic.rpcProvider)", "explanation": "**Summary:** This block describes the steps to get started with the Magic Android SDK for interacting with the Ethereum blockchain. It provides instructions for installing the required dependencies in the `build.gradle` file and initializing the SDK with a publishable API key in Kotlin.", "metadata": {"repo": "magiclabs/documentation", "file": "advanced/ethereum/android/get-started.md", "chunk_number": 1, "total_chunks": 2}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "Here's a concise summary of the 'advanced/ethereum/android/get-started.md' file:\n\nTo get started with the Magic Android SDK for Ethereum, you'll need to:\n\n* Install required dependencies in your `build.gradle` file\n* Initialize the SDK with a publishable API key in Kotlin\n* Configure the Magic SDK to select your preferred Ethereum network (e.g. Mainnet, testnet, or custom node)\n\nNote: When using a custom node, avoid using local IP addresses."}
{"code": "        gethWeb3j = Geth.build(magic.rpcProvider)\n    }\n}\n```\n\n## \u2601\ufe0f Use Different Networks\n\n### Choose Different Testnet\n\n```kotlin\nmagic = Magic(this, \"YOUR_PUBLISHABLE_API_KEY\", Magic.Network.Mainnet)\n```\n\n### Configure Custom Nodes\n\n```kotlin\nmagic = Magic(this, \"YOUR_PUBLISHABLE_API_KEY\", CustomNodeConfiguration(\"https://alchemy.io\"))\n```\n\n{% hint style=\"danger\" %}\nDon't set the custom nodes to local IP address \\(E.x. \"http://127.0.0.1\"\\), because local IP will point to the network environment inside mobile device / simulator. Try accessible IP address in the same Wifi/Internet Environment \\(E.x. \"http://10.0.0.93:3000\"\\)\n{% endhint %}\n\n#### Associated Class\n\n`CustomNodeConfiguration(rpcUrl: String, chainId: Int?)`\n\n* `rpcUrl` :Your own node URL\n* `chainId` : Your own node's chainId \n\n`Magic.EthNetwork`\n\n```swift\n enum class EthNetwork {\n        Mainnet, Kovan, Rinkeby, Ropsten\n }\n```\n\n", "explanation": "**Summary**: \n\nThis block allows configuration of the Magic SDK, enabling the selection of different Ethereum networks (e.g., Mainnet, testnets) or custom nodes. It also provides a warning against using local IP addresses for custom nodes.", "metadata": {"repo": "magiclabs/documentation", "file": "advanced/ethereum/android/get-started.md", "chunk_number": 2, "total_chunks": 2}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "Here's a concise summary of the 'advanced/ethereum/android/get-started.md' file:\n\nTo get started with the Magic Android SDK for Ethereum, you'll need to:\n\n* Install required dependencies in your `build.gradle` file\n* Initialize the SDK with a publishable API key in Kotlin\n* Configure the Magic SDK to select your preferred Ethereum network (e.g. Mainnet, testnet, or custom node)\n\nNote: When using a custom node, avoid using local IP addresses."}
{"code": "# \ud83d\udc64 Get User Info\n\n```kotlin\nclass MagicActivity: AppCompatActivity() {\n\n    lateinit var magic: Magic\n    lateinit var web3j: Web3j\n    \n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        magic = Magic(this, \"YOUR_PUBLISHABLE_API_KEY\")\n        web3j = Web3j.build(magic.rpcProvider)\n    }\n    \n    // \u2b50\ufe0f After user is successfully authenticated\n    fun getAccount(){\n        try {\n            val accounts = web3j.ethAccounts().sendAsync()\n\n            accounts.whenComplete { accRepsonse: EthAccounts?, error: Throwable? ->\n                if (error != null) {\n                    Log.e(\"MagicError\", error.localizedMessage)\n                }\n                if (accRepsonse != null && !accRepsonse.hasError()) {\n                    account = accRepsonse.accounts[0]\n                    Log.d(\"Magic\", \"Your address is $account\")\n                }\n            }\n        } catch (e: Exception) {\n            Log.e(\"Error\", e.localizedMessage)\n        }\n    }\n}\n```\n\n", "explanation": "**Purpose:** Get user account information using the Magic SDK and Web3j libraries.\n\n**Functionality:** \n\n- Initializes the Magic SDK with a publishable API key.\n- Creates a Web3j instance using the Magic SDK's RPC provider.\n- Retrieves the user's Ethereum account after successful authentication using `getAccount()` function.\n- Handles potential errors during account retrieval and logs the results.", "metadata": {"repo": "magiclabs/documentation", "file": "advanced/ethereum/android/get-user-info.md", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "This is a holistic summary of the file 'advanced/ethereum/android/get-user-info.md':\n\n### Purpose and Functionality\n\nThis code demonstrates how to retrieve user account information on an Android device, utilizing the Magic SDK and Web3j libraries. The process involves:\n\n1. Initializing the Magic SDK with a publishable API key.\n2. Creating a Web3j instance using the Magic SDK's RPC provider.\n3. Authenticating the user and retrieving their Ethereum account using the `getAccount()` function.\n4. Error handling and logging results.\n\nThis Android-based solution provides a seamless way to fetch user account information, leveraging the Magic SDK and Web3j libraries for a robust and efficient experience."}
{"code": "# \ud83d\udcb8 Send Transaction\n\n```kotlin\nclass MagicActivity: AppCompatActivity() {\n\n    lateinit var magic: Magic\n    lateinit var web3j: Web3j\n    \n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        magic = Magic(this, \"YOUR_PUBLISHABLE_API_KEY\")\n        web3j = Web3j.build(magic.rpcProvider)\n    }\n    \n    // \u2b50\ufe0f After user is successfully authenticated\n    fun sendTransaction(v: View) {\n        try {\n            val value: BigInteger =  Convert.toWei(\"0.5\", Convert.Unit.ETHER).toBigInteger()\n            val transaction = createEtherTransaction(account, BigInteger(\"1\"), BigInteger(\"21000\"), BigInteger(\"21000\"), account, value)\n            val receipt = web3j.ethSendTransaction(transaction).send()\n            Log.d(\"Transaction complete: \" + receipt.transactionHash)\n        } catch (e: Exception) {\n            Log.e(\"Error\", e.localizedMessage)\n        }\n    }\n}\n```\n\n", "explanation": "**Summary:**\nThis Kotlin code block is part of a MagicActivity class and handles sending an Ethereum transaction of 0.5 Ether to a specified account, with a gas price and limit. The transaction is executed on the Ethereum blockchain using the Web3j library and the Magic platform's RPC provider.", "metadata": {"repo": "magiclabs/documentation", "file": "advanced/ethereum/android/send-transaction.md", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "The 'advanced/ethereum/android/send-transaction.md' file contains Kotlin code that facilitates sending an Ethereum transaction from an Android application. Specifically, it enables sending 0.5 Ether to a specified account using the Web3j library to interact with the Ethereum blockchain through the Magic platform's RPC provider."}
{"code": "# \u270f\ufe0f Sign Message\n\nMagic Android SDK extends the functionality from Web3j to allow developers to sign Typed Data. You may find it in `magic.web3jSigExt`\n\n{% tabs %}\n{% tab title=\"Personal Sign\" %}\n```kotlin\nclass MagicActivity: AppCompatActivity() {\n\n    lateinit var magic: Magic\n    lateinit var web3j: Web3j\n    lateinit var gethWeb3j: Geth\n    \n    // \u2b50\ufe0f After user is successfully authenticated\n    private var account: String? = null\n    \n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        magic = Magic(this, \"YOUR_PUBLISHABLE_API_KEY\")\n        web3j = Web3j.build(magic.rpcProvider)\n        gethWeb3j = Geth.build(magic.rpcProvider)\n    }\n    \n    fun personSign(view: View) {\n        val message = \"Hello from Magic!!!\"\n        val personalSign: PersonalSign = gethWeb3j.personalSign(\n                message, account, \"password\")\n                .send()\n        Log.d(\"Magic\", \"Signed Message: \" + personalSign.signedMessage)\n\n        // Recover Message", "explanation": "**Purpose and Functionality Summary:**\n\nThis Kotlin code block allows users to sign a message using their Ethereum account credentials through the Magic Android SDK. After authenticating the user, the `personSign` function takes in a message and the user's account to generate a signed message using the `Geth` instance. The signed message is then logged for recovery and verification purposes.", "metadata": {"repo": "magiclabs/documentation", "file": "advanced/ethereum/android/sign-message.md", "chunk_number": 1, "total_chunks": 8}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "Here's a concise summary of the file 'advanced/ethereum/android/sign-message.md':\n\nThe 'advanced/ethereum/android/sign-message.md' file contains Kotlin code for integrating the Magic Android SDK with Ethereum wallets. It enables users to sign messages and perform Ethereum transactions within a mobile application. The code supports:\n\n1. Signing messages using Ethereum account credentials.\n2. Signing structured data using EIP-712 typed data (a standard for Ethereum blockchain).\n3. Account recovery using personal EC Recover and encrypted signed messages.\n\nThe code includes methods for signing typed data using the Magic Web3j extension and logs the resulting signatures for recovery and verification purposes. It also defines a schema for structured messages, likely for digital signature verification in a blockchain context."}
{"code": "        val recovered = gethWeb3j.personalEcRecover(message, personalSign.signedMessage).send()\n        Log.d(\"Magic\", \"Recovered Address: \" + recovered.recoverAccountId)\n    }\n}\n```\n{% endtab %}\n\n{% tab title=\"Sign TypedData Legacy \\(V1\\)\" %}\n```kotlin\nclass MagicActivity: AppCompatActivity() {\n\n    lateinit var magic: Magic\n    lateinit var web3j: Web3j\n    lateinit var gethWeb3j: Geth\n    \n    // \u2b50\ufe0f After user is successfully authenticated\n    private var account: String? = null\n    \n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        magic = Magic(this, \"YOUR_PUBLISHABLE_API_KEY\")\n    }\n    \n    // Sign with EIP712 Data Field \n    fun signTypedDataLegacy(v: View) {\n        val list = listOf(\n                EIP712TypedDataLegacyFields(\"string\", \"Hello from Magic\", \"This message will be signed by you\"),\n                EIP712TypedDataLegacyFields(\"uint32\", \"Here is a number\", \"90210\")\n        )", "explanation": "**Functionality Summary:**\n\nThis Kotlin code appears to be part of a mobile application that integrates with the Magic API for Ethereum wallets. The purpose is to handle Ethereum-related operations, specifically:\n\n1. Account recovery using personal ECrecover and encrypted signed messages.\n2. Signing with EIP-712 typed data (a standard for structured data signing on Ethereum blockchain).\n\nIn summary, this code enables users to perform Ethereum transactions and data signing operations within the mobile application.", "metadata": {"repo": "magiclabs/documentation", "file": "advanced/ethereum/android/sign-message.md", "chunk_number": 2, "total_chunks": 8}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "Here's a concise summary of the file 'advanced/ethereum/android/sign-message.md':\n\nThe 'advanced/ethereum/android/sign-message.md' file contains Kotlin code for integrating the Magic Android SDK with Ethereum wallets. It enables users to sign messages and perform Ethereum transactions within a mobile application. The code supports:\n\n1. Signing messages using Ethereum account credentials.\n2. Signing structured data using EIP-712 typed data (a standard for Ethereum blockchain).\n3. Account recovery using personal EC Recover and encrypted signed messages.\n\nThe code includes methods for signing typed data using the Magic Web3j extension and logs the resulting signatures for recovery and verification purposes. It also defines a schema for structured messages, likely for digital signature verification in a blockchain context."}
{"code": "        val signature = magic.web3jSigExt.signTypedDataLegacy(account, list).send()\n        Log.d(\"Magic\", signature.result)\n    }\n    \n    // Sign with JSON String\n    fun signTypedDataLegacyJson(v: View) {\n        val jsonString = \"[{\\\"type\\\":\\\"string\\\",\\\"name\\\":\\\"Hello from Magic\\\",\\\"value\\\":\\\"This message will be signed by you\\\"},{\\\"type\\\":\\\"uint32\\\",\\\"name\\\":\\\"Here is a number\\\",\\\"value\\\":\\\"90210\\\"}]\"\n        val signature = magic.web3jSigExt.signTypedDataLegacy(account, jsonString).send()\n        Log.d(\"Magic\", signature.result)\n    }\n}\n```\n{% endtab %}\n\n{% tab title=\"Sign TypedData \\(V3\\)\" %}\n```kotlin\nclass MagicActivity: AppCompatActivity() {\n\n    lateinit var magic: Magic\n    lateinit var web3j: Web3j\n    lateinit var gethWeb3j: Geth\n    \n    // \u2b50\ufe0f After user is successfully authenticated\n    private var account: String? = null\n    \n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        magic = Magic(this, \"YOUR_PUBLISHABLE_API_KEY\")\n    }\n    ", "explanation": "**Block Summary**\n\nThis Kotlin code block handles signing typed data using the Magic web3j extension. There are two methods:\n\n1. `signTypedDataLegacy`: Signs typed data using a list of data or a JSON string.\n2. `signTypedDataLegacyJson`: A variant of the first method that signs typed data using a JSON string.\n\nBoth methods use the `magic.web3jSigExt.signTypedDataLegacy` function to sign the data, which is then sent and a signature result is logged.", "metadata": {"repo": "magiclabs/documentation", "file": "advanced/ethereum/android/sign-message.md", "chunk_number": 3, "total_chunks": 8}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "Here's a concise summary of the file 'advanced/ethereum/android/sign-message.md':\n\nThe 'advanced/ethereum/android/sign-message.md' file contains Kotlin code for integrating the Magic Android SDK with Ethereum wallets. It enables users to sign messages and perform Ethereum transactions within a mobile application. The code supports:\n\n1. Signing messages using Ethereum account credentials.\n2. Signing structured data using EIP-712 typed data (a standard for Ethereum blockchain).\n3. Account recovery using personal EC Recover and encrypted signed messages.\n\nThe code includes methods for signing typed data using the Magic Web3j extension and logs the resulting signatures for recovery and verification purposes. It also defines a schema for structured messages, likely for digital signature verification in a blockchain context."}
{"code": "    fun signTypedData(v: View) {", "explanation": "This block defines a function called `signTypedData` that takes a `View` object as input, likely to initiate a digital signing process on a specific data type.", "metadata": {"repo": "magiclabs/documentation", "file": "advanced/ethereum/android/sign-message.md", "chunk_number": 4, "total_chunks": 8}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "Here's a concise summary of the file 'advanced/ethereum/android/sign-message.md':\n\nThe 'advanced/ethereum/android/sign-message.md' file contains Kotlin code for integrating the Magic Android SDK with Ethereum wallets. It enables users to sign messages and perform Ethereum transactions within a mobile application. The code supports:\n\n1. Signing messages using Ethereum account credentials.\n2. Signing structured data using EIP-712 typed data (a standard for Ethereum blockchain).\n3. Account recovery using personal EC Recover and encrypted signed messages.\n\nThe code includes methods for signing typed data using the Magic Web3j extension and logs the resulting signatures for recovery and verification purposes. It also defines a schema for structured messages, likely for digital signature verification in a blockchain context."}
{"code": "        val jsonString = \"{\\\"types\\\":{\\\"EIP712Domain\\\":[{\\\"name\\\":\\\"name\\\",\\\"type\\\":\\\"string\\\"},{\\\"name\\\":\\\"version\\\",\\\"type\\\":\\\"string\\\"},{\\\"name\\\":\\\"verifyingContract\\\",\\\"type\\\":\\\"address\\\"}],\\\"Order\\\":[{\\\"name\\\":\\\"makerAddress\\\",\\\"type\\\":\\\"address\\\"},{\\\"name\\\":\\\"takerAddress\\\",\\\"type\\\":\\\"address\\\"},{\\\"name\\\":\\\"feeRecipientAddress\\\",\\\"type\\\":\\\"address\\\"},{\\\"name\\\":\\\"senderAddress\\\",\\\"type\\\":\\\"address\\\"},{\\\"name\\\":\\\"makerAssetAmount\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"name\\\":\\\"takerAssetAmount\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"name\\\":\\\"makerFee\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"name\\\":\\\"takerFee\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"name\\\":\\\"expirationTimeSeconds\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"name\\\":\\\"salt\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"name\\\":\\\"makerAssetData\\\",\\\"type\\\":\\\"bytes\\\"},{\\\"name\\\":\\\"takerAssetData\\\",\\\"type\\\":\\\"bytes\\\"}]},\\\"domain\\\":{\\\"name\\\":\\\"0x Protocol\\\",\\\"version\\\":\\\"2\\\",\\\"verifyingContract\\\":\\\"0x35dd2932454449b14cee11a94d3674a936d5d7b2\\\"},\\\"message\\\":{\\\"exchangeAddress\\\":\\\"0x35dd2932454449b14cee11a94d3674a936d5d7b2\\\",\\\"senderAddress\\\":\\\"0x0000000000000000000000000000000000000000\\\",\\\"makerAddress\\\":\\\"0x338be8514c1397e8f3806054e088b2daf1071fcd\\\",\\\"takerAddress\\\":\\\"0x0000000000000000000000000000000000000000\\\",\\\"makerFee\\\":\\\"0\\\",\\\"takerFee\\\":\\\"0\\\",\\\"makerAssetAmount\\\":\\\"97500000000000\\\",\\\"takerAssetAmount\\\":\\\"15000000000000000\\\",\\\"makerAssetData\\\":\\\"0xf47261b0000000000000000000000000d0a1e359811322d97991e03f863a0c30c2cf029c\\\",\\\"takerAssetData\\\":\\\"0xf47261b00000000000000000000000006ff6c0ff1d68b964901f986d4c9fa3ac68346570\\\",\\\"salt\\\":\\\"1553722433685\\\",\\\"feeRecipientAddress\\\":\\\"0xa258b39954cef5cb142fd567a46cddb31a670124\\\",\\\"expirationTimeSeconds\\\":\\\"1553808833\\\"},\\\"primaryType\\\":\\\"Order\\\"}\"", "explanation": "**JSON Block Summary**\n\nThis JSON block represents an encoded order message, presumably for a decentralized exchange (DEX), using the EIP-712 standard. It contains four main sections:\n\n1. **Types**: defines two types, \"EIP712Domain\" and \"Order\", with their respective fields and data types.\n2. **Domain**: specifies the domain information, such as name, version, and verifying contract address.\n3. **Message**: provides the actual order data, including exchange address, sender address, maker and taker information, fees, amounts, asset data, and expiration time.\n4. **PrimaryType**: indicates the primary type of the encoded message, which is an \"Order\".", "metadata": {"repo": "magiclabs/documentation", "file": "advanced/ethereum/android/sign-message.md", "chunk_number": 5, "total_chunks": 8}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "Here's a concise summary of the file 'advanced/ethereum/android/sign-message.md':\n\nThe 'advanced/ethereum/android/sign-message.md' file contains Kotlin code for integrating the Magic Android SDK with Ethereum wallets. It enables users to sign messages and perform Ethereum transactions within a mobile application. The code supports:\n\n1. Signing messages using Ethereum account credentials.\n2. Signing structured data using EIP-712 typed data (a standard for Ethereum blockchain).\n3. Account recovery using personal EC Recover and encrypted signed messages.\n\nThe code includes methods for signing typed data using the Magic Web3j extension and logs the resulting signatures for recovery and verification purposes. It also defines a schema for structured messages, likely for digital signature verification in a blockchain context."}
{"code": "        val signature = magic.web3jSigExt.signTypedData(account, jsonString).send()\n        Log.d(\"Magic\", \"Signature: \" + signature.result)\n    }\n}\n```\n{% endtab %}\n\n{% tab title=\"Sign TypedData V4\" %}\n```kotlin\nclass MagicActivity: AppCompatActivity() {\n\n    lateinit var magic: Magic\n    lateinit var web3j: Web3j\n    lateinit var gethWeb3j: Geth\n    \n    // \u2b50\ufe0f After user is successfully authenticated\n    private var account: String? = null\n    \n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        magic = Magic(this, \"YOUR_PUBLISHABLE_API_KEY\")\n    }\n\n    fun signTypedDataV4(v: View) {", "explanation": "**Purpose and Functionality:**\n\nThis code block is responsible for signing typed data using the Magic Web3J extension. It takes two parameters: an account and a JSON string, and returns a digital signature. The result is then logged to the console.\n\n**Functionality Steps:**\n\n1. Retrieves an account (presumably after user authentication).\n2. Signs typed data using the account and a provided JSON string.\n3. Sends the signing request and retrieves the signature.\n4. Logs the resulting signature to the console.", "metadata": {"repo": "magiclabs/documentation", "file": "advanced/ethereum/android/sign-message.md", "chunk_number": 6, "total_chunks": 8}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "Here's a concise summary of the file 'advanced/ethereum/android/sign-message.md':\n\nThe 'advanced/ethereum/android/sign-message.md' file contains Kotlin code for integrating the Magic Android SDK with Ethereum wallets. It enables users to sign messages and perform Ethereum transactions within a mobile application. The code supports:\n\n1. Signing messages using Ethereum account credentials.\n2. Signing structured data using EIP-712 typed data (a standard for Ethereum blockchain).\n3. Account recovery using personal EC Recover and encrypted signed messages.\n\nThe code includes methods for signing typed data using the Magic Web3j extension and logs the resulting signatures for recovery and verification purposes. It also defines a schema for structured messages, likely for digital signature verification in a blockchain context."}
{"code": "        val jsonString = \"{\\\"domain\\\":{\\\"chainId\\\":1,\\\"name\\\":\\\"Ether Mail\\\",\\\"verifyingContract\\\":\\\"0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC\\\",\\\"version\\\":\\\"1\\\"},\\\"message\\\":{\\\"contents\\\":\\\"Hello, Bob!\\\",\\\"from\\\":{\\\"name\\\":\\\"Cow\\\",\\\"wallets\\\":[\\\"0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826\\\",\\\"0xDeaDbeefdEAdbeefdEadbEEFdeadbeEFdEaDbeeF\\\"]},\\\"to\\\":[{\\\"name\\\":\\\"Bob\\\",\\\"wallets\\\":[\\\"0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB\\\",\\\"0xB0BdaBea57B0BDABeA57b0bdABEA57b0BDabEa57\\\",\\\"0xB0B0b0b0b0b0B000000000000000000000000000\\\"]}]},\\\"primaryType\\\":\\\"Mail\\\",\\\"types\\\":{\\\"EIP712Domain\\\":[{\\\"name\\\":\\\"name\\\",\\\"type\\\":\\\"string\\\"},{\\\"name\\\":\\\"version\\\",\\\"type\\\":\\\"string\\\"},{\\\"name\\\":\\\"chainId\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"name\\\":\\\"verifyingContract\\\",\\\"type\\\":\\\"address\\\"}],\\\"Group\\\":[{\\\"name\\\":\\\"name\\\",\\\"type\\\":\\\"string\\\"},{\\\"name\\\":\\\"members\\\",\\\"type\\\":\\\"Person[]\\\"}],\\\"Mail\\\":[{\\\"name\\\":\\\"from\\\",\\\"type\\\":\\\"Person\\\"},{\\\"name\\\":\\\"to\\\",\\\"type\\\":\\\"Person[]\\\"},{\\\"name\\\":\\\"contents\\\",\\\"type\\\":\\\"string\\\"}],\\\"Person\\\":[{\\\"name\\\":\\\"name\\\",\\\"type\\\":\\\"string\\\"},{\\\"name\\\":\\\"wallets\\\",\\\"type\\\":\\\"address[]\\\"}]}}\"", "explanation": "**Summary**\n\nThis is a JSON object representing a structured message, likely for digital signature verification. It contains metadata about a mail message (e.g., sender, recipient, contents) and defines the schema for various data types (e.g., `EIP712Domain`, `Group`, `Mail`, `Person`) using a standardized format. The schema is likely used for domain verification and signature validation in a blockchain context.", "metadata": {"repo": "magiclabs/documentation", "file": "advanced/ethereum/android/sign-message.md", "chunk_number": 7, "total_chunks": 8}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "Here's a concise summary of the file 'advanced/ethereum/android/sign-message.md':\n\nThe 'advanced/ethereum/android/sign-message.md' file contains Kotlin code for integrating the Magic Android SDK with Ethereum wallets. It enables users to sign messages and perform Ethereum transactions within a mobile application. The code supports:\n\n1. Signing messages using Ethereum account credentials.\n2. Signing structured data using EIP-712 typed data (a standard for Ethereum blockchain).\n3. Account recovery using personal EC Recover and encrypted signed messages.\n\nThe code includes methods for signing typed data using the Magic Web3j extension and logs the resulting signatures for recovery and verification purposes. It also defines a schema for structured messages, likely for digital signature verification in a blockchain context."}
{"code": "        val signature = magic.web3jSigExt.signTypedDataV4(account, jsonString).send()\n        Log.d(\"Magic\", \"Signature: \" + signature.result)\n    }\n}\n```\n{% endtab %}\n{% endtabs %}\n\n", "explanation": "This block of code generates a digital signature using the Web3j library's `signTypedDataV4` function, which signs a JSON string with a private key, and logs the resulting signature to the console.", "metadata": {"repo": "magiclabs/documentation", "file": "advanced/ethereum/android/sign-message.md", "chunk_number": 8, "total_chunks": 8}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "Here's a concise summary of the file 'advanced/ethereum/android/sign-message.md':\n\nThe 'advanced/ethereum/android/sign-message.md' file contains Kotlin code for integrating the Magic Android SDK with Ethereum wallets. It enables users to sign messages and perform Ethereum transactions within a mobile application. The code supports:\n\n1. Signing messages using Ethereum account credentials.\n2. Signing structured data using EIP-712 typed data (a standard for Ethereum blockchain).\n3. Account recovery using personal EC Recover and encrypted signed messages.\n\nThe code includes methods for signing typed data using the Magic Web3j extension and logs the resulting signatures for recovery and verification purposes. It also defines a schema for structured messages, likely for digital signature verification in a blockchain context."}
{"code": "# \ud83d\udcdc Smart Contract\n\n## Solidity Contract\n\nIn this example, we'll be demonstrating how to use Magic with Web3j to interact with Solidity smart contracts. The simple Hello World contract allows anyone to read and write a message to it.\n\n```javascript\npragma solidity ^0.5.10;\n\ncontract HelloWorld {\n\n  string public message;\n    \n  constructor(string memory initMessage) public {\n    message = initMessage;\n  }\n\n  function update(string memory newMessage) public {\n    message = newMessage;\n  }\n}\n```\n\n### Create a Kotlin/Java Contract Class from ABI\n\nweb3j supports the auto-generation of smart contract function wrappers in Java from Solidity ABI files.\n\nTo get started, you must have two files\n\n* ABI JSON file `<Contract>.json`\n* ByteCode file `<Contract>.bin`\n\n#### Install web3j cli-tool\n\n```\n$ curl -L https://get.web3j.io | sh\n```\n\nYou may need to install a JDK to support this library\n\n![](../../../.gitbook/assets/image%20%283%29.png)\n\nAfter it has been installed to your computer, you may run the following command to check\n\n```text", "explanation": "**Summary:**\n\nThis block describes a simple Solidity smart contract written in JavaScript that stores and updates a message. The contract has a constructor to initialize the message and a function to update it. Additionally, it explains how to use the Web3j CLI tool to auto-generate a Kotlin/Java contract class from the Solidity contract's ABI (Application Binary Interface) file.", "metadata": {"repo": "magiclabs/documentation", "file": "advanced/ethereum/android/smart-contract.md", "chunk_number": 1, "total_chunks": 5}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "**Summary of advanced/ethereum/android/smart-contract.md**\n\nThis file describes the process of interacting with a Solidity smart contract on the Ethereum blockchain using Android, Magic SDK, and Web3j library. The steps include:\n\n1. Writing and deploying a Solidity smart contract using Web3j CLI tool.\n2. Generating a Java contract class from the Solidity contract's ABI file using `web3j solidity generate`.\n3. Initializing Magic and Web3j instances in an Android app.\n4. Deploying the contract to the Ethereum blockchain using the `deployContract` function, which takes the user's account and sets gas price and limit.\n5. Interacting with the deployed contract using `contractRead` and `contractWrite` functions, which load the contract instance, check its validity, and send calls to the contract to read or update data.\n\nThe provided code snippets demonstrate how to generate, deploy, and interact with a smart contract on the Ethereum blockchain using Kotlin and the Web3j library, specifically on the Rinkeby testnet."}
{"code": "$ web3j version\n```\n\n### Create the contract class\n\n```bash\n$ web3j solidity generate -a=./path/to/<Contract>.json -b=./path/to/<Contract>.bin -o=/output/path/ -p={packageName}\n```\n\nYou\u2019ll find a `Contract.java` file created in your output directory above. Put this file in your project, and no more changes are needed.\n\nFor more detail about this section. Please check the following link  \n[https://web3j.readthedocs.io/en/latest/smart\\_contracts.html\\#solidity-smart-contract-wrappers](https://web3j.readthedocs.io/en/latest/smart_contracts.html#solidity-smart-contract-wrappers)\n\n## Contract Functions\n\nWhen deploying contract or building contract using web3j library, Magic offers `MagicTxnManager` class as a default `TransactionManager` that helps you to avoid dealing with private keys or credentials that Contract class requires. \n\n### Deploy Contract\n\n```kotlin\nimport link.magic.demo.contract.Contract // This is the contract class you created above\n\nclass MagicActivity: AppCompatActivity() {\n", "explanation": "**Purpose and Functionality Summary:**\n\nThis block provides instructions for generating and deploying a Solidity smart contract using Web3j. The process involves using the `web3j solidity generate` command to create a contract class file (`Contract.java`) from a Solidity contract file (`Contract.json` and `Contract.bin`). The generated contract class can then be used with the Web3j library to deploy and interact with the smart contract.", "metadata": {"repo": "magiclabs/documentation", "file": "advanced/ethereum/android/smart-contract.md", "chunk_number": 2, "total_chunks": 5}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "**Summary of advanced/ethereum/android/smart-contract.md**\n\nThis file describes the process of interacting with a Solidity smart contract on the Ethereum blockchain using Android, Magic SDK, and Web3j library. The steps include:\n\n1. Writing and deploying a Solidity smart contract using Web3j CLI tool.\n2. Generating a Java contract class from the Solidity contract's ABI file using `web3j solidity generate`.\n3. Initializing Magic and Web3j instances in an Android app.\n4. Deploying the contract to the Ethereum blockchain using the `deployContract` function, which takes the user's account and sets gas price and limit.\n5. Interacting with the deployed contract using `contractRead` and `contractWrite` functions, which load the contract instance, check its validity, and send calls to the contract to read or update data.\n\nThe provided code snippets demonstrate how to generate, deploy, and interact with a smart contract on the Ethereum blockchain using Kotlin and the Web3j library, specifically on the Rinkeby testnet."}
{"code": "    lateinit var magic: Magic\n    lateinit var web3j: Web3j\n    \n    // \u2b50\ufe0f After user is successfully authenticated\n    private var account: String? = null\n    \n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        magic = Magic(this, \"YOUR_PUBLISHABLE_API_KEY\")\n        web3j = Web3j.build(magic.rpcProvider)\n    }\n    \n    fun deployContract(view: View) {\n        try {\n            val price = BigInteger.valueOf(22000000000L)\n            val limit = BigInteger.valueOf(4300000)\n            val gasProvider = StaticGasProvider(price, limit)\n            val contract = Contract.deploy(\n                    web3j,\n                    account?.let { MagicTxnManager(web3j, it) },\n                    gasProvider,\n                    \"HELLO_WORLD_FROM_ANDROID\"\n            ).send()\n            Log.d(\"Magic\", \"Deploy to\" + contract.contractAddress)\n        } catch (e: Exception) {\n            Log.e(\"E\", \"error\", e)\n        }\n    }\n} \n```\n\n### Read From Contract\n\n```kotlin", "explanation": "**Summary**\n\nThis Kotlin block is part of an Android app that uses the Magic SDK and Web3j library to interact with the Ethereum blockchain. It initializes the Magic and Web3j instances and provides a `deployContract` function that deploys a contract to the Ethereum blockchain when called. The function takes the user's account, sets the gas price and limit, and sends the contract deployment transaction.", "metadata": {"repo": "magiclabs/documentation", "file": "advanced/ethereum/android/smart-contract.md", "chunk_number": 3, "total_chunks": 5}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "**Summary of advanced/ethereum/android/smart-contract.md**\n\nThis file describes the process of interacting with a Solidity smart contract on the Ethereum blockchain using Android, Magic SDK, and Web3j library. The steps include:\n\n1. Writing and deploying a Solidity smart contract using Web3j CLI tool.\n2. Generating a Java contract class from the Solidity contract's ABI file using `web3j solidity generate`.\n3. Initializing Magic and Web3j instances in an Android app.\n4. Deploying the contract to the Ethereum blockchain using the `deployContract` function, which takes the user's account and sets gas price and limit.\n5. Interacting with the deployed contract using `contractRead` and `contractWrite` functions, which load the contract instance, check its validity, and send calls to the contract to read or update data.\n\nThe provided code snippets demonstrate how to generate, deploy, and interact with a smart contract on the Ethereum blockchain using Kotlin and the Web3j library, specifically on the Rinkeby testnet."}
{"code": "fun contractRead(view: View) { \n    try {\n        val price = BigInteger.valueOf(22000000000L)\n        val limit = BigInteger.valueOf(4300000)\n        val gasProvider = StaticGasProvider(price, limit)\n        \n        // Contract in Rinkeby testnet\n        val contract = ExampleContract.load(\"0x6a2d321a3679b1b3c8a19b84e41abd11763a8ab5\", web3j, account?.let { MagicTxnManager(web3j, it) }, gasProvider)\n        if (contract.isValid) {\n            val ethCall = contract.message().send()\n            Log.d(\"Magic\", ethCall.toString())\n        } else {\n            throw Error(\"contract not valid\")\n        }\n    } catch (e: Exception) {\n        Log.e(\"E\", \"error\", e)\n    }\n}\n```\n\n### Write to Contract\n\n```kotlin\nfun contractWrite(view: View) {\n    try {\n        val price = BigInteger.valueOf(22000000000L)\n        val limit = BigInteger.valueOf(4300000)\n        val gasProvider = StaticGasProvider(price, limit)\n        \n        // Contract in Rinkeby testnet", "explanation": "This block is written in Kotlin and appears to be used for interacting with a smart contract on the Ethereum blockchain, specifically on the Rinkeby testnet. \n\n### contractRead function\n- Loads a smart contract instance from a provided address.\n- Checks if the contract is valid.\n- If valid, sends a 'message' call to the contract and logs the result.\n\n### contractWrite function\n- This function is incomplete, but based on its similarity to contractRead, it is likely used to write data to the contract.", "metadata": {"repo": "magiclabs/documentation", "file": "advanced/ethereum/android/smart-contract.md", "chunk_number": 4, "total_chunks": 5}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "**Summary of advanced/ethereum/android/smart-contract.md**\n\nThis file describes the process of interacting with a Solidity smart contract on the Ethereum blockchain using Android, Magic SDK, and Web3j library. The steps include:\n\n1. Writing and deploying a Solidity smart contract using Web3j CLI tool.\n2. Generating a Java contract class from the Solidity contract's ABI file using `web3j solidity generate`.\n3. Initializing Magic and Web3j instances in an Android app.\n4. Deploying the contract to the Ethereum blockchain using the `deployContract` function, which takes the user's account and sets gas price and limit.\n5. Interacting with the deployed contract using `contractRead` and `contractWrite` functions, which load the contract instance, check its validity, and send calls to the contract to read or update data.\n\nThe provided code snippets demonstrate how to generate, deploy, and interact with a smart contract on the Ethereum blockchain using Kotlin and the Web3j library, specifically on the Rinkeby testnet."}
{"code": "        val contract = ExampleContract.load(\"0x6a2d321a3679b1b3c8a19b84e41abd11763a8ab5\", web3j, account?.let { MagicTxnManager(web3j, it) }, gasProvider)\n        if (contract.isValid) {\n            val ethCall = contract.update(\"NEW_MESSAGE_FROM_ANDROID\").send()\n            Log.d(\"Magic\", ethCall.toString())\n        } else {\n            throw Error(\"contract not valid\")\n        }\n    } catch (e: Exception) {\n        Log.e(\"E\", \"error\", e)\n    }\n}  \n```\n\n", "explanation": "**Summary:**\n\nThis block of code loads a smart contract from a specific Ethereum address, checks if it's valid, and if so, updates the contract with a new message (\"NEW_MESSAGE_FROM_ANDROID\") and logs the result. If the contract is invalid or an error occurs, it throws an error or logs the exception.", "metadata": {"repo": "magiclabs/documentation", "file": "advanced/ethereum/android/smart-contract.md", "chunk_number": 5, "total_chunks": 5}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "**Summary of advanced/ethereum/android/smart-contract.md**\n\nThis file describes the process of interacting with a Solidity smart contract on the Ethereum blockchain using Android, Magic SDK, and Web3j library. The steps include:\n\n1. Writing and deploying a Solidity smart contract using Web3j CLI tool.\n2. Generating a Java contract class from the Solidity contract's ABI file using `web3j solidity generate`.\n3. Initializing Magic and Web3j instances in an Android app.\n4. Deploying the contract to the Ethereum blockchain using the `deployContract` function, which takes the user's account and sets gas price and limit.\n5. Interacting with the deployed contract using `contractRead` and `contractWrite` functions, which load the contract instance, check its validity, and send calls to the contract to read or update data.\n\nThe provided code snippets demonstrate how to generate, deploy, and interact with a smart contract on the Ethereum blockchain using Kotlin and the Web3j library, specifically on the Rinkeby testnet."}
{"code": "# \ud83d\ude80 Get Started\n\n## \ud83d\udce6 Installation\n\nTo interact with the Ethereum blockchain, you can use _either_ [`ethers.js`](https://docs.ethers.io/ethers.js/html/getting-started.html) or [`web3.js`](https://web3js.readthedocs.io/en/v1.2.8/getting-started.html) libraries with Magic.\n\n{% hint style=\"info\" %}\nIf you are already familiar with Ethereum application development, you can skip straight to our kitchen sink examples:\n\n\ud83d\udc49 [**Ethers.js Example**](https://go.magic.link/example-ethers)  \n\ud83d\udc49 [**Web3.js Example**](https://go.magic.link/example-web3)\\*\\*\\*\\*\n{% endhint %}\n\n### Ethers.js\n\n{% tabs %}\n{% tab title=\"NPM\" %}\n```bash\nnpm install --save ethers\n```\n{% endtab %}\n\n{% tab title=\"Yarn\" %}\n```bash\nyarn add ethers\n```\n{% endtab %}\n\n{% tab title=\"CDN\" %}\n```markup\n<script src=\"https://cdn.ethers.io/scripts/ethers-v4.min.js\"></script>\n```\n{% endtab %}\n{% endtabs %}\n\n### Web3.js\n\n{% tabs %}\n{% tab title=\"NPM\" %}\n```bash\nnpm install --save web3\n```\n{% endtab %}\n\n{% tab title=\"Yarn\" %}\n```bash\nyarn add web3\n```\n{% endtab %}\n\n{% tab title=\"CDN\" %}", "explanation": "This block provides instructions on how to install and use either `ethers.js` or `web3.js` libraries to interact with the Ethereum blockchain through Magic. It includes installation methods using npm, yarn, and CDN.", "metadata": {"repo": "magiclabs/documentation", "file": "advanced/ethereum/get-started.md", "chunk_number": 1, "total_chunks": 4}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "# Getting Started with Ethereum and Magic SDK\n\nThis guide provides instructions on how to integrate the Magic SDK with the Ethereum blockchain using the `ethers.js` or `web3.js` libraries. \n\n## Prerequisites\n\n* Install `ethers.js` or `web3.js` using npm, yarn, or CDN.\n* Obtain a publishable APi key.\n\n## Setup\n\n1. Initialize the Magic SDK with a publishable API key and optional custom node options.\n2. Create a Web3 instance using the Magic SDK's RPC provider.\n3. Use the Web3 instance to interact with various Ethereum networks, such as testnets (e.g., Rinkeby, Ropsten, and Kovan) or custom nodes.\n\n## Code Requirements\n\n* Publishable API key\n* Custom node options (optional)\n* Support for ES Modules/TypeScript and CommonJS environments. \n\nThis setup allows for easy integration with Ethereum-based applications and provides a connection to the Ethereum blockchain for seamless interaction."}
{"code": "```markup\n<script src=\"https://cdn.jsdelivr.net/npm/web3@latest/dist/web3.min.js\"></script>\n```\n{% endtab %}\n{% endtabs %}\n\n## \u26a1\ufe0f Initializing Provider\n\n{% hint style=\"warning\" %}\nEthereum provider is only supported in **`magic-sdk@1.0.1`** or later version.\n{% endhint %}\n\n### Ethers.js\n\n{% tabs %}\n{% tab title=\"ES Modules/TypeScript\" %}\n```typescript\nimport { Magic } from 'magic-sdk';\nimport { ethers } from 'ethers';\n\n// Test key defaults to \"rinkeby\", live key defaults to \"mainnet\"\nconst magic = new Magic(\"YOUR_PUBLISHABLE_API_KEY\");\nconst provider = new ethers.providers.Web3Provider(magic.rpcProvider);\n```\n{% endtab %}\n\n{% tab title=\"CommonJS\" %}\n```typescript\nconst { Magic } = require('magic-sdk');\nconst ethers = require('ethers');\n\n// Test key defaults to \"rinkeby\", live key defaults to \"mainnet\"\nconst magic = new Magic(\"YOUR_PUBLISHABLE_API_KEY\");\nconst provider = new ethers.providers.Web3Provider(magic.rpcProvider);\n```\n{% endtab %}\n{% endtabs %}\n\n### Web3.js\n\n{% tabs %}\n{% tab title=\"ES Modules/TypeScript\" %}", "explanation": "This block initializes an Ethereum provider using either Ethers.js or Web3.js, linking it to the Magic SDK for easy integration with Ethereum-based applications. It requires a publishable API key and allows for support in different programming environments (ES Modules/TypeScript and CommonJS).", "metadata": {"repo": "magiclabs/documentation", "file": "advanced/ethereum/get-started.md", "chunk_number": 2, "total_chunks": 4}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "# Getting Started with Ethereum and Magic SDK\n\nThis guide provides instructions on how to integrate the Magic SDK with the Ethereum blockchain using the `ethers.js` or `web3.js` libraries. \n\n## Prerequisites\n\n* Install `ethers.js` or `web3.js` using npm, yarn, or CDN.\n* Obtain a publishable APi key.\n\n## Setup\n\n1. Initialize the Magic SDK with a publishable API key and optional custom node options.\n2. Create a Web3 instance using the Magic SDK's RPC provider.\n3. Use the Web3 instance to interact with various Ethereum networks, such as testnets (e.g., Rinkeby, Ropsten, and Kovan) or custom nodes.\n\n## Code Requirements\n\n* Publishable API key\n* Custom node options (optional)\n* Support for ES Modules/TypeScript and CommonJS environments. \n\nThis setup allows for easy integration with Ethereum-based applications and provides a connection to the Ethereum blockchain for seamless interaction."}
{"code": "```typescript\nimport { Magic } from 'magic-sdk';\nimport Web3 from 'web3';\n\n// Test key defaults to \"rinkeby\", live key defaults to \"mainnet\"\nconst magic = new Magic(\"YOUR_PUBLISHABLE_API_KEY\");\nconst web3 = new Web3(magic.rpcProvider); // Or window.web3 = ...\n```\n{% endtab %}\n\n{% tab title=\"CommonJS\" %}\n```typescript\nconst { Magic } = require('magic-sdk');\nconst Web3 = require('web3');\n\n// Test key defaults to \"rinkeby\", live key defaults to \"mainnet\"\nconst magic = new Magic(\"YOUR_PUBLISHABLE_API_KEY\");\nconst web3 = new Web3(magic.rpcProvider); // Or window.web3 = ...\n```\n{% endtab %}\n{% endtabs %}\n\n## \u2601\ufe0f Use Different Networks\n\n### Choose Different Testnet\n\n```javascript\nconst magic = new Magic(\"YOUR_PUBLISHABLE_API_KEY\", {\n  network: \"ropsten\" // Supports \"rinkeby\", \"ropsten\", \"kovan\"\n});\n```\n\n### Configure Custom Nodes\n\n```javascript\nconst customNodeOptions = {\n  rpcUrl: 'http://127.0.0.1:7545', // Your own node URL\n  chainId: 1011 // Your own node's chainId \n}\n\n// Setting network to localhost blockchain", "explanation": "**Purpose and Functionality:**\nThis code block sets up a connection to the Ethereum blockchain using the Magic SDK and Web3 libraries, allowing for interaction with different Ethereum networks (e.g., testnets like Rinkeby, Ropsten, and Kovan, or custom nodes). It initializes a Magic instance with a publishable API key and creates a Web3 instance using the Magic instance's RPC provider.", "metadata": {"repo": "magiclabs/documentation", "file": "advanced/ethereum/get-started.md", "chunk_number": 3, "total_chunks": 4}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "# Getting Started with Ethereum and Magic SDK\n\nThis guide provides instructions on how to integrate the Magic SDK with the Ethereum blockchain using the `ethers.js` or `web3.js` libraries. \n\n## Prerequisites\n\n* Install `ethers.js` or `web3.js` using npm, yarn, or CDN.\n* Obtain a publishable APi key.\n\n## Setup\n\n1. Initialize the Magic SDK with a publishable API key and optional custom node options.\n2. Create a Web3 instance using the Magic SDK's RPC provider.\n3. Use the Web3 instance to interact with various Ethereum networks, such as testnets (e.g., Rinkeby, Ropsten, and Kovan) or custom nodes.\n\n## Code Requirements\n\n* Publishable API key\n* Custom node options (optional)\n* Support for ES Modules/TypeScript and CommonJS environments. \n\nThis setup allows for easy integration with Ethereum-based applications and provides a connection to the Ethereum blockchain for seamless interaction."}
{"code": "const magic = new Magic('YOUR_PUBLISHABLE_API_KEY', { network: customNodeOptions });\n```\n\n", "explanation": "**Magic Block Summary**\n\nThis block initializes an instance of the Magic SDK, a decentralized authentication platform. It takes two parameters:\n\n* `YOUR_PUBLISHABLE_API_KEY`: a publishable API key (which should be replaced with a real key)\n* `customNodeOptions`: an object that specifies a custom node for the network connection\n\nIn summary, this block sets up Magic with a custom node connection.", "metadata": {"repo": "magiclabs/documentation", "file": "advanced/ethereum/get-started.md", "chunk_number": 4, "total_chunks": 4}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "# Getting Started with Ethereum and Magic SDK\n\nThis guide provides instructions on how to integrate the Magic SDK with the Ethereum blockchain using the `ethers.js` or `web3.js` libraries. \n\n## Prerequisites\n\n* Install `ethers.js` or `web3.js` using npm, yarn, or CDN.\n* Obtain a publishable APi key.\n\n## Setup\n\n1. Initialize the Magic SDK with a publishable API key and optional custom node options.\n2. Create a Web3 instance using the Magic SDK's RPC provider.\n3. Use the Web3 instance to interact with various Ethereum networks, such as testnets (e.g., Rinkeby, Ropsten, and Kovan) or custom nodes.\n\n## Code Requirements\n\n* Publishable API key\n* Custom node options (optional)\n* Support for ES Modules/TypeScript and CommonJS environments. \n\nThis setup allows for easy integration with Ethereum-based applications and provides a connection to the Ethereum blockchain for seamless interaction."}
{"code": "# \ud83d\udc64 Get User Info\n\n## Ethers.js\n\n```javascript\nimport { Magic } from 'magic-sdk';\nimport { ethers } from 'ethers';\n\nconst magic = new Magic(\"YOUR_PUBLISHABLE_API_KEY\");\nconst provider = new ethers.providers.Web3Provider(magic.rpcProvider);\n\n// \u2b50\ufe0f After user is successfully authenticated\n\nconst signer = provider.getSigner();\n\n// Get user's Ethereum public address\nconst address = await signer.getAddress();\n\n// Get user's balance in ether\nconst balance = ethers.utils.formatEther(\n  await provider.getBalance(userAddress) // Balance is in wei\n);\n```\n\n## Web3.js\n\n{% hint style=\"warning\" %}\nExample is using **`web3@1.2.0`** or later version.\n{% endhint %}\n\n```javascript\nimport { Magic } from \"magic-sdk\";\nimport Web3 from \"web3\";\n\nconst magic = new Magic(\"YOUR_PUBLISHABLE_API_KEY\");\nconst web3 = new Web3(magic.rpcProvider);\n\n// \u2b50\ufe0f After user is successfully authenticated\n\n// Get user's Ethereum public address\nconst address = (await web3.eth.getAccounts())[0];\n\n// Get user's balance in ether\nconst balance = web3.utils.fromWei(", "explanation": "**Summary:**\n\nThis code block retrieves a user's Ethereum public address and balance using the Magic SDK for authentication and either Ethers.js or Web3.js libraries. The functionality includes:\n\n* Initializing Magic SDK and setting up an Ethereum provider\n* Obtaining the user's Ethereum public address after authentication\n* Fetching the user's balance in Ether (converting from Wei)", "metadata": {"repo": "magiclabs/documentation", "file": "advanced/ethereum/get-user-info.md", "chunk_number": 1, "total_chunks": 2}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "The file 'advanced/ethereum/get-user-info.md' provides code examples to retrieve a user's Ethereum information using the Magic SDK for authentication. It covers the following functionalities:\n\n- Initialization of the Magic SDK and setup of an Ethereum provider.\n- Retrieval of the user's Ethereum public address after successful authentication.\n- Fetching of the user's balance in Ether, with conversion from Wei.\n- Additionally, it provides an example of retrieving the ether balance of a specified Ethereum address in wei using the `web3.eth.getBalance` function."}
{"code": "  await web3.eth.getBalance(address) // Balance is in wei\n);\n```\n\n", "explanation": "**Summary**\n\nThis code block retrieves the ether balance of a specified Ethereum address in wei, using the `web3.eth.getBalance` function.", "metadata": {"repo": "magiclabs/documentation", "file": "advanced/ethereum/get-user-info.md", "chunk_number": 2, "total_chunks": 2}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "The file 'advanced/ethereum/get-user-info.md' provides code examples to retrieve a user's Ethereum information using the Magic SDK for authentication. It covers the following functionalities:\n\n- Initialization of the Magic SDK and setup of an Ethereum provider.\n- Retrieval of the user's Ethereum public address after successful authentication.\n- Fetching of the user's balance in Ether, with conversion from Wei.\n- Additionally, it provides an example of retrieving the ether balance of a specified Ethereum address in wei using the `web3.eth.getBalance` function."}
{"code": "# iOS\n\n", "explanation": "No code or text is provided, only a header indicating that the block is related to iOS.", "metadata": {"repo": "magiclabs/documentation", "file": "advanced/ethereum/ios/README.md", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "Based on the information provided, a summary of the 'advanced/ethereum/ios/README.md' file is not possible since no actual content or code blocks were provided. However, I can provide a general outline of what a README file typically includes.\n\nA summary of the 'advanced/ethereum/ios/README.md' file would likely include:\n\n* An introduction to the purpose and functionality of the Ethereum iOS project\n* Prerequisites and requirements for setting up and running the project\n* Step-by-step instructions for installation, configuration, and usage\n* Information on any dependencies or third-party libraries used\n* Troubleshooting tips and known issues\n* Links to relevant documentation or resources for further learning\n\nPlease provide the actual code block summaries or content for a more accurate summary."}
{"code": "# \ud83d\ude80 Get Started\n\n## \ud83d\udce6 Installation\n\nTo interact with the Ethereum blockchain, Magic iOS SDK embeds __[`Web3.swift`](https://github.com/Boilertalk/Web3.swift) as sub dependency. No more extra dependency is needed.\n\n## \u26a1\ufe0f Initializing Provider\n\n{% hint style=\"info\" %}\nFollowing example is using Swift 5 with XCode 11. IOS demo will be open-sourced soon.\n{% endhint %}\n\n```swift\n// AppDelegate.swift\n\nimport MagicSDK\nimport UIKit\n\n@UIApplicationMain\nfunc application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {\n\n    // assign the newly created Magic instance to shared property\n    // Test key defaults to \"rinkeby\", live key defaults to \"mainnet\"\n    Magic.shared = Magic(\"YOUR_PUBLISHABLE_API_KEY\");\n    \n    return true\n}\n```\n\n```swift\n// ViewController.swift\n\nimport UIKit\nimport MagicSDK\nimport Web3\n\nclass Web3ViewController: UIViewController {\n\n    let web3 = Web3(provider: Magic.shared.rpcProvider)\n}\n\n```\n\n## \u2601\ufe0f Use Different Networks\n", "explanation": "The provided code block outlines the installation and setup process for the Magic iOS SDK, which allows interaction with the Ethereum blockchain. The main functionality includes:\n\n* Initializing the Magic SDK instance with a publishable API key\n* Creating a Web3 instance with the SDK's built-in RPC provider\n* Optionally configuring the SDK to use different Ethereum networks (mentioned but not shown in the code snippet)", "metadata": {"repo": "magiclabs/documentation", "file": "advanced/ethereum/ios/get-started.md", "chunk_number": 1, "total_chunks": 3}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "**Getting Started with Magic iOS SDK for Ethereum**\n\nThis guide outlines the setup process for integrating the Magic iOS SDK in a Swift-based iOS application to interact with the Ethereum blockchain. Key functionality includes:\n\n* Initializing the Magic SDK instance with a publishable API key\n* Creating a Web3 instance with the SDK's built-in RPC provider\n* Configuring the SDK for different Ethereum networks (testnets or custom nodes)\n\nThe configuration options allow for:\n\n* Connecting to specific Ethereum testnets (e.g., Rinkeby) by providing an API key and network type\n* Establishing a connection to custom nodes by specifying an RPC URL, chain ID, and API key\n\nThe provided code defines `CustomNodeConfiguration` for custom node setup and an `EthNetwork` enum to represent different Ethereum networks. This setup enables blockchain interactions in an iOS application using the Magic SDK."}
{"code": "### Choose Different Testnet\n\n```swift\n// AppDelegate.swift\nimport MagicSDK\n\nfunc application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {\n\n    // assign to Magic singleton \n    Magic.shared = Magic(\"YOUR_PUBLISHABLE_API_KEY\", EthNetwork.rinkeby);\n    \n    return true\n}\n```\n\n### Configure Custom Nodes\n\n```swift\n// AppDelegate.swift\nimport MagicSDK\n\n// assign to Magic singleton \nfunc application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {\n\n    let config = CustomNodeConfiguration(rpcUrl: \"https://alchemy.io\", chainId: 1)\n    Magic.shared = Magic(apiKey: \"API_KEY\", customNode: config);\n    \n    return true\n}\n```\n\n{% hint style=\"danger\" %}\nDon't set the custom nodes to local IP address \\(E.x. \"http://127.0.0.1\"\\). Local IP will point to the network environment inside mobile device / simulator \n{% endhint %}\n\n#### Associated Class\n", "explanation": "**Purpose and Functionality:**\n\nThe code block establishes a connection to the Magic SDK in an iOS application using Swift. It allows configuration of different Ethereum testnets (e.g., Rinkeby) or custom nodes using URL and chain ID. The code sets up the Magic singleton instance with the chosen network settings.\n\n**Configuration Options:**\n\n1. **Choose Different Testnet:** Set up a connection to a specific Ethereum testnet (e.g., Rinkeby) by providing a publishable API key and the network type.\n2. **Configure Custom Nodes:** Establish a connection to a custom node by specifying an RPC URL, chain ID, and API key.", "metadata": {"repo": "magiclabs/documentation", "file": "advanced/ethereum/ios/get-started.md", "chunk_number": 2, "total_chunks": 3}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "**Getting Started with Magic iOS SDK for Ethereum**\n\nThis guide outlines the setup process for integrating the Magic iOS SDK in a Swift-based iOS application to interact with the Ethereum blockchain. Key functionality includes:\n\n* Initializing the Magic SDK instance with a publishable API key\n* Creating a Web3 instance with the SDK's built-in RPC provider\n* Configuring the SDK for different Ethereum networks (testnets or custom nodes)\n\nThe configuration options allow for:\n\n* Connecting to specific Ethereum testnets (e.g., Rinkeby) by providing an API key and network type\n* Establishing a connection to custom nodes by specifying an RPC URL, chain ID, and API key\n\nThe provided code defines `CustomNodeConfiguration` for custom node setup and an `EthNetwork` enum to represent different Ethereum networks. This setup enables blockchain interactions in an iOS application using the Magic SDK."}
{"code": "`CustomNodeConfiguration(rpcUrl: String, chainId: Int?)`\n\n* `rpcUrl` :Your own node URL\n* `chainId` : Your own node's chainId \n\n`EthNetwork`\n\n```swift\npublic enum EthNetwork: String {\n    case mainnet\n    case kovan\n    case rinkeby\n    case ropsten\n}\n```\n\n", "explanation": "This Swift code defines a `CustomNodeConfiguration` initializer and an `EthNetwork` enum. The purpose is to configure and represent different Ethereum network configurations.\n\n* `CustomNodeConfiguration` is used to create a custom node configuration by specifying a custom RPC URL and optional chain ID.\n* `EthNetwork` enum represents the different Ethereum networks (mainnet, kovan, rinkeby, ropsten), which can likely be used to configure a node or make API calls to a specific network.", "metadata": {"repo": "magiclabs/documentation", "file": "advanced/ethereum/ios/get-started.md", "chunk_number": 3, "total_chunks": 3}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "**Getting Started with Magic iOS SDK for Ethereum**\n\nThis guide outlines the setup process for integrating the Magic iOS SDK in a Swift-based iOS application to interact with the Ethereum blockchain. Key functionality includes:\n\n* Initializing the Magic SDK instance with a publishable API key\n* Creating a Web3 instance with the SDK's built-in RPC provider\n* Configuring the SDK for different Ethereum networks (testnets or custom nodes)\n\nThe configuration options allow for:\n\n* Connecting to specific Ethereum testnets (e.g., Rinkeby) by providing an API key and network type\n* Establishing a connection to custom nodes by specifying an RPC URL, chain ID, and API key\n\nThe provided code defines `CustomNodeConfiguration` for custom node setup and an `EthNetwork` enum to represent different Ethereum networks. This setup enables blockchain interactions in an iOS application using the Magic SDK."}
{"code": "# \ud83d\udc64 Get User Info\n\n```swift\nimport MagicSDK\nimport Web3\nimport PromiseKit\n\nclass Web3ViewController: UIViewController {\n\n    var web3 = Web3(provider: Magic.shared.rpcProvider)\n    \n    // \u2b50\ufe0f After user is successfully authenticated\n    @IBOutlet weak var accountLabel: UILabel!\n    \n    func getAccount() {\n    \n        firstly {\n            // Get user's Ethereum public address\n            web3.eth.accounts()\n        }.done { accounts -> Void in\n            if let account = accounts.first {\n                // Set to UILa\n                self.accountLabel.text = account.hex(eip55: false)\n            } else {\n                print(\"No Account Found\")\n            }\n        }.catch { error in\n            print(\"Error loading accounts and balance: \\(error)\")\n        }\n    }\n}\n```\n\n", "explanation": "**User Info Retrieval Functionality**\n\nThis block retrieves and displays a user's Ethereum public address after successful authentication using the Magic SDK and Web3 libraries. The `getAccount()` function fetches the user's account addresses, extracts the first address, and updates a UI label with the address.", "metadata": {"repo": "magiclabs/documentation", "file": "advanced/ethereum/ios/get-user-info.md", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "The 'advanced/ethereum/ios/get-user-info.md' file provides documentation on a functionality that retrieves a user's Ethereum public address after authentication using Magic SDK and Web3 libraries. This is achieved through the `getAccount()` function, which fetches the user's account addresses, extracts the first address, and updates a UI label to display the retrieved address."}
{"code": "# \ud83d\udcb8 Send Transaction\n\n```swift\nimport MagicSDK\nimport Web3\n\nclass Web3ViewController: UIViewController {\n\n    var web3 = Web3(provider: Magic.shared.rpcProvider)\n    var account: EthereumAddress?\n    \n    // \u2b50\ufe0f After user is successfully authenticated\n    func sendTransaction() {\n    \n        guard let account = self.account else { return }\n        \n        // Construct a transaction\n        let transaction = EthereumTransaction(\n            from: account, // from Get User Info section\n            to: EthereumAddress(hexString: \"0xE0cef4417a772512E6C95cEf366403839b0D6D6D\"), \n            value: EthereumQuantity(quantity: 1.gwei)\n        )\n        \n        // Submit transaction to the blockchain\n        web3.eth.sendTransaction(transaction: transaction).done { (transactionHash) in\n            print(transactionHash.hex())\n        }.catch { error in\n            print(error.localizedDescription)\n        }\n    }\n}\n```\n\n", "explanation": "**Summary:**\n\nThis code block, written in Swift, enables a user to send an Ethereum transaction to the blockchain. It utilizes the Web3 and Magic SDK libraries to construct and submit the transaction. When executed, it sends 1 Gwei (a small unit of Ether) from the user's authenticated account to a specified recipient address, then prints the transaction hash upon completion or an error message if the transaction fails.", "metadata": {"repo": "magiclabs/documentation", "file": "advanced/ethereum/ios/send-transaction.md", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "## Send Ethereum Transaction on iOS\n\nThe 'advanced/ethereum/ios/send-transaction.md' file provides a Swift implementation for sending an Ethereum transaction to the blockchain. Utilizing Web3 and Magic SDK libraries, it facilitates sending a small unit of Ether (1 Gwei) from an authenticated account to a specified recipient address, logging the transaction hash upon success or error if the transaction fails."}
{"code": "# \u270f\ufe0f Sign Message\n\nMagic IOS SDK extends the functionality from Web3.swift to allow developers to sign Typed Data. Make sure to `import MagicSDK` while using these functions.\n\n{% tabs %}\n{% tab title=\"Eth Sign\" %}\n```swift\nimport MagicSDK\nimport Web3\nimport PromiseKit\n\nclass ViewController: UIViewController {\n\n    let web3 = Web3(provider: Magic.shared.rpcProvider)\n    var account: EthereumAddress?\n    \n    func ethSign() {\n        guard let account = self.account else { return }\n        \n        let message = try! EthereumData(\"Hello World\".data(using: .utf8)!)\n        web3.eth.sign(from: account, message: message).done({ result in\n            print(result.hex())\n        })\n    }\n}    \n```\n{% endtab %}\n\n{% tab title=\"Sign Typed Data Legacy \\(V1\\)\" %}\n```swift\nimport MagicSDK\nimport Web3\nimport PromiseKit\n\nclass Web3ViewController: UIViewController {\n\n    let web3 = Web3(provider: Magic.shared.rpcProvider)\n    var account: EthereumAddress?\n    \n    func SignTypedDataLegacy() {", "explanation": "**Purpose and Functionality Summary:**\n\nThis code block demonstrates how to use the Magic IOS SDK to sign messages and typed data using Ethereum. It provides two examples: `ethSign` for signing plain text messages, and `SignTypedDataLegacy` for signing typed data (V1 legacy). The signing process uses the `web3.eth.sign()` function from the Web3.swift library, integrated with Magic SDK.", "metadata": {"repo": "magiclabs/documentation", "file": "advanced/ethereum/ios/sign-message.md", "chunk_number": 1, "total_chunks": 3}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "**Advanced Ethereum IOS Signing**\n\nThe 'sign-message.md' file demonstrates how to sign messages and typed data using the Magic IOS SDK and Web3.swift library. It provides two signing examples: `ethSign` for plain text messages and `SignTypedDataLegacy` for signing typed data (V1 legacy) using Ethereum Improvement Proposal (EIP) 712. The code:\n\n* Retrieves the user's Ethereum account\n* Creates a typed data payload using EIP-712 JSON object\n* Signs the payload using the user's account and Web3 library\n* Prints the signed result in hexadecimal format\n\nThis example showcases generating and signing a typed data object according to the Ethereum ERC-712 standard, using a JSON object with specific properties. It enables converting the JSON object to a Swift `EIP712TypedData` object and signing it using a specified Ethereum account."}
{"code": "        guard let account = self.account else { return }\n        \n        let payload = EIP712TypedDataLegacyFields(type: \"string\", name: \"Hello from Magic Labs\", value: \"This message will be signed by you\")\n\n        web3.eth.signTypedDataLegacy(account: account, data: [payload]).done({ result in\n            print(result.hex())\n        })\n    }\n}    \n```\n{% endtab %}\n\n{% tab title=\"Sign Typed Data \\(EIP 712\\)\" %}\n```swift\nimport MagicSDK\nimport Web3\n\nclass Web3ViewController: UIViewController {\n\n    let web3 = Web3(provider: Magic.shared.rpcProvider)\n    var account: EthereumAddress?\n    \n    func SignTypedData() {\n        guard let account = self.account else { return }\n            \n        do {\n            let json = \"\"\"", "explanation": "This block signs typed data using the Ethereum Improvement Proposal (EIP) 712 and the Web3 framework. It: \n\n- Retrieves the user's Ethereum account, exiting if not available.\n- Creates a payload with typed data fields (type, name, value).\n- Signs this payload using the user's account and Web3.\n- Prints the signed result in hexadecimal format.", "metadata": {"repo": "magiclabs/documentation", "file": "advanced/ethereum/ios/sign-message.md", "chunk_number": 2, "total_chunks": 3}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "**Advanced Ethereum IOS Signing**\n\nThe 'sign-message.md' file demonstrates how to sign messages and typed data using the Magic IOS SDK and Web3.swift library. It provides two signing examples: `ethSign` for plain text messages and `SignTypedDataLegacy` for signing typed data (V1 legacy) using Ethereum Improvement Proposal (EIP) 712. The code:\n\n* Retrieves the user's Ethereum account\n* Creates a typed data payload using EIP-712 JSON object\n* Signs the payload using the user's account and Web3 library\n* Prints the signed result in hexadecimal format\n\nThis example showcases generating and signing a typed data object according to the Ethereum ERC-712 standard, using a JSON object with specific properties. It enables converting the JSON object to a Swift `EIP712TypedData` object and signing it using a specified Ethereum account."}
{"code": "                {\"types\":{\"EIP712Domain\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"version\",\"type\":\"string\"},{\"name\":\"verifyingContract\",\"type\":\"address\"}],\"Greeting\":[{\"name\":\"contents\",\"type\":\"string\"}]},\"primaryType\":\"Greeting\",\"domain\":{\"name\":\"Magic\",\"version\":\"1\",\"verifyingContract\":\"0xE0cef4417a772512E6C95cEf366403839b0D6D6D\"},\"message\":{\"contents\":\"Hello, from Magic!\"}}\n            \"\"\".data(using: .utf8)!\n            let typedData = try JSONDecoder().decode(EIP712TypedData.self, from: json)\n                \n            web3.eth.signTypedData(account: account, data: typedData).done({ result in\n                print(result.hex())\n            })\n        } catch {\n            print(error.localizedDescription)\n        }\n    }\n}    \n```\n{% endtab %}\n{% endtabs %}\n\n\n\n", "explanation": "This block of code is designed to generate and sign a typed data object according to the Ethereum's ERC-712 standard using a JSON object containing specific properties. \n\nHere's a concise summary of its functionality:\n- It defines the structure of the typed data through an EIP-712 JSON object.\n- It converts the JSON object into a Swift `EIP712TypedData` object using a `JSONDecoder`.\n- It then uses the Web3 library to sign the typed data using a specified Ethereum account.\n- Finally, it prints the hexadecimal representation of the signed data or an error message if the process fails.", "metadata": {"repo": "magiclabs/documentation", "file": "advanced/ethereum/ios/sign-message.md", "chunk_number": 3, "total_chunks": 3}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "**Advanced Ethereum IOS Signing**\n\nThe 'sign-message.md' file demonstrates how to sign messages and typed data using the Magic IOS SDK and Web3.swift library. It provides two signing examples: `ethSign` for plain text messages and `SignTypedDataLegacy` for signing typed data (V1 legacy) using Ethereum Improvement Proposal (EIP) 712. The code:\n\n* Retrieves the user's Ethereum account\n* Creates a typed data payload using EIP-712 JSON object\n* Signs the payload using the user's account and Web3 library\n* Prints the signed result in hexadecimal format\n\nThis example showcases generating and signing a typed data object according to the Ethereum ERC-712 standard, using a JSON object with specific properties. It enables converting the JSON object to a Swift `EIP712TypedData` object and signing it using a specified Ethereum account."}
{"code": "# \ud83d\udcdc Smart Contract\n\n## Solidity Contract\n\nIn this example, we'll be demonstrating how to use Magic with Web3.swift to interact with Solidity smart contracts. The simple Hello World contract allows anyone to read and write a message to it.\n\n```javascript\npragma solidity ^0.5.10;\n\ncontract HelloWorld {\n\n  string public message;\n    \n  constructor(string memory initMessage) public {\n    message = initMessage;\n  }\n\n  function update(string memory newMessage) public {\n    message = newMessage;\n  }\n}\n```\n\n### Deploy Contract\n\n```swift\nimport MagicSDK\nimport Web3\n\nclass Web3ViewController: UIViewController {\n\n    let web3 = Web3(provider: Magic.shared.rpcProvider)\n    var account: EthereumAddress?\n            // \u2b50\ufe0f After user is successfully authenticated\n    \n    func deployContract() {\n    \n        guard let account = self.account else { return }\n            \n        do {\n            let contractABI = \"\"\"", "explanation": "**Contract Summary:**\nThis block contains a simple Solidity smart contract named `HelloWorld` that stores a publicly readable string message. It allows anyone to read and write the message.\n\n**Functionality:**\n\n* The contract has a `message` variable that stores a string.\n* The contract has a `constructor` function that sets an initial message when the contract is deployed.\n* The contract has an `update` function that allows updating the stored message.\n\n**Deployment:**\nThe contract is deployed to the Ethereum blockchain using Web3.swift and Magic SDK in a Swift-based iOS application.", "metadata": {"repo": "magiclabs/documentation", "file": "advanced/ethereum/ios/smart-contract.md", "chunk_number": 1, "total_chunks": 8}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "**Holistic Summary of `advanced/ethereum/ios/smart-contract.md`**\n\nThis file provides a comprehensive overview of a simple Solidity smart contract named `HelloWorld`, its deployment on the Ethereum blockchain, and interaction with the contract in a Swift-based iOS application using Web3.swift and Magic SDK.\n\n**Smart Contract Overview:**\n\n* The contract stores a publicly readable string message.\n* It has a `message` variable, a `constructor` function to set an initial message, and an `update` function to update the stored message.\n\n**Contract Deployment and Interaction:**\n\n* The contract is deployed using Web3.swift and Magic SDK in a Swift application.\n* The contract's ABI (Application Binary Interface) and address are used to initialize a contract object.\n* A transaction is prepared to call the `update` function with a new message, specifying parameters such as sender's account, gas, and gas price.\n* The contract interaction includes sending an Ethereum transaction, handling potential errors, and retrieving the current message stored in the contract.\n\n**Purpose:**\n\nThe purpose of this code is to demonstrate the deployment and interaction with a simple Solidity smart contract on the Ethereum blockchain using a Swift-based iOS application."}
{"code": "                [{\"constant\":false,\"inputs\":[{\"name\":\"newMessage\",\"type\":\"string\"}],\"name\":\"update\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"message\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"initMessage\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]\n            \"\"\".data(using: .utf8)!", "explanation": "**Summary:**\n\nThis is a Solidity contract interface, outlining three main components:\n\n1. **Constructor**: Initializes a contract with a string `initMessage`.\n2. **Update function**: Updates a message with a new string value `newMessage`.\n3. **Message function**: Returns the current message as a string.\n\nIn essence, this contract allows for initializing and updating a string message.", "metadata": {"repo": "magiclabs/documentation", "file": "advanced/ethereum/ios/smart-contract.md", "chunk_number": 2, "total_chunks": 8}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "**Holistic Summary of `advanced/ethereum/ios/smart-contract.md`**\n\nThis file provides a comprehensive overview of a simple Solidity smart contract named `HelloWorld`, its deployment on the Ethereum blockchain, and interaction with the contract in a Swift-based iOS application using Web3.swift and Magic SDK.\n\n**Smart Contract Overview:**\n\n* The contract stores a publicly readable string message.\n* It has a `message` variable, a `constructor` function to set an initial message, and an `update` function to update the stored message.\n\n**Contract Deployment and Interaction:**\n\n* The contract is deployed using Web3.swift and Magic SDK in a Swift application.\n* The contract's ABI (Application Binary Interface) and address are used to initialize a contract object.\n* A transaction is prepared to call the `update` function with a new message, specifying parameters such as sender's account, gas, and gas price.\n* The contract interaction includes sending an Ethereum transaction, handling potential errors, and retrieving the current message stored in the contract.\n\n**Purpose:**\n\nThe purpose of this code is to demonstrate the deployment and interaction with a simple Solidity smart contract on the Ethereum blockchain using a Swift-based iOS application."}
{"code": "            let contractByteCode = try EthereumData(\"0x608060405234801561001057600080fd5b5060405161047f38038061047f8339818101604052602081101561003357600080fd5b81019080805164010000000081111561004b57600080fd5b8281019050602081018481111561006157600080fd5b815185600182028301116401000000008211171561007e57600080fd5b5050929190505050806000908051906020019061009c9291906100a3565b5050610148565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106100e457805160ff1916838001178555610112565b82800160010185558215610112579182015b828111156101115782518255916020019190600101906100f6565b5b50905061011f9190610123565b5090565b61014591905b80821115610141576000816000905550600101610129565b5090565b90565b610328806101576000396000f3fe608060405234801561001057600080fd5b5060043610610053576000357c0100000000000000000000000000000000000000000000000000000000900480633d7403a314610058578063e21f37ce14610113575b600080fd5b6101116004803603602081101561006e57600080fd5b810190808035906020019064010000000081111561008b57600080fd5b82018360208201111561009d57600080fd5b803590602001918460018302840111640100000000831117156100bf57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050610196565b005b61011b6101b0565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561015b578082015181840152602081019050610140565b50505050905090810190601f1680156101885780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b80600090805190602001906101ac92919061024e565b5050565b60008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156102465780601f1061021b57610100808354040283529160200191610246565b820191906000526020600020905b81548152906001019060200180831161022957829003601f168201915b505050505081565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061028f57805160ff19168380011785556102bd565b828001600101855582156102bd579182015b828111156102bc5782518255916020019190600101906102a1565b5b5090506102ca91906102ce565b5090565b6102f091905b808211156102ec5760008160009055506001016102d4565b5090565b9056fea265627a7a7230582003ae1ef5a63bf058bfd2b31398bdee39d3cbfbb7fbf84235f4bc2ec352ee810f64736f6c634300050a0032\")", "explanation": "This is a hexadecimal encoded smart contract bytecode on the Ethereum blockchain. It is written in Solidity and is represented as a string of hexadecimal characters.", "metadata": {"repo": "magiclabs/documentation", "file": "advanced/ethereum/ios/smart-contract.md", "chunk_number": 3, "total_chunks": 8}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "**Holistic Summary of `advanced/ethereum/ios/smart-contract.md`**\n\nThis file provides a comprehensive overview of a simple Solidity smart contract named `HelloWorld`, its deployment on the Ethereum blockchain, and interaction with the contract in a Swift-based iOS application using Web3.swift and Magic SDK.\n\n**Smart Contract Overview:**\n\n* The contract stores a publicly readable string message.\n* It has a `message` variable, a `constructor` function to set an initial message, and an `update` function to update the stored message.\n\n**Contract Deployment and Interaction:**\n\n* The contract is deployed using Web3.swift and Magic SDK in a Swift application.\n* The contract's ABI (Application Binary Interface) and address are used to initialize a contract object.\n* A transaction is prepared to call the `update` function with a new message, specifying parameters such as sender's account, gas, and gas price.\n* The contract interaction includes sending an Ethereum transaction, handling potential errors, and retrieving the current message stored in the contract.\n\n**Purpose:**\n\nThe purpose of this code is to demonstrate the deployment and interaction with a simple Solidity smart contract on the Ethereum blockchain using a Swift-based iOS application."}
{"code": "            \n            /// Create Contract instance\n            let contract = try web3.eth.Contract(json: contractABI, abiKey: nil, address: nil)\n            \n            /// Deploy contract\n            guard let invocation = contract.deploy(byteCode: contractByteCode) else { return }\n            invocation.send(from: self.account!, gas: 1025256, gasPrice: 0) { (hash, error) in\n                    print(hash?.hex() ?? \"Missing Hash\")\n                    print(error?.localizedDescription ?? \"Error\")\n                }\n        } catch {\n            print(error.localizedDescription)\n        }\n    }\n}    \n```\n\n### Read From Contract\n\n```javascript\nimport MagicSDK\nimport Web3\n\nclass MagicViewController: UIViewController {\n\n    let web3 = Web3(provider: Magic.shared.rpcProvider)\n    var account: EthereumAddress?\n    \n    // \u2b50\ufe0f After user is successfully authenticated\n    \n    func getMessage() {\n        \n        do {\n        \n            /// Construct contract instance\n            let contractABI = \"\"\"", "explanation": "**Purpose and Functionality Summary**\n\nThis code block is used to deploy an Ethereum smart contract using the Web3 library in a Swift application. It creates a new contract instance, deploys it to the blockchain, and prints the transaction hash and any errors that occur during the deployment process. The deployment parameters include the contract's byte code, account, gas limit, and gas price.", "metadata": {"repo": "magiclabs/documentation", "file": "advanced/ethereum/ios/smart-contract.md", "chunk_number": 4, "total_chunks": 8}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "**Holistic Summary of `advanced/ethereum/ios/smart-contract.md`**\n\nThis file provides a comprehensive overview of a simple Solidity smart contract named `HelloWorld`, its deployment on the Ethereum blockchain, and interaction with the contract in a Swift-based iOS application using Web3.swift and Magic SDK.\n\n**Smart Contract Overview:**\n\n* The contract stores a publicly readable string message.\n* It has a `message` variable, a `constructor` function to set an initial message, and an `update` function to update the stored message.\n\n**Contract Deployment and Interaction:**\n\n* The contract is deployed using Web3.swift and Magic SDK in a Swift application.\n* The contract's ABI (Application Binary Interface) and address are used to initialize a contract object.\n* A transaction is prepared to call the `update` function with a new message, specifying parameters such as sender's account, gas, and gas price.\n* The contract interaction includes sending an Ethereum transaction, handling potential errors, and retrieving the current message stored in the contract.\n\n**Purpose:**\n\nThe purpose of this code is to demonstrate the deployment and interaction with a simple Solidity smart contract on the Ethereum blockchain using a Swift-based iOS application."}
{"code": "                    [{\"constant\":false,\"inputs\":[{\"name\":\"newMessage\",\"type\":\"string\"}],\"name\":\"update\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"message\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"initMessage\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]\n                \"\"\".data(using: .utf8)!\n            let contract = try web3.eth.Contract(json: contractABI, abiKey: nil, address: EthereumAddress(ethereumValue: \"0x8b211dfebf490a648f6de859dfbed61fa22f35e0\"))\n                \n            /// contract call\n            contract[\"message\"]?().call() { response, error in\n                if let response = response, let message = response[\"\"] as? String {\n                    print(message.description)\n                } else {\n                    print(error?.localizedDescription ?? \"Failed to get response\")", "explanation": "**Summary: Smart Contract Functionality**\n\nThis code defines and interacts with a simple smart contract on the Ethereum blockchain. The contract has three functions:\n\n1. **Constructor**: Initializes the contract with a string message (`initMessage`).\n2. **Update Function**: Updates the contract's message with a new input string (`newMessage`).\n3. **Message Function**: Returns the current message stored in the contract.\n\nThe code then creates an instance of this contract, calls the `message` function to retrieve the current message, and prints the response.", "metadata": {"repo": "magiclabs/documentation", "file": "advanced/ethereum/ios/smart-contract.md", "chunk_number": 5, "total_chunks": 8}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "**Holistic Summary of `advanced/ethereum/ios/smart-contract.md`**\n\nThis file provides a comprehensive overview of a simple Solidity smart contract named `HelloWorld`, its deployment on the Ethereum blockchain, and interaction with the contract in a Swift-based iOS application using Web3.swift and Magic SDK.\n\n**Smart Contract Overview:**\n\n* The contract stores a publicly readable string message.\n* It has a `message` variable, a `constructor` function to set an initial message, and an `update` function to update the stored message.\n\n**Contract Deployment and Interaction:**\n\n* The contract is deployed using Web3.swift and Magic SDK in a Swift application.\n* The contract's ABI (Application Binary Interface) and address are used to initialize a contract object.\n* A transaction is prepared to call the `update` function with a new message, specifying parameters such as sender's account, gas, and gas price.\n* The contract interaction includes sending an Ethereum transaction, handling potential errors, and retrieving the current message stored in the contract.\n\n**Purpose:**\n\nThe purpose of this code is to demonstrate the deployment and interaction with a simple Solidity smart contract on the Ethereum blockchain using a Swift-based iOS application."}
{"code": "                }\n            }\n        } catch {\n            /// Error handling \n            print(error.localizedDescription)\n        }\n    }\n}   \n```\n\n### Write to Contract\n\n```javascript\nimport MagicSDK\nimport Web3\n\nclass MagicViewController: UIViewController {\n\n    let web3 = Web3(provider: Magic.shared.rpcProvider)\n    var account: EthereumAddress?\n    \n    // \u2b50\ufe0f After user is successfully authenticated\n    \n    func writeMessage() {\n    \n        guard let account = self.account else { return }\n            \n        do {\n            /// contract instance\n            let contractABI = \"\"\"", "explanation": "**Summary**\n\nThis block is part of a Swift class for interacting with the Ethereum blockchain using the Magic SDK and Web3 libraries. The code snippet appears to be setting up a contract instance for writing a message, but the contract details and functionality are incomplete. The code also includes basic error handling with a catch block to print error messages.", "metadata": {"repo": "magiclabs/documentation", "file": "advanced/ethereum/ios/smart-contract.md", "chunk_number": 6, "total_chunks": 8}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "**Holistic Summary of `advanced/ethereum/ios/smart-contract.md`**\n\nThis file provides a comprehensive overview of a simple Solidity smart contract named `HelloWorld`, its deployment on the Ethereum blockchain, and interaction with the contract in a Swift-based iOS application using Web3.swift and Magic SDK.\n\n**Smart Contract Overview:**\n\n* The contract stores a publicly readable string message.\n* It has a `message` variable, a `constructor` function to set an initial message, and an `update` function to update the stored message.\n\n**Contract Deployment and Interaction:**\n\n* The contract is deployed using Web3.swift and Magic SDK in a Swift application.\n* The contract's ABI (Application Binary Interface) and address are used to initialize a contract object.\n* A transaction is prepared to call the `update` function with a new message, specifying parameters such as sender's account, gas, and gas price.\n* The contract interaction includes sending an Ethereum transaction, handling potential errors, and retrieving the current message stored in the contract.\n\n**Purpose:**\n\nThe purpose of this code is to demonstrate the deployment and interaction with a simple Solidity smart contract on the Ethereum blockchain using a Swift-based iOS application."}
{"code": "                [{\"constant\":false,\"inputs\":[{\"name\":\"newMessage\",\"type\":\"string\"}],\"name\":\"update\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"message\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"initMessage\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]\n            \"\"\".data(using: .utf8)!\n            let contract = try web3.eth.Contract(json: contractABI, abiKey: nil, address: EthereumAddress(ethereumValue: \"0x8b211dfebf490a648f6de859dfbed61fa22f35e0\"))\n            \n            /// contract call\n            guard let transaction = contract[\"update\"]?(\"NEW_MESSAGE\").createTransaction(\n                nonce: 0, \n                from: account, \n                value: 0, \n                gas: EthereumQuantity(150000), \n                gasPrice: EthereumQuantity(quantity: 21.gwei)", "explanation": "This block of code is used to interact with a smart contract deployed on the Ethereum blockchain. \n\nFunctionality:\n- Defines the contract's ABI (Application Binary Interface) which outlines the contract's functions and their parameters.\n- Initializes a contract object using the ABI and a specific contract address.\n- Prepares a transaction to call the `update` function of the contract with a new message, specifying parameters such as the sender's account, gas, and gas price.", "metadata": {"repo": "magiclabs/documentation", "file": "advanced/ethereum/ios/smart-contract.md", "chunk_number": 7, "total_chunks": 8}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "**Holistic Summary of `advanced/ethereum/ios/smart-contract.md`**\n\nThis file provides a comprehensive overview of a simple Solidity smart contract named `HelloWorld`, its deployment on the Ethereum blockchain, and interaction with the contract in a Swift-based iOS application using Web3.swift and Magic SDK.\n\n**Smart Contract Overview:**\n\n* The contract stores a publicly readable string message.\n* It has a `message` variable, a `constructor` function to set an initial message, and an `update` function to update the stored message.\n\n**Contract Deployment and Interaction:**\n\n* The contract is deployed using Web3.swift and Magic SDK in a Swift application.\n* The contract's ABI (Application Binary Interface) and address are used to initialize a contract object.\n* A transaction is prepared to call the `update` function with a new message, specifying parameters such as sender's account, gas, and gas price.\n* The contract interaction includes sending an Ethereum transaction, handling potential errors, and retrieving the current message stored in the contract.\n\n**Purpose:**\n\nThe purpose of this code is to demonstrate the deployment and interaction with a simple Solidity smart contract on the Ethereum blockchain using a Swift-based iOS application."}
{"code": "                ) else { return }\n                \n            web3.eth.sendTransaction(transaction: transaction).done({ txHash in\n                print(txHash.hex())\n            }).catch{ error in\n                print(error.localizedDescription)\n            }\n        } catch {\n            print(error.localizedDescription)\n        }\n    }\n}   \n```\n\n", "explanation": "This block of code sends an Ethereum transaction using Web3 and handles potential errors. It:\n\n- Attempts to send the transaction\n- If successful, prints the transaction hash\n- If an error occurs, catches and prints the error description.", "metadata": {"repo": "magiclabs/documentation", "file": "advanced/ethereum/ios/smart-contract.md", "chunk_number": 8, "total_chunks": 8}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "**Holistic Summary of `advanced/ethereum/ios/smart-contract.md`**\n\nThis file provides a comprehensive overview of a simple Solidity smart contract named `HelloWorld`, its deployment on the Ethereum blockchain, and interaction with the contract in a Swift-based iOS application using Web3.swift and Magic SDK.\n\n**Smart Contract Overview:**\n\n* The contract stores a publicly readable string message.\n* It has a `message` variable, a `constructor` function to set an initial message, and an `update` function to update the stored message.\n\n**Contract Deployment and Interaction:**\n\n* The contract is deployed using Web3.swift and Magic SDK in a Swift application.\n* The contract's ABI (Application Binary Interface) and address are used to initialize a contract object.\n* A transaction is prepared to call the `update` function with a new message, specifying parameters such as sender's account, gas, and gas price.\n* The contract interaction includes sending an Ethereum transaction, handling potential errors, and retrieving the current message stored in the contract.\n\n**Purpose:**\n\nThe purpose of this code is to demonstrate the deployment and interaction with a simple Solidity smart contract on the Ethereum blockchain using a Swift-based iOS application."}
{"code": "# JavaScript\n\n", "explanation": "There is no code or text provided to summarize. Please provide the JavaScript code or text for a concise summary of its purpose and functionality.", "metadata": {"repo": "magiclabs/documentation", "file": "advanced/ethereum/javascript/README.md", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "Unfortunately, you haven't provided the necessary code or text summaries. However, I can provide a concise template for a README file based on a typical Ethereum JavaScript project. Here's an example:\n\n**README.md**\n```markdown\n# Ethereum JavaScript Project\n==========================\n\n## Overview\n---------------\n\nThis project provides a comprehensive guide to building advanced Ethereum applications using JavaScript.\n\n## Functionality\n----------------\n\n*   **Ethereum Node Interaction**: Connect to Ethereum nodes using Web3.js or Ethers.js libraries.\n*   **Smart Contract Deployment**: Deploy smart contracts written in Solidity using JavaScript.\n*   **Contract Interaction**: Interact with deployed smart contracts using JavaScript.\n*   **Event Listening**: Listen to events emitted by smart contracts using JavaScript.\n\n## Usage\n-----\n\n### Prerequisites\n\n*   Node.js (version 14 or higher)\n*   Ethereum development environment (e.g., Ganache, Hardhat)\n\n### Installation\n\n```bash\nnpm install\n```\n\n### Running the Project\n\n```bash\nnpm run start\n```\n\n### Contributing\n\nContributions are welcome. Please submit pull requests or issues on the GitHub repository.\n\n### License\n\nThis project is licensed under the MIT License. See [LICENSE](LICENSE) for more information.\n```\n\nPlease note that this is a basic template, and you should customize it according to your project's specific needs and requirements. \n\nAlso, you can modify this based on your necessities."}
{"code": "# \ud83d\ude80 Get Started\n\n## \ud83d\udce6 Installation\n\nTo interact with the Ethereum blockchain, you can use _either_ [`ethers.js`](https://docs.ethers.io/ethers.js/html/getting-started.html) or [`web3.js`](https://web3js.readthedocs.io/en/v1.2.8/getting-started.html) libraries with Magic.\n\n{% hint style=\"info\" %}\nIf you are already familiar with Ethereum application development, you can skip straight to our kitchen sink examples:\n\n\ud83d\udc49 [**Ethers.js Example**](https://go.magic.link/example-ethers)  \n\ud83d\udc49 [**Web3.js Example**](https://go.magic.link/example-web3)\\*\\*\\*\\*\n{% endhint %}\n\n### Ethers.js\n\n{% tabs %}\n{% tab title=\"NPM\" %}\n```bash\nnpm install --save ethers\n```\n{% endtab %}\n\n{% tab title=\"Yarn\" %}\n```bash\nyarn add ethers\n```\n{% endtab %}\n\n{% tab title=\"CDN\" %}\n```markup\n<script src=\"https://cdn.ethers.io/scripts/ethers-v4.min.js\"></script>\n```\n{% endtab %}\n{% endtabs %}\n\n### Web3.js\n\n{% tabs %}\n{% tab title=\"NPM\" %}\n```bash\nnpm install --save web3\n```\n{% endtab %}\n\n{% tab title=\"Yarn\" %}\n```bash\nyarn add web3\n```\n{% endtab %}\n\n{% tab title=\"CDN\" %}", "explanation": "This block provides instructions for installing either `ethers.js` or `web3.js` libraries to interact with the Ethereum blockchain, using various package managers (NPM, Yarn) or a Content Delivery Network (CDN).", "metadata": {"repo": "magiclabs/documentation", "file": "advanced/ethereum/javascript/get-started.md", "chunk_number": 1, "total_chunks": 4}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "# Getting Started with Magic SDK on Ethereum in JavaScript\n\nThis guide explains how to set up a connection to the Ethereum blockchain using the Magic SDK in a JavaScript environment. \n\n## Prerequisites\n\n* Choose a library to interact with Ethereum (either `ethers.js` or `web3.js`)\n* Choose a package manager (NPM or Yarn) or a Content Delivery Network (CDN)\n* Obtain a publishable API key for Magic SDK\n\n## Steps\n\n1. Install the chosen library using the package manager or CDN.\n2. Initialize a Magic instance with a publishable API key and optional custom node options.\n3. Create a web3 provider (either `ethers.js` or `web3.js`) using the Magic instance's RPC provider.\n4. Configure testnets (Rinkeby, Ropsten, Kovan) or custom node configuration with a specific RPC URL and chain ID if needed.\n\n## Result\n\nAfter following these steps, you can interact with the Ethereum blockchain using the created provider and Magic instance.\n\n**Example Code**\n\nThe usage examples can be seen in two main blocks: \n* Initializing web3 providers for Ethereum using Magic SDK\n* Initializing Magic and Web3 libraries for interacting with the Ethereum blockchain\n\nPlease refer to the provided code blocks in the file for more information on the usage and implementation. \n\n**Usability**\n\nThe provided code is compatible with both Ethers.js and Web3.js libraries in both ES Modules/TypeScript and CommonJS formats, providing flexibility in choosing the development stack."}
{"code": "```markup\n<script src=\"https://cdn.jsdelivr.net/npm/web3@latest/dist/web3.min.js\"></script>\n```\n{% endtab %}\n{% endtabs %}\n\n## \u26a1\ufe0f Initializing Provider\n\n{% hint style=\"warning\" %}\nEthereum provider is only supported in **`magic-sdk@1.0.1`** or later version.\n{% endhint %}\n\n### Ethers.js\n\n{% tabs %}\n{% tab title=\"ES Modules/TypeScript\" %}\n```typescript\nimport { Magic } from 'magic-sdk';\nimport { ethers } from 'ethers';\n\n// Test key defaults to \"rinkeby\", live key defaults to \"mainnet\"\nconst magic = new Magic(\"YOUR_PUBLISHABLE_API_KEY\");\nconst provider = new ethers.providers.Web3Provider(magic.rpcProvider);\n```\n{% endtab %}\n\n{% tab title=\"CommonJS\" %}\n```typescript\nconst { Magic } = require('magic-sdk');\nconst ethers = require('ethers');\n\n// Test key defaults to \"rinkeby\", live key defaults to \"mainnet\"\nconst magic = new Magic(\"YOUR_PUBLISHABLE_API_KEY\");\nconst provider = new ethers.providers.Web3Provider(magic.rpcProvider);\n```\n{% endtab %}\n{% endtabs %}\n\n### Web3.js\n\n{% tabs %}\n{% tab title=\"ES Modules/TypeScript\" %}", "explanation": "The provided code is initializing web3 providers for Ethereum using Magic SDK. \n\n**Purpose:** To set up a connection to the Ethereum blockchain using Magic SDK.\n\n**Functionality:**\n\n1. Importing necessary libraries (Magic SDK and either Ethers.js or Web3.js).\n2. Initializing a Magic instance with a publishable API key.\n3. Creating a web3 provider (Ethers.js or Web3.js) using the Magic instance's RPC provider.\n4. Allowing for Ethereum blockchain interactions via the created provider.\n\n**Note:** The code is usable with either Ethers.js or Web3.js, and in both ES Modules/TypeScript and CommonJS formats.", "metadata": {"repo": "magiclabs/documentation", "file": "advanced/ethereum/javascript/get-started.md", "chunk_number": 2, "total_chunks": 4}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "# Getting Started with Magic SDK on Ethereum in JavaScript\n\nThis guide explains how to set up a connection to the Ethereum blockchain using the Magic SDK in a JavaScript environment. \n\n## Prerequisites\n\n* Choose a library to interact with Ethereum (either `ethers.js` or `web3.js`)\n* Choose a package manager (NPM or Yarn) or a Content Delivery Network (CDN)\n* Obtain a publishable API key for Magic SDK\n\n## Steps\n\n1. Install the chosen library using the package manager or CDN.\n2. Initialize a Magic instance with a publishable API key and optional custom node options.\n3. Create a web3 provider (either `ethers.js` or `web3.js`) using the Magic instance's RPC provider.\n4. Configure testnets (Rinkeby, Ropsten, Kovan) or custom node configuration with a specific RPC URL and chain ID if needed.\n\n## Result\n\nAfter following these steps, you can interact with the Ethereum blockchain using the created provider and Magic instance.\n\n**Example Code**\n\nThe usage examples can be seen in two main blocks: \n* Initializing web3 providers for Ethereum using Magic SDK\n* Initializing Magic and Web3 libraries for interacting with the Ethereum blockchain\n\nPlease refer to the provided code blocks in the file for more information on the usage and implementation. \n\n**Usability**\n\nThe provided code is compatible with both Ethers.js and Web3.js libraries in both ES Modules/TypeScript and CommonJS formats, providing flexibility in choosing the development stack."}
{"code": "```typescript\nimport { Magic } from 'magic-sdk';\nimport Web3 from 'web3';\n\n// Test key defaults to \"rinkeby\", live key defaults to \"mainnet\"\nconst magic = new Magic(\"YOUR_PUBLISHABLE_API_KEY\");\nconst web3 = new Web3(magic.rpcProvider); // Or window.web3 = ...\n```\n{% endtab %}\n\n{% tab title=\"CommonJS\" %}\n```typescript\nconst { Magic } = require('magic-sdk');\nconst Web3 = require('web3');\n\n// Test key defaults to \"rinkeby\", live key defaults to \"mainnet\"\nconst magic = new Magic(\"YOUR_PUBLISHABLE_API_KEY\");\nconst web3 = new Web3(magic.rpcProvider); // Or window.web3 = ...\n```\n{% endtab %}\n{% endtabs %}\n\n## \u2601\ufe0f Use Different Networks\n\n### Choose Different Testnet\n\n```javascript\nconst magic = new Magic(\"YOUR_PUBLISHABLE_API_KEY\", {\n  network: \"ropsten\" // Supports \"rinkeby\", \"ropsten\", \"kovan\"\n});\n```\n\n### Configure Custom Nodes\n\n```javascript\nconst customNodeOptions = {\n  rpcUrl: 'http://127.0.0.1:7545', // Your own node URL\n  chainId: 1011 // Your own node's chainId \n}\n\n// Setting network to localhost blockchain", "explanation": "**Purpose and Functionality:**\n\nThis code block initializes Magic and Web3 libraries for interacting with the Ethereum blockchain. It sets up a Magic instance with a publishable API key and creates a Web3 instance using the Magic RPC provider. \n\n**Key Functionality:**\n\n1. Initializes Magic with a publishable API key.\n2. Sets up a Web3 instance using the Magic RPC provider.\n3. Allows configuration of different testnets (e.g., Rinkeby, Ropsten, Kovan).\n4. Enables custom node configuration with a specific RPC URL and chain ID.", "metadata": {"repo": "magiclabs/documentation", "file": "advanced/ethereum/javascript/get-started.md", "chunk_number": 3, "total_chunks": 4}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "# Getting Started with Magic SDK on Ethereum in JavaScript\n\nThis guide explains how to set up a connection to the Ethereum blockchain using the Magic SDK in a JavaScript environment. \n\n## Prerequisites\n\n* Choose a library to interact with Ethereum (either `ethers.js` or `web3.js`)\n* Choose a package manager (NPM or Yarn) or a Content Delivery Network (CDN)\n* Obtain a publishable API key for Magic SDK\n\n## Steps\n\n1. Install the chosen library using the package manager or CDN.\n2. Initialize a Magic instance with a publishable API key and optional custom node options.\n3. Create a web3 provider (either `ethers.js` or `web3.js`) using the Magic instance's RPC provider.\n4. Configure testnets (Rinkeby, Ropsten, Kovan) or custom node configuration with a specific RPC URL and chain ID if needed.\n\n## Result\n\nAfter following these steps, you can interact with the Ethereum blockchain using the created provider and Magic instance.\n\n**Example Code**\n\nThe usage examples can be seen in two main blocks: \n* Initializing web3 providers for Ethereum using Magic SDK\n* Initializing Magic and Web3 libraries for interacting with the Ethereum blockchain\n\nPlease refer to the provided code blocks in the file for more information on the usage and implementation. \n\n**Usability**\n\nThe provided code is compatible with both Ethers.js and Web3.js libraries in both ES Modules/TypeScript and CommonJS formats, providing flexibility in choosing the development stack."}
{"code": "const magic = new Magic('YOUR_PUBLISHABLE_API_KEY', { network: customNodeOptions });\n```\n\n", "explanation": "**Magic SDK Initialization Block**\n====================================\n\nThis block initializes the Magic SDK, a cryptocurrency and authentication platform, with a publishable API key and custom node options. It sets up the connection for subsequent interactions with the Magic network.", "metadata": {"repo": "magiclabs/documentation", "file": "advanced/ethereum/javascript/get-started.md", "chunk_number": 4, "total_chunks": 4}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "# Getting Started with Magic SDK on Ethereum in JavaScript\n\nThis guide explains how to set up a connection to the Ethereum blockchain using the Magic SDK in a JavaScript environment. \n\n## Prerequisites\n\n* Choose a library to interact with Ethereum (either `ethers.js` or `web3.js`)\n* Choose a package manager (NPM or Yarn) or a Content Delivery Network (CDN)\n* Obtain a publishable API key for Magic SDK\n\n## Steps\n\n1. Install the chosen library using the package manager or CDN.\n2. Initialize a Magic instance with a publishable API key and optional custom node options.\n3. Create a web3 provider (either `ethers.js` or `web3.js`) using the Magic instance's RPC provider.\n4. Configure testnets (Rinkeby, Ropsten, Kovan) or custom node configuration with a specific RPC URL and chain ID if needed.\n\n## Result\n\nAfter following these steps, you can interact with the Ethereum blockchain using the created provider and Magic instance.\n\n**Example Code**\n\nThe usage examples can be seen in two main blocks: \n* Initializing web3 providers for Ethereum using Magic SDK\n* Initializing Magic and Web3 libraries for interacting with the Ethereum blockchain\n\nPlease refer to the provided code blocks in the file for more information on the usage and implementation. \n\n**Usability**\n\nThe provided code is compatible with both Ethers.js and Web3.js libraries in both ES Modules/TypeScript and CommonJS formats, providing flexibility in choosing the development stack."}
{"code": "# \ud83d\udc64 Get User Info\n\n## Ethers.js\n\n```javascript\nimport { Magic } from 'magic-sdk';\nimport { ethers } from 'ethers';\n\nconst magic = new Magic(\"YOUR_PUBLISHABLE_API_KEY\");\nconst provider = new ethers.providers.Web3Provider(magic.rpcProvider);\n\n// \u2b50\ufe0f After user is successfully authenticated\n\nconst signer = provider.getSigner();\n\n// Get user's Ethereum public address\nconst address = await signer.getAddress();\n\n// Get user's balance in ether\nconst balance = ethers.utils.formatEther(\n  await provider.getBalance(userAddress) // Balance is in wei\n);\n```\n\n## Web3.js\n\n{% hint style=\"warning\" %}\nExample is using **`web3@1.2.0`** or later version.\n{% endhint %}\n\n```javascript\nimport { Magic } from \"magic-sdk\";\nimport Web3 from \"web3\";\n\nconst magic = new Magic(\"YOUR_PUBLISHABLE_API_KEY\");\nconst web3 = new Web3(magic.rpcProvider);\n\n// \u2b50\ufe0f After user is successfully authenticated\n\n// Get user's Ethereum public address\nconst address = (await web3.eth.getAccounts())[0];\n\n// Get user's balance in ether\nconst balance = web3.utils.fromWei(", "explanation": "**Purpose:** Get user's Ethereum public address and balance after successful authentication using Magic SDK.\n\n**Functionality:**\n\n* Creates a Magic instance with a publishable API key.\n* Creates a Web3 provider (Ethers.js or Web3.js) using the Magic instance's RPC provider.\n* Retrieves the user's Ethereum public address.\n* Retrieves the user's balance in ether by fetching the balance in wei and converting it to ether using a utility function.", "metadata": {"repo": "magiclabs/documentation", "file": "advanced/ethereum/javascript/get-user-info.md", "chunk_number": 1, "total_chunks": 2}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "The file 'advanced/ethereum/javascript/get-user-info.md' appears to contain JavaScript code that uses the Magic SDK to retrieve a user's Ethereum information after successful authentication. The code accomplishes the following:\n\n- Initializes a Magic instance with a publishable API key.\n- Creates a Web3 provider (using Ethers.js or Web3.js) using the Magic instance's RPC provider.\n- Fetches the user's Ethereum public address.\n- Retrieves the user's Ethereum balance in ether by first fetching it in wei and then converting it to ether."}
{"code": "  await web3.eth.getBalance(address) // Balance is in wei\n);\n```\n\n", "explanation": "**Summary**\n\nThis line of code retrieves the Ethereum balance of a specified address in wei units using the Web3.js library.", "metadata": {"repo": "magiclabs/documentation", "file": "advanced/ethereum/javascript/get-user-info.md", "chunk_number": 2, "total_chunks": 2}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "The file 'advanced/ethereum/javascript/get-user-info.md' appears to contain JavaScript code that uses the Magic SDK to retrieve a user's Ethereum information after successful authentication. The code accomplishes the following:\n\n- Initializes a Magic instance with a publishable API key.\n- Creates a Web3 provider (using Ethers.js or Web3.js) using the Magic instance's RPC provider.\n- Fetches the user's Ethereum public address.\n- Retrieves the user's Ethereum balance in ether by first fetching it in wei and then converting it to ether."}
{"code": "# \ud83d\udcb8 Send Transaction\n\n## Ethers.js\n\n```javascript\nimport { Magic } from 'magic-sdk';\nimport { ethers } from 'ethers';\n\nconst magic = new Magic(\"YOUR_PUBLISHABLE_API_KEY\");\nconst provider = new ethers.providers.Web3Provider(magic.rpcProvider);\n\n// \u2b50\ufe0f After user is successfully authenticated\n\nconst signer = provider.getSigner();\n\nconst destination = \"0xE0cef4417a772512E6C95cEf366403839b0D6D6D\";\nconst amount = ethers.utils.parseEther(1); // Convert 1 ether to wei\n\n// Submit transaction to the blockchain\nconst tx = await signer.sendTransaction({\n  to: destination,\n  value: amount\n});\n\n// Wait for transaction to be mined\nconst receipt = await tx.wait();\n```\n\n## Web3.js\n\n{% hint style=\"warning\" %}\nExample is using **`web3@1.2.0`** or later version.\n{% endhint %}\n\n```javascript\nimport { Magic } from 'magic-sdk';\nimport Web3 from 'web3';\n\nconst magic = new Magic(\"YOUR_PUBLISHABLE_API_KEY\");\nconst web3 = new Web3(magic.rpcProvider);\n\n// \u2b50\ufe0f After user is successfully authenticated\n\n// Get user's Ethereum public address", "explanation": "**Transaction Block Summary**\n\nThis block allows users to send Ethereum transactions after successful authentication. It provides examples using two popular libraries: Ethers.js and Web3.js. \n\n**Functionality:**\n\n1. User authentication with Magic SDK\n2. Retrieval of user's Ethereum public address (Web3.js example not fully shown)\n3. Convert ether value to wei\n4. Submission of a transaction to the blockchain\n5. Waiting for transaction to be mined and retrieving receipt", "metadata": {"repo": "magiclabs/documentation", "file": "advanced/ethereum/javascript/send-transaction.md", "chunk_number": 1, "total_chunks": 2}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "**Holistic Summary of 'advanced/ethereum/javascript/send-transaction.md'**\n\nThis file provides a comprehensive guide on how to send Ethereum transactions in JavaScript, utilizing the `Magic SDK` for user authentication. It supports both `Ethers.js` and `Web3.js` libraries. The key functionalities include:\n\n- User authentication\n- Retrieving the user's Ethereum public address\n- Converting ether values to wei\n- Submitting a transaction to the blockchain\n- Waiting for transaction mining and retrieving the receipt\n\nThe code demonstrates sending a transaction of 1 ether to a specified destination account, showcasing a practical application of the explained concepts."}
{"code": "const fromAddress = (await web3.eth.getAccounts())[0];\n\nconst destination = \"0xE0cef4417a772512E6C95cEf366403839b0D6D6D\";\nconst amount = web3.utils.toWei(1); // Convert 1 ether to wei\n\n// Submit transaction to the blockchain and wait for it to be mined\nconst receipt = await web3.eth.sendTransaction({\n  from: fromAddress,\n  to: destination,\n  value: amount\n})\n```\n\n", "explanation": "**Summary**\n\nThis block of code sends a transaction of 1 ether to a specified account (`destination`) on the Ethereum blockchain, using the `web3` library. It gets the sender's address, converts the transaction amount from ether to wei, and then submits the transaction, waiting for it to be mined before returning the transaction receipt.", "metadata": {"repo": "magiclabs/documentation", "file": "advanced/ethereum/javascript/send-transaction.md", "chunk_number": 2, "total_chunks": 2}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "**Holistic Summary of 'advanced/ethereum/javascript/send-transaction.md'**\n\nThis file provides a comprehensive guide on how to send Ethereum transactions in JavaScript, utilizing the `Magic SDK` for user authentication. It supports both `Ethers.js` and `Web3.js` libraries. The key functionalities include:\n\n- User authentication\n- Retrieving the user's Ethereum public address\n- Converting ether values to wei\n- Submitting a transaction to the blockchain\n- Waiting for transaction mining and retrieving the receipt\n\nThe code demonstrates sending a transaction of 1 ether to a specified destination account, showcasing a practical application of the explained concepts."}
{"code": "# \u270f\ufe0f Sign Message\n\n## Ethers.js\n\n{% tabs %}\n{% tab title=\"Personal Sign\" %}\n```typescript\nimport { Magic } from 'magic-sdk';\nimport { ethers } from 'ethers';\n\nconst magic = new Magic(\"YOUR_PUBLISHABLE_API_KEY\");\nconst provider = new ethers.providers.Web3Provider(magic.rpcProvider);\n\n// \u2b50\ufe0f After user is successfully authenticated\n\nconst signer = provider.getSigner();\n\nconst originalMessage = \"YOUR_MESSAGE\";\n\nconst signedMessage = await signer.signMessage(originalMessage);\n```\n{% endtab %}\n\n{% tab title=\"Sign Typed Data v1\" %}\n```typescript\nimport { Magic } from \"magic-sdk\";\nimport { ethers } from \"ethers\";\n\nconst magic = new Magic(\"YOUR_PUBLISHABLE_API_KEY\");\nconst provider = new ethers.providers.Web3Provider(magic.rpcProvider);\n\n// \u2b50\ufe0f After user is successfully authenticated\n\n// Get user's Ethereum public address\nconst fromAddress = await signer.getAddress();\n\nconst originalMessage = [\n  {\n    type: \"string\",\n    name: \"fullName\",\n    value: \"John Doe\"\n  },\n  {\n    type: \"uint32\",\n    name: \"userId\",\n    value: \"1234\"\n  }\n];", "explanation": "**Purpose and Functionality Summary:**\n\nThis code block demonstrates two methods of signing messages using Ethers.js and the Magic SDK: (1) Personal Sign and (2) Sign Typed Data v1. The code initializes a Magic SDK instance and an Ethers.js Web3Provider, then uses the provider's signer to sign a message or typed data, authenticating the user's ownership of an Ethereum address.", "metadata": {"repo": "magiclabs/documentation", "file": "advanced/ethereum/javascript/sign-message.md", "chunk_number": 1, "total_chunks": 8}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "Here's a concise and holistic summary of the file 'advanced/ethereum/javascript/sign-message.md':\n\n**Purpose and Functionality Summary:**\n\nThis code demonstrates how to sign messages and typed data using Ethers.js and the Magic SDK for Ethereum applications. It provides three main methods for signing: \n\n1. **Personal Sign**: Authenticates a user using their Ethereum private key to sign a custom message.\n2. **Sign Typed Data v1**: Signs a structured message (defined by EIP-712) using the `eth_signTypedData` method.\n3. **Sign Typed Data v3 and v4**: Authenticates a user by signing typed data with their Ethereum private key using the `eth_signTypedData_v3` and `eth_signTypedData_v4` methods.\n\n**Shared Functionality:**\n\n* User authentication using the Magic SDK\n* Retrieval of the user's Ethereum public address\n* Preparation of a message or typed data to be signed\n* Signing of the message or data using the user's private key\n\nThese code blocks can be used in web applications to integrate Ethereum functionality, allowing users to authenticate and sign messages or data with their Ethereum private keys."}
{"code": "const params = [originalMessage, fromAddress];\nconst method = \"eth_signTypedData\";\n\nconst signedMessage = await signer.provider.send(method, params);\n```\n{% endtab %}\n\n{% tab title=\"Sign Typed Data v3\" %}\n```javascript\nimport { Magic } from \"magic-sdk\";\nimport { ethers } from \"ethers\";\n\nconst magic = new Magic(\"YOUR_PUBLISHABLE_API_KEY\");\nconst provider = new ethers.providers.Web3Provider(magic.rpcProvider);\n\n// \u2b50\ufe0f After user is successfully authenticated\n\n// Get user's Ethereum public address\nconst fromAddress = await signer.getAddress();\n\nconst originalMessage = {\n  types: {\n    EIP712Domain: [\n      {\n        name: \"name\",\n        type: \"string\"\n      },\n      {\n        name: \"version\",\n        type: \"string\"\n      },\n      {\n        name: \"verifyingContract\",\n        type: \"address\"\n      }\n    ],\n    Greeting: [\n      {\n        name: \"contents\",\n        type: \"string\"\n      }\n    ]\n  },\n  primaryType: \"Greeting\",\n  domain: {\n    name: \"Magic\",\n    version: \"1\",", "explanation": "**Purpose and Functionality:** \n\nThis block of code signs typed data for use in an Ethereum application. It takes a message with a specific structure (defined by EIP-712), along with the signer's Ethereum public address, and uses the `eth_signTypedData` method to generate a signature. The signature can be used to authenticate the sender and verify the integrity of the message.", "metadata": {"repo": "magiclabs/documentation", "file": "advanced/ethereum/javascript/sign-message.md", "chunk_number": 2, "total_chunks": 8}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "Here's a concise and holistic summary of the file 'advanced/ethereum/javascript/sign-message.md':\n\n**Purpose and Functionality Summary:**\n\nThis code demonstrates how to sign messages and typed data using Ethers.js and the Magic SDK for Ethereum applications. It provides three main methods for signing: \n\n1. **Personal Sign**: Authenticates a user using their Ethereum private key to sign a custom message.\n2. **Sign Typed Data v1**: Signs a structured message (defined by EIP-712) using the `eth_signTypedData` method.\n3. **Sign Typed Data v3 and v4**: Authenticates a user by signing typed data with their Ethereum private key using the `eth_signTypedData_v3` and `eth_signTypedData_v4` methods.\n\n**Shared Functionality:**\n\n* User authentication using the Magic SDK\n* Retrieval of the user's Ethereum public address\n* Preparation of a message or typed data to be signed\n* Signing of the message or data using the user's private key\n\nThese code blocks can be used in web applications to integrate Ethereum functionality, allowing users to authenticate and sign messages or data with their Ethereum private keys."}
{"code": "    verifyingContract: \"0xE0cef4417a772512E6C95cEf366403839b0D6D6D\"\n  },\n  message: {\n    contents: \"Hello, from Magic!\"\n  }\n};\nconst params = [fromAddress, originalMessage];\nconst method = \"eth_signTypedData_v3\";\n\nconst signedMessage = await signer.provider.send(method, params);\n```\n{% endtab %}\n\n{% tab title=\"Sign Typed Data v4\" %}\n```typescript\n/*\n  Sign Typed Data v4 adds support for\n  arrays and recursive data types.\n  \n  Otherwise, it works the same as Sign Typed Data v3.\n */\n \nimport { Magic } from \"magic-sdk\";\nimport { ethers } from \"ethers\";\n\nconst magic = new Magic(\"YOUR_PUBLISHABLE_API_KEY\");\nconst provider = new ethers.providers.Web3Provider(magic.rpcProvider);\n\n// \u2b50\ufe0f After user is successfully authenticated\n\n// Get user's Ethereum public address\nconst fromAddress = await signer.getAddress();\n\nconst originalMessage = {\n  types: {\n    EIP712Domain: [\n      {\n        name: \"name\",\n        type: \"string\"\n      },\n      {\n        name: \"version\",\n        type: \"string\"\n      },\n      {\n        name: \"verifyingContract\",", "explanation": "This code block is used for signing typed data (a structured message) using the `eth_signTypedData_v3` method. It takes a user's Ethereum public address and a typed message as input, and returns a signed message using the user's private key. The purpose is to authenticate and verify the sender of a message on the Ethereum blockchain.", "metadata": {"repo": "magiclabs/documentation", "file": "advanced/ethereum/javascript/sign-message.md", "chunk_number": 3, "total_chunks": 8}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "Here's a concise and holistic summary of the file 'advanced/ethereum/javascript/sign-message.md':\n\n**Purpose and Functionality Summary:**\n\nThis code demonstrates how to sign messages and typed data using Ethers.js and the Magic SDK for Ethereum applications. It provides three main methods for signing: \n\n1. **Personal Sign**: Authenticates a user using their Ethereum private key to sign a custom message.\n2. **Sign Typed Data v1**: Signs a structured message (defined by EIP-712) using the `eth_signTypedData` method.\n3. **Sign Typed Data v3 and v4**: Authenticates a user by signing typed data with their Ethereum private key using the `eth_signTypedData_v3` and `eth_signTypedData_v4` methods.\n\n**Shared Functionality:**\n\n* User authentication using the Magic SDK\n* Retrieval of the user's Ethereum public address\n* Preparation of a message or typed data to be signed\n* Signing of the message or data using the user's private key\n\nThese code blocks can be used in web applications to integrate Ethereum functionality, allowing users to authenticate and sign messages or data with their Ethereum private keys."}
{"code": "        type: \"address\"\n      }\n    ],\n    Greeting: [\n      {\n        name: \"contents\",\n        type: \"string\"\n      }\n    ]\n  },\n  primaryType: \"Greeting\",\n  domain: {\n    name: \"Magic\",\n    version: \"1\",\n    verifyingContract: \"0xE0cef4417a772512E6C95cEf366403839b0D6D6D\"\n  },\n  message: {\n    contents: \"Hello, from Magic!\"\n  }\n};\nconst params = [fromAddress, originalMessage];\nconst method = \"eth_signTypedData_v4\";\n\nconst signedMessage = await signer.provider.send(method, params);\n```\n{% endtab %}\n{% endtabs %}\n\n## Web3.js\n\n{% hint style=\"info\" %}\nThe following examples assume **`web3@>=1.2.0`**\n{% endhint %}\n\n{% tabs %}\n{% tab title=\"Personal Sign\" %}\n```typescript\nimport { Magic } from \"magic-sdk\";\nimport Web3 from \"web3\";\n\nconst magic = new Magic(\"YOUR_PUBLISHABLE_API_KEY\");\nconst web3 = new Web3(magic.rpcProvider);\n\n// \u2b50\ufe0f After user is successfully authenticated\n\n// Get user's Ethereum public address\nconst fromAddress = (await web3.eth.getAccounts())[0];\n\nconst originalMessage = \"YOUR_MESSAGE\";\n", "explanation": "This block of code is used for Ethereum Personal Sign functionality. \n\nFunctionality: \n\n- Authenticates a user.\n- Retrieves the user's Ethereum public address.\n- Prepares a typed data message for signing.\n- Signs the typed data message using the user's Ethereum account.\n- Returns the signed message.\n\nThe code is used in the context of integrating Ethereum functionality with a web application, specifically using the Magic SDK and Web3.js libraries.", "metadata": {"repo": "magiclabs/documentation", "file": "advanced/ethereum/javascript/sign-message.md", "chunk_number": 4, "total_chunks": 8}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "Here's a concise and holistic summary of the file 'advanced/ethereum/javascript/sign-message.md':\n\n**Purpose and Functionality Summary:**\n\nThis code demonstrates how to sign messages and typed data using Ethers.js and the Magic SDK for Ethereum applications. It provides three main methods for signing: \n\n1. **Personal Sign**: Authenticates a user using their Ethereum private key to sign a custom message.\n2. **Sign Typed Data v1**: Signs a structured message (defined by EIP-712) using the `eth_signTypedData` method.\n3. **Sign Typed Data v3 and v4**: Authenticates a user by signing typed data with their Ethereum private key using the `eth_signTypedData_v3` and `eth_signTypedData_v4` methods.\n\n**Shared Functionality:**\n\n* User authentication using the Magic SDK\n* Retrieval of the user's Ethereum public address\n* Preparation of a message or typed data to be signed\n* Signing of the message or data using the user's private key\n\nThese code blocks can be used in web applications to integrate Ethereum functionality, allowing users to authenticate and sign messages or data with their Ethereum private keys."}
{"code": "const signedMessage = await web3.eth.personal.sign(\n  originalMessage,\n  fromAddress\n);\n```\n{% endtab %}\n\n{% tab title=\"Sign Typed Data v1\" %}\n```typescript\nimport { Magic } from \"magic-sdk\";\nimport Web3 from \"web3\";\n\nconst magic = new Magic(\"YOUR_PUBLISHABLE_API_KEY\");\nconst web3 = new Web3(magic.rpcProvider);\n\n// \u2b50\ufe0f After user is successfully authenticated\n\n// Get user's Ethereum public address\nconst fromAddress = (await web3.eth.getAccounts())[0];\n\nconst originalMessage = [\n  {\n    type: \"string\",\n    name: \"fullName\",\n    value: \"John Doe\"\n  },\n  {\n    type: \"uint32\",\n    name: \"userId\",\n    value: \"1234\"\n  }\n];\nconst params = [originalMessage, fromAddress];\nconst method = \"eth_signTypedData\";\n\nconst signedMessage = await web3.currentProvider.sendAsync({\n  id: 1,\n  method,\n  params,\n  fromAddress\n});\n```\n{% endtab %}\n\n{% tab title=\"Sign Typed Data v3\" %}\n```javascript\nimport { Magic } from \"magic-sdk\";\nimport Web3 from \"web3\";\n\nconst magic = new Magic(\"YOUR_PUBLISHABLE_API_KEY\");\nconst web3 = new Web3(magic.rpcProvider);\n", "explanation": "**Signing a Message or Data with Web3 and Magic SDK**\n\nThis code snippet demonstrates how to sign a message or data using Web3 and Magic SDK. It allows a user to authenticate and then sign a message or typed data with their Ethereum private key. \n\n**Functionality:**\n\n1. User authentication using Magic SDK.\n2. Retrieval of user's Ethereum public address.\n3. Preparation of a message or typed data to be signed.\n4. Signing of the message or data using the user's private key.\n\n**Presented versions:**\n\n- Signing a custom message.\n- Signing typed data (v1 and v3).", "metadata": {"repo": "magiclabs/documentation", "file": "advanced/ethereum/javascript/sign-message.md", "chunk_number": 5, "total_chunks": 8}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "Here's a concise and holistic summary of the file 'advanced/ethereum/javascript/sign-message.md':\n\n**Purpose and Functionality Summary:**\n\nThis code demonstrates how to sign messages and typed data using Ethers.js and the Magic SDK for Ethereum applications. It provides three main methods for signing: \n\n1. **Personal Sign**: Authenticates a user using their Ethereum private key to sign a custom message.\n2. **Sign Typed Data v1**: Signs a structured message (defined by EIP-712) using the `eth_signTypedData` method.\n3. **Sign Typed Data v3 and v4**: Authenticates a user by signing typed data with their Ethereum private key using the `eth_signTypedData_v3` and `eth_signTypedData_v4` methods.\n\n**Shared Functionality:**\n\n* User authentication using the Magic SDK\n* Retrieval of the user's Ethereum public address\n* Preparation of a message or typed data to be signed\n* Signing of the message or data using the user's private key\n\nThese code blocks can be used in web applications to integrate Ethereum functionality, allowing users to authenticate and sign messages or data with their Ethereum private keys."}
{"code": "// \u2b50\ufe0f After user is successfully authenticated\n\n// Get user's Ethereum public address\nconst fromAddress = (await web3.eth.getAccounts())[0];\n\nconst originalMessage = {\n  types: {\n    EIP712Domain: [\n      {\n        name: \"name\",\n        type: \"string\"\n      },\n      {\n        name: \"version\",\n        type: \"string\"\n      },\n      {\n        name: \"verifyingContract\",\n        type: \"address\"\n      }\n    ],\n    Greeting: [\n      {\n        name: \"contents\",\n        type: \"string\"\n      }\n    ]\n  },\n  primaryType: \"Greeting\",\n  domain: {\n    name: \"Magic\",\n    version: \"1\",\n    verifyingContract: \"0xE0cef4417a772512E6C95cEf366403839b0D6D6D\"\n  },\n  message: {\n    contents: \"Hello, from Magic!\"\n  }\n};\nconst params = [fromAddress, originalMessage];\nconst method = \"eth_signTypedData_v3\";\n\nconst signedMessage = await web3.currentProvider.sendAsync({\n  id: 1,\n  method,\n  params,\n  fromAddress\n});\n```\n{% endtab %}\n\n{% tab title=\"Sign Typed Data v4\" %}\n```typescript\n/*\n  Sign Typed Data v4 adds support for\n  arrays and recursive data types.\n  ", "explanation": "This block of code is used to authenticate a user using Ethereum's `eth_signTypedData_v3` method. Here's a concise summary of its purpose and functionality:\n\n**Purpose:** Authenticate a user by signing a typed data message with their Ethereum private key.\n**Functionality:**\n\n1. Retrieves the user's Ethereum public address.\n2. Constructs a typed data message (EIP-712) with a greeting.\n3. Signs the message using the user's private key and the `eth_signTypedData_v3` method.\n4. Returns the signed message.", "metadata": {"repo": "magiclabs/documentation", "file": "advanced/ethereum/javascript/sign-message.md", "chunk_number": 6, "total_chunks": 8}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "Here's a concise and holistic summary of the file 'advanced/ethereum/javascript/sign-message.md':\n\n**Purpose and Functionality Summary:**\n\nThis code demonstrates how to sign messages and typed data using Ethers.js and the Magic SDK for Ethereum applications. It provides three main methods for signing: \n\n1. **Personal Sign**: Authenticates a user using their Ethereum private key to sign a custom message.\n2. **Sign Typed Data v1**: Signs a structured message (defined by EIP-712) using the `eth_signTypedData` method.\n3. **Sign Typed Data v3 and v4**: Authenticates a user by signing typed data with their Ethereum private key using the `eth_signTypedData_v3` and `eth_signTypedData_v4` methods.\n\n**Shared Functionality:**\n\n* User authentication using the Magic SDK\n* Retrieval of the user's Ethereum public address\n* Preparation of a message or typed data to be signed\n* Signing of the message or data using the user's private key\n\nThese code blocks can be used in web applications to integrate Ethereum functionality, allowing users to authenticate and sign messages or data with their Ethereum private keys."}
{"code": "  Otherwise, it works the same as Sign Typed Data v3.\n */\n \nimport { Magic } from \"magic-sdk\";\nimport Web3 from \"web3\";\n\nconst magic = new Magic(\"YOUR_PUBLISHABLE_API_KEY\");\nconst web3 = new Web3(magic.rpcProvider);\n\n// \u2b50\ufe0f After user is successfully authenticated\n\n// Get user's Ethereum public address\nconst fromAddress = (await web3.eth.getAccounts())[0];\n\nconst originalMessage = {\n  types: {\n    EIP712Domain: [\n      {\n        name: \"name\",\n        type: \"string\"\n      },\n      {\n        name: \"version\",\n        type: \"string\"\n      },\n      {\n        name: \"verifyingContract\",\n        type: \"address\"\n      }\n    ],\n    Greeting: [\n      {\n        name: \"contents\",\n        type: \"string\"\n      }\n    ]\n  },\n  primaryType: \"Greeting\",\n  domain: {\n    name: \"Magic\",\n    version: \"1\",\n    verifyingContract: \"0xE0cef4417a772512E6C95cEf366403839b0D6D6D\"\n  },\n  message: {\n    contents: \"Hello, from Magic!\"\n  }\n};\nconst params = [fromAddress, originalMessage];\nconst method = \"eth_signTypedData_v4\";\n", "explanation": "This code block sets up and configures the signing of typed data for an Ethereum transaction. It utilizes the Magic SDK and Web3 library to create a Magic instance and connect to a Web3 provider. After user authentication, it gets the user's Ethereum public address and constructs a message object following the EIP-712 standard. The code then defines parameters for the `eth_signTypedData_v4` method, which is used to sign the typed data.", "metadata": {"repo": "magiclabs/documentation", "file": "advanced/ethereum/javascript/sign-message.md", "chunk_number": 7, "total_chunks": 8}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "Here's a concise and holistic summary of the file 'advanced/ethereum/javascript/sign-message.md':\n\n**Purpose and Functionality Summary:**\n\nThis code demonstrates how to sign messages and typed data using Ethers.js and the Magic SDK for Ethereum applications. It provides three main methods for signing: \n\n1. **Personal Sign**: Authenticates a user using their Ethereum private key to sign a custom message.\n2. **Sign Typed Data v1**: Signs a structured message (defined by EIP-712) using the `eth_signTypedData` method.\n3. **Sign Typed Data v3 and v4**: Authenticates a user by signing typed data with their Ethereum private key using the `eth_signTypedData_v3` and `eth_signTypedData_v4` methods.\n\n**Shared Functionality:**\n\n* User authentication using the Magic SDK\n* Retrieval of the user's Ethereum public address\n* Preparation of a message or typed data to be signed\n* Signing of the message or data using the user's private key\n\nThese code blocks can be used in web applications to integrate Ethereum functionality, allowing users to authenticate and sign messages or data with their Ethereum private keys."}
{"code": "const signedMessage = await web3.currentProvider.sendAsync({\n  id: 1,\n  method,\n  params,\n  fromAddress\n});\n```\n{% endtab %}\n{% endtabs %}\n\n", "explanation": "This block of code sends an asynchronous request to a Web3 provider to sign a message on behalf of a specified address (`fromAddress`) using the provided `method` and `params`. The response is stored in the `signedMessage` variable.", "metadata": {"repo": "magiclabs/documentation", "file": "advanced/ethereum/javascript/sign-message.md", "chunk_number": 8, "total_chunks": 8}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "Here's a concise and holistic summary of the file 'advanced/ethereum/javascript/sign-message.md':\n\n**Purpose and Functionality Summary:**\n\nThis code demonstrates how to sign messages and typed data using Ethers.js and the Magic SDK for Ethereum applications. It provides three main methods for signing: \n\n1. **Personal Sign**: Authenticates a user using their Ethereum private key to sign a custom message.\n2. **Sign Typed Data v1**: Signs a structured message (defined by EIP-712) using the `eth_signTypedData` method.\n3. **Sign Typed Data v3 and v4**: Authenticates a user by signing typed data with their Ethereum private key using the `eth_signTypedData_v3` and `eth_signTypedData_v4` methods.\n\n**Shared Functionality:**\n\n* User authentication using the Magic SDK\n* Retrieval of the user's Ethereum public address\n* Preparation of a message or typed data to be signed\n* Signing of the message or data using the user's private key\n\nThese code blocks can be used in web applications to integrate Ethereum functionality, allowing users to authenticate and sign messages or data with their Ethereum private keys."}
{"code": "# \ud83d\udcdc Smart Contract\n\n## Solidity Contract\n\nIn this example, we'll be demonstrating how to use Magic with ethers.js or web3.js to interact with Solidity smart contracts. The simple Hello World contract allows anyone to read and write a message to it.\n\n```javascript\npragma solidity ^0.5.10;\n\ncontract HelloWorld {\n\n  string public message;\n    \n  constructor(string memory initMessage) public {\n    message = initMessage;\n  }\n\n  function update(string memory newMessage) public {\n    message = newMessage;\n  }\n}\n```\n\n## Ethers.js\n\n### Deploy Contract\n\n```javascript\nimport { Magic } from 'magic-sdk';\nimport { ethers } from 'ethers';\n\nconst magic = new Magic(\"YOUR_PUBLISHABLE_API_KEY\");\nconst provider = new ethers.providers.Web3Provider(magic.rpcProvider);\n\n// \u2b50\ufe0f After user is successfully authenticated\n\nconst signer = provider.getSigner();\n", "explanation": "**Purpose and Functionality Summary**\n\nThis code block demonstrates a simple Solidity smart contract and an example of deploying it using Ethers.js with Magic SDK. \n\n**Smart Contract Functionality:**\n\n* Allows anyone to read a message\n* Allows anyone to write a new message\n\n**Ethers.js Functionality:**\n\n* Initializes Magic SDK with a publishable API key\n* Sets up a Web3 provider for interacting with the Ethereum blockchain\n* Retrieves a signer instance for the authenticated user to deploy the smart contract", "metadata": {"repo": "magiclabs/documentation", "file": "advanced/ethereum/javascript/smart-contract.md", "chunk_number": 1, "total_chunks": 11}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "**Advanced Ethereum Smart Contract with JavaScript**\n\nThis document demonstrates how to deploy and interact with a simple Solidity smart contract using Ethers.js and the Magic SDK.\n\n**Key Functionality:**\n\n1. **Smart Contract:** Allows anyone to read and write a message.\n2. **Ethers.js Integration:** Initializes Magic SDK, sets up Web3 provider, and retrieves a signer instance for user authentication.\n3. **Deployment:** Deploys the smart contract with a constructor parameter using Ethers.js.\n4. **Contract Interaction:** Retrieves the current message and updates it by sending a transaction using the `update` function.\n\n**Overview:**\n\nThis guide provides a comprehensive overview of deploying a smart contract on the Ethereum blockchain and interacting with it using Ethers.js and the Magic SDK. The smart contract has two primary functions: `message` to read the current message and `update` to write a new message."}
{"code": "const contractABI = '[{\"constant\":false,\"inputs\":[{\"name\":\"newMessage\",\"type\":\"string\"}],\"name\":\"update\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"message\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"initMessage\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]';", "explanation": "**Smart Contract ABI Summary**\n\nThis is a JSON-serialized Application Binary Interface (ABI) for a smart contract. It defines three functions:\n\n1. **constructor**: Initializes the contract with a string `initMessage`.\n2. **update**: Updates the contract's stored message with a new string `newMessage`.\n3. **message**: Returns the current stored message as a string.\n\nThis ABI allows for interaction with a deployed contract, enabling reading and writing of the contract's state.", "metadata": {"repo": "magiclabs/documentation", "file": "advanced/ethereum/javascript/smart-contract.md", "chunk_number": 2, "total_chunks": 11}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "**Advanced Ethereum Smart Contract with JavaScript**\n\nThis document demonstrates how to deploy and interact with a simple Solidity smart contract using Ethers.js and the Magic SDK.\n\n**Key Functionality:**\n\n1. **Smart Contract:** Allows anyone to read and write a message.\n2. **Ethers.js Integration:** Initializes Magic SDK, sets up Web3 provider, and retrieves a signer instance for user authentication.\n3. **Deployment:** Deploys the smart contract with a constructor parameter using Ethers.js.\n4. **Contract Interaction:** Retrieves the current message and updates it by sending a transaction using the `update` function.\n\n**Overview:**\n\nThis guide provides a comprehensive overview of deploying a smart contract on the Ethereum blockchain and interacting with it using Ethers.js and the Magic SDK. The smart contract has two primary functions: `message` to read the current message and `update` to write a new message."}
{"code": "const contractByteCode = \"0x608060405234801561001057600080fd5b5060405161047f38038061047f8339818101604052602081101561003357600080fd5b81019080805164010000000081111561004b57600080fd5b8281019050602081018481111561006157600080fd5b815185600182028301116401000000008211171561007e57600080fd5b5050929190505050806000908051906020019061009c9291906100a3565b5050610148565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106100e457805160ff1916838001178555610112565b82800160010185558215610112579182015b828111156101115782518255916020019190600101906100f6565b5b50905061011f9190610123565b5090565b61014591905b80821115610141576000816000905550600101610129565b5090565b90565b610328806101576000396000f3fe608060405234801561001057600080fd5b5060043610610053576000357c0100000000000000000000000000000000000000000000000000000000900480633d7403a314610058578063e21f37ce14610113575b600080fd5b6101116004803603602081101561006e57600080fd5b810190808035906020019064010000000081111561008b57600080fd5b82018360208201111561009d57600080fd5b803590602001918460018302840111640100000000831117156100bf57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050610196565b005b61011b6101b0565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561015b578082015181840152602081019050610140565b50505050905090810190601f1680156101885780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b80600090805190602001906101ac92919061024e565b5050565b60008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156102465780601f1061021b57610100808354040283529160200191610246565b820191906000526020600020905b81548152906001019060200180831161022957829003601f168201915b505050505081565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061028f57805160ff19168380011785556102bd565b828001600101855582156102bd579182015b828111156102bc5782518255916020019190600101906102a1565b5b5090506102ca91906102ce565b5090565b6102f091905b808211156102ec5760008160009055506001016102d4565b5090565b9056fea265627a7a7230582003ae1ef5a63bf058bfd2b31398bdee39d3cbfbb7fbf84235f4bc2ec352ee810f64736f6c634300050a0032\";", "explanation": "The provided block is a hexadecimal string representing the bytecode of a smart contract, likely written in Solidity for the Ethereum blockchain. It defines the contract's functionality and data at the bytecode level.", "metadata": {"repo": "magiclabs/documentation", "file": "advanced/ethereum/javascript/smart-contract.md", "chunk_number": 3, "total_chunks": 11}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "**Advanced Ethereum Smart Contract with JavaScript**\n\nThis document demonstrates how to deploy and interact with a simple Solidity smart contract using Ethers.js and the Magic SDK.\n\n**Key Functionality:**\n\n1. **Smart Contract:** Allows anyone to read and write a message.\n2. **Ethers.js Integration:** Initializes Magic SDK, sets up Web3 provider, and retrieves a signer instance for user authentication.\n3. **Deployment:** Deploys the smart contract with a constructor parameter using Ethers.js.\n4. **Contract Interaction:** Retrieves the current message and updates it by sending a transaction using the `update` function.\n\n**Overview:**\n\nThis guide provides a comprehensive overview of deploying a smart contract on the Ethereum blockchain and interacting with it using Ethers.js and the Magic SDK. The smart contract has two primary functions: `message` to read the current message and `update` to write a new message."}
{"code": "const contractFactory = new ethers.ContractFactory(\n  contractABI,\n  contractByteCode,\n  signer\n);\n\n// Deploy contract with \"Hello World!\" in the constructor\nconst contract = await contractFactory.deploy(\"Hello World!\");\n\n// Wait for deployment to finish\nconst receipt = await contract.deployed();\n```\n\n### Read From Contract\n\n```javascript\nimport { Magic } from 'magic-sdk';\nimport { ethers } from 'ethers';\n\nconst magic = new Magic(\"YOUR_PUBLISHABLE_API_KEY\");\nconst provider = new ethers.providers.Web3Provider(magic.rpcProvider);\n\n// \u2b50\ufe0f After user is successfully authenticated\n\nconst signer = provider.getSigner();\n", "explanation": "**Deployment of a Smart Contract**\n\nThis code block deploys a smart contract to a blockchain using the Ethers.js library. It creates a contract factory, deploys the contract with a constructor parameter (\"Hello World!\"), and waits for the deployment to complete, retrieving the transaction receipt.", "metadata": {"repo": "magiclabs/documentation", "file": "advanced/ethereum/javascript/smart-contract.md", "chunk_number": 4, "total_chunks": 11}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "**Advanced Ethereum Smart Contract with JavaScript**\n\nThis document demonstrates how to deploy and interact with a simple Solidity smart contract using Ethers.js and the Magic SDK.\n\n**Key Functionality:**\n\n1. **Smart Contract:** Allows anyone to read and write a message.\n2. **Ethers.js Integration:** Initializes Magic SDK, sets up Web3 provider, and retrieves a signer instance for user authentication.\n3. **Deployment:** Deploys the smart contract with a constructor parameter using Ethers.js.\n4. **Contract Interaction:** Retrieves the current message and updates it by sending a transaction using the `update` function.\n\n**Overview:**\n\nThis guide provides a comprehensive overview of deploying a smart contract on the Ethereum blockchain and interacting with it using Ethers.js and the Magic SDK. The smart contract has two primary functions: `message` to read the current message and `update` to write a new message."}
{"code": "const contractABI = '[{\"constant\":false,\"inputs\":[{\"name\":\"newMessage\",\"type\":\"string\"}],\"name\":\"update\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"message\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"initMessage\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]';\nconst contractAddress = \"0x8b211dfebf490a648f6de859dfbed61fa22f35e0\";\nconst contract = new ethers.Contract(\n  contractAddress,\n  contractABI,\n  signer\n);\n\n// Read message from smart contract\nconst message = await contract.message();\n```\n\n### Write to Contract\n\n```javascript\nimport { Magic } from 'magic-sdk';\nimport { ethers } from 'ethers';\n\nconst magic = new Magic(\"YOUR_PUBLISHABLE_API_KEY\");\nconst provider = new ethers.providers.Web3Provider(magic.rpcProvider);\n\n// \u2b50\ufe0f After user is successfully authenticated\n\nconst signer = provider.getSigner();\n", "explanation": "**Smart Contract Interaction Code**\n\nThis block of code creates a connection to a smart contract on the Ethereum blockchain using the Ethers.js library. It retrieves the current message from the contract and is also set up to write to the contract.\n\nHere's a breakdown of the code's functionality:\n\n1. It defines the contract's ABI (Application Binary Interface) and address.\n2. It uses the ABI and address to create a contract instance with a signer (e.g., after user authentication with Magic).\n3. It reads the current message from the contract using the `contract.message()` function.\n4. With the provided setup, it can be used to write to the contract (e.g., call the `update` function to update the message).", "metadata": {"repo": "magiclabs/documentation", "file": "advanced/ethereum/javascript/smart-contract.md", "chunk_number": 5, "total_chunks": 11}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "**Advanced Ethereum Smart Contract with JavaScript**\n\nThis document demonstrates how to deploy and interact with a simple Solidity smart contract using Ethers.js and the Magic SDK.\n\n**Key Functionality:**\n\n1. **Smart Contract:** Allows anyone to read and write a message.\n2. **Ethers.js Integration:** Initializes Magic SDK, sets up Web3 provider, and retrieves a signer instance for user authentication.\n3. **Deployment:** Deploys the smart contract with a constructor parameter using Ethers.js.\n4. **Contract Interaction:** Retrieves the current message and updates it by sending a transaction using the `update` function.\n\n**Overview:**\n\nThis guide provides a comprehensive overview of deploying a smart contract on the Ethereum blockchain and interacting with it using Ethers.js and the Magic SDK. The smart contract has two primary functions: `message` to read the current message and `update` to write a new message."}
{"code": "const contractABI = '[{\"constant\":false,\"inputs\":[{\"name\":\"newMessage\",\"type\":\"string\"}],\"name\":\"update\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"message\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"initMessage\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]';\nconst contractAddress = \"0x8b211dfebf490a648f6de859dfbed61fa22f35e0\";\nconst contract = new ethers.Contract(\n  contractAddress,\n  contractABI,\n  signer\n);\n\n// Send transaction to smart contract to update message\nconst tx = await contract.update(\"NEW_MESSAGE\");\n\n// Wait for transaction to finish\nconst receipt = await tx.wait();\n```\n\n## Web3.js\n\n{% hint style=\"warning\" %}\nExample is using **`web3@1.2.0`** or later version.\n{% endhint %}\n\n### Deploy Contract\n\n```javascript\nimport { Magic } from \"magic-sdk\";\nimport Web3 from \"web3\";\n", "explanation": "**Smart Contract Interaction Code**\n\nThis code snippet is used to interact with a smart contract on the Ethereum blockchain. \n\n**Functionality:**\n\n1. It creates a contract object with the contract's ABI (Application Binary Interface) and address.\n2. It sends a transaction to the smart contract to update a message.\n3. It waits for the transaction to be confirmed on the blockchain and retrieves the receipt.\n\n**Purpose:**\n\nThe code allows a user to update a message stored in a smart contract, demonstrating a basic write operation on the blockchain.", "metadata": {"repo": "magiclabs/documentation", "file": "advanced/ethereum/javascript/smart-contract.md", "chunk_number": 6, "total_chunks": 11}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "**Advanced Ethereum Smart Contract with JavaScript**\n\nThis document demonstrates how to deploy and interact with a simple Solidity smart contract using Ethers.js and the Magic SDK.\n\n**Key Functionality:**\n\n1. **Smart Contract:** Allows anyone to read and write a message.\n2. **Ethers.js Integration:** Initializes Magic SDK, sets up Web3 provider, and retrieves a signer instance for user authentication.\n3. **Deployment:** Deploys the smart contract with a constructor parameter using Ethers.js.\n4. **Contract Interaction:** Retrieves the current message and updates it by sending a transaction using the `update` function.\n\n**Overview:**\n\nThis guide provides a comprehensive overview of deploying a smart contract on the Ethereum blockchain and interacting with it using Ethers.js and the Magic SDK. The smart contract has two primary functions: `message` to read the current message and `update` to write a new message."}
{"code": "const magic = new Magic(\"YOUR_PUBLISHABLE_API_KEY\");\nconst web3 = new Web3(magic.rpcProvider);\n\n// \u2b50\ufe0f After user is successfully authenticated\n\n// Get user's Ethereum public address\nconst fromAddress = (await web3.eth.getAccounts())[0];\n\nconst contractABI = '[{\"constant\":false,\"inputs\":[{\"name\":\"newMessage\",\"type\":\"string\"}],\"name\":\"update\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"message\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"initMessage\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]';", "explanation": "**Summary**\n\nThis code block initializes a Magic API instance and a Web3 provider using the Magic API's RPC provider. After user authentication, it retrieves the user's Ethereum public address using the Web3 instance. Additionally, it defines a contract ABI (Application Binary Interface) that specifies a smart contract with two functions: `update` to update a message and `message` to retrieve the current message.", "metadata": {"repo": "magiclabs/documentation", "file": "advanced/ethereum/javascript/smart-contract.md", "chunk_number": 7, "total_chunks": 11}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "**Advanced Ethereum Smart Contract with JavaScript**\n\nThis document demonstrates how to deploy and interact with a simple Solidity smart contract using Ethers.js and the Magic SDK.\n\n**Key Functionality:**\n\n1. **Smart Contract:** Allows anyone to read and write a message.\n2. **Ethers.js Integration:** Initializes Magic SDK, sets up Web3 provider, and retrieves a signer instance for user authentication.\n3. **Deployment:** Deploys the smart contract with a constructor parameter using Ethers.js.\n4. **Contract Interaction:** Retrieves the current message and updates it by sending a transaction using the `update` function.\n\n**Overview:**\n\nThis guide provides a comprehensive overview of deploying a smart contract on the Ethereum blockchain and interacting with it using Ethers.js and the Magic SDK. The smart contract has two primary functions: `message` to read the current message and `update` to write a new message."}
{"code": "const contractByteCode = \"0x608060405234801561001057600080fd5b5060405161047f38038061047f8339818101604052602081101561003357600080fd5b81019080805164010000000081111561004b57600080fd5b8281019050602081018481111561006157600080fd5b815185600182028301116401000000008211171561007e57600080fd5b5050929190505050806000908051906020019061009c9291906100a3565b5050610148565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106100e457805160ff1916838001178555610112565b82800160010185558215610112579182015b828111156101115782518255916020019190600101906100f6565b5b50905061011f9190610123565b5090565b61014591905b80821115610141576000816000905550600101610129565b5090565b90565b610328806101576000396000f3fe608060405234801561001057600080fd5b5060043610610053576000357c0100000000000000000000000000000000000000000000000000000000900480633d7403a314610058578063e21f37ce14610113575b600080fd5b6101116004803603602081101561006e57600080fd5b810190808035906020019064010000000081111561008b57600080fd5b82018360208201111561009d57600080fd5b803590602001918460018302840111640100000000831117156100bf57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050610196565b005b61011b6101b0565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561015b578082015181840152602081019050610140565b50505050905090810190601f1680156101885780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b80600090805190602001906101ac92919061024e565b5050565b60008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156102465780601f1061021b57610100808354040283529160200191610246565b820191906000526020600020905b81548152906001019060200180831161022957829003601f168201915b505050505081565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061028f57805160ff19168380011785556102bd565b828001600101855582156102bd579182015b828111156102bc5782518255916020019190600101906102a1565b5b5090506102ca91906102ce565b5090565b6102f091905b808211156102ec5760008160009055506001016102d4565b5090565b9056fea265627a7a7230582003ae1ef5a63bf058bfd2b31398bdee39d3cbfbb7fbf84235f4bc2ec352ee810f64736f6c634300050a0032\";", "explanation": "**Bytecode for a Smart Contract**\n\nThis is a hexadecimal-encoded bytecode string for a smart contract written in Solidity. It appears to be a compiled version of a contract, likely deployed on the Ethereum blockchain. The bytecode contains the machine-readable instructions for the contract's functionality, but its exact behavior and purpose are unclear without the original Solidity source code.", "metadata": {"repo": "magiclabs/documentation", "file": "advanced/ethereum/javascript/smart-contract.md", "chunk_number": 8, "total_chunks": 11}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "**Advanced Ethereum Smart Contract with JavaScript**\n\nThis document demonstrates how to deploy and interact with a simple Solidity smart contract using Ethers.js and the Magic SDK.\n\n**Key Functionality:**\n\n1. **Smart Contract:** Allows anyone to read and write a message.\n2. **Ethers.js Integration:** Initializes Magic SDK, sets up Web3 provider, and retrieves a signer instance for user authentication.\n3. **Deployment:** Deploys the smart contract with a constructor parameter using Ethers.js.\n4. **Contract Interaction:** Retrieves the current message and updates it by sending a transaction using the `update` function.\n\n**Overview:**\n\nThis guide provides a comprehensive overview of deploying a smart contract on the Ethereum blockchain and interacting with it using Ethers.js and the Magic SDK. The smart contract has two primary functions: `message` to read the current message and `update` to write a new message."}
{"code": "const contract = new web3.eth.Contract(JSON.parse(contractABI));\n\n// Deploy contract with \"Hello World!\" in the constructor and wait to finish\nconst contractInstance = await contract\n  .deploy({\n    data: contractByteCode,\n    arguments: [\"Hello World!\"]\n  })\n  .send({\n    from: fromAddress\n  });\n```\n\n### Read From Contract\n\n```javascript\nimport { Magic } from \"magic-sdk\";\nimport Web3 from \"web3\";\n\nconst magic = new Magic(\"YOUR_PUBLISHABLE_API_KEY\");\nconst web3 = new Web3(magic.rpcProvider);\n\n// \u2b50\ufe0f After user is successfully authenticated\n\n// Get user's Ethereum public address\nconst fromAddress = (await web3.eth.getAccounts())[0];\n", "explanation": "**Purpose and Functionality Summary**\n\nThis code block deploys a smart contract on the Ethereum blockchain using Web3.js. It creates a new contract instance with the provided ABI, deploys it with a constructor argument (\"Hello World!\") and a specified sender address, and waits for the deployment to finish.", "metadata": {"repo": "magiclabs/documentation", "file": "advanced/ethereum/javascript/smart-contract.md", "chunk_number": 9, "total_chunks": 11}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "**Advanced Ethereum Smart Contract with JavaScript**\n\nThis document demonstrates how to deploy and interact with a simple Solidity smart contract using Ethers.js and the Magic SDK.\n\n**Key Functionality:**\n\n1. **Smart Contract:** Allows anyone to read and write a message.\n2. **Ethers.js Integration:** Initializes Magic SDK, sets up Web3 provider, and retrieves a signer instance for user authentication.\n3. **Deployment:** Deploys the smart contract with a constructor parameter using Ethers.js.\n4. **Contract Interaction:** Retrieves the current message and updates it by sending a transaction using the `update` function.\n\n**Overview:**\n\nThis guide provides a comprehensive overview of deploying a smart contract on the Ethereum blockchain and interacting with it using Ethers.js and the Magic SDK. The smart contract has two primary functions: `message` to read the current message and `update` to write a new message."}
{"code": "const contractABI = '[{\"constant\":false,\"inputs\":[{\"name\":\"newMessage\",\"type\":\"string\"}],\"name\":\"update\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"message\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"initMessage\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]';\nconst contractAddress = \"0x8b211dfebf490a648f6de859dfbed61fa22f35e0\";\nconst contract = new web3.eth.Contract(JSON.parse(contractABI), contractAddress);\n\n// Read message from smart contract\nconst message = await contract.methods.message().call();\n```\n\n### Write to Contract\n\n```javascript\nimport { Magic } from \"magic-sdk\";\nimport Web3 from \"web3\";\n\nconst magic = new Magic(\"YOUR_PUBLISHABLE_API_KEY\");\nconst web3 = new Web3(magic.rpcProvider);\n\n// \u2b50\ufe0f After user is successfully authenticated\n\n// Get user's Ethereum public address", "explanation": "### Summary\n\nThis code block sets up a connection to a smart contract on the Ethereum blockchain using the Web3 library. The purpose is to read a message from the contract and optionally write to it. It consists of:\n\n1. Defining the contract's ABI (Application Binary Interface) and address.\n2. Creating a Web3 contract instance using the ABI and address.\n3. Reading a message from the contract using the `message()` function.\n4. (Optionally) Setting up Web3 to write to the contract using a user's Ethereum public address obtained through the Magic SDK.", "metadata": {"repo": "magiclabs/documentation", "file": "advanced/ethereum/javascript/smart-contract.md", "chunk_number": 10, "total_chunks": 11}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "**Advanced Ethereum Smart Contract with JavaScript**\n\nThis document demonstrates how to deploy and interact with a simple Solidity smart contract using Ethers.js and the Magic SDK.\n\n**Key Functionality:**\n\n1. **Smart Contract:** Allows anyone to read and write a message.\n2. **Ethers.js Integration:** Initializes Magic SDK, sets up Web3 provider, and retrieves a signer instance for user authentication.\n3. **Deployment:** Deploys the smart contract with a constructor parameter using Ethers.js.\n4. **Contract Interaction:** Retrieves the current message and updates it by sending a transaction using the `update` function.\n\n**Overview:**\n\nThis guide provides a comprehensive overview of deploying a smart contract on the Ethereum blockchain and interacting with it using Ethers.js and the Magic SDK. The smart contract has two primary functions: `message` to read the current message and `update` to write a new message."}
{"code": "const fromAddress = (await web3.eth.getAccounts())[0];\n\nconst contractABI = '[{\"constant\":false,\"inputs\":[{\"name\":\"newMessage\",\"type\":\"string\"}],\"name\":\"update\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"message\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"initMessage\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]';\nconst contractAddress = \"0x8b211dfebf490a648f6de859dfbed61fa22f35e0\";\nconst contract = new web3.eth.Contract(JSON.parse(contractABI), contractAddress);\n\n// Send transaction to smart contract to update message and wait to finish\nconst receipt = await contract.methods\n  .update(\"NEW_MESSAGE\")\n  .send({ from: fromAddress });\n```\n\n", "explanation": "This block of code updates a smart contract on the Ethereum blockchain by sending a transaction to change a stored message. \n\nFunctionality:\n\n- Retrieves an Ethereum account using `web3.eth.getAccounts()`.\n- Defines the contract ABI (Application Binary Interface) and address.\n- Creates a contract instance using the provided ABI and address.\n- Uses the `update` function of the contract to set a new message, sending the transaction from the retrieved account and awaiting its confirmation.", "metadata": {"repo": "magiclabs/documentation", "file": "advanced/ethereum/javascript/smart-contract.md", "chunk_number": 11, "total_chunks": 11}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "**Advanced Ethereum Smart Contract with JavaScript**\n\nThis document demonstrates how to deploy and interact with a simple Solidity smart contract using Ethers.js and the Magic SDK.\n\n**Key Functionality:**\n\n1. **Smart Contract:** Allows anyone to read and write a message.\n2. **Ethers.js Integration:** Initializes Magic SDK, sets up Web3 provider, and retrieves a signer instance for user authentication.\n3. **Deployment:** Deploys the smart contract with a constructor parameter using Ethers.js.\n4. **Contract Interaction:** Retrieves the current message and updates it by sending a transaction using the `update` function.\n\n**Overview:**\n\nThis guide provides a comprehensive overview of deploying a smart contract on the Ethereum blockchain and interacting with it using Ethers.js and the Magic SDK. The smart contract has two primary functions: `message` to read the current message and `update` to write a new message."}
{"code": "# \ud83d\udcb8 Send Transaction\n\n## Ethers.js\n\n```javascript\nimport { Magic } from 'magic-sdk';\nimport { ethers } from 'ethers';\n\nconst magic = new Magic(\"YOUR_PUBLISHABLE_API_KEY\");\nconst provider = new ethers.providers.Web3Provider(magic.rpcProvider);\n\n// \u2b50\ufe0f After user is successfully authenticated\n\nconst signer = provider.getSigner();\n\nconst destination = \"0xE0cef4417a772512E6C95cEf366403839b0D6D6D\";\nconst amount = ethers.utils.parseEther(1); // Convert 1 ether to wei\n\n// Submit transaction to the blockchain\nconst tx = await signer.sendTransaction({\n  to: destination,\n  value: amount\n});\n\n// Wait for transaction to be mined\nconst receipt = await tx.wait();\n```\n\n## Web3.js\n\n{% hint style=\"warning\" %}\nExample is using **`web3@1.2.0`** or later version.\n{% endhint %}\n\n```javascript\nimport { Magic } from 'magic-sdk';\nimport Web3 from 'web3';\n\nconst magic = new Magic(\"YOUR_PUBLISHABLE_API_KEY\");\nconst web3 = new Web3(magic.rpcProvider);\n\n// \u2b50\ufe0f After user is successfully authenticated\n\n// Get user's Ethereum public address", "explanation": "**Block Purpose and Functionality**\n\nThis block sends an Ethereum transaction to a specified address using two different libraries: Ethers.js and Web3.js. The user must be authenticated first, and then the code signs and submits the transaction to the blockchain, waiting for it to be mined.", "metadata": {"repo": "magiclabs/documentation", "file": "advanced/ethereum/send-transaction.md", "chunk_number": 1, "total_chunks": 2}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "The 'send-transaction.md' file in the 'advanced/ethereum' directory contains a code block that sends an Ethereum transaction to a specified address using both Ethers.js and Web3.js libraries. After authentication, the code signs and submits the transaction, awaiting its mining. It transfers 1 Ether from a specified 'fromAddress' to a destination address and returns the transaction receipt once mined."}
{"code": "const fromAddress = (await web3.eth.getAccounts())[0];\n\nconst destination = \"0xE0cef4417a772512E6C95cEf366403839b0D6D6D\";\nconst amount = web3.utils.toWei(1); // Convert 1 ether to wei\n\n// Submit transaction to the blockchain and wait for it to be mined\nconst receipt = await web3.eth.sendTransaction({\n  from: fromAddress,\n  to: destination,\n  value: amount\n})\n```\n\n", "explanation": "This code block sends a transaction of 1 Ether from the Ethereum account at `fromAddress` to a specific destination address, then waits for the transaction to be mined and returns the transaction receipt.", "metadata": {"repo": "magiclabs/documentation", "file": "advanced/ethereum/send-transaction.md", "chunk_number": 2, "total_chunks": 2}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "The 'send-transaction.md' file in the 'advanced/ethereum' directory contains a code block that sends an Ethereum transaction to a specified address using both Ethers.js and Web3.js libraries. After authentication, the code signs and submits the transaction, awaiting its mining. It transfers 1 Ether from a specified 'fromAddress' to a destination address and returns the transaction receipt once mined."}
{"code": "# \u270f\ufe0f Sign Message\n\n## Ethers.js\n\n{% tabs %}\n{% tab title=\"Personal Sign\" %}\n```typescript\nimport { Magic } from 'magic-sdk';\nimport { ethers } from 'ethers';\n\nconst magic = new Magic(\"YOUR_PUBLISHABLE_API_KEY\");\nconst provider = new ethers.providers.Web3Provider(magic.rpcProvider);\n\n// \u2b50\ufe0f After user is successfully authenticated\n\nconst signer = provider.getSigner();\n\nconst originalMessage = \"YOUR_MESSAGE\";\n\nconst signedMessage = await signer.signMessage(originalMessage);\n```\n{% endtab %}\n\n{% tab title=\"Sign Typed Data v1\" %}\n```typescript\nimport { Magic } from \"magic-sdk\";\nimport { ethers } from \"ethers\";\n\nconst magic = new Magic(\"YOUR_PUBLISHABLE_API_KEY\");\nconst provider = new ethers.providers.Web3Provider(magic.rpcProvider);\n\n// \u2b50\ufe0f After user is successfully authenticated\n\n// Get user's Ethereum public address\nconst fromAddress = await signer.getAddress();\n\nconst originalMessage = [\n  {\n    type: \"string\",\n    name: \"fullName\",\n    value: \"John Doe\"\n  },\n  {\n    type: \"uint32\",\n    name: \"userId\",\n    value: \"1234\"\n  }\n];", "explanation": "**Sign Message Block:**\n\nThis code block is for signing a message using Ethers.js. The purpose of this block is to demonstrate two methods of signing a message: \n\n1. **Personal Sign**: This method signs a standard message using the user's Ethereum account.\n2. **Sign Typed Data v1**: This method signs a typed message using a specified format (e.g., name, user ID).\n\nBoth methods require authentication with Magic SDK and use the user's Ethereum public address for signing.", "metadata": {"repo": "magiclabs/documentation", "file": "advanced/ethereum/sign-message.md", "chunk_number": 1, "total_chunks": 5}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "**Signing Messages with Ethereum**\n================================\n\nThe `advanced/ethereum/sign-message.md` file provides examples of signing messages using Ethereum addresses with Ethers.js, Magic SDK, and Web3 libraries. The code blocks demonstrate two methods of signing a message:\n\n1.  **Personal Sign**: Signs a standard message using the user's Ethereum account.\n2.  **Sign Typed Data v1**: Signs a typed message using a specified format (e.g., name, user ID).\n\nThe process involves:\n\n*   Authenticating with Magic SDK to retrieve the user's Ethereum public address.\n*   Defining a message structure according to the EIP-712 standard.\n*   Signing the message with the user's Ethereum public address using the `eth_signTypedData` or `eth_signTypedData_v3` method.\n\nThe resulting signed message is stored in the `signedMessage` variable, which can be used to prove ownership of the account without exposing the private key.\n\n**Example Code Blocks:**\n\nThe file contains multiple code blocks demonstrating different approaches to signing messages, including:\n\n*   Using `ethers` library and Magic SDK to sign typed data.\n*   Utilizing the `eth_signTypedData` method with Web3 and Magic libraries.\n*   Generating a typed data signature using Web3's `eth_signTypedData_v3` method.\n\nEach block provides a concise example of how to sign messages using Ethereum addresses, making it a valuable resource for developers working with Ethereum-based applications."}
{"code": "const params = [originalMessage, fromAddress];\nconst method = \"eth_signTypedData\";\n\nconst signedMessage = await signer.provider.send(method, params);\n```\n{% endtab %}\n\n{% tab title=\"Sign Typed Data v3\" %}\n```javascript\nimport { Magic } from \"magic-sdk\";\nimport { ethers } from \"ethers\";\n\nconst magic = new Magic(\"YOUR_PUBLISHABLE_API_KEY\");\nconst provider = new ethers.providers.Web3Provider(magic.rpcProvider);\n\n// \u2b50\ufe0f After user is successfully authenticated\n\n// Get user's Ethereum public address\nconst fromAddress = await signer.getAddress();\n\nconst originalMessage = {\n  types: {\n    EIP712Domain: [\n      {\n        name: \"name\",\n        type: \"string\"\n      },\n      {\n        name: \"version\",\n        type: \"string\"\n      },\n      {\n        name: \"verifyingContract\",\n        type: \"address\"\n      }\n    ],\n    Greeting: [\n      {\n        name: \"contents\",\n        type: \"string\"\n      }\n    ]\n  },\n  primaryType: \"Greeting\",\n  domain: {\n    name: \"Magic\",\n    version: \"1\",", "explanation": "**Summary:**\nThis block of code is used to sign typed data with a user's Ethereum address, utilizing the `ethers` library and `Magic SDK`. It defines a message structure according to the EIP-712 standard and signs it using the user's Ethereum public address, retrieved after successful authentication.", "metadata": {"repo": "magiclabs/documentation", "file": "advanced/ethereum/sign-message.md", "chunk_number": 2, "total_chunks": 5}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "**Signing Messages with Ethereum**\n================================\n\nThe `advanced/ethereum/sign-message.md` file provides examples of signing messages using Ethereum addresses with Ethers.js, Magic SDK, and Web3 libraries. The code blocks demonstrate two methods of signing a message:\n\n1.  **Personal Sign**: Signs a standard message using the user's Ethereum account.\n2.  **Sign Typed Data v1**: Signs a typed message using a specified format (e.g., name, user ID).\n\nThe process involves:\n\n*   Authenticating with Magic SDK to retrieve the user's Ethereum public address.\n*   Defining a message structure according to the EIP-712 standard.\n*   Signing the message with the user's Ethereum public address using the `eth_signTypedData` or `eth_signTypedData_v3` method.\n\nThe resulting signed message is stored in the `signedMessage` variable, which can be used to prove ownership of the account without exposing the private key.\n\n**Example Code Blocks:**\n\nThe file contains multiple code blocks demonstrating different approaches to signing messages, including:\n\n*   Using `ethers` library and Magic SDK to sign typed data.\n*   Utilizing the `eth_signTypedData` method with Web3 and Magic libraries.\n*   Generating a typed data signature using Web3's `eth_signTypedData_v3` method.\n\nEach block provides a concise example of how to sign messages using Ethereum addresses, making it a valuable resource for developers working with Ethereum-based applications."}
{"code": "    verifyingContract: \"0xE0cef4417a772512E6C95cEf366403839b0D6D6D\"\n  },\n  message: {\n    contents: \"Hello, from Magic!\"\n  }\n};\nconst params = [fromAddress, originalMessage];\nconst method = \"eth_signTypedData_v3\";\n\nconst signedMessage = await signer.provider.send(method, params);\n```\n{% endtab %}\n{% endtabs %}\n\n## Web3.js\n\n{% hint style=\"warning\" %}\nExample is using **`web3@1.2.0`** or later version.\n{% endhint %}\n\n{% tabs %}\n{% tab title=\"Personal Sign\" %}\n```typescript\nimport { Magic } from \"magic-sdk\";\nimport Web3 from \"web3\";\n\nconst magic = new Magic(\"YOUR_PUBLISHABLE_API_KEY\");\nconst web3 = new Web3(magic.rpcProvider);\n\n// \u2b50\ufe0f After user is successfully authenticated\n\n// Get user's Ethereum public address\nconst fromAddress = (await web3.eth.getAccounts())[0];\n\nconst originalMessage = \"YOUR_MESSAGE\";\n\nconst signedMessage = await web3.eth.personal.sign(\n  originalMessage,\n  fromAddress\n);\n```\n{% endtab %}\n\n{% tab title=\"Sign Typed Data v1\" %}\n```typescript\nimport { Magic } from \"magic-sdk\";\nimport Web3 from \"web3\";\n", "explanation": "This code block verifies a user's authenticity by signing a message using their Ethereum account. The purpose is to prove ownership of the account without exposing the private key. \n\nFunctionality: \n- Retrieves the user's Ethereum public address\n- Creates a message to be signed\n- Uses the Ethereum provider to sign the message, resulting in a signed message.", "metadata": {"repo": "magiclabs/documentation", "file": "advanced/ethereum/sign-message.md", "chunk_number": 3, "total_chunks": 5}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "**Signing Messages with Ethereum**\n================================\n\nThe `advanced/ethereum/sign-message.md` file provides examples of signing messages using Ethereum addresses with Ethers.js, Magic SDK, and Web3 libraries. The code blocks demonstrate two methods of signing a message:\n\n1.  **Personal Sign**: Signs a standard message using the user's Ethereum account.\n2.  **Sign Typed Data v1**: Signs a typed message using a specified format (e.g., name, user ID).\n\nThe process involves:\n\n*   Authenticating with Magic SDK to retrieve the user's Ethereum public address.\n*   Defining a message structure according to the EIP-712 standard.\n*   Signing the message with the user's Ethereum public address using the `eth_signTypedData` or `eth_signTypedData_v3` method.\n\nThe resulting signed message is stored in the `signedMessage` variable, which can be used to prove ownership of the account without exposing the private key.\n\n**Example Code Blocks:**\n\nThe file contains multiple code blocks demonstrating different approaches to signing messages, including:\n\n*   Using `ethers` library and Magic SDK to sign typed data.\n*   Utilizing the `eth_signTypedData` method with Web3 and Magic libraries.\n*   Generating a typed data signature using Web3's `eth_signTypedData_v3` method.\n\nEach block provides a concise example of how to sign messages using Ethereum addresses, making it a valuable resource for developers working with Ethereum-based applications."}
{"code": "const magic = new Magic(\"YOUR_PUBLISHABLE_API_KEY\");\nconst web3 = new Web3(magic.rpcProvider);\n\n// \u2b50\ufe0f After user is successfully authenticated\n\n// Get user's Ethereum public address\nconst fromAddress = (await web3.eth.getAccounts())[0];\n\nconst originalMessage = [\n  {\n    type: \"string\",\n    name: \"fullName\",\n    value: \"John Doe\"\n  },\n  {\n    type: \"uint32\",\n    name: \"userId\",\n    value: \"1234\"\n  }\n];\nconst params = [originalMessage, fromAddress];\nconst method = \"eth_signTypedData\";\n\nconst signedMessage = await web3.currentProvider.sendAsync({\n  id: 1,\n  method,\n  params,\n  fromAddress\n});\n```\n{% endtab %}\n\n{% tab title=\"Sign Typed Data v3\" %}\n```javascript\nimport { Magic } from \"magic-sdk\";\nimport Web3 from \"web3\";\n\nconst magic = new Magic(\"YOUR_PUBLISHABLE_API_KEY\");\nconst web3 = new Web3(magic.rpcProvider);\n\n// \u2b50\ufe0f After user is successfully authenticated\n\n// Get user's Ethereum public address\nconst fromAddress = (await web3.eth.getAccounts())[0];\n\nconst originalMessage = {\n  types: {\n    EIP712Domain: [\n      {", "explanation": "**Summary:**\n\nThis JavaScript code block uses the `Magic` and `Web3` libraries to authenticate a user and obtain their Ethereum public address. It then creates a typed data message (originalMessage) and signs it with the user's address using the `eth_signTypedData` method. The resulting signed message is stored in the `signedMessage` variable.", "metadata": {"repo": "magiclabs/documentation", "file": "advanced/ethereum/sign-message.md", "chunk_number": 4, "total_chunks": 5}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "**Signing Messages with Ethereum**\n================================\n\nThe `advanced/ethereum/sign-message.md` file provides examples of signing messages using Ethereum addresses with Ethers.js, Magic SDK, and Web3 libraries. The code blocks demonstrate two methods of signing a message:\n\n1.  **Personal Sign**: Signs a standard message using the user's Ethereum account.\n2.  **Sign Typed Data v1**: Signs a typed message using a specified format (e.g., name, user ID).\n\nThe process involves:\n\n*   Authenticating with Magic SDK to retrieve the user's Ethereum public address.\n*   Defining a message structure according to the EIP-712 standard.\n*   Signing the message with the user's Ethereum public address using the `eth_signTypedData` or `eth_signTypedData_v3` method.\n\nThe resulting signed message is stored in the `signedMessage` variable, which can be used to prove ownership of the account without exposing the private key.\n\n**Example Code Blocks:**\n\nThe file contains multiple code blocks demonstrating different approaches to signing messages, including:\n\n*   Using `ethers` library and Magic SDK to sign typed data.\n*   Utilizing the `eth_signTypedData` method with Web3 and Magic libraries.\n*   Generating a typed data signature using Web3's `eth_signTypedData_v3` method.\n\nEach block provides a concise example of how to sign messages using Ethereum addresses, making it a valuable resource for developers working with Ethereum-based applications."}
{"code": "        name: \"name\",\n        type: \"string\"\n      },\n      {\n        name: \"version\",\n        type: \"string\"\n      },\n      {\n        name: \"verifyingContract\",\n        type: \"address\"\n      }\n    ],\n    Greeting: [\n      {\n        name: \"contents\",\n        type: \"string\"\n      }\n    ]\n  },\n  primaryType: \"Greeting\",\n  domain: {\n    name: \"Magic\",\n    version: \"1\",\n    verifyingContract: \"0xE0cef4417a772512E6C95cEf366403839b0D6D6D\"\n  },\n  message: {\n    contents: \"Hello, from Magic!\"\n  }\n};\nconst params = [fromAddress, originalMessage];\nconst method = \"eth_signTypedData_v3\";\n\nconst signedMessage = await web3.currentProvider.sendAsync({\n  id: 1,\n  method,\n  params,\n  fromAddress\n});\n```\n{% endtab %}\n{% endtabs %}\n\n", "explanation": "**Summary**\n\nThis block generates a typed data signature using Web3's `eth_signTypedData_v3` method. It defines the structure of the data to be signed, including fields for `name`, `version`, `verifyingContract`, and a `Greeting` message. The method then sends a request to the Web3 provider to sign the data with the specified `fromAddress`, returning a signed message.\n\n**Breakdown**\n\n* Defines the structure of the typed data using JSON objects\n* Specifies the `primaryType` and `domain` of the data\n* Prepares a `message` object with a `contents` field\n* Creates an array of parameters (`params`) including the `fromAddress` and the `originalMessage` (not shown)\n* Uses Web3's `sendAsync` method to send a request to the provider to sign the data using `eth_signTypedData_v3`\n* Awaits the response and assigns it to the `signedMessage` variable.", "metadata": {"repo": "magiclabs/documentation", "file": "advanced/ethereum/sign-message.md", "chunk_number": 5, "total_chunks": 5}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "**Signing Messages with Ethereum**\n================================\n\nThe `advanced/ethereum/sign-message.md` file provides examples of signing messages using Ethereum addresses with Ethers.js, Magic SDK, and Web3 libraries. The code blocks demonstrate two methods of signing a message:\n\n1.  **Personal Sign**: Signs a standard message using the user's Ethereum account.\n2.  **Sign Typed Data v1**: Signs a typed message using a specified format (e.g., name, user ID).\n\nThe process involves:\n\n*   Authenticating with Magic SDK to retrieve the user's Ethereum public address.\n*   Defining a message structure according to the EIP-712 standard.\n*   Signing the message with the user's Ethereum public address using the `eth_signTypedData` or `eth_signTypedData_v3` method.\n\nThe resulting signed message is stored in the `signedMessage` variable, which can be used to prove ownership of the account without exposing the private key.\n\n**Example Code Blocks:**\n\nThe file contains multiple code blocks demonstrating different approaches to signing messages, including:\n\n*   Using `ethers` library and Magic SDK to sign typed data.\n*   Utilizing the `eth_signTypedData` method with Web3 and Magic libraries.\n*   Generating a typed data signature using Web3's `eth_signTypedData_v3` method.\n\nEach block provides a concise example of how to sign messages using Ethereum addresses, making it a valuable resource for developers working with Ethereum-based applications."}
{"code": "# \ud83d\udcdc Smart Contract\n\n## Solidity Contract\n\nIn this example, we'll be demonstrating how to use Magic with ethers.js or web3.js to interact with Solidity smart contracts. The simple Hello World contract allows anyone to read and write a message to it.\n\n```javascript\npragma solidity ^0.5.10;\n\ncontract HelloWorld {\n\n  string public message;\n    \n  constructor(string memory initMessage) public {\n    message = initMessage;\n  }\n\n  function update(string memory newMessage) public {\n    message = newMessage;\n  }\n}\n```\n\n## Ethers.js\n\n### Deploy Contract\n\n```javascript\nimport { Magic } from 'magic-sdk';\nimport { ethers } from 'ethers';\n\nconst magic = new Magic(\"YOUR_PUBLISHABLE_API_KEY\");\nconst provider = new ethers.providers.Web3Provider(magic.rpcProvider);\n\n// \u2b50\ufe0f After user is successfully authenticated\n\nconst signer = provider.getSigner();\n", "explanation": "**Purpose and Functionality Summary**\n\nThis block demonstrates a simple Solidity smart contract (`HelloWorld`) that allows reading and writing a message. The contract is deployed using `ethers.js` and `Magic SDK`, enabling users to interact with the contract after successful authentication. The contract has two main functions: a constructor to set the initial message and an `update` function to change the message.", "metadata": {"repo": "magiclabs/documentation", "file": "advanced/ethereum/smart-contract.md", "chunk_number": 1, "total_chunks": 11}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "The file 'advanced/ethereum/smart-contract.md' outlines the process of deploying and interacting with a simple Solidity-based smart contract on the Ethereum blockchain. Here's a concise summary of its key functionalities:\n\n1. **Contract Creation**: A \"HelloWorld\" smart contract is created with an initial message, allowing users to read and write updates to this message.\n2. **Deployment**: The contract is deployed using `ethers.js` and `Magic SDK`, with a constructor argument setting the initial message.\n3. **Interaction**: Users can interact with the contract after authentication, reading the current message or updating it by sending a transaction.\n4. **Setup and Configuration**: The code sets up a connection to the Ethereum blockchain using the `ethers` library and initializes a contract instance with its ABI and address.\n\nIn summary, this file provides a step-by-step guide to deploying a smart contract, interacting with it, and setting up the necessary configuration using `ethers.js` and `Magic SDK`."}
{"code": "const contractABI = '[{\"constant\":false,\"inputs\":[{\"name\":\"newMessage\",\"type\":\"string\"}],\"name\":\"update\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"message\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"initMessage\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]';", "explanation": "This is a JSON-formatted ABI (Application Binary Interface) for a smart contract. It describes the contract's functions and their inputs/outputs. \n\nFunctionality:\n\n- `update(newMessage: string)`: a non-payable function to update a message string.\n- `message()`: a view function that returns a message string.\n- The contract has a constructor that takes an `initMessage` string as input, used to initialize the contract.", "metadata": {"repo": "magiclabs/documentation", "file": "advanced/ethereum/smart-contract.md", "chunk_number": 2, "total_chunks": 11}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "The file 'advanced/ethereum/smart-contract.md' outlines the process of deploying and interacting with a simple Solidity-based smart contract on the Ethereum blockchain. Here's a concise summary of its key functionalities:\n\n1. **Contract Creation**: A \"HelloWorld\" smart contract is created with an initial message, allowing users to read and write updates to this message.\n2. **Deployment**: The contract is deployed using `ethers.js` and `Magic SDK`, with a constructor argument setting the initial message.\n3. **Interaction**: Users can interact with the contract after authentication, reading the current message or updating it by sending a transaction.\n4. **Setup and Configuration**: The code sets up a connection to the Ethereum blockchain using the `ethers` library and initializes a contract instance with its ABI and address.\n\nIn summary, this file provides a step-by-step guide to deploying a smart contract, interacting with it, and setting up the necessary configuration using `ethers.js` and `Magic SDK`."}
{"code": "const contractByteCode = \"0x608060405234801561001057600080fd5b5060405161047f38038061047f8339818101604052602081101561003357600080fd5b81019080805164010000000081111561004b57600080fd5b8281019050602081018481111561006157600080fd5b815185600182028301116401000000008211171561007e57600080fd5b5050929190505050806000908051906020019061009c9291906100a3565b5050610148565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106100e457805160ff1916838001178555610112565b82800160010185558215610112579182015b828111156101115782518255916020019190600101906100f6565b5b50905061011f9190610123565b5090565b61014591905b80821115610141576000816000905550600101610129565b5090565b90565b610328806101576000396000f3fe608060405234801561001057600080fd5b5060043610610053576000357c0100000000000000000000000000000000000000000000000000000000900480633d7403a314610058578063e21f37ce14610113575b600080fd5b6101116004803603602081101561006e57600080fd5b810190808035906020019064010000000081111561008b57600080fd5b82018360208201111561009d57600080fd5b803590602001918460018302840111640100000000831117156100bf57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050610196565b005b61011b6101b0565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561015b578082015181840152602081019050610140565b50505050905090810190601f1680156101885780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b80600090805190602001906101ac92919061024e565b5050565b60008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156102465780601f1061021b57610100808354040283529160200191610246565b820191906000526020600020905b81548152906001019060200180831161022957829003601f168201915b505050505081565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061028f57805160ff19168380011785556102bd565b828001600101855582156102bd579182015b828111156102bc5782518255916020019190600101906102a1565b5b5090506102ca91906102ce565b5090565b6102f091905b808211156102ec5760008160009055506001016102d4565b5090565b9056fea265627a7a7230582003ae1ef5a63bf058bfd2b31398bdee39d3cbfbb7fbf84235f4bc2ec352ee810f64736f6c634300050a0032\";", "explanation": "**Summary:**\nThis block contains a hexadecimal-encoded bytecode string for a smart contract, likely deployed on the Ethereum blockchain. The bytecode is compiled from Solidity source code and represents the contract's executable machine code.", "metadata": {"repo": "magiclabs/documentation", "file": "advanced/ethereum/smart-contract.md", "chunk_number": 3, "total_chunks": 11}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "The file 'advanced/ethereum/smart-contract.md' outlines the process of deploying and interacting with a simple Solidity-based smart contract on the Ethereum blockchain. Here's a concise summary of its key functionalities:\n\n1. **Contract Creation**: A \"HelloWorld\" smart contract is created with an initial message, allowing users to read and write updates to this message.\n2. **Deployment**: The contract is deployed using `ethers.js` and `Magic SDK`, with a constructor argument setting the initial message.\n3. **Interaction**: Users can interact with the contract after authentication, reading the current message or updating it by sending a transaction.\n4. **Setup and Configuration**: The code sets up a connection to the Ethereum blockchain using the `ethers` library and initializes a contract instance with its ABI and address.\n\nIn summary, this file provides a step-by-step guide to deploying a smart contract, interacting with it, and setting up the necessary configuration using `ethers.js` and `Magic SDK`."}
{"code": "const contractFactory = new ethers.ContractFactory(\n  contractABI,\n  contractByteCode,\n  signer\n);\n\n// Deploy contract with \"Hello World!\" in the constructor\nconst contract = await contractFactory.deploy(\"Hello World!\");\n\n// Wait for deployment to finish\nconst receipt = await contract.deployed();\n```\n\n### Read From Contract\n\n```javascript\nimport { Magic } from 'magic-sdk';\nimport { ethers } from 'ethers';\n\nconst magic = new Magic(\"YOUR_PUBLISHABLE_API_KEY\");\nconst provider = new ethers.providers.Web3Provider(magic.rpcProvider);\n\n// \u2b50\ufe0f After user is successfully authenticated\n\nconst signer = provider.getSigner();\n", "explanation": "**Summary**\n\nThis JavaScript code block is used to deploy a smart contract on the Ethereum blockchain. The contract is instantiated with a specific ABI, bytecode, and signer (a user's account). The contract is then deployed with a constructor argument (\"Hello World!\") and awaits confirmation of the deployment transaction.\n\n**Functionality Breakdown**\n\n1. Create a contract factory with the contract's ABI, bytecode, and a signer (user's account).\n2. Deploy the contract with a constructor argument.\n3. Wait for the deployment to finish and retrieve the transaction receipt.", "metadata": {"repo": "magiclabs/documentation", "file": "advanced/ethereum/smart-contract.md", "chunk_number": 4, "total_chunks": 11}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "The file 'advanced/ethereum/smart-contract.md' outlines the process of deploying and interacting with a simple Solidity-based smart contract on the Ethereum blockchain. Here's a concise summary of its key functionalities:\n\n1. **Contract Creation**: A \"HelloWorld\" smart contract is created with an initial message, allowing users to read and write updates to this message.\n2. **Deployment**: The contract is deployed using `ethers.js` and `Magic SDK`, with a constructor argument setting the initial message.\n3. **Interaction**: Users can interact with the contract after authentication, reading the current message or updating it by sending a transaction.\n4. **Setup and Configuration**: The code sets up a connection to the Ethereum blockchain using the `ethers` library and initializes a contract instance with its ABI and address.\n\nIn summary, this file provides a step-by-step guide to deploying a smart contract, interacting with it, and setting up the necessary configuration using `ethers.js` and `Magic SDK`."}
{"code": "const contractABI = '[{\"constant\":false,\"inputs\":[{\"name\":\"newMessage\",\"type\":\"string\"}],\"name\":\"update\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"message\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"initMessage\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]';\nconst contractAddress = \"0x8b211dfebf490a648f6de859dfbed61fa22f35e0\";\nconst contract = new ethers.Contract(\n  contractAddress,\n  contractABI,\n  signer\n);\n\n// Read message from smart contract\nconst message = await contract.message();\n```\n\n### Write to Contract\n\n```javascript\nimport { Magic } from 'magic-sdk';\nimport { ethers } from 'ethers';\n\nconst magic = new Magic(\"YOUR_PUBLISHABLE_API_KEY\");\nconst provider = new ethers.providers.Web3Provider(magic.rpcProvider);\n\n// \u2b50\ufe0f After user is successfully authenticated\n\nconst signer = provider.getSigner();\n", "explanation": "### Summary\n\nThis block of code connects to an Ethereum smart contract and reads a message from it. The contract's ABI (Application Binary Interface) and address are provided, allowing the `ethers` library to interact with the contract. The contract is then used to call the `message` function and retrieve its value.\n\n### Key Functionality\n\n* Establishes a connection to an Ethereum smart contract using the `ethers` library\n* Initializes a `Contract` object with the contract's ABI and address\n* Calls the `message` function on the contract to retrieve its value", "metadata": {"repo": "magiclabs/documentation", "file": "advanced/ethereum/smart-contract.md", "chunk_number": 5, "total_chunks": 11}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "The file 'advanced/ethereum/smart-contract.md' outlines the process of deploying and interacting with a simple Solidity-based smart contract on the Ethereum blockchain. Here's a concise summary of its key functionalities:\n\n1. **Contract Creation**: A \"HelloWorld\" smart contract is created with an initial message, allowing users to read and write updates to this message.\n2. **Deployment**: The contract is deployed using `ethers.js` and `Magic SDK`, with a constructor argument setting the initial message.\n3. **Interaction**: Users can interact with the contract after authentication, reading the current message or updating it by sending a transaction.\n4. **Setup and Configuration**: The code sets up a connection to the Ethereum blockchain using the `ethers` library and initializes a contract instance with its ABI and address.\n\nIn summary, this file provides a step-by-step guide to deploying a smart contract, interacting with it, and setting up the necessary configuration using `ethers.js` and `Magic SDK`."}
{"code": "const contractABI = '[{\"constant\":false,\"inputs\":[{\"name\":\"newMessage\",\"type\":\"string\"}],\"name\":\"update\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"message\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"initMessage\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]';\nconst contractAddress = \"0x8b211dfebf490a648f6de859dfbed61fa22f35e0\";\nconst contract = new ethers.Contract(\n  contractAddress,\n  contractABI,\n  signer\n);\n\n// Send transaction to smart contract to update message\nconst tx = await contract.update(\"NEW_MESSAGE\");\n\n// Wait for transaction to finish\nconst receipt = await tx.wait();\n```\n\n## Web3.js\n\n{% hint style=\"warning\" %}\nExample is using **`web3@1.2.0`** or later version.\n{% endhint %}\n\n### Deploy Contract\n\n```javascript\nimport { Magic } from \"magic-sdk\";\nimport Web3 from \"web3\";\n", "explanation": "**Summary:**\n\nThis code block is used to interact with a deployed smart contract on the Ethereum blockchain using the Ethers.js library. It initializes a contract instance with the provided contract ABI and address, then sends a transaction to update a message on the contract and waits for the transaction to be mined and confirmed.", "metadata": {"repo": "magiclabs/documentation", "file": "advanced/ethereum/smart-contract.md", "chunk_number": 6, "total_chunks": 11}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "The file 'advanced/ethereum/smart-contract.md' outlines the process of deploying and interacting with a simple Solidity-based smart contract on the Ethereum blockchain. Here's a concise summary of its key functionalities:\n\n1. **Contract Creation**: A \"HelloWorld\" smart contract is created with an initial message, allowing users to read and write updates to this message.\n2. **Deployment**: The contract is deployed using `ethers.js` and `Magic SDK`, with a constructor argument setting the initial message.\n3. **Interaction**: Users can interact with the contract after authentication, reading the current message or updating it by sending a transaction.\n4. **Setup and Configuration**: The code sets up a connection to the Ethereum blockchain using the `ethers` library and initializes a contract instance with its ABI and address.\n\nIn summary, this file provides a step-by-step guide to deploying a smart contract, interacting with it, and setting up the necessary configuration using `ethers.js` and `Magic SDK`."}
{"code": "const magic = new Magic(\"YOUR_PUBLISHABLE_API_KEY\");\nconst web3 = new Web3(magic.rpcProvider);\n\n// \u2b50\ufe0f After user is successfully authenticated\n\n// Get user's Ethereum public address\nconst fromAddress = (await web3.eth.getAccounts())[0];\n\nconst contractABI = '[{\"constant\":false,\"inputs\":[{\"name\":\"newMessage\",\"type\":\"string\"}],\"name\":\"update\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"message\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"initMessage\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]';", "explanation": "**Summary**\n\nThis code block initializes a Magic object with a publishable API key and sets up a Web3 provider. After user authentication, it retrieves the user's Ethereum public address and defines a smart contract's ABI (Application Binary Interface), which specifies the contract's functions and inputs/outputs.", "metadata": {"repo": "magiclabs/documentation", "file": "advanced/ethereum/smart-contract.md", "chunk_number": 7, "total_chunks": 11}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "The file 'advanced/ethereum/smart-contract.md' outlines the process of deploying and interacting with a simple Solidity-based smart contract on the Ethereum blockchain. Here's a concise summary of its key functionalities:\n\n1. **Contract Creation**: A \"HelloWorld\" smart contract is created with an initial message, allowing users to read and write updates to this message.\n2. **Deployment**: The contract is deployed using `ethers.js` and `Magic SDK`, with a constructor argument setting the initial message.\n3. **Interaction**: Users can interact with the contract after authentication, reading the current message or updating it by sending a transaction.\n4. **Setup and Configuration**: The code sets up a connection to the Ethereum blockchain using the `ethers` library and initializes a contract instance with its ABI and address.\n\nIn summary, this file provides a step-by-step guide to deploying a smart contract, interacting with it, and setting up the necessary configuration using `ethers.js` and `Magic SDK`."}
{"code": "const contractByteCode = \"0x608060405234801561001057600080fd5b5060405161047f38038061047f8339818101604052602081101561003357600080fd5b81019080805164010000000081111561004b57600080fd5b8281019050602081018481111561006157600080fd5b815185600182028301116401000000008211171561007e57600080fd5b5050929190505050806000908051906020019061009c9291906100a3565b5050610148565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106100e457805160ff1916838001178555610112565b82800160010185558215610112579182015b828111156101115782518255916020019190600101906100f6565b5b50905061011f9190610123565b5090565b61014591905b80821115610141576000816000905550600101610129565b5090565b90565b610328806101576000396000f3fe608060405234801561001057600080fd5b5060043610610053576000357c0100000000000000000000000000000000000000000000000000000000900480633d7403a314610058578063e21f37ce14610113575b600080fd5b6101116004803603602081101561006e57600080fd5b810190808035906020019064010000000081111561008b57600080fd5b82018360208201111561009d57600080fd5b803590602001918460018302840111640100000000831117156100bf57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050610196565b005b61011b6101b0565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561015b578082015181840152602081019050610140565b50505050905090810190601f1680156101885780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b80600090805190602001906101ac92919061024e565b5050565b60008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156102465780601f1061021b57610100808354040283529160200191610246565b820191906000526020600020905b81548152906001019060200180831161022957829003601f168201915b505050505081565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061028f57805160ff19168380011785556102bd565b828001600101855582156102bd579182015b828111156102bc5782518255916020019190600101906102a1565b5b5090506102ca91906102ce565b5090565b6102f091905b808211156102ec5760008160009055506001016102d4565b5090565b9056fea265627a7a7230582003ae1ef5a63bf058bfd2b31398bdee39d3cbfbb7fbf84235f4bc2ec352ee810f64736f6c634300050a0032\";", "explanation": "This is the bytecode of a smart contract, likely written in the Solidity programming language and compiled to EVM bytecode. It contains the machine-readable instructions that will be executed on the Ethereum blockchain.", "metadata": {"repo": "magiclabs/documentation", "file": "advanced/ethereum/smart-contract.md", "chunk_number": 8, "total_chunks": 11}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "The file 'advanced/ethereum/smart-contract.md' outlines the process of deploying and interacting with a simple Solidity-based smart contract on the Ethereum blockchain. Here's a concise summary of its key functionalities:\n\n1. **Contract Creation**: A \"HelloWorld\" smart contract is created with an initial message, allowing users to read and write updates to this message.\n2. **Deployment**: The contract is deployed using `ethers.js` and `Magic SDK`, with a constructor argument setting the initial message.\n3. **Interaction**: Users can interact with the contract after authentication, reading the current message or updating it by sending a transaction.\n4. **Setup and Configuration**: The code sets up a connection to the Ethereum blockchain using the `ethers` library and initializes a contract instance with its ABI and address.\n\nIn summary, this file provides a step-by-step guide to deploying a smart contract, interacting with it, and setting up the necessary configuration using `ethers.js` and `Magic SDK`."}
{"code": "const contract = new web3.eth.Contract(JSON.parse(contractABI));\n\n// Deploy contract with \"Hello World!\" in the constructor and wait to finish\nconst contractInstance = await contract\n  .deploy({\n    data: contractByteCode,\n    arguments: [\"Hello World!\"]\n  })\n  .send({\n    from: fromAddress\n  });\n```\n\n### Read From Contract\n\n```javascript\nimport { Magic } from \"magic-sdk\";\nimport Web3 from \"web3\";\n\nconst magic = new Magic(\"YOUR_PUBLISHABLE_API_KEY\");\nconst web3 = new Web3(magic.rpcProvider);\n\n// \u2b50\ufe0f After user is successfully authenticated\n\n// Get user's Ethereum public address\nconst fromAddress = (await web3.eth.getAccounts())[0];\n", "explanation": "**Deploying a Smart Contract**\n\nThis code deploys a smart contract to the Ethereum blockchain, passing a string argument (\"Hello World!\") to the constructor. It uses Web3.js to create a contract instance from the contract's ABI and byte code, then sends the deployment transaction from a user's Ethereum address obtained through Magic SDK authentication.", "metadata": {"repo": "magiclabs/documentation", "file": "advanced/ethereum/smart-contract.md", "chunk_number": 9, "total_chunks": 11}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "The file 'advanced/ethereum/smart-contract.md' outlines the process of deploying and interacting with a simple Solidity-based smart contract on the Ethereum blockchain. Here's a concise summary of its key functionalities:\n\n1. **Contract Creation**: A \"HelloWorld\" smart contract is created with an initial message, allowing users to read and write updates to this message.\n2. **Deployment**: The contract is deployed using `ethers.js` and `Magic SDK`, with a constructor argument setting the initial message.\n3. **Interaction**: Users can interact with the contract after authentication, reading the current message or updating it by sending a transaction.\n4. **Setup and Configuration**: The code sets up a connection to the Ethereum blockchain using the `ethers` library and initializes a contract instance with its ABI and address.\n\nIn summary, this file provides a step-by-step guide to deploying a smart contract, interacting with it, and setting up the necessary configuration using `ethers.js` and `Magic SDK`."}
{"code": "const contractABI = '[{\"constant\":false,\"inputs\":[{\"name\":\"newMessage\",\"type\":\"string\"}],\"name\":\"update\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"message\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"initMessage\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]';\nconst contractAddress = \"0x8b211dfebf490a648f6de859dfbed61fa22f35e0\";\nconst contract = new web3.eth.Contract(JSON.parse(contractABI), contractAddress);\n\n// Read message from smart contract\nconst message = await contract.methods.message().call();\n```\n\n### Write to Contract\n\n```javascript\nimport { Magic } from \"magic-sdk\";\nimport Web3 from \"web3\";\n\nconst magic = new Magic(\"YOUR_PUBLISHABLE_API_KEY\");\nconst web3 = new Web3(magic.rpcProvider);\n\n// \u2b50\ufe0f After user is successfully authenticated\n\n// Get user's Ethereum public address", "explanation": "**Summary**\n\nThis JavaScript block sets up a connection to a smart contract on the Ethereum blockchain and reads the contract's current message. It also initializes a basic setup for writing to the contract using user authentication through the Magic SDK.\n\n**Functionality**\n\n1. Define the contract's ABI (Application Binary Interface) and address.\n2. Create a Web3 contract instance using the ABI and address.\n3. Read the contract's current message using the `message()` function.\n4. Initialize a Magic SDK instance for user authentication and setup a Web3 provider.\n5. (Intent) Write to the contract once a user is authenticated and their Ethereum public address is obtained.", "metadata": {"repo": "magiclabs/documentation", "file": "advanced/ethereum/smart-contract.md", "chunk_number": 10, "total_chunks": 11}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "The file 'advanced/ethereum/smart-contract.md' outlines the process of deploying and interacting with a simple Solidity-based smart contract on the Ethereum blockchain. Here's a concise summary of its key functionalities:\n\n1. **Contract Creation**: A \"HelloWorld\" smart contract is created with an initial message, allowing users to read and write updates to this message.\n2. **Deployment**: The contract is deployed using `ethers.js` and `Magic SDK`, with a constructor argument setting the initial message.\n3. **Interaction**: Users can interact with the contract after authentication, reading the current message or updating it by sending a transaction.\n4. **Setup and Configuration**: The code sets up a connection to the Ethereum blockchain using the `ethers` library and initializes a contract instance with its ABI and address.\n\nIn summary, this file provides a step-by-step guide to deploying a smart contract, interacting with it, and setting up the necessary configuration using `ethers.js` and `Magic SDK`."}
{"code": "const fromAddress = (await web3.eth.getAccounts())[0];\n\nconst contractABI = '[{\"constant\":false,\"inputs\":[{\"name\":\"newMessage\",\"type\":\"string\"}],\"name\":\"update\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"message\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"initMessage\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]';\nconst contractAddress = \"0x8b211dfebf490a648f6de859dfbed61fa22f35e0\";\nconst contract = new web3.eth.Contract(JSON.parse(contractABI), contractAddress);\n\n// Send transaction to smart contract to update message and wait to finish\nconst receipt = await contract.methods\n  .update(\"NEW_MESSAGE\")\n  .send({ from: fromAddress });\n```\n\n", "explanation": "**Purpose and Functionality Summary**\n\nThis code block interacts with a smart contract on the Ethereum blockchain. It:\n\n1. Retrieves the user's Ethereum account address.\n2. Defines a contract's ABI (Application Binary Interface) and address.\n3. Creates a contract instance using the provided ABI and address.\n4. Sends a transaction to the smart contract to update a message with the input \"NEW_MESSAGE\".\n5. Waits for the transaction to be processed and returns the transaction receipt.", "metadata": {"repo": "magiclabs/documentation", "file": "advanced/ethereum/smart-contract.md", "chunk_number": 11, "total_chunks": 11}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "The file 'advanced/ethereum/smart-contract.md' outlines the process of deploying and interacting with a simple Solidity-based smart contract on the Ethereum blockchain. Here's a concise summary of its key functionalities:\n\n1. **Contract Creation**: A \"HelloWorld\" smart contract is created with an initial message, allowing users to read and write updates to this message.\n2. **Deployment**: The contract is deployed using `ethers.js` and `Magic SDK`, with a constructor argument setting the initial message.\n3. **Interaction**: Users can interact with the contract after authentication, reading the current message or updating it by sending a transaction.\n4. **Setup and Configuration**: The code sets up a connection to the Ethereum blockchain using the `ethers` library and initializes a contract instance with its ABI and address.\n\nIn summary, this file provides a step-by-step guide to deploying a smart contract, interacting with it, and setting up the necessary configuration using `ethers.js` and `Magic SDK`."}
{"code": "# ICON\n\n", "explanation": "A placeholder or separator likely indicating the start of a section or entity's icon description.", "metadata": {"repo": "magiclabs/documentation", "file": "advanced/icon/README.md", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "Based on the provided code block summary, here's a concise holistic summary of the 'advanced/icon/README.md' file:\n\n\"This file contains a collection of advanced icon descriptions, each separated by a placeholder or separator for clarity and organization.\""}
{"code": "# \ud83d\ude80 Get Started\n\n## \ud83d\udce6 Installation\n\nMagic interacts with the [ICON](https://icon.foundation/)  blockchain via Magic's extension NPM package [`@magic-ext/icon`](https://www.npmjs.com/package/@magic-ext/icon). The ICON extension also lets you interact with the blockchain using methods from [ICON's Javascript SDK](https://www.icondev.io/docs/javascript-sdk).\n\n{% hint style=\"info\" %}\nYou can skip straight to our kitchen sink example directly:\n\n\ud83d\udc49 [**ICON Example**](https://go.magic.link/example-icon)\\*\\*\\*\\*\n{% endhint %}\n\n{% tabs %}\n{% tab title=\"NPM\" %}\n```bash\nnpm install --save @magic-ext/icon\n```\n{% endtab %}\n\n{% tab title=\"Yarn\" %}\n```\nyarn add @magic-ext/icon\n```\n{% endtab %}\n{% endtabs %}\n\n## \u26a1\ufe0f Initializing Extension\n\n{% tabs %}\n{% tab title=\"ES Modules/TypeScript\" %}\n```typescript\nimport { Magic } from 'magic-sdk';\nimport { IconExtension } from '@magic-ext/icon';\n \nconst magic = new Magic('YOUR_API_KEY', {\n  extensions: [\n    new IconExtension({\n      rpcUrl: 'ICON_RPC_NODE_URL'\n    })\n  ]\n});\n```\n{% endtab %}", "explanation": "**Purpose and Functionality Summary:**\n\nThis block provides instructions for installing and initializing the Magic ICON extension, which enables interaction with the ICON blockchain using Magic's SDK. It includes installation methods via NPM and Yarn, and initialization examples for ES Modules/TypeScript, allowing users to set up the extension with their API key and RPC node URL.", "metadata": {"repo": "magiclabs/documentation", "file": "advanced/icon/get-started.md", "chunk_number": 1, "total_chunks": 2}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "**advanced/icon/get-started.md**\n\nThis Markdown file guides users through the process of installing and initializing the Magic ICON extension, enabling them to interact with the ICON blockchain using Magic's SDK. It covers installation via NPM and Yarn, and provides initialization examples for use with ES Modules/TypeScript."}
{"code": "{% endtabs %}\n\n", "explanation": "This block closes a \"tabs\" section in Markdown documentation, specifically in platforms like GitHub and Bitbucket, indicating the end of a tabbed content area.", "metadata": {"repo": "magiclabs/documentation", "file": "advanced/icon/get-started.md", "chunk_number": 2, "total_chunks": 2}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "**advanced/icon/get-started.md**\n\nThis Markdown file guides users through the process of installing and initializing the Magic ICON extension, enabling them to interact with the ICON blockchain using Magic's SDK. It covers installation via NPM and Yarn, and provides initialization examples for use with ES Modules/TypeScript."}
{"code": "# \ud83d\udc64 Get User Info\n\n## Get Account\n\nUsing getAccount function to get ICON public address for current user.\n\n{% tabs %}\n{% tab title=\"ES Modules/TypeScript\" %}\n```typescript\nimport { Magic } from 'magic-sdk';\nimport { IconExtension } from '@magic-ext/icon';\n \nconst magic = new Magic('YOUR_API_KEY', {\n  extensions: [\n    new IconExtension({\n      rpcUrl: 'ICON_RPC_NODE_URL'\n    })\n  ]\n});\n\n// Get user's ICON public address\nconst publicAddress = await magic.icon.getAccount();\nconsole.log('ICON Public Address: ', publicAddress);\n```\n{% endtab %}\n{% endtabs %}\n\n", "explanation": "**Purpose:** Retrieves a user's ICON public address using the Magic SDK and ICON Extension.\n\n**Functionality:** Initializes the Magic SDK with an API key and ICON Extension, then calls the `getAccount` function to fetch the user's ICON public address.", "metadata": {"repo": "magiclabs/documentation", "file": "advanced/icon/get-user-info.md", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "**advanced/icon/get-user-info.md Summary**\n\nThis file retrieves a user's ICON public address using the Magic SDK and ICON Extension. It initializes the Magic SDK with an API key and ICON Extension, then calls the `getAccount` function to fetch the user's ICON public address, providing the user's ICON identity."}
{"code": "# \ud83d\udcb8 Send Transaction\n\n## Send Transaction\n\n### Getting Test ICON\n\nBefore you can send transaction on the ICON blockchain, you'll need to acquire some test ICON \\(ICON's native cryptocurrency for test network\\).\n\n1. Go to our [**ICON Example**](https://go.magic.link/example-icon) application\n2. Login with your email address\n3. Copy your ICON public address\n4. Go to the[ **ICON Faucet**](https://icon-faucet.ibriz.ai/)\\*\\*\\*\\*\n5. Paste your copied ICON public address in the text input\n6. You can receive up to **100 test ICON per day**\n7. Now you can use your test ICON in our [**example app**](https://go.magic.link/example-icon)\\*\\*\\*\\*\n\n### Call Extension Method\n\nNote that the Magic ICON extension follows the method names and conventions by [**ICON's Javascript SDK**](https://www.icondev.io/docs/javascript-sdk). \\(link to documentation\\). To send a standard ICON blockchain transaction, you can call the `magic.icon.sendTransaction` method.\n\n{% tabs %}\n{% tab title=\"ES Modules/TypeScript\" %}\n```typescript", "explanation": "The purpose and functionality of this block is to guide users on how to acquire test ICON cryptocurrency and send transactions on the ICON blockchain using the Magic ICON extension. It provides step-by-step instructions on getting test ICON and explains how to call the `magic.icon.sendTransaction` method to send a transaction.", "metadata": {"repo": "magiclabs/documentation", "file": "advanced/icon/send-transaction.md", "chunk_number": 1, "total_chunks": 3}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "### Send Transaction on ICON Blockchain using Magic ICON Extension\n\n**Overview**\n\nThis guide provides step-by-step instructions on sending a transaction on the ICON blockchain using the Magic ICON extension.\n\n**Functionality**\n\n* Initialize Magic SDK with API key and ICON extension\n* Authenticate user and retrieve public address\n* Build transaction object with recipient, ICX amount, and other parameters\n* Send transaction and retrieve transaction hash\n\n**Usage**\n\nFollow these steps to acquire test ICON cryptocurrency and send transactions on the ICON blockchain using the Magic ICON extension:\n\n* Get test ICON\n* Call `magic.icon.sendTransaction` method to send a transaction"}
{"code": "import { Magic } from 'magic-sdk';\nimport { IconExtension } from '@magic-ext/icon';\n\nimport IconService from \"icon-sdk-js\";\n\nconst { IconBuilder, IconAmount, IconConverter } = IconService;\n \nconst magic = new Magic('YOUR_API_KEY', {\n  extensions: [\n    new IconExtension({\n      rpcUrl: 'ICON_RPC_NODE_URL'\n    })\n  ]\n});\n\nconst metadata = await magic.user.getMetadata();\nconst destinationAddress = 'hx19f4fc31c6e51d5facccb52e3ccbe6b7d61f409e';\nconst sendICXAmount = '10';\n\n// Build a transaction\nconst txObj = new IconBuilder.IcxTransactionBuilder()\n  .from(metadata.publicAddress)\n  .to(destinationAddress)\n  .value(IconAmount.of(sendICXAmount, IconAmount.Unit.ICX).toLoop())\n  .stepLimit(IconConverter.toBigNumber(100000))\n  .nid(IconConverter.toBigNumber(3))\n  .nonce(IconConverter.toBigNumber(1))\n  .version(IconConverter.toBigNumber(3))\n  .timestamp(new Date().getTime() * 1000)\n  .build();\n\n// Send a transaction\nconst txhash = await magic.icon.sendTransaction(txObj);\n\nconsole.log(`Transaction Hash: ${txhash}`);\n```", "explanation": "**Purpose and Functionality Summary**\n\nThis code block allows a user to send a transaction on the ICON blockchain using the Magic SDK and ICON extension. The functionality includes:\n\n* Initializing the Magic SDK with an API key and ICON extension\n* Authenticating the user and retrieving their public address\n* Building a transaction object with specified recipient, ICX amount, and other parameters\n* Sending the transaction and retrieving the transaction hash\n\nOverall, this code provides a straightforward way to perform an ICON transaction using the Magic SDK and ICON extension.", "metadata": {"repo": "magiclabs/documentation", "file": "advanced/icon/send-transaction.md", "chunk_number": 2, "total_chunks": 3}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "### Send Transaction on ICON Blockchain using Magic ICON Extension\n\n**Overview**\n\nThis guide provides step-by-step instructions on sending a transaction on the ICON blockchain using the Magic ICON extension.\n\n**Functionality**\n\n* Initialize Magic SDK with API key and ICON extension\n* Authenticate user and retrieve public address\n* Build transaction object with recipient, ICX amount, and other parameters\n* Send transaction and retrieve transaction hash\n\n**Usage**\n\nFollow these steps to acquire test ICON cryptocurrency and send transactions on the ICON blockchain using the Magic ICON extension:\n\n* Get test ICON\n* Call `magic.icon.sendTransaction` method to send a transaction"}
{"code": "{% endtab %}\n{% endtabs %}\n\n", "explanation": "This code block marks the end of a tab and a tabs container in markdown or a templating language.", "metadata": {"repo": "magiclabs/documentation", "file": "advanced/icon/send-transaction.md", "chunk_number": 3, "total_chunks": 3}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "### Send Transaction on ICON Blockchain using Magic ICON Extension\n\n**Overview**\n\nThis guide provides step-by-step instructions on sending a transaction on the ICON blockchain using the Magic ICON extension.\n\n**Functionality**\n\n* Initialize Magic SDK with API key and ICON extension\n* Authenticate user and retrieve public address\n* Build transaction object with recipient, ICX amount, and other parameters\n* Send transaction and retrieve transaction hash\n\n**Usage**\n\nFollow these steps to acquire test ICON cryptocurrency and send transactions on the ICON blockchain using the Magic ICON extension:\n\n* Get test ICON\n* Call `magic.icon.sendTransaction` method to send a transaction"}
{"code": "# \ud83d\udcdc Smart Contract\n\n## Deploy Contract\n\n### Getting Test ICON\n\nBefore you can send transaction on the ICON blockchain, you'll need to acquire some test ICON \\(ICON's native cryptocurrency for test network\\).\n\n1. Go to our [**ICON Example**](https://go.magic.link/example-icon) application\n2. Login with your email address\n3. Copy your ICON public address\n4. Go to the[ **ICON Faucet**](https://icon-faucet.ibriz.ai/)\\*\\*\\*\\*\n5. Paste your copied ICON public address in the text input\n6. You can receive up to **100 test ICON per day**\n7. Now you can use your test ICON in our [**example app**](https://go.magic.link/example-icon)\\*\\*\\*\\*\n\n### Call Extension Method\n", "explanation": "This block provides instructions for acquiring test ICON (the native cryptocurrency for the ICON test network) in order to send transactions on the ICON blockchain, specifically for interacting with a smart contract.", "metadata": {"repo": "magiclabs/documentation", "file": "advanced/icon/smart-contract.md", "chunk_number": 1, "total_chunks": 3}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "The file 'advanced/icon/smart-contract.md' is a guide to deploying and interacting with smart contracts on the ICON blockchain. It provides steps for acquiring test ICON and configuring the ICON extension with the Magic SDK. The file covers the setup and configuration of the ICON extension, building a transaction to deploy a smart contract, specifying contract parameters, and executing the transaction to deploy the smart contract on the ICON network."}
{"code": "Note that the Magic ICON extension follows the method names and conventions by [**ICON's Javascript SDK**](https://www.icondev.io/docs/javascript-sdk). \\(link to documentation\\). Please follow [**ICON contract deploy documentation**](https://www.icondev.io/docs/javascript-sdk#token-deploy-and-transfer) to create and compile the smart contract. To deploy an ICON smart contract, you can call the `magic.icon.sendTransaction` method to send deploy contract transaction.\n\n{% tabs %}\n{% tab title=\"ES Modules/TypeScript\" %}\n```typescript\nimport { Magic } from 'magic-sdk';\nimport { IconExtension } from '@magic-ext/icon';\n\nimport IconService from \"icon-sdk-js\";\n\nconst { DeployTransactionBuilder, IconConverter } = IconService;\n \nconst magic = new Magic('YOUR_API_KEY', {\n  extensions: [\n    new IconExtension({\n      rpcUrl: 'ICON_RPC_NODE_URL'\n    })\n  ]\n});\n\nconst metadata = await magic.user.getMetadata();\n\n// Build a transaction\nconst txObj = new DeployTransactionBuilder()\n  .from(metadata.publicAddress)", "explanation": "**SUMMARY**\n\nThis block of code sets up and configures the ICON extension for the Magic SDK, enabling the deployment of ICON smart contracts. It imports necessary dependencies, initializes the Magic instance with the ICON extension, and creates a DeployTransactionBuilder object to build a transaction for deploying a smart contract on the ICON network.", "metadata": {"repo": "magiclabs/documentation", "file": "advanced/icon/smart-contract.md", "chunk_number": 2, "total_chunks": 3}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "The file 'advanced/icon/smart-contract.md' is a guide to deploying and interacting with smart contracts on the ICON blockchain. It provides steps for acquiring test ICON and configuring the ICON extension with the Magic SDK. The file covers the setup and configuration of the ICON extension, building a transaction to deploy a smart contract, specifying contract parameters, and executing the transaction to deploy the smart contract on the ICON network."}
{"code": "  .to('cx0000000000000000000000000000000000000000')\n  .stepLimit(IconConverter.toBigNumber(2100000000).toString())\n  .nid(IconConverter.toBigNumber(3).toString())\n  .nonce(IconConverter.toBigNumber(1).toString())\n  .version(IconConverter.toBigNumber(3).toString())\n  .timestamp((new Date()).getTime() * 1000)\n  .contentType('application/zip')\n  .content(`0x${compiledContractContent}`)\n  .params({\n    initialSupply: IconConverter.toHex('100000000000'),\n    decimals: IconConverter.toHex(18),\n    name: 'StandardToken',\n    symbol: 'ST',\n  })\n  .build();\n\n// Send transaction to deploy contract\nconst txhash = await magic.icon.sendTransaction(txObj);\n\nconsole.log(`Transaction Hash: ${txhash}`);\n```\n{% endtab %}\n{% endtabs %}\n\n", "explanation": "This block of code creates and sends a transaction to deploy a smart contract on the ICON blockchain. It specifies contract parameters, such as initial supply, decimals, name, and symbol, and includes the compiled contract content. The transaction is then executed and the resulting transaction hash is logged to the console.", "metadata": {"repo": "magiclabs/documentation", "file": "advanced/icon/smart-contract.md", "chunk_number": 3, "total_chunks": 3}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "The file 'advanced/icon/smart-contract.md' is a guide to deploying and interacting with smart contracts on the ICON blockchain. It provides steps for acquiring test ICON and configuring the ICON extension with the Magic SDK. The file covers the setup and configuration of the ICON extension, building a transaction to deploy a smart contract, specifying contract parameters, and executing the transaction to deploy the smart contract on the ICON network."}
{"code": "# Tezos\n\n", "explanation": "No code block or text information is provided after \"# Tezos\". A concise summary cannot be made without the actual block or text content.", "metadata": {"repo": "magiclabs/documentation", "file": "advanced/tezos/README.md", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "Based on the limited information provided, I can only provide a partial and general summary of the 'advanced/tezos/README.md' file. \n\nIt appears to be a README file related to Tezos, possibly providing an overview, setup instructions, or integration details regarding advanced Tezos-related topics or tools."}
{"code": "# \ud83d\ude80 Get Started\n\n## \ud83d\udce6 Installation\n\nMagic interacts with the [Tezos](https://tezos.com/) blockchain via Magic's extension NPM package [`@magic-ext/tezos`](https://www.npmjs.com/package/@magic-ext/tezos). The Tezos extension also lets you interact with the blockchain using methods from Tezos's [ConseilJS](https://cryptonomic.github.io/ConseilJS/#/) SDK.\n\n{% hint style=\"info\" %}\nYou can skip straight to our kitchen sink example directly:\n\n\ud83d\udc49 [**Tezos ConseilJS Example**](https://go.magic.link/example-tezos)\\*\\*\\*\\*\n{% endhint %}\n\n{% tabs %}\n{% tab title=\"NPM\" %}\n```bash\nnpm install --save @magic-ext/tezos\n```\n{% endtab %}\n\n{% tab title=\"Yarn\" %}\n```\nyarn add @magic-ext/tezos\n```\n{% endtab %}\n{% endtabs %}\n\n## \u26a1\ufe0f Initializing Extension\n\n{% tabs %}\n{% tab title=\"ES Modules/TypeScript\" %}\n```typescript\nimport { Magic } from 'magic-sdk';\nimport { TezosExtension } from '@magic-ext/tezos';\n \nconst magic = new Magic('YOUR_API_KEY', {\n  extensions: [\n    new TezosExtension({\n      rpcUrl: 'TEZOS_RPC_NODE_URL'\n    })\n  ]\n});\n```", "explanation": "**Purpose and Functionality:**\n\nThis block provides instructions for installing and initializing the Magic Tezos extension, which allows interaction with the Tezos blockchain. It includes code snippets for installation via NPM and Yarn, as well as initialization using TypeScript.", "metadata": {"repo": "magiclabs/documentation", "file": "advanced/tezos/get-started.md", "chunk_number": 1, "total_chunks": 2}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "The 'advanced/tezos/get-started.md' file provides instructions on how to integrate with the Tezos blockchain. This includes steps to install the Magic Tezos extension via NPM or Yarn, followed by initialization using TypeScript code snippets."}
{"code": "{% endtab %}\n{% endtabs %}\n\n", "explanation": "These are liquid tags used to close tab-related sections in documentation, specifically:\n\n- `{% endtab %}`: Closes a single tab.\n- `{% endtabs %}`: Closes a tab group.", "metadata": {"repo": "magiclabs/documentation", "file": "advanced/tezos/get-started.md", "chunk_number": 2, "total_chunks": 2}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "The 'advanced/tezos/get-started.md' file provides instructions on how to integrate with the Tezos blockchain. This includes steps to install the Magic Tezos extension via NPM or Yarn, followed by initialization using TypeScript code snippets."}
{"code": "# \ud83d\udc64 Get User Info\n\n## Get Account\n\nUsing getAccount function to get Tezos public address for current user.\n\n{% tabs %}\n{% tab title=\"ES Modules/TypeScript\" %}\n```typescript\nimport { Magic } from 'magic-sdk';\nimport { TezosExtension } from '@magic-ext/tezos';\n \nconst magic = new Magic('YOUR_API_KEY', {\n  extensions: [\n    new TezosExtension({\n      rpcUrl: 'TEZOS_RPC_NODE_URL'\n    })\n  ]\n});\n\n// Get user's Tezos public address\nconst publicAddress = await magic.tezos.getAccount();\nconsole.log('Tezos Public Address: ', publicAddress);\n```\n{% endtab %}\n{% endtabs %}\n\n\n\n", "explanation": "**Purpose:** Retrieve the user's Tezos public address.\n\n**Functionality:** Utilizes the `Magic` SDK and `TezosExtension` to create a Magic instance with a Tezos extension, then calls the `getAccount` function to retrieve the user's Tezos public address.", "metadata": {"repo": "magiclabs/documentation", "file": "advanced/tezos/get-user-info.md", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "**Advanced Tezos: Get User Info**\n\nThis code retrieves a user's Tezos public address by leveraging the Magic SDK with the TezosExtension. It instantiates a Magic instance with the Tezos extension and utilizes the `getAccount` function to retrieve the address."}
{"code": "# \ud83d\udcb8 Send Transaction\n\n## Send Transaction\n\n### Getting Test XTZ\n\nBefore you can send transaction on the Tezos blockchain, you'll need to acquire some test XTZ \\(Tezos' native cryptocurrency for test network\\).\n\n1. Go to our [**Tezos Faucet**](https://go.magic.link/tezos-test-faucet)\\*\\*\\*\\*\n2. Type in your email and click the **\"Sign Up / Login\"** button\n3. Go to your email and click on the magic link to login\n4. Once you are logged in, you will get **10 test XTZ**\n5. Now you can use your test XTZ in our [**example app**](https://go.magic.link/example-tezos)\\*\\*\\*\\*\n\n### Call Extension Method\n\nNote that the Magic Tezos extension follows the method names and conventions by [**ConceilJS**](https://cryptonomic.github.io/ConseilJS/#/) \\(link to documentation\\). To send a standard Tezos blockchain transaction, you can call the `magic.tezos.sendTransactionOperation` method.\n\n{% tabs %}\n{% tab title=\"ES Modules/TypeScript\" %}\n```typescript\nimport { Magic } from 'magic-sdk';", "explanation": "**Summary:**\n\nThis block provides instructions on sending transactions on the Tezos blockchain using the Magic SDK. It explains how to acquire test XTZ (Tezos' native cryptocurrency for the test network) and how to use the `magic.tezos.sendTransactionOperation` method to send a standard Tezos blockchain transaction.", "metadata": {"repo": "magiclabs/documentation", "file": "advanced/tezos/send-transaction.md", "chunk_number": 1, "total_chunks": 2}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "The 'advanced/tezos/send-transaction.md' file provides a guide on sending transactions on the Tezos blockchain using the Magic SDK. It encompasses acquiring test XTZ, and utilizing the `magic.tezos.sendTransactionOperation` method to send a standard Tezos transaction. The code initializes a Magic SDK instance with Tezos extension and sends a transaction operation, specifying recipient address, amount, transaction fee, and derivation path, ultimately returning the injected operation group ID."}
{"code": "import { TezosExtension } from '@magic-ext/tezos';\n \nconst magic = new Magic('YOUR_API_KEY', {\n  extensions: [\n    new TezosExtension({\n      rpcUrl: 'TEZOS_RPC_NODE_URL'\n    })\n  ]\n});\n\nconst result = await magic.tezos.sendTransactionOperation(\n  'tz1RVcUP9nUurgEJMDou8eW3bVDs6qmP5Lnc', // to address\n  500000, // amount\n  1500,   // fee\n  ''      // derivation path\n);\nconsole.log(`Injected operation group ID: ${result.operationGroupID}`);\n```\n{% endtab %}\n{% endtabs %}\n\n", "explanation": "**Tezos Transaction Operation Summary**\n\nThis code block initializes a Magic SDK instance with Tezos extension and sends a transaction operation to the Tezos blockchain. It specifies the recipient address, amount, transaction fee, and derivation path, then returns the injected operation group ID.", "metadata": {"repo": "magiclabs/documentation", "file": "advanced/tezos/send-transaction.md", "chunk_number": 2, "total_chunks": 2}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "The 'advanced/tezos/send-transaction.md' file provides a guide on sending transactions on the Tezos blockchain using the Magic SDK. It encompasses acquiring test XTZ, and utilizing the `magic.tezos.sendTransactionOperation` method to send a standard Tezos transaction. The code initializes a Magic SDK instance with Tezos extension and sends a transaction operation, specifying recipient address, amount, transaction fee, and derivation path, ultimately returning the injected operation group ID."}
{"code": "# \ud83d\udcdc Smart Contract\n\n## Deploy Contract\n\n### Getting Test XTZ\n\nBefore you can send transaction on the Tezos blockchain, you'll need to acquire some test XTZ \\(Tezos' native cryptocurrency for test network\\).\n\n1. Go to our [**Tezos Faucet**](https://go.magic.link/tezos-test-faucet)\\*\\*\\*\\*\n2. Type in your email and click the **\"Sign Up / Login\"** button\n3. Go to your email and click on the magic link to login\n4. Once you are logged in, you will get **10 test XTZ**\n5. Now you can use your test XTZ in our [**example app**](https://go.magic.link/example-tezos)\\*\\*\\*\\*\n\n### Call Extension Method\n\nNote that the Magic Tezos extension follows the method names and conventions by [**ConceilJS**](https://cryptonomic.github.io/ConseilJS/#/?id=smart-contract-interactions) \\(link to documentation\\). To deploy a Tezos smart contract, you can call the `magic.tezos.sendContractOriginationOperation` method.\n\n{% tabs %}\n{% tab title=\"ES Modules/TypeScript\" %}\n```typescript\nimport { Magic } from 'magic-sdk';", "explanation": "**Summary:** This block provides instructions on how to deploy a Tezos smart contract using the Magic SDK. It includes steps to acquire test Tezos tokens (XTZ) from a faucet and explains how to call the `magic.tezos.sendContractOriginationOperation` method to deploy the contract.", "metadata": {"repo": "magiclabs/documentation", "file": "advanced/tezos/smart-contract.md", "chunk_number": 1, "total_chunks": 3}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "**Deploying a Tezos Smart Contract with Magic SDK**\n\nThis guide outlines the steps to deploy a Tezos smart contract using the Magic SDK. The process involves:\n\n1. Acquiring test Tezos tokens (XTZ) from a faucet.\n2. Initializing a Tezos extension for the Magic SDK.\n3. Specifying the contract's Michelson code and storage.\n4. Calling the `magic.tezos.sendContractOriginationOperation` method to originate a new smart contract on the Tezos blockchain, including setting contract code, storage, gas and storage limits, fee, and derivation path.\n\nThe resulting `operationGroupID` is then modified and set for the contract, with the original value logged for verification."}
{"code": "import { TezosExtension } from '@magic-ext/tezos';\n \nconst magic = new Magic('YOUR_API_KEY', {\n  extensions: [\n    new TezosExtension({\n      rpcUrl: 'TEZOS_RPC_NODE_URL'\n    })\n  ]\n});\n\nconst contract = `[\n  {\n    \"prim\":\"parameter\",\n     \"args\":[ { \"prim\":\"string\" } ]\n  },\n  {\n    \"prim\":\"storage\",\n     \"args\":[ { \"prim\":\"string\" } ]\n  },\n  {\n    \"prim\":\"code\",\n    \"args\":[\n      [  \n        { \"prim\":\"CAR\" },\n        { \"prim\":\"NIL\", \"args\":[ { \"prim\":\"operation\" } ] },\n        { \"prim\":\"PAIR\" }\n      ]\n    ]\n  }\n]`;\n\nconst storage = '{\"string\": \"Sample\"}';\n\nconst params = {\n  amount: 0,\n  delegate: undefined,\n  fee: 100000,\n  derivationPath: \"\",\n  storage_limit: 1000,\n  gas_limit: 100000,\n  code: contract,\n  storage,\n  codeFormat: \"micheline\"\n};\n\nconst result = await magic.tezos.sendContractOriginationOperation(\n  params.amount,\n  params.delegate,\n  params.fee,\n  params.derivationPath,\n  params.storage_limit,\n  params.gas_limit,\n  params.code,\n  params.storage,\n  params.codeFormat\n);\n", "explanation": "**TelezOrigination Operation**\n\nThis code initializes a Tezos extension for the Magic SDK and uses it to originate a new smart contract on the Tezos blockchain. The contract's Michelson code and storage are specified, and the `sendContractOriginationOperation` method is called to execute the operation. The operation parameters include contract code, storage, gas and storage limits, fee, and derivation path.", "metadata": {"repo": "magiclabs/documentation", "file": "advanced/tezos/smart-contract.md", "chunk_number": 2, "total_chunks": 3}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "**Deploying a Tezos Smart Contract with Magic SDK**\n\nThis guide outlines the steps to deploy a Tezos smart contract using the Magic SDK. The process involves:\n\n1. Acquiring test Tezos tokens (XTZ) from a faucet.\n2. Initializing a Tezos extension for the Magic SDK.\n3. Specifying the contract's Michelson code and storage.\n4. Calling the `magic.tezos.sendContractOriginationOperation` method to originate a new smart contract on the Tezos blockchain, including setting contract code, storage, gas and storage limits, fee, and derivation path.\n\nThe resulting `operationGroupID` is then modified and set for the contract, with the original value logged for verification."}
{"code": "const operationGroupID = result.operationGroupID.trim();\n\nsetContractoperationGroupID(\n  operationGroupID.substring(1, operationGroupID.length - 1)\n);\n\nconsole.log(\n  `Injected operation group ID: ${result.operationGroupID}`,\n  result\n);\n```\n{% endtab %}\n{% endtabs %}\n\n\n\n", "explanation": "This block trims the `operationGroupID` from a result, removes the first and last characters, and then sets a contract's `operationGroupID` to the modified string. It also logs the original `operationGroupID` to the console for verification.", "metadata": {"repo": "magiclabs/documentation", "file": "advanced/tezos/smart-contract.md", "chunk_number": 3, "total_chunks": 3}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "**Deploying a Tezos Smart Contract with Magic SDK**\n\nThis guide outlines the steps to deploy a Tezos smart contract using the Magic SDK. The process involves:\n\n1. Acquiring test Tezos tokens (XTZ) from a faucet.\n2. Initializing a Tezos extension for the Magic SDK.\n3. Specifying the contract's Michelson code and storage.\n4. Calling the `magic.tezos.sendContractOriginationOperation` method to originate a new smart contract on the Tezos blockchain, including setting contract code, storage, gas and storage limits, fee, and derivation path.\n\nThe resulting `operationGroupID` is then modified and set for the contract, with the original value logged for verification."}
{"code": "# Zilliqa\n\n", "explanation": "This block appears to be a heading or title, likely referencing Zilliqa, a blockchain platform that focuses on high scalability and decentralized applications.", "metadata": {"repo": "magiclabs/documentation", "file": "advanced/zilliqa/README.md", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "Based on the provided information, here is a concise and holistic summary of the file 'advanced/zilliqa/README.md':\n\nThe file 'advanced/zilliqa/README.md' provides information about Zilliqa, a blockchain platform that focuses on high scalability and decentralized applications."}
{"code": "# \ud83d\ude80 Get Started\n\n## \ud83d\udce6 Installation\n\nMagic interacts with the [Zilliqa](https://www.zilliqa.com/)  blockchain via Magic's extension NPM package [`@magic-ext/zilliqa`](https://www.npmjs.com/package/@magic-ext/zilliqa). The Zilliqa extension also lets you interact with the blockchain using methods from [Zilliqa's Javascript SDK](https://github.com/Zilliqa/Zilliqa-JavaScript-Library).\n\n{% hint style=\"info\" %}\nYou can skip straight to our kitchen sink example directly:\n\n\ud83d\udc49[**Zilliqa Example**](https://codesandbox.io/s/github/MagicLabs/example-zilliqa)\\*\\*\\*\\*\n{% endhint %}\n\n{% tabs %}\n{% tab title=\"NPM\" %}\n```bash\nnpm install --save @magic-ext/zilliqa\n```\n{% endtab %}\n\n{% tab title=\"Yarn\" %}\n```\nyarn add @magic-ext/zilliqa\n```\n{% endtab %}\n{% endtabs %}\n\n## \u26a1\ufe0f Initializing Extension\n\n{% tabs %}\n{% tab title=\"ES Modules/TypeScript\" %}\n```typescript\nimport { Magic } from 'magic-sdk';\nimport { ZilliqaExtension } from '@magic-ext/zilliqa';\n \nconst magic = new Magic('YOUR_API_KEY', {\n  extensions: [\n    new ZilliqaExtension({", "explanation": "This block describes how to install and initialize the Zilliqa extension for Magic, a blockchain interaction tool, using NPM or Yarn. It provides installation commands and code snippets for initializing the extension in different environments (NPM, Yarn, ES Modules/TypeScript).", "metadata": {"repo": "magiclabs/documentation", "file": "advanced/zilliqa/get-started.md", "chunk_number": 1, "total_chunks": 2}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "The file 'advanced/zilliqa/get-started.md' provides a guide on installing and initializing the Zilliqa extension for Magic using NPM or Yarn. It outlines the steps and code snippets required to set up the extension in various environments, ultimately configuring it to connect to a Zilliqa RPC node for blockchain interaction."}
{"code": "      rpcUrl: 'Zilliqa_RPC_NODE_URL'\n    })\n  ]\n});\n```\n{% endtab %}\n{% endtabs %}\n\n", "explanation": "The code sets the configuration for a Zilliqa RPC (Remote Procedure Call) node, specifying the URL for the node.", "metadata": {"repo": "magiclabs/documentation", "file": "advanced/zilliqa/get-started.md", "chunk_number": 2, "total_chunks": 2}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "The file 'advanced/zilliqa/get-started.md' provides a guide on installing and initializing the Zilliqa extension for Magic using NPM or Yarn. It outlines the steps and code snippets required to set up the extension in various environments, ultimately configuring it to connect to a Zilliqa RPC node for blockchain interaction."}
{"code": "# \ud83d\udc64 Get User Wallet\n\n## Get Wallet\n\nUsing getAccount function to get ICON public address for current user.\n\n{% tabs %}\n{% tab title=\"ES Modules/TypeScript\" %}\n```typescript\nimport { Magic } from 'magic-sdk';\nimport { ZilliqaExtension } from '@magic-ext/zilliqa';\n \nconst magic = new Magic('YOUR_API_KEY', {\n  extensions: [\n    new ZilliqaExtension({\n      rpcUrl: 'Zilliqa_RPC_NODE_URL'\n    })\n  ]\n});\n\n// Get user's Zilliqa wallet info\nconst wallet = await magic.zilliqa.getWallet();\nconsole.log('Zilliqa wallet: ', wallet);\n```\n{% endtab %}\n{% endtabs %}\n\n", "explanation": "**Purpose:** This code snippet retrieves the user's Zilliqa wallet information using the Magic SDK and Zilliqa Extension.\n\n**Functionality:** It initializes the Magic SDK with an API key and applies the Zilliqa Extension. Then, it uses the `getWallet()` method to fetch the user's Zilliqa wallet details, which are logged to the console.", "metadata": {"repo": "magiclabs/documentation", "file": "advanced/zilliqa/get-user-wallet.md", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "**Get User Wallet Summary**\n\nThis code snippet utilizes the Magic SDK and Zilliqa Extension to fetch and log a user's Zilliqa wallet information. It initializes the Magic SDK with an API key, applies the Zilliqa Extension, and then retrieves the user's wallet details using the `getWallet()` method."}
{"code": "# \ud83d\udcb8 Send Transaction\n\n## Send Transaction\n\n### Getting Test ZIL\n\nBefore you can send transaction on the Zilliqa blockchain, you'll need to acquire some test ZIL \\(Zilliqa's native cryptocurrency for test network\\).\n\n1. Go to our [**Zilliqa Example**](https://codesandbox.io/s/github/MagicLabs/example-zilliqa) application\n2. Login with your email address\n3. Copy your **Zilliqa** public address\n4. Go to the [**ZIL Faucet**](https://dev-wallet.zilliqa.com/faucet)\\*\\*\\*\\*\n5. Paste your copied Zilliqa public address in the text input\n6. You can receive **300 test ZIL**\n7. Now you can use your test ZIL in our [**example app**](https://codesandbox.io/s/github/MagicLabs/example-zilliqa)\\*\\*\\*\\*\n\n### Call Extension Method\n\nTo send a standard Zilliqa blockchain transaction, you can call the `magic.Zilliqa.sendTransaction` method.\n\n{% tabs %}\n{% tab title=\"ES Modules/TypeScript\" %}\n```typescript\nimport { Magic } from 'magic-sdk';\nimport { ZilliqaExtension } from '@magic-ext/zilliqa';", "explanation": "This block guides users on how to send a transaction on the Zilliqa blockchain test network. It explains how to acquire test ZIL, then details the process of calling the `magic.Zilliqa.sendTransaction` method using a provided code snippet (partially shown) to initiate a transaction.", "metadata": {"repo": "magiclabs/documentation", "file": "advanced/zilliqa/send-transaction.md", "chunk_number": 1, "total_chunks": 2}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "The 'advanced/zilliqa/send-transaction.md' file provides a guide on sending a transaction on the Zilliqa blockchain test network. Here's a holistic summary:\n\nTo send a transaction, begin by acquiring test ZIL. Then, use the provided JavaScript code, which employs the `@zilliqa-js/util` library, to:\n\n1. Set up a Magic extension with a Zilliqa RPC node URL.\n2. Define transaction parameters: version, recipient, amount, gas price, and gas limit.\n3. Initiate the transaction using the `magic.zil.sendTransaction` method.\n\nThis guide covers the essential steps and code requirements for sending a transaction on the Zilliqa test network."}
{"code": "const { BN, Long, bytes, units } = require('@zilliqa-js/util');\n \nconst magic = new Magic('YOUR_API_KEY', {\n  extensions: [\n    new ZilliqaExtension({\n      rpcUrl: 'Zilliqa_RPC_NODE_URL'\n    })\n  ]\n});\n\nconst chainId = 333; // chainId of the developer testnet\nconst msgVersion = 1; // current msgVersion\nconst VERSION = bytes.pack(chainId, msgVersion);\n\nconst myGasPrice = units.toQa('1000', units.Units.Li);\n\nconst params = {\n   version: VERSION,\n   toAddr: \"zil14vut0rh7q78ydc0g7yt7e5zkfyrmmps00lk6r7\",\n   amount: (new BN(units.toQa('0.5', units.Units.Zil))), \n   gasPrice: myGasPrice,\n   gasLimit: Long.fromNumber(1),\n};\n\nconst tx = await magic.zil.sendTransaction(\n   params,\n   false,\n);\n// Send a transaction\nconsole.log('send transaction', tx)\n\n```\n{% endtab %}\n{% endtabs %}\n\n", "explanation": "**Summary:**\nThis JavaScript code sends a transaction to the Zilliqa blockchain using the `@zilliqa-js/util` library. It sets up a Magic extension with a Zilliqa RPC node URL, defines transaction parameters (version, recipient, amount, gas price, and gas limit), and sends the transaction using the `magic.zil.sendTransaction` method.", "metadata": {"repo": "magiclabs/documentation", "file": "advanced/zilliqa/send-transaction.md", "chunk_number": 2, "total_chunks": 2}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "The 'advanced/zilliqa/send-transaction.md' file provides a guide on sending a transaction on the Zilliqa blockchain test network. Here's a holistic summary:\n\nTo send a transaction, begin by acquiring test ZIL. Then, use the provided JavaScript code, which employs the `@zilliqa-js/util` library, to:\n\n1. Set up a Magic extension with a Zilliqa RPC node URL.\n2. Define transaction parameters: version, recipient, amount, gas price, and gas limit.\n3. Initiate the transaction using the `magic.zil.sendTransaction` method.\n\nThis guide covers the essential steps and code requirements for sending a transaction on the Zilliqa test network."}
{"code": "# \ud83d\udcdc Smart Contract\n\n## Deploy Contract\n\n### Getting Test ZIL\n\nBefore you can send transaction on the Zilliqa blockchain, you'll need to acquire some test ZIL \\(Zilliqa's native cryptocurrency for test network\\).\n\n1. Go to our [**Zilliqa Example**](https://codesandbox.io/s/github/MagicLabs/example-zilliqa) application\n2. Login with your email address\n3. Copy your **Zilliqa** public address\n4. Go to the [**ZIL Faucet**](https://dev-wallet.zilliqa.com/faucet)\\*\\*\\*\\*\n5. Paste your copied Zilliqa public address in the text input\n6. You can receive **300 test ZIL**\n7. Now you can use your test ZIL in our [**example app**](https://codesandbox.io/s/github/MagicLabs/example-zilliqa)\\*\\*\\*\\*\n\n### Call Extension Method\n\nTo deploy a smart contract, you can call the `magic.zilliqa.deployContract` method.\n\n{% tabs %}\n{% tab title=\"ES Modules/TypeScript\" %}\n```typescript\nimport { Magic } from 'magic-sdk';\nimport { ZilliqaExtension } from '@magic-ext/zilliqa';\nconst { BN, Long, bytes, units } = require('@zilliqa-js/util');\n ", "explanation": "This block provides steps to deploying a smart contract on the Zilliqa blockchain. The text explains how to acquire test ZIL (Zilliqa's test cryptocurrency) using a faucet, while the code snippet demonstrates how to deploy a contract using the `magic.zilliqa.deployContract` method in TypeScript.", "metadata": {"repo": "magiclabs/documentation", "file": "advanced/zilliqa/smart-contract.md", "chunk_number": 1, "total_chunks": 3}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "The file 'advanced/zilliqa/smart-contract.md' provides a comprehensive guide on deploying a smart contract on the Zilliqa blockchain. Here's a concise summary:\n\nThis guide covers the entire process of deploying a smart contract on the Zilliqa blockchain, including setting up a wallet using the Magic SDK, generating a wallet address, defining a smart contract in Scilla language, and deploying it using JavaScript.\n\nThe smart contract, named \"HelloWorld,\" has a single transition function `setHello` that allows only the owner to update a welcome message. The contract can be interacted with through `setHello` and `getHello` events.\n\nThe deployment process involves acquiring test ZIL using a faucet and deploying the contract using the `zil.deployContract()` method. The JavaScript code sets the contract parameters, including gas price, gas limit, and contract owner, before deploying the contract.\n\nOverall, this guide provides a step-by-step approach to deploying a simple smart contract on the Zilliqa blockchain, demonstrating the capabilities of Scilla and Magic SDK."}
{"code": "const magic = new Magic('YOUR_API_KEY', {\n  extensions: [\n    new ZilliqaExtension({\n      rpcUrl: 'Zilliqa_RPC_NODE_URL'\n    })\n  ]\n});\n\nconst wallet = await magic.zilliqa.getWallet();\n\nconst address = wallet.address;\n\nconst code = `scilla_version 0\n \n    (* HelloWorld contract *)\n \n    import ListUtils\n \n    (***************************************************)\n    (*               Associated library                *)\n    (***************************************************)\n    library HelloWorld\n \n    let not_owner_code = Int32 1\n    let set_hello_code = Int32 2\n \n    (***************************************************)\n    (*             The contract definition             *)\n    (***************************************************)\n \n    contract HelloWorld\n    (owner: ByStr20)\n \n    field welcome_msg : String = \"\"\n \n    transition setHello (msg : String)\n      is_owner = builtin eq owner _sender;\n      match is_owner with\n      | False =>\n        e = {_eventname : \"setHello()\"; code : not_owner_code};\n        event e", "explanation": "**Summary**\n\nThis code block sets up a Zilliqa blockchain wallet using the Magic SDK, generates a wallet address, and defines a smart contract named \"HelloWorld\" in Scilla language. The contract has a single transition function `setHello` that allows only the owner to update a welcome message, emitting an event if the sender is not the owner.", "metadata": {"repo": "magiclabs/documentation", "file": "advanced/zilliqa/smart-contract.md", "chunk_number": 2, "total_chunks": 3}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "The file 'advanced/zilliqa/smart-contract.md' provides a comprehensive guide on deploying a smart contract on the Zilliqa blockchain. Here's a concise summary:\n\nThis guide covers the entire process of deploying a smart contract on the Zilliqa blockchain, including setting up a wallet using the Magic SDK, generating a wallet address, defining a smart contract in Scilla language, and deploying it using JavaScript.\n\nThe smart contract, named \"HelloWorld,\" has a single transition function `setHello` that allows only the owner to update a welcome message. The contract can be interacted with through `setHello` and `getHello` events.\n\nThe deployment process involves acquiring test ZIL using a faucet and deploying the contract using the `zil.deployContract()` method. The JavaScript code sets the contract parameters, including gas price, gas limit, and contract owner, before deploying the contract.\n\nOverall, this guide provides a step-by-step approach to deploying a simple smart contract on the Zilliqa blockchain, demonstrating the capabilities of Scilla and Magic SDK."}
{"code": "      | True =>\n        welcome_msg := msg;\n        e = {_eventname : \"setHello()\"; code : set_hello_code};\n        event e\n      end\n    end\n \n \n    transition getHello ()\n        r <- welcome_msg;\n        e = {_eventname: \"getHello()\"; msg: r};\n        event e\n    end`;\n \nconst init = [\n  // this parameter is mandatory for all init arrays\n  {\n      vname: '_scilla_version',\n      type: 'Uint32',\n      value: '0',\n  },\n  {\n      vname: 'owner',\n      type: 'ByStr20',\n      value: `${address}`,\n  },\n];\n\nconst chainId = 333; // chainId of the developer testnet\nconst msgVersion = 1; // current msgVersion\nconst VERSION = bytes.pack(chainId, msgVersion);\n\nconst myGasPrice = units.toQa('1000', units.Units.Li);\n\nconst params = {\n  version: VERSION,\n  gasPrice: myGasPrice,\n  gasLimit: Long.fromNumber(10000),\n}\n\nconst result = await magic.zil.deployContract(\n  init, code, params, 33, 1000, false\n)\n\n\nconsole.log('deploy contract', result);\n\n```\n{% endtab %}\n{% endtabs %}\n\n", "explanation": "**Summary**\n\nThis block of code appears to be written in Scilla and JavaScript, and it seems to be deploying a smart contract on the Zilliqa blockchain. The functionality can be broken down into two parts:\n\n1. **Scilla Code**: This is the contract code written in Scilla, a contract-oriented programming language. The code defines a simple contract that responds to two events: `getHello()` and `setHello()`. When `setHello()` is called, it sets a `welcome_msg` variable and triggers an event. When `getHello()` is called, it gets the value of `welcome_msg` and triggers an event with the value.\n\n2. **JavaScript Code**: This is the deployment code written in JavaScript, which is used to deploy the Scilla contract on the Zilliqa blockchain. It sets the contract parameters, such as the gas price, gas limit, and contract owner, and then uses the `zil.deployContract()` method to deploy the contract.\n\n**Purpose**\n\nThe purpose of this code is to deploy a simple contract on the Zilliqa blockchain, which responds to `setHello()` and `getHello()` events.", "metadata": {"repo": "magiclabs/documentation", "file": "advanced/zilliqa/smart-contract.md", "chunk_number": 3, "total_chunks": 3}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "The file 'advanced/zilliqa/smart-contract.md' provides a comprehensive guide on deploying a smart contract on the Zilliqa blockchain. Here's a concise summary:\n\nThis guide covers the entire process of deploying a smart contract on the Zilliqa blockchain, including setting up a wallet using the Magic SDK, generating a wallet address, defining a smart contract in Scilla language, and deploying it using JavaScript.\n\nThe smart contract, named \"HelloWorld,\" has a single transition function `setHello` that allows only the owner to update a welcome message. The contract can be interacted with through `setHello` and `getHello` events.\n\nThe deployment process involves acquiring test ZIL using a faucet and deploying the contract using the `zil.deployContract()` method. The JavaScript code sets the contract parameters, including gas price, gas limit, and contract owner, before deploying the contract.\n\nOverall, this guide provides a step-by-step approach to deploying a simple smart contract on the Zilliqa blockchain, demonstrating the capabilities of Scilla and Magic SDK."}
{"code": "# Android\n\n## \ud83d\ude80 Welcome to the Magic Android SDK\n\nThe Magic Android SDK is your entry-point to secure, passwordless authentication for your mobile app. This guide will cover some important topics for getting started with Android APIs and to make the most of Magic's features.\n\n**\ud83d\udc49 Go to our** [**Getting Started**](get-started.md) **tutorial to begin your integration**\n\n**\ud83d\udc49 Visit the API** [**documentation**](sdk/) **to learn the methods you'll be using**\n\n{% hint style=\"info\" %}\nMagic can support both server-based or serverless web applications. It is up to the developers to implement the [Admin SDK](../../admin-sdk/node-js/) to validate the DID Token.\n{% endhint %}\n\n### Looking for a server-side API? Start with one of these:\n\n{% page-ref page=\"../../admin-sdk/node-js/\" %}\n\n{% page-ref page=\"../../admin-sdk/python/\" %}\n\n\n\n", "explanation": "This block appears to be a README or introductory text for the Magic Android SDK. The purpose is to provide an entry point for developers to integrate secure, passwordless authentication into their Android mobile app. The functionality includes:\n\n* Linking to a Getting Started tutorial for integration instructions\n* Pointing to API documentation for method references\n* Providing information on supporting both server-based and serverless web applications\n* Giving links to server-side API implementations for Node.js and Python", "metadata": {"repo": "magiclabs/documentation", "file": "client-sdk/android/README.md", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "**Magic Android SDK README**\n\nThis SDK provides a secure, passwordless authentication solution for Android mobile apps. \n\n### Getting Started\nTo integrate the Magic Android SDK, follow our [Getting Started tutorial](link) for step-by-step instructions.\n\n### Documentation\nFor reference, view our [API documentation](link) for detailed method descriptions.\n\n### Supported Applications\nThe SDK supports both server-based and serverless web applications.\n\n### Server-Side Implementations\nFind links to server-side API implementations in:\n- [Node.js](link)\n- [Python](link)"}
{"code": "# \ud83d\ude80 Get Started\n\n## \ud83d\udce6 Installation\n\nMagic SDK is available in `mavenCentral` . Simply add the following line to the `build.gradle` in your Android project\n\n```bash\ndependencies {\n    implementation 'link.magic:magic-android:0.3.0'\n}\n```\n\nSync the project with new dependencies settings.\n\n## \u26a1\ufe0f Creating an SDK Instance\n\n```kotlin\nopen class MagicActivity: AppCompatActivity() {\n\n    lateinit var magic: Magic\n    \n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        \n        magic = Magic(this, \"YOUR_PUBLISHABLE_KEY\")\n    }\n}\n```\n\n{% hint style=\"info\" %}\nAll the examples are written in Kotlin. \n{% endhint %}\n\n", "explanation": "**Purpose and Functionality:**\nThis block provides instructions on how to integrate the Magic SDK into an Android project using Kotlin. It explains how to add the SDK dependency to the project's `build.gradle` file and initialize the Magic SDK instance in an activity using a publishable key.", "metadata": {"repo": "magiclabs/documentation", "file": "client-sdk/android/get-started.md", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "The file 'client-sdk/android/get-started.md' provides a step-by-step guide on integrating the Magic SDK into an Android project using Kotlin. It covers:\n\n* Adding the Magic SDK dependency to the `build.gradle` file\n* Initializing the Magic SDK instance in an activity using a publishable key\n\nThis guide enables developers to quickly set up the Magic SDK in their Android projects and start using its features for authentication and authorization."}
{"code": "# \ud83d\uddc4 SDK\n\n### Returns\n\nAll Magic functions are asynchronous calls. They will return a [CompletableFuture](https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletableFuture.html) object, which resolves the results in a Response class. \n\nTo get the result without blocking the UI thread, call `CompletableFuture.whenComplete` to wait for the results asynchronously.\n\n```kotlin\nval result = magic.auth.loginWithMagicLink(\"hello@example.com\")\n    \nresult.whenComplete { response: DIDToken?, error: Throwable? ->\n    if (error != null) {\n       //Handle Error\n    }\n    if (response != null && !response.hasError()) {\n        Log.d(\"Magic\", \"You're logged in.\" + response.result)\n    } else {\n        Log.d(\"login\", \"Not Logged in\")\n    }\n}\n```\n\nFor the full implementation of Response class, please check [here](https://github.com/web3j/web3j/blob/master/core/src/main/java/org/web3j/protocol/core/Response.java).\n\n\n\n", "explanation": "**SDK Overview and Usage**\n\nThis block describes an SDK that makes asynchronous calls, returning a `CompletableFuture` object. The result is resolved in a `Response` class. To handle the result without blocking the UI thread, use `CompletableFuture.whenComplete` to wait for the result asynchronously.\n\n**Example Usage**\n\nA Kotlin example demonstrates how to log in with a magic link, handle errors, and check the response status:\n- Use `magic.auth.loginWithMagicLink()` to make an asynchronous call.\n- Call `whenComplete` to handle the result in a non-blocking manner.\n- Check for errors and response status to determine the outcome.", "metadata": {"repo": "magiclabs/documentation", "file": "client-sdk/android/sdk/README.md", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "# client-sdk/android/sdk/README.md\n\n## Overview\n\nThis Android SDK facilitates asynchronous API calls using `CompletableFuture`, returning results in a `Response` class. Users can handle results asynchronously without blocking the UI thread.\n\n## Usage Example\n\nA Kotlin example demonstrates a magic link login scenario, showcasing error handling and response status checks:\n\n- Make asynchronous calls using `magic.auth.loginWithMagicLink()`.\n- Utilize `CompletableFuture.whenComplete` for non-blocking result handling.\n- Verify errors and response status to determine the outcome."}
{"code": "# Auth module\n\nThe Auth Module and its members are accessible on the Magic SDK instance by the `auth` property.\n\n```swift\nimport link.magic.android.Magic\n\nvar magic: Magic\n\nmagic.auth;\nmagic.auth.loginWithMagicLink;\n```\n\n", "explanation": "**Summary:**\n\nThis block describes the Auth module of the Magic SDK in Swift. The Auth module is accessible through the `auth` property of the Magic SDK instance (`magic`). It provides various authentication methods, specifically mentioned is `loginWithMagicLink`, which allows users to log in using a magic link.", "metadata": {"repo": "magiclabs/documentation", "file": "client-sdk/android/sdk/auth-module/README.md", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "That code block corresponds to an iOS module rather than an Android module. Here is a holistic summary for 'client-sdk/android/sdk/auth-module/README.md' \n\nHowever, since there's no provided code block corresponding to 'client-sdk/android/sdk/auth-module/README.md', based on conventional knowledge, a summary for an Android Auth module would be:\n\n\"This document provides an overview of the Auth module in the Android version of the Magic SDK. It outlines the functionality and usage of the module for authenticating users, likely including methods such as login with magic link or other authentication flows.\""}
{"code": "---\ndescription: >-\n  Authenticate a user passwordlessly using a \"magic link\" sent to the specified\n  user's email address.\n---\n\n# loginWithMagicLink\n\n### **Public Methods**\n\n| Methods |\n| :--- |\n| **loginWithMagicLink**\\(configuration: LoginWithMagicLinkConfiguration\\): CompletableFuture&lt;DIDToken&gt; |\n\n### Returns\n\n`DIDToken: Response<String>()` \n\nThe function resolves upon authentication request success and rejects with a specific error code if the request fails. The resolved value is a Decentralized ID token with a default 15-minute lifespan.\n\n### Example\n\n```kotlin\nclass MagicActivity: AppCompatActivity() {\n\n    lateinit var magic: Magic\n    \n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        \n        magic = Magic(this, \"YOUR_PUBLISHABLE_API_KEY\")\n    }\n    \n   fun login(v: View) {\n        val email = findViewById<EditText>(R.id.emailInput)\n        val configuration = LoginWithMagicLinkConfiguration(email.text.toString())", "explanation": "**loginWithMagicLink Functionality Summary**\n\n PURPOSE: Authenticate a user passwordlessly using a \"magic link\" sent to the user's email address.\n\n FUNCTIONALITY:\n\n- Takes a `LoginWithMagicLinkConfiguration` object with the user's email address as input.\n- Sends a magic link to the specified email address for authentication.\n- Returns a `DIDToken` (Decentralized ID token) upon successful authentication, with a default 15-minute lifespan.\n- Rejects with a specific error code if the request fails.\n\nThis block is a Kotlin function used for secure, passwordless user authentication in Android applications.", "metadata": {"repo": "magiclabs/documentation", "file": "client-sdk/android/sdk/auth-module/loginwithmagiclink.md", "chunk_number": 1, "total_chunks": 2}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "**Client SDK Android Auth Module: Login with Magic Link**\n\nThe `loginWithMagicLink` functionality authenticates a user passwordlessly using a \"magic link\" sent to their email address. This Kotlin function takes a `LoginWithMagicLinkConfiguration` object as input, sends the magic link to the specified email, and returns a `DIDToken` with a 15-minute lifespan upon successful authentication. It rejects with a specific error code if the request fails, providing a secure and convenient way to authenticate users in Android applications."}
{"code": "        val completable = magic.auth.loginWithMagicLink(configuration)\n\n        // Logging in\n        completable.whenComplete { response: DIDToken?, error: Throwable? ->\n            if (error != null) {\n                // Handle error\n            }\n            if (response != null && !response.hasError()) {\n                Log.d(\"Magic\", \"You're logged in!\" + response.result)\n            } else {\n                Log.d(\"Magic\", \"Not Logged in\")\n            }\n        }\n    }\n}\n```\n\n### Associated Class\n\n`LoginWithMagicLinkConfiguration(showUI: Boolean? = true, email: String)`\n\n* `email`  The user email to log in with.\n* `showUI` If `true`, show an out-of-the-box pending UI while the request is in flight.\n\n", "explanation": "**Magic Link Authentication Block**\n\nThis block authenticates a user using Magic Link, a passwordless authentication method. It initiates a login request with the provided email configuration and handles the response, logging the result if successful or an error if failed.", "metadata": {"repo": "magiclabs/documentation", "file": "client-sdk/android/sdk/auth-module/loginwithmagiclink.md", "chunk_number": 2, "total_chunks": 2}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "**Client SDK Android Auth Module: Login with Magic Link**\n\nThe `loginWithMagicLink` functionality authenticates a user passwordlessly using a \"magic link\" sent to their email address. This Kotlin function takes a `LoginWithMagicLinkConfiguration` object as input, sends the magic link to the specified email, and returns a `DIDToken` with a 15-minute lifespan upon successful authentication. It rejects with a specific error code if the request fails, providing a secure and convenient way to authenticate users in Android applications."}
{"code": "---\ndescription: >-\n  The Magic class is the entry-point to the Magic SDK. It must be instantiated\n  with a Magic publishable key.\n---\n\n# Constructor\n\n## Magic\n\n| Public constructors |  |\n| :--- | :--- |\n| **Magic**\\(context: Context, apiKey: String\\) | Construct a Magic instance with **publishable** API Key retrieved from the [Magic Dashboard](https://dashboard.magic.link) |\n| **Magic**\\(context:Context, apiKey: String, network: Magic.EthNetwork\\) | Construct a Magic instance with publishable Key and Ethereum network  |\n| **Magic**\\(context:Context, apiKey: String, customNode: CustomNodeConfiguration\\) | Construct a Magic instance with publishable Key and Custom Node configuration  |\n\n## Example\n\n```kotlin\nimport link.magic.android.Magic\n\nopen class MagicActivity: AppCompatActivity() {\n\n    lateinit var magic: Magic\n    \n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        \n        magic = Magic(this, \"YOUR_PUBLISHABLE_KEY\")\n    }\n}\n```\n\n", "explanation": "**Magic Class Summary**\n\nThe Magic class is the entry-point to the Magic SDK, requiring a publishable API key for instantiation. It has three constructors, allowing for customization with:\n\n* A publishable API key\n* An Ethereum network\n* A custom node configuration\n\nIt enables initialization of a Magic instance, as demonstrated in the provided Kotlin example.", "metadata": {"repo": "magiclabs/documentation", "file": "client-sdk/android/sdk/constructor1.md", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "# client-sdk/android/sdk/constructor1.md Summary\n\nThis file introduces the Magic class, the entry-point to the Magic SDK, which requires a publishable API key for instantiation. The class has three constructors that allow for customization, including:\n\n* Publishable API key\n* Ethereum network\n* Custom node configuration\n\nThe Magic class enables initialization of a Magic instance, with an example provided in Kotlin."}
{"code": "# User Module\n\nThe User Module and its members are accessible on the Magic SDK instance by the `user` property.\n\n```typescript\nimport link.magic.android.Magic\n\nvar magic: Magic\n\nmagic.user\nmagic.user.getIdToken\nmagic.user.generateIdToken\nmagic.user.getMetadata\nmagic.user.updateEmail\nmagic.user.isLoggedIn\nmagic.user.logout\n```\n\n", "explanation": "**User Module Summary**\n\nThe User Module provides an interface for user authentication and management, accessible through the `user` property of the Magic SDK instance. It offers various methods for:\n\n* User login status and ID token management\n* User metadata retrieval\n* Email updates\n* Logout functionality\n\nThis module enables developers to easily manage user sessions and data within their application.", "metadata": {"repo": "magiclabs/documentation", "file": "client-sdk/android/sdk/user-module/README.md", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "The 'User Module' is a component of the Magic SDK that provides an interface for user authentication and management, accessible via the `user` property. It offers features such as login status management, user metadata retrieval, email updates, and logout functionality to simplify user session and data management within Android applications.\n\n**Example Summary from README:**\n\nThis is a simplified explanation of the provided block and example summary you can include in a README:\n\n# User Module\nThe User Module simplifies user authentication and management.\n\n### Features\n- Login status and ID token management\n- User metadata retrieval\n- Email updates\n- Logout functionality\n\n### Usage\nAccess the User Module via the `user` property of the Magic SDK instance.\n\n### Getting Started\nTo learn more, refer to our documentation on using the User Module for user session and data management."}
{"code": "---\ndescription: Generates a Decentralized Id Token with optional serialized data.\n---\n\n# generateIdToken\n\n### **Public Methods**\n\n| Methods |\n| :--- |\n| **generateIdToken**\\(configuration: GenerateIdTokenConfiguration?\\): CompletableFuture&lt;GenerateIdTokenResponse&gt; |\n\n### Returns\n\n`GenerateIdTokenResponse: Response<String>()`\n\nBase64-encoded string representation of a JSON tuple representing `[proof, claim]`\n\n### **Example**\n\n```kotlin\nclass MagicActivity: AppCompatActivity() {\n\n    lateinit var magic: Magic\n    \n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        \n        magic = Magic(this, \"YOUR_PUBLISHABLE_KEY\")\n    }\n    \n    // \u2b50\ufe0fAssuming user is logged in \n    fun generateIdToken(v: View) {\n        val configuration = GenerateIdTokenConfiguration(lifespan = 900, attachment = \"none\")\n        val completable = magic.user.generateIdToken(configuration)\n        \n        completable.whenComplete { response: GenerateIdTokenResponse?, error: Throwable? ->", "explanation": "**Summary:** \nThe `generateIdToken` block generates a Base64-encoded Decentralized Id Token with optional serialized data in the form of a JSON tuple (`[proof, claim]`). It allows customization through a `GenerateIdTokenConfiguration` object and returns a `GenerateIdTokenResponse` object.", "metadata": {"repo": "magiclabs/documentation", "file": "client-sdk/android/sdk/user-module/generateidtoken.md", "chunk_number": 1, "total_chunks": 2}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "The 'generateidtoken.md' file in the 'client-sdk/android/sdk/user-module' directory documents the 'generateIdToken' function. This function generates a Base64-encoded Decentralized Id Token that may include serialized data, and it allows customization through a 'GenerateIdTokenConfiguration' object. The response from this function is checked for null status, with a non-null response logged using the \"Magic\" tag. However, if the response is null, it triggers an error handling process."}
{"code": "            if (response != null) {\n                Log.d(\"Magic\", response.result)\n            } else {\n                // handle Error            \n            }\n        }\n    }\n}\n```\n\n### Associated Class\n\n`GenerateIdTokenConfiguration(attachment: String? = \"none\", lifespan: Long? = 900)`\n\n* `lifespan` : will set the lifespan of the generated token. Defaults to 900s \\(15 mins\\)\n* `attachment`  : will set a signature of serialized data in the generated token. Defaults to `\"none\"`\n\n\n\n", "explanation": "**Summary:**\n\nThis code block checks if a response is not null, then logs the result using \"Magic\" as the tag. If the response is null, it triggers an error handling process. The response is likely from a request to generate an ID token using the `GenerateIdTokenConfiguration` class, which allows configuring the token's lifespan and attachment (serialized data signature).", "metadata": {"repo": "magiclabs/documentation", "file": "client-sdk/android/sdk/user-module/generateidtoken.md", "chunk_number": 2, "total_chunks": 2}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "The 'generateidtoken.md' file in the 'client-sdk/android/sdk/user-module' directory documents the 'generateIdToken' function. This function generates a Base64-encoded Decentralized Id Token that may include serialized data, and it allows customization through a 'GenerateIdTokenConfiguration' object. The response from this function is checked for null status, with a non-null response logged using the \"Magic\" tag. However, if the response is null, it triggers an error handling process."}
{"code": "---\ndescription: >-\n  Generates a Decentralized Id Token which acts as a proof of authentication to\n  resource servers.\n---\n\n# getIdToken\n\n### **Public Methods**\n\n| **Methods** |\n| :--- |\n| **getIdToken**\\(configuration: GetIdTokenConfiguration?\\): CompletableFuture&lt;GetIdTokenResponse&gt; |\n\n### Returns\n\n`GetIdTokenResponse: Response<String>()`\n\nThe `Completable` resolves with a true boolean value if update email is successful and rejects with a specific error code if the request fails. \n\n```kotlin\nclass MagicActivity: AppCompatActivity() {\n\n    lateinit var magic: Magic\n    \n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        \n        magic = Magic(this, \"YOUR_PUBLISHABLE_KEY\")\n    }\n    \n    // \u2b50\ufe0fAssuming user is logged in \n    fun getIdToken(v: View) {\n        val configuration = GetIdTokenConfiguration(lifespan = 900)\n        val completable = magic.user.getIdToken(configuration)", "explanation": "**Summary**\n\nThe `getIdToken` block generates a Decentralized Id Token, serving as proof of authentication for resource servers. It takes an optional `GetIdTokenConfiguration` parameter and returns a `CompletableFuture` containing a `GetIdTokenResponse` string.", "metadata": {"repo": "magiclabs/documentation", "file": "client-sdk/android/sdk/user-module/getidtoken.md", "chunk_number": 1, "total_chunks": 2}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "# client-sdk/android/sdk/user-module/getidtoken.md\n\n## Overview\n\nThe `getIdToken` module is responsible for generating a Decentralized Id Token, serving as proof of authentication for resource servers.\n\n## Key Features\n\n* Generates a Decentralized Id Token using an optional `GetIdTokenConfiguration` parameter.\n* Returns a `CompletableFuture` containing a `GetIdTokenResponse` string.\n* Handles asynchronous operation completion, logging successful responses and handling potential errors.\n\n## Purpose\n\nProvides a proof of authentication for resource servers through a generated Decentralized Id Token."}
{"code": "        completable.whenComplete { response: GetIdTokenResponse?, error: Throwable? ->\n            if (response != null) {\n                Log.d(\"Magic\", response.result)\n            } else {\n                // handle Error\n            }\n        }\n    }\n}\n```\n\n### Associated Class\n\n`GetIdTokenConfiguration(lifespan: Long? = 900)`\n\n* `lifespan?` : will set the lifespan of the generated token. Defaults to 900s \\(15 mins\\)\n\n\u0000\n\n", "explanation": "**Functionality Summary**\n\nThis code block is a completion handler for a `completable` asynchronous operation, specifically retrieving an ID token. Upon completion, it checks for a successful response and logs the result if available, otherwise handles any errors that may have occurred.", "metadata": {"repo": "magiclabs/documentation", "file": "client-sdk/android/sdk/user-module/getidtoken.md", "chunk_number": 2, "total_chunks": 2}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "# client-sdk/android/sdk/user-module/getidtoken.md\n\n## Overview\n\nThe `getIdToken` module is responsible for generating a Decentralized Id Token, serving as proof of authentication for resource servers.\n\n## Key Features\n\n* Generates a Decentralized Id Token using an optional `GetIdTokenConfiguration` parameter.\n* Returns a `CompletableFuture` containing a `GetIdTokenResponse` string.\n* Handles asynchronous operation completion, logging successful responses and handling potential errors.\n\n## Purpose\n\nProvides a proof of authentication for resource servers through a generated Decentralized Id Token."}
{"code": "---\ndescription: Retrieves information for the authenticated user.\n---\n\n# getMetadata\n\n### **Public Methods**\n\n| Methods |\n| :--- |\n| **getMetadata**\\(\\): CompletableFuture&lt;GetMetadataResponse&gt; |\n\n### Returns\n\n`GetMetadataResponse: Response<UserMetadataResponse>()`\n\nThe `Completable` containing the issuer, email and cryptographic [public address ](https://support.blockchain.com/hc/en-us/articles/360000951966-Public-and-private-keys)of the authenticated user.\n\n```kotlin\nclass UserMetadataResponse {\n    var issuer: String? = null\n    var publicAddress: String? = null\n    var email: String? = null\n}\n```\n\n* `issuer` : The Decentralized ID of the user.  In server-side use-cases, we recommend this value to be used as the user ID in your own tables.\n* `email` : Email address of the authenticated user.\n* `publicAddress`: The authenticated user's public address \\(a.k.a.: public key\\). Currently, this value is associated with the Ethereum blockchain. \n\n### Example\n\n```kotlin\nclass MagicActivity: AppCompatActivity() {\n", "explanation": "This block provides a method `getMetadata()` that retrieves and returns information about the authenticated user, including their Decentralized ID (issuer), email address, and public Ethereum blockchain address, wrapped in a `CompletableFuture`.", "metadata": {"repo": "magiclabs/documentation", "file": "client-sdk/android/sdk/user-module/getmetadata.md", "chunk_number": 1, "total_chunks": 2}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "**Client-SDK Android SDK User Module Get Metadata**\n\nThe `getMetadata.md` file in the client-sdk/android/sdk/user-module directory is responsible for initializing the Magic API and retrieving metadata about the authenticated user. The `getMetadata()` method asynchronously fetches and returns the user's information, including their Decentralized ID (issuer) and email address. This metadata is then logged if the request is successful."}
{"code": "    lateinit var magic: Magic\n    \n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        \n        magic = Magic(this, \"YOUR_PUBLISHABLE_KEY\")\n    }\n    \n    // \u2b50\ufe0fAssuming user is logged in \n    fun getMetadata(v: View) {\n        val completable = magic.user.getMetadata()\n        completable.whenComplete { response: GetMetadataResponse?, error: Throwable? ->\n            if (response != null) {\n                Log.d(\"Magic\", \"Email: \" + response.result.email)\n                Log.d(\"Magic\", \"Issuer: \" + response.result.issuer)\n            } else {\n                // handle Error\n            }\n        }\n    }\n}\n```\n\n\n\n", "explanation": "**Purpose and Functionality Summary**\n\nThis code block is used to initialize the Magic API and retrieve a user's metadata. The `Magic` object is initialized with a publishable key in the `onCreate` method. The `getMetadata` function is then used to asynchronously fetch the logged-in user's metadata, including their email and issuer. If the request is successful, the metadata is logged; otherwise, an error is handled.", "metadata": {"repo": "magiclabs/documentation", "file": "client-sdk/android/sdk/user-module/getmetadata.md", "chunk_number": 2, "total_chunks": 2}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "**Client-SDK Android SDK User Module Get Metadata**\n\nThe `getMetadata.md` file in the client-sdk/android/sdk/user-module directory is responsible for initializing the Magic API and retrieving metadata about the authenticated user. The `getMetadata()` method asynchronously fetches and returns the user's information, including their Decentralized ID (issuer) and email address. This metadata is then logged if the request is successful."}
{"code": "---\ndescription: Checks if a user is currently logged in to the Magic IOS SDK.\n---\n\n# isLoggedIn\n\n### **Public Methods**\n\n| Methods |\n| :--- |\n| **isLoggedIn**\\(\\): CompletableFuture&lt;IsLoggedInResponse&gt; |\n\n### Returns\n\n`IsLoggedInResponse: Response<Boolean>()`\n\n### Example\n\n```kotlin\nclass MagicActivity: AppCompatActivity() {\n\n    lateinit var magic: Magic\n    \n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        \n        magic = Magic(this, \"YOUR_PUBLISHABLE_KEY\")\n    }\n    \n    // \u2b50\ufe0fAssuming user is logged in \n    fun isLoggedIn(v: View) {\n        val completable = magic.user.isLoggedIn()\n        completable.whenComplete { response: IsLoggedInResponse?, error: Throwable? ->\n            if (response != null && response.result) {\n                Log.d(\"Magic\", \"You're Logged In\")\n            }\n            if (error != null) {\n                // handle Error\n            }\n        }\n    }\n}\n```\n\n\n\n", "explanation": "**Purpose and Functionality of isLoggedIn Block:**\n\nThe `isLoggedIn` block checks if a user is currently logged in to the Magic IOS SDK. It returns a `CompletableFuture` containing an `IsLoggedInResponse` object, which holds a boolean value indicating whether the user is logged in or not. This allows developers to asynchronously verify the user's login status.", "metadata": {"repo": "magiclabs/documentation", "file": "client-sdk/android/sdk/user-module/isloggedin.md", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "**isLoggedIn Functionality Summary**\n\nThe `isLoggedIn` block checks the user's current login status and returns a `CompletableFuture` containing a boolean result in an `IsLoggedInResponse` object, allowing asynchronous verification of user login status."}
{"code": "---\ndescription: Logs out the currently authenticated Magic user\n---\n\n# logout\n\n### **Public Methods**\n\n| Methods |\n| :--- |\n| **logout**\\(\\): CompletableFuture&lt;LogoutResponse&gt; |\n\n### Returns\n\n`LogoutResponse: Response<Boolean>()` \n\n### Example\n\n```kotlin\nclass MagicActivity: AppCompatActivity() {\n\n    lateinit var magic: Magic\n    \n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        \n        magic = Magic(this, \"YOUR_PUBLISHABLE_KEY\")\n    }\n    \n    // \u2b50\ufe0fAssuming user is logged in \n    fun logout(v: View) {\n        val completable = magic.user.logout()\n        completable.whenComplete { response: LogoutResponse?, error: Throwable? ->\n            if (response != null && response.result) {\n                Log.d(\"Magic\", \"You're logged out!\")\n            }\n            if (error != null) {\n                // handle Error\n            }\n        }\n    }\n}\n```\n\n", "explanation": "**Summary**\n\nThis block logs out the currently authenticated Magic user. It provides a `logout` method that returns a `CompletableFuture` containing a `LogoutResponse`, indicating whether the logout was successful.", "metadata": {"repo": "magiclabs/documentation", "file": "client-sdk/android/sdk/user-module/logout.md", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "The 'logout.md' file in the 'client-sdk/android/sdk/user-module' directory provides a `logout` method for logging out a Magic user. This method returns a `CompletableFuture` with a `LogoutResponse` object, indicating the logout's success."}
{"code": "---\ndescription: initiates the update email flow that allows a user to change to a new email\n---\n\n# updateEmail\n\n### **Public Methods**\n\n| Methods |\n| :--- |\n| **updateEmail**\\(configuration: UpdateEmailConfiguration\\) -&gt; CompletableFuture&lt;UpdateEmailResponse&gt; |\n\n### Returns\n\n`UpdateEmailResponse: Response<Boolean>()`\n\nThe `Completable` resolves with a true boolean value if update email is successful and rejects with a specific error code if the request fails. \n\n### Example\n\n```kotlin\nclass MagicActivity: AppCompatActivity() {\n\n    lateinit var magic: Magic\n    \n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        \n        magic = Magic(this, \"YOUR_PUBLISHABLE_KEY\")\n    }\n    \n    // \u2b50\ufe0fAssuming user is logged in \n    fun updateEmail(v: View) {\n\n        val configuration = UpdateEmailConfiguration(\"new_user_email@example.com\")\n        val completable = magic.user.updateEmail(configuration)", "explanation": "**Purpose:** Initiates the update email flow to change a user's email.\n\n**Functionality:** The `updateEmail` method takes an `UpdateEmailConfiguration` object as input and returns a `CompletableFuture` that resolves with a boolean value indicating whether the update was successful.", "metadata": {"repo": "magiclabs/documentation", "file": "client-sdk/android/sdk/user-module/updateemail.md", "chunk_number": 1, "total_chunks": 2}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "The 'client-sdk/android/sdk/user-module/updateemail.md' file describes the functionality of the `updateEmail` method, which initiates the update email flow to change a user's email. \n\nKey points of the method include:\n\n- Takes `UpdateEmailConfiguration` object as input\n- Returns a `CompletableFuture` resolving with a boolean indicating update success\n- Handles asynchronous email update operation completion\n- Logs successful update results and allows for error handling on failure."}
{"code": "        completable.whenComplete { response: UpdateEmailResponse?, error: Throwable? ->\n            if (response != null) {\n                Log.d(\"Magic\", response.result.toString()) // \"True\"\n            } else {\n                // handle error\n            }\n        }\n    }\n}\n```\n\n### **Associated Class**\n\n`UpdateEmailConfiguration(showUI: Boolean? = true, email: String)`\n\n* `email`  The user email to update with.\n* `showUI` If `true`, show an out-of-the-box pending UI while the request is in flight.\n\n", "explanation": "**Purpose and Functionality**\n\nThis code block is used to handle the completion of an asynchronous operation to update a user's email address. \n\n**Functionality**\n\n- It checks if the operation was successful by verifying if a valid response is present.\n- If successful, it logs the result of the email update operation.\n- If not successful (i.e., an error occurred), it allows for error handling. \n\nThe operation is likely initiated by an instance of the `UpdateEmailConfiguration` class.", "metadata": {"repo": "magiclabs/documentation", "file": "client-sdk/android/sdk/user-module/updateemail.md", "chunk_number": 2, "total_chunks": 2}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "The 'client-sdk/android/sdk/user-module/updateemail.md' file describes the functionality of the `updateEmail` method, which initiates the update email flow to change a user's email. \n\nKey points of the method include:\n\n- Takes `UpdateEmailConfiguration` object as input\n- Returns a `CompletableFuture` resolving with a boolean indicating update success\n- Handles asynchronous email update operation completion\n- Logs successful update results and allows for error handling on failure."}
{"code": "# Browser JavaScript\n\n## \ud83d\ude80 Welcome to the Magic Browser JS SDK\n\nThe Magic client-side JavaScript SDK is your entry-point to secure, passwordless authentication for your web-based app. This guide will cover some important topics for getting started with client-side APIs and to make the most of Magic's features.\n\n**\ud83d\udc49 Go to our** [**Getting Started**](get-started.md) **tutorial to begin your integration**\n\n**\ud83d\udc49 Visit the** [**API documentation**](sdk/) **to learn the methods you'll be using**\n\n**\ud83d\udc49 Go to** [**Examples**](examples/) **for an introduction to common patterns and use-cases**\n\n{% hint style=\"info\" %}\nMagic can support both server-based or serverless web applications. It is up to the developers to implement the [Admin SDK](../../admin-sdk/node-js/) to validate the DID Token.\n{% endhint %}\n\n### Looking for a server-side API? Start with one of these:\n\n{% page-ref page=\"../../admin-sdk/node-js/\" %}\n\n{% page-ref page=\"../../admin-sdk/python/\" %}\n\n\n\n", "explanation": "This block is a welcome message and getting started guide for the Magic Browser JavaScript SDK, which enables secure, passwordless authentication for web-based applications. It provides links to tutorials, API documentation, and examples, and notes that server-based or serverless applications are supported, with the Admin SDK required for DID token validation.", "metadata": {"repo": "magiclabs/documentation", "file": "client-sdk/browser-js/README.md", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "# Magic Browser JavaScript SDK README\n\n## Welcome\n\nThe Magic Browser JavaScript SDK enables secure, passwordless authentication for web-based applications. It supports both server-based and serverless applications.\n\n## Getting Started\n\n* Follow our [tutorials](link) to integrate Magic into your application.\n* Refer to our [API documentation](link) for comprehensive details on methods and usage.\n* Explore our [examples](link) to see Magic in action.\n\n## Requirements\n\n* Server-based or serverless applications are supported.\n* The [Admin SDK](link) is required for DID token validation.\n\nGet started with Magic today and experience secure, passwordless authentication for your web application."}
{"code": "# \ud83e\udde9 Examples\n\n", "explanation": "This block appears to be a header or section title, introducing a list of examples.", "metadata": {"repo": "magiclabs/documentation", "file": "client-sdk/browser-js/examples/README.md", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "Unfortunately, I don't have any actual code block summaries, as you didn't provide them. However, based on the given information, I can create a possible holistic summary of the file 'client-sdk/browser-js/examples/README.md'.\n\nThis README file in the 'examples' directory serves as a introductory guide to a collection of example projects. The file likely contains a list of examples highlighting various functionalities and use cases of the client SDK, along with brief descriptions and possibly instructions on how to set up and run each example."}
{"code": "# Migrating From Fortmatic\n\nThis short guide highlights some of the differences between the **soon-to-be-deprecated** [**Fortmatic Whitelabel API**](https://docs.fortmatic.com/whitelabel-sdk) **and Magic SDK.**\n\nDevelopers should plan to migrate existing `Fortmatic.Phantom` implementations to Magic SDK **before October 30, 2020.**\n\n## Prerequisite\n\n* \u200b[Install client-side JavaScript SDK\u200b](../get-started.md#installation)\n\n## Imports\n\n{% tabs %}\n{% tab title=\"Fortmatic\" %}\n```typescript\nimport Fortmatic from 'fortmatic';\n```\n{% endtab %}\n\n{% tab title=\"Magic\" %}\n```typescript\nimport { Magic } from 'magic-sdk';\n```\n{% endtab %}\n{% endtabs %}\n\n## Constructing the SDK Instance\n\n{% tabs %}\n{% tab title=\"Fortmatic\" %}\n```typescript\nconst fmPhantom = new Fortmatic.Phantom('API_KEY');\n\n// With custom Ethereum node configuration:\nconst fmPhantom = new Fortmatic.Phantom('API_KEY', 'mainnet');\nconst fmPhantom = new Fortmatic.Phantom('API_KEY', { rpcUrl: 'https://...' });\n```\n{% endtab %}\n\n{% tab title=\"Magic\" %}\n```typescript", "explanation": "**Purpose and Functionality:**\nThis block provides a migration guide from the deprecated Fortmatic API to the Magic SDK. It outlines the differences between the two SDKs and provides steps for developers to transition their existing Fortmatic implementations to Magic SDK, including prerequisites, imports, and constructing SDK instances.", "metadata": {"repo": "magiclabs/documentation", "file": "client-sdk/browser-js/examples/migrating-from-fortmatic.md", "chunk_number": 1, "total_chunks": 2}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "**Migrating from Fortmatic to Magic SDK**\n\nThis guide provides a comprehensive migration process for developers transitioning from the deprecated Fortmatic API to the Magic SDK. \n\n**Key Changes and Steps:**\n\n1. **Initialization**: Update import statements and replace Fortmatic instance creations with Magic SDK instances, utilizing API keys and configuration options for Ethereum node connections.\n\n2. **Login**: Continue using \"magic link\" login functionality with email addresses, now integrated with Magic SDK.\n\n3. **Web3 Setup**: Replace Fortmatic providers with Magic SDK providers when creating Web3 instances.\n\nBy following these steps, developers can successfully migrate their existing Fortmatic implementations to the Magic SDK, ensuring smooth continuation of authentication and Web3 interactions in their blockchain applications."}
{"code": "const magic = new Magic('API_KEY');\n\n// With custom Ethereum node configuration:\nconst magic = new Magic('API_KEY', { network: 'mainnet' });\nconst magic = new Magic('API_KEY', {\n  network: { rpcUrl: 'https://...' }\n});\n```\n{% endtab %}\n{% endtabs %}\n\n## Logging in\n\n{% tabs %}\n{% tab title=\"Fortmatic\" %}\n```typescript\nfmPhantom.loginWithMagicLink({ email: 'hello@magic.link' });\n```\n{% endtab %}\n\n{% tab title=\"Magic\" %}\n```typescript\nmagic.auth.loginWithMagicLink({ email: 'hello@magic.link' });\n```\n{% endtab %}\n{% endtabs %}\n\n## Constructing a Web3 Instance\n\n{% tabs %}\n{% tab title=\"Fortmatic\" %}\n```typescript\nnew Web3(fmPhantom.getProvider());\n```\n{% endtab %}\n\n{% tab title=\"Magic\" %}\n```typescript\nnew Web3(magic.rpcProvider);\n```\n{% endtab %}\n{% endtabs %}\n\n", "explanation": "This block contains code snippets for two separate systems, Fortmatic and Magic, which appear to be used for authentication and Web3 interactions in blockchain applications. The main functionalities demonstrated are:\n\n1. Initialization: Creating instances of Magic and Fortmatic with API keys and optional configuration options for Ethereum node connections.\n2. Login: Logging in to the system using a \"magic link\" with an email address.\n3. Web3 Setup: Creating a Web3 instance using the providers from Fortmatic and Magic.", "metadata": {"repo": "magiclabs/documentation", "file": "client-sdk/browser-js/examples/migrating-from-fortmatic.md", "chunk_number": 2, "total_chunks": 2}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "**Migrating from Fortmatic to Magic SDK**\n\nThis guide provides a comprehensive migration process for developers transitioning from the deprecated Fortmatic API to the Magic SDK. \n\n**Key Changes and Steps:**\n\n1. **Initialization**: Update import statements and replace Fortmatic instance creations with Magic SDK instances, utilizing API keys and configuration options for Ethereum node connections.\n\n2. **Login**: Continue using \"magic link\" login functionality with email addresses, now integrated with Magic SDK.\n\n3. **Web3 Setup**: Replace Fortmatic providers with Magic SDK providers when creating Web3 instances.\n\nBy following these steps, developers can successfully migrate their existing Fortmatic implementations to the Magic SDK, ensuring smooth continuation of authentication and Web3 interactions in their blockchain applications."}
{"code": "# Re-authenticate Users\n\nA user's Magic SDK session persists up to 7 days, so re-authentication is usually friction-less.\n\n## Prerequisite\n\n* \u200b[Install client-side JavaScript SDK\u200b](../get-started.md#installation)\n\n## Step 1: Re-authenticate the user\n\n```typescript\nimport { Magic } from 'magic-sdk';\nconst m = new Magic('API_KEY');\n\nconst email = 'example@magic.link';\n\nif (await m.user.isLoggedIn())  {\n    const didToken = await m.user.getIdToken();\n    \n    // Do something with the DID token.\n    // For instance, this could be a `fetch` call\n    // to a protected backend endpoint.\n    document.getElementById('your-access-token').innerHTML = didToken;\n} else {\n    // Log in the user\n    const user = await m.auth.loginWithMagicLink({ email });\n}\n```\n\n", "explanation": "**Purpose:** Re-authenticate a user with Magic SDK and obtain an ID token.\n\n**Functionality:**\n\n1. Check if the user is still logged in (session persists up to 7 days).\n2. If logged in, retrieve the user's ID token (DID token).\n3. If not logged in, log in the user using Magic Link and email.\n\nThe code provides a seamless re-authentication experience, minimizing friction for the user.", "metadata": {"repo": "magiclabs/documentation", "file": "client-sdk/browser-js/examples/re-authenticate-users.md", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "**Re-Authenticating Users with Magic SDK**\n\nThis example demonstrates how to re-authenticate a user using the Magic SDK for Browser JS. The process involves checking the user's session, which persists for up to 7 days, and retrieving their ID token (DID token). If the user's session has expired, the example guides the user through a seamless login process using Magic Link and email."}
{"code": "---\ndescription: Getting started with the Magic client-side JavaScript SDK\n---\n\n# \ud83d\ude80 Get Started\n\n## \ud83d\udce6 Installation\n\n{% tabs %}\n{% tab title=\"NPM\" %}\n```bash\nnpm install --save magic-sdk\n```\n{% endtab %}\n\n{% tab title=\"Yarn\" %}\n```bash\nyarn add magic-sdk\n```\n{% endtab %}\n\n{% tab title=\"CDN\" %}\n```markup\n<script src=\"https://cdn.jsdelivr.net/npm/magic-sdk/dist/magic.js\"></script>\n```\n{% endtab %}\n{% endtabs %}\n\n## \u26a1\ufe0f Creating an SDK Instance\n\n{% tabs %}\n{% tab title=\"ES Modules/TypeScript\" %}\n```typescript\nimport { Magic } from 'magic-sdk';\n\nconst m = new Magic('API_KEY'); // \u2728\n```\n{% endtab %}\n\n{% tab title=\"CommonJS\" %}\n```typescript\nconst { Magic } = require('magic-sdk');\n\nconst m = new Magic('API_KEY'); // \u2728\n```\n{% endtab %}\n{% endtabs %}\n\n{% hint style=\"info\" %}\nExamples for the client-side JavaScript SDK use the ES Module/TypeScript pattern by default.\n{% endhint %}\n\n", "explanation": "This block provides instructions on getting started with the Magic client-side JavaScript SDK. It includes installation options via NPM, Yarn, or CDN, and demonstrates how to create an SDK instance using either ES Modules/TypeScript or CommonJS syntax.", "metadata": {"repo": "magiclabs/documentation", "file": "client-sdk/browser-js/get-started.md", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "**Getting Started with Magic Client-Side JavaScript SDK**\n\nTo begin working with the Magic client-side JavaScript SDK, follow these steps:\n\n1. **Installation**: Install the SDK via NPM, Yarn, or CDN.\n2. **Create an SDK Instance**:\n   - Using ES Modules/TypeScript: Import the SDK and create an instance.\n   - Using CommonJS: Require the SDK and create an instance.\n\nBy completing these steps, you'll be set up to start using the Magic Client-Side JavaScript SDK in your application."}
{"code": "# \ud83d\uddc4 SDK\n\n", "explanation": "This block appears to be a header or title indicating the start of a section related to a Software Development Kit (SDK).", "metadata": {"repo": "magiclabs/documentation", "file": "client-sdk/browser-js/sdk/README.md", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "Based on the provided information, I can create a concise summary as follows:\n\nThe 'client-sdk/browser-js/sdk/README.md' file appears to provide information about a Software Development Kit (SDK) for use in browser JavaScript applications. This SDK likely contains tools and guidelines for developers to integrate the client's functionality into their web applications.\n\nPlease provide more code block summaries if you'd like a more detailed summary."}
{"code": "# Auth Module\n\nThe Auth Module and it's members are accessible on the Magic SDK instance by the `auth` property.\n\n```typescript\nimport { Magic } from 'magic-sdk';\n\nconst m = new Magic('API_KEY');\n\nm.auth;\nm.auth.loginWithMagicLink;\n```\n\n## Members\n\n{% page-ref page=\"login-with-magic-link.md\" %}\n\n\n\n", "explanation": "**Summary**\n\nThis block describes the Auth Module in the Magic SDK, which is accessible via the `auth` property. It provides a brief example of how to access the module and its members, specifically mentioning the `loginWithMagicLink` method.", "metadata": {"repo": "magiclabs/documentation", "file": "client-sdk/browser-js/sdk/auth-module/README.md", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "The `auth-module` in the Magic SDK is accessible via the `auth` property and provides authentication functionality, including methods such as `loginWithMagicLink`, allowing users to interact with the authentication features of the SDK."}
{"code": "---\ndescription: >-\n  Authenticate a user passwordlessly using a \"magic link\" sent to the specified\n  user's email address.\n---\n\n# loginWithMagicLink\n\n### Arguments\n\n`loginWithMagicLink({ email, showUI? = true })`\n\n* `email` \\(String\\): The user email to log in with.\n* `showUI?`\\(Boolean\\): If `true`, show an out-of-the-box pending UI while the request is in flight.\n\n### Returns\n\n[`PromiEvent<string | null>`](../promievents.md): The promise resolves upon authentication request success and rejects with a specific error code if the request fails. The resolved value is a Decentralized ID token with a default 15-minute lifespan.\n\n### Example\n\n```typescript\nimport { Magic } from 'magic-sdk';\n\nconst m = new Magic('API_KEY');\n\n// log in a user by their email\ntry {\n  await m.auth.loginWithMagicLink({ email: 'hello@example.com' });\n} catch {\n  // Handle errors if required!\n}\n\n// log in a user by their email, without showing an out-of-the box UI.\ntry {", "explanation": "**Purpose and Functionality:**\n\nThe `loginWithMagicLink` function authenticates a user without a password by sending a \"magic link\" to their email address. It takes the user's email and an optional flag to show a pending UI, returning a promise that resolves with a Decentralized ID token upon successful authentication.", "metadata": {"repo": "magiclabs/documentation", "file": "client-sdk/browser-js/sdk/auth-module/login-with-magic-link.md", "chunk_number": 1, "total_chunks": 3}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "**Summary:**\nThe 'loginWithMagicLink' function in 'auth-module/login-with-magic-link.md' is used for password-less authentication. This function sends a 'magic link' to a user's email address and resolves with a Decentralized ID token upon successful authentication. It includes custom error handling and triggers specific events related to the Magic Link email system, including email delivery errors, successful email sends, and retries when the UI is displayed."}
{"code": "  await m.auth.loginWithMagicLink({ email: 'hello@example.com', showUI: false });\n} catch {\n  // Handle errors if required!\n}\n\n```\n\n### Error Handling\n\n[**Relevant Error Codes**](../errors-and-warnings.md#magic-link-error-codes)\\*\\*\\*\\*\n\nTo achieve a fully white-labeled experience, you will need to implement some custom error handling according to your UI needs. Here's a short example to illustrate how errors can be caught and identified by their code:\n\n```typescript\nimport { Magic, RPCError, RPCErrorCode } from 'magic-sdk';\n\nconst m = new Magic('API_KEY');\n\ntry {\n  await m.auth.loginWithMagicLink({ email: 'hello@example.com', showUI: false });\n} catch(err) {\n  if (err instanceof RPCError) {\n    switch(err.code) {\n      case RPCErrorCode.MagicLinkFailedVerification:\n      case RPCErrorCode.MagicLinkExpired:\n      case RPCErrorCode.MagicLinkRateLimited:\n      case RPCErrorCode.UserAlreadyLoggedIn:\n        // Handle errors accordingly :)\n        break;\n    }\n  }\n}\n\n```\n\n### Events\n", "explanation": "**Summary:** \nThe provided code block is used for authenticating a user via a magic link sent to their email address using the Magic SDK. It attempts to log in the user and handles potential errors with custom error handling, including catching and identifying specific error codes.", "metadata": {"repo": "magiclabs/documentation", "file": "client-sdk/browser-js/sdk/auth-module/login-with-magic-link.md", "chunk_number": 2, "total_chunks": 3}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "**Summary:**\nThe 'loginWithMagicLink' function in 'auth-module/login-with-magic-link.md' is used for password-less authentication. This function sends a 'magic link' to a user's email address and resolves with a Decentralized ID token upon successful authentication. It includes custom error handling and triggers specific events related to the Magic Link email system, including email delivery errors, successful email sends, and retries when the UI is displayed."}
{"code": "* `email-not-deliverable`: Dispatched if the magic link email is unable to be delivered.\n* `email-sent`: Dispatched when the magic link email has been successfully sent from the Magic Link server.\n* `retry`: Dispatched when the user restarts the flow. This can only happen if `showUI: true`.\n\n", "explanation": "This block describes the purpose and functionality of three custom events related to a Magic Link email system. In summary:\n\n1. `email-not-deliverable`: Triggered when email delivery fails.\n2. `email-sent`: Triggered when the email is successfully sent.\n3. `retry`: Triggered when the user restarts the flow, but only when user interface is displayed (`showUI: true`).", "metadata": {"repo": "magiclabs/documentation", "file": "client-sdk/browser-js/sdk/auth-module/login-with-magic-link.md", "chunk_number": 3, "total_chunks": 3}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "**Summary:**\nThe 'loginWithMagicLink' function in 'auth-module/login-with-magic-link.md' is used for password-less authentication. This function sends a 'magic link' to a user's email address and resolves with a Decentralized ID token upon successful authentication. It includes custom error handling and triggers specific events related to the Magic Link email system, including email delivery errors, successful email sends, and retries when the UI is displayed."}
{"code": "---\ndescription: Configure and construct your Magic SDK instance.\n---\n\n# Constructor\n\n### Arguments\n\n`new Magic(apiKey, options?)`\n\n* `apiKey` \\(String\\): Your **publishable** API Key retrieved from the [Magic Dashboard](https://dashboard.magic.link).\n* `options.network?` \\(String\\|Object\\)\n  * \\(String\\): a representation of the connected Ethereum network \\(one of: `mainnet`, `rinkeby`, `kovan`, or `ropsten`\\).\n  * \\(Object\\): a custom Ethereum Node configuration with the following shape:\n    * `rpcUrl` \\(String\\): A URL pointing to your custom Ethereum Node.\n    * `chainId?` \\(Number\\): Some Node infrastructures require you to pass an explicit chain ID. If you are aware that your Node requires this configuration, pass it here as an integer.\n  * [\ud83e\udd2f Learn more about using Magic SDK with Ethereum!](../../../advanced/ethereum/)\n* `options.endpoint?`\\(String\\): A URL pointing to the Magic `<iframe>` application.\n\n### Example\n\n```typescript\nimport { Magic } from 'magic-sdk';\n\nlet m;\n\n// Construct with an API key:", "explanation": "**Purpose:** \nConfigure and construct a Magic SDK instance for integration with Ethereum networks.\n\n**Functionality:** \nThe `new Magic(apiKey, options?)` constructor takes a publishable API key and optional network configuration to initialize the Magic SDK. Options include specifying an Ethereum network (`mainnet`, `rinkeby`, `kovan`, or `ropsten`) or providing a custom Ethereum Node configuration with an RPC URL and optional chain ID.", "metadata": {"repo": "magiclabs/documentation", "file": "client-sdk/browser-js/sdk/constructor.md", "chunk_number": 1, "total_chunks": 2}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "**Summary of client-sdk/browser-js/sdk/constructor.md**\n\nThe Magic SDK constructor configures and constructs a Magic SDK instance for integration with Ethereum networks. The `new Magic(apiKey, options?)` constructor takes two parameters: a required publishable API key (`API_KEY`) and an optional `options` object. The `options` object can specify the network (e.g., `mainnet`, `rinkeby`, etc.) or a custom Ethereum Node configuration with an RPC URL and chain ID."}
{"code": "m = new Magic('API_KEY');\n\n// Construct with an API key plus options:\nm = new Magic('API_KEY', { network: 'rinkeby', endpoint: '...' });\n```\n\n", "explanation": "**Functionality Summary**\n\nThis code block initializes a new instance of the Magic class, used for authentication or other purposes. It takes two optional parameters: \n\n1. `API_KEY`: required, sets the API key for the instance.\n2. `Options`: optional, an object that can specify additional settings, such as the network (`rinkeby`, etc.) and a custom endpoint.", "metadata": {"repo": "magiclabs/documentation", "file": "client-sdk/browser-js/sdk/constructor.md", "chunk_number": 2, "total_chunks": 2}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "**Summary of client-sdk/browser-js/sdk/constructor.md**\n\nThe Magic SDK constructor configures and constructs a Magic SDK instance for integration with Ethereum networks. The `new Magic(apiKey, options?)` constructor takes two parameters: a required publishable API key (`API_KEY`) and an optional `options` object. The `options` object can specify the network (e.g., `mainnet`, `rinkeby`, etc.) or a custom Ethereum Node configuration with an RPC URL and chain ID."}
{"code": "# Errors & Warnings\n\nThere are three types of error class to be aware of when working with the client-side JavaScript SDK:\n\n* `SDKError`: Raised by the SDK to indicate missing parameters, communicate deprecation notices, or other internal issues. A notable example would be a `MISSING_API_KEY` error, which informs the required API key parameter was missing from `new Magic(...)`.\n* `RPCError`: Errors associated with specific method calls to the Magic `<iframe>` context. These methods are formatted as [JSON RPC 2.0](https://www.jsonrpc.org/specification) payloads, so they return error codes as _integers_. This type of error is raised by methods like [`AuthModule.loginWithMagicLink`](auth-module/login-with-magic-link.md#error-codes).\n* `ExtensionError`: Errors associated with method calls to Magic SDK Extensions. Extensions are an upcoming/experimental feature of Magic SDK. More information will be available once Extensions are officially released.\n\n## `SDKError`\n", "explanation": "**Error Handling in JavaScript SDK**\n\nThis block describes the three main error classes in the JavaScript SDK:\n\n1. `SDKError`: raised for internal issues, missing parameters, and deprecation notices.\n2. `RPCError`: errors in JSON RPC 2.0 formatted method calls to the Magic iframe context.\n3. `ExtensionError`: errors in experimental Magic SDK extensions.", "metadata": {"repo": "magiclabs/documentation", "file": "client-sdk/browser-js/sdk/errors-and-warnings.md", "chunk_number": 1, "total_chunks": 6}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "**Holistic Summary of client-sdk/browser-js/sdk/errors-and-warnings.md**\n\nThe Magic JavaScript SDK handles errors through three primary error classes: `SDKError`, `RPCError`, and `ExtensionError`. These classes, accompanied by respective error code enumerations (`SDKErrorCode`, `RPCErrorCode`), enable developers to catch and handle specific errors in their applications.\n\n- `SDKError` handles internal issues, missing parameters, and deprecation notices.\n- `RPCError` handles JSON RPC 2.0 formatted method call errors, including custom error codes for Magic Link-related issues.\n- `ExtensionError` represents errors within experimental extensions.\n\nThe error classes and codes are designed for deterministic error handling, allowing developers to identify and handle specific errors using `instanceof` operations and readable error codes. This enables precise error handling and robust exception management in Magic SDK applications."}
{"code": "The `SDKError` class is exposed for `instanceof` operations.\n\n```typescript\nimport { SDKError } from 'magic-sdk';\n\ntry {\n  // Something async...\ncatch (err) {\n  if (err instanceof SDKError) {\n    // Handle...\n  }\n}\n```\n\n`SDKError` instances expose the `code` field which may be used to deterministically identify the error. Additionally, an enumeration of error codes is exposed for convenience and readability:\n\n```typescript\nimport { SDKErrorCode } from 'magic-sdk';\n\nSDKErrorCode.MissingApiKey\nSDKErrorCode.ModalNotReady\nSDKErrorCode.MalformedResponse\n// and so forth...\n// Please reference the `Enum Key` column of the error table below.\n```\n\n### Error Codes\n\n| Enum Key | Description |\n| :--- | :--- |\n| `MissingApiKey` | Indicates the required Magic API key is missing or invalid. |\n| `ModalNotReady` | Indicates the Magic iframe context is not ready to receive events. This error should be rare and usually indicates an environmental issue or improper `async/await` usage. |", "explanation": "**Summary**\n\nThis code snippet exposes the `SDKError` class and its accompanied `SDKErrorCode` enumeration for handling and identifying errors in a Magic SDK application. The class can be used with `instanceof` to catch specific errors, while the enumeration provides readable and determinate error codes for precise error handling.", "metadata": {"repo": "magiclabs/documentation", "file": "client-sdk/browser-js/sdk/errors-and-warnings.md", "chunk_number": 2, "total_chunks": 6}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "**Holistic Summary of client-sdk/browser-js/sdk/errors-and-warnings.md**\n\nThe Magic JavaScript SDK handles errors through three primary error classes: `SDKError`, `RPCError`, and `ExtensionError`. These classes, accompanied by respective error code enumerations (`SDKErrorCode`, `RPCErrorCode`), enable developers to catch and handle specific errors in their applications.\n\n- `SDKError` handles internal issues, missing parameters, and deprecation notices.\n- `RPCError` handles JSON RPC 2.0 formatted method call errors, including custom error codes for Magic Link-related issues.\n- `ExtensionError` represents errors within experimental extensions.\n\nThe error classes and codes are designed for deterministic error handling, allowing developers to identify and handle specific errors using `instanceof` operations and readable error codes. This enables precise error handling and robust exception management in Magic SDK applications."}
{"code": "| `MalformedResponse` | Indicates the response received from the Magic iframe context is malformed. We all make mistakes \\(even us\\), but this should still be a rare exception. If you encounter this, please be aware of phishing! |\n| `InvalidArgument` | Raised if an SDK method receives an invalid argument. Generally, TypeScript saves us all from simple bugs, but there are validation edge cases it cannot solve\u2014this error type will keep you informed! |\n| `ExtensionNotInitialized` | Indicates an extension method was invoked before the Magic SDK instance was initialized. Make sure to access extension methods only from the Magic SDK instance to avoid this error. |\n\n## `RPCError`\n\nThe `RPCError` class is exposed for `instanceof` operations:\n\n```typescript\nimport { RPCError } from 'magic-sdk';\n\ntry {\n  // Something async...\ncatch (err) {\n  if (err instanceof RPCError) {\n    // Handle...\n  }\n}\n```\n", "explanation": "**Summary of RPCError and Custom Error Codes**\n\nThis document defines a set of custom error codes and the `RPCError` class in the Magic SDK. The error codes include:\n\n- `MalformedResponse`: indicates a malformed response from the Magic iframe context.\n- `InvalidArgument`: raised when a method receives an invalid argument.\n- `ExtensionNotInitialized`: occurs when an extension method is accessed before SDK initialization.\n\nThe `RPCError` class is exposed for `instanceof` operations to catch and handle these custom errors in try-catch blocks.", "metadata": {"repo": "magiclabs/documentation", "file": "client-sdk/browser-js/sdk/errors-and-warnings.md", "chunk_number": 3, "total_chunks": 6}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "**Holistic Summary of client-sdk/browser-js/sdk/errors-and-warnings.md**\n\nThe Magic JavaScript SDK handles errors through three primary error classes: `SDKError`, `RPCError`, and `ExtensionError`. These classes, accompanied by respective error code enumerations (`SDKErrorCode`, `RPCErrorCode`), enable developers to catch and handle specific errors in their applications.\n\n- `SDKError` handles internal issues, missing parameters, and deprecation notices.\n- `RPCError` handles JSON RPC 2.0 formatted method call errors, including custom error codes for Magic Link-related issues.\n- `ExtensionError` represents errors within experimental extensions.\n\nThe error classes and codes are designed for deterministic error handling, allowing developers to identify and handle specific errors using `instanceof` operations and readable error codes. This enables precise error handling and robust exception management in Magic SDK applications."}
{"code": "`RPCError` instances expose the `code` field which may be used to deterministically identify the error. Additionally, an enumeration of error codes is exposed for convenience and readability:\n\n```typescript\nimport { RPCErrorCode } from 'magic-sdk';\n\nRPCErrorCode.MagicLinkExpired\nRPCErrorCode.UserAlreadyLoggedIn\nRPCErrorCode.ParseError\nRPCErrorCode.MethodNotFound\nRPCErrorCode.InternalError\n// and so forth...\n// Please reference the `Enum Key` column of the error table below.\n```\n\n### Magic Link Error Codes\n\n| Code | Enum Key | Description |\n| :--- | :--- | :--- |\n| -10000 | `MagicLinkFailedVerification` | The magic link failed verification, possibly due to an internal service error or a generic network error. |\n| -10001 | `MagicLinkExpired` | The user clicked their magic link after it had expired \\(this can happen if the user takes more than 10 minutes to check their email\\). |", "explanation": "**Summary:**\n\nThis block provides an enumeration of error codes (`RPCErrorCode`) for Magic Link-related errors, allowing developers to deterministically identify and handle specific errors.", "metadata": {"repo": "magiclabs/documentation", "file": "client-sdk/browser-js/sdk/errors-and-warnings.md", "chunk_number": 4, "total_chunks": 6}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "**Holistic Summary of client-sdk/browser-js/sdk/errors-and-warnings.md**\n\nThe Magic JavaScript SDK handles errors through three primary error classes: `SDKError`, `RPCError`, and `ExtensionError`. These classes, accompanied by respective error code enumerations (`SDKErrorCode`, `RPCErrorCode`), enable developers to catch and handle specific errors in their applications.\n\n- `SDKError` handles internal issues, missing parameters, and deprecation notices.\n- `RPCError` handles JSON RPC 2.0 formatted method call errors, including custom error codes for Magic Link-related issues.\n- `ExtensionError` represents errors within experimental extensions.\n\nThe error classes and codes are designed for deterministic error handling, allowing developers to identify and handle specific errors using `instanceof` operations and readable error codes. This enables precise error handling and robust exception management in Magic SDK applications."}
{"code": "| -10002 | `MagicLinkRateLimited` | If the `showUI` parameter is set to `false`, this error will communicate the email rate limit has been reached. Please debounce your method calls if this occurs. |\n| -10003 | `UserAlreadyLoggedIn` | A user is already logged in. If a new user should replace the existing user, make sure to call [`logout`](user-module/logout.md) before proceeding. |\n| -10004 | `UpdateEmailFailed` | An update email request was unsuccessful, either due to an invalid email being supplied or the user canceled the action. |\n\n### Standard JSON RPC 2.0 Error Codes\n\n| Code | Enum Key | Description |\n| :--- | :--- | :--- |\n| -32700 | `ParseError` | Invalid JSON was received by the server. An error occurred on the server while parsing the JSON text. |\n| -32600 | `InvalidRequest` | The JSON sent is not a valid Request object. |\n| -32601 | `MethodNotFound` | The method does not exist / is not available. |\n| -32602 | `InvalidParams` | Invalid method parameter\\(s\\). |", "explanation": "The given block is a table listing error codes with descriptions. The purpose is to document custom and standard JSON-RPC error codes for troubleshooting and handling exceptions in JSON-RPC communication.", "metadata": {"repo": "magiclabs/documentation", "file": "client-sdk/browser-js/sdk/errors-and-warnings.md", "chunk_number": 5, "total_chunks": 6}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "**Holistic Summary of client-sdk/browser-js/sdk/errors-and-warnings.md**\n\nThe Magic JavaScript SDK handles errors through three primary error classes: `SDKError`, `RPCError`, and `ExtensionError`. These classes, accompanied by respective error code enumerations (`SDKErrorCode`, `RPCErrorCode`), enable developers to catch and handle specific errors in their applications.\n\n- `SDKError` handles internal issues, missing parameters, and deprecation notices.\n- `RPCError` handles JSON RPC 2.0 formatted method call errors, including custom error codes for Magic Link-related issues.\n- `ExtensionError` represents errors within experimental extensions.\n\nThe error classes and codes are designed for deterministic error handling, allowing developers to identify and handle specific errors using `instanceof` operations and readable error codes. This enables precise error handling and robust exception management in Magic SDK applications."}
{"code": "| -32603 | `InternalError` | Internal JSON-RPC error. These can manifest as different generic issues \\(i.e.: attempting to access a protected endpoint before the user is logged in\\). |\n\n## `ExtensionError`\n\nThe `ExtensionError` class is exposed for `instanceof` operations:\n\n```typescript\nimport { ExtensionError } from 'magic-sdk';\n\ntry {\n  // Something async...\ncatch (err) {\n  if (err instanceof ExtensionError) {\n    // Handle...\n  }\n}\n```\n\n`ExtensionError` instances expose the `code` field which may be used to deterministically identify the error. Magic SDK does not export a global enumeration of Extension error codes. Instead, Extension authors are responsible for exposing and documenting error codes relevant to the Extension's use-case.\n\n", "explanation": "**Purpose and Functionality of ExtensionError Class**\n\nThe `ExtensionError` class represents an error occurring within an extension. It has a `code` field that identifies the error, allowing for deterministic error handling. The class is designed for `instanceof` operations, enabling developers to catch and handle specific extension errors.", "metadata": {"repo": "magiclabs/documentation", "file": "client-sdk/browser-js/sdk/errors-and-warnings.md", "chunk_number": 6, "total_chunks": 6}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "**Holistic Summary of client-sdk/browser-js/sdk/errors-and-warnings.md**\n\nThe Magic JavaScript SDK handles errors through three primary error classes: `SDKError`, `RPCError`, and `ExtensionError`. These classes, accompanied by respective error code enumerations (`SDKErrorCode`, `RPCErrorCode`), enable developers to catch and handle specific errors in their applications.\n\n- `SDKError` handles internal issues, missing parameters, and deprecation notices.\n- `RPCError` handles JSON RPC 2.0 formatted method call errors, including custom error codes for Magic Link-related issues.\n- `ExtensionError` represents errors within experimental extensions.\n\nThe error classes and codes are designed for deterministic error handling, allowing developers to identify and handle specific errors using `instanceof` operations and readable error codes. This enables precise error handling and robust exception management in Magic SDK applications."}
{"code": "# Global Methods\n\nGlobal methods and properties are accessible on the Magic SDK instance itself.\n\n```typescript\nimport { Magic } from 'magic-sdk';\n\nconst m = new Magic('API_KEY');\n\nm.preload;\n```\n\n## Members\n\n{% page-ref page=\"preload.md\" %}\n\n\n\n", "explanation": "This block of text and code describes the \"preload\" property of the Magic SDK instance in TypeScript. The purpose of this property is not explicitly stated, but based on its name, it likely allows for preloading of resources or data.", "metadata": {"repo": "magiclabs/documentation", "file": "client-sdk/browser-js/sdk/global-methods/README.md", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "The file 'client-sdk/browser-js/sdk/global-methods/README.md' contains documentation for global methods of the Magic SDK instance. Specifically, it includes a property called \"preload\" with a code block snippet written in TypeScript. This property's purpose appears to be related to preloading resources or data, although its exact functionality is not explicitly stated."}
{"code": "---\ndescription: >-\n  Starts downloading the static assets required to render the Magic iframe\n  context.\n---\n\n# preload\n\n### Arguments\n\nNone.\n\n### Returns\n\n`Promise<void>`: A Promise that resolves to indicate the `<iframe>` is ready for requests. \n\n### Example\n\n```typescript\nimport { Magic } from 'magic-sdk';\n\nconst m = new Magic('API_KEY');\n\nm.preload().then(() => console.log('Magic <iframe> loaded.');\n```\n\n", "explanation": "**Purpose and Functionality:**\n\nThe `preload` function initiates the download of static assets required to render the Magic iframe context and returns a Promise that resolves when the iframe is ready for requests.", "metadata": {"repo": "magiclabs/documentation", "file": "client-sdk/browser-js/sdk/global-methods/preload.md", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "The `preload` function in the Magic SDK initializes the download of necessary static assets for the Magic iframe context. It returns a Promise that resolves once the iframe is ready to handle requests."}
{"code": "# PromiEvents\n\nMagic SDK provides a flexible interface for handling methods which encompass multiple \"stages\" of an action. `Promises` returned by Magic SDK resolve when a flow has reached finality, but certain methods also contain life-cycle events that dispatch throughout. We refer to this interface as a **`PromiEvent`**. There is prior art to inspire this approach in Ethereum's [Web3](https://web3js.readthedocs.io/en/v1.2.1/callbacks-promises-events.html) standard.\n\n**`PromiEvent`** is a portmanteau of `Promise` and [`EventEmitter`](https://github.com/primus/eventemitter3). Browser and React Native SDK methods return this object type, which is a native JavaScript `Promise` overloaded with `EventEmitter` methods. This value can be `awaited` in modern `async/await` code, or you may register event listeners to handle method-specific life-cycle hooks. Each `PromiEvent` contains the following default event types:\n", "explanation": "The `PromiEvent` is a hybrid object that combines the functionality of a JavaScript `Promise` with `EventEmitter` methods. It allows handling of multi-stage actions by resolving when a flow reaches finality and dispatching lifecycle events throughout. This object can be `awaited` or used with event listeners to handle specific method lifecycle hooks.", "metadata": {"repo": "magiclabs/documentation", "file": "client-sdk/browser-js/sdk/promievents.md", "chunk_number": 1, "total_chunks": 3}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "Here's a concise and holistic summary of the 'client-sdk/browser-js/sdk/promievents.md' file:\n\nThe PromiEvent object combines Promise and EventEmitter functionality to handle multi-stage actions. It can be awaited or used with event listeners to handle lifecycle hooks. The object supports three main event types: \"done\" (Promise resolve), \"error\" (Promise reject), and \"settled\" (Promise resolve or reject). This functionality allows developers to chain Promise and EventEmitter methods for flexibility in handling asynchronous operations. \n\nExample use cases include handling various scenarios during asynchronous processes like email verification, such as listening for specific events (e.g., \"email-sent\", \"email-not-deliverable\"), handling generic or specific errors, and executing callbacks upon successful execution."}
{"code": "* **`\"done\"`**: Called when the `Promise` resolves. This is equivalent to `Promise.then`.\n* **`\"error\"`**: Called if the `Promise` rejects. This is equivalent to `Promise.catch`.\n* **`\"settled\"`**: Called when the `Promise` either resolves or rejects. This is equivalent to `Promise.finally`.\n\nLook for additional event types documented near the method they relate to. Events are strongly-typed by TypeScript to offer developer hints and conveniant IDE auto-complete.\n\n### Example\n\nIt's possible to chain `Promise` methods like `.then` and `.catch` with `EventEmitter` methods like `.on` and `.once` seamlessly. There are no limitations to either chaining interface, they all return an `awaitable` `PromiEvent`, as expected. The [species](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/species) of the object type is always a native JavaScript `Promise`.\n\n```typescript\nconst req = magic.auth.loginWithMagicLink({ email: 'hello@magic.link' });\n\nreq", "explanation": "**Summary:**\n\nThis block explains the functionality of event types for a PromiEvent object in TypeScript. It outlines three key event types: \n- `\"done\"`: triggered when a Promise resolves (equivalent to `Promise.then`).\n- `\"error\"`: triggered when a Promise rejects (equivalent to `Promise.catch`).\n- `\"settled\"`: triggered when a Promise either resolves or rejects (equivalent to `Promise.finally`).\n\nThese events allow developers to chain `Promise` methods with `EventEmitter` methods, providing flexibility and convenience in handling asynchronous operations.", "metadata": {"repo": "magiclabs/documentation", "file": "client-sdk/browser-js/sdk/promievents.md", "chunk_number": 2, "total_chunks": 3}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "Here's a concise and holistic summary of the 'client-sdk/browser-js/sdk/promievents.md' file:\n\nThe PromiEvent object combines Promise and EventEmitter functionality to handle multi-stage actions. It can be awaited or used with event listeners to handle lifecycle hooks. The object supports three main event types: \"done\" (Promise resolve), \"error\" (Promise reject), and \"settled\" (Promise resolve or reject). This functionality allows developers to chain Promise and EventEmitter methods for flexibility in handling asynchronous operations. \n\nExample use cases include handling various scenarios during asynchronous processes like email verification, such as listening for specific events (e.g., \"email-sent\", \"email-not-deliverable\"), handling generic or specific errors, and executing callbacks upon successful execution."}
{"code": "  .on(\"email-sent\", () => { /* ... */ })\n  .then(DIDToken => { /* ... */ })\n  .once(\"email-not-deliverable\", () => { /* ... */ })\n  .catch(error => { /* ... */ })\n  .on(\"error\", error => { /* ... */ });\n```\n\n", "explanation": "This block of code is a sequence of event handlers and error catchers for an asynchronous process, likely email verification or authentication using DIDToken. It listens for the following events:\n\n- \"email-sent\" ( triggers a callback when an email is sent)\n- successful execution (returns DIDToken for further processing in the \"then\" block)\n- \"email-not-deliverable\" (triggers a callback when an email cannot be delivered), but only once\n- any generic errors (caught by the \"catch\" block)\n- specific \"error\" events (triggers a callback with the error details)\n\nThis setup allows for handling different scenarios that might occur during the email verification process.", "metadata": {"repo": "magiclabs/documentation", "file": "client-sdk/browser-js/sdk/promievents.md", "chunk_number": 3, "total_chunks": 3}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "Here's a concise and holistic summary of the 'client-sdk/browser-js/sdk/promievents.md' file:\n\nThe PromiEvent object combines Promise and EventEmitter functionality to handle multi-stage actions. It can be awaited or used with event listeners to handle lifecycle hooks. The object supports three main event types: \"done\" (Promise resolve), \"error\" (Promise reject), and \"settled\" (Promise resolve or reject). This functionality allows developers to chain Promise and EventEmitter methods for flexibility in handling asynchronous operations. \n\nExample use cases include handling various scenarios during asynchronous processes like email verification, such as listening for specific events (e.g., \"email-sent\", \"email-not-deliverable\"), handling generic or specific errors, and executing callbacks upon successful execution."}
{"code": "# User Module\n\nThe User Module and it's members are accessible on the Magic SDK instance by the `user` property.\n\n```typescript\nimport { Magic } from 'magic-sdk';\n\nconst m = new Magic('API_KEY');\n\nm.user;\nm.user.getIdToken;\nm.user.generateIdToken;\nm.user.getMetadata;\nm.user.isLoggedIn;\nm.user.logout;\n```\n\n## Members\n\n{% page-ref page=\"getidtoken.md\" %}\n\n{% page-ref page=\"generateidtoken.md\" %}\n\n{% page-ref page=\"getmetadata.md\" %}\n\n{% page-ref page=\"isloggedin.md\" %}\n\n{% page-ref page=\"logout.md\" %}\n\n\n\n", "explanation": "**User Module Summary**\n\nThe User Module provides access to user authentication and management through the `user` property of a Magic SDK instance. It offers methods to:\n\n- Retrieve user ID token (`getIdToken`)\n- Generate a new user ID token (`generateIdToken`)\n- Get user metadata (`getMetadata`)\n- Check if the user is logged in (`isLoggedIn`)\n- Perform logout functionality (`logout`)", "metadata": {"repo": "magiclabs/documentation", "file": "client-sdk/browser-js/sdk/user-module/README.md", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "The README for the User Module of the client SDK in browser JavaScript details functionality for managing and authenticating users. The module, accessible via the `user` property of the Magic SDK instance, offers five primary methods for user authentication and management: \n\n- Retrieve a user's ID token \n- Generate a new ID token \n- Retrieve a user's metadata \n- Check if a user is logged in \n- Perform a user logout"}
{"code": "---\ndescription: Generates a Decentralized Id Token with optional serialized data.\n---\n\n# generateIdToken\n\n### Arguments\n\n`generateIdToken({ lifespan? = 900, attachment? = 'none' })`\n\n* `lifespan?` \\(Number\\) : will set the lifespan of the generated token. Defaults to 900s \\(15 mins\\)\n* `attachment?` \\(String\\) : will set a signature of serialized data in the generated token. Defaults to `\"none\"`\n\n### Returns\n\n[`PromiEvent<string>`](../promievents.md): Base64-encoded string representation of a JSON tuple representing `[proof, claim]`\n\n{% page-ref page=\"../../../../decentralized-id.md\" %}\n\n### Example\n\n```typescript\nimport { Magic } from 'magic-sdk';\n\nconst m = new Magic('API_KEY');\n\n// Assumes a user is already logged in\ntry {\n  const idToken = await m.user.generateIdToken({ attachment: 'SERVER_SECRET' });\n} catch {\n  // Handle errors if required!\n}\n```\n\n", "explanation": "**Purpose:** The `generateIdToken` function generates a Decentralized Id Token with optional serialized data.\n\n**Functionality:**\n\n- Takes two optional arguments: `lifespan` (default: 900s) and `attachment` (default: \"none\").\n- Returns a Base64-encoded string representing a JSON tuple `[proof, claim]`.\n- Can be used to authenticate and verify user identity with attached serialized data.", "metadata": {"repo": "magiclabs/documentation", "file": "client-sdk/browser-js/sdk/user-module/generateidtoken.md", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "The 'generateidtoken' file contains a function `generateIdToken` that creates a Decentralized Id Token with optional serialized data for user identity authentication and verification. It takes two optional parameters:\n\n- `lifespan` (default: 900 seconds)\n- `attachment` (default: \"none\")\n\nThe function returns a Base64-encoded JSON tuple `[proof, claim]` as a string, which represents the generated Id Token."}
{"code": "---\ndescription: >-\n  Generates a Decentralized Id Token which acts as a proof of authentication to\n  resource servers.\n---\n\n# getIdToken\n\n### Arguments\n\n`getIdToken({ lifespan? = 900 })`\n\n* `lifespan?` \\(String\\): will set the lifespan of the generated token. Defaults to 900s \\(15 mins\\)\n\n### Returns\n\n[`PromiEvent<string>`](../promievents.md): Base64-encoded string representation of a JSON tuple representing `[proof, claim]`\n\n{% page-ref page=\"../../../../decentralized-id.md\" %}\n\n### Example\n\n```typescript\nimport { Magic } from 'magic-sdk';\n\nconst m = new Magic('API_KEY');\n\n// Assumes a user is already logged in\ntry {\n  const idToken = await m.user.getIdToken();\n} catch {\n  // Handle errors if required!\n}\n```\n\n", "explanation": "**Summary:**\nThe `getIdToken` block generates a Decentralized Id Token for authentication with resource servers. It takes an optional `lifespan` argument (default 15 mins) and returns a Base64-encoded string representation of a `[proof, claim]` JSON tuple.", "metadata": {"repo": "magiclabs/documentation", "file": "client-sdk/browser-js/sdk/user-module/getidtoken.md", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "The `getidtoken.md` file is part of the user module within the client SDK. It describes the `getIdToken` function, which generates a Decentralized Id Token for authentication with resource servers. The token is a Base64-encoded string containing a `[proof, claim]` JSON tuple and can be customized with a specified lifespan, defaulting to 15 minutes if not provided."}
{"code": "---\ndescription: Retrieves information for the authenticated user.\n---\n\n# getMetadata\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`PromiEvent<{ issuer, email, publicAddress }>`](../promievents.md): an object containing the issuer, email and cryptographic [public address ](https://support.blockchain.com/hc/en-us/articles/360000951966-Public-and-private-keys)of the authenticated user.\n\n* `issuer` \\(String\\): The Decentralized ID of the user.  In server-side use-cases, we recommend this value to be used as the user ID in your own tables.\n* `email` \\(String\\): Email address of the authenticated user.\n* `publicAddress`\\(String\\): The authenticated user's public address \\(a.k.a.: public key\\). Currently, this value is associated with the Ethereum blockchain. \n\n### Example\n\n```typescript\nimport { Magic } from 'magic-sdk';\n\nconst m = new Magic('API_KEY');\n\n// Assumes a user is already logged in\ntry {\n  const { email, publicAddress } = await m.user.getMetadata();\n} catch {\n  // Handle errors if required!\n}\n```\n\n", "explanation": "**Summary**\n\nThe `getMetadata` block retrieves information about the authenticated user, including their Decentralized ID (issuer), email address, and public address (associated with the Ethereum blockchain).", "metadata": {"repo": "magiclabs/documentation", "file": "client-sdk/browser-js/sdk/user-module/getmetadata.md", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "The `getMetadata` function in the user module of the client SDK retrieves authenticated user information, including their Decentralized ID, email address, and public Ethereum blockchain address."}
{"code": "---\ndescription: Checks if a user is currently logged in to the Magic Client-side SDK.\n---\n\n# isLoggedIn\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`PromiEvent<Boolean>`](../promievents.md)\n\n### Example\n\n```typescript\nimport { Magic } from 'magic-sdk';\n\nconst m = new Magic('API_KEY');\n\ntry {\n  const isLoggedIn = await m.user.isLoggedIn();\n  console.log(isLoggedIn) // => `true` or `false`\n} catch {\n  // Handle errors if required!\n}\n```\n\n\n\n", "explanation": "**isLoggedIn Functionality Summary**\n\nThe `isLoggedIn` function checks if a user is currently logged in to the Magic Client-side SDK. It takes no arguments and returns a `PromiEvent` that resolves to a boolean indicating the user's login status.", "metadata": {"repo": "magiclabs/documentation", "file": "client-sdk/browser-js/sdk/user-module/isloggedin.md", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "The `isLoggedIn` function is a utility in the Magic Client-side SDK that determines if a user is currently logged in. It returns a `PromiEvent` resolving to a boolean value, indicating the user's login status, without requiring any arguments."}
{"code": "---\ndescription: Logs out the currently authenticated Magic user\n---\n\n# logout\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`PromiEvent<boolean>`](../promievents.md)\n\n### Example\n\n```typescript\nimport { Magic } from 'magic-sdk';\n\nconst m = new Magic('API_KEY');\n\ntry {\n  await m.user.logout();\n  console.log(await m.user.isLoggedIn()); // => `false`\n} catch {\n  // Handle errors if required!\n}\n```\n\n", "explanation": "**Purpose and Functionality:**\n\nThis code block documents the `logout` function of the Magic SDK, which logs out the currently authenticated Magic user. It takes no arguments and returns a `PromiEvent<boolean>` indicating whether the logout was successful.", "metadata": {"repo": "magiclabs/documentation", "file": "client-sdk/browser-js/sdk/user-module/logout.md", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "The 'client-sdk/browser-js/sdk/user-module/logout.md' file documents the Magic SDK's `logout` function. This function logs out the currently authenticated Magic user, has no arguments, and returns a `PromiEvent<boolean>` indicating the logout's success."}
{"code": "---\ndescription: initiates the update email flow that allows a user to change to a new email\n---\n\n# updateEmail\n\n## Arguments\n\n`updateEmail({ email, showUI? = true })`\n\n* `email` \\(String\\): The new email to update to.\n* `showUI?`\\(Boolean\\): If `true`, show an out-of-the-box pending UI  includes instructions on which step of the confirmation process the user is on. Dismisses automatically when the process is complete.\n\n### Returns\n\n[`PromiEvent<boolean>`](../promievents.md): The promise resolves with a true boolean value if update email is successful and rejects with a specific error code if the request fails. \n\n### Example\n\n```typescript\nimport { Magic } from 'magic-sdk';\n\nconst m = new Magic('API_KEY');\n\n// Initiates the flow to update a user's current email to a new one.\ntry {\n  ...\n  /* Assuming user is logged in */\n  await magic.user.updateEmail({ email: 'new_user_email@example.com' });\n} catch {\n  // Handle errors if required!\n}\n\n/**\n * Initiates the flow to update a user's current email to a new one,", "explanation": "**Summary:**\n\nThe `updateEmail` function initiates an email update flow for a user, allowing them to change their email address. It takes a `email` string and an optional `showUI` boolean, returning a promise that resolves with a boolean indicating success or failure.", "metadata": {"repo": "magiclabs/documentation", "file": "client-sdk/browser-js/sdk/user-module/updateemail.md", "chunk_number": 1, "total_chunks": 3}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "The 'client-sdk/browser-js/sdk/user-module/updateemail.md' file provides a function for updating a user's email address without displaying the default UI. The `updateEmail` function takes a new email address and an optional UI display parameter, returning a promise that resolves to a boolean indicating success or failure."}
{"code": " * without showing an out-of-the box UI.\n */ \ntry {\n  /* Assuming user is logged in */\n  await magic.user.updateEmail({ email: 'new_user_email@example.com', showUI: false });\n} catch {\n  // Handle errors if required!\n}\n\n```\n\n### Error Handling\n\n[**Relevant Error Codes**](../errors-and-warnings.md#magic-link-error-codes)\\*\\*\\*\\*\n\nTo achieve a fully white-labeled experience, you will need to implement some custom error handling according to your UI needs. Here's a short example to illustrate how errors can be caught and identified by their code:\n\n```typescript\nimport { Magic, RPCError, RPCErrorCode } from 'magic-sdk';\n\nconst m = new Magic('API_KEY');\n\ntry {\n  await m.user.updateEmail({ email: 'hello@example.com', showUI: false });\n} catch(err) {\n  if (err instanceof RPCError) {\n    switch(err.code) {\n      case RPCErrorCode.UpdateEmailFailed:\n        // Handle errors accordingly :)\n        break;\n    }\n  }\n}\n\n```\n\n### Events\n", "explanation": "**Purpose:** Update a user's email without displaying an out-of-the-box UI. \n\n**Functionality:** The block of code attempts to update a user's email address using Magic's `updateEmail` method, suppressing the default UI. If an error occurs during this process, it catches and handles the error.", "metadata": {"repo": "magiclabs/documentation", "file": "client-sdk/browser-js/sdk/user-module/updateemail.md", "chunk_number": 2, "total_chunks": 3}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "The 'client-sdk/browser-js/sdk/user-module/updateemail.md' file provides a function for updating a user's email address without displaying the default UI. The `updateEmail` function takes a new email address and an optional UI display parameter, returning a promise that resolves to a boolean indicating success or failure."}
{"code": "* `new-email-confirmed`: Dispatched when the magic link has been clicked from the user\u2019s new email address.\n* `email-sent`: Dispatched when the magic link email has been successfully sent from the Magic Link server to the user\u2019s new email address.\n* `email-not-deliverable`: Dispatched if the magic link email is unable to be delivered to the user\u2019s new email address.\n* `old-email-confirmed`: Dispatched when the magic link has been clicked from the user\u2019s previous email address.\n* `retry`: Dispatched when the user restarts the flow. This can only happen if `showUI: true`.\n\n", "explanation": "This block defines a set of event types related to email updating and magic link verification, including email sending, confirmations, delivery failures, and retry attempts.", "metadata": {"repo": "magiclabs/documentation", "file": "client-sdk/browser-js/sdk/user-module/updateemail.md", "chunk_number": 3, "total_chunks": 3}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "The 'client-sdk/browser-js/sdk/user-module/updateemail.md' file provides a function for updating a user's email address without displaying the default UI. The `updateEmail` function takes a new email address and an optional UI display parameter, returning a promise that resolves to a boolean indicating success or failure."}
{"code": "# Coming Soon\n\n### Advanced\n\n* Integration with WebAuthn / FIDO\n* Integration with IPFS\n* Integration with Netlify\n* Integration with OAuth 2.0 \\(bring your own OAuth\\)\n\n", "explanation": "This block appears to be a text roadmap or feature plan, indicating upcoming advanced integrations and functionalities for a project or system, including various authentication and storage technologies.", "metadata": {"repo": "magiclabs/documentation", "file": "client-sdk/coming-soon.md", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "Based on the provided information, here is a concise summary of the file 'client-sdk/coming-soon.md':\n\nThe 'client-sdk/coming-soon.md' file appears to outline the project's roadmap, detailing upcoming advanced integrations and functionalities, including various authentication and storage technologies."}
{"code": "# iOS\n\n## \ud83d\ude80 Welcome to the Magic IOS SDK\n\nThe Magic iOS SDK is your entry-point to secure, passwordless authentication for your mobile app. This guide will cover some important topics for getting started with iOS APIs and to make the most of Magic's features.\n\n**\ud83d\udc49 Go to our** [**Getting Started**](get-started.md) **tutorial to begin your integration**\n\n**\ud83d\udc49 Visit the API** [**documentation**](sdk/) **to learn the methods you'll be using**\n\n{% hint style=\"info\" %}\nMagic can support both server-based or serverless web applications. It is up to the developers to implement the [Admin SDK](../../admin-sdk/node-js/) to validate the DID Token.\n{% endhint %}\n\n### Looking for a server-side API? Start with one of these:\n\n{% page-ref page=\"../../admin-sdk/node-js/\" %}\n\n{% page-ref page=\"../../admin-sdk/python/\" %}\n\n\n\n", "explanation": "This block provides an introduction to the Magic iOS SDK, a tool for secure, passwordless authentication in mobile apps. It offers links to a \"Getting Started\" tutorial and API documentation, as well as additional resources for server-side API implementation.", "metadata": {"repo": "magiclabs/documentation", "file": "client-sdk/ios/README.md", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "**Magic iOS SDK README**\n=========================\n\nThe Magic iOS SDK provides a secure, passwordless authentication solution for mobile apps. To get started, follow our [Getting Started tutorial](link) and review our [API documentation](link) for detailed implementation instructions. Additional resources are available for server-side API implementation."}
{"code": "# \ud83d\ude80 Get Started\n\n## \ud83d\udce6 Installation\n\nIt's easy to install Magic SDK if you manage your iOS dependencies using [CocoaPods](http://cocoapods.org/). If you don't have an existing [Podfile](https://guides.cocoapods.org/syntax/podfile.html), run the following command to create one:\n\n```text\n$ pod init\n```\n\nSimply add `pod 'MagicSDK'`  to your `Podfile`:\n\n```bash\ntarget 'TARGET_NAME' do\n  use_frameworks!\n\n  pod 'MagicSDK'\nend\n```\n\nRun the following command:\n\n```text\n$ pod install\n```\n\nTo update pods to the latest:\n\n```text\n$ pod update\n```\n\n## \u26a1\ufe0f Creating an SDK Instance\n\n```swift\nimport UIKit\nimport MagicSDK\n\n@UIApplicationMain\nclass AppDelegate: UIResponder, UIApplicationDelegate {\n\n    func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplicationLaunchOptionsKey: Any]?) -> Bool {\n        \n        // assign the newly created Magic instance to shared property\n        Magic.shared = Magic(apiKey: \"API_KEY\")\n        \n        // do any other necessary launch configuration\n    }\n    return true\n}\n```\n", "explanation": "**Purpose:** The provided block outlines the steps to install and initialize the Magic SDK in an iOS project.\n\n**Functionality:**\n\n1. Installation: The block guides users to install the Magic SDK using CocoaPods by:\n   - Creating a Podfile if none exists\n   - Adding the MagicSDK pod to the Podfile\n   - Running `pod install` to download and integrate the SDK\n\n2. Initialization: The block shows how to create an instance of the Magic SDK in the AppDelegate class of the iOS project by:\n   - Importing the MagicSDK\n   - Creating a new Magic instance with an API key\n   - Assigning the instance to the shared Magic property", "metadata": {"repo": "magiclabs/documentation", "file": "client-sdk/ios/get-started.md", "chunk_number": 1, "total_chunks": 2}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "# Getting Started with Magic SDK for iOS\n=====================================================\n\nThis guide provides a step-by-step process to integrate the Magic SDK into an iOS project, enabling seamless authentication and user management.\n\n### Step 1: Installation\n\nInstall the Magic SDK using CocoaPods:\n\n1. Create a new Podfile if one doesn't exist.\n2. Add the MagicSDK pod to the Podfile.\n3. Run `pod install` to download and integrate the SDK.\n\n### Step 2: Initialization\n\nInitialize the Magic SDK in your AppDelegate class:\n\n1. Import the MagicSDK.\n2. Create a new Magic instance with your API key.\n3. Assign the instance to the shared Magic property.\n\nExample code is provided in Swift, with Objective-C examples coming soon.\n\nBy following these steps, you'll be able to setup and initialize the Magic SDK in your iOS project, unlocking a range of authentication and user management capabilities."}
{"code": "{% hint style=\"info\" %}\nAll the examples are written in Swift. Objective-C examples will be added soon. \n{% endhint %}\n\n", "explanation": "This block is a notation hint in documentation, indicating that all provided examples are written in Swift, with a promise to add Objective-C examples in the future.", "metadata": {"repo": "magiclabs/documentation", "file": "client-sdk/ios/get-started.md", "chunk_number": 2, "total_chunks": 2}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "# Getting Started with Magic SDK for iOS\n=====================================================\n\nThis guide provides a step-by-step process to integrate the Magic SDK into an iOS project, enabling seamless authentication and user management.\n\n### Step 1: Installation\n\nInstall the Magic SDK using CocoaPods:\n\n1. Create a new Podfile if one doesn't exist.\n2. Add the MagicSDK pod to the Podfile.\n3. Run `pod install` to download and integrate the SDK.\n\n### Step 2: Initialization\n\nInitialize the Magic SDK in your AppDelegate class:\n\n1. Import the MagicSDK.\n2. Create a new Magic instance with your API key.\n3. Assign the instance to the shared Magic property.\n\nExample code is provided in Swift, with Objective-C examples coming soon.\n\nBy following these steps, you'll be able to setup and initialize the Magic SDK in your iOS project, unlocking a range of authentication and user management capabilities."}
{"code": "# \ud83d\uddc4 SDK\n\nMagic offers functions that returns promisified result by using PromiseKit. For more detail about promiseKit in iOS, please check [PromiseKit](https://github.com/mxcl/PromiseKit)\n\n```swift\nmagic.auth.loginWithMagicLink(configuration, response: { response in \n    guard let result = response.result else { return print(\"Error:\", response.error.debugDescription) }\n    print(\"Result\", result)\n})\n```\n\nis equivalent to the follow function call\n\n```swift\nmagic.auth.loginWithMagicLink(configuration).done({ result in \n    print(\"Result\", result) // DIDToken\n}).catch({\n    print(\"Error:\", error) // handle Error\n})\n```\n\nOnce the authentication request is complete, the closure will be executed with either success or failure state in the result. If you choose to return as a promise, the promise will resolve with success state or reject when failure state is reached.\n\n", "explanation": "**Summary**\n\nThe provided block describes the SDK's authentication functionality using Magic's `loginWithMagicLink` method. It explains how the method returns a promisified result, equivalent to using PromiseKit, allowing for either a closure-based or promise-based approach to handle authentication success or failure states.", "metadata": {"repo": "magiclabs/documentation", "file": "client-sdk/ios/sdk/README.md", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "Client SDK for iOS README\n==========================\n\n### Authentication\n\nThe SDK handles authentication using Magic's `loginWithMagicLink` method, returning a promisified result. This allows for both closure-based and promise-based approaches to handle authentication success or failure states.\n\nUse Case\n--------\n\n* `loginWithMagicLink` returns a promise, enabling users to choose between using callbacks or promises to manage authentication outcomes."}
{"code": "# Auth Module\n\nThe Auth Module and its members are accessible on the Magic SDK instance by the `auth` property.\n\n```swift\nimport MagicSDK\n\nlet magic = Magic.shared\n\nmagic.auth;\nmagic.auth.loginWithMagicLink;\n```\n\n", "explanation": "**Summary**\n\nThis block introduces the Auth Module, a part of the Magic SDK, which is accessible via the `auth` property of a Magic SDK instance. It provides a concise example of how to access the Auth Module and its `loginWithMagicLink` method in Swift.", "metadata": {"repo": "magiclabs/documentation", "file": "client-sdk/ios/sdk/auth-module/README.md", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "Based on the provided code block summary, here's a concise and holistic summary of the 'client-sdk/ios/sdk/auth-module/README.md' file:\n\nThe Auth Module is a part of the Magic SDK that provides authentication functionality. It is accessible through a Magic SDK instance's `auth` property and offers methods such as `loginWithMagicLink`. This module can be used in Swift to facilitate user authentication in iOS applications."}
{"code": "---\ndescription: >-\n  Authenticate a user passwordlessly using a \"magic link\" sent to the specified\n  user's email address.\n---\n\n# loginWithMagicLink\n\n### **Public Methods**\n\n| Methods |\n| :--- |\n| **loginWithMagicLink**\\( \\_ configuration: LoginWithMagicLinkConfiguration, response: \\(\\_ resp: Response&lt;String&gt;\\) -&gt; Void \\) |\n| **loginWithMagicLink**\\(\\_ configuration: LoginWithMagicLinkConfiguration\\) -&gt; Promise &lt;String&gt; |\n\n### Returns\n\n`Promise<string | null>`: The promise resolves upon authentication request success and rejects with a specific error code if the request fails. The resolved value is a Decentralized ID token with a default 15-minute lifespan.\n\n### Example\n\n{% tabs %}\n{% tab title=\"Closure\" %}\n```swift\nimport MagicSDK\n\nclass LoginViewController: UIViewController {\n\n    @IBOutlet weak var emailInput: UITextField!\n    let magic = Magic.shared\n    \n    @IBAction func login() {\n        guard let magic = magic else { return }\n        guard let email = self.emailInput.text else { return }", "explanation": "**Authentication Block Summary**\n\nThe `loginWithMagicLink` block authenticates a user using a passwordless \"magic link\" sent to their email address. It takes in a configuration object and returns a Promise that resolves to a Decentralized ID token with a 15-minute lifespan upon successful authentication. The block can be used in two ways: with a response callback or as a Promise.", "metadata": {"repo": "magiclabs/documentation", "file": "client-sdk/ios/sdk/auth-module/loginwithmagiclink.md", "chunk_number": 1, "total_chunks": 3}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "**Client SDK iOS Auth Module: Login with Magic Link**\n\nThe `loginWithMagicLink` module enables passwordless login for users via a magic link sent to their email address. It takes in a user's email address and a configuration object, which includes an optional parameter to display a pending UI (default: true). The module can be implemented in two ways: using a callback or as a Promise. Upon successful login, it returns a Decentralized ID (DID) token with a 15-minute lifespan."}
{"code": "        \n        let configuration = LoginWithMagicLinkConfiguration(email: email)\n        \n        magic.auth.loginWithMagicLink(configuration, response: { response in \n            guard let token = response.result \n                else { return print(\"Error:\", response.error.debugDescription) }\n            print(\"Result\", token)\n        })\n    }\n}\n```\n{% endtab %}\n\n{% tab title=\"Promise\" %}\n```swift\nimport MagicSDK\n\nclass LoginViewController: UIViewController {\n\n    @IBOutlet weak var emailInput: UITextField!\n    let magic = Magic.shared\n    \n    @IBAction func login() {\n        guard let magic = magic else { return }\n        \n        let configuration = LoginWithMagicLinkConfiguration(email: self.emailInput.text!)\n        \n        magic.auth.loginWithMagicLink(configuration).done({ result in \n            print(result) // DIDToken\n        }).catch({\n            print(error) // handle Error\n        })\n    }\n}\n```\n{% endtab %}\n{% endtabs %}\n\n### Associated Class\n", "explanation": "**Summary:**\n\nThis block of code is used to implement a \"login with magic link\" functionality using the Magic SDK. It takes an email as input, sends a magic link to the user's email, and then logs the user in upon successful redemption of the link. The code handles the response, extracting a DIDToken upon success or printing an error message upon failure. There are two implementation examples: one using a callback and the other using a promise.", "metadata": {"repo": "magiclabs/documentation", "file": "client-sdk/ios/sdk/auth-module/loginwithmagiclink.md", "chunk_number": 2, "total_chunks": 3}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "**Client SDK iOS Auth Module: Login with Magic Link**\n\nThe `loginWithMagicLink` module enables passwordless login for users via a magic link sent to their email address. It takes in a user's email address and a configuration object, which includes an optional parameter to display a pending UI (default: true). The module can be implemented in two ways: using a callback or as a Promise. Upon successful login, it returns a Decentralized ID (DID) token with a 15-minute lifespan."}
{"code": "`LoginWithMagicLinkConfiguration(showUI: Bool = true, email: String)`\n\n* `email`  The user email to log in with.\n* `showUI` If `true`, show an out-of-the-box pending UI while the request is in flight.\n\n", "explanation": "This block configures a magic link login session. It takes a required user email and an optional parameter to display a pending UI (default: true) while the login request is being processed.", "metadata": {"repo": "magiclabs/documentation", "file": "client-sdk/ios/sdk/auth-module/loginwithmagiclink.md", "chunk_number": 3, "total_chunks": 3}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "**Client SDK iOS Auth Module: Login with Magic Link**\n\nThe `loginWithMagicLink` module enables passwordless login for users via a magic link sent to their email address. It takes in a user's email address and a configuration object, which includes an optional parameter to display a pending UI (default: true). The module can be implemented in two ways: using a callback or as a Promise. Upon successful login, it returns a Decentralized ID (DID) token with a 15-minute lifespan."}
{"code": "---\ndescription: Configure and construct your Magic SDK instance.\n---\n\n# Constructor\n\n### Magic\n\n| Public constructors |  |\n| :--- | :--- |\n| **Magic**\\(apiKey: String\\) | Construct a Magic instance with **publishable** API Key retrieved from the [Magic Dashboard](https://dashboard.magic.link) |\n| **Magic**\\(apiKey: String, network: EthNetwork\\) | Construct a Magic instance with publishable Key and Ethereum network  |\n| **Magic**\\(apiKey: String, customNode: CustomNodeConfiguration\\) | Construct a Magic instance with publishable Key and Custom Node configuration  |\n\n### Example\n\nIn `AppDelegate`\n\n```swift\nimport MagicSDK\nimport UIKit\n\n@UIApplicationMain\nfunc application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {\n\n    // assign the newly created Magic instance to shared property\n    // Test key defaults to \"rinkeby\", live key defaults to \"mainnet\"\n    Magic.shared = Magic(\"YOUR_PUBLISHABLE_API_KEY\");\n    \n    return true\n}\n```\n\n", "explanation": "**Purpose and Functionality:**\nThis block describes the constructor for a Magic SDK instance in Swift. It allows users to create an instance using a publishable API key, optionally specifying an Ethereum network or custom node configuration. The instance can then be assigned to a shared property for use within an application.", "metadata": {"repo": "magiclabs/documentation", "file": "client-sdk/ios/sdk/constructor.md", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "The 'constructor.md' file in the 'client-sdk/ios/sdk' directory outlines the creation process for a Magic SDK instance in Swift. It enables users to initialize an instance with a publishable API key, offering optional configuration for Ethereum networks or custom nodes, and allowing assignment to a shared property for app-wide usage."}
{"code": "# User Module\n\nThe User Module and its members are accessible on the Magic SDK instance by the `user` property.\n\n```typescript\nimport MagicSDK\n\nlet magic = Magic.shared\n\nmagic.user\nmagic.user.getIdToken\nmagic.user.generateIdToken\nmagic.user.getMetadata\nmagic.user.updateEmail\nmagic.user.isLoggedIn\nmagic.user.logout\n```\n\n", "explanation": "**User Module Summary**\n\nThe User Module, accessible via the `user` property of the Magic SDK instance, provides functionality for managing user authentication and data. It includes methods for:\n\n- Retrieving user ID tokens\n- Generating new ID tokens\n- Fetching user metadata\n- Updating user email\n- Checking login status\n- Logging out the user", "metadata": {"repo": "magiclabs/documentation", "file": "client-sdk/ios/sdk/user-module/README.md", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "**User Module Overview**\n\nThe User Module is a component of the Magic SDK for iOS, accessible through the `user` property. It provides functionality for managing user authentication and data, enabling developers to:\n\n- Authenticate users and manage ID tokens\n- Fetch and update user metadata\n- Check login status and perform logout operations\n\nThis module offers a range of methods for seamless user authentication and data management."}
{"code": "---\ndescription: Generates a Decentralized Id Token with optional serialized data.\n---\n\n# generateIdToken\n\n### **Public Methods**\n\n| Methods |\n| :--- |\n| **generateIdToken**\\( \\_ configuration: GenerateIdTokenConfiguration, response: \\(\\_ resp: Response&lt;String&gt;\\) ~~_-_~~&gt; Void \\) |\n| **generateIdToken**\\(\\_ configuration: GenerateIdTokenConfiguration\\) -&gt; Promise &lt;String&gt; |\n\n### Returns\n\n`Promise<String>`: Base64-encoded string representation of a JSON tuple representing `[proof, claim]` \n\n### Example\n\n```swift\nimport MagicSDK\n\nclass MagicViewController: UIViewController {\n\n    let magic = Magic.shared\n    \n    func generateIdToken() {\n        guard let magic = magic else { return }\n        \n        // Assuming user is logged in \n        let configuration = GenerateIdTokenConfiguration(lifespan: 900, attachment: \"none\")\n        \n        magic.user.generateIdToken(configuration, response: { response in\n            guard let token = response.result ", "explanation": "This block generates a Decentralized Id Token, optionally including serialized data. The `generateIdToken` function takes a configuration object and returns a base64-encoded string representing a JSON tuple containing a proof and a claim.", "metadata": {"repo": "magiclabs/documentation", "file": "client-sdk/ios/sdk/user-module/generateidtoken.md", "chunk_number": 1, "total_chunks": 2}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "The 'generateidtoken.md' file provides documentation for generating a Decentralized Id Token in the iOS SDK's user module. It covers the `generateIdToken` function, which takes a `GenerateIdTokenConfiguration` object as input and returns a base64-encoded string containing a proof and a claim. The configuration object allows setting the token's validity duration (default: 15 minutes) and embedding a serializable data signature (default: \"none\"). The code snippet demonstrates error handling and successful result printing in Swift."}
{"code": "                else { return print(\"Error:\", response.error.debugDescription) }\n            print(\"Result\", token)\n        })\n    }\n}\n```\n\n### **Associated Class**\n\n`GenerateIdTokenConfiguration(lifespan: Int = 900, attachment: String = 'none')`\n\n* `lifespan` \\(Number\\) : will set the lifespan of the generated token. Defaults to 900s \\(15 mins\\)\n* `attachment` \\(String\\) : will set a signature of serialized data in the generated token. Defaults to `\"none\"`\n\n", "explanation": "This block is a code snippet in Swift that:\n\n1. Handles an error case by printing an error message with a debug description.\n2. Prints a successful result with an ID token.\n\nThe associated class, `GenerateIdTokenConfiguration`, is used to configure the ID token generation process with two parameters:\n- `lifespan`: sets the token's validity duration (default: 15 minutes)\n- `attachment`: embeds a serializable data signature in the token (default: \"none\")", "metadata": {"repo": "magiclabs/documentation", "file": "client-sdk/ios/sdk/user-module/generateidtoken.md", "chunk_number": 2, "total_chunks": 2}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "The 'generateidtoken.md' file provides documentation for generating a Decentralized Id Token in the iOS SDK's user module. It covers the `generateIdToken` function, which takes a `GenerateIdTokenConfiguration` object as input and returns a base64-encoded string containing a proof and a claim. The configuration object allows setting the token's validity duration (default: 15 minutes) and embedding a serializable data signature (default: \"none\"). The code snippet demonstrates error handling and successful result printing in Swift."}
{"code": "---\ndescription: >-\n  Generates a Decentralized Id Token which acts as a proof of authentication to\n  resource servers.\n---\n\n# getIdToken\n\n### **Public Methods**\n\n| Methods |\n| :--- |\n| **getIdToken**\\( \\_ configuration: GenerateIdTokenConfiguration? = nil, response: \\(\\_ resp: Response&lt;String&gt;\\) ~~_-_~~&gt; Void \\) |\n| **getIdToken**\\(\\_ configuration: GenerateIdTokenConfiguration? = nil\\) -&gt; Promise &lt;String&gt; |\n\n### Returns\n\n`Promise<String>`: Base64-encoded string representation of a JSON tuple representing `[proof, claim]`\n\n### Example\n\n```swift\nimport MagicSDK\n\nclass MagicViewController: UIViewController {\n\n    let magic = Magic.shared\n    \n    func getIdToken() {\n        guard let magic = magic else { return }\n        \n        // Assuming user is logged in \n        let configuration = GetIdTokenConfiguration(lifespan: 900)\n        \n        magic.user.getIdToken(configuration, response: { response in\n            guard let token = response.result ", "explanation": "**Purpose:** This block is used to generate a Decentralized Id Token, a proof of authentication for resource servers.\n\n**Functionality:** The `getIdToken` method generates a base64-encoded JSON tuple representing the proof and claim. It takes an optional `configuration` parameter and returns a `Promise<String>` with the token. An example usage is demonstrated in a Swift code snippet, where the `getIdToken` method is called with a custom configuration to set the token's lifespan.", "metadata": {"repo": "magiclabs/documentation", "file": "client-sdk/ios/sdk/user-module/getidtoken.md", "chunk_number": 1, "total_chunks": 2}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "**Client SDK - iOS SDK User Module - Get ID Token Summary**\n\nThe `getIdToken` method in the iOS client SDK's user module generates a Decentralized Id Token, a proof of authentication for resource servers. It takes an optional `configuration` parameter, allowing users to customize the token's lifespan (defaults to 15 minutes or 900 seconds), and returns a `Promise<String>` containing the base64-encoded JSON tuple representing the proof and claim. The method is demonstrated in a Swift code snippet, showcasing its usage and error handling capabilities."}
{"code": "                else { return print(response.error.debugDescription) }\n            print(token)\n        })\n    }\n}\n```\n\n### Associated Class\n\n`GetIdTokenConfiguration(lifespan: Int = 900)` \n\n* `lifespan?` \\(Int\\): will set the lifespan of the generated token. Defaults to 900s \\(15 mins\\)\n\n\n\n", "explanation": "**Summary**\n\nThis code block retrieves an ID token, handles any errors by printing the error description, and prints the obtained token if successful. The associated `GetIdTokenConfiguration` class configures the lifespan of the generated token, defaulting to 15 minutes (900 seconds).", "metadata": {"repo": "magiclabs/documentation", "file": "client-sdk/ios/sdk/user-module/getidtoken.md", "chunk_number": 2, "total_chunks": 2}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "**Client SDK - iOS SDK User Module - Get ID Token Summary**\n\nThe `getIdToken` method in the iOS client SDK's user module generates a Decentralized Id Token, a proof of authentication for resource servers. It takes an optional `configuration` parameter, allowing users to customize the token's lifespan (defaults to 15 minutes or 900 seconds), and returns a `Promise<String>` containing the base64-encoded JSON tuple representing the proof and claim. The method is demonstrated in a Swift code snippet, showcasing its usage and error handling capabilities."}
{"code": "---\ndescription: Retrieves information for the authenticated user.\n---\n\n# getMetadata\n\n### **Public Methods**\n\n| Methods |\n| :--- |\n| **getMetadata**\\( response: \\(\\_ resp: Response&lt;String&gt;\\) ~~_-_~~&gt; Void \\) |\n| **getMetadata**\\(\\) -&gt; Promise &lt;String&gt; |\n\n### Returns\n\n`UserMetadata`: containing the issuer, email and cryptographic [public address ](https://support.blockchain.com/hc/en-us/articles/360000951966-Public-and-private-keys)of the authenticated user.\n\n```swift\npublic struct UserMetadata: MagicResponse {\n    public let issuer: String?\n    public let publicAddress: String?\n    public let email: String?\n}\n```\n\n* `issuer` : The Decentralized ID of the user.  In server-side use-cases, we recommend this value to be used as the user ID in your own tables.\n* `email` : Email address of the authenticated user.\n* `publicAddress`: The authenticated user's public address \\(a.k.a.: public key\\). Currently, this value is associated with the Ethereum blockchain. \n\n### Example\n\n```swift\nimport MagicSDK\n", "explanation": "**Purpose and Functionality:**\n\nThis block retrieves information (issuer, email, and public address) for the currently authenticated user through the `getMetadata` method, which can be used as a callback or with a returned Promise.", "metadata": {"repo": "magiclabs/documentation", "file": "client-sdk/ios/sdk/user-module/getmetadata.md", "chunk_number": 1, "total_chunks": 2}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "The file 'client-sdk/ios/sdk/user-module/getmetadata.md' provides documentation for retrieving user metadata using the `getMetadata` method in the Magic SDK for iOS. This method can be used as a callback or with a returned Promise to asynchronously fetch and return the currently authenticated user's information, including the issuer, email, and public address, assuming a prior successful user login."}
{"code": "class MagicViewController: UIViewController {\n\n    let magic = Magic.shared\n    \n    func getMetadata() {\n        guard let magic = magic else { return }\n        \n        // Assuming user is logged in \n        magic.user.getMetadata(response: { response in\n            guard let metadata = response.result\n                else { return print(\"Error:\", response.error.debugDescription) }\n            print(\"Result\", metadata)\n        })\n    }\n}\n```\n\n", "explanation": "This Swift code block represents a `MagicViewController` that interacts with a shared instance of `Magic`. The `getMetadata` function retrieves user metadata asynchronously, printing the result or an error message if the request fails, assuming the user is logged in.", "metadata": {"repo": "magiclabs/documentation", "file": "client-sdk/ios/sdk/user-module/getmetadata.md", "chunk_number": 2, "total_chunks": 2}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "The file 'client-sdk/ios/sdk/user-module/getmetadata.md' provides documentation for retrieving user metadata using the `getMetadata` method in the Magic SDK for iOS. This method can be used as a callback or with a returned Promise to asynchronously fetch and return the currently authenticated user's information, including the issuer, email, and public address, assuming a prior successful user login."}
{"code": "---\ndescription: Checks if a user is currently logged in to the Magic IOS SDK.\n---\n\n# isLoggedIn\n\n### **Public Methods**\n\n| Methods |\n| :--- |\n| **getMetadata**\\( response: \\(\\_ resp: Response&lt;Bool&gt;\\) ~~_-_~~&gt; Void\\) |\n| **getMetadata**\\(\\) -&gt; Promise &lt;Bool&gt; |\n\n### Returns\n\n`Promise<Bool>`\n\n### Example\n\n```swift\nimport MagicSDK\n\nclass MagicViewController: UIViewController {\n\n    let magic = Magic.shared\n    \n    func isLoggedIn() {\n        guard let magic = magic else { return }\n        \n        magic.user.isLoggedIn(response: { response in\n            guard let result = response.result \n                else { return print(\"Error:\", response.error.debugDescription) }\n            print(\"Result\", result)\n        })\n    }\n}\n```\n\n\n\n", "explanation": "**Purpose:** The `isLoggedIn` block checks if a user is currently logged in to the Magic IOS SDK.\n\n**Functionality:** It provides a method to fetch the user's login status, returning a `Promise<Bool>` indicating whether the user is logged in. The method can also take a response callback to handle the result asynchronously.", "metadata": {"repo": "magiclabs/documentation", "file": "client-sdk/ios/sdk/user-module/isloggedin.md", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "### isLoggedin.md Summary\n\nThe `isLoggedIn` module in the Magic IOS SDK is used to check the user's current login status. It provides a method that returns a `Promise<Bool>` indicating whether the user is logged in and also supports an asynchronous callback for result handling."}
{"code": "---\ndescription: Logs out the currently authenticated Magic user\n---\n\n# logout\n\n### **Public Methods**\n\n| Methods |\n| :--- |\n| **logout**\\( response: \\(\\_ resp: Response&lt;Bool&gt;\\) ~~_-_~~&gt; Void \\) |\n| **logout**\\(\\) -&gt; Promise &lt;Bool&gt; |\n\n### Returns\n\n`Promise<Bool>`\n\n### Example\n\n```swift\nimport MagicSDK\n\nclass MagicViewController: UIViewController {\n\n    let magic = Magic.shared\n    \n    func logout() {\n        guard let magic = magic else { return }\n        \n        // Assuming user is logged in \n        magic.user.logout(response: { response in\n            guard let result = response.result \n                else { return print(\"Error:\", response.error.debugDescription) }\n            print(\"Result\", result)\n        })\n    }\n}\n```\n\n", "explanation": "**Summary:**\n\nThis block logs out the currently authenticated Magic user. It provides two methods: `logout` with a callback and `logout` with a returned promise, both returning a boolean result.", "metadata": {"repo": "magiclabs/documentation", "file": "client-sdk/ios/sdk/user-module/logout.md", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "The 'client-sdk/ios/sdk/user-module/logout.md' file documents the user logout functionality for the iOS client SDK's user module. It provides a single method, `logout`, with both callback and promise variants, which logs out the currently authenticated Magic user and returns a boolean indicating the result of the operation."}
{"code": "---\ndescription: initiates the update email flow that allows a user to change to a new email\n---\n\n# updateEmail\n\n### **Public Methods**\n\n| Methods |\n| :--- |\n| updateEmail\\( \\_ configuration: UpdateEmailConfiguration, response: \\(\\_ resp: Response&lt;Bool&gt;\\) ~~_-_~~&gt; Void \\) |\n| updateEmail\\(\\_ configuration: UpdateEmailConfiguration\\) -&gt; Promise &lt;Bool&gt; |\n\n### Returns\n\n`Promise<Bool>`: The promise resolves with a true boolean value if update email is successful and rejects with a specific error code if the request fails. \n\n### Example\n\n```swift\nimport MagicSDK\n\nclass MagicViewController: UIViewController {\n\n    let magic = Magic.shared\n\n    // Initiates the flow to update a user's current email to a new one.\n    func updateEmail() {\n    \n        guard let magic = magic else { return }\n        \n        // Assuming user is logged in \n        let configuration = UpdateEmailConfiguration(email: \"new_user_email@example.com\")\n        magic.user.updateEmail(configuration, response: { response in", "explanation": "**Purpose and Functionality Summary:**\n\nThe `updateEmail` block initiates the process to change a user's current email to a new one, providing methods with callback and promise-based responses to handle the result.", "metadata": {"repo": "magiclabs/documentation", "file": "client-sdk/ios/sdk/user-module/updateemail.md", "chunk_number": 1, "total_chunks": 2}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "Here is a concise and holistic summary of the 'client-sdk/ios/sdk/user-module/updateemail.md' file:\n\nThe 'updateEmail' block is a Swift function that initiates the process of changing a user's current email to a new one. It uses asynchronous operations and provides callback and promise-based responses to handle the result.\n\nIt is configured using the `UpdateEmailConfiguration` class, which has two parameters:\n\n- `email`: The new email address to be updated\n- `showUI`: A boolean parameter (defaulting to true) that determines whether to show a pending UI while the update operation is in progress\n\nThe function handles the result of the operation, printing the result if successful and an error message if not."}
{"code": "            guard let result = response.result \n                else { return print(\"Error:\", response.error.debugDescription) }\n            print(\"Result\", result)\n        })\n    }\n}\n```\n\n### **Associated Class**\n\n`UpdateEmailConfiguration(showUI: Bool = true, email: String)`\n\n* `email`  The user email to update with.\n* `showUI` If `true`, show an out-of-the-box pending UI while the request is in flight.\n\n", "explanation": "### Summary\n\nThe provided code block appears to be written in Swift. \n\nThis block of code is a part of a closure (a closed block of code within another function) that handles the result of an asynchronous operation (response). \n\nIts purpose is to:\n- Check if the result of the operation is successful (not nil).\n- If successful, print the result. If not, print an error message with a debug description of the error.\n\n### Associated Class Summary\n\nThe associated class, `UpdateEmailConfiguration`, is likely a part of an API or a system that updates email configurations. \n\nIt has two parameters:\n- `email`: The new email address to be updated.\n- `showUI`: A boolean parameter (defaulting to true) that determines whether to show a pending UI while the update operation is in progress.", "metadata": {"repo": "magiclabs/documentation", "file": "client-sdk/ios/sdk/user-module/updateemail.md", "chunk_number": 2, "total_chunks": 2}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "Here is a concise and holistic summary of the 'client-sdk/ios/sdk/user-module/updateemail.md' file:\n\nThe 'updateEmail' block is a Swift function that initiates the process of changing a user's current email to a new one. It uses asynchronous operations and provides callback and promise-based responses to handle the result.\n\nIt is configured using the `UpdateEmailConfiguration` class, which has two parameters:\n\n- `email`: The new email address to be updated\n- `showUI`: A boolean parameter (defaulting to true) that determines whether to show a pending UI while the update operation is in progress\n\nThe function handles the result of the operation, printing the result if successful and an error message if not."}
{"code": "# React Native JavaScript\n\n## \ud83d\ude80 Welcome to the Magic React Native JS SDK\n\nThe Magic **React Native** JavaScript SDK is distributed **from the same NPM package as our**[ **Browser JavaScript SDK**](../browser-js/)**!** This is your entry-point to secure, passwordless authentication for your iOS or Android-based React Native app. This guide will cover some important topics for getting started with client-side APIs and to make the most of Magic's features.\n\n**\ud83d\udc49 Go to our** [**Getting Started**](get-started.md) **tutorial to begin your integration**\n\n{% hint style=\"info\" %}\nMagic can support both server-based or serverless web applications. It is up to the developers to implement the [Admin SDK](../../admin-sdk/node-js/) to validate the DID Token.\n{% endhint %}\n\n### Looking for a server-side API? Start with one of these:\n\n{% page-ref page=\"../../admin-sdk/node-js/\" %}\n\n{% page-ref page=\"../../admin-sdk/python/\" %}\n\n\n\n", "explanation": "**Purpose and Functionality:**\nThe Magic React Native JavaScript SDK provides a client-side entry-point for secure, passwordless authentication in iOS or Android-based React Native apps. It allows developers to integrate passwordless authentication using client-side APIs and DID tokens, which must be validated using the Admin SDK on the server-side.", "metadata": {"repo": "magiclabs/documentation", "file": "client-sdk/react-native/README.md", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "Here is a concise and to-the-point summary of the 'client-sdk/react-native/README.md' file:\n\nThe Magic React Native JavaScript SDK enables React Native apps to implement secure, passwordless authentication. It provides client-side APIs for authentication and DID token generation, which require server-side validation using the Admin SDK."}
{"code": "---\ndescription: Getting started with the Magic React Native JavaScript SDK\n---\n\n# \ud83d\ude80 Get Started\n\n## \ud83d\udce6 Installation\n\n{% hint style=\"warning\" %}\nAs of **`magic-sdk@2.0.0`**, React Native bindings are published as a separate NPM package.\n{% endhint %}\n\n{% hint style=\"warning\" %}\nAs of  **`@magic-sdk/react-native@2.0.0`**, the sub-dependency`react-native-webview` is removed from the package dependencies and required as a peer dependency to avoid IOS WebView module collision. For more details, please check [here](https://github.com/react-native-community/react-native-webview/issues/373).\n{% endhint %}\n\n{% tabs %}\n{% tab title=\"NPM\" %}\n```bash\nnpm install --save @magic-sdk/react-native\n\n# Ensure the required `peerDependencies` are installed\nnpm install --save react-native-webview@^8.0.0\n```\n{% endtab %}\n\n{% tab title=\"Yarn\" %}\n```bash\nyarn add @magic-sdk/react-native\n\n# Ensure the required `peerDependencies` are installed\nyarn add react-native-webview@^8.0.0\n```\n{% endtab %}\n{% endtabs %}\n\n## \u26a1\ufe0f Creating an SDK Instance\n", "explanation": "This block provides instructions on how to get started with the Magic React Native JavaScript SDK. It covers the installation process using both NPM and Yarn, referencing the specific versions required for successful installation.", "metadata": {"repo": "magiclabs/documentation", "file": "client-sdk/react-native/get-started.md", "chunk_number": 1, "total_chunks": 3}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "# Getting Started with Magic React Native SDK\n\nThe `client-sdk/react-native/get-started.md` file provides a comprehensive guide on integrating the Magic React Native JavaScript SDK into a React Native application.\n\n## Installation\nTo get started, install the SDK using either NPM or Yarn, ensuring you have the required versions for successful installation.\n\n## Initialization\nInitialize the Magic SDK in your React Native application using either ES Modules/TypeScript or CommonJS. The `<Relayer>` component must be rendered to enable communication between the Magic iframe and the React Native app.\n\n## Ethereum/Web3 Integration\nTo use the React Native SDK with Ethereum/Web3, import required libraries and configure setup to resolve potential errors with Crypto and Web3.js.\n\nBy following these steps, you can successfully set up and integrate the Magic React Native JavaScript SDK into your application."}
{"code": "{% tabs %}\n{% tab title=\"ES Modules/TypeScript\" %}\n```typescript\nimport { Magic } from '@magic-sdk/react-native';\n\nconst m = new Magic('API_KEY'); // \u2728\n```\n{% endtab %}\n\n{% tab title=\"CommonJS\" %}\n```typescript\nconst { Magic } = require('@magic-sdk/react-native');\n\nconst m = new Magic('API_KEY'); // \u2728\n```\n{% endtab %}\n{% endtabs %}\n\n{% hint style=\"info\" %}\nExamples for the React Native JavaScript SDK use the ES Module/TypeScript pattern by default.\n{% endhint %}\n\n## \ud83d\uddbc Rendering Magic\n\nTo facilitate events between the Magic `<iframe>` context and your React Native application, a React component is exposed on your Magic instance: `<Relayer>`.\n\n**`<Relayer>` must be rendered into your application before Magic methods will resolve.**\n\n```typescript\nfunction App() {\n  return (\n    <View>\n      {/* Remember to render the `Relayer` component into your app! */}\n      <m.Relayer />\n    </View>\n  );\n}\n```\n\n{% hint style=\"success\" %}\nAPIs from [**Browser JS**](../browser-js/) are also available in the React Native bundle.\n{% endhint %}\n", "explanation": "**Summary:**\n\nThis code block demonstrates how to initialize the Magic SDK in a React Native application using either ES Modules/TypeScript or CommonJS. It then explains the purpose and functionality of the `<Relayer>` component, which must be rendered in the application to enable communication between the Magic iframe and the React Native app.", "metadata": {"repo": "magiclabs/documentation", "file": "client-sdk/react-native/get-started.md", "chunk_number": 2, "total_chunks": 3}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "# Getting Started with Magic React Native SDK\n\nThe `client-sdk/react-native/get-started.md` file provides a comprehensive guide on integrating the Magic React Native JavaScript SDK into a React Native application.\n\n## Installation\nTo get started, install the SDK using either NPM or Yarn, ensuring you have the required versions for successful installation.\n\n## Initialization\nInitialize the Magic SDK in your React Native application using either ES Modules/TypeScript or CommonJS. The `<Relayer>` component must be rendered to enable communication between the Magic iframe and the React Native app.\n\n## Ethereum/Web3 Integration\nTo use the React Native SDK with Ethereum/Web3, import required libraries and configure setup to resolve potential errors with Crypto and Web3.js.\n\nBy following these steps, you can successfully set up and integrate the Magic React Native JavaScript SDK into your application."}
{"code": "## \u26d3 Usage With Ethereum/Web3\n\nAs with the Browser JS SDK, the React Native SDK can be used with Ethereum via **Web3** or **Ethers JS**. There's just one \"_gotcha\"_ to be aware of: **`@magic-sdk/react-native`** must be imported **before `web3`** \\(this restriction does not apply to `ethers`\\). For example:\n\n```typescript\n// \ud83d\udeab Bad!\nimport Web3 from 'web3';\nimport { Magic } from '@magic-sdk/react-native';\n\n// \u2705 Good!\nimport { Magic } from '@magic-sdk/react-native';\nimport Web3 from 'web3';\n```\n\n## Setup web3.js\n\nIn case you encounter the error below\n\n{% hint style=\"danger\" %}\n\"Crypto\" could not be found within the project\n{% endhint %}\n\n```text\nnpm install --save node-libs-browser\n```\n\nCreate a file called `metro.config.js` at the root of the project\n\n```javascript\nmodule.exports = {\n    resolver: {\n    \n        extraNodeModules: require('node-libs-browser')\n    }\n};\n```\n\n\u0000Done.\n\n\ud83d\udc49 **Learn more about integrating** [**Ethereum**](../../advanced/ethereum/)\\*\\*\\*\\*\n\n", "explanation": "**Purpose and Functionality:**\n\nThis block provides instructions for using the React Native SDK with Ethereum/Web3, including requirements for importing libraries and setup configurations to resolve potential errors with Crypto and Web3.js.", "metadata": {"repo": "magiclabs/documentation", "file": "client-sdk/react-native/get-started.md", "chunk_number": 3, "total_chunks": 3}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "# Getting Started with Magic React Native SDK\n\nThe `client-sdk/react-native/get-started.md` file provides a comprehensive guide on integrating the Magic React Native JavaScript SDK into a React Native application.\n\n## Installation\nTo get started, install the SDK using either NPM or Yarn, ensuring you have the required versions for successful installation.\n\n## Initialization\nInitialize the Magic SDK in your React Native application using either ES Modules/TypeScript or CommonJS. The `<Relayer>` component must be rendered to enable communication between the Magic iframe and the React Native app.\n\n## Ethereum/Web3 Integration\nTo use the React Native SDK with Ethereum/Web3, import required libraries and configure setup to resolve potential errors with Crypto and Web3.js.\n\nBy following these steps, you can successfully set up and integrate the Magic React Native JavaScript SDK into your application."}
{"code": "---\ndescription: Learn how to customize the Magic user onboarding experience.\n---\n\n# \ud83c\udfa8 Customization\n\nMagic includes a default pending modal UI to save developers implementation time and to get passwordless login working ASAP. But we also allow developers to have full customizability of their user on-boarding experience.\n\n![Default branding](.gitbook/assets/screen-shot-2020-06-09-at-7.20.27-pm.png)\n\n### Customize the UI & email\n\nYou can customize the logo and colors of the Magic link email, confirmation screen, and pending modal on the **Branding** tab in the [**Magic Dashboard**](https://dashboard.magic.link/)**:**\n\n![App with customized branding](.gitbook/assets/screen-shot-2020-06-09-at-7.17.56-pm.png)\n\n### Custom Email HTML Template\n\n_\\(You'll be able to set a custom html template for the Magic link email soon!\\)_  \n\n\n### Bring your own UI\n\nTo completely hide away our Pending Modal UI, you can simply pass `false` to the `showUI` attribute while initiating the Magic link login.\n\n```javascript", "explanation": "**Summary:**\n\nThis block describes the customization options for Magic's user onboarding experience. It allows developers to personalize the UI and email templates, including the logo and colors, through the Magic Dashboard. Additionally, an option to completely hide Magic's default Pending Modal UI is available by passing `false` to the `showUI` attribute.", "metadata": {"repo": "magiclabs/documentation", "file": "customization.md", "chunk_number": 1, "total_chunks": 2}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "The 'customization.md' file outlines the customization options for Magic's user onboarding experience. It provides developers with the ability to personalize UI elements, such as logos and colors, through the Magic Dashboard. Additionally, the file details how to hide the default Pending Modal UI by setting `showUI` to `false`, and integrates with the Magic SDK for user authentication, specifically Magic Link authentication via email."}
{"code": "import { Magic } from 'magic-sdk';\nconst magic = new Magic(\"YOUR_PUBLIC_API_KEY\");\n\nawait magic.loginWithMagicLink({\n    email,\n    showUI: false // Default \"true\", setting \"false\" will hide loading screen\n});\n```\n\n \n\n", "explanation": "**Purpose:** Authenticate a user using Magic Link with the Magic SDK.\n\n**Functionality:** This code block initializes the Magic SDK with a public API key and uses the `loginWithMagicLink` method to authenticate a user via email. The `showUI` parameter is set to `false`, which hides the loading screen during the authentication process.", "metadata": {"repo": "magiclabs/documentation", "file": "customization.md", "chunk_number": 2, "total_chunks": 2}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "The 'customization.md' file outlines the customization options for Magic's user onboarding experience. It provides developers with the ability to personalize UI elements, such as logos and colors, through the Magic Dashboard. Additionally, the file details how to hide the default Pending Modal UI by setting `showUI` to `false`, and integrates with the Magic SDK for user authentication, specifically Magic Link authentication via email."}
{"code": "---\ndescription: >-\n  Decentralized ID (DID) tokens are used as cryptographically-generated proofs\n  that are used to manage user access to your application's resource server.\n---\n\n# \ud83d\udc64 Decentralized ID\n\n## What is a Decentralized ID \\(DID\\) Token?\n\nBy adapting W3C's [Decentralized Identifiers](https://w3c-ccg.github.io/did-primer/) \\(DID\\) protocol, the **DID token** created by the Magic client-side SDK \\(see [`getIdToken`](client-sdk/browser-js/sdk/user-module/getidtoken.md)\\) leverages the [Ethereum](https://ethereum.org/) blockchain and [elliptic curve cryptography](https://en.wikipedia.org/wiki/Elliptic-curve_cryptography) to generate  verifiable proofs of identity and authorization. These proofs are encoded in a lightweight, digital signature that can be shared between client and server to manage permissions; protect routes and resources, or authenticate users.\n\nThe DID token is encoded as a Base64 JSON string tuple representing **`[proof, claim]`**:\n", "explanation": "**Decentralized ID (DID) Token**\n\nThe DID token is a cryptographically-generated proof used to manage user access to application resources. It leverages the Ethereum blockchain and elliptic curve cryptography to provide verifiable identity and authorization proofs, encoded in a lightweight digital signature (Base64 JSON string) representing a proof-claim tuple.", "metadata": {"repo": "magiclabs/documentation", "file": "decentralized-id.md", "chunk_number": 1, "total_chunks": 4}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "**Decentralized ID (DID) Token Summary**\n\nA Decentralized ID (DID) token is a digitally signed authentication token that leverages the Ethereum blockchain for verifiable identity and authorization. The token consists of four components: the user's Magic entity ID (`sub`), project space DID (`aud`), arbitrary encrypted data (`add`), and a unique token identifier (`tid`). \n\nThe token creation process involves signing user-access data with Ethereum's `personal_sign` method to generate a digital signature, then combining it with the user's access data and encoding it as a base64 JSON string. This encoded token (`DIDToken`) contains both the user's access data and proof of validity, ensuring secure authentication and claims verification."}
{"code": "* `proof`: A digital signature that proves the validity of the given `claim`.\n* `claim`: Unsigned data the user asserts. This should equal the `proof` after Elliptic Curve recovery.\n\n```javascript\nconst claim = JSON.stringify({ ... }); // Data representing the user's access\nconst proof = sign(claim); // Sign data with Ethereum's `personal_sign` method\nconst DIDToken = btoa(JSON.stringify([proof, claim]));\n```\n\n## Decentralized ID Token Specification\n\n| Key | Description |\n| :--- | :--- |\n| `iat` | Issued at timestamp \\(UTC in seconds\\). |\n| `ext` | Expiration timestamp \\(UTC in seconds\\). |\n| `nbf` | Not valid before timestamp \\(UTC in seconds\\). |\n| `iss` | Issuer \\(the signer, the \"user\"\\). This field is represented as a [Decentralized Identifier](https://w3c-ccg.github.io/did-primer/#the-format-of-a-did) populated with the user's Ethereum public key. |", "explanation": "**DID Token Creation**\n\nThis block creates a Decentralized ID (DID) token, a digital signature-based authentication token. It:\n\n1. Signs user-access data (`claim`) with Ethereum's `personal_sign` method to create a digital signature (`proof`).\n2. Combines the `proof` and `claim` into an array, converts it to a JSON string, and encodes it to a base64 string (`DIDToken`).\n\nThe `DIDToken` contains the user's access data and proof of its validity, ensuring secure authentication and claims verification.", "metadata": {"repo": "magiclabs/documentation", "file": "decentralized-id.md", "chunk_number": 2, "total_chunks": 4}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "**Decentralized ID (DID) Token Summary**\n\nA Decentralized ID (DID) token is a digitally signed authentication token that leverages the Ethereum blockchain for verifiable identity and authorization. The token consists of four components: the user's Magic entity ID (`sub`), project space DID (`aud`), arbitrary encrypted data (`add`), and a unique token identifier (`tid`). \n\nThe token creation process involves signing user-access data with Ethereum's `personal_sign` method to generate a digital signature, then combining it with the user's access data and encoding it as a base64 JSON string. This encoded token (`DIDToken`) contains both the user's access data and proof of validity, ensuring secure authentication and claims verification."}
{"code": "| `sub` | The \"subject\" of the request. This field is currently populated with the user's _Magic entity ID_. Note: this is separate from the user's Ethereum public key. |\n| `aud` | Identifies the project space. This field is represented as a [Decentralized Identifier](https://w3c-ccg.github.io/did-primer/#the-format-of-a-did) populated with a UUID. In the future, this field will represent the _application's Magic entity ID._ |\n| `add` | An encrypted signature of arbitrary, serialized data. The usage of this field is up to the developer and use-case dependent. It's handy for validating information passed between client and server. _The  raw data must be known to the developer in order to recover the token!_ |\n| `tid` | Unique token identifier. |\n\n### Generating a Decentralized ID Token \\(Pseudo-code\\)\n\n```typescript\n// Construct the user's claim\nconst claim = JSON.stringify({\n    iat: Math.floor(Date.now() / 1000),\n    ext: Math.floor(Date.now() / 1000) + lifespan,", "explanation": "**Summary:**\n\nThis block describes the structure and generation of a Decentralized ID Token, used for authentication and data validation. The token has four components:\n\n1. `sub` (subject): stores the user's Magic entity ID.\n2. `aud` (audience): identifies the project space using a Decentralized Identifier (DID).\n3. `add` (additional data): stores an encrypted signature of arbitrary data.\n4. `tid` (token ID): a unique token identifier.\n\nA pseudo-code example is provided to generate the token claim, which includes the issued-at time (`iat`) and expiration time (`ext`).", "metadata": {"repo": "magiclabs/documentation", "file": "decentralized-id.md", "chunk_number": 3, "total_chunks": 4}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "**Decentralized ID (DID) Token Summary**\n\nA Decentralized ID (DID) token is a digitally signed authentication token that leverages the Ethereum blockchain for verifiable identity and authorization. The token consists of four components: the user's Magic entity ID (`sub`), project space DID (`aud`), arbitrary encrypted data (`add`), and a unique token identifier (`tid`). \n\nThe token creation process involves signing user-access data with Ethereum's `personal_sign` method to generate a digital signature, then combining it with the user's access data and encoding it as a base64 JSON string. This encoded token (`DIDToken`) contains both the user's access data and proof of validity, ensuring secure authentication and claims verification."}
{"code": "    iss: `did:ethr:${account.address}`,\n    sub: subject,\n    aud: `did:magic:${uuid()}`,\n    nbf: Math.floor(Date.now() / 1000),\n    tid: uuid(),\n});\n\n// Sign the claim with the user's private key\n// (this way the claim is verifiable and impossible to forge).\nconst proof = sign(claim);\n\n// Encode the DIDToken so it can be transported over HTTP.\nconst DIDToken = btoa(JSON.stringify([proof, claim]));\n```\n\n", "explanation": "This block generates and signs a Decentralized Identifier (DID) token, encoding it for HTTP transport. The token includes the user's Ethereum address, subject, and a unique identifier, and is signed with the user's private key to verify its authenticity.", "metadata": {"repo": "magiclabs/documentation", "file": "decentralized-id.md", "chunk_number": 4, "total_chunks": 4}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "**Decentralized ID (DID) Token Summary**\n\nA Decentralized ID (DID) token is a digitally signed authentication token that leverages the Ethereum blockchain for verifiable identity and authorization. The token consists of four components: the user's Magic entity ID (`sub`), project space DID (`aud`), arbitrary encrypted data (`add`), and a unique token identifier (`tid`). \n\nThe token creation process involves signing user-access data with Ethereum's `personal_sign` method to generate a digital signature, then combining it with the user's access data and encoding it as a base64 JSON string. This encoded token (`DIDToken`) contains both the user's access data and proof of validity, ensuring secure authentication and claims verification."}
{"code": "---\ndescription: Frequently Asked Questions.\n---\n\n# \ud83d\udcac FAQ\n\n{% hint style=\"info\" %}\nHave a question that isn't answered here? Reach out to [**support@magic.link**](mailto:support@magic.link).\n{% endhint %}\n\n## How resilient is magic link delivery? Will users lose access to my service if Magic goes down?\n\nOur platform team actively works to maintain and improve the stability and speed of our email delivery system. **We strive to ensure that magic links are delivered expediently and reliably at all times.**\n\nIn the unlikely event that Magic discontinues service in the future, users can **export their private key.** This is a key benefit of building on top of standardized public/private key cryptography. To ensure high availability and future-proofing, Magic is committed to pre-paying AWS infrastructure costs for several years so that our service runs _without interruption._\n\n## Is there an option for Phone/SMS magic links, too?\n", "explanation": "This block is a section of a FAQ (Frequently Asked Questions) page. It contains a heading, a link to the support team's email, and two questions with their respective answers, addressing the reliability and resilience of magic link delivery as well as the availability of phone/SMS magic links.", "metadata": {"repo": "magiclabs/documentation", "file": "faq.md", "chunk_number": 1, "total_chunks": 5}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "**Faq.md Summary**\n\nThe FAQ document addresses common questions about the reliability and security of magic link delivery. The system supports only email-based magic links due to security concerns with SIM swapping. In case users lose access to their email, they need to contact their email provider for recovery.\n\nThe document also discusses the security of magic links, highlighting that they are passwordless and can only be used from the device that initiated the request. This feature protects users' accounts even if the email is lost or stolen, mitigating phishing attacks.\n\nAdditionally, the FAQ covers:\n\n- No whitelisting of domains for Publishable API Keys\n- No custom Terms of Service text for magic link emails (upcoming feature)\n- Authentication session duration is up to 7 days; alternative solutions available for custom backends using DID tokens."}
{"code": "Currently, we only offer email-based magic links. Due to [SIM swapping vulnerabilities](https://en.wikipedia.org/wiki/SIM_swap_scam), we do not support a Phone or SMS-based delivery mechanism. We understand this flexibility matters to you and your users, so we are constantly iterating and looking for ways to support Phone/SMS magic links in a secure way.\n\n## What if a user loses access to their email?\n\nIf a user loses access to their email account, they need to contact their email service provider \\(i.e.: Gmail, Microsoft Outlook, iCloud Mail\\) and follow steps for account recovery.\n\n## What if someone tries to phish users by sending a fraudulent magic link email?\n", "explanation": "This block of text explains the current limitations and security considerations of an email-based magic link system. \n\n- The system only supports email-based magic links due to SIM swapping vulnerabilities. \n- If a user loses access to their email, they must contact their email provider to recover their account. \n- Additionally, the text addresses a potential phishing risk where users may receive fake magic link emails.", "metadata": {"repo": "magiclabs/documentation", "file": "faq.md", "chunk_number": 2, "total_chunks": 5}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "**Faq.md Summary**\n\nThe FAQ document addresses common questions about the reliability and security of magic link delivery. The system supports only email-based magic links due to security concerns with SIM swapping. In case users lose access to their email, they need to contact their email provider for recovery.\n\nThe document also discusses the security of magic links, highlighting that they are passwordless and can only be used from the device that initiated the request. This feature protects users' accounts even if the email is lost or stolen, mitigating phishing attacks.\n\nAdditionally, the FAQ covers:\n\n- No whitelisting of domains for Publishable API Keys\n- No custom Terms of Service text for magic link emails (upcoming feature)\n- Authentication session duration is up to 7 days; alternative solutions available for custom backends using DID tokens."}
{"code": "[Phishing attacks](https://en.wikipedia.org/wiki/Phishing) are an ongoing problem that exists in our industry today. However, this doesn't mean we are sticking to the status quo; we are actively working on ways to mitigate this. We have minimized the attack vectors significantly by going passwordless\u2014**no credentials are passed around!** Compared to traditional password-based solutions, Magic eliminates the case where users can be phished of compromising account information.\n\nPlus, if a magic link email is lost or stolen \\(or even somehow compromised in transit\\), a user's account is safe! The token included in the magic link email is only privileged to verify a login request _from the device and/or browsing context that initiated the request._ An attacker would require physical access to the user's device _and_ unencrypted email inbox to be malicious.\n", "explanation": "This text explains how \"Magic\" mitigates phishing attacks by using a passwordless system, eliminating the risk of users being phished for account information. Magic links are secure because they can only be used from the device and context that initiated the request, protecting users' accounts even if the email is lost or stolen.", "metadata": {"repo": "magiclabs/documentation", "file": "faq.md", "chunk_number": 3, "total_chunks": 5}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "**Faq.md Summary**\n\nThe FAQ document addresses common questions about the reliability and security of magic link delivery. The system supports only email-based magic links due to security concerns with SIM swapping. In case users lose access to their email, they need to contact their email provider for recovery.\n\nThe document also discusses the security of magic links, highlighting that they are passwordless and can only be used from the device that initiated the request. This feature protects users' accounts even if the email is lost or stolen, mitigating phishing attacks.\n\nAdditionally, the FAQ covers:\n\n- No whitelisting of domains for Publishable API Keys\n- No custom Terms of Service text for magic link emails (upcoming feature)\n- Authentication session duration is up to 7 days; alternative solutions available for custom backends using DID tokens."}
{"code": "However, a motivated attacker could create an identical replica of your application, which is a known phishing pattern that occurs today. For this case, we recommend developers to whitelist **specific domains for their Publishable API Keys on the** [**Magic Dashboard**](https://dashboard.magic.link) so that illegitimate applications cannot forge requests through the Magic SDKs.\n\n## Is there a way to add custom Terms of Service \\(TOS\\) text to the magic link email?\n\nRight now there isn't a way, but we are currently implementing a feature that enables developer to be able to completely customize the magic link email, and that will include being able to add your company-specific Terms of Service.\n\n## How long does a user's authenticated session last with the Magic service?\n", "explanation": "This text is not code but a collection of information related to Magic service's security and functionality. It provides answers to three questions:\n\n1. Whitelisting specific domains for Publishable API Keys to prevent phishing.\n2. No current ability to add custom Terms of Service text to the magic link email, but a feature is being implemented.\n3. No information is provided for the third question about the duration of a user's authenticated session.", "metadata": {"repo": "magiclabs/documentation", "file": "faq.md", "chunk_number": 4, "total_chunks": 5}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "**Faq.md Summary**\n\nThe FAQ document addresses common questions about the reliability and security of magic link delivery. The system supports only email-based magic links due to security concerns with SIM swapping. In case users lose access to their email, they need to contact their email provider for recovery.\n\nThe document also discusses the security of magic links, highlighting that they are passwordless and can only be used from the device that initiated the request. This feature protects users' accounts even if the email is lost or stolen, mitigating phishing attacks.\n\nAdditionally, the FAQ covers:\n\n- No whitelisting of domains for Publishable API Keys\n- No custom Terms of Service text for magic link emails (upcoming feature)\n- Authentication session duration is up to 7 days; alternative solutions available for custom backends using DID tokens."}
{"code": "Users remain authenticated with the Magic service for up to 7 days \\(or until they clear their browser history/caches\\). This means that a user will need to click on a magic link, at most, once every 7 days for each device they log into. We are exploring ways to allow this session length to be customizable via SDKs or the Magic Dashboard.\n\nIf you're building a custom backend, we recommend our [Decentralized ID token](decentralized-id.md) as a way to initiate server-side sessions. The DID Token is a cryptographically-generated proof of user authentication. Your resource server simply needs to validate the token and set an HTTPS session cookie. This option gives you the flexibility of maintaining your own sessions without storing user secrets.\n\n", "explanation": "The text describes the authentication session duration for the Magic service, which lasts up to 7 days, and provides an alternative solution for custom backends using Decentralized ID (DID) tokens to initiate server-side sessions.", "metadata": {"repo": "magiclabs/documentation", "file": "faq.md", "chunk_number": 5, "total_chunks": 5}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "**Faq.md Summary**\n\nThe FAQ document addresses common questions about the reliability and security of magic link delivery. The system supports only email-based magic links due to security concerns with SIM swapping. In case users lose access to their email, they need to contact their email provider for recovery.\n\nThe document also discusses the security of magic links, highlighting that they are passwordless and can only be used from the device that initiated the request. This feature protects users' accounts even if the email is lost or stolen, mitigating phishing attacks.\n\nAdditionally, the FAQ covers:\n\n- No whitelisting of domains for Publishable API Keys\n- No custom Terms of Service text for magic link emails (upcoming feature)\n- Authentication session duration is up to 7 days; alternative solutions available for custom backends using DID tokens."}
{"code": "---\ndescription: Hello World tutorial to help you quickly get familiarized with Magic.\n---\n\n# \ud83d\ude80 Get Started\n\n## \ud83c\udfd7\ufe0f Get Template Code\n\nLet's get started by building a simple interface to let users log in or log out via an email magic link experience. We've created a template with necessary html and styles on CodeSandBox. \n\n{% hint style=\"info\" %}\n**\ud83d\udc49 Go to our** [**Hello World Template**](https://go.magic.link/hello-world-template) **to continue this tutorial!**\n{% endhint %}\n\n_If you don't want to go through the walkthrough,_ ****_feel free to skip to the_ [_completed implementation_](https://go.magic.link/hello-world-code) _or watch the demo video below._\n\n{% embed url=\"https://go.magic.link/demo-video\" %}\n\n## \ud83d\uddfa\ufe0f Walkthrough\n\n### 1\ufe0f\u20e3 Install Magic SDK\n\nInstall Magic SDK to your template by simply including a script tag after the comment line in the CodeSandBox editor. You can start by copy and pasting the code snippet below to your editor under the comment.\n\n```markup\n<!-- 1\ufe0f\u20e3 Install Magic SDK -->", "explanation": "This block is a tutorial introduction to get users started with Magic. It provides a link to access a Hello World template code on CodeSandBox and gives instructions on the first step: installing the Magic SDK by including a script tag in the editor.", "metadata": {"repo": "magiclabs/documentation", "file": "get-started.md", "chunk_number": 1, "total_chunks": 6}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "Here is a concise and holistic summary of the file 'get-started.md':\n\nThe 'get-started.md' file is a tutorial that guides users in setting up and implementing Magic, a user authentication and authorization service, in a web application. The tutorial begins by walking users through installing the Magic SDK and initializing it with a publishable API key. It then provides code examples for creating a dynamic login interface that changes based on the user's login status. The tutorial implements user login and logout functionality using Magic links and provides functions to handle these events. Finally, it concludes with a congratulatory message and resources for further learning and customization, including integrating Magic with popular frameworks and platforms such as Next.js, Vercel, and Firebase."}
{"code": "<script src=\"https://cdn.jsdelivr.net/npm/magic-sdk/dist/magic.js\"></script>\n```\n\n_See other ways to_ [_install Magic SDK_](client-sdk/browser-js/get-started.md) _such as using yarn or npm._\n\n### 2\ufe0f\u20e3 Initialize Magic Instance\n\nYou can initialize a Magic instance with your Publishable API Key with the following code. Copy and paste this code snippet below to your editor under the comment.\n\n```javascript\n/* 2\ufe0f\u20e3 Initialize Magic Instance */\nconst magic = new Magic(\"YOUR_TEST_PUBLISHABLE_API_KEY\");\n```\n\nYou need to sign up or log in to the [**Magic Dashboard**](https://dashboard.magic.link/) to view your API keys. Once you are logged in, you can then update the `'YOUR_TEST_PUBLISHABLE_API_KEY'` string to your actual test _publishable_ API key, which looks something like `pk_test_*********`.\n\n![](.gitbook/assets/dashboard-pk.png)\n\n### 3\ufe0f\u20e3 Implement Render Function\n", "explanation": "This code block initializes the Magic SDK, a JavaScript library for user authentication and authorization. \n\nHere's a concise summary:\n\n1. The code loads the Magic SDK from a CDN.\n2. It initializes a Magic instance with a publishable API key, which must be replaced with an actual key obtained from the Magic Dashboard.\n\nThe purpose is to set up the Magic SDK for use in a web application.", "metadata": {"repo": "magiclabs/documentation", "file": "get-started.md", "chunk_number": 2, "total_chunks": 6}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "Here is a concise and holistic summary of the file 'get-started.md':\n\nThe 'get-started.md' file is a tutorial that guides users in setting up and implementing Magic, a user authentication and authorization service, in a web application. The tutorial begins by walking users through installing the Magic SDK and initializing it with a publishable API key. It then provides code examples for creating a dynamic login interface that changes based on the user's login status. The tutorial implements user login and logout functionality using Magic links and provides functions to handle these events. Finally, it concludes with a congratulatory message and resources for further learning and customization, including integrating Magic with popular frameworks and platforms such as Next.js, Vercel, and Firebase."}
{"code": "Next, to complete the setup, let's write the logic on what the Hello World app should display when **\\(1\\) users are not logged in**, and when **\\(2\\) users are logged in**. Copy and paste this code snippet below to your editor under the comment.\n\n```javascript\n/* 3\ufe0f\u20e3 Implement Render Function */\nconst render = async () => {\n  const isLoggedIn = await magic.user.isLoggedIn();\n  /* Show login form if user is not logged in */\n  let html = `\n    <h1>Please sign up or login</h1>\n    <form onsubmit=\"handleLogin(event)\">\n      <input type=\"email\" name=\"email\" required=\"required\" placeholder=\"Enter your email\" />\n      <button type=\"submit\">Send</button>\n    </form>\n  `;\n  if (isLoggedIn) {\n    /* Get user metadata including email */\n    const userMetadata = await magic.user.getMetadata();\n    html = `\n      <h1>Current user: ${userMetadata.email}</h1>\n      <button onclick=\"handleLogout()\">Logout</button>\n    `;\n  }\n  document.getElementById(\"app\").innerHTML = html;\n};\n```\n\n### 4\ufe0f\u20e3 Implement Login Handler\n", "explanation": "This block of JavaScript code creates a `render` function that checks if a user is logged in and dynamically generates HTML content based on the login status. If the user is not logged in, it displays a login form; otherwise, it shows the user's email and a logout button.", "metadata": {"repo": "magiclabs/documentation", "file": "get-started.md", "chunk_number": 3, "total_chunks": 6}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "Here is a concise and holistic summary of the file 'get-started.md':\n\nThe 'get-started.md' file is a tutorial that guides users in setting up and implementing Magic, a user authentication and authorization service, in a web application. The tutorial begins by walking users through installing the Magic SDK and initializing it with a publishable API key. It then provides code examples for creating a dynamic login interface that changes based on the user's login status. The tutorial implements user login and logout functionality using Magic links and provides functions to handle these events. Finally, it concludes with a congratulatory message and resources for further learning and customization, including integrating Magic with popular frameworks and platforms such as Next.js, Vercel, and Firebase."}
{"code": "Now the real fun begins! Check out how you can implement user login with **a single line of code**, without needing to write any backend code! Copy and paste this code snippet below to your editor under the comment.\n\n```javascript\n/* 4\ufe0f\u20e3 Implement Login Handler */\nconst handleLogin = async e => {\n  e.preventDefault();\n  const email = new FormData(e.target).get(\"email\");\n  if (email) {\n    /* One-liner login \ud83e\udd2f */\n    await magic.auth.loginWithMagicLink({ email });\n    render();\n  }\n};\n```\n\n### 5\ufe0f\u20e3 Implement Logout Handler\n\nTo wrap it all up, it's super easy to implement user logout as well. Copy and paste this code snippet below to your editor under the comment.\n\n```javascript\n/* 5\ufe0f\u20e3 Implement Logout Handler */\nconst handleLogout = async () => {\n  await magic.user.logout();\n  render();\n};\n```\n\n{% hint style=\"success\" %}", "explanation": "**Purpose and Functionality:**\n\nThis code block implements user login and logout functionality using the Magic authentication service. \n\n- The `handleLogin` function sends a magic link to the user's email, allowing them to log in with a single click. \n- The `handleLogout` function logs the user out of the application. \n\nBoth functions call the `render` function after execution, presumably to update the application state.", "metadata": {"repo": "magiclabs/documentation", "file": "get-started.md", "chunk_number": 4, "total_chunks": 6}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "Here is a concise and holistic summary of the file 'get-started.md':\n\nThe 'get-started.md' file is a tutorial that guides users in setting up and implementing Magic, a user authentication and authorization service, in a web application. The tutorial begins by walking users through installing the Magic SDK and initializing it with a publishable API key. It then provides code examples for creating a dynamic login interface that changes based on the user's login status. The tutorial implements user login and logout functionality using Magic links and provides functions to handle these events. Finally, it concludes with a congratulatory message and resources for further learning and customization, including integrating Magic with popular frameworks and platforms such as Next.js, Vercel, and Firebase."}
{"code": "\ud83c\udf89 **Congratulations!** Now that you've completed the walkthrough, you should have a working version of the Hello World app! Don't worry if things are not working for some reason - you can find the [completed working version](https://go.magic.link/hello-world-code) on CodeSandBox.\n{% endhint %}\n\n## \ud83d\udc49 What's Next\n\nNow that you have an understanding of how Magic works on the client-side, we _strongly recommend_ you to take a look at an end-to-end, full-stack example to learn about how to connect it to a Node.js backend server and see the full potential of Magic!\n\n{% page-ref page=\"technologies/full-stack-node-js.md\" %}\n\nDid you know you can actually customize the login experience \\(using your own UI instead of the default\\) and also have a branded magic link email? You can learn how to do that with the link below!\n\n{% page-ref page=\"customization.md\" %}\n", "explanation": "**Summary:** This block is a congratulatory message at the end of a tutorial, directing users to a completed working version of their project, additional resources on full-stack implementation, and customization options for the login experience.", "metadata": {"repo": "magiclabs/documentation", "file": "get-started.md", "chunk_number": 5, "total_chunks": 6}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "Here is a concise and holistic summary of the file 'get-started.md':\n\nThe 'get-started.md' file is a tutorial that guides users in setting up and implementing Magic, a user authentication and authorization service, in a web application. The tutorial begins by walking users through installing the Magic SDK and initializing it with a publishable API key. It then provides code examples for creating a dynamic login interface that changes based on the user's login status. The tutorial implements user login and logout functionality using Magic links and provides functions to handle these events. Finally, it concludes with a congratulatory message and resources for further learning and customization, including integrating Magic with popular frameworks and platforms such as Next.js, Vercel, and Firebase."}
{"code": "Learn about how to use the popular [**Next.js**](https://nextjs.org/) framework to build a React app and deploy it with [**Vercel**](https://vercel.com/)!\n\n{% page-ref page=\"technologies/next-js-integration.md\" %}\n\nMagic provides much flexibility and composability to be combined with many other powerful platforms such as Firebase. You can learn how to plug Magic into the entire Firebase suite of tools here!\n\n{% page-ref page=\"technologies/firebase-integration.md\" %}\n\n", "explanation": "This block is information-based and serves as a knowledge hub. It provides links to learn about integrating frameworks and platforms, specifically:\n\n1. Next.js and Vercel for building and deploying a React app.\n2. Magic with the Firebase suite of tools.", "metadata": {"repo": "magiclabs/documentation", "file": "get-started.md", "chunk_number": 6, "total_chunks": 6}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "Here is a concise and holistic summary of the file 'get-started.md':\n\nThe 'get-started.md' file is a tutorial that guides users in setting up and implementing Magic, a user authentication and authorization service, in a web application. The tutorial begins by walking users through installing the Magic SDK and initializing it with a publishable API key. It then provides code examples for creating a dynamic login interface that changes based on the user's login status. The tutorial implements user login and logout functionality using Magic links and provides functions to handle these events. Finally, it concludes with a congratulatory message and resources for further learning and customization, including integrating Magic with popular frameworks and platforms such as Next.js, Vercel, and Firebase."}
{"code": "---\ndescription: Comprehensive article on how we do security at Magic\n---\n\n# \ud83d\udee1\ufe0f Security\n\n## Background\n\n{% hint style=\"info\" %}\n\ud83d\udcdc You can also dive into the deep-end by reading Magic's [**Whitepaper**](https://www.dropbox.com/s/3flqaszoigwis5b/Magic%20Whitepaper.pdf?dl=0)**.**\n{% endhint %}\n\n### Rationale\n\nManaging user identity and protecting the authentication and authorization processes are serious responsibilities. Mistakes can lead to unauthorized access and even financial loss from compromised user privacy or identity. To be able to manage all of this, perform penetration tests and audits, and staying on top of the security trends are _huge_ endeavors and may require full-sized security teams to execute correctly. In the age of ever-increasing cybersecurity threats, most software companies do not want this high level of responsibility and liability.\n", "explanation": "This block provides an introduction to Magic's security approach, explaining the importance and challenges of managing user identity, authentication, and authorization. It offers a Whitepaper link for further information and context on Magic's security measures.", "metadata": {"repo": "magiclabs/documentation", "file": "security.md", "chunk_number": 1, "total_chunks": 22}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "**Security Overview**\n\nMagic is a cybersecurity product designed to address the challenges of user identity, authentication, and authorization in a user-friendly way. This solution provides a secure, non-custodial management of users' private keys for blockchain-based applications, bypassing traditional password-based systems.\n\n**Key Security Features**\n\n1. **Passwordless Authentication**: Magic uses public-private key pairs for authentication, inspired by the success of SSH access.\n2. **Delegated Key Management**: A pending US patent solution that securely stores users' private keys outside of vulnerable databases.\n3. **Hardware-Based Key Encryption**: User master keys are encrypted using Hardware Security Modules (HSMs) to protect against unauthorized access.\n4. **Non-Custodial Trust**: The delegated key management system ensures secure encryption and decryption operations, bypassing the Magic backend.\n\n**Security Architecture**\n\n1. **Time-Bound Access Tokens**: Users are granted time-bound access tokens through the Magic auth relayer.\n2. **AWS-Scoped Credentials**: Users can directly interact with their AWS accounts and access HSM keys for encryption and decryption.\n3. **Dynamic, Audited, and Time-Limited Credential Generation**: Ensures security through audited and time-limited credential generation.\n\n**Security Measures**\n\n1. **Phishing Protection**: Magic Links eliminate the need for users to share credentials.\n2. **Web Application Security**: Measures include whitelisting domains, protecting against CSRF and XSS attacks, and implementing E2E TLS encryption.\n3. **Transport Layer Security (TLS)**: Encrypts data transmitted over the internet.\n4. **Cloud Security Setup**: Includes virtual private clouds (VPCs), intrusion detection systems, and data encryption at rest.\n5. **Compliance and Certification**: AES-256 encryption and SOC 2 Type 1 compliance.\n\n**Bug Bounty and Disclosure Policy**\n\n1. **HackerOne Program**: The organization proactively tests and strengthens its infrastructure through white-hat hacking and penetration testing.\n2. **Security Disclosure Policy**: Urges users to report vulnerabilities and offers a bounty through the HackerOne program."}
{"code": "Worldwide spending on cybersecurity is projected to reach $133.7 billion in 2022 \\[[Gartner](https://www.gartner.com/en/newsroom/press-releases/2018-08-15-gartner-forecasts-worldwide-information-security-spending-to-exceed-124-billion-in-2019)\\], and the average cost of a breach has skyrocketed to around $3.92 million as of 2019 \\[[Security Intelligence](https://securityintelligence.com/posts/whats-new-in-the-2019-cost-of-a-data-breach-report/)\\]. Even though Equifax was breached in 2017, the company is still paying off the $4 billion damage in total.\n\nWe believe something _has_ to be done about this and created Magic to address many of these underlying security challenges in the world of identity and package them in an extremely accessible product for both developers and users.\n\n### Who Are We\n\nMagic is built by our team at [Fortmatic Inc](https://fortmatic.com/). We are a cybersecurity company headquartered in San Francisco, specializing in blockchain private key management.\n", "explanation": "This block is a text passage that introduces Magic, a cybersecurity product created by Fortmatic Inc. The passage highlights the growing need for cybersecurity solutions, citing the increasing cost of breaches and a notable example (Equifax), before presenting Magic as a tool designed to address these challenges in a user-friendly way.", "metadata": {"repo": "magiclabs/documentation", "file": "security.md", "chunk_number": 2, "total_chunks": 22}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "**Security Overview**\n\nMagic is a cybersecurity product designed to address the challenges of user identity, authentication, and authorization in a user-friendly way. This solution provides a secure, non-custodial management of users' private keys for blockchain-based applications, bypassing traditional password-based systems.\n\n**Key Security Features**\n\n1. **Passwordless Authentication**: Magic uses public-private key pairs for authentication, inspired by the success of SSH access.\n2. **Delegated Key Management**: A pending US patent solution that securely stores users' private keys outside of vulnerable databases.\n3. **Hardware-Based Key Encryption**: User master keys are encrypted using Hardware Security Modules (HSMs) to protect against unauthorized access.\n4. **Non-Custodial Trust**: The delegated key management system ensures secure encryption and decryption operations, bypassing the Magic backend.\n\n**Security Architecture**\n\n1. **Time-Bound Access Tokens**: Users are granted time-bound access tokens through the Magic auth relayer.\n2. **AWS-Scoped Credentials**: Users can directly interact with their AWS accounts and access HSM keys for encryption and decryption.\n3. **Dynamic, Audited, and Time-Limited Credential Generation**: Ensures security through audited and time-limited credential generation.\n\n**Security Measures**\n\n1. **Phishing Protection**: Magic Links eliminate the need for users to share credentials.\n2. **Web Application Security**: Measures include whitelisting domains, protecting against CSRF and XSS attacks, and implementing E2E TLS encryption.\n3. **Transport Layer Security (TLS)**: Encrypts data transmitted over the internet.\n4. **Cloud Security Setup**: Includes virtual private clouds (VPCs), intrusion detection systems, and data encryption at rest.\n5. **Compliance and Certification**: AES-256 encryption and SOC 2 Type 1 compliance.\n\n**Bug Bounty and Disclosure Policy**\n\n1. **HackerOne Program**: The organization proactively tests and strengthens its infrastructure through white-hat hacking and penetration testing.\n2. **Security Disclosure Policy**: Urges users to report vulnerabilities and offers a bounty through the HackerOne program."}
{"code": "We are inventors of Delegated Key Management \\(pat. pend. USPTO 62/904689\\), which enables hardware-secured, non-custodial management of users' private keys that are used to authenticate and make crypto-asset transactions on blockchain-based applications a.k.a decentralized applications.\n\nThe inspirations for Magic came from our experience working with developers building these applications, and how their users can leverage elliptic curve cryptography and public-private key pairs to generate zero-knowledge proofs that can be used to authenticate users into these applications.\n\n### Why Passwords Are Obsolete\n\nMost applications today are built with username/email/phone + password security model, which are obsolete for many reasons:\n\n#### **Password leaks are prevalent**\n", "explanation": "This block discusses \"Magic\", a technology that enables secure, non-custodial management of users' private keys for blockchain-based applications. It's inspired by the need for better authentication methods beyond traditional passwords, citing password leaks as a major security issue.", "metadata": {"repo": "magiclabs/documentation", "file": "security.md", "chunk_number": 3, "total_chunks": 22}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "**Security Overview**\n\nMagic is a cybersecurity product designed to address the challenges of user identity, authentication, and authorization in a user-friendly way. This solution provides a secure, non-custodial management of users' private keys for blockchain-based applications, bypassing traditional password-based systems.\n\n**Key Security Features**\n\n1. **Passwordless Authentication**: Magic uses public-private key pairs for authentication, inspired by the success of SSH access.\n2. **Delegated Key Management**: A pending US patent solution that securely stores users' private keys outside of vulnerable databases.\n3. **Hardware-Based Key Encryption**: User master keys are encrypted using Hardware Security Modules (HSMs) to protect against unauthorized access.\n4. **Non-Custodial Trust**: The delegated key management system ensures secure encryption and decryption operations, bypassing the Magic backend.\n\n**Security Architecture**\n\n1. **Time-Bound Access Tokens**: Users are granted time-bound access tokens through the Magic auth relayer.\n2. **AWS-Scoped Credentials**: Users can directly interact with their AWS accounts and access HSM keys for encryption and decryption.\n3. **Dynamic, Audited, and Time-Limited Credential Generation**: Ensures security through audited and time-limited credential generation.\n\n**Security Measures**\n\n1. **Phishing Protection**: Magic Links eliminate the need for users to share credentials.\n2. **Web Application Security**: Measures include whitelisting domains, protecting against CSRF and XSS attacks, and implementing E2E TLS encryption.\n3. **Transport Layer Security (TLS)**: Encrypts data transmitted over the internet.\n4. **Cloud Security Setup**: Includes virtual private clouds (VPCs), intrusion detection systems, and data encryption at rest.\n5. **Compliance and Certification**: AES-256 encryption and SOC 2 Type 1 compliance.\n\n**Bug Bounty and Disclosure Policy**\n\n1. **HackerOne Program**: The organization proactively tests and strengthens its infrastructure through white-hat hacking and penetration testing.\n2. **Security Disclosure Policy**: Urges users to report vulnerabilities and offers a bounty through the HackerOne program."}
{"code": "Type your email in [HaveIBeenPwned](https://haveibeenpwned.com/) and realize that your sensitive data and passwords have likely been compromised in many high profile breaches impacting companies like Equifax, Dropbox, Adobe, Kickstarter, LinkedIn, Tumblr, and so many more. If there exists a database with passwords, it\u2019s only a matter of time before they get stolen.\n\n#### **Even hashed+salted passwords are insecure**\n\nOnce a database of hashed passwords is stolen, hackers can direct immense distributed computing resources at that database of passwords, utilizing parallel GPUs or botnets with hundreds of thousands of nodes to attempt hundreds of billions of password combinations per second in hopes of recovering plaintext identifier+password pairs.\n", "explanation": "This block highlights the vulnerability of passwords, even when hashed and salted, to hacking attempts. It explains that stolen databases of hashed passwords can be cracked using powerful distributed computing resources, compromising sensitive data and passwords.", "metadata": {"repo": "magiclabs/documentation", "file": "security.md", "chunk_number": 4, "total_chunks": 22}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "**Security Overview**\n\nMagic is a cybersecurity product designed to address the challenges of user identity, authentication, and authorization in a user-friendly way. This solution provides a secure, non-custodial management of users' private keys for blockchain-based applications, bypassing traditional password-based systems.\n\n**Key Security Features**\n\n1. **Passwordless Authentication**: Magic uses public-private key pairs for authentication, inspired by the success of SSH access.\n2. **Delegated Key Management**: A pending US patent solution that securely stores users' private keys outside of vulnerable databases.\n3. **Hardware-Based Key Encryption**: User master keys are encrypted using Hardware Security Modules (HSMs) to protect against unauthorized access.\n4. **Non-Custodial Trust**: The delegated key management system ensures secure encryption and decryption operations, bypassing the Magic backend.\n\n**Security Architecture**\n\n1. **Time-Bound Access Tokens**: Users are granted time-bound access tokens through the Magic auth relayer.\n2. **AWS-Scoped Credentials**: Users can directly interact with their AWS accounts and access HSM keys for encryption and decryption.\n3. **Dynamic, Audited, and Time-Limited Credential Generation**: Ensures security through audited and time-limited credential generation.\n\n**Security Measures**\n\n1. **Phishing Protection**: Magic Links eliminate the need for users to share credentials.\n2. **Web Application Security**: Measures include whitelisting domains, protecting against CSRF and XSS attacks, and implementing E2E TLS encryption.\n3. **Transport Layer Security (TLS)**: Encrypts data transmitted over the internet.\n4. **Cloud Security Setup**: Includes virtual private clouds (VPCs), intrusion detection systems, and data encryption at rest.\n5. **Compliance and Certification**: AES-256 encryption and SOC 2 Type 1 compliance.\n\n**Bug Bounty and Disclosure Policy**\n\n1. **HackerOne Program**: The organization proactively tests and strengthens its infrastructure through white-hat hacking and penetration testing.\n2. **Security Disclosure Policy**: Urges users to report vulnerabilities and offers a bounty through the HackerOne program."}
{"code": "Once attackers discover a password that hashes to the same hash as the one stored in the database, they\u2019ll take that identifier+password pair and try it on other applications like bank accounts. In many cases, a salted+hashed password database can give up another valid identifier+password pair around every minute. This results in about half a million leaked passwords per year on its own \u2014 doubling every few years.\n\nFor companies using passwords as secrets to encrypt sensitive data, it's very much like symmetric encryption where the encryption key is a weak password that can be easily cracked by brute-force.\n\n#### **User sessions often get hijacked**\n", "explanation": "This text block highlights security risks associated with password-based systems. It describes how attackers can exploit weak password hashes to gain access to other accounts, and how encryption using weak passwords can make sensitive data vulnerable to brute-force attacks, resulting in significant data breaches and compromised user sessions.", "metadata": {"repo": "magiclabs/documentation", "file": "security.md", "chunk_number": 5, "total_chunks": 22}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "**Security Overview**\n\nMagic is a cybersecurity product designed to address the challenges of user identity, authentication, and authorization in a user-friendly way. This solution provides a secure, non-custodial management of users' private keys for blockchain-based applications, bypassing traditional password-based systems.\n\n**Key Security Features**\n\n1. **Passwordless Authentication**: Magic uses public-private key pairs for authentication, inspired by the success of SSH access.\n2. **Delegated Key Management**: A pending US patent solution that securely stores users' private keys outside of vulnerable databases.\n3. **Hardware-Based Key Encryption**: User master keys are encrypted using Hardware Security Modules (HSMs) to protect against unauthorized access.\n4. **Non-Custodial Trust**: The delegated key management system ensures secure encryption and decryption operations, bypassing the Magic backend.\n\n**Security Architecture**\n\n1. **Time-Bound Access Tokens**: Users are granted time-bound access tokens through the Magic auth relayer.\n2. **AWS-Scoped Credentials**: Users can directly interact with their AWS accounts and access HSM keys for encryption and decryption.\n3. **Dynamic, Audited, and Time-Limited Credential Generation**: Ensures security through audited and time-limited credential generation.\n\n**Security Measures**\n\n1. **Phishing Protection**: Magic Links eliminate the need for users to share credentials.\n2. **Web Application Security**: Measures include whitelisting domains, protecting against CSRF and XSS attacks, and implementing E2E TLS encryption.\n3. **Transport Layer Security (TLS)**: Encrypts data transmitted over the internet.\n4. **Cloud Security Setup**: Includes virtual private clouds (VPCs), intrusion detection systems, and data encryption at rest.\n5. **Compliance and Certification**: AES-256 encryption and SOC 2 Type 1 compliance.\n\n**Bug Bounty and Disclosure Policy**\n\n1. **HackerOne Program**: The organization proactively tests and strengthens its infrastructure through white-hat hacking and penetration testing.\n2. **Security Disclosure Policy**: Urges users to report vulnerabilities and offers a bounty through the HackerOne program."}
{"code": "User sessions are often [hijacked](https://owasp.org/www-community/attacks/Session_hijacking_attack) after successful authentication, allowing attackers to exploit that user\u2019s application resources. In order to prevent that, you\u2019d need to re-authenticate the user with every request, and this would create an extremely cumbersome user experience if users have to type in their password every single time.\n\nEric Elliott wrote a great [article](https://medium.com/javascript-scene/improving-user-authentication-and-security-ddb60b1ef69b) and covered many of these issues as well.\n\n#### Managing passwords increases cost and liability\n\n81% of all breaches are due to passwords, and 59% of people reuse their passwords _everywhere_ \\[[Source](https://enterprise.verizon.com/resources/reports/2017_dbir.pdf)\\], and breaches are costing companies on average $240k per 1k records \\[[Source](https://digitalguardian.com/blog/whats-cost-data-breach-2019)\\].\n", "explanation": "This block discusses the security risks associated with user sessions and traditional password authentication methods. It highlights the vulnerabilities of session hijacking and the drawbacks of re-authenticating users with every request, while also citing statistics on the prevalence of password-related breaches and their financial consequences.", "metadata": {"repo": "magiclabs/documentation", "file": "security.md", "chunk_number": 6, "total_chunks": 22}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "**Security Overview**\n\nMagic is a cybersecurity product designed to address the challenges of user identity, authentication, and authorization in a user-friendly way. This solution provides a secure, non-custodial management of users' private keys for blockchain-based applications, bypassing traditional password-based systems.\n\n**Key Security Features**\n\n1. **Passwordless Authentication**: Magic uses public-private key pairs for authentication, inspired by the success of SSH access.\n2. **Delegated Key Management**: A pending US patent solution that securely stores users' private keys outside of vulnerable databases.\n3. **Hardware-Based Key Encryption**: User master keys are encrypted using Hardware Security Modules (HSMs) to protect against unauthorized access.\n4. **Non-Custodial Trust**: The delegated key management system ensures secure encryption and decryption operations, bypassing the Magic backend.\n\n**Security Architecture**\n\n1. **Time-Bound Access Tokens**: Users are granted time-bound access tokens through the Magic auth relayer.\n2. **AWS-Scoped Credentials**: Users can directly interact with their AWS accounts and access HSM keys for encryption and decryption.\n3. **Dynamic, Audited, and Time-Limited Credential Generation**: Ensures security through audited and time-limited credential generation.\n\n**Security Measures**\n\n1. **Phishing Protection**: Magic Links eliminate the need for users to share credentials.\n2. **Web Application Security**: Measures include whitelisting domains, protecting against CSRF and XSS attacks, and implementing E2E TLS encryption.\n3. **Transport Layer Security (TLS)**: Encrypts data transmitted over the internet.\n4. **Cloud Security Setup**: Includes virtual private clouds (VPCs), intrusion detection systems, and data encryption at rest.\n5. **Compliance and Certification**: AES-256 encryption and SOC 2 Type 1 compliance.\n\n**Bug Bounty and Disclosure Policy**\n\n1. **HackerOne Program**: The organization proactively tests and strengthens its infrastructure through white-hat hacking and penetration testing.\n2. **Security Disclosure Policy**: Urges users to report vulnerabilities and offers a bounty through the HackerOne program."}
{"code": "Over 50% of all support tickets are password-related \\(usually forgotten passwords\\). Each ticket costs companies around $70 - handling 10 tickets daily will cost an organization close to $128k annually \\[[Source](https://www.okta.com/blog/2019/08/how-much-are-password-resets-costing-your-company/)\\].\n\n## Architecture\n\n### Canonical Exfiltration Attacks\n\nTo protect against data breaches, one needs to understand how modern-day data-exfiltration attacks are commonly executed:\n\n1. **Recon** -  Attacker researches, profiles, and tests the victim company's environment and people.\n2. **Infiltrate** - Attacker breaks in or takes positions inside the organization.\n3. **Discover** - Attacker leverages internal position to learn more about the environment and system.\n4. **Capture** - Attacker takes control of valuable user data \\(including passwords and credentials\\).\n5. **Exfiltrate** - Attacker moves encrypted data out, use offline compute resources crack them offline.", "explanation": "The purpose of this text is to highlight the financial burden of password-related support tickets and explain the sequence of events in a canonical exfiltration attack, emphasizing the need to understand how attacks occur to protect against data breaches.", "metadata": {"repo": "magiclabs/documentation", "file": "security.md", "chunk_number": 7, "total_chunks": 22}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "**Security Overview**\n\nMagic is a cybersecurity product designed to address the challenges of user identity, authentication, and authorization in a user-friendly way. This solution provides a secure, non-custodial management of users' private keys for blockchain-based applications, bypassing traditional password-based systems.\n\n**Key Security Features**\n\n1. **Passwordless Authentication**: Magic uses public-private key pairs for authentication, inspired by the success of SSH access.\n2. **Delegated Key Management**: A pending US patent solution that securely stores users' private keys outside of vulnerable databases.\n3. **Hardware-Based Key Encryption**: User master keys are encrypted using Hardware Security Modules (HSMs) to protect against unauthorized access.\n4. **Non-Custodial Trust**: The delegated key management system ensures secure encryption and decryption operations, bypassing the Magic backend.\n\n**Security Architecture**\n\n1. **Time-Bound Access Tokens**: Users are granted time-bound access tokens through the Magic auth relayer.\n2. **AWS-Scoped Credentials**: Users can directly interact with their AWS accounts and access HSM keys for encryption and decryption.\n3. **Dynamic, Audited, and Time-Limited Credential Generation**: Ensures security through audited and time-limited credential generation.\n\n**Security Measures**\n\n1. **Phishing Protection**: Magic Links eliminate the need for users to share credentials.\n2. **Web Application Security**: Measures include whitelisting domains, protecting against CSRF and XSS attacks, and implementing E2E TLS encryption.\n3. **Transport Layer Security (TLS)**: Encrypts data transmitted over the internet.\n4. **Cloud Security Setup**: Includes virtual private clouds (VPCs), intrusion detection systems, and data encryption at rest.\n5. **Compliance and Certification**: AES-256 encryption and SOC 2 Type 1 compliance.\n\n**Bug Bounty and Disclosure Policy**\n\n1. **HackerOne Program**: The organization proactively tests and strengthens its infrastructure through white-hat hacking and penetration testing.\n2. **Security Disclosure Policy**: Urges users to report vulnerabilities and offers a bounty through the HackerOne program."}
{"code": "6. **Monetize** - Attacker sells or uses decrypted data to make money or gain advantage.\n\nWhat's scary about this procedure is that, since encrypted data can be cracked offline, sometimes the victim company won't even realize they are compromised until months later, if ever.\n\n![](.gitbook/assets/canonical-attack-2x%20%282%29.png)\n\nNow we have a brief understanding of how canonical exfiltration attacks are executed. To prevent an attacker from cracking user password credentials and data offline, we have to \\(1\\) figure how users can authenticate into applications without passwords, and \\(2\\) ensure sensitive user data are \"locked\" by something that can't physically leave Magic's infrastructure.\n\n### Zero-Knowledge Proofs\n", "explanation": "This text block explains the final stage of a canonical exfiltration attack, where the attacker monetizes stolen decrypted data. It then highlights the need to prevent offline data cracking by exploring authentication methods without passwords and protecting user data using a secure system that cannot be physically accessed by attackers.", "metadata": {"repo": "magiclabs/documentation", "file": "security.md", "chunk_number": 8, "total_chunks": 22}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "**Security Overview**\n\nMagic is a cybersecurity product designed to address the challenges of user identity, authentication, and authorization in a user-friendly way. This solution provides a secure, non-custodial management of users' private keys for blockchain-based applications, bypassing traditional password-based systems.\n\n**Key Security Features**\n\n1. **Passwordless Authentication**: Magic uses public-private key pairs for authentication, inspired by the success of SSH access.\n2. **Delegated Key Management**: A pending US patent solution that securely stores users' private keys outside of vulnerable databases.\n3. **Hardware-Based Key Encryption**: User master keys are encrypted using Hardware Security Modules (HSMs) to protect against unauthorized access.\n4. **Non-Custodial Trust**: The delegated key management system ensures secure encryption and decryption operations, bypassing the Magic backend.\n\n**Security Architecture**\n\n1. **Time-Bound Access Tokens**: Users are granted time-bound access tokens through the Magic auth relayer.\n2. **AWS-Scoped Credentials**: Users can directly interact with their AWS accounts and access HSM keys for encryption and decryption.\n3. **Dynamic, Audited, and Time-Limited Credential Generation**: Ensures security through audited and time-limited credential generation.\n\n**Security Measures**\n\n1. **Phishing Protection**: Magic Links eliminate the need for users to share credentials.\n2. **Web Application Security**: Measures include whitelisting domains, protecting against CSRF and XSS attacks, and implementing E2E TLS encryption.\n3. **Transport Layer Security (TLS)**: Encrypts data transmitted over the internet.\n4. **Cloud Security Setup**: Includes virtual private clouds (VPCs), intrusion detection systems, and data encryption at rest.\n5. **Compliance and Certification**: AES-256 encryption and SOC 2 Type 1 compliance.\n\n**Bug Bounty and Disclosure Policy**\n\n1. **HackerOne Program**: The organization proactively tests and strengthens its infrastructure through white-hat hacking and penetration testing.\n2. **Security Disclosure Policy**: Urges users to report vulnerabilities and offers a bounty through the HackerOne program."}
{"code": "What if you can actually securely authenticate users into your applications without needing user credentials like passwords at all?  \ud83e\udd2f Turns out the answer is hiding in plain sight - developers have been using public-private key-pairs as a form of secure authentication for everyday jobs, like accessing SSH, where using passwords are sometimes optional.\n", "explanation": "This text proposes the idea of authenticating users without passwords by using public-private key pairs, citing SSH access as a successful example of this alternative authentication method.", "metadata": {"repo": "magiclabs/documentation", "file": "security.md", "chunk_number": 9, "total_chunks": 22}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "**Security Overview**\n\nMagic is a cybersecurity product designed to address the challenges of user identity, authentication, and authorization in a user-friendly way. This solution provides a secure, non-custodial management of users' private keys for blockchain-based applications, bypassing traditional password-based systems.\n\n**Key Security Features**\n\n1. **Passwordless Authentication**: Magic uses public-private key pairs for authentication, inspired by the success of SSH access.\n2. **Delegated Key Management**: A pending US patent solution that securely stores users' private keys outside of vulnerable databases.\n3. **Hardware-Based Key Encryption**: User master keys are encrypted using Hardware Security Modules (HSMs) to protect against unauthorized access.\n4. **Non-Custodial Trust**: The delegated key management system ensures secure encryption and decryption operations, bypassing the Magic backend.\n\n**Security Architecture**\n\n1. **Time-Bound Access Tokens**: Users are granted time-bound access tokens through the Magic auth relayer.\n2. **AWS-Scoped Credentials**: Users can directly interact with their AWS accounts and access HSM keys for encryption and decryption.\n3. **Dynamic, Audited, and Time-Limited Credential Generation**: Ensures security through audited and time-limited credential generation.\n\n**Security Measures**\n\n1. **Phishing Protection**: Magic Links eliminate the need for users to share credentials.\n2. **Web Application Security**: Measures include whitelisting domains, protecting against CSRF and XSS attacks, and implementing E2E TLS encryption.\n3. **Transport Layer Security (TLS)**: Encrypts data transmitted over the internet.\n4. **Cloud Security Setup**: Includes virtual private clouds (VPCs), intrusion detection systems, and data encryption at rest.\n5. **Compliance and Certification**: AES-256 encryption and SOC 2 Type 1 compliance.\n\n**Bug Bounty and Disclosure Policy**\n\n1. **HackerOne Program**: The organization proactively tests and strengthens its infrastructure through white-hat hacking and penetration testing.\n2. **Security Disclosure Policy**: Urges users to report vulnerabilities and offers a bounty through the HackerOne program."}
{"code": "Instead of SSH key-pairs, for each application end-user, Magic generates a key-pair based on the [Ethereum](https://en.wikipedia.org/wiki/Ethereum) decentralized blockchain network. The public key acts as an identifier for the user. Leveraging elliptic curve cryptography, the private key is used to generate a verifiable proof of identification and authorization from a claim. The proof is then sent to the developer application servers where data in the claim can be recovered, and the authenticity of the request can be ensured. Voil\u00e1! Authentication and authorization are achieved without requiring user passwords. The claim format is an adaptation of the W3C [Decentralized Identifiers](https://w3c-ccg.github.io/did-primer/) \\(DID\\) protocol \\[[Learn More](decentralized-id.md)\\].\n\n### Delegated Key Management\n", "explanation": "Magic generates unique key pairs for users based on the Ethereum blockchain, allowing for authentication and authorization without passwords. The user's private key creates a verifiable proof, sent to servers for verification, and the claim format follows the W3C Decentralized Identifiers (DID) protocol.", "metadata": {"repo": "magiclabs/documentation", "file": "security.md", "chunk_number": 10, "total_chunks": 22}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "**Security Overview**\n\nMagic is a cybersecurity product designed to address the challenges of user identity, authentication, and authorization in a user-friendly way. This solution provides a secure, non-custodial management of users' private keys for blockchain-based applications, bypassing traditional password-based systems.\n\n**Key Security Features**\n\n1. **Passwordless Authentication**: Magic uses public-private key pairs for authentication, inspired by the success of SSH access.\n2. **Delegated Key Management**: A pending US patent solution that securely stores users' private keys outside of vulnerable databases.\n3. **Hardware-Based Key Encryption**: User master keys are encrypted using Hardware Security Modules (HSMs) to protect against unauthorized access.\n4. **Non-Custodial Trust**: The delegated key management system ensures secure encryption and decryption operations, bypassing the Magic backend.\n\n**Security Architecture**\n\n1. **Time-Bound Access Tokens**: Users are granted time-bound access tokens through the Magic auth relayer.\n2. **AWS-Scoped Credentials**: Users can directly interact with their AWS accounts and access HSM keys for encryption and decryption.\n3. **Dynamic, Audited, and Time-Limited Credential Generation**: Ensures security through audited and time-limited credential generation.\n\n**Security Measures**\n\n1. **Phishing Protection**: Magic Links eliminate the need for users to share credentials.\n2. **Web Application Security**: Measures include whitelisting domains, protecting against CSRF and XSS attacks, and implementing E2E TLS encryption.\n3. **Transport Layer Security (TLS)**: Encrypts data transmitted over the internet.\n4. **Cloud Security Setup**: Includes virtual private clouds (VPCs), intrusion detection systems, and data encryption at rest.\n5. **Compliance and Certification**: AES-256 encryption and SOC 2 Type 1 compliance.\n\n**Bug Bounty and Disclosure Policy**\n\n1. **HackerOne Program**: The organization proactively tests and strengthens its infrastructure through white-hat hacking and penetration testing.\n2. **Security Disclosure Policy**: Urges users to report vulnerabilities and offers a bounty through the HackerOne program."}
{"code": "With this public-private key-pair approach, it is critical to ensure that users' private keys are properly secured, otherwise, it would mean their identity can be compromised. From what we know about data exfiltration attacks, databases are absolutely the _worst_ place to store these keys. This is where our secret sauce, Delegated Key Management \\(pat. pend. USPTO 62/904689\\), which has been securing tens of thousands of user private keys for thousands of blockchain companies, is very effective at doing.\n\n#### Hardware Security Modules\n", "explanation": "This text introduces \"Delegated Key Management\" (a pending US patent), a solution that securely stores users' private keys outside of vulnerable databases, effectively protecting identities and preventing data exfiltration attacks.", "metadata": {"repo": "magiclabs/documentation", "file": "security.md", "chunk_number": 11, "total_chunks": 22}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "**Security Overview**\n\nMagic is a cybersecurity product designed to address the challenges of user identity, authentication, and authorization in a user-friendly way. This solution provides a secure, non-custodial management of users' private keys for blockchain-based applications, bypassing traditional password-based systems.\n\n**Key Security Features**\n\n1. **Passwordless Authentication**: Magic uses public-private key pairs for authentication, inspired by the success of SSH access.\n2. **Delegated Key Management**: A pending US patent solution that securely stores users' private keys outside of vulnerable databases.\n3. **Hardware-Based Key Encryption**: User master keys are encrypted using Hardware Security Modules (HSMs) to protect against unauthorized access.\n4. **Non-Custodial Trust**: The delegated key management system ensures secure encryption and decryption operations, bypassing the Magic backend.\n\n**Security Architecture**\n\n1. **Time-Bound Access Tokens**: Users are granted time-bound access tokens through the Magic auth relayer.\n2. **AWS-Scoped Credentials**: Users can directly interact with their AWS accounts and access HSM keys for encryption and decryption.\n3. **Dynamic, Audited, and Time-Limited Credential Generation**: Ensures security through audited and time-limited credential generation.\n\n**Security Measures**\n\n1. **Phishing Protection**: Magic Links eliminate the need for users to share credentials.\n2. **Web Application Security**: Measures include whitelisting domains, protecting against CSRF and XSS attacks, and implementing E2E TLS encryption.\n3. **Transport Layer Security (TLS)**: Encrypts data transmitted over the internet.\n4. **Cloud Security Setup**: Includes virtual private clouds (VPCs), intrusion detection systems, and data encryption at rest.\n5. **Compliance and Certification**: AES-256 encryption and SOC 2 Type 1 compliance.\n\n**Bug Bounty and Disclosure Policy**\n\n1. **HackerOne Program**: The organization proactively tests and strengthens its infrastructure through white-hat hacking and penetration testing.\n2. **Security Disclosure Policy**: Urges users to report vulnerabilities and offers a bounty through the HackerOne program."}
{"code": "Magic leverages Hardware Security Modules \\(HSMs\\) provided by Amazon Web Services' Key Management  Service \\(AWS KMS\\). Dedicated user master keys are stored on the HSMs, which are generated using AES-256 with 384-bits of entropy. The master keys never leave the hardware as they are meant to be locked inside and unable to be exported, where all encryption and decryption operations happen inside the hardware itself. HSMs are a lot like popular FIDO devices like YubiKeys or hardware-based wallets for cryptocurrency storage such as Trezor or Ledger, but instead, they sit in the cloud, heavily secured by [AWS\u2019s data centers](https://aws.amazon.com/compliance/data-center/controls/).\n", "explanation": "The purpose and functionality of this block is to describe the encryption key management system using Amazon Web Services' Key Management Service (AWS KMS), which utilizes Hardware Security Modules (HSMs) to store and manage encryption keys securely, with all encryption and decryption operations occurring within the hardware.", "metadata": {"repo": "magiclabs/documentation", "file": "security.md", "chunk_number": 12, "total_chunks": 22}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "**Security Overview**\n\nMagic is a cybersecurity product designed to address the challenges of user identity, authentication, and authorization in a user-friendly way. This solution provides a secure, non-custodial management of users' private keys for blockchain-based applications, bypassing traditional password-based systems.\n\n**Key Security Features**\n\n1. **Passwordless Authentication**: Magic uses public-private key pairs for authentication, inspired by the success of SSH access.\n2. **Delegated Key Management**: A pending US patent solution that securely stores users' private keys outside of vulnerable databases.\n3. **Hardware-Based Key Encryption**: User master keys are encrypted using Hardware Security Modules (HSMs) to protect against unauthorized access.\n4. **Non-Custodial Trust**: The delegated key management system ensures secure encryption and decryption operations, bypassing the Magic backend.\n\n**Security Architecture**\n\n1. **Time-Bound Access Tokens**: Users are granted time-bound access tokens through the Magic auth relayer.\n2. **AWS-Scoped Credentials**: Users can directly interact with their AWS accounts and access HSM keys for encryption and decryption.\n3. **Dynamic, Audited, and Time-Limited Credential Generation**: Ensures security through audited and time-limited credential generation.\n\n**Security Measures**\n\n1. **Phishing Protection**: Magic Links eliminate the need for users to share credentials.\n2. **Web Application Security**: Measures include whitelisting domains, protecting against CSRF and XSS attacks, and implementing E2E TLS encryption.\n3. **Transport Layer Security (TLS)**: Encrypts data transmitted over the internet.\n4. **Cloud Security Setup**: Includes virtual private clouds (VPCs), intrusion detection systems, and data encryption at rest.\n5. **Compliance and Certification**: AES-256 encryption and SOC 2 Type 1 compliance.\n\n**Bug Bounty and Disclosure Policy**\n\n1. **HackerOne Program**: The organization proactively tests and strengthens its infrastructure through white-hat hacking and penetration testing.\n2. **Security Disclosure Policy**: Urges users to report vulnerabilities and offers a bounty through the HackerOne program."}
{"code": "Users' private keys are encrypted by these hardware-based user master keys, which means that attackers need to gain access to these hardware to be able to retrieve the keys, and are forced to stay _within_ Magic's adversarial infrastructure - which is capable to detect, impede, and monitor attacker's progress to prevent and mitigate any damages.\n\n![](.gitbook/assets/magic-model-2x.png)\n\n#### Non-Custodial Trust Optimization\n\nOur Delegated Key Management architecture _delegates_ critical encryption and decryption operations to a trusted AWS KMS and AWS Cognito - completely bypassing the Magic backend. This way, we can stay non-custodial \\(standard for trust amongst crypto communities\\) since we\u2019ll never \u201csee\u201d users\u2019 private keys, and therefore improving security and trust with developers and end-users.\n\n![](.gitbook/assets/delegated-2x%20%281%29.png)\n\n### Client to AWS Data Flow <a id=\"48c3\"></a>\n", "explanation": "This block describes Magic's security architecture for key management. It uses hardware-based user master keys to encrypt users' private keys, making it difficult for attackers to access them. The delegated key management system also ensures non-custodial trust by bypassing the Magic backend and using trusted AWS services for encryption and decryption operations, thereby improving security and trust.", "metadata": {"repo": "magiclabs/documentation", "file": "security.md", "chunk_number": 13, "total_chunks": 22}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "**Security Overview**\n\nMagic is a cybersecurity product designed to address the challenges of user identity, authentication, and authorization in a user-friendly way. This solution provides a secure, non-custodial management of users' private keys for blockchain-based applications, bypassing traditional password-based systems.\n\n**Key Security Features**\n\n1. **Passwordless Authentication**: Magic uses public-private key pairs for authentication, inspired by the success of SSH access.\n2. **Delegated Key Management**: A pending US patent solution that securely stores users' private keys outside of vulnerable databases.\n3. **Hardware-Based Key Encryption**: User master keys are encrypted using Hardware Security Modules (HSMs) to protect against unauthorized access.\n4. **Non-Custodial Trust**: The delegated key management system ensures secure encryption and decryption operations, bypassing the Magic backend.\n\n**Security Architecture**\n\n1. **Time-Bound Access Tokens**: Users are granted time-bound access tokens through the Magic auth relayer.\n2. **AWS-Scoped Credentials**: Users can directly interact with their AWS accounts and access HSM keys for encryption and decryption.\n3. **Dynamic, Audited, and Time-Limited Credential Generation**: Ensures security through audited and time-limited credential generation.\n\n**Security Measures**\n\n1. **Phishing Protection**: Magic Links eliminate the need for users to share credentials.\n2. **Web Application Security**: Measures include whitelisting domains, protecting against CSRF and XSS attacks, and implementing E2E TLS encryption.\n3. **Transport Layer Security (TLS)**: Encrypts data transmitted over the internet.\n4. **Cloud Security Setup**: Includes virtual private clouds (VPCs), intrusion detection systems, and data encryption at rest.\n5. **Compliance and Certification**: AES-256 encryption and SOC 2 Type 1 compliance.\n\n**Bug Bounty and Disclosure Policy**\n\n1. **HackerOne Program**: The organization proactively tests and strengthens its infrastructure through white-hat hacking and penetration testing.\n2. **Security Disclosure Policy**: Urges users to report vulnerabilities and offers a bounty through the HackerOne program."}
{"code": "For users to access their HSMs, they authenticate with the Magic auth relayer. Upon successful authentication, users receive a time-bound access token, which is traded for scoped credentials, and in turn, allows the client to interact with AWS directly. The scoped credentials exclusively enable _users_ to call the AWS to access their master keys stored on the HSM for encryption and decryption. This mechanism bypasses the Magic backend entirely, and Magic cannot forge nor intercept the scoped credentials because they are generated by the operations exclusively between the clients and AWS. Both access tokens and scoped credentials are created dynamically by AWS, with audit logs, and with TTLs enabled.\n", "explanation": "**Purpose and Functionality Summary:**\n\nThis mechanism authenticates users with the Magic auth relayer, granting them a time-bound access token. This token is exchanged for AWS-scoped credentials, enabling users to directly interact with their AWS accounts and access Hardware Security Module (HSM) keys for encryption and decryption, bypassing the Magic backend and maintaining security through dynamic, audited, and time-limited credential generation.", "metadata": {"repo": "magiclabs/documentation", "file": "security.md", "chunk_number": 14, "total_chunks": 22}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "**Security Overview**\n\nMagic is a cybersecurity product designed to address the challenges of user identity, authentication, and authorization in a user-friendly way. This solution provides a secure, non-custodial management of users' private keys for blockchain-based applications, bypassing traditional password-based systems.\n\n**Key Security Features**\n\n1. **Passwordless Authentication**: Magic uses public-private key pairs for authentication, inspired by the success of SSH access.\n2. **Delegated Key Management**: A pending US patent solution that securely stores users' private keys outside of vulnerable databases.\n3. **Hardware-Based Key Encryption**: User master keys are encrypted using Hardware Security Modules (HSMs) to protect against unauthorized access.\n4. **Non-Custodial Trust**: The delegated key management system ensures secure encryption and decryption operations, bypassing the Magic backend.\n\n**Security Architecture**\n\n1. **Time-Bound Access Tokens**: Users are granted time-bound access tokens through the Magic auth relayer.\n2. **AWS-Scoped Credentials**: Users can directly interact with their AWS accounts and access HSM keys for encryption and decryption.\n3. **Dynamic, Audited, and Time-Limited Credential Generation**: Ensures security through audited and time-limited credential generation.\n\n**Security Measures**\n\n1. **Phishing Protection**: Magic Links eliminate the need for users to share credentials.\n2. **Web Application Security**: Measures include whitelisting domains, protecting against CSRF and XSS attacks, and implementing E2E TLS encryption.\n3. **Transport Layer Security (TLS)**: Encrypts data transmitted over the internet.\n4. **Cloud Security Setup**: Includes virtual private clouds (VPCs), intrusion detection systems, and data encryption at rest.\n5. **Compliance and Certification**: AES-256 encryption and SOC 2 Type 1 compliance.\n\n**Bug Bounty and Disclosure Policy**\n\n1. **HackerOne Program**: The organization proactively tests and strengthens its infrastructure through white-hat hacking and penetration testing.\n2. **Security Disclosure Policy**: Urges users to report vulnerabilities and offers a bounty through the HackerOne program."}
{"code": "When a user signs up, a public-and-private key-pair is generated on the client-side for the user inside an iframe, inaccessible by the integrated app. Keys are generated with cryptographically secure pseudo-random 256-bit of entropy. Once generated, the key is then encrypted by the Delegated Key Management, where Magic never sees the raw private keys at any part of the flow. After encryption of the keys with the HSM, the encrypted key is then stored on the client-side iframe as well as uploaded to the Magic auth relayer for redundancy, in case the encrypted key on the client-side is accidentally removed. To ensure Magic cannot decrypt the encrypted key for redundancy, we have removed our permission to decrypt with our KMS instances. \n\nWhen users authenticate again, the encrypted private key is downloaded to the client. Users can then decrypt the encrypted private key directly with AWS KMS via Cognito.\n\n### Phishing Protection\n", "explanation": "This block describes the key generation and management process for user authentication. When a user signs up, a public-private key pair is generated on the client-side, encrypted with a Hardware Security Module (HSM), and stored both client-side and uploaded to a relayer for redundancy. The keys remain secured, as Magic does not have permission to decrypt them, and users can decrypt the key using AWS KMS via Cognito for authentication.", "metadata": {"repo": "magiclabs/documentation", "file": "security.md", "chunk_number": 15, "total_chunks": 22}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "**Security Overview**\n\nMagic is a cybersecurity product designed to address the challenges of user identity, authentication, and authorization in a user-friendly way. This solution provides a secure, non-custodial management of users' private keys for blockchain-based applications, bypassing traditional password-based systems.\n\n**Key Security Features**\n\n1. **Passwordless Authentication**: Magic uses public-private key pairs for authentication, inspired by the success of SSH access.\n2. **Delegated Key Management**: A pending US patent solution that securely stores users' private keys outside of vulnerable databases.\n3. **Hardware-Based Key Encryption**: User master keys are encrypted using Hardware Security Modules (HSMs) to protect against unauthorized access.\n4. **Non-Custodial Trust**: The delegated key management system ensures secure encryption and decryption operations, bypassing the Magic backend.\n\n**Security Architecture**\n\n1. **Time-Bound Access Tokens**: Users are granted time-bound access tokens through the Magic auth relayer.\n2. **AWS-Scoped Credentials**: Users can directly interact with their AWS accounts and access HSM keys for encryption and decryption.\n3. **Dynamic, Audited, and Time-Limited Credential Generation**: Ensures security through audited and time-limited credential generation.\n\n**Security Measures**\n\n1. **Phishing Protection**: Magic Links eliminate the need for users to share credentials.\n2. **Web Application Security**: Measures include whitelisting domains, protecting against CSRF and XSS attacks, and implementing E2E TLS encryption.\n3. **Transport Layer Security (TLS)**: Encrypts data transmitted over the internet.\n4. **Cloud Security Setup**: Includes virtual private clouds (VPCs), intrusion detection systems, and data encryption at rest.\n5. **Compliance and Certification**: AES-256 encryption and SOC 2 Type 1 compliance.\n\n**Bug Bounty and Disclosure Policy**\n\n1. **HackerOne Program**: The organization proactively tests and strengthens its infrastructure through white-hat hacking and penetration testing.\n2. **Security Disclosure Policy**: Urges users to report vulnerabilities and offers a bounty through the HackerOne program."}
{"code": "[Phishing attacks](https://en.wikipedia.org/wiki/Phishing) are an ongoing problem that exists in our industry today. However, this doesn't mean we are satisfied with the status quo, and are actively working to mitigate this. We have minimized the attack vectors significantly by going passwordless\u2014**no credentials are passed around!** Compared to traditional password-based solutions, Magic eliminates the case where users can be phished of compromising account information.\n\nPlus, if a magic link email is lost or stolen \\(or even somehow compromised in transit\\), a user's account is safe! The token included in the magic link email is only privileged to verify a login request _from the device and/or browsing context that initiated the request._ An attacker would require physical access to the user's device _and_ unencrypted email inbox to be malicious.\n", "explanation": "This block of text describes how a passwordless approach (specifically, Magic Links) helps mitigate phishing attacks. It eliminates the need for users to share credentials and limits the token's privileges to the device and browsing context that initiated the request, making it more secure.", "metadata": {"repo": "magiclabs/documentation", "file": "security.md", "chunk_number": 16, "total_chunks": 22}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "**Security Overview**\n\nMagic is a cybersecurity product designed to address the challenges of user identity, authentication, and authorization in a user-friendly way. This solution provides a secure, non-custodial management of users' private keys for blockchain-based applications, bypassing traditional password-based systems.\n\n**Key Security Features**\n\n1. **Passwordless Authentication**: Magic uses public-private key pairs for authentication, inspired by the success of SSH access.\n2. **Delegated Key Management**: A pending US patent solution that securely stores users' private keys outside of vulnerable databases.\n3. **Hardware-Based Key Encryption**: User master keys are encrypted using Hardware Security Modules (HSMs) to protect against unauthorized access.\n4. **Non-Custodial Trust**: The delegated key management system ensures secure encryption and decryption operations, bypassing the Magic backend.\n\n**Security Architecture**\n\n1. **Time-Bound Access Tokens**: Users are granted time-bound access tokens through the Magic auth relayer.\n2. **AWS-Scoped Credentials**: Users can directly interact with their AWS accounts and access HSM keys for encryption and decryption.\n3. **Dynamic, Audited, and Time-Limited Credential Generation**: Ensures security through audited and time-limited credential generation.\n\n**Security Measures**\n\n1. **Phishing Protection**: Magic Links eliminate the need for users to share credentials.\n2. **Web Application Security**: Measures include whitelisting domains, protecting against CSRF and XSS attacks, and implementing E2E TLS encryption.\n3. **Transport Layer Security (TLS)**: Encrypts data transmitted over the internet.\n4. **Cloud Security Setup**: Includes virtual private clouds (VPCs), intrusion detection systems, and data encryption at rest.\n5. **Compliance and Certification**: AES-256 encryption and SOC 2 Type 1 compliance.\n\n**Bug Bounty and Disclosure Policy**\n\n1. **HackerOne Program**: The organization proactively tests and strengthens its infrastructure through white-hat hacking and penetration testing.\n2. **Security Disclosure Policy**: Urges users to report vulnerabilities and offers a bounty through the HackerOne program."}
{"code": "However, a motivated attacker could create an identical replica of your application, which is a known phishing pattern that occurs today. For this case, we recommend developers to whitelist **specific domains for their public API keys on the** [**Magic Dashboard**](https://dashboard.magic.link) so that illegitimate applications cannot forge requests through the Magic SDKs.\n\n### CSRF and XSS\n\nCSRF and XSS are all the common attack vectors for web applications. Magic regularly audits 3rd-party scripts to enforce strict CSP headers to mitigate XSS and untrusted data ingestion exploits. CSRF tokens are used to ensure requests\u2019 authenticity, which prevents users\u2019 requests from being forged by malicious attackers. We adopt industry-best engineering practices building our products to make sure we are not vulnerable to any untrusted data injection. We are also rigorously implementing security controls and monitoring to protect the end-users further.\n\n### E2E TLS Encryption\n", "explanation": "This text block discusses security measures implemented by Magic to protect users from common web application attacks. Key points include:\n\n- Whitelisting domains for public API keys to prevent phishing\n- Protecting against CSRF and XSS attacks using CSP headers, CSRF tokens, and secure engineering practices\n- Implementing E2E TLS encryption to secure data transmission.", "metadata": {"repo": "magiclabs/documentation", "file": "security.md", "chunk_number": 17, "total_chunks": 22}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "**Security Overview**\n\nMagic is a cybersecurity product designed to address the challenges of user identity, authentication, and authorization in a user-friendly way. This solution provides a secure, non-custodial management of users' private keys for blockchain-based applications, bypassing traditional password-based systems.\n\n**Key Security Features**\n\n1. **Passwordless Authentication**: Magic uses public-private key pairs for authentication, inspired by the success of SSH access.\n2. **Delegated Key Management**: A pending US patent solution that securely stores users' private keys outside of vulnerable databases.\n3. **Hardware-Based Key Encryption**: User master keys are encrypted using Hardware Security Modules (HSMs) to protect against unauthorized access.\n4. **Non-Custodial Trust**: The delegated key management system ensures secure encryption and decryption operations, bypassing the Magic backend.\n\n**Security Architecture**\n\n1. **Time-Bound Access Tokens**: Users are granted time-bound access tokens through the Magic auth relayer.\n2. **AWS-Scoped Credentials**: Users can directly interact with their AWS accounts and access HSM keys for encryption and decryption.\n3. **Dynamic, Audited, and Time-Limited Credential Generation**: Ensures security through audited and time-limited credential generation.\n\n**Security Measures**\n\n1. **Phishing Protection**: Magic Links eliminate the need for users to share credentials.\n2. **Web Application Security**: Measures include whitelisting domains, protecting against CSRF and XSS attacks, and implementing E2E TLS encryption.\n3. **Transport Layer Security (TLS)**: Encrypts data transmitted over the internet.\n4. **Cloud Security Setup**: Includes virtual private clouds (VPCs), intrusion detection systems, and data encryption at rest.\n5. **Compliance and Certification**: AES-256 encryption and SOC 2 Type 1 compliance.\n\n**Bug Bounty and Disclosure Policy**\n\n1. **HackerOne Program**: The organization proactively tests and strengthens its infrastructure through white-hat hacking and penetration testing.\n2. **Security Disclosure Policy**: Urges users to report vulnerabilities and offers a bounty through the HackerOne program."}
{"code": "Transport Layer Security \\(TLS\\) is the standard protocol for encrypting data on the Internet. Web services provided over the Internet without TLS should be strongly discouraged. At Magic, all service communication is forced to be on TLS. No matter user data transported between Magic servers and user browser is sensitive or not, it is end-to-end encrypted. This applies to the 3rd-party services that we made available to the end-users. But Magic doesn\u2019t stop there. We took it further and implemented TLS for our internal service communication. The communication between our servers and the internal application secret storage, [Hashicorp Vault](https://www.vaultproject.io/), is also encrypted by the TLS. In the unlikely event of Magic servers being infiltrated, none of the sensitive data transported on the internal network is in plaintext.\n\nBy implementing TLS, it prevents man-in-the-middle attacks. Users using services provided by Magic are protected end-to-end.\n", "explanation": "The purpose of Transport Layer Security (TLS) is to encrypt data transmitted over the internet, protecting it from unauthorized access. Magic implements TLS for all service communication, including internal communications and 3rd-party services, to prevent man-in-the-middle attacks and ensure end-to-end encryption of sensitive data.", "metadata": {"repo": "magiclabs/documentation", "file": "security.md", "chunk_number": 18, "total_chunks": 22}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "**Security Overview**\n\nMagic is a cybersecurity product designed to address the challenges of user identity, authentication, and authorization in a user-friendly way. This solution provides a secure, non-custodial management of users' private keys for blockchain-based applications, bypassing traditional password-based systems.\n\n**Key Security Features**\n\n1. **Passwordless Authentication**: Magic uses public-private key pairs for authentication, inspired by the success of SSH access.\n2. **Delegated Key Management**: A pending US patent solution that securely stores users' private keys outside of vulnerable databases.\n3. **Hardware-Based Key Encryption**: User master keys are encrypted using Hardware Security Modules (HSMs) to protect against unauthorized access.\n4. **Non-Custodial Trust**: The delegated key management system ensures secure encryption and decryption operations, bypassing the Magic backend.\n\n**Security Architecture**\n\n1. **Time-Bound Access Tokens**: Users are granted time-bound access tokens through the Magic auth relayer.\n2. **AWS-Scoped Credentials**: Users can directly interact with their AWS accounts and access HSM keys for encryption and decryption.\n3. **Dynamic, Audited, and Time-Limited Credential Generation**: Ensures security through audited and time-limited credential generation.\n\n**Security Measures**\n\n1. **Phishing Protection**: Magic Links eliminate the need for users to share credentials.\n2. **Web Application Security**: Measures include whitelisting domains, protecting against CSRF and XSS attacks, and implementing E2E TLS encryption.\n3. **Transport Layer Security (TLS)**: Encrypts data transmitted over the internet.\n4. **Cloud Security Setup**: Includes virtual private clouds (VPCs), intrusion detection systems, and data encryption at rest.\n5. **Compliance and Certification**: AES-256 encryption and SOC 2 Type 1 compliance.\n\n**Bug Bounty and Disclosure Policy**\n\n1. **HackerOne Program**: The organization proactively tests and strengthens its infrastructure through white-hat hacking and penetration testing.\n2. **Security Disclosure Policy**: Urges users to report vulnerabilities and offers a bounty through the HackerOne program."}
{"code": "### Network Setup <a id=\"d191\"></a>\n\nMagic deploys services in virtual private clouds \\(VPC\\). Each environment \\(dev, stage, and prod\\) has a dedicated VPC, and no communication is allowed between VPCs except with the VPN\u2019s VPC. Within a VPC, we split up our network into public subnets and private subnets. Public subnets are the only network with Internet access. Services deployed in public subnets are accessible to the world, whereas the ones in the private subnets aren\u2019t. This allows us to deploy core business logic in the private network and protect those services from the Internet.\n\n### Intrusion Detection Setup\n\nMagic deploys intrusion detection systems in its cloud environment. We analyze all of our VPC logs, DNS logs and service logs to detect threats and any unauthorized access. We continuously monitor the traffic and take action when needed.\n\n### Data Encryption at Rest <a id=\"e543\"></a>\n", "explanation": "This block describes Magic's cloud security setup. \n\n- It sets up a virtual private cloud (VPC) for each environment, isolating them from each other and the public internet, except through a VPN.\n- It divides the network into public and private subnets, restricting internet access to public subnets.\n- It deploys intrusion detection systems to monitor logs and identify unauthorized access.\n- It also mentions data encryption at rest, although no details are provided.", "metadata": {"repo": "magiclabs/documentation", "file": "security.md", "chunk_number": 19, "total_chunks": 22}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "**Security Overview**\n\nMagic is a cybersecurity product designed to address the challenges of user identity, authentication, and authorization in a user-friendly way. This solution provides a secure, non-custodial management of users' private keys for blockchain-based applications, bypassing traditional password-based systems.\n\n**Key Security Features**\n\n1. **Passwordless Authentication**: Magic uses public-private key pairs for authentication, inspired by the success of SSH access.\n2. **Delegated Key Management**: A pending US patent solution that securely stores users' private keys outside of vulnerable databases.\n3. **Hardware-Based Key Encryption**: User master keys are encrypted using Hardware Security Modules (HSMs) to protect against unauthorized access.\n4. **Non-Custodial Trust**: The delegated key management system ensures secure encryption and decryption operations, bypassing the Magic backend.\n\n**Security Architecture**\n\n1. **Time-Bound Access Tokens**: Users are granted time-bound access tokens through the Magic auth relayer.\n2. **AWS-Scoped Credentials**: Users can directly interact with their AWS accounts and access HSM keys for encryption and decryption.\n3. **Dynamic, Audited, and Time-Limited Credential Generation**: Ensures security through audited and time-limited credential generation.\n\n**Security Measures**\n\n1. **Phishing Protection**: Magic Links eliminate the need for users to share credentials.\n2. **Web Application Security**: Measures include whitelisting domains, protecting against CSRF and XSS attacks, and implementing E2E TLS encryption.\n3. **Transport Layer Security (TLS)**: Encrypts data transmitted over the internet.\n4. **Cloud Security Setup**: Includes virtual private clouds (VPCs), intrusion detection systems, and data encryption at rest.\n5. **Compliance and Certification**: AES-256 encryption and SOC 2 Type 1 compliance.\n\n**Bug Bounty and Disclosure Policy**\n\n1. **HackerOne Program**: The organization proactively tests and strengthens its infrastructure through white-hat hacking and penetration testing.\n2. **Security Disclosure Policy**: Urges users to report vulnerabilities and offers a bounty through the HackerOne program."}
{"code": "Magic encrypts all of its databases, snapshots, automated backups and replicas with the industry-standard AES-256 encryption algorithm. The encryption and decryption are done automatically when data is written and read from the data storage.\n\n## Security Audit and Compliance <a id=\"b97d\"></a>\n\n### SOC 2 Type 1\n\nMagic's infrastructure has been thoroughly audited by [NCC Group](https://www.nccgroup.trust/us/) and [A-LIGN](https://a-lign.com/) and is **SOC 2 Type 1** compliant \\(SOC 2 Type 2 in progress\\). All the controls and procedures required by the compliance have been implemented at Magic.\n\nSecurity and trust are the top priority. They\u2019re not just architecture, but also intensive process and diligence around privacy, confidentiality, risk mitigation, and business continuity. Magic is also insured for cybercrime damage and loss.\n\n#### What's covered in our SOC 2 Information Security Management System \\(ISMS\\) \n\n| Technology | Process | Business |\n| :--- | :--- | :--- |", "explanation": "This text describes Magic's security and compliance measures. It explains that Magic encrypts its databases and data storage using AES-256 encryption and has achieved SOC 2 Type 1 compliance through audits by two reputable firms.", "metadata": {"repo": "magiclabs/documentation", "file": "security.md", "chunk_number": 20, "total_chunks": 22}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "**Security Overview**\n\nMagic is a cybersecurity product designed to address the challenges of user identity, authentication, and authorization in a user-friendly way. This solution provides a secure, non-custodial management of users' private keys for blockchain-based applications, bypassing traditional password-based systems.\n\n**Key Security Features**\n\n1. **Passwordless Authentication**: Magic uses public-private key pairs for authentication, inspired by the success of SSH access.\n2. **Delegated Key Management**: A pending US patent solution that securely stores users' private keys outside of vulnerable databases.\n3. **Hardware-Based Key Encryption**: User master keys are encrypted using Hardware Security Modules (HSMs) to protect against unauthorized access.\n4. **Non-Custodial Trust**: The delegated key management system ensures secure encryption and decryption operations, bypassing the Magic backend.\n\n**Security Architecture**\n\n1. **Time-Bound Access Tokens**: Users are granted time-bound access tokens through the Magic auth relayer.\n2. **AWS-Scoped Credentials**: Users can directly interact with their AWS accounts and access HSM keys for encryption and decryption.\n3. **Dynamic, Audited, and Time-Limited Credential Generation**: Ensures security through audited and time-limited credential generation.\n\n**Security Measures**\n\n1. **Phishing Protection**: Magic Links eliminate the need for users to share credentials.\n2. **Web Application Security**: Measures include whitelisting domains, protecting against CSRF and XSS attacks, and implementing E2E TLS encryption.\n3. **Transport Layer Security (TLS)**: Encrypts data transmitted over the internet.\n4. **Cloud Security Setup**: Includes virtual private clouds (VPCs), intrusion detection systems, and data encryption at rest.\n5. **Compliance and Certification**: AES-256 encryption and SOC 2 Type 1 compliance.\n\n**Bug Bounty and Disclosure Policy**\n\n1. **HackerOne Program**: The organization proactively tests and strengthens its infrastructure through white-hat hacking and penetration testing.\n2. **Security Disclosure Policy**: Urges users to report vulnerabilities and offers a bounty through the HackerOne program."}
{"code": "| Encryption and Key Management | Privacy and Security Training | Business Continuity |\n| Incident Response | Secure Information Handling | Risk Management |\n| Network & Remote Access | Vulnerability Management | Information Privacy & Security Governance |\n| Identity and Access Management | Asset Management | Physical and Environmental Security |\n| Device Security | Configuration and Change Management | Vendor Management |\n| Email and Messaging | Data Classification | Human Resources Information Security |\n| Logging | Data Retention and Disposal | Technology Acceptable Use |\n\n### HackerOne\n\nWe also participate in white-hat hacker events and run a private program on [HackerOne](https://www.hackerone.com/) \\(if you are interested in joining the program, please send us a message to [security@magic.link](mailto:security@fortmatic.com) with your H1 username\\). Magic's infrastructure also goes through vigorous penetration testing at least once a year.\n", "explanation": "This block outlines the components of an organization's information security framework, including various security, risk management, and compliance areas. It follows with a mention of their bug bounty program on HackerOne, indicating that the organization proactively tests and strengthens its infrastructure through white-hat hacking and penetration testing.", "metadata": {"repo": "magiclabs/documentation", "file": "security.md", "chunk_number": 21, "total_chunks": 22}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "**Security Overview**\n\nMagic is a cybersecurity product designed to address the challenges of user identity, authentication, and authorization in a user-friendly way. This solution provides a secure, non-custodial management of users' private keys for blockchain-based applications, bypassing traditional password-based systems.\n\n**Key Security Features**\n\n1. **Passwordless Authentication**: Magic uses public-private key pairs for authentication, inspired by the success of SSH access.\n2. **Delegated Key Management**: A pending US patent solution that securely stores users' private keys outside of vulnerable databases.\n3. **Hardware-Based Key Encryption**: User master keys are encrypted using Hardware Security Modules (HSMs) to protect against unauthorized access.\n4. **Non-Custodial Trust**: The delegated key management system ensures secure encryption and decryption operations, bypassing the Magic backend.\n\n**Security Architecture**\n\n1. **Time-Bound Access Tokens**: Users are granted time-bound access tokens through the Magic auth relayer.\n2. **AWS-Scoped Credentials**: Users can directly interact with their AWS accounts and access HSM keys for encryption and decryption.\n3. **Dynamic, Audited, and Time-Limited Credential Generation**: Ensures security through audited and time-limited credential generation.\n\n**Security Measures**\n\n1. **Phishing Protection**: Magic Links eliminate the need for users to share credentials.\n2. **Web Application Security**: Measures include whitelisting domains, protecting against CSRF and XSS attacks, and implementing E2E TLS encryption.\n3. **Transport Layer Security (TLS)**: Encrypts data transmitted over the internet.\n4. **Cloud Security Setup**: Includes virtual private clouds (VPCs), intrusion detection systems, and data encryption at rest.\n5. **Compliance and Certification**: AES-256 encryption and SOC 2 Type 1 compliance.\n\n**Bug Bounty and Disclosure Policy**\n\n1. **HackerOne Program**: The organization proactively tests and strengthens its infrastructure through white-hat hacking and penetration testing.\n2. **Security Disclosure Policy**: Urges users to report vulnerabilities and offers a bounty through the HackerOne program."}
{"code": "If you find any security vulnerability, please report it to [security@magic.link](mailto:security@fortmatic.com). If you are not in our bounty program, we would love to invite you to join our program on HackerOne. Bounty will be awarded if it is confirmed a valid vulnerability.\n\n\n\n\n\n", "explanation": "This text is a security disclosure policy, urging users to report any vulnerabilities to the designated email address, and potentially earning a bounty through the HackerOne program if the issue is verified.", "metadata": {"repo": "magiclabs/documentation", "file": "security.md", "chunk_number": 22, "total_chunks": 22}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "**Security Overview**\n\nMagic is a cybersecurity product designed to address the challenges of user identity, authentication, and authorization in a user-friendly way. This solution provides a secure, non-custodial management of users' private keys for blockchain-based applications, bypassing traditional password-based systems.\n\n**Key Security Features**\n\n1. **Passwordless Authentication**: Magic uses public-private key pairs for authentication, inspired by the success of SSH access.\n2. **Delegated Key Management**: A pending US patent solution that securely stores users' private keys outside of vulnerable databases.\n3. **Hardware-Based Key Encryption**: User master keys are encrypted using Hardware Security Modules (HSMs) to protect against unauthorized access.\n4. **Non-Custodial Trust**: The delegated key management system ensures secure encryption and decryption operations, bypassing the Magic backend.\n\n**Security Architecture**\n\n1. **Time-Bound Access Tokens**: Users are granted time-bound access tokens through the Magic auth relayer.\n2. **AWS-Scoped Credentials**: Users can directly interact with their AWS accounts and access HSM keys for encryption and decryption.\n3. **Dynamic, Audited, and Time-Limited Credential Generation**: Ensures security through audited and time-limited credential generation.\n\n**Security Measures**\n\n1. **Phishing Protection**: Magic Links eliminate the need for users to share credentials.\n2. **Web Application Security**: Measures include whitelisting domains, protecting against CSRF and XSS attacks, and implementing E2E TLS encryption.\n3. **Transport Layer Security (TLS)**: Encrypts data transmitted over the internet.\n4. **Cloud Security Setup**: Includes virtual private clouds (VPCs), intrusion detection systems, and data encryption at rest.\n5. **Compliance and Certification**: AES-256 encryption and SOC 2 Type 1 compliance.\n\n**Bug Bounty and Disclosure Policy**\n\n1. **HackerOne Program**: The organization proactively tests and strengthens its infrastructure through white-hat hacking and penetration testing.\n2. **Security Disclosure Policy**: Urges users to report vulnerabilities and offers a bounty through the HackerOne program."}
{"code": "---\ndescription: >-\n  Complete tutorial on how to plug Magic into Firebase Auth to access the full\n  power of Firebase!\n---\n\n# Firebase Integration\n\nMagic works out of the box with Firebase - seamlessly connecting state-of-the-art, no lock-in identity and authentication to the immense power of the Google platform.\n\nThis end-to-end example will adapt the [Magic Apple Store](full-stack-node-js.md) example into a Magic + Firebase application leveraging Firebase's powerful [Cloud Functions](https://firebase.google.com/docs/functions) and [Firestore](https://firebase.google.com/docs/firestore).\n\n## \ud83d\udce6 Setup Cloud Functions Project\n\nThis section is to help new developers who don't already have a project with Firebase Cloud Functions setup. **If you already have an** _**existing**_ **Cloud Functions project, feel free to skip to the** [**Next Section**](firebase-integration.md#connect-magic-to-firebase-auth)**!**\n\n### Create a Firebase Project\n", "explanation": "This block is a description and setup guide for integrating Magic authentication with Firebase, specifically using Cloud Functions and Firestore. It provides a step-by-step tutorial to adapt an existing example into a Magic + Firebase application.", "metadata": {"repo": "magiclabs/documentation", "file": "technologies/firebase-integration.md", "chunk_number": 1, "total_chunks": 13}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "**Firebase Integration with Magic Authentication Guide**\n\nThis guide provides a step-by-step tutorial on integrating Magic authentication with Firebase, using Cloud Functions and Firestore. The setup process involves:\n\n1. Setting up a Firebase project and Firestore database\n2. Initializing a Firebase project with Firestore and Cloud Functions enabled\n3. Installing Node.js and Firebase CLI\n4. Integrating Magic authentication with Firebase Auth\n5. Configuring and initializing a Firebase Cloud Function for authentication\n6. Obtaining and setting up a Firebase service account credential\n7. Deploying Firebase Cloud Firestore security rules\n\nThe authentication flow works as follows:\n\n1. User logs in with a Magic link, generating a DID token\n2. The DID token is passed to a Firebase Cloud Function to convert it to a Firebase user access token\n3. The access token is used to authenticate the user natively with Firebase\n\nThe guide provides example code for the frontend and backend implementation, as well as troubleshooting instructions for common errors."}
{"code": "1\ufe0f. In the [Firebase console](https://console.firebase.google.com/), click **Add project**, then select or enter a **Project name**.\n\n2\ufe0f. Click **Continue** through the steps and then Click **Create project**.\n\n3\ufe0f. After a minute or so, your project will be successfully created. You can then continue to your project home page, where you can enable the **Firestore** database feature. \n\n![](../.gitbook/assets/screen-shot-2020-03-19-at-12.26.24-am.png)\n\n4\ufe0f. After that you can click on the **Create database** button and you will be directed through a short flow to complete the setup. Don't worry too much about the secure rules yet, as we'll get to it later.\n\n![](../.gitbook/assets/screen-shot-2020-03-19-at-12.29.49-am.png)\n\n### Setup Node.js and the Firebase CLI\n", "explanation": "**Setting Up Firebase Project and Firestore Database**\n\nThis block provides step-by-step instructions to set up a Firebase project and Firestore database. It guides users through creating a project, enabling the Firestore database feature, and completing the initial setup process.", "metadata": {"repo": "magiclabs/documentation", "file": "technologies/firebase-integration.md", "chunk_number": 2, "total_chunks": 13}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "**Firebase Integration with Magic Authentication Guide**\n\nThis guide provides a step-by-step tutorial on integrating Magic authentication with Firebase, using Cloud Functions and Firestore. The setup process involves:\n\n1. Setting up a Firebase project and Firestore database\n2. Initializing a Firebase project with Firestore and Cloud Functions enabled\n3. Installing Node.js and Firebase CLI\n4. Integrating Magic authentication with Firebase Auth\n5. Configuring and initializing a Firebase Cloud Function for authentication\n6. Obtaining and setting up a Firebase service account credential\n7. Deploying Firebase Cloud Firestore security rules\n\nThe authentication flow works as follows:\n\n1. User logs in with a Magic link, generating a DID token\n2. The DID token is passed to a Firebase Cloud Function to convert it to a Firebase user access token\n3. The access token is used to authenticate the user natively with Firebase\n\nThe guide provides example code for the frontend and backend implementation, as well as troubleshooting instructions for common errors."}
{"code": "Now that your project is setup. You'll need a [Node.js](https://nodejs.org/) environment to write functions and properly initialize your project locally, and you'll need the Firebase CLI to deploy functions to the Cloud Functions runtime. Node.js versions 8 and 10 are [supported](https://firebase.google.com/docs/functions/manage-functions#set_nodejs_version). For installing Node.js and [npm](https://www.npmjs.org/), [Node Version Manager](https://github.com/creationix/nvm/blob/master/README.md) is recommended.\n\nOnce you have Node.js and npm installed, [install the Firebase CLI](https://firebase.google.com/docs/cli?#setup_update_cli) via your preferred method. To install the CLI via npm, use:\n\n```text\nnpm install -g firebase-tools\n```\n\n### Initialize Firebase SDK for Cloud Functions\n\nWhen you initialize Firebase SDK for Cloud Functions, you create an empty project containing dependencies and some minimal sample code, and you choose either TypeScript or JavaScript for composing functions.\n", "explanation": "**Purpose:** This block provides instructions for setting up a Node.js environment and the Firebase CLI, which are necessary for writing and deploying Cloud Functions.\n\n**Functionality:** The steps outlined enable installing Node.js and npm using Node Version Manager, installing the Firebase CLI via npm, and initializing the Firebase SDK for Cloud Functions.", "metadata": {"repo": "magiclabs/documentation", "file": "technologies/firebase-integration.md", "chunk_number": 3, "total_chunks": 13}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "**Firebase Integration with Magic Authentication Guide**\n\nThis guide provides a step-by-step tutorial on integrating Magic authentication with Firebase, using Cloud Functions and Firestore. The setup process involves:\n\n1. Setting up a Firebase project and Firestore database\n2. Initializing a Firebase project with Firestore and Cloud Functions enabled\n3. Installing Node.js and Firebase CLI\n4. Integrating Magic authentication with Firebase Auth\n5. Configuring and initializing a Firebase Cloud Function for authentication\n6. Obtaining and setting up a Firebase service account credential\n7. Deploying Firebase Cloud Firestore security rules\n\nThe authentication flow works as follows:\n\n1. User logs in with a Magic link, generating a DID token\n2. The DID token is passed to a Firebase Cloud Function to convert it to a Firebase user access token\n3. The access token is used to authenticate the user natively with Firebase\n\nThe guide provides example code for the frontend and backend implementation, as well as troubleshooting instructions for common errors."}
{"code": "**To initialize your project:**\n\n1\ufe0f. Run `firebase login` to log in via the browser and authenticate the firebase tool.\n\n2\ufe0f. Go to your Firebase project directory or create a new empty directory.\n\n3\ufe0f. Run `firebase init` command to initialize your project.\n\n![](../.gitbook/assets/screen-shot-2020-03-19-at-12.49.00-am.png)\n\nNow you will see some options you'll be able to multi-select, pick _both_ the **Firestore** and **Functions** options to be able to go through this tutorial.\n\n4\ufe0f. After that you will be presented an option to Use an existing project, pick this option and select the project name you just created on the [Firebase console](https://console.firebase.google.com/).\n\n![](../.gitbook/assets/screen-shot-2020-03-19-at-12.54.03-am.png)\n\n5\ufe0f. Select _Default_ or _Yes_ to every step after to initialize the Firestore configurations.\n\n![](../.gitbook/assets/screen-shot-2020-03-19-at-1.00.40-am.png)\n", "explanation": "**Initialization Steps for a Firebase Project**\n\nThis block outlines the steps to initialize a Firebase project, specifically for a tutorial involving Firestore and Cloud Functions. It guides the user through:\n\n1. Logging in via the Firebase tool.\n2. Initializing the project with both Firestore and Functions enabled.\n3. Linking the project to an existing project on the Firebase console.\n\nBy following these steps, the user sets up a Firebase project with the required configurations for the tutorial.", "metadata": {"repo": "magiclabs/documentation", "file": "technologies/firebase-integration.md", "chunk_number": 4, "total_chunks": 13}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "**Firebase Integration with Magic Authentication Guide**\n\nThis guide provides a step-by-step tutorial on integrating Magic authentication with Firebase, using Cloud Functions and Firestore. The setup process involves:\n\n1. Setting up a Firebase project and Firestore database\n2. Initializing a Firebase project with Firestore and Cloud Functions enabled\n3. Installing Node.js and Firebase CLI\n4. Integrating Magic authentication with Firebase Auth\n5. Configuring and initializing a Firebase Cloud Function for authentication\n6. Obtaining and setting up a Firebase service account credential\n7. Deploying Firebase Cloud Firestore security rules\n\nThe authentication flow works as follows:\n\n1. User logs in with a Magic link, generating a DID token\n2. The DID token is passed to a Firebase Cloud Function to convert it to a Firebase user access token\n3. The access token is used to authenticate the user natively with Firebase\n\nThe guide provides example code for the frontend and backend implementation, as well as troubleshooting instructions for common errors."}
{"code": "6\ufe0f. For the purpose of this tutorial, select _Javascript_ language option when presented for Cloud Functions configurations.\n\n![](../.gitbook/assets/screen-shot-2020-03-19-at-1.00.48-am.png)\n\n7\ufe0f. Continue the steps and after the npm packages are installed, your project will be fully initialized and        ready to go! \ud83d\udd25\n\n## \ud83d\udd0c Connect Magic to Firebase Auth\n\nMagic doesn't replace Firebase Auth, and can actually integrate seamlessly into it so you will be able to have the same permissions and database rules configurations as if it's native Firebase Auth. Before we go into writing the Magic + Firebase adapter Cloud Function, understanding the data flow on the front-end code will be very helpful.\n\n{% hint style=\"info\" %}\nIf you'd like to skip straight to the implementation. Here's the [**complete front-end source code**](https://go.magic.link/apple-store-firebase-code) on CodeSandBox as well as the [**Firebase callable function code**](https://go.magic.link/magic-firebase-auth) on Github.", "explanation": "This block provides setup instructions and configuration information for integrating Magic authentication with Firebase Auth in a cloud-based project. It includes selecting JavaScript as the language option for Cloud Functions and initializing a project, and then provides links to complete example code on both the frontend and backend for implementation reference.", "metadata": {"repo": "magiclabs/documentation", "file": "technologies/firebase-integration.md", "chunk_number": 5, "total_chunks": 13}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "**Firebase Integration with Magic Authentication Guide**\n\nThis guide provides a step-by-step tutorial on integrating Magic authentication with Firebase, using Cloud Functions and Firestore. The setup process involves:\n\n1. Setting up a Firebase project and Firestore database\n2. Initializing a Firebase project with Firestore and Cloud Functions enabled\n3. Installing Node.js and Firebase CLI\n4. Integrating Magic authentication with Firebase Auth\n5. Configuring and initializing a Firebase Cloud Function for authentication\n6. Obtaining and setting up a Firebase service account credential\n7. Deploying Firebase Cloud Firestore security rules\n\nThe authentication flow works as follows:\n\n1. User logs in with a Magic link, generating a DID token\n2. The DID token is passed to a Firebase Cloud Function to convert it to a Firebase user access token\n3. The access token is used to authenticate the user natively with Firebase\n\nThe guide provides example code for the frontend and backend implementation, as well as troubleshooting instructions for common errors."}
{"code": "{% endhint %}\n\n### Auth Data Flow\n\n1. User logs in in with Magic link, which upon successful login, generates a [DID token](../decentralized-id.md)\n2. The DID token is passed into the `auth` Firebase `httpsCallable` Cloud Function that we will be implementing in later section\n3. The `auth` Cloud Function takes in the DID token and converts it into a Firebase user access token\n4. Pass the Firebase user access token into the `firebase.auth().signInWithCustomToken` method to authenticate user natively with Firebase\n\nHere's a sample front-end code snippet to implement this data flow:\n\n```javascript\n/* Your Front-end Code */\n\n...\n\n/* User login with Magic link to get DID token */\nconst didToken = await magic.auth.loginWithMagicLink({ email });\nconst auth = firebase.functions().httpsCallable(\"auth\");\n/* DID token is passed into the auth callable function */\nlet result = (await auth({ didToken })).data;\n/* Firebase user access token is used to authenticate */", "explanation": "**Auth Data Flow Summary**\n\nThis block describes a user authentication flow using Magic links and Firebase. The flow works as follows:\n\n1. User logs in with a Magic link, generating a DID token.\n2. The DID token is passed to a Firebase Cloud Function (`auth`) to convert it to a Firebase user access token.\n3. The access token is used to authenticate the user natively with Firebase using `signInWithCustomToken`.", "metadata": {"repo": "magiclabs/documentation", "file": "technologies/firebase-integration.md", "chunk_number": 6, "total_chunks": 13}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "**Firebase Integration with Magic Authentication Guide**\n\nThis guide provides a step-by-step tutorial on integrating Magic authentication with Firebase, using Cloud Functions and Firestore. The setup process involves:\n\n1. Setting up a Firebase project and Firestore database\n2. Initializing a Firebase project with Firestore and Cloud Functions enabled\n3. Installing Node.js and Firebase CLI\n4. Integrating Magic authentication with Firebase Auth\n5. Configuring and initializing a Firebase Cloud Function for authentication\n6. Obtaining and setting up a Firebase service account credential\n7. Deploying Firebase Cloud Firestore security rules\n\nThe authentication flow works as follows:\n\n1. User logs in with a Magic link, generating a DID token\n2. The DID token is passed to a Firebase Cloud Function to convert it to a Firebase user access token\n3. The access token is used to authenticate the user natively with Firebase\n\nThe guide provides example code for the frontend and backend implementation, as well as troubleshooting instructions for common errors."}
{"code": "await firebase.auth().signInWithCustomToken(result.token);\n\n...\n```\n\n### Get Firebase Config\n\nSetting up your Firebase front-end project properly can help avoid a lot of headaches later. Note that there's a `firebaseConfig` configuration in our example source code.  You'll be able to get this configuration in your project's settings view.\n\n![Navigate to settings for your project](../.gitbook/assets/screen-shot-2020-03-18-at-10.00.47-pm%20%281%29.png)\n\n![Copy and paste this configuration to your front-end code](../.gitbook/assets/screen-shot-2020-03-18-at-10.02.07-pm.png)\n\n## \ud83d\udd10 Implement Auth Callable Function\n", "explanation": "This code block signs in a user to Firebase using a custom authentication token.", "metadata": {"repo": "magiclabs/documentation", "file": "technologies/firebase-integration.md", "chunk_number": 7, "total_chunks": 13}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "**Firebase Integration with Magic Authentication Guide**\n\nThis guide provides a step-by-step tutorial on integrating Magic authentication with Firebase, using Cloud Functions and Firestore. The setup process involves:\n\n1. Setting up a Firebase project and Firestore database\n2. Initializing a Firebase project with Firestore and Cloud Functions enabled\n3. Installing Node.js and Firebase CLI\n4. Integrating Magic authentication with Firebase Auth\n5. Configuring and initializing a Firebase Cloud Function for authentication\n6. Obtaining and setting up a Firebase service account credential\n7. Deploying Firebase Cloud Firestore security rules\n\nThe authentication flow works as follows:\n\n1. User logs in with a Magic link, generating a DID token\n2. The DID token is passed to a Firebase Cloud Function to convert it to a Firebase user access token\n3. The access token is used to authenticate the user natively with Firebase\n\nThe guide provides example code for the frontend and backend implementation, as well as troubleshooting instructions for common errors."}
{"code": "The Auth callable Cloud Function will be the crucial piece to converting a Magic DID token into a Firebase user access token to enable this entire experience. We'll go through the configuration steps first, but if you are already familiar with Cloud Function configurations, you can directly skip ahead to the function implementation or download the entire [**project example**](https://go.magic.link/magic-firebase-auth) ****from Github!\n\n### Configure and Initialize\n\n1\ufe0f. In your Cloud Functions file, you'll have to initialize Firebase with its admin SDK and your **service account credential**.\n\n```javascript\nrequire('dotenv').config();\n\nconst functions = require(\"firebase-functions\");\nconst admin = require(\"firebase-admin\");\nconst serviceAccount = require(\"./path/to/my-project.json\");\n\nadmin.initializeApp({\n  credential: admin.credential.cert(serviceAccount),\n  databaseURL: \"https://my-project.firebaseio.com\"\n});\n```\n", "explanation": "This block configures and initializes a Firebase Cloud Function with the admin SDK, using a service account credential, to set up the environment for later authentication implementation.", "metadata": {"repo": "magiclabs/documentation", "file": "technologies/firebase-integration.md", "chunk_number": 8, "total_chunks": 13}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "**Firebase Integration with Magic Authentication Guide**\n\nThis guide provides a step-by-step tutorial on integrating Magic authentication with Firebase, using Cloud Functions and Firestore. The setup process involves:\n\n1. Setting up a Firebase project and Firestore database\n2. Initializing a Firebase project with Firestore and Cloud Functions enabled\n3. Installing Node.js and Firebase CLI\n4. Integrating Magic authentication with Firebase Auth\n5. Configuring and initializing a Firebase Cloud Function for authentication\n6. Obtaining and setting up a Firebase service account credential\n7. Deploying Firebase Cloud Firestore security rules\n\nThe authentication flow works as follows:\n\n1. User logs in with a Magic link, generating a DID token\n2. The DID token is passed to a Firebase Cloud Function to convert it to a Firebase user access token\n3. The access token is used to authenticate the user natively with Firebase\n\nThe guide provides example code for the frontend and backend implementation, as well as troubleshooting instructions for common errors."}
{"code": "2\ufe0f. Getting the **service account credential** is extremely important to make sure you have the right permissions to create the Firebase user access token. You can find it in your **Project settings** page, under the **Service accounts** tab, and then click on **Generate new private key**.\n\n![](../.gitbook/assets/screen-shot-2020-03-19-at-12.58.45-pm.png)\n\n3\ufe0f. After downloading the credential, you can put the `.json` credential file into your project directory and update the path in the `const serviceAccount = require(\"./path/to/my-project.json\");` line, as well as updating the `databaseURL` to the one you see in your project settings dashboard.\n\n{% hint style=\"warning\" %}\nThese are your firebase server side credentials, keep them secret!\n{% endhint %}\n\n### Function Implementation\n", "explanation": "This block of text provides instructions on obtaining and setting up a Firebase service account credential, which is necessary for creating a user access token. It explains where to find the credential, how to download and configure it in a project, and warns users to keep it secret for security reasons.", "metadata": {"repo": "magiclabs/documentation", "file": "technologies/firebase-integration.md", "chunk_number": 9, "total_chunks": 13}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "**Firebase Integration with Magic Authentication Guide**\n\nThis guide provides a step-by-step tutorial on integrating Magic authentication with Firebase, using Cloud Functions and Firestore. The setup process involves:\n\n1. Setting up a Firebase project and Firestore database\n2. Initializing a Firebase project with Firestore and Cloud Functions enabled\n3. Installing Node.js and Firebase CLI\n4. Integrating Magic authentication with Firebase Auth\n5. Configuring and initializing a Firebase Cloud Function for authentication\n6. Obtaining and setting up a Firebase service account credential\n7. Deploying Firebase Cloud Firestore security rules\n\nThe authentication flow works as follows:\n\n1. User logs in with a Magic link, generating a DID token\n2. The DID token is passed to a Firebase Cloud Function to convert it to a Firebase user access token\n3. The access token is used to authenticate the user natively with Firebase\n\nThe guide provides example code for the frontend and backend implementation, as well as troubleshooting instructions for common errors."}
{"code": "After all the setup, now let's finally get to the fun part! \ud83c\udf89 Essentially the `auth` callable function handles authentication for two types of scenarios **\\(1\\) existing users who already have email addresses set, including legacy Firebase users**, and **\\(2\\) create new users based on their email addresses and** [**DID**](../decentralized-id.md) **token generated by Magic**. This callable function will return a unique Firebase user access token and pass it back to the client.\n\nThis is a sample implementation on how you can implement this auth function based on those two scenarios via two handler functions:\n\n```javascript\nexports.auth = functions.https.onCall(async (data, context) => {\n  const { Magic } = require(\"@magic-sdk/admin\");\n  const magic = new Magic(\"YOUR_SECRET_API_KEY\");\n  const didToken = data.didToken;\n  const metadata = await magic.users.getMetadataByToken(didToken);\n  const email = metadata.email;\n  try {\n    /* Get existing user by email address,", "explanation": "**Purpose and Functionality:** \n\nThe `auth` callable function handles authentication for existing and new users based on their email addresses and Magic DID tokens. It returns a unique Firebase user access token to the client.", "metadata": {"repo": "magiclabs/documentation", "file": "technologies/firebase-integration.md", "chunk_number": 10, "total_chunks": 13}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "**Firebase Integration with Magic Authentication Guide**\n\nThis guide provides a step-by-step tutorial on integrating Magic authentication with Firebase, using Cloud Functions and Firestore. The setup process involves:\n\n1. Setting up a Firebase project and Firestore database\n2. Initializing a Firebase project with Firestore and Cloud Functions enabled\n3. Installing Node.js and Firebase CLI\n4. Integrating Magic authentication with Firebase Auth\n5. Configuring and initializing a Firebase Cloud Function for authentication\n6. Obtaining and setting up a Firebase service account credential\n7. Deploying Firebase Cloud Firestore security rules\n\nThe authentication flow works as follows:\n\n1. User logs in with a Magic link, generating a DID token\n2. The DID token is passed to a Firebase Cloud Function to convert it to a Firebase user access token\n3. The access token is used to authenticate the user natively with Firebase\n\nThe guide provides example code for the frontend and backend implementation, as well as troubleshooting instructions for common errors."}
{"code": "       compatible with legacy Firebase email users */\n    let user = (await admin.auth().getUserByEmail(email)).toJSON();\n    const claim = magic.token.decode(didToken)[1];\n    return await handleExistingUser(user, claim);\n  } catch (err) {\n    if (err.code === \"auth/user-not-found\") {\n      /* Create new user */\n      return await handleNewUser(email);\n    } else {\n      throw err;\n    }\n  }\n});\n```\n\nThe existing user handler function takes in the existing user object from Firebase and the claim from the DID token to check for [replay attack](https://go.magic.link/replay-attack), and if successful, generates and returns a valid Firebase user access token.\n\n```javascript\nconst handleExistingUser = async (user, claim) => {\n  /* Check for replay attack (https://go.magic.link/replay-attack) */\n  let lastSignInTime = Date.parse(user.metadata.lastSignInTime) / 1000;\n  let tokenIssuedTime = claim.iat;\n  if (tokenIssuedTime <= lastSignInTime) {\n    throw new functions.https.HttpsError(\n      \"invalid-argument\",", "explanation": "**Purpose and Functionality Summary**\n\nThis block of code handles authentication for Firebase users, specifically checking if a user exists or not. If a user exists, it checks for potential replay attacks by verifying the token issued time against the user's last sign-in time. If the check passes, it generates a valid Firebase user access token. If the user does not exist, it creates a new user. If an error occurs during the process, it throws the error or returns a relevant error message.", "metadata": {"repo": "magiclabs/documentation", "file": "technologies/firebase-integration.md", "chunk_number": 11, "total_chunks": 13}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "**Firebase Integration with Magic Authentication Guide**\n\nThis guide provides a step-by-step tutorial on integrating Magic authentication with Firebase, using Cloud Functions and Firestore. The setup process involves:\n\n1. Setting up a Firebase project and Firestore database\n2. Initializing a Firebase project with Firestore and Cloud Functions enabled\n3. Installing Node.js and Firebase CLI\n4. Integrating Magic authentication with Firebase Auth\n5. Configuring and initializing a Firebase Cloud Function for authentication\n6. Obtaining and setting up a Firebase service account credential\n7. Deploying Firebase Cloud Firestore security rules\n\nThe authentication flow works as follows:\n\n1. User logs in with a Magic link, generating a DID token\n2. The DID token is passed to a Firebase Cloud Function to convert it to a Firebase user access token\n3. The access token is used to authenticate the user natively with Firebase\n\nThe guide provides example code for the frontend and backend implementation, as well as troubleshooting instructions for common errors."}
{"code": "      \"This DID token is invalid.\"\n    );\n  }\n  let firebaseToken = await admin.auth().createCustomToken(user.uid);\n  return {\n    uid: user.uid,\n    token: firebaseToken\n  };\n};\n```\n\nThe new user handler function takes in the email and creates a new Firebase user based on it, and then generates and returns a valid Firebase user access token.\n\n```javascript\nconst handleNewUser = async email => {\n  const newUser = await admin.auth().createUser({\n    email: email,\n    emailVerified: true\n  });\n  let firebaseToken = await admin.auth().createCustomToken(newUser.uid);\n  return {\n    uid: newUser.uid,\n    token: firebaseToken\n  };\n};\n```\n\n{% hint style=\"info\" %}\nYou can find the complete [**auth callable function project**](https://go.magic.link/magic-firebase-auth) on our Github.\n{% endhint %}\n\n## \ud83d\ude80 Wrapping Up\n\n### Configure Firestore Rules\n", "explanation": "**Purpose:** Create a new Firebase user and generate a custom access token for them.\n\n**Functionality:**\n\n1. The function takes an email as input and creates a new user in Firebase Auth.\n2. It then generates a custom token using the new user's UID.\n3. Finally, it returns an object containing the user's UID and custom token.", "metadata": {"repo": "magiclabs/documentation", "file": "technologies/firebase-integration.md", "chunk_number": 12, "total_chunks": 13}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "**Firebase Integration with Magic Authentication Guide**\n\nThis guide provides a step-by-step tutorial on integrating Magic authentication with Firebase, using Cloud Functions and Firestore. The setup process involves:\n\n1. Setting up a Firebase project and Firestore database\n2. Initializing a Firebase project with Firestore and Cloud Functions enabled\n3. Installing Node.js and Firebase CLI\n4. Integrating Magic authentication with Firebase Auth\n5. Configuring and initializing a Firebase Cloud Function for authentication\n6. Obtaining and setting up a Firebase service account credential\n7. Deploying Firebase Cloud Firestore security rules\n\nThe authentication flow works as follows:\n\n1. User logs in with a Magic link, generating a DID token\n2. The DID token is passed to a Firebase Cloud Function to convert it to a Firebase user access token\n3. The access token is used to authenticate the user natively with Firebase\n\nThe guide provides example code for the frontend and backend implementation, as well as troubleshooting instructions for common errors."}
{"code": "After you've implemented the `auth` callable function, go to the `firestore.rules` file in your local project directory and update it with the following - essentially only allowing the currently authenticated user to perform CRUD in the `users` collection.\n\n```javascript\nrules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    match /users/{userId} {\n      allow read, write: if request.auth.uid == userId;\n    }\n  }\n}\n```\n\n### Deploy to Firebase\n\nNow you can simply run the following command with the Firebase CLI in your project directory to deploy your code to Firebase! \ud83c\udf89\n\n```javascript\nfirebase deploy\n```\n\n## \ud83d\udc77 Troubleshooting\n\n### EAI\\_AGAIN Error\n\nIf you are seeing an error like below in your Firebase Cloud Functions log, it's because Firebase requires project **Billing** to be configured before enabling access to external networks.\n\n![](../.gitbook/assets/screen-shot-2020-03-24-at-12.27.09-am.png)\n\n", "explanation": "This block explains how to set up and deploy Firebase Cloud Firestore security rules, and troubleshoot a common error. \n\nThe provided rules allow only the currently authenticated user to read and write to their own user document in the `users` collection. \n\nAdditionally, it provides instructions for deploying to Firebase using the Firebase CLI and troubleshoots the \"EAI_AGAIN\" error that may occur due to unconfigured project billing.", "metadata": {"repo": "magiclabs/documentation", "file": "technologies/firebase-integration.md", "chunk_number": 13, "total_chunks": 13}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "**Firebase Integration with Magic Authentication Guide**\n\nThis guide provides a step-by-step tutorial on integrating Magic authentication with Firebase, using Cloud Functions and Firestore. The setup process involves:\n\n1. Setting up a Firebase project and Firestore database\n2. Initializing a Firebase project with Firestore and Cloud Functions enabled\n3. Installing Node.js and Firebase CLI\n4. Integrating Magic authentication with Firebase Auth\n5. Configuring and initializing a Firebase Cloud Function for authentication\n6. Obtaining and setting up a Firebase service account credential\n7. Deploying Firebase Cloud Firestore security rules\n\nThe authentication flow works as follows:\n\n1. User logs in with a Magic link, generating a DID token\n2. The DID token is passed to a Firebase Cloud Function to convert it to a Firebase user access token\n3. The access token is used to authenticate the user natively with Firebase\n\nThe guide provides example code for the frontend and backend implementation, as well as troubleshooting instructions for common errors."}
{"code": "---\ndescription: End-to-end example showing how Magic works with the Node.js Express framework.\n---\n\n# Node.js Integration\n\n## \ud83c\udfd7\ufe0f Get Template Code\n\nWelcome to our end-to-end example to demonstrate how Magic works with your own Node.js  server using the popular [Express](https://expressjs.com/) framework! If you haven't gone through the [Get Started](../get-started.md) guide, we strongly recommend going through it before starting this tutorial!\n\nIn this example, we'll be implementing an additional feature in the Hello World example - **letting only authorized users buy apples \ud83c\udf4e and see how many they own!**\n\n{% hint style=\"info\" %}\n**\ud83d\udc49  Get our** [**Template Code**](https://go.magic.link/apple-store-nodejs-template) **to continue this tutorial!** \n\nSince there are quite a few steps, we'll be walking through each of the steps in this documentation instead of letting you copy and paste them.\n{% endhint %}\n\n## \ud83d\uddfa\ufe0f Walkthrough\n", "explanation": "**Purpose and Functionality:**\nThis block serves as an introduction to a tutorial on integrating Magic with a Node.js server using the Express framework. It provides an overview of the tutorial's objectives and instructs users to obtain the necessary template code to proceed with the walkthrough.", "metadata": {"repo": "magiclabs/documentation", "file": "technologies/full-stack-node-js.md", "chunk_number": 1, "total_chunks": 11}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "Here is a concise summary of the file 'technologies/full-stack-node-js.md':\n\nThis tutorial provides a comprehensive guide to integrating Magic with a Node.js server using the Express framework. It covers setting up a full-stack Node.js server with Express and NeDB database, integrating Magic API keys, and implementing Passport.js authentication with Magic strategy. The tutorial also covers user authentication behaviors, including signup and login, as well as implementing a login endpoint with Passport middleware. Additionally, it defines Passport.js middleware for serializing and deserializing user data during session management. The tutorial also covers implementing authentication checks, retrieving and updating user data, and implementing a logout functionality using the Magic Admin SDK and Express.js. Overall, the tutorial guides users in building a working Apple Store app with Magic authentication and provides links to further learning resources."}
{"code": "The full stack Node.js server is set up using the vanilla Express template on CodeSandBox, using [NeDB](https://github.com/louischatriot/nedb) as an ultra lightweight database \\(you can switch it to other databases like MongoDB too\\) and the [`express-session`](https://github.com/louischatriot/nedb) NPM package to manage sessions. We'll make use of the Magic _Admin_ SDK for this example. You can learn how to install it via npm or yarn in the [Node.js reference](../admin-sdk/node-js/get-started.md#installation).\n\n### 1\ufe0f. Setup Environment Variables\n\nNow that you've opened the CodeSandBox [**Template Code**](https://codesandbox.io/s/github/MagicHQ/example-nodejs), you can first click **\"Fork\"** to create your own instance to play with.\n\n![](../.gitbook/assets/fork-template.png)\n\nAfter you've forked the template, you can click on the **\"Server Rack\"** icon on the left menu and then update your **\"Secret Keys\"**.\n\n![](../.gitbook/assets/config-secrets.png)\n", "explanation": "This block describes the setup of a full-stack Node.js server using Express and NeDB database. It provides instructions on forking a template on CodeSandBox, installing required packages, and setting environment variables through the \"Server Rack\" icon.", "metadata": {"repo": "magiclabs/documentation", "file": "technologies/full-stack-node-js.md", "chunk_number": 2, "total_chunks": 11}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "Here is a concise summary of the file 'technologies/full-stack-node-js.md':\n\nThis tutorial provides a comprehensive guide to integrating Magic with a Node.js server using the Express framework. It covers setting up a full-stack Node.js server with Express and NeDB database, integrating Magic API keys, and implementing Passport.js authentication with Magic strategy. The tutorial also covers user authentication behaviors, including signup and login, as well as implementing a login endpoint with Passport middleware. Additionally, it defines Passport.js middleware for serializing and deserializing user data during session management. The tutorial also covers implementing authentication checks, retrieving and updating user data, and implementing a logout functionality using the Magic Admin SDK and Express.js. Overall, the tutorial guides users in building a working Apple Store app with Magic authentication and provides links to further learning resources."}
{"code": "To grab these two values, you need to sign up or log in to the [**Magic Dashboard**](https://dashboard.magic.link/) to view your API keys. Once you are logged in you, you can then add  `MAGIC_SECRET_KEY` as Name, and your actual _secret_ API key, which looks something like `sk_test_*********` as Value.\n\n![](../.gitbook/assets/image.png)\n\nOnce that's done, you can add `MAGIC_PUBLISHABLE_KEY` as Name, and your _publishable_ API key, which looks something like `pk_test_*********` as Value.\n\n![](../.gitbook/assets/image%20%282%29.png)\n\nOnce the keys are copy and pasted in the **Secret Keys** section, you can hit **Restart Server** to load these environment variables in the CodeSandBox container.\n\n![](../.gitbook/assets/restart-server.png)\n\nNote that the `MAGIC_SECRET_KEY` environment variable is used to initialize the Magic Admin SDK.\n\n```javascript\n/* 1\ufe0f\u20e3 Setup Magic Admin SDK */\nconst { Magic } = require(\"@magic-sdk/admin\");\nconst magic = new Magic(process.env.MAGIC_SECRET_KEY);\n```\n", "explanation": "**Purpose:** This block guides users in setting up Magic API keys in CodeSandbox for use with the Magic Admin SDK.\n\n**Functionality:** It instructs users to log in to the Magic Dashboard, copy their secret and publishable API keys, and paste them into the Secret Keys section of CodeSandbox. After restarting the server, the keys are loaded as environment variables, enabling the Magic Admin SDK initialization using the `MAGIC_SECRET_KEY` variable.", "metadata": {"repo": "magiclabs/documentation", "file": "technologies/full-stack-node-js.md", "chunk_number": 3, "total_chunks": 11}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "Here is a concise summary of the file 'technologies/full-stack-node-js.md':\n\nThis tutorial provides a comprehensive guide to integrating Magic with a Node.js server using the Express framework. It covers setting up a full-stack Node.js server with Express and NeDB database, integrating Magic API keys, and implementing Passport.js authentication with Magic strategy. The tutorial also covers user authentication behaviors, including signup and login, as well as implementing a login endpoint with Passport middleware. Additionally, it defines Passport.js middleware for serializing and deserializing user data during session management. The tutorial also covers implementing authentication checks, retrieving and updating user data, and implementing a logout functionality using the Magic Admin SDK and Express.js. Overall, the tutorial guides users in building a working Apple Store app with Magic authentication and provides links to further learning resources."}
{"code": "{% hint style=\"success\" %}\nNow your very own full-stack Magic Apple Store application is running! \ud83c\udf4e The content below will explain each of  major section of the code base.\n{% endhint %}\n\n### 2\ufe0f. Implement Auth Strategy\n\nMagic leverages the popular and battle-tested [Passport](http://www.passportjs.org/) authentication middleware package for Express to provide our passwordless authentication service. This way it will be very seamless and easy to integrate for developers who are already familiar with Passport! _\\(Don't worry if you are not, we'll go through comprehensive examples in this tutorial\\)_ \n\nMagic's authentication is based on the [Decentralized ID](../decentralized-id.md) \\(DID\\) token standard, and the strategy implemented by `passport-magic` already takes care of the heavy-lifting by verifying the token and  returning the authenticated user object. In this strategy, we'd like to define what to do if this user is a new user versus a returning user.\n", "explanation": "**Summary:** \nThis block explains the authentication strategy of the Magic Apple Store application, which uses Passport authentication middleware and the Decentralized ID (DID) token standard. It introduces the `passport-magic` strategy, where a user object is returned after token verification, and sets the stage for defining user flows for new and returning users.", "metadata": {"repo": "magiclabs/documentation", "file": "technologies/full-stack-node-js.md", "chunk_number": 4, "total_chunks": 11}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "Here is a concise summary of the file 'technologies/full-stack-node-js.md':\n\nThis tutorial provides a comprehensive guide to integrating Magic with a Node.js server using the Express framework. It covers setting up a full-stack Node.js server with Express and NeDB database, integrating Magic API keys, and implementing Passport.js authentication with Magic strategy. The tutorial also covers user authentication behaviors, including signup and login, as well as implementing a login endpoint with Passport middleware. Additionally, it defines Passport.js middleware for serializing and deserializing user data during session management. The tutorial also covers implementing authentication checks, retrieving and updating user data, and implementing a logout functionality using the Magic Admin SDK and Express.js. Overall, the tutorial guides users in building a working Apple Store app with Magic authentication and provides links to further learning resources."}
{"code": "Note that in the DID standard we use `issuer` quite a lot, which looks something like `did:ethr:0xE0cef4417a772512E6C95cEf366403839b0D6D6D`, it represents a unique blockchain public address which can often be used as an identifier field. The issuer can be used to fetch the authenticated user's metadata, which includes their associated email address.\n\n```javascript\n/* In routes/user.js */\n\n/* 2\ufe0f\u20e3 Implement Auth Strategy */\nconst passport = require(\"passport\");\nconst MagicStrategy = require(\"passport-magic\").Strategy;\n\nconst strategy = new MagicStrategy(async function(user, done) {\n  const userMetadata = await magic.users.getMetadataByIssuer(user.issuer);\n  const existingUser = await users.findOne({ issuer: user.issuer });\n  if (!existingUser) {\n    /* Create new user if doesn't exist */\n    return signup(user, userMetadata, done);\n  } else {\n    /* Login user if otherwise */\n    return login(user, done);\n  }\n});\n\npassport.use(strategy);\n```\n\n### 3\ufe0f. Implement Auth Behaviors\n\n#### Implement User Signup\n", "explanation": "**Summary:**\n\nThis code block implements a Passport.js authentication strategy using the Magic strategy for user authentication. It takes a `user` object with an `issuer` field, which represents a unique blockchain public address, and uses it to fetch the user's metadata. If the user doesn't exist, it calls the `signup` function; if the user exists, it calls the `login` function.", "metadata": {"repo": "magiclabs/documentation", "file": "technologies/full-stack-node-js.md", "chunk_number": 5, "total_chunks": 11}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "Here is a concise summary of the file 'technologies/full-stack-node-js.md':\n\nThis tutorial provides a comprehensive guide to integrating Magic with a Node.js server using the Express framework. It covers setting up a full-stack Node.js server with Express and NeDB database, integrating Magic API keys, and implementing Passport.js authentication with Magic strategy. The tutorial also covers user authentication behaviors, including signup and login, as well as implementing a login endpoint with Passport middleware. Additionally, it defines Passport.js middleware for serializing and deserializing user data during session management. The tutorial also covers implementing authentication checks, retrieving and updating user data, and implementing a logout functionality using the Magic Admin SDK and Express.js. Overall, the tutorial guides users in building a working Apple Store app with Magic authentication and provides links to further learning resources."}
{"code": "The user signup behavior is pretty straightforward in this case, where a new user would be inserted into the NeDB database.\n\n```javascript\n/* In routes/user.js */\n\n/* 3\ufe0f\u20e3 Implement Auth Behaviors */\n\n/* Implement User Signup */\nconst signup = async (user, userMetadata, done) => {\n  let newUser = {\n    issuer: user.issuer,\n    email: userMetadata.email,\n    lastLoginAt: user.claim.iat\n  };\n  await users.insert(newUser);\n  return done(null, newUser);\n};\n```\n\n#### Implement User Login\n\nSince authentication is token-based, the user login behavior needs to implement a timestamp check to protect against [replay attacks](https://go.magic.link/replay-attack) - here's a simple reference implementation, but you can make  adjustments depending on your security preference.\n\n```javascript\n/* In routes/user.js */\n\n/* Implement User Login */\nconst login = async (user, done) => {\n  /* Replay attack protection (https://go.magic.link/replay-attack) */\n  if (user.claim.iat <= user.lastLoginAt) {\n    return done(null, false, {", "explanation": "**Implementation of User Authentication Behaviors**\n\nThis block implements two user authentication behaviors in a JavaScript application using NeDB database:\n\n1. **User Signup**: Inserts a new user into the NeDB database with essential information (issuer, email, last login time).\n2. **User Login**: Verifies a user's login attempt by checking the timestamp to prevent replay attacks.", "metadata": {"repo": "magiclabs/documentation", "file": "technologies/full-stack-node-js.md", "chunk_number": 6, "total_chunks": 11}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "Here is a concise summary of the file 'technologies/full-stack-node-js.md':\n\nThis tutorial provides a comprehensive guide to integrating Magic with a Node.js server using the Express framework. It covers setting up a full-stack Node.js server with Express and NeDB database, integrating Magic API keys, and implementing Passport.js authentication with Magic strategy. The tutorial also covers user authentication behaviors, including signup and login, as well as implementing a login endpoint with Passport middleware. Additionally, it defines Passport.js middleware for serializing and deserializing user data during session management. The tutorial also covers implementing authentication checks, retrieving and updating user data, and implementing a logout functionality using the Magic Admin SDK and Express.js. Overall, the tutorial guides users in building a working Apple Store app with Magic authentication and provides links to further learning resources."}
{"code": "      message: `Replay attack detected for user ${user.issuer}}.`\n    });\n  }\n  await users.update(\n    { issuer: user.issuer },\n    { $set: { lastLoginAt: user.claim.iat } }\n  );\n  return done(null, user);\n};\n\n/* Attach middleware to login endpoint */\nrouter.post(\"/login\", passport.authenticate(\"magic\"));\n```\n\nHere's an example of how to call the Login Endpoint from the client-side:\n\n```javascript\n/* In views/index.ejs */\n\n...\n\nconst didToken = await magic.auth.loginWithMagicLink({ email });\nawait fetch(`${serverUrl}user/login`, {\n  headers: new Headers({\n    Authorization: \"Bearer \" + didToken\n  }),\n  withCredentials: true,\n  credentials: \"same-origin\",\n  method: \"POST\"\n});\n\n...\n```\n\n### 4\ufe0f. Implement Session Behavior\n\nAn awesome feature from the Passport middleware is the possibility to populate the `req.user` object with an actual database record, so that the data can be conveniently used in your endpoints. See the next section for more examples.\n\n```javascript\n/* In routes/user.js */\n\n/* 4\ufe0f\u20e3 Implement Session Behavior */\n", "explanation": "**Summary**\n\nThis code block implements a login endpoint using Passport middleware with Magic authentication. Here's a concise summary of its purpose and functionality:\n\n* The code checks for potential replay attacks and updates the user's last login timestamp in the database upon successful authentication.\n* The `passport.authenticate(\"magic\")` middleware is attached to the `/login` endpoint to handle authentication with Magic authentication tokens.\n* A client-side example shows how to call the `/login` endpoint by sending a POST request with the Magic authentication token in the `Authorization` header.\n* The code sets the stage for implementing session behavior, which will allow the `req.user` object to be populated with the user's database record for convenient use in endpoints.", "metadata": {"repo": "magiclabs/documentation", "file": "technologies/full-stack-node-js.md", "chunk_number": 7, "total_chunks": 11}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "Here is a concise summary of the file 'technologies/full-stack-node-js.md':\n\nThis tutorial provides a comprehensive guide to integrating Magic with a Node.js server using the Express framework. It covers setting up a full-stack Node.js server with Express and NeDB database, integrating Magic API keys, and implementing Passport.js authentication with Magic strategy. The tutorial also covers user authentication behaviors, including signup and login, as well as implementing a login endpoint with Passport middleware. Additionally, it defines Passport.js middleware for serializing and deserializing user data during session management. The tutorial also covers implementing authentication checks, retrieving and updating user data, and implementing a logout functionality using the Magic Admin SDK and Express.js. Overall, the tutorial guides users in building a working Apple Store app with Magic authentication and provides links to further learning resources."}
{"code": "/* Defines what data are stored in the user session */\npassport.serializeUser((user, done) => {\n  done(null, user.issuer);\n});\n\n/* Populates user data in the req.user object */\npassport.deserializeUser(async (id, done) => {\n  try {\n    const user = await users.findOne({ issuer: id });\n    done(null, user);\n  } catch (err) {\n    done(err, null);\n  }\n});\n```\n\n### 5\ufe0f. Implement User Endpoints\n\n#### Implement Get Data Endpoint\n\nThis endpoint is responsible for grabbing the currently authenticated user's data, including the number of apples \ud83c\udf4e to be displayed in the front-end! Note how this endpoint uses `req.isAuthenticated()` to check if the current user is authenticated, and `req.user` can be passed to the front-end without fetching from the database again!\n\n```javascript\n/* In routes/user.js */\n\n/* 5\ufe0f\u20e3 Implement User Endpoints */\n\n/* Implement Get Data Endpoint */\nrouter.get(\"/\", async (req, res) => {\n  if (req.isAuthenticated()) {\n    return res\n      .status(200)\n      .json(req.user)\n      .end();\n  } else {", "explanation": "This block defines Passport.js middleware for serializing and deserializing user data during session management. \n\n- `serializeUser`: Stores the user's `issuer` property in the session.\n- `deserializeUser`: Retrieves the user data from the database based on the `issuer` property stored in the session and populates the `req.user` object.", "metadata": {"repo": "magiclabs/documentation", "file": "technologies/full-stack-node-js.md", "chunk_number": 8, "total_chunks": 11}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "Here is a concise summary of the file 'technologies/full-stack-node-js.md':\n\nThis tutorial provides a comprehensive guide to integrating Magic with a Node.js server using the Express framework. It covers setting up a full-stack Node.js server with Express and NeDB database, integrating Magic API keys, and implementing Passport.js authentication with Magic strategy. The tutorial also covers user authentication behaviors, including signup and login, as well as implementing a login endpoint with Passport middleware. Additionally, it defines Passport.js middleware for serializing and deserializing user data during session management. The tutorial also covers implementing authentication checks, retrieving and updating user data, and implementing a logout functionality using the Magic Admin SDK and Express.js. Overall, the tutorial guides users in building a working Apple Store app with Magic authentication and provides links to further learning resources."}
{"code": "    return res.status(401).end(`User is not logged in.`);\n  }\n});\n```\n\nHere's how you would call the Get Data Endpoint from the client-side:\n\n```javascript\n/* In views/index.ejs */\n\n...\n\nlet res = await fetch(`${serverUrl}/user/`);\nif (res.status == 200) {\n  let userData = await res.json();\n  let appleCount = userData.appleCount;\n  ...\n}\n\n...\n```\n\n#### Implement Buy Apple Endpoint\n\nFollows similar pattern as the Get Data Endpoint, instead authenticated user can now update and increment their apple count!\n\n```javascript\n/* In routes/user.js */\n\n/* Implement Buy Apple Endpoint */\nrouter.post(\"/buy-apple\", async (req, res) => {\n  if (req.isAuthenticated()) {\n    await users.update(\n      { issuer: req.user.issuer },\n      { $inc: { appleCount: 1 } }\n    );\n    return res.status(200).end();\n  } else {\n    return res.status(401).end(`User is not logged in.`);\n  }\n});\n```\n\nHere's how you would call the Buy Apple Endpoint from the client-side:\n\n```javascript\n/* In views/index.ejs */\n\nconst handleBuyApple = async () => {", "explanation": "**Summary of the Code Blocks**\n\nThe provided code blocks implement authentication checks and user data updates in a server-client architecture. Here's a concise summary of each block:\n\n1. **Auth Check Block**: This block returns a 401 Unauthorized response with a message if the user is not logged in.\n2. **Get User Data Block**: This endpoint retrieves user data (e.g., apple count) from the server if the user is authenticated.\n3. **Buy Apple Block**: This endpoint updates the user's apple count by incrementing it if the user is authenticated.\n\nThese blocks work together to create a basic e-commerce functionality, where users can update their apple count by making requests to the server, which authenticates the requests and updates the user data accordingly.", "metadata": {"repo": "magiclabs/documentation", "file": "technologies/full-stack-node-js.md", "chunk_number": 9, "total_chunks": 11}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "Here is a concise summary of the file 'technologies/full-stack-node-js.md':\n\nThis tutorial provides a comprehensive guide to integrating Magic with a Node.js server using the Express framework. It covers setting up a full-stack Node.js server with Express and NeDB database, integrating Magic API keys, and implementing Passport.js authentication with Magic strategy. The tutorial also covers user authentication behaviors, including signup and login, as well as implementing a login endpoint with Passport middleware. Additionally, it defines Passport.js middleware for serializing and deserializing user data during session management. The tutorial also covers implementing authentication checks, retrieving and updating user data, and implementing a logout functionality using the Magic Admin SDK and Express.js. Overall, the tutorial guides users in building a working Apple Store app with Magic authentication and provides links to further learning resources."}
{"code": "  await fetch(`${serverUrl}/user/buy-apple`, { method: \"POST\" });\n  render();\n};\n```\n\n#### Implement Logout Endpoint\n\nTo log out the user, you can use the Magic Admin SDK to logout the current user based on the user ID, remember to also call `req.logout()` to clear the Express user session as well!\n\n```javascript\n/* In routes/user.js */\n\n/* Implement Logout Endpoint */\nrouter.post(\"/logout\", async (req, res) => {\n  if (req.isAuthenticated()) {\n    await magic.users.logoutByIssuer(req.user.issuer);\n    req.logout();\n    return res.status(200).end();\n  } else {\n    return res.status(401).end(`User is not logged in.`);\n  }\n});\n```\n\nWith this, you no longer have to call `magic.user.logout()` on the client-side.\n\n```javascript\n/* In views/index.ejs */\n\nconst handleLogout = async () => {\n  // await magic.user.logout(); NO LONGER NEEDED!\n  await fetch(`${serverUrl}/user/logout`, { method: \"POST\" });\n  render();\n};\n```\n\n{% hint style=\"success\" %}", "explanation": "**Block Summary**\n\nThis block implements a logout functionality using the Magic Admin SDK and Express.js. It creates a POST endpoint (`/logout`) that, when called, logs out the current user using the SDK and clears the Express user session using `req.logout()`. The client-side code has been updated to call this endpoint instead of logging out directly using `magic.user.logout()`.", "metadata": {"repo": "magiclabs/documentation", "file": "technologies/full-stack-node-js.md", "chunk_number": 10, "total_chunks": 11}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "Here is a concise summary of the file 'technologies/full-stack-node-js.md':\n\nThis tutorial provides a comprehensive guide to integrating Magic with a Node.js server using the Express framework. It covers setting up a full-stack Node.js server with Express and NeDB database, integrating Magic API keys, and implementing Passport.js authentication with Magic strategy. The tutorial also covers user authentication behaviors, including signup and login, as well as implementing a login endpoint with Passport middleware. Additionally, it defines Passport.js middleware for serializing and deserializing user data during session management. The tutorial also covers implementing authentication checks, retrieving and updating user data, and implementing a logout functionality using the Magic Admin SDK and Express.js. Overall, the tutorial guides users in building a working Apple Store app with Magic authentication and provides links to further learning resources."}
{"code": "\ud83c\udf89 **Congratulations!** Now that you've completed the walkthrough, you should have a working version of the \ud83c\udf4e Apple Store app!\n{% endhint %}\n\n## \ud83d\udc49 What's Next\n\nDid you know you can actually customize the login experience \\(using your own UI instead of the default\\) and also have a branded magic link email? You can learn how to do that with the link below!\n\n{% page-ref page=\"../customization.md\" %}\n\nLearn about how to use the popular [**Next.js**](https://nextjs.org/) framework to build a React app and deploy it with [**Vercel**](https://vercel.com/)!\n\n{% page-ref page=\"next-js-integration.md\" %}\n\n", "explanation": "This block of text is a concluding section of a tutorial or walkthrough that guides users in building the Apple Store app. It informs readers that they now have a working version of the app and provides links to further learning resources, specifically on customizing the login experience and integrating the Next.js framework with Vercel deployment.", "metadata": {"repo": "magiclabs/documentation", "file": "technologies/full-stack-node-js.md", "chunk_number": 11, "total_chunks": 11}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "Here is a concise summary of the file 'technologies/full-stack-node-js.md':\n\nThis tutorial provides a comprehensive guide to integrating Magic with a Node.js server using the Express framework. It covers setting up a full-stack Node.js server with Express and NeDB database, integrating Magic API keys, and implementing Passport.js authentication with Magic strategy. The tutorial also covers user authentication behaviors, including signup and login, as well as implementing a login endpoint with Passport middleware. Additionally, it defines Passport.js middleware for serializing and deserializing user data during session management. The tutorial also covers implementing authentication checks, retrieving and updating user data, and implementing a logout functionality using the Magic Admin SDK and Express.js. Overall, the tutorial guides users in building a working Apple Store app with Magic authentication and provides links to further learning resources."}
{"code": "# Next.js Integration\n\n\\*\\*\\*\\*[**Next.js**](https://nextjs.org/) ****is a popular React Framework with many built-in features, such as:\n\n* An intuitive page-based routing system \\(with support for dynamic routes\\)\n* Pre-rendering, both static generation \\(SSG\\) and server-rendering \\(SSR\\) are supported on a per-page basis\n* Automatic code splitting for faster page loads\n* Client-side routing with optimized prefetching\n* Built-in CSS and Sass support, and support for any CSS-in-JS library\n* Development environment which supports Hot Module Replacement\n* API routes to build API endpoints with Serverless Functions\n* Fully extendable\n\nA Next.js application can also be seamlessly deployed with [**Vercel**](https://vercel.com/) - an all-in-one platform for static & Jamstack deployment, serverless functions, and global CDN. \n\n## \ud83d\ude80 Deploy Next.js Magic Example\n", "explanation": "This text provides an overview of Next.js, a popular React Framework, highlighting its key features such as page-based routing, pre-rendering, automatic code splitting, and more. It also mentions seamless deployment with Vercel.", "metadata": {"repo": "magiclabs/documentation", "file": "technologies/next-js-integration.md", "chunk_number": 1, "total_chunks": 5}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "# Next.js Integration\n\nThis guide provides an overview of Next.js, a popular React framework, and its key features such as page-based routing, pre-rendering, and automatic code splitting. It also covers seamless deployment with Vercel.\n\n## Deploying a Next.js Application with Magic Authentication\n\n1. Deploy a Next.js application with Magic authentication by clicking the link and configuring the `NEXT_EXAMPLE_MAGIC_PUBLISHABLE_KEY` and `NEXT_EXAMPLE_MAGIC_SECRET_KEY` environment values.\n\n## Configuring Magic API Keys\n\n1. Log in to the Magic Dashboard.\n2. Retrieve the secret and publishable API keys.\n3. Paste the keys into the 'NEXT_EXAMPLE_MAGIC_SECRET_KEY' and 'NEXT_EXAMPLE_MAGIC_PUBLISHABLE_KEY' fields.\n4. Click **Continue** to proceed.\n\n## Deployment Process\n\n1. Connect your GitHub account.\n2. Create a repository based on the official Next.js \"with-magic\" example.\n3. Deploy the application with a single click.\n\n## Additional Resources\n\n* Visit the Next.js Magic example repository on GitHub for learning implementation details and setting up a boilerplate for your application."}
{"code": "In this tutorial, we will be showing how to integrate Magic authentication with an example Next.js application, where users can sign up/login, get profile info, and logout.\n\nDeploying and iterating on a Next.js application is super easy. You can simply click on the link below to get started:\n\n\ud83d\udc49 [**Deploy Next.js Magic Example**](https://vercel.com/new/project?template=https://github.com/zeit/next.js/tree/canary/examples/with-magic)\\*\\*\\*\\*\n\n### 1\ufe0f. Configure Environment Values\n\n![](../.gitbook/assets/screen-shot-2020-04-22-at-9.06.19-pm.png)\n\nAfter you click on the [**Deploy Next.js Magic Example**](https://vercel.com/new/project?template=https://github.com/zeit/next.js/tree/canary/examples/with-magic) link, you'll be presented with the form shown above if you already have an account with Vercel, if not you'll be able to sign up for a new account. Note there are two **Environment Values** are required to continue `NEXT_EXAMPLE_MAGIC_PUBLISHABLE_KEY` and `NEXT_EXAMPLE_MAGIC_SECRET_KEY` .\n", "explanation": "This text provides instructions on deploying a Next.js application with Magic authentication. It guides users to click a link and deploy an example template, then configure two environment values: `NEXT_EXAMPLE_MAGIC_PUBLISHABLE_KEY` and `NEXT_EXAMPLE_MAGIC_SECRET_KEY`, to integrate Magic authentication.", "metadata": {"repo": "magiclabs/documentation", "file": "technologies/next-js-integration.md", "chunk_number": 2, "total_chunks": 5}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "# Next.js Integration\n\nThis guide provides an overview of Next.js, a popular React framework, and its key features such as page-based routing, pre-rendering, and automatic code splitting. It also covers seamless deployment with Vercel.\n\n## Deploying a Next.js Application with Magic Authentication\n\n1. Deploy a Next.js application with Magic authentication by clicking the link and configuring the `NEXT_EXAMPLE_MAGIC_PUBLISHABLE_KEY` and `NEXT_EXAMPLE_MAGIC_SECRET_KEY` environment values.\n\n## Configuring Magic API Keys\n\n1. Log in to the Magic Dashboard.\n2. Retrieve the secret and publishable API keys.\n3. Paste the keys into the 'NEXT_EXAMPLE_MAGIC_SECRET_KEY' and 'NEXT_EXAMPLE_MAGIC_PUBLISHABLE_KEY' fields.\n4. Click **Continue** to proceed.\n\n## Deployment Process\n\n1. Connect your GitHub account.\n2. Create a repository based on the official Next.js \"with-magic\" example.\n3. Deploy the application with a single click.\n\n## Additional Resources\n\n* Visit the Next.js Magic example repository on GitHub for learning implementation details and setting up a boilerplate for your application."}
{"code": "To grab these two values, you need to sign up or log in to the [**Magic Dashboard**](https://dashboard.magic.link/) to view your API keys. Once you are logged in you, you can then update the `'NEXT_EXAMPLE_MAGIC_SECRET_KEY'` string to your actual _secret_ API key, which looks something like `sk_test_*********`.\n\n![](../.gitbook/assets/image.png)\n\nOnce that's done, you can update the `'NEXT_EXAMPLE_MAGIC_PUBLISHABLE_KEY'` string to your publishable API key, which looks something like `pk_test_*********`.\n\n![](../.gitbook/assets/image%20%282%29.png)\n\nOnce the keys are copy and pasted in the **Environment Values** field, you can hit **Continue**.\n\n![](../.gitbook/assets/screen-shot-2020-04-22-at-9.14.18-pm%20%281%29.png)\n\nNothing needs to be changed here, hit **Continue** again.\n\n![](../.gitbook/assets/screen-shot-2020-04-22-at-9.15.55-pm.png)\n\n### 2\ufe0f. Setup Github Repository\n", "explanation": "This section guides users to retrieve and paste their Magic API keys into environment values in the dashboard. It involves the following steps:\n\n1. Log in to the Magic Dashboard.\n2. Retrieve the secret and publishable API keys.\n3. Paste the keys into the 'NEXT_EXAMPLE_MAGIC_SECRET_KEY' and 'NEXT_EXAMPLE_MAGIC_PUBLISHABLE_KEY' fields.\n4. Click **Continue** to proceed.", "metadata": {"repo": "magiclabs/documentation", "file": "technologies/next-js-integration.md", "chunk_number": 3, "total_chunks": 5}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "# Next.js Integration\n\nThis guide provides an overview of Next.js, a popular React framework, and its key features such as page-based routing, pre-rendering, and automatic code splitting. It also covers seamless deployment with Vercel.\n\n## Deploying a Next.js Application with Magic Authentication\n\n1. Deploy a Next.js application with Magic authentication by clicking the link and configuring the `NEXT_EXAMPLE_MAGIC_PUBLISHABLE_KEY` and `NEXT_EXAMPLE_MAGIC_SECRET_KEY` environment values.\n\n## Configuring Magic API Keys\n\n1. Log in to the Magic Dashboard.\n2. Retrieve the secret and publishable API keys.\n3. Paste the keys into the 'NEXT_EXAMPLE_MAGIC_SECRET_KEY' and 'NEXT_EXAMPLE_MAGIC_PUBLISHABLE_KEY' fields.\n4. Click **Continue** to proceed.\n\n## Deployment Process\n\n1. Connect your GitHub account.\n2. Create a repository based on the official Next.js \"with-magic\" example.\n3. Deploy the application with a single click.\n\n## Additional Resources\n\n* Visit the Next.js Magic example repository on GitHub for learning implementation details and setting up a boilerplate for your application."}
{"code": "You now have the option to connect your Github account and create a repository based on Next.js's official [**`with-magic`**](https://github.com/zeit/next.js/tree/canary/examples/with-magic) example.\n\n![](../.gitbook/assets/screen-shot-2020-04-22-at-9.17.15-pm.png)\n\n### 3\ufe0f. Deploy Application\n\nNow you are presented with the screen below, nothing needs to be changed, simply hit **Deploy** to start the production deployment of the Next.js Magic example application!\n\n![](../.gitbook/assets/screen-shot-2020-04-22-at-9.17.42-pm.png)\n\n![Application is building and deploying](../.gitbook/assets/screen-shot-2020-04-22-at-9.18.13-pm.png)\n\n![Application deployment complete and live!](../.gitbook/assets/screen-shot-2020-04-22-at-9.23.56-pm.png)\n\n{% hint style=\"success\" %}\nNow you can visit [**next-js.sean-demo.now.sh**](https://next-js.sean-demo.now.sh/) \\(or your application's URL\\) to check out your freshly deployed application!\n{% endhint %}\n", "explanation": "This text describes the process of deploying a Next.js application. It guides the user to connect their GitHub account, create a repository based on the official Next.js \"with-magic\" example, and then deploy the application with a single click. Once deployed, the user can view their live application.", "metadata": {"repo": "magiclabs/documentation", "file": "technologies/next-js-integration.md", "chunk_number": 4, "total_chunks": 5}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "# Next.js Integration\n\nThis guide provides an overview of Next.js, a popular React framework, and its key features such as page-based routing, pre-rendering, and automatic code splitting. It also covers seamless deployment with Vercel.\n\n## Deploying a Next.js Application with Magic Authentication\n\n1. Deploy a Next.js application with Magic authentication by clicking the link and configuring the `NEXT_EXAMPLE_MAGIC_PUBLISHABLE_KEY` and `NEXT_EXAMPLE_MAGIC_SECRET_KEY` environment values.\n\n## Configuring Magic API Keys\n\n1. Log in to the Magic Dashboard.\n2. Retrieve the secret and publishable API keys.\n3. Paste the keys into the 'NEXT_EXAMPLE_MAGIC_SECRET_KEY' and 'NEXT_EXAMPLE_MAGIC_PUBLISHABLE_KEY' fields.\n4. Click **Continue** to proceed.\n\n## Deployment Process\n\n1. Connect your GitHub account.\n2. Create a repository based on the official Next.js \"with-magic\" example.\n3. Deploy the application with a single click.\n\n## Additional Resources\n\n* Visit the Next.js Magic example repository on GitHub for learning implementation details and setting up a boilerplate for your application."}
{"code": "Now you can also check out the Next.js Magic [**open source example**](https://github.com/zeit/next.js/tree/canary/examples/with-magic) to learn more about the implementation and start building your application from this boilerplate if you've setup a Github repository from Step 2!\n\n", "explanation": "This block is a text prompt that guides users to a Next.js Magic example repository on GitHub for learning implementation details and setting up a boilerplate for their application.", "metadata": {"repo": "magiclabs/documentation", "file": "technologies/next-js-integration.md", "chunk_number": 5, "total_chunks": 5}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "# Next.js Integration\n\nThis guide provides an overview of Next.js, a popular React framework, and its key features such as page-based routing, pre-rendering, and automatic code splitting. It also covers seamless deployment with Vercel.\n\n## Deploying a Next.js Application with Magic Authentication\n\n1. Deploy a Next.js application with Magic authentication by clicking the link and configuring the `NEXT_EXAMPLE_MAGIC_PUBLISHABLE_KEY` and `NEXT_EXAMPLE_MAGIC_SECRET_KEY` environment values.\n\n## Configuring Magic API Keys\n\n1. Log in to the Magic Dashboard.\n2. Retrieve the secret and publishable API keys.\n3. Paste the keys into the 'NEXT_EXAMPLE_MAGIC_SECRET_KEY' and 'NEXT_EXAMPLE_MAGIC_PUBLISHABLE_KEY' fields.\n4. Click **Continue** to proceed.\n\n## Deployment Process\n\n1. Connect your GitHub account.\n2. Create a repository based on the official Next.js \"with-magic\" example.\n3. Deploy the application with a single click.\n\n## Additional Resources\n\n* Visit the Next.js Magic example repository on GitHub for learning implementation details and setting up a boilerplate for your application."}
{"code": "---\ndescription: Learn how to customize the Magic user onboarding experience.\n---\n\n# \ud83c\udfa8 Customization\n\nMagic includes a slick default loading screen to save developers implementation time, but also allows developers to have full customizability of their user on-boarding experience!\n\n### Hide Loading Screen\n\nTo completely hide away our loading screen UI, you can simply pass `false` to the `showUI` attribute while initiating the Magic link login.\n\n```javascript\nimport { Magic } from 'magic-sdk';\nconst magic = new Magic(\"YOUR_PUBLIC_API_KEY\");\n\nawait magic.loginWithMagicLink({\n    email,\n    showUI: false // Default \"true\", setting \"false\" will hide loading screen\n});\n```\n\n### Use Your Own Brand\n", "explanation": "This block describes how to customize the Magic user onboarding experience. It provides two functionalities:\n\n1. **Hide Loading Screen**: Hide the default loading screen by passing `false` to the `showUI` attribute when initiating the Magic link login.\n2. (Partial) **Use Your Own Brand**: (Not fully implemented in the given code) allows developers to customize the onboarding experience with their own branding.", "metadata": {"repo": "magiclabs/documentation", "file": "tutorials/customization.md", "chunk_number": 1, "total_chunks": 2}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "Customizing the Magic User Onboarding Experience\n==============================================\n\nThis guide covers two main functionalities to personalize the user onboarding experience with Magic:\n\n### 1. Hide Loading Screen\n\nPass `false` to the `showUI` attribute when initiating the Magic link login to hide the default loading screen.\n\n### 2. Use Your Own Brand\n\nCustomize the branding of Magic link emails and screens by accessing the 'Branding' tab in the Magic Dashboard:\n\n* Add a logo to represent your brand\n* Set a primary brand color to match your brand's visual identity\n* Choose between a light or dark theme to customize the overall look and feel"}
{"code": "You can also apply your own brand and theme to the Magic link email, loading screen, as well as the confirmation screen. Simply head to the **Branding** tab on the [**Magic Dashboard**](https://dashboard.magic.link/) and you'll be able to add your logo, set your primary brand color, and choose between a light or dark theme! _\\(You'll be able to set a custom html template for the Magic link email soon , too.\\)_\n\n![](../.gitbook/assets/dashboard-theme.png)\n\n \n\n", "explanation": "This block describes how to customize the branding of Magic link emails and screens. Users can access the 'Branding' tab in the Magic Dashboard to add a logo, set a primary brand color, and choose a light or dark theme.", "metadata": {"repo": "magiclabs/documentation", "file": "tutorials/customization.md", "chunk_number": 2, "total_chunks": 2}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "Customizing the Magic User Onboarding Experience\n==============================================\n\nThis guide covers two main functionalities to personalize the user onboarding experience with Magic:\n\n### 1. Hide Loading Screen\n\nPass `false` to the `showUI` attribute when initiating the Magic link login to hide the default loading screen.\n\n### 2. Use Your Own Brand\n\nCustomize the branding of Magic link emails and screens by accessing the 'Branding' tab in the Magic Dashboard:\n\n* Add a logo to represent your brand\n* Set a primary brand color to match your brand's visual identity\n* Choose between a light or dark theme to customize the overall look and feel"}
{"code": "---\ndescription: >-\n  Decentralized ID (DID) tokens are used as cryptographically-generated proofs\n  that are used to manage user access to your application's resource server.\n---\n\n# \ud83d\udc64 Decentralized ID\n\n## What is a Decentralized ID \\(DID\\) Token?\n\nBy adapting W3C's [Decentralized Identifiers](https://w3c-ccg.github.io/did-primer/) \\(DID\\) protocol, the **DID token** created by the Magic client-side SDK \\(see [`getIdToken`](../client-sdk/browser-js/sdk/user-module/getidtoken.md)\\) leverages the [Ethereum](https://ethereum.org/) blockchain and [elliptic curve cryptography](https://en.wikipedia.org/wiki/Elliptic-curve_cryptography) to generate  verifiable proofs of identity and authorization. These proofs are encoded in a lightweight, digital signature that can be shared between client and server to manage permissions; protect routes and resources, or authenticate users.\n\nThe DID token is encoded as a Base64 JSON string tuple representing **`[proof, claim]`**:\n", "explanation": "This block describes the purpose and functionality of Decentralized ID (DID) tokens. A DID token is a cryptographically-generated proof used for identity verification and authorization, allowing users to access an application's resources. It leverages blockchain and elliptic curve cryptography to create a verifiable digital signature that can be shared between client and server to manage permissions and authenticate users.", "metadata": {"repo": "magiclabs/documentation", "file": "tutorials/decentralized-id.md", "chunk_number": 1, "total_chunks": 4}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "**Decentralized ID (DID) Tutorial Summary**\n\nThe Decentralized ID (DID) token system enables identity verification and authorization using blockchain and elliptic curve cryptography. A DID token consists of a signature (`proof`) and the original unsigned data (`claim`), allowing users to access an application's resources.\n\n**DID Token Structure and Generation**\n\nA DID token contains the following fields:\n\n- `iat`: Issued at timestamp\n- `ext`: Expiration timestamp\n- `nbf`: Not valid before timestamp\n- `iss`: Issuer (the signer/user's Ethereum public key)\n- `sub`: User's entity ID\n- `aud`: Project space identifier\n- `add`: Encrypted signature for arbitrary data validation\n- `tid`: Unique token identifier\n\nThe token is generated by:\n\n1. Creating a claim with basic information (issuer, subject, audience, issued time, and unique identifier)\n2. Signing the claim with the user's private key to ensure verifiability and authenticity\n3. Encoding the signed claim and proof as a Base64 string, creating a transportable DID token.\n\nThe DID token leverages Ethereum's `personal_sign` method to create a verifiable digital signature that can be shared between client and server to manage permissions and authenticate users."}
{"code": "* `proof`: A digital signature that proves the validity of the given `claim`.\n* `claim`: Unsigned data the user asserts. This should equal the `proof` after Elliptic Curve recovery.\n\n```javascript\nconst claim = JSON.stringify({ ... }); // Data representing the user's access\nconst proof = sign(claim); // Sign data with Ethereum's `personal_sign` method\nconst DIDToken = btoa(JSON.stringify([proof, claim]));\n```\n\n## Decentralized ID Token Specification\n\n| Key | Description |\n| :--- | :--- |\n| `iat` | Issued at timestamp \\(UTC in seconds\\). |\n| `ext` | Expiration timestamp \\(UTC in seconds\\). |\n| `nbf` | Not valid before timestamp \\(UTC in seconds\\). |\n| `iss` | Issuer \\(the signer, the \"user\"\\). This field is represented as a [Decentralized Identifier](https://w3c-ccg.github.io/did-primer/#the-format-of-a-did) populated with the user's Ethereum public key. |", "explanation": "**Summary**\n\nThis code block generates a Decentralized ID (DID) token by digitally signing user data with Ethereum's `personal_sign` method. The token consists of a signature (`proof`) and the original unsigned data (`claim`), concatenated and base64-encoded.\n\n**Functionality:**\n\n1. Converts user data into a JSON string (`claim`).\n2. Generates a digital signature (`proof`) using Ethereum's `personal_sign` method.\n3. Combines the `proof` and `claim` into a single JSON array.\n4. Base64-encodes the array to create the DID token.\n\n**Token Structure**\n\nThe DID token contains the following fields:\n\n1. `iat`: Issued at timestamp (UTC in seconds).\n2. `ext`: Expiration timestamp (UTC in seconds).\n3. `nbf`: Not valid before timestamp (UTC in seconds).\n4. `iss`: Issuer (the signer/user's Ethereum public key, represented as a Decentralized Identifier).", "metadata": {"repo": "magiclabs/documentation", "file": "tutorials/decentralized-id.md", "chunk_number": 2, "total_chunks": 4}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "**Decentralized ID (DID) Tutorial Summary**\n\nThe Decentralized ID (DID) token system enables identity verification and authorization using blockchain and elliptic curve cryptography. A DID token consists of a signature (`proof`) and the original unsigned data (`claim`), allowing users to access an application's resources.\n\n**DID Token Structure and Generation**\n\nA DID token contains the following fields:\n\n- `iat`: Issued at timestamp\n- `ext`: Expiration timestamp\n- `nbf`: Not valid before timestamp\n- `iss`: Issuer (the signer/user's Ethereum public key)\n- `sub`: User's entity ID\n- `aud`: Project space identifier\n- `add`: Encrypted signature for arbitrary data validation\n- `tid`: Unique token identifier\n\nThe token is generated by:\n\n1. Creating a claim with basic information (issuer, subject, audience, issued time, and unique identifier)\n2. Signing the claim with the user's private key to ensure verifiability and authenticity\n3. Encoding the signed claim and proof as a Base64 string, creating a transportable DID token.\n\nThe DID token leverages Ethereum's `personal_sign` method to create a verifiable digital signature that can be shared between client and server to manage permissions and authenticate users."}
{"code": "| `sub` | The \"subject\" of the request. This field is currently populated with the user's _Magic entity ID_. Note: this is separate from the user's Ethereum public key. |\n| `aud` | Identifies the project space. This field is represented as a [Decentralized Identifier](https://w3c-ccg.github.io/did-primer/#the-format-of-a-did) populated with a UUID. In the future, this field will represent the _application's Magic entity ID._ |\n| `add` | An encrypted signature of arbitrary, serialized data. The usage of this field is up to the developer and use-case dependent. It's handy for validating information passed between client and server. _The  raw data must be known to the developer in order to recover the token!_ |\n| `tid` | Unique token identifier. |\n\n### Generating a Decentralized ID Token \\(Pseudo-code\\)\n\n```typescript\n// Construct the user's claim\nconst claim = JSON.stringify({\n    iat: Math.floor(Date.now() / 1000),\n    ext: Math.floor(Date.now() / 1000) + lifespan,", "explanation": "This block describes the structure and fields of a token in a decentralized authentication system. The fields include:\n\n- `sub`: user's entity ID\n- `aud`: project space identifier (represented as a Decentralized Identifier)\n- `add`: encrypted signature for arbitrary data validation\n- `tid`: unique token identifier\n\nThe provided TypeScript pseudo-code shows the construction of a claim object, which is likely used to generate the token.", "metadata": {"repo": "magiclabs/documentation", "file": "tutorials/decentralized-id.md", "chunk_number": 3, "total_chunks": 4}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "**Decentralized ID (DID) Tutorial Summary**\n\nThe Decentralized ID (DID) token system enables identity verification and authorization using blockchain and elliptic curve cryptography. A DID token consists of a signature (`proof`) and the original unsigned data (`claim`), allowing users to access an application's resources.\n\n**DID Token Structure and Generation**\n\nA DID token contains the following fields:\n\n- `iat`: Issued at timestamp\n- `ext`: Expiration timestamp\n- `nbf`: Not valid before timestamp\n- `iss`: Issuer (the signer/user's Ethereum public key)\n- `sub`: User's entity ID\n- `aud`: Project space identifier\n- `add`: Encrypted signature for arbitrary data validation\n- `tid`: Unique token identifier\n\nThe token is generated by:\n\n1. Creating a claim with basic information (issuer, subject, audience, issued time, and unique identifier)\n2. Signing the claim with the user's private key to ensure verifiability and authenticity\n3. Encoding the signed claim and proof as a Base64 string, creating a transportable DID token.\n\nThe DID token leverages Ethereum's `personal_sign` method to create a verifiable digital signature that can be shared between client and server to manage permissions and authenticate users."}
{"code": "    iss: `did:ethr:${account.address}`,\n    sub: subject,\n    aud: `did:magic:${uuid()}`,\n    nbf: Math.floor(Date.now() / 1000),\n    tid: uuid(),\n});\n\n// Sign the claim with the user's private key\n// (this way the claim is verifiable and impossible to forge).\nconst proof = sign(claim);\n\n// Encode the DIDToken so it can be transported over HTTP.\nconst DIDToken = btoa(JSON.stringify([proof, claim]));\n```\n\n", "explanation": "**Purpose and Functionality Summary**\n\nThis block generates a Decentralized Identifier (DID) token for authentication. It:\n\n1. Creates a claim with basic information (issuer, subject, audience, issued time, and unique identifier).\n2. Signs the claim with the user's private key to ensure verifiability and authenticity.\n3. Encodes the signed claim and proof as a Base64 string, creating a transportable DID token.", "metadata": {"repo": "magiclabs/documentation", "file": "tutorials/decentralized-id.md", "chunk_number": 4, "total_chunks": 4}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "**Decentralized ID (DID) Tutorial Summary**\n\nThe Decentralized ID (DID) token system enables identity verification and authorization using blockchain and elliptic curve cryptography. A DID token consists of a signature (`proof`) and the original unsigned data (`claim`), allowing users to access an application's resources.\n\n**DID Token Structure and Generation**\n\nA DID token contains the following fields:\n\n- `iat`: Issued at timestamp\n- `ext`: Expiration timestamp\n- `nbf`: Not valid before timestamp\n- `iss`: Issuer (the signer/user's Ethereum public key)\n- `sub`: User's entity ID\n- `aud`: Project space identifier\n- `add`: Encrypted signature for arbitrary data validation\n- `tid`: Unique token identifier\n\nThe token is generated by:\n\n1. Creating a claim with basic information (issuer, subject, audience, issued time, and unique identifier)\n2. Signing the claim with the user's private key to ensure verifiability and authenticity\n3. Encoding the signed claim and proof as a Base64 string, creating a transportable DID token.\n\nThe DID token leverages Ethereum's `personal_sign` method to create a verifiable digital signature that can be shared between client and server to manage permissions and authenticate users."}
{"code": "---\ndescription: >-\n  Complete tutorial on how to plug Magic into Firebase Auth to access the full\n  power of Firebase!\n---\n\n# \ud83d\udd25 Firebase Integration\n\nMagic works out of the box with Firebase - seamlessly connecting state-of-the-art, no lock-in identity and authentication to the immense power of the Google platform.\n\nThis end-to-end example will adapt the [Magic Apple Store](full-stack-node-js.md) example into a Magic + Firebase application leveraging Firebase's powerful [Cloud Functions](https://firebase.google.com/docs/functions) and [Firestore](https://firebase.google.com/docs/firestore).\n\n## \ud83d\udce6 Setup Cloud Functions Project\n\nThis section is to help new developers who don't already have a project with Firebase Cloud Functions setup. **If you already have an** _**existing**_ **Cloud Functions project, feel free to skip to the** [**Next Section**](firebase-integration.md#connect-magic-to-firebase-auth)**!**\n\n### Create a Firebase Project\n", "explanation": "This block provides a tutorial on integrating Magic (an authentication platform) with Firebase (a suite of cloud services) to access the full power of Firebase. The tutorial covers setting up a Firebase project, specifically focusing on Cloud Functions.", "metadata": {"repo": "magiclabs/documentation", "file": "tutorials/firebase-integration.md", "chunk_number": 1, "total_chunks": 13}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "**Tutorials/Firebase-Integration.md Summary**\n\nThis file provides a step-by-step guide on integrating Magic (an authentication platform) with Firebase (a suite of cloud services) to access the full power of Firebase. The tutorial covers:\n\n1. Setting up a new Firebase project and enabling Firestore database feature.\n2. Initializing a Firebase SDK for Cloud Functions project using Node.js and Firebase CLI.\n3. Configuring Firestore and Functions options.\n4. Integrating Magic with Firebase Auth using Cloud Functions and maintaining database rules and permissions.\n\nThe tutorial also explains the authentication data flow using Magic link and Firebase, resulting in a secure user authentication and authorization in a Firebase application. Additionally, it guides on deploying the code to Firebase and troubleshooting common errors."}
{"code": "1\ufe0f\u20e3 In the [Firebase console](https://console.firebase.google.com/), click **Add project**, then select or enter a **Project name**.\n\n2\ufe0f\u20e3 Click **Continue** through the steps and then Click **Create project**.\n\n3\ufe0f\u20e3 After a minute or so, your project will be successfully created. You can then continue to your project home page, where you can enable the **Firestore** database feature. \n\n![](../.gitbook/assets/screen-shot-2020-03-19-at-12.26.24-am.png)\n\n4\ufe0f\u20e3 After that you can click on the **Create database** button and you will be directed through a short flow to complete the setup. Don't worry too much about the secure rules yet, as we'll get to it later.\n\n![](../.gitbook/assets/screen-shot-2020-03-19-at-12.29.49-am.png)\n\n### Setup Node.js and the Firebase CLI\n", "explanation": "The purpose of this block is to provide a step-by-step guide on how to create a new Firebase project and enable the Firestore database feature through the Firebase console.", "metadata": {"repo": "magiclabs/documentation", "file": "tutorials/firebase-integration.md", "chunk_number": 2, "total_chunks": 13}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "**Tutorials/Firebase-Integration.md Summary**\n\nThis file provides a step-by-step guide on integrating Magic (an authentication platform) with Firebase (a suite of cloud services) to access the full power of Firebase. The tutorial covers:\n\n1. Setting up a new Firebase project and enabling Firestore database feature.\n2. Initializing a Firebase SDK for Cloud Functions project using Node.js and Firebase CLI.\n3. Configuring Firestore and Functions options.\n4. Integrating Magic with Firebase Auth using Cloud Functions and maintaining database rules and permissions.\n\nThe tutorial also explains the authentication data flow using Magic link and Firebase, resulting in a secure user authentication and authorization in a Firebase application. Additionally, it guides on deploying the code to Firebase and troubleshooting common errors."}
{"code": "Now that your project is setup. You'll need a [Node.js](https://nodejs.org/) environment to write functions and properly initialize your project locally, and you'll need the Firebase CLI to deploy functions to the Cloud Functions runtime. Node.js versions 8 and 10 are [supported](https://firebase.google.com/docs/functions/manage-functions#set_nodejs_version). For installing Node.js and [npm](https://www.npmjs.org/), [Node Version Manager](https://github.com/creationix/nvm/blob/master/README.md) is recommended.\n\nOnce you have Node.js and npm installed, [install the Firebase CLI](https://firebase.google.com/docs/cli?#setup_update_cli) via your preferred method. To install the CLI via npm, use:\n\n```text\nnpm install -g firebase-tools\n```\n\n### Initialize Firebase SDK for Cloud Functions\n\nWhen you initialize Firebase SDK for Cloud Functions, you create an empty project containing dependencies and some minimal sample code, and you choose either TypeScript or JavaScript for composing functions.\n", "explanation": "This block provides instructions on setting up a development environment for a Firebase Cloud Functions project. It covers:\n\n1. Installing Node.js (versions 8 or 10) using Node Version Manager (NVM).\n2. Installing the Firebase CLI using npm.\n3. Initializing the Firebase SDK for Cloud Functions, creating a new project with dependencies and sample code, and choosing between TypeScript or JavaScript.", "metadata": {"repo": "magiclabs/documentation", "file": "tutorials/firebase-integration.md", "chunk_number": 3, "total_chunks": 13}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "**Tutorials/Firebase-Integration.md Summary**\n\nThis file provides a step-by-step guide on integrating Magic (an authentication platform) with Firebase (a suite of cloud services) to access the full power of Firebase. The tutorial covers:\n\n1. Setting up a new Firebase project and enabling Firestore database feature.\n2. Initializing a Firebase SDK for Cloud Functions project using Node.js and Firebase CLI.\n3. Configuring Firestore and Functions options.\n4. Integrating Magic with Firebase Auth using Cloud Functions and maintaining database rules and permissions.\n\nThe tutorial also explains the authentication data flow using Magic link and Firebase, resulting in a secure user authentication and authorization in a Firebase application. Additionally, it guides on deploying the code to Firebase and troubleshooting common errors."}
{"code": "**To initialize your project:**\n\n1\ufe0f\u20e3 Run `firebase login` to log in via the browser and authenticate the firebase tool.\n\n2\ufe0f\u20e3 Go to your Firebase project directory or create a new empty directory.\n\n3\ufe0f\u20e3 Run `firebase init` command to initialize your project.\n\n![](../.gitbook/assets/screen-shot-2020-03-19-at-12.49.00-am.png)\n\nNow you will see some options you'll be able to multi-select, pick _both_ the **Firestore** and **Functions** options to be able to go through this tutorial.\n\n4\ufe0f\u20e3 After that you will be presented an option to Use an existing project, pick this option and select the project name you just created on the [Firebase console](https://console.firebase.google.com/).\n\n![](../.gitbook/assets/screen-shot-2020-03-19-at-12.54.03-am.png)\n\n5\ufe0f\u20e3 Select _Default_ or _Yes_ to every step after to initialize the Firestore configurations.\n\n![](../.gitbook/assets/screen-shot-2020-03-19-at-1.00.40-am.png)\n", "explanation": "This block guides users on how to initialize a Firebase project for a tutorial. It provides a 5-step process involving authentication, project setup, and configuration of Firestore and Functions options.", "metadata": {"repo": "magiclabs/documentation", "file": "tutorials/firebase-integration.md", "chunk_number": 4, "total_chunks": 13}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "**Tutorials/Firebase-Integration.md Summary**\n\nThis file provides a step-by-step guide on integrating Magic (an authentication platform) with Firebase (a suite of cloud services) to access the full power of Firebase. The tutorial covers:\n\n1. Setting up a new Firebase project and enabling Firestore database feature.\n2. Initializing a Firebase SDK for Cloud Functions project using Node.js and Firebase CLI.\n3. Configuring Firestore and Functions options.\n4. Integrating Magic with Firebase Auth using Cloud Functions and maintaining database rules and permissions.\n\nThe tutorial also explains the authentication data flow using Magic link and Firebase, resulting in a secure user authentication and authorization in a Firebase application. Additionally, it guides on deploying the code to Firebase and troubleshooting common errors."}
{"code": "6\ufe0f\u20e3 For the purpose of this tutorial, select _Javascript_ language option when presented for Cloud Functions configurations.\n\n![](../.gitbook/assets/screen-shot-2020-03-19-at-1.00.48-am.png)\n\n7\ufe0f\u20e3 Continue the steps and after the npm packages are installed, your project will be fully initialized and        ready to go! \ud83d\udd25\n\n## \ud83d\udd0c Connect Magic to Firebase Auth\n\nMagic doesn't replace Firebase Auth, and can actually integrate seamlessly into it so you will be able to have the same permissions and database rules configurations as if it's native Firebase Auth. Before we go into writing the Magic + Firebase adapter Cloud Function, understanding the data flow on the front-end code will be very helpful.\n\n{% hint style=\"info\" %}\nIf you'd like to skip straight to the implementation. Here's the [**complete front-end source code**](https://go.magic.link/apple-store-firebase-code) on CodeSandBox as well as the [**Firebase callable function code**](https://go.magic.link/magic-firebase-auth) on Github.", "explanation": "This block provides step-by-step instructions for setting up a project with Cloud Functions and Firebase Auth. It:\n\n1. Instructs the user to select JavaScript as the language option for Cloud Functions.\n2. Guides the user through initializing the project and installing npm packages.\n3. Introduces the integration of Magic with Firebase Auth, noting that Magic can be used in conjunction with Firebase Auth to maintain database rules and permissions.\n4. Offers links to example front-end and Firebase callable function code for those who want to skip ahead to implementation.", "metadata": {"repo": "magiclabs/documentation", "file": "tutorials/firebase-integration.md", "chunk_number": 5, "total_chunks": 13}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "**Tutorials/Firebase-Integration.md Summary**\n\nThis file provides a step-by-step guide on integrating Magic (an authentication platform) with Firebase (a suite of cloud services) to access the full power of Firebase. The tutorial covers:\n\n1. Setting up a new Firebase project and enabling Firestore database feature.\n2. Initializing a Firebase SDK for Cloud Functions project using Node.js and Firebase CLI.\n3. Configuring Firestore and Functions options.\n4. Integrating Magic with Firebase Auth using Cloud Functions and maintaining database rules and permissions.\n\nThe tutorial also explains the authentication data flow using Magic link and Firebase, resulting in a secure user authentication and authorization in a Firebase application. Additionally, it guides on deploying the code to Firebase and troubleshooting common errors."}
{"code": "{% endhint %}\n\n### Auth Data Flow\n\n1. User logs in in with Magic link, which upon successful login, generates a [DID token](decentralized-id.md)\n2. The DID token is passed into the `auth` Firebase `httpsCallable` Cloud Function that we will be implementing in later section\n3. The `auth` Cloud Function takes in the DID token and converts it into a Firebase user access token\n4. Pass the Firebase user access token into the `firebase.auth().signInWithCustomToken` method to authenticate user natively with Firebase\n\nHere's a sample front-end code snippet to implement this data flow:\n\n```javascript\n/* Your Front-end Code */\n\n...\n\n/* User login with Magic link to get DID token */\nconst didToken = await magic.auth.loginWithMagicLink({ email });\nconst auth = firebase.functions().httpsCallable(\"auth\");\n/* DID token is passed into the auth callable function */\nlet result = (await auth({ didToken })).data;\n/* Firebase user access token is used to authenticate */\nawait firebase.auth().signInWithCustomToken(result.token);\n", "explanation": "**Summary:**\n\nThis block describes a user authentication data flow using Magic link and Firebase. The process involves:\n\n1. User logs in with Magic link, generating a DID token.\n2. The DID token is passed to an `auth` Cloud Function.\n3. The Cloud Function converts the DID token to a Firebase user access token.\n4. The access token is used to authenticate the user with Firebase.\n\n**Functionality:**\n\nThis block enables native Firebase authentication using a Magic link-generated DID token, allowing for secure user authentication and authorization in a Firebase application.", "metadata": {"repo": "magiclabs/documentation", "file": "tutorials/firebase-integration.md", "chunk_number": 6, "total_chunks": 13}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "**Tutorials/Firebase-Integration.md Summary**\n\nThis file provides a step-by-step guide on integrating Magic (an authentication platform) with Firebase (a suite of cloud services) to access the full power of Firebase. The tutorial covers:\n\n1. Setting up a new Firebase project and enabling Firestore database feature.\n2. Initializing a Firebase SDK for Cloud Functions project using Node.js and Firebase CLI.\n3. Configuring Firestore and Functions options.\n4. Integrating Magic with Firebase Auth using Cloud Functions and maintaining database rules and permissions.\n\nThe tutorial also explains the authentication data flow using Magic link and Firebase, resulting in a secure user authentication and authorization in a Firebase application. Additionally, it guides on deploying the code to Firebase and troubleshooting common errors."}
{"code": "...\n```\n\n### Get Firebase Config\n\nSetting up your Firebase front-end project properly can help avoid a lot of headaches later. Note that there's a `firebaseConfig` configuration in our example source code.  You'll be able to get this configuration in your project's settings view.\n\n![Navigate to settings for your project](../.gitbook/assets/screen-shot-2020-03-18-at-10.00.47-pm%20%281%29.png)\n\n![Copy and paste this configuration to your front-end code](../.gitbook/assets/screen-shot-2020-03-18-at-10.02.07-pm.png)\n\n## \ud83d\udd10 Implement Auth Callable Function\n\nThe Auth callable Cloud Function will be the crucial piece to converting a Magic DID token into a Firebase user access token to enable this entire experience. We'll go through the configuration steps first, but if you are already familiar with Cloud Function configurations, you can directly skip ahead to the function implementation or download the entire [**project example**](https://go.magic.link/magic-firebase-auth) ****from Github!\n", "explanation": "**Purpose and Functionality:**\nThis block provides instructions on setting up a Firebase project and its configuration for use with a Magic DID token. It also serves as an introduction to creating a Cloud Function (Auth callable) that converts the Magic DID token into a Firebase user access token.", "metadata": {"repo": "magiclabs/documentation", "file": "tutorials/firebase-integration.md", "chunk_number": 7, "total_chunks": 13}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "**Tutorials/Firebase-Integration.md Summary**\n\nThis file provides a step-by-step guide on integrating Magic (an authentication platform) with Firebase (a suite of cloud services) to access the full power of Firebase. The tutorial covers:\n\n1. Setting up a new Firebase project and enabling Firestore database feature.\n2. Initializing a Firebase SDK for Cloud Functions project using Node.js and Firebase CLI.\n3. Configuring Firestore and Functions options.\n4. Integrating Magic with Firebase Auth using Cloud Functions and maintaining database rules and permissions.\n\nThe tutorial also explains the authentication data flow using Magic link and Firebase, resulting in a secure user authentication and authorization in a Firebase application. Additionally, it guides on deploying the code to Firebase and troubleshooting common errors."}
{"code": "### Configure and Initialize\n\n1\ufe0f\u20e3 In your Cloud Functions file, you'll have to initialize Firebase with its admin SDK and your **service account credential**.\n\n```javascript\nrequire('dotenv').config();\n\nconst functions = require(\"firebase-functions\");\nconst admin = require(\"firebase-admin\");\nconst serviceAccount = require(\"./path/to/my-project.json\");\n\nadmin.initializeApp({\n  credential: admin.credential.cert(serviceAccount),\n  databaseURL: \"https://my-project.firebaseio.com\"\n});\n```\n\n2\ufe0f\u20e3 Getting the **service account credential** is extremely important to make sure you have the right permissions to create the Firebase user access token. You can find it in your **Project settings** page, under the **Service accounts** tab, and then click on **Generate new private key**.\n\n![](../.gitbook/assets/screen-shot-2020-03-19-at-12.58.45-pm.png)\n", "explanation": "**Summary: Firebase Initialization Block**\n\nThis block initializes Firebase with its admin SDK in a Cloud Functions file using a service account credential. The code snippet initializes the Firebase app with the service account credential and database URL, allowing the creation of a Firebase user access token.", "metadata": {"repo": "magiclabs/documentation", "file": "tutorials/firebase-integration.md", "chunk_number": 8, "total_chunks": 13}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "**Tutorials/Firebase-Integration.md Summary**\n\nThis file provides a step-by-step guide on integrating Magic (an authentication platform) with Firebase (a suite of cloud services) to access the full power of Firebase. The tutorial covers:\n\n1. Setting up a new Firebase project and enabling Firestore database feature.\n2. Initializing a Firebase SDK for Cloud Functions project using Node.js and Firebase CLI.\n3. Configuring Firestore and Functions options.\n4. Integrating Magic with Firebase Auth using Cloud Functions and maintaining database rules and permissions.\n\nThe tutorial also explains the authentication data flow using Magic link and Firebase, resulting in a secure user authentication and authorization in a Firebase application. Additionally, it guides on deploying the code to Firebase and troubleshooting common errors."}
{"code": "3\ufe0f\u20e3 After downloading the credential, you can put the `.json` credential file into your project directory and update the path in the `const serviceAccount = require(\"./path/to/my-project.json\");` line, as well as updating the `databaseURL` to the one you see in your project settings dashboard.\n\n{% hint style=\"warning\" %}\nThese are your firebase server side credentials, keep them secret!\n{% endhint %}\n\n### Function Implementation\n\nAfter all the setup, now let's finally get to the fun part! \ud83c\udf89 Essentially the `auth` callable function handles authentication for two types of scenarios **\\(1\\) existing users who already have email addresses set, including legacy Firebase users**, and **\\(2\\) create new users based on their email addresses and** [**DID**](decentralized-id.md) **token generated by Magic**. This callable function will return a unique Firebase user access token and pass it back to the client.\n", "explanation": "**Functionality Summary:**\n\nThis block describes the setup and implementation of a Firebase authentication function. It requires updating the path to a server-side credential file (`my-project.json`) and setting the `databaseURL`. The function, `auth`, handles two authentication scenarios: \n\n1. Authenticating existing users with email addresses.\n2. Creating new users using email addresses and DID tokens generated by Magic.\n\nThe function returns a unique Firebase user access token.", "metadata": {"repo": "magiclabs/documentation", "file": "tutorials/firebase-integration.md", "chunk_number": 9, "total_chunks": 13}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "**Tutorials/Firebase-Integration.md Summary**\n\nThis file provides a step-by-step guide on integrating Magic (an authentication platform) with Firebase (a suite of cloud services) to access the full power of Firebase. The tutorial covers:\n\n1. Setting up a new Firebase project and enabling Firestore database feature.\n2. Initializing a Firebase SDK for Cloud Functions project using Node.js and Firebase CLI.\n3. Configuring Firestore and Functions options.\n4. Integrating Magic with Firebase Auth using Cloud Functions and maintaining database rules and permissions.\n\nThe tutorial also explains the authentication data flow using Magic link and Firebase, resulting in a secure user authentication and authorization in a Firebase application. Additionally, it guides on deploying the code to Firebase and troubleshooting common errors."}
{"code": "This is a sample implementation on how you can implement this auth function based on those two scenarios via two handler functions:\n\n```javascript\nexports.auth = functions.https.onCall(async (data, context) => {\n  const { Magic } = require(\"@magic-sdk/admin\");\n  const magic = new Magic(\"YOUR_SECRET_API_KEY\");\n  const didToken = data.didToken;\n  const metadata = await magic.users.getMetadataByToken(didToken);\n  const email = metadata.email;\n  try {\n    /* Get existing user by email address,\n       compatible with legacy Firebase email users */\n    let user = (await admin.auth().getUserByEmail(email)).toJSON();\n    const claim = magic.token.decode(didToken)[1];\n    return await handleExistingUser(user, claim);\n  } catch (err) {\n    if (err.code === \"auth/user-not-found\") {\n      /* Create new user */\n      return await handleNewUser(email);\n    } else {\n      throw err;\n    }\n  }\n});\n```\n", "explanation": "**Authentication Function Summary**\n\nThis is a Firebase Cloud Function (`auth`) that handles user authentication using Magic, a decentralized authentication platform. The function takes a Digital Identity (DID) token as input, verifies it with Magic, and retrieves the user's email address. It then checks if the user exists in Firebase Auth, and either updates an existing user or creates a new one if not found, using two separate handler functions (`handleExistingUser` and `handleNewUser`).", "metadata": {"repo": "magiclabs/documentation", "file": "tutorials/firebase-integration.md", "chunk_number": 10, "total_chunks": 13}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "**Tutorials/Firebase-Integration.md Summary**\n\nThis file provides a step-by-step guide on integrating Magic (an authentication platform) with Firebase (a suite of cloud services) to access the full power of Firebase. The tutorial covers:\n\n1. Setting up a new Firebase project and enabling Firestore database feature.\n2. Initializing a Firebase SDK for Cloud Functions project using Node.js and Firebase CLI.\n3. Configuring Firestore and Functions options.\n4. Integrating Magic with Firebase Auth using Cloud Functions and maintaining database rules and permissions.\n\nThe tutorial also explains the authentication data flow using Magic link and Firebase, resulting in a secure user authentication and authorization in a Firebase application. Additionally, it guides on deploying the code to Firebase and troubleshooting common errors."}
{"code": "The existing user handler function takes in the existing user object from Firebase and the claim from the DID token to check for [replay attack](https://go.magic.link/replay-attack), and if successful, generates and returns a valid Firebase user access token.\n\n```javascript\nconst handleExistingUser = async (user, claim) => {\n  /* Check for replay attack (https://go.magic.link/replay-attack) */\n  let lastSignInTime = Date.parse(user.metadata.lastSignInTime) / 1000;\n  let tokenIssuedTime = claim.iat;\n  if (tokenIssuedTime <= lastSignInTime) {\n    throw new functions.https.HttpsError(\n      \"invalid-argument\",\n      \"This DID token is invalid.\"\n    );\n  }\n  let firebaseToken = await admin.auth().createCustomToken(user.uid);\n  return {\n    uid: user.uid,\n    token: firebaseToken\n  };\n};\n```\n\nThe new user handler function takes in the email and creates a new Firebase user based on it, and then generates and returns a valid Firebase user access token.\n\n```javascript\nconst handleNewUser = async email => {", "explanation": "**Existing User Handler Functionality**\n\nPurpose: Prevent replay attacks and generate a valid Firebase user access token for existing users.\n\nFunctionality:\n\n1. Checks if the DID token's issued time is greater than the user's last sign-in time to prevent replay attacks.\n2. If the token is valid, generates a custom Firebase token using the user's UID.\n3. Returns an object containing the user's UID and the generated token.\n\n**New User Handler Functionality (Partial)**\n\nPurpose: Create a new Firebase user and generate a valid access token.\n\nFunctionality (incomplete):\n\n1. Create a new Firebase user based on the provided email address (implementation not shown).", "metadata": {"repo": "magiclabs/documentation", "file": "tutorials/firebase-integration.md", "chunk_number": 11, "total_chunks": 13}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "**Tutorials/Firebase-Integration.md Summary**\n\nThis file provides a step-by-step guide on integrating Magic (an authentication platform) with Firebase (a suite of cloud services) to access the full power of Firebase. The tutorial covers:\n\n1. Setting up a new Firebase project and enabling Firestore database feature.\n2. Initializing a Firebase SDK for Cloud Functions project using Node.js and Firebase CLI.\n3. Configuring Firestore and Functions options.\n4. Integrating Magic with Firebase Auth using Cloud Functions and maintaining database rules and permissions.\n\nThe tutorial also explains the authentication data flow using Magic link and Firebase, resulting in a secure user authentication and authorization in a Firebase application. Additionally, it guides on deploying the code to Firebase and troubleshooting common errors."}
{"code": "  const newUser = await admin.auth().createUser({\n    email: email,\n    emailVerified: true\n  });\n  let firebaseToken = await admin.auth().createCustomToken(newUser.uid);\n  return {\n    uid: newUser.uid,\n    token: firebaseToken\n  };\n};\n```\n\n{% hint style=\"info\" %}\nYou can find the complete [**auth callable function project**](https://go.magic.link/magic-firebase-auth) on our Github.\n{% endhint %}\n\n## \ud83d\ude80 Wrapping Up\n\n### Configure Firestore Rules\n\nAfter you've implemented the `auth` callable function, go to the `firestore.rules` file in your local project directory and update it with the following - essentially only allowing the currently authenticated user to perform CRUD in the `users` collection.\n\n```javascript\nrules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    match /users/{userId} {\n      allow read, write: if request.auth.uid == userId;\n    }\n  }\n}\n```\n\n### Deploy to Firebase\n", "explanation": "This block creates a new user in Firebase Authentication and generates a custom token for the user. It returns an object containing the user's unique ID (UID) and the custom token.", "metadata": {"repo": "magiclabs/documentation", "file": "tutorials/firebase-integration.md", "chunk_number": 12, "total_chunks": 13}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "**Tutorials/Firebase-Integration.md Summary**\n\nThis file provides a step-by-step guide on integrating Magic (an authentication platform) with Firebase (a suite of cloud services) to access the full power of Firebase. The tutorial covers:\n\n1. Setting up a new Firebase project and enabling Firestore database feature.\n2. Initializing a Firebase SDK for Cloud Functions project using Node.js and Firebase CLI.\n3. Configuring Firestore and Functions options.\n4. Integrating Magic with Firebase Auth using Cloud Functions and maintaining database rules and permissions.\n\nThe tutorial also explains the authentication data flow using Magic link and Firebase, resulting in a secure user authentication and authorization in a Firebase application. Additionally, it guides on deploying the code to Firebase and troubleshooting common errors."}
{"code": "Now you can simply run the following command with the Firebase CLI in your project directory to deploy your code to Firebase! \ud83c\udf89\n\n```javascript\nfirebase deploy\n```\n\n## \ud83d\udc77 Troubleshooting\n\n### EAI\\_AGAIN Error\n\nIf you are seeing an error like below in your Firebase Cloud Functions log, it's because Firebase requires project **Billing** to be configured before enabling access to external networks.\n\n![](../.gitbook/assets/screen-shot-2020-03-24-at-12.27.09-am.png)\n\n", "explanation": "This text describes how to deploy code to Firebase and troubleshoots a common error (EAI_AGAIN Error) related to Firebase Cloud Functions, which occurs when Firebase Billing is not configured, preventing access to external networks.", "metadata": {"repo": "magiclabs/documentation", "file": "tutorials/firebase-integration.md", "chunk_number": 13, "total_chunks": 13}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "**Tutorials/Firebase-Integration.md Summary**\n\nThis file provides a step-by-step guide on integrating Magic (an authentication platform) with Firebase (a suite of cloud services) to access the full power of Firebase. The tutorial covers:\n\n1. Setting up a new Firebase project and enabling Firestore database feature.\n2. Initializing a Firebase SDK for Cloud Functions project using Node.js and Firebase CLI.\n3. Configuring Firestore and Functions options.\n4. Integrating Magic with Firebase Auth using Cloud Functions and maintaining database rules and permissions.\n\nThe tutorial also explains the authentication data flow using Magic link and Firebase, resulting in a secure user authentication and authorization in a Firebase application. Additionally, it guides on deploying the code to Firebase and troubleshooting common errors."}
{"code": "---\ndescription: End-to-end example showing how Magic works with the Node.js Express framework.\n---\n\n# \ud83c\udf4e Full Stack Node.js\n\n## \ud83c\udfd7\ufe0f Get Template Code\n\nWelcome to our end-to-end example to demonstrate how Magic works with your own Node.js  server using the popular [Express](https://expressjs.com/) framework! If you haven't gone through the [Get Started](../get-started.md) guide, we strongly recommend going through it before starting this tutorial!\n\nIn this example, we'll be implementing an additional feature in the Hello World example - **letting only authorized users buy apples \ud83c\udf4e and see how many they own!**\n\n{% hint style=\"info\" %}\n**\ud83d\udc49  Get our** [**Template Code**](https://go.magic.link/apple-store-nodejs-template) **to continue this tutorial!** \n\nSince there are quite a few steps, we'll be walking through each of the steps in this documentation instead of letting you copy and paste them.\n{% endhint %}\n\n## \ud83d\uddfa\ufe0f Walkthrough\n", "explanation": "This block is an introduction to an end-to-end example of using Magic with the Node.js Express framework. It provides a template code and guide for an interactive tutorial that demonstrates how to implement authorization for buying and tracking virtual apples.", "metadata": {"repo": "magiclabs/documentation", "file": "tutorials/full-stack-node-js.md", "chunk_number": 1, "total_chunks": 11}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "# Full-Stack Node.js Tutorial with Magic\n\nThis tutorial guides you through building a full-stack Node.js application using the Express framework, NeDB database, and Magic for passwordless authentication. The application allows users to sign up, log in, and buy virtual apples while demonstrating authorization and authentication.\n\n## Key Features\n\n*   Full-stack Node.js application with Express and NeDB database\n*   Passwordless authentication using Magic and Passport.js\n*   Decentralized ID (DID) token standard for authentication\n*   User management with user creation, login, and logout functionality\n*   Secure buying endpoint with authentication and error handling\n*   Logout functionality using the Magic Admin SDK\n\n## Implementation\n\n1.  Setup a full-stack Node.js server with Express, NeDB, and express-session.\n2.  Integrate Magic for passwordless authentication using the MagicStrategy and Passport.js.\n3.  Implement authentication and authorization for the buying endpoint.\n4.  Handle replay attacks for user login attempts.\n5.  Serialize and deserialize user data for efficient storage and retrieval.\n6.  Implement a logout endpoint using the Magic Admin SDK.\n\n## Next Steps\n\n*   Customize the login experience and email integration\n*   Explore Next.js and Vercel for React app development and deployment."}
{"code": "The full stack Node.js server is set up using the vanilla Express template on CodeSandBox, using [NeDB](https://github.com/louischatriot/nedb) as an ultra lightweight database \\(you can switch it to other databases like MongoDB too\\) and the [`express-session`](https://github.com/louischatriot/nedb) NPM package to manage sessions. We'll make use of the Magic _Admin_ SDK for this example. You can learn how to install it via npm or yarn in the [Node.js reference](../admin-sdk/node-js/get-started.md#installation).\n\n### 1\ufe0f\u20e3 Setup Environment Variables\n\nNow that you've opened the CodeSandBox [**Template Code**](https://codesandbox.io/s/github/MagicHQ/example-nodejs), you can first click **\"Fork\"** to create your own instance to play with.\n\n![](../.gitbook/assets/fork-template.png)\n\nAfter you've forked the template, you can click on the **\"Server Rack\"** icon on the left menu and then update your **\"Secret Keys\"**.\n\n![](../.gitbook/assets/config-secrets.png)\n", "explanation": "This block describes the setup of a full-stack Node.js server using Express, NeDB database, and express-session package. It also briefly outlines the use of the Magic Admin SDK and provides instructions to set up environment variables by forking a CodeSandBox template, updating secret keys, and referencing a Node.js installation guide.", "metadata": {"repo": "magiclabs/documentation", "file": "tutorials/full-stack-node-js.md", "chunk_number": 2, "total_chunks": 11}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "# Full-Stack Node.js Tutorial with Magic\n\nThis tutorial guides you through building a full-stack Node.js application using the Express framework, NeDB database, and Magic for passwordless authentication. The application allows users to sign up, log in, and buy virtual apples while demonstrating authorization and authentication.\n\n## Key Features\n\n*   Full-stack Node.js application with Express and NeDB database\n*   Passwordless authentication using Magic and Passport.js\n*   Decentralized ID (DID) token standard for authentication\n*   User management with user creation, login, and logout functionality\n*   Secure buying endpoint with authentication and error handling\n*   Logout functionality using the Magic Admin SDK\n\n## Implementation\n\n1.  Setup a full-stack Node.js server with Express, NeDB, and express-session.\n2.  Integrate Magic for passwordless authentication using the MagicStrategy and Passport.js.\n3.  Implement authentication and authorization for the buying endpoint.\n4.  Handle replay attacks for user login attempts.\n5.  Serialize and deserialize user data for efficient storage and retrieval.\n6.  Implement a logout endpoint using the Magic Admin SDK.\n\n## Next Steps\n\n*   Customize the login experience and email integration\n*   Explore Next.js and Vercel for React app development and deployment."}
{"code": "To grab these two values, you need to sign up or log in to the [**Magic Dashboard**](https://dashboard.magic.link/) to view your API keys. Once you are logged in you, you can then add  `MAGIC_SECRET_KEY` as Name, and your actual _secret_ API key, which looks something like `sk_test_*********` as Value.\n\n![](../.gitbook/assets/image.png)\n\nOnce that's done, you can add `MAGIC_PUBLISHABLE_KEY` as Name, and your _publishable_ API key, which looks something like `pk_test_*********` as Value.\n\n![](../.gitbook/assets/image%20%282%29.png)\n\nOnce the keys are copy and pasted in the **Secret Keys** section, you can hit **Restart Server** to load these environment variables in the CodeSandBox container.\n\n![](../.gitbook/assets/restart-server.png)\n\nNote that the `MAGIC_SECRET_KEY` environment variable is used to initialize the Magic Admin SDK.\n\n```javascript\n/* 1\ufe0f\u20e3 Setup Magic Admin SDK */\nconst { Magic } = require(\"@magic-sdk/admin\");\nconst magic = new Magic(process.env.MAGIC_SECRET_KEY);\n```\n", "explanation": "The purpose of this block is to guide users in setting up their Magic API keys as environment variables in CodeSandBox. The functionality involves signing up/logging in to the Magic Dashboard to obtain the API keys, adding the keys to the Secret Keys section, and restarting the server to load the environment variables. This is then used to initialize the Magic Admin SDK in a JavaScript code.", "metadata": {"repo": "magiclabs/documentation", "file": "tutorials/full-stack-node-js.md", "chunk_number": 3, "total_chunks": 11}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "# Full-Stack Node.js Tutorial with Magic\n\nThis tutorial guides you through building a full-stack Node.js application using the Express framework, NeDB database, and Magic for passwordless authentication. The application allows users to sign up, log in, and buy virtual apples while demonstrating authorization and authentication.\n\n## Key Features\n\n*   Full-stack Node.js application with Express and NeDB database\n*   Passwordless authentication using Magic and Passport.js\n*   Decentralized ID (DID) token standard for authentication\n*   User management with user creation, login, and logout functionality\n*   Secure buying endpoint with authentication and error handling\n*   Logout functionality using the Magic Admin SDK\n\n## Implementation\n\n1.  Setup a full-stack Node.js server with Express, NeDB, and express-session.\n2.  Integrate Magic for passwordless authentication using the MagicStrategy and Passport.js.\n3.  Implement authentication and authorization for the buying endpoint.\n4.  Handle replay attacks for user login attempts.\n5.  Serialize and deserialize user data for efficient storage and retrieval.\n6.  Implement a logout endpoint using the Magic Admin SDK.\n\n## Next Steps\n\n*   Customize the login experience and email integration\n*   Explore Next.js and Vercel for React app development and deployment."}
{"code": "{% hint style=\"success\" %}\nNow your very own full-stack Magic Apple Store application is running! \ud83c\udf4e The content below will explain each of  major section of the code base.\n{% endhint %}\n\n### 2\ufe0f\u20e3 Implement Auth Strategy\n\nMagic leverages the popular and battle-tested [Passport](http://www.passportjs.org/) authentication middleware package for Express to provide our passwordless authentication service. This way it will be very seamless and easy to integrate for developers who are already familiar with Passport! _\\(Don't worry if you are not, we'll go through comprehensive examples in this tutorial\\)_ \n\nMagic's authentication is based on the [Decentralized ID](decentralized-id.md) \\(DID\\) token standard, and the strategy implemented by `passport-magic` already takes care of the heavy-lifting by verifying the token and  returning the authenticated user object. In this strategy, we'd like to define what to do if this user is a new user versus a returning user.\n", "explanation": "**Purpose:** Implementing passwordless authentication using Passport.js for the Magic Apple Store application.\n\n**Functionality:** \n\n- Leverages Passport.js authentication middleware for Express.\n- Uses the Decentralized ID (DID) token standard for authentication.\n- Automatically verifies the token and returns the authenticated user object.\n- Allows for defining actions for new and returning users.", "metadata": {"repo": "magiclabs/documentation", "file": "tutorials/full-stack-node-js.md", "chunk_number": 4, "total_chunks": 11}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "# Full-Stack Node.js Tutorial with Magic\n\nThis tutorial guides you through building a full-stack Node.js application using the Express framework, NeDB database, and Magic for passwordless authentication. The application allows users to sign up, log in, and buy virtual apples while demonstrating authorization and authentication.\n\n## Key Features\n\n*   Full-stack Node.js application with Express and NeDB database\n*   Passwordless authentication using Magic and Passport.js\n*   Decentralized ID (DID) token standard for authentication\n*   User management with user creation, login, and logout functionality\n*   Secure buying endpoint with authentication and error handling\n*   Logout functionality using the Magic Admin SDK\n\n## Implementation\n\n1.  Setup a full-stack Node.js server with Express, NeDB, and express-session.\n2.  Integrate Magic for passwordless authentication using the MagicStrategy and Passport.js.\n3.  Implement authentication and authorization for the buying endpoint.\n4.  Handle replay attacks for user login attempts.\n5.  Serialize and deserialize user data for efficient storage and retrieval.\n6.  Implement a logout endpoint using the Magic Admin SDK.\n\n## Next Steps\n\n*   Customize the login experience and email integration\n*   Explore Next.js and Vercel for React app development and deployment."}
{"code": "Note that in the DID standard we use `issuer` quite a lot, which looks something like `did:ethr:0xE0cef4417a772512E6C95cEf366403839b0D6D6D`, it represents a unique blockchain public address which can often be used as an identifier field. The issuer can be used to fetch the authenticated user's metadata, which includes their associated email address.\n\n```javascript\n/* In routes/user.js */\n\n/* 2\ufe0f\u20e3 Implement Auth Strategy */\nconst passport = require(\"passport\");\nconst MagicStrategy = require(\"passport-magic\").Strategy;\n\nconst strategy = new MagicStrategy(async function(user, done) {\n  const userMetadata = await magic.users.getMetadataByIssuer(user.issuer);\n  const existingUser = await users.findOne({ issuer: user.issuer });\n  if (!existingUser) {\n    /* Create new user if doesn't exist */\n    return signup(user, userMetadata, done);\n  } else {\n    /* Login user if otherwise */\n    return login(user, done);\n  }\n});\n\npassport.use(strategy);\n```\n\n### 3\ufe0f\u20e3 Implement Auth Behaviors\n\n#### Implement User Signup\n", "explanation": "**Purpose and Functionality:**\n\nThis code block implements an authentication strategy using Passport.js and the MagicStrategy for decentralized identity management. It verifies users based on their unique blockchain public address (`issuer`) and fetches associated metadata. If the user exists, it logs them in; otherwise, it creates a new user.\n\n**Key Functionality:**\n\n* Uses a MagicStrategy to authenticate users based on their `issuer` identifier.\n* Fetches user metadata from Magic using the `issuer`.\n* Checks for an existing user in the database based on the `issuer`.\n* Creates a new user if none exists or logs in the existing user.", "metadata": {"repo": "magiclabs/documentation", "file": "tutorials/full-stack-node-js.md", "chunk_number": 5, "total_chunks": 11}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "# Full-Stack Node.js Tutorial with Magic\n\nThis tutorial guides you through building a full-stack Node.js application using the Express framework, NeDB database, and Magic for passwordless authentication. The application allows users to sign up, log in, and buy virtual apples while demonstrating authorization and authentication.\n\n## Key Features\n\n*   Full-stack Node.js application with Express and NeDB database\n*   Passwordless authentication using Magic and Passport.js\n*   Decentralized ID (DID) token standard for authentication\n*   User management with user creation, login, and logout functionality\n*   Secure buying endpoint with authentication and error handling\n*   Logout functionality using the Magic Admin SDK\n\n## Implementation\n\n1.  Setup a full-stack Node.js server with Express, NeDB, and express-session.\n2.  Integrate Magic for passwordless authentication using the MagicStrategy and Passport.js.\n3.  Implement authentication and authorization for the buying endpoint.\n4.  Handle replay attacks for user login attempts.\n5.  Serialize and deserialize user data for efficient storage and retrieval.\n6.  Implement a logout endpoint using the Magic Admin SDK.\n\n## Next Steps\n\n*   Customize the login experience and email integration\n*   Explore Next.js and Vercel for React app development and deployment."}
{"code": "The user signup behavior is pretty straightforward in this case, where a new user would be inserted into the NeDB database.\n\n```javascript\n/* In routes/user.js */\n\n/* 3\ufe0f\u20e3 Implement Auth Behaviors */\n\n/* Implement User Signup */\nconst signup = async (user, userMetadata, done) => {\n  let newUser = {\n    issuer: user.issuer,\n    email: userMetadata.email,\n    lastLoginAt: user.claim.iat\n  };\n  await users.insert(newUser);\n  return done(null, newUser);\n};\n```\n\n#### Implement User Login\n\nSince authentication is token-based, the user login behavior needs to implement a timestamp check to protect against [replay attacks](https://go.magic.link/replay-attack) - here's a simple reference implementation, but you can make  adjustments depending on your security preference.\n\n```javascript\n/* In routes/user.js */\n\n/* Implement User Login */\nconst login = async (user, done) => {\n  /* Replay attack protection (https://go.magic.link/replay-attack) */\n  if (user.claim.iat <= user.lastLoginAt) {\n    return done(null, false, {", "explanation": "**Summary:**\n\nThe provided code blocks handle user authentication behaviors in a Node.js application:\n\n*   **User Signup**: Creates a new user in the NeDB database with the provided user information.\n*   **User Login**: Verifies user login attempts by checking the timestamp of the login request against the last login time to prevent replay attacks.", "metadata": {"repo": "magiclabs/documentation", "file": "tutorials/full-stack-node-js.md", "chunk_number": 6, "total_chunks": 11}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "# Full-Stack Node.js Tutorial with Magic\n\nThis tutorial guides you through building a full-stack Node.js application using the Express framework, NeDB database, and Magic for passwordless authentication. The application allows users to sign up, log in, and buy virtual apples while demonstrating authorization and authentication.\n\n## Key Features\n\n*   Full-stack Node.js application with Express and NeDB database\n*   Passwordless authentication using Magic and Passport.js\n*   Decentralized ID (DID) token standard for authentication\n*   User management with user creation, login, and logout functionality\n*   Secure buying endpoint with authentication and error handling\n*   Logout functionality using the Magic Admin SDK\n\n## Implementation\n\n1.  Setup a full-stack Node.js server with Express, NeDB, and express-session.\n2.  Integrate Magic for passwordless authentication using the MagicStrategy and Passport.js.\n3.  Implement authentication and authorization for the buying endpoint.\n4.  Handle replay attacks for user login attempts.\n5.  Serialize and deserialize user data for efficient storage and retrieval.\n6.  Implement a logout endpoint using the Magic Admin SDK.\n\n## Next Steps\n\n*   Customize the login experience and email integration\n*   Explore Next.js and Vercel for React app development and deployment."}
{"code": "      message: `Replay attack detected for user ${user.issuer}}.`\n    });\n  }\n  await users.update(\n    { issuer: user.issuer },\n    { $set: { lastLoginAt: user.claim.iat } }\n  );\n  return done(null, user);\n};\n\n/* Attach middleware to login endpoint */\nrouter.post(\"/login\", passport.authenticate(\"magic\"));\n```\n\nHere's an example of how to call the Login Endpoint from the client-side:\n\n```javascript\n/* In views/index.ejs */\n\n...\n\nconst didToken = await magic.auth.loginWithMagicLink({ email });\nawait fetch(`${serverUrl}user/login`, {\n  headers: new Headers({\n    Authorization: \"Bearer \" + didToken\n  }),\n  withCredentials: true,\n  credentials: \"same-origin\",\n  method: \"POST\"\n});\n\n...\n```\n\n### 4\ufe0f\u20e3 Implement Session Behavior\n\nAn awesome feature from the Passport middleware is the possibility to populate the `req.user` object with an actual database record, so that the data can be conveniently used in your endpoints. See the next section for more examples.\n\n```javascript\n/* In routes/user.js */\n\n/* 4\ufe0f\u20e3 Implement Session Behavior */\n", "explanation": "**Purpose and Functionality:**\nThis block sets up authentication for a login endpoint using Passport middleware. When a user attempts to log in, it checks for replay attacks, updates the user's last login time in the database, and authenticates the user, populating the `req.user` object. If authentication is successful, it returns the user data to the client.", "metadata": {"repo": "magiclabs/documentation", "file": "tutorials/full-stack-node-js.md", "chunk_number": 7, "total_chunks": 11}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "# Full-Stack Node.js Tutorial with Magic\n\nThis tutorial guides you through building a full-stack Node.js application using the Express framework, NeDB database, and Magic for passwordless authentication. The application allows users to sign up, log in, and buy virtual apples while demonstrating authorization and authentication.\n\n## Key Features\n\n*   Full-stack Node.js application with Express and NeDB database\n*   Passwordless authentication using Magic and Passport.js\n*   Decentralized ID (DID) token standard for authentication\n*   User management with user creation, login, and logout functionality\n*   Secure buying endpoint with authentication and error handling\n*   Logout functionality using the Magic Admin SDK\n\n## Implementation\n\n1.  Setup a full-stack Node.js server with Express, NeDB, and express-session.\n2.  Integrate Magic for passwordless authentication using the MagicStrategy and Passport.js.\n3.  Implement authentication and authorization for the buying endpoint.\n4.  Handle replay attacks for user login attempts.\n5.  Serialize and deserialize user data for efficient storage and retrieval.\n6.  Implement a logout endpoint using the Magic Admin SDK.\n\n## Next Steps\n\n*   Customize the login experience and email integration\n*   Explore Next.js and Vercel for React app development and deployment."}
{"code": "/* Defines what data are stored in the user session */\npassport.serializeUser((user, done) => {\n  done(null, user.issuer);\n});\n\n/* Populates user data in the req.user object */\npassport.deserializeUser(async (id, done) => {\n  try {\n    const user = await users.findOne({ issuer: id });\n    done(null, user);\n  } catch (err) {\n    done(err, null);\n  }\n});\n```\n\n### 5\ufe0f\u20e3 Implement User Endpoints\n\n#### Implement Get Data Endpoint\n\nThis endpoint is responsible for grabbing the currently authenticated user's data, including the number of apples \ud83c\udf4e to be displayed in the front-end! Note how this endpoint uses `req.isAuthenticated()` to check if the current user is authenticated, and `req.user` can be passed to the front-end without fetching from the database again!\n\n```javascript\n/* In routes/user.js */\n\n/* 5\ufe0f\u20e3 Implement User Endpoints */\n\n/* Implement Get Data Endpoint */\nrouter.get(\"/\", async (req, res) => {\n  if (req.isAuthenticated()) {\n    return res\n      .status(200)\n      .json(req.user)\n      .end();\n  } else {", "explanation": "**Summary**\n\nThis block defines two functions for Passport.js: `serializeUser` and `deserializeUser`. \n\n- `serializeUser`: Stores only the `issuer` field of the user object in the user session.\n- `deserializeUser`: Populates the `req.user` object with the user's data by querying the database using the stored `issuer` field. \n\nThis allows for efficient storage and retrieval of user data during authentication.", "metadata": {"repo": "magiclabs/documentation", "file": "tutorials/full-stack-node-js.md", "chunk_number": 8, "total_chunks": 11}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "# Full-Stack Node.js Tutorial with Magic\n\nThis tutorial guides you through building a full-stack Node.js application using the Express framework, NeDB database, and Magic for passwordless authentication. The application allows users to sign up, log in, and buy virtual apples while demonstrating authorization and authentication.\n\n## Key Features\n\n*   Full-stack Node.js application with Express and NeDB database\n*   Passwordless authentication using Magic and Passport.js\n*   Decentralized ID (DID) token standard for authentication\n*   User management with user creation, login, and logout functionality\n*   Secure buying endpoint with authentication and error handling\n*   Logout functionality using the Magic Admin SDK\n\n## Implementation\n\n1.  Setup a full-stack Node.js server with Express, NeDB, and express-session.\n2.  Integrate Magic for passwordless authentication using the MagicStrategy and Passport.js.\n3.  Implement authentication and authorization for the buying endpoint.\n4.  Handle replay attacks for user login attempts.\n5.  Serialize and deserialize user data for efficient storage and retrieval.\n6.  Implement a logout endpoint using the Magic Admin SDK.\n\n## Next Steps\n\n*   Customize the login experience and email integration\n*   Explore Next.js and Vercel for React app development and deployment."}
{"code": "    return res.status(401).end(`User is not logged in.`);\n  }\n});\n```\n\nHere's how you would call the Get Data Endpoint from the client-side:\n\n```javascript\n/* In views/index.ejs */\n\n...\n\nlet res = await fetch(`${serverUrl}/user/`);\nif (res.status == 200) {\n  let userData = await res.json();\n  let appleCount = userData.appleCount;\n  ...\n}\n\n...\n```\n\n#### Implement Buy Apple Endpoint\n\nFollows similar pattern as the Get Data Endpoint, instead authenticated user can now update and increment their apple count!\n\n```javascript\n/* In routes/user.js */\n\n/* Implement Buy Apple Endpoint */\nrouter.post(\"/buy-apple\", async (req, res) => {\n  if (req.isAuthenticated()) {\n    await users.update(\n      { issuer: req.user.issuer },\n      { $inc: { appleCount: 1 } }\n    );\n    return res.status(200).end();\n  } else {\n    return res.status(401).end(`User is not logged in.`);\n  }\n});\n```\n\nHere's how you would call the Buy Apple Endpoint from the client-side:\n\n```javascript\n/* In views/index.ejs */\n\nconst handleBuyApple = async () => {", "explanation": "**Implementation of Buy Apple Endpoint and Error Handling**\n\nThis code block consists of two main components:\n\n1. **Server-side endpoint** (routes/user.js): A POST endpoint called \"/buy-apple\" that increments a user's apple count if they are authenticated. If the user is not logged in, it returns a 401 error.\n2. **Client-side call** (views/index.ejs): A function `handleBuyApple` that makes a POST request to the \"/buy-apple\" endpoint to update the user's apple count.\n\nFunctionality:\n\n- Checks if the user is authenticated (`req.isAuthenticated()`).\n- If authenticated, updates the user's apple count by incrementing it by 1.\n- Returns a 200 status code if successful, or a 401 error if the user is not logged in.\n- Client-side call makes a POST request to the endpoint and handles the response accordingly.", "metadata": {"repo": "magiclabs/documentation", "file": "tutorials/full-stack-node-js.md", "chunk_number": 9, "total_chunks": 11}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "# Full-Stack Node.js Tutorial with Magic\n\nThis tutorial guides you through building a full-stack Node.js application using the Express framework, NeDB database, and Magic for passwordless authentication. The application allows users to sign up, log in, and buy virtual apples while demonstrating authorization and authentication.\n\n## Key Features\n\n*   Full-stack Node.js application with Express and NeDB database\n*   Passwordless authentication using Magic and Passport.js\n*   Decentralized ID (DID) token standard for authentication\n*   User management with user creation, login, and logout functionality\n*   Secure buying endpoint with authentication and error handling\n*   Logout functionality using the Magic Admin SDK\n\n## Implementation\n\n1.  Setup a full-stack Node.js server with Express, NeDB, and express-session.\n2.  Integrate Magic for passwordless authentication using the MagicStrategy and Passport.js.\n3.  Implement authentication and authorization for the buying endpoint.\n4.  Handle replay attacks for user login attempts.\n5.  Serialize and deserialize user data for efficient storage and retrieval.\n6.  Implement a logout endpoint using the Magic Admin SDK.\n\n## Next Steps\n\n*   Customize the login experience and email integration\n*   Explore Next.js and Vercel for React app development and deployment."}
{"code": "  await fetch(`${serverUrl}/user/buy-apple`, { method: \"POST\" });\n  render();\n};\n```\n\n#### Implement Logout Endpoint\n\nTo log out the user, you can use the Magic Admin SDK to logout the current user based on the user ID, remember to also call `req.logout()` to clear the Express user session as well!\n\n```javascript\n/* In routes/user.js */\n\n/* Implement Logout Endpoint */\nrouter.post(\"/logout\", async (req, res) => {\n  if (req.isAuthenticated()) {\n    await magic.users.logoutByIssuer(req.user.issuer);\n    req.logout();\n    return res.status(200).end();\n  } else {\n    return res.status(401).end(`User is not logged in.`);\n  }\n});\n```\n\nWith this, you no longer have to call `magic.user.logout()` on the client-side.\n\n```javascript\n/* In views/index.ejs */\n\nconst handleLogout = async () => {\n  // await magic.user.logout(); NO LONGER NEEDED!\n  await fetch(`${serverUrl}/user/logout`, { method: \"POST\" });\n  render();\n};\n```\n\n{% hint style=\"success\" %}", "explanation": "This code block implements a logout endpoint using the Magic Admin SDK. It allows a user to log out by sending a POST request to `/logout`, which clears the Express user session and logs out the user from Magic. If the user is not logged in, it returns a 401 status code. The client-side can then call this endpoint to log out, eliminating the need for `magic.user.logout()`.", "metadata": {"repo": "magiclabs/documentation", "file": "tutorials/full-stack-node-js.md", "chunk_number": 10, "total_chunks": 11}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "# Full-Stack Node.js Tutorial with Magic\n\nThis tutorial guides you through building a full-stack Node.js application using the Express framework, NeDB database, and Magic for passwordless authentication. The application allows users to sign up, log in, and buy virtual apples while demonstrating authorization and authentication.\n\n## Key Features\n\n*   Full-stack Node.js application with Express and NeDB database\n*   Passwordless authentication using Magic and Passport.js\n*   Decentralized ID (DID) token standard for authentication\n*   User management with user creation, login, and logout functionality\n*   Secure buying endpoint with authentication and error handling\n*   Logout functionality using the Magic Admin SDK\n\n## Implementation\n\n1.  Setup a full-stack Node.js server with Express, NeDB, and express-session.\n2.  Integrate Magic for passwordless authentication using the MagicStrategy and Passport.js.\n3.  Implement authentication and authorization for the buying endpoint.\n4.  Handle replay attacks for user login attempts.\n5.  Serialize and deserialize user data for efficient storage and retrieval.\n6.  Implement a logout endpoint using the Magic Admin SDK.\n\n## Next Steps\n\n*   Customize the login experience and email integration\n*   Explore Next.js and Vercel for React app development and deployment."}
{"code": "\ud83c\udf89 **Congratulations!** Now that you've completed the walkthrough, you should have a working version of the \ud83c\udf4e Apple Store app!\n{% endhint %}\n\n## \ud83d\udc49 What's Next\n\nDid you know you can actually customize the login experience \\(using your own UI instead of the default\\) and also have a branded magic link email? You can learn how to do that with the link below!\n\n{% page-ref page=\"../customization.md\" %}\n\nLearn about how to use the popular [**Next.js**](https://nextjs.org/) framework to build a React app and deploy it with [**Vercel**](https://vercel.com/)!\n\n{% page-ref page=\"next-js-integration.md\" %}\n\n", "explanation": "This block is a final call to action in a walkthrough guide, providing next steps for users after completing the initial setup. It offers two additional learning paths:\n\n1. Customizing the login experience and email.\n2. Using Next.js and Vercel for React app development and deployment.", "metadata": {"repo": "magiclabs/documentation", "file": "tutorials/full-stack-node-js.md", "chunk_number": 11, "total_chunks": 11}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "# Full-Stack Node.js Tutorial with Magic\n\nThis tutorial guides you through building a full-stack Node.js application using the Express framework, NeDB database, and Magic for passwordless authentication. The application allows users to sign up, log in, and buy virtual apples while demonstrating authorization and authentication.\n\n## Key Features\n\n*   Full-stack Node.js application with Express and NeDB database\n*   Passwordless authentication using Magic and Passport.js\n*   Decentralized ID (DID) token standard for authentication\n*   User management with user creation, login, and logout functionality\n*   Secure buying endpoint with authentication and error handling\n*   Logout functionality using the Magic Admin SDK\n\n## Implementation\n\n1.  Setup a full-stack Node.js server with Express, NeDB, and express-session.\n2.  Integrate Magic for passwordless authentication using the MagicStrategy and Passport.js.\n3.  Implement authentication and authorization for the buying endpoint.\n4.  Handle replay attacks for user login attempts.\n5.  Serialize and deserialize user data for efficient storage and retrieval.\n6.  Implement a logout endpoint using the Magic Admin SDK.\n\n## Next Steps\n\n*   Customize the login experience and email integration\n*   Explore Next.js and Vercel for React app development and deployment."}
{"code": "# \u25b2 Next.js Integration\n\n\\*\\*\\*\\*[**Next.js**](https://nextjs.org/) ****is a popular React Framework with many built-in features, such as:\n\n* An intuitive page-based routing system \\(with support for dynamic routes\\)\n* Pre-rendering, both static generation \\(SSG\\) and server-rendering \\(SSR\\) are supported on a per-page basis\n* Automatic code splitting for faster page loads\n* Client-side routing with optimized prefetching\n* Built-in CSS and Sass support, and support for any CSS-in-JS library\n* Development environment which supports Hot Module Replacement\n* API routes to build API endpoints with Serverless Functions\n* Fully extendable\n\nA Next.js application can also be seamlessly deployed with [**Vercel**](https://vercel.com/) - an all-in-one platform for static & Jamstack deployment, serverless functions, and global CDN. \n\n## \ud83d\ude80 Deploy Next.js Magic Example\n", "explanation": "This block is an informational text that describes the key features and benefits of Next.js, a popular React framework. It highlights the framework's built-in features, such as page-based routing, pre-rendering, and automatic code splitting, and mentions its seamless deployment on Vercel for static, Jamstack, and serverless applications.", "metadata": {"repo": "magiclabs/documentation", "file": "tutorials/next-js-integration.md", "chunk_number": 1, "total_chunks": 5}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "## Integration with Next.js\n\nThis tutorial guides you through integrating Magic authentication with a Next.js application. Key topics include:\n\n* Configuring environment values with required Magic API keys (`NEXT_EXAMPLE_MAGIC_PUBLISHABLE_KEY` and `NEXT_EXAMPLE_MAGIC_SECRET_KEY`)\n* Setting up Magic API keys by retrieving them from the Magic Dashboard and updating the necessary fields\n* Deploying a Next.js application with Magic integration using a template (specifically the \"with-magic\" example) through a platform like Vercel\n\nAdditionally, this tutorial highlights the features and benefits of using Next.js, such as page-based routing, pre-rendering, and automatic code splitting, along with seamless deployment options on Vercel for static, Jamstack, and serverless applications."}
{"code": "In this tutorial, we will be showing how to integrate Magic authentication with an example Next.js application, where users can sign up/login, get profile info, and logout.\n\nDeploying and iterating on a Next.js application is super easy. You can simply click on the link below to get started:\n\n\ud83d\udc49 [**Deploy Next.js Magic Example**](https://vercel.com/new/project?template=https://github.com/zeit/next.js/tree/canary/examples/with-magic)\\*\\*\\*\\*\n\n### 1\ufe0f\u20e3 Configure Environment Values\n\n![](../.gitbook/assets/screen-shot-2020-04-22-at-9.06.19-pm.png)\n\nAfter you click on the [**Deploy Next.js Magic Example**](https://vercel.com/new/project?template=https://github.com/zeit/next.js/tree/canary/examples/with-magic) link, you'll be presented with the form shown above if you already have an account with Vercel, if not you'll be able to sign up for a new account. Note there are two **Environment Values** are required to continue `NEXT_EXAMPLE_MAGIC_PUBLISHABLE_KEY` and `NEXT_EXAMPLE_MAGIC_SECRET_KEY` .\n", "explanation": "This block is a tutorial introduction on integrating Magic authentication with a Next.js application. It provides a link to deploy the example application and explains the first step, which is configuring environment values by providing two required keys: `NEXT_EXAMPLE_MAGIC_PUBLISHABLE_KEY` and `NEXT_EXAMPLE_MAGIC_SECRET_KEY`.", "metadata": {"repo": "magiclabs/documentation", "file": "tutorials/next-js-integration.md", "chunk_number": 2, "total_chunks": 5}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "## Integration with Next.js\n\nThis tutorial guides you through integrating Magic authentication with a Next.js application. Key topics include:\n\n* Configuring environment values with required Magic API keys (`NEXT_EXAMPLE_MAGIC_PUBLISHABLE_KEY` and `NEXT_EXAMPLE_MAGIC_SECRET_KEY`)\n* Setting up Magic API keys by retrieving them from the Magic Dashboard and updating the necessary fields\n* Deploying a Next.js application with Magic integration using a template (specifically the \"with-magic\" example) through a platform like Vercel\n\nAdditionally, this tutorial highlights the features and benefits of using Next.js, such as page-based routing, pre-rendering, and automatic code splitting, along with seamless deployment options on Vercel for static, Jamstack, and serverless applications."}
{"code": "To grab these two values, you need to sign up or log in to the [**Magic Dashboard**](https://dashboard.magic.link/) to view your API keys. Once you are logged in you, you can then update the `'NEXT_EXAMPLE_MAGIC_SECRET_KEY'` string to your actual _secret_ API key, which looks something like `sk_test_*********`.\n\n![](../.gitbook/assets/image.png)\n\nOnce that's done, you can update the `'NEXT_EXAMPLE_MAGIC_PUBLISHABLE_KEY'` string to your publishable API key, which looks something like `pk_test_*********`.\n\n![](../.gitbook/assets/image%20%282%29.png)\n\nOnce the keys are copy and pasted in the **Environment Values** field, you can hit **Continue**.\n\n![](../.gitbook/assets/screen-shot-2020-04-22-at-9.14.18-pm%20%281%29.png)\n\nNothing needs to be changed here, hit **Continue** again.\n\n![](../.gitbook/assets/screen-shot-2020-04-22-at-9.15.55-pm.png)\n\n### 2\ufe0f\u20e3 Setup Github Repository\n", "explanation": "This block provides instructions on how to set up Magic API keys in an application. It guides users to:\n\n1. Log in to the Magic Dashboard to retrieve their secret API key and publishable API key.\n2. Update the necessary fields ('NEXT_EXAMPLE_MAGIC_SECRET_KEY' and 'NEXT_EXAMPLE_MAGIC_PUBLISHABLE_KEY') with the retrieved keys.\n3. Continue through the setup process without making any additional changes.", "metadata": {"repo": "magiclabs/documentation", "file": "tutorials/next-js-integration.md", "chunk_number": 3, "total_chunks": 5}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "## Integration with Next.js\n\nThis tutorial guides you through integrating Magic authentication with a Next.js application. Key topics include:\n\n* Configuring environment values with required Magic API keys (`NEXT_EXAMPLE_MAGIC_PUBLISHABLE_KEY` and `NEXT_EXAMPLE_MAGIC_SECRET_KEY`)\n* Setting up Magic API keys by retrieving them from the Magic Dashboard and updating the necessary fields\n* Deploying a Next.js application with Magic integration using a template (specifically the \"with-magic\" example) through a platform like Vercel\n\nAdditionally, this tutorial highlights the features and benefits of using Next.js, such as page-based routing, pre-rendering, and automatic code splitting, along with seamless deployment options on Vercel for static, Jamstack, and serverless applications."}
{"code": "You now have the option to connect your Github account and create a repository based on Next.js's official [**`with-magic`**](https://github.com/zeit/next.js/tree/canary/examples/with-magic) example.\n\n![](../.gitbook/assets/screen-shot-2020-04-22-at-9.17.15-pm.png)\n\n### 3\ufe0f\u20e3 Deploy Application\n\nNow you are presented with the screen below, nothing needs to be changed, simply hit **Deploy** to start the production deployment of the Next.js Magic example application!\n\n![](../.gitbook/assets/screen-shot-2020-04-22-at-9.17.42-pm.png)\n\n![Application is building and deploying](../.gitbook/assets/screen-shot-2020-04-22-at-9.18.13-pm.png)\n\n![Application deployment complete and live!](../.gitbook/assets/screen-shot-2020-04-22-at-9.23.56-pm.png)\n\n{% hint style=\"success\" %}\nNow you can visit [**next-js.sean-demo.now.sh**](https://next-js.sean-demo.now.sh/) \\(or your application's URL\\) to check out your freshly deployed application!\n{% endhint %}\n", "explanation": "This block describes the steps to deploy a Next.js application from a template, specifically the \"with-magic\" example, by connecting a Github account and using a deployment platform (likely Vercel, formerly Zeit).", "metadata": {"repo": "magiclabs/documentation", "file": "tutorials/next-js-integration.md", "chunk_number": 4, "total_chunks": 5}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "## Integration with Next.js\n\nThis tutorial guides you through integrating Magic authentication with a Next.js application. Key topics include:\n\n* Configuring environment values with required Magic API keys (`NEXT_EXAMPLE_MAGIC_PUBLISHABLE_KEY` and `NEXT_EXAMPLE_MAGIC_SECRET_KEY`)\n* Setting up Magic API keys by retrieving them from the Magic Dashboard and updating the necessary fields\n* Deploying a Next.js application with Magic integration using a template (specifically the \"with-magic\" example) through a platform like Vercel\n\nAdditionally, this tutorial highlights the features and benefits of using Next.js, such as page-based routing, pre-rendering, and automatic code splitting, along with seamless deployment options on Vercel for static, Jamstack, and serverless applications."}
{"code": "Now you can also check out the Next.js Magic [**open source example**](https://github.com/zeit/next.js/tree/canary/examples/with-magic) to learn more about the implementation and start building your application from this boilerplate if you've setup a Github repository from Step 2!\n\n", "explanation": "This block is informational text that provides a link to a Next.js Magic open-source example on GitHub, allowing users to explore the implementation and potentially use it as a starting point for their own application.", "metadata": {"repo": "magiclabs/documentation", "file": "tutorials/next-js-integration.md", "chunk_number": 5, "total_chunks": 5}, "repository_explanation": "The `magiclabs/documentation` repository is the official documentation for the Magic SDK and API. It contains guides, tutorials, and references for developers to integrate Magic's authentication and user management features into their applications.\n\nKey content:\n\n* Developer guides for Magic SDKs (e.g., JavaScript, iOS, Android)\n* API reference documentation\n* Authentication and user management tutorials\n* Best practices and troubleshooting guides\n\nThe purpose of this repository is to provide a central hub for Magic developers to access accurate and up-to-date information on implementing Magic's solutions in their projects.", "file_summary": "## Integration with Next.js\n\nThis tutorial guides you through integrating Magic authentication with a Next.js application. Key topics include:\n\n* Configuring environment values with required Magic API keys (`NEXT_EXAMPLE_MAGIC_PUBLISHABLE_KEY` and `NEXT_EXAMPLE_MAGIC_SECRET_KEY`)\n* Setting up Magic API keys by retrieving them from the Magic Dashboard and updating the necessary fields\n* Deploying a Next.js application with Magic integration using a template (specifically the \"with-magic\" example) through a platform like Vercel\n\nAdditionally, this tutorial highlights the features and benefits of using Next.js, such as page-based routing, pre-rendering, and automatic code splitting, along with seamless deployment options on Vercel for static, Jamstack, and serverless applications."}

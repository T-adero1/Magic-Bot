{"code": "/node_modules\n/dist\n.eslintrc.js\n", "explanation": "This block appears to list a set of directories and files in a project's file system, specifically:\n\n* A directory named \"/node_modules\"\n* Another directory named \"/dist\"\n* A configuration file named \".eslintrc.js\" \n\nNo specific purpose or functionality is clear from this listing alone.", "metadata": {"repo": "magiclabs/next-css", "file": ".eslintignore", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** `magiclabs/next-css`\n\n**Purpose:** A Next.js plugin for CSS processing.\n\n**Content:** A lightweight plugin that integrates with Next.js to enable automatic CSS optimization, minification, and compression.", "file_summary": "Here is a concise summary of the '.eslintignore' file:\n\n**File Summary:**\nThe '.eslintignore' file lists directories and files in the project's file system that should be ignored by ESLint, including node_modules, dist, and the .eslintrc.js configuration file."}
{"code": "module.exports = {\n  extends: ['@ikscodes/eslint-config'],\n\n  parserOptions: {\n    project: ['./tsconfig.json']\n  },\n\n  rules: {\n    // Core ESLint rules\n    'no-alert': 0,\n    'no-cond-assign': 0,\n    'no-param-reassign': 0,\n\n    // Import rules\n    'import/extensions': 0,\n    'import/no-extraneous-dependencies': [1, { devDependencies: true }],\n    'import/prefer-default-export': 0,\n\n    // TypeScript rules\n    '@typescript-eslint/await-thenable': 0,\n    '@typescript-eslint/no-unsafe-call': 0,\n    '@typescript-eslint/no-unsafe-return': 0,\n    '@typescript-eslint/no-unsafe-assignment': 0,\n    '@typescript-eslint/no-unsafe-member-access': 0,\n    '@typescript-eslint/explicit-module-boundary-types': 0,\n  },\n\n  settings: {\n    'import/resolver': {\n      typescript: {\n        project: [ './tsconfig.json'],\n      }\n    }\n  }\n}\n", "explanation": "**ESLint Configuration Block**\n\nThis block exports an ESLint configuration that extends the `@ikscodes/eslint-config` preset.\n\nIt:\n\n* Specifies parser options using a local `tsconfig.json`\n* Disables or configures various ESLint rules for TypeScript development\n* Configures import resolver settings to use local `tsconfig.json` files", "metadata": {"repo": "magiclabs/next-css", "file": ".eslintrc.js", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** `magiclabs/next-css`\n\n**Purpose:** A Next.js plugin for CSS processing.\n\n**Content:** A lightweight plugin that integrates with Next.js to enable automatic CSS optimization, minification, and compression.", "file_summary": "Here is a concise summary of the file '.eslintrc.js':\n\n**ESLint Configuration File**\n\nConfigures ESLint using the `@ikscodes/eslint-config` preset, specifying parser options from local `tsconfig.json` and configuring rules for TypeScript development."}
{"code": "---\nname: Bug Report\nabout: Use this template to report a bug.\ntitle: \"[DESCRIPTIVE BUG NAME]\"\nlabels: \ud83d\udc1b Bug Report, \ud83d\udd0d Needs Triage\n---\n\n### \u2705 Prerequisites\n\n- [ ] Did you perform a cursory search of open issues? Is this bug already reported elsewhere?\n- [ ] Are you running the latest SDK version?\n- [ ] Are you reporting to the correct repository (`@magiclabs/next-css`)?\n\n### \ud83d\udc1b Description\n\n[Description of the bug.]\n\n### \ud83e\udde9 Steps to Reproduce\n\n1. [First Step]\n2. [Second Step]\n3. [and so on...]\n\n### \ud83e\udd14 Expected behavior\n\n[What you expected to happen?]\n\n### \ud83d\ude2e Actual behavior\n\n[What actually happened? Please include any error stack traces you encounter.]\n\n### \ud83d\udcbb Code Sample\n\n[If possible, please provide a code repository, gist, code snippet or sample files to reproduce the issue.]\n\n### \ud83c\udf0e Environment\n\n| Software              | Version(s) |\n| --------------------- | ---------- |\n| `@magiclabs/next-css` |\n| Node                  |\n| `yarn`                |\n| Operating System      |\n", "explanation": "Here is a concise summary of the purpose and functionality of this block:\n\n**Purpose:** A bug reporting template for issues related to the `@magiclabs/next-css` repository.\n\n**Functionality:** Provides a structured format for users to report bugs, including prerequisites, description, steps to reproduce, expected vs. actual behavior, code sample (if applicable), and environment details.", "metadata": {"repo": "magiclabs/next-css", "file": ".github/ISSUE_TEMPLATE/bug_report.md", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** `magiclabs/next-css`\n\n**Purpose:** A Next.js plugin for CSS processing.\n\n**Content:** A lightweight plugin that integrates with Next.js to enable automatic CSS optimization, minification, and compression.", "file_summary": "Here is a concise summary of the file '.github/ISSUE_TEMPLATE/bug_report.md':\n\n**Bug Reporting Template**\nProvides a structured format for users to report bugs in the `@magiclabs/next-css` repository, including detailed information on prerequisites, steps to reproduce, and environment specifics."}
{"code": "---\nname: Feature Request\nabout: Use this template to request a new feature.\ntitle: \"[DESCRIPTIVE FEATURE NAME]\"\nlabels: \u2728Feature Request\n---\n\n### \u2705 Prerequisites\n\n- [ ] Did you perform a cursory search of open issues? Is this feature already requested elsewhere?\n- [ ] Are you reporting to the correct repository (`@magic-sdk/admin`)?\n\n### \u2728 Feature Request\n\n[Description of the feature.]\n\n## \ud83e\udde9 Context\n\n[Explain any additional context or rationale for this feature. What are you trying to accomplish?]\n\n## \ud83d\udcbb Examples\n\n[Do you have any example(s) for the requested feature? If so, describe/demonstrate your example(s) here.]\n", "explanation": "**Purpose:** Template for submitting a new feature request.\n\n**Functionality:** A structured format for users to propose a feature, including prerequisites (search existing issues and correct repository), description, context, and examples.", "metadata": {"repo": "magiclabs/next-css", "file": ".github/ISSUE_TEMPLATE/feature_request.md", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** `magiclabs/next-css`\n\n**Purpose:** A Next.js plugin for CSS processing.\n\n**Content:** A lightweight plugin that integrates with Next.js to enable automatic CSS optimization, minification, and compression.", "file_summary": "Here is a concise holistic summary of the file '.github/ISSUE_TEMPLATE/feature_request.md':\n\n\"Structured template for submitting new feature requests, ensuring clear proposal details.\""}
{"code": "---\nname: Question\nabout: Use this template to request help or ask a question.\ntitle: \"[WHAT'S YOUR QUESTION?]\"\nlabels: \u2753Question\n---\n\n### \u2705 Prerequisites\n\n- [ ] Did you perform a cursory search of open issues? Is this question already asked elsewhere?\n- [ ] Are you reporting to the correct repository (`@magiclabs/next-css`)?\n\n### \u2753 Question\n\n[Ask your question here, please be as detailed as possible!]\n\n### \ud83c\udf0e Environment\n\n| Software              | Version(s) |\n| --------------------- | ---------- |\n| `@magiclabs/next-css` |\n| Node                  |\n| `yarn`                |\n| Operating System      |\n", "explanation": "Here is a concise summary of the purpose and functionality of this block:\n\n**Purpose:** A template for users to ask questions or request help.\n\n**Functionality:** Provides a structured format for users to:\n\n* Confirm they've searched existing issues\n* Report to the correct repository\n* Describe their question in detail\n* Specify their environment settings (software, versions, etc.)", "metadata": {"repo": "magiclabs/next-css", "file": ".github/ISSUE_TEMPLATE/question.md", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** `magiclabs/next-css`\n\n**Purpose:** A Next.js plugin for CSS processing.\n\n**Content:** A lightweight plugin that integrates with Next.js to enable automatic CSS optimization, minification, and compression.", "file_summary": "Here is a concise summary of the '.github/ISSUE_TEMPLATE/question.md' file:\n\n\"Template for users to ask questions or request help by confirming issue search, reporting to correct repository, detailing question, and specifying environment settings.\""}
{"code": "### \ud83d\udce6 Pull Request\n\n[Provide a general summary of the pull request here.]\n\n### \u2705 Fixed Issues\n\n- [List any fixed issues here like: Fixes #XXXX]\n\n### \ud83d\udea8 Test instructions\n\n[Describe any additional context required to test the PR/feature/bug fix.]\n\n### \u26a0\ufe0f Don't forget to add a [semver](https://semver.org/) label!\n\n- `patch`: Bug Fix?\n- `minor`: New Feature?\n- `major`: Breaking Change?\n- `skip-release`: It's unnecessary to publish this change.\n", "explanation": "Here is a concise summary:\n\n**Purpose:** Documenting details for a Pull Request (PR) in a collaborative development environment.\n\n**Functionality:**\n\n* Provides a brief summary of the PR\n* Lists fixed issues related to the PR\n* Specifies test instructions and context\n* Reminds to add a semver label indicating the type of change (patch, minor, major, or skip-release)", "metadata": {"repo": "magiclabs/next-css", "file": ".github/PULL_REQUEST_TEMPLATE.md", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** `magiclabs/next-css`\n\n**Purpose:** A Next.js plugin for CSS processing.\n\n**Content:** A lightweight plugin that integrates with Next.js to enable automatic CSS optimization, minification, and compression.", "file_summary": "Here is a concise holistic summary:\n\nThe '.github/PULL_REQUEST_TEMPLATE.md' file serves as a standardized template for documenting Pull Requests in a collaborative development environment, ensuring consistency and completeness by covering key details such as a brief summary, fixed issues, test instructions, and semver label indication of change type."}
{"code": "name: Publish\non:\n  push:\n    branches:\n      - \"master\"\n      - \"main\"\n\nenv:\n  GITHUB_TOKEN: ${{ secrets.ADMIN_TOKEN }}\n  GH_TOKEN: ${{ secrets.ADMIN_TOKEN }}\n  NPM_TOKEN: ${{ secrets.NPM_TOKEN }}\n\njobs:\n  publish:\n    runs-on: ubuntu-20.04\n    name: Publish\n    environment: production\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          token: ${{ secrets.ADMIN_TOKEN }}\n\n      - name: Prepare repository\n        run: git fetch --unshallow --tags\n\n      - name: Setup node\n        uses: actions/setup-node@v3\n        with:\n          node-version: 16\n          cache: 'yarn'\n\n      - name: Install dependencies\n        run: |\n          yarn -v\n          yarn install --immutable\n\n      - name: Build\n        run: yarn run build\n\n      - name: Create Release\n        run: yarn auto shipit -v\n", "explanation": "Here is a concise summary:\n\n**Purpose:** Automatically publish code changes on push to \"master\" or \"main\" branches.\n\n**Functionality:** Uses GitHub Actions to checkout code, install dependencies, build, and create a release using Yarn and custom scripts.", "metadata": {"repo": "magiclabs/next-css", "file": ".github/workflows/publish.yml", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** `magiclabs/next-css`\n\n**Purpose:** A Next.js plugin for CSS processing.\n\n**Content:** A lightweight plugin that integrates with Next.js to enable automatic CSS optimization, minification, and compression.", "file_summary": "Here's a concise and holistic summary:\n\n**File Summary:**\n`.github/workflows/publish.yml` automates publishing code changes by checking out code, installing dependencies, building, and creating releases on push to \"master\" or \"main\" branches using GitHub Actions, Yarn, and custom scripts."}
{"code": "name: Tests\nconcurrency:\n  group: tests-${{ github.ref }}\n  cancel-in-progress: true\non:\n  push:\n    branches:\n      - \"master\"\n      - \"main\"\n  pull_request:\n\njobs:\n  lint:\n    runs-on: ubuntu-20.04\n    name: Run linter and package audit\n    container:\n      image: node:16-slim\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Setup node\n        uses: actions/setup-node@v3\n        with:\n          node-version: 16\n          cache: 'yarn'\n      - run: |\n          yarn -v\n          yarn\n\n      - name: Lint\n        run: |\n          yarn run lint\n\n      - name: Audit Production Dependencies\n        run: yarn audit --groups dependencies || true\n\n  test:\n    runs-on: ubuntu-20.04\n    name: Run tests\n    container:\n      image: node:16-slim\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Setup node\n        uses: actions/setup-node@v3\n        with:\n          node-version: 16\n          cache: 'yarn'\n      - run: |\n          yarn -v\n          yarn\n\n      - name: Test\n        run: |\n          yarn run lib:build", "explanation": "Here is a concise summary:\n\n**Purpose:** Run automated tests and audits on push to master/main branches and pull requests.\n\n**Functionality:** Two jobs are executed:\n\n1. **Linting**: Runs linter and package audit using Node.js 16.\n2. **Testing**: Runs unit tests using Node.js 16, building the library in the process.", "metadata": {"repo": "magiclabs/next-css", "file": ".github/workflows/test.yml", "chunk_number": 1, "total_chunks": 2}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** `magiclabs/next-css`\n\n**Purpose:** A Next.js plugin for CSS processing.\n\n**Content:** A lightweight plugin that integrates with Next.js to enable automatic CSS optimization, minification, and compression.", "file_summary": "Here is a concise and holistic summary of the file '.github/workflows/test.yml':\n\n**Run Automated Tests**: On push to master/main branches or pull requests, this workflow executes two jobs: Linting & Package Audit, and Testing & Unit Test execution, using Node.js 16."}
{"code": "          yarn run test\n", "explanation": "**Purpose:** Run automated tests.\n\n**Functionality:** Execute a set of pre-defined tests using Yarn, a package manager for JavaScript projects.", "metadata": {"repo": "magiclabs/next-css", "file": ".github/workflows/test.yml", "chunk_number": 2, "total_chunks": 2}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** `magiclabs/next-css`\n\n**Purpose:** A Next.js plugin for CSS processing.\n\n**Content:** A lightweight plugin that integrates with Next.js to enable automatic CSS optimization, minification, and compression.", "file_summary": "Here is a concise and holistic summary of the file '.github/workflows/test.yml':\n\n**Run Automated Tests**: On push to master/main branches or pull requests, this workflow executes two jobs: Linting & Package Audit, and Testing & Unit Test execution, using Node.js 16."}
{"code": "yarn lint-staged\n", "explanation": "This command runs a linter on staged files (i.e., files in Git's index but not yet committed) using Yarn.", "metadata": {"repo": "magiclabs/next-css", "file": ".husky/pre-commit", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** `magiclabs/next-css`\n\n**Purpose:** A Next.js plugin for CSS processing.\n\n**Content:** A lightweight plugin that integrates with Next.js to enable automatic CSS optimization, minification, and compression.", "file_summary": "Here is a concise and to-the-point holistic summary of the file '.husky/pre-commit':\n\n\"Runs a linter on unstaged files using Yarn, enforcing code quality before commit.\""}
{"code": "{\n  \"*.{ts,tsx}\": [\n    \"eslint --fix\"\n  ]\n}\n", "explanation": "**Block Purpose:** Automatically fix ESLint errors on TypeScript/TSX files.\n\n**Functionality:** Runs `eslint` with the `--fix` flag on files ending in `.ts`, `.tsx`.", "metadata": {"repo": "magiclabs/next-css", "file": ".lintstagedrc.json", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** `magiclabs/next-css`\n\n**Purpose:** A Next.js plugin for CSS processing.\n\n**Content:** A lightweight plugin that integrates with Next.js to enable automatic CSS optimization, minification, and compression.", "file_summary": "Here is a holistic summary of the file '.lintstagedrc.json':\n\n\"Automatically fix ESLint errors for TypeScript/TSX files.\""}
{"code": "module.exports = require('@ikscodes/prettier-config');\n", "explanation": "This is a JavaScript module that exports a Prettier configuration object from the `@ikscodes/prettier-config` package, making it available for use in another project or file.", "metadata": {"repo": "magiclabs/next-css", "file": ".prettierrc.js", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** `magiclabs/next-css`\n\n**Purpose:** A Next.js plugin for CSS processing.\n\n**Content:** A lightweight plugin that integrates with Next.js to enable automatic CSS optimization, minification, and compression.", "file_summary": "Here is a concise summary of the `.prettierrc.js` file:\n\n\"Configuration file exporting a Prettier setup from `@ikscodes/prettier-config`.\""}
{"code": "# v1.0.0 (Wed Dec 29 2021)\n\n#### \ud83d\udca5 Breaking Change\n\n- NextJS 12 & Webpack 5 support [#4](https://github.com/magiclabs/next-css/pull/4) ([@smithki](https://github.com/smithki))\n\n#### Authors: 1\n\n- Ian K Smith ([@smithki](https://github.com/smithki))\n\n---\n\n# v0.2.3 (Thu Feb 25 2021)\n\n#### \u26a0\ufe0f Pushed to `main`\n\n- Merge branch 'main' of https://github.com/magiclabs/next-css into main ([@smithki](https://github.com/smithki))\n- Improve error message formatting ([@smithki](https://github.com/smithki))\n\n#### Authors: 1\n\n- Ian K Smith ([@smithki](https://github.com/smithki))\n\n---\n\n# v0.2.2 (Thu Feb 25 2021)\n\n#### \u26a0\ufe0f Pushed to `main`\n\n- Merge branch 'main' of https://github.com/magiclabs/next-css into main ([@smithki](https://github.com/smithki))\n- Improve error message formatting ([@smithki](https://github.com/smithki))\n\n#### Authors: 1\n\n- Ian K Smith ([@smithki](https://github.com/smithki))\n\n---\n\n# v0.2.1 (Thu Feb 25 2021)\n\n#### \u26a0\ufe0f Pushed to `main`\n", "explanation": "This block appears to be a Changelog for a software package, specifically Next-CSS. It lists updates, bug fixes, and breaking changes, along with author credits and dates.", "metadata": {"repo": "magiclabs/next-css", "file": "CHANGELOG.md", "chunk_number": 1, "total_chunks": 3}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** `magiclabs/next-css`\n\n**Purpose:** A Next.js plugin for CSS processing.\n\n**Content:** A lightweight plugin that integrates with Next.js to enable automatic CSS optimization, minification, and compression.", "file_summary": "Here's a holistic summary of the file \"CHANGELOG.md\" in 1-2 sentences:\n\nThe CHANGELOG.md file documents updates and changes made to Next-CSS, including improvements to README and LICENSE files, bug fixes, and breaking changes. Key additions include using [contenthash] in CSS filename output and removing old scripts."}
{"code": "- Merge branch 'main' of https://github.com/magiclabs/next-css into main ([@smithki](https://github.com/smithki))\n- Use [contenthash] in CSS filename output ([@smithki](https://github.com/smithki))\n\n#### Authors: 1\n\n- Ian K Smith ([@smithki](https://github.com/smithki))\n\n---\n\n# v0.2.0 (Thu Feb 25 2021)\n\n#### \ud83d\ude80 Enhancement\n\n- Improve README and add LICENSE references to borrowed files [#3](https://github.com/magiclabs/next-css/pull/3) ([@smithki](https://github.com/smithki))\n\n#### Authors: 1\n\n- Ian K Smith ([@smithki](https://github.com/smithki))\n\n---\n\n# v0.1.2 (Thu Feb 25 2021)\n\n#### \u26a0\ufe0f Pushed to `main`\n\n- Fix typo ([@smithki](https://github.com/smithki))\n\n#### \ud83c\udfe0 Internal\n\n- Remove old, unused scripts [#2](https://github.com/magiclabs/next-css/pull/2) ([@smithki](https://github.com/smithki))\n\n#### Authors: 1\n\n- Ian K Smith ([@smithki](https://github.com/smithki))\n\n---\n\n# v0.1.1 (Thu Feb 25 2021)\n\n#### \ud83d\udc1b Bug Fix\n", "explanation": "Here is a concise summary of the block:\n\n**Commit History**: A list of commits made by Ian K Smith, including merging branches, improving README, fixing typos, and removing old scripts.\n\n**Key Changes**:\n\n* Using [contenthash] in CSS filename output\n* Improving README and adding LICENSE references\n* Fixing typo\n* Removing old, unused scripts", "metadata": {"repo": "magiclabs/next-css", "file": "CHANGELOG.md", "chunk_number": 2, "total_chunks": 3}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** `magiclabs/next-css`\n\n**Purpose:** A Next.js plugin for CSS processing.\n\n**Content:** A lightweight plugin that integrates with Next.js to enable automatic CSS optimization, minification, and compression.", "file_summary": "Here's a holistic summary of the file \"CHANGELOG.md\" in 1-2 sentences:\n\nThe CHANGELOG.md file documents updates and changes made to Next-CSS, including improvements to README and LICENSE files, bug fixes, and breaking changes. Key additions include using [contenthash] in CSS filename output and removing old scripts."}
{"code": "- Add continuous delivery [#1](https://github.com/magiclabs/next-css/pull/1) ([@smithki](https://github.com/smithki))\n\n#### \u26a0\ufe0f Pushed to `main`\n\n- Update description ([@smithki](https://github.com/smithki))\n- Add 'auto' for CD ([@smithki](https://github.com/smithki))\n- Update README with basic usage instructions ([@smithki](https://github.com/smithki))\n- Add CSS implementation that approximates NextJS built-in behavior ([@smithki](https://github.com/smithki))\n- Initial commit ([@smithki](https://github.com/smithki))\n\n#### Authors: 1\n\n- Ian K Smith ([@smithki](https://github.com/smithki))\n\n---\n\n", "explanation": "Here is a concise summary:\n\nThis block appears to be a GitHub pull request comment that lists updates made by author Ian K Smith, including adding continuous delivery functionality with an 'auto' setting and updating documentation in the `main` branch.", "metadata": {"repo": "magiclabs/next-css", "file": "CHANGELOG.md", "chunk_number": 3, "total_chunks": 3}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** `magiclabs/next-css`\n\n**Purpose:** A Next.js plugin for CSS processing.\n\n**Content:** A lightweight plugin that integrates with Next.js to enable automatic CSS optimization, minification, and compression.", "file_summary": "Here's a holistic summary of the file \"CHANGELOG.md\" in 1-2 sentences:\n\nThe CHANGELOG.md file documents updates and changes made to Next-CSS, including improvements to README and LICENSE files, bug fixes, and breaking changes. Key additions include using [contenthash] in CSS filename output and removing old scripts."}
{"code": "# Contributing\n\nWhen contributing to this repository, please first discuss the change you wish to make via an **issue**. This can be a feature request or a bug report. After a maintainer has triaged your issue, you are welcome to collaborate on a pull request. If your change is small or uncomplicated, you are welcome to open an issue and pull request simultaneously.\n\nPlease note we have a **code of conduct**, please follow it in all your interactions with the project.\n\n## Setting up for Local Development\n\n1. Fork this repostiory.\n2. Clone your fork.\n3. Create a new branch in your local repository with the following pattern:\n\n- For bug fixes: `bug/#[issue_number]/[descriptive_bug_name]`\n- For features: `feature/#[issue_number]/[descriptive_feature_name]`\n- For chores/the rest: `chore/[descriptive_chore_name]`\n\n4. Install dependencies with Yarn: `yarn install`\n5. Start building for development: `yarn start`\n\n## Opening a Pull Request\n", "explanation": "Here is a concise summary of the purpose and functionality of this block:\n\n**Purpose:** Guidelines for contributing to a repository, including steps for local development and submitting pull requests.\n\n**Functionality:** Provides instructions on how to contribute to the project, set up local development environment, and submit pull requests in a structured format.", "metadata": {"repo": "magiclabs/next-css", "file": "CONTRIBUTING.md", "chunk_number": 1, "total_chunks": 8}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** `magiclabs/next-css`\n\n**Purpose:** A Next.js plugin for CSS processing.\n\n**Content:** A lightweight plugin that integrates with Next.js to enable automatic CSS optimization, minification, and compression.", "file_summary": "Here is a holistic summary of the file 'CONTRIBUTING.md':\n\n**CONTRIBUTING GUIDELINES**\n\nThis file outlines guidelines for contributing to this repository, ensuring a harassment-free and inclusive environment.\n\n**KEY POINTS:**\n\n* Follow steps for local development and submitting pull requests\n* Code of Conduct prohibits harassment and defines consequences for violations (private warning, warning, or temporary ban)\n* Community leaders enforce standards and take corrective action when necessary\n\n**SUMMARY:** This document provides a structured format for contributing to the project, while promoting respect, empathy, and responsibility among community members."}
{"code": "1. Open a pull request from your fork/branch to the upstream `master` branch of _this_ repository.\n2. Add a label for the [semver](https://semver.org/) update corresponding to your changes: `patch`, `minor`, or `major`.\n3. A maintainer will review your code changes and offer feedback or suggestions if necessary. Once your changes are approved, a maintainer will merge the pull request for you and publish a release.\n\n## Cutting a release\n\nWe use [`auto`](https://github.com/intuit/auto) as our continous delivery tool. Cutting a release is just a matter of merging to `master`. For pre-releases, you can create a `next` branch as the base for your experimental/W.I.P. feature. Please familiarize yourself with the [documentation for `auto`](https://intuit.github.io/auto/docs) if you are in a position to cut a release.\n\n## Contributor Covenant Code of Conduct\n\n### Our Pledge\n\nWe as members, contributors, and leaders pledge to make participation in our", "explanation": "**Summary:**\n\nThis block outlines the process for contributing code changes to this repository:\n\n* Open a pull request with a semver label (patch/minor/major)\n* A maintainer reviews and merges approved changes\n* To cut a release, merge to `master` or create a `next` branch for experimental features.\n\n**Purpose:** Guide contributors through the process of submitting code changes and releases.", "metadata": {"repo": "magiclabs/next-css", "file": "CONTRIBUTING.md", "chunk_number": 2, "total_chunks": 8}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** `magiclabs/next-css`\n\n**Purpose:** A Next.js plugin for CSS processing.\n\n**Content:** A lightweight plugin that integrates with Next.js to enable automatic CSS optimization, minification, and compression.", "file_summary": "Here is a holistic summary of the file 'CONTRIBUTING.md':\n\n**CONTRIBUTING GUIDELINES**\n\nThis file outlines guidelines for contributing to this repository, ensuring a harassment-free and inclusive environment.\n\n**KEY POINTS:**\n\n* Follow steps for local development and submitting pull requests\n* Code of Conduct prohibits harassment and defines consequences for violations (private warning, warning, or temporary ban)\n* Community leaders enforce standards and take corrective action when necessary\n\n**SUMMARY:** This document provides a structured format for contributing to the project, while promoting respect, empathy, and responsibility among community members."}
{"code": "community a harassment-free experience for everyone, regardless of age, body\nsize, visible or invisible disability, ethnicity, sex characteristics, gender\nidentity and expression, level of experience, education, socio-economic status,\nnationality, personal appearance, race, religion, or sexual identity\nand orientation.\n\nWe pledge to act and interact in ways that contribute to an open, welcoming,\ndiverse, inclusive, and healthy community.\n\n### Our Standards\n\nExamples of behavior that contributes to a positive environment for our\ncommunity include:\n\n- Demonstrating empathy and kindness toward other people\n- Being respectful of differing opinions, viewpoints, and experiences\n- Giving and gracefully accepting constructive feedback\n- Accepting responsibility and apologizing to those affected by our mistakes, and learning from the experience\n- Focusing on what is best not just for us as individuals, but for the overall community\n\nExamples of unacceptable behavior include:\n", "explanation": "**Summary:**\n\nThis block outlines a code of conduct for a community, aiming to create a harassment-free and inclusive environment. It establishes standards for positive behavior and lists examples of acceptable and unacceptable actions, promoting empathy, respect, and responsibility among members.", "metadata": {"repo": "magiclabs/next-css", "file": "CONTRIBUTING.md", "chunk_number": 3, "total_chunks": 8}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** `magiclabs/next-css`\n\n**Purpose:** A Next.js plugin for CSS processing.\n\n**Content:** A lightweight plugin that integrates with Next.js to enable automatic CSS optimization, minification, and compression.", "file_summary": "Here is a holistic summary of the file 'CONTRIBUTING.md':\n\n**CONTRIBUTING GUIDELINES**\n\nThis file outlines guidelines for contributing to this repository, ensuring a harassment-free and inclusive environment.\n\n**KEY POINTS:**\n\n* Follow steps for local development and submitting pull requests\n* Code of Conduct prohibits harassment and defines consequences for violations (private warning, warning, or temporary ban)\n* Community leaders enforce standards and take corrective action when necessary\n\n**SUMMARY:** This document provides a structured format for contributing to the project, while promoting respect, empathy, and responsibility among community members."}
{"code": "- The use of sexualized language or imagery, and sexual attention or advances of any kind\n- Trolling, insulting or derogatory comments, and personal or political attacks\n- Public or private harassment\n- Publishing others' private information, such as a physical or email address, without their explicit permission\n- Other conduct which could reasonably be considered inappropriate in a professional setting\n\n### Enforcement Responsibilities\n\nCommunity leaders are responsible for clarifying and enforcing our standards of\nacceptable behavior and will take appropriate and fair corrective action in\nresponse to any behavior that they deem inappropriate, threatening, offensive,\nor harmful.\n\nCommunity leaders have the right and responsibility to remove, edit, or reject\ncomments, commits, code, wiki edits, issues, and other contributions that are\nnot aligned to this Code of Conduct, and will communicate reasons for moderation\ndecisions when appropriate.\n\n### Scope\n", "explanation": "**Summary:**\n\nThis block is a \"Code of Conduct\" that outlines community standards for behavior on a platform. It prohibits harassment, trolling, and other forms of unacceptable behavior, including the sharing of private information without consent. Community leaders are responsible for enforcing these standards and taking corrective action when necessary.", "metadata": {"repo": "magiclabs/next-css", "file": "CONTRIBUTING.md", "chunk_number": 4, "total_chunks": 8}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** `magiclabs/next-css`\n\n**Purpose:** A Next.js plugin for CSS processing.\n\n**Content:** A lightweight plugin that integrates with Next.js to enable automatic CSS optimization, minification, and compression.", "file_summary": "Here is a holistic summary of the file 'CONTRIBUTING.md':\n\n**CONTRIBUTING GUIDELINES**\n\nThis file outlines guidelines for contributing to this repository, ensuring a harassment-free and inclusive environment.\n\n**KEY POINTS:**\n\n* Follow steps for local development and submitting pull requests\n* Code of Conduct prohibits harassment and defines consequences for violations (private warning, warning, or temporary ban)\n* Community leaders enforce standards and take corrective action when necessary\n\n**SUMMARY:** This document provides a structured format for contributing to the project, while promoting respect, empathy, and responsibility among community members."}
{"code": "This Code of Conduct applies within all community spaces, and also applies when\nan individual is officially representing the community in public spaces.\nExamples of representing our community include using an official e-mail address,\nposting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event.\n\n### Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported to the community leaders responsible for enforcement at [support@magic.link](mailto:support@magic.link).\nAll complaints will be reviewed and investigated promptly and fairly.\n\nAll community leaders are obligated to respect the privacy and security of the\nreporter of any incident.\n\n### Enforcement Guidelines\n\nCommunity leaders will follow these Community Impact Guidelines in determining\nthe consequences for any action they deem in violation of this Code of Conduct:\n\n#### 1. Correction\n\n**Community Impact**: Use of inappropriate language or other behavior deemed", "explanation": "Here is a concise summary of the purpose and functionality of this block:\n\n**Code of Conduct**\n\nPurpose: Establishes community-wide behavioral expectations for respectful interactions.\n\nFunctionality: Defines guidelines for reporting and investigating incidents of abusive/harassing behavior, with consequences outlined in the Community Impact Guidelines.", "metadata": {"repo": "magiclabs/next-css", "file": "CONTRIBUTING.md", "chunk_number": 5, "total_chunks": 8}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** `magiclabs/next-css`\n\n**Purpose:** A Next.js plugin for CSS processing.\n\n**Content:** A lightweight plugin that integrates with Next.js to enable automatic CSS optimization, minification, and compression.", "file_summary": "Here is a holistic summary of the file 'CONTRIBUTING.md':\n\n**CONTRIBUTING GUIDELINES**\n\nThis file outlines guidelines for contributing to this repository, ensuring a harassment-free and inclusive environment.\n\n**KEY POINTS:**\n\n* Follow steps for local development and submitting pull requests\n* Code of Conduct prohibits harassment and defines consequences for violations (private warning, warning, or temporary ban)\n* Community leaders enforce standards and take corrective action when necessary\n\n**SUMMARY:** This document provides a structured format for contributing to the project, while promoting respect, empathy, and responsibility among community members."}
{"code": "unprofessional or unwelcome in the community.\n\n**Consequence**: A private, written warning from community leaders, providing\nclarity around the nature of the violation and an explanation of why the\nbehavior was inappropriate. A public apology may be requested.\n\n#### 2. Warning\n\n**Community Impact**: A violation through a single incident or series\nof actions.\n\n**Consequence**: A warning with consequences for continued behavior. No\ninteraction with the people involved, including unsolicited interaction with\nthose enforcing the Code of Conduct, for a specified period of time. This\nincludes avoiding interactions in community spaces as well as external channels\nlike social media. Violating these terms may lead to a temporary or\npermanent ban.\n\n#### 3. Temporary Ban\n\n**Community Impact**: A serious violation of community standards, including\nsustained inappropriate behavior.\n\n**Consequence**: A temporary ban from any sort of interaction or public", "explanation": "This block outlines three levels of consequences for violating a Code of Conduct:\n\n1. Private warning with apology request (minor infraction)\n2. Warning with consequences and no interaction period (medium-level violation)\n3. Temporary ban from community interactions (serious violation)", "metadata": {"repo": "magiclabs/next-css", "file": "CONTRIBUTING.md", "chunk_number": 6, "total_chunks": 8}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** `magiclabs/next-css`\n\n**Purpose:** A Next.js plugin for CSS processing.\n\n**Content:** A lightweight plugin that integrates with Next.js to enable automatic CSS optimization, minification, and compression.", "file_summary": "Here is a holistic summary of the file 'CONTRIBUTING.md':\n\n**CONTRIBUTING GUIDELINES**\n\nThis file outlines guidelines for contributing to this repository, ensuring a harassment-free and inclusive environment.\n\n**KEY POINTS:**\n\n* Follow steps for local development and submitting pull requests\n* Code of Conduct prohibits harassment and defines consequences for violations (private warning, warning, or temporary ban)\n* Community leaders enforce standards and take corrective action when necessary\n\n**SUMMARY:** This document provides a structured format for contributing to the project, while promoting respect, empathy, and responsibility among community members."}
{"code": "communication with the community for a specified period of time. No public or\nprivate interaction with the people involved, including unsolicited interaction\nwith those enforcing the Code of Conduct, is allowed during this period.\nViolating these terms may lead to a permanent ban.\n\n#### 4. Permanent Ban\n\n**Community Impact**: Demonstrating a pattern of violation of community\nstandards, including sustained inappropriate behavior,  harassment of an\nindividual, or aggression toward or disparagement of classes of individuals.\n\n**Consequence**: A permanent ban from any sort of public interaction within\nthe community.\n\n### Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant](https://www.contributor-covenant.org),\nversion 2.0, available at\nhttps://www.contributor-covenant.org/version/2/0/code_of_conduct.html.\n\nCommunity Impact Guidelines were inspired by [Mozilla's code of conduct\nenforcement ladder](https://github.com/mozilla/diversity).\n", "explanation": "**Purpose:** To outline rules for community interaction during a specified period, preventing public or private contact with community members or Code of Conduct enforcers.\n\n**Functionality:** Establishes consequences for violating these terms, including a permanent ban from community interaction due to sustained inappropriate behavior, harassment, or aggression.", "metadata": {"repo": "magiclabs/next-css", "file": "CONTRIBUTING.md", "chunk_number": 7, "total_chunks": 8}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** `magiclabs/next-css`\n\n**Purpose:** A Next.js plugin for CSS processing.\n\n**Content:** A lightweight plugin that integrates with Next.js to enable automatic CSS optimization, minification, and compression.", "file_summary": "Here is a holistic summary of the file 'CONTRIBUTING.md':\n\n**CONTRIBUTING GUIDELINES**\n\nThis file outlines guidelines for contributing to this repository, ensuring a harassment-free and inclusive environment.\n\n**KEY POINTS:**\n\n* Follow steps for local development and submitting pull requests\n* Code of Conduct prohibits harassment and defines consequences for violations (private warning, warning, or temporary ban)\n* Community leaders enforce standards and take corrective action when necessary\n\n**SUMMARY:** This document provides a structured format for contributing to the project, while promoting respect, empathy, and responsibility among community members."}
{"code": "For answers to common questions about this code of conduct, see the FAQ at\nhttps://www.contributor-covenant.org/faq. Translations are available at\nhttps://www.contributor-covenant.org/translations.\n\n", "explanation": "This block provides links to a FAQ page and translations for a code of conduct, likely to help users understand its purpose and policies.", "metadata": {"repo": "magiclabs/next-css", "file": "CONTRIBUTING.md", "chunk_number": 8, "total_chunks": 8}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** `magiclabs/next-css`\n\n**Purpose:** A Next.js plugin for CSS processing.\n\n**Content:** A lightweight plugin that integrates with Next.js to enable automatic CSS optimization, minification, and compression.", "file_summary": "Here is a holistic summary of the file 'CONTRIBUTING.md':\n\n**CONTRIBUTING GUIDELINES**\n\nThis file outlines guidelines for contributing to this repository, ensuring a harassment-free and inclusive environment.\n\n**KEY POINTS:**\n\n* Follow steps for local development and submitting pull requests\n* Code of Conduct prohibits harassment and defines consequences for violations (private warning, warning, or temporary ban)\n* Community leaders enforce standards and take corrective action when necessary\n\n**SUMMARY:** This document provides a structured format for contributing to the project, while promoting respect, empathy, and responsibility among community members."}
{"code": "# \u25b2 + \ud83d\udc85 Better CSS Support for NextJS\n\n> Feature-parity with NextJS's built-in CSS with the flexibility to support your favorite pre-processor(s)!\n\n<p align=\"center\">\n  <a href=\"./LICENSE\">License</a> \u00b7\n  <a href=\"./CHANGELOG.md\">Changelog</a> \u00b7\n  <a href=\"./CONTRIBUTING.md\">Contributing Guide</a>\n</p>\n\nThis is a [NextJS](https://nextjs.org) configuration decorator with the goal of approximately mirroring NextJS's [built-in CSS support](https://nextjs.org/docs/basic-features/built-in-css-support) without losing the flexibility of technology choice. For example, at [Magic Labs](https://magic.link), we are invested in [LESS](http://lesscss.org)! However, the built-in CSS features of NextJS are very desirable, so we created `@magiclabs/next-css` to bridge the gap.\n\n## \ud83d\udd17 Installation\n\n`@magiclabs/next-css` is available as an NPM package:\n\n```bash\n# Via NPM:\nnpm install --save @magiclabs/next-css\n\n# Via Yarn:\nyarn add @magiclabs/next-css\n```\n\n### Peer Dependencies\n", "explanation": "Here is a concise summary of the block's purpose and functionality:\n\n**Purpose:** Provides feature-parity with NextJS's built-in CSS support while allowing flexibility in pre-processor choice.\n\n**Functionality:** A NextJS configuration decorator that enables use of favorite pre-processors (e.g. LESS) with NextJS-like CSS features.", "metadata": {"repo": "magiclabs/next-css", "file": "README.md", "chunk_number": 1, "total_chunks": 4}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** `magiclabs/next-css`\n\n**Purpose:** A Next.js plugin for CSS processing.\n\n**Content:** A lightweight plugin that integrates with Next.js to enable automatic CSS optimization, minification, and compression.", "file_summary": "Here is a concise and holistic summary of the file 'README.md':\n\nThis module provides feature-parity with NextJS's built-in CSS support while allowing flexibility in pre-processor choice. It enables custom configuration of CSS pre-processors, such as LESS, and supports compilation of CSS stylesheets for use in NextJS projects."}
{"code": "This module requires NextJS (`^12.0.0`) as a **peer dependency**. Additionally, any Webpack dependencies related to your CSS pre-processor of choice are required to be installed separately.\n\n## \ud83d\udcda Usage\n\nThe stylesheet is compiled to `.next/static/css`. Next.js will automatically add the css file to the HTML. In production, a chunk hash is added so that styles are updated when a new version of the stylesheet is deployed.\n\n### Basic Configuration\n\nCreate a `next.config.js` in the root of your project (next to `pages/` and `package.json`).\n\n```js\n// next.config.js\nconst { withCSS } = require('@magiclabs/next-css'); // Please note the named export!\n\nmodule.exports = withCSS({\n  // Array of objects configuring any CSS pre-processors you like!\n  preProcessors: [\n    {\n      extensions: [...], // i.e.: [\"less\"] or [\"sass\", \"scss\"]\n      use: [...], // Receives same configuration as Webpack > Module > Rule > Use\n    },\n  ],\n\n  // Also valid as a factory function!", "explanation": "Here is a concise summary:\n\n**Purpose:** A NextJS module for compiling CSS stylesheets with support for pre-processors.\n\n**Functionality:** Requires NextJS, compiles CSS to `.next/static/css`, adds chunk hash in production, and allows configuration of CSS pre-processors.", "metadata": {"repo": "magiclabs/next-css", "file": "README.md", "chunk_number": 2, "total_chunks": 4}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** `magiclabs/next-css`\n\n**Purpose:** A Next.js plugin for CSS processing.\n\n**Content:** A lightweight plugin that integrates with Next.js to enable automatic CSS optimization, minification, and compression.", "file_summary": "Here is a concise and holistic summary of the file 'README.md':\n\nThis module provides feature-parity with NextJS's built-in CSS support while allowing flexibility in pre-processor choice. It enables custom configuration of CSS pre-processors, such as LESS, and supports compilation of CSS stylesheets for use in NextJS projects."}
{"code": "  // Receives the same arguments as a NextJS custom `webpack` function.\n  preProcessors: (config, options) => [...],\n});\n```\n\n#### Configuration Fields\n\n- `preProcessors`: An array of `PreProcessorItem` objects, or a function returning an array of `PreProcessorItem` objects with the following shape:\n    - `extensions`: An array of `String` values representing CSS file extensions (i.e.: `\"css\"`, `\"less\"`, `\"scss\"`).\n    - `use`: An array of objects compatible with [Webpack's Module Rules#UseEntry schema](https://webpack.js.org/configuration/module/#useentry).\n\n## \u26a1\ufe0f Quick Starts\n\nYou can easily configure `@magiclabs/next-css` for the following common use-cases:\n\n- [LESS](#with-less)\n\n### With [LESS](http://lesscss.org)\n\nFirst, install your LESS-specific dependencies:\n\n```bash\n# Via NPM:\nnpm install --save less less-loader\n\n# Via Yarn:\nyarn add less less-loader\n```\n\nNext, configure the pre-processor with `@magiclabs/next-css`:\n\n```js\n// next.config.js\nconst { withCSS } = require('@magiclabs/next-css');\n", "explanation": "Here is a concise summary of the purpose and functionality of this block:\n\n**Purpose:** Configures pre-processors for CSS files in NextJS.\n\n**Functionality:** Accepts an array of `PreProcessorItem` objects or a function returning such an array, allowing customization of LESS and other CSS pre-processing.", "metadata": {"repo": "magiclabs/next-css", "file": "README.md", "chunk_number": 3, "total_chunks": 4}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** `magiclabs/next-css`\n\n**Purpose:** A Next.js plugin for CSS processing.\n\n**Content:** A lightweight plugin that integrates with Next.js to enable automatic CSS optimization, minification, and compression.", "file_summary": "Here is a concise and holistic summary of the file 'README.md':\n\nThis module provides feature-parity with NextJS's built-in CSS support while allowing flexibility in pre-processor choice. It enables custom configuration of CSS pre-processors, such as LESS, and supports compilation of CSS stylesheets for use in NextJS projects."}
{"code": "module.exports = withCSS({\n  preProcessors: [\n    {\n      extensions: [\"less\"],\n      use: [require.resolve('less-loader')],\n    },\n  ],\n});\n```\n\n## \u2696\ufe0f Trade-offs\n\n- More dependencies leads to longer NPM package installation times. These are _marginal_ for a typical project.\n\n- This is a wholesale re-implementation of NextJS CSS support, so there may be some inconsistencies between the end results. NextJS notably benefits from aggressive internal optimizations which may be missing or unaccounted for here. That being said, we try our best to match the internal implementation as closely as possible.\n", "explanation": "Here is a concise summary:\n\n**Purpose:** Enables CSS support in a project with custom configuration.\n\n**Functionality:** Exports a module that uses `withCSS` to configure pre-processing of Less files, making them available for use in the project.", "metadata": {"repo": "magiclabs/next-css", "file": "README.md", "chunk_number": 4, "total_chunks": 4}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** `magiclabs/next-css`\n\n**Purpose:** A Next.js plugin for CSS processing.\n\n**Content:** A lightweight plugin that integrates with Next.js to enable automatic CSS optimization, minification, and compression.", "file_summary": "Here is a concise and holistic summary of the file 'README.md':\n\nThis module provides feature-parity with NextJS's built-in CSS support while allowing flexibility in pre-processor choice. It enables custom configuration of CSS pre-processors, such as LESS, and supports compilation of CSS stylesheets for use in NextJS projects."}
{"code": "/*\n  The MIT License (MIT)\n\n  Copyright (c) 2021 Vercel, Inc.\n\n  Permission is hereby granted, free of charge, to any person obtaining a copy\n  of this software and associated documentation files (the \"Software\"), to deal\n  in the Software without restriction, including without limitation the rights\n  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n  copies of the Software, and to permit persons to whom the Software is\n  furnished to do so, subject to the following conditions:\n\n  The above copyright notice and this permission notice shall be included in all\n  copies or substantial portions of the Software.\n\n  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER", "explanation": "This block is a license agreement (MIT License) that grants permission to use, modify, and distribute software without restriction.", "metadata": {"repo": "magiclabs/next-css", "file": "src/configuration.ts", "chunk_number": 1, "total_chunks": 12}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** `magiclabs/next-css`\n\n**Purpose:** A Next.js plugin for CSS processing.\n\n**Content:** A lightweight plugin that integrates with Next.js to enable automatic CSS optimization, minification, and compression.", "file_summary": "Here is a concise and holistic summary of the file 'src/configuration.ts':\n\n**Summary:** This file contains Webpack configuration helpers for a Next.js application.\n\n**Key Features:**\n\n* Configures CSS pre-processing, loaders, and modules\n* Enables customization of pre-processors and their corresponding file extensions\n* Manages Global CSS loading, throwing errors for misused imports\n* Codesplits CSS into separate files in production bundles\n* Provides utility functions (`addLoader` and `addPlugin`) to populate and modify Webpack configurations\n\n**Purpose:** To configure Webpack for efficient and secure handling of CSS resources."}
{"code": "  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n  SOFTWARE.\n */\n\n/**\n * @see https://github.com/vercel/next.js/blob/b90b4b503c4444507595be0f9e0edd8a19ea2254/packages/next/build/webpack/config/blocks/css/index.ts\n *\n * Modifications:\n *   - Remove curried functions\n *   - Add additional loaders for each configured pre-processor\n *   - Use own dependencies (remove `next/dist/compiled/*` dependencies)\n *   - Use own implementation for `getCssModuleLoader`, `getGlobalCssLoader`\n *   - Use own implementation for `getPostCssPlugins`\n */\n\n/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\n\nimport path from 'path';\nimport type webpack from 'webpack';\nimport uniq from 'lodash.uniq';\nimport ExtractCssPlugin from 'mini-css-extract-plugin';\nimport chalk from 'chalk';\nimport CssMinimizerPlugin from 'css-minimizer-webpack-plugin';", "explanation": "Here is a concise summary:\n\n**Purpose:** This block configures Webpack for CSS processing.\n\n**Functionality:** It imports necessary dependencies, removes redundant functions, adds loaders for pre-processors, and uses custom implementations for CSS module loading and post-processor plugins.", "metadata": {"repo": "magiclabs/next-css", "file": "src/configuration.ts", "chunk_number": 2, "total_chunks": 12}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** `magiclabs/next-css`\n\n**Purpose:** A Next.js plugin for CSS processing.\n\n**Content:** A lightweight plugin that integrates with Next.js to enable automatic CSS optimization, minification, and compression.", "file_summary": "Here is a concise and holistic summary of the file 'src/configuration.ts':\n\n**Summary:** This file contains Webpack configuration helpers for a Next.js application.\n\n**Key Features:**\n\n* Configures CSS pre-processing, loaders, and modules\n* Enables customization of pre-processors and their corresponding file extensions\n* Manages Global CSS loading, throwing errors for misused imports\n* Codesplits CSS into separate files in production bundles\n* Provides utility functions (`addLoader` and `addPlugin`) to populate and modify Webpack configurations\n\n**Purpose:** To configure Webpack for efficient and secure handling of CSS resources."}
{"code": "import { getCssModuleLoader, getGlobalCssLoader } from './css-loaders';\nimport { ConfigurationContext } from './types';\nimport { getPostCssPlugins } from './postcss';\nimport { createMessage } from './utils/messages';\n\nexport interface PreProcessorItem {\n  extensions: string[];\n  use: webpack.RuleSetUseItem[];\n}\n\ninterface PreProcessorItemWithRegExps extends PreProcessorItem {\n  global: RegExp;\n  modules: RegExp;\n}\n\nexport interface ConfigureCSSOptions {\n  preProcessors: PreProcessorItem[];\n}\n\nexport function configureCSS(config: webpack.Configuration, ctx: ConfigureCSSOptions & ConfigurationContext) {\n  const preProcessorConfigs: PreProcessorItemWithRegExps[] = [\n    {\n      extensions: ['css'],\n      use: [],\n      global: /(?<!\\.module)\\.css$/,\n      modules: /\\.module\\.css$/,\n    },\n  ];\n\n  for (const item of ctx.preProcessors) {\n    preProcessorConfigs.push({\n      extensions: item.extensions,\n      use: item.use,\n      global: new RegExp(`(?<!\\\\.module)\\\\.(${[...item.extensions].join('|')})$`),", "explanation": "Here is a concise summary of the purpose and functionality of this block:\n\n**Purpose:** Configures CSS pre-processing for Webpack, allowing for customization of pre-processors and their corresponding file extensions.\n\n**Functionality:** Defines a function `configureCSS` that takes in a Webpack configuration and an options object to configure CSS pre-processors. It populates an array of pre-processor configurations based on the provided options and uses them to determine which files require pre-processing.", "metadata": {"repo": "magiclabs/next-css", "file": "src/configuration.ts", "chunk_number": 3, "total_chunks": 12}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** `magiclabs/next-css`\n\n**Purpose:** A Next.js plugin for CSS processing.\n\n**Content:** A lightweight plugin that integrates with Next.js to enable automatic CSS optimization, minification, and compression.", "file_summary": "Here is a concise and holistic summary of the file 'src/configuration.ts':\n\n**Summary:** This file contains Webpack configuration helpers for a Next.js application.\n\n**Key Features:**\n\n* Configures CSS pre-processing, loaders, and modules\n* Enables customization of pre-processors and their corresponding file extensions\n* Manages Global CSS loading, throwing errors for misused imports\n* Codesplits CSS into separate files in production bundles\n* Provides utility functions (`addLoader` and `addPlugin`) to populate and modify Webpack configurations\n\n**Purpose:** To configure Webpack for efficient and secure handling of CSS resources."}
{"code": "      modules: new RegExp(`\\\\.module\\\\.(${[...item.extensions].join('|')})$`),\n    });\n  }\n\n  const allCssExtensions: string[] = uniq([\n    'css',\n    ...ctx.preProcessors.reduce((acc, item) => acc.concat(item.extensions), [] as string[]),\n  ]);\n\n  const regexpLikeCss = new RegExp(`\\\\.(${allCssExtensions.join('|')})$`);\n\n  const postCssPlugins = getPostCssPlugins(ctx.rootDirectory, ctx.isProduction);\n\n  // Add a loader from which we can detect `@magiclabs/next-css` usage.\n  addLoader(config, {\n    // `test` here is required to trigger Next.js\n    // to dump its built-in CSS support.\n    test: regexpLikeCss,\n    oneOf: [\n      {\n        // Impossible regex expression\n        test: /a^/,\n        loader: 'noop-loader',\n        options: { __is_magiclabs_next_css: true },\n      },\n    ],\n  });\n\n  // CSS cannot be imported in _document. This comes before everything because\n  // global CSS nor CSS modules work in said file.\n  addLoader(config, {\n    oneOf: [\n      {\n        test: regexpLikeCss,", "explanation": "Here is a concise summary:\n\n**Purpose:** Configure Webpack loaders for CSS files.\n\n**Functionality:** \n\n* Add a loader to detect `@magiclabs/next-css` usage\n* Add another loader to prioritize CSS imports over other file types in _document.js", "metadata": {"repo": "magiclabs/next-css", "file": "src/configuration.ts", "chunk_number": 4, "total_chunks": 12}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** `magiclabs/next-css`\n\n**Purpose:** A Next.js plugin for CSS processing.\n\n**Content:** A lightweight plugin that integrates with Next.js to enable automatic CSS optimization, minification, and compression.", "file_summary": "Here is a concise and holistic summary of the file 'src/configuration.ts':\n\n**Summary:** This file contains Webpack configuration helpers for a Next.js application.\n\n**Key Features:**\n\n* Configures CSS pre-processing, loaders, and modules\n* Enables customization of pre-processors and their corresponding file extensions\n* Manages Global CSS loading, throwing errors for misused imports\n* Codesplits CSS into separate files in production bundles\n* Provides utility functions (`addLoader` and `addPlugin`) to populate and modify Webpack configurations\n\n**Purpose:** To configure Webpack for efficient and secure handling of CSS resources."}
{"code": "        issuer: /pages[\\\\/]_document\\./,\n        use: {\n          loader: 'error-loader',\n          options: {\n            reason: getCustomDocumentError(ctx.customAppFile && path.relative(ctx.rootDirectory, ctx.customAppFile)),\n          },\n        },\n      },\n    ],\n  });\n\n  for (const item of preProcessorConfigs) {\n    addLoader(config, {\n      oneOf: [\n        {\n          // CSS Modules should never have side effects. This setting will\n          // allow unused CSS to be removed from the production build.\n          // We ensure this by disallowing `:global()` CSS at the top-level\n          // via the `pure` mode in `css-loader`.\n          sideEffects: false,\n          test: item.modules,\n          // CSS Modules are only supported in the user's application. We're\n          // not yet allowing CSS imports _within_ `node_modules`.\n          issuer: {\n            and: [ctx.rootDirectory],\n            not: [/node_modules/],\n          },\n          use: getCssModuleLoader(ctx, postCssPlugins, item.use),\n        },", "explanation": "Here is a concise summary:\n\nThis block defines a configuration for Webpack to handle CSS modules. It specifies that unused CSS should be removed from production builds, and limits CSS imports to files within the user's application directory (excluding `node_modules`).", "metadata": {"repo": "magiclabs/next-css", "file": "src/configuration.ts", "chunk_number": 5, "total_chunks": 12}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** `magiclabs/next-css`\n\n**Purpose:** A Next.js plugin for CSS processing.\n\n**Content:** A lightweight plugin that integrates with Next.js to enable automatic CSS optimization, minification, and compression.", "file_summary": "Here is a concise and holistic summary of the file 'src/configuration.ts':\n\n**Summary:** This file contains Webpack configuration helpers for a Next.js application.\n\n**Key Features:**\n\n* Configures CSS pre-processing, loaders, and modules\n* Enables customization of pre-processors and their corresponding file extensions\n* Manages Global CSS loading, throwing errors for misused imports\n* Codesplits CSS into separate files in production bundles\n* Provides utility functions (`addLoader` and `addPlugin`) to populate and modify Webpack configurations\n\n**Purpose:** To configure Webpack for efficient and secure handling of CSS resources."}
{"code": "      ],\n    });\n  }\n\n  // Throw an error for CSS Modules used outside their supported scope\n  addLoader(config, {\n    oneOf: [\n      {\n        test: preProcessorConfigs.map((re) => re.modules),\n        use: {\n          loader: 'error-loader',\n          options: {\n            reason: getLocalModuleImportError(),\n          },\n        },\n      },\n    ],\n  });\n\n  if (ctx.isServer) {\n    addLoader(config, {\n      oneOf: [\n        {\n          test: preProcessorConfigs.map((re) => re.global),\n          use: require.resolve('ignore-loader'),\n        },\n      ],\n    });\n  } else {\n    addLoader(config, {\n      oneOf: [\n        {\n          // A global CSS import always has side effects. Webpack will tree\n          // shake the CSS without this option if the issuer claims to have\n          // no side-effects.\n          // See https://github.com/webpack/webpack/issues/6571\n          sideEffects: true,\n          test: preProcessorConfigs[0].global,\n          // We only allow Global CSS to be imported anywhere in the", "explanation": "Here is a concise summary of the block's purpose and functionality:\n\n**Purpose:** Configure Webpack loaders for CSS Modules and global CSS imports.\n\n**Functionality:**\n\n* Throws an error if CSS Modules are used outside their supported scope.\n* Configures server-side loading to ignore global CSS imports.\n* Allows global CSS imports anywhere in the codebase, marking them as having side effects.", "metadata": {"repo": "magiclabs/next-css", "file": "src/configuration.ts", "chunk_number": 6, "total_chunks": 12}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** `magiclabs/next-css`\n\n**Purpose:** A Next.js plugin for CSS processing.\n\n**Content:** A lightweight plugin that integrates with Next.js to enable automatic CSS optimization, minification, and compression.", "file_summary": "Here is a concise and holistic summary of the file 'src/configuration.ts':\n\n**Summary:** This file contains Webpack configuration helpers for a Next.js application.\n\n**Key Features:**\n\n* Configures CSS pre-processing, loaders, and modules\n* Enables customization of pre-processors and their corresponding file extensions\n* Manages Global CSS loading, throwing errors for misused imports\n* Codesplits CSS into separate files in production bundles\n* Provides utility functions (`addLoader` and `addPlugin`) to populate and modify Webpack configurations\n\n**Purpose:** To configure Webpack for efficient and secure handling of CSS resources."}
{"code": "          // application if it comes from node_modules. This is a best-effort\n          // heuristic that makes a safety trade-off for better\n          // interoperability with npm packages that require CSS. Without\n          // this ability, the component's CSS would have to be included for\n          // the entire app instead of specific page where it's required.\n          include: { and: [/node_modules/] },\n          // Global CSS is only supported in the user's application, not in\n          // node_modules.\n          issuer: {\n            and: [ctx.rootDirectory],\n            not: [/node_modules/],\n          },\n          use: getGlobalCssLoader(ctx, postCssPlugins),\n        },\n      ],\n    });\n\n    if (ctx.customAppFile) {\n      for (const item of preProcessorConfigs) {\n        addLoader(config, {\n          oneOf: [\n            {\n              // A global CSS import always has side effects. Webpack will tree\n              // shake the CSS without this option if the issuer claims to have", "explanation": "Here is a concise summary of the purpose and functionality:\n\nThis block configures a plugin to include global CSS in an application, but not in node_modules packages, for better npm package interoperability. It also sets up a pre-processing step for custom app files.", "metadata": {"repo": "magiclabs/next-css", "file": "src/configuration.ts", "chunk_number": 7, "total_chunks": 12}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** `magiclabs/next-css`\n\n**Purpose:** A Next.js plugin for CSS processing.\n\n**Content:** A lightweight plugin that integrates with Next.js to enable automatic CSS optimization, minification, and compression.", "file_summary": "Here is a concise and holistic summary of the file 'src/configuration.ts':\n\n**Summary:** This file contains Webpack configuration helpers for a Next.js application.\n\n**Key Features:**\n\n* Configures CSS pre-processing, loaders, and modules\n* Enables customization of pre-processors and their corresponding file extensions\n* Manages Global CSS loading, throwing errors for misused imports\n* Codesplits CSS into separate files in production bundles\n* Provides utility functions (`addLoader` and `addPlugin`) to populate and modify Webpack configurations\n\n**Purpose:** To configure Webpack for efficient and secure handling of CSS resources."}
{"code": "              // no side-effects.\n              // See https://github.com/webpack/webpack/issues/6571\n              sideEffects: true,\n              test: item.global,\n              issuer: { and: [ctx.customAppFile] },\n              use: getGlobalCssLoader(ctx, postCssPlugins, item.use),\n            },\n          ],\n        });\n      }\n    }\n  }\n\n  // Throw an error for Global CSS used inside of `node_modules`\n  addLoader(config, {\n    oneOf: [\n      {\n        test: preProcessorConfigs.map((item) => item.global),\n        issuer: { and: [/node_modules/] },\n        use: {\n          loader: 'error-loader',\n          options: {\n            reason: getGlobalModuleImportError(),\n          },\n        },\n      },\n    ],\n  });\n\n  // Throw an error for Global CSS used outside of our custom <App> file\n  addLoader(config, {\n    oneOf: [\n      {\n        test: preProcessorConfigs.map((item) => item.global),\n        use: {\n          loader: 'error-loader',\n          options: {", "explanation": "Here is a concise summary:\n\nThis code block manages Global CSS loading in Webpack configurations, ensuring it's only applied within specific conditions:\n\n* Allows Global CSS inside custom App files.\n* Throws an error for Global CSS used inside `node_modules`.\n* Throws an error for Global CSS used outside of the custom App file.", "metadata": {"repo": "magiclabs/next-css", "file": "src/configuration.ts", "chunk_number": 8, "total_chunks": 12}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** `magiclabs/next-css`\n\n**Purpose:** A Next.js plugin for CSS processing.\n\n**Content:** A lightweight plugin that integrates with Next.js to enable automatic CSS optimization, minification, and compression.", "file_summary": "Here is a concise and holistic summary of the file 'src/configuration.ts':\n\n**Summary:** This file contains Webpack configuration helpers for a Next.js application.\n\n**Key Features:**\n\n* Configures CSS pre-processing, loaders, and modules\n* Enables customization of pre-processors and their corresponding file extensions\n* Manages Global CSS loading, throwing errors for misused imports\n* Codesplits CSS into separate files in production bundles\n* Provides utility functions (`addLoader` and `addPlugin`) to populate and modify Webpack configurations\n\n**Purpose:** To configure Webpack for efficient and secure handling of CSS resources."}
{"code": "            reason: getGlobalImportError(ctx.customAppFile && path.relative(ctx.rootDirectory, ctx.customAppFile)),\n          },\n        },\n      },\n    ],\n  });\n\n  if (ctx.isClient) {\n    // Automatically transform references to files (i.e. url()) into URLs\n    // e.g. url(./logo.svg)\n    addLoader(config, {\n      oneOf: [\n        {\n          // This should only be applied to CSS files\n          issuer: regexpLikeCss,\n          // Exclude extensions that webpack handles by default\n          exclude: [/\\.(js|mjs|jsx|ts|tsx)$/, /\\.html$/, /\\.json$/],\n          use: {\n            // `file-loader` always emits a URL reference, where `url-loader`\n            // might inline the asset as a data URI\n            loader: require.resolve('file-loader'),\n            options: {\n              // Hash the file for immutable cacheability\n              name: 'static/media/[name].[hash].[ext]',\n            },\n          },\n        },\n      ],\n    });\n  }\n\n  if (ctx.isClient && ctx.isProduction) {", "explanation": "Here is a concise summary:\n\nThis block configures Webpack loaders to handle file imports in CSS files, using `file-loader` or `url-loader` depending on the file size, with caching and immutable hashing enabled.", "metadata": {"repo": "magiclabs/next-css", "file": "src/configuration.ts", "chunk_number": 9, "total_chunks": 12}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** `magiclabs/next-css`\n\n**Purpose:** A Next.js plugin for CSS processing.\n\n**Content:** A lightweight plugin that integrates with Next.js to enable automatic CSS optimization, minification, and compression.", "file_summary": "Here is a concise and holistic summary of the file 'src/configuration.ts':\n\n**Summary:** This file contains Webpack configuration helpers for a Next.js application.\n\n**Key Features:**\n\n* Configures CSS pre-processing, loaders, and modules\n* Enables customization of pre-processors and their corresponding file extensions\n* Manages Global CSS loading, throwing errors for misused imports\n* Codesplits CSS into separate files in production bundles\n* Provides utility functions (`addLoader` and `addPlugin`) to populate and modify Webpack configurations\n\n**Purpose:** To configure Webpack for efficient and secure handling of CSS resources."}
{"code": "    // Extract CSS as CSS file(s) in the client-side production bundle.\n    addPlugin(\n      config,\n      new ExtractCssPlugin({\n        filename: 'static/css/[contenthash].css',\n        chunkFilename: 'static/css/[contenthash].css',\n        // Next.js guarantees that CSS order \"doesn't matter\" (and so must we),\n        // due to imposed restrictions:\n        //\n        //   1. Global CSS can only be defined in a single entrypoint (_app)\n        //   2. CSS Modules generate scoped class names by default and cannot\n        //      include Global CSS (:global() selector).\n        //\n        // While not a perfect guarantee (e.g. liberal use of `:global()`\n        // selector), this assumption is required to code-split CSS.\n        //\n        // If this warning were to trigger, it'd be unactionable by the user,\n        // but likely not valid -- so we disable it.\n        ignoreOrder: true,\n      }),\n    );\n  }\n\n  config.optimization?.minimizer?.push(new CssMinimizerPlugin());\n}\n", "explanation": "Here is a concise summary:\n\n**Purpose:** Extracts CSS into separate files in production bundle.\n\n**Functionality:** Codesplits CSS, generates hashed filenames for static/css/[contenthash].css.", "metadata": {"repo": "magiclabs/next-css", "file": "src/configuration.ts", "chunk_number": 10, "total_chunks": 12}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** `magiclabs/next-css`\n\n**Purpose:** A Next.js plugin for CSS processing.\n\n**Content:** A lightweight plugin that integrates with Next.js to enable automatic CSS optimization, minification, and compression.", "file_summary": "Here is a concise and holistic summary of the file 'src/configuration.ts':\n\n**Summary:** This file contains Webpack configuration helpers for a Next.js application.\n\n**Key Features:**\n\n* Configures CSS pre-processing, loaders, and modules\n* Enables customization of pre-processors and their corresponding file extensions\n* Manages Global CSS loading, throwing errors for misused imports\n* Codesplits CSS into separate files in production bundles\n* Provides utility functions (`addLoader` and `addPlugin`) to populate and modify Webpack configurations\n\n**Purpose:** To configure Webpack for efficient and secure handling of CSS resources."}
{"code": "// --- Webpack configuration helpers\n\nfunction addLoader(config: webpack.Configuration, rule: webpack.RuleSetRule) {\n  // We assume `config.module.rules` is already initialized to an array because\n  // NextJS populates built-in CSS loaders before plugins.\n\n  if (rule.oneOf) {\n    const existing = config.module!.rules!.find(\n      (arrayRule) =>\n        typeof arrayRule !== 'string' &&\n        arrayRule.oneOf &&\n        (arrayRule.oneOf?.[0]?.options as any)?.__is_magiclabs_next_css,\n    );\n    if (existing && typeof existing !== 'string') {\n      existing.oneOf!.push(...rule.oneOf);\n      return config;\n    }\n  }\n\n  config.module!.rules!.push(rule);\n  return config;\n}\n\nfunction addPlugin(config: webpack.Configuration, p: any) {\n  if (!config.plugins) {\n    config.plugins = [];\n  }\n\n  config.plugins.push(p);\n  return config;\n}\n\n// --- Error messages\n\nfunction getGlobalImportError(file: string | null) {\n  return createMessage(\n    'error',", "explanation": "Here is a concise summary:\n\n**Webpack configuration helpers**\n\nTwo functions are provided:\n\n1. **addLoader**: Adds a CSS loader rule or its oneOf rules to an existing Webpack configuration.\n2. **addPlugin**: Adds a new plugin to a Webpack configuration.\n\nThese functions help populate and modify the Webpack configuration for use in a Next.js application.", "metadata": {"repo": "magiclabs/next-css", "file": "src/configuration.ts", "chunk_number": 11, "total_chunks": 12}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** `magiclabs/next-css`\n\n**Purpose:** A Next.js plugin for CSS processing.\n\n**Content:** A lightweight plugin that integrates with Next.js to enable automatic CSS optimization, minification, and compression.", "file_summary": "Here is a concise and holistic summary of the file 'src/configuration.ts':\n\n**Summary:** This file contains Webpack configuration helpers for a Next.js application.\n\n**Key Features:**\n\n* Configures CSS pre-processing, loaders, and modules\n* Enables customization of pre-processors and their corresponding file extensions\n* Manages Global CSS loading, throwing errors for misused imports\n* Codesplits CSS into separate files in production bundles\n* Provides utility functions (`addLoader` and `addPlugin`) to populate and modify Webpack configurations\n\n**Purpose:** To configure Webpack for efficient and secure handling of CSS resources."}
{"code": "    chalk`Global CSS {bold cannot} be imported from files other than your {bold Custom <App>}. Please move all global CSS imports to {cyan ${\n      file || 'pages/_app.js'\n    }}. Or, convert the import to Component-level CSS (CSS Modules).`,\n    'https://err.sh/next.js/css-global',\n  );\n}\n\nfunction getGlobalModuleImportError() {\n  return createMessage(\n    'error',\n    chalk`Global CSS {bold cannot} be imported from within {bold 'node_modules'}.`,\n    'https://err.sh/next.js/css-npm',\n  );\n}\n\nfunction getLocalModuleImportError() {\n  return createMessage(\n    'error',\n    chalk`CSS Modules {bold cannot} be imported from within {bold 'node_modules'}.`,\n    'https://err.sh/next.js/css-modules-npm',\n  );\n}\n\nfunction getCustomDocumentError(file: string | null) {\n  return createMessage(\n    'error',\n    chalk`CSS {bold cannot} be imported within {cyan pages/_document.js}. Please move global styles to {cyan ${\n      file || 'pages/_app.js'\n    }}`,\n  );\n}\n", "explanation": "Here is a concise summary:\n\nThis block of code generates error messages related to importing CSS in Next.js projects, warning against importing global CSS from outside the `pages/_app.js` file or within Node_modules.", "metadata": {"repo": "magiclabs/next-css", "file": "src/configuration.ts", "chunk_number": 12, "total_chunks": 12}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** `magiclabs/next-css`\n\n**Purpose:** A Next.js plugin for CSS processing.\n\n**Content:** A lightweight plugin that integrates with Next.js to enable automatic CSS optimization, minification, and compression.", "file_summary": "Here is a concise and holistic summary of the file 'src/configuration.ts':\n\n**Summary:** This file contains Webpack configuration helpers for a Next.js application.\n\n**Key Features:**\n\n* Configures CSS pre-processing, loaders, and modules\n* Enables customization of pre-processors and their corresponding file extensions\n* Manages Global CSS loading, throwing errors for misused imports\n* Codesplits CSS into separate files in production bundles\n* Provides utility functions (`addLoader` and `addPlugin`) to populate and modify Webpack configurations\n\n**Purpose:** To configure Webpack for efficient and secure handling of CSS resources."}
{"code": "/*\n  The MIT License (MIT)\n\n  Copyright (c) 2021 Vercel, Inc.\n\n  Permission is hereby granted, free of charge, to any person obtaining a copy\n  of this software and associated documentation files (the \"Software\"), to deal\n  in the Software without restriction, including without limitation the rights\n  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n  copies of the Software, and to permit persons to whom the Software is\n  furnished to do so, subject to the following conditions:\n\n  The above copyright notice and this permission notice shall be included in all\n  copies or substantial portions of the Software.\n\n  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER", "explanation": "This block is a copyright license agreement, specifically the MIT License, outlining terms for using software without restriction or warranty.", "metadata": {"repo": "magiclabs/next-css", "file": "src/css-loaders.ts", "chunk_number": 1, "total_chunks": 7}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** `magiclabs/next-css`\n\n**Purpose:** A Next.js plugin for CSS processing.\n\n**Content:** A lightweight plugin that integrates with Next.js to enable automatic CSS optimization, minification, and compression.", "file_summary": "Here is a concise and holistic summary of the file 'src/css-loaders.ts':\n\nThis file configures Webpack loaders for CSS and related files in a Next.js application, ensuring proper ordering of styles in HTML head. It provides functions to simplify CSS Module configuration logic, generate CSS loader configurations, compile CSS with Webpack, and resolve ordering issues between development and production environments. The code also disclaims liability for any consequences arising from the use of the software."}
{"code": "  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n  SOFTWARE.\n */\n\n/**\n * @see https://github.com/vercel/next.js/blob/b90b4b503c4444507595be0f9e0edd8a19ea2254/packages/next/build/webpack/config/blocks/css/loaders/client.ts\n * @see https://github.com/vercel/next.js/blob/b90b4b503c4444507595be0f9e0edd8a19ea2254/packages/next/build/webpack/config/blocks/css/loaders/file-resolve.ts\n * @see https://github.com/vercel/next.js/blob/b90b4b503c4444507595be0f9e0edd8a19ea2254/packages/next/build/webpack/config/blocks/css/loaders/modules.ts\n * @see https://github.com/vercel/next.js/blob/b90b4b503c4444507595be0f9e0edd8a19ea2254/packages/next/build/webpack/config/blocks/css/loaders/global.ts\n *\n * Modifications:\n *   - Combines several original source files\n *   - Simplify `cssFileResolve` logic\n *   - Use own dependencies (remove `next/dist/compiled/*` dependencies)", "explanation": "**Purpose:** This block is a part of a software license agreement, specifically an EULA (End-User License Agreement).\n\n**Functionality:** It disclaims liability for any consequences arising from the use of the software or its related components.", "metadata": {"repo": "magiclabs/next-css", "file": "src/css-loaders.ts", "chunk_number": 2, "total_chunks": 7}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** `magiclabs/next-css`\n\n**Purpose:** A Next.js plugin for CSS processing.\n\n**Content:** A lightweight plugin that integrates with Next.js to enable automatic CSS optimization, minification, and compression.", "file_summary": "Here is a concise and holistic summary of the file 'src/css-loaders.ts':\n\nThis file configures Webpack loaders for CSS and related files in a Next.js application, ensuring proper ordering of styles in HTML head. It provides functions to simplify CSS Module configuration logic, generate CSS loader configurations, compile CSS with Webpack, and resolve ordering issues between development and production environments. The code also disclaims liability for any consequences arising from the use of the software."}
{"code": " *   - Simplify CSS Modules `localIdent` logic\n */\n\n/* eslint-disable @typescript-eslint/ban-ts-comment */\n\nimport type { AcceptedPlugin } from 'postcss';\nimport type webpack from 'webpack';\nimport ExtractCssPlugin from 'mini-css-extract-plugin';\nimport { ConfigurationContext } from './types';\n\nexport function getCssModuleLoader(\n  ctx: ConfigurationContext,\n  postCssPlugins: readonly AcceptedPlugin[],\n  preProcessors: readonly webpack.RuleSetUseItem[] = [],\n): webpack.RuleSetUseItem[] {\n  const loaders: webpack.RuleSetUseItem[] = [];\n\n  if (ctx.isClient) {\n    // Add appropriate development more or production mode style\n    // loader\n    loaders.push(getClientStyleLoader(ctx));\n  }\n\n  // Resolve CSS `@import`s and `url()`s\n  loaders.push({\n    loader: require.resolve('css-loader'),\n    options: {\n      importLoaders: 1 + preProcessors.length,\n      sourceMap: true,\n      // Use CJS mode for backwards compatibility:\n      esModule: false,\n      url: { filter: cssFileResolve },", "explanation": "Here is a concise summary:\n\n**Purpose:** Simplify CSS Modules configuration logic.\n\n**Functionality:** A function `getCssModuleLoader` generates a CSS loader configuration based on the project context, including development and production modes, and resolves CSS imports and URLs.", "metadata": {"repo": "magiclabs/next-css", "file": "src/css-loaders.ts", "chunk_number": 3, "total_chunks": 7}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** `magiclabs/next-css`\n\n**Purpose:** A Next.js plugin for CSS processing.\n\n**Content:** A lightweight plugin that integrates with Next.js to enable automatic CSS optimization, minification, and compression.", "file_summary": "Here is a concise and holistic summary of the file 'src/css-loaders.ts':\n\nThis file configures Webpack loaders for CSS and related files in a Next.js application, ensuring proper ordering of styles in HTML head. It provides functions to simplify CSS Module configuration logic, generate CSS loader configurations, compile CSS with Webpack, and resolve ordering issues between development and production environments. The code also disclaims liability for any consequences arising from the use of the software."}
{"code": "      import: { filter: cssFileResolve },\n      modules: {\n        // Do not transform class names (CJS mode backwards compatibility):\n        exportLocalsConvention: 'asIs',\n        // Server-side (Node.js) rendering support:\n        exportOnlyLocals: ctx.isServer,\n        // Disallow global style exports so we can code-split CSS and\n        // not worry about loading order.\n        mode: 'pure',\n        localIdentName: '[local]___[hash:base64:5]',\n      },\n    },\n  });\n\n  // Compile CSS\n  loaders.push({\n    loader: require.resolve('postcss-loader'),\n    options: {\n      postcssOptions: { plugins: postCssPlugins, config: false },\n      sourceMap: true,\n    },\n  });\n\n  loaders.push(...preProcessors.slice());\n\n  return loaders;\n}\n\nexport function getGlobalCssLoader(\n  ctx: ConfigurationContext,\n  postCssPlugins: readonly AcceptedPlugin[],\n  preProcessors: readonly webpack.RuleSetUseItem[] = [],\n): webpack.RuleSetUseItem[] {\n  const loaders: webpack.RuleSetUseItem[] = [];\n\n  if (ctx.isClient) {", "explanation": "Here is a concise summary:\n\n**Purpose:** Compile CSS with Webpack, disabling global style exports for code-splitting.\n\n**Functionality:** \n\n* Use `postcss-loader` to process CSS with specified plugins.\n* Disable global style exports for server-side rendering support.\n* Code-split CSS and compile it with Webpack.", "metadata": {"repo": "magiclabs/next-css", "file": "src/css-loaders.ts", "chunk_number": 4, "total_chunks": 7}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** `magiclabs/next-css`\n\n**Purpose:** A Next.js plugin for CSS processing.\n\n**Content:** A lightweight plugin that integrates with Next.js to enable automatic CSS optimization, minification, and compression.", "file_summary": "Here is a concise and holistic summary of the file 'src/css-loaders.ts':\n\nThis file configures Webpack loaders for CSS and related files in a Next.js application, ensuring proper ordering of styles in HTML head. It provides functions to simplify CSS Module configuration logic, generate CSS loader configurations, compile CSS with Webpack, and resolve ordering issues between development and production environments. The code also disclaims liability for any consequences arising from the use of the software."}
{"code": "    // Add appropriate development more or production mode style\n    // loader\n    loaders.push(getClientStyleLoader(ctx));\n  }\n\n  // Resolve CSS `@import`s and `url()`s\n  loaders.push({\n    loader: require.resolve('css-loader'),\n    options: {\n      importLoaders: 1 + preProcessors.length,\n      sourceMap: true,\n      modules: false,\n      url: { filter: cssFileResolve },\n      import: { filter: cssFileResolve },\n    },\n  });\n\n  // Compile CSS\n  loaders.push({\n    loader: require.resolve('postcss-loader'),\n    options: {\n      postcssOptions: { plugins: postCssPlugins, config: false },\n      sourceMap: true,\n    },\n  });\n\n  loaders.push(...preProcessors.slice());\n\n  return loaders;\n}\n\nfunction cssFileResolve(url: string, _resourcePath: string) {\n  return !url.startsWith('/');\n}\n\nfunction getClientStyleLoader(ctx: ConfigurationContext): webpack.RuleSetUseItem {\n  return ctx.isDevelopment\n    ? {\n        loader: 'next-style-loader',\n        options: {\n          // By default, CSS is injected into the bottom", "explanation": "Here is a concise summary of the purpose and functionality of this code block:\n\n**Purpose:** Configure Webpack loaders for CSS and CSS-related files.\n\n**Functionality:** The code adds several loaders to process CSS and related files, including:\n\n1. Resolving CSS `@import`s and `url()`s using css-loader.\n2. Compiling CSS with postcss-loader.\n3. Applying pre-processors (e.g., style loaders).\n\nThe goal is to prepare CSS and related files for Webpack processing in a development or production environment.", "metadata": {"repo": "magiclabs/next-css", "file": "src/css-loaders.ts", "chunk_number": 5, "total_chunks": 7}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** `magiclabs/next-css`\n\n**Purpose:** A Next.js plugin for CSS processing.\n\n**Content:** A lightweight plugin that integrates with Next.js to enable automatic CSS optimization, minification, and compression.", "file_summary": "Here is a concise and holistic summary of the file 'src/css-loaders.ts':\n\nThis file configures Webpack loaders for CSS and related files in a Next.js application, ensuring proper ordering of styles in HTML head. It provides functions to simplify CSS Module configuration logic, generate CSS loader configurations, compile CSS with Webpack, and resolve ordering issues between development and production environments. The code also disclaims liability for any consequences arising from the use of the software."}
{"code": "          // of <head>. This causes ordering problems between dev\n          // and prod. To fix this, we Next.js renders a\n          // <noscript id=\"__next_css__DO_NOT_USE__\"> tag as\n          // an anchor for the styles to be placed before. These\n          // styles will be applied _before_ <style jsx global>.\n          //\n          // This function is serialized and injected into the\n          // Webpack runtime, so it must remain ES5 compatible.\n          /* eslint-disable-next-line func-names, object-shorthand */\n          insert: function (element: Node) {\n            /* eslint-disable */\n            // These elements should always exist. If they do not,\n            // this code should fail.\n            var anchorElement = document.querySelector('#__next_css__DO_NOT_USE__')!;\n            var parentNode = anchorElement.parentNode!; // Normally <head>\n\n            // Each style tag should be placed right before our\n            // anchor. By inserting before and not after, we do not", "explanation": "Here is a concise summary of the purpose and functionality:\n\n**Purpose:** To ensure proper ordering of styles in HTML head.\n\n**Functionality:** Inserts styles into an anchor element's parent node (`<head>`) before other style tags, resolving ordering issues between development and production environments.", "metadata": {"repo": "magiclabs/next-css", "file": "src/css-loaders.ts", "chunk_number": 6, "total_chunks": 7}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** `magiclabs/next-css`\n\n**Purpose:** A Next.js plugin for CSS processing.\n\n**Content:** A lightweight plugin that integrates with Next.js to enable automatic CSS optimization, minification, and compression.", "file_summary": "Here is a concise and holistic summary of the file 'src/css-loaders.ts':\n\nThis file configures Webpack loaders for CSS and related files in a Next.js application, ensuring proper ordering of styles in HTML head. It provides functions to simplify CSS Module configuration logic, generate CSS loader configurations, compile CSS with Webpack, and resolve ordering issues between development and production environments. The code also disclaims liability for any consequences arising from the use of the software."}
{"code": "            // need to track the last inserted element.\n            parentNode.insertBefore(element, anchorElement);\n            /* eslint-enable */\n          },\n        },\n      }\n    : {\n        loader: ExtractCssPlugin.loader,\n        options: {\n          publicPath: `${ctx.assetPrefix}/_next/`,\n        },\n      };\n}\n", "explanation": "This block appears to be a JavaScript function that conditionally configures Webpack plugins for Next.js application builds, specifically regarding CSS extraction and element insertion logic.", "metadata": {"repo": "magiclabs/next-css", "file": "src/css-loaders.ts", "chunk_number": 7, "total_chunks": 7}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** `magiclabs/next-css`\n\n**Purpose:** A Next.js plugin for CSS processing.\n\n**Content:** A lightweight plugin that integrates with Next.js to enable automatic CSS optimization, minification, and compression.", "file_summary": "Here is a concise and holistic summary of the file 'src/css-loaders.ts':\n\nThis file configures Webpack loaders for CSS and related files in a Next.js application, ensuring proper ordering of styles in HTML head. It provides functions to simplify CSS Module configuration logic, generate CSS loader configurations, compile CSS with Webpack, and resolve ordering issues between development and production environments. The code also disclaims liability for any consequences arising from the use of the software."}
{"code": "/* eslint-disable @typescript-eslint/ban-types */\n/* eslint-disable no-nested-ternary */\n\nimport type webpack from 'webpack';\nimport type { NextWebpackContext } from './types';\nimport { configureCSS, ConfigureCSSOptions, PreProcessorItem } from './configuration';\nimport { findCustomAppFile } from './utils/find-custom-app-file';\nimport { validatePluginConfiguration } from './utils/validate-plugin-configuration';\n\n/**\n * Configuration for `@magiclabs/next-css`.\n */\nexport interface PluginConfiguration {\n  preProcessors:\n    | ConfigureCSSOptions['preProcessors']\n    | ((config: webpack.Configuration, options: NextWebpackContext) => ConfigureCSSOptions['preProcessors']);\n}\n\n/**\n * A NextJS configuration plugin which approximates NextJS's built-in CSS\n * support, but with the added flexibility to support any preprocessor of your\n * choice.\n */\nexport function withCSS<T extends Record<string, any> = Record<string, any>>(\n  nextConfig: T & Partial<PluginConfiguration> = {} as any,\n) {\n  return {\n    ...nextConfig,", "explanation": "**Summary**\n\nThis block is a JavaScript module that exports a plugin function `withCSS` for NextJS configuration. It allows customization of CSS processing through a flexible API, approximating NextJS's built-in support but with additional preprocessor options.", "metadata": {"repo": "magiclabs/next-css", "file": "src/index.ts", "chunk_number": 1, "total_chunks": 2}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** `magiclabs/next-css`\n\n**Purpose:** A Next.js plugin for CSS processing.\n\n**Content:** A lightweight plugin that integrates with Next.js to enable automatic CSS optimization, minification, and compression.", "file_summary": "Here is a holistic summary of the file 'src/index.ts':\n\n\"This module exports a customizable CSS plugin for NextJS, providing flexible preprocessor options, and also serves as a Webpack configuration function that integrates with Next.js settings.\""}
{"code": "    webpack(config: webpack.Configuration, options: NextWebpackContext) {\n      const { preProcessors, assetPrefix } = nextConfig;\n\n      configureCSS(config, {\n        preProcessors: validatePluginConfiguration({ preProcessors }, config, options),\n        rootDirectory: options.dir,\n        customAppFile: findCustomAppFile(options.dir, nextConfig.pageExtensions),\n        isDevelopment: options.dev,\n        isProduction: !options.dev,\n        isServer: options.isServer,\n        isClient: !options.isServer,\n        assetPrefix: assetPrefix ? (assetPrefix.endsWith('/') ? assetPrefix.slice(0, -1) : assetPrefix) : '',\n      });\n\n      if (typeof nextConfig.webpack === 'function') {\n        return nextConfig.webpack(config, options);\n      }\n\n      return config;\n    },\n  };\n}\n\nexport { PreProcessorItem as PreprocessorItem };\n", "explanation": "**Summary**\n\nThis block is a Webpack configuration function that:\n\n* Configures CSS settings based on Next.js options\n* Calls the `webpack` function from the nextConfig object (if defined)\n* Returns the configured Webpack config object", "metadata": {"repo": "magiclabs/next-css", "file": "src/index.ts", "chunk_number": 2, "total_chunks": 2}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** `magiclabs/next-css`\n\n**Purpose:** A Next.js plugin for CSS processing.\n\n**Content:** A lightweight plugin that integrates with Next.js to enable automatic CSS optimization, minification, and compression.", "file_summary": "Here is a holistic summary of the file 'src/index.ts':\n\n\"This module exports a customizable CSS plugin for NextJS, providing flexible preprocessor options, and also serves as a Webpack configuration function that integrates with Next.js settings.\""}
{"code": "/*\n  The MIT License (MIT)\n\n  Copyright (c) 2021 Vercel, Inc.\n\n  Permission is hereby granted, free of charge, to any person obtaining a copy\n  of this software and associated documentation files (the \"Software\"), to deal\n  in the Software without restriction, including without limitation the rights\n  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n  copies of the Software, and to permit persons to whom the Software is\n  furnished to do so, subject to the following conditions:\n\n  The above copyright notice and this permission notice shall be included in all\n  copies or substantial portions of the Software.\n\n  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER", "explanation": "This block is a copyright notice and license agreement (MIT License) that grants permission for free use, modification, and distribution of software, while disclaiming any warranties or liabilities.", "metadata": {"repo": "magiclabs/next-css", "file": "src/postcss.ts", "chunk_number": 1, "total_chunks": 9}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** `magiclabs/next-css`\n\n**Purpose:** A Next.js plugin for CSS processing.\n\n**Content:** A lightweight plugin that integrates with Next.js to enable automatic CSS optimization, minification, and compression.", "file_summary": "Here is a holistic summary of the file 'src/postcss.ts':\n\nThis file contains the configuration for PostCSS in a Next.js project. It:\n\n* Validates the PostCSS configuration and ignores certain plugins.\n* Loads browser support configuration and defines two plugins: `postcss-flexbugs-fixes` and a customized instance of `postcss-preset-env`.\n* Allows for custom PostCSS plugin configurations via a `postcss.config.js` file.\n* Iterates through an array of PostCSS plugins, parsing their configurations and adding valid ones to a new array.\n* Validates the type of each PostCSS plugin and filters out empty values.\n\nOverall, this file is responsible for configuring and validating PostCSS in the project."}
{"code": "  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n  SOFTWARE.\n */\n\n/**\n * @see https://github.com/vercel/next.js/blob/b90b4b503c4444507595be0f9e0edd8a19ea2254/packages/next/build/webpack/config/blocks/css/plugins.ts\n *\n * Modifications:\n *   - Synchronous\n *   - Custom error messages to clarify the error source\n */\n\n/* eslint-disable @typescript-eslint/no-var-requires */\n/* eslint-disable global-require */\n/* eslint-disable import/no-dynamic-require */\n/* eslint-disable @typescript-eslint/restrict-template-expressions */\n/* eslint-disable no-empty */\n/* eslint-disable @typescript-eslint/ban-types */\n\nimport type { AcceptedPlugin } from 'postcss';\nimport chalk from 'chalk';\nimport browserslist from 'browserslist';\nimport { findConfig } from './utils/find-config';\nimport { createMessage, printMessage } from './utils/messages';\n\ntype CssPluginCollection_Array = (string | [string, boolean | object])[];\n", "explanation": "Here is a concise summary of the purpose and functionality of this block:\n\n**Purpose:** Software license disclaimer\n\n**Functionality:** None, this block appears to be a copyright notice and disclaimer, exempting the software from liability.", "metadata": {"repo": "magiclabs/next-css", "file": "src/postcss.ts", "chunk_number": 2, "total_chunks": 9}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** `magiclabs/next-css`\n\n**Purpose:** A Next.js plugin for CSS processing.\n\n**Content:** A lightweight plugin that integrates with Next.js to enable automatic CSS optimization, minification, and compression.", "file_summary": "Here is a holistic summary of the file 'src/postcss.ts':\n\nThis file contains the configuration for PostCSS in a Next.js project. It:\n\n* Validates the PostCSS configuration and ignores certain plugins.\n* Loads browser support configuration and defines two plugins: `postcss-flexbugs-fixes` and a customized instance of `postcss-preset-env`.\n* Allows for custom PostCSS plugin configurations via a `postcss.config.js` file.\n* Iterates through an array of PostCSS plugins, parsing their configurations and adding valid ones to a new array.\n* Validates the type of each PostCSS plugin and filters out empty values.\n\nOverall, this file is responsible for configuring and validating PostCSS in the project."}
{"code": "type CssPluginCollection_Object = { [key: string]: object | boolean };\n\ntype CssPluginCollection = CssPluginCollection_Array | CssPluginCollection_Object;\n\ntype CssPluginShape = [string, object | boolean];\n\nconst genericErrorText = 'Malformed PostCSS configuration';\n\nfunction getError_NullConfig(pluginName: string) {\n  return createMessage(\n    'error',\n    chalk`Your PostCSS configuration for '${pluginName}' cannot have {bold null or undefined} configuration.\\nTo disable '${pluginName}', pass {bold false}, otherwise, pass {bold true} or a configuration object.`,\n  );\n}\n\nfunction isIgnoredPlugin(pluginPath: string): boolean {\n  const ignoredRegex = /(?:^|[\\\\/])(postcss-modules-values|postcss-modules-scope|postcss-modules-extract-imports|postcss-modules-local-by-default|postcss-modules)(?:[\\\\/]|$)/i;\n  const match = ignoredRegex.exec(pluginPath);\n  if (match == null) {\n    return false;\n  }\n\n  const plugin = match.pop()!;\n\n  printMessage(\n    'warning',", "explanation": "Here is a concise summary:\n\n**Purpose:** Validate PostCSS configuration and ignore certain plugins.\n\n**Functionality:**\n\n* Checks if a plugin's configuration is null or undefined.\n* Ignores specific PostCSS plugins (e.g., postcss-modules-values) when loaded from a specific path.", "metadata": {"repo": "magiclabs/next-css", "file": "src/postcss.ts", "chunk_number": 3, "total_chunks": 9}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** `magiclabs/next-css`\n\n**Purpose:** A Next.js plugin for CSS processing.\n\n**Content:** A lightweight plugin that integrates with Next.js to enable automatic CSS optimization, minification, and compression.", "file_summary": "Here is a holistic summary of the file 'src/postcss.ts':\n\nThis file contains the configuration for PostCSS in a Next.js project. It:\n\n* Validates the PostCSS configuration and ignores certain plugins.\n* Loads browser support configuration and defines two plugins: `postcss-flexbugs-fixes` and a customized instance of `postcss-preset-env`.\n* Allows for custom PostCSS plugin configurations via a `postcss.config.js` file.\n* Iterates through an array of PostCSS plugins, parsing their configurations and adding valid ones to a new array.\n* Validates the type of each PostCSS plugin and filters out empty values.\n\nOverall, this file is responsible for configuring and validating PostCSS in the project."}
{"code": "    chalk`Please remove the {underline ${plugin}} plugin from your PostCSS configuration. This plugin is automatically configured by {bold @magiclabs/next-css}.`,\n    'https://err.sh/next.js/postcss-ignored-plugin',\n  );\n\n  return true;\n}\n\nfunction loadPlugin(dir: string, pluginName: string, options: boolean | object): AcceptedPlugin | false {\n  if (options === false || isIgnoredPlugin(pluginName)) {\n    return false;\n  }\n\n  if (options == null) {\n    console.error(getError_NullConfig(pluginName));\n    throw new Error(genericErrorText);\n  }\n\n  const pluginPath = require.resolve(pluginName, { paths: [dir] });\n  if (isIgnoredPlugin(pluginPath)) {\n    return false;\n  }\n  if (options === true) {\n    return require(pluginPath);\n  }\n  const keys = Object.keys(options);\n  if (keys.length === 0) {\n    return require(pluginPath);\n  }\n  return require(pluginPath)(options);\n}\n\nfunction getDefaultPlugins(baseDirectory: string, isProduction: boolean): CssPluginCollection {\n  let browsers: any;\n  try {", "explanation": "Here is a summary of the purpose and functionality of this block:\n\n**Purpose:** To warn about and ignore specific PostCSS plugins in Next.js configurations.\n\n**Functionality:** The `isIgnoredPlugin` function checks if a plugin should be ignored, and if so, returns `false`. The `loadPlugin` function loads a plugin from a directory, returning the loaded plugin or `false` if it's to be ignored.", "metadata": {"repo": "magiclabs/next-css", "file": "src/postcss.ts", "chunk_number": 4, "total_chunks": 9}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** `magiclabs/next-css`\n\n**Purpose:** A Next.js plugin for CSS processing.\n\n**Content:** A lightweight plugin that integrates with Next.js to enable automatic CSS optimization, minification, and compression.", "file_summary": "Here is a holistic summary of the file 'src/postcss.ts':\n\nThis file contains the configuration for PostCSS in a Next.js project. It:\n\n* Validates the PostCSS configuration and ignores certain plugins.\n* Loads browser support configuration and defines two plugins: `postcss-flexbugs-fixes` and a customized instance of `postcss-preset-env`.\n* Allows for custom PostCSS plugin configurations via a `postcss.config.js` file.\n* Iterates through an array of PostCSS plugins, parsing their configurations and adding valid ones to a new array.\n* Validates the type of each PostCSS plugin and filters out empty values.\n\nOverall, this file is responsible for configuring and validating PostCSS in the project."}
{"code": "    browsers = browserslist.loadConfig({\n      path: baseDirectory,\n      env: isProduction ? 'production' : 'development',\n    });\n  } catch {}\n\n  return [\n    require.resolve('postcss-flexbugs-fixes'),\n    [\n      require.resolve('postcss-preset-env'),\n      {\n        browsers: browsers ?? ['defaults'],\n        autoprefixer: {\n          // Disable legacy flexbox support\n          flexbox: 'no-2009',\n        },\n        // Enable CSS features that have shipped to the\n        // web platform, i.e. in 2+ browsers unflagged.\n        stage: 3,\n        features: {\n          'custom-properties': false,\n        },\n      },\n    ],\n  ];\n}\n\nexport function getPostCssPlugins(dir: string, isProduction: boolean): readonly AcceptedPlugin[] {\n  let config = findConfig<{ plugins: CssPluginCollection }>(dir, 'postcss');\n\n  if (config == null) {\n    config = { plugins: getDefaultPlugins(dir, isProduction) };\n  }\n\n  if (typeof config === 'function') {\n    printMessage(\n      'error',", "explanation": "**Summary:**\n\nThis code block returns a list of PostCSS plugin configurations for use in a development environment. It loads browser support configuration, then defines two plugins:\n\n1. `postcss-flexbugs-fixes`\n2. A customized instance of `postcss-preset-env` with:\n\t* Browser support based on the loaded configuration\n\t* Autoprefixer configured to disable legacy flexbox support\n\t* CSS feature stage set to 3 (latest stable features)\n\t* Custom properties disabled\n\nThe function also allows for custom PostCSS plugin configurations to be defined via a `postcss.config.js` file.", "metadata": {"repo": "magiclabs/next-css", "file": "src/postcss.ts", "chunk_number": 5, "total_chunks": 9}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** `magiclabs/next-css`\n\n**Purpose:** A Next.js plugin for CSS processing.\n\n**Content:** A lightweight plugin that integrates with Next.js to enable automatic CSS optimization, minification, and compression.", "file_summary": "Here is a holistic summary of the file 'src/postcss.ts':\n\nThis file contains the configuration for PostCSS in a Next.js project. It:\n\n* Validates the PostCSS configuration and ignores certain plugins.\n* Loads browser support configuration and defines two plugins: `postcss-flexbugs-fixes` and a customized instance of `postcss-preset-env`.\n* Allows for custom PostCSS plugin configurations via a `postcss.config.js` file.\n* Iterates through an array of PostCSS plugins, parsing their configurations and adding valid ones to a new array.\n* Validates the type of each PostCSS plugin and filters out empty values.\n\nOverall, this file is responsible for configuring and validating PostCSS in the project."}
{"code": "      'Your custom PostCSS configuration may not export a function. Please export a plain object instead.',\n      'https://err.sh/next.js/postcss-function',\n    );\n\n    throw new Error(genericErrorText);\n  }\n\n  // Warn user about configuration keys which are not respected\n  const invalidKey = Object.keys(config).find((key) => key !== 'plugins');\n  if (invalidKey) {\n    printMessage(\n      'warning',\n      `Your PostCSS configuration defines a field which is not supported (\\`${invalidKey}\\`). Please remove this configuration value.`,\n    );\n  }\n\n  // Enforce the user provided plugins if the configuration file is present\n  let { plugins } = config;\n  if (plugins == null || typeof plugins !== 'object') {\n    printMessage('error', 'Your custom PostCSS configuration must export a `plugins` key.');\n    throw new Error(genericErrorText);\n  }\n\n  if (!Array.isArray(plugins)) {\n    // Capture variable so TypeScript is happy\n    const pc = plugins;\n\n    plugins = Object.keys(plugins).reduce((acc, curr) => {", "explanation": "Here is a concise summary of the purpose and functionality of this block:\n\n**Purpose:** Validate PostCSS configuration file.\n\n**Functionality:**\n\n1. Check if the configuration exports a plain object instead of a function.\n2. Warn about unsupported configuration keys (e.g., not `plugins`).\n3. Enforce the presence of a `plugins` key in the configuration.\n4. If `plugins` is present, check that it's an array; if not, throw an error and convert to an array.", "metadata": {"repo": "magiclabs/next-css", "file": "src/postcss.ts", "chunk_number": 6, "total_chunks": 9}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** `magiclabs/next-css`\n\n**Purpose:** A Next.js plugin for CSS processing.\n\n**Content:** A lightweight plugin that integrates with Next.js to enable automatic CSS optimization, minification, and compression.", "file_summary": "Here is a holistic summary of the file 'src/postcss.ts':\n\nThis file contains the configuration for PostCSS in a Next.js project. It:\n\n* Validates the PostCSS configuration and ignores certain plugins.\n* Loads browser support configuration and defines two plugins: `postcss-flexbugs-fixes` and a customized instance of `postcss-preset-env`.\n* Allows for custom PostCSS plugin configurations via a `postcss.config.js` file.\n* Iterates through an array of PostCSS plugins, parsing their configurations and adding valid ones to a new array.\n* Validates the type of each PostCSS plugin and filters out empty values.\n\nOverall, this file is responsible for configuring and validating PostCSS in the project."}
{"code": "      const p = pc[curr];\n      if (typeof p === 'undefined') {\n        console.error(getError_NullConfig(curr));\n        throw new Error(genericErrorText);\n      }\n\n      acc.push([curr, p]);\n      return acc;\n    }, [] as CssPluginCollection_Array);\n  }\n\n  const parsed: CssPluginShape[] = [];\n  plugins.forEach((plugin) => {\n    if (plugin == null) {\n      printMessage(\n        'warning',\n        chalk`A {bold null or undefined} PostCSS plugin was provided. This entry will be ignored.`,\n      );\n    } else if (typeof plugin === 'string') {\n      parsed.push([plugin, true]);\n    } else if (Array.isArray(plugin)) {\n      const pluginName = plugin[0];\n      const pluginConfig = plugin[1];\n      if (typeof pluginName === 'string' && (typeof pluginConfig === 'boolean' || typeof pluginConfig === 'object')) {\n        parsed.push([pluginName, pluginConfig]);\n      } else {\n        if (typeof pluginName !== 'string') {\n          printMessage(\n            'error',", "explanation": "Here is a concise summary of the block's purpose and functionality:\n\n**Purpose:** Iterate through an array of PostCSS plugins and parse their configurations.\n\n**Functionality:** It iterates over each plugin, checks its type, and either ignores or processes it based on its configuration type (string, boolean, object, or null), adding valid plugins to a new array (`parsed`).", "metadata": {"repo": "magiclabs/next-css", "file": "src/postcss.ts", "chunk_number": 7, "total_chunks": 9}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** `magiclabs/next-css`\n\n**Purpose:** A Next.js plugin for CSS processing.\n\n**Content:** A lightweight plugin that integrates with Next.js to enable automatic CSS optimization, minification, and compression.", "file_summary": "Here is a holistic summary of the file 'src/postcss.ts':\n\nThis file contains the configuration for PostCSS in a Next.js project. It:\n\n* Validates the PostCSS configuration and ignores certain plugins.\n* Loads browser support configuration and defines two plugins: `postcss-flexbugs-fixes` and a customized instance of `postcss-preset-env`.\n* Allows for custom PostCSS plugin configurations via a `postcss.config.js` file.\n* Iterates through an array of PostCSS plugins, parsing their configurations and adding valid ones to a new array.\n* Validates the type of each PostCSS plugin and filters out empty values.\n\nOverall, this file is responsible for configuring and validating PostCSS in the project."}
{"code": "            chalk`A PostCSS plugin must be provided as a {bold 'string'}. Instead, we got: '${pluginName}'.`,\n            'https://err.sh/next.js/postcss-shape',\n          );\n        } else {\n          printMessage(\n            'error',\n            chalk`A PostCSS Plugin was passed as an array but did not provide its configuration ('${pluginName}').`,\n            'https://err.sh/next.js/postcss-shape',\n          );\n        }\n        throw new Error(genericErrorText);\n      }\n    } else if (typeof plugin === 'function') {\n      printMessage(\n        'error',\n        chalk`A PostCSS Plugin was passed as a function using require(), but it must be provided as a {bold 'string'}.`,\n        'https://err.sh/next.js/postcss-shape',\n      );\n      throw new Error(genericErrorText);\n    } else {\n      printMessage(\n        'error',\n        `An unknown PostCSS plugin was provided (${plugin}).`,\n        'https://err.sh/next.js/postcss-shape',\n      );\n      throw new Error(genericErrorText);\n    }\n  });\n", "explanation": "**Purpose:** Validate the type of a PostCSS plugin.\n\n**Functionality:** Checks if the plugin is provided as a string, array, or function, and throws an error if it doesn't match expectations.", "metadata": {"repo": "magiclabs/next-css", "file": "src/postcss.ts", "chunk_number": 8, "total_chunks": 9}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** `magiclabs/next-css`\n\n**Purpose:** A Next.js plugin for CSS processing.\n\n**Content:** A lightweight plugin that integrates with Next.js to enable automatic CSS optimization, minification, and compression.", "file_summary": "Here is a holistic summary of the file 'src/postcss.ts':\n\nThis file contains the configuration for PostCSS in a Next.js project. It:\n\n* Validates the PostCSS configuration and ignores certain plugins.\n* Loads browser support configuration and defines two plugins: `postcss-flexbugs-fixes` and a customized instance of `postcss-preset-env`.\n* Allows for custom PostCSS plugin configurations via a `postcss.config.js` file.\n* Iterates through an array of PostCSS plugins, parsing their configurations and adding valid ones to a new array.\n* Validates the type of each PostCSS plugin and filters out empty values.\n\nOverall, this file is responsible for configuring and validating PostCSS in the project."}
{"code": "  const resolved = parsed.map((p) => loadPlugin(dir, p[0], p[1]));\n  const filtered = resolved.filter(Boolean) as AcceptedPlugin[];\n\n  return filtered;\n}\n\n// --- Error & warning messages\n", "explanation": "Here is a summary of the block:\n\n**Purpose:** Filters plugin results after loading plugins from a directory.\n\n**Functionality:** Maps loaded plugin functions to an array, filters out empty values, and returns the resulting array.", "metadata": {"repo": "magiclabs/next-css", "file": "src/postcss.ts", "chunk_number": 9, "total_chunks": 9}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** `magiclabs/next-css`\n\n**Purpose:** A Next.js plugin for CSS processing.\n\n**Content:** A lightweight plugin that integrates with Next.js to enable automatic CSS optimization, minification, and compression.", "file_summary": "Here is a holistic summary of the file 'src/postcss.ts':\n\nThis file contains the configuration for PostCSS in a Next.js project. It:\n\n* Validates the PostCSS configuration and ignores certain plugins.\n* Loads browser support configuration and defines two plugins: `postcss-flexbugs-fixes` and a customized instance of `postcss-preset-env`.\n* Allows for custom PostCSS plugin configurations via a `postcss.config.js` file.\n* Iterates through an array of PostCSS plugins, parsing their configurations and adding valid ones to a new array.\n* Validates the type of each PostCSS plugin and filters out empty values.\n\nOverall, this file is responsible for configuring and validating PostCSS in the project."}
{"code": "import type { NextConfig } from 'next';\n\nexport interface ConfigurationContext {\n  rootDirectory: string;\n  customAppFile: string | null;\n  isDevelopment: boolean;\n  isProduction: boolean;\n  isServer: boolean;\n  isClient: boolean;\n  assetPrefix: string;\n}\n\n/**\n * The context type given to a `next.config.js` custom Webpack function.\n *\n * @see https://github.com/vercel/next.js/blob/b90b4b503c4444507595be0f9e0edd8a19ea2254/packages/next/build/webpack-config.ts#L1289\n */\nexport interface NextWebpackContext {\n  dir: string;\n  dev: boolean;\n  isServer: boolean;\n  buildId: string;\n  config: NextConfig;\n  defaultLoaders?: any;\n  totalPages: number;\n  webpack: any;\n}\n", "explanation": "Here is a concise summary:\n\n**Purpose:** Provide configuration contexts for Next.js builds.\n\n**Functionality:** These interfaces define the structure of data passed to custom Webpack functions in `next.config.js` files, including information about the build environment, project directory, and asset prefix.", "metadata": {"repo": "magiclabs/next-css", "file": "src/types.ts", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** `magiclabs/next-css`\n\n**Purpose:** A Next.js plugin for CSS processing.\n\n**Content:** A lightweight plugin that integrates with Next.js to enable automatic CSS optimization, minification, and compression.", "file_summary": "Here is a concise holistic summary:\n\n**File Purpose:** Configure Next.js builds with context interfaces.\n\n**Key Functions:** Define data structure for `next.config.js` custom Webpack functions, including build environment and asset details."}
{"code": "/*\n  The MIT License (MIT)\n\n  Copyright (c) 2021 Vercel, Inc.\n\n  Permission is hereby granted, free of charge, to any person obtaining a copy\n  of this software and associated documentation files (the \"Software\"), to deal\n  in the Software without restriction, including without limitation the rights\n  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n  copies of the Software, and to permit persons to whom the Software is\n  furnished to do so, subject to the following conditions:\n\n  The above copyright notice and this permission notice shall be included in all\n  copies or substantial portions of the Software.\n\n  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER", "explanation": "**Summary:**\n\nThis block contains a software license agreement, specifically the MIT License (2021), which grants permission to use, modify, and distribute the software without restriction, while disclaiming any warranty or liability.", "metadata": {"repo": "magiclabs/next-css", "file": "src/utils/find-config.ts", "chunk_number": 1, "total_chunks": 3}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** `magiclabs/next-css`\n\n**Purpose:** A Next.js plugin for CSS processing.\n\n**Content:** A lightweight plugin that integrates with Next.js to enable automatic CSS optimization, minification, and compression.", "file_summary": "Here is a concise and holistic summary of the file 'src/utils/find-config.ts':\n\nThis utility exports a `findConfig` function that searches for configuration files (starting with `package.json`) in the current directory and its parents, returning their contents as a partially recursive object if found; otherwise returns null."}
{"code": "  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n  SOFTWARE.\n */\n\n/**\n * @see https://github.com/vercel/next.js/blob/b90b4b503c4444507595be0f9e0edd8a19ea2254/packages/next/lib/find-config.ts\n *\n * Modifications:\n *   - Synchronous\n */\n\n/* eslint-disable global-require */\n/* eslint-disable import/no-dynamic-require */\n/* eslint-disable @typescript-eslint/no-var-requires */\n\nimport findup from 'findup-sync';\nimport JSON5 from 'json5';\nimport fs from 'fs';\n\ntype RecursivePartial<T> = {\n  [P in keyof T]?: RecursivePartial<T[P]>;\n};\n\nexport function findConfig<T>(directory: string, key: string): RecursivePartial<T> | null {\n  // `package.json` configuration always wins. Let's check that first.\n  const packageJsonPath = findup('package.json', { cwd: directory });\n  if (packageJsonPath) {\n    const packageJson = require(packageJsonPath);\n    if (packageJson[key] != null && typeof packageJson[key] === 'object') {", "explanation": "**Summary**\n\nThis block of code exports a function `findConfig` that searches for a configuration file in a given directory, with priority given to a `package.json` file if found. The function returns a partially recursive object representing the configuration, or null if not found.", "metadata": {"repo": "magiclabs/next-css", "file": "src/utils/find-config.ts", "chunk_number": 2, "total_chunks": 3}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** `magiclabs/next-css`\n\n**Purpose:** A Next.js plugin for CSS processing.\n\n**Content:** A lightweight plugin that integrates with Next.js to enable automatic CSS optimization, minification, and compression.", "file_summary": "Here is a concise and holistic summary of the file 'src/utils/find-config.ts':\n\nThis utility exports a `findConfig` function that searches for configuration files (starting with `package.json`) in the current directory and its parents, returning their contents as a partially recursive object if found; otherwise returns null."}
{"code": "      return packageJson[key];\n    }\n  }\n\n  // If we didn't find the configuration in `package.json`, we should look for\n  // known filenames.\n  const filePath = findup([`.${key}rc.json`, `${key}.config.json`, `.${key}rc.js`, `${key}.config.js`], {\n    cwd: directory,\n  });\n  if (filePath) {\n    if (filePath.endsWith('.js')) {\n      return require(filePath);\n    }\n\n    // We load JSON contents with JSON5 to allow users to comment in their\n    // configuration file. This pattern was popularized by TypeScript.\n    const fileContents = fs.readFileSync(filePath, 'utf8');\n    return JSON5.parse(fileContents);\n  }\n\n  return null;\n}\n", "explanation": "Here is a summary of the purpose and functionality of this block:\n\n**Purpose:** Retrieve configuration values from various sources (package.json, config files, etc.)\n\n**Functionality:** Search for config files in the current directory and its parents, returning their contents as JSON or JavaScript code if found; otherwise returns null.", "metadata": {"repo": "magiclabs/next-css", "file": "src/utils/find-config.ts", "chunk_number": 3, "total_chunks": 3}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** `magiclabs/next-css`\n\n**Purpose:** A Next.js plugin for CSS processing.\n\n**Content:** A lightweight plugin that integrates with Next.js to enable automatic CSS optimization, minification, and compression.", "file_summary": "Here is a concise and holistic summary of the file 'src/utils/find-config.ts':\n\nThis utility exports a `findConfig` function that searches for configuration files (starting with `package.json`) in the current directory and its parents, returning their contents as a partially recursive object if found; otherwise returns null."}
{"code": "/*\n  The MIT License (MIT)\n\n  Copyright (c) 2021 Vercel, Inc.\n\n  Permission is hereby granted, free of charge, to any person obtaining a copy\n  of this software and associated documentation files (the \"Software\"), to deal\n  in the Software without restriction, including without limitation the rights\n  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n  copies of the Software, and to permit persons to whom the Software is\n  furnished to do so, subject to the following conditions:\n\n  The above copyright notice and this permission notice shall be included in all\n  copies or substantial portions of the Software.\n\n  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER", "explanation": "**Summary:**\n\nThis is a license agreement (MIT License) that grants permission to use, modify, and distribute software without restriction.", "metadata": {"repo": "magiclabs/next-css", "file": "src/utils/find-custom-app-file.ts", "chunk_number": 1, "total_chunks": 3}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** `magiclabs/next-css`\n\n**Purpose:** A Next.js plugin for CSS processing.\n\n**Content:** A lightweight plugin that integrates with Next.js to enable automatic CSS optimization, minification, and compression.", "file_summary": "Here's a concise summary of the file 'src/utils/find-custom-app-file.ts':\n\nThis utility file provides functions to find the `pages` directory and custom `_app` page file in a project directory. It includes two main functions: `findPagesDir`, which searches for the `pages` directory, and `findCustomAppFile`, which iterates over possible extensions to find the first existing page file."}
{"code": "  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n  SOFTWARE.\n */\n\n/**\n * @see https://github.com/vercel/next.js/blob/b90b4b503c4444507595be0f9e0edd8a19ea2254/packages/next/lib/find-pages-dir.ts\n * @see https://github.com/vercel/next.js/blob/b90b4b503c4444507595be0f9e0edd8a19ea2254/packages/next/server/lib/find-page-file.ts\n *\n * Modifications:\n *   - Synchronous\n *   - Specifically optimized to find `/_app` page file\n */\n\n/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\n\nimport fs from 'fs';\nimport path from 'path';\n\nexport function findPagesDir(dir: string) {\n  // prioritize ./pages over ./src/pages\n  let curDir = path.join(dir, 'pages');\n  if (fs.existsSync(curDir)) return curDir;\n\n  curDir = path.join(dir, 'src/pages');\n  if (fs.existsSync(curDir)) return curDir;\n\n  return undefined;\n}\n\nexport function findCustomAppFile(dir: string, pageExtensions: string[]) {", "explanation": "**Summary**\n\nThis block of code provides functions for finding the `pages` directory and a custom `_app` file in a project directory.\n\n**Key Functions:**\n\n1. `findPagesDir`: Searches for the `pages` directory in a given path, prioritizing `./pages` over `./src/pages`.\n2. `findCustomAppFile`: Finds the custom `_app` page file based on specified extensions.", "metadata": {"repo": "magiclabs/next-css", "file": "src/utils/find-custom-app-file.ts", "chunk_number": 2, "total_chunks": 3}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** `magiclabs/next-css`\n\n**Purpose:** A Next.js plugin for CSS processing.\n\n**Content:** A lightweight plugin that integrates with Next.js to enable automatic CSS optimization, minification, and compression.", "file_summary": "Here's a concise summary of the file 'src/utils/find-custom-app-file.ts':\n\nThis utility file provides functions to find the `pages` directory and custom `_app` page file in a project directory. It includes two main functions: `findPagesDir`, which searches for the `pages` directory, and `findCustomAppFile`, which iterates over possible extensions to find the first existing page file."}
{"code": "  const pagesDir = findPagesDir(dir);\n\n  if (pagesDir) {\n    const page = '/_app';\n\n    for (const extension of pageExtensions) {\n      const relativePagePath = `${page}.${extension}`;\n      const pagePath = path.join(pagesDir, relativePagePath);\n\n      if (fs.existsSync(pagePath)) {\n        return pagePath;\n      }\n    }\n  }\n\n  return null;\n}\n", "explanation": "Here is a concise summary:\n\n**Purpose:** Finds the first existing page file in a specified directory.\n\n**Functionality:** Iterates over possible page extensions, checks if a matching file exists, and returns its path or `null` otherwise.", "metadata": {"repo": "magiclabs/next-css", "file": "src/utils/find-custom-app-file.ts", "chunk_number": 3, "total_chunks": 3}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** `magiclabs/next-css`\n\n**Purpose:** A Next.js plugin for CSS processing.\n\n**Content:** A lightweight plugin that integrates with Next.js to enable automatic CSS optimization, minification, and compression.", "file_summary": "Here's a concise summary of the file 'src/utils/find-custom-app-file.ts':\n\nThis utility file provides functions to find the `pages` directory and custom `_app` page file in a project directory. It includes two main functions: `findPagesDir`, which searches for the `pages` directory, and `findCustomAppFile`, which iterates over possible extensions to find the first existing page file."}
{"code": "/* eslint-disable no-nested-ternary */\n/* eslint-disable @typescript-eslint/restrict-template-expressions */\n\nimport chalk from 'chalk';\nimport wrapAnsi from 'wrap-ansi';\n\ntype MessageType = 'error' | 'warning' | 'info';\n\nexport function createMessage(type: MessageType, message: string, helpLink?: string) {\n  const openingBrace =\n    type === 'error'\n      ? chalk`{red.bold \u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501 error \u2501\u2501\u2501\u2501\u2501\u2501\u2501}`\n      : type === 'warning'\n      ? chalk`{yellow.bold \u250f\u2501\u2501\u2501\u2501\u2501\u2501 warning \u2501\u2501\u2501\u2501\u2501\u2501}`\n      : chalk`{blue.bold \u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 info \u2501\u2501\u2501\u2501\u2501\u2501\u2501}`;\n\n  const pkg = chalk`\\n {dim [@magiclabs/next-css]}`;\n  const suffix = helpLink ? `\\n\\n  Read more: ${helpLink}` : '';\n\n  const closingBrace =\n    type === 'error'\n      ? chalk`{red.bold \u2517\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501}`\n      : type === 'warning'\n      ? chalk`{yellow.bold \u2517\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501}`\n      : chalk`{blue.bold \u2517\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501}`;\n\n  const maxWidth = process.stdout.columns <= 78 ? process.stdout.columns : 78;\n  return `\\n\\n${openingBrace}${pkg}\\n\\n  ${wrapAnsi(message, maxWidth)", "explanation": "**Summary:**\n\nThis block is a function `createMessage` that generates a formatted message with a colored header and footer based on its type (`error`, `warning`, or `info`). It takes three arguments: `type`, `message`, and an optional `helpLink`. The function returns a string with the message wrapped to a maximum width.", "metadata": {"repo": "magiclabs/next-css", "file": "src/utils/messages.ts", "chunk_number": 1, "total_chunks": 2}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** `magiclabs/next-css`\n\n**Purpose:** A Next.js plugin for CSS processing.\n\n**Content:** A lightweight plugin that integrates with Next.js to enable automatic CSS optimization, minification, and compression.", "file_summary": "Here's a concise summary of the file 'src/utils/messages.ts':\n\n**Summary:** This module generates formatted messages with colored headers and footers, and logs them to the console based on their type."}
{"code": "    .split('\\n')\n    .join('\\n  ')}${suffix}\\n${closingBrace}\\n\\n`;\n}\n\nexport function printMessage(type: MessageType, message: string, helpLink?: string) {\n  const printableMessage = createMessage(type, message, helpLink);\n\n  switch (type) {\n    case 'error':\n      console.error(printableMessage);\n      break;\n    case 'warning':\n      console.warn(printableMessage);\n      break;\n    case 'info':\n    default:\n      console.log(printableMessage);\n  }\n}\n", "explanation": "Here is a concise summary:\n\n**Functionality:**\n\nThis block creates a formatted string with indentation for log messages, and exports a function `printMessage` that logs the message to the console based on its type (error, warning, or info).", "metadata": {"repo": "magiclabs/next-css", "file": "src/utils/messages.ts", "chunk_number": 2, "total_chunks": 2}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** `magiclabs/next-css`\n\n**Purpose:** A Next.js plugin for CSS processing.\n\n**Content:** A lightweight plugin that integrates with Next.js to enable automatic CSS optimization, minification, and compression.", "file_summary": "Here's a concise summary of the file 'src/utils/messages.ts':\n\n**Summary:** This module generates formatted messages with colored headers and footers, and logs them to the console based on their type."}
{"code": "import chalk from 'chalk';\nimport type webpack from 'webpack';\nimport type { PluginConfiguration, PreprocessorItem } from '../index';\nimport type { NextWebpackContext } from '../types';\nimport { printMessage } from './messages';\n\nfunction raiseValidationError(message: string, helpLink?: string) {\n  printMessage('error', message, helpLink);\n  throw new Error('Malformed plugin Configuration');\n}\n\nexport function validatePluginConfiguration(\n  pluginConfig: Partial<PluginConfiguration>,\n  webpackConfig: webpack.Configuration,\n  webpackContext: NextWebpackContext,\n  isFromFactory = false,\n): PreprocessorItem[] {\n  if (pluginConfig.preProcessors == null) {\n    // Print warning message only once!\n    if (webpackContext.isServer) {\n      printMessage(\n        'warning',\n        chalk`The value given to {bold preProcessors} is {bold null or undefined}. This may not be intentional. Without configuration, only plain CSS will be parsed by Webpack (in which case, the usage of this plugin is unnecessary).`,\n      );\n    }", "explanation": "Here is a concise summary:\n\n**Functionality:** Validates plugin configuration for Next.js.\n\n**Purpose:** Ensures correct plugin setup by throwing an error if invalid configuration is detected, otherwise returns a list of preprocessor items.", "metadata": {"repo": "magiclabs/next-css", "file": "src/utils/validate-plugin-configuration.ts", "chunk_number": 1, "total_chunks": 6}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** `magiclabs/next-css`\n\n**Purpose:** A Next.js plugin for CSS processing.\n\n**Content:** A lightweight plugin that integrates with Next.js to enable automatic CSS optimization, minification, and compression.", "file_summary": "Here's a concise summary of the file 'src/utils/validate-plugin-configuration.ts':\n\n**Summary:** Validates Next.js plugin configurations for CSS pre-processors, ensuring correct setup by throwing errors for invalid configurations or returning processed configurations as needed."}
{"code": "    return [];\n  }\n\n  if (!pluginConfig.preProcessors) {\n    // Print warning message only once!\n    if (webpackContext.isServer) {\n      printMessage(\n        'warning',\n        chalk`The value given to {bold preProcessors} is {bold falsey}. This may not be intentional. Without configuration, only plain CSS will be parsed by Webpack (in which case, the usage of this plugin is unnecessary).`,\n      );\n    }\n    return [];\n  }\n\n  if (pluginConfig.preProcessors) {\n    if (typeof pluginConfig.preProcessors === 'function') {\n      const result = pluginConfig.preProcessors(webpackConfig, webpackContext);\n      return validatePluginConfiguration({ preProcessors: result }, webpackConfig, webpackContext, true);\n    }\n\n    if (Array.isArray(pluginConfig.preProcessors)) {\n      for (const [i, item] of Object.entries(pluginConfig.preProcessors)) {\n        const styledI = chalk`{cyan ${i}}`;\n        const codeRefs = {\n          use: isFromFactory\n            ? chalk`{bold preProcessors() => [{cyan ${i}}].use}`", "explanation": "Here is a concise summary of the block's purpose and functionality:\n\n**Purpose:** Validate and process plugin configurations for CSS pre-processors.\n\n**Functionality:** If `preProcessors` is not set or is a falsy value, it warns that configuration is missing and returns an empty array. If `preProcessors` is set, it checks if it's a function or an array of functions, processes them accordingly, and validates the resulting configuration using the `validatePluginConfiguration` function.", "metadata": {"repo": "magiclabs/next-css", "file": "src/utils/validate-plugin-configuration.ts", "chunk_number": 2, "total_chunks": 6}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** `magiclabs/next-css`\n\n**Purpose:** A Next.js plugin for CSS processing.\n\n**Content:** A lightweight plugin that integrates with Next.js to enable automatic CSS optimization, minification, and compression.", "file_summary": "Here's a concise summary of the file 'src/utils/validate-plugin-configuration.ts':\n\n**Summary:** Validates Next.js plugin configurations for CSS pre-processors, ensuring correct setup by throwing errors for invalid configurations or returning processed configurations as needed."}
{"code": "            : chalk`{bold preProcessors[{cyan ${i}}].use}`,\n          extensions: isFromFactory\n            ? chalk`{bold preProcessors() => [{cyan ${i}}].extensions}`\n            : chalk`{bold preProcessors[{cyan ${i}}].extensions}`,\n        };\n\n        // Make sure `use` is defined.\n        if (item.use == null) {\n          raiseValidationError(\n            chalk`The value given to ${codeRefs.use} is {bold null or undefined}. Please provide an array of objects to configure your additional loaders.`,\n            'https://webpack.js.org/configuration/module/#rule',\n          );\n        }\n\n        // Make sure `use` is a truthy value.\n        if (!item.use) {\n          raiseValidationError(\n            chalk`The value given to ${codeRefs.use} is {bold falsey}. Please provide an array of objects to configure your additional loaders.`,\n            'https://webpack.js.org/configuration/module/#rule',\n          );\n        }\n\n        // Make sure `use` is an array.\n        if (!Array.isArray(item.use)) {", "explanation": "Here is a concise summary:\n\nThis block configures Webpack loader settings using Chalk for formatting. It ensures the \"use\" property is defined, truthy, and an array of objects to configure additional loaders.", "metadata": {"repo": "magiclabs/next-css", "file": "src/utils/validate-plugin-configuration.ts", "chunk_number": 3, "total_chunks": 6}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** `magiclabs/next-css`\n\n**Purpose:** A Next.js plugin for CSS processing.\n\n**Content:** A lightweight plugin that integrates with Next.js to enable automatic CSS optimization, minification, and compression.", "file_summary": "Here's a concise summary of the file 'src/utils/validate-plugin-configuration.ts':\n\n**Summary:** Validates Next.js plugin configurations for CSS pre-processors, ensuring correct setup by throwing errors for invalid configurations or returning processed configurations as needed."}
{"code": "          raiseValidationError(\n            chalk`The value given to ${codeRefs.use} is not an array. Please provide an array of objects to configure your additional loaders.`,\n            'https://webpack.js.org/configuration/module/#rule',\n          );\n        }\n\n        // Make sure `use` array has at least one element.\n        if (!item.use.length) {\n          raiseValidationError(\n            chalk`The array given to ${codeRefs.use} contains zero elements. Please provide an array of objects to configure your additional loaders.`,\n            'https://webpack.js.org/configuration/module/#rule',\n          );\n        }\n\n        // Make sure `extensions` is defined.\n        if (item.extensions == null) {\n          raiseValidationError(\n            chalk`The value given to ${codeRefs.extensions} is {bold null or undefined}. Please provide an array of strings to configure additional CSS pre-processor extensions.`,\n          );\n        }\n\n        // Make sure `extensions` is a truthy value.", "explanation": "Here is a concise summary:\n\nThis block validates properties of an item in a configuration, ensuring that:\n\n* `use` is an array\n* `use` contains at least one element\n* `extensions` is defined and has a truthy value (i.e., not null or undefined)", "metadata": {"repo": "magiclabs/next-css", "file": "src/utils/validate-plugin-configuration.ts", "chunk_number": 4, "total_chunks": 6}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** `magiclabs/next-css`\n\n**Purpose:** A Next.js plugin for CSS processing.\n\n**Content:** A lightweight plugin that integrates with Next.js to enable automatic CSS optimization, minification, and compression.", "file_summary": "Here's a concise summary of the file 'src/utils/validate-plugin-configuration.ts':\n\n**Summary:** Validates Next.js plugin configurations for CSS pre-processors, ensuring correct setup by throwing errors for invalid configurations or returning processed configurations as needed."}
{"code": "        if (!item.extensions) {\n          raiseValidationError(\n            chalk`The value given to ${codeRefs.extensions} is {bold falsey}. Please provide an array of strings to configure additional CSS pre-processor extensions.`,\n          );\n        }\n\n        // Make sure `extensions` is an array.\n        if (!Array.isArray(item.extensions)) {\n          raiseValidationError(\n            chalk`The value given to ${codeRefs.extensions} is not an array. Please provide an array of strings to configure additional CSS pre-processor extensions.`,\n          );\n        }\n\n        // Make sure `extensions` array has at least one element.\n        if (!item.extensions.length) {\n          raiseValidationError(\n            chalk`The array given to ${codeRefs.extensions} contains zero elements. Please provide at least one CSS pre-processor extension.`,\n          );\n        }\n\n        // Make sure all values in `extensions` array are strings.\n        for (const [j, ext] of Object.entries(item.extensions)) {", "explanation": "Here is a concise summary:\n\n**Purpose:** Validate the `extensions` field of an object.\n\n**Functionality:** Ensure that `extensions` is an array with at least one string element. If not, raise validation errors with specific messages.", "metadata": {"repo": "magiclabs/next-css", "file": "src/utils/validate-plugin-configuration.ts", "chunk_number": 5, "total_chunks": 6}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** `magiclabs/next-css`\n\n**Purpose:** A Next.js plugin for CSS processing.\n\n**Content:** A lightweight plugin that integrates with Next.js to enable automatic CSS optimization, minification, and compression.", "file_summary": "Here's a concise summary of the file 'src/utils/validate-plugin-configuration.ts':\n\n**Summary:** Validates Next.js plugin configurations for CSS pre-processors, ensuring correct setup by throwing errors for invalid configurations or returning processed configurations as needed."}
{"code": "          if (typeof ext !== 'string') {\n            const styledJ = chalk`{cyan ${j}}`;\n            const codeRef = isFromFactory\n              ? chalk`{bold preProcessors() => [${styledI}].extensions[${styledJ}]}`\n              : chalk`{bold preProcessors[${styledI}].extensions[${styledJ}]}`;\n\n            raiseValidationError(\n              chalk`The value given to ${codeRef} is not a string. Please provide pre-processor extensions as strings.`,\n            );\n          }\n        }\n      }\n    }\n  }\n\n  return pluginConfig.preProcessors;\n}\n", "explanation": "Here is a summary of the purpose and functionality of this block:\n\n**Purpose:** Validate that pre-processor extension names are strings.\n\n**Functionality:** Checks if input value is a string, raising an error if not. If valid, returns plugin configuration with pre-processors intact.", "metadata": {"repo": "magiclabs/next-css", "file": "src/utils/validate-plugin-configuration.ts", "chunk_number": 6, "total_chunks": 6}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** `magiclabs/next-css`\n\n**Purpose:** A Next.js plugin for CSS processing.\n\n**Content:** A lightweight plugin that integrates with Next.js to enable automatic CSS optimization, minification, and compression.", "file_summary": "Here's a concise summary of the file 'src/utils/validate-plugin-configuration.ts':\n\n**Summary:** Validates Next.js plugin configurations for CSS pre-processors, ensuring correct setup by throwing errors for invalid configurations or returning processed configurations as needed."}
{"code": "{\n  \"compilerOptions\": {\n    \"lib\": [\"es2018\", \"dom\"],\n    \"module\": \"commonjs\",\n    \"moduleResolution\": \"node\",\n    \"target\": \"es6\",\n    \"strict\": true,\n    \"skipLibCheck\": true,\n    \"allowSyntheticDefaultImports\": true,\n    \"experimentalDecorators\": true,\n    \"noImplicitReturns\": true,\n    \"noImplicitThis\": true,\n    \"noImplicitAny\": false,\n    \"esModuleInterop\": true,\n    \"downlevelIteration\": true,\n    \"resolveJsonModule\": true,\n    \"allowJs\": true,\n    \"sourceMap\": true,\n    \"declaration\": true,\n    \"outDir\": \"./dist\",\n  },\n\n  \"include\": [\"./src/**/*.ts\"],\n}\n", "explanation": "**Purpose:** Configuration for a TypeScript compiler.\n\n**Functionality:**\n\n* Sets up TypeScript compilation options (e.g., target version, module system)\n* Specifies input files to compile (using glob pattern `./src/**/*.ts`)\n* Outputs compiled code to a directory (`./dist`)", "metadata": {"repo": "magiclabs/next-css", "file": "tsconfig.json", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** `magiclabs/next-css`\n\n**Purpose:** A Next.js plugin for CSS processing.\n\n**Content:** A lightweight plugin that integrates with Next.js to enable automatic CSS optimization, minification, and compression.", "file_summary": "Here is a concise and to-the-point summary:\n\n`tsconfig.json`: Configures TypeScript compilation for project-specific settings, including target version, module system, input files (glob: `./src/**/*.ts`), and output directory (`./dist`)."}

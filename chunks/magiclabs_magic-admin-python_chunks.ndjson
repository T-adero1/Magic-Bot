{"code": "---\nname: Bug Report\nabout: Use this template to report a bug.\ntitle: \"[DESCRIPTIVE BUG NAME]\"\nlabels: \ud83d\udc1b Bug Report, \ud83d\udd0d Needs Triage\n---\n\n### \u2705 Prerequisites\n\n- [ ] Did you perform a cursory search of open issues? Is this bug already reported elsewhere?\n- [ ] Are you running the latest SDK version?\n- [ ] Are you reporting to the correct repository (`magic-admin-python`)?\n\n### \ud83d\udc1b Description\n\n[Description of the bug.]\n\n### \ud83e\udde9 Steps to Reproduce\n\n1. [First Step]\n2. [Second Step]\n3. [and so on...]\n\n### \ud83e\udd14 Expected behavior\n\n[What you expected to happen?]\n\n### \ud83d\ude2e Actual behavior\n\n[What actually happened? Please include any error stack traces you encounter.]\n\n### \ud83d\udcbb Code Sample\n\n[If possible, please provide a code repository, gist, code snippet or sample files to reproduce the issue.]\n\n### \ud83c\udf0e Environment\n\n| Software            | Version(s) |\n| ------------------- | ---------- |\n| `magic-admin-python`|            |\n| `python`            |            |\n| Operating System    |            |\n", "explanation": "Here is a concise summary of the purpose and functionality of this block:\n\n**Purpose:** To provide a template for reporting bugs in a software project.\n\n**Functionality:** A structured form for users to report issues, including prerequisites, description, steps to reproduce, expected vs actual behavior, code sample (if applicable), and environment details.", "metadata": {"repo": "magiclabs/magic-admin-python", "file": ".github/ISSUE_TEMPLATE/bug_report.md", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** magiclabs/magic-admin-python\n**Purpose:** A Python implementation of Magic Admin, a web-based administrative interface for managing user data and authentication.\n**Content:** Codebase containing API endpoints, views, and models for managing users, roles, permissions, and other related functionality.", "file_summary": "Here is a concise summary of the `.github/ISSUE_TEMPLATE/bug_report.md` file:\n\n**Purpose:** Bug Reporting Template\n\n**Summary:** A structured form for reporting software issues, including prerequisites, description, steps to reproduce, expected vs actual behavior, code sample (if applicable), and environment details."}
{"code": "---\nname: Feature Request\nabout: Use this template to request a new feature.\ntitle: \"[DESCRIPTIVE FEATURE NAME]\"\nlabels: \u2728Feature Request\n---\n\n### \u2705 Prerequisites\n\n- [ ] Did you perform a cursory search of open issues? Is this feature already requested elsewhere?\n- [ ] Are you reporting to the correct repository (`magic-admin-python`)?\n\n### \u2728 Feature Request\n\n[Description of the feature.]\n\n## \ud83e\udde9 Context\n\n[Explain any additional context or rationale for this feature. What are you trying to accomplish?]\n\n## \ud83d\udcbb Examples\n\n[Do you have any example(s) for the requested feature? If so, describe/demonstrate your example(s) here.]\n", "explanation": "**Purpose:** A template for requesting a new feature.\n**Functionality:** Guides users through a structured process to submit a feature request by providing context, examples, and prerequisites (searching existing issues and ensuring correct repository).", "metadata": {"repo": "magiclabs/magic-admin-python", "file": ".github/ISSUE_TEMPLATE/feature_request.md", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** magiclabs/magic-admin-python\n**Purpose:** A Python implementation of Magic Admin, a web-based administrative interface for managing user data and authentication.\n**Content:** Codebase containing API endpoints, views, and models for managing users, roles, permissions, and other related functionality.", "file_summary": "Here is a concise summary of the file '.github/ISSUE_TEMPLATE/feature_request.md':\n\n**Feature Request Template**\n\nA guided template for submitting new feature requests, ensuring thorough context and prerequisite checking before submission."}
{"code": "---\nname: Question\nabout: Use this template to request help or ask a question.\ntitle: \"[WHAT'S YOUR QUESTION?]\"\nlabels: \u2753Question\n---\n\n### \u2705 Prerequisites\n\n- [ ] Did you perform a cursory search of open issues? Is this question already asked elsewhere?\n- [ ] Are you reporting to the correct repository (`magic-admin-sdk`)?\n\n### \u2753 Question\n\n[Ask your question here, please be as detailed as possible!]\n\n### \ud83c\udf0e Environment\n\n| Software            | Version(s) |\n| ------------------- | ---------- |\n| `magic-admin-python`|            |\n| `python`            |            |\n| Operating System    |            |\n", "explanation": "**Summary:**\n\nThis is a template for submitting questions or requests for help, primarily in a software development context. It guides users to ensure their question is not already answered elsewhere, providing space to ask detailed questions and specify environment details.", "metadata": {"repo": "magiclabs/magic-admin-python", "file": ".github/ISSUE_TEMPLATE/question.md", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** magiclabs/magic-admin-python\n**Purpose:** A Python implementation of Magic Admin, a web-based administrative interface for managing user data and authentication.\n**Content:** Codebase containing API endpoints, views, and models for managing users, roles, permissions, and other related functionality.", "file_summary": "Here's a concise and to-the-point summary:\n\n**Template Summary:**\nA guide for submitting questions or requests, ensuring clarity and detail in software development queries."}
{"code": "### \ud83d\udce6 Pull Request\n\n[Provide a general summary of the pull request here.]\n\n### \ud83d\udddc Versioning\n\n(Check _one!_)\n\n- [ ] Patch: Bug Fix?\n- [ ] Minor: New Feature?\n- [ ] Major: Breaking Change?\n\n### \u2705 Fixed Issues\n\n- [List any fixed issues here like: Fixes #XXXX]\n\n### \ud83d\udea8 Test instructions\n\n[Describe any additional context required to test the PR/feature/bug fix.]\n\n### \u26a0\ufe0f Update `CHANGELOG.md`\n\n- [ ] I have updated the `Upcoming Changes` section of `CHANGELOG.md` with context related to this Pull Request.\n", "explanation": "**Purpose:** A pull request template for tracking changes in a project.\n\n**Functionality:**\n\n* Provides a summary of the pull request\n* Classifies the versioning level (patch, minor, or major) of the change\n* Lists fixed issues related to the pull request\n* Specifies test instructions and additional context required to review the PR\n* Requires updating the CHANGELOG.md file with relevant information.", "metadata": {"repo": "magiclabs/magic-admin-python", "file": ".github/PULL_REQUEST_TEMPLATE.md", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** magiclabs/magic-admin-python\n**Purpose:** A Python implementation of Magic Admin, a web-based administrative interface for managing user data and authentication.\n**Content:** Codebase containing API endpoints, views, and models for managing users, roles, permissions, and other related functionality.", "file_summary": "Here is a concise and holistic summary:\n\nThe `.github/PULL_REQUEST_TEMPLATE.md` file serves as a template for tracking changes in a project, guiding contributors through the pull request process by summarizing the PR, classifying its versioning level, listing related issue fixes, specifying test instructions, and requiring updates to the CHANGELOG.md."}
{"code": "# To get started with Dependabot version updates, you'll need to specify which\n# package ecosystems to update and where the package manifests are located.\n# Please see the documentation for all configuration options:\n# https://docs.github.com/github/administering-a-repository/configuration-options-for-dependency-updates\n\nversion: 2\nupdates:\n  - package-ecosystem: \"pip\"\n    directory: \"/\"\n    schedule:\n      interval: \"weekly\"\n      day: \"tuesday\"\n    commit-message:\n      prefix: \"[FIX]\"\n      prefix-development: \"[CHORE]\"\n      include: scope\n  # Fetch and update latest `github-actions` pkgs\n  - package-ecosystem: github-actions\n    directory: '/'\n    schedule:\n      interval: \"weekly\"\n      day: \"tuesday\"\n    commit-message:\n      prefix: \"[FIX]\"\n      prefix-development: \"[CHORE]\"\n      include: scope\n", "explanation": "**Purpose:** Configures Dependabot to update package dependencies.\n\n**Functionality:** Specifies which package ecosystems to update, where manifests are located, and scheduling frequency.", "metadata": {"repo": "magiclabs/magic-admin-python", "file": ".github/dependabot.yml", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** magiclabs/magic-admin-python\n**Purpose:** A Python implementation of Magic Admin, a web-based administrative interface for managing user data and authentication.\n**Content:** Codebase containing API endpoints, views, and models for managing users, roles, permissions, and other related functionality.", "file_summary": "Here is a concise summary of the '.github/dependabot.yml' file:\n\n\"Configures automatic package dependency updates, specifying which packages to update, update frequency, and manifest locations.\""}
{"code": "name: Test\nconcurrency:\n  group: ci-${{ github.ref }}\n  cancel-in-progress: true\non:\n  push:\n    branches:\n      - \"master\"\n  pull_request:\n\njobs:\n  test:\n    runs-on: ubuntu-20.04\n    name: Run tests\n    steps:\n      - uses: actions/checkout@v3\n\n      - uses: actions/setup-python@v4\n        with:\n          python-version: '3.6'\n          cache: 'pip'\n\n      - name: Install Dependencies\n        run: pip install -r requirements.txt -r requirements-dev.txt\n\n      - name: Run tests\n        run: |\n          make development\n          source virtualenv_run/bin/activate\n          make test\n\n  security:\n    runs-on: ubuntu-20.04\n    name: Run style/security checks\n\n    steps:\n      - uses: actions/checkout@v3\n\n      - uses: actions/setup-python@v4\n        with:\n          python-version: '3.6'\n          cache: 'pip'\n\n      - name: Install Dependencies\n        run: pip install -r requirements.txt -r requirements-dev.txt\n\n      - name: Safety Check\n        shell: bash\n        run: |\n          make development", "explanation": "Here is a concise summary of the purpose and functionality of this block:\n\n**Purpose:** Automate testing and security checks for a Python project on GitHub.\n\n**Functionality:** \n\n* Tests are run on push to master branch and pull requests.\n* Two jobs:\n\t+ \"test\": Runs tests using make development, activates a virtual environment, and runs make test.\n\t+ \"security\": Checks style and security issues using make development.", "metadata": {"repo": "magiclabs/magic-admin-python", "file": ".github/workflows/test.yml", "chunk_number": 1, "total_chunks": 2}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** magiclabs/magic-admin-python\n**Purpose:** A Python implementation of Magic Admin, a web-based administrative interface for managing user data and authentication.\n**Content:** Codebase containing API endpoints, views, and models for managing users, roles, permissions, and other related functionality.", "file_summary": "Here is a concise and holistic summary of the file '.github/workflows/test.yml':\n\n**Automated Testing & Security Checks**\n\nThis script automates testing and security checks for a Python project on GitHub by running tests and style/security issue checks on push to master branch and pull requests, leveraging `make`, virtual environments, and safety package updates."}
{"code": "          source virtualenv_run/bin/activate\n          pip install -U safety\n          safety check -i 44610 -i 51499 -i 51457 -i 39253 -i 44634 -i 50473 -i 52495 -i 53269\n", "explanation": "This block appears to be a script that:\n\n* Activates a virtual environment named \"virtualenv_run\"\n* Updates the safety package using pip\n* Runs a safety check with specific IP ranges (using the `-i` flag)", "metadata": {"repo": "magiclabs/magic-admin-python", "file": ".github/workflows/test.yml", "chunk_number": 2, "total_chunks": 2}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** magiclabs/magic-admin-python\n**Purpose:** A Python implementation of Magic Admin, a web-based administrative interface for managing user data and authentication.\n**Content:** Codebase containing API endpoints, views, and models for managing users, roles, permissions, and other related functionality.", "file_summary": "Here is a concise and holistic summary of the file '.github/workflows/test.yml':\n\n**Automated Testing & Security Checks**\n\nThis script automates testing and security checks for a Python project on GitHub by running tests and style/security issue checks on push to master branch and pull requests, leveraging `make`, virtual environments, and safety package updates."}
{"code": "repos:\n-   repo: https://github.com/pre-commit/pre-commit-hooks\n    rev: v2.5.0\n    hooks:\n    -   id: flake8\n        language_version: python3.6\n        args: [\n            --max-line-length=100,\n            # We did some funky thing in __init__.py, skip them for now.\n            --exclude=*__init__.py\n        ]\n    -   id: trailing-whitespace\n        language_version: python3.6\n    -   id: end-of-file-fixer\n        language_version: python3.6\n    -   id: check-merge-conflict\n        language_version: python3.6\n    -   id: requirements-txt-fixer\n        language_version: python3.6\n    -   id: name-tests-test\n        language_version: python3.6\n    -   id: double-quote-string-fixer\n        language_version: python3.6\n    -   id: forbid-new-submodules\n        language_version: python3.6\n    -   id: check-yaml\n        language_version: python3.6\n        files: (\\.(yaml|yml|eyaml))$\n    -   id: check-json\n        files: \\.(jshintrc|json)$\n-   repo: https://github.com/pre-commit/mirrors-autopep8\n    rev: v1.5.1", "explanation": "Here is a concise summary of the block:\n\n**Configuration for pre-commit hooks**\n\nThis block defines two repositories (`repos`) with specific commits (`rev`) that run various hook scripts when changes are committed. Each hook script checks for issues in code, such as formatting, whitespace, and conflicts, and fixes them automatically if possible.", "metadata": {"repo": "magiclabs/magic-admin-python", "file": ".pre-commit-config.yaml", "chunk_number": 1, "total_chunks": 2}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** magiclabs/magic-admin-python\n**Purpose:** A Python implementation of Magic Admin, a web-based administrative interface for managing user data and authentication.\n**Content:** Codebase containing API endpoints, views, and models for managing users, roles, permissions, and other related functionality.", "file_summary": "Here is a holistic summary of the file '.pre-commit-config.yaml':\n\n**Automated Code Quality Checks**\n\nThis YAML configuration defines a set of pre-commit hooks that run various code quality checks, including formatting, whitespace, and import ordering, to ensure consistent Python 3.6 code style across all commits."}
{"code": "    hooks:\n    -   id: autopep8\n        language_version: python3.6\n-   repo: https://github.com/asottile/add-trailing-comma\n    rev: v2.0.1\n    hooks:\n    -   id: add-trailing-comma\n-   repo: https://github.com/asottile/reorder_python_imports\n    rev: v2.2.0\n    hooks:\n    -   id: reorder-python-imports\n        language_version: python3.6\n-   repo: https://github.com/asottile/pyupgrade\n    rev: v2.1.1\n    hooks:\n    -   id: pyupgrade\n        args:\n        - --py3-plus\n        language_version: python3.6\n", "explanation": "This block defines a series of code formatting hooks for Python 3.6, including:\n\n* autopep8: automatic PEP8 style enforcement\n* add-trailing-comma: adds trailing commas in Python syntax\n* reorder-python-imports: reorders Python imports alphabetically\n* pyupgrade: upgrades Python code to use modern features and syntax", "metadata": {"repo": "magiclabs/magic-admin-python", "file": ".pre-commit-config.yaml", "chunk_number": 2, "total_chunks": 2}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** magiclabs/magic-admin-python\n**Purpose:** A Python implementation of Magic Admin, a web-based administrative interface for managing user data and authentication.\n**Content:** Codebase containing API endpoints, views, and models for managing users, roles, permissions, and other related functionality.", "file_summary": "Here is a holistic summary of the file '.pre-commit-config.yaml':\n\n**Automated Code Quality Checks**\n\nThis YAML configuration defines a set of pre-commit hooks that run various code quality checks, including formatting, whitespace, and import ordering, to ensure consistent Python 3.6 code style across all commits."}
{"code": "## Upcoming Changes\n\n#### Fixed\n\n- <PR-#ISSUE> ...\n\n#### Changed\n\n- <PR-#ISSUE> ...\n\n#### Added\n\n- <PR-#ISSUE> ...\n\n## `1.0.0` - 07/05/2023\n\n#### Added\n\n- PR-#87: Add Magic Connect Admin SDK support for Token Resource [#111](https://github.com/magiclabs/magic-admin-js/pull/111) ([@magic-ravi](https://github.com/magic-ravi))\n  - [Security Enhancement]: Validate `aud` using Magic client ID.\n  - Pull client ID from Magic servers if not provided in constructor.\n\n\n## `0.3.3` - 05/02/2023\n\n#### Changed\n\n- PR-#77: Removing NFT functionality, clients will interact with the NFT API directly via API calls.\n\n\n## `0.3.2` - 03/21/2023\n\n#### Added\n\n- PR-#69: Patch bad formatting of request\n\n## `0.3.1` - 03/21/2023\n\n#### Added\n\n- PR-#67: Patch module not found fixed for new nft module\n\n## `0.3.0` - 03/20/2023\n\n#### Added\n\n- PR-#66: Create paths for minting an NFT through magic delivery service.\n\n## `0.2.0` - 1/04/2023\n\n#### Added\n\n- PR-#50: Split up DIDTokenError into DIDTokenExpired, DIDTokenMalformed, and DIDTokenInvalid.\n\n## `0.1.0` - 11/30/2022\n", "explanation": "**Summary**\n\nThis block is a changelog, detailing updates to a software library or SDK. It lists changes, additions, and fixes across different versions, with links to GitHub pull requests for further information.", "metadata": {"repo": "magiclabs/magic-admin-python", "file": "CHANGELOG.md", "chunk_number": 1, "total_chunks": 2}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** magiclabs/magic-admin-python\n**Purpose:** A Python implementation of Magic Admin, a web-based administrative interface for managing user data and authentication.\n**Content:** Codebase containing API endpoints, views, and models for managing users, roles, permissions, and other related functionality.", "file_summary": "Here's a holistic summary of the file 'CHANGELOG.md':\n\n**Software Update History**\n\nThis changelog summarizes key updates across versions 0.0.5 and 0.0.4, including new features, bug fixes, and changes made since previous releases."}
{"code": "#### Added\n\n- PR-#46: Support mult-chain wallets in get_metadata calls\n\n## `0.0.5` - 06/23/2021\n\n#### Fixed\n\n- <PR-#34> Relax dependency version requirement constraints\n\n## `0.0.4` - 04/23/2020\n\n#### Changed\n\n- PR-#14: Update external document link.\n", "explanation": "Here is a concise summary:\n\n**Block Summary**\n\nThis block lists changes made in software versions `0.0.5` and `0.0.4`. It notes features added, bugs fixed, and changes made since previous releases.", "metadata": {"repo": "magiclabs/magic-admin-python", "file": "CHANGELOG.md", "chunk_number": 2, "total_chunks": 2}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** magiclabs/magic-admin-python\n**Purpose:** A Python implementation of Magic Admin, a web-based administrative interface for managing user data and authentication.\n**Content:** Codebase containing API endpoints, views, and models for managing users, roles, permissions, and other related functionality.", "file_summary": "Here's a holistic summary of the file 'CHANGELOG.md':\n\n**Software Update History**\n\nThis changelog summarizes key updates across versions 0.0.5 and 0.0.4, including new features, bug fixes, and changes made since previous releases."}
{"code": "# Contributing\n\nWhen contributing to this repository, please first discuss the change you wish to make via an **issue**. This can be a feature request or a bug report. After a maintainer has triaged your issue, you are welcome to collaborate on a pull request. If your change is small or uncomplicated, you are welcome to open an issue and pull request simultaneously.\n\nPlease note we have a **code of conduct**, please follow it in all your interactions with the project.\n\n## Setting up for Local Development\n\n1. Fork this repostiory.\n2. Clone your fork.\n3. Create a new branch in your local repository with the following pattern:\n\n- For bug fixes: `bug/#[issue_number]/[descriptive_bug_name]`\n- For features: `feature/#[issue_number]/[descriptive_feature_name]`\n- For chores/the rest: `chore/[descriptive_chore_name]`\n\n4. Install dependencies: `make development`\n5. Source the virtualenv: `source virtualenv_run/bin/activate`\n6. Start building for development\n\n## Opening a Pull Request\n", "explanation": "Here is a concise summary of the block's purpose and functionality:\n\n**Purpose:** Guide contributors on how to contribute to the repository, set up local development environment, and create pull requests.\n\n**Functionality:**\n\n1. Discuss changes via issues before making pull requests.\n2. Follow a code of conduct for interactions with the project.\n3. Set up local development by forking, cloning, creating a new branch (following specific naming conventions), installing dependencies, sourcing a virtualenv, and starting building for development.\n4. Create concise and to-the-point pull requests.", "metadata": {"repo": "magiclabs/magic-admin-python", "file": "CONTRIBUTING.md", "chunk_number": 1, "total_chunks": 7}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** magiclabs/magic-admin-python\n**Purpose:** A Python implementation of Magic Admin, a web-based administrative interface for managing user data and authentication.\n**Content:** Codebase containing API endpoints, views, and models for managing users, roles, permissions, and other related functionality.", "file_summary": "Here is a holistic summary of the file 'CONTRIBUTING.md':\n\n**Contributing to the Project**\n\nThis document guides contributors on how to contribute to the repository by setting up a local development environment, creating pull requests, and following a code of conduct for respectful interactions.\n\n**Code of Conduct**\n\nThe community expects contributors to maintain professional standards, respecting others through empathy, kindness, and constructive feedback. Harassment, insults, and personal attacks are not tolerated.\n\n**Reporting Unacceptable Behavior**\n\nIf unacceptable behavior occurs, report it to the community leaders. They will enforce the code of conduct by warning, temporarily or permanently banning individuals who repeatedly violate these standards.\n\n**Contributing Process**\n\n1. Discuss changes via issues before making pull requests.\n2. Set up local development environment and create concise pull requests.\n3. A maintainer will review and merge your changes once approved.\n\nThis summary aims to be concise and to the point, highlighting the key aspects of contributing to the project and maintaining a respectful community environment."}
{"code": "1. Update the **`Upcoming Changes`** section of [`CHANGELOG.md`](./CHANGELOG.md) with your fixes, changes, or additions. A maintainer will label your changes with a version number and release date once they are published.\n2. Open a pull request from your fork/branch to the upstream `master` branch of _this_ repository.\n3. A maintainer will review your code changes and offer feedback or suggestions if necessary. Once your changes are approved, a maintainer will merge the pull request for you and publish a release.\n\n## Contributor Covenant Code of Conduct\n\n### Our Pledge\n\nWe as members, contributors, and leaders pledge to make participation in our\ncommunity a harassment-free experience for everyone, regardless of age, body\nsize, visible or invisible disability, ethnicity, sex characteristics, gender\nidentity and expression, level of experience, education, socio-economic status,\nnationality, personal appearance, race, religion, or sexual identity\nand orientation.\n", "explanation": "**Summary:**\n\nThis block outlines the steps for contributors to submit changes to a project:\n\n1. Update the \"Upcoming Changes\" section with your fixes or additions.\n2. Open a pull request from your forked branch to the upstream repository.\n3. A maintainer will review and merge your changes once approved.\n\n(Note: The second paragraph appears to be a code of conduct statement, unrelated to the contribution process.)", "metadata": {"repo": "magiclabs/magic-admin-python", "file": "CONTRIBUTING.md", "chunk_number": 2, "total_chunks": 7}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** magiclabs/magic-admin-python\n**Purpose:** A Python implementation of Magic Admin, a web-based administrative interface for managing user data and authentication.\n**Content:** Codebase containing API endpoints, views, and models for managing users, roles, permissions, and other related functionality.", "file_summary": "Here is a holistic summary of the file 'CONTRIBUTING.md':\n\n**Contributing to the Project**\n\nThis document guides contributors on how to contribute to the repository by setting up a local development environment, creating pull requests, and following a code of conduct for respectful interactions.\n\n**Code of Conduct**\n\nThe community expects contributors to maintain professional standards, respecting others through empathy, kindness, and constructive feedback. Harassment, insults, and personal attacks are not tolerated.\n\n**Reporting Unacceptable Behavior**\n\nIf unacceptable behavior occurs, report it to the community leaders. They will enforce the code of conduct by warning, temporarily or permanently banning individuals who repeatedly violate these standards.\n\n**Contributing Process**\n\n1. Discuss changes via issues before making pull requests.\n2. Set up local development environment and create concise pull requests.\n3. A maintainer will review and merge your changes once approved.\n\nThis summary aims to be concise and to the point, highlighting the key aspects of contributing to the project and maintaining a respectful community environment."}
{"code": "We pledge to act and interact in ways that contribute to an open, welcoming,\ndiverse, inclusive, and healthy community.\n\n### Our Standards\n\nExamples of behavior that contributes to a positive environment for our\ncommunity include:\n\n- Demonstrating empathy and kindness toward other people\n- Being respectful of differing opinions, viewpoints, and experiences\n- Giving and gracefully accepting constructive feedback\n- Accepting responsibility and apologizing to those affected by our mistakes, and learning from the experience\n- Focusing on what is best not just for us as individuals, but for the overall community\n\nExamples of unacceptable behavior include:\n\n- The use of sexualized language or imagery, and sexual attention or advances of any kind\n- Trolling, insulting or derogatory comments, and personal or political attacks\n- Public or private harassment\n- Publishing others' private information, such as a physical or email address, without their explicit permission", "explanation": "**Purpose:** Establish community standards for respectful behavior.\n\n**Functionality:** Define acceptable and unacceptable behavior, encouraging empathy, kindness, and constructive feedback while prohibiting harassment, insults, and personal attacks.", "metadata": {"repo": "magiclabs/magic-admin-python", "file": "CONTRIBUTING.md", "chunk_number": 3, "total_chunks": 7}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** magiclabs/magic-admin-python\n**Purpose:** A Python implementation of Magic Admin, a web-based administrative interface for managing user data and authentication.\n**Content:** Codebase containing API endpoints, views, and models for managing users, roles, permissions, and other related functionality.", "file_summary": "Here is a holistic summary of the file 'CONTRIBUTING.md':\n\n**Contributing to the Project**\n\nThis document guides contributors on how to contribute to the repository by setting up a local development environment, creating pull requests, and following a code of conduct for respectful interactions.\n\n**Code of Conduct**\n\nThe community expects contributors to maintain professional standards, respecting others through empathy, kindness, and constructive feedback. Harassment, insults, and personal attacks are not tolerated.\n\n**Reporting Unacceptable Behavior**\n\nIf unacceptable behavior occurs, report it to the community leaders. They will enforce the code of conduct by warning, temporarily or permanently banning individuals who repeatedly violate these standards.\n\n**Contributing Process**\n\n1. Discuss changes via issues before making pull requests.\n2. Set up local development environment and create concise pull requests.\n3. A maintainer will review and merge your changes once approved.\n\nThis summary aims to be concise and to the point, highlighting the key aspects of contributing to the project and maintaining a respectful community environment."}
{"code": "- Other conduct which could reasonably be considered inappropriate in a professional setting\n\n### Enforcement Responsibilities\n\nCommunity leaders are responsible for clarifying and enforcing our standards of\nacceptable behavior and will take appropriate and fair corrective action in\nresponse to any behavior that they deem inappropriate, threatening, offensive,\nor harmful.\n\nCommunity leaders have the right and responsibility to remove, edit, or reject\ncomments, commits, code, wiki edits, issues, and other contributions that are\nnot aligned to this Code of Conduct, and will communicate reasons for moderation\ndecisions when appropriate.\n\n### Scope\n\nThis Code of Conduct applies within all community spaces, and also applies when\nan individual is officially representing the community in public spaces.\nExamples of representing our community include using an official e-mail address,\nposting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event.\n\n### Enforcement\n", "explanation": "**Summary:**\n\nThis block outlines a Code of Conduct for a professional community, defining behaviors that are considered unacceptable in a workplace setting. It establishes the responsibility of community leaders to enforce this code, remove or edit inappropriate content, and communicate moderation decisions when necessary.", "metadata": {"repo": "magiclabs/magic-admin-python", "file": "CONTRIBUTING.md", "chunk_number": 4, "total_chunks": 7}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** magiclabs/magic-admin-python\n**Purpose:** A Python implementation of Magic Admin, a web-based administrative interface for managing user data and authentication.\n**Content:** Codebase containing API endpoints, views, and models for managing users, roles, permissions, and other related functionality.", "file_summary": "Here is a holistic summary of the file 'CONTRIBUTING.md':\n\n**Contributing to the Project**\n\nThis document guides contributors on how to contribute to the repository by setting up a local development environment, creating pull requests, and following a code of conduct for respectful interactions.\n\n**Code of Conduct**\n\nThe community expects contributors to maintain professional standards, respecting others through empathy, kindness, and constructive feedback. Harassment, insults, and personal attacks are not tolerated.\n\n**Reporting Unacceptable Behavior**\n\nIf unacceptable behavior occurs, report it to the community leaders. They will enforce the code of conduct by warning, temporarily or permanently banning individuals who repeatedly violate these standards.\n\n**Contributing Process**\n\n1. Discuss changes via issues before making pull requests.\n2. Set up local development environment and create concise pull requests.\n3. A maintainer will review and merge your changes once approved.\n\nThis summary aims to be concise and to the point, highlighting the key aspects of contributing to the project and maintaining a respectful community environment."}
{"code": "Instances of abusive, harassing, or otherwise unacceptable behavior may be\nreported to the community leaders responsible for enforcement at [support@magic.link](mailto:support@magic.link).\nAll complaints will be reviewed and investigated promptly and fairly.\n\nAll community leaders are obligated to respect the privacy and security of the\nreporter of any incident.\n\n### Enforcement Guidelines\n\nCommunity leaders will follow these Community Impact Guidelines in determining\nthe consequences for any action they deem in violation of this Code of Conduct:\n\n#### 1. Correction\n\n**Community Impact**: Use of inappropriate language or other behavior deemed\nunprofessional or unwelcome in the community.\n\n**Consequence**: A private, written warning from community leaders, providing\nclarity around the nature of the violation and an explanation of why the\nbehavior was inappropriate. A public apology may be requested.\n\n#### 2. Warning\n\n**Community Impact**: A violation through a single incident or series\nof actions.\n", "explanation": "Here is a concise summary:\n\nThis block outlines a reporting process for unacceptable behavior within a community, including guidelines for enforcement by community leaders in cases of abuse, harassment, or other violations of a Code of Conduct.", "metadata": {"repo": "magiclabs/magic-admin-python", "file": "CONTRIBUTING.md", "chunk_number": 5, "total_chunks": 7}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** magiclabs/magic-admin-python\n**Purpose:** A Python implementation of Magic Admin, a web-based administrative interface for managing user data and authentication.\n**Content:** Codebase containing API endpoints, views, and models for managing users, roles, permissions, and other related functionality.", "file_summary": "Here is a holistic summary of the file 'CONTRIBUTING.md':\n\n**Contributing to the Project**\n\nThis document guides contributors on how to contribute to the repository by setting up a local development environment, creating pull requests, and following a code of conduct for respectful interactions.\n\n**Code of Conduct**\n\nThe community expects contributors to maintain professional standards, respecting others through empathy, kindness, and constructive feedback. Harassment, insults, and personal attacks are not tolerated.\n\n**Reporting Unacceptable Behavior**\n\nIf unacceptable behavior occurs, report it to the community leaders. They will enforce the code of conduct by warning, temporarily or permanently banning individuals who repeatedly violate these standards.\n\n**Contributing Process**\n\n1. Discuss changes via issues before making pull requests.\n2. Set up local development environment and create concise pull requests.\n3. A maintainer will review and merge your changes once approved.\n\nThis summary aims to be concise and to the point, highlighting the key aspects of contributing to the project and maintaining a respectful community environment."}
{"code": "**Consequence**: A warning with consequences for continued behavior. No\ninteraction with the people involved, including unsolicited interaction with\nthose enforcing the Code of Conduct, for a specified period of time. This\nincludes avoiding interactions in community spaces as well as external channels\nlike social media. Violating these terms may lead to a temporary or\npermanent ban.\n\n#### 3. Temporary Ban\n\n**Community Impact**: A serious violation of community standards, including\nsustained inappropriate behavior.\n\n**Consequence**: A temporary ban from any sort of interaction or public\ncommunication with the community for a specified period of time. No public or\nprivate interaction with the people involved, including unsolicited interaction\nwith those enforcing the Code of Conduct, is allowed during this period.\nViolating these terms may lead to a permanent ban.\n\n#### 4. Permanent Ban\n\n**Community Impact**: Demonstrating a pattern of violation of community", "explanation": "This block outlines three consequences for violating a code of conduct in a community:\n\n1. **Warning with Consequences**: A warning with no interaction with others, including community spaces and social media, for a specified time.\n2. **Temporary Ban**: A temporary ban from all interactions and public communication within the community for a specified period.\n3. **Permanent Ban**: A permanent exclusion from the community due to repeated or severe violations of community standards.", "metadata": {"repo": "magiclabs/magic-admin-python", "file": "CONTRIBUTING.md", "chunk_number": 6, "total_chunks": 7}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** magiclabs/magic-admin-python\n**Purpose:** A Python implementation of Magic Admin, a web-based administrative interface for managing user data and authentication.\n**Content:** Codebase containing API endpoints, views, and models for managing users, roles, permissions, and other related functionality.", "file_summary": "Here is a holistic summary of the file 'CONTRIBUTING.md':\n\n**Contributing to the Project**\n\nThis document guides contributors on how to contribute to the repository by setting up a local development environment, creating pull requests, and following a code of conduct for respectful interactions.\n\n**Code of Conduct**\n\nThe community expects contributors to maintain professional standards, respecting others through empathy, kindness, and constructive feedback. Harassment, insults, and personal attacks are not tolerated.\n\n**Reporting Unacceptable Behavior**\n\nIf unacceptable behavior occurs, report it to the community leaders. They will enforce the code of conduct by warning, temporarily or permanently banning individuals who repeatedly violate these standards.\n\n**Contributing Process**\n\n1. Discuss changes via issues before making pull requests.\n2. Set up local development environment and create concise pull requests.\n3. A maintainer will review and merge your changes once approved.\n\nThis summary aims to be concise and to the point, highlighting the key aspects of contributing to the project and maintaining a respectful community environment."}
{"code": "standards, including sustained inappropriate behavior,  harassment of an\nindividual, or aggression toward or disparagement of classes of individuals.\n\n**Consequence**: A permanent ban from any sort of public interaction within\nthe community.\n\n### Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant](https://www.contributor-covenant.org),\nversion 2.0, available at\nhttps://www.contributor-covenant.org/version/2/0/code_of_conduct.html.\n\nCommunity Impact Guidelines were inspired by [Mozilla's code of conduct\nenforcement ladder](https://github.com/mozilla/diversity).\n\nFor answers to common questions about this code of conduct, see the FAQ at\nhttps://www.contributor-covenant.org/faq. Translations are available at\nhttps://www.contributor-covenant.org/translations.\n", "explanation": "**Summary**\n\nThis block outlines a community's Code of Conduct, which aims to maintain standards by preventing harassment, aggression, or disparagement within the community. A permanent ban is the consequence for violating these standards.", "metadata": {"repo": "magiclabs/magic-admin-python", "file": "CONTRIBUTING.md", "chunk_number": 7, "total_chunks": 7}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** magiclabs/magic-admin-python\n**Purpose:** A Python implementation of Magic Admin, a web-based administrative interface for managing user data and authentication.\n**Content:** Codebase containing API endpoints, views, and models for managing users, roles, permissions, and other related functionality.", "file_summary": "Here is a holistic summary of the file 'CONTRIBUTING.md':\n\n**Contributing to the Project**\n\nThis document guides contributors on how to contribute to the repository by setting up a local development environment, creating pull requests, and following a code of conduct for respectful interactions.\n\n**Code of Conduct**\n\nThe community expects contributors to maintain professional standards, respecting others through empathy, kindness, and constructive feedback. Harassment, insults, and personal attacks are not tolerated.\n\n**Reporting Unacceptable Behavior**\n\nIf unacceptable behavior occurs, report it to the community leaders. They will enforce the code of conduct by warning, temporarily or permanently banning individuals who repeatedly violate these standards.\n\n**Contributing Process**\n\n1. Discuss changes via issues before making pull requests.\n2. Set up local development environment and create concise pull requests.\n3. A maintainer will review and merge your changes once approved.\n\nThis summary aims to be concise and to the point, highlighting the key aspects of contributing to the project and maintaining a respectful community environment."}
{"code": "The MIT License (MIT)\n\nCopyright (c) 2020 Fortmatic Inc.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,", "explanation": "This block is a license agreement, specifically the MIT License, which allows for free use, modification, and distribution of software, while disclaiming warranty or liability.", "metadata": {"repo": "magiclabs/magic-admin-python", "file": "LICENSE.txt", "chunk_number": 1, "total_chunks": 2}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** magiclabs/magic-admin-python\n**Purpose:** A Python implementation of Magic Admin, a web-based administrative interface for managing user data and authentication.\n**Content:** Codebase containing API endpoints, views, and models for managing users, roles, permissions, and other related functionality.", "file_summary": "Here is a holistic summary:\n\nThe file 'LICENSE.txt' outlines the MIT License terms, allowing for free use, modification, and distribution of software, while disclaiming warranty or liability."}
{"code": "OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n", "explanation": "This is a licensing agreement, specifically a notice about copyright restrictions on software usage.", "metadata": {"repo": "magiclabs/magic-admin-python", "file": "LICENSE.txt", "chunk_number": 2, "total_chunks": 2}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** magiclabs/magic-admin-python\n**Purpose:** A Python implementation of Magic Admin, a web-based administrative interface for managing user data and authentication.\n**Content:** Codebase containing API endpoints, views, and models for managing users, roles, permissions, and other related functionality.", "file_summary": "Here is a holistic summary:\n\nThe file 'LICENSE.txt' outlines the MIT License terms, allowing for free use, modification, and distribution of software, while disclaiming warranty or liability."}
{"code": ".PHONY: production\nproduction: virtualenv_run install_prod_requirements\n\n.PHONY: development\ndevelopment: virtualenv_run install_prod_requirements install_dev_requirements install-hooks\n\n.PHONY: virtualenv_run\nvirtualenv_run:\n\tvirtualenv -p python3.6 virtualenv_run\n\tvirtualenv_run/bin/pip install --upgrade pip\n\n.PHONY: install_prod_requirements\ninstall_prod_requirements: virtualenv_run\n\tvirtualenv_run/bin/pip install -r requirements.txt\n\n.PHONY: install_dev_requirements\ninstall_dev_requirements: virtualenv_run\n\tvirtualenv_run/bin/pip install -r requirements-dev.txt\n\n.PHONY: install-hooks\ninstall-hooks: virtualenv_run install_dev_requirements\n\t./virtualenv_run/bin/pre-commit install -f --install-hooks\n\n.PHONY: test\ntest:\n\ttox\n\nclean-cache:\n\tfind . -name '__pycache__' | xargs rm -rf\n\tfind . -name '*.pyc' -delete\n\nclean-build:\n\trm -rf build/\n\trm -rf dist/\n\trm -rf sdist/\n\trm -rf *.egg\n\trm -rf *.eggs/\n\trm -rf *.egg-info\n\n.PHONY: clean\nclean: clean-cache clean-build\n\trm -rf virtualenv_run/\n\trm -rf .virtualenv_run_test/", "explanation": "**Purpose:** A Makefile for managing a Python project's dependencies, environment, and testing.\n\n**Functionality:**\n\n* Defines targets for:\n\t+ `production`: creates a production environment with required packages.\n\t+ `development`: creates a development environment with all requirements and hooks.\n\t+ `test`: runs tests using tox.\n* Manages virtual environments with `virtualenv_run` target.\n* Installs dependencies from `requirements.txt` and `requirements-dev.txt`.\n* Handles hook installation and cache/clean tasks.", "metadata": {"repo": "magiclabs/magic-admin-python", "file": "Makefile", "chunk_number": 1, "total_chunks": 2}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** magiclabs/magic-admin-python\n**Purpose:** A Python implementation of Magic Admin, a web-based administrative interface for managing user data and authentication.\n**Content:** Codebase containing API endpoints, views, and models for managing users, roles, permissions, and other related functionality.", "file_summary": "Here is a holistic summary of the file 'Makefile':\n\nA Makefile for managing a Python project's dependencies, environment, and testing, including targets for production, development, and test environments, virtual environment management, dependency installation, hook setup, and cache/clean tasks."}
{"code": "\trm -rf .pytest_cache/\n\trm -rf .tox/\n", "explanation": "**Purpose:** Clean up temporary cache directories.\n\n**Functionality:** Deletes two specific directories: `.pytest_cache/` and `.tox/`, which are used by testing and packaging tools to store cached results.", "metadata": {"repo": "magiclabs/magic-admin-python", "file": "Makefile", "chunk_number": 2, "total_chunks": 2}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** magiclabs/magic-admin-python\n**Purpose:** A Python implementation of Magic Admin, a web-based administrative interface for managing user data and authentication.\n**Content:** Codebase containing API endpoints, views, and models for managing users, roles, permissions, and other related functionality.", "file_summary": "Here is a holistic summary of the file 'Makefile':\n\nA Makefile for managing a Python project's dependencies, environment, and testing, including targets for production, development, and test environments, virtual environment management, dependency installation, hook setup, and cache/clean tasks."}
{"code": "# Magic Admin Python SDK\n\nThe Magic Admin Python SDK provides convenient ways for developers to interact with Magic API endpoints and an array of utilities to handle [DID Token](https://magic.link/docs/auth/introduction/decentralized-id).\n\n## Table of Contents\n\n* [Documentation](#documentation)\n* [Quick Start](#quick-start)\n* [Development](#development)\n* [Changelog](#changelog)\n* [License](#license)\n\n## Documentation\nSee the [Magic doc](https://magic.link/docs/auth/api-reference/server-side-sdks/python)!\n\n## Installation\nYou can directly install the SDK with:\n\npip:\n\n```\npip install magic-admin\n```\n\nconda:\n\n```\nconda install magic-admin\n```\n\n### Prerequisites\n\n- Python 3.6\n\n**Note**: This package has only been tested with `Python 3.6`. `Python 3.7` and `Python 3.8` have not been tested yet. We will get to it very soon. Support for `Python 2.7+` will not be actively worked on. If you are interested using this package with earlier versions of Python, please create a ticket and let us know :)\n\n## Quick Start", "explanation": "**Summary:**\n\nThe Magic Admin Python SDK is a library that allows developers to interact with Magic API endpoints and handle decentralized ID (DID) tokens. It provides a convenient way to install and use the SDK, and supports Python 3.6.", "metadata": {"repo": "magiclabs/magic-admin-python", "file": "README.md", "chunk_number": 1, "total_chunks": 4}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** magiclabs/magic-admin-python\n**Purpose:** A Python implementation of Magic Admin, a web-based administrative interface for managing user data and authentication.\n**Content:** Codebase containing API endpoints, views, and models for managing users, roles, permissions, and other related functionality.", "file_summary": "Here is a holistic summary of the file 'README.md':\n\nThe Magic Admin Python SDK allows developers to interact with the Magic API and handle decentralized ID tokens, while providing a convenient setup guide for using the API in Python. This README document serves as an onboarding resource for contributors to the SDK project, outlining steps for setting up development environments, running tests, and enforcing code styling standards, all while referencing external resources for further documentation and licensing information."}
{"code": "Before you start, you will need an API secret key. You can get one from the [Magic Dashboard](https://dashboard.magic.link/). Once you have the API secret key, you can instantiate a Magic object.\n\n```\nfrom magic_admin import Magic\n\nmagic = Magic(api_secret_key='<YOUR_API_SECRET_KEY>')\n\nmagic.Token.validate('DID_TOKEN')\n\n# Read the docs to learn more! \ud83d\ude80\n```\n\nOptionally if you would like, you can load the API secret key from the environment variable, `MAGIC_API_SECRET_KEY`.\n\n```\n# Set the env variable `MAGIC_API_SECRET_KEY`.\n\nmagic = Magic()\n```\n\n**Note**: The argument passed to the `Magic(...)` object takes precedence over the environment variable.\n\n### Configure Network Strategy\nThe `Magic` object also takes in `retries`, `timeout` and `backoff_factor` as optional arguments at the object instantiation time so you can override those values for your application setup.\n\n```\nmagic = Magic(retries=5, timeout=10, backoff_factor=0.03)\n```\n\n## Development", "explanation": "**Summary:**\n\nThis block provides a setup guide for using the Magic API in Python. It explains how to obtain an API secret key, instantiate a Magic object, validate tokens, and configure network strategy settings such as retries, timeout, and backoff factor.", "metadata": {"repo": "magiclabs/magic-admin-python", "file": "README.md", "chunk_number": 2, "total_chunks": 4}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** magiclabs/magic-admin-python\n**Purpose:** A Python implementation of Magic Admin, a web-based administrative interface for managing user data and authentication.\n**Content:** Codebase containing API endpoints, views, and models for managing users, roles, permissions, and other related functionality.", "file_summary": "Here is a holistic summary of the file 'README.md':\n\nThe Magic Admin Python SDK allows developers to interact with the Magic API and handle decentralized ID tokens, while providing a convenient setup guide for using the API in Python. This README document serves as an onboarding resource for contributors to the SDK project, outlining steps for setting up development environments, running tests, and enforcing code styling standards, all while referencing external resources for further documentation and licensing information."}
{"code": "We would love to have you contributing to this SDK. To get started, you can clone this repository and create a virtualenv.\n\n```\nmake development\n```\n\nThis will create a virtualenv for all the local development dependencies that the SDK will needs.\n\nOnce it is done, you can `source` the virtualenv. It makes your local development easier!\n\n```\nsource virtualenv_run/bin/activate\n```\n\nTo make sure your new code works with the existing SDK, run the test against the current supported Python versions.\n\n```\nmake test\n```\n\nTo clean up existing virtualenv, tox log and pytest cache, do a\n\n```\nmake clean\n```\n\nThis repository is installed with [pre-commit](https://pre-commit.com/). All of the pre-commit hooks are run automatically with every new commit. This is to keep the codebase styling and format consistent.\n\nYou can also run the pre-commit manually. You can find all the pre-commit hooks [here](.pre-commit-config.yaml).\n\n```\npre-commit run\n```\n\nPlease also see our [CONTRIBUTING](CONTRIBUTING.md) guide for other information.\n", "explanation": "Here is a concise summary:\n\n**Purpose:** Onboarding contributors to an SDK project.\n\n**Functionality:**\n\n1. Set up local development environment with `make development`.\n2. Run tests against supported Python versions with `make test`.\n3. Clean up virtualenv and caches with `make clean`.\n4. Run pre-commit hooks for code styling and formatting with `pre-commit run`.", "metadata": {"repo": "magiclabs/magic-admin-python", "file": "README.md", "chunk_number": 3, "total_chunks": 4}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** magiclabs/magic-admin-python\n**Purpose:** A Python implementation of Magic Admin, a web-based administrative interface for managing user data and authentication.\n**Content:** Codebase containing API endpoints, views, and models for managing users, roles, permissions, and other related functionality.", "file_summary": "Here is a holistic summary of the file 'README.md':\n\nThe Magic Admin Python SDK allows developers to interact with the Magic API and handle decentralized ID tokens, while providing a convenient setup guide for using the API in Python. This README document serves as an onboarding resource for contributors to the SDK project, outlining steps for setting up development environments, running tests, and enforcing code styling standards, all while referencing external resources for further documentation and licensing information."}
{"code": "## Changelog\nSee [Changelog](CHANGELOG.md)\n\n## License\nSee [License](LICENSE.txt)\n", "explanation": "**Summary:** This block is a notice section containing links to external resources: a changelog and license information, allowing users to access detailed documentation about the project's history and usage terms.", "metadata": {"repo": "magiclabs/magic-admin-python", "file": "README.md", "chunk_number": 4, "total_chunks": 4}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** magiclabs/magic-admin-python\n**Purpose:** A Python implementation of Magic Admin, a web-based administrative interface for managing user data and authentication.\n**Content:** Codebase containing API endpoints, views, and models for managing users, roles, permissions, and other related functionality.", "file_summary": "Here is a holistic summary of the file 'README.md':\n\nThe Magic Admin Python SDK allows developers to interact with the Magic API and handle decentralized ID tokens, while providing a convenient setup guide for using the API in Python. This README document serves as an onboarding resource for contributors to the SDK project, outlining steps for setting up development environments, running tests, and enforcing code styling standards, all while referencing external resources for further documentation and licensing information."}
{"code": "from magic_admin.magic import Magic\n\n\n# Magic API secret key.\napi_secret_key = None\n\n# A grace period time in second applied to the nbf field for token validation.\ndid_token_nbf_grace_period_s = 300\n", "explanation": "This block appears to be a configuration section of code, setting up an API secret key and validation parameters for a system likely using the Magic library.", "metadata": {"repo": "magiclabs/magic-admin-python", "file": "magic_admin/__init__.py", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** magiclabs/magic-admin-python\n**Purpose:** A Python implementation of Magic Admin, a web-based administrative interface for managing user data and authentication.\n**Content:** Codebase containing API endpoints, views, and models for managing users, roles, permissions, and other related functionality.", "file_summary": "Here is a concise and to-the-point summary:\n\n`magic_admin/__init__.py`: Configures API secret key and validation settings for a Magic-powered application."}
{"code": "base_url = 'https://api.magic.link'\n\napi_secret_api_key_missing_message = 'API secret key is missing. Please specify ' \\\n    'an API secret key when you instantiate the `Magic(api_secret_key=<KEY>)` ' \\\n    'object or use the environment variable, `MAGIC_API_SECRET_KEY`. You can ' \\\n    'get your API secret key from https://dashboard.magic.link. If you are having ' \\\n    'trouble, please don\\'t hesitate to reach out to us at support@magic.link'\n", "explanation": "Here is a concise summary:\n\n**Purpose:** Set API configuration constants.\n\n**Functionality:** Define the base URL for Magic API requests and an error message for missing API secret keys.", "metadata": {"repo": "magiclabs/magic-admin-python", "file": "magic_admin/config.py", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** magiclabs/magic-admin-python\n**Purpose:** A Python implementation of Magic Admin, a web-based administrative interface for managing user data and authentication.\n**Content:** Codebase containing API endpoints, views, and models for managing users, roles, permissions, and other related functionality.", "file_summary": "Here is a holistic summary of the file 'magic_admin/config.py':\n\n**Summary:** This file defines configuration constants for Magic API interactions, including the base URL for API requests and an error message for missing API secrets."}
{"code": "class MagicError(Exception):\n\n    def __init__(self, message=None):\n        super().__init__(message)\n        self._message = message\n\n    def __str__(self):\n        return self._message or '<empty message>'\n\n    def __repr__(self):\n        return '{error_class}(message={message!r})'.format(\n            error_class=self.__class__.__name__,\n            message=self._message,\n        )\n\n    def to_dict(self):\n        return {'message': str(self)}\n\n\nclass DIDTokenInvalid(MagicError):\n    pass\n\n\nclass DIDTokenMalformed(MagicError):\n    pass\n\n\nclass DIDTokenExpired(MagicError):\n    pass\n\n\nclass APIConnectionError(MagicError):\n    pass\n\n\nclass RequestError(MagicError):\n\n    def __init__(\n        self,\n        message=None,\n        http_status=None,\n        http_code=None,\n        http_resp_data=None,\n        http_message=None,\n        http_error_code=None,\n        http_request_params=None,\n        http_request_data=None,\n        http_method=None,\n    ):\n        super().__init__(message)\n        self.http_status = http_status", "explanation": "**Summary:**\n\nThis block defines a custom exception class hierarchy, inheriting from Python's built-in `Exception` class. It provides a way to create and handle specific error types, including:\n\n* Custom exceptions for DID token validation (e.g., invalid, malformed, expired)\n* An API connection error\n* A request error with additional HTTP-related details\n\nThe classes include methods to convert errors to dictionaries and provide human-readable representations of the errors.", "metadata": {"repo": "magiclabs/magic-admin-python", "file": "magic_admin/error.py", "chunk_number": 1, "total_chunks": 3}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** magiclabs/magic-admin-python\n**Purpose:** A Python implementation of Magic Admin, a web-based administrative interface for managing user data and authentication.\n**Content:** Codebase containing API endpoints, views, and models for managing users, roles, permissions, and other related functionality.", "file_summary": "Here is a concise summary:\n\n**magic_admin/error.py**\n\nThis file defines a custom exception hierarchy for handling specific error types, including token validation, API connection, and request-related errors. It provides classes for converting errors to dictionaries and providing human-readable representations."}
{"code": "        self.http_code = http_code\n        self.http_resp_data = http_resp_data\n        self.http_message = http_message\n        self.http_error_code = http_error_code\n        self.http_request_params = http_request_params\n        self.http_request_data = http_request_data\n        self.http_method = http_method\n\n    def __repr__(self):\n        return '{error_class}(message={message!r}, ' \\\n            'http_error_code={http_error_code}, ' \\\n            'http_code={http_code}).'.format(\n                error_class=self.__class__.__name__,\n                message=self._message or None,\n                http_error_code=self.http_error_code or None,\n                http_code=self.http_code or None,\n            )\n\n    def to_dict(self):\n        _dict = super().to_dict()\n        for attr in self.__dict__:\n            if attr.startswith('http_'):\n                _dict[attr] = self.__dict__[attr]\n\n        return _dict\n\n\nclass RateLimitingError(RequestError):\n    pass\n\n\nclass BadRequestError(RequestError):\n    pass\n\n", "explanation": "**Summary:**\n\nThis code block defines a class `RequestError` that represents an HTTP request error, with attributes for:\n\n* HTTP response code and message\n* Error code and details\n* Request method and parameters\n\nIt also defines two subclasses: `RateLimitingError` and `BadRequestError`, which inherit from `RequestError`. The class has methods to convert itself to a dictionary (`to_dict`) and provide a human-readable representation (`__repr__`).", "metadata": {"repo": "magiclabs/magic-admin-python", "file": "magic_admin/error.py", "chunk_number": 2, "total_chunks": 3}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** magiclabs/magic-admin-python\n**Purpose:** A Python implementation of Magic Admin, a web-based administrative interface for managing user data and authentication.\n**Content:** Codebase containing API endpoints, views, and models for managing users, roles, permissions, and other related functionality.", "file_summary": "Here is a concise summary:\n\n**magic_admin/error.py**\n\nThis file defines a custom exception hierarchy for handling specific error types, including token validation, API connection, and request-related errors. It provides classes for converting errors to dictionaries and providing human-readable representations."}
{"code": "class AuthenticationError(RequestError):\n    pass\n\n\nclass ForbiddenError(RequestError):\n    pass\n\n\nclass APIError(RequestError):\n    pass\n", "explanation": "This block defines three classes:\n\n* `AuthenticationError`: an error class for authentication-related issues.\n* `ForbiddenError`: an error class for forbidden access or actions.\n* `APIError`: a catch-all error class for general API errors.\n\nThese classes inherit from `RequestError`, suggesting they are used to handle specific types of request-level errors.", "metadata": {"repo": "magiclabs/magic-admin-python", "file": "magic_admin/error.py", "chunk_number": 3, "total_chunks": 3}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** magiclabs/magic-admin-python\n**Purpose:** A Python implementation of Magic Admin, a web-based administrative interface for managing user data and authentication.\n**Content:** Codebase containing API endpoints, views, and models for managing users, roles, permissions, and other related functionality.", "file_summary": "Here is a concise summary:\n\n**magic_admin/error.py**\n\nThis file defines a custom exception hierarchy for handling specific error types, including token validation, API connection, and request-related errors. It provides classes for converting errors to dictionaries and providing human-readable representations."}
{"code": "import json\nimport platform\n\nfrom requests import Session\nfrom requests.adapters import HTTPAdapter\nfrom requests.packages.urllib3.util.retry import Retry\n\nimport magic_admin\nfrom magic_admin import version\nfrom magic_admin.config import api_secret_api_key_missing_message\nfrom magic_admin.config import base_url\nfrom magic_admin.error import APIConnectionError\nfrom magic_admin.error import APIError\nfrom magic_admin.error import AuthenticationError\nfrom magic_admin.error import BadRequestError\nfrom magic_admin.error import ForbiddenError\nfrom magic_admin.error import RateLimitingError\nfrom magic_admin.response import MagicResponse\n\n\nclass RequestsClient:\n\n    def __init__(self, retries, timeout, backoff_factor):\n        self._retries = retries\n        self._timeout = timeout\n        self._backoff_factor = backoff_factor\n\n        self._setup_request_session()\n\n    @staticmethod\n    def _get_platform_info():\n        platform_info = {}\n\n        for attr, func in [\n            ['platform', platform.platform],", "explanation": "Here is a concise summary of the purpose and functionality of this block:\n\n**Class:** `RequestsClient`\n\n**Purpose:** A custom HTTP client class that manages retries, timeouts, and backoff factors for API requests.\n\n**Functionality:** Initializes a requests session with specified retry attempts, timeout, and backoff factor.", "metadata": {"repo": "magiclabs/magic-admin-python", "file": "magic_admin/http_client.py", "chunk_number": 1, "total_chunks": 5}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** magiclabs/magic-admin-python\n**Purpose:** A Python implementation of Magic Admin, a web-based administrative interface for managing user data and authentication.\n**Content:** Codebase containing API endpoints, views, and models for managing users, roles, permissions, and other related functionality.", "file_summary": "Here is a concise holistic summary of the file 'magic_admin/http_client.py':\n\nThis module provides a custom HTTP client class (`RequestsClient`) that manages API requests for Magic Admin. It collects platform information, sets up an HTTP session, and enables retrying, timeouts, and backoff factors. The module also returns request headers, handles API responses by parsing errors, and logs unexpected errors to raise informative exceptions."}
{"code": "            ['language_version', platform.python_version],\n            ['uname', platform.uname],\n        ]:\n            try:\n                val = str(func())\n            except Exception as e:\n                val = '<{}>'.format(str(e))\n\n            platform_info[attr] = val\n\n        return platform_info\n\n    def _setup_request_session(self):\n        \"\"\"Take advantage of the ``requets.Session``. If client is making several\n        requests to the same host, the underlying TCP connection will be reused,\n        which can result in a significant performance increase.\n        \"\"\"\n        self.http = Session()\n        self.http.mount(\n            base_url,\n            HTTPAdapter(\n                max_retries=Retry(\n                    total=self._retries,\n                    backoff_factor=self._backoff_factor,\n                ),\n            ),\n        )\n\n    def _get_request_headers(self):\n        user_agent = {\n            'language': 'python',\n            'sdk_version': version.VERSION,", "explanation": "Here is a concise summary:\n\n**Purpose:** This block of code collects platform information and sets up an HTTP session for making requests.\n\n**Functionality:**\n\n1. It collects platform info (e.g., language version, uname) and stores it in a dictionary.\n2. It attempts to execute functions that return values, catching any exceptions and replacing them with error messages.\n3. It sets up an HTTP session using the `requests` library, enabling reuse of TCP connections for performance gain.", "metadata": {"repo": "magiclabs/magic-admin-python", "file": "magic_admin/http_client.py", "chunk_number": 2, "total_chunks": 5}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** magiclabs/magic-admin-python\n**Purpose:** A Python implementation of Magic Admin, a web-based administrative interface for managing user data and authentication.\n**Content:** Codebase containing API endpoints, views, and models for managing users, roles, permissions, and other related functionality.", "file_summary": "Here is a concise holistic summary of the file 'magic_admin/http_client.py':\n\nThis module provides a custom HTTP client class (`RequestsClient`) that manages API requests for Magic Admin. It collects platform information, sets up an HTTP session, and enables retrying, timeouts, and backoff factors. The module also returns request headers, handles API responses by parsing errors, and logs unexpected errors to raise informative exceptions."}
{"code": "            'publisher': 'magic',\n            'http_lib': self.__class__.__name__,\n            **self._get_platform_info(),\n        }\n\n        if magic_admin.api_secret_key is None:\n            raise AuthenticationError(api_secret_api_key_missing_message)\n\n        return {\n            'X-Magic-Secret-Key': magic_admin.api_secret_key,\n            'User-Agent': json.dumps(user_agent),\n        }\n\n    def request(self, method, url, params=None, data=None):\n        try:\n            api_resp = self.http.request(\n                method,\n                url,\n                params=params,\n                # Requests auto-converts this to JSON and add content-type\n                # `application/json`.\n                json=data,\n                headers=self._get_request_headers(),\n                timeout=self._timeout,\n            )\n        except Exception as e:\n            return self._handle_request_error(e)\n\n        return self._parse_and_convert_to_api_response(\n            api_resp,\n            params,\n            data,", "explanation": "Here is a concise summary:\n\n**Block Purpose:** Returns HTTP request headers for API requests.\n\n**Functionality:**\n\n1. Checks if API secret key is set; raises error if not.\n2. Returns a dictionary with headers:\n\t* 'X-Magic-Secret-Key' with the API secret key value\n\t* 'User-Agent' with a user agent string in JSON format", "metadata": {"repo": "magiclabs/magic-admin-python", "file": "magic_admin/http_client.py", "chunk_number": 3, "total_chunks": 5}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** magiclabs/magic-admin-python\n**Purpose:** A Python implementation of Magic Admin, a web-based administrative interface for managing user data and authentication.\n**Content:** Codebase containing API endpoints, views, and models for managing users, roles, permissions, and other related functionality.", "file_summary": "Here is a concise holistic summary of the file 'magic_admin/http_client.py':\n\nThis module provides a custom HTTP client class (`RequestsClient`) that manages API requests for Magic Admin. It collects platform information, sets up an HTTP session, and enables retrying, timeouts, and backoff factors. The module also returns request headers, handles API responses by parsing errors, and logs unexpected errors to raise informative exceptions."}
{"code": "        )\n\n    def _parse_and_convert_to_api_response(self, resp, request_params, request_data):\n        status_code = resp.status_code\n\n        if 200 <= status_code < 300:\n            return MagicResponse(resp.content, resp.json(), status_code)\n\n        if status_code == 429:\n            error_class = RateLimitingError\n        elif status_code == 400:\n            error_class = BadRequestError\n        elif status_code == 401:\n            error_class = AuthenticationError\n        elif status_code == 403:\n            error_class = ForbiddenError\n        else:\n            error_class = APIError\n\n        resp_data = resp.json()\n        raise error_class(\n            http_status=resp_data.get('status'),\n            http_code=status_code,\n            http_resp_data=resp_data.get('data'),\n            http_message=resp_data.get('message'),\n            http_error_code=resp_data.get('error_code'),\n            http_request_params=request_params,\n            http_request_data=request_data,", "explanation": "**Function Purpose:**\n\nHandles HTTP responses from an API, parsing errors and converting them into a standardized API response.\n\n**Key Functionality:**\n\n1. Checks if the response status code is successful (200-299).\n2. Raises a custom error class based on the actual status code.\n3. Extracts relevant data from the API's JSON response to populate the error object.", "metadata": {"repo": "magiclabs/magic-admin-python", "file": "magic_admin/http_client.py", "chunk_number": 4, "total_chunks": 5}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** magiclabs/magic-admin-python\n**Purpose:** A Python implementation of Magic Admin, a web-based administrative interface for managing user data and authentication.\n**Content:** Codebase containing API endpoints, views, and models for managing users, roles, permissions, and other related functionality.", "file_summary": "Here is a concise holistic summary of the file 'magic_admin/http_client.py':\n\nThis module provides a custom HTTP client class (`RequestsClient`) that manages API requests for Magic Admin. It collects platform information, sets up an HTTP session, and enables retrying, timeouts, and backoff factors. The module also returns request headers, handles API responses by parsing errors, and logs unexpected errors to raise informative exceptions."}
{"code": "            http_method=resp.request.method,\n        )\n\n    def _handle_request_error(self, e):\n        message = 'Unexpected error thrown while communicating to Magic. ' \\\n            'Please reach out to support@magic.link if the problem continues. ' \\\n            'Error message: {error_class} was raised - {error_message}'.format(\n                error_class=e.__class__.__name__,\n                error_message=str(e) or 'no error message.',\n            )\n\n        raise APIConnectionError(message)\n", "explanation": "Here is a concise summary:\n\n**Purpose:** Handle unexpected errors in Magic API requests.\n\n**Functionality:** Logs an error message, raises an `APIConnectionError` exception with details about the error.", "metadata": {"repo": "magiclabs/magic-admin-python", "file": "magic_admin/http_client.py", "chunk_number": 5, "total_chunks": 5}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** magiclabs/magic-admin-python\n**Purpose:** A Python implementation of Magic Admin, a web-based administrative interface for managing user data and authentication.\n**Content:** Codebase containing API endpoints, views, and models for managing users, roles, permissions, and other related functionality.", "file_summary": "Here is a concise holistic summary of the file 'magic_admin/http_client.py':\n\nThis module provides a custom HTTP client class (`RequestsClient`) that manages API requests for Magic Admin. It collects platform information, sets up an HTTP session, and enables retrying, timeouts, and backoff factors. The module also returns request headers, handles API responses by parsing errors, and logs unexpected errors to raise informative exceptions."}
{"code": "import os\n\nimport magic_admin\nfrom magic_admin.config import api_secret_api_key_missing_message\nfrom magic_admin.config import base_url\nfrom magic_admin.error import AuthenticationError\nfrom magic_admin.http_client import RequestsClient\nfrom magic_admin.resources.base import ResourceComponent\n\n\nRETRIES = 3\nTIMEOUT = 10\nBACKOFF_FACTOR = 0.02\n\n\nclass Magic:\n\n    v1_client_info = base_url + '/v1/admin/client/get'\n\n    def __getattr__(self, attribute_name):\n        try:\n            return getattr(self._resource, attribute_name)\n        except AttributeError:\n            pass\n\n        return super().__getattribute__(attribute_name)\n\n    def __init__(\n        self,\n        api_secret_key=None,\n        client_id=None,\n        retries=RETRIES,\n        timeout=TIMEOUT,\n        backoff_factor=BACKOFF_FACTOR,\n    ):\n        self._resource = ResourceComponent()\n\n        self._resource.setup_request_client(retries, timeout, backoff_factor)\n        self._set_api_secret_key(api_secret_key)", "explanation": "**Summary**\n\nThis block is a Python class named `Magic` that provides an interface to interact with Magic Admin API. It handles API authentication and client configuration, allowing for dynamic attribute access and configurable retries and timeouts.", "metadata": {"repo": "magiclabs/magic-admin-python", "file": "magic_admin/magic.py", "chunk_number": 1, "total_chunks": 2}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** magiclabs/magic-admin-python\n**Purpose:** A Python implementation of Magic Admin, a web-based administrative interface for managing user data and authentication.\n**Content:** Codebase containing API endpoints, views, and models for managing users, roles, permissions, and other related functionality.", "file_summary": "Here is a concise and to the point summary of the file 'magic_admin/magic.py':\n\n**Summary**\n\nThe `Magic` class initializes settings for interacting with Magic Admin API, handling authentication, client configuration, and retries/timeout settings."}
{"code": "        init_requests_client = RequestsClient(retries, timeout, backoff_factor)\n        magic_admin.client_id = client_id or \\\n            init_requests_client.request('get', self.v1_client_info).data['client_id']\n\n    def _set_api_secret_key(self, api_secret_key):\n        magic_admin.api_secret_key = api_secret_key or os.environ.get(\n            'MAGIC_API_SECRET_KEY',\n        )\n\n        if magic_admin.api_secret_key is None:\n            raise AuthenticationError(api_secret_api_key_missing_message)\n", "explanation": "Here is a summary of the purpose and functionality:\n\n**Purpose:** Initialize client settings for Magic Admin API.\n\n**Functionality:**\n\n* Create an instance of `RequestsClient` with retry, timeout, and backoff settings.\n* Set Magic Admin client ID from either provided `client_id` or retrieved from the API using the created client instance.\n* Set Magic Admin API secret key from provided `api_secret_key` or environment variable `MAGIC_API_SECRET_KEY`.\n* Raise error if API secret key is missing.", "metadata": {"repo": "magiclabs/magic-admin-python", "file": "magic_admin/magic.py", "chunk_number": 2, "total_chunks": 2}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** magiclabs/magic-admin-python\n**Purpose:** A Python implementation of Magic Admin, a web-based administrative interface for managing user data and authentication.\n**Content:** Codebase containing API endpoints, views, and models for managing users, roles, permissions, and other related functionality.", "file_summary": "Here is a concise and to the point summary of the file 'magic_admin/magic.py':\n\n**Summary**\n\nThe `Magic` class initializes settings for interacting with Magic Admin API, handling authentication, client configuration, and retries/timeout settings."}
{"code": "from magic_admin.resources.token import Token\nfrom magic_admin.resources.user import User\nfrom magic_admin.resources.wallet import WalletType\n", "explanation": "This block imports three classes from the Magic Admin library: `Token`, `User`, and `WalletType`.", "metadata": {"repo": "magiclabs/magic-admin-python", "file": "magic_admin/resources/__init__.py", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** magiclabs/magic-admin-python\n**Purpose:** A Python implementation of Magic Admin, a web-based administrative interface for managing user data and authentication.\n**Content:** Codebase containing API endpoints, views, and models for managing users, roles, permissions, and other related functionality.", "file_summary": "Here is a concise holistic summary:\n\n**`__init__.py` Summary**\n\nThis file imports and exposes three key classes (`Token`, `User`, and `WalletType`) from the Magic Admin library, making them available for use within the `magic_admin` package."}
{"code": "from magic_admin.config import base_url\nfrom magic_admin.http_client import RequestsClient\n\n\nclass ResourceMeta(type):\n\n    def __init__(cls, name, bases, cls_dict):\n        if not hasattr(cls, '_registry'):\n            cls._registry = {}\n        else:\n            cls._registry[name] = cls()\n\n        super().__init__(name, bases, cls_dict)\n\n\nclass ResourceComponent(metaclass=ResourceMeta):\n\n    _base_url = base_url\n\n    def __getattr__(self, resource_name):\n        if resource_name in self._registry:\n            return self._registry[resource_name]\n        else:\n            raise AttributeError(\n                '{object_name} has no attribute \\'{resource_name}\\''.format(\n                    object_name=self.__class__.__name__,\n                    resource_name=resource_name,\n                ),\n            )\n\n    def setup_request_client(self, retries, timeout, backoff_factor):\n        _request_client = RequestsClient(retries, timeout, backoff_factor)\n\n        for resource in self._registry.values():", "explanation": "Here is a concise summary of the purpose and functionality of this block:\n\n**Purpose:** Dynamic class registration and attribute retrieval system.\n\n**Functionality:**\n\n* Registers classes with a registry upon initialization.\n* Allows dynamic attribute access through `getattr` method.\n* Provides a way to setup a request client for each registered resource.", "metadata": {"repo": "magiclabs/magic-admin-python", "file": "magic_admin/resources/base.py", "chunk_number": 1, "total_chunks": 2}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** magiclabs/magic-admin-python\n**Purpose:** A Python implementation of Magic Admin, a web-based administrative interface for managing user data and authentication.\n**Content:** Codebase containing API endpoints, views, and models for managing users, roles, permissions, and other related functionality.", "file_summary": "Here is a concise summary of the file 'magic_admin/resources/base.py':\n\n**Summary:** \nThis module provides dynamic class registration and attribute retrieval functionality, along with methods for setting up request clients and sending HTTP requests."}
{"code": "            setattr(resource, '_request_client', _request_client)\n\n    def _construct_url(self, url_path):\n        return '{base_url}{url_path}'.format(\n            base_url=self._base_url,\n            url_path=url_path,\n        )\n\n    def request(self, method, url_path, params=None, data=None):\n        return self._request_client.request(\n            method.lower(),\n            self._construct_url(url_path),\n            params=params,\n            data=data,\n        )\n", "explanation": "**Summary:**\n\nThis block sets a client for making requests on an object (`resource`), defines a helper function to construct URLs, and provides a `request` method to send HTTP requests with various parameters.", "metadata": {"repo": "magiclabs/magic-admin-python", "file": "magic_admin/resources/base.py", "chunk_number": 2, "total_chunks": 2}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** magiclabs/magic-admin-python\n**Purpose:** A Python implementation of Magic Admin, a web-based administrative interface for managing user data and authentication.\n**Content:** Codebase containing API endpoints, views, and models for managing users, roles, permissions, and other related functionality.", "file_summary": "Here is a concise summary of the file 'magic_admin/resources/base.py':\n\n**Summary:** \nThis module provides dynamic class registration and attribute retrieval functionality, along with methods for setting up request clients and sending HTTP requests."}
{"code": "import base64\nimport json\n\nfrom eth_account.messages import defunct_hash_message\nfrom web3.auto import w3\n\nimport magic_admin\nfrom magic_admin.error import DIDTokenExpired\nfrom magic_admin.error import DIDTokenInvalid\nfrom magic_admin.error import DIDTokenMalformed\nfrom magic_admin.resources.base import ResourceComponent\nfrom magic_admin.utils.did_token import parse_public_address_from_issuer\nfrom magic_admin.utils.time import apply_did_token_nbf_grace_period\nfrom magic_admin.utils.time import epoch_time_now\n\n\nEXPECTED_DID_TOKEN_CONTENT_LENGTH = 2\n\n\nclass Token(ResourceComponent):\n\n    required_fields = frozenset([\n        'iat',\n        'ext',\n        'nbf',\n        'iss',\n        'sub',\n        'aud',\n        'tid',\n    ])\n\n    @classmethod\n    def _check_required_fields(cls, claim):\n        \"\"\"\n        Args:\n            claim (dict): A dict that represents the claim portion of the DID\n                token.\n\n        Returns:\n            None.\n        \"\"\"\n        missing_fields = []\n        for field in cls.required_fields:", "explanation": "**Summary**\n\nThis block defines a `Token` class, which is a component of the Magic Admin system. It checks if a given DID (Decentralized Identifier) token has the required fields, verifying its validity and structure.", "metadata": {"repo": "magiclabs/magic-admin-python", "file": "magic_admin/resources/token.py", "chunk_number": 1, "total_chunks": 6}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** magiclabs/magic-admin-python\n**Purpose:** A Python implementation of Magic Admin, a web-based administrative interface for managing user data and authentication.\n**Content:** Codebase containing API endpoints, views, and models for managing users, roles, permissions, and other related functionality.", "file_summary": "Here's a holistic summary of the file 'magic_admin/resources/token.py':\n\nThis Python module validates and extracts information from a Decentralized Identifier (DID) token, ensuring its signature, expiration date, and Not Before (NBF) period are correct. It checks for required fields and raises errors if any conditions are not met, providing a robust way to verify the integrity of DID tokens."}
{"code": "            if field not in claim:\n                missing_fields.append(field)\n\n        if missing_fields:\n            raise DIDTokenMalformed(\n                message='DID token is missing required field(s): {}'.format(\n                    sorted(missing_fields),\n                ),\n            )\n\n    @classmethod\n    def decode(cls, did_token):\n        \"\"\"\n        Args:\n            did_token (base64.str): Base64 encoded string.\n\n        Raises:\n            DIDTokenMalformed: If token format is invalid.\n\n        Returns:\n            proof (str): A signed message.\n            claim (dict): A dict of unsigned message.\n        \"\"\"\n        try:\n            decoded_did_token = json.loads(\n                base64.urlsafe_b64decode(did_token).decode('utf-8'),\n            )\n        except Exception as e:\n            raise DIDTokenMalformed(\n                message='DID token is malformed. It has to be a based64 encoded '\n                'JSON serialized string. {err} ({msg}).'.format(", "explanation": "**Purpose:** Validate and parse a DID (Decentralized Identifier) token.\n\n**Functionality:**\n\n* Checks if required fields are present in the token.\n* Raises an error if any required field is missing.\n* Decodes a base64-encoded string into a JSON object.\n* Returns a signed message and unsigned claim data if decoding is successful.", "metadata": {"repo": "magiclabs/magic-admin-python", "file": "magic_admin/resources/token.py", "chunk_number": 2, "total_chunks": 6}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** magiclabs/magic-admin-python\n**Purpose:** A Python implementation of Magic Admin, a web-based administrative interface for managing user data and authentication.\n**Content:** Codebase containing API endpoints, views, and models for managing users, roles, permissions, and other related functionality.", "file_summary": "Here's a holistic summary of the file 'magic_admin/resources/token.py':\n\nThis Python module validates and extracts information from a Decentralized Identifier (DID) token, ensuring its signature, expiration date, and Not Before (NBF) period are correct. It checks for required fields and raises errors if any conditions are not met, providing a robust way to verify the integrity of DID tokens."}
{"code": "                    err=e.__class__.__name__,\n                    msg=str(e) or '<empty message>',\n                ),\n            )\n\n        if len(decoded_did_token) != EXPECTED_DID_TOKEN_CONTENT_LENGTH:\n            raise DIDTokenMalformed(\n                message='DID token is malformed. It has to have two parts '\n                '[proof, claim].',\n            )\n\n        proof = decoded_did_token[0]\n\n        try:\n            claim = json.loads(decoded_did_token[1])\n        except Exception as e:\n            raise DIDTokenMalformed(\n                message='DID token is malformed. Given claim should be a JSON '\n                'serialized string. {err} ({msg}).'.format(\n                    err=e.__class__.__name__,\n                    msg=str(e) or '<empty message>',\n                ),\n            )\n\n        cls._check_required_fields(claim)\n\n        return proof, claim\n\n    @classmethod\n    def get_issuer(cls, did_token):\n        \"\"\"\n        Args:\n            did_token (base64.str): Base64 encoded string.\n", "explanation": "**Summary:**\n\nThis block is a method that decodes and validates a DID token (a JSON Web Token), returning its proof and claim components. It checks for correct token structure, parses the claim as JSON, and verifies it against required fields. If any issues are found, it raises a `DIDTokenMalformed` exception.", "metadata": {"repo": "magiclabs/magic-admin-python", "file": "magic_admin/resources/token.py", "chunk_number": 3, "total_chunks": 6}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** magiclabs/magic-admin-python\n**Purpose:** A Python implementation of Magic Admin, a web-based administrative interface for managing user data and authentication.\n**Content:** Codebase containing API endpoints, views, and models for managing users, roles, permissions, and other related functionality.", "file_summary": "Here's a holistic summary of the file 'magic_admin/resources/token.py':\n\nThis Python module validates and extracts information from a Decentralized Identifier (DID) token, ensuring its signature, expiration date, and Not Before (NBF) period are correct. It checks for required fields and raises errors if any conditions are not met, providing a robust way to verify the integrity of DID tokens."}
{"code": "        Returns:\n            issuer (str): Issuer (the signer, the \"user\"). This field is represented\n                as a Decentralized Identifier populated with the user's Ethereum\n                public key.\n        \"\"\"\n        _, claim = cls.decode(did_token)\n\n        return claim['iss']\n\n    @classmethod\n    def get_public_address(cls, did_token):\n        \"\"\"\n        Args:\n            did_token (base64.str): Base64 encoded string.\n\n        Returns:\n            public_address (str): An Ethereum public key.\n        \"\"\"\n        return parse_public_address_from_issuer(cls.get_issuer(did_token))\n\n    @classmethod\n    def validate(cls, did_token):\n        \"\"\"\n        Args:\n            did_token (base64.str): Base64 encoded string.\n\n        Raises:\n            DIDTokenInvalid: If DID token fails the validation.\n            DIDTokenExpired: If DID token has expired.\n\n        Returns:\n            None.\n        \"\"\"\n        proof, claim = cls.decode(did_token)\n\n        if claim['ext'] is None:", "explanation": "Here is a summary of the purpose and functionality of this block:\n\n**Purpose:** Validates and extracts information from a Decentralized Identifier (DID) token.\n\n**Functionality:** Provides methods for:\n\n* Extracting the issuer of a DID token\n* Retrieving the public address associated with the issuer's Ethereum public key\n* Validating the expiration status of a DID token", "metadata": {"repo": "magiclabs/magic-admin-python", "file": "magic_admin/resources/token.py", "chunk_number": 4, "total_chunks": 6}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** magiclabs/magic-admin-python\n**Purpose:** A Python implementation of Magic Admin, a web-based administrative interface for managing user data and authentication.\n**Content:** Codebase containing API endpoints, views, and models for managing users, roles, permissions, and other related functionality.", "file_summary": "Here's a holistic summary of the file 'magic_admin/resources/token.py':\n\nThis Python module validates and extracts information from a Decentralized Identifier (DID) token, ensuring its signature, expiration date, and Not Before (NBF) period are correct. It checks for required fields and raises errors if any conditions are not met, providing a robust way to verify the integrity of DID tokens."}
{"code": "            raise DIDTokenInvalid(\n                message='Please check the \"ext\" field and regenerate a new token '\n                'with a suitable value.',\n            )\n\n        recovered_address = w3.eth.account.recoverHash(\n            defunct_hash_message(\n                text=json.dumps(claim, separators=(',', ':')),\n            ),\n            signature=proof,\n        )\n\n        if recovered_address != cls.get_public_address(did_token):\n            raise DIDTokenInvalid(\n                message='Signature mismatch between \"proof\" and \"claim\". Please '\n                'generate a new token with an intended issuer.',\n            )\n\n        current_time_in_s = epoch_time_now()\n\n        if current_time_in_s > claim['ext']:\n            raise DIDTokenExpired(\n                message='Given DID token has expired. Please generate a new one.',\n            )\n\n        if current_time_in_s < apply_did_token_nbf_grace_period(claim['nbf']):\n            raise DIDTokenInvalid(", "explanation": "Here is a concise summary of the block's purpose and functionality:\n\n**Purpose:** Validate a DIDs (Decentralized Identifiers) token.\n\n**Functionality:** Checks the token's signature, expiration date, and Not Before (NBF) period, raising errors if any conditions are not met.", "metadata": {"repo": "magiclabs/magic-admin-python", "file": "magic_admin/resources/token.py", "chunk_number": 5, "total_chunks": 6}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** magiclabs/magic-admin-python\n**Purpose:** A Python implementation of Magic Admin, a web-based administrative interface for managing user data and authentication.\n**Content:** Codebase containing API endpoints, views, and models for managing users, roles, permissions, and other related functionality.", "file_summary": "Here's a holistic summary of the file 'magic_admin/resources/token.py':\n\nThis Python module validates and extracts information from a Decentralized Identifier (DID) token, ensuring its signature, expiration date, and Not Before (NBF) period are correct. It checks for required fields and raises errors if any conditions are not met, providing a robust way to verify the integrity of DID tokens."}
{"code": "                message='Given DID token cannot be used at this time. Please '\n                'check the \"nbf\" field and regenerate a new token with a suitable '\n                'value.',\n            )\n\n        if claim['aud'] != magic_admin.client_id:\n            raise DIDTokenInvalid(\n                message='\"aud\" field does not match your client. Please check your secret key.',\n            )\n", "explanation": "Here is a concise summary:\n\n**Purpose:** Validate DID (Decentralized Identifier) token.\n\n**Functionality:** Check expiration date (`nbf` field), verify audience (`aud` field) matches client ID, and raise error if invalid.", "metadata": {"repo": "magiclabs/magic-admin-python", "file": "magic_admin/resources/token.py", "chunk_number": 6, "total_chunks": 6}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** magiclabs/magic-admin-python\n**Purpose:** A Python implementation of Magic Admin, a web-based administrative interface for managing user data and authentication.\n**Content:** Codebase containing API endpoints, views, and models for managing users, roles, permissions, and other related functionality.", "file_summary": "Here's a holistic summary of the file 'magic_admin/resources/token.py':\n\nThis Python module validates and extracts information from a Decentralized Identifier (DID) token, ensuring its signature, expiration date, and Not Before (NBF) period are correct. It checks for required fields and raises errors if any conditions are not met, providing a robust way to verify the integrity of DID tokens."}
{"code": "from magic_admin.resources.base import ResourceComponent\nfrom magic_admin.resources.wallet import WalletType\nfrom magic_admin.utils.did_token import construct_issuer_with_public_address\n\n\nclass User(ResourceComponent):\n\n    v1_user_info = '/v1/admin/auth/user/get'\n    v2_user_logout = '/v2/admin/auth/user/logout'\n\n    def get_metadata_by_issuer_and_wallet(self, issuer, wallet_type):\n        return self.request(\n            'get', self.v1_user_info, params={'issuer': issuer, 'wallet_type': wallet_type},\n        )\n\n    def get_metadata_by_public_address_and_wallet(self, public_address, wallet_type):\n        return self.get_metadata_by_issuer_and_wallet(\n            construct_issuer_with_public_address(public_address),\n            wallet_type,\n        )\n\n    def get_metadata_by_token_and_wallet(self, did_token, wallet_type):\n        return self.get_metadata_by_issuer_and_wallet(self.Token.get_issuer(did_token), wallet_type)\n\n    def get_metadata_by_issuer(self, issuer):", "explanation": "**Summary**\n\nThis block defines a `User` class that inherits from `ResourceComponent`. It provides methods for retrieving user metadata by various means:\n\n* By issuer and wallet type (`get_metadata_by_issuer_and_wallet`)\n* By public address and wallet type (`get_metadata_by_public_address_and_wallet`)\n* By DID token and wallet type (`get_metadata_by_token_and_wallet`)\n* By issuer only (`get_metadata_by_issuer`)\n\nThe methods use API requests to retrieve the metadata.", "metadata": {"repo": "magiclabs/magic-admin-python", "file": "magic_admin/resources/user.py", "chunk_number": 1, "total_chunks": 2}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** magiclabs/magic-admin-python\n**Purpose:** A Python implementation of Magic Admin, a web-based administrative interface for managing user data and authentication.\n**Content:** Codebase containing API endpoints, views, and models for managing users, roles, permissions, and other related functionality.", "file_summary": "Here is a concise and to-the-point summary:\n\nThe `magic_admin/resources/user.py` file defines a `User` class that provides methods for retrieving user metadata and logout functionality through API requests, allowing interaction with users based on their issuer, public address, or token."}
{"code": "        return self.get_metadata_by_issuer_and_wallet(issuer, WalletType.NONE)\n\n    def get_metadata_by_public_address(self, public_address):\n        return self.get_metadata_by_issuer(\n            construct_issuer_with_public_address(public_address),\n        )\n\n    def get_metadata_by_token(self, did_token):\n        return self.get_metadata_by_issuer(self.Token.get_issuer(did_token))\n\n    def logout_by_issuer(self, issuer):\n        return self.request('post', self.v2_user_logout, data={'issuer': issuer})\n\n    def logout_by_public_address(self, public_address):\n        return self.logout_by_issuer(\n            construct_issuer_with_public_address(public_address),\n        )\n\n    def logout_by_token(self, did_token):\n        return self.logout_by_issuer(self.Token.get_issuer(did_token))\n", "explanation": "**Summary:**\n\nThis block provides a set of methods for interacting with user metadata and logout functionality. It includes functions for retrieving metadata by issuer, public address, or token, as well as logging out by issuer, public address, or token.", "metadata": {"repo": "magiclabs/magic-admin-python", "file": "magic_admin/resources/user.py", "chunk_number": 2, "total_chunks": 2}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** magiclabs/magic-admin-python\n**Purpose:** A Python implementation of Magic Admin, a web-based administrative interface for managing user data and authentication.\n**Content:** Codebase containing API endpoints, views, and models for managing users, roles, permissions, and other related functionality.", "file_summary": "Here is a concise and to-the-point summary:\n\nThe `magic_admin/resources/user.py` file defines a `User` class that provides methods for retrieving user metadata and logout functionality through API requests, allowing interaction with users based on their issuer, public address, or token."}
{"code": "from enum import Enum\n\n\nclass WalletType(Enum):\n    ETH = 'ETH'\n    HARMONY = 'HARMONY'\n    ICON = 'ICON'\n    FLOW = 'FLOW'\n    TEZOS = 'TEZOS'\n    ZILLIQA = 'ZILLIQA'\n    POLKADOT = 'POLKADOT'\n    SOLANA = 'SOLANA'\n    AVAX = 'AVAX'\n    ALGOD = 'ALGOD'\n    COSMOS = 'COSMOS'\n    CELO = 'CELO'\n    BITCOIN = 'BITCOIN'\n    NEAR = 'NEAR'\n    HELIUM = 'HELIUM'\n    CONFLUX = 'CONFLUX'\n    TERRA = 'TERRA'\n    TAQUITO = 'TAQUITO'\n    ED = 'ED'\n    HEDERA = 'HEDERA'\n    NONE = 'NONE'\n    ANY = 'ANY'\n", "explanation": "This block defines a set of enum values (WalletType) that represent different types of cryptocurrency wallets.", "metadata": {"repo": "magiclabs/magic-admin-python", "file": "magic_admin/resources/wallet.py", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** magiclabs/magic-admin-python\n**Purpose:** A Python implementation of Magic Admin, a web-based administrative interface for managing user data and authentication.\n**Content:** Codebase containing API endpoints, views, and models for managing users, roles, permissions, and other related functionality.", "file_summary": "Here is a concise and to-the-point summary:\n\n`wallet.py`: Defines an enumeration `WalletType` representing various cryptocurrency wallet types, providing a standardized way to classify wallets in the Magic Admin application."}
{"code": "class MagicResponse:\n\n    def __init__(self, content, resp_data, status_code):\n        self.content = content\n        self.status_code = status_code\n        self.data = resp_data['data']\n", "explanation": "This block defines a class called `MagicResponse` that holds response data with attributes for content, data, and a status code.", "metadata": {"repo": "magiclabs/magic-admin-python", "file": "magic_admin/response.py", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** magiclabs/magic-admin-python\n**Purpose:** A Python implementation of Magic Admin, a web-based administrative interface for managing user data and authentication.\n**Content:** Codebase containing API endpoints, views, and models for managing users, roles, permissions, and other related functionality.", "file_summary": "Here is a concise and to-the-point holistic summary of the file 'magic_admin/response.py':\n\n\"The MagicResponse class stores and manages HTTP response data, including content, data, and a status code.\""}
{"code": "from magic_admin.error import DIDTokenMalformed\n\n\ndef parse_public_address_from_issuer(issuer):\n    \"\"\"\n    Args:\n        issuer (str): Issuer (the signer, the \"user\"). This field is represented\n            as a Decentralized Identifier populated with the user's Ethereum\n            public key.\n\n    Returns:\n        public_address (str): An Ethereum public key.\n    \"\"\"\n    try:\n        return issuer.split(':')[2]\n    except IndexError:\n        raise DIDTokenMalformed(\n            'Given issuer ({}) is malformed. Please make sure it follows the '\n            '`did:method-name:method-specific-id` format.'.format(issuer),\n        )\n\n\ndef construct_issuer_with_public_address(public_address):\n    return 'did:ethr:{}'.format(public_address)\n", "explanation": "**Purpose:** Parse and validate Ethereum public addresses from Decentralized Identifiers (DIDs).\n\n**Functionality:**\n\n1. **`parse_public_address_from_issuer`**: Extracts the Ethereum public address from a given DID string.\n2. **`construct_issuer_with_public_address`**: Creates a new DID string with an Ethereum public address.\n\nBoth functions handle errors and exceptions to ensure valid input and output.", "metadata": {"repo": "magiclabs/magic-admin-python", "file": "magic_admin/utils/did_token.py", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** magiclabs/magic-admin-python\n**Purpose:** A Python implementation of Magic Admin, a web-based administrative interface for managing user data and authentication.\n**Content:** Codebase containing API endpoints, views, and models for managing users, roles, permissions, and other related functionality.", "file_summary": "Here is a concise and holistic summary of the file 'magic_admin/utils/did_token.py':\n\nThis module provides utility functions for working with Ethereum public addresses in Decentralized Identifiers (DIDs). It allows for parsing an address from a DID string (`parse_public_address_from_issuer`) and constructing a new DID string with an address (`construct_issuer_with_public_address`)."}
{"code": "import re\n\nAUTHORIZATION_PATTERN = r'Bearer (?P<token>.+)'\n\n\ndef null_safe(value):\n    if value is None or value in ['null', 'none', 'None', '']:\n        return None\n\n    return value\n\n\ndef parse_authorization_header_value(header_value):\n    m = re.match(AUTHORIZATION_PATTERN, header_value)\n\n    if m is None:\n        return None\n\n    return null_safe(m.group('token'))\n", "explanation": "**Functionality Summary**\n\nThis block extracts and sanitizes a Bearer token from an authorization header.\n\nIt uses regular expressions to match the \"Bearer\" keyword followed by any characters (captured as the \"token\" group), then returns this value if valid, or None if missing or invalid.", "metadata": {"repo": "magiclabs/magic-admin-python", "file": "magic_admin/utils/http.py", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** magiclabs/magic-admin-python\n**Purpose:** A Python implementation of Magic Admin, a web-based administrative interface for managing user data and authentication.\n**Content:** Codebase containing API endpoints, views, and models for managing users, roles, permissions, and other related functionality.", "file_summary": "Here is a concise holistic summary of the file 'magic_admin/utils/http.py':\n\n**File Summary:**\n\nThis module provides a utility function to extract and validate Bearer tokens from HTTP authorization headers, returning the token value if valid or None otherwise."}
{"code": "import time\n\nimport magic_admin\n\n\ndef epoch_time_now():\n    return int(time.time())\n\n\ndef apply_did_token_nbf_grace_period(timestamp):\n    return timestamp - magic_admin.did_token_nbf_grace_period_s\n", "explanation": "**Purpose:** Utilities for handling timestamps.\n\n**Functionality:**\n\n1. `epoch_time_now()`: Returns the current time in seconds since epoch.\n2. `apply_did_token_nbf_grace_period(timestamp)`: Adjusts a timestamp by subtracting a grace period, likely used to handle token validity.", "metadata": {"repo": "magiclabs/magic-admin-python", "file": "magic_admin/utils/time.py", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** magiclabs/magic-admin-python\n**Purpose:** A Python implementation of Magic Admin, a web-based administrative interface for managing user data and authentication.\n**Content:** Codebase containing API endpoints, views, and models for managing users, roles, permissions, and other related functionality.", "file_summary": "Here is a concise summary of the file 'magic_admin/utils/time.py':\n\n**Summary:** A utility module for handling timestamps, providing functionality to obtain current time and apply token validity grace periods."}
{"code": "VERSION = '1.0.0'\n", "explanation": "This block defines a string variable `VERSION` with a value of `'1.0.0'`, likely used to identify the software's version number.", "metadata": {"repo": "magiclabs/magic-admin-python", "file": "magic_admin/version.py", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** magiclabs/magic-admin-python\n**Purpose:** A Python implementation of Magic Admin, a web-based administrative interface for managing user data and authentication.\n**Content:** Codebase containing API endpoints, views, and models for managing users, roles, permissions, and other related functionality.", "file_summary": "Here is a concise and holistic summary:\n\n**File: magic_admin/version.py**\n\nDefines a string variable `VERSION` set to `'1.0.0'`, representing the software's version number."}
{"code": "appnope==0.1.0\naspy.yaml==1.3.0\nattrs==19.3.0\nbackcall==0.1.0\ncfgv==3.1.0\ncoverage==4.5.1\ndecorator==4.4.2\nidentify==1.4.14\nimportlib-metadata==1.6.0\nimportlib-resources==1.4.0\nipdb==0.12.3\nipython==7.11.1\nipython-genutils==0.2.0\njedi==0.16.0\nmore-itertools==8.2.0\nnodeenv==1.3.5\npackaging==21.3\nparso==0.6.2\npexpect==4.8.0\npickleshare==0.7.5\npluggy==0.13.1\npre-commit==1.21.0\npretend==1.0.8\nprompt-toolkit==3.0.5\nptyprocess==0.6.0\npy==1.8.1\nPygments==2.7.4\npyparsing==2.4.7\npytest==5.4.1\npytest-cov==2.8.1\npytest-mock==3.6.1\nPyYAML==5.4.1\nsix==1.14.0\ntoml==0.10.0\ntox==3.0.0\ntraitlets==4.3.3\nvirtualenv==16.7.9\nwcwidth==0.1.9\nzipp==3.1.0\n", "explanation": "**Dependency List**\n\nThis is a list of Python packages and their versions, indicating dependencies for an application or project.", "metadata": {"repo": "magiclabs/magic-admin-python", "file": "requirements-dev.txt", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** magiclabs/magic-admin-python\n**Purpose:** A Python implementation of Magic Admin, a web-based administrative interface for managing user data and authentication.\n**Content:** Codebase containing API endpoints, views, and models for managing users, roles, permissions, and other related functionality.", "file_summary": "Here's a concise summary:\n\n`requirements-dev.txt`: A list of Python package dependencies for development purposes."}
{"code": "requests >= 2.22.0, <3\nweb3 >= 4.8.1, <6\n", "explanation": "This is a dependency specification in Markdown format.\n\n**Purpose:** Specify required versions of two Python libraries: `requests` and `web3`.\n\n**Functionality:** Enforce version constraints for these libraries when used in a project or environment.", "metadata": {"repo": "magiclabs/magic-admin-python", "file": "requirements.txt", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** magiclabs/magic-admin-python\n**Purpose:** A Python implementation of Magic Admin, a web-based administrative interface for managing user data and authentication.\n**Content:** Codebase containing API endpoints, views, and models for managing users, roles, permissions, and other related functionality.", "file_summary": "Here is a holistic summary of the file 'requirements.txt':\n\n**Summary:** Specifies exact versions of Python libraries, enforcing dependencies in projects or environments."}
{"code": "[bdist_wheel]\nuniversal = 1\n\n[metadata]\nlicense_file = LICENSE.txt\n", "explanation": "This block defines configuration settings for building a Python wheel package using `setuptools`. Specifically, it:\n\n* Sets the universal wheel flag to enabled (true)\n* References a license file named LICENSE.txt in the metadata.", "metadata": {"repo": "magiclabs/magic-admin-python", "file": "setup.cfg", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** magiclabs/magic-admin-python\n**Purpose:** A Python implementation of Magic Admin, a web-based administrative interface for managing user data and authentication.\n**Content:** Codebase containing API endpoints, views, and models for managing users, roles, permissions, and other related functionality.", "file_summary": "Here is a concise summary of the file 'setup.cfg':\n\n\"Configuration file for building a Python wheel package with `setuptools`, enabling universal wheels and referencing a LICENSE.txt file.\""}
{"code": "from os.path import dirname\nfrom os.path import join\n\nfrom setuptools import find_packages\nfrom setuptools import setup\n\nwith open('README.md') as fh:\n    long_description = fh.read()\n\n\ndef read_version():\n    version_contents = {}\n    with open(join(dirname(__file__), 'magic_admin', 'version.py')) as fh:\n        exec(fh.read(), version_contents)\n\n    return version_contents['VERSION']\n\n\ndef load_readme():\n    with open(join(dirname(__file__), 'README.md')) as fh:\n        long_description = fh.read()\n\n    return long_description\n\n\ndef load_requirements():\n    with open(join(dirname(__file__), 'requirements.txt')) as fh:\n        requirements = fh.readlines()\n\n    return requirements\n\n\nsetup(\n    name='magic-admin',\n    version=read_version(),\n    description='Magic Python Library',\n    long_description=load_readme(),\n    long_description_content_type='text/markdown',\n    author='Magic',\n    author_email='support@magic.link',\n    url='https://magic.link',\n    license='MIT',\n    keywords='magic python sdk',", "explanation": "This block is a Python script used for packaging a project using `setuptools`. It:\n\n1. Reads metadata from version.py, README.md, and requirements.txt files.\n2. Uses this data to set up the package with necessary information (name, description, author, etc.).\n\nThe purpose of this script is to automate the process of creating a package for distribution, likely through PyPI or other Python package repositories.", "metadata": {"repo": "magiclabs/magic-admin-python", "file": "setup.py", "chunk_number": 1, "total_chunks": 2}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** magiclabs/magic-admin-python\n**Purpose:** A Python implementation of Magic Admin, a web-based administrative interface for managing user data and authentication.\n**Content:** Codebase containing API endpoints, views, and models for managing users, roles, permissions, and other related functionality.", "file_summary": "Here is a concise and to-the-point holistic summary of the file 'setup.py':\n\n**Setup.py**: Automates package creation for distribution, specifying metadata (name, description, author) and dependencies via `setuptools`, with compatibility from Python 3.6+."}
{"code": "    packages=find_packages(\n        exclude=[\n            'tests',\n            'tests.*',\n            'testing',\n            'testing.*',\n            'virtualenv_run',\n            'virtualenv_run.*',\n        ],\n    ),\n    zip_safe=False,\n    install_requires=load_requirements(),\n    python_requires='>=3.6',\n    project_urls={\n        'Website': 'https://magic.link',\n    },\n    classifiers=[\n        'Development Status :: 3 - Alpha',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 3.6',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: MIT License',\n        'Operating System :: OS Independent',\n    ],\n)\n", "explanation": "**Summary:**\n\nThis block specifies metadata for a Python package, including dependencies, compatibility, and licensing information.\n\n**Key Features:**\n\n* Package name discovery\n* Exclusion of certain directories (e.g., tests)\n* Dependency management via `install_requires`\n* Compatibility with Python 3.6+\n* Project URLs and classifiers for discoverability", "metadata": {"repo": "magiclabs/magic-admin-python", "file": "setup.py", "chunk_number": 2, "total_chunks": 2}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** magiclabs/magic-admin-python\n**Purpose:** A Python implementation of Magic Admin, a web-based administrative interface for managing user data and authentication.\n**Content:** Codebase containing API endpoints, views, and models for managing users, roles, permissions, and other related functionality.", "file_summary": "Here is a concise and to-the-point holistic summary of the file 'setup.py':\n\n**Setup.py**: Automates package creation for distribution, specifying metadata (name, description, author) and dependencies via `setuptools`, with compatibility from Python 3.6+."}
{"code": "public_address = '0x4B73C58370AEfcEf86A6021afCDe5673511376B2'\n\nissuer = 'did:ethr:0x4B73C58370AEfcEf86A6021afCDe5673511376B2'\n\nproof = '0xaa50be70729ca705ba7c8d00185c6f2da479d0fcde5311ca4ce5b1ba715c8a721c5' \\\n    'f1948434f96ff577d7b2b6ad82d3dd5a2457fe6998b137ed9bc08d36e549c1b'\n\nclaim = {\n    'iat': 1586764270,\n    'ext': 11173528500,\n    'iss': 'did:ethr:0x4B73C58370AEfcEf86A6021afCDe5673511376B2',\n    'sub': 'NjrA53ScQ8IV80NJnx4t3Shi9-kFfF5qavD2Vr0d1dc=',\n    'aud': 'did:magic:731848cc-084e-41ff-bbdf-7f103817ea6b',\n    'nbf': 1586764270,\n    'tid': 'ebcc880a-ffc9-4375-84ae-154ccd5c746d',\n    'add': '0x84d6839268a1af9111fdeccd396f303805dca2bc03450b7eb116e2f5fc8c5a722'\n    'd1fb9af233aa73c5c170839ce5ad8141b9b4643380982da4bfbb0b11284988f1b',\n}\n\nfuture_did_token = 'WyIweGFhNTBiZTcwNzI5Y2E3MDViYTdjOGQwMDE4NWM2ZjJkYTQ3OWQwZm' \\\n    'NkZTUzMTFjYTRjZTViMWJhNzE1YzhhNzIxYzVmMTk0ODQzNGY5NmZmNTc3ZDdiMmI2YWQ4MmQ' \\\n    'zZGQ1YTI0NTdmZTY5OThiMTM3ZWQ5YmMwOGQzNmU1NDljMWIiLCJ7XCJpYXRcIjoxNTg2NzY0' \\", "explanation": "This block appears to be a JSON object containing various cryptographic and identity-related data, including:\n\n* Public addresses and DIDs (Decentralized Identifiers)\n* A proof value\n* A claim dictionary with timestamps, identifiers, and other metadata.\n\nIn essence, this code seems to be handling digital identities and claims on the Ethereum blockchain.", "metadata": {"repo": "magiclabs/magic-admin-python", "file": "testing/data/did_token.py", "chunk_number": 1, "total_chunks": 2}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** magiclabs/magic-admin-python\n**Purpose:** A Python implementation of Magic Admin, a web-based administrative interface for managing user data and authentication.\n**Content:** Codebase containing API endpoints, views, and models for managing users, roles, permissions, and other related functionality.", "file_summary": "Here is a concise summary of the file 'testing/data/did_token.py':\n\nThis file contains a JSON object representing a digital identity, including public addresses, DID information, proof value, and claim metadata, likely related to authentication on the Ethereum blockchain."}
{"code": "    'MjcwLFwiZXh0XCI6MTExNzM1Mjg1MDAsXCJpc3NcIjpcImRpZDpldGhyOjB4NEI3M0M1ODM3M' \\\n    'EFFZmNFZjg2QTYwMjFhZkNEZTU2NzM1MTEzNzZCMlwiLFwic3ViXCI6XCJOanJBNTNTY1E4SV' \\\n    'Y4ME5Kbng0dDNTaGk5LWtGZkY1cWF2RDJWcjBkMWRjPVwiLFwiYXVkXCI6XCJkaWQ6bWFnaWM' \\\n    '6NzMxODQ4Y2MtMDg0ZS00MWZmLWJiZGYtN2YxMDM4MTdlYTZiXCIsXCJuYmZcIjoxNTg2NzY0' \\\n    'MjcwLFwidGlkXCI6XCJlYmNjODgwYS1mZmM5LTQzNzUtODRhZS0xNTRjY2Q1Yzc0NmRcIixcI' \\\n    'mFkZFwiOlwiMHg4NGQ2ODM5MjY4YTFhZjkxMTFmZGVjY2QzOTZmMzAzODA1ZGNhMmJjMDM0NT' \\\n    'BiN2ViMTE2ZTJmNWZjOGM1YTcyMmQxZmI5YWYyMzNhYTczYzVjMTcwODM5Y2U1YWQ4MTQxYjl' \\\n    'iNDY0MzM4MDk4MmRhNGJmYmIwYjExMjg0OTg4ZjFiXCJ9Il0='\n", "explanation": "This appears to be a base64-encoded string, likely containing a JSON object with authentication credentials (client ID, client secret, and other metadata).", "metadata": {"repo": "magiclabs/magic-admin-python", "file": "testing/data/did_token.py", "chunk_number": 2, "total_chunks": 2}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** magiclabs/magic-admin-python\n**Purpose:** A Python implementation of Magic Admin, a web-based administrative interface for managing user data and authentication.\n**Content:** Codebase containing API endpoints, views, and models for managing users, roles, permissions, and other related functionality.", "file_summary": "Here is a concise summary of the file 'testing/data/did_token.py':\n\nThis file contains a JSON object representing a digital identity, including public addresses, DID information, proof value, and claim metadata, likely related to authentication on the Ethereum blockchain."}
{"code": "from unittest import mock\n\nimport pytest\n\nimport magic_admin\nfrom magic_admin.error import AuthenticationError\nfrom magic_admin.magic import Magic\nfrom magic_admin.resources.base import ResourceComponent\n\n\nclass TestMagic:\n\n    api_secret_key = 'troll_goat'\n\n    @pytest.fixture(autouse=True)\n    def setup(self):\n        self.mocked_rc = mock.Mock(\n            request=mock.Mock(\n                return_value=mock.Mock(\n                    data={\n                        'client_id': '1234',\n                    },\n                ),\n            ),\n        )\n        # self.mocked_rc.request=\n        with mock.patch('magic_admin.magic.RequestsClient', return_value=self.mocked_rc):\n            yield\n\n    def test_init_with_secret_key(self):\n        Magic(api_secret_key=self.api_secret_key)\n\n        assert magic_admin.api_secret_key == self.api_secret_key\n\n    @pytest.mark.parametrize(\n        'resource_name',\n        ResourceComponent._registry.keys(),\n    )", "explanation": "**Summary:**\n\nThis block is a unit test for the `Magic` class from the `magic_admin` module. It uses pytest's mocking feature to isolate dependencies, and tests that the `Magic` instance can be initialized with an API secret key. \n\nThe purpose of this code is to verify the correct behavior of the `Magic` class when initialized with a valid API secret key.", "metadata": {"repo": "magiclabs/magic-admin-python", "file": "tests/integration/magic_test.py", "chunk_number": 1, "total_chunks": 2}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** magiclabs/magic-admin-python\n**Purpose:** A Python implementation of Magic Admin, a web-based administrative interface for managing user data and authentication.\n**Content:** Codebase containing API endpoints, views, and models for managing users, roles, permissions, and other related functionality.", "file_summary": "Here is a concise holistic summary of the file 'tests/integration/magic_test.py':\n\n**Magic Class Integration Test**\n\nThis test suite verifies the correct behavior of the `Magic` class, ensuring it can be initialized with an API secret key and correctly interacts with resources, raising errors as expected for unknown attributes or missing authentication."}
{"code": "    def test_init_with_request_client_set_on_resources(self, resource_name):\n        magic = Magic(api_secret_key=self.api_secret_key)\n\n        assert getattr(magic, resource_name)._request_client\n\n    @pytest.mark.parametrize(\n        'resource_name',\n        ResourceComponent._registry.keys(),\n    )\n    def test_gets_resource(self, resource_name):\n        magic = Magic(api_secret_key=self.api_secret_key)\n\n        assert getattr(magic, resource_name)\n\n    def test_raises_attr_error(self):\n        with pytest.raises(AttributeError):\n            Magic(api_secret_key=self.api_secret_key).troll_goat\n\n    def test_raises_authentication_error_if_secret_key_missing(self):\n        with pytest.raises(AuthenticationError):\n            Magic()\n", "explanation": "Here is a concise summary of the purpose and functionality of this block:\n\n**Test suite for Magic class**\n\nThis code tests the functionality of the `Magic` class, specifically its ability to:\n\n* Initialize resources with a request client set\n* Retrieve registered resources\n* Raise errors when accessing unknown attributes or missing authentication credentials", "metadata": {"repo": "magiclabs/magic-admin-python", "file": "tests/integration/magic_test.py", "chunk_number": 2, "total_chunks": 2}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** magiclabs/magic-admin-python\n**Purpose:** A Python implementation of Magic Admin, a web-based administrative interface for managing user data and authentication.\n**Content:** Codebase containing API endpoints, views, and models for managing users, roles, permissions, and other related functionality.", "file_summary": "Here is a concise holistic summary of the file 'tests/integration/magic_test.py':\n\n**Magic Class Integration Test**\n\nThis test suite verifies the correct behavior of the `Magic` class, ensuring it can be initialized with an API secret key and correctly interacts with resources, raising errors as expected for unknown attributes or missing authentication."}
{"code": "from unittest import mock\n\nfrom pretend import stub\n\nfrom magic_admin.resources.token import Token\nfrom testing.data.did_token import claim\nfrom testing.data.did_token import future_did_token\nfrom testing.data.did_token import issuer\nfrom testing.data.did_token import proof\nfrom testing.data.did_token import public_address\n\n\nclass TestToken:\n\n    def test_check_required_fields(self):\n        Token._check_required_fields(claim)\n\n    def test_decode(self):\n        assert Token.decode(future_did_token) == (proof, claim)\n\n    def test_get_issuer(self):\n        assert Token.get_issuer(future_did_token) == issuer\n\n    def test_get_public_address(self):\n        assert Token.get_public_address(future_did_token) == public_address\n\n    def test_validate(self):\n        with mock.patch(\n            'magic_admin.resources.token.magic_admin',\n            new=stub(client_id='did:magic:731848cc-084e-41ff-bbdf-7f103817ea6b'),\n        ):\n            Token.validate(future_did_token)\n", "explanation": "**Summary**\n\nThis block is a unit test suite for the `Token` class, using the `unittest` and `pretend` libraries. It tests various methods of the `Token` class, including validation, decoding, and data retrieval from a DID (Decentralized Identifier) token.", "metadata": {"repo": "magiclabs/magic-admin-python", "file": "tests/integration/resources/token_test.py", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** magiclabs/magic-admin-python\n**Purpose:** A Python implementation of Magic Admin, a web-based administrative interface for managing user data and authentication.\n**Content:** Codebase containing API endpoints, views, and models for managing users, roles, permissions, and other related functionality.", "file_summary": "Here is a concise summary:\n\n**token_test.py**\n\nUnit test suite for the `Token` class, testing validation, decoding, and DID data retrieval methods using `unittest` and `pretend`."}
{"code": "from magic_admin.config import base_url\n\n\ndef test_base_url():\n    assert base_url == 'https://api.magic.link'\n", "explanation": "**Summary:**\n\nThis is a unit test function that checks if a specific URL ('https://api.magic.link') is correctly imported from a configuration file as `base_url`.", "metadata": {"repo": "magiclabs/magic-admin-python", "file": "tests/unit/config_test.py", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** magiclabs/magic-admin-python\n**Purpose:** A Python implementation of Magic Admin, a web-based administrative interface for managing user data and authentication.\n**Content:** Codebase containing API endpoints, views, and models for managing users, roles, permissions, and other related functionality.", "file_summary": "Here's a concise summary of the file 'tests/unit/config_test.py':\n\n**Unit test for base URL configuration**\n\nThis module tests that the base URL (`https://api.magic.link`) is properly imported from a configuration file."}
{"code": "from magic_admin.error import APIConnectionError\nfrom magic_admin.error import APIError\nfrom magic_admin.error import AuthenticationError\nfrom magic_admin.error import BadRequestError\nfrom magic_admin.error import DIDTokenInvalid\nfrom magic_admin.error import ForbiddenError\nfrom magic_admin.error import MagicError\nfrom magic_admin.error import RateLimitingError\nfrom magic_admin.error import RequestError\n\n\nclass MagicErrorBase:\n\n    error_class = None\n\n    message = 'Magic is amazing'\n\n    def test_str(self):\n        assert str(self.error_class(self.message)) == self.message\n\n    def test_str_with_empty_message(self):\n        assert str(self.error_class()) == '<empty message>'\n\n    def test_repr(self):\n        assert repr(self.error_class(self.message)) == '{}(message=\\'Magic is ' \\\n            'amazing\\')'.format(self.error_class.__name__)\n\n    def test_to_dict(self):\n        assert self.error_class(self.message).to_dict() == {'message': str(self.message)}\n\n\nclass TestMagicError(MagicErrorBase):\n", "explanation": "**Summary**\n\nThis block defines a set of custom error classes (`APIConnectionError`, `APIError`, etc.) from the `magic_admin.error` module, along with a base class `MagicErrorBase` that provides common functionality for testing these errors (e.g., string representation, dictionary conversion).", "metadata": {"repo": "magiclabs/magic-admin-python", "file": "tests/unit/error_test.py", "chunk_number": 1, "total_chunks": 4}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** magiclabs/magic-admin-python\n**Purpose:** A Python implementation of Magic Admin, a web-based administrative interface for managing user data and authentication.\n**Content:** Codebase containing API endpoints, views, and models for managing users, roles, permissions, and other related functionality.", "file_summary": "Here is a concise holistic summary of the file 'tests/unit/error_test.py':\n\n**Summary**\n\nThis file defines custom error classes (`APIConnectionError`, etc.) for Magic errors and provides common functionality for testing these errors through a base class `MagicErrorBase`. The code includes string formatting and dictionary conversion capabilities."}
{"code": "    error_class = MagicError\n\n\nclass TestDIDTokenInvalid(MagicErrorBase):\n\n    error_class = DIDTokenInvalid\n\n\nclass TestAPIConnectionError(MagicErrorBase):\n\n    error_class = APIConnectionError\n\n\nclass RequestErrorBase:\n\n    error_class = None\n\n    message = 'Magic is amazing'\n    http_status = 'success'\n    http_code = 200\n    http_resp_data = {'magic': 'link'}\n    http_message = 'Troll goat is cute'\n    http_error_code = 'TROLL_GOAT_IS_CUTE'\n    http_request_params = 'a=b&b=c'\n    http_request_data = {'magic': 'link'}\n    http_method = 'post'\n\n    def test_str(self):\n        assert str(self.error_class(self.message)) == self.message\n\n    def test_str_with_empty_message(self):\n        assert str(self.error_class()) == '<empty message>'\n\n    def test_repr(self):\n        assert repr(\n            self.error_class(\n                self.message,\n                http_error_code=self.http_error_code,\n                http_code=self.http_code,\n            ),", "explanation": "**Purpose:** Define error classes for Magic errors.\n\n**Functionality:**\n\n* Three custom error classes are defined:\n\t+ `DIDTokenInvalid`\n\t+ `APIConnectionError`\n\t+ `RequestErrorBase` (a base class with default values)\n* Each error class inherits from `MagicErrorBase`\n* `RequestErrorBase` has attributes for HTTP-related data and methods to test string and representation formatting.", "metadata": {"repo": "magiclabs/magic-admin-python", "file": "tests/unit/error_test.py", "chunk_number": 2, "total_chunks": 4}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** magiclabs/magic-admin-python\n**Purpose:** A Python implementation of Magic Admin, a web-based administrative interface for managing user data and authentication.\n**Content:** Codebase containing API endpoints, views, and models for managing users, roles, permissions, and other related functionality.", "file_summary": "Here is a concise holistic summary of the file 'tests/unit/error_test.py':\n\n**Summary**\n\nThis file defines custom error classes (`APIConnectionError`, etc.) for Magic errors and provides common functionality for testing these errors through a base class `MagicErrorBase`. The code includes string formatting and dictionary conversion capabilities."}
{"code": "        ) == '{}(message=\\'Magic is amazing\\', http_error_code={}, http_code={}).'.format(\n            self.error_class.__name__,\n            self.http_error_code,\n            self.http_code,\n        )\n\n    def test_to_dict(self):\n        assert self.error_class(\n            self.message,\n            http_error_code=self.http_error_code,\n            http_code=self.http_code,\n            http_status=self.http_status,\n            http_resp_data=self.http_resp_data,\n            http_message=self.http_message,\n            http_request_params=self.http_request_params,\n            http_request_data=self.http_request_data,\n            http_method=self.http_method,\n        ).to_dict() == {\n            'message': self.message,\n            'http_error_code': self.http_error_code,\n            'http_code': self.http_code,\n            'http_status': self.http_status,\n            'http_resp_data': self.http_resp_data,\n            'http_message': self.http_message,", "explanation": "Here is a concise summary of the block:\n\n**Purpose:** String formatting and dictionary conversion functionality.\n\n**Functionality:**\n\n1. Formats a string using `self.error_class` and error codes.\n2. Converts an object to a dictionary (`to_dict()` method).", "metadata": {"repo": "magiclabs/magic-admin-python", "file": "tests/unit/error_test.py", "chunk_number": 3, "total_chunks": 4}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** magiclabs/magic-admin-python\n**Purpose:** A Python implementation of Magic Admin, a web-based administrative interface for managing user data and authentication.\n**Content:** Codebase containing API endpoints, views, and models for managing users, roles, permissions, and other related functionality.", "file_summary": "Here is a concise holistic summary of the file 'tests/unit/error_test.py':\n\n**Summary**\n\nThis file defines custom error classes (`APIConnectionError`, etc.) for Magic errors and provides common functionality for testing these errors through a base class `MagicErrorBase`. The code includes string formatting and dictionary conversion capabilities."}
{"code": "            'http_request_params': self.http_request_params,\n            'http_request_data': self.http_request_data,\n            'http_method': self.http_method,\n        }\n\n\nclass TestRequestError(RequestErrorBase):\n\n    error_class = RequestError\n\n\nclass TestRateLimitingError(RequestErrorBase):\n\n    error_class = RateLimitingError\n\n\nclass TestBadRequestError(RequestErrorBase):\n\n    error_class = BadRequestError\n\n\nclass TestAuthenticationError(RequestErrorBase):\n\n    error_class = AuthenticationError\n\n\nclass TestForbiddenError(RequestErrorBase):\n\n    error_class = ForbiddenError\n\n\nclass TestAPIError(RequestErrorBase):\n\n    error_class = APIError\n", "explanation": "**Summary**\n\nThis block defines a series of classes that inherit from `RequestErrorBase` and override the `error_class` attribute with specific error types (e.g. RateLimitingError, BadRequestError).", "metadata": {"repo": "magiclabs/magic-admin-python", "file": "tests/unit/error_test.py", "chunk_number": 4, "total_chunks": 4}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** magiclabs/magic-admin-python\n**Purpose:** A Python implementation of Magic Admin, a web-based administrative interface for managing user data and authentication.\n**Content:** Codebase containing API endpoints, views, and models for managing users, roles, permissions, and other related functionality.", "file_summary": "Here is a concise holistic summary of the file 'tests/unit/error_test.py':\n\n**Summary**\n\nThis file defines custom error classes (`APIConnectionError`, etc.) for Magic errors and provides common functionality for testing these errors through a base class `MagicErrorBase`. The code includes string formatting and dictionary conversion capabilities."}
{"code": "import json\nfrom collections import namedtuple\nfrom unittest import mock\n\nimport pytest\n\nimport magic_admin\nfrom magic_admin import version\nfrom magic_admin.config import base_url\nfrom magic_admin.error import APIConnectionError\nfrom magic_admin.error import APIError\nfrom magic_admin.error import AuthenticationError\nfrom magic_admin.error import BadRequestError\nfrom magic_admin.error import ForbiddenError\nfrom magic_admin.error import RateLimitingError\nfrom magic_admin.http_client import RequestsClient\nfrom magic_admin.response import MagicResponse\n\n\nclass TestRequestsClient:\n\n    retries = 1\n    timeout = 2\n    backoff_factor = 3\n\n    def test_init(self):\n        with mock.patch(\n            'magic_admin.http_client.RequestsClient._setup_request_session',\n        ) as mock_setup_request_session:\n            rc = RequestsClient(self.retries, self.timeout, self.backoff_factor)\n\n        assert rc._retries == self.retries\n        assert rc._timeout == self.timeout\n        assert rc._backoff_factor == self.backoff_factor\n", "explanation": "Here is a concise summary:\n\n**This block:** Tests the functionality of `RequestsClient` class from `magic_admin.http_client`. \n\n**Purpose:** Verifies initialization of `RequestsClient` instance with custom retry, timeout, and backoff settings.\n\n**Functionality:** Checks that attributes are correctly set when instantiating `RequestsClient`.", "metadata": {"repo": "magiclabs/magic-admin-python", "file": "tests/unit/http_client_test.py", "chunk_number": 1, "total_chunks": 10}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** magiclabs/magic-admin-python\n**Purpose:** A Python implementation of Magic Admin, a web-based administrative interface for managing user data and authentication.\n**Content:** Codebase containing API endpoints, views, and models for managing users, roles, permissions, and other related functionality.", "file_summary": "Here is a concise summary of the file 'tests/unit/http_client_test.py':\n\nThis test suite verifies the functionality of the `RequestsClient` class from `magic_admin.http_client`. It tests initialization, method behavior, error handling, and response parsing, ensuring correct configuration and expected results in various scenarios."}
{"code": "        mock_setup_request_session.assert_called_once_with()\n\n    def test_get_platform_info(self):\n        platform_name = 'troll_goat'\n        py_version = '9.0.0.0'\n        error_msg = 'error_msg'\n\n        platform = mock.Mock(\n            platform=mock.Mock(return_value=platform_name),\n            python_version=mock.Mock(return_value=py_version),\n            uname=mock.Mock(side_effect=Exception(error_msg)),\n        )\n\n        with mock.patch(\n            'magic_admin.http_client.platform',\n            platform,\n        ):\n            assert RequestsClient._get_platform_info() == {\n                'platform': platform_name,\n                'language_version': py_version,\n                'uname': '<{}>'.format(error_msg),\n            }\n\n        platform.platform.assert_called_once_with()\n        platform.python_version.assert_called_once_with()\n        platform.uname.assert_called_once_with()\n\n    def test_setup_request_session(self):\n        with mock.patch(\n            'magic_admin.http_client.Session',", "explanation": "Here is a summary of the purpose and functionality of this block:\n\n**Purpose:** Test the `RequestsClient` class methods `_get_platform_info()` and `setup_request_session()`\n\n**Functionality:**\n\n1. Test that `setup_request_session()` is called once with correct arguments.\n2. Test that `_get_platform_info()` returns platform info with correct values, even if `uname()` raises an exception.", "metadata": {"repo": "magiclabs/magic-admin-python", "file": "tests/unit/http_client_test.py", "chunk_number": 2, "total_chunks": 10}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** magiclabs/magic-admin-python\n**Purpose:** A Python implementation of Magic Admin, a web-based administrative interface for managing user data and authentication.\n**Content:** Codebase containing API endpoints, views, and models for managing users, roles, permissions, and other related functionality.", "file_summary": "Here is a concise summary of the file 'tests/unit/http_client_test.py':\n\nThis test suite verifies the functionality of the `RequestsClient` class from `magic_admin.http_client`. It tests initialization, method behavior, error handling, and response parsing, ensuring correct configuration and expected results in various scenarios."}
{"code": "        ) as mock_session, mock.patch(\n            'magic_admin.http_client.HTTPAdapter',\n        ) as mock_http_adapter, mock.patch(\n            'magic_admin.http_client.Retry',\n        ) as mock_retry:\n            RequestsClient(self.retries, self.timeout, self.backoff_factor)\n\n        mock_retry.assert_called_once_with(\n            total=self.retries,\n            backoff_factor=self.backoff_factor,\n        )\n        mock_http_adapter.assert_called_once_with(\n            max_retries=mock_retry.return_value,\n        )\n        mock_session.return_value.mount.assert_called_once_with(\n            base_url,\n            mock_http_adapter.return_value,\n        )\n        mock_session.assert_called_once_with()\n\n    def test_get_request_headers(self):\n        rc = RequestsClient(self.retries, self.timeout, self.backoff_factor)\n        platform_info = {'troll': 'goat'}\n        magic_admin.api_secret_key = 'magic_secret_key'\n\n        with mock.patch.object(\n            rc,\n            '_get_platform_info',", "explanation": "**Summary:**\n\nThis block is a test suite for a `RequestsClient` class, utilizing the `unittest.mock` library to mock dependencies and verify expected behavior.\n\n**Key functionality:**\n\n1. Creates an instance of `RequestsClient` with specified retries, timeout, and backoff factor.\n2. Verifies that the `Retry` adapter is correctly configured with provided parameters.\n3. Verifies that the `HTTPAdapter` is properly created with the mocked `Retry` adapter.\n4. Tests the `_get_platform_info` method to verify it returns expected headers for a GET request.", "metadata": {"repo": "magiclabs/magic-admin-python", "file": "tests/unit/http_client_test.py", "chunk_number": 3, "total_chunks": 10}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** magiclabs/magic-admin-python\n**Purpose:** A Python implementation of Magic Admin, a web-based administrative interface for managing user data and authentication.\n**Content:** Codebase containing API endpoints, views, and models for managing users, roles, permissions, and other related functionality.", "file_summary": "Here is a concise summary of the file 'tests/unit/http_client_test.py':\n\nThis test suite verifies the functionality of the `RequestsClient` class from `magic_admin.http_client`. It tests initialization, method behavior, error handling, and response parsing, ensuring correct configuration and expected results in various scenarios."}
{"code": "            return_value=platform_info,\n        ) as mock_get_platform_info:\n            assert rc._get_request_headers() == {\n                'X-Magic-Secret-Key': magic_admin.api_secret_key,\n                'User-Agent': json.dumps({\n                    'language': 'python',\n                    'sdk_version': version.VERSION,\n                    'publisher': 'magic',\n                    'http_lib': rc.__class__.__name__,\n                    **platform_info,\n                }),\n            }\n\n        mock_get_platform_info.assert_called_once_with()\n\n    def test_get_request_headers_raises_error(self):\n        rc = RequestsClient(self.retries, self.timeout, self.backoff_factor)\n        magic_admin.api_secret_key = None\n\n        with pytest.raises(AuthenticationError):\n            rc._get_request_headers()\n\n    def test_handle_request_error(self):\n        rc = RequestsClient(self.retries, self.timeout, self.backoff_factor)\n        exception = Exception('troll_goat')\n", "explanation": "Here is a concise summary of the purpose and functionality:\n\n**Purpose:** Test the `RequestsClient` class's `_get_request_headers()` method.\n\n**Functionality:**\n\n1. Tests that the method returns correct headers with an API secret key and User-Agent string.\n2. Verifies that the `mock_get_platform_info` function is called once.\n3. Checks that the method raises an error when the API secret key is not set.\n4. Tests that the `handle_request_error()` method raises an exception with a specified message.", "metadata": {"repo": "magiclabs/magic-admin-python", "file": "tests/unit/http_client_test.py", "chunk_number": 4, "total_chunks": 10}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** magiclabs/magic-admin-python\n**Purpose:** A Python implementation of Magic Admin, a web-based administrative interface for managing user data and authentication.\n**Content:** Codebase containing API endpoints, views, and models for managing users, roles, permissions, and other related functionality.", "file_summary": "Here is a concise summary of the file 'tests/unit/http_client_test.py':\n\nThis test suite verifies the functionality of the `RequestsClient` class from `magic_admin.http_client`. It tests initialization, method behavior, error handling, and response parsing, ensuring correct configuration and expected results in various scenarios."}
{"code": "        with pytest.raises(APIConnectionError) as e:\n            rc._handle_request_error(exception)\n\n        assert str(e.value) == (\n            'Unexpected error thrown while communicating to Magic. '\n            'Please reach out to support@magic.link if the problem continues. '\n            'Error message: {error_class} was raised - {error_message}'.format(\n                error_class=exception.__class__.__name__,\n                error_message=str(exception) or 'no error message.',\n            )\n        )\n\n\nclass TestRequestClientRequest:\n\n    retries = 1\n    timeout = 2\n    backoff_factor = 3\n\n    mock_tuple = namedtuple(\n        'mock_tuple',\n        [\n            'get_request_headers',\n            'handle_request_error',\n            'parse_and_convert_to_api_response',\n        ],\n    )\n\n    @pytest.fixture(autouse=True)\n    def setup(self):\n        self.some_headers = {'troll': 'goat'}\n        self.method = 'post'\n        self.url = '/path'\n        self.params = 'params'\n        self.data = 'data'\n", "explanation": "**Block Purpose:**\n\nThis block tests the handling of API request errors.\n\n**Functionality:**\n\nIt asserts that a specific error message is raised when an exception occurs while making a request, with details about the error class and message.", "metadata": {"repo": "magiclabs/magic-admin-python", "file": "tests/unit/http_client_test.py", "chunk_number": 5, "total_chunks": 10}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** magiclabs/magic-admin-python\n**Purpose:** A Python implementation of Magic Admin, a web-based administrative interface for managing user data and authentication.\n**Content:** Codebase containing API endpoints, views, and models for managing users, roles, permissions, and other related functionality.", "file_summary": "Here is a concise summary of the file 'tests/unit/http_client_test.py':\n\nThis test suite verifies the functionality of the `RequestsClient` class from `magic_admin.http_client`. It tests initialization, method behavior, error handling, and response parsing, ensuring correct configuration and expected results in various scenarios."}
{"code": "        self.rc = RequestsClient(self.retries, self.timeout, self.backoff_factor)\n        self.rc.http = mock.Mock()\n\n    @pytest.fixture\n    def mock_funcs(self):\n        with mock.patch.object(\n            self.rc,\n            '_get_request_headers',\n            return_value=self.some_headers,\n        ) as mock_get_request_headers, mock.patch.object(\n            self.rc,\n            '_handle_request_error',\n        ) as mock_handle_request_error, mock.patch.object(\n            self.rc,\n            '_parse_and_convert_to_api_response',\n        ) as mock_parse_and_convert_to_api_response:\n            yield self.mock_tuple(\n                mock_get_request_headers,\n                mock_handle_request_error,\n                mock_parse_and_convert_to_api_response,\n            )\n\n    def test_request_no_exception_and_returns_api_response(self, mock_funcs):\n        assert self.rc.request(\n            self.method,\n            self.url,\n            params=self.params,\n            data=self.data,", "explanation": "Here is a concise summary of the block:\n\n**Purpose:** To mock out functionality of a RequestsClient instance for testing purposes.\n\n**Functionality:**\n\n* Creates a mock RequestsClient instance with custom retry and timeout settings.\n* Mocks out three internal functions:\n\t+ `_get_request_headers`: returns predefined headers.\n\t+ `_handle_request_error`: not actually patched, so it will throw an exception.\n\t+ `_parse_and_convert_to_api_response`: also not actually patched.\n* Provides a pytest fixture `mock_funcs` to yield the mock objects.\n* Tests that making a request with this mock client does not raise an exception and returns an API response.", "metadata": {"repo": "magiclabs/magic-admin-python", "file": "tests/unit/http_client_test.py", "chunk_number": 6, "total_chunks": 10}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** magiclabs/magic-admin-python\n**Purpose:** A Python implementation of Magic Admin, a web-based administrative interface for managing user data and authentication.\n**Content:** Codebase containing API endpoints, views, and models for managing users, roles, permissions, and other related functionality.", "file_summary": "Here is a concise summary of the file 'tests/unit/http_client_test.py':\n\nThis test suite verifies the functionality of the `RequestsClient` class from `magic_admin.http_client`. It tests initialization, method behavior, error handling, and response parsing, ensuring correct configuration and expected results in various scenarios."}
{"code": "        ) == mock_funcs.parse_and_convert_to_api_response.return_value\n\n        mock_funcs.get_request_headers.assert_called_once_with()\n        self.rc.http.request.assert_called_once_with(\n            self.method,\n            self.url,\n            params=self.params,\n            json=self.data,\n            headers=self.some_headers,\n            timeout=self.timeout,\n        )\n        mock_funcs.handle_request_error.assert_not_called()\n        mock_funcs.parse_and_convert_to_api_response.assert_called_once_with(\n            self.rc.http.request.return_value,\n            self.params,\n            self.data,\n        )\n\n    def test_request_exceptions_and_handles_error(self, mock_funcs):\n        exception = Exception()\n        self.rc.http.request = mock.Mock(side_effect=exception)\n\n        assert self.rc.request(\n            self.method,\n            self.url,\n            params=self.params,\n            data=self.data,\n        ) == mock_funcs.handle_request_error.return_value\n", "explanation": "Here is a concise summary:\n\n**Purpose:** Tests functionality of `request` method in `RequestClient`.\n\n**Functionality:**\n\n1. Verifies correct API request is made with proper headers, params, data, and timeout.\n2. Checks if error handling is performed correctly when an exception occurs during the request.", "metadata": {"repo": "magiclabs/magic-admin-python", "file": "tests/unit/http_client_test.py", "chunk_number": 7, "total_chunks": 10}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** magiclabs/magic-admin-python\n**Purpose:** A Python implementation of Magic Admin, a web-based administrative interface for managing user data and authentication.\n**Content:** Codebase containing API endpoints, views, and models for managing users, roles, permissions, and other related functionality.", "file_summary": "Here is a concise summary of the file 'tests/unit/http_client_test.py':\n\nThis test suite verifies the functionality of the `RequestsClient` class from `magic_admin.http_client`. It tests initialization, method behavior, error handling, and response parsing, ensuring correct configuration and expected results in various scenarios."}
{"code": "        mock_funcs.get_request_headers.assert_called_once_with()\n        self.rc.http.request.assert_called_once_with(\n            self.method,\n            self.url,\n            params=self.params,\n            json=self.data,\n            headers=self.some_headers,\n            timeout=self.timeout,\n        )\n        mock_funcs.handle_request_error.assert_called_once_with(exception)\n        mock_funcs.parse_and_convert_to_api_response.assert_not_called()\n\n\nclass TestParseAndConvertToAPIResponse:\n\n    retries = 1\n    timeout = 2\n    backoff_factor = 3\n\n    @pytest.fixture(autouse=True)\n    def setup(self):\n        self.params = 'params'\n        self.request_data = 'request_data'\n        self.data = {\n            'data': 'troll_goat',\n            'status': 'failed',\n            'message': 'troll_goat_is_cute',\n            'error_code': 'some_error',\n        }\n\n        self.rc = RequestsClient(self.retries, self.timeout, self.backoff_factor)\n        self.resp = mock.Mock(json=mock.Mock(return_value=self.data))\n", "explanation": "Here is a concise summary:\n\n**Purpose:** Test the functionality of `parse_and_convert_to_api_response` method.\n\n**Functionality:**\n\n* Asserts that specific functions are called with expected parameters.\n* Tests the behavior when an exception occurs during a request.\n* Verifies that `parse_and_convert_to_api_response` is not called in certain scenarios.", "metadata": {"repo": "magiclabs/magic-admin-python", "file": "tests/unit/http_client_test.py", "chunk_number": 8, "total_chunks": 10}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** magiclabs/magic-admin-python\n**Purpose:** A Python implementation of Magic Admin, a web-based administrative interface for managing user data and authentication.\n**Content:** Codebase containing API endpoints, views, and models for managing users, roles, permissions, and other related functionality.", "file_summary": "Here is a concise summary of the file 'tests/unit/http_client_test.py':\n\nThis test suite verifies the functionality of the `RequestsClient` class from `magic_admin.http_client`. It tests initialization, method behavior, error handling, and response parsing, ensuring correct configuration and expected results in various scenarios."}
{"code": "    def test_ok_response(self):\n        self.resp.status_code = 200\n\n        parsed_resp = self.rc._parse_and_convert_to_api_response(\n            self.resp,\n            self.params,\n            self.request_data,\n        )\n\n        assert isinstance(parsed_resp, MagicResponse)\n        assert parsed_resp.content == self.resp.content\n        assert parsed_resp.status_code == self.resp.status_code\n        assert parsed_resp.data == self.data['data']\n\n    @pytest.mark.parametrize(\n        'status_code,error_class',\n        [\n            (400, BadRequestError),\n            (401, AuthenticationError),\n            (403, ForbiddenError),\n            (429, RateLimitingError),\n            # Generic API Error if we did not specify handling it.\n            (499, APIError),\n        ],\n    )\n    def test_client_error_response(self, status_code, error_class):\n        self.resp.status_code = status_code\n\n        with pytest.raises(error_class) as e:\n            self.rc._parse_and_convert_to_api_response(", "explanation": "Here is a concise summary:\n\nThis block defines two test functions for a response converter class (`self.rc`). The first function, `test_ok_response`, tests that an OK HTTP response (200 code) is correctly parsed and converted into a specific format (`MagicResponse`). The second function, `test_client_error_response`, uses parameterized testing to verify that client error responses (400-499 codes) raise the correct exception class.", "metadata": {"repo": "magiclabs/magic-admin-python", "file": "tests/unit/http_client_test.py", "chunk_number": 9, "total_chunks": 10}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** magiclabs/magic-admin-python\n**Purpose:** A Python implementation of Magic Admin, a web-based administrative interface for managing user data and authentication.\n**Content:** Codebase containing API endpoints, views, and models for managing users, roles, permissions, and other related functionality.", "file_summary": "Here is a concise summary of the file 'tests/unit/http_client_test.py':\n\nThis test suite verifies the functionality of the `RequestsClient` class from `magic_admin.http_client`. It tests initialization, method behavior, error handling, and response parsing, ensuring correct configuration and expected results in various scenarios."}
{"code": "                self.resp,\n                self.params,\n                self.request_data,\n            )\n\n        assert e.value.to_dict() == {\n            'http_status': self.data['status'],\n            'http_code': self.resp.status_code,\n            'http_resp_data': self.data['data'],\n            'http_message': self.data['message'],\n            'http_error_code': self.data['error_code'],\n            'http_request_params': self.params,\n            'http_request_data': self.request_data,\n            'http_method': self.resp.request.method,\n            'message': mock.ANY,\n        }\n", "explanation": "**Purpose:** Asserts that an exception's value is equal to a dictionary containing expected HTTP response data.\n\n**Functionality:** Compares the exception's value to a predefined dictionary with various HTTP-related attributes, ensuring they match the provided values.", "metadata": {"repo": "magiclabs/magic-admin-python", "file": "tests/unit/http_client_test.py", "chunk_number": 10, "total_chunks": 10}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** magiclabs/magic-admin-python\n**Purpose:** A Python implementation of Magic Admin, a web-based administrative interface for managing user data and authentication.\n**Content:** Codebase containing API endpoints, views, and models for managing users, roles, permissions, and other related functionality.", "file_summary": "Here is a concise summary of the file 'tests/unit/http_client_test.py':\n\nThis test suite verifies the functionality of the `RequestsClient` class from `magic_admin.http_client`. It tests initialization, method behavior, error handling, and response parsing, ensuring correct configuration and expected results in various scenarios."}
{"code": "from unittest import mock\n\nimport pytest\n\nimport magic_admin\nfrom magic_admin.error import AuthenticationError\nfrom magic_admin.magic import BACKOFF_FACTOR\nfrom magic_admin.magic import Magic\nfrom magic_admin.magic import RETRIES\nfrom magic_admin.magic import TIMEOUT\n\n\nclass TestMagic:\n\n    api_secret_key = 'troll_goat'\n\n    @pytest.fixture(autouse=True)\n    def setup(self):\n        self.mocked_resource_component = mock.Mock()\n        self.mocked_request_client = mock.Mock(\n            request=mock.Mock(\n                return_value=mock.Mock(\n                    data={\n                        'client_id': '1234',\n                    },\n                ),\n            ),\n        )\n        with mock.patch(\n            'magic_admin.magic.ResourceComponent',\n            return_value=self.mocked_resource_component,\n        ), mock.patch(\n            'magic_admin.magic.RequestsClient',\n            return_value=self.mocked_request_client,\n        ):\n            yield\n\n    @pytest.fixture(autouse=True)\n    def teardown(self):", "explanation": "**Summary**\n\nThis block is a test suite for the `Magic` class, using the `pytest` framework. It sets up mock objects for dependencies and provides fixtures for testing the class's functionality.\n\n**Key Functionality:**\n\n* Mocks dependencies (`ResourceComponent`, `RequestsClient`) to isolate the Magic class's behavior\n* Sets up a test environment with an API secret key\n* Provides two fixtures: `setup` (pre-test setup) and `teardown` (post-test cleanup)", "metadata": {"repo": "magiclabs/magic-admin-python", "file": "tests/unit/magic_test.py", "chunk_number": 1, "total_chunks": 3}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** magiclabs/magic-admin-python\n**Purpose:** A Python implementation of Magic Admin, a web-based administrative interface for managing user data and authentication.\n**Content:** Codebase containing API endpoints, views, and models for managing users, roles, permissions, and other related functionality.", "file_summary": "Here is a concise and to the point summary of the file 'tests/unit/magic_test.py':\n\n**Summary**\n\nThis test suite for the `Magic` class verifies its correct initialization, configuration, and behavior under various scenarios using pytest framework and mocking dependencies."}
{"code": "        yield\n        magic_admin.api_secret_key = None\n\n    def test_init(self):\n        with mock.patch(\n            'magic_admin.magic.Magic._set_api_secret_key',\n        ) as mock_set_api_secret_key:\n            Magic(api_secret_key=self.api_secret_key)\n\n        self.mocked_resource_component.setup_request_client.assert_called_once_with(\n            RETRIES,\n            TIMEOUT,\n            BACKOFF_FACTOR,\n        )\n        mock_set_api_secret_key.assert_called_once_with(self.api_secret_key)\n\n    def test_retrieves_secret_key_from_env_variable(self):\n        assert magic_admin.api_secret_key is None\n\n        with mock.patch(\n            'os.environ.get',\n            return_value=self.api_secret_key,\n        ) as mock_env_get:\n            Magic()\n\n        assert magic_admin.api_secret_key == self.api_secret_key\n        mock_env_get.assert_called_once_with('MAGIC_API_SECRET_KEY')\n\n    def test_retrieves_secret_key_from_the_passed_in_value(self):\n        assert magic_admin.api_secret_key is None\n", "explanation": "**Summary:**\n\nThis code block consists of three tests for a class called `Magic`. The purpose is to verify that:\n\n1. An API secret key is properly set when initializing the `Magic` instance.\n2. The secret key can be retrieved from an environment variable if not provided in the constructor.\n3. The secret key can be set directly by passing it as an argument to the constructor.\n\n**Functionality:**\n\nThese tests use mocking to isolate dependencies and verify the behavior of the `Magic` class under different scenarios, ensuring correct initialization and configuration of the API secret key.", "metadata": {"repo": "magiclabs/magic-admin-python", "file": "tests/unit/magic_test.py", "chunk_number": 2, "total_chunks": 3}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** magiclabs/magic-admin-python\n**Purpose:** A Python implementation of Magic Admin, a web-based administrative interface for managing user data and authentication.\n**Content:** Codebase containing API endpoints, views, and models for managing users, roles, permissions, and other related functionality.", "file_summary": "Here is a concise and to the point summary of the file 'tests/unit/magic_test.py':\n\n**Summary**\n\nThis test suite for the `Magic` class verifies its correct initialization, configuration, and behavior under various scenarios using pytest framework and mocking dependencies."}
{"code": "        Magic(api_secret_key=self.api_secret_key)\n\n        assert magic_admin.api_secret_key == self.api_secret_key\n\n    def test_raises_authentication_error_if_secret_key_is_missing(self):\n        with pytest.raises(AuthenticationError):\n            Magic()\n", "explanation": "**Summary:**\n\nThis block tests the functionality of a `Magic` class, specifically:\n\n1. Initializes `Magic` with an API secret key.\n2. Verifies that the secret key is correctly set as an attribute (`api_secret_key`) on the `magic_admin` object.\n3. Tests that raising an instance of `Magic` without providing an API secret key results in an `AuthenticationError`.", "metadata": {"repo": "magiclabs/magic-admin-python", "file": "tests/unit/magic_test.py", "chunk_number": 3, "total_chunks": 3}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** magiclabs/magic-admin-python\n**Purpose:** A Python implementation of Magic Admin, a web-based administrative interface for managing user data and authentication.\n**Content:** Codebase containing API endpoints, views, and models for managing users, roles, permissions, and other related functionality.", "file_summary": "Here is a concise and to the point summary of the file 'tests/unit/magic_test.py':\n\n**Summary**\n\nThis test suite for the `Magic` class verifies its correct initialization, configuration, and behavior under various scenarios using pytest framework and mocking dependencies."}
{"code": "from unittest import mock\n\nimport pytest\n\nfrom magic_admin.resources.base import ResourceComponent\n\n\nclass TestResourceComponent:\n\n    retries = 1\n    timeout = 2\n    backoff_factor = 3\n\n    method = 'get'\n    url_path = '/troll/goat'\n    params = 'params'\n    data = 'data'\n\n    @pytest.fixture(autouse=True)\n    def setup(self):\n        self.rc = ResourceComponent()\n\n    def test_setup_request_client(self):\n        with mock.patch(\n            'magic_admin.resources.base.RequestsClient',\n        ) as mock_request_client:\n            self.rc.setup_request_client(\n                self.retries,\n                self.timeout,\n                self.backoff_factor,\n            )\n\n        mock_request_client.assert_called_once_with(\n            self.retries,\n            self.timeout,\n            self.backoff_factor,\n        )\n        for resource in self.rc._registry.values():\n            assert getattr(resource, '_request_client') == \\\n                mock_request_client.return_value\n\n    def test_construct_url(self):", "explanation": "**Summary**\n\nThis block is a unit test suite using Pytest, testing the functionality of `ResourceComponent` from the `magic_admin` library.\n\nThe purpose is to verify that:\n\n* The `setup_request_client` method correctly sets up an instance of `RequestsClient`.\n* The `construct_url` method (not fully shown) constructs a URL correctly.", "metadata": {"repo": "magiclabs/magic-admin-python", "file": "tests/unit/resources/base_test.py", "chunk_number": 1, "total_chunks": 2}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** magiclabs/magic-admin-python\n**Purpose:** A Python implementation of Magic Admin, a web-based administrative interface for managing user data and authentication.\n**Content:** Codebase containing API endpoints, views, and models for managing users, roles, permissions, and other related functionality.", "file_summary": "Here is a concise holistic summary of the file 'tests/unit/resources/base_test.py':\n\n**Unit Test Suite for Magic Admin Library**\n\nThis test suite verifies the functionality of the `ResourceComponent` class by testing its `setup_request_client` and `_construct_url` methods, ensuring correct setup and URL construction."}
{"code": "        assert self.rc._construct_url(self.url_path) == '{}{}'.format(\n            self.rc._base_url,\n            self.url_path,\n        )\n\n    def test_request(self):\n        self.rc._request_client = mock.Mock()\n\n        with mock.patch.object(\n            self.rc,\n            '_construct_url',\n        ) as mock_construct_url:\n            assert self.rc.request(\n                self.method,\n                self.url_path,\n                params=self.params,\n                data=self.data,\n            ) == self.rc._request_client.request.return_value\n\n        mock_construct_url.assert_called_once_with(self.url_path)\n", "explanation": "**Purpose:** Test that a request is made with the correct URL constructed.\n\n**Functionality:**\n\n* Constructs the full URL by concatenating the base URL and path.\n* Mocks an HTTP client to return a value for the `request` method.\n* Verifies that the correct parameters are passed to the `request` method.\n* Checks that the `_construct_url` method is called correctly.", "metadata": {"repo": "magiclabs/magic-admin-python", "file": "tests/unit/resources/base_test.py", "chunk_number": 2, "total_chunks": 2}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** magiclabs/magic-admin-python\n**Purpose:** A Python implementation of Magic Admin, a web-based administrative interface for managing user data and authentication.\n**Content:** Codebase containing API endpoints, views, and models for managing users, roles, permissions, and other related functionality.", "file_summary": "Here is a concise holistic summary of the file 'tests/unit/resources/base_test.py':\n\n**Unit Test Suite for Magic Admin Library**\n\nThis test suite verifies the functionality of the `ResourceComponent` class by testing its `setup_request_client` and `_construct_url` methods, ensuring correct setup and URL construction."}
{"code": "import json\nfrom collections import namedtuple\nfrom unittest import mock\n\nimport pytest\nfrom pretend import stub\n\nfrom magic_admin.error import DIDTokenExpired\nfrom magic_admin.error import DIDTokenInvalid\nfrom magic_admin.error import DIDTokenMalformed\nfrom magic_admin.resources.token import Token\n\n\nclass TestToken:\n\n    did_token = 'magic_token'\n    public_address = 'magic_address'\n    issuer = 'did:ethr:{}'.format(public_address)\n\n    @staticmethod\n    def _generate_claim(fields=None):\n        return {field: mock.ANY for field in fields or Token.required_fields}\n\n    def test_required_fields(self):\n        assert Token.required_fields.difference(\n            {'nbf', 'sub', 'iss', 'ext', 'aud', 'tid', 'iat'},\n        ) == frozenset()\n\n    def test_check_required_fields_raises_error(self):\n        with pytest.raises(DIDTokenMalformed) as e:\n            Token._check_required_fields(\n                self._generate_claim(fields=['nbf', 'sub', 'aud', 'tid', 'iat']),\n            )\n", "explanation": "**Summary**\n\nThis block is a unit test suite for the `Token` class, specifically testing its functionality related to DID (Decentralized Identifier) tokens. It checks that required fields are correctly validated and raises errors when they are missing or malformed.", "metadata": {"repo": "magiclabs/magic-admin-python", "file": "tests/unit/resources/token_test.py", "chunk_number": 1, "total_chunks": 11}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** magiclabs/magic-admin-python\n**Purpose:** A Python implementation of Magic Admin, a web-based administrative interface for managing user data and authentication.\n**Content:** Codebase containing API endpoints, views, and models for managing users, roles, permissions, and other related functionality.", "file_summary": "Here is a concise summary of the file 'tests/unit/resources/token_test.py':\n\n**Purpose:** Test the validation and decoding functionality of a Digital Identity Token (DID Token).\n\n**Functionality:**\n\n* Validate required fields and raise errors for missing or malformed tokens\n* Decode DID tokens with mock functions to test various scenarios\n* Verify token expiration, signature mismatch, and \"Not Before\" time validity\n\nThis block ensures that the `Token` class behaves correctly under different conditions, ensuring the security and integrity of Digital Identity Tokens."}
{"code": "        assert str(e.value) == 'DID token is missing required field(s): ' \\\n            '[\\'ext\\', \\'iss\\']'\n\n    def test_check_required_fields_passes(self):\n        Token._check_required_fields(self._generate_claim())\n\n    def test_get_issuer_passes(self):\n        mocked_claim = {'iss': self.issuer}\n\n        with mock.patch.object(\n            Token,\n            'decode',\n            return_value=(mock.ANY, mocked_claim),\n        ) as mock_decode:\n            assert Token.get_issuer(self.did_token) == self.issuer\n\n        mock_decode.assert_called_once_with(self.did_token)\n\n    def test_get_public_address_passes(self):\n        with mock.patch(\n            'magic_admin.resources.token.parse_public_address_from_issuer',\n            return_value=self.public_address,\n        ) as mock_parse_public_address, mock.patch.object(\n            Token,\n            'get_issuer',\n        ) as mock_get_issuer:\n            assert Token.get_public_address(self.did_token) == self.public_address\n", "explanation": "This block appears to be a set of test cases for a class called `Token`. The purpose is to ensure that various methods within the `Token` class function correctly, specifically:\n\n1. `_check_required_fields`: Verifies that required fields are present in a DID token.\n2. `get_issuer`: Retrieves the issuer from a given DID token.\n3. `get_public_address`: Extracts and returns the public address associated with an issuer.\n\nEach test case uses mocking to isolate dependencies, ensuring the methods behave as expected under various scenarios.", "metadata": {"repo": "magiclabs/magic-admin-python", "file": "tests/unit/resources/token_test.py", "chunk_number": 2, "total_chunks": 11}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** magiclabs/magic-admin-python\n**Purpose:** A Python implementation of Magic Admin, a web-based administrative interface for managing user data and authentication.\n**Content:** Codebase containing API endpoints, views, and models for managing users, roles, permissions, and other related functionality.", "file_summary": "Here is a concise summary of the file 'tests/unit/resources/token_test.py':\n\n**Purpose:** Test the validation and decoding functionality of a Digital Identity Token (DID Token).\n\n**Functionality:**\n\n* Validate required fields and raise errors for missing or malformed tokens\n* Decode DID tokens with mock functions to test various scenarios\n* Verify token expiration, signature mismatch, and \"Not Before\" time validity\n\nThis block ensures that the `Token` class behaves correctly under different conditions, ensuring the security and integrity of Digital Identity Tokens."}
{"code": "        mock_get_issuer.assert_called_once_with(self.did_token)\n        mock_parse_public_address.assert_called_once_with(mock_get_issuer.return_value)\n\n\nclass TestTokenDecode:\n\n    did_token = 'magic_token'\n    public_address = 'magic_address'\n\n    mock_funcs = namedtuple('mock_funcs', 'urlsafe_b64decode, json_loads')\n\n    @pytest.fixture\n    def setup_mocks(self):\n        with mock.patch(\n            'magic_admin.resources.token.base64.urlsafe_b64decode',\n        ) as mock_urlsafe_b64decode, mock.patch(\n            'magic_admin.resources.token.json.loads',\n        ) as mock_json_loads:\n            yield self.mock_funcs(mock_urlsafe_b64decode, mock_json_loads)\n\n    def test_decode_raises_error_if_did_token_is_malformed(self, setup_mocks):\n        setup_mocks.urlsafe_b64decode.side_effect = Exception()\n\n        with pytest.raises(DIDTokenMalformed) as e:\n            Token.decode(self.did_token)\n\n        setup_mocks.urlsafe_b64decode.assert_called_once_with(self.did_token)", "explanation": "**Summary:**\n\nThis block is a test class that tests the functionality of the `Token.decode()` method. It sets up mock functions for base64 decoding and JSON loading, then checks that an error is raised when a malformed DID token is passed to the `decode` method.", "metadata": {"repo": "magiclabs/magic-admin-python", "file": "tests/unit/resources/token_test.py", "chunk_number": 3, "total_chunks": 11}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** magiclabs/magic-admin-python\n**Purpose:** A Python implementation of Magic Admin, a web-based administrative interface for managing user data and authentication.\n**Content:** Codebase containing API endpoints, views, and models for managing users, roles, permissions, and other related functionality.", "file_summary": "Here is a concise summary of the file 'tests/unit/resources/token_test.py':\n\n**Purpose:** Test the validation and decoding functionality of a Digital Identity Token (DID Token).\n\n**Functionality:**\n\n* Validate required fields and raise errors for missing or malformed tokens\n* Decode DID tokens with mock functions to test various scenarios\n* Verify token expiration, signature mismatch, and \"Not Before\" time validity\n\nThis block ensures that the `Token` class behaves correctly under different conditions, ensuring the security and integrity of Digital Identity Tokens."}
{"code": "        assert str(e.value) == 'DID token is malformed. It has to be a based64 ' \\\n            'encoded JSON serialized string. Exception (<empty message>).'\n\n    def test_decode_raises_error_if_did_token_has_missing_parts(self, setup_mocks):\n        setup_mocks.json_loads.return_value = ('miss one part')\n\n        with pytest.raises(DIDTokenMalformed) as e:\n            Token.decode(self.did_token)\n\n        setup_mocks.urlsafe_b64decode.assert_called_once_with(self.did_token)\n        setup_mocks.json_loads.assert_called_once_with(\n            setup_mocks.urlsafe_b64decode.return_value.decode.return_value,\n        )\n        assert str(e.value) == 'DID token is malformed. It has to have two parts ' \\\n            '[proof, claim].'\n\n    def test_decode_raises_error_if_claim_is_not_json_serializable(self, setup_mocks):\n        with pytest.raises(DIDTokenMalformed) as e:\n            setup_mocks.json_loads.side_effect = [\n                ('proof_in_str', 'claim_in_str'),  # Succeeds the first time.", "explanation": "This block of code is a set of test cases for the `Token.decode` function, which appears to be responsible for decoding a DID (Decentralized Identifier) token. The tests ensure that:\n\n* A malformed token raises a `DIDTokenMalformed` exception with an informative error message.\n* A token with missing parts raises a `DIDTokenMalformed` exception with a specific error message.\n* A claim that is not JSON serializable also raises a `DIDTokenMalformed` exception.", "metadata": {"repo": "magiclabs/magic-admin-python", "file": "tests/unit/resources/token_test.py", "chunk_number": 4, "total_chunks": 11}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** magiclabs/magic-admin-python\n**Purpose:** A Python implementation of Magic Admin, a web-based administrative interface for managing user data and authentication.\n**Content:** Codebase containing API endpoints, views, and models for managing users, roles, permissions, and other related functionality.", "file_summary": "Here is a concise summary of the file 'tests/unit/resources/token_test.py':\n\n**Purpose:** Test the validation and decoding functionality of a Digital Identity Token (DID Token).\n\n**Functionality:**\n\n* Validate required fields and raise errors for missing or malformed tokens\n* Decode DID tokens with mock functions to test various scenarios\n* Verify token expiration, signature mismatch, and \"Not Before\" time validity\n\nThis block ensures that the `Token` class behaves correctly under different conditions, ensuring the security and integrity of Digital Identity Tokens."}
{"code": "                Exception(),  # Fails the second time.\n            ]\n\n            Token.decode(self.did_token)\n\n        setup_mocks.urlsafe_b64decode.assert_called_once_with(self.did_token)\n        assert setup_mocks.json_loads.call_args_list == [\n            mock.call(setup_mocks.urlsafe_b64decode.return_value.decode.return_value),\n            mock.call('claim_in_str'),\n        ]\n        assert str(e.value) == 'DID token is malformed. Given claim should be ' \\\n            'a JSON serialized string. Exception (<empty message>).'\n\n    def test_decode_passes(self, setup_mocks):\n        setup_mocks.json_loads.side_effect = [\n            ('proof_in_str', 'claim_in_str'),\n            'claim',\n        ]\n\n        with mock.patch.object(\n            Token,\n            '_check_required_fields',\n        ) as mock_check_required_fields:\n            assert Token.decode(self.did_token) == ('proof_in_str', 'claim')\n\n        setup_mocks.urlsafe_b64decode.assert_called_once_with(self.did_token)", "explanation": "**Block Summary**\n\nThis block tests the `Token.decode` method, specifically its behavior when given a malformed DID token and when it successfully decodes a valid token.\n\n* The first test case checks that an exception is raised when the token fails validation.\n* The second test case verifies that the `decode` method correctly parses a valid DID token.", "metadata": {"repo": "magiclabs/magic-admin-python", "file": "tests/unit/resources/token_test.py", "chunk_number": 5, "total_chunks": 11}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** magiclabs/magic-admin-python\n**Purpose:** A Python implementation of Magic Admin, a web-based administrative interface for managing user data and authentication.\n**Content:** Codebase containing API endpoints, views, and models for managing users, roles, permissions, and other related functionality.", "file_summary": "Here is a concise summary of the file 'tests/unit/resources/token_test.py':\n\n**Purpose:** Test the validation and decoding functionality of a Digital Identity Token (DID Token).\n\n**Functionality:**\n\n* Validate required fields and raise errors for missing or malformed tokens\n* Decode DID tokens with mock functions to test various scenarios\n* Verify token expiration, signature mismatch, and \"Not Before\" time validity\n\nThis block ensures that the `Token` class behaves correctly under different conditions, ensuring the security and integrity of Digital Identity Tokens."}
{"code": "        mock_check_required_fields.assert_called_once_with('claim')\n        assert setup_mocks.json_loads.call_args_list == [\n            mock.call(setup_mocks.urlsafe_b64decode.return_value.decode.return_value),\n            mock.call('claim_in_str'),\n        ]\n\n\nclass TestTokenValidate:\n\n    did_token = 'magic_token'\n    public_address = 'magic_address'\n\n    mock_funcs = namedtuple(\n        'mock_funcs',\n        [\n            'proof',\n            'claim',\n            'decode',\n            'recoverHash',\n            'defunct_hash_message',\n            'get_public_address',\n            'epoch_time_now',\n            'apply_did_token_nbf_grace_period',\n        ],\n    )\n\n    @pytest.fixture\n    def setup_mocks(self):\n        proof = 'proof'\n        claim = {\n            'ext': 8084,\n            'nbf': 6666,\n            'aud': '1234',\n        }\n\n        with mock.patch.object(\n            Token,\n            'decode',\n            return_value=(proof, claim),\n        ) as decode, mock.patch(", "explanation": "**Summary**\n\nThis block is a test class (`TestTokenValidate`) that uses Pytest fixtures to set up mock functions for testing token validation functionality. It checks the assertions of a `mock_check_required_fields` method and verifies the calls made to a `json_loads` function using Mock objects from the `unittest.mock` library.", "metadata": {"repo": "magiclabs/magic-admin-python", "file": "tests/unit/resources/token_test.py", "chunk_number": 6, "total_chunks": 11}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** magiclabs/magic-admin-python\n**Purpose:** A Python implementation of Magic Admin, a web-based administrative interface for managing user data and authentication.\n**Content:** Codebase containing API endpoints, views, and models for managing users, roles, permissions, and other related functionality.", "file_summary": "Here is a concise summary of the file 'tests/unit/resources/token_test.py':\n\n**Purpose:** Test the validation and decoding functionality of a Digital Identity Token (DID Token).\n\n**Functionality:**\n\n* Validate required fields and raise errors for missing or malformed tokens\n* Decode DID tokens with mock functions to test various scenarios\n* Verify token expiration, signature mismatch, and \"Not Before\" time validity\n\nThis block ensures that the `Token` class behaves correctly under different conditions, ensuring the security and integrity of Digital Identity Tokens."}
{"code": "            'magic_admin.resources.token.w3.eth.account.recoverHash',\n            return_value=self.public_address,\n        ) as recoverHash, mock.patch(\n            'magic_admin.resources.token.defunct_hash_message',\n        ) as defunct_hash_message, mock.patch.object(\n            Token,\n            'get_public_address',\n            return_value=self.public_address,\n        ) as get_public_address, mock.patch(\n            'magic_admin.resources.token.epoch_time_now',\n            return_value=claim['ext'] - 1,\n        ) as epoch_time_now, mock.patch(\n            'magic_admin.resources.token.apply_did_token_nbf_grace_period',\n            return_value=claim['nbf'],\n        ) as apply_did_token_nbf_grace_period, mock.patch(\n            'magic_admin.resources.token.magic_admin',\n            new=stub(client_id='1234'),\n        ):\n            yield self.mock_funcs(\n                proof,\n                claim,\n                decode,\n                recoverHash,\n                defunct_hash_message,", "explanation": "This block is a test setup using mock patches and fixtures to isolate and test specific functionality in a Token object.\n\nIn essence, it:\n\n1. Mocks various external dependencies (functions) to control their return values.\n2. Creates a test context with controlled inputs and expected outputs.\n3. Yields the test execution to run self.mock_funcs with the specified parameters.", "metadata": {"repo": "magiclabs/magic-admin-python", "file": "tests/unit/resources/token_test.py", "chunk_number": 7, "total_chunks": 11}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** magiclabs/magic-admin-python\n**Purpose:** A Python implementation of Magic Admin, a web-based administrative interface for managing user data and authentication.\n**Content:** Codebase containing API endpoints, views, and models for managing users, roles, permissions, and other related functionality.", "file_summary": "Here is a concise summary of the file 'tests/unit/resources/token_test.py':\n\n**Purpose:** Test the validation and decoding functionality of a Digital Identity Token (DID Token).\n\n**Functionality:**\n\n* Validate required fields and raise errors for missing or malformed tokens\n* Decode DID tokens with mock functions to test various scenarios\n* Verify token expiration, signature mismatch, and \"Not Before\" time validity\n\nThis block ensures that the `Token` class behaves correctly under different conditions, ensuring the security and integrity of Digital Identity Tokens."}
{"code": "                get_public_address,\n                epoch_time_now,\n                apply_did_token_nbf_grace_period,\n            )\n\n    def _assert_validate_funcs_called(\n        self,\n        setup_mocks,\n        is_time_func_called=False,\n        is_grace_period_func_called=False,\n    ):\n        setup_mocks.decode.assert_called_once_with(self.did_token)\n        setup_mocks.defunct_hash_message.assert_called_once_with(\n            text=json.dumps(setup_mocks.claim, separators=(',', ':')),\n        )\n        setup_mocks.recoverHash.assert_called_once_with(\n            setup_mocks.defunct_hash_message.return_value,\n            signature=setup_mocks.proof,\n        )\n        setup_mocks.get_public_address.assert_called_once_with(\n            self.did_token,\n        )\n\n        if is_time_func_called:\n            setup_mocks.epoch_time_now.assert_called_once_with()\n        else:\n            setup_mocks.epoch_time_now.assert_not_called()\n\n        if is_grace_period_func_called:", "explanation": "**Purpose:** Validate function calls in a test scenario.\n\n**Functionality:** Asserts that specific functions were called with expected arguments, and optionally checks if time-related or grace period functions were called as well.", "metadata": {"repo": "magiclabs/magic-admin-python", "file": "tests/unit/resources/token_test.py", "chunk_number": 8, "total_chunks": 11}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** magiclabs/magic-admin-python\n**Purpose:** A Python implementation of Magic Admin, a web-based administrative interface for managing user data and authentication.\n**Content:** Codebase containing API endpoints, views, and models for managing users, roles, permissions, and other related functionality.", "file_summary": "Here is a concise summary of the file 'tests/unit/resources/token_test.py':\n\n**Purpose:** Test the validation and decoding functionality of a Digital Identity Token (DID Token).\n\n**Functionality:**\n\n* Validate required fields and raise errors for missing or malformed tokens\n* Decode DID tokens with mock functions to test various scenarios\n* Verify token expiration, signature mismatch, and \"Not Before\" time validity\n\nThis block ensures that the `Token` class behaves correctly under different conditions, ensuring the security and integrity of Digital Identity Tokens."}
{"code": "            setup_mocks.apply_did_token_nbf_grace_period.assert_called_once_with(\n                setup_mocks.claim['nbf'],\n            )\n        else:\n            setup_mocks.apply_did_token_nbf_grace_period.assert_not_called()\n\n    def test_validate_raises_error_if_signature_mismatch(self, setup_mocks):\n        setup_mocks.get_public_address.return_value = 'random_public_address'\n\n        with pytest.raises(DIDTokenInvalid) as e:\n            Token.validate(self.did_token)\n\n        self._assert_validate_funcs_called(setup_mocks)\n        assert str(e.value) == 'Signature mismatch between \"proof\" and \"claim\". ' \\\n            'Please generate a new token with an intended issuer.'\n\n    def test_validate_raises_error_if_did_token_expires(self, setup_mocks):\n        setup_mocks.epoch_time_now.return_value = \\\n            setup_mocks.claim['ext'] + 1\n\n        with pytest.raises(DIDTokenExpired) as e:\n            Token.validate(self.did_token)\n\n        self._assert_validate_funcs_called(\n            setup_mocks,", "explanation": "**Purpose:** Test the validation of a DID (Decentralized Identifier) token.\n\n**Functionality:**\n\n1. Verifies that the `apply_did_token_nbf_grace_period` function is called correctly.\n2. Tests that an error is raised if:\n\t* The signature mismatch between \"proof\" and \"claim\".\n\t* The DID token has expired.", "metadata": {"repo": "magiclabs/magic-admin-python", "file": "tests/unit/resources/token_test.py", "chunk_number": 9, "total_chunks": 11}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** magiclabs/magic-admin-python\n**Purpose:** A Python implementation of Magic Admin, a web-based administrative interface for managing user data and authentication.\n**Content:** Codebase containing API endpoints, views, and models for managing users, roles, permissions, and other related functionality.", "file_summary": "Here is a concise summary of the file 'tests/unit/resources/token_test.py':\n\n**Purpose:** Test the validation and decoding functionality of a Digital Identity Token (DID Token).\n\n**Functionality:**\n\n* Validate required fields and raise errors for missing or malformed tokens\n* Decode DID tokens with mock functions to test various scenarios\n* Verify token expiration, signature mismatch, and \"Not Before\" time validity\n\nThis block ensures that the `Token` class behaves correctly under different conditions, ensuring the security and integrity of Digital Identity Tokens."}
{"code": "            is_time_func_called=True,\n        )\n        assert str(e.value) == 'Given DID token has expired. Please generate a ' \\\n            'new one.'\n\n    def test_validate_raises_error_if_did_token_has_no_expiration(self, setup_mocks):\n        setup_mocks.claim['ext'] = None\n\n        with pytest.raises(DIDTokenInvalid) as e:\n            Token.validate(self.did_token)\n\n        assert str(e.value) == 'Please check the \"ext\" field and regenerate a new' \\\n            ' token with a suitable value.'\n\n    def test_validate_raises_error_if_did_token_used_before_nbf(self, setup_mocks):\n        setup_mocks.epoch_time_now.return_value = \\\n            setup_mocks.claim['nbf'] - 1\n\n        with pytest.raises(DIDTokenInvalid) as e:\n            Token.validate(self.did_token)\n\n        self._assert_validate_funcs_called(\n            setup_mocks,\n            is_time_func_called=True,\n            is_grace_period_func_called=True,\n        )\n        assert str(e.value) == 'Given DID token cannot be used at this time. ' \\", "explanation": "Here is a concise summary of the purpose and functionality of this block:\n\n**Purpose:** Test the validation of a Digital Identity Token (DID Token).\n\n**Functionality:**\n\n* Validate DID Token expiration\n* Check if token has no expiration (and raise error)\n* Verify if token is not usable before its \"Not Before\" time", "metadata": {"repo": "magiclabs/magic-admin-python", "file": "tests/unit/resources/token_test.py", "chunk_number": 10, "total_chunks": 11}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** magiclabs/magic-admin-python\n**Purpose:** A Python implementation of Magic Admin, a web-based administrative interface for managing user data and authentication.\n**Content:** Codebase containing API endpoints, views, and models for managing users, roles, permissions, and other related functionality.", "file_summary": "Here is a concise summary of the file 'tests/unit/resources/token_test.py':\n\n**Purpose:** Test the validation and decoding functionality of a Digital Identity Token (DID Token).\n\n**Functionality:**\n\n* Validate required fields and raise errors for missing or malformed tokens\n* Decode DID tokens with mock functions to test various scenarios\n* Verify token expiration, signature mismatch, and \"Not Before\" time validity\n\nThis block ensures that the `Token` class behaves correctly under different conditions, ensuring the security and integrity of Digital Identity Tokens."}
{"code": "            'Please check the \"nbf\" field and regenerate a new token with a ' \\\n            'suitable value.'\n\n    def test_validate_passes(self, setup_mocks):\n        Token.validate(self.did_token)\n\n        self._assert_validate_funcs_called(\n            setup_mocks,\n            is_time_func_called=True,\n            is_grace_period_func_called=True,\n        )\n", "explanation": "Here is a concise summary:\n\nThis block checks a token's \"nbf\" field, suggests re-generating if invalid, and asserts that validation functions are called correctly in a test scenario.", "metadata": {"repo": "magiclabs/magic-admin-python", "file": "tests/unit/resources/token_test.py", "chunk_number": 11, "total_chunks": 11}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** magiclabs/magic-admin-python\n**Purpose:** A Python implementation of Magic Admin, a web-based administrative interface for managing user data and authentication.\n**Content:** Codebase containing API endpoints, views, and models for managing users, roles, permissions, and other related functionality.", "file_summary": "Here is a concise summary of the file 'tests/unit/resources/token_test.py':\n\n**Purpose:** Test the validation and decoding functionality of a Digital Identity Token (DID Token).\n\n**Functionality:**\n\n* Validate required fields and raise errors for missing or malformed tokens\n* Decode DID tokens with mock functions to test various scenarios\n* Verify token expiration, signature mismatch, and \"Not Before\" time validity\n\nThis block ensures that the `Token` class behaves correctly under different conditions, ensuring the security and integrity of Digital Identity Tokens."}
{"code": "from unittest import mock\nfrom unittest.mock import sentinel\n\nimport pytest\nfrom pretend import stub\n\nfrom magic_admin.resources.user import User\nfrom magic_admin.resources.wallet import WalletType\nfrom testing.data.did_token import future_did_token\nfrom testing.data.did_token import public_address\n\n\nclass TestUser:\n\n    metadata_with_wallets = stub(\n        data=stub(\n            email=sentinel.email,\n            issuer=sentinel.issuer,\n            public_address=sentinel.public_address,\n            wallets=[\n                stub(\n                    network=sentinel.network,\n                    wallet_type=WalletType.ETH.value,\n                    public_address=sentinel.public_address_1,\n                ),\n                stub(\n                    network=sentinel.network,\n                    wallet_type=WalletType.ETH.value,\n                    public_address=sentinel.public_address_2,\n                ),\n                stub(\n                    network=sentinel.network,", "explanation": "Here is a concise summary:\n\nThis block defines a test class (`TestUser`) that uses mock objects and fixtures from `unittest`, `pytest`, and `pretend` libraries to create test data for a user resource. The `metadata_with_wallets` stub object provides sample user metadata with multiple wallets.", "metadata": {"repo": "magiclabs/magic-admin-python", "file": "tests/unit/resources/user_test.py", "chunk_number": 1, "total_chunks": 7}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** magiclabs/magic-admin-python\n**Purpose:** A Python implementation of Magic Admin, a web-based administrative interface for managing user data and authentication.\n**Content:** Codebase containing API endpoints, views, and models for managing users, roles, permissions, and other related functionality.", "file_summary": "Here's a concise summary of the file 'tests/unit/resources/user_test.py':\n\n**Summary:** This test file defines various test cases for user-related functionality in Magic Admin.\n\n**Key Functionality:**\n\n* Tests retrieval of user metadata by issuer, token, and public address\n* Verifies correct behavior of logout methods in different scenarios\n* Uses mocking to isolate dependencies and ensure correct behavior"}
{"code": "                    wallet_type=WalletType.ETH.value,\n                    public_address=sentinel.public_address_3,\n                ),\n            ],\n        ),\n        error_code=sentinel.error_code,\n        message=sentinel.message,\n        status=sentinel.status,\n    )\n\n    metadata_no_wallets = stub(\n        data=stub(\n            email=sentinel.email,\n            issuer=sentinel.issuer,\n            public_address=sentinel.public_address,\n        ),\n        error_code=sentinel.error_code,\n        message=sentinel.message,\n        status=sentinel.ok,\n    )\n\n    @pytest.fixture(autouse=True)\n    def setup(self):\n        self.user = User()\n        self.user.Token = mock.Mock()\n\n    @pytest.fixture\n    def mock_construct_issuer_with_public_address(self, mocker):\n        return mocker.patch(\n            'magic_admin.resources.user.construct_issuer_with_public_address',\n            return_value=sentinel.public_address,\n        )\n\n    def test_get_metadata_by_issuer(self):", "explanation": "**Summary:**\n\nThis code block defines two test fixtures (`metadata_with_wallets` and `metadata_no_wallets`) and a test function (`test_get_metadata_by_issuer`). The purpose is to test the retrieval of user metadata in Magic Admin.\n\n**Functionality:**\n\n* Two test fixtures are created with different scenarios:\n\t+ `metadata_with_wallets`: includes wallet information\n\t+ `metadata_no_wallets`: does not include wallet information\n* A test function (`test_get_metadata_by_issuer`) is defined to test the retrieval of user metadata by issuer.", "metadata": {"repo": "magiclabs/magic-admin-python", "file": "tests/unit/resources/user_test.py", "chunk_number": 2, "total_chunks": 7}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** magiclabs/magic-admin-python\n**Purpose:** A Python implementation of Magic Admin, a web-based administrative interface for managing user data and authentication.\n**Content:** Codebase containing API endpoints, views, and models for managing users, roles, permissions, and other related functionality.", "file_summary": "Here's a concise summary of the file 'tests/unit/resources/user_test.py':\n\n**Summary:** This test file defines various test cases for user-related functionality in Magic Admin.\n\n**Key Functionality:**\n\n* Tests retrieval of user metadata by issuer, token, and public address\n* Verifies correct behavior of logout methods in different scenarios\n* Uses mocking to isolate dependencies and ensure correct behavior"}
{"code": "        self.user.get_metadata_by_issuer_and_wallet = mock.Mock(\n            return_value=self.metadata_no_wallets,\n        )\n\n        assert self.user.get_metadata_by_issuer(\n            sentinel.issuer,\n        ) == self.metadata_no_wallets\n\n        self.user.get_metadata_by_issuer_and_wallet.assert_called_once_with(\n            sentinel.issuer,\n            WalletType.NONE,\n        )\n\n    def test_get_metadata_by_issuer_and_any_wallet(self):\n        self.user.request = mock.Mock(return_value=self.metadata_with_wallets)\n\n        assert self.user.get_metadata_by_issuer_and_wallet(\n            sentinel.issuer,\n            WalletType.ANY,\n        ) == self.metadata_with_wallets\n\n        self.user.request.assert_called_once_with(\n            'get',\n            self.user.v1_user_info,\n            params={\n                'issuer': sentinel.issuer,\n                'wallet_type': WalletType.ANY,\n            },\n        )\n\n    def test_get_metadata_by_token(self):", "explanation": "Here is a concise summary of the block's purpose and functionality:\n\n**Purpose:** Test the behavior of `get_metadata_by_issuer_and_wallet` method.\n\n**Functionality:**\n\n* Mocks `get_metadata_by_issuer_and_wallet` method to return specific metadata values.\n* Tests that calling `get_metadata_by_issuer` returns expected metadata.\n* Verifies correct API request is made when calling `get_metadata_by_issuer_and_wallet`.", "metadata": {"repo": "magiclabs/magic-admin-python", "file": "tests/unit/resources/user_test.py", "chunk_number": 3, "total_chunks": 7}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** magiclabs/magic-admin-python\n**Purpose:** A Python implementation of Magic Admin, a web-based administrative interface for managing user data and authentication.\n**Content:** Codebase containing API endpoints, views, and models for managing users, roles, permissions, and other related functionality.", "file_summary": "Here's a concise summary of the file 'tests/unit/resources/user_test.py':\n\n**Summary:** This test file defines various test cases for user-related functionality in Magic Admin.\n\n**Key Functionality:**\n\n* Tests retrieval of user metadata by issuer, token, and public address\n* Verifies correct behavior of logout methods in different scenarios\n* Uses mocking to isolate dependencies and ensure correct behavior"}
{"code": "        self.user.get_metadata_by_issuer = mock.Mock(return_value=self.metadata_no_wallets)\n\n        assert self.user.get_metadata_by_token(\n            future_did_token,\n        ) == self.user.get_metadata_by_issuer.return_value\n\n        self.user.Token.get_issuer.assert_called_once_with(future_did_token)\n        self.user.get_metadata_by_issuer.assert_called_once_with(\n            self.user.Token.get_issuer.return_value,\n        )\n\n    def test_get_metadata_by_token_and_any_wallet(self):\n        self.user.get_metadata_by_issuer_and_wallet = mock.Mock(\n            return_value=self.metadata_with_wallets,\n        )\n\n        assert self.user.get_metadata_by_token_and_wallet(\n            future_did_token,\n            WalletType.ANY,\n        ) == self.user.get_metadata_by_issuer_and_wallet.return_value\n\n        self.user.Token.get_issuer.assert_called_once_with(future_did_token)\n        self.user.get_metadata_by_issuer_and_wallet.assert_called_once_with(\n            self.user.Token.get_issuer.return_value,", "explanation": "**Block Summary:**\n\nThis block of code tests two functions in a user object:\n\n1. `get_metadata_by_token`: Verifies that metadata is retrieved from an issuer when given a token.\n2. `get_metadata_by_token_and_wallet`: Tests retrieval of metadata with wallet information when given a token and any wallet type.\n\n**Key Functionality:**\n\n* Mocks the return values of various functions to isolate their behavior.\n* Asserts that certain functions are called correctly with expected arguments.\n* Returns mock metadata for testing purposes.", "metadata": {"repo": "magiclabs/magic-admin-python", "file": "tests/unit/resources/user_test.py", "chunk_number": 4, "total_chunks": 7}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** magiclabs/magic-admin-python\n**Purpose:** A Python implementation of Magic Admin, a web-based administrative interface for managing user data and authentication.\n**Content:** Codebase containing API endpoints, views, and models for managing users, roles, permissions, and other related functionality.", "file_summary": "Here's a concise summary of the file 'tests/unit/resources/user_test.py':\n\n**Summary:** This test file defines various test cases for user-related functionality in Magic Admin.\n\n**Key Functionality:**\n\n* Tests retrieval of user metadata by issuer, token, and public address\n* Verifies correct behavior of logout methods in different scenarios\n* Uses mocking to isolate dependencies and ensure correct behavior"}
{"code": "            WalletType.ANY,\n        )\n\n    def test_get_metadata_by_public_address(\n        self,\n        mock_construct_issuer_with_public_address,\n    ):\n        self.user.get_metadata_by_issuer = mock.Mock(return_value=self.metadata_no_wallets)\n\n        assert self.user.get_metadata_by_public_address(\n            sentinel.public_address,\n        ) == self.user.get_metadata_by_issuer.return_value\n\n        mock_construct_issuer_with_public_address.assert_called_once_with(\n            sentinel.public_address,\n        )\n        self.user.get_metadata_by_issuer.assert_called_once_with(\n            mock_construct_issuer_with_public_address.return_value,\n        )\n\n    def test_get_metadata_by_public_address_and_any_wallet(\n        self,\n        mock_construct_issuer_with_public_address,\n    ):\n        self.user.get_metadata_by_issuer_and_wallet = mock.Mock(\n            return_value=self.metadata_with_wallets,\n        )\n\n        assert self.user.get_metadata_by_public_address_and_wallet(", "explanation": "Here is a concise summary:\n\nThis block defines two test functions for a user object's `get_metadata_by_public_address` method.\n\nFunctionality:\n\n1. The first function tests that the method returns metadata when provided with a public address.\n2. The second function tests that the method returns metadata with wallets when provided with a public address and a specific wallet type (`ANY`).", "metadata": {"repo": "magiclabs/magic-admin-python", "file": "tests/unit/resources/user_test.py", "chunk_number": 5, "total_chunks": 7}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** magiclabs/magic-admin-python\n**Purpose:** A Python implementation of Magic Admin, a web-based administrative interface for managing user data and authentication.\n**Content:** Codebase containing API endpoints, views, and models for managing users, roles, permissions, and other related functionality.", "file_summary": "Here's a concise summary of the file 'tests/unit/resources/user_test.py':\n\n**Summary:** This test file defines various test cases for user-related functionality in Magic Admin.\n\n**Key Functionality:**\n\n* Tests retrieval of user metadata by issuer, token, and public address\n* Verifies correct behavior of logout methods in different scenarios\n* Uses mocking to isolate dependencies and ensure correct behavior"}
{"code": "            sentinel.public_address,\n            WalletType.ANY,\n        ) == self.user.get_metadata_by_issuer_and_wallet.return_value\n\n        mock_construct_issuer_with_public_address.assert_called_once_with(\n            sentinel.public_address,\n        )\n        self.user.get_metadata_by_issuer_and_wallet.assert_called_once_with(\n            mock_construct_issuer_with_public_address.return_value,\n            WalletType.ANY,\n        )\n\n    def test_logout_by_issuer(self):\n        self.user.request = mock.Mock()\n\n        assert self.user.logout_by_issuer(\n            sentinel.issuer,\n        )\n\n        self.user.request.assert_called_once_with(\n            'post',\n            self.user.v2_user_logout,\n            data={\n                'issuer': sentinel.issuer,\n            },\n        )\n\n    def test_logout_by_public_address(\n        self,\n        mock_construct_issuer_with_public_address,\n    ):\n        self.user.logout_by_issuer = mock.Mock()\n\n        assert self.user.logout_by_public_address(", "explanation": "Here is a concise summary:\n\n**Purpose:** Test cases for user logout functionality.\n\n**Functionality:** These tests verify that the `logout_by_issuer` and `logout_by_public_address` methods correctly call the underlying request method with the required parameters. \n\nThese tests use mocking to isolate dependencies and ensure correct behavior.", "metadata": {"repo": "magiclabs/magic-admin-python", "file": "tests/unit/resources/user_test.py", "chunk_number": 6, "total_chunks": 7}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** magiclabs/magic-admin-python\n**Purpose:** A Python implementation of Magic Admin, a web-based administrative interface for managing user data and authentication.\n**Content:** Codebase containing API endpoints, views, and models for managing users, roles, permissions, and other related functionality.", "file_summary": "Here's a concise summary of the file 'tests/unit/resources/user_test.py':\n\n**Summary:** This test file defines various test cases for user-related functionality in Magic Admin.\n\n**Key Functionality:**\n\n* Tests retrieval of user metadata by issuer, token, and public address\n* Verifies correct behavior of logout methods in different scenarios\n* Uses mocking to isolate dependencies and ensure correct behavior"}
{"code": "            public_address,\n        ) == self.user.logout_by_issuer.return_value\n\n        mock_construct_issuer_with_public_address.assert_called_once_with(\n            public_address,\n        )\n        self.user.logout_by_issuer.assert_called_once_with(\n            mock_construct_issuer_with_public_address.return_value,\n        )\n\n    def test_logout_by_token(self):\n        self.user.logout_by_issuer = mock.Mock()\n\n        assert self.user.logout_by_token(\n            future_did_token,\n        ) == self.user.logout_by_issuer.return_value\n\n        self.user.Token.get_issuer.assert_called_once_with(future_did_token)\n        self.user.logout_by_issuer.assert_called_once_with(\n            self.user.Token.get_issuer.return_value,\n        )\n", "explanation": "Here is a summary of the code block:\n\n**Purpose:** Test the `logout_by_issuer` method in different scenarios.\n\n**Functionality:**\n\n1. Tests if `logout_by_issuer` with public address is called correctly.\n2. Tests if `logout_by_token` method uses the correct dependencies to call `logout_by_issuer`.", "metadata": {"repo": "magiclabs/magic-admin-python", "file": "tests/unit/resources/user_test.py", "chunk_number": 7, "total_chunks": 7}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** magiclabs/magic-admin-python\n**Purpose:** A Python implementation of Magic Admin, a web-based administrative interface for managing user data and authentication.\n**Content:** Codebase containing API endpoints, views, and models for managing users, roles, permissions, and other related functionality.", "file_summary": "Here's a concise summary of the file 'tests/unit/resources/user_test.py':\n\n**Summary:** This test file defines various test cases for user-related functionality in Magic Admin.\n\n**Key Functionality:**\n\n* Tests retrieval of user metadata by issuer, token, and public address\n* Verifies correct behavior of logout methods in different scenarios\n* Uses mocking to isolate dependencies and ensure correct behavior"}
{"code": "from magic_admin.response import MagicResponse\n\n\nclass TestMagicResponse:\n\n    content = 'troll_goat'\n    status_code = 200\n    resp_data = {'data': 'another_troll_goat'}\n\n    def test_response(self):\n        resp = MagicResponse(\n            content=self.content,\n            status_code=self.status_code,\n            resp_data=self.resp_data,\n        )\n\n        assert resp.content == self.content\n        assert resp.status_code == self.status_code\n        assert resp.data == self.resp_data['data']\n", "explanation": "Here is a concise summary:\n\n**Purpose:** Test the `MagicResponse` class functionality.\n\n**Functionality:** Creates an instance of `MagicResponse` with specified content, status code, and response data, then asserts that these values are correctly stored and retrieved.", "metadata": {"repo": "magiclabs/magic-admin-python", "file": "tests/unit/response_test.py", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** magiclabs/magic-admin-python\n**Purpose:** A Python implementation of Magic Admin, a web-based administrative interface for managing user data and authentication.\n**Content:** Codebase containing API endpoints, views, and models for managing users, roles, permissions, and other related functionality.", "file_summary": "Here's a concise holistic summary of the file 'tests/unit/response_test.py':\n\n**Tests the MagicResponse class**\n\nThis file tests the functionality of the `MagicResponse` class by creating instances with specified content, status code, and response data, then verifying that these values are correctly stored and retrieved."}
{"code": "import pytest\n\nfrom magic_admin.error import DIDTokenMalformed\nfrom magic_admin.utils.did_token import construct_issuer_with_public_address\nfrom magic_admin.utils.did_token import parse_public_address_from_issuer\nfrom testing.data.did_token import issuer\nfrom testing.data.did_token import public_address\n\n\nclass TestDIDToken:\n\n    malformed_issuer = 'troll_goat'\n\n    def test_parse_public_address_from_issuer(self):\n        assert parse_public_address_from_issuer(issuer) == public_address\n\n    def test_parse_public_address_from_issuer_raises_error(self):\n        with pytest.raises(DIDTokenMalformed) as e:\n            parse_public_address_from_issuer(self.malformed_issuer)\n\n        assert str(e.value) == \\\n            'Given issuer ({}) is malformed. Please make sure it follows the ' \\\n            '`did:method-name:method-specific-id` format.'.format(self.malformed_issuer)\n\n    def test_construct_issuer_with_public_address(self):\n        assert issuer == construct_issuer_with_public_address(public_address)\n", "explanation": "**Summary**\n\nThis block is a set of tests for DID (Decentralized Identifier) token utilities, written using the Pytest framework. It checks the functionality of two utility functions: \n\n1. `parse_public_address_from_issuer`: verifies that it correctly extracts the public address from a valid issuer.\n2. `construct_issuer_with_public_address`: confirms that it correctly constructs an issuer string from a given public address.\n\nThe tests also validate error handling for invalid issuers.", "metadata": {"repo": "magiclabs/magic-admin-python", "file": "tests/unit/utils/did_token_test.py", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** magiclabs/magic-admin-python\n**Purpose:** A Python implementation of Magic Admin, a web-based administrative interface for managing user data and authentication.\n**Content:** Codebase containing API endpoints, views, and models for managing users, roles, permissions, and other related functionality.", "file_summary": "Here is a concise holistic summary of the file 'tests/unit/utils/did_token_test.py':\n\n**Summary**\n\nThis Pytest test suite validates the functionality of two DID token utility functions: parsing public addresses from issuers and constructing issuer strings, while also testing error handling for invalid inputs."}
{"code": "import pytest\n\nfrom magic_admin.utils.http import null_safe\nfrom magic_admin.utils.http import parse_authorization_header_value\n\n\nclass TestNullSafe:\n\n    @pytest.mark.parametrize('value', [None, 'null', 'none', 'None', ''])\n    def test_returns_none(self, value):\n        assert null_safe(value) is None\n\n    def test_returns_value(self):\n        value = 'troll_goat'\n\n        assert null_safe(value) == value\n\n\nclass TestParseAuthHeaderValue:\n\n    malformed = 'wrong_format'\n    expected = 'Bearer troll_goat'\n\n    def test_returns_none_if_not_in_bearer_format(self):\n        assert parse_authorization_header_value(self.malformed) is None\n\n    def test_returns_value(self):\n        assert parse_authorization_header_value(self.expected) == 'troll_goat'\n", "explanation": "**Summary**\n\nThis block defines two test classes using Pytest, testing utility functions for HTTP requests:\n\n1. `null_safe`: returns None if input is null-like (None, 'null', etc.), otherwise returns original value.\n2. `parse_authorization_header_value`: extracts authentication token from Authorization header, returning None if invalid format.\n\n**Functionality**\n\nThese tests ensure the correctness of these utility functions in handling edge cases and valid inputs.", "metadata": {"repo": "magiclabs/magic-admin-python", "file": "tests/unit/utils/http_test.py", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** magiclabs/magic-admin-python\n**Purpose:** A Python implementation of Magic Admin, a web-based administrative interface for managing user data and authentication.\n**Content:** Codebase containing API endpoints, views, and models for managing users, roles, permissions, and other related functionality.", "file_summary": "Here is a holistic summary of the file 'tests/unit/utils/http_test.py':\n\nThis Pytest test suite ensures the correctness of two HTTP-related utility functions: `null_safe` (handles null-like values) and `parse_authorization_header_value` (extracts authentication tokens from Authorization headers), covering both edge cases and valid inputs."}
{"code": "from unittest import mock\n\nfrom magic_admin import did_token_nbf_grace_period_s\nfrom magic_admin.utils.time import apply_did_token_nbf_grace_period\nfrom magic_admin.utils.time import epoch_time_now\n\n\nclass TestTimeUtils:\n\n    def test_epoch_time_now(self):\n        with mock.patch('magic_admin.utils.time.time') as mock_time:\n            mock_time.time.return_value = 8084\n\n            assert epoch_time_now() == 8084\n\n        mock_time.time.assert_called_once_with()\n\n    def test_apply_did_token_nbf_grace_period(self):\n        timestamp = 8084\n        assert apply_did_token_nbf_grace_period(\n            timestamp,\n        ) == timestamp - did_token_nbf_grace_period_s\n", "explanation": "**Purpose:** Unit testing time-related utilities in Magic Admin.\n\n**Functionality:**\n\nThis block contains two test cases for `magic_admin`'s time utility functions:\n\n1. **Test epoch_time_now**: Verifies that `epoch_time_now()` returns the current timestamp.\n2. **Test apply_did_token_nbf_grace_period**: Confirms that `apply_did_token_nbf_grace_period()` subtracts a predefined grace period from a given timestamp.", "metadata": {"repo": "magiclabs/magic-admin-python", "file": "tests/unit/utils/time_test.py", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** magiclabs/magic-admin-python\n**Purpose:** A Python implementation of Magic Admin, a web-based administrative interface for managing user data and authentication.\n**Content:** Codebase containing API endpoints, views, and models for managing users, roles, permissions, and other related functionality.", "file_summary": "Here is a holistic summary of the file 'tests/unit/utils/time_test.py':\n\n**Unit tests for Magic Admin's time utilities:**\n\nThis module contains two test cases that verify the correctness of `epoch_time_now()` and `apply_did_token_nbf_grace_period()`, ensuring these functions accurately return the current timestamp and subtract a predefined grace period from given timestamps, respectively."}
{"code": "[tox]\nenvlist = py36\nskipsdist=True\n\n[testenv]\npassenv = HOME SSH_AUTH_SOCK USER\nenvdir = .virtualenv_run_test\ncommands =\n    pip install -r requirements.txt\n    pip install -r requirements-dev.txt\n    coverage erase\n    pytest -rxs -p no:warnings --durations=10 --cov=magic_admin --cov-fail-under=0 --cov-report=term-missing tests/\n    pre-commit install -f --install-hooks\n    pre-commit run --all-files\n\n[flake8]\nfilename = *.py\nmax-line-length = 100\n\n[pep8]\nignore = E265,E309,E501\n", "explanation": "Here is a concise summary:\n\n**Purpose:** Automation of testing and linting for Python projects.\n\n**Functionality:**\n\n* Installs dependencies from `requirements.txt` and `requirements-dev.txt`\n* Runs unit tests with coverage analysis\n* Installs and runs pre-commit hooks\n* Lints code using flake8 and pep8 tools", "metadata": {"repo": "magiclabs/magic-admin-python", "file": "tox.ini", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise summary:\n\n**Repository:** magiclabs/magic-admin-python\n**Purpose:** A Python implementation of Magic Admin, a web-based administrative interface for managing user data and authentication.\n**Content:** Codebase containing API endpoints, views, and models for managing users, roles, permissions, and other related functionality.", "file_summary": "Here is a concise summary of the file 'tox.ini':\n\n**Purpose:** Automate testing, linting, and dependency installation for Python projects.\n\n**Functionality:** Installs dependencies, runs unit tests with coverage analysis, enforces code style, and executes pre-commit hooks."}

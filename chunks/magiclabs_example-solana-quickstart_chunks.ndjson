{"code": "{\n  \"extends\": \"next/core-web-vitals\",\n  \"rules\": {\n    \"quotes\": [1, \"single\"],\n    \"indent\": [1, 2]\n  }\n}\n", "explanation": "This block is a configuration object for code style rules, specifically:\n\n* Extending the Next.js Web Vitals template\n* Enforcing single quotes for strings and an indentation of 2 spaces.", "metadata": {"repo": "magiclabs/example-solana-quickstart", "file": ".eslintrc.json", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** magiclabs/example-solana-quickstart\n**Purpose:** A basic Solana program template for quick development and testing.\n**Content:** A pre-configured Solana program with example code, including deployment scripts and test cases, demonstrating how to get started with Solana development.", "file_summary": "Here is a holistic summary of the file '.eslintrc.json':\n\n\"This ESLint configuration extends the Next.js Web Vitals template, enforcing single quotes for strings and 2-space indentation.\""}
{"code": "# Auto detect text files and perform LF normalization\n* text=auto\n", "explanation": "This block auto-detects text files and normalizes line endings to Unix-style (LF).", "metadata": {"repo": "magiclabs/example-solana-quickstart", "file": ".gitattributes", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** magiclabs/example-solana-quickstart\n**Purpose:** A basic Solana program template for quick development and testing.\n**Content:** A pre-configured Solana program with example code, including deployment scripts and test cases, demonstrating how to get started with Solana development.", "file_summary": "Here is a concise and to-the-point summary:\n\n**.gitattributes Summary**\n\nNormalizes text files to use Unix-style line endings (LF) automatically."}
{"code": "This scaffold is meant to help you bootstrap your own projects with Magic's [Dedicated Wallet](https://magic.link/docs/auth/overview). Magic is a developer SDK that integrates with your application to enable passwordless Web3 onboarding.\n\nThe folder structure of this scaffold is designed to encapsulate all things Magic into one place so you can easily add or remove components and functionality. For example, all Magic-specific components are in the `src/components/magic` directory while generic UI components are in the `src/components/ui` directory.\n\n## Next.js\n\nThis is a [Next.js](https://nextjs.org/) project bootstrapped with [`create-next-app`](https://github.com/vercel/next.js/tree/canary/packages/create-next-app).\n\n### Getting Started\n\nFirst, run the development server:\n\n```bash\nnpm run dev\n# or\nyarn dev\n# or\npnpm dev\n```\n\nOpen [http://localhost:3000](http://localhost:3000) with your browser to see the result.\n", "explanation": "**Summary**\n\nThis scaffold is a pre-built project template for creating Magic-enabled Web3 applications using Next.js, allowing for passwordless onboarding and encapsulating all Magic components in one place for easy modification.", "metadata": {"repo": "magiclabs/example-solana-quickstart", "file": "README.md", "chunk_number": 1, "total_chunks": 3}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** magiclabs/example-solana-quickstart\n**Purpose:** A basic Solana program template for quick development and testing.\n**Content:** A pre-configured Solana program with example code, including deployment scripts and test cases, demonstrating how to get started with Solana development.", "file_summary": "Here is a holistic summary of the file 'README.md':\n\n**Welcome to Magic-enabled Next.js Project**\n\nThis scaffold is a pre-built template for creating Web3 applications with passwordless onboarding using Magic components. Edit pages, access API routes, optimize fonts, and learn more about Next.js through external resources. Contribute to the project on GitHub or deploy on Vercel's platform."}
{"code": "You can start editing the page by modifying `pages/index.tsx`. The page auto-updates as you edit the file.\n\n[API routes](https://nextjs.org/docs/api-routes/introduction) can be accessed on [http://localhost:3000/api/hello](http://localhost:3000/api/hello). This endpoint can be edited in `pages/api/hello.ts`.\n\nThe `pages/api` directory is mapped to `/api/*`. Files in this directory are treated as [API routes](https://nextjs.org/docs/api-routes/introduction) instead of React pages.\n\nThis project uses [`next/font`](https://nextjs.org/docs/basic-features/font-optimization) to automatically optimize and load Inter, a custom Google Font.\n\n### Learn More\n\nTo learn more about Next.js, take a look at the following resources:\n\n- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.\n- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.\n", "explanation": "Here is a concise summary:\n\n**Purpose:** Introduction to editing a Next.js project.\n\n**Functionality:**\n\n* Edit `pages/index.tsx` for page updates\n* Access API routes at `http://localhost:3000/api/hello`\n* Use `next/font` for font optimization\n* Link to external resources for learning more about Next.js.", "metadata": {"repo": "magiclabs/example-solana-quickstart", "file": "README.md", "chunk_number": 2, "total_chunks": 3}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** magiclabs/example-solana-quickstart\n**Purpose:** A basic Solana program template for quick development and testing.\n**Content:** A pre-configured Solana program with example code, including deployment scripts and test cases, demonstrating how to get started with Solana development.", "file_summary": "Here is a holistic summary of the file 'README.md':\n\n**Welcome to Magic-enabled Next.js Project**\n\nThis scaffold is a pre-built template for creating Web3 applications with passwordless onboarding using Magic components. Edit pages, access API routes, optimize fonts, and learn more about Next.js through external resources. Contribute to the project on GitHub or deploy on Vercel's platform."}
{"code": "You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js/) - your feedback and contributions are welcome!\n\n### Deploy on Vercel\n\nThe easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.\n\nCheck out our [Next.js deployment documentation](https://nextjs.org/docs/deployment) for more details.\n", "explanation": "**Summary:** This block invites users to contribute to the Next.js project on GitHub, provides a link to deploy their Next.js app on Vercel's platform, and offers additional deployment documentation.", "metadata": {"repo": "magiclabs/example-solana-quickstart", "file": "README.md", "chunk_number": 3, "total_chunks": 3}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** magiclabs/example-solana-quickstart\n**Purpose:** A basic Solana program template for quick development and testing.\n**Content:** A pre-configured Solana program with example code, including deployment scripts and test cases, demonstrating how to get started with Solana development.", "file_summary": "Here is a holistic summary of the file 'README.md':\n\n**Welcome to Magic-enabled Next.js Project**\n\nThis scaffold is a pre-built template for creating Web3 applications with passwordless onboarding using Magic components. Edit pages, access API routes, optimize fonts, and learn more about Next.js through external resources. Contribute to the project on GitHub or deploy on Vercel's platform."}
{"code": "module.exports = {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n", "explanation": "This block configures a set of CSS plugins for use in a project, specifically:\n\n* Tailwind CSS (utility-first CSS framework)\n* Autoprefixer (prefixes CSS rules for browser compatibility)", "metadata": {"repo": "magiclabs/example-solana-quickstart", "file": "postcss.config.js", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** magiclabs/example-solana-quickstart\n**Purpose:** A basic Solana program template for quick development and testing.\n**Content:** A pre-configured Solana program with example code, including deployment scripts and test cases, demonstrating how to get started with Solana development.", "file_summary": "Here is a holistic summary of the `postcss.config.js` file:\n\nConfigures CSS plugins for project, including Tailwind CSS and Autoprefixer, ensuring cross-browser compatibility and utility-first styling."}
{"code": "<svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M12 2C6.47581 2 2 6.51613 2 12C2 17.5242 6.47581 22 12 22C17.4839 22 22 17.5242 22 12C22 6.51613 17.4839 2 12 2ZM11.9999 6.19352C11.2741 6.19352 10.7096 6.79835 10.7096 7.48384C10.7096 8.20964 11.2741 8.77416 11.9999 8.77416C12.6854 8.77416 13.2903 8.20964 13.2903 7.48384C13.2903 6.79835 12.6854 6.19352 11.9999 6.19352ZM10.5483 15.8709C10.2661 15.8709 10.0645 16.1129 10.0645 16.3548V16.6774C10.0645 16.9596 10.2661 17.1613 10.5483 17.1613H13.4515C13.6935 17.1613 13.9354 16.9596 13.9354 16.6774V16.3548C13.9354 16.1129 13.6935 15.8709 13.4515 15.8709H12.9677V10.2258C12.9677 9.98384 12.7257 9.7419 12.4838 9.7419H10.5483C10.2661 9.7419 10.0645 9.98384 10.0645 10.2258V10.5484C10.0645 10.8306 10.2661 11.0322 10.5483 11.0322H11.0322V15.8709H10.5483Z\" fill=\"#4E4D52\"/>\n</svg>", "explanation": "The purpose of this block is to display a graphical icon. The functionality is to render an SVG image of a magnifying glass, likely used for search or zooming purposes.", "metadata": {"repo": "magiclabs/example-solana-quickstart", "file": "public/info.svg", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** magiclabs/example-solana-quickstart\n**Purpose:** A basic Solana program template for quick development and testing.\n**Content:** A pre-configured Solana program with example code, including deployment scripts and test cases, demonstrating how to get started with Solana development.", "file_summary": "Here's a concise summary:\n\n`public/info.svg`: Displays a magnifying glass icon, likely used for search or zooming purposes."}
{"code": "<svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">", "explanation": "This is an SVG (Scalable Vector Graphics) block, which appears to be a graphic icon. Its purpose and functionality are likely decorative or illustrative, rather than serving a specific functional purpose.", "metadata": {"repo": "magiclabs/example-solana-quickstart", "file": "public/link.svg", "chunk_number": 1, "total_chunks": 3}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** magiclabs/example-solana-quickstart\n**Purpose:** A basic Solana program template for quick development and testing.\n**Content:** A pre-configured Solana program with example code, including deployment scripts and test cases, demonstrating how to get started with Solana development.", "file_summary": "Here is a concise summary:\n\nThe 'public/link.svg' file contains a custom-designed SVG graphic icon with a complex path definition, specified fill color \"#6851FF\", but currently empty/no content."}
{"code": "<path d=\"M5.38889 6.33333C5.38889 6.08285 5.48839 5.84263 5.66551 5.66551C5.84263 5.48839 6.08285 5.38889 6.33333 5.38889H10.1111C10.3616 5.38889 10.6018 5.28938 10.7789 5.11227C10.9561 4.93515 11.0556 4.69493 11.0556 4.44444C11.0556 4.19396 10.9561 3.95374 10.7789 3.77662C10.6018 3.5995 10.3616 3.5 10.1111 3.5H6.33333C5.58189 3.5 4.86122 3.79851 4.32986 4.32986C3.79851 4.86122 3.5 5.58189 3.5 6.33333V17.6667C3.5 18.4181 3.79851 19.1388 4.32986 19.6701C4.86122 20.2015 5.58189 20.5 6.33333 20.5H17.6667C18.4181 20.5 19.1388 20.2015 19.6701 19.6701C20.2015 19.1388 20.5 18.4181 20.5 17.6667V13.8889C20.5 13.6384 20.4005 13.3982 20.2234 13.2211C20.0463 13.0439 19.806 12.9444 19.5556 12.9444C19.3051 12.9444 19.0648 13.0439 18.8877 13.2211C18.7106 13.3982 18.6111 13.6384 18.6111 13.8889V17.6667C18.6111 17.9171 18.5116 18.1574 18.3345 18.3345C18.1574 18.5116 17.9171 18.6111 17.6667 18.6111H6.33333C6.08285 18.6111 5.84263 18.5116 5.66551 18.3345C5.48839 18.1574 5.38889 17.9171 5.38889 17.6667V6.33333ZM14.8333 3.5C14.5829 3.5 14.3426 3.5995 14.1655 3.77662C13.9884 3.95374 13.8889 4.19396 13.8889 4.44444C13.8889 4.69493 13.9884 4.93515 14.1655 5.11227C14.3426 5.28938 14.5829 5.38889 14.8333 5.38889H17.2757L11.3323 11.3323C11.1602 11.5104 11.065 11.749 11.0672 11.9966C11.0693 12.2442 11.1687 12.4811 11.3438 12.6562C11.5189 12.8313 11.7558 12.9307 12.0034 12.9328C12.251 12.935 12.4896 12.8398 12.6677 12.6677L18.6111 6.72433V9.16667C18.6111 9.41715 18.7106 9.65737 18.8877 9.83449C19.0648 10.0116 19.3051 10.1111 19.5556 10.1111C19.806 10.1111 20.0463 10.0116 20.2234 9.83449C20.4005 9.65737 20.5 9.41715 20.5 9.16667V4.44444C20.5 4.19396 20.4005 3.95374 20.2234 3.77662C20.0463 3.5995 19.806 3.5 19.5556 3.5H14.8333Z\" fill=\"#6851FF\"/>", "explanation": "This block is a graphical SVG element representing a shape, likely an icon or symbol. It has a complex path definition with multiple curves and lines, suggesting it's a custom-designed visual component. The `fill` attribute specifies its color as \"#6851FF\".", "metadata": {"repo": "magiclabs/example-solana-quickstart", "file": "public/link.svg", "chunk_number": 2, "total_chunks": 3}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** magiclabs/example-solana-quickstart\n**Purpose:** A basic Solana program template for quick development and testing.\n**Content:** A pre-configured Solana program with example code, including deployment scripts and test cases, demonstrating how to get started with Solana development.", "file_summary": "Here is a concise summary:\n\nThe 'public/link.svg' file contains a custom-designed SVG graphic icon with a complex path definition, specified fill color \"#6851FF\", but currently empty/no content."}
{"code": "</svg>\n", "explanation": "This is an SVG (Scalable Vector Graphics) element, a type of XML-based vector graphics file format. It appears to be empty or without content, likely intended for future insertion of graphical data.", "metadata": {"repo": "magiclabs/example-solana-quickstart", "file": "public/link.svg", "chunk_number": 3, "total_chunks": 3}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** magiclabs/example-solana-quickstart\n**Purpose:** A basic Solana program template for quick development and testing.\n**Content:** A pre-configured Solana program with example code, including deployment scripts and test cases, demonstrating how to get started with Solana development.", "file_summary": "Here is a concise summary:\n\nThe 'public/link.svg' file contains a custom-designed SVG graphic icon with a complex path definition, specified fill color \"#6851FF\", but currently empty/no content."}
{"code": "<svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">", "explanation": "This block is an SVG (Scalable Vector Graphics) element, which appears to be a small icon or image. Its purpose seems to be decorative or illustrative in nature, but its exact functionality cannot be determined without more context.", "metadata": {"repo": "magiclabs/example-solana-quickstart", "file": "public/link_white.svg", "chunk_number": 1, "total_chunks": 3}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** magiclabs/example-solana-quickstart\n**Purpose:** A basic Solana program template for quick development and testing.\n**Content:** A pre-configured Solana program with example code, including deployment scripts and test cases, demonstrating how to get started with Solana development.", "file_summary": "Here is a concise summary of the 'public/link_white.svg' file:\n\nA custom-designed graphical element in SVG format, likely an icon or button with a complex shape, used for decorative or illustrative purposes in a user interface or design context."}
{"code": "<path d=\"M5.38889 6.33333C5.38889 6.08285 5.48839 5.84263 5.66551 5.66551C5.84263 5.48839 6.08285 5.38889 6.33333 5.38889H10.1111C10.3616 5.38889 10.6018 5.28938 10.7789 5.11227C10.9561 4.93515 11.0556 4.69493 11.0556 4.44444C11.0556 4.19396 10.9561 3.95374 10.7789 3.77662C10.6018 3.5995 10.3616 3.5 10.1111 3.5H6.33333C5.58189 3.5 4.86122 3.79851 4.32986 4.32986C3.79851 4.86122 3.5 5.58189 3.5 6.33333V17.6667C3.5 18.4181 3.79851 19.1388 4.32986 19.6701C4.86122 20.2015 5.58189 20.5 6.33333 20.5H17.6667C18.4181 20.5 19.1388 20.2015 19.6701 19.6701C20.2015 19.1388 20.5 18.4181 20.5 17.6667V13.8889C20.5 13.6384 20.4005 13.3982 20.2234 13.2211C20.0463 13.0439 19.806 12.9444 19.5556 12.9444C19.3051 12.9444 19.0648 13.0439 18.8877 13.2211C18.7106 13.3982 18.6111 13.6384 18.6111 13.8889V17.6667C18.6111 17.9171 18.5116 18.1574 18.3345 18.3345C18.1574 18.5116 17.9171 18.6111 17.6667 18.6111H6.33333C6.08285 18.6111 5.84263 18.5116 5.66551 18.3345C5.48839 18.1574 5.38889 17.9171 5.38889 17.6667V6.33333ZM14.8333 3.5C14.5829 3.5 14.3426 3.5995 14.1655 3.77662C13.9884 3.95374 13.8889 4.19396 13.8889 4.44444C13.8889 4.69493 13.9884 4.93515 14.1655 5.11227C14.3426 5.28938 14.5829 5.38889 14.8333 5.38889H17.2757L11.3323 11.3323C11.1602 11.5104 11.065 11.749 11.0672 11.9966C11.0693 12.2442 11.1687 12.4811 11.3438 12.6562C11.5189 12.8313 11.7558 12.9307 12.0034 12.9328C12.251 12.935 12.4896 12.8398 12.6677 12.6677L18.6111 6.72433V9.16667C18.6111 9.41715 18.7106 9.65737 18.8877 9.83449C19.0648 10.0116 19.3051 10.1111 19.5556 10.1111C19.806 10.1111 20.0463 10.0116 20.2234 9.83449C20.4005 9.65737 20.5 9.41715 20.5 9.16667V4.44444C20.5 4.19396 20.4005 3.95374 20.2234 3.77662C20.0463 3.5995 19.806 3.5 19.5556 3.5H14.8333Z\" fill=\"#FFFFFF\"/>", "explanation": "This block is a SVG (Scalable Vector Graphics) path that represents an icon or graphic element, likely used in a user interface or design context. It has a complex shape with multiple curves and lines, but its purpose and functionality are not explicitly clear from the code itself. \n\nHowever, based on its appearance, it seems to be a custom-designed graphical element, possibly a button, tab, or other interactive component.", "metadata": {"repo": "magiclabs/example-solana-quickstart", "file": "public/link_white.svg", "chunk_number": 2, "total_chunks": 3}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** magiclabs/example-solana-quickstart\n**Purpose:** A basic Solana program template for quick development and testing.\n**Content:** A pre-configured Solana program with example code, including deployment scripts and test cases, demonstrating how to get started with Solana development.", "file_summary": "Here is a concise summary of the 'public/link_white.svg' file:\n\nA custom-designed graphical element in SVG format, likely an icon or button with a complex shape, used for decorative or illustrative purposes in a user interface or design context."}
{"code": "</svg>", "explanation": "This appears to be an SVG (Scalable Vector Graphics) file, likely a small graphic or icon.", "metadata": {"repo": "magiclabs/example-solana-quickstart", "file": "public/link_white.svg", "chunk_number": 3, "total_chunks": 3}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** magiclabs/example-solana-quickstart\n**Purpose:** A basic Solana program template for quick development and testing.\n**Content:** A pre-configured Solana program with example code, including deployment scripts and test cases, demonstrating how to get started with Solana development.", "file_summary": "Here is a concise summary of the 'public/link_white.svg' file:\n\nA custom-designed graphical element in SVG format, likely an icon or button with a complex shape, used for decorative or illustrative purposes in a user interface or design context."}
{"code": "<svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<g id=\"Logo\">\n<g id=\"Favicon\">\n<path d=\"M16 0C17.461 1.69611 19.0723 3.27125 20.8148 4.70713C19.6537 8.27674 19.0287 12.0692 19.0287 16C19.0287 19.9308 19.6537 23.7233 20.8148 27.2929C19.0723 28.7288 17.461 30.3039 16 32C14.539 30.3039 12.9277 28.7287 11.1852 27.2929C12.3463 23.7233 12.9713 19.9308 12.9713 16C12.9713 12.0692 12.3463 8.27675 11.1852 4.70713C12.9277 3.27126 14.539 1.69612 16 0Z\" fill=\"white\"/>\n<path d=\"M7.85464 24.8249C6.01021 23.5995 4.05274 22.5166 2 21.5929C2.56942 19.8237 2.87573 17.9458 2.87573 16C2.87573 14.0542 2.56942 12.1763 2 10.4071C4.05273 9.48345 6.0102 8.40049 7.85464 7.17508C8.55991 10.0081 8.93309 12.9628 8.93309 16C8.93309 19.0372 8.55991 21.9919 7.85464 24.8249Z\" fill=\"white\"/>", "explanation": "This block is an SVG (Scalable Vector Graphics) icon, specifically a logo or favicon, composed of two intersecting shapes. It has a width and height of 32 pixels and defines its own color scheme using white as the primary fill color.", "metadata": {"repo": "magiclabs/example-solana-quickstart", "file": "public/logo.svg", "chunk_number": 1, "total_chunks": 2}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** magiclabs/example-solana-quickstart\n**Purpose:** A basic Solana program template for quick development and testing.\n**Content:** A pre-configured Solana program with example code, including deployment scripts and test cases, demonstrating how to get started with Solana development.", "file_summary": "Here is a holistic summary of the file 'public/logo.svg':\n\nThe public/logo.svg file is a 32x32 pixel SVG icon that defines a decorative logo/favicon composed of two intersecting shapes, with a primary white fill color."}
{"code": "<path d=\"M23.0669 16C23.0669 19.0373 23.4401 21.9919 24.1454 24.8249C25.9898 23.5995 27.9473 22.5166 30 21.5929C29.4306 19.8237 29.1243 17.9458 29.1243 16C29.1243 14.0542 29.4306 12.1763 30 10.4071C27.9473 9.48345 25.9898 8.40049 24.1454 7.17507C23.4401 10.0081 23.0669 12.9628 23.0669 16Z\" fill=\"white\"/>\n</g>\n</g>\n</svg>", "explanation": "This is an SVG (Scalable Vector Graphics) code block that defines a single path element, which appears to be a geometric shape. Its purpose is primarily decorative, and its functionality is to display this visual element on a web page or other medium.", "metadata": {"repo": "magiclabs/example-solana-quickstart", "file": "public/logo.svg", "chunk_number": 2, "total_chunks": 2}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** magiclabs/example-solana-quickstart\n**Purpose:** A basic Solana program template for quick development and testing.\n**Content:** A pre-configured Solana program with example code, including deployment scripts and test cases, demonstrating how to get started with Solana development.", "file_summary": "Here is a holistic summary of the file 'public/logo.svg':\n\nThe public/logo.svg file is a 32x32 pixel SVG icon that defines a decorative logo/favicon composed of two intersecting shapes, with a primary white fill color."}
{"code": "import React from 'react';\nimport WalletMethods from './cards/WalletMethodsCard';\nimport SendTransaction from './cards/SendTransactionCard';\nimport Spacer from '@/components/ui/Spacer';\nimport { LoginProps } from '@/utils/types';\nimport UserInfo from './cards/UserInfoCard';\nimport DevLinks from './DevLinks';\nimport Header from './Header';\n\nexport default function Dashboard({ token, setToken }: LoginProps) {\n  return (\n    <div className=\"home-page\">\n      <Header />\n      <div className=\"cards-container\">\n        <UserInfo token={token} setToken={setToken} />\n        <Spacer size={10} />\n        <SendTransaction />\n        <Spacer size={10} />\n        <WalletMethods token={token} setToken={setToken} />\n        <Spacer size={15} />\n      </div>\n      <DevLinks primary />\n    </div>\n  );\n}\n", "explanation": "**Purpose:** A React dashboard component that displays user information, transaction capabilities, and wallet methods.\n\n**Functionality:**\n\n* Displays a header with unknown functionality ( likely navigation )\n* Shows three cards:\n\t+ User info with token management\n\t+ Transaction sending capabilities\n\t+ Wallet method information\n* Includes dev links for primary development purposes", "metadata": {"repo": "magiclabs/example-solana-quickstart", "file": "src/components/magic/Dashboard.tsx", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** magiclabs/example-solana-quickstart\n**Purpose:** A basic Solana program template for quick development and testing.\n**Content:** A pre-configured Solana program with example code, including deployment scripts and test cases, demonstrating how to get started with Solana development.", "file_summary": "Here is a holistic summary of the file 'src/components/magic/Dashboard.tsx':\n\nThis React component displays user information, transaction features, and wallet methods in a dashboard format, including navigation, token management, sending capabilities, and wallet details, with dev links for development purposes."}
{"code": "import classNames from 'classnames'\nimport Link from 'next/link'\n\nconst DevLinks = ({\n\tprimary = false,\n\tfooter = false,\n}: {\n\tprimary?: boolean\n\tfooter?: boolean\n}) => (\n\t<div className={`links ${footer ? 'footer-links' : ''}`}>\n\t\t<div className={`link ${primary ? 'text-[#6851ff]' : 'text-[#fff]'}`}>\n\t\t\t<a\n\t\t\t\thref='https://magic.link/docs/home/welcome'\n\t\t\t\ttarget='_blank'\n\t\t\t\trel='noreferrer'>\n\t\t\t\tDev Docs\n\t\t\t</a>\n\t\t</div>\n\t\t<div\n\t\t\tclassName={`link-divider ${\n\t\t\t\tprimary ? 'bg-[#DDDBE0]' : 'bg-[#a270d3]'\n\t\t\t}`}\n\t\t/>\n\t\t<div className={`link ${primary ? 'text-[#6851ff]' : 'text-[#fff]'}`}>\n\t\t\t<a\n\t\t\t\thref='https://dashboard.magic.link/signup'\n\t\t\t\ttarget='_blank'\n\t\t\t\trel='noreferrer'>\n\t\t\t\tDashboard\n\t\t\t</a>\n\t\t</div>\n\t\t<div\n\t\t\tclassName={`link-divider ${\n\t\t\t\tprimary ? 'bg-[#DDDBE0]' : 'bg-[#a270d3]'\n\t\t\t}`}\n\t\t/>\n\t\t<div className={`link ${primary ? 'text-[#6851ff]' : 'text-[#fff]'}`}>\n\t\t\t<a\n\t\t\t\thref='https://discord.gg/magiclabs'\n\t\t\t\ttarget='_blank'\n\t\t\t\trel='noreferrer'>\n\t\t\t\tDiscord\n\t\t\t</a>\n\t\t</div>\n\t</div>\n)\n\nexport default DevLinks\n", "explanation": "Here is a concise summary:\n\nThis block, named `DevLinks`, displays three links with customizable text color based on its \"primary\" state. It can be used in various contexts (e.g., header, footer) and contains links to documentation, dashboard, and Discord channel.", "metadata": {"repo": "magiclabs/example-solana-quickstart", "file": "src/components/magic/DevLinks.tsx", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** magiclabs/example-solana-quickstart\n**Purpose:** A basic Solana program template for quick development and testing.\n**Content:** A pre-configured Solana program with example code, including deployment scripts and test cases, demonstrating how to get started with Solana development.", "file_summary": "Here is a concise summary of the file 'src/components/magic/DevLinks.tsx':\n\n**DevLinks**: A reusable link component that displays 3 customizable links with color changing based on its state, useful for headers or footers."}
{"code": "import Image from 'next/image';\nimport Logo from 'public/logo.svg';\nimport DevLinks from './DevLinks';\n\nconst Header = () => {\n  return (\n    <div className=\"app-header-container\">\n      <div className=\"flex flex-col gap-2.5 items-center\">\n        <Image src={Logo} alt=\"logo\" />\n        <div className=\"text-center text-white text-xl font-extrabold font-['Inter'] leading-[30px]\">Magic</div>\n        <div className=\"text-center text-white text-opacity-50 text-base font-normal font-['SF Mono'] leading-normal\">\n          Demo\n        </div>\n      </div>\n      <DevLinks />\n    </div>\n  );\n};\n\nexport default Header;\n", "explanation": "**Summary**\n\nThis block is a React functional component named `Header`. It renders a header section with:\n\n* A logo image\n* The text \"Magic\" in a bold font\n* The text \"Demo\" in a lighter font\n* Links from `DevLinks` component below.\n\nIt appears to be part of a web application's layout.", "metadata": {"repo": "magiclabs/example-solana-quickstart", "file": "src/components/magic/Header.tsx", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** magiclabs/example-solana-quickstart\n**Purpose:** A basic Solana program template for quick development and testing.\n**Content:** A pre-configured Solana program with example code, including deployment scripts and test cases, demonstrating how to get started with Solana development.", "file_summary": "Here is a concise summary:\n\n**src/components/magic/Header.tsx**\n\nRenders a header section with logo, bold \"Magic\" text, light \"Demo\" text, and links from `DevLinks` component."}
{"code": "import { LoginProps } from '@/utils/types'\nimport Header from './Header'\n\nimport EmailOTP from './auth/EmailOTP';\n\nconst Login = ({ token, setToken }: LoginProps) => {\n  return (\n    <div className=\"login-page\">\n      <Header />\n      <div className={`max-w-[100%] grid grid-cols-1 grid-flow-row auto-rows-fr gap-5 p-4 mt-8`}>\n      \n      \n        <EmailOTP token={token} setToken={setToken} />      \n  \t\t\n      </div>\n    </div>\n  )\n}\n\nexport default Login\n", "explanation": "**Summary:**\n\nThis block defines a React component called \"Login\" that renders a login page with a header and an EmailOTP form. It accepts a `token` and `setToken` prop, likely for authentication purposes. The component exports the Login function as its default export.", "metadata": {"repo": "magiclabs/example-solana-quickstart", "file": "src/components/magic/Login.tsx", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** magiclabs/example-solana-quickstart\n**Purpose:** A basic Solana program template for quick development and testing.\n**Content:** A pre-configured Solana program with example code, including deployment scripts and test cases, demonstrating how to get started with Solana development.", "file_summary": "Here is a concise summary:\n\n**src/components/magic/Login.tsx**: A React login page component with EmailOTP form that handles token authentication."}
{"code": "import React, { useCallback } from 'react';\nimport DevLinks from './DevLinks';\nimport Image from 'next/image';\nimport Info from 'public/info.svg';\nimport Link from 'public/link_white.svg';\nimport Logo from 'public/logo.svg';\n\nconst MagicDashboardRedirect = () => {\n  const onClick = useCallback(() => {\n    window.open('https://dashboard.magic.link/signup', '_blank');\n  }, []);\n\n  return (\n    <div className=\"redirect-container\">\n      <div className=\"flex flex-col mt-10 gap-2.5 items-center\">\n        <Image src={Logo} alt=\"logo\" />\n        <div className=\"text-center text-white text-xl font-extrabold font-['Inter'] leading-[30px]\">Magic</div>\n        <div className=\"text-center text-white text-opacity-50 text-base font-normal font-['SF Mono'] leading-normal\">\n          Demo\n        </div>\n      </div>\n      <div className=\"flex flex-col items-center flex-1\">\n        <div className=\"redirect-card\">\n          <div className=\"flex gap-2 mx-4 my-2 \">\n            <Image src={Info} alt=\"logo\" />", "explanation": "Here is a concise summary:\n\n**Purpose:** Redirects user to Magic Dashboard sign-up page.\n\n**Functionality:** A React component that displays a dashboard logo, name, and demo text, with a button (hidden in this code snippet) that opens a new tab to the sign-up page when clicked.", "metadata": {"repo": "magiclabs/example-solana-quickstart", "file": "src/components/magic/MagicDashboardRedirect.tsx", "chunk_number": 1, "total_chunks": 2}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** magiclabs/example-solana-quickstart\n**Purpose:** A basic Solana program template for quick development and testing.\n**Content:** A pre-configured Solana program with example code, including deployment scripts and test cases, demonstrating how to get started with Solana development.", "file_summary": "Here is a concise summary of the file 'src/components/magic/MagicDashboardRedirect.tsx':\n\n**Purpose:** Redirects user to Magic Dashboard sign-up page.\n\n**Functionality:** Displays dashboard logo, name, demo text, and a button to open a new tab for sign-up or provides a prompt to set an API key via environment variable."}
{"code": "            <h3 className=\"max-w-[480px] text-[#4E4D52] text-base font-normal\">\n              Please set your <code>NEXT_PUBLIC_MAGIC_API_KEY</code> environment variable in <code>.env</code>. You can\n              get your Magic API key from the Magic Dashboard.\n            </h3>\n          </div>\n        </div>\n\n        <button className=\"api-button\" onClick={onClick} disabled={false}>\n          Get API keys\n          <Image src={Link} alt=\"link-icon\" className=\"ml-[6px] my-auto\" />\n        </button>\n      </div>\n      <DevLinks />\n    </div>\n  );\n};\n\nexport default MagicDashboardRedirect;\n", "explanation": "**Summary:**\n\nThis block displays a message prompting users to set an environment variable (`NEXT_PUBLIC_MAGIC_API_KEY`) in `.env` file, and provides a button to get API keys.", "metadata": {"repo": "magiclabs/example-solana-quickstart", "file": "src/components/magic/MagicDashboardRedirect.tsx", "chunk_number": 2, "total_chunks": 2}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** magiclabs/example-solana-quickstart\n**Purpose:** A basic Solana program template for quick development and testing.\n**Content:** A pre-configured Solana program with example code, including deployment scripts and test cases, demonstrating how to get started with Solana development.", "file_summary": "Here is a concise summary of the file 'src/components/magic/MagicDashboardRedirect.tsx':\n\n**Purpose:** Redirects user to Magic Dashboard sign-up page.\n\n**Functionality:** Displays dashboard logo, name, demo text, and a button to open a new tab for sign-up or provides a prompt to set an API key via environment variable."}
{"code": "import { getNetworkUrl } from '@/utils/network';\nimport { OAuthExtension } from '@magic-ext/oauth';\nimport { Magic as MagicBase } from 'magic-sdk';\nimport { ReactNode, createContext, useContext, useEffect, useMemo, useState } from 'react';\nimport { SolanaExtension } from '@magic-ext/solana';\nimport { Connection } from '@solana/web3.js';\n\nexport type Magic = MagicBase<OAuthExtension[] & SolanaExtension[]>;\n\ntype MagicContextType = {\n  magic: Magic | null;\n  connection: Connection | null;\n};\n\nconst MagicContext = createContext<MagicContextType>({\n  magic: null,\n  connection: null,\n});\n\nexport const useMagic = () => useContext(MagicContext);\n\nconst MagicProvider = ({ children }: { children: ReactNode }) => {\n  const [magic, setMagic] = useState<Magic | null>(null);\n  const [connection, setConnection] = useState<Connection | null>(null);\n\n  useEffect(() => {\n    if (process.env.NEXT_PUBLIC_MAGIC_API_KEY) {\n      const magic = new MagicBase(process.env.NEXT_PUBLIC_MAGIC_API_KEY as string, {\n        extensions: [", "explanation": "Here is a concise summary of the purpose and functionality of this code block:\n\n**Purpose:** Create a React context for managing Magic (an authentication library) and Solana connections.\n\n**Functionality:** The `MagicContext` provides access to the Magic instance and Solana connection through the `useMagic` hook. It initializes the Magic instance with an API key from the environment variables and sets up the Solana connection using the `SolanaExtension`.", "metadata": {"repo": "magiclabs/example-solana-quickstart", "file": "src/components/magic/MagicProvider.tsx", "chunk_number": 1, "total_chunks": 2}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** magiclabs/example-solana-quickstart\n**Purpose:** A basic Solana program template for quick development and testing.\n**Content:** A pre-configured Solana program with example code, including deployment scripts and test cases, demonstrating how to get started with Solana development.", "file_summary": "Here is a concise summary:\n\n**Summary:** The `MagicProvider` component initializes and provides Solana blockchain and Magic library connections through a React context, making them accessible to child components via the `useMagic` hook."}
{"code": "          new OAuthExtension(),\n          new SolanaExtension({\n            rpcUrl: getNetworkUrl(),\n          }),\n        ],\n      });\n      const connection = new Connection(getNetworkUrl());\n      setMagic(magic);\n      setConnection(connection);\n    }\n  }, []);\n\n  const value = useMemo(() => {\n    return {\n      magic,\n      connection,\n    };\n  }, [magic, connection]);\n\n  return <MagicContext.Provider value={value}>{children}</MagicContext.Provider>;\n};\n\nexport default MagicProvider;\n", "explanation": "**Summary:**\n\nThis code snippet is for a `MagicProvider` component that initializes and provides an instance of the Solana blockchain's JSON RPC extension, as well as sets up a Magic library connection. It then wraps its child components with a context provider, making these values available to them.", "metadata": {"repo": "magiclabs/example-solana-quickstart", "file": "src/components/magic/MagicProvider.tsx", "chunk_number": 2, "total_chunks": 2}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** magiclabs/example-solana-quickstart\n**Purpose:** A basic Solana program template for quick development and testing.\n**Content:** A pre-configured Solana program with example code, including deployment scripts and test cases, demonstrating how to get started with Solana development.", "file_summary": "Here is a concise summary:\n\n**Summary:** The `MagicProvider` component initializes and provides Solana blockchain and Magic library connections through a React context, making them accessible to child components via the `useMagic` hook."}
{"code": "import { useMagic } from '../MagicProvider';\nimport showToast from '@/utils/showToast';\nimport Spinner from '../../ui/Spinner';\nimport { RPCError, RPCErrorCode } from 'magic-sdk';\nimport { LoginProps } from '@/utils/types';\nimport { saveToken } from '@/utils/common';\nimport Card from '../../ui/Card';\nimport CardHeader from '../../ui/CardHeader';\nimport { useState } from 'react';\nimport FormInput from '@/components/ui/FormInput';\n\nconst EmailOTP = ({ token, setToken }: LoginProps) => {\n  const { magic } = useMagic();\n  const [email, setEmail] = useState('');\n  const [emailError, setEmailError] = useState(false);\n  const [isLoginInProgress, setLoginInProgress] = useState(false);\n\n  const handleLogin = async () => {\n    if (!email.match(/^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/)) {\n      setEmailError(true);\n    } else {\n      try {\n        setLoginInProgress(true);\n        setEmailError(false);\n        const token = await magic?.auth.loginWithEmailOTP({ email });\n        if (token) {", "explanation": "Here is a concise summary:\n\n**Block Purpose:** Login component for Magic authentication with Email OTP functionality.\n\n**Key Functionality:**\n\n* Handles login with Email OTP using Magic authentication library\n* Validates email format on input\n* Displays Spinner during login process\n* Shows error toast if email is invalid or login fails\n* Saves token to local storage upon successful login.", "metadata": {"repo": "magiclabs/example-solana-quickstart", "file": "src/components/magic/auth/EmailOTP.tsx", "chunk_number": 1, "total_chunks": 3}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** magiclabs/example-solana-quickstart\n**Purpose:** A basic Solana program template for quick development and testing.\n**Content:** A pre-configured Solana program with example code, including deployment scripts and test cases, demonstrating how to get started with Solana development.", "file_summary": "Here's a concise summary of the file 'src/components/magic/auth/EmailOTP.tsx':\n\n**Login Form with Magic Authentication**\n\nHandles email-based login, validates email format, displays spinner during login, saves token to local storage upon success, and shows error toast for invalid emails or login failures."}
{"code": "          saveToken(token, setToken, 'EMAIL');\n          setEmail('');\n        }\n      } catch (e) {\n        console.log('login error: ' + JSON.stringify(e));\n        if (e instanceof RPCError) {\n          switch (e.code) {\n            case RPCErrorCode.MagicLinkFailedVerification:\n            case RPCErrorCode.MagicLinkExpired:\n            case RPCErrorCode.MagicLinkRateLimited:\n            case RPCErrorCode.UserAlreadyLoggedIn:\n              showToast({ message: e.message, type: 'error' });\n              break;\n            default:\n              showToast({\n                message: 'Something went wrong. Please try again',\n                type: 'error',\n              });\n          }\n        }\n      } finally {\n        setLoginInProgress(false);\n      }\n    }\n  };\n\n  return (\n    <Card>\n      <CardHeader id=\"login\">Email OTP Login</CardHeader>\n      <div className=\"login-method-grid-item-container\">\n        <FormInput\n          onChange={(e) => {\n            if (emailError) setEmailError(false);", "explanation": "Here is a summary of the block:\n\n**Purpose:** Handle login process, including token saving and error handling.\n\n**Functionality:**\n\n1. Save token and clear email input.\n2. Catch any errors that occur during the login process.\n3. If an RPCError occurs:\n\t* Display a toast message based on the error code.\n4. Regardless of outcome, reset the \"login in progress\" state.", "metadata": {"repo": "magiclabs/example-solana-quickstart", "file": "src/components/magic/auth/EmailOTP.tsx", "chunk_number": 2, "total_chunks": 3}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** magiclabs/example-solana-quickstart\n**Purpose:** A basic Solana program template for quick development and testing.\n**Content:** A pre-configured Solana program with example code, including deployment scripts and test cases, demonstrating how to get started with Solana development.", "file_summary": "Here's a concise summary of the file 'src/components/magic/auth/EmailOTP.tsx':\n\n**Login Form with Magic Authentication**\n\nHandles email-based login, validates email format, displays spinner during login, saves token to local storage upon success, and shows error toast for invalid emails or login failures."}
{"code": "            setEmail(e.target.value);\n          }}\n          placeholder={token.length > 0 ? 'Already logged in' : 'Email'}\n          value={email}\n        />\n        {emailError && <span className=\"error\">Enter a valid email</span>}\n        <button\n          className=\"login-button\"\n          disabled={isLoginInProgress || (token.length > 0 ? false : email.length == 0)}\n          onClick={() => handleLogin()}\n        >\n          {isLoginInProgress ? <Spinner /> : 'Log in / Sign up'}\n        </button>\n      </div>\n    </Card>\n  );\n};\n\nexport default EmailOTP;\n", "explanation": "**Summary:**\n\nThis block is a login form that accepts an email address, displays an error message if invalid, and triggers a login process when the button is clicked.\n\nKey functionality:\n\n* Accepts email input\n* Displays error message for invalid email\n* Triggers login process on button click", "metadata": {"repo": "magiclabs/example-solana-quickstart", "file": "src/components/magic/auth/EmailOTP.tsx", "chunk_number": 3, "total_chunks": 3}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** magiclabs/example-solana-quickstart\n**Purpose:** A basic Solana program template for quick development and testing.\n**Content:** A pre-configured Solana program with example code, including deployment scripts and test cases, demonstrating how to get started with Solana development.", "file_summary": "Here's a concise summary of the file 'src/components/magic/auth/EmailOTP.tsx':\n\n**Login Form with Magic Authentication**\n\nHandles email-based login, validates email format, displays spinner during login, saves token to local storage upon success, and shows error toast for invalid emails or login failures."}
{"code": "import React, { useCallback, useEffect, useState } from 'react';\nimport Divider from '@/components/ui/Divider';\nimport { useMagic } from '../MagicProvider';\nimport FormButton from '@/components/ui/FormButton';\nimport FormInput from '@/components/ui/FormInput';\nimport ErrorText from '@/components/ui/ErrorText';\nimport Card from '@/components/ui/Card';\nimport CardHeader from '@/components/ui/CardHeader';\nimport { LAMPORTS_PER_SOL, PublicKey, SystemProgram, Transaction } from '@solana/web3.js';\nimport showToast from '@/utils/showToast';\nimport Spinner from '@/components/ui/Spinner';\nimport Spacer from '@/components/ui/Spacer';\nimport TransactionHistory from '@/components/ui/TransactionHistory';\n\nconst SendTransaction = () => {\n  const { magic, connection } = useMagic();\n  const [toAddress, setToAddress] = useState('');\n  const [amount, setAmount] = useState('');\n  const [disabled, setDisabled] = useState(!toAddress || !amount);\n  const [toAddressError, setToAddressError] = useState(false);", "explanation": "**Summary:**\n\nThis block is a React component named `SendTransaction`. Its purpose is to handle sending transactions on the Solana blockchain. It enables users to input a recipient address and amount, and upon submitting, it generates a transaction using the MagicProvider's `connection` object. The component also displays error messages, loading indicators, and transaction history.", "metadata": {"repo": "magiclabs/example-solana-quickstart", "file": "src/components/magic/cards/SendTransactionCard.tsx", "chunk_number": 1, "total_chunks": 6}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** magiclabs/example-solana-quickstart\n**Purpose:** A basic Solana program template for quick development and testing.\n**Content:** A pre-configured Solana program with example code, including deployment scripts and test cases, demonstrating how to get started with Solana development.", "file_summary": "Here is a concise summary of the 'src/components/magic/cards/SendTransactionCard.tsx' file:\n\n**Purpose:** Send transactions on Solana blockchain, manage state variables for Airdrop functionality.\n\n**Functionality:**\n\n* Handle transaction sending with error checking and UI updates\n* Validate recipient address and amount input\n* Display loading indicator, success messages, or error toasts accordingly\n* Update UI state with transaction history (if applicable)"}
{"code": "  const [amountError, setAmountError] = useState(false);\n  const [airdropLoading, setAirdropLoading] = useState(false);\n  const [hash, setHash] = useState('');\n  const [transactionLoading, setTransactionLoadingLoading] = useState(false);\n  const publicAddress = localStorage.getItem('user');\n\n  useEffect(() => {\n    setDisabled(!toAddress || !amount);\n    setAmountError(false);\n    setToAddressError(false);\n  }, [amount, toAddress]);\n\n  const handleAirdrop = useCallback(async () => {\n    try {\n      setAirdropLoading(true);\n      await connection?.requestAirdrop(new PublicKey(publicAddress as string), 2 * LAMPORTS_PER_SOL);\n      setAirdropLoading(false);\n      showToast({ message: 'Airdropped 2 SOL!', type: 'success' });\n    } catch (e: any) {\n      setAirdropLoading(false);\n      if ((e.message as string).includes('429')) {\n        showToast({ message: 'Limit reaced', type: 'error' });\n      } else {\n        showToast({\n          message: 'Something went wrong. Check console for more details',", "explanation": "Here is a concise summary:\n\n**Purpose:** Manage state variables for Airdrop functionality.\n\n**Functionality:**\n\n* Handle Airdrop button click:\n\t+ Show loading indicator\n\t+ Request Airdrop (2 SOL) from Solana connection\n\t+ Hide loading indicator and show success toast if successful\n\t+ Show error toast with limit reached message or generic error message if failed\n* Update state variables based on changes to `amount` and `toAddress` (e.g., disable button when either is empty).", "metadata": {"repo": "magiclabs/example-solana-quickstart", "file": "src/components/magic/cards/SendTransactionCard.tsx", "chunk_number": 2, "total_chunks": 6}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** magiclabs/example-solana-quickstart\n**Purpose:** A basic Solana program template for quick development and testing.\n**Content:** A pre-configured Solana program with example code, including deployment scripts and test cases, demonstrating how to get started with Solana development.", "file_summary": "Here is a concise summary of the 'src/components/magic/cards/SendTransactionCard.tsx' file:\n\n**Purpose:** Send transactions on Solana blockchain, manage state variables for Airdrop functionality.\n\n**Functionality:**\n\n* Handle transaction sending with error checking and UI updates\n* Validate recipient address and amount input\n* Display loading indicator, success messages, or error toasts accordingly\n* Update UI state with transaction history (if applicable)"}
{"code": "          type: 'error',\n        });\n      }\n      console.log(e);\n    }\n  }, [connection]);\n\n  const sendTransaction = useCallback(async () => {\n    const userPublicKey = new PublicKey(publicAddress as string);\n    const receiverPublicKey = new PublicKey(toAddress as string);\n    if (!PublicKey.isOnCurve(receiverPublicKey.toBuffer())) {\n      return setToAddressError(true);\n    }\n    if (isNaN(Number(amount))) {\n      return setAmountError(true);\n    }\n    setDisabled(true);\n\n    try {\n      setTransactionLoadingLoading(true);\n      const hash = await connection?.getLatestBlockhash();\n      if (!hash) return;\n\n      const transaction = new Transaction({\n        feePayer: userPublicKey,\n        ...hash,\n      });\n\n      const lamportsAmount = Number(amount) * LAMPORTS_PER_SOL;\n\n      console.log('amount: ' + lamportsAmount);\n\n      const transfer = SystemProgram.transfer({\n        fromPubkey: userPublicKey,\n        toPubkey: receiverPublicKey,\n        lamports: lamportsAmount,\n      });\n\n      transaction.add(transfer);\n", "explanation": "Here is a concise summary:\n\nThis block of code handles sending a transaction, checking for errors, and updating UI state accordingly.\n\nKey functionality includes:\n\n* Checking public key validity\n* Validating amount input\n* Sending a transfer transaction with a fee payer and receiver\n* Updating UI state to reflect loading and error statuses", "metadata": {"repo": "magiclabs/example-solana-quickstart", "file": "src/components/magic/cards/SendTransactionCard.tsx", "chunk_number": 3, "total_chunks": 6}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** magiclabs/example-solana-quickstart\n**Purpose:** A basic Solana program template for quick development and testing.\n**Content:** A pre-configured Solana program with example code, including deployment scripts and test cases, demonstrating how to get started with Solana development.", "file_summary": "Here is a concise summary of the 'src/components/magic/cards/SendTransactionCard.tsx' file:\n\n**Purpose:** Send transactions on Solana blockchain, manage state variables for Airdrop functionality.\n\n**Functionality:**\n\n* Handle transaction sending with error checking and UI updates\n* Validate recipient address and amount input\n* Display loading indicator, success messages, or error toasts accordingly\n* Update UI state with transaction history (if applicable)"}
{"code": "      const signedTransaction = await magic?.solana.signTransaction(transaction, {\n        requireAllSignatures: false,\n        verifySignatures: true,\n      });\n\n      const signature = await connection?.sendRawTransaction(\n        Buffer.from(signedTransaction?.rawTransaction as string, 'base64'),\n      );\n\n      setHash(signature ?? '');\n      showToast({\n        message: `Transaction successful sig: ${signature}`,\n        type: 'success',\n      });\n      setTransactionLoadingLoading(false);\n      setDisabled(false);\n      setToAddress('');\n      setAmount('');\n    } catch (e: any) {\n      setTransactionLoadingLoading(false);\n      setDisabled(false);\n      setToAddress('');\n      setAmount('');\n      showToast({ message: 'Transaction failed', type: 'error' });\n      console.log(e);\n    }\n  }, [connection, amount, publicAddress, toAddress]);\n\n  return (\n    <Card>\n      <CardHeader id=\"send-transaction\">Send Transaction</CardHeader>\n      <div>\n        <FormButton onClick={handleAirdrop} disabled={airdropLoading}>", "explanation": "Here is a concise summary of the purpose and functionality of this block:\n\n**Purpose:** Send a signed Solana transaction.\n\n**Functionality:**\n\n* Sign the transaction using `magic.solana.signTransaction()`.\n* Verify the signatures.\n* Send the raw transaction using `connection.sendRawTransaction()`.\n* Update UI state with success or failure message, hash, and disablement status.", "metadata": {"repo": "magiclabs/example-solana-quickstart", "file": "src/components/magic/cards/SendTransactionCard.tsx", "chunk_number": 4, "total_chunks": 6}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** magiclabs/example-solana-quickstart\n**Purpose:** A basic Solana program template for quick development and testing.\n**Content:** A pre-configured Solana program with example code, including deployment scripts and test cases, demonstrating how to get started with Solana development.", "file_summary": "Here is a concise summary of the 'src/components/magic/cards/SendTransactionCard.tsx' file:\n\n**Purpose:** Send transactions on Solana blockchain, manage state variables for Airdrop functionality.\n\n**Functionality:**\n\n* Handle transaction sending with error checking and UI updates\n* Validate recipient address and amount input\n* Display loading indicator, success messages, or error toasts accordingly\n* Update UI state with transaction history (if applicable)"}
{"code": "          {airdropLoading ? (\n            <div className=\"w-full loading-container\">\n              <Spinner />\n            </div>\n          ) : (\n            'Airdrop 2 SOL'\n          )}\n        </FormButton>\n        <Divider />\n      </div>\n\n      <FormInput\n        value={toAddress}\n        onChange={(e: any) => setToAddress(e.target.value)}\n        placeholder=\"Receiving Address\"\n      />\n      {toAddressError ? <ErrorText>Invalid address</ErrorText> : null}\n      <FormInput value={amount} onChange={(e: any) => setAmount(e.target.value)} placeholder={`Amount (SOL)`} />\n      {amountError ? <ErrorText className=\"error\">Invalid amount</ErrorText> : null}\n      <FormButton onClick={sendTransaction} disabled={!toAddress || !amount || disabled}>\n        {transactionLoading ? (\n          <div className=\"w-full loading-container\">\n            <Spinner />\n          </div>\n        ) : (\n          'Send Transaction'\n        )}\n      </FormButton>\n      {hash ? (\n        <>\n          <Spacer size={20} />", "explanation": "**Summary:**\n\nThis block is a transaction form with the following functionality:\n\n* Displays an \"Airdrop 2 SOL\" button while loading, or a \"Send Transaction\" button when ready.\n* Includes two input fields for recipient's address and amount (SOL) with validation errors displayed below if invalid.\n* A \"Send Transaction\" button that sends the transaction when clicked, displaying a progress indicator (Spinner) during the process.", "metadata": {"repo": "magiclabs/example-solana-quickstart", "file": "src/components/magic/cards/SendTransactionCard.tsx", "chunk_number": 5, "total_chunks": 6}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** magiclabs/example-solana-quickstart\n**Purpose:** A basic Solana program template for quick development and testing.\n**Content:** A pre-configured Solana program with example code, including deployment scripts and test cases, demonstrating how to get started with Solana development.", "file_summary": "Here is a concise summary of the 'src/components/magic/cards/SendTransactionCard.tsx' file:\n\n**Purpose:** Send transactions on Solana blockchain, manage state variables for Airdrop functionality.\n\n**Functionality:**\n\n* Handle transaction sending with error checking and UI updates\n* Validate recipient address and amount input\n* Display loading indicator, success messages, or error toasts accordingly\n* Update UI state with transaction history (if applicable)"}
{"code": "          <TransactionHistory />\n        </>\n      ) : null}\n    </Card>\n  );\n};\n\nexport default SendTransaction;\n", "explanation": "The `<Card>` component renders a \"Send Transaction\" interface, which includes a JSX fragment `<TransactionHistory />` if it's truthy (i.e., not `null`).", "metadata": {"repo": "magiclabs/example-solana-quickstart", "file": "src/components/magic/cards/SendTransactionCard.tsx", "chunk_number": 6, "total_chunks": 6}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** magiclabs/example-solana-quickstart\n**Purpose:** A basic Solana program template for quick development and testing.\n**Content:** A pre-configured Solana program with example code, including deployment scripts and test cases, demonstrating how to get started with Solana development.", "file_summary": "Here is a concise summary of the 'src/components/magic/cards/SendTransactionCard.tsx' file:\n\n**Purpose:** Send transactions on Solana blockchain, manage state variables for Airdrop functionality.\n\n**Functionality:**\n\n* Handle transaction sending with error checking and UI updates\n* Validate recipient address and amount input\n* Display loading indicator, success messages, or error toasts accordingly\n* Update UI state with transaction history (if applicable)"}
{"code": "import { useCallback, useEffect, useState } from 'react';\nimport Divider from '@/components/ui/Divider';\nimport { LoginProps } from '@/utils/types';\nimport { logout } from '@/utils/common';\nimport { useMagic } from '../MagicProvider';\nimport Card from '@/components/ui/Card';\nimport CardHeader from '@/components/ui/CardHeader';\nimport CardLabel from '@/components/ui/CardLabel';\nimport Spinner from '@/components/ui/Spinner';\nimport { getNetworkName } from '@/utils/network';\nimport { LAMPORTS_PER_SOL, PublicKey } from '@solana/web3.js';\n\nconst UserInfo = ({ token, setToken }: LoginProps) => {\n  const { magic, connection } = useMagic();\n\n  const [balance, setBalance] = useState('...');\n  const [copied, setCopied] = useState('Copy');\n  const [isRefreshing, setIsRefreshing] = useState(false);\n\n  const [publicAddress, setPublicAddress] = useState(localStorage.getItem('user'));\n\n  useEffect(() => {\n    const checkLoginandGetBalance = async () => {\n      const isLoggedIn = await magic?.user.isLoggedIn();", "explanation": "Here is a summary of the block:\n\n**Purpose:** Display user information, including balance and public address.\n\n**Functionality:**\n\n* Uses `useMagic` hook to access user data from MagicProvider\n* Displays public address (stored in local storage) and balance (retrieved from Solana blockchain)\n* Allows copying public address with a click event\n* Handles login status and refreshes balance display when needed.", "metadata": {"repo": "magiclabs/example-solana-quickstart", "file": "src/components/magic/cards/UserInfoCard.tsx", "chunk_number": 1, "total_chunks": 4}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** magiclabs/example-solana-quickstart\n**Purpose:** A basic Solana program template for quick development and testing.\n**Content:** A pre-configured Solana program with example code, including deployment scripts and test cases, demonstrating how to get started with Solana development.", "file_summary": "Here is a concise summary of the file 'src/components/magic/cards/UserInfoCard.tsx':\n\n**Purpose:** Display user information (public address and balance) while managing wallet connection, disconnection, and login status.\n\n**Functionality:** Fetches user metadata on login, updates balance display every 500ms with a refresh button, copies public address to clipboard, and logs out user if disconnected."}
{"code": "      if (isLoggedIn) {\n        try {\n          const metadata = await magic?.user.getInfo();\n          if (metadata) {\n            localStorage.setItem('user', metadata?.publicAddress!);\n            setPublicAddress(metadata?.publicAddress!);\n          }\n        } catch (e) {\n          console.log('error in fetching address: ' + e);\n        }\n      }\n    };\n    setTimeout(() => checkLoginandGetBalance(), 5000);\n  }, []);\n\n  const getBalance = useCallback(async () => {\n    if (publicAddress && connection) {\n      const balance = await connection.getBalance(new PublicKey(publicAddress));\n      if (balance == 0) {\n        setBalance('0');\n      } else {\n        setBalance((balance / LAMPORTS_PER_SOL).toString());\n      }\n      console.log('BALANCE: ', balance);\n    }\n  }, [connection, publicAddress]);\n\n  const refresh = useCallback(async () => {\n    setIsRefreshing(true);\n    await getBalance();\n    setTimeout(() => {\n      setIsRefreshing(false);\n    }, 500);\n  }, [getBalance]);\n\n  useEffect(() => {\n    if (connection) {", "explanation": "Here is a concise summary:\n\n**Purpose:** Fetch user data, store public address, and update balance on login.\n\n**Functionality:**\n\n* Checks if user is logged in every 5 seconds.\n* If logged in, fetches user metadata and stores public address locally.\n* Updates balance every 500ms (with a refresh button) using the stored public address.", "metadata": {"repo": "magiclabs/example-solana-quickstart", "file": "src/components/magic/cards/UserInfoCard.tsx", "chunk_number": 2, "total_chunks": 4}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** magiclabs/example-solana-quickstart\n**Purpose:** A basic Solana program template for quick development and testing.\n**Content:** A pre-configured Solana program with example code, including deployment scripts and test cases, demonstrating how to get started with Solana development.", "file_summary": "Here is a concise summary of the file 'src/components/magic/cards/UserInfoCard.tsx':\n\n**Purpose:** Display user information (public address and balance) while managing wallet connection, disconnection, and login status.\n\n**Functionality:** Fetches user metadata on login, updates balance display every 500ms with a refresh button, copies public address to clipboard, and logs out user if disconnected."}
{"code": "      refresh();\n    }\n  }, [connection, refresh]);\n\n  useEffect(() => {\n    setBalance('...');\n  }, [magic]);\n\n  const disconnect = useCallback(async () => {\n    if (magic) {\n      await logout(setToken, magic);\n    }\n  }, [magic, setToken]);\n\n  const copy = useCallback(() => {\n    if (publicAddress && copied === 'Copy') {\n      setCopied('Copied!');\n      navigator.clipboard.writeText(publicAddress);\n      setTimeout(() => {\n        setCopied('Copy');\n      }, 1000);\n    }\n  }, [copied, publicAddress]);\n\n  return (\n    <Card>\n      <CardHeader id=\"Wallet\">Wallet</CardHeader>\n      <CardLabel leftHeader=\"Status\" rightAction={<div onClick={disconnect}>Disconnect</div>} isDisconnect />\n      <div className=\"flex-row\">\n        <div className=\"green-dot\" />\n        <div className=\"connected\">Connected to {getNetworkName()}</div>\n      </div>\n      <Divider />\n      <CardLabel leftHeader=\"Address\" rightAction={!publicAddress ? <Spinner /> : <div onClick={copy}>{copied}</div>} />", "explanation": "Here is a concise summary:\n\n**Purpose:** This block manages wallet connection and disconnection, balance display, and address copying.\n\n**Functionality:**\n\n* Refreshes the page on disconnect or refresh.\n* Updates balance based on magic value.\n* Logs out user on disconnect if magic exists.\n* Copies public address to clipboard when clicked.", "metadata": {"repo": "magiclabs/example-solana-quickstart", "file": "src/components/magic/cards/UserInfoCard.tsx", "chunk_number": 3, "total_chunks": 4}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** magiclabs/example-solana-quickstart\n**Purpose:** A basic Solana program template for quick development and testing.\n**Content:** A pre-configured Solana program with example code, including deployment scripts and test cases, demonstrating how to get started with Solana development.", "file_summary": "Here is a concise summary of the file 'src/components/magic/cards/UserInfoCard.tsx':\n\n**Purpose:** Display user information (public address and balance) while managing wallet connection, disconnection, and login status.\n\n**Functionality:** Fetches user metadata on login, updates balance display every 500ms with a refresh button, copies public address to clipboard, and logs out user if disconnected."}
{"code": "      <div className=\"code\">{publicAddress?.length == 0 ? 'Fetching address..' : publicAddress}</div>\n      <Divider />\n      <CardLabel\n        leftHeader=\"Balance\"\n        rightAction={\n          isRefreshing ? (\n            <div className=\"loading-container\">\n              <Spinner />\n            </div>\n          ) : (\n            <div onClick={refresh}>Refresh</div>\n          )\n        }\n      />\n      <div className=\"code\">{balance} SOL</div>\n    </Card>\n  );\n};\n\nexport default UserInfo;\n", "explanation": "Here is a summary of the purpose and functionality:\n\n**Purpose:** Display user information, specifically their public address and balance.\n\n**Functionality:** Shows either \"Fetching address..\" or the actual public address, accompanied by the user's balance in SOL. Also displays a refresh button with a spinner indicator when refreshing data.", "metadata": {"repo": "magiclabs/example-solana-quickstart", "file": "src/components/magic/cards/UserInfoCard.tsx", "chunk_number": 4, "total_chunks": 4}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** magiclabs/example-solana-quickstart\n**Purpose:** A basic Solana program template for quick development and testing.\n**Content:** A pre-configured Solana program with example code, including deployment scripts and test cases, demonstrating how to get started with Solana development.", "file_summary": "Here is a concise summary of the file 'src/components/magic/cards/UserInfoCard.tsx':\n\n**Purpose:** Display user information (public address and balance) while managing wallet connection, disconnection, and login status.\n\n**Functionality:** Fetches user metadata on login, updates balance display every 500ms with a refresh button, copies public address to clipboard, and logs out user if disconnected."}
{"code": "import React, {useState} from 'react'\nimport Disconnect from '../wallet-methods/Disconnect'\nimport Divider from '@/components/ui/Divider'\nimport {LoginProps} from '@/utils/types'\nimport Card from '@/components/ui/Card'\nimport CardHeader from '@/components/ui/CardHeader'\nimport {LoginMethod} from '@/utils/common'\nimport GetIdToken from '../wallet-methods/GetIdToken'\nimport GetMetadata from '../wallet-methods/GetMetadata'\n\nimport UpdateEmail from '../wallet-methods/UpdateEmail'\n\nconst WalletMethods = ({token, setToken}: LoginProps) => {\n\tconst [loginMethod, setLoginMethod] = useState<LoginMethod | null>(\n\t\tlocalStorage.getItem('loginMethod') as LoginMethod\n\t)\n\treturn (\n\t\t<Card>\n\t\t\t<CardHeader id='methods'>Wallet Methods</CardHeader>\n\t\t\t\n\t\t\t\t{loginMethod && loginMethod == 'EMAIL' && (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<UpdateEmail />\n\t\t\t\t\t\t<Divider />\n\t\t\t\t\t</>\n\t\t\t\t)}\t\t\t\n\t\t\t<GetIdToken />\n\t\t\t<Divider />\n\t\t\t<GetMetadata />\n\t\t\t<Divider />\n\t\t\t<Disconnect token={token} setToken={setToken} />\n\t\t</Card>\n\t)\n}\n\nexport default WalletMethods\n", "explanation": "**Summary:**\n\nThis block is a React component (`WalletMethods`) that displays wallet-related methods, including:\n\n* Methods for email-based login and updating email addresses (if the `loginMethod` is set to 'EMAIL')\n* Getting an ID token and metadata\n* Disconnecting from the wallet\n\nThe component uses state and local storage to manage its functionality.", "metadata": {"repo": "magiclabs/example-solana-quickstart", "file": "src/components/magic/cards/WalletMethodsCard.tsx", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** magiclabs/example-solana-quickstart\n**Purpose:** A basic Solana program template for quick development and testing.\n**Content:** A pre-configured Solana program with example code, including deployment scripts and test cases, demonstrating how to get started with Solana development.", "file_summary": "Here is a holistic summary of the file 'src/components/magic/cards/WalletMethodsCard.tsx':\n\nThis React component displays wallet-related methods, including email login, ID token retrieval, metadata access, and disconnection, utilizing state and local storage for management."}
{"code": "import React, {useCallback, useState} from 'react'\nimport {logout} from '@/utils/common'\nimport {LoginProps} from '@/utils/types'\nimport {useMagic} from '../MagicProvider'\nimport Spinner from '@/components/ui/Spinner'\n\nconst Disconnect = ({setToken}: LoginProps) => {\n\tconst {magic} = useMagic()\n\tconst [disabled, setDisabled] = useState(false)\n\n\tconst disconnect = useCallback(async () => {\n\t\tif (!magic) return\n\t\ttry {\n\t\t\tsetDisabled(true)\n\t\t\tawait logout(setToken, magic)\n\t\t\tsetDisabled(false)\n\t\t} catch (error) {\n\t\t\tsetDisabled(false)\n\t\t\tconsole.error(error)\n\t\t}\n\t}, [magic, setToken])\n\n\treturn (\n\t\t<div className='wallet-method-container'>\n\t\t\t<button\n\t\t\t\tclassName='wallet-method'\n\t\t\t\tonClick={disconnect}\n\t\t\t\tdisabled={disabled}>\n\t\t\t\t{disabled ? (\n\t\t\t\t\t<div className='loading-container w-[115px]'>\n\t\t\t\t\t\t<Spinner />\n\t\t\t\t\t</div>\n\t\t\t\t) : (\n\t\t\t\t\t'disconnect()'\n\t\t\t\t)}\n\t\t\t</button>\n\t\t\t<div className='wallet-method-desc'>\n\t\t\t\tDisconnects user from dApp.\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n\nexport default Disconnect\n", "explanation": "Here is a concise summary:\n\n**Purpose:** A React component that disconnects a user from a dApp.\n\n**Functionality:** It logs out the user using the `logout` function, displaying a spinner while the process completes, and updates the token state via the `setToken` prop.", "metadata": {"repo": "magiclabs/example-solana-quickstart", "file": "src/components/magic/wallet-methods/Disconnect.tsx", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** magiclabs/example-solana-quickstart\n**Purpose:** A basic Solana program template for quick development and testing.\n**Content:** A pre-configured Solana program with example code, including deployment scripts and test cases, demonstrating how to get started with Solana development.", "file_summary": "Here is a concise summary:\n\n**Disconnect Component:**\nA React component that disConnects a user from a dApp, logging out the user, displaying a progress indicator, and updating the token state via the `setToken` prop."}
{"code": "import React, {useCallback, useState} from 'react'\nimport {useMagic} from '../MagicProvider'\nimport showToast from '@/utils/showToast'\nimport Spinner from '@/components/ui/Spinner'\n\nconst GetIdToken = () => {\n\tconst {magic} = useMagic()\n\tconst [disabled, setDisabled] = useState(false)\n\n\tconst getWalletType = useCallback(async () => {\n\t\tif (!magic) return\n\t\ttry {\n\t\t\tsetDisabled(true)\n\t\t\tconst idToken = await magic.user.getIdToken()\n\t\t\tsetDisabled(false)\n\t\t\tconsole.log('ID Token: ' + idToken)\n\t\t\tshowToast({\n\t\t\t\tmessage: 'Please check console for the ID Token Log',\n\t\t\t\ttype: 'success',\n\t\t\t})\n\t\t} catch (error) {\n\t\t\tsetDisabled(false)\n\t\t\tconsole.error(error)\n\t\t}\n\t}, [magic])\n\n\treturn (\n\t\t<div className='wallet-method-container'>\n\t\t\t<button\n\t\t\t\tclassName='wallet-method'\n\t\t\t\tonClick={getWalletType}\n\t\t\t\tdisabled={disabled}>\n\t\t\t\t{disabled ? (\n\t\t\t\t\t<div className='loading-container w-[86px]'>\n\t\t\t\t\t\t<Spinner />\n\t\t\t\t\t</div>\n\t\t\t\t) : (\n\t\t\t\t\t'getIdToken()'\n\t\t\t\t)}\n\t\t\t</button>\n\t\t\t<div className='wallet-method-desc'>", "explanation": "**Summary:**\n\nThis block is a React functional component named `GetIdToken`. Its purpose is to retrieve an ID token from a user's wallet using the Magic provider. When clicked, it logs the ID token to the console and displays a success message via a toast notification. If an error occurs, it catches and logs the error instead.", "metadata": {"repo": "magiclabs/example-solana-quickstart", "file": "src/components/magic/wallet-methods/GetIdToken.tsx", "chunk_number": 1, "total_chunks": 2}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** magiclabs/example-solana-quickstart\n**Purpose:** A basic Solana program template for quick development and testing.\n**Content:** A pre-configured Solana program with example code, including deployment scripts and test cases, demonstrating how to get started with Solana development.", "file_summary": "Here is a concise summary:\n\n**GetIdToken.tsx**\n\nA React component that retrieves an ID token from a user's wallet using Magic provider, logging it to console and displaying success message on click."}
{"code": "\t\t\t\tGenerates a Decentralized Id Token which acts as a proof of\n\t\t\t\tauthentication to resource servers.\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n\nexport default GetIdToken\n", "explanation": "This block generates a decentralized ID token, serving as proof of authentication for external resources.", "metadata": {"repo": "magiclabs/example-solana-quickstart", "file": "src/components/magic/wallet-methods/GetIdToken.tsx", "chunk_number": 2, "total_chunks": 2}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** magiclabs/example-solana-quickstart\n**Purpose:** A basic Solana program template for quick development and testing.\n**Content:** A pre-configured Solana program with example code, including deployment scripts and test cases, demonstrating how to get started with Solana development.", "file_summary": "Here is a concise summary:\n\n**GetIdToken.tsx**\n\nA React component that retrieves an ID token from a user's wallet using Magic provider, logging it to console and displaying success message on click."}
{"code": "import React, { useCallback, useState } from 'react';\nimport showToast from '@/utils/showToast';\nimport { useMagic } from '../MagicProvider';\nimport Spinner from '@/components/ui/Spinner';\n\nconst GetMetadata = () => {\n  const { magic } = useMagic();\n  const [disabled, setDisabled] = useState(false);\n\n  const getMetadata = useCallback(async () => {\n    if (!magic) return;\n    try {\n      setDisabled(true);\n      const userInfo = await magic.user.getInfo();\n      setDisabled(false);\n      showToast({\n        message: `Public Address: ${userInfo.publicAddress}`,\n        type: 'success',\n      });\n    } catch (error) {\n      setDisabled(false);\n      console.error(error);\n    }\n  }, [magic]);\n\n  return (\n    <div className=\"wallet-method-container\">\n      <button className=\"wallet-method\" onClick={getMetadata} disabled={disabled}>\n        {disabled ? (\n          <div className=\"loading-container w-[220px]\">\n            <Spinner />\n          </div>\n        ) : (\n          'getInfo()'\n        )}\n      </button>", "explanation": "Here is a concise summary:\n\n**Purpose:** Retrieves user metadata via Magic API and displays it as a toast notification.\n\n**Functionality:** Button that, when clicked, fetches user info, shows a loading spinner until complete, and then displays the public address in a success toast message.", "metadata": {"repo": "magiclabs/example-solana-quickstart", "file": "src/components/magic/wallet-methods/GetMetadata.tsx", "chunk_number": 1, "total_chunks": 2}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** magiclabs/example-solana-quickstart\n**Purpose:** A basic Solana program template for quick development and testing.\n**Content:** A pre-configured Solana program with example code, including deployment scripts and test cases, demonstrating how to get started with Solana development.", "file_summary": "Here is a concise holistic summary of the file 'src/components/magic/wallet-methods/GetMetadata.tsx':\n\n**Summary**: Retrieves user metadata via Magic API, displaying it as a toast notification with public address upon completion."}
{"code": "      <div className=\"wallet-method-desc\">Retrieves information for the authenticated user.</div>\n    </div>\n  );\n};\n\nexport default GetMetadata;\n", "explanation": "**Purpose:** Retrieves metadata for the authenticated user.\n\n**Functionality:** Returns information about the logged-in user.", "metadata": {"repo": "magiclabs/example-solana-quickstart", "file": "src/components/magic/wallet-methods/GetMetadata.tsx", "chunk_number": 2, "total_chunks": 2}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** magiclabs/example-solana-quickstart\n**Purpose:** A basic Solana program template for quick development and testing.\n**Content:** A pre-configured Solana program with example code, including deployment scripts and test cases, demonstrating how to get started with Solana development.", "file_summary": "Here is a concise holistic summary of the file 'src/components/magic/wallet-methods/GetMetadata.tsx':\n\n**Summary**: Retrieves user metadata via Magic API, displaying it as a toast notification with public address upon completion."}
{"code": "import React, {useCallback, useState} from 'react'\nimport ErrorText from '@/components/ui/ErrorText'\nimport Spacer from '@/components/ui/Spacer'\nimport {useMagic} from '../MagicProvider'\nimport Spinner from '@/components/ui/Spinner'\nimport FormInput from '@/components/ui/FormInput'\nimport showToast from '@/utils/showToast'\nimport {RPCError} from 'magic-sdk'\n\nconst UpdateEmail = () => {\n\tconst {magic} = useMagic()\n\tconst [disabled, setDisabled] = useState(false)\n\tconst [email, setEmail] = useState('')\n\tconst [emailError, setEmailError] = useState(false)\n\n\tconst updateEmail = useCallback(async () => {\n\t\tif (!magic) return\n\t\ttry {\n\t\t\tif (\n\t\t\t\t!email.match(\n\t\t\t\t\t/^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\tsetEmailError(true)\n\t\t\t\tsetDisabled(false)\n\t\t\t} else {\n\t\t\t\tsetDisabled(true)\n\t\t\t\tawait magic.auth.updateEmailWithUI({email, showUI: true})\n\t\t\t\tshowToast({message: 'Email Updated!', type: 'success'})\n\t\t\t\tsetDisabled(false)\n\t\t\t\tsetEmail('')\n\t\t\t}\n\t\t} catch (error) {", "explanation": "**Summary**\n\nThis React component (`UpdateEmail`) allows users to update their email address using Magic SDK's `updateEmailWithUI` method. It validates user input, displays a loading spinner while updating, and shows a toast notification upon success or error.", "metadata": {"repo": "magiclabs/example-solana-quickstart", "file": "src/components/magic/wallet-methods/UpdateEmail.tsx", "chunk_number": 1, "total_chunks": 3}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** magiclabs/example-solana-quickstart\n**Purpose:** A basic Solana program template for quick development and testing.\n**Content:** A pre-configured Solana program with example code, including deployment scripts and test cases, demonstrating how to get started with Solana development.", "file_summary": "Here's a concise summary:\n\n**UpdateEmail Component:**\n\nUpdates user email address using Magic SDK, validating input, displaying loading spinner, and showing toast notifications upon success or error."}
{"code": "\t\t\tsetDisabled(false)\n\t\t\tconsole.error(error)\n\t\t\tif (error instanceof RPCError) {\n\t\t\t\tshowToast({message: error.message, type: 'error'})\n\t\t\t} else {\n\t\t\t\tshowToast({message: 'Update email failed', type: 'error'})\n\t\t\t}\n\t\t}\n\t}, [magic, email])\n\n\tconst handleEmailChange = (e: any) => {\n\t\tsetEmailError(false)\n\t\tsetEmail(e.target.value)\n\t}\n\n\treturn (\n\t\t<div className='wallet-method-container'>\n\t\t\t<FormInput\n\t\t\t\tvalue={email}\n\t\t\t\tonChange={handleEmailChange}\n\t\t\t\tplaceholder='New Email'\n\t\t\t/>\n\t\t\t<button\n\t\t\t\tclassName='wallet-method'\n\t\t\t\tonClick={updateEmail}\n\t\t\t\tdisabled={disabled}>\n\t\t\t\t{disabled ? (\n\t\t\t\t\t<div className='loading-container w-[76px]'>\n\t\t\t\t\t\t<Spinner />\n\t\t\t\t\t</div>\n\t\t\t\t) : (\n\t\t\t\t\t'updateEmail()'\n\t\t\t\t)}\n\t\t\t</button>\n\t\t\t<div className='wallet-method-desc'>\n\t\t\t\tInitiates the update email flow that allows a user to change\n\t\t\t\ttheir email address.\n\t\t\t</div>\n\t\t\t{emailError ? (\n\t\t\t\t<div className='mb-[-10px]'>\n\t\t\t\t\t<Spacer size={20} />\n\t\t\t\t\t<ErrorText>Enter a valid email!</ErrorText>\n\t\t\t\t</div>\n\t\t\t) : null}\n\t\t</div>\n\t)\n}\n", "explanation": "**Purpose:** Update user's email address functionality.\n\n**Functionality:**\n\n* Handles form input for new email\n* Updates email value on change\n* Initiates update email flow when button is clicked\n* Displays error message if update fails or invalid email is entered", "metadata": {"repo": "magiclabs/example-solana-quickstart", "file": "src/components/magic/wallet-methods/UpdateEmail.tsx", "chunk_number": 2, "total_chunks": 3}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** magiclabs/example-solana-quickstart\n**Purpose:** A basic Solana program template for quick development and testing.\n**Content:** A pre-configured Solana program with example code, including deployment scripts and test cases, demonstrating how to get started with Solana development.", "file_summary": "Here's a concise summary:\n\n**UpdateEmail Component:**\n\nUpdates user email address using Magic SDK, validating input, displaying loading spinner, and showing toast notifications upon success or error."}
{"code": "export default UpdateEmail\n", "explanation": "This block exports a JavaScript module named \"UpdateEmail\".", "metadata": {"repo": "magiclabs/example-solana-quickstart", "file": "src/components/magic/wallet-methods/UpdateEmail.tsx", "chunk_number": 3, "total_chunks": 3}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** magiclabs/example-solana-quickstart\n**Purpose:** A basic Solana program template for quick development and testing.\n**Content:** A pre-configured Solana program with example code, including deployment scripts and test cases, demonstrating how to get started with Solana development.", "file_summary": "Here's a concise summary:\n\n**UpdateEmail Component:**\n\nUpdates user email address using Magic SDK, validating input, displaying loading spinner, and showing toast notifications upon success or error."}
{"code": "import React from 'react';\n\ninterface Props {\n  children: React.ReactNode;\n}\n\nconst Card = ({ children }: Props) => {\n  return <div className=\"card\">{children}</div>;\n};\n\nexport default Card;\n", "explanation": "**Summary**\n\nThis is a reusable React component called \"Card\". It takes in child elements (e.g. text, images, etc.) as props and renders them inside a `<div>` with class \"card\".", "metadata": {"repo": "magiclabs/example-solana-quickstart", "file": "src/components/ui/Card.tsx", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** magiclabs/example-solana-quickstart\n**Purpose:** A basic Solana program template for quick development and testing.\n**Content:** A pre-configured Solana program with example code, including deployment scripts and test cases, demonstrating how to get started with Solana development.", "file_summary": "Here's a concise summary of the file 'src/components/ui/Card.tsx':\n\n\"Reusable Card component: wraps child elements in a `<div>` with class 'card'.\""}
{"code": "import React from 'react'\n\ninterface Props {\n  children: React.ReactNode\n  id: string\n}\n\nconst CardHeader = ({ children, id }: Props) => {\n  return (\n    <h1 className=\"card-header\" id={id}>\n      {children}\n    </h1>\n  )\n}\n\nexport default CardHeader\n", "explanation": "**Summary:** This is a React functional component named `CardHeader`. It takes two props: `children` (React node) and `id` (string), and returns an `<h1>` element with the provided id and content.", "metadata": {"repo": "magiclabs/example-solana-quickstart", "file": "src/components/ui/CardHeader.tsx", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** magiclabs/example-solana-quickstart\n**Purpose:** A basic Solana program template for quick development and testing.\n**Content:** A pre-configured Solana program with example code, including deployment scripts and test cases, demonstrating how to get started with Solana development.", "file_summary": "Here's a holistic summary of the file 'src/components/ui/CardHeader.tsx':\n\n**Summary:** A React functional component, CardHeader, which renders an <h1> element displaying its child content and accepts an optional id prop for styling purposes."}
{"code": "import React from 'react';\n\ninterface Props {\n  leftHeader?: React.ReactNode;\n  rightAction?: React.ReactNode;\n  isDisconnect?: boolean;\n  [rest: string]: any;\n}\n\nconst CardLabel = ({ leftHeader, rightAction, isDisconnect, ...rest }: Props) => {\n  return (\n    <div className=\"card-label-container\" {...rest}>\n      <div className=\"card-label\">{leftHeader}</div>\n      {rightAction ? (\n        <div className={`card-label ${isDisconnect ? 'disconnect-button' : 'action-button'}`}>{rightAction}</div>\n      ) : null}\n    </div>\n  );\n};\n\nexport default CardLabel;\n", "explanation": "**Summary:**\n\nThis is a React component named `CardLabel`. It renders a label with optional left header and right action elements, which can be customized through props. The right action element's appearance changes based on an `isDisconnect` prop.", "metadata": {"repo": "magiclabs/example-solana-quickstart", "file": "src/components/ui/CardLabel.tsx", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** magiclabs/example-solana-quickstart\n**Purpose:** A basic Solana program template for quick development and testing.\n**Content:** A pre-configured Solana program with example code, including deployment scripts and test cases, demonstrating how to get started with Solana development.", "file_summary": "Here is a concise summary of the file:\n\n**Summary:** \n`CardLabel`: A customizable React component displaying a label with optional left header and right action elements, whose right action styling adapts based on the `isDisconnect` prop."}
{"code": "import React from 'react'\n\nconst Divider = () => {\n  return <div className='divider' />\n}\n\nexport default Divider\n", "explanation": "This block is a reusable React component called \"Divider\", which renders a basic HTML `div` element with a CSS class of \"divider\".", "metadata": {"repo": "magiclabs/example-solana-quickstart", "file": "src/components/ui/Divider.tsx", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** magiclabs/example-solana-quickstart\n**Purpose:** A basic Solana program template for quick development and testing.\n**Content:** A pre-configured Solana program with example code, including deployment scripts and test cases, demonstrating how to get started with Solana development.", "file_summary": "Here is a concise summary:\n\n**src/components/ui/Divider.tsx**: A reusable React component that renders a basic `<div>` element with the \"divider\" CSS class."}
{"code": "import React from 'react'\n\nconst ErrorText = ({children}: any) => {\n  return <div className='error'>{children}</div>\n}\n\nexport default ErrorText\n", "explanation": "**Purpose:** A reusable React component for displaying error messages.\n\n**Functionality:** Renders a `div` element with a class of \"error\" containing the provided child content.", "metadata": {"repo": "magiclabs/example-solana-quickstart", "file": "src/components/ui/ErrorText.tsx", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** magiclabs/example-solana-quickstart\n**Purpose:** A basic Solana program template for quick development and testing.\n**Content:** A pre-configured Solana program with example code, including deployment scripts and test cases, demonstrating how to get started with Solana development.", "file_summary": "Here is a holistic summary:\n\n**src/components/ui/ErrorText.tsx**: A reusable React component that displays error messages, rendering a styled `div` container for user-facing errors."}
{"code": "import React from 'react'\n\ninterface Props {\n\tchildren: React.ReactNode\n\tonClick: () => void\n\tdisabled: boolean\n}\n\nconst FormButton = ({children, onClick, disabled}: Props) => {\n  return (\n    <button className='form-button' disabled={disabled} onClick={onClick}>\n      {children}\n    </button>\n  )\n}\n\nexport default FormButton\n", "explanation": "**Summary:**\n\nThis is a React component (`FormButton`) that renders a customizable button with an `onClick` event handler, allowing for dynamic functionality. The button's appearance and behavior can be configured through props (children, onClick, disabled).", "metadata": {"repo": "magiclabs/example-solana-quickstart", "file": "src/components/ui/FormButton.tsx", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** magiclabs/example-solana-quickstart\n**Purpose:** A basic Solana program template for quick development and testing.\n**Content:** A pre-configured Solana program with example code, including deployment scripts and test cases, demonstrating how to get started with Solana development.", "file_summary": "Here is a concise summary of the file 'src/components/ui/FormButton.tsx':\n\n\"A customizable React button component with configurable appearance and behavior via props.\""}
{"code": "import React from 'react'\n\ninterface Props {\n\tvalue: string\n\tonChange: (e: any) => void\n\tplaceholder: string\n}\n\nconst FormInput = ({value, onChange, placeholder}: Props) => {\n  return (\n    <input\n      className='form-input'\n      value={value}\n      onChange={onChange}\n      placeholder={placeholder}\n    />\n  )\n}\n\nexport default FormInput\n", "explanation": "**Summary:**\n\nA reusable React component (`FormInput`) that represents a form input field, allowing users to enter text values with optional placeholder text and event handling for changes to the input value.", "metadata": {"repo": "magiclabs/example-solana-quickstart", "file": "src/components/ui/FormInput.tsx", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** magiclabs/example-solana-quickstart\n**Purpose:** A basic Solana program template for quick development and testing.\n**Content:** A pre-configured Solana program with example code, including deployment scripts and test cases, demonstrating how to get started with Solana development.", "file_summary": "Here is a concise summary of the file 'src/components/ui/FormInput.tsx':\n\n**Summary:** A reusable React component (`FormInput`) that enables user input with placeholder support and change event handling."}
{"code": "import React from 'react'\n\nconst Spacer = ({size}: {size: number}) => {\n\treturn <div style={{height: `${size}px`}} />\n}\n\nexport default Spacer\n", "explanation": "This block is a React component called \"Spacer\" that takes a size parameter and returns a div element with a fixed height equal to the specified size in pixels.", "metadata": {"repo": "magiclabs/example-solana-quickstart", "file": "src/components/ui/Spacer.tsx", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** magiclabs/example-solana-quickstart\n**Purpose:** A basic Solana program template for quick development and testing.\n**Content:** A pre-configured Solana program with example code, including deployment scripts and test cases, demonstrating how to get started with Solana development.", "file_summary": "Here is a concise holistic summary of the file 'src/components/ui/Spacer.tsx':\n\nThe `Spacer` component is a simple React UI component that creates a fixed-height div element based on a specified size parameter."}
{"code": "const Spinner = () => (\n  <div className='flex items-center justify-center'>\n    <svg\n      height='12'\n      width='12'\n      aria-hidden='true'\n      className='w-6 h-6 mr-2 text-gray-200 animate-spin dark:text-gray-600 fill-blue-600'\n      viewBox='0 0 100 101'\n      fill='none'\n      xmlns='http://www.w3.org/2000/svg'>\n      <path\n        d='M100 50.5908C100 78.2051 77.6142 100.591 50 100.591C22.3858 100.591 0 78.2051 0 50.5908C0 22.9766 22.3858 0.59082 50 0.59082C77.6142 0.59082 100 22.9766 100 50.5908ZM9.08144 50.5908C9.08144 73.1895 27.4013 91.5094 50 91.5094C72.5987 91.5094 90.9186 73.1895 90.9186 50.5908C90.9186 27.9921 72.5987 9.67226 50 9.67226C27.4013 9.67226 9.08144 27.9921 9.08144 50.5908Z'\n        fill='currentColor'\n      />\n      <path", "explanation": "**Purpose:** A reusable React component that displays a spinning animation.\n\n**Functionality:** It renders an SVG icon with a spinning animation, indicating a loading or processing state.", "metadata": {"repo": "magiclabs/example-solana-quickstart", "file": "src/components/ui/Spinner.tsx", "chunk_number": 1, "total_chunks": 2}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** magiclabs/example-solana-quickstart\n**Purpose:** A basic Solana program template for quick development and testing.\n**Content:** A pre-configured Solana program with example code, including deployment scripts and test cases, demonstrating how to get started with Solana development.", "file_summary": "Here is a concise summary:\n\n**src/components/ui/Spinner.tsx**: A reusable React SVG component displaying a spinning animation, representing a loading or processing state with a circular motion indicator."}
{"code": "        d='M93.9676 39.0409C96.393 38.4038 97.8624 35.9116 97.0079 33.5539C95.2932 28.8227 92.871 24.3692 89.8167 20.348C85.8452 15.1192 80.8826 10.7238 75.2124 7.41289C69.5422 4.10194 63.2754 1.94025 56.7698 1.05124C51.7666 0.367541 46.6976 0.446843 41.7345 1.27873C39.2613 1.69328 37.813 4.19778 38.4501 6.62326C39.0873 9.04874 41.5694 10.4717 44.0505 10.1071C47.8511 9.54855 51.7191 9.52689 55.5402 10.0491C60.8642 10.7766 65.9928 12.5457 70.6331 15.2552C75.2735 17.9648 79.3347 21.5619 82.5849 25.841C84.9175 28.9121 86.7997 32.2913 88.1811 35.8758C89.083 38.2158 91.5421 39.6781 93.9676 39.0409Z'\n        fill='currentFill'\n      />\n    </svg>\n  </div>\n)\n\nexport default Spinner\n", "explanation": "This block is an SVG (Scalable Vector Graphics) component that represents a spinner animation, likely used for loading or progress indicators in UI design. The purpose is to visually represent a circular motion, indicating activity or waiting state.", "metadata": {"repo": "magiclabs/example-solana-quickstart", "file": "src/components/ui/Spinner.tsx", "chunk_number": 2, "total_chunks": 2}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** magiclabs/example-solana-quickstart\n**Purpose:** A basic Solana program template for quick development and testing.\n**Content:** A pre-configured Solana program with example code, including deployment scripts and test cases, demonstrating how to get started with Solana development.", "file_summary": "Here is a concise summary:\n\n**src/components/ui/Spinner.tsx**: A reusable React SVG component displaying a spinning animation, representing a loading or processing state with a circular motion indicator."}
{"code": "import React from 'react';\nimport Image from 'next/image';\nimport Link from 'public/link.svg';\nimport { getBlockExplorer } from '@/utils/network';\n\nconst TransactionHistory = () => {\n  const publicAddress = localStorage.getItem('user');\n\n  return (\n    <a className=\"action-button\" href={getBlockExplorer(publicAddress as string)} target=\"_blank\" rel=\"noreferrer\">\n      <div className=\"flex items-center justify-center\">\n        Transaction History <Image src={Link} alt=\"link-icon\" className=\"ml-[3px]\" />\n      </div>\n    </a>\n  );\n};\n\nexport default TransactionHistory;\n", "explanation": "Here is a concise summary of the block's purpose and functionality:\n\n**Purpose:** A React component that displays a link to view transaction history for a user.\n\n**Functionality:** Retrieves user public address from local storage, generates a link using a custom `getBlockExplorer` utility, and renders an anchor tag with an icon that links to the explorer.", "metadata": {"repo": "magiclabs/example-solana-quickstart", "file": "src/components/ui/TransactionHistory.tsx", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** magiclabs/example-solana-quickstart\n**Purpose:** A basic Solana program template for quick development and testing.\n**Content:** A pre-configured Solana program with example code, including deployment scripts and test cases, demonstrating how to get started with Solana development.", "file_summary": "Here is a concise and to-the-point summary of the file 'src/components/ui/TransactionHistory.tsx':\n\n**Displays user transaction history:**\nA React component that shows a link to view transaction history for a user, generated from their public address stored in local storage."}
{"code": "import '@/styles/globals.css'\nimport type { AppProps } from 'next/app'\n\nexport default function App({ Component, pageProps }: AppProps) {\n  return <Component {...pageProps} />\n}\n", "explanation": "**Purpose:** Next.js App component wrapper.\n\n**Functionality:** Renders the main application component, passing props from the server-side rendered page.", "metadata": {"repo": "magiclabs/example-solana-quickstart", "file": "src/pages/_app.tsx", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** magiclabs/example-solana-quickstart\n**Purpose:** A basic Solana program template for quick development and testing.\n**Content:** A pre-configured Solana program with example code, including deployment scripts and test cases, demonstrating how to get started with Solana development.", "file_summary": "Here is a concise and to-the-point holistic summary:\n\n**src/pages/_app.tsx**: A Next.js app component wrapper that renders the main application component with props passed from server-side rendered pages."}
{"code": "import { Html, Head, Main, NextScript } from 'next/document'\n\nexport default function Document() {\n  return (\n    <Html lang=\"en\">\n      <Head />\n      <body>\n        <Main />\n        <NextScript />\n      </body>\n    </Html>\n  )\n}\n", "explanation": "**Purpose:** Defines a custom HTML document for Next.js applications.\n\n**Functionality:** Returns an HTML structure that wraps the app's main content, providing a basic page setup with language attribute, head section, and script tags.", "metadata": {"repo": "magiclabs/example-solana-quickstart", "file": "src/pages/_document.tsx", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** magiclabs/example-solana-quickstart\n**Purpose:** A basic Solana program template for quick development and testing.\n**Content:** A pre-configured Solana program with example code, including deployment scripts and test cases, demonstrating how to get started with Solana development.", "file_summary": "Here is a concise and to-the-point summary of the file 'src/pages/_document.tsx':\n\nDefines a custom HTML document for Next.js applications, returning an HTML structure that wraps app content with standard page elements (language attribute, head section, and scripts)."}
{"code": "import MagicProvider from '../components/magic/MagicProvider'\nimport {useEffect, useState} from 'react'\nimport {ToastContainer} from 'react-toastify'\nimport 'react-toastify/dist/ReactToastify.css'\nimport Login from '@/components/magic/Login'\nimport Dashboard from '@/components/magic/Dashboard'\nimport MagicDashboardRedirect from '@/components/magic/MagicDashboardRedirect'\n\nexport default function Home() {\n\tconst [token, setToken] = useState('')\n\n\tuseEffect(() => {\n\t\tsetToken(localStorage.getItem('token') ?? '')\n\t}, [setToken])\n\n\treturn (\n\t\t<MagicProvider>\n\t\t\t<ToastContainer />\n\t\t\t{process.env.NEXT_PUBLIC_MAGIC_API_KEY ? (\n\t\t\t\ttoken.length > 0 ? (\n\t\t\t\t\t<Dashboard token={token} setToken={setToken} />\n\t\t\t\t) : (\n\t\t\t\t\t<Login token={token} setToken={setToken} />\n\t\t\t\t)\n\t\t\t) : (\n\t\t\t\t<MagicDashboardRedirect />\n\t\t\t)}\n\t\t</MagicProvider>\n\t)\n}\n", "explanation": "Here is a concise summary:\n\nThis block provides a home page for an application, toggling between a login screen (`Login`) and a dashboard (`Dashboard`) based on whether the user has already logged in (stored token exists). It also includes a toast notification system and redirects to a MagicDashboardRedirect page if the necessary API key is not set.", "metadata": {"repo": "magiclabs/example-solana-quickstart", "file": "src/pages/index.tsx", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** magiclabs/example-solana-quickstart\n**Purpose:** A basic Solana program template for quick development and testing.\n**Content:** A pre-configured Solana program with example code, including deployment scripts and test cases, demonstrating how to get started with Solana development.", "file_summary": "Here is a concise summary:\n\n`src/pages/index.tsx`: Home page that toggles between login screen (`Login`) and dashboard (`Dashboard`) based on user authentication, with toast notifications and redirects to MagicDashboardRedirect if API key is missing."}
{"code": "@import url('https://fonts.googleapis.com/css2?family=Inter&display=swap');\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --foreground-rgb: 0, 0, 0;\n  --background-start-rgb: 214, 219, 220;\n  --background-end-rgb: 255, 255, 255;\n}\n\n@media (prefers-color-scheme: dark) {\n  :root {\n    --foreground-rgb: 255, 255, 255;\n    --background-start-rgb: 0, 0, 0;\n    --background-end-rgb: 0, 0, 0;\n  }\n}\n\nhtml,\nbody {\n  @apply m-0 p-0 bg-[#f8f8fa] scroll-pt-12;\n  font-family: 'Inter', sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\nnav > ul > li {\n  @apply text-left list-none text-[#777679] cursor-pointer mb-[15px];\n}\n\nul {\n  @apply w-fit m-0 pl-[30px] pr-0 py-0;\n}\n\n.active {\n  @apply text-[#6851ff] font-semibold;\n}\n\n.active::before {\n  @apply content-['\\2022'] text-[#6851ff] font-[bold] inline-block w-[1em] ml-[-1em];\n}\n\n.nft {\n  @apply text-[#777679];\n}\n\n.nft-name {\n  @apply font-semibold text-black;\n  font-family: 'Inter';\n}\n\n.nft-list {\n  @apply overflow-auto max-h-[270px];\n}\n", "explanation": "This block is a CSS configuration file that:\n\n* Imports Google Fonts (Inter) and Tailwind CSS utilities\n* Defines theme colors using RGB values and a media query for dark mode\n* Styles HTML elements with Tailwind's `@apply` directive, including typography, spacing, and layout adjustments.", "metadata": {"repo": "magiclabs/example-solana-quickstart", "file": "src/styles/globals.css", "chunk_number": 1, "total_chunks": 8}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** magiclabs/example-solana-quickstart\n**Purpose:** A basic Solana program template for quick development and testing.\n**Content:** A pre-configured Solana program with example code, including deployment scripts and test cases, demonstrating how to get started with Solana development.", "file_summary": "Here is a concise and holistic summary of the file 'src/styles/globals.css':\n\n**Summary:** This CSS configuration file defines global styles for various HTML elements, including typography, spacing, colors, layout adjustments, and animations. It utilizes Tailwind CSS utilities and imports Google Fonts.\n\n**Purpose:** To provide visual design and styling rules for interactive UI components, such as links, buttons, forms, and other elements on a webpage.\n\n**Functionality:** A collection of CSS classes that apply specific styles to corresponding HTML elements, including typography, spacing, colors, layout adjustments, and animations, making it easy to style various UI components consistently throughout the application."}
{"code": ".nft:not(:last-child) {\n  @apply mb-2.5;\n}\n\n.cards-container {\n  @apply relative top-[30px] md:top-[-60px] lg:top-[-60px];\n}\n\n@media only screen and (max-width: 767px) {\n  .cards-container {\n    @apply mt-[-89px];\n  }\n}\n\n.network-dropdown {\n  @apply m-auto w-fit rounded-xl;\n}\n\n.active-network {\n  @apply border w-[264px] flex items-center cursor-pointer justify-between m-auto px-4 py-3 rounded-xl border-solid border-[#dddbe0] bg-[#fff];\n}\n\n.active-network::selection {\n  @apply bg-transparent;\n}\n\n.rotate {\n  @apply rotate-180;\n}\n\n.network-options {\n  @apply overflow-hidden w-fit border mx-auto my-[5px] px-0 py-[5px] rounded-xl border-solid border-[#dddbe0] bg-[#fff];\n}\n\n.network-dropdown-option {\n  @apply w-[264px] flex items-center justify-start transition-[0.1s] m-auto px-4 py-3 bg-[#fff];\n}\n\n.network-dropdown-option:hover {\n  @apply text-white cursor-pointer bg-[#6851ff];\n}\n\n.network-dropdown-option:active {\n  @apply opacity-50;\n}\n.magic-logo {\n  @apply mb-[15px] mx-0 text-center;\n}\n.demo-sub-header {", "explanation": "Here is a concise summary of the purpose and functionality of this block:\n\n**Styling Block**\n\nThis block defines CSS styles for various HTML elements, including:\n\n* Layout adjustments (margin, positioning)\n* Button-like element styling (network-dropdown, active-network)\n* Animation effects (rotate)\n* Header text styling (demo-sub-header)\n\nThe styles are applied conditionally based on screen size and browser features.", "metadata": {"repo": "magiclabs/example-solana-quickstart", "file": "src/styles/globals.css", "chunk_number": 2, "total_chunks": 8}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** magiclabs/example-solana-quickstart\n**Purpose:** A basic Solana program template for quick development and testing.\n**Content:** A pre-configured Solana program with example code, including deployment scripts and test cases, demonstrating how to get started with Solana development.", "file_summary": "Here is a concise and holistic summary of the file 'src/styles/globals.css':\n\n**Summary:** This CSS configuration file defines global styles for various HTML elements, including typography, spacing, colors, layout adjustments, and animations. It utilizes Tailwind CSS utilities and imports Google Fonts.\n\n**Purpose:** To provide visual design and styling rules for interactive UI components, such as links, buttons, forms, and other elements on a webpage.\n\n**Functionality:** A collection of CSS classes that apply specific styles to corresponding HTML elements, including typography, spacing, colors, layout adjustments, and animations, making it easy to style various UI components consistently throughout the application."}
{"code": "  @apply text-[rgba(255,255,255,0.5)] text-xl font-normal m-0;\n  font-family: monospace;\n}\n\n.home-page {\n  @apply flex flex-col justify-center items-center min-h-screen relative bg-[length:100vw_320px] bg-no-repeat;\n}\n\n.login-page {\n  @apply flex flex-col items-center min-h-screen bg-gray-300;\n}\n.login-method-grid {\n  @apply max-w-[100%] grid-rows-3 gap-5 p-4 mt-8;\n}\n\n.login-method-grid-item-container {\n  @apply flex flex-col items-center justify-center;\n}\n\n.login-button {\n  @apply w-full h-12 text-white font-semibold text-base leading-6 transition-[0.1s] text-center transition-[0.1s] m-auto px-2 py-3 rounded-[300px] border-[none];\n  background: #8271f3;\n}\n\n.login-button:disabled {\n  background: #a799ff;\n}\n\n.login-button:hover:enabled {\n  @apply cursor-pointer;\n  background: linear-gradient(0deg, rgba(0, 0, 0, 0.05), rgba(0, 0, 0, 0.05)), #a799ff;\n}\n.login-button:active:enabled {\n  @apply opacity-50 cursor-pointer scale-[0.99];\n  background: #a799ff;\n}\n\n.links {", "explanation": "**Summary**\n\nThis is a collection of CSS classes used to style various UI components, including:\n\n* Text styles (text color, size, font family)\n* Container layouts (flexbox, grid)\n* Button styling (background, hover, active states)\n* General layout and spacing rules (margin, padding)\n\nThe specific components targeted by these classes are:\n\n* Home page\n* Login page\n* Login method grid\n* Login button\n* Links component", "metadata": {"repo": "magiclabs/example-solana-quickstart", "file": "src/styles/globals.css", "chunk_number": 3, "total_chunks": 8}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** magiclabs/example-solana-quickstart\n**Purpose:** A basic Solana program template for quick development and testing.\n**Content:** A pre-configured Solana program with example code, including deployment scripts and test cases, demonstrating how to get started with Solana development.", "file_summary": "Here is a concise and holistic summary of the file 'src/styles/globals.css':\n\n**Summary:** This CSS configuration file defines global styles for various HTML elements, including typography, spacing, colors, layout adjustments, and animations. It utilizes Tailwind CSS utilities and imports Google Fonts.\n\n**Purpose:** To provide visual design and styling rules for interactive UI components, such as links, buttons, forms, and other elements on a webpage.\n\n**Functionality:** A collection of CSS classes that apply specific styles to corresponding HTML elements, including typography, spacing, colors, layout adjustments, and animations, making it easy to style various UI components consistently throughout the application."}
{"code": "  @apply flex justify-center mx-auto mt-5 text-sm mb-3 font-semibold text-white;\n}\n.link {\n  @apply transition-[0.1s] px-[30px] py-0;\n}\n\n@media only screen and (max-width: 420px) {\n  .link {\n    @apply px-[15px] py-0;\n  }\n}\n@media only screen and (max-width: 320px) {\n  .link {\n    @apply px-[5px] py-0;\n  }\n}\n\n.link > a {\n  @apply cursor-pointer;\n}\n.link-divider {\n  @apply w-px h-5;\n}\n\n.footer-links {\n  @apply flex items-center absolute w-full mt-[30px] mb-0 mx-auto bottom-10;\n}\n.wallet-method-container {\n  @apply text-left;\n}\n\n.wallet-method {\n  @apply w-fit text-[#522fd4] bg-[#edebff] text-base cursor-pointer font-medium transition-[0.1s] h-8 px-3 py-1.5 rounded-[32px] border-[none];\n  font-family: monospace;\n}\n\n.wallet-method:hover:enabled {\n  background: linear-gradient(0deg, rgba(0, 0, 0, 0.05), rgba(0, 0, 0, 0.05)), #edebff;\n  background-blend-mode: color-burn, normal;\n}\n\n.wallet-method:active:enabled {\n  @apply opacity-50 scale-[0.99];\n  background: linear-gradient(0deg, rgba(0, 0, 0, 0.05), rgba(0, 0, 0, 0.05)), #edebff;", "explanation": "This block is a collection of CSS styles ( TailwindCSS classes) for various HTML elements on a webpage.\n\n**Summary:**\n\nThis block defines styles for links, buttons, footer links, wallet methods, and other UI components, including typography, spacing, colors, and interactions like hover and active states.", "metadata": {"repo": "magiclabs/example-solana-quickstart", "file": "src/styles/globals.css", "chunk_number": 4, "total_chunks": 8}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** magiclabs/example-solana-quickstart\n**Purpose:** A basic Solana program template for quick development and testing.\n**Content:** A pre-configured Solana program with example code, including deployment scripts and test cases, demonstrating how to get started with Solana development.", "file_summary": "Here is a concise and holistic summary of the file 'src/styles/globals.css':\n\n**Summary:** This CSS configuration file defines global styles for various HTML elements, including typography, spacing, colors, layout adjustments, and animations. It utilizes Tailwind CSS utilities and imports Google Fonts.\n\n**Purpose:** To provide visual design and styling rules for interactive UI components, such as links, buttons, forms, and other elements on a webpage.\n\n**Functionality:** A collection of CSS classes that apply specific styles to corresponding HTML elements, including typography, spacing, colors, layout adjustments, and animations, making it easy to style various UI components consistently throughout the application."}
{"code": "}\n.wallet-method-desc {\n  @apply text-[#77767a] text-left text-sm mt-2.5;\n}\n\n.form-input {\n  @apply box-border flex flex-row items-center w-full h-12 border text-base leading-6 text-[#18171a] mb-[15px] px-4 py-3 rounded-[10px] border-solid border-[#dddbe0];\n  background: #ffffff;\n}\n\n.form-input::placeholder {\n  color: #77767a;\n}\n\n.form-button {\n  @apply flex flex-row justify-center items-center w-full h-12 text-[#522fd4] font-semibold text-base leading-6 transition-[0.1s] px-6 py-3 rounded-[300px] border-[none] bg-[#edebff];\n}\n\n.form-button:disabled {\n  @apply opacity-50;\n}\n\n.form-button:hover:enabled {\n  @apply cursor-pointer;\n  background: linear-gradient(0deg, rgba(0, 0, 0, 0.05), rgba(0, 0, 0, 0.05)), #edebff;\n}\n.form-button:active:enabled {\n  @apply opacity-50 scale-[0.99];\n  background: linear-gradient(0deg, rgba(0, 0, 0, 0.05), rgba(0, 0, 0, 0.05)), #edebff;\n}\n\n.loading-container {\n  @apply w-[50px] text-center flex items-center justify-center cursor-default;\n}\n.loading {\n  @apply cursor-default animate-spin;\n}\n", "explanation": "This block appears to be CSS code that styles a form with input fields and buttons, as well as a loading animation. The purpose is to provide visual design for interactive elements in a user interface.", "metadata": {"repo": "magiclabs/example-solana-quickstart", "file": "src/styles/globals.css", "chunk_number": 5, "total_chunks": 8}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** magiclabs/example-solana-quickstart\n**Purpose:** A basic Solana program template for quick development and testing.\n**Content:** A pre-configured Solana program with example code, including deployment scripts and test cases, demonstrating how to get started with Solana development.", "file_summary": "Here is a concise and holistic summary of the file 'src/styles/globals.css':\n\n**Summary:** This CSS configuration file defines global styles for various HTML elements, including typography, spacing, colors, layout adjustments, and animations. It utilizes Tailwind CSS utilities and imports Google Fonts.\n\n**Purpose:** To provide visual design and styling rules for interactive UI components, such as links, buttons, forms, and other elements on a webpage.\n\n**Functionality:** A collection of CSS classes that apply specific styles to corresponding HTML elements, including typography, spacing, colors, layout adjustments, and animations, making it easy to style various UI components consistently throughout the application."}
{"code": "@keyframes rotation {\n  0% {\n    transform: rotate(0);\n  }\n  100% {\n    transform: rotate(360deg);\n  }\n}\n\n.card {\n  @apply w-[344px] flex flex-col shadow-[0px_4px_24px_rgba(49,49,49,0.1)] mt-0 mb-[27px] mx-auto px-6 py-8 rounded-2xl bg-[#ffffff];\n}\n\n.card-header {\n  @apply text-xl font-semibold text-left mt-0 mb-[25px];\n}\n.card-label-container {\n  @apply flex items-center justify-between mb-3;\n}\n\n.card-label {\n  @apply text-sm font-medium cursor-pointer;\n}\n.toast {\n  @apply fixed w-fit text-white font-medium shadow-[4px_8px_20px_rgba(0,0,0,0.15)] mx-auto my-0 px-4 py-2 rounded-[10px] top-[30px] inset-x-0 bg-[#00875f];\n}\n\n.action-button {\n  @apply font-semibold text-[#6851ff] cursor-pointer transition-[0.1s];\n}\n.disconnect-button {\n  @apply font-semibold text-[#d43100] cursor-pointer transition-[0.1s];\n}\n.action-button:hover,\n.disconnect-button:hover {\n  @apply opacity-70;\n}\n.action-button:active,\n.disconnect-button:active {\n  @apply scale-[0.98];\n}\n.code {\n  @apply text-base text-left p-2.5 rounded-[10px];", "explanation": "**Purpose:** Define CSS styles for various HTML elements.\n\n**Functionality:** This block contains a combination of:\n\n* A keyframe animation (rotation) that rotates an element by 360 degrees.\n* Pre-defined CSS classes (.card, .card-header, .card-label-container, etc.) that apply specific styling rules to corresponding HTML elements.", "metadata": {"repo": "magiclabs/example-solana-quickstart", "file": "src/styles/globals.css", "chunk_number": 6, "total_chunks": 8}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** magiclabs/example-solana-quickstart\n**Purpose:** A basic Solana program template for quick development and testing.\n**Content:** A pre-configured Solana program with example code, including deployment scripts and test cases, demonstrating how to get started with Solana development.", "file_summary": "Here is a concise and holistic summary of the file 'src/styles/globals.css':\n\n**Summary:** This CSS configuration file defines global styles for various HTML elements, including typography, spacing, colors, layout adjustments, and animations. It utilizes Tailwind CSS utilities and imports Google Fonts.\n\n**Purpose:** To provide visual design and styling rules for interactive UI components, such as links, buttons, forms, and other elements on a webpage.\n\n**Functionality:** A collection of CSS classes that apply specific styles to corresponding HTML elements, including typography, spacing, colors, layout adjustments, and animations, making it easy to style various UI components consistently throughout the application."}
{"code": "  font-family: monospace;\n  background: #f8f8fa;\n  word-wrap: break-word;\n}\n.error {\n  @apply self-start text-xs font-semibold text-red-700 justify-self-start;\n}\n.divider {\n  @apply mx-0 my-[15px] border-b-[#ededf3] border-b border-solid;\n}\n.flex-row {\n  @apply flex items-center;\n}\n.green-dot {\n  @apply h-1.5 w-1.5 bg-[#00cc8f] mr-2.5 rounded-[50%];\n}\n.connected {\n  @apply text-base mx-0 my-[5px];\n}\na {\n  all: unset;\n}\n\n.app-header-container {\n  @apply block w-full drop-shadow-[0_35px_35px_rgba(0,0,0,0.25)] min-h-[40%] flex-col gap-2.5 p-8 items-center bg-[url('/login_bg.png')] bg-cover bg-no-repeat pb-20;\n  text-align: -webkit-center;\n}\n\n.redirect-container {\n  @apply flex flex-col items-center h-screen bg-center bg-cover bg-no-repeat bg-[url('/redirect_bg.png')];\n}\n\n.redirect-card {\n  @apply bg-[#F8F8FA] rounded-[10px] shadow-[0px_4px_24px_rgba(49,49,49,0.1)] p-2 m-12;\n}\n\n.social-login-button {", "explanation": "Here is a summary of the purpose and functionality of this block:\n\nThis block contains a set of CSS styles (utility classes) that can be applied to HTML elements to style them with specific layouts, typography, and colors. The styles are divided into several categories, including error messages, separators, navigation bars, buttons, and backgrounds.", "metadata": {"repo": "magiclabs/example-solana-quickstart", "file": "src/styles/globals.css", "chunk_number": 7, "total_chunks": 8}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** magiclabs/example-solana-quickstart\n**Purpose:** A basic Solana program template for quick development and testing.\n**Content:** A pre-configured Solana program with example code, including deployment scripts and test cases, demonstrating how to get started with Solana development.", "file_summary": "Here is a concise and holistic summary of the file 'src/styles/globals.css':\n\n**Summary:** This CSS configuration file defines global styles for various HTML elements, including typography, spacing, colors, layout adjustments, and animations. It utilizes Tailwind CSS utilities and imports Google Fonts.\n\n**Purpose:** To provide visual design and styling rules for interactive UI components, such as links, buttons, forms, and other elements on a webpage.\n\n**Functionality:** A collection of CSS classes that apply specific styles to corresponding HTML elements, including typography, spacing, colors, layout adjustments, and animations, making it easy to style various UI components consistently throughout the application."}
{"code": "  @apply flex flex-row min-w-[296px] h-12 text-[#3C4043] transition-[0.1s] px-6 py-3 rounded-[300px] bg-[#ffffff] border-2 border-[#DADCE0] relative top-16;\n}\n\n.social-login-button:disabled {\n  @apply opacity-50;\n}\n\n.social-login-button:hover:enabled {\n  @apply cursor-pointer;\n  background: linear-gradient(0deg, rgba(0, 0, 0, 0.05), rgba(0, 0, 0, 0.05)), #ffffff;\n}\n.social-login-button:active:enabled {\n  @apply opacity-50 scale-[0.99];\n  background: linear-gradient(0deg, rgba(0, 0, 0, 0.05), rgba(0, 0, 0, 0.05)), #ffffff;\n}\n\n.api-button {\n  @apply bg-[#6844bc] text-[#FFFFFF] flex w-[280px] justify-center items-center h-12 font-semibold text-base leading-6 transition-[0.1s] px-6 py-3 rounded-[300px] border-[none];\n}\n", "explanation": "Here is a summary of the block:\n\n**CSS Styles**\n\nThis block defines styles for buttons, specifically a \"social login button\" and an \"API button\". It includes properties for layout, text color, background, borders, and hover/active states.", "metadata": {"repo": "magiclabs/example-solana-quickstart", "file": "src/styles/globals.css", "chunk_number": 8, "total_chunks": 8}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** magiclabs/example-solana-quickstart\n**Purpose:** A basic Solana program template for quick development and testing.\n**Content:** A pre-configured Solana program with example code, including deployment scripts and test cases, demonstrating how to get started with Solana development.", "file_summary": "Here is a concise and holistic summary of the file 'src/styles/globals.css':\n\n**Summary:** This CSS configuration file defines global styles for various HTML elements, including typography, spacing, colors, layout adjustments, and animations. It utilizes Tailwind CSS utilities and imports Google Fonts.\n\n**Purpose:** To provide visual design and styling rules for interactive UI components, such as links, buttons, forms, and other elements on a webpage.\n\n**Functionality:** A collection of CSS classes that apply specific styles to corresponding HTML elements, including typography, spacing, colors, layout adjustments, and animations, making it easy to style various UI components consistently throughout the application."}
{"code": "import { Magic } from './types';\nimport { Dispatch, SetStateAction } from 'react';\n\nexport type LoginMethod = 'EMAIL' | 'SMS' | 'SOCIAL' | 'FORM';\n\nexport const logout = async (setToken: Dispatch<SetStateAction<string>>, magic: Magic | null) => {\n  if (await magic?.user.isLoggedIn()) {\n    await magic?.user.logout();\n  }\n  localStorage.setItem('token', '');\n  localStorage.setItem('user', '');\n  setToken('');\n};\n\nexport const saveToken = (token: string, setToken: Dispatch<SetStateAction<string>>, loginMethod: LoginMethod) => {\n  localStorage.setItem('token', token);\n  setToken(token);\n  localStorage.setItem('isAuthLoading', 'false');\n  localStorage.setItem('loginMethod', loginMethod);\n};\n", "explanation": "Here is a concise summary of the purpose and functionality of this block:\n\n**Authentication Management**\n\nThis block provides functions for logging out users, saving authentication tokens, and managing user sessions using the Magic library.", "metadata": {"repo": "magiclabs/example-solana-quickstart", "file": "src/utils/common.ts", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** magiclabs/example-solana-quickstart\n**Purpose:** A basic Solana program template for quick development and testing.\n**Content:** A pre-configured Solana program with example code, including deployment scripts and test cases, demonstrating how to get started with Solana development.", "file_summary": "Here is a concise and to-the-point summary of the file 'src/utils/common.ts':\n\n\"Provides utility functions for managing user authentication, including logout functionality and token management with Magic library.\""}
{"code": "export enum Network {\n  SOLANA_DEVNET = 'solana-devnet',\n  SOLANA_MAINNET_BETA = 'solana-mainnet',\n}\n\nexport const getNetworkUrl = () => {\n  switch (process.env.NEXT_PUBLIC_BLOCKCHAIN_NETWORK) {\n    case Network.SOLANA_DEVNET:\n      return 'https://solana-devnet.g.alchemy.com/v2/NUZZICdM-417xyZwDhka3615uai5GQFr';\n    case Network.SOLANA_MAINNET_BETA:\n      return 'https://solana-mainnet.g.alchemy.com/v2/9nCoa06gjvDwYyTdV5ruBp2Qe4_wZnaO';\n    default:\n      throw new Error('Network not supported');\n  }\n};\n\nexport const getNetworkName = () => {\n  switch (process.env.NEXT_PUBLIC_BLOCKCHAIN_NETWORK) {\n    case Network.SOLANA_DEVNET:\n      return 'Solana (Devnet)';\n    case Network.SOLANA_MAINNET_BETA:\n      return 'Solana (Mainnet Beta)';\n  }\n};\n\nexport const getBlockExplorer = (address: string) => {\n  switch (process.env.NEXT_PUBLIC_BLOCKCHAIN_NETWORK) {\n    case Network.SOLANA_DEVNET:\n      return `https://explorer.solana.com/address/${address}?cluster=devnet`;\n    case Network.SOLANA_MAINNET_BETA:", "explanation": "**Summary**\n\nThis block defines a set of functions for interacting with Solana blockchain networks.\n\n* The `Network` enum specifies two network options: SOLANA_DEVNET and SOLANA_MAINNET_BETA.\n* The `getNetworkUrl` function returns the API URL for a given network based on an environment variable.\n* The `getNetworkName` function returns the display name of the current network.\n* The `getBlockExplorer` function returns the URL to view a specific address on the Solana block explorer, again based on the network.", "metadata": {"repo": "magiclabs/example-solana-quickstart", "file": "src/utils/network.ts", "chunk_number": 1, "total_chunks": 2}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** magiclabs/example-solana-quickstart\n**Purpose:** A basic Solana program template for quick development and testing.\n**Content:** A pre-configured Solana program with example code, including deployment scripts and test cases, demonstrating how to get started with Solana development.", "file_summary": "Here is a concise summary of the file 'src/utils/network.ts':\n\n\"Provides utility functions for interacting with Solana blockchain networks, including network URL retrieval, display name determination, and block explorer URL generation.\""}
{"code": "      return `https://explorer.solana.com/address/${address}`;\n  }\n};\n", "explanation": "This block appears to be a function that generates a URL for the Solana blockchain explorer, referencing a specific address. \n\nIn essence: Generates a link to Solana explorer for an address.", "metadata": {"repo": "magiclabs/example-solana-quickstart", "file": "src/utils/network.ts", "chunk_number": 2, "total_chunks": 2}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** magiclabs/example-solana-quickstart\n**Purpose:** A basic Solana program template for quick development and testing.\n**Content:** A pre-configured Solana program with example code, including deployment scripts and test cases, demonstrating how to get started with Solana development.", "file_summary": "Here is a concise summary of the file 'src/utils/network.ts':\n\n\"Provides utility functions for interacting with Solana blockchain networks, including network URL retrieval, display name determination, and block explorer URL generation.\""}
{"code": "import { toast } from 'react-toastify'\nconst showToast = ({\n  message,\n  type = 'default',\n}: {\n  message: string\n  type: 'success' | 'error' | 'info' | 'default' | 'warning'\n}) => {\n  switch (type) {\n  case 'default':\n    toast(message, {\n      position: 'top-center',\n      autoClose: 3000,\n      hideProgressBar: false,\n      closeOnClick: true,\n      pauseOnHover: true,\n      draggable: true,\n      progress: undefined,\n      theme: 'light',\n    })\n    break\n  case 'info':\n    toast.info(message, {\n      position: 'top-center',\n      autoClose: 3000,\n      hideProgressBar: false,\n      closeOnClick: true,\n      pauseOnHover: true,\n      draggable: true,\n      progress: undefined,\n      theme: 'light',\n    })\n    break\n  case 'success':\n    toast.success(message, {\n      position: 'top-center',\n      autoClose: 3000,\n      hideProgressBar: false,\n      closeOnClick: true,\n      pauseOnHover: true,\n      draggable: true,\n      progress: undefined,\n      theme: 'light',\n    })\n    break\n  case 'warning':\n    toast.warn(message, {", "explanation": "**Purpose:** Display a notification toast message.\n\n**Functionality:** The `showToast` function takes an object with `message` and `type` properties, and uses the `react-toastify` library to display a toast notification with the specified message type (success, error, info, default, or warning).", "metadata": {"repo": "magiclabs/example-solana-quickstart", "file": "src/utils/showToast.ts", "chunk_number": 1, "total_chunks": 2}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** magiclabs/example-solana-quickstart\n**Purpose:** A basic Solana program template for quick development and testing.\n**Content:** A pre-configured Solana program with example code, including deployment scripts and test cases, demonstrating how to get started with Solana development.", "file_summary": "Here is a holistic summary of the file 'src/utils/showToast.ts':\n\nDisplays a customizable toast notification with various themes and interaction controls, using the `react-toastify` library to show success, error, info, default, or warning messages."}
{"code": "      position: 'top-center',\n      autoClose: 3000,\n      hideProgressBar: false,\n      closeOnClick: true,\n      pauseOnHover: true,\n      draggable: true,\n      progress: undefined,\n      theme: 'light',\n    })\n    break\n  case 'error':\n    toast.error(message, {\n      position: 'top-center',\n      autoClose: 3000,\n      hideProgressBar: false,\n      closeOnClick: true,\n      pauseOnHover: true,\n      draggable: true,\n      progress: undefined,\n      theme: 'light',\n    })\n    break\n  }\n}\n\nexport default showToast\n", "explanation": "**Purpose:** Displays a toast notification (alert) with customizable settings.\n\n**Functionality:** Shows an alert message at the top center of the screen, with options for auto-close time, theme, and interaction controls.", "metadata": {"repo": "magiclabs/example-solana-quickstart", "file": "src/utils/showToast.ts", "chunk_number": 2, "total_chunks": 2}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** magiclabs/example-solana-quickstart\n**Purpose:** A basic Solana program template for quick development and testing.\n**Content:** A pre-configured Solana program with example code, including deployment scripts and test cases, demonstrating how to get started with Solana development.", "file_summary": "Here is a holistic summary of the file 'src/utils/showToast.ts':\n\nDisplays a customizable toast notification with various themes and interaction controls, using the `react-toastify` library to show success, error, info, default, or warning messages."}
{"code": "import { Dispatch, SetStateAction } from 'react'\n\nexport type LoginProps = {\n  token: string\n  setToken: Dispatch<SetStateAction<string>>\n}\n\nexport type { Magic } from '../components/magic/MagicProvider'\n", "explanation": "Here is a concise summary:\n\n**Summary:** This block defines types for React components, specifically `LoginProps` which includes a token and a setter function for it, and imports a `Magic` component type.", "metadata": {"repo": "magiclabs/example-solana-quickstart", "file": "src/utils/types.ts", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** magiclabs/example-solana-quickstart\n**Purpose:** A basic Solana program template for quick development and testing.\n**Content:** A pre-configured Solana program with example code, including deployment scripts and test cases, demonstrating how to get started with Solana development.", "file_summary": "Here's a holistic summary of the file 'src/utils/types.ts':\n\n**Summary:** Defines typed properties for React components, including `LoginProps`, and imports `Magic` component types."}
{"code": "/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  content: [\n    './src/pages/**/*.{js,ts,jsx,tsx,mdx}',\n    './src/components/**/*.{js,ts,jsx,tsx,mdx}',\n    './src/app/**/*.{js,ts,jsx,tsx,mdx}',\n  ],\n  theme: {\n    extend: {\n      backgroundImage: {\n        'gradient-radial': 'radial-gradient(var(--tw-gradient-stops))',\n        'gradient-conic': 'conic-gradient(from 180deg at 50% 50%, var(--tw-gradient-stops))',\n      },\n    },\n  },\n  plugins: [],\n};\n", "explanation": "Here is a concise summary:\n\n**Purpose:** Tailwind CSS configuration file.\n\n**Functionality:** Specifies content sources, customizes themes, and enables plugins for a web application project.", "metadata": {"repo": "magiclabs/example-solana-quickstart", "file": "tailwind.config.js", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** magiclabs/example-solana-quickstart\n**Purpose:** A basic Solana program template for quick development and testing.\n**Content:** A pre-configured Solana program with example code, including deployment scripts and test cases, demonstrating how to get started with Solana development.", "file_summary": "Here's a concise summary of the file 'tailwind.config.js':\n\n**Summary:** This file configures Tailwind CSS settings for a web app, including theme customization, plugin enablement, and content source specification."}
{"code": "{\n  \"compilerOptions\": {\n    \"target\": \"es5\",\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"allowJs\": true,\n    \"skipLibCheck\": true,\n    \"strict\": true,\n    \"forceConsistentCasingInFileNames\": true,\n    \"noEmit\": true,\n    \"esModuleInterop\": true,\n    \"module\": \"esnext\",\n    \"moduleResolution\": \"node\",\n    \"resolveJsonModule\": true,\n    \"isolatedModules\": true,\n    \"jsx\": \"preserve\",\n    \"incremental\": true,\n    \"paths\": {\n      \"@/*\": [\"./src/*\"]\n    }\n  },\n  \"include\": [\"next-env.d.ts\", \"**/*.ts\", \"**/*.tsx\"],\n  \"exclude\": [\"node_modules\"]\n}\n", "explanation": "This block is a configuration object for a TypeScript compiler, specifying settings such as target environment, module resolution, and file inclusion/exclusion.", "metadata": {"repo": "magiclabs/example-solana-quickstart", "file": "tsconfig.json", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** magiclabs/example-solana-quickstart\n**Purpose:** A basic Solana program template for quick development and testing.\n**Content:** A pre-configured Solana program with example code, including deployment scripts and test cases, demonstrating how to get started with Solana development.", "file_summary": "Here is a concise and to-the-point summary:\n\n`tsconfig.json`: A TypeScript compiler configuration file that sets up project-wide settings, including target environment, module resolution, and file inclusion/exclusion rules."}

{"code": "NEXT_PUBLIC_MAGIC_PUBLISHABLE_KEY=pk_live_****************\nMAGIC_SECRET_KEY=sk_live_****************\n", "explanation": "This block contains environment variables for a Magic (a platform for building web applications) application, specifying publishable and secret keys.", "metadata": {"repo": "magiclabs/vercel-magic-guide", "file": ".env.local.example", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise explanation:\n\n**Purpose:** A guide for deploying Magic.js (a serverless JavaScript framework) on Vercel (a platform for deploying web applications).\n\n**Content:** Documentation, code examples, and tips on how to set up and optimize Magic.js on Vercel, including API routing, authentication, and deployment best practices.", "file_summary": "Here is a concise summary:\n\n`.env.local.example` sets environment variables for a Magic app, including publishable and secret keys for authentication."}
{"code": "{\n  \"extends\": \"next/core-web-vitals\"\n}\n", "explanation": "This block extends a Next.js template for web vitals monitoring.", "metadata": {"repo": "magiclabs/vercel-magic-guide", "file": ".eslintrc.json", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise explanation:\n\n**Purpose:** A guide for deploying Magic.js (a serverless JavaScript framework) on Vercel (a platform for deploying web applications).\n\n**Content:** Documentation, code examples, and tips on how to set up and optimize Magic.js on Vercel, including API routing, authentication, and deployment best practices.", "file_summary": "I don't see any code blocks or summaries provided. Please share the summaries you'd like me to create a holistic summary from, and I'll be happy to assist!"}
{"code": "# Magic Auth with Next.js - Vercel Guide\n\nThis is the completed code for the Vercel guide \"Add Auth to a Next.js Site with Magic.link\" <-- link to be added.\n\n## Get Started\n\n1. Install dependencies.\n\n```shell\nnpm install\n# or\nyarn install\n```\n\n2. Rename `.env.local.example` to `.env.local` and add your Magic API keys.\n\n```shell\nmv .env.local.example .env.local\n```\n\n```javascript\n// .env.local\n\nNEXT_PUBLIC_MAGIC_PUBLISHABLE_KEY = \"YOUR MAGIC PUBLISHABLE KEY\"\nMAGIC_SECRET_KEY = \"YOUR MAGIC SECRET KEY\"\n```\n\n1. Run the development server.\n\n```shell\nnpm run dev\n# or\nyarn dev\n```\n\n4. Open http://localhost:3000 with your browser to see the result.\n", "explanation": "Here is a concise summary:\n\n**Block Purpose:** Vercel guide for setting up authentication (Auth) on a Next.js site using Magic.link.\n\n**Functionalities:** Installs dependencies, sets up Magic API keys in a `.env.local` file, and starts a development server to demonstrate the Auth feature.", "metadata": {"repo": "magiclabs/vercel-magic-guide", "file": "README.md", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise explanation:\n\n**Purpose:** A guide for deploying Magic.js (a serverless JavaScript framework) on Vercel (a platform for deploying web applications).\n\n**Content:** Documentation, code examples, and tips on how to set up and optimize Magic.js on Vercel, including API routing, authentication, and deployment best practices.", "file_summary": "Here is a concise summary of the 'README.md' file:\n\n**Next.js Authentication Guide**\n\nThis guide helps you set up authentication on a Next.js site using Magic.link, including dependency installation, API key configuration, and live demo."}
{"code": "{\n  \"compilerOptions\": {\n    \"baseUrl\": \".\",\n    \"paths\": {\n      \"@/*\": [\"./*\"]\n    }\n  }\n}\n", "explanation": "This is a JSON block that configures compiler options.\n\n**Purpose:** Configures the compiler's behavior for resolving imports.\n\n**Functionality:** Maps `@/` aliases to local paths, allowing relative imports from root directory.", "metadata": {"repo": "magiclabs/vercel-magic-guide", "file": "jsconfig.json", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise explanation:\n\n**Purpose:** A guide for deploying Magic.js (a serverless JavaScript framework) on Vercel (a platform for deploying web applications).\n\n**Content:** Documentation, code examples, and tips on how to set up and optimize Magic.js on Vercel, including API routing, authentication, and deployment best practices.", "file_summary": "Here is a concise and to the point summary of the file 'jsconfig.json':\n\n**Configures compiler settings:**\n\nMaps `@/` alias to local path for resolving relative imports from project's root directory."}
{"code": "import { createContext } from \"react\";\n\nexport const UserContext = createContext(null);\n", "explanation": "**Summary:**\n\nThis block creates a React context named `UserContext`, which can be used to share data globally throughout an application.", "metadata": {"repo": "magiclabs/vercel-magic-guide", "file": "lib/UserContext.js", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise explanation:\n\n**Purpose:** A guide for deploying Magic.js (a serverless JavaScript framework) on Vercel (a platform for deploying web applications).\n\n**Content:** Documentation, code examples, and tips on how to set up and optimize Magic.js on Vercel, including API routing, authentication, and deployment best practices.", "file_summary": "Here is a concise and to-the-point holistic summary of the file 'lib/UserContext.js':\n\n**File Summary:** \n`lib/UserContext.js` defines a global React context (`UserContext`) for sharing data across the application."}
{"code": "import { Magic } from \"magic-sdk\";\n\nconst createMagic = (key) => {\n  return typeof window !== \"undefined\" && new Magic(key);\n};\n\nexport const magic = createMagic(process.env.NEXT_PUBLIC_MAGIC_PUBLISHABLE_KEY);\n", "explanation": "Here is a concise summary:\n\nThis block imports the Magic SDK, creates an instance of it using a publishable key, and exports that instance as a constant called `magic`.", "metadata": {"repo": "magiclabs/vercel-magic-guide", "file": "lib/magic.js", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise explanation:\n\n**Purpose:** A guide for deploying Magic.js (a serverless JavaScript framework) on Vercel (a platform for deploying web applications).\n\n**Content:** Documentation, code examples, and tips on how to set up and optimize Magic.js on Vercel, including API routing, authentication, and deployment best practices.", "file_summary": "Here is a concise summary of the file 'lib/magic.js':\n\nImports Magic SDK, initializes with publishable key, and exports instance as constant `magic`."}
{"code": "/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  reactStrictMode: true,\n}\n\nmodule.exports = nextConfig\n", "explanation": "**Purpose:** Define Next.js configuration.\n\n**Functionality:** Exports a custom Next.js configuration object with `reactStrictMode` enabled, allowing for stricter React mode in development environment.", "metadata": {"repo": "magiclabs/vercel-magic-guide", "file": "next.config.js", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise explanation:\n\n**Purpose:** A guide for deploying Magic.js (a serverless JavaScript framework) on Vercel (a platform for deploying web applications).\n\n**Content:** Documentation, code examples, and tips on how to set up and optimize Magic.js on Vercel, including API routing, authentication, and deployment best practices.", "file_summary": "Here is a concise summary of the file 'next.config.js':\n\nDefines Next.js configuration, enabling stricter React mode in development environment."}
{"code": "import \"@/styles/globals.css\";\nimport { useState, useEffect } from \"react\";\nimport { UserContext } from \"@/lib/UserContext\";\nimport { useRouter } from \"next/router\";\nimport { magic } from \"@/lib/magic\";\n\nexport default function App({ Component, pageProps }) {\n  const [user, setUser] = useState();\n  const router = useRouter();\n\n  useEffect(() => {\n    setUser({ loading: true });\n    magic.user.isLoggedIn().then((isLoggedIn) => {\n      if (isLoggedIn) {\n        magic.user.getMetadata().then((userData) => setUser(userData));\n        router.push(\"/dashboard\");\n      } else {\n        router.push(\"/login\");\n        setUser({ user: null });\n      }\n    });\n  }, []);\n\n  return (\n    <UserContext.Provider value={[user, setUser]}>\n      <Component {...pageProps} />\n    </UserContext.Provider>\n  );\n}\n", "explanation": "Here is a concise summary:\n\n**Purpose:** Initializes Next.js app with authentication logic using Magic.js library.\n\n**Functionality:**\n\n1. Checks user login status on app startup.\n2. If logged in, retrieves user metadata and redirects to dashboard.\n3. If not logged in, redirects to login page and sets user state to null.\n4. Provides user data through a React context for use throughout the app.", "metadata": {"repo": "magiclabs/vercel-magic-guide", "file": "pages/_app.js", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise explanation:\n\n**Purpose:** A guide for deploying Magic.js (a serverless JavaScript framework) on Vercel (a platform for deploying web applications).\n\n**Content:** Documentation, code examples, and tips on how to set up and optimize Magic.js on Vercel, including API routing, authentication, and deployment best practices.", "file_summary": "Here is a concise holistic summary of the file 'pages/_app.js':\n\n** Initializes Next.js app with authentication logic using Magic.js library, managing user login status, metadata retrieval, and dashboard redirects. **"}
{"code": "import { Html, Head, Main, NextScript } from \"next/document\";\n\nexport default function Document() {\n  return (\n    <Html lang=\"en\">\n      <Head>\n        {/* eslint-disable-next-line @next/next/no-title-in-document-head*/}\n        <title>Magic.link with Next.js</title>\n      </Head>\n      <body>\n        <Main />\n        <NextScript />\n      </body>\n    </Html>\n  );\n}\n", "explanation": "**Purpose:** Defines a custom HTML document component for a Next.js application.\n\n**Functionality:** Sets the document's title, HTML language, and includes necessary scripts, allowing the application to render correctly in a web browser.", "metadata": {"repo": "magiclabs/vercel-magic-guide", "file": "pages/_document.js", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise explanation:\n\n**Purpose:** A guide for deploying Magic.js (a serverless JavaScript framework) on Vercel (a platform for deploying web applications).\n\n**Content:** Documentation, code examples, and tips on how to set up and optimize Magic.js on Vercel, including API routing, authentication, and deployment best practices.", "file_summary": "Here is a concise holistic summary of the file 'pages/_document.js':\n\n Defines a custom HTML document component for Next.js applications, setting key metadata (title, language) and including required scripts for proper rendering."}
{"code": "import { Magic } from \"@magic-sdk/admin\";\n\nlet mAdmin = new Magic(process.env.MAGIC_SECRET_KEY);\n\nexport default async function login(req, res) {\n  try {\n    const didToken = mAdmin.utils.parseAuthorizationHeader(\n      req.headers.authorization\n    );\n    await mAdmin.token.validate(didToken);\n    res.status(200).json({ authenticated: true });\n  } catch (error) {\n    res.status(500).json({ error: error.message });\n  }\n}\n", "explanation": "Here is a summary of the block:\n\n**Purpose:** Authenticate a user using Magic SDK's DID token validation.\n\n**Functionality:** Verifies a DID token in the request header, checks its validity with Magic Admin, and returns an authentication response if valid.", "metadata": {"repo": "magiclabs/vercel-magic-guide", "file": "pages/api/login.js", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise explanation:\n\n**Purpose:** A guide for deploying Magic.js (a serverless JavaScript framework) on Vercel (a platform for deploying web applications).\n\n**Content:** Documentation, code examples, and tips on how to set up and optimize Magic.js on Vercel, including API routing, authentication, and deployment best practices.", "file_summary": "Here is a concise and holistic summary of the file 'pages/api/login.js':\n\n**Authenticates users using Magic SDK's DID token validation**, verifying tokens against Magic Admin and returning a response upon success."}
{"code": "import { useContext } from \"react\";\nimport { UserContext } from \"@/lib/UserContext\";\nimport { magic } from \"@/lib/magic\";\nimport { useRouter } from \"next/router\";\n\nexport default function Dashboard() {\n  const [user, setUser] = useContext(UserContext);\n  const router = useRouter();\n\n  const logout = () => {\n    magic.user.logout().then(() => {\n      setUser({ user: null });\n      router.push(\"/login\");\n    });\n  };\n\n  return (\n    <>\n      {user?.issuer && (\n        <>\n          <h1>Dashboard</h1>\n          <h2>Email</h2>\n          <p>{user.email}</p>\n          <h2>Wallet Address</h2>\n          <p>{user.publicAddress}</p>\n          <button onClick={logout}>Logout</button>\n        </>\n      )}\n    </>\n  );\n}\n", "explanation": "Here is a summary of the block:\n\n**Dashboard Component**\n\nDisplays user dashboard with email, wallet address, and logout functionality.\n\nUses `UserContext` to retrieve user data and `magic` library for logout authentication.\n\nLogs out user when button clicked, redirects to login page.", "metadata": {"repo": "magiclabs/vercel-magic-guide", "file": "pages/dashboard.js", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise explanation:\n\n**Purpose:** A guide for deploying Magic.js (a serverless JavaScript framework) on Vercel (a platform for deploying web applications).\n\n**Content:** Documentation, code examples, and tips on how to set up and optimize Magic.js on Vercel, including API routing, authentication, and deployment best practices.", "file_summary": "Here is a holistic summary of the file 'pages/dashboard.js':\n\n**Dashboard Component**\n\nA user dashboard that displays email, wallet address, and provides logout functionality, utilizing UserContext and magic library for secure authentication."}
{"code": "import { useContext } from \"react\";\nimport { UserContext } from \"@/lib/UserContext\";\n\nexport default function Home() {\n  const [user] = useContext(UserContext);\n\n  return <div>{user?.loading && <p>Loading...</p>}</div>;\n}\n", "explanation": "This block uses React's `useContext` hook to retrieve user data from a shared context (`UserContext`) and displays a \"Loading...\" message if the user data is being loaded.", "metadata": {"repo": "magiclabs/vercel-magic-guide", "file": "pages/index.js", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise explanation:\n\n**Purpose:** A guide for deploying Magic.js (a serverless JavaScript framework) on Vercel (a platform for deploying web applications).\n\n**Content:** Documentation, code examples, and tips on how to set up and optimize Magic.js on Vercel, including API routing, authentication, and deployment best practices.", "file_summary": "Here is a holistic summary of the file 'pages/index.js':\n\n**Displays User Data or Loading Message**\n\nThis file uses React's `useContext` hook to load user data from a shared context, displaying a \"Loading...\" message while it loads."}
{"code": "import { useContext, useState, useEffect } from \"react\";\nimport { useRouter } from \"next/router\";\nimport { magic } from \"@/lib/magic\";\nimport { UserContext } from \"@/lib/UserContext\";\n\nexport default function Login() {\n  const [user, setUser] = useContext(UserContext);\n  const [email, setEmail] = useState(\"\");\n  const router = useRouter();\n\n  useEffect(() => {\n    user?.issuer && router.push(\"/dashboard\");\n  }, [user]);\n\n  const handleLogin = async (e) => {\n    e.preventDefault();\n\n    try {\n      const didToken = await magic.auth.loginWithEmailOTP({\n        email,\n      });\n\n      const res = await fetch(\"/api/login\", {\n        method: \"POST\",\n        headers: {\n          \"Content-type\": \"application/json\",\n          Authorization: `Bearer ${didToken}`,\n        },\n      });\n\n      if (res.ok) {\n        const userMetadata = await magic.user.getMetadata();\n        setUser(userMetadata);\n        router.push(\"/dashboard\");\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  return (", "explanation": "Here is a concise summary:\n\n**Purpose:** Handles user login functionality.\n\n**Functionality:** \n\n1. Checks for existing user context and redirects to dashboard if present.\n2. Allows user to input email and proceed with login via OTP.\n3. Posts request to API to authenticate user and updates user context.\n4. Redirects user to dashboard on successful authentication.", "metadata": {"repo": "magiclabs/vercel-magic-guide", "file": "pages/login.js", "chunk_number": 1, "total_chunks": 2}, "repository_explanation": "Here is a concise explanation:\n\n**Purpose:** A guide for deploying Magic.js (a serverless JavaScript framework) on Vercel (a platform for deploying web applications).\n\n**Content:** Documentation, code examples, and tips on how to set up and optimize Magic.js on Vercel, including API routing, authentication, and deployment best practices.", "file_summary": "Here's a concise summary of the 'pages/login.js' file:\n\n**Login Page Functionality:**\n\nThis JavaScript file handles user login functionality by checking for existing context, processing email input, authenticating via OTP, and redirecting to dashboard on successful login."}
{"code": "    <form onSubmit={handleLogin}>\n      <label htmlFor=\"email\">Email</label>\n      <input\n        name=\"email\"\n        type=\"email\"\n        value={email}\n        onChange={(e) => setEmail(e.target.value)}\n      />\n      <button type=\"submit\">Log in</button>\n    </form>\n  );\n}\n", "explanation": "This block is a login form that:\n\n* Collects user email input\n* Allows submission on button click (submit)\n* Uses state management to update email value with each input change", "metadata": {"repo": "magiclabs/vercel-magic-guide", "file": "pages/login.js", "chunk_number": 2, "total_chunks": 2}, "repository_explanation": "Here is a concise explanation:\n\n**Purpose:** A guide for deploying Magic.js (a serverless JavaScript framework) on Vercel (a platform for deploying web applications).\n\n**Content:** Documentation, code examples, and tips on how to set up and optimize Magic.js on Vercel, including API routing, authentication, and deployment best practices.", "file_summary": "Here's a concise summary of the 'pages/login.js' file:\n\n**Login Page Functionality:**\n\nThis JavaScript file handles user login functionality by checking for existing context, processing email input, authenticating via OTP, and redirecting to dashboard on successful login."}
{"code": "* {\n  box-sizing: border-box;\n  padding: 0;\n  margin: 0;\n  font-family: Arial, Helvetica, sans-serif;\n  font-size: 62.5%;\n}\n\nhtml,\nbody {\n  max-width: 100vw;\n  overflow-x: hidden;\n}\n\nbody {\n  text-align: center;\n  margin: 10rem;\n  display: flex;\n  justify-content: center;\n}\n\ndiv {\n  width: 55rem;\n  border-radius: 0.75rem;\n  padding: 5rem 0;\n  background-color: #faf0e6;\n}\n\nh1 {\n  font-size: 4rem;\n  margin-bottom: 2.8rem;\n}\n\nh2 {\n  font-size: 2.6rem;\n  margin-bottom: 0.5rem;\n}\n\np {\n  font-size: 1.8rem;\n  margin-bottom: 2.5rem;\n  font-style: italic;\n}\n\nform {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n}\n\nlabel {\n  font-size: 2.8rem;\n  font-weight: bold;\n  letter-spacing: 0.05rem;\n}\n\ninput {\n  font-size: 1.8rem;\n  width: 38rem;\n  padding: 1rem 2.4rem;\n  margin: 2rem 0;\n  border: 1px solid rgb(123, 123, 123);\n  outline: none;\n  border-radius: 1rem;\n  background-color: #fbf8f5;\n}\n\nbutton {\n  background-color: #6851ff;\n  color: white;\n  border: none;\n  border-radius: 2rem;\n  margin-top: 2rem;\n  padding: 1.2rem 4.8rem;\n  font-size: 2rem;", "explanation": "Here is a concise summary of the purpose and functionality:\n\n**Purpose:** Establishing basic styling and layout for an HTML/CSS project.\n\n**Functionality:**\n\n* Sets global styles (font, spacing, etc.) using universal CSS selectors (*).\n* Defines specific styling for HTML elements (e.g., h1, h2, p, form, label, input, button) with various properties (color, size, margin, padding, etc.).\n* Establishes a responsive layout with max-width and overflow-x settings.\n* Centers content horizontally using flexbox.\n* Styles a container div with a background color, border radius, and padding.\n* Defines font sizes for headings and paragraphs.", "metadata": {"repo": "magiclabs/vercel-magic-guide", "file": "styles/globals.css", "chunk_number": 1, "total_chunks": 2}, "repository_explanation": "Here is a concise explanation:\n\n**Purpose:** A guide for deploying Magic.js (a serverless JavaScript framework) on Vercel (a platform for deploying web applications).\n\n**Content:** Documentation, code examples, and tips on how to set up and optimize Magic.js on Vercel, including API routing, authentication, and deployment best practices.", "file_summary": "Here is a concise summary of the file 'styles/globals.css':\n\n**Globals.css Summary:** Establishes basic styling and layout for an HTML/CSS project, setting global styles, defining specific element styles, establishing responsive layout, and centering content using flexbox."}
{"code": "  font-weight: bold;\n  letter-spacing: 0.1rem;\n  cursor: pointer;\n}\n\nbutton:active {\n  background-color: #4e3cc0;\n}\n", "explanation": "**Summary**\n\nThis block defines CSS styles for a button element, making it appear bold, with slightly increased letter spacing, and changing its appearance when clicked (active state).", "metadata": {"repo": "magiclabs/vercel-magic-guide", "file": "styles/globals.css", "chunk_number": 2, "total_chunks": 2}, "repository_explanation": "Here is a concise explanation:\n\n**Purpose:** A guide for deploying Magic.js (a serverless JavaScript framework) on Vercel (a platform for deploying web applications).\n\n**Content:** Documentation, code examples, and tips on how to set up and optimize Magic.js on Vercel, including API routing, authentication, and deployment best practices.", "file_summary": "Here is a concise summary of the file 'styles/globals.css':\n\n**Globals.css Summary:** Establishes basic styling and layout for an HTML/CSS project, setting global styles, defining specific element styles, establishing responsive layout, and centering content using flexbox."}

{"code": "const express = require(\"express\");\nconst path = require(\"path\");\nconst cookieParser = require(\"cookie-parser\");\nconst logger = require(\"morgan\");\nconst session = require(\"express-session\");\nconst passport = require(\"passport\");\n\nconst indexRouter = require(\"./routes/index\");\nconst userRouter = require(\"./routes/user\");\n\nconst app = express();\napp.set(\"trust proxy\", 1);\napp.set(\"view engine\", \"ejs\");\n\napp.use(logger(\"dev\"));\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\napp.use(cookieParser());\napp.use(express.static(path.join(__dirname, \"public\")));\napp.use(\n  session({\n    secret: \"not my cat's name\",\n    resave: false,\n    saveUninitialized: true,\n    cookie: {\n      maxAge: 60 * 60 * 1000, // 1 hour\n      // secure: true, // Uncomment this line to enforce HTTPS protocol.\n      sameSite: true\n    }\n  })\n);\napp.use(passport.initialize());\napp.use(passport.session());\n\napp.use(\"/\", indexRouter);\napp.use(\"/user\", userRouter);\n\nconst listener = app.listen(8080, function() {", "explanation": "Here is a concise summary of the purpose and functionality of this block:\n\n**Purpose:** Sets up an Express.js web application with various middlewares and routers.\n\n**Functionality:**\n\n* Requires necessary packages (express, path, cookie-parser, logger, etc.)\n* Configures app settings (view engine, trust proxy)\n* Sets up middleware for logging, JSON parsing, cookie handling, static file serving\n* Initializes session management and passport authentication\n* Defines routes for index and user pages", "metadata": {"repo": "magiclabs/example-nodejs", "file": "app.js", "chunk_number": 1, "total_chunks": 2}, "repository_explanation": "I don't see a repository mentioned. Please provide the link or description of the repository you'd like me to summarize, so I can give a concise explanation of its purpose and content.", "file_summary": "Here is a concise summary of the 'app.js' file:\n\n\"Sets up an Express.js web app with middlewares, routers, logging, and authentication, then logs the listening port.\""}
{"code": "  console.log(\"Listening on port \" + listener.address().port);\n});\n", "explanation": "**Purpose:** Logs a message indicating the server is listening on a specified port.\n\n**Functionality:** Outputs a string to the console stating the port number being used by the server, using `console.log`.", "metadata": {"repo": "magiclabs/example-nodejs", "file": "app.js", "chunk_number": 2, "total_chunks": 2}, "repository_explanation": "I don't see a repository mentioned. Please provide the link or description of the repository you'd like me to summarize, so I can give a concise explanation of its purpose and content.", "file_summary": "Here is a concise summary of the 'app.js' file:\n\n\"Sets up an Express.js web app with middlewares, routers, logging, and authentication, then logs the listening port.\""}
{"code": "body {\n  font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto,\n    Oxygen-Sans, Ubuntu, Cantarell, \"Helvetica Neue\", sans-serif;\n  height: 100vh;\n  display: grid;\n  font-size: 18px;\n}\n\n#app {\n  align-self: center;\n  justify-self: center;\n  background-color: #eee;\n  text-align: center;\n  width: 300px;\n  padding: 27px 18px;\n}\n\nh1 {\n  margin: 0;\n  padding-bottom: 18px;\n  font-size: 18px;\n}\n\ninput,\nbutton {\n  padding: 9px;\n  font-size: 18px;\n  margin-bottom: 9px;\n}\n\n#apple-count {\n  margin-bottom: 18px;\n  background-color: #ddd;\n  padding: 9px 0;\n}\n\nform {\n  margin: 0;\n}\n", "explanation": "Here is a concise summary:\n\nThis block of code styles a webpage's layout, including typography, spacing, and positioning elements such as text, input fields, buttons, and forms within a grid container.", "metadata": {"repo": "magiclabs/example-nodejs", "file": "public/styles.css", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "I don't see a repository mentioned. Please provide the link or description of the repository you'd like me to summarize, so I can give a concise explanation of its purpose and content.", "file_summary": "I don't see any code blocks or summaries provided. It seems you forgot to include them.\n\nHowever, based on your description of providing code block summaries, I'll create a fictional holistic summary for the file 'public/styles.css':\n\n**Holistic Summary:**\n\nThis CSS stylesheet (\"public/styles.css\") defines the visual layout and styling for a webpage, encompassing typography, spacing, positioning, and grid-based structure to neatly arrange elements like text, input fields, buttons, and forms."}
{"code": "const express = require(\"express\");\nconst router = express.Router();\n\nconst MAGIC_PUBLISHABLE_KEY = process.env.MAGIC_PUBLISHABLE_KEY;\n\n// GET home page\nrouter.get(\"/\", (req, res) => {\n  res.render(\"index\", { title: \"Magic Apple Store \ud83c\udf4e\", MAGIC_PUBLISHABLE_KEY });\n});\n\nmodule.exports = router;\n", "explanation": "Here is a concise summary:\n\nThis block sets up an Express.js router to handle GET requests for the root URL (\"/\"), rendering an HTML template (\"index\") with a Magic PUBLISHABLE KEY.", "metadata": {"repo": "magiclabs/example-nodejs", "file": "routes/index.js", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "I don't see a repository mentioned. Please provide the link or description of the repository you'd like me to summarize, so I can give a concise explanation of its purpose and content.", "file_summary": "Here is a concise summary of the file 'routes/index.js':\n\n\"Sets up Express.js route for root URL ('/') with index template, including PUBLISHABLE KEY.\""}
{"code": "const express = require(\"express\");\nconst router = express.Router();\n\nconst Datastore = require(\"nedb-promise\");\nlet users = new Datastore({ filename: \"users.db\", autoload: true });\n\n/* 1\ufe0f\u20e3 Setup Magic Admin SDK */\nconst { Magic } = require(\"@magic-sdk/admin\");\nconst magic = new Magic(process.env.MAGIC_SECRET_KEY);\n\n/* 2\ufe0f\u20e3 Implement Auth Strategy */\nconst passport = require(\"passport\");\nconst MagicStrategy = require(\"passport-magic\").Strategy;\n\nconst strategy = new MagicStrategy(async function(user, done) {\n  const userMetadata = await magic.users.getMetadataByIssuer(user.issuer);\n  const existingUser = await users.findOne({ issuer: user.issuer });\n  if (!existingUser) {\n    /* Create new user if doesn't exist */\n    return signup(user, userMetadata, done);\n  } else {\n    /* Login user if otherwise */\n    return login(user, done);\n  }\n});\n\npassport.use(strategy);\n\n/* 3\ufe0f\u20e3 Implement Auth Behaviors */\n\n/* Implement User Signup */\nconst signup = async (user, userMetadata, done) => {\n  let newUser = {", "explanation": "Here is a concise summary of the purpose and functionality of this block:\n\n**Purpose:** Set up authentication using Magic Admin SDK with Passport.js as an authorization strategy.\n\n**Functionality:**\n\n* Import required libraries (Express, nedb-promise, Magic Admin SDK, Passport.js)\n* Define a MagicStrategy for authenticating users\n* Integrate the strategy into Passport.js to enable user login and signup functionality", "metadata": {"repo": "magiclabs/example-nodejs", "file": "routes/user.js", "chunk_number": 1, "total_chunks": 4}, "repository_explanation": "I don't see a repository mentioned. Please provide the link or description of the repository you'd like me to summarize, so I can give a concise explanation of its purpose and content.", "file_summary": "Here's a concise and holistic summary of the file 'routes/user.js':\n\nThis file implements user authentication functionality using Passport.js with Magic Admin SDK as an authorization strategy, integrating it with MongoDB for data storage. It provides conditional responses for logged-in users, including endpoints for user data retrieval, apple purchases, and logout, while returning error messages if not logged in."}
{"code": "    issuer: user.issuer,\n    email: userMetadata.email,\n    lastLoginAt: user.claim.iat\n  };\n  await users.insert(newUser);\n  return done(null, newUser);\n};\n\n/* Implement User Login */\nconst login = async (user, done) => {\n  /* Replay attack protection (https://go.magic.link/replay-attack) */\n  if (user.claim.iat <= user.lastLoginAt) {\n    return done(null, false, {\n      message: `Replay attack detected for user ${user.issuer}}.`\n    });\n  }\n  await users.update(\n    { issuer: user.issuer },\n    { $set: { lastLoginAt: user.claim.iat } }\n  );\n  return done(null, user);\n};\n\n/* Attach middleware to login endpoint */\nrouter.post(\"/login\", passport.authenticate(\"magic\"), (req, res) => {\n  if (req.user) {\n      res.status(200).end('User is logged in.');\n  } else {\n     return res.status(401).end('Could not log user in.');\n  }\n});\n\n/* 4\ufe0f\u20e3 Implement Session Behavior */\n\n/* Defines what data are stored in the user session */\npassport.serializeUser((user, done) => {\n  done(null, user.issuer);\n});\n", "explanation": "Here is a summary of the purpose and functionality:\n\n**Authentication Blocks:**\n\n* `newUser` block: Creates a new user document with issuer, email, and last login time.\n* `login` function: Verifies user identity using passport authenticate middleware; detects replay attacks by checking if the issued token has been updated since the user's last login.\n* `passport.serializeUser`: Stores only the user's issuer in the session.", "metadata": {"repo": "magiclabs/example-nodejs", "file": "routes/user.js", "chunk_number": 2, "total_chunks": 4}, "repository_explanation": "I don't see a repository mentioned. Please provide the link or description of the repository you'd like me to summarize, so I can give a concise explanation of its purpose and content.", "file_summary": "Here's a concise and holistic summary of the file 'routes/user.js':\n\nThis file implements user authentication functionality using Passport.js with Magic Admin SDK as an authorization strategy, integrating it with MongoDB for data storage. It provides conditional responses for logged-in users, including endpoints for user data retrieval, apple purchases, and logout, while returning error messages if not logged in."}
{"code": "/* Populates user data in the req.user object */\npassport.deserializeUser(async (id, done) => {\n  try {\n    const user = await users.findOne({ issuer: id });\n    done(null, user);\n  } catch (err) {\n    done(err, null);\n  }\n});\n\n/* 5\ufe0f\u20e3 Implement User Endpoints */\n\n/* Implement Get Data Endpoint */\nrouter.get(\"/\", async (req, res) => {\n  if (req.isAuthenticated()) {\n    return res\n      .status(200)\n      .json(req.user)\n      .end();\n  } else {\n    return res.status(401).end(`User is not logged in.`);\n  }\n});\n\n/* Implement Buy Apple Endpoint */\nrouter.post(\"/buy-apple\", async (req, res) => {\n  if (req.isAuthenticated()) {\n    await users.update(\n      { issuer: req.user.issuer },\n      { $inc: { appleCount: 1 } }\n    );\n    return res.status(200).end();\n  } else {\n    return res.status(401).end(`User is not logged in.`);\n  }\n});\n\n/* Implement Logout Endpoint */\nrouter.post(\"/logout\", async (req, res) => {\n  if (req.isAuthenticated()) {\n    await magic.users.logoutByIssuer(req.user.issuer);\n    req.logout();", "explanation": "**Summary**\n\nThis block of code implements user authentication functionality using Passport.js and MongoDB.\n\n* It populates user data into the `req.user` object through deserialization.\n* Three endpoints are implemented:\n\t1. A GET endpoint that returns the logged-in user's data (200 response) or indicates they're not logged in (401 response).\n\t2. A POST endpoint to buy an apple, which increments the apple count for the authenticated user and returns a 200 response if successful.\n\t3. A POST endpoint to logout the user, logging them out using Magic Login and clearing their session.", "metadata": {"repo": "magiclabs/example-nodejs", "file": "routes/user.js", "chunk_number": 3, "total_chunks": 4}, "repository_explanation": "I don't see a repository mentioned. Please provide the link or description of the repository you'd like me to summarize, so I can give a concise explanation of its purpose and content.", "file_summary": "Here's a concise and holistic summary of the file 'routes/user.js':\n\nThis file implements user authentication functionality using Passport.js with Magic Admin SDK as an authorization strategy, integrating it with MongoDB for data storage. It provides conditional responses for logged-in users, including endpoints for user data retrieval, apple purchases, and logout, while returning error messages if not logged in."}
{"code": "    return res.status(200).end();\n  } else {\n    return res.status(401).end(`User is not logged in.`);\n  }\n});\n\nmodule.exports = router;\n", "explanation": "**Purpose:** Returns a 401 status code with an error message if the user is not logged in, or a 200 status code to indicate success.\n\n**Functionality:** Conditional response based on user login status.", "metadata": {"repo": "magiclabs/example-nodejs", "file": "routes/user.js", "chunk_number": 4, "total_chunks": 4}, "repository_explanation": "I don't see a repository mentioned. Please provide the link or description of the repository you'd like me to summarize, so I can give a concise explanation of its purpose and content.", "file_summary": "Here's a concise and holistic summary of the file 'routes/user.js':\n\nThis file implements user authentication functionality using Passport.js with Magic Admin SDK as an authorization strategy, integrating it with MongoDB for data storage. It provides conditional responses for logged-in users, including endpoints for user data retrieval, apple purchases, and logout, while returning error messages if not logged in."}
{"code": "{\n  \"infiniteLoopProtection\": true,\n  \"hardReloadOnChange\": true,\n  \"view\": \"browser\"\n}\n", "explanation": "This block appears to be a configuration object, likely in JSON format, that sets three properties:\n\n* `infiniteLoopProtection`: Enables protection against infinite loops.\n* `hardReloadOnChange`: Forces a hard reload of the page when certain changes occur.\n* `view`: Sets the view mode to \"browser\".", "metadata": {"repo": "magiclabs/example-nodejs", "file": "sandbox.config.json", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "I don't see a repository mentioned. Please provide the link or description of the repository you'd like me to summarize, so I can give a concise explanation of its purpose and content.", "file_summary": "Here is a holistic summary of the file 'sandbox.config.json':\n\n`sandbox.config.json` is a configuration file that sets three properties: enables infinite loop protection, forces hard reload on change, and sets the view mode to \"browser\"."}
{"code": "<html>\n  <head>\n    <title><%= title %></title>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"styles.css\" />\n    <script src=\"https://cdn.jsdelivr.net/npm/magic-sdk/dist/magic.js\"></script>\n    <script>\n      const magic = new Magic(\"<%= MAGIC_PUBLISHABLE_KEY %>\");\n      const serverUrl = window.location.href;\n      const render = async () => {\n        /* Show login form if user is not logged in */\n        let html = `\n          <h1>Please sign up or login</h1>\n          <form onsubmit=\"handleLogin(event)\">\n            <input type=\"email\" name=\"email\" required=\"required\" placeholder=\"Enter your email\" />\n            <button type=\"submit\">Send</button>\n          </form>\n        `;\n        /* Get user data including email & apple count */\n        let res = await fetch(`${serverUrl}user/`);\n        if (res.status == 200) {\n          let userData = await res.json();", "explanation": "Here is a concise summary:\n\n**Purpose:** Render a login form or display user data, depending on whether the user is logged in.\n\n**Functionality:**\n\n* Loads Magic.js library\n* Checks if user is logged in by fetching user data from server URL\n* If logged out, displays login form with email input and submit button\n* If logged in, renders user data (including email and Apple count)", "metadata": {"repo": "magiclabs/example-nodejs", "file": "views/index.ejs", "chunk_number": 1, "total_chunks": 3}, "repository_explanation": "I don't see a repository mentioned. Please provide the link or description of the repository you'd like me to summarize, so I can give a concise explanation of its purpose and content.", "file_summary": "Here is a concise summary of the file 'views/index.ejs':\n\n**Summary:** This EJS template renders user data and UI elements, displaying a login form when logged out or user information (email and apple count) when logged in, along with buttons for buying apples and logging out."}
{"code": "          let appleCount = userData.appleCount;\n          let appleDisplay =\n            appleCount > 0 ? \"\ud83c\udf4e\".repeat(appleCount) : \"You have no apples...\";\n          html = `\n            <h1>Current user: ${userData.email}</h1>\n            <div id=\"apple-count\">${appleDisplay}</div>\n            <button onclick=\"handleBuyApple()\">Buy Apple</button>\n            <button onclick=\"handleLogout()\">Logout</button>\n          `;\n        }\n        document.getElementById(\"app\").innerHTML = html;\n      };\n\n      const handleLogin = async e => {\n        e.preventDefault();\n        const email = new FormData(e.target).get(\"email\");\n        if (email) {\n          /* One-liner login \ud83e\udd2f */\n          const didToken = await magic.auth.loginWithMagicLink({ email });\n          await fetch(`${serverUrl}user/login`, {\n            headers: new Headers({\n              Authorization: \"Bearer \" + didToken\n            }),\n            withCredentials: true,\n            credentials: \"same-origin\",\n            method: \"POST\"\n          });", "explanation": "Here is a concise summary of the purpose and functionality of this code block:\n\n**Purpose:** Update the UI with user data and display buttons for buying apples and logging out.\n\n**Functionality:**\n\n* Retrieves apple count from user data\n* Displays apple count as a string of emojis or a message indicating no apples\n* Renders HTML template with user email, apple count, buy apple button, and logout button\n* Updates the UI by setting innerHTML of an element with ID \"app\"", "metadata": {"repo": "magiclabs/example-nodejs", "file": "views/index.ejs", "chunk_number": 2, "total_chunks": 3}, "repository_explanation": "I don't see a repository mentioned. Please provide the link or description of the repository you'd like me to summarize, so I can give a concise explanation of its purpose and content.", "file_summary": "Here is a concise summary of the file 'views/index.ejs':\n\n**Summary:** This EJS template renders user data and UI elements, displaying a login form when logged out or user information (email and apple count) when logged in, along with buttons for buying apples and logging out."}
{"code": "          render();\n        }\n      };\n\n      const handleLogout = async () => {\n        await fetch(`${serverUrl}user/logout`, { method: \"POST\" });\n        render();\n      };\n\n      const handleBuyApple = async () => {\n        await fetch(`${serverUrl}user/buy-apple`, { method: \"POST\" });\n        render();\n      };\n    </script>\n  </head>\n  <body onload=\"render()\">\n    <div id=\"app\">Loading...</div>\n  </body>\n</html>\n", "explanation": "**Purpose:** A JavaScript script that handles user interactions with a server.\n\n**Functionality:**\n\n* Calls `render()` function when page loads or after server requests.\n* Handles three server requests:\n\t+ Logout\n\t+ Buying an apple (with no apparent context)\n* Sends POST requests to the server for each interaction.", "metadata": {"repo": "magiclabs/example-nodejs", "file": "views/index.ejs", "chunk_number": 3, "total_chunks": 3}, "repository_explanation": "I don't see a repository mentioned. Please provide the link or description of the repository you'd like me to summarize, so I can give a concise explanation of its purpose and content.", "file_summary": "Here is a concise summary of the file 'views/index.ejs':\n\n**Summary:** This EJS template renders user data and UI elements, displaying a login form when logged out or user information (email and apple count) when logged in, along with buttons for buying apples and logging out."}

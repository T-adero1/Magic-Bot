{"code": "* text=auto\n\n/tests              export-ignore\n/.editorconfig      export-ignore\n/.gitattributes     export-ignore\n/.gitignore         export-ignore\n/phpunit.xml.dist   export-ignore\n", "explanation": "**Summary:** This block specifies files and directories that should be ignored when exporting or running tests.", "metadata": {"repo": "magiclabs/magic-laravel", "file": ".gitattributes", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "This repository is a Laravel package that integrates Magic, a no-code API platform, into Laravel applications. Its primary purpose is to enable seamless communication between Laravel and Magic.\n\nKey content:\n\n* Provides a Laravel package for using Magic APIs\n* Allows developers to interact with Magic without writing code\n* Includes configuration files and service providers for easy setup", "file_summary": "Here is a concise summary:\n\n`.gitattributes`: Specifies files and directories to ignore during export and testing."}
{"code": "<?php\n\nreturn PhpCsFixer\\Config::create()\n    ->setRiskyAllowed(true)\n    ->setRules([\n        // Rulesets\n        '@PSR2' => true,\n        '@PhpCsFixer' => true,\n        '@PhpCsFixer:risky' => true,\n        '@PHP56Migration:risky' => true,\n        '@PHPUnit57Migration:risky' => true,\n\n        // Additional rules\n        'fopen_flags' => true,\n        'linebreak_after_opening_tag' => true,\n        'native_function_invocation' => true,\n        'method_argument_space' => ['ensure_fully_multiline' => true],\n        'ordered_imports' => true,\n\n        // --- Diffs from @PhpCsFixer / @PhpCsFixer:risky ---\n\n        // This is just prettier / easier to read.\n        'concat_space' => ['spacing' => 'one'],\n\n        // This causes strange ordering with codegen'd classes. We might be\n        // able to enable this if we update codegen to output class elements\n        // in the correct order.\n        'ordered_class_elements' => false,\n\n        // Keep this disabled to avoid unnecessary diffs in PHPDoc comments of", "explanation": "**Summary:**\n\nThis block is a PHP configuration file that sets up rules for code formatting using PhpCsFixer, a PHP coding standard fixer.\n\n**Key Functionality:**\n\n* Enables various rulesets (e.g., PSR2, @PhpCsFixer)\n* Specifies additional rules for formatting (e.g., fopen flags, line breaks, method arguments)\n* Disables certain rules to prevent diffs in generated code or comments", "metadata": {"repo": "magiclabs/magic-laravel", "file": ".php_cs.dist", "chunk_number": 1, "total_chunks": 2}, "repository_explanation": "This repository is a Laravel package that integrates Magic, a no-code API platform, into Laravel applications. Its primary purpose is to enable seamless communication between Laravel and Magic.\n\nKey content:\n\n* Provides a Laravel package for using Magic APIs\n* Allows developers to interact with Magic without writing code\n* Includes configuration files and service providers for easy setup", "file_summary": "Here is a concise summary:\n\nThe `.php_cs.dist` file configures PHP code formatting using PhpCsFixer, enabling rulesets, customizing formatting settings, and disabling specific rules for generated code."}
{"code": "        // codegen'd classes.\n        'phpdoc_align' => false,\n    ])\n;\n", "explanation": "This is a configuration snippet, likely in PHP, specifying settings for generated code (codegen'd). The purpose is to control alignment of PHPDoc comments, setting it to false.", "metadata": {"repo": "magiclabs/magic-laravel", "file": ".php_cs.dist", "chunk_number": 2, "total_chunks": 2}, "repository_explanation": "This repository is a Laravel package that integrates Magic, a no-code API platform, into Laravel applications. Its primary purpose is to enable seamless communication between Laravel and Magic.\n\nKey content:\n\n* Provides a Laravel package for using Magic APIs\n* Allows developers to interact with Magic without writing code\n* Includes configuration files and service providers for easy setup", "file_summary": "Here is a concise summary:\n\nThe `.php_cs.dist` file configures PHP code formatting using PhpCsFixer, enabling rulesets, customizing formatting settings, and disabling specific rules for generated code."}
{"code": "# Magic Laravel SDK\n\nThis package provides direct Laravel integration for [Magic Admin PHP SDK](https://github.com/magiclabs/magic-admin-php).\n\n## Requirements\n\nLaravel 5.3 or newer.\n\n## Installation\n\nRun this command to install via composer.\n\n```\ncomposer require magiclabs/magic-laravel\n```\n\n## Older Laravel Installations\n\nIf you are using Laravel 5.5 or newer then skip this part. Otherwise you will need to manually register the service provider and facade alias by going to `config/app.php`.\n\nAdd to the `providers` array:\n\n```\nMagicLaravel\\ServiceProvider::class\n```\n\nAdd to the `aliases` array:\n\n```\n'Magic' => MagicLaravel\\Facade::class,\n```\n\n## Setup\n\nPublish config file.\n\n```\nphp artisan vendor:publish --provider=\"MagicLaravel\\ServiceProvider\"\n```\n\nAdd `MAGIC_SECRET_API_KEY` to your **.env** file by going to the [Magic Dashboard](https://dashboard.magic.link).\n\n```\nMAGIC_SECRET_API_KEY=sk_XXXX_XXXXXXXXXXXXXXXX\n```\n\n## Usage\n", "explanation": "Here is a concise summary of the purpose and functionality of this block:\n\n**Purpose:** Provides direct integration with Magic Admin PHP SDK for Laravel applications.\n\n**Functionality:**\n\n* Installs via Composer using `composer require magiclabs/magic-laravel`\n* Requires Laravel 5.3 or newer\n* Enables use of Magic facade (`Magic`) in Laravel code", "metadata": {"repo": "magiclabs/magic-laravel", "file": "README.md", "chunk_number": 1, "total_chunks": 2}, "repository_explanation": "This repository is a Laravel package that integrates Magic, a no-code API platform, into Laravel applications. Its primary purpose is to enable seamless communication between Laravel and Magic.\n\nKey content:\n\n* Provides a Laravel package for using Magic APIs\n* Allows developers to interact with Magic without writing code\n* Includes configuration files and service providers for easy setup", "file_summary": "Here's a holistic summary of the file 'README.md' in a concise and to-the-point manner:\n\n\"This package integrates the Magic Admin PHP SDK with Laravel applications, enabling access to Magic features through the `Magic` facade or app helper methods for token validation and user metadata retrieval.\""}
{"code": "For complete documentation see [Magic Admin PHP SDK](https://github.com/magiclabs/magic-admin-php) and the [Magic docs](https://docs.magic.link/admin-sdk/php/get-started).\n\nGet instance using the app helper:\n\n```\n$magic = app('MagicLaravel\\Magic');\n\n$magic->token->validate('<DID_Token>');\n\n$magic->user->get_metadata_by_token('<DID_Token>');\n```\n\nOr get instance using the facade:\n\n```\nuse Magic;\n\nMagic::token()->validate('<DID_Token>');\n\nMagic::user()->get_metadata_by_token('<DID_Token>');\n```\n", "explanation": "Here is a concise summary of the block's purpose and functionality:\n\n**Purpose:** Initialize the Magic Admin PHP SDK.\n\n**Functionality:** Provides methods for validating tokens and retrieving user metadata using either an app helper or facade approach.", "metadata": {"repo": "magiclabs/magic-laravel", "file": "README.md", "chunk_number": 2, "total_chunks": 2}, "repository_explanation": "This repository is a Laravel package that integrates Magic, a no-code API platform, into Laravel applications. Its primary purpose is to enable seamless communication between Laravel and Magic.\n\nKey content:\n\n* Provides a Laravel package for using Magic APIs\n* Allows developers to interact with Magic without writing code\n* Includes configuration files and service providers for easy setup", "file_summary": "Here's a holistic summary of the file 'README.md' in a concise and to-the-point manner:\n\n\"This package integrates the Magic Admin PHP SDK with Laravel applications, enabling access to Magic features through the `Magic` facade or app helper methods for token validation and user metadata retrieval.\""}
{"code": "{\n  \"name\": \"magiclabs/magic-laravel\",\n  \"description\": \"Magic Admin Laravel Library\",\n  \"keywords\": [\n    \"magic\",\n    \"link\",\n    \"admin\",\n    \"authentication\",\n    \"passwordless\",\n    \"oauth2\",\n    \"webauthen\",\n    \"laravel\"\n  ],\n  \"homepage\": \"https://magic.link\",\n  \"license\": \"MIT\",\n  \"authors\": [\n    {\n      \"name\": \"Magic Labs Inc.\",\n      \"email\": \"support@magic.link\"\n    }\n  ],\n  \"require\": {\n    \"magiclabs/magic-admin-php\": \"^0.1.4\",\n    \"illuminate/support\": \"^5.3|^6.0|^7.0|^8.0|^9.0|^10.0\"\n  },\n  \"require-dev\": {\n    \"orchestra/testbench\": \"^6.5\"\n  },\n  \"autoload\": {\n    \"psr-4\": {\n      \"MagicLaravel\\\\\": \"src/\"\n    }\n  },\n  \"autoload-dev\": {\n    \"psr-4\": {\n      \"MagicLaravel\\\\Tests\\\\\": \"tests\"\n    }\n  },\n  \"extra\": {\n    \"laravel\": {\n      \"providers\": [\n        \"MagicLaravel\\\\ServiceProvider\"\n      ],\n      \"aliases\": {\n        \"Magic\": \"MagicLaravel\\\\Facade\"\n      }\n    }\n  }\n}\n", "explanation": "This block is a JSON package definition for the Magic Admin Laravel Library, which provides a passwordless authentication system using OAuth2 and WebAuthn protocols in a Laravel environment.", "metadata": {"repo": "magiclabs/magic-laravel", "file": "composer.json", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "This repository is a Laravel package that integrates Magic, a no-code API platform, into Laravel applications. Its primary purpose is to enable seamless communication between Laravel and Magic.\n\nKey content:\n\n* Provides a Laravel package for using Magic APIs\n* Allows developers to interact with Magic without writing code\n* Includes configuration files and service providers for easy setup", "file_summary": "Here's a concise summary:\n\n`composer.json`: Defines the Magic Admin Laravel Library, enabling passwordless authentication via OAuth2 and WebAuthn within a Laravel setup."}
{"code": "<?php\n\nreturn [\n    /*\n     |--------------------------------------------------------------------------\n     | Secret API Key\n     |--------------------------------------------------------------------------\n     |\n     | Your API secret key retrieved from https://dashboard.magic.link\n     |\n     */\n\n    'secret_api_key' => env('MAGIC_SECRET_API_KEY', null),\n\n    /*\n     |--------------------------------------------------------------------------\n     | HTTP request strategy\n     |--------------------------------------------------------------------------\n     |\n     | Customize your HTTP request strategy when making calls to the Magic API\n     |\n     */\n\n    'http' => [\n        'retries' => env('MAGIC_RETRIES', 3), // Total number of retries to allow\n\n        'timeout' => env('MAGIC_TIMEOUT', 10), // A period of time the request is going to wait for a response\n\n        'backoff_factor' => env('MAGIC_BACKOFF_FACTOR', 0.02), // A backoff factor to apply between retry attempts\n    ],\n];\n", "explanation": "This block defines configuration settings for interacting with the Magic API in a PHP application.\n\nIt contains two main sections:\n\n* Secret API Key: Stores an API secret key from Magic.\n* HTTP Request Strategy: Customizes how the application makes requests to the Magic API, including retry attempts and timeouts.", "metadata": {"repo": "magiclabs/magic-laravel", "file": "config/magic.php", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "This repository is a Laravel package that integrates Magic, a no-code API platform, into Laravel applications. Its primary purpose is to enable seamless communication between Laravel and Magic.\n\nKey content:\n\n* Provides a Laravel package for using Magic APIs\n* Allows developers to interact with Magic without writing code\n* Includes configuration files and service providers for easy setup", "file_summary": "Here is a concise summary of the file 'config/magic.php':\n\n**Magic API Configuration**\n\nStores Magic API secret key and customizes request strategy with retry attempts and timeouts."}
{"code": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<phpunit backupGlobals=\"false\"\n         backupStaticAttributes=\"false\"\n         bootstrap=\"vendor/autoload.php\"\n         colors=\"true\"\n         convertErrorsToExceptions=\"true\"\n         convertNoticesToExceptions=\"true\"\n         convertWarningsToExceptions=\"true\"\n         processIsolation=\"false\"\n         stopOnFailure=\"false\"\n>\n    <testsuites>\n        <testsuite name=\"Package Test Suite\">\n            <directory suffix=\".php\">./tests/</directory>\n        </testsuite>\n    </testsuites>\n</phpunit>\n", "explanation": "This block is a PHPUnit configuration file, specifying test suite settings and paths for a PHP project.", "metadata": {"repo": "magiclabs/magic-laravel", "file": "phpunit.xml.dist", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "This repository is a Laravel package that integrates Magic, a no-code API platform, into Laravel applications. Its primary purpose is to enable seamless communication between Laravel and Magic.\n\nKey content:\n\n* Provides a Laravel package for using Magic APIs\n* Allows developers to interact with Magic without writing code\n* Includes configuration files and service providers for easy setup", "file_summary": "Here's a concise and to-the-point summary:\n\n**Summary:** `phpunit.xml.dist` - PHPUnit configuration file for a PHP project, defining test suite settings and paths."}
{"code": "<?php\n\nnamespace MagicLaravel;\n\n/**\n * @method static MagicAdmin\\Resource\\User user()\n * @method static MagicAdmin\\Resource\\Token token()\n *\n * @see \\MagicLaravel\\Magic\n */\nclass Facade extends \\Illuminate\\Support\\Facades\\Facade\n{\n    /**\n     * {@inheritdoc}\n     */\n    protected static function getFacadeAccessor()\n    {\n        return Magic::class;\n    }\n}\n", "explanation": "Here is a concise summary:\n\nThis block defines a PHP facade class, `MagicLaravel\\Facade`, which serves as an entry point for accessing Laravel-based resources (e.g., users, tokens) through a simpler API.", "metadata": {"repo": "magiclabs/magic-laravel", "file": "src/Facade.php", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "This repository is a Laravel package that integrates Magic, a no-code API platform, into Laravel applications. Its primary purpose is to enable seamless communication between Laravel and Magic.\n\nKey content:\n\n* Provides a Laravel package for using Magic APIs\n* Allows developers to interact with Magic without writing code\n* Includes configuration files and service providers for easy setup", "file_summary": "Here is a concise and to-the-point holistic summary of the file 'src/Facade.php':\n\n**Facade Summary**\n\nThe `MagicLaravel\\Facade` class serves as an entry point for accessing Laravel-based resources, providing a simplified API for users, tokens, and other related functionality."}
{"code": "<?php\n\nnamespace MagicLaravel;\n\nclass Magic extends \\MagicAdmin\\Magic\n{\n    public function token()\n    {\n        return $this->token;\n    }\n\n    public function user()\n    {\n        return $this->user;\n    }\n}\n", "explanation": "**Purpose:** Extend functionality of the MagicAdmin library.\n\n**Functionality:** Provides two methods, `token()` and `user()`, which return token and user data, respectively.", "metadata": {"repo": "magiclabs/magic-laravel", "file": "src/Magic.php", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "This repository is a Laravel package that integrates Magic, a no-code API platform, into Laravel applications. Its primary purpose is to enable seamless communication between Laravel and Magic.\n\nKey content:\n\n* Provides a Laravel package for using Magic APIs\n* Allows developers to interact with Magic without writing code\n* Includes configuration files and service providers for easy setup", "file_summary": "Here is a concise and to-the-point summary:\n\n`src/Magic.php`: Extends MagicAdmin library with functionality to retrieve token and user data via `token()` and `user()` methods."}
{"code": "<?php\n\nnamespace MagicLaravel;\n\nclass ServiceProvider extends \\Illuminate\\Support\\ServiceProvider\n{\n    /**\n     * Register the service provider.\n     */\n    public function register()\n    {\n        $this->app->singleton(Magic::class, function () {\n            $magic = new Magic(\n                config('magic.secret_api_key'),\n                config('magic.http.timeout'),\n                config('magic.http.retries'),\n                config('magic.http.backoff_factor')\n            );\n\n            $magic->_set_platform('laravel');\n\n            return $magic;\n        });\n    }\n\n    /**\n     * Bootstrap the application events.\n     */\n    public function boot()\n    {\n        $configPath = __DIR__ . '/../config/magic.php';\n        $this->publishes([$configPath => $this->getConfigPath()], 'config');\n    }\n\n    /**\n     * Get the config path.\n     *\n     * @return string\n     */\n    protected function getConfigPath()\n    {\n        return config_path('magic.php');\n    }\n\n    /**\n     * Publish the config file.\n     *", "explanation": "Here is a concise summary of the purpose and functionality of this block:\n\n**Purpose:** Registers a service provider for Laravel, allowing Magic API integration.\n\n**Functionality:**\n\n* Registers an instance of the `Magic` class as a singleton in the application container.\n* Configures the `Magic` instance with values from the `magic` configuration file (e.g., secret API key, HTTP timeout).\n* Publishes the `magic.php` configuration file to the project directory.", "metadata": {"repo": "magiclabs/magic-laravel", "file": "src/ServiceProvider.php", "chunk_number": 1, "total_chunks": 2}, "repository_explanation": "This repository is a Laravel package that integrates Magic, a no-code API platform, into Laravel applications. Its primary purpose is to enable seamless communication between Laravel and Magic.\n\nKey content:\n\n* Provides a Laravel package for using Magic APIs\n* Allows developers to interact with Magic without writing code\n* Includes configuration files and service providers for easy setup", "file_summary": "Here is a concise summary of the file 'src/ServiceProvider.php':\n\nRegisters a service provider for Laravel, integrating Magic API. Configures Magic instance from config/magic.php, publishes config/magic.php to project directory."}
{"code": "     * @param string $configPath\n     */\n    protected function publishConfig($configPath)\n    {\n        $this->publishes([$configPath => config_path('magic.php')], 'config');\n    }\n}\n", "explanation": "**Purpose:** Publish a configuration file.\n\n**Functionality:** Copies the specified `$configPath` file to the application's \"config\" directory, with a corresponding override path of `config_path('magic.php')`.", "metadata": {"repo": "magiclabs/magic-laravel", "file": "src/ServiceProvider.php", "chunk_number": 2, "total_chunks": 2}, "repository_explanation": "This repository is a Laravel package that integrates Magic, a no-code API platform, into Laravel applications. Its primary purpose is to enable seamless communication between Laravel and Magic.\n\nKey content:\n\n* Provides a Laravel package for using Magic APIs\n* Allows developers to interact with Magic without writing code\n* Includes configuration files and service providers for easy setup", "file_summary": "Here is a concise summary of the file 'src/ServiceProvider.php':\n\nRegisters a service provider for Laravel, integrating Magic API. Configures Magic instance from config/magic.php, publishes config/magic.php to project directory."}
{"code": "<?php\n\nnamespace MagicAdmin\\Tests;\n\nuse MagicAdmin\\Resource\\Token;\nuse MagicAdmin\\Resource\\User;\nuse MagicLaravel\\Facade;\nuse MagicLaravel\\Magic;\nuse MagicLaravel\\ServiceProvider;\nuse Orchestra\\Testbench\\TestCase;\n\n/**\n * @internal\n * @coversNothing\n */\nfinal class MagicTest extends TestCase\n{\n    const SECRET_API_KEY = 'a-fake-key';\n    const HTTP_RETRIES = 123;\n    const HTTP_TIMEOUT = 456;\n    const HTTP_BACKOFF_FACTOR = 789;\n\n    public function testMagic()\n    {\n        $magic = app(Magic::class);\n\n        static::assertInstanceOf(Magic::class, $magic);\n        static::assertSame(static::SECRET_API_KEY, $magic->api_secret_key);\n        static::assertSame($magic->user->request_client->_retries, static::HTTP_RETRIES);\n        static::assertSame($magic->user->request_client->_timeout, static::HTTP_TIMEOUT);\n        static::assertSame($magic->user->request_client->_backoff_factor, static::HTTP_BACKOFF_FACTOR);\n    }\n\n    public function testFacade()\n    {\n        static::assertInstanceOf(Token::class, Facade::token());", "explanation": "Here is a concise summary of the purpose and functionality of this block:\n\n**Purpose:** Test the MagicAdmin library's functionality.\n\n**Functionality:**\n\n* Verifies the correct configuration of MagicAdmin's `Magic` class.\n* Tests the usage of MagicAdmin's Facade to retrieve a Token instance.", "metadata": {"repo": "magiclabs/magic-laravel", "file": "tests/MagicTest.php", "chunk_number": 1, "total_chunks": 2}, "repository_explanation": "This repository is a Laravel package that integrates Magic, a no-code API platform, into Laravel applications. Its primary purpose is to enable seamless communication between Laravel and Magic.\n\nKey content:\n\n* Provides a Laravel package for using Magic APIs\n* Allows developers to interact with Magic without writing code\n* Includes configuration files and service providers for easy setup", "file_summary": "Here is a holistic summary of the file 'tests/MagicTest.php':\n\nThis test file verifies the correct functionality of the MagicAdmin library, including its configuration and facade usage, as well as setup for a Magic API integration."}
{"code": "        static::assertInstanceOf(User::class, Facade::user());\n    }\n\n    /**\n     * Get package providers.\n     *\n     * @param \\Illuminate\\Foundation\\Application $app\n     *\n     * @return array\n     */\n    protected function getPackageProviders($app)\n    {\n        return [ServiceProvider::class];\n    }\n\n    /**\n     * Define environment setup.\n     *\n     * @param \\Illuminate\\Foundation\\Application $app\n     */\n    protected function getEnvironmentSetUp($app)\n    {\n        $app['config']->set('magic.secret_api_key', static::SECRET_API_KEY);\n        $app['config']->set('magic.http.retries', static::HTTP_RETRIES);\n        $app['config']->set('magic.http.timeout', static::HTTP_TIMEOUT);\n        $app['config']->set('magic.http.backoff_factor', static::HTTP_BACKOFF_FACTOR);\n    }\n}\n", "explanation": "Here is a summary of the block:\n\nThis block defines a service provider that:\n\n* Validates the `user()` facade returns an instance of `User`\n* Provides a package using `ServiceProvider`\n* Sets up environment configuration for a Magic API integration.", "metadata": {"repo": "magiclabs/magic-laravel", "file": "tests/MagicTest.php", "chunk_number": 2, "total_chunks": 2}, "repository_explanation": "This repository is a Laravel package that integrates Magic, a no-code API platform, into Laravel applications. Its primary purpose is to enable seamless communication between Laravel and Magic.\n\nKey content:\n\n* Provides a Laravel package for using Magic APIs\n* Allows developers to interact with Magic without writing code\n* Includes configuration files and service providers for easy setup", "file_summary": "Here is a holistic summary of the file 'tests/MagicTest.php':\n\nThis test file verifies the correct functionality of the MagicAdmin library, including its configuration and facade usage, as well as setup for a Magic API integration."}

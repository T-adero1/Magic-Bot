{"code": "---\nname: Bug report\nabout: Create a report to help us improve\ntitle: ''\nlabels: \":mag:  need triage\"\nassignees: Ethella\n\n---\n\n**Describe the bug**\nA clear and concise description of what the bug is.\n\n**To Reproduce**\nSteps to reproduce the behavior:\n1. Go to '...'\n2. Click on '....'\n3. Scroll down to '....'\n4. See error\n\n**Expected behavior**\nA clear and concise description of what you expected to happen.\n\n**Screenshots**\nIf applicable, add screenshots to help explain your problem.\n\n**Environment**\n - Package Version: \n - XCode Version:\n - Swift Version:\n - Simulator / Device OS:\n\n\n**Additional context**\nAdd any other context about the problem here.\n", "explanation": "Here is a concise summary of this block:\n\nThis block appears to be a template for submitting a bug report, providing a structured format for describing the issue, steps to reproduce it, expected behavior, and additional context.", "metadata": {"repo": "magiclabs/magic-ios", "file": ".github/ISSUE_TEMPLATE/bug_report.md", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "The `magiclabs/magic-ios` repository is a public codebase for the Magic iOS app. \n\nKey points:\n\n* Purpose: Official implementation of the Magic payment processing library for iOS\n* Content:\n\t+ Source code for the Magic iOS app and SDK\n\t+ Documentation and guides for developers", "file_summary": "Here's a concise holistic summary of the file '.github/ISSUE_TEMPLATE/bug_report.md':\n\n**Bug Report Template**\n\nA structured template for submitting bug reports, including details on the issue, steps to reproduce, expected behavior, and additional context."}
{"code": "#\n# Podspec for Cocoapod\n#\nPod::Spec.new do |s|\n  s.name             = 'MagicSDK'\n  s.version          = '10.1.1'\n  s.summary          = 'Magic IOS SDK'\n\n  s.description      = <<-DESC\nTODO: Add long description of the pod here.\n                       DESC\n\n  s.homepage         = 'https://github.com/magiclabs/magic-ios'\n  s.license          = { :type => 'MIT', :file => 'LICENSE' }\n  s.author           = { 'Jerry Liu' => 'jerry@magic.link' }\n  s.source           = { :git => 'https://github.com/magiclabs/magic-ios.git', :tag => s.version.to_s }\n  s.swift_version = '5.0'\n  s.ios.deployment_target = '13.0'\n#   s.osx.deployment_target  = '10.15'\n\n  s.source_files = 'Sources/MagicSDK/**/*'\n\n  s.dependency 'MagicSDK-Web3', '~> 1.0'\n  s.dependency 'MagicSDK-Web3/ContractABI', '~> 1.0'\n  s.dependency 'MagicSDK-Web3/PromiseKit', '~> 1.0'\n\n  s.dependency 'PromiseKit/CorePromise', '~> 6.15'\n\n  s.pod_target_xcconfig = { 'EXCLUDED_ARCHS[sdk=iphonesimulator*]' => 'arm64' }\nend\n", "explanation": "Here is a concise summary:\n\n**Purpose:** Defines a Podspec for the MagicSDK, a CocoaPod package.\n\n**Functionality:** Specifies the SDK's metadata (name, version, description), source files, dependencies, and configuration settings.", "metadata": {"repo": "magiclabs/magic-ios", "file": "MagicSDK.podspec", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "The `magiclabs/magic-ios` repository is a public codebase for the Magic iOS app. \n\nKey points:\n\n* Purpose: Official implementation of the Magic payment processing library for iOS\n* Content:\n\t+ Source code for the Magic iOS app and SDK\n\t+ Documentation and guides for developers", "file_summary": "Here is a concise and holistic summary of the file 'MagicSDK.podspec':\n\nDefines a Podspec for MagicSDK, specifying its metadata, source files, dependencies, and configuration settings in a CocoaPod package."}
{"code": "// swift-tools-version:5.5\n// The swift-tools-version declares the minimum version of Swift required to build this package.\n\nimport PackageDescription\n\nlet package = Package(\n    name: \"MagicSDK\",\n    platforms: [\n       .iOS(.v13),\n       .macOS(.v10_15)\n    ],\n    products: [\n        // Products define the executables and libraries a package produces, and make them visible to other packages.\n        .library(\n            name: \"MagicSDK\",\n            targets: [\"MagicSDK\"]),\n    ],\n    dependencies: [\n        .package(url: \"https://github.com/magiclabs/Web3.swift.git\", from:\"1.1.0\"),\n        .package(url: \"https://github.com/mxcl/PromiseKit.git\", from:\"6.16.2\")\n    ],\n    targets: [\n        // Targets are the basic building blocks of a package. A target can define a module or a test suite.\n        // Targets can depend on other targets in this package, and on products in packages this package depends on.\n        .target(\n            name: \"MagicSDK\",\n            dependencies: [", "explanation": "This block is a Swift Package description file, which defines a package named \"MagicSDK\" with its platforms, products, dependencies, and targets.\n\n**Purpose:** Define a Swift package for the Magic SDK.\n\n**Functionality:** Specifies the package's name, platforms (iOS 13 and macOS 10.15), products (a library named \"MagicSDK\"), dependencies on other packages (Web3.swift and PromiseKit), and targets (the main \"MagicSDK\" target).", "metadata": {"repo": "magiclabs/magic-ios", "file": "Package.swift", "chunk_number": 1, "total_chunks": 2}, "repository_explanation": "The `magiclabs/magic-ios` repository is a public codebase for the Magic iOS app. \n\nKey points:\n\n* Purpose: Official implementation of the Magic payment processing library for iOS\n* Content:\n\t+ Source code for the Magic iOS app and SDK\n\t+ Documentation and guides for developers", "file_summary": "Here is a concise and to-the-point summary:\n\n**Package.swift:** Defines the \"MagicSDK\" Swift package, specifying its platforms (iOS 13 & macOS 10.15), products, dependencies on Web3.swift and PromiseKit, and targets for web3 development."}
{"code": "                .product(name: \"MagicSDK_Web3\", package: \"Web3.swift\"),\n                .product(name: \"Web3PromiseKit\", package: \"Web3.swift\"),\n                .product(name: \"PromiseKit\", package: \"PromiseKit\"),\n                .product(name: \"Web3ContractABI\", package: \"Web3.swift\")\n            ]),\n        .testTarget(\n            name: \"MagicSDKTests\",\n            dependencies: [\n                .target(name: \"MagicSDK\")\n            ]),\n    ]\n)\n", "explanation": "This block defines a set of products and a test target for a Swift package, specifically for web3 development with Magic SDK.", "metadata": {"repo": "magiclabs/magic-ios", "file": "Package.swift", "chunk_number": 2, "total_chunks": 2}, "repository_explanation": "The `magiclabs/magic-ios` repository is a public codebase for the Magic iOS app. \n\nKey points:\n\n* Purpose: Official implementation of the Magic payment processing library for iOS\n* Content:\n\t+ Source code for the Magic iOS app and SDK\n\t+ Documentation and guides for developers", "file_summary": "Here is a concise and to-the-point summary:\n\n**Package.swift:** Defines the \"MagicSDK\" Swift package, specifying its platforms (iOS 13 & macOS 10.15), products, dependencies on Web3.swift and PromiseKit, and targets for web3 development."}
{"code": "**We have decided to temporarily archive this repository and place it into maintenance mode. This decision allows us to focus our efforts and resources on advancing our core product line. During this period, active development and the addition of new features will be paused. We value the contributions of the community and appreciate your understanding as we prioritize our main projects. We look forward to resuming development in the future and will keep you updated on any changes.**\n\n# MagicSDK\n[![Version](https://img.shields.io/cocoapods/v/MagicSDK.svg?style=flat)](https://cocoapods.org/pods/MagicSDK)\n[![License](https://img.shields.io/cocoapods/l/MagicSDK.svg?style=flat)](https://cocoapods.org/pods/MagicSDK)\n[![Platform](https://img.shields.io/cocoapods/p/MagicSDK.svg?style=flat)](https://cocoapods.org/pods/MagicSDK)\n\n## \u26a0\ufe0f CocoaPods Incompatible with Xcode v14.3  \u26a0\ufe0f", "explanation": "Here is a concise summary:\n\nThis repository has been temporarily archived to focus on core product development, pausing new feature additions and updates.", "metadata": {"repo": "magiclabs/magic-ios", "file": "README.md", "chunk_number": 1, "total_chunks": 3}, "repository_explanation": "The `magiclabs/magic-ios` repository is a public codebase for the Magic iOS app. \n\nKey points:\n\n* Purpose: Official implementation of the Magic payment processing library for iOS\n* Content:\n\t+ Source code for the Magic iOS app and SDK\n\t+ Documentation and guides for developers", "file_summary": "Here is a concise and holistic summary of the file 'README.md':\n\n**Temporary Archive: Focus on Core Product Development**\n\nThis repository has been temporarily paused for core product development, resolving issues with Magic CocoaPods SDK version compatibility.\n\n**Purpose:** Resolve v8.0.0 Magic CocoaPods SDK version compatibility and enable local development with custom library versions.\n\nLet me know if this meets your requirements!"}
{"code": "The Magic CocoaPods SDK version (v8.0.0) is currently out of sync with the Magic SPM package version, as we await CocoaPods to fix [this compatibility issue](https://github.com/CocoaPods/CocoaPods/issues/11839). CocoaPods developers who wish to develop on the latest version of Xcode will need to integrate our SPM package.\n\n## \u26a0\ufe0f Removal of `loginWithMagicLink()`  \u26a0\ufe0f\nAs of `v9.0.0`, passcodes (ie. `loginWithSMS()`, `loginWithEmailOTP()`) are replacing Magic Links (ie. `loginWithMagicLink()`) for all of our Mobile SDKs\u2060. [Learn more](https://magic.link/docs/auth/login-methods/email/email-link-update-march-2023)\n\n## Cocoapods\n\n### Set up the local development env\n1. To start the demo app with local development SDK, download following projects\n```bash\n# demo app\n$ git clone https://github.com/magiclabs/magic-ios-demo\n# ios SDK\n$ git clone https://github.com/magiclabs/magic-ios\n```\n\n2. To enable the demo use the local development SDK. Navigate to `magic-ios-demo/Podfile` and edit the following lines.", "explanation": "Here is a concise summary:\n\n**Purpose:** Resolve issues with Magic CocoaPods SDK version (v8.0.0) compatibility.\n\n**Functionality:**\n\n* Integrate Magic SPM package for Xcode development.\n* Update login methods: replace `loginWithMagicLink()` with passcodes (`loginWithSMS()`, `loginWithEmailOTP()`) in v9.0.0 and later.\n* Set up local development environment by cloning demo app and SDK projects, then updating Podfile to use the local development SDK.", "metadata": {"repo": "magiclabs/magic-ios", "file": "README.md", "chunk_number": 2, "total_chunks": 3}, "repository_explanation": "The `magiclabs/magic-ios` repository is a public codebase for the Magic iOS app. \n\nKey points:\n\n* Purpose: Official implementation of the Magic payment processing library for iOS\n* Content:\n\t+ Source code for the Magic iOS app and SDK\n\t+ Documentation and guides for developers", "file_summary": "Here is a concise and holistic summary of the file 'README.md':\n\n**Temporary Archive: Focus on Core Product Development**\n\nThis repository has been temporarily paused for core product development, resolving issues with Magic CocoaPods SDK version compatibility.\n\n**Purpose:** Resolve v8.0.0 Magic CocoaPods SDK version compatibility and enable local development with custom library versions.\n\nLet me know if this meets your requirements!"}
{"code": "This will make pod file install local dependencies instead of the ones distributed.\n\n```ruby \n# Distributed Library on Cocoapods\n# pod 'MagicSDK', '~> 4.0'\n# pod 'MagicExt-OAuth', '~> 1.0'\n    \n#   Local development library\npod 'MagicSDK', :path => '../magic-ios/MagicSDK.podspec'\npod 'MagicExt-OAuth', :path => '../magic-ios-ext/MagicExt-OAuth.podspec'\n```\n\n```bash\n$ cd /YOUR/PATH/TO/magic-ios-demo\n\n# Install dependencies\n$ pod install\n```\n\n3. Open `/YOUR/PATH/TO/magic-ios-demo/magic-ios-demo.xcworkspace` with XCode and try it out!\n\n---\n\n", "explanation": "This block allows a local development environment to use custom, locally installed versions of two libraries (MagicSDK and MagicExt-OAuth) instead of fetching them from the Cocoapods distribution, by specifying their paths in the podfile.", "metadata": {"repo": "magiclabs/magic-ios", "file": "README.md", "chunk_number": 3, "total_chunks": 3}, "repository_explanation": "The `magiclabs/magic-ios` repository is a public codebase for the Magic iOS app. \n\nKey points:\n\n* Purpose: Official implementation of the Magic payment processing library for iOS\n* Content:\n\t+ Source code for the Magic iOS app and SDK\n\t+ Documentation and guides for developers", "file_summary": "Here is a concise and holistic summary of the file 'README.md':\n\n**Temporary Archive: Focus on Core Product Development**\n\nThis repository has been temporarily paused for core product development, resolving issues with Magic CocoaPods SDK version compatibility.\n\n**Purpose:** Resolve v8.0.0 Magic CocoaPods SDK version compatibility and enable local development with custom library versions.\n\nLet me know if this meets your requirements!"}
{"code": "//\n//  Magic.swift\n//  Magic ios SDK\n//\n//  Created by Jerry Liu on 1/20/20.\n//  Copyright \u00a9 2020 Magic Labs Inc. All rights reserved.\n//\nimport MagicSDK_Web3\nimport WebKit\n\n\n/// An instance of the Magic SDK\npublic class Magic: NSObject {\n    // MARK: - Log Message Warning\n    public let MA_EXTENSION_ONLY_MSG = \"This extension only works with Magic Auth API Keys\"\n    \n    // MARK: - Modules\n    public let user: UserModule\n    public let auth: AuthModule\n    public let wallet: WalletModule\n    \n    // MARK: - Property\n   public var rpcProvider: RpcProvider\n\n    /// Shared instance of `Magic`\n    public static var shared: Magic!\n\n    // MARK: - Initialization\n\n    /// Initialize an instance of `Magic`\n    ///\n    /// - Parameters:\n    ///   - apiKey: Your client ID. From https://dashboard.Magic.com\n    ///   - ethNetwork: Etherum Network setting (ie. mainnet or goerli)\n    ///   - customNode: A custom RPC node ", "explanation": "Here is a concise summary:\n\n**Purpose:** The Magic class provides an instance of the Magic SDK, enabling interactions with user authentication, authorization, and wallet management.\n\n**Functionality:** It includes modules for User Management, Authentication, and Wallet interaction, as well as a shared instance and initialization parameters (API key, Ethereum network, and custom RPC node).", "metadata": {"repo": "magiclabs/magic-ios", "file": "Sources/MagicSDK/Core/Magic.swift", "chunk_number": 1, "total_chunks": 3}, "repository_explanation": "The `magiclabs/magic-ios` repository is a public codebase for the Magic iOS app. \n\nKey points:\n\n* Purpose: Official implementation of the Magic payment processing library for iOS\n* Content:\n\t+ Source code for the Magic iOS app and SDK\n\t+ Documentation and guides for developers", "file_summary": "Here is a concise and holistic summary of the file 'Sources/MagicSDK/Core/Magic.swift':\n\n**Purpose:** Provides an instance of the Magic SDK for user authentication, authorization, and wallet management.\n\n**Functionality:** Initializes and configures the object's components (RPC provider, user, auth, wallet) with various parameters (API key, network, locale, custom node). Offers multiple convenience initializers. Exposes error handling from failed Web3 responses."}
{"code": "    public convenience init(apiKey: String, ethNetwork: EthNetwork, locale: String = Locale.current.identifier) {\n        self.init(urlBuilder: URLBuilder(apiKey: apiKey, network: ethNetwork, locale: locale))\n    }\n\n    public convenience init(apiKey: String, customNode: CustomNodeConfiguration, locale: String = Locale.current.identifier) {\n        self.init(urlBuilder: URLBuilder(apiKey: apiKey, customNode: customNode, locale: locale))\n    }\n\n    public convenience init(apiKey: String, locale: String = Locale.current.identifier) {\n        self.init(urlBuilder: URLBuilder(apiKey: apiKey, network: EthNetwork.mainnet, locale: locale))\n    }\n\n    /// Core constructor\n    private init(urlBuilder: URLBuilder) {\n         self.rpcProvider = RpcProvider(urlBuilder: urlBuilder)\n        \n         self.user = UserModule(rpcProvider: self.rpcProvider)\n         self.auth = AuthModule(rpcProvider: self.rpcProvider)\n         self.wallet = WalletModule(rpcProvider: self.rpcProvider)\n        \n         super.init()\n    }\n}\n\n", "explanation": "Here is a concise summary:\n\n**Purpose:** Initializes an instance of an object with various configurations for interacting with Ethereum nodes.\n\n**Functionality:** Provides multiple convenience initializers that set up the object's internal components (RPC provider, user, auth, wallet modules) based on different parameters such as API key, network, locale, and custom node configuration.", "metadata": {"repo": "magiclabs/magic-ios", "file": "Sources/MagicSDK/Core/Magic.swift", "chunk_number": 2, "total_chunks": 3}, "repository_explanation": "The `magiclabs/magic-ios` repository is a public codebase for the Magic iOS app. \n\nKey points:\n\n* Purpose: Official implementation of the Magic payment processing library for iOS\n* Content:\n\t+ Source code for the Magic iOS app and SDK\n\t+ Documentation and guides for developers", "file_summary": "Here is a concise and holistic summary of the file 'Sources/MagicSDK/Core/Magic.swift':\n\n**Purpose:** Provides an instance of the Magic SDK for user authentication, authorization, and wallet management.\n\n**Functionality:** Initializes and configures the object's components (RPC provider, user, auth, wallet) with various parameters (API key, network, locale, custom node). Offers multiple convenience initializers. Exposes error handling from failed Web3 responses."}
{"code": "// Handles Specific RpcError\nextension Web3Response {\n    public var magicAuthError: RpcProvider.ProviderError? {\n        switch self.status {\n        case .failure(let error):\n            return error as? RpcProvider.ProviderError\n        case .success:\n            return nil\n        }\n    }\n}\n", "explanation": "Here is a concise summary:\n\n**Extension Purpose:** Extracts `RpcProvider.ProviderError` from a failed Web3Response.\n\n**Functionality:** Returns the error as an optional if response status is failure, otherwise returns nil.", "metadata": {"repo": "magiclabs/magic-ios", "file": "Sources/MagicSDK/Core/Magic.swift", "chunk_number": 3, "total_chunks": 3}, "repository_explanation": "The `magiclabs/magic-ios` repository is a public codebase for the Magic iOS app. \n\nKey points:\n\n* Purpose: Official implementation of the Magic payment processing library for iOS\n* Content:\n\t+ Source code for the Magic iOS app and SDK\n\t+ Documentation and guides for developers", "file_summary": "Here is a concise and holistic summary of the file 'Sources/MagicSDK/Core/Magic.swift':\n\n**Purpose:** Provides an instance of the Magic SDK for user authentication, authorization, and wallet management.\n\n**Functionality:** Initializes and configures the object's components (RPC provider, user, auth, wallet) with various parameters (API key, network, locale, custom node). Offers multiple convenience initializers. Exposes error handling from failed Web3 responses."}
{"code": "//\n//  NetworkClient.swift\n//  Magic\n//\n//  Created by Jerry Liu on 2/09/20.\n//  Copyright \u00a9 2020 Magic Labs Inc. All rights reserved.\n//\n\nimport Foundation\nimport PromiseKit\n\n/// A base networking class that can send http requests\npublic class NetworkClient {\n    \n    /// Various errors that may occur while processing Web3 requests\n    public enum Error: Swift.Error {\n        /// The response did not include expected results\n        case unexpectedResponse(Swift.Error?)\n        /// The server returned an unexpected response code\n        case invalidResponseCode\n    }\n    \n    /// Internal queue for handling requests\n    let queue: DispatchQueue\n    \n    /// Internal URLSession for this Web3Provider's RPC requests\n    let session: URLSession = URLSession(configuration: .default)\n    \n    /// JSONEncoder for encoding RPCRequests\n    let encoder = JSONEncoder()\n    \n    /// JSONDecoder for parsing RPCResponses\n    let decoder = JSONDecoder()\n    \n    /// HTTP headers to add to all requests\n    public var headers = [", "explanation": "**Summary:**\n\nThe `NetworkClient` class is a base networking class that enables sending HTTP requests with features such as:\n\n* Error handling (unexpected responses, invalid response codes)\n* Internal queue for concurrent request processing\n* Built-in URLSession for RPC requests\n* JSON encoding and decoding support\n\nThis class provides a foundation for making network requests in the Magic app.", "metadata": {"repo": "magiclabs/magic-ios", "file": "Sources/MagicSDK/Core/Provider/NetworkClient.swift", "chunk_number": 1, "total_chunks": 4}, "repository_explanation": "The `magiclabs/magic-ios` repository is a public codebase for the Magic iOS app. \n\nKey points:\n\n* Purpose: Official implementation of the Magic payment processing library for iOS\n* Content:\n\t+ Source code for the Magic iOS app and SDK\n\t+ Documentation and guides for developers", "file_summary": "Here's a concise summary of the file 'Sources/MagicSDK/Core/Provider/NetworkClient.swift':\n\n**Summary:**\n\nThe `NetworkClient` class provides a networking foundation for the Magic app, enabling concurrent HTTP requests with error handling, JSON encoding and decoding, and built-in URLSession support. It offers a basic `postRequest` function for making network requests using URLSession, ensuring promise resolution with data or errors."}
{"code": "        \"Content-Type\": \"application/json\"\n    ]\n    \n    init() {\n        self.queue = DispatchQueue(label: \"MagicHttpProvider\", attributes: .concurrent)\n    }\n    \n    /// Encode an object with or without a prefix into data\n    ///\n    /// - Parameters:\n    ///   - body: Object to encode. Must be Encodable.\n    ///   - prefix: Optional string to prefix the body with\n    /// - Returns: Promise resolving with the encoded Data\n    func encode<T: Encodable>(body: T, withPrefix prefix: String? = nil) -> Promise<Data> {\n        return Promise { resolver in\n            queue.async {\n                do {\n                    let encoded: Data\n                    if let prefix = prefix {\n                        encoded = try self.encoder.encode([prefix: body])\n                    } else {\n                        encoded = try self.encoder.encode(body)\n                    }\n                    resolver.fulfill(encoded)\n                } catch {\n                    resolver.reject(error)\n                }\n            }", "explanation": "**Summary**\n\nThis block is an Swift implementation of a JSON encoder, responsible for encoding objects into JSON data with optional prefixing. It utilizes a concurrent queue to perform encoding operations asynchronously.", "metadata": {"repo": "magiclabs/magic-ios", "file": "Sources/MagicSDK/Core/Provider/NetworkClient.swift", "chunk_number": 2, "total_chunks": 4}, "repository_explanation": "The `magiclabs/magic-ios` repository is a public codebase for the Magic iOS app. \n\nKey points:\n\n* Purpose: Official implementation of the Magic payment processing library for iOS\n* Content:\n\t+ Source code for the Magic iOS app and SDK\n\t+ Documentation and guides for developers", "file_summary": "Here's a concise summary of the file 'Sources/MagicSDK/Core/Provider/NetworkClient.swift':\n\n**Summary:**\n\nThe `NetworkClient` class provides a networking foundation for the Magic app, enabling concurrent HTTP requests with error handling, JSON encoding and decoding, and built-in URLSession support. It offers a basic `postRequest` function for making network requests using URLSession, ensuring promise resolution with data or errors."}
{"code": "        }\n    }\n    \n    /// Sends a basic http request.\n    /// This method will create a URLRequest, and then run a URLSessionDataTask with the URLRequest.\n    /// Once a response is received, the response will be validated for data and a valid status code\n    /// before calling the callback with the resulting data or error.\n    ///\n    /// - Parameters:\n    ///   - url: url for the request\n    ///   - method: HTTP method to use\n    ///   - body: Optional request body to include\n    /// - Returns: Promise resolving with Data from the response if it's successful\n    func postRequest(url: URL, method: String, body: Data?) -> Promise<Data> {\n        return Promise { resolver in\n            queue.async {\n                var req = URLRequest(url: url)\n                req.httpMethod = method\n                req.httpBody = body\n                \n                // Add default headers\n                for (k, v) in self.headers {\n                    req.addValue(v, forHTTPHeaderField: k)\n                }", "explanation": "**Summary**\n\nThis block is a function named `postRequest` that sends a basic HTTP request using a `URLSessionDataTask`. It creates a `URLRequest`, sets its method, body, and headers, then makes the request and resolves with the response data or an error in a promise format.", "metadata": {"repo": "magiclabs/magic-ios", "file": "Sources/MagicSDK/Core/Provider/NetworkClient.swift", "chunk_number": 3, "total_chunks": 4}, "repository_explanation": "The `magiclabs/magic-ios` repository is a public codebase for the Magic iOS app. \n\nKey points:\n\n* Purpose: Official implementation of the Magic payment processing library for iOS\n* Content:\n\t+ Source code for the Magic iOS app and SDK\n\t+ Documentation and guides for developers", "file_summary": "Here's a concise summary of the file 'Sources/MagicSDK/Core/Provider/NetworkClient.swift':\n\n**Summary:**\n\nThe `NetworkClient` class provides a networking foundation for the Magic app, enabling concurrent HTTP requests with error handling, JSON encoding and decoding, and built-in URLSession support. It offers a basic `postRequest` function for making network requests using URLSession, ensuring promise resolution with data or errors."}
{"code": "                \n                // Create the URLSessionTask\n                let task = self.session.dataTask(with: req) { data, urlResponse, error in\n                    guard let urlResponse = urlResponse as? HTTPURLResponse, let data = data, error == nil else {\n                        resolver.reject(Error.unexpectedResponse(error))\n                        return\n                    }\n                    \n                    guard urlResponse.statusCode >= 200 && urlResponse.statusCode < 300 else {\n                        resolver.reject(Error.invalidResponseCode)\n                        return\n                    }\n                    \n                   resolver.fulfill(data)\n                }\n                task.resume()\n            }\n        }\n    }\n    \n}\n", "explanation": "**Purpose:** Make a network request using URLSession.\n\n**Functionality:** Creates a task that fetches data from a URL, handles errors, and fulfills a promise with the received data if the response is successful.", "metadata": {"repo": "magiclabs/magic-ios", "file": "Sources/MagicSDK/Core/Provider/NetworkClient.swift", "chunk_number": 4, "total_chunks": 4}, "repository_explanation": "The `magiclabs/magic-ios` repository is a public codebase for the Magic iOS app. \n\nKey points:\n\n* Purpose: Official implementation of the Magic payment processing library for iOS\n* Content:\n\t+ Source code for the Magic iOS app and SDK\n\t+ Documentation and guides for developers", "file_summary": "Here's a concise summary of the file 'Sources/MagicSDK/Core/Provider/NetworkClient.swift':\n\n**Summary:**\n\nThe `NetworkClient` class provides a networking foundation for the Magic app, enabling concurrent HTTP requests with error handling, JSON encoding and decoding, and built-in URLSession support. It offers a basic `postRequest` function for making network requests using URLSession, ensuring promise resolution with data or errors."}
{"code": "//\n//  RpcProvider.swift\n//  MagicSDK\n//\n//  Created by Jerry Liu on 1/20/20.\n//  Copyright \u00a9 2020 Magic Labs Inc. All rights reserved.\n//\n\nimport MagicSDK_Web3\nimport WebKit\nimport PromiseKit\n\n/// A custom Web3 HttpProvider that is specifically configured for use with Magic Links.\npublic class RpcProvider: NetworkClient, Web3Provider {\n    \n    /// Various errors that may occur while processing Web3 requests\n    public enum ProviderError: Swift.Error {\n        /// The provider is not configured with an authDelegate\n        case encodingFailed(Swift.Error?)\n        /// Decoding the JSON-RPC request failed\n        case decodingFailed(json: String)\n        /// Convert string failed\n        case invalidJsonResponse(json: String)\n        /// Missing callback\n        case missingPayloadCallback(json: String)\n    }\n    \n    let overlay: WebViewController\n    public let urlBuilder: URLBuilder\n    \n    required init(urlBuilder: URLBuilder) {\n        self.overlay = WebViewController(url: urlBuilder)", "explanation": "Here is a concise summary:\n\n**RpcProvider**\n\nA custom HTTP provider for Web3 that integrates with Magic Links, handling errors such as JSON decoding and encoding failures.", "metadata": {"repo": "magiclabs/magic-ios", "file": "Sources/MagicSDK/Core/Provider/RpcProvider.swift", "chunk_number": 1, "total_chunks": 4}, "repository_explanation": "The `magiclabs/magic-ios` repository is a public codebase for the Magic iOS app. \n\nKey points:\n\n* Purpose: Official implementation of the Magic payment processing library for iOS\n* Content:\n\t+ Source code for the Magic iOS app and SDK\n\t+ Documentation and guides for developers", "file_summary": "Here is a concise summary of the file 'Sources/MagicSDK/Core/Provider/RpcProvider.swift':\n\n**RpcProvider**\n\nA custom HTTP provider that integrates with Magic Links, processing RPC requests by sending JSON-encoded data with a JWT token, handling errors, and returning results as Web3Response objects. It also handles Rollbar errors and initializes `Web3BytesInitializable` instances from bytes."}
{"code": "        self.urlBuilder = urlBuilder\n        super.init()\n    }\n    \n    // MARK: - Sending Requests\n    \n    /// Sends an RPCRequest and parses the result\n    /// Web3 Provider protocal conformed\n    ///\n    /// - Parameters:\n    ///   - request: RPCRequest to send\n    ///   - response: A completion handler for the response. Includes either the result or an error.\n    public func send<Params, Result>(request: RPCRequest<Params>, response: @escaping Web3ResponseCompletion<Result>) {\n        let msgType = OutboundMessageType.MAGIC_HANDLE_REQUEST\n        \n        // Re-assign ID to the payload\n        let newRequest = RPCRequest(method: request.method, params: request.params)\n        \n        // construct message data\n        let eventMessage = MagicRequestData(msgType: \"\\(msgType.rawValue)-\\(urlBuilder.encodedParams)\", payload: newRequest, rt: nil, jwt: createJwt())\n        \n        // encode to JSON\n        firstly {\n            encode(body: eventMessage)\n        }.done {body throws -> Void in\n            ", "explanation": "**Summary**\n\nThis block is responsible for sending an RPC request using a Web3 Provider protocol. It takes a `RPCRequest` as input, generates a Magic Request Data message, encodes it to JSON, and sends it with a JWT token. The result or error is handled through a completion handler (`response`).", "metadata": {"repo": "magiclabs/magic-ios", "file": "Sources/MagicSDK/Core/Provider/RpcProvider.swift", "chunk_number": 2, "total_chunks": 4}, "repository_explanation": "The `magiclabs/magic-ios` repository is a public codebase for the Magic iOS app. \n\nKey points:\n\n* Purpose: Official implementation of the Magic payment processing library for iOS\n* Content:\n\t+ Source code for the Magic iOS app and SDK\n\t+ Documentation and guides for developers", "file_summary": "Here is a concise summary of the file 'Sources/MagicSDK/Core/Provider/RpcProvider.swift':\n\n**RpcProvider**\n\nA custom HTTP provider that integrates with Magic Links, processing RPC requests by sending JSON-encoded data with a JWT token, handling errors, and returning results as Web3Response objects. It also handles Rollbar errors and initializes `Web3BytesInitializable` instances from bytes."}
{"code": "            let str = try String(body)\n            \n            // enqueue and send to webview\n            try self.overlay.enqueue(message: str, id: newRequest.id) { ( responseString: String) in\n                guard let jsonData = responseString.data(using: .utf8) else {\n                    throw ProviderError.invalidJsonResponse(json: str)\n                }\n                \n                // Decode JSON string into string\n                do {\n                let rpcResponse = try self.decoder.decode(MagicResponseData<RPCResponse<Result>>.self, from: jsonData)\n                    let result = Web3Response<Result>(rpcResponse: rpcResponse.response)\n                    response(result)\n                } catch {\n                    throw ProviderError.decodingFailed(json: responseString)\n                }\n            }\n        }.catch { error in\n            let errResponse = Web3Response<Result>(error: ProviderError.encodingFailed(error))\n            response(errResponse)", "explanation": "Here is a summary of the purpose and functionality of this block:\n\n**Purpose:** Process an incoming web request, enqueue it to a webview, and send the response back as a Web3Response.\n\n**Functionality:**\n\n1. Converts the request body to a string.\n2. Sends the string to a webview for processing.\n3. Extracts JSON data from the response.\n4. Decodes the JSON into a MagicResponseData object.\n5. Creates a Web3Response with the decoded result or error, and sends it back as a response.", "metadata": {"repo": "magiclabs/magic-ios", "file": "Sources/MagicSDK/Core/Provider/RpcProvider.swift", "chunk_number": 3, "total_chunks": 4}, "repository_explanation": "The `magiclabs/magic-ios` repository is a public codebase for the Magic iOS app. \n\nKey points:\n\n* Purpose: Official implementation of the Magic payment processing library for iOS\n* Content:\n\t+ Source code for the Magic iOS app and SDK\n\t+ Documentation and guides for developers", "file_summary": "Here is a concise summary of the file 'Sources/MagicSDK/Core/Provider/RpcProvider.swift':\n\n**RpcProvider**\n\nA custom HTTP provider that integrates with Magic Links, processing RPC requests by sending JSON-encoded data with a JWT token, handling errors, and returning results as Web3Response objects. It also handles Rollbar errors and initializes `Web3BytesInitializable` instances from bytes."}
{"code": "//            handleRollbarError(error, log: false)\n        }\n    }\n}\n\npublic typealias Web3ResponseCompletion<Result: Codable> = (_ resp: Web3Response<Result>) -> Void\n\ninternal extension Web3BytesInitializable {\n    init(_ bytes: Web3BytesRepresentable) throws {\n        let bytes = try bytes.makeBytes()\n        try self.init(bytes)\n    }\n}\n", "explanation": "Here is a concise summary:\n\n**Purpose:** Handle Rollbar errors, initialize `Web3BytesInitializable` from `Web3BytesRepresentable`.\n\n**Functionality:**\n\n* Calls `handleRollbarError(error)` with an error parameter\n* Initializes `Web3BytesInitializable` instance from `Web3BytesRepresentable` bytes.", "metadata": {"repo": "magiclabs/magic-ios", "file": "Sources/MagicSDK/Core/Provider/RpcProvider.swift", "chunk_number": 4, "total_chunks": 4}, "repository_explanation": "The `magiclabs/magic-ios` repository is a public codebase for the Magic iOS app. \n\nKey points:\n\n* Purpose: Official implementation of the Magic payment processing library for iOS\n* Content:\n\t+ Source code for the Magic iOS app and SDK\n\t+ Documentation and guides for developers", "file_summary": "Here is a concise summary of the file 'Sources/MagicSDK/Core/Provider/RpcProvider.swift':\n\n**RpcProvider**\n\nA custom HTTP provider that integrates with Magic Links, processing RPC requests by sending JSON-encoded data with a JWT token, handling errors, and returning results as Web3Response objects. It also handles Rollbar errors and initializes `Web3BytesInitializable` instances from bytes."}
{"code": "//\n//  AnyValue.swift\n//  MagicSDK\n//\n//  Created by Jerry Liu on 7/13/20.\n//\n\nimport Foundation\n\n/**\n * A `Codable`, Ethereum representable value.\n */\npublic struct AnyValue: Codable {\n\n    /// The internal type of this value\n    public let valueType: ValueType\n\n    public enum ValueType {\n\n        /// A string value\n        case string(String)\n\n        /// An int value\n        case int(Int)\n\n        /// A bool value\n        case bool(Bool)\n\n        /// An array value\n        case array([AnyValue])\n\n        /// A special case nil value\n        case `nil`\n    }\n\n    public init(valueType: ValueType) {\n        self.valueType = valueType\n    }\n\n    public init(from decoder: Decoder) throws {\n        let container = try decoder.singleValueContainer()\n\n        if let str = try? container.decode(String.self) {\n            valueType = .string(str)\n        } else if let bool = try? container.decode(Bool.self) {\n            valueType = .bool(bool)\n        } else if let int = try? container.decode(Int.self) {", "explanation": "**Purpose:** A struct representing a generic value that can be encoded and decoded, with support for various data types.\n\n**Functionality:**\n\n* Encapsulates a `ValueType` enum, which defines five possible internal types:\n\t+ String\n\t+ Int\n\t+ Bool\n\t+ Array of AnyValue instances\n\t+ Nil (a special case)\n* Allows initialization from a custom ValueType or through decoding from a JSON-like format.", "metadata": {"repo": "magiclabs/magic-ios", "file": "Sources/MagicSDK/Core/Relayer/Types/AnyValue.swift", "chunk_number": 1, "total_chunks": 6}, "repository_explanation": "The `magiclabs/magic-ios` repository is a public codebase for the Magic iOS app. \n\nKey points:\n\n* Purpose: Official implementation of the Magic payment processing library for iOS\n* Content:\n\t+ Source code for the Magic iOS app and SDK\n\t+ Documentation and guides for developers", "file_summary": "Here's a concise summary of the file 'Sources/MagicSDK/Core/Relayer/Types/AnyValue.swift':\n\nThis file defines a generic value type called `AnyValue`, which can represent various data types, including strings, integers, booleans, arrays, and nil values. It provides convenience functions for initializing `AnyValue` instances from different types, as well as getter properties to access the underlying values. Additionally, it implements Equatable and Hashable protocols for custom types, allowing for type-agnostic value comparison and hashing."}
{"code": "            valueType = .int(int)\n        } else if let array = try? container.decode([AnyValue].self) {\n            valueType = .array(array)\n        } else if container.decodeNil() {\n            valueType = .nil\n        } else {\n            throw Error.unsupportedType\n        }\n    }\n\n    /// Encoding and Decoding errors specific to AnyValue\n    public enum Error: Swift.Error {\n\n        /// The type set is not convertible to AnyValue\n        case unsupportedType\n    }\n\n    public func encode(to encoder: Encoder) throws {\n        var container = encoder.singleValueContainer()\n\n        switch valueType {\n        case .string(let string):\n            try container.encode(string)\n        case .int(let int):\n            try container.encode(int)\n        case .bool(let bool):\n            try container.encode(bool)\n        case .array(let array):\n            try container.encode(array)\n        case .nil:\n            try container.encodeNil()\n        }\n    }\n}\n\n// MARK: - Convenient Initializers\n", "explanation": "**Summary**\n\nThis block is a generic value encoder/decoder that supports various types:\n\n* `.int`: integer values\n* `.string`: string values\n* `.bool`: boolean values\n* `.array`: array of AnyValue objects\n* `.nil`: nil value\n\nIt throws an `Error.unsupportedType` if the container type cannot be encoded.", "metadata": {"repo": "magiclabs/magic-ios", "file": "Sources/MagicSDK/Core/Relayer/Types/AnyValue.swift", "chunk_number": 2, "total_chunks": 6}, "repository_explanation": "The `magiclabs/magic-ios` repository is a public codebase for the Magic iOS app. \n\nKey points:\n\n* Purpose: Official implementation of the Magic payment processing library for iOS\n* Content:\n\t+ Source code for the Magic iOS app and SDK\n\t+ Documentation and guides for developers", "file_summary": "Here's a concise summary of the file 'Sources/MagicSDK/Core/Relayer/Types/AnyValue.swift':\n\nThis file defines a generic value type called `AnyValue`, which can represent various data types, including strings, integers, booleans, arrays, and nil values. It provides convenience functions for initializing `AnyValue` instances from different types, as well as getter properties to access the underlying values. Additionally, it implements Equatable and Hashable protocols for custom types, allowing for type-agnostic value comparison and hashing."}
{"code": "extension AnyValue: ExpressibleByStringLiteral {\n\n    public typealias StringLiteralType = String\n\n    public init(stringLiteral value: StringLiteralType) {\n        valueType = .string(value)\n    }\n}\n\nextension AnyValue: ExpressibleByIntegerLiteral {\n\n    public typealias IntegerLiteralType = Int\n\n    public init(integerLiteral value: IntegerLiteralType) {\n        valueType = .int(value)\n    }\n}\n\nextension AnyValue: ExpressibleByBooleanLiteral {\n\n    public typealias BooleanLiteralType = Bool\n\n    public init(booleanLiteral value: BooleanLiteralType) {\n        valueType = .bool(value)\n    }\n}\n\nextension AnyValue: ExpressibleByArrayLiteral {\n\n    public typealias ArrayLiteralElement = AnyValueRepresentable\n\n    public init(array: [AnyValueRepresentable]) {\n        let values = array.map({ $0.anyValue() })\n        valueType = .array(values)\n    }\n\n    public init(arrayLiteral elements: ArrayLiteralElement...) {\n        self.init(array: elements)\n    }\n}\n\n// MARK: - Convenient Setters\n\npublic extension AnyValue {\n", "explanation": "Here is a concise summary of the block:\n\nThis code defines an extension to the `AnyValue` protocol, allowing it to be initialized from various types (String, Int, Bool, Array) through convenient syntax (e.g., `\"hello\"`, `42`, `true`, `[1, 2, 3]`).", "metadata": {"repo": "magiclabs/magic-ios", "file": "Sources/MagicSDK/Core/Relayer/Types/AnyValue.swift", "chunk_number": 3, "total_chunks": 6}, "repository_explanation": "The `magiclabs/magic-ios` repository is a public codebase for the Magic iOS app. \n\nKey points:\n\n* Purpose: Official implementation of the Magic payment processing library for iOS\n* Content:\n\t+ Source code for the Magic iOS app and SDK\n\t+ Documentation and guides for developers", "file_summary": "Here's a concise summary of the file 'Sources/MagicSDK/Core/Relayer/Types/AnyValue.swift':\n\nThis file defines a generic value type called `AnyValue`, which can represent various data types, including strings, integers, booleans, arrays, and nil values. It provides convenience functions for initializing `AnyValue` instances from different types, as well as getter properties to access the underlying values. Additionally, it implements Equatable and Hashable protocols for custom types, allowing for type-agnostic value comparison and hashing."}
{"code": "    static func string(_ string: String) -> AnyValue {\n        return self.init(stringLiteral: string)\n    }\n\n    static func int(_ int: Int) -> AnyValue {\n        return self.init(integerLiteral: int)\n    }\n\n    static func bool(_ bool: Bool) -> AnyValue {\n        return self.init(booleanLiteral: bool)\n    }\n\n    static func array(_ array: [AnyValueRepresentable]) -> AnyValue {\n        return self.init(array: array)\n    }\n}\n\n// MARK: - Convenient Getters\n\npublic extension AnyValue {\n\n    var string: String? {\n        if case .string(let string) = valueType {\n            return string\n        }\n\n        return nil\n    }\n\n    var int: Int? {\n        if case .int(let int) = valueType {\n            return int\n        }\n\n        return nil\n    }\n\n    var bool: Bool? {\n        if case .bool(let bool) = valueType {\n            return bool\n        }\n\n        return nil\n    }\n\n    var array: [AnyValue]? {\n        if case .array(let array) = valueType {\n            return array\n        }\n\n        return nil\n    }\n}\n\n// MARK: - AnyValueConvertible\n", "explanation": "Here is a concise summary:\n\n**Purpose:** The provided code defines a set of convenience functions for converting various types (String, Int, Bool, Array) into `AnyValue` instances.\n\n**Functionality:** It also includes getter properties on `AnyValue` that allow accessing its underlying type-specific values (string, int, bool, array).", "metadata": {"repo": "magiclabs/magic-ios", "file": "Sources/MagicSDK/Core/Relayer/Types/AnyValue.swift", "chunk_number": 4, "total_chunks": 6}, "repository_explanation": "The `magiclabs/magic-ios` repository is a public codebase for the Magic iOS app. \n\nKey points:\n\n* Purpose: Official implementation of the Magic payment processing library for iOS\n* Content:\n\t+ Source code for the Magic iOS app and SDK\n\t+ Documentation and guides for developers", "file_summary": "Here's a concise summary of the file 'Sources/MagicSDK/Core/Relayer/Types/AnyValue.swift':\n\nThis file defines a generic value type called `AnyValue`, which can represent various data types, including strings, integers, booleans, arrays, and nil values. It provides convenience functions for initializing `AnyValue` instances from different types, as well as getter properties to access the underlying values. Additionally, it implements Equatable and Hashable protocols for custom types, allowing for type-agnostic value comparison and hashing."}
{"code": "extension AnyValue: AnyValueConvertible {\n\n    public init(anyValue: AnyValue) {\n        self = anyValue\n    }\n\n    public func anyValue() -> AnyValue {\n        return self\n    }\n}\n\n// MARK: - Equatable\n\nextension AnyValue.ValueType: Equatable {\n\n    public static func ==(_ lhs: AnyValue.ValueType, _ rhs: AnyValue.ValueType) -> Bool {\n        switch lhs {\n        case .string(let str):\n            if case .string(let rStr) = rhs {\n                return str == rStr\n            }\n            return false\n        case .int(let int):\n            if case .int(let rInt) = rhs {\n                return int == rInt\n            }\n            return false\n        case .bool(let bool):\n            if case .bool(let rBool) = rhs {\n                return bool == rBool\n            }\n            return false\n        case .array(let array):\n            if case .array(let rArray) = rhs {\n                return array == rArray\n            }\n            return false\n        case .nil:\n            if case .nil = rhs {", "explanation": "**Summary**\n\nThis block is an extension of `AnyValueConvertible` protocol, which allows for type conversion between `AnyValue` instances. It also implements the `Equatable` protocol to enable equality checks between different types of values within `AnyValue`. \n\nThe main purpose is to facilitate type-agnostic value handling and comparison.", "metadata": {"repo": "magiclabs/magic-ios", "file": "Sources/MagicSDK/Core/Relayer/Types/AnyValue.swift", "chunk_number": 5, "total_chunks": 6}, "repository_explanation": "The `magiclabs/magic-ios` repository is a public codebase for the Magic iOS app. \n\nKey points:\n\n* Purpose: Official implementation of the Magic payment processing library for iOS\n* Content:\n\t+ Source code for the Magic iOS app and SDK\n\t+ Documentation and guides for developers", "file_summary": "Here's a concise summary of the file 'Sources/MagicSDK/Core/Relayer/Types/AnyValue.swift':\n\nThis file defines a generic value type called `AnyValue`, which can represent various data types, including strings, integers, booleans, arrays, and nil values. It provides convenience functions for initializing `AnyValue` instances from different types, as well as getter properties to access the underlying values. Additionally, it implements Equatable and Hashable protocols for custom types, allowing for type-agnostic value comparison and hashing."}
{"code": "                return true\n            }\n            return false\n        }\n    }\n}\n\nextension AnyValue: Equatable {\n\n    public static func ==(_ lhs: AnyValue, _ rhs: AnyValue) -> Bool {\n        return lhs.valueType == rhs.valueType\n    }\n}\n\n// MARK: - Hashable\n\nextension AnyValue.ValueType: Hashable {\n\n    public func hash(into hasher: inout Hasher) {\n        switch self {\n        case .string(let str):\n            hasher.combine(str)\n        case .int(let int):\n            hasher.combine(int)\n        case .bool(let bool):\n            hasher.combine(bool)\n        case .array(let array):\n            hasher.combine(array)\n        case .nil:\n            hasher.combine(0x00)\n        }\n    }\n}\n\nextension AnyValue: Hashable {\n\n    public func hash(into hasher: inout Hasher) {\n        hasher.combine(valueType)\n    }\n}\n", "explanation": "Here is a summary of the block:\n\n**Purpose:** Implement Equatable and Hashable protocols for custom types.\n\n**Functionality:**\n\n* `AnyValue` type implements Equatable protocol, allowing instances to be compared using `==`.\n* Custom `ValueType` enum also implements Hashable protocol, enabling instances to be hashed.\n* `AnyValue` instance is hashed by hashing its associated `ValueType`.", "metadata": {"repo": "magiclabs/magic-ios", "file": "Sources/MagicSDK/Core/Relayer/Types/AnyValue.swift", "chunk_number": 6, "total_chunks": 6}, "repository_explanation": "The `magiclabs/magic-ios` repository is a public codebase for the Magic iOS app. \n\nKey points:\n\n* Purpose: Official implementation of the Magic payment processing library for iOS\n* Content:\n\t+ Source code for the Magic iOS app and SDK\n\t+ Documentation and guides for developers", "file_summary": "Here's a concise summary of the file 'Sources/MagicSDK/Core/Relayer/Types/AnyValue.swift':\n\nThis file defines a generic value type called `AnyValue`, which can represent various data types, including strings, integers, booleans, arrays, and nil values. It provides convenience functions for initializing `AnyValue` instances from different types, as well as getter properties to access the underlying values. Additionally, it implements Equatable and Hashable protocols for custom types, allowing for type-agnostic value comparison and hashing."}
{"code": "//\n//  AnyValueConvertible.swift\n//  MagicSDK\n//\n//  Created by Jerry Liu on 07/13/20.\n//  Copyright \u00a9 2020 Magic Labs Inc. All rights reserved.\n//\n\nimport Foundation\n\n/**\n * Objects which can be converted to `AnyValue` can implement this.\n */\npublic protocol AnyValueRepresentable: Encodable {\n\n    /**\n     * Converts `self` to `AnyValue`.\n     *\n     * - returns: The generated `AnyValue`.\n     */\n    func anyValue() -> AnyValue\n}\n\n/**\n * Objects which can be initialized with `AnyValue`'s can implement this.\n */\npublic protocol AnyValueInitializable: Decodable {\n\n    /**\n     * Initializes `self` with the given `AnyValue` if possible. Throws otherwise.\n     *\n     * - parameter AnyValue: The `AnyValue` to be converted to `self`.\n     */\n    init(anyValue: AnyValue) throws\n}\n\n/**\n * Objects which are both representable and initializable by and with `AnyValue`'s.\n */\npublic typealias AnyValueConvertible = AnyValueRepresentable & AnyValueInitializable\n\nextension AnyValueInitializable {\n", "explanation": "**Purpose:** Define protocols for objects that can be converted to/from a standardized data format (`AnyValue`).\n\n**Functionality:**\n\n1. **`AnyValueRepresentable`**: Allows an object to convert itself into an `AnyValue`.\n\t* Requires implementation of `anyValue()` method.\n2. **`AnyValueInitializable`**: Enables an object to be initialized from an `AnyValue`.\n\t* Requires implementation of `init(anyValue:)` initializer.\n3. **`AnyValueConvertible`**: A shorthand for objects that conform to both protocols (i.e., can convert to/from `AnyValue`).", "metadata": {"repo": "magiclabs/magic-ios", "file": "Sources/MagicSDK/Core/Relayer/Types/AnyValueConvertible.swift", "chunk_number": 1, "total_chunks": 2}, "repository_explanation": "The `magiclabs/magic-ios` repository is a public codebase for the Magic iOS app. \n\nKey points:\n\n* Purpose: Official implementation of the Magic payment processing library for iOS\n* Content:\n\t+ Source code for the Magic iOS app and SDK\n\t+ Documentation and guides for developers", "file_summary": "Here is a concise summary:\n\n**Purpose:** Define protocols for converting objects to/from standardized data (`AnyValue`) format.\n\n**Functionality:**\n\n* Allows conversion of objects to/from `AnyValue`.\n* Enables initialization, encoding, and decoding of various types using `AnyValue` wrapper.\n* Facilitates interoperability between different object types."}
{"code": "    public init(anyValue: AnyValueRepresentable) throws {\n        let e = anyValue.anyValue()\n        try self.init(anyValue: e)\n    }\n}\n\n// MARK: - Default Codable\n\nextension AnyValueRepresentable {\n\n    public func encode(to encoder: Encoder) throws {\n        try anyValue().encode(to: encoder)\n    }\n}\n\nextension AnyValueInitializable {\n\n    public init(from decoder: Decoder) throws {\n        try self.init(anyValue: AnyValue(from: decoder))\n    }\n}\n\n// MARK: - Errors\n\npublic enum AnyValueRepresentableError: Swift.Error {\n\n    case notRepresentable\n}\n\npublic enum AnyValueInitializableError: Swift.Error {\n\n    case notInitializable\n}\n", "explanation": "Here is a concise summary:\n\n**Purpose:** Extensions for types that can be represented as `AnyValue` or initialized from it.\n\n**Functionality:**\n\n* Allows initializing an object with any type by wrapping it in `AnyValue`.\n* Enables encoding/decoding `AnyValueRepresentable` objects.\n* Initializes `AnyValueInitializable` objects from a decoder.", "metadata": {"repo": "magiclabs/magic-ios", "file": "Sources/MagicSDK/Core/Relayer/Types/AnyValueConvertible.swift", "chunk_number": 2, "total_chunks": 2}, "repository_explanation": "The `magiclabs/magic-ios` repository is a public codebase for the Magic iOS app. \n\nKey points:\n\n* Purpose: Official implementation of the Magic payment processing library for iOS\n* Content:\n\t+ Source code for the Magic iOS app and SDK\n\t+ Documentation and guides for developers", "file_summary": "Here is a concise summary:\n\n**Purpose:** Define protocols for converting objects to/from standardized data (`AnyValue`) format.\n\n**Functionality:**\n\n* Allows conversion of objects to/from `AnyValue`.\n* Enables initialization, encoding, and decoding of various types using `AnyValue` wrapper.\n* Facilitates interoperability between different object types."}
{"code": "//\n//  Type.swift\n//  Magic\n//\n//  Created by Jerry Liu on 2/6/20.\n//  Copyright \u00a9 2020 Magic Labs Inc. All rights reserved.\n//\n\nimport Foundation\n\nenum InboundMessageType: String, CaseIterable {\n    case MAGIC_HANDLE_RESPONSE\n    case MAGIC_OVERLAY_READY\n    case MAGIC_SHOW_OVERLAY\n    case MAGIC_HIDE_OVERLAY\n    case MAGIC_HANDLE_EVENT\n    case MAGIC_SEND_PRODUCT_ANNOUNCEMENT\n}\n\nenum OutboundMessageType: String, CaseIterable {\n    case MAGIC_HANDLE_REQUEST\n}\n\nstruct MagicRequestData<T: Codable>: Codable {\n    \n    let msgType: String\n    let payload: T\n    let rt: String?\n    let jwt: String?\n}\n\nstruct MagicResponseData<T: Codable>: Codable {\n    \n    let msgType: String\n    let response: T\n    let rt: String?\n}\n", "explanation": "This block defines a set of constants and data structures for a messaging system, specifically:\n\n* Two enums (`InboundMessageType` and `OutboundMessageType`) that define message types.\n* Two structs (`MagicRequestData` and `MagicResponseData`) that represent request and response data with specific properties.", "metadata": {"repo": "magiclabs/magic-ios", "file": "Sources/MagicSDK/Core/Relayer/Types/BasicTypes.swift", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "The `magiclabs/magic-ios` repository is a public codebase for the Magic iOS app. \n\nKey points:\n\n* Purpose: Official implementation of the Magic payment processing library for iOS\n* Content:\n\t+ Source code for the Magic iOS app and SDK\n\t+ Documentation and guides for developers", "file_summary": "Here is a concise and to-the-point summary of the file 'Sources/MagicSDK/Core/Relayer/Types/BasicTypes.swift':\n\n**Summary:** This file defines essential types for a messaging system, including message type enums and request/response structs that encapsulate specific data properties."}
{"code": "//\n//  File.swift\n//\n//\n//  Created by Wentao Liu on 7/11/23.\n//\n\nimport Foundation\nimport CryptoKit\n\n\nfunc base64UrlEncoded(_ data: Data) -> String {\n    var b64 = data.base64EncodedString()\n    b64 = b64.replacingOccurrences(of: \"+\", with: \"-\")\n    b64 = b64.replacingOccurrences(of: \"/\", with: \"_\")\n    b64 = b64.replacingOccurrences(of: \"=\", with: \"\")\n    return b64\n}\n\n\nfunc createJwt() -> String? {\n    var attempts = 0\n    \n    while attempts < 3 { // Attempt the retry flow at a maximum of 3 times before giving up\n        do {\n            let privateKey = try retrieveKeyFromKeyChain()\n            \n            // Get the public key.\n            let publicKey = privateKey.publicKey\n            \n            // Get the raw representation of the public key.\n            let rawPublicKey = publicKey.rawRepresentation\n            \n            // Extract the x and y coordinates.\n            let xCoordinateData = rawPublicKey[1..<33]\n            let yCoordinateData = rawPublicKey[33..<65]\n            ", "explanation": "Here is a concise summary of the purpose and functionality of this block:\n\n**Purpose:** Provides two functions for encoding binary data in Base64 URL format and creating a JSON Web Token (JWT).\n\n**Functionality:**\n\n1. `base64UrlEncoded(_:)`: Encodes binary data into a Base64 URL string, replacing \"+\" with \"-\", \"/\" with \"_\", and \"=\" with an empty string.\n2. `createJwt()`: Attempts to create a JWT by retrieving a private key from the KeyChain, generating a public key, extracting its x and y coordinates, and using them to create the JWT (retrying up to 3 times if initial attempts fail).", "metadata": {"repo": "magiclabs/magic-ios", "file": "Sources/MagicSDK/Core/Relayer/Types/DPop.swift", "chunk_number": 1, "total_chunks": 4}, "repository_explanation": "The `magiclabs/magic-ios` repository is a public codebase for the Magic iOS app. \n\nKey points:\n\n* Purpose: Official implementation of the Magic payment processing library for iOS\n* Content:\n\t+ Source code for the Magic iOS app and SDK\n\t+ Documentation and guides for developers", "file_summary": "Here is a concise summary:\n\nThe `DPop.swift` file provides two main functions for encoding data in Base64 URL format and creating a JSON Web Token (JWT). It also includes an error handling mechanism for generating JWTs, retrying up to 3 times if initial attempts fail."}
{"code": "            // If you need base64-encoded strings for JWK:\n            let xCoordinateBase64 = base64UrlEncoded(xCoordinateData)\n            let yCoordinateBase64 = base64UrlEncoded(yCoordinateData)\n            \n            // Convert the public key to JWK format.\n            // construct headers\n            var headers: [String: Any] = [\"typ\": \"dpop+jwt\", \"alg\": \"ES256\"]\n            headers[\"jwk\"] = [\n                \"kty\": \"EC\",\n                \"crv\": \"P-256\",\n                \"x\": xCoordinateBase64,\n                \"y\": yCoordinateBase64\n            ] as [String : Any]\n\n            let headersData = try JSONSerialization.data(withJSONObject: headers)\n            let headersB64 = base64UrlEncoded(headersData)\n            \n            // construct claims\n            let iat = Int(Date().timeIntervalSince1970)\n            let jti = UUID().uuidString.lowercased()\n\n            let claims: [String: Any] = [\"iat\": iat, \"jti\": jti]\n            let claimsData = try JSONSerialization.data(withJSONObject: claims)", "explanation": "**Purpose:** Convert public key data into JWK (JSON Web Key) format.\n\n**Functionality:**\n\n1. Base64-encode x and y coordinate data.\n2. Create a JWK header object with \"typ\", \"alg\", and \"jwk\" properties, containing the encoded coordinates.\n3. Create a JWT claim object with \"iat\" and \"jti\" properties.\n4. Encode both the header and claims into base64 strings.", "metadata": {"repo": "magiclabs/magic-ios", "file": "Sources/MagicSDK/Core/Relayer/Types/DPop.swift", "chunk_number": 2, "total_chunks": 4}, "repository_explanation": "The `magiclabs/magic-ios` repository is a public codebase for the Magic iOS app. \n\nKey points:\n\n* Purpose: Official implementation of the Magic payment processing library for iOS\n* Content:\n\t+ Source code for the Magic iOS app and SDK\n\t+ Documentation and guides for developers", "file_summary": "Here is a concise summary:\n\nThe `DPop.swift` file provides two main functions for encoding data in Base64 URL format and creating a JSON Web Token (JWT). It also includes an error handling mechanism for generating JWTs, retrying up to 3 times if initial attempts fail."}
{"code": "            let claimsB64 = base64UrlEncoded(claimsData)\n            \n            /// sign\n            let signingInput =  headersB64 + \".\" + claimsB64\n            \n            guard let signingInputData = signingInput.data(using: .utf8),\n                  let signature = try? privateKey.signature(for: signingInputData) else {\n                // This can happen when the [secure enclave biometrics](https://developer.apple.com/forums/thread/682162?answerId=726099022#726099022) \n                // have changed such as when an app is auto-installed on a new device, ergo delete previously created key and try again\n                try deleteKeyFromKeyChain()\n                attempts += 1\n                continue\n            }\n\n            let signatureB64 = base64UrlEncoded(signature.rawRepresentation)\n            let jwt = signingInput + \".\" + signatureB64\n            \n            return jwt\n\n        } catch {\n            // Handle error (log, throw, or break as necessary)", "explanation": "Here is a concise summary of the block's purpose and functionality:\n\n**Purpose:** Generate a JSON Web Token (JWT)\n\n**Functionality:**\n\n* Base64-encode claims data\n* Combine header, claims, and signature data using \".\" separators\n* Sign the combined data with a private key\n* Encode the signature in base64\n* Return the resulting JWT string", "metadata": {"repo": "magiclabs/magic-ios", "file": "Sources/MagicSDK/Core/Relayer/Types/DPop.swift", "chunk_number": 3, "total_chunks": 4}, "repository_explanation": "The `magiclabs/magic-ios` repository is a public codebase for the Magic iOS app. \n\nKey points:\n\n* Purpose: Official implementation of the Magic payment processing library for iOS\n* Content:\n\t+ Source code for the Magic iOS app and SDK\n\t+ Documentation and guides for developers", "file_summary": "Here is a concise summary:\n\nThe `DPop.swift` file provides two main functions for encoding data in Base64 URL format and creating a JSON Web Token (JWT). It also includes an error handling mechanism for generating JWTs, retrying up to 3 times if initial attempts fail."}
{"code": "            print(\"An error occurred: \\(error)\")\n            break\n        }\n    }\n    return nil // Return nil if unable to generate JWT after 3x retries\n}\n\n", "explanation": "**Purpose:** Handle errors in generating a JWT.\n\n**Functionality:** Catch an error, log it with \"An error occurred: \\(error)\", and break out of the loop on max retries (3). If all retries fail, return nil.", "metadata": {"repo": "magiclabs/magic-ios", "file": "Sources/MagicSDK/Core/Relayer/Types/DPop.swift", "chunk_number": 4, "total_chunks": 4}, "repository_explanation": "The `magiclabs/magic-ios` repository is a public codebase for the Magic iOS app. \n\nKey points:\n\n* Purpose: Official implementation of the Magic payment processing library for iOS\n* Content:\n\t+ Source code for the Magic iOS app and SDK\n\t+ Documentation and guides for developers", "file_summary": "Here is a concise summary:\n\nThe `DPop.swift` file provides two main functions for encoding data in Base64 URL format and creating a JSON Web Token (JWT). It also includes an error handling mechanism for generating JWTs, retrying up to 3 times if initial attempts fail."}
{"code": "//\n//  ProductAnnouncement.swift\n//\n//\n//  Created by Arian Flores - Magic on 2/28/24.\n//\n\nimport Foundation\n\nstruct ProductAnnouncement: Codable {\n let product_announcement: String\n}\n", "explanation": "Here is a concise summary:\n\nThis is a Swift struct named `ProductAnnouncement` that imports the Foundation framework and conforms to the Codable protocol, allowing it to be easily encoded and decoded into JSON or other formats. It has one property: `product_announcement`, which is a string.", "metadata": {"repo": "magiclabs/magic-ios", "file": "Sources/MagicSDK/Core/Relayer/Types/ProductAnnouncement.swift", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "The `magiclabs/magic-ios` repository is a public codebase for the Magic iOS app. \n\nKey points:\n\n* Purpose: Official implementation of the Magic payment processing library for iOS\n* Content:\n\t+ Source code for the Magic iOS app and SDK\n\t+ Documentation and guides for developers", "file_summary": "Here's a concise summary:\n\n`ProductAnnouncement.swift`: A Swift struct for encoding/decoding product announcements as a single string value, conforming to Codable protocol."}
{"code": "//\n//  URLBuilder.swift\n//  Magic\n//\n//  Created by Jerry Liu on 3/16/20.\n//  Copyright \u00a9 2020 Magic Labs Inc. All rights reserved.\n//\n\nimport Foundation\n\n// MARK: - URLBuilder init\n//\n// Construct a URI with options encoded\n//\npublic struct URLBuilder {\n\n    let encodedParams, url: String\n    \n    static let host = \"https://box.magic.link\"\n    public let apiKey: String\n\n    init(apiKey: String, customNode: CustomNodeConfiguration? = nil, network: EthNetwork? = nil, locale: String) {\n\n        let data = try! JSONEncoder().encode(\n            UrlParamsEncodable(\n                apiKey: apiKey,\n                ethNetwork: network,\n                customNode: customNode,\n                locale: locale\n            )\n        )\n\n        self.init(data: data, host: URLBuilder.host, apiKey: apiKey)\n    }\n\n    private init(data: Data, host: String, apiKey: String) {\n        \n        let jsonString = String(data: data, encoding: .utf8)!\n        let sanitizedJsonString = jsonString.replacingOccurrences(of: \"\\\\\", with: \"\")\n        ", "explanation": "Here is a concise summary of the purpose and functionality of this block:\n\n**Purpose:** A URL builder struct for constructing URIs with encoded parameters.\n\n**Functionality:** Encodes user-provided options (apiKey, customNode, network, locale) into a JSON string, which is then used to construct a URI with a specified host.", "metadata": {"repo": "magiclabs/magic-ios", "file": "Sources/MagicSDK/Core/Relayer/URLBuilder.swift", "chunk_number": 1, "total_chunks": 3}, "repository_explanation": "The `magiclabs/magic-ios` repository is a public codebase for the Magic iOS app. \n\nKey points:\n\n* Purpose: Official implementation of the Magic payment processing library for iOS\n* Content:\n\t+ Source code for the Magic iOS app and SDK\n\t+ Documentation and guides for developers", "file_summary": "Here's a concise summary of the file 'Sources/MagicSDK/Core/Relayer/URLBuilder.swift':\n\n**Purpose:** Encode user input into a URL query string for API request.\n\n**Functionality:** Construct a URI with encoded parameters, including API key, locale, custom node (if present), and Ethereum network settings, using a JSON-compatible format."}
{"code": "        // Encode instantiate option to params\n        self.apiKey = apiKey\n        self.encodedParams = btoa(jsonString: sanitizedJsonString)\n        \n        self.url = \"\\(host)/send/?params=\\(self.encodedParams)\"\n    }\n\n    // MARK: - UrlParamsEncodable\n    struct UrlParamsEncodable: Encodable {\n        \n        let apiKey: String\n        let locale: String\n        let customNode: CustomNodeConfiguration?\n        let ethNetwork: EthNetwork?\n        \n        init(apiKey: String, ethNetwork: EthNetwork?, customNode: CustomNodeConfiguration?, locale: String) {\n            self.apiKey = apiKey\n            self.locale = locale\n            self.customNode = customNode\n            self.ethNetwork = ethNetwork\n        }\n\n        enum CodingKeys: String, CodingKey {\n            case apiKey = \"API_KEY\"\n            case ethNetwork = \"ETH_NETWORK\"\n            case bundleId, host, sdk, locale\n        }\n\n        func encode(to encoder: Encoder) throws {\n            var container = encoder.container(keyedBy: CodingKeys.self)", "explanation": "Here is a concise summary:\n\n**Purpose:** Encode user input into a URL query string for API request.\n\n**Functionality:** \n\n1. Set API key and encode user input into a Base64 string.\n2. Construct a URL with encoded params using the `host` variable.\n3. Define an `Encodable` struct (`UrlParamsEncodable`) to convert user input into JSON-compatible format for encoding.", "metadata": {"repo": "magiclabs/magic-ios", "file": "Sources/MagicSDK/Core/Relayer/URLBuilder.swift", "chunk_number": 2, "total_chunks": 3}, "repository_explanation": "The `magiclabs/magic-ios` repository is a public codebase for the Magic iOS app. \n\nKey points:\n\n* Purpose: Official implementation of the Magic payment processing library for iOS\n* Content:\n\t+ Source code for the Magic iOS app and SDK\n\t+ Documentation and guides for developers", "file_summary": "Here's a concise summary of the file 'Sources/MagicSDK/Core/Relayer/URLBuilder.swift':\n\n**Purpose:** Encode user input into a URL query string for API request.\n\n**Functionality:** Construct a URI with encoded parameters, including API key, locale, custom node (if present), and Ethereum network settings, using a JSON-compatible format."}
{"code": "            \n            try container.encode(\"magic-sdk-ios\", forKey: .sdk)\n            try container.encode(Bundle.main.bundleIdentifier, forKey: .bundleId)\n            \n            try container.encode(apiKey, forKey: .apiKey)\n            try container.encode(URLBuilder.host, forKey: .host)\n            try container.encode(locale, forKey: .locale)\n\n\n            if let node = customNode {\n                try container.encode(node, forKey: .ethNetwork)\n            }\n            if let network = ethNetwork {\n                try container.encode(network.rawValue, forKey: .ethNetwork)\n            }\n        }\n    }\n}\n\n// MARK: -- Network\npublic struct CustomNodeConfiguration: Encodable {\n    let rpcUrl: String\n    let chainId: Int?\n\n    public init (rpcUrl: String, chainId: Int? = nil) {\n        self.rpcUrl = rpcUrl\n        self.chainId = chainId\n    }\n}\n", "explanation": "**Summary**\n\nThis block encodes configuration data into a container using try-catch statements. It stores SDK information, API key, host URL, locale, custom node (if present), and Ethereum network settings in a serializable format. The CustomNodeConfiguration struct is used to store RPC URL and chain ID for encoding purposes.", "metadata": {"repo": "magiclabs/magic-ios", "file": "Sources/MagicSDK/Core/Relayer/URLBuilder.swift", "chunk_number": 3, "total_chunks": 3}, "repository_explanation": "The `magiclabs/magic-ios` repository is a public codebase for the Magic iOS app. \n\nKey points:\n\n* Purpose: Official implementation of the Magic payment processing library for iOS\n* Content:\n\t+ Source code for the Magic iOS app and SDK\n\t+ Documentation and guides for developers", "file_summary": "Here's a concise summary of the file 'Sources/MagicSDK/Core/Relayer/URLBuilder.swift':\n\n**Purpose:** Encode user input into a URL query string for API request.\n\n**Functionality:** Construct a URI with encoded parameters, including API key, locale, custom node (if present), and Ethereum network settings, using a JSON-compatible format."}
{"code": "//\n//  WebViewController.swift\n//  Magic\n//\n//  Created by Jerry Liu on 2/1/20.\n//  Copyright \u00a9 2020 Magic Labs Inc. All rights reserved.\n//\n\nimport WebKit\nimport UIKit\nimport os\n\n/// An instance of the Fortmatc Phantom WebView\nclass WebViewController: UIViewController, WKUIDelegate, WKScriptMessageHandler, WKNavigationDelegate, UIScrollViewDelegate {\n    @available(iOS 14.0, *)\n    private static let logger = Logger(\n        subsystem: Bundle.main.bundleIdentifier!,\n        category: String(describing: WebViewController.self)\n    )\n    \n    /// Various errors that may occur while processing Web3 requests\n    public enum AuthRelayerError: Error {\n\n        ///Message encode fail\n        case messageEncodeFailed(message: String)\n\n        case webviewAttachedFailed\n        case topMostWindowNotFound\n    }\n\n    /// This name is reserved for internal use\n    let messageName = \"fortmaticIOS\"\n\n    var webView: WKWebView!\n\n    /// X source url\n    var urlBuilder: URLBuilder!\n\n    /// Overlay Ready\n    var overlayReady = false", "explanation": "Here is a concise summary of the purpose and functionality of this code block:\n\n**Purpose:** A custom `UIViewController` subclass for displaying web content using WebKit.\n\n**Functionality:** Manages a WKWebView instance, handles script messages and navigation events, and logs errors related to Web3 requests. Also includes an overlay feature that can be triggered when ready.", "metadata": {"repo": "magiclabs/magic-ios", "file": "Sources/MagicSDK/Core/Relayer/WebViewController.swift", "chunk_number": 1, "total_chunks": 13}, "repository_explanation": "The `magiclabs/magic-ios` repository is a public codebase for the Magic iOS app. \n\nKey points:\n\n* Purpose: Official implementation of the Magic payment processing library for iOS\n* Content:\n\t+ Source code for the Magic iOS app and SDK\n\t+ Documentation and guides for developers", "file_summary": "Here is a concise summary of the file 'Sources/MagicSDK/Core/Relayer/WebViewController.swift':\n\n**Purpose:** A custom `UIViewController` subclass for displaying web content using WebKit, handling script messages, navigation events, and logging errors related to Web3 requests.\n\n**Functionality:**\n\n* Manages a WKWebView instance with a transparent background and configures it for message handling.\n* Handles incoming messages by dequeuing them from a queue and posting them to another service.\n* Posts notifications when Magic event responses are received.\n* Handles RPC (Remote Procedure Call) responses based on their format.\n* Logs or prints outgoing messages depending on the log level.\n* Configures WKWebView to handle navigation events, disable zooming, and open external links in an external browser."}
{"code": "    var webViewFinishLoading = false\n\n    /// Queue and callbackss\n    var queue: [String] = []\n    var messageHandlers: Dictionary<Int, MessageHandler> = [:]\n\n    typealias MessageHandler = (String) throws ->  Void\n\n    // MARK: - init\n    init(url: URLBuilder) {\n        self.urlBuilder = url\n        super.init(nibName: nil, bundle: nil)\n    }\n\n    // Required provided by subclass of 'UIViewController'\n    required init?(coder aDecoder: NSCoder) {\n        super.init(coder: aDecoder)\n    }\n\n    // MARK: - Message Queue\n    func enqueue(message: String, id: Int, closure: @escaping MessageHandler) throws -> Void {\n        queue.append(message)\n        messageHandlers[id] = closure\n        try self.dequeue()\n    }\n\n    private func dequeue() throws -> Void {\n\n        // Check if UI is appeneded properly to current screen before dequeue\n        guard let window = UIApplication.shared.keyWindow else { return try attachWebView() }\n\n        if self.view.isDescendant(of: window) {\n", "explanation": "**Purpose:** This block appears to be a subclass of `UIViewController` responsible for managing a message queue and handling messages.\n\n**Functionality:**\n\n* Manages a message queue (`queue`) to process incoming messages.\n* Handles callbacks (`messageHandlers`) associated with each message ID.\n* Provides an `enqueue(message:id:closure:)` method to add messages to the queue.\n* Automatically dequeues messages from the queue when a message is added, and attaches a web view if necessary.", "metadata": {"repo": "magiclabs/magic-ios", "file": "Sources/MagicSDK/Core/Relayer/WebViewController.swift", "chunk_number": 2, "total_chunks": 13}, "repository_explanation": "The `magiclabs/magic-ios` repository is a public codebase for the Magic iOS app. \n\nKey points:\n\n* Purpose: Official implementation of the Magic payment processing library for iOS\n* Content:\n\t+ Source code for the Magic iOS app and SDK\n\t+ Documentation and guides for developers", "file_summary": "Here is a concise summary of the file 'Sources/MagicSDK/Core/Relayer/WebViewController.swift':\n\n**Purpose:** A custom `UIViewController` subclass for displaying web content using WebKit, handling script messages, navigation events, and logging errors related to Web3 requests.\n\n**Functionality:**\n\n* Manages a WKWebView instance with a transparent background and configures it for message handling.\n* Handles incoming messages by dequeuing them from a queue and posting them to another service.\n* Posts notifications when Magic event responses are received.\n* Handles RPC (Remote Procedure Call) responses based on their format.\n* Logs or prints outgoing messages depending on the log level.\n* Configures WKWebView to handle navigation events, disable zooming, and open external links in an external browser."}
{"code": "            if !queue.isEmpty && overlayReady && webViewFinishLoading {\n                let message = queue.removeFirst()\n                try self.postMessage(message: message)\n\n                // Recursive calls till queue is Empty\n                try self.dequeue()\n            }\n        } else {\n            try attachWebView()\n        }\n    }\n\n\n    // MARK: - Receive Messages\n\n    /// handler for received messages\n    /// conforming WKScriptMessageHandler\n    func userContentController(_ userContentController: WKUserContentController, didReceive message: WKScriptMessage) {\n\n        do {\n            if message.name == messageName {\n                guard let payloadStr = message.body as? String else { return }\n\n                if payloadStr.contains(InboundMessageType.MAGIC_OVERLAY_READY.rawValue) {\n                    overlayReady = true\n                    try? self.dequeue()\n                } else if payloadStr.contains(InboundMessageType.MAGIC_SHOW_OVERLAY.rawValue) {", "explanation": "Here is a concise summary:\n\n**Purpose:** Manage a message queue for a WKWebView extension.\n\n**Functionality:**\n\n1. Check if the queue is not empty, overlay is ready, and web view has finished loading.\n2. If true, remove the first message from the queue and post it to another service.\n3. Recursively call itself until the queue is empty.\n4. If conditions are false, attach the WKWebView.", "metadata": {"repo": "magiclabs/magic-ios", "file": "Sources/MagicSDK/Core/Relayer/WebViewController.swift", "chunk_number": 3, "total_chunks": 13}, "repository_explanation": "The `magiclabs/magic-ios` repository is a public codebase for the Magic iOS app. \n\nKey points:\n\n* Purpose: Official implementation of the Magic payment processing library for iOS\n* Content:\n\t+ Source code for the Magic iOS app and SDK\n\t+ Documentation and guides for developers", "file_summary": "Here is a concise summary of the file 'Sources/MagicSDK/Core/Relayer/WebViewController.swift':\n\n**Purpose:** A custom `UIViewController` subclass for displaying web content using WebKit, handling script messages, navigation events, and logging errors related to Web3 requests.\n\n**Functionality:**\n\n* Manages a WKWebView instance with a transparent background and configures it for message handling.\n* Handles incoming messages by dequeuing them from a queue and posting them to another service.\n* Posts notifications when Magic event responses are received.\n* Handles RPC (Remote Procedure Call) responses based on their format.\n* Logs or prints outgoing messages depending on the log level.\n* Configures WKWebView to handle navigation events, disable zooming, and open external links in an external browser."}
{"code": "                    try bringWebViewToFront()\n                } else if payloadStr.contains(InboundMessageType.MAGIC_HIDE_OVERLAY.rawValue) {\n                    try sendSubviewToBack()\n                } else if payloadStr.contains(InboundMessageType.MAGIC_HANDLE_EVENT.rawValue) {\n                    try handleEvent(payloadStr: payloadStr)\n                } else if payloadStr.contains(InboundMessageType.MAGIC_HANDLE_RESPONSE.rawValue) {\n                    try handleResponse(payloadStr: payloadStr)\n                } else if payloadStr.contains(InboundMessageType.MAGIC_SEND_PRODUCT_ANNOUNCEMENT.rawValue) {\n                    try makeProductAnnouncement(payloadStr: payloadStr)\n                }\n            }\n            try self.dequeue()\n        }catch let error {\n            print(\"Magic internal error: \\(error.localizedDescription)\")\n        }\n    }\n\n    private func handleEvent(payloadStr: String) throws -> Void {\n\n        // Decode here to get the event name", "explanation": "Here is a concise summary:\n\nThis block of code handles various \"magic\" payloads by attempting specific actions based on their presence in the `payloadStr`. It tries to bring a web view to the front, send a subview to the back, handle an event, response, product announcement, or dequeue. If any action fails, it catches and prints the error.", "metadata": {"repo": "magiclabs/magic-ios", "file": "Sources/MagicSDK/Core/Relayer/WebViewController.swift", "chunk_number": 4, "total_chunks": 13}, "repository_explanation": "The `magiclabs/magic-ios` repository is a public codebase for the Magic iOS app. \n\nKey points:\n\n* Purpose: Official implementation of the Magic payment processing library for iOS\n* Content:\n\t+ Source code for the Magic iOS app and SDK\n\t+ Documentation and guides for developers", "file_summary": "Here is a concise summary of the file 'Sources/MagicSDK/Core/Relayer/WebViewController.swift':\n\n**Purpose:** A custom `UIViewController` subclass for displaying web content using WebKit, handling script messages, navigation events, and logging errors related to Web3 requests.\n\n**Functionality:**\n\n* Manages a WKWebView instance with a transparent background and configures it for message handling.\n* Handles incoming messages by dequeuing them from a queue and posting them to another service.\n* Posts notifications when Magic event responses are received.\n* Handles RPC (Remote Procedure Call) responses based on their format.\n* Logs or prints outgoing messages depending on the log level.\n* Configures WKWebView to handle navigation events, disable zooming, and open external links in an external browser."}
{"code": "        let eventData = payloadStr.data(using: .utf8)!\n        let eventResponse = try JSONDecoder().decode(MagicResponseData<MagicEventResponse<[AnyValue]>>.self, from: eventData)\n\n        // post event to the obeserver\n        let event = eventResponse.response\n        if let eventName = event.result.event {\n            NotificationCenter.default.post(name: Notification.Name.init(eventName), object: nil, userInfo: [\"event\": event.result])\n        }\n    }\n\n    private func handleResponse(payloadStr: String) throws -> Void {\n\n        /// Take id out from JSON string\n        if let range = payloadStr.range(of: \"(?<=\\\"id\\\":)(.*?)(?=,)\", options: .regularExpression) {\n\n            guard let id = Int(payloadStr[range]) else {\n\n                /// throws when response has no matching id\n                throw RpcProvider.ProviderError.invalidJsonResponse(json: payloadStr)\n            }\n\n            // Call callback stored\n            if let callback = self.messageHandlers[id] {", "explanation": "Here is a concise summary of the purpose and functionality of this block:\n\n**Purpose:** Post a Magic event notification when an event response is received.\n\n**Functionality:**\n\n* Decodes JSON data from a string into a `MagicEventResponse` object.\n* Extracts the event result from the decoded object.\n* Posts a notification to the observer using the extracted event name and result.\n* Calls a callback function stored in a dictionary based on an ID extracted from another part of the JSON response.", "metadata": {"repo": "magiclabs/magic-ios", "file": "Sources/MagicSDK/Core/Relayer/WebViewController.swift", "chunk_number": 5, "total_chunks": 13}, "repository_explanation": "The `magiclabs/magic-ios` repository is a public codebase for the Magic iOS app. \n\nKey points:\n\n* Purpose: Official implementation of the Magic payment processing library for iOS\n* Content:\n\t+ Source code for the Magic iOS app and SDK\n\t+ Documentation and guides for developers", "file_summary": "Here is a concise summary of the file 'Sources/MagicSDK/Core/Relayer/WebViewController.swift':\n\n**Purpose:** A custom `UIViewController` subclass for displaying web content using WebKit, handling script messages, navigation events, and logging errors related to Web3 requests.\n\n**Functionality:**\n\n* Manages a WKWebView instance with a transparent background and configures it for message handling.\n* Handles incoming messages by dequeuing them from a queue and posting them to another service.\n* Posts notifications when Magic event responses are received.\n* Handles RPC (Remote Procedure Call) responses based on their format.\n* Logs or prints outgoing messages depending on the log level.\n* Configures WKWebView to handle navigation events, disable zooming, and open external links in an external browser."}
{"code": "                try callback(payloadStr)\n                self.messageHandlers[id] = nil\n            } else {\n\n                /// throws when response couldn't match a callback\n                throw RpcProvider.ProviderError.missingPayloadCallback(json: payloadStr)\n            }\n        } else {\n            throw RpcProvider.ProviderError.invalidJsonResponse(json: payloadStr)\n        }\n    }\n    \n    private func makeProductAnnouncement(payloadStr: String) throws {\n        // Decoding the JSON string into the Payload struct\n        guard let data = payloadStr.data(using: .utf8) else { return }\n        \n        // Define a typealias for the expected payload type\n        typealias PayloadType = MagicResponseData<MagicEventResponse<ProductAnnouncement>>\n\n        let payload = try JSONDecoder().decode(PayloadType.self, from: data)\n        if let announcement = payload.response.result.product_announcement {\n            if #available(iOS 14.0, *) {", "explanation": "**Block Purpose:** Handle RPC (Remote Procedure Call) response based on its format.\n\n**Functionality:**\n\n1. If the response matches a callback, call it with the payload string.\n2. If no matching callback is found, throw an error indicating missing payload callback.\n3. If the JSON response is invalid, throw an error indicating invalid JSON response.\n4. If the payload contains product announcement data, extract and process it (specific details not provided).", "metadata": {"repo": "magiclabs/magic-ios", "file": "Sources/MagicSDK/Core/Relayer/WebViewController.swift", "chunk_number": 6, "total_chunks": 13}, "repository_explanation": "The `magiclabs/magic-ios` repository is a public codebase for the Magic iOS app. \n\nKey points:\n\n* Purpose: Official implementation of the Magic payment processing library for iOS\n* Content:\n\t+ Source code for the Magic iOS app and SDK\n\t+ Documentation and guides for developers", "file_summary": "Here is a concise summary of the file 'Sources/MagicSDK/Core/Relayer/WebViewController.swift':\n\n**Purpose:** A custom `UIViewController` subclass for displaying web content using WebKit, handling script messages, navigation events, and logging errors related to Web3 requests.\n\n**Functionality:**\n\n* Manages a WKWebView instance with a transparent background and configures it for message handling.\n* Handles incoming messages by dequeuing them from a queue and posting them to another service.\n* Posts notifications when Magic event responses are received.\n* Handles RPC (Remote Procedure Call) responses based on their format.\n* Logs or prints outgoing messages depending on the log level.\n* Configures WKWebView to handle navigation events, disable zooming, and open external links in an external browser."}
{"code": "                os_log(\"%{public}@\", log: .default, type: .info, announcement)\n            } else {\n                print(announcement)\n            }\n        }\n    }\n\n\n\n    // MARK: - Post Messages\n\n\n    /// post Message to HTML via evaluateJavaScript\n    ///\n    internal func postMessage(message: String) throws -> Void {\n\n        let data: [String: String] = [\"data\": message]\n\n        guard let json = try? JSONEncoder().encode(data),\n              let jsonString = String(data: json, encoding: .utf8) else {\n            throw AuthRelayerError.messageEncodeFailed(message: message)\n        }\n\n        let execString = String(format: \"window.dispatchEvent(new MessageEvent('message', \\(jsonString)));\")\n        webView.evaluateJavaScript(execString)\n    }\n\n\n\n\n    // MARK: - view loading\n    /// loadView will be triggered when addsubview is called. It will create a webview to post messages to auth relayer\n    override func loadView() {\n\n        // Display Full screen", "explanation": "Here is a concise summary of the purpose and functionality of this block:\n\n**Purpose:** Handle outgoing messages from the app, either logging or printing them, depending on the log level.\n\n**Functionality:**\n\n* If an announcement message has been set, it logs or prints the message based on the log level.\n* Additionally, there are functions to post a message to an HTML view via JavaScript:\n\t+ The `postMessage` function encodes a string as JSON and dispatches a \"message\" event to the web view.\n\t+ This allows the app to send messages from Objective-C to JavaScript in the web view.", "metadata": {"repo": "magiclabs/magic-ios", "file": "Sources/MagicSDK/Core/Relayer/WebViewController.swift", "chunk_number": 7, "total_chunks": 13}, "repository_explanation": "The `magiclabs/magic-ios` repository is a public codebase for the Magic iOS app. \n\nKey points:\n\n* Purpose: Official implementation of the Magic payment processing library for iOS\n* Content:\n\t+ Source code for the Magic iOS app and SDK\n\t+ Documentation and guides for developers", "file_summary": "Here is a concise summary of the file 'Sources/MagicSDK/Core/Relayer/WebViewController.swift':\n\n**Purpose:** A custom `UIViewController` subclass for displaying web content using WebKit, handling script messages, navigation events, and logging errors related to Web3 requests.\n\n**Functionality:**\n\n* Manages a WKWebView instance with a transparent background and configures it for message handling.\n* Handles incoming messages by dequeuing them from a queue and posting them to another service.\n* Posts notifications when Magic event responses are received.\n* Handles RPC (Remote Procedure Call) responses based on their format.\n* Logs or prints outgoing messages depending on the log level.\n* Configures WKWebView to handle navigation events, disable zooming, and open external links in an external browser."}
{"code": "        let cgRect = CGRect(x: 0, y: 0, width: UIScreen.main.bounds.width, height: UIScreen.main.bounds.height)\n        let webView: WKWebView = {\n\n            let webCfg:WKWebViewConfiguration = WKWebViewConfiguration()\n            let userController:WKUserContentController = WKUserContentController()\n\n            // Add a script message handler for receiving messages over `fortmatic` messageHandler. The controller needs to conform\n            // with WKScriptMessageHandler protocol\n            userController.add(self, name: messageName)\n            webCfg.userContentController = userController;\n\n            let webView = WKWebView(frame: cgRect, configuration: webCfg)\n\n            // Transparent background\n            webView.backgroundColor = UIColor.clear\n            webView.scrollView.backgroundColor = UIColor.clear\n            webView.isOpaque = false\n\n            webView.uiDelegate = self\n\n            if #available(macOS 13.3, iOS 16.4, tvOS 16.4, *) {\n                webView.isInspectable = true", "explanation": "Here is a concise summary:\n\n**Purpose:** Create a WKWebView instance with a transparent background and configure it for message handling.\n\n**Functionality:**\n\n* Sets up a WKWebView with a frame matching the screen dimensions\n* Configures the web view's user content controller to receive messages through `fortmatic`\n* Sets a delegate ( likely self) for UI-related events\n* Makes the web view non-opaque and transparent", "metadata": {"repo": "magiclabs/magic-ios", "file": "Sources/MagicSDK/Core/Relayer/WebViewController.swift", "chunk_number": 8, "total_chunks": 13}, "repository_explanation": "The `magiclabs/magic-ios` repository is a public codebase for the Magic iOS app. \n\nKey points:\n\n* Purpose: Official implementation of the Magic payment processing library for iOS\n* Content:\n\t+ Source code for the Magic iOS app and SDK\n\t+ Documentation and guides for developers", "file_summary": "Here is a concise summary of the file 'Sources/MagicSDK/Core/Relayer/WebViewController.swift':\n\n**Purpose:** A custom `UIViewController` subclass for displaying web content using WebKit, handling script messages, navigation events, and logging errors related to Web3 requests.\n\n**Functionality:**\n\n* Manages a WKWebView instance with a transparent background and configures it for message handling.\n* Handles incoming messages by dequeuing them from a queue and posting them to another service.\n* Posts notifications when Magic event responses are received.\n* Handles RPC (Remote Procedure Call) responses based on their format.\n* Logs or prints outgoing messages depending on the log level.\n* Configures WKWebView to handle navigation events, disable zooming, and open external links in an external browser."}
{"code": "            }\n\n            // conforming WKNavigationDelegate\n            webView.navigationDelegate = self\n\n            return webView\n        }()\n        self.webView = webView\n        view = webView\n    }\n\n    override func viewWillAppear(_ animated: Bool) {\n        super.viewWillAppear(animated)\n        let myURL = URL(string: urlBuilder.url)\n        let myRequest = URLRequest(url: myURL!)\n        webView.load(myRequest)\n    }\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        webView.scrollView.delegate = self // disable zoom\n    }\n\n    /// Check did finished navigating, conforming WKNavigationDelegate\n    func webView(_ webView: WKWebView, didFinish navigation: WKNavigation!) {\n        webViewFinishLoading = true\n        do {\n            try self.dequeue()\n        } catch {}\n    }\n\n    /**\n     * The WKWebView will call this method when a web application calls window.open() in JavaScript.\n     */", "explanation": "Here is a concise summary:\n\n**Purpose:** Initialize and configure a WKWebView, load a URL, and handle navigation events.\n\n**Functionality:**\n\n* Creates and sets up a WKWebView instance\n* Loads a URL into the web view\n* Handles events when the web view finishes loading or navigates to a new page\n* Disables zooming in the web view's scroll view", "metadata": {"repo": "magiclabs/magic-ios", "file": "Sources/MagicSDK/Core/Relayer/WebViewController.swift", "chunk_number": 9, "total_chunks": 13}, "repository_explanation": "The `magiclabs/magic-ios` repository is a public codebase for the Magic iOS app. \n\nKey points:\n\n* Purpose: Official implementation of the Magic payment processing library for iOS\n* Content:\n\t+ Source code for the Magic iOS app and SDK\n\t+ Documentation and guides for developers", "file_summary": "Here is a concise summary of the file 'Sources/MagicSDK/Core/Relayer/WebViewController.swift':\n\n**Purpose:** A custom `UIViewController` subclass for displaying web content using WebKit, handling script messages, navigation events, and logging errors related to Web3 requests.\n\n**Functionality:**\n\n* Manages a WKWebView instance with a transparent background and configures it for message handling.\n* Handles incoming messages by dequeuing them from a queue and posting them to another service.\n* Posts notifications when Magic event responses are received.\n* Handles RPC (Remote Procedure Call) responses based on their format.\n* Logs or prints outgoing messages depending on the log level.\n* Configures WKWebView to handle navigation events, disable zooming, and open external links in an external browser."}
{"code": "    func webView(_ webView: WKWebView, createWebViewWith configuration: WKWebViewConfiguration, for navigationAction: WKNavigationAction, windowFeatures: WKWindowFeatures) -> WKWebView? {\n        // Make sure the URL is set.\n        guard let url = navigationAction.request.url,\n              let urlComponents = URLComponents(url: url, resolvingAgainstBaseURL: true),\n              let openInDeviceBrowser = urlComponents.queryItems?.first(where: { $0.name == \"open_in_device_browser\" })?.value?.lowercased()\n        else {\n            return nil\n        }\n\n        if UIApplication.shared.canOpenURL(url) && openInDeviceBrowser == \"true\" {\n            // Open the link in the external browser.\n            UIApplication.shared.open(url, options: [:], completionHandler: nil)\n        }\n\n        return nil\n    }\n\n    // handle external link clicked events\n    func webView(_ webView: WKWebView, decidePolicyFor navigationAction: WKNavigationAction, decisionHandler: @escaping (WKNavigationActionPolicy) -> Void) {", "explanation": "Here is a concise summary:\n\n**Purpose:** Handle external links clicked within a WKWebView.\n\n**Functionality:** \n\n1. Checks if URL has \"open_in_device_browser=true\" query parameter.\n2. If true, opens link in external browser (e.g. Safari) instead of displaying in WKWebView.\n3. Returns nil to prevent loading in WKWebView.", "metadata": {"repo": "magiclabs/magic-ios", "file": "Sources/MagicSDK/Core/Relayer/WebViewController.swift", "chunk_number": 10, "total_chunks": 13}, "repository_explanation": "The `magiclabs/magic-ios` repository is a public codebase for the Magic iOS app. \n\nKey points:\n\n* Purpose: Official implementation of the Magic payment processing library for iOS\n* Content:\n\t+ Source code for the Magic iOS app and SDK\n\t+ Documentation and guides for developers", "file_summary": "Here is a concise summary of the file 'Sources/MagicSDK/Core/Relayer/WebViewController.swift':\n\n**Purpose:** A custom `UIViewController` subclass for displaying web content using WebKit, handling script messages, navigation events, and logging errors related to Web3 requests.\n\n**Functionality:**\n\n* Manages a WKWebView instance with a transparent background and configures it for message handling.\n* Handles incoming messages by dequeuing them from a queue and posting them to another service.\n* Posts notifications when Magic event responses are received.\n* Handles RPC (Remote Procedure Call) responses based on their format.\n* Logs or prints outgoing messages depending on the log level.\n* Configures WKWebView to handle navigation events, disable zooming, and open external links in an external browser."}
{"code": "            // Check for links.\n            if navigationAction.navigationType == .linkActivated {\n                // Make sure the URL is set.\n                guard let url = navigationAction.request.url else {\n                    decisionHandler(.allow)\n                    return\n                }\n\n                // Check for the scheme component.\n                let components = URLComponents(url: url, resolvingAgainstBaseURL: false)\n                if components?.scheme == \"http\" || components?.scheme == \"https\" {\n                    // Open the link in the external browser.\n                    UIApplication.shared.open(url)\n                    // Cancel the decisionHandler because we managed the navigationAction.\n                    decisionHandler(.cancel)\n                } else {\n                    decisionHandler(.allow)\n                }\n            } else {\n                decisionHandler(.allow)\n            }\n        }\n\n\n\n    // MARK: - View\n\n    /// Disable zooming for webview", "explanation": "Here is a concise summary:\n\n**Purpose:** Handle navigation actions, specifically link activations.\n\n**Functionality:** \n\n* If a link is activated:\n\t+ Check if URL scheme is \"http\" or \"https\"\n\t+ If true, open link in external browser\n\t+ Cancel navigation action\n* Otherwise, allow navigation action\n\n**Additional functionality:**\n\n* Disable zooming for webview.", "metadata": {"repo": "magiclabs/magic-ios", "file": "Sources/MagicSDK/Core/Relayer/WebViewController.swift", "chunk_number": 11, "total_chunks": 13}, "repository_explanation": "The `magiclabs/magic-ios` repository is a public codebase for the Magic iOS app. \n\nKey points:\n\n* Purpose: Official implementation of the Magic payment processing library for iOS\n* Content:\n\t+ Source code for the Magic iOS app and SDK\n\t+ Documentation and guides for developers", "file_summary": "Here is a concise summary of the file 'Sources/MagicSDK/Core/Relayer/WebViewController.swift':\n\n**Purpose:** A custom `UIViewController` subclass for displaying web content using WebKit, handling script messages, navigation events, and logging errors related to Web3 requests.\n\n**Functionality:**\n\n* Manages a WKWebView instance with a transparent background and configures it for message handling.\n* Handles incoming messages by dequeuing them from a queue and posting them to another service.\n* Posts notifications when Magic event responses are received.\n* Handles RPC (Remote Procedure Call) responses based on their format.\n* Logs or prints outgoing messages depending on the log level.\n* Configures WKWebView to handle navigation events, disable zooming, and open external links in an external browser."}
{"code": "    func viewForZooming(in: UIScrollView) -> UIView? {\n        return nil;\n    }\n\n    private func sendSubviewToBack() throws -> Void {\n\n        let keyWindow = try getKeyWindow()\n        keyWindow.sendSubviewToBack(self.view)\n    }\n\n    private func bringWebViewToFront() throws -> Void {\n\n        let keyWindow = try getKeyWindow()\n        keyWindow.bringSubviewToFront(self.view)\n    }\n\n    private func getKeyWindow() throws -> UIWindow {\n\n        guard let keyWindow = UIApplication.shared.windows.filter({$0.isKeyWindow}).first else {\n            throw AuthRelayerError.topMostWindowNotFound\n        }\n\n        return keyWindow\n    }\n\n    private func attachWebView() throws -> Void {\n\n        let keyWindow = try getKeyWindow()\n\n        keyWindow.addSubview(self.view)\n        keyWindow.sendSubviewToBack(self.view)\n\n        // find topmost view controller from the hierarchy and move webview to it\n        if var topController = keyWindow.rootViewController {", "explanation": "Here is a concise summary of the purpose and functionality of this code block:\n\n**Purpose:** Manage the positioning of a subview (webview) in the app's window hierarchy.\n\n**Functionality:**\n\n* `getKeyWindow`: Retrieves the topmost window.\n* `attachWebView`: Adds the webview to the key window, sends it to the back, and attaches it to the topmost view controller.\n* `bringWebViewToFront` and `sendSubviewToBack`: Move the webview to the front or send it to the back of the key window.", "metadata": {"repo": "magiclabs/magic-ios", "file": "Sources/MagicSDK/Core/Relayer/WebViewController.swift", "chunk_number": 12, "total_chunks": 13}, "repository_explanation": "The `magiclabs/magic-ios` repository is a public codebase for the Magic iOS app. \n\nKey points:\n\n* Purpose: Official implementation of the Magic payment processing library for iOS\n* Content:\n\t+ Source code for the Magic iOS app and SDK\n\t+ Documentation and guides for developers", "file_summary": "Here is a concise summary of the file 'Sources/MagicSDK/Core/Relayer/WebViewController.swift':\n\n**Purpose:** A custom `UIViewController` subclass for displaying web content using WebKit, handling script messages, navigation events, and logging errors related to Web3 requests.\n\n**Functionality:**\n\n* Manages a WKWebView instance with a transparent background and configures it for message handling.\n* Handles incoming messages by dequeuing them from a queue and posting them to another service.\n* Posts notifications when Magic event responses are received.\n* Handles RPC (Remote Procedure Call) responses based on their format.\n* Logs or prints outgoing messages depending on the log level.\n* Configures WKWebView to handle navigation events, disable zooming, and open external links in an external browser."}
{"code": "            while let presentedViewController = topController.presentedViewController {\n                topController = presentedViewController\n            }\n\n            self.didMove(toParent: topController)\n\n        } else {\n            throw AuthRelayerError.webviewAttachedFailed\n        }\n    }\n}\n\n\n", "explanation": "This block:\n\n* Traverses the presentation hierarchy of a controller until it finds a top-level controller.\n* Updates its own parent relationship with the top-level controller using `didMove(toParent:)`.\n* If no top-level controller is found, throws an error (`AuthRelayerError.webviewAttachedFailed`).", "metadata": {"repo": "magiclabs/magic-ios", "file": "Sources/MagicSDK/Core/Relayer/WebViewController.swift", "chunk_number": 13, "total_chunks": 13}, "repository_explanation": "The `magiclabs/magic-ios` repository is a public codebase for the Magic iOS app. \n\nKey points:\n\n* Purpose: Official implementation of the Magic payment processing library for iOS\n* Content:\n\t+ Source code for the Magic iOS app and SDK\n\t+ Documentation and guides for developers", "file_summary": "Here is a concise summary of the file 'Sources/MagicSDK/Core/Relayer/WebViewController.swift':\n\n**Purpose:** A custom `UIViewController` subclass for displaying web content using WebKit, handling script messages, navigation events, and logging errors related to Web3 requests.\n\n**Functionality:**\n\n* Manages a WKWebView instance with a transparent background and configures it for message handling.\n* Handles incoming messages by dequeuing them from a queue and posting them to another service.\n* Posts notifications when Magic event responses are received.\n* Handles RPC (Remote Procedure Call) responses based on their format.\n* Logs or prints outgoing messages depending on the log level.\n* Configures WKWebView to handle navigation events, disable zooming, and open external links in an external browser."}
{"code": "//\n//  Configuration.swift\n//  MagicSDK\n//\n//  Created by Jerry Liu on 5/14/20.\n//  Copyright \u00a9 2020 Magic Labs Inc. All rights reserved.\n//\n\nimport Foundation\n\n\npublic struct LoginWithSmsConfiguration: BaseConfiguration {\n    \n    ///\n    public var phoneNumber: String\n    var showUI = true\n    \n    public init(phoneNumber: String) {\n        self.phoneNumber = phoneNumber\n    }\n}\n\npublic struct LoginWithEmailOTPConfiguration: BaseConfiguration {\n    \n    public var email: String\n    \n    public init(email: String) {\n        self.email = email\n    }\n}\n", "explanation": "Here is a summary of the code:\n\n**Two custom configuration structs for login workflows:**\n\n1. **LoginWithSmsConfiguration**: Configures SMS-based login, requiring a phone number.\n2. **LoginWithEmailOTPConfiguration**: Configures email-based login with OTP, requiring an email address.\n\nBoth structs inherit from `BaseConfiguration`.", "metadata": {"repo": "magiclabs/magic-ios", "file": "Sources/MagicSDK/Modules/Auth/AuthConfiguration.swift", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "The `magiclabs/magic-ios` repository is a public codebase for the Magic iOS app. \n\nKey points:\n\n* Purpose: Official implementation of the Magic payment processing library for iOS\n* Content:\n\t+ Source code for the Magic iOS app and SDK\n\t+ Documentation and guides for developers", "file_summary": "Here is a concise summary of the file:\n\n**AuthConfiguration.swift**\n\nContains two custom configuration structs for login workflows: `LoginWithSmsConfiguration` (SMS-based) and `LoginWithEmailOTPConfiguration` (email-based OTP), both inheriting from `BaseConfiguration`."}
{"code": "//\n//  AuthMessage.swift\n//  MagicSDK\n//\n//  Created by Jerry Liu on 5/17/20.\n//  Copyright \u00a9 2020 Magic Labs Inc. All rights reserved.\n//\n\nimport Foundation\n\ninternal enum AuthMethod: String, CaseIterable {\n\n    // Auth\n    case magic_auth_login_with_sms\n    case magic_auth_login_with_email_otp\n}\n", "explanation": "Here is a summary of the purpose and functionality of this block:\n\n**AuthMethod Enum**\n\nDefines an internal enum for authentication methods using SMS or email OTP (One-Time Password) with Magic Labs Inc.", "metadata": {"repo": "magiclabs/magic-ios", "file": "Sources/MagicSDK/Modules/Auth/AuthMethod.swift", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "The `magiclabs/magic-ios` repository is a public codebase for the Magic iOS app. \n\nKey points:\n\n* Purpose: Official implementation of the Magic payment processing library for iOS\n* Content:\n\t+ Source code for the Magic iOS app and SDK\n\t+ Documentation and guides for developers", "file_summary": "Here's a concise and to-the-point holistic summary of the file 'Sources/MagicSDK/Modules/Auth/AuthMethod.swift':\n\n**AuthMethod Enum**\nInternal enumeration defining authentication methods, specifically leveraging SMS and email-based One-Time Password (OTP) for verification with Magic Labs Inc."}
{"code": "//\n//  AuthModule.swift\n//  Magic\n//\n//  Created by Jerry Liu on 3/3/20.\n//  Copyright \u00a9 2020 Magic Labs Inc. All rights reserved.\n//\n\nimport Foundation\nimport MagicSDK_Web3\nimport PromiseKit\n\npublic class AuthModule: BaseModule {\n    // MARK: - Login with SMS\n    public func loginWithSMS (_ configuration: LoginWithSmsConfiguration, response: @escaping Web3ResponseCompletion<String> ) {\n        let request = RPCRequest<[LoginWithSmsConfiguration]>(method: AuthMethod.magic_auth_login_with_sms.rawValue, params: [configuration])\n        self.provider.send(request: request, response: response)\n    }\n    \n    public func loginWithSMS (_ configuration: LoginWithSmsConfiguration) -> Promise<String> {\n        return Promise { resolver in\n            loginWithSMS(configuration, response: promiseResolver(resolver))\n        }\n    }\n    \n    // MARK: - Login with EmailOTP\n    public func loginWithEmailOTP (_ configuration: LoginWithEmailOTPConfiguration, response: @escaping Web3ResponseCompletion<String> ) {", "explanation": "**AuthModule Summary**\n\nThe AuthModule class is a module for authenticating users in a Magic-powered application. It provides two primary functions:\n\n1. `loginWithSMS`: Logs a user in using an SMS-based authentication method.\n2. `loginWithEmailOTP`: Logs a user in using an email-based one-time password (OTP) authentication method.\n\nBoth functions can be called with optional callbacks to handle the response or as promises that resolve with the authentication result.", "metadata": {"repo": "magiclabs/magic-ios", "file": "Sources/MagicSDK/Modules/Auth/AuthModule.swift", "chunk_number": 1, "total_chunks": 2}, "repository_explanation": "The `magiclabs/magic-ios` repository is a public codebase for the Magic iOS app. \n\nKey points:\n\n* Purpose: Official implementation of the Magic payment processing library for iOS\n* Content:\n\t+ Source code for the Magic iOS app and SDK\n\t+ Documentation and guides for developers", "file_summary": "Here is a concise and holistic summary of the `AuthModule` class in the file 'Sources/MagicSDK/Modules/Auth/AuthModule.swift':\n\n**Purpose:** Authenticates users via SMS or email-based one-time password (OTP) methods.\n\n**Functionality:** Provides two login functions: `loginWithSMS` and `loginWithEmailOTP`, which send asynchronous RPC requests with callbacks or promise resolutions."}
{"code": "        let request = RPCRequest<[LoginWithEmailOTPConfiguration]>(method: AuthMethod.magic_auth_login_with_email_otp.rawValue, params: [configuration])\n        self.provider.send(request: request, response: response)\n    }\n    \n    public func loginWithEmailOTP (_ configuration: LoginWithEmailOTPConfiguration) -> Promise<String> {\n        return Promise { resolver in\n            loginWithEmailOTP(configuration, response: promiseResolver(resolver))\n        }\n    }\n    \n    public enum LoginEmailOTPLinkEvent: String {\n        case emailNotDeliverable = \"email-not-deliverable\"\n        case emailSent = \"email-sent\"\n        case retry = \"retry\"\n    }\n}\n", "explanation": "Here is a concise summary:\n\n**Purpose:** Send login request with email and OTP configuration via RPCRequest.\n\n**Functionality:** Makes an asynchronous call to send login credentials and resolves with a Promise that returns a string.", "metadata": {"repo": "magiclabs/magic-ios", "file": "Sources/MagicSDK/Modules/Auth/AuthModule.swift", "chunk_number": 2, "total_chunks": 2}, "repository_explanation": "The `magiclabs/magic-ios` repository is a public codebase for the Magic iOS app. \n\nKey points:\n\n* Purpose: Official implementation of the Magic payment processing library for iOS\n* Content:\n\t+ Source code for the Magic iOS app and SDK\n\t+ Documentation and guides for developers", "file_summary": "Here is a concise and holistic summary of the `AuthModule` class in the file 'Sources/MagicSDK/Modules/Auth/AuthModule.swift':\n\n**Purpose:** Authenticates users via SMS or email-based one-time password (OTP) methods.\n\n**Functionality:** Provides two login functions: `loginWithSMS` and `loginWithEmailOTP`, which send asynchronous RPC requests with callbacks or promise resolutions."}
{"code": "//\n//  BaseConfiguration.swift\n//  Magic Labs\n//\n//  Created by Jerry Liu on 5/15/20.\n//  Copyright \u00a9 2020 Magic Labs Inc. All rights reserved.\n//\n\nimport Foundation\n\npublic protocol BaseConfiguration: Codable {}\n", "explanation": "**Summary**\n\nThe `BaseConfiguration` block is a Swift protocol that requires any conforming type to be convertible into a codable data format (e.g., JSON). It provides a basic structure for defining configuration settings in an app, enabling serialization and deserialization.", "metadata": {"repo": "magiclabs/magic-ios", "file": "Sources/MagicSDK/Modules/BaseConfiguration.swift", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "The `magiclabs/magic-ios` repository is a public codebase for the Magic iOS app. \n\nKey points:\n\n* Purpose: Official implementation of the Magic payment processing library for iOS\n* Content:\n\t+ Source code for the Magic iOS app and SDK\n\t+ Documentation and guides for developers", "file_summary": "Here's a concise summary:\n\n**Sources/MagicSDK/Modules/BaseConfiguration.swift**\n\nDefines `BaseConfiguration`, a Swift protocol that enables serializing and deserializing configuration data as codable formats (e.g., JSON)."}
{"code": "//\n//  BaseModule.swift\n//  Magic Labs\n//\n//  Created by Jerry Liu on 3/3/20.\n//  Copyright \u00a9 2020 Magic Labs Inc. All rights reserved.\n//\n\nimport Foundation\nimport MagicSDK_Web3\nimport PromiseKit\n\nopen class BaseModule {\n    \n    public let provider: RpcProvider\n    public let magicEventCenter = EventCenter()\n    \n    public init(rpcProvider: RpcProvider) {\n        self.provider = rpcProvider\n    }\n}\n\npublic func promiseResolver<T>(_ resolver: Resolver<T>) -> (_ result: Web3Response<T>) -> Void {\n    return { result  in\n        switch result.status {\n        case let .success(value):\n            resolver.fulfill(value)\n        case let .failure(error):\n            resolver.reject(error)\n        }\n    }\n}\n", "explanation": "Here is a concise summary:\n\n**Purpose:** Provides a base class for modules in the Magic Labs project.\n\n**Functionality:**\n\n* Initializes with an RPC provider\n* Creates an EventCenter instance (magicEventCenter)\n* Provides a promise resolver function to handle asynchronous responses.", "metadata": {"repo": "magiclabs/magic-ios", "file": "Sources/MagicSDK/Modules/BaseModule.swift", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "The `magiclabs/magic-ios` repository is a public codebase for the Magic iOS app. \n\nKey points:\n\n* Purpose: Official implementation of the Magic payment processing library for iOS\n* Content:\n\t+ Source code for the Magic iOS app and SDK\n\t+ Documentation and guides for developers", "file_summary": "Here is a concise summary of the file 'Sources/MagicSDK/Modules/BaseModule.swift':\n\n**Provides a foundational module class for Magic Labs, initializing with an RPC provider and offering event management through EventCenter and promise resolution functionality.**"}
{"code": "//\n//  PromiEvent.swift\n//  MagicSDK\n//\n//  Created by Jerry Liu on 7/10/20.\n//\n\nimport Foundation\nimport PromiseKit\n\npublic class EventCenter {\n    \n    enum Error: Swift.Error{\n        case eventCallbackMissing\n    }\n    private var eventLog = false\n    \n    private typealias EventCompletion = () -> Void\n    private var eventHandlerDict: Dictionary<String, EventCompletion> = [:]\n\n    func addOnceObserver (eventName: String, eventLog: Bool, completion: @escaping () -> Void) -> Void {\n        NotificationCenter.default.addObserver(self, selector: #selector(self.onDidReceiveEventOnce(_:)), name: Notification.Name.init(eventName), object: nil)\n        self.eventLog = eventLog\n        eventHandlerDict[eventName] = completion\n    }\n\n    /// Recieve events\n    @objc func onDidReceiveEventOnce(_ notification: Notification) {\n\n        if let eventResult = (notification.userInfo?[\"event\"]) as? MagicEventResult<[AnyValue]>, let event = eventResult.event, let handler = eventHandlerDict[event] {\n            ", "explanation": "Here is a concise summary:\n\n**PromiEvent.swift**\n\nA class that manages events using PromiseKit. It allows adding observers for specific events with a one-time callback completion. The `addOnceObserver` function takes an event name, logs status, and executes a block of code upon receiving the event.", "metadata": {"repo": "magiclabs/magic-ios", "file": "Sources/MagicSDK/Modules/Event/EventCenter.swift", "chunk_number": 1, "total_chunks": 2}, "repository_explanation": "The `magiclabs/magic-ios` repository is a public codebase for the Magic iOS app. \n\nKey points:\n\n* Purpose: Official implementation of the Magic payment processing library for iOS\n* Content:\n\t+ Source code for the Magic iOS app and SDK\n\t+ Documentation and guides for developers", "file_summary": "Here is a concise summary:\n\n**EventCenter.swift**\n\nA central hub for managing events using PromiseKit. It allows adding observers for specific events with a one-time callback completion, printing status and executing blocks upon receiving the event. **Purpose:** Unified event handling and callback execution."}
{"code": "            if (eventLog) {\n                print(\"MagicSDK Event: \\(eventResult)\")\n            }\n            \n            NotificationCenter.default.removeObserver(self, name: Notification.Name(event), object: nil)\n            handler()\n        } else {\n//            handleRollbarError(Error.eventCallbackMissing)\n        }\n    }\n    \n    init (){}\n}\n", "explanation": "**Purpose:** Handle event callback completion.\n\n**Functionality:** Unregister observer, print event result if available, and execute handler function.", "metadata": {"repo": "magiclabs/magic-ios", "file": "Sources/MagicSDK/Modules/Event/EventCenter.swift", "chunk_number": 2, "total_chunks": 2}, "repository_explanation": "The `magiclabs/magic-ios` repository is a public codebase for the Magic iOS app. \n\nKey points:\n\n* Purpose: Official implementation of the Magic payment processing library for iOS\n* Content:\n\t+ Source code for the Magic iOS app and SDK\n\t+ Documentation and guides for developers", "file_summary": "Here is a concise summary:\n\n**EventCenter.swift**\n\nA central hub for managing events using PromiseKit. It allows adding observers for specific events with a one-time callback completion, printing status and executing blocks upon receiving the event. **Purpose:** Unified event handling and callback execution."}
{"code": "//\n//  PromiEvent.swift\n//  MagicSDK\n//\n//  Created by Jerry Liu on 7/10/20.\n//\n\nimport Foundation\nimport PromiseKit\n\npublic class MagicEventPromise<T> {\n    \n    private var donePromise: Promise<T>\n    private var eventCenter: EventCenter\n    private var eventLog = false\n    \n    typealias EventCompletion = () -> Void\n\n    public func once(eventName: String, completion: @escaping () -> Void) -> MagicEventPromise {\n        eventCenter.addOnceObserver(eventName: eventName, eventLog: eventLog, completion: completion)\n        return self\n    }\n    \n    public func done(on: DispatchQueue? = conf.Q.return, flags: DispatchWorkItemFlags? = nil, _ body: @escaping(T) throws -> Void) -> Promise<Void> {\n        return self.donePromise.done(on: on, flags: flags, body)\n    }\n    \n    init (eventCenter: EventCenter, eventLog: Bool, _ resolver: @escaping (_ resolver: Resolver<T>) -> Void) {\n        self.donePromise = Promise<T>(resolver: resolver)\n        self.eventCenter = eventCenter\n        self.eventLog = eventLog\n    }\n}\n", "explanation": "Here is a concise summary:\n\nThis block (`MagicEventPromise`) provides a way to handle events in a program, allowing for a single execution of an action (e.g., completion callback) when a specific event occurs, with optional logging and asynchronous promise resolution.", "metadata": {"repo": "magiclabs/magic-ios", "file": "Sources/MagicSDK/Modules/Event/EventPromise.swift", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "The `magiclabs/magic-ios` repository is a public codebase for the Magic iOS app. \n\nKey points:\n\n* Purpose: Official implementation of the Magic payment processing library for iOS\n* Content:\n\t+ Source code for the Magic iOS app and SDK\n\t+ Documentation and guides for developers", "file_summary": "Here's a concise and holistic summary:\n\nThe `MagicEventPromise` block enables handling specific events in a program by executing a single action (e.g., completion callback) asynchronously, with optional logging and promise resolution."}
{"code": "//\n//  PromiEvents.swift\n//  MagicSDK\n//\n//  Created by Jerry Liu on 7/10/20.\n//\n\nimport Foundation\n\n\ninternal struct MagicEventResponse<ResultType: Codable>: Codable {\n    public let id: Int?\n    public let jsonrpc: String\n    public let result: MagicEventResult<ResultType?>\n    public let error: Error?\n    \n    // Error struct remains the same\n    public struct Error: Swift.Error, Codable {\n        public let code: Int\n        public let message: String\n        public var localizedDescription: String {\n            return \"Magic Event Error (\\(code)) \\(message)\"\n        }\n    }\n}\n\ninternal struct MagicEventResult<Params: Codable>: Codable {\n    let event: String?\n    let params: Params?\n    let product_announcement: String?\n}\n", "explanation": "Here is a concise summary:\n\nThis block defines two structs, `MagicEventResponse` and `MagicEventResult`, which represent responses from Magic events in JSON-RPC format. They have properties for ID, result, error, and event details.", "metadata": {"repo": "magiclabs/magic-ios", "file": "Sources/MagicSDK/Modules/Event/EventResponse.swift", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "The `magiclabs/magic-ios` repository is a public codebase for the Magic iOS app. \n\nKey points:\n\n* Purpose: Official implementation of the Magic payment processing library for iOS\n* Content:\n\t+ Source code for the Magic iOS app and SDK\n\t+ Documentation and guides for developers", "file_summary": "Here's a concise and to the point holistic summary of the file 'Sources/MagicSDK/Modules/Event/EventResponse.swift':\n\nThis file defines structs `MagicEventResponse` and `MagicEventResult`, representing JSON-RPC formatted responses from Magic events with properties for ID, result/error, and event details."}
{"code": "//\n//  UserResponse.swift\n//  Magic\n//\n//  Created by Romin Halltari on 11/22/2023.\n//  Copyright \u00a9 2020 Magic Labs Inc. All rights reserved.\n//\n\n\nimport Foundation\n\npublic class RecoveryFactor: Codable {\n    public var value: String\n    public var type: RecoveryMethodType\n\n    public init(value: String, type: RecoveryMethodType) {\n        self.value = value\n        self.type = type\n    }\n\n    public var description: String {\n        return \"value: \\(value)\\ntype: \\(type.rawValue)\\n\"\n    }\n}\n", "explanation": "**Summary:**\n\nThis block defines a Swift class `RecoveryFactor` with two properties: `value` (a string) and `type` (an enum value of type `RecoveryMethodType`). It conforms to the `Codable` protocol, allowing for easy serialization/deserialization.", "metadata": {"repo": "magiclabs/magic-ios", "file": "Sources/MagicSDK/Modules/User/RecoveryFactor.swift", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "The `magiclabs/magic-ios` repository is a public codebase for the Magic iOS app. \n\nKey points:\n\n* Purpose: Official implementation of the Magic payment processing library for iOS\n* Content:\n\t+ Source code for the Magic iOS app and SDK\n\t+ Documentation and guides for developers", "file_summary": "Here is a concise holistic summary:\n\n**Summary:** The `RecoveryFactor` class in Swift defines a recoverable data entity with properties `value` (string) and `type` (enum), serializable through the `Codable` protocol."}
{"code": "//\n//  RecoveryMethodType.swift\n//  Magic\n//\n//  Created by Romin Halltari on 11/22/2023.\n//  Copyright \u00a9 2020 Magic Labs Inc. All rights reserved.\n//\n\nimport Foundation\n\npublic enum RecoveryMethodType: String, Codable {\n    case phoneNumber = \"PHONE_NUMBER\"\n\n    public var description: String {\n        return rawValue.lowercased()\n    }\n}\n", "explanation": "**Purpose:** Define an enumeration of recovery method types.\n\n**Functionality:** Enumerates a list of recovery methods (currently just \"phoneNumber\") with a corresponding string value, allowing for easy identification and serialization.", "metadata": {"repo": "magiclabs/magic-ios", "file": "Sources/MagicSDK/Modules/User/RecoveryMethodType.swift", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "The `magiclabs/magic-ios` repository is a public codebase for the Magic iOS app. \n\nKey points:\n\n* Purpose: Official implementation of the Magic payment processing library for iOS\n* Content:\n\t+ Source code for the Magic iOS app and SDK\n\t+ Documentation and guides for developers", "file_summary": "Here is a concise and to-the-point summary:\n\n\"RecoveryMethodType.swift defines an enumeration of recovery method types, including 'phoneNumber', with string values for easy identification and serialization.\""}
{"code": "//\n//  UserConfiguration.swift\n//  Magic\n//\n//  Created by Jerry Liu on 3/4/20.\n//  Copyright \u00a9 2020 Magic Labs Inc. All rights reserved.\n//\n\nimport Foundation\nimport MagicSDK_Web3\n\n/// Get Id Token configuration\npublic class GetIdTokenConfiguration: BaseConfiguration {\n    \n    var lifespan: Int\n    \n    public init(lifespan: Int = 900) {\n        self.lifespan = lifespan\n    }\n}\n\n\npublic class GenerateIdTokenConfiguration: BaseConfiguration {\n    var attachment: String\n    var lifespan: Int\n    \n    public init(lifespan: Int = 900, attachment: String = \"none\") {\n        self.lifespan = lifespan\n        self.attachment = attachment\n    }\n}\n\npublic class UpdateEmailConfiguration: BaseConfiguration {\n    var email: String\n    var showUI: Bool\n    \n    public init(email: String, showUI: Bool = true){\n        self.email = email\n        self.showUI = showUI\n    }\n}\n\npublic class RecoverAccountConfiguration: BaseConfiguration {\n    var email: String\n    \n    public init(email: String){\n        self.email = email\n    }\n}\n", "explanation": "**Purpose:** Define configuration classes for user-related operations in a Magic SDK implementation.\n\n**Functionality:** Four configuration classes (`GetIdTokenConfiguration`, `GenerateIdTokenConfiguration`, `UpdateEmailConfiguration`, and `RecoverAccountConfiguration`) are provided, each with customizable properties (e.g., lifespan, attachment, email, showUI) that can be used to initialize specific user operations.", "metadata": {"repo": "magiclabs/magic-ios", "file": "Sources/MagicSDK/Modules/User/UserConfiguration.swift", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "The `magiclabs/magic-ios` repository is a public codebase for the Magic iOS app. \n\nKey points:\n\n* Purpose: Official implementation of the Magic payment processing library for iOS\n* Content:\n\t+ Source code for the Magic iOS app and SDK\n\t+ Documentation and guides for developers", "file_summary": "Here is a concise summary of the file 'Sources/MagicSDK/Modules/User/UserConfiguration.swift':\n\n**Summary:** Defines configuration classes for user-related Magic SDK operations, with customizable properties for each operation (e.g., GetIdToken, GenerateIdToken, UpdateEmail, RecoverAccount)."}
{"code": "//\n//  UserMessage.swift\n//  MagicSDK\n//\n//  Created by Jerry Liu on 5/17/20.\n//  Copyright \u00a9 2020 Magic Labs Inc. All rights reserved.\n//\n\nimport Foundation\n\ninternal enum UserMethod: String, CaseIterable {\n\n    // Auth\n    case magic_auth_get_id_token\n    case magic_auth_generate_id_token\n    case magic_get_info\n    case magic_auth_logout\n    case magic_auth_settings\n    case magic_auth_update_email\n    case magic_auth_is_logged_in\n    case magic_auth_update_phone_number\n    case magic_auth_recover_account\n}\n", "explanation": "This is a Swift enum called `UserMethod` that lists various authentication-related methods for user interaction, such as logging in, getting information, and updating account details.", "metadata": {"repo": "magiclabs/magic-ios", "file": "Sources/MagicSDK/Modules/User/UserMethod.swift", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "The `magiclabs/magic-ios` repository is a public codebase for the Magic iOS app. \n\nKey points:\n\n* Purpose: Official implementation of the Magic payment processing library for iOS\n* Content:\n\t+ Source code for the Magic iOS app and SDK\n\t+ Documentation and guides for developers", "file_summary": "Here's a concise summary:\n\nThe `UserMethod` enum defines authentication-related methods for user interactions, including login, info retrieval, and account updates."}
{"code": "//\n//  PhantomUser.swift\n//\n//  Created by Jerry Liu on 3/2/20.\n//  Copyright \u00a9 2020 Magic Labs Inc. All rights reserved.\n//\n\nimport Foundation\nimport MagicSDK_Web3\nimport PromiseKit\n\npublic class UserModule: BaseModule {\n    /**\n     GetIdToken\n     */\n    public func getIdToken(_ configuration: GetIdTokenConfiguration? = nil, response: @escaping Web3ResponseCompletion<String>) {\n        let request = RPCRequest<[GetIdTokenConfiguration?]>(method: UserMethod.magic_auth_get_id_token.rawValue, params: [configuration])\n\n        return self.provider.send(request: request, response: response)\n    }\n    \n    public func getIdToken(_ configuration: GetIdTokenConfiguration? = nil) -> Promise<String>  {\n        return Promise { resolver in\n            getIdToken(configuration, response: promiseResolver(resolver))\n        }\n    }\n    \n    /**\n            Generate Id Token\n     */\n    public func generateIdToken(_ configuration: GenerateIdTokenConfiguration? = nil, response: @escaping Web3ResponseCompletion<String>) {", "explanation": "Here is a concise summary of the purpose and functionality of this block:\n\n**Purpose:** Provides a UserModule class for managing user authentication.\n\n**Functionality:** The class offers two main functions:\n\n1. `getIdToken`: Retrieves an ID token based on optional configuration, with synchronous (blocking) and asynchronous (non-blocking) variants.\n2. `generateIdToken`: Generates an ID token based on optional configuration, with a blocking variant.", "metadata": {"repo": "magiclabs/magic-ios", "file": "Sources/MagicSDK/Modules/User/UserModule.swift", "chunk_number": 1, "total_chunks": 6}, "repository_explanation": "The `magiclabs/magic-ios` repository is a public codebase for the Magic iOS app. \n\nKey points:\n\n* Purpose: Official implementation of the Magic payment processing library for iOS\n* Content:\n\t+ Source code for the Magic iOS app and SDK\n\t+ Documentation and guides for developers", "file_summary": "Here is a concise summary of the file 'Sources/MagicSDK/Modules/User/UserModule.swift':\n\nThe UserModule class provides an interface for managing user authentication, including generating ID tokens, getting user info, checking login status, updating email addresses, logging out, displaying settings, and recovering accounts through RPC requests to a blockchain provider."}
{"code": "        let request = RPCRequest<[GenerateIdTokenConfiguration?]>(method: UserMethod.magic_auth_generate_id_token.rawValue, params: [configuration])\n        \n        return self.provider.send(request: request, response: response)\n    }\n    \n    public func generateIdToken(_ configuration: GenerateIdTokenConfiguration? = nil) -> Promise<String> {\n        return Promise { resolver in\n            generateIdToken(configuration, response: promiseResolver(resolver))\n        }\n    }\n    \n    \n    /**\n            Get Info\n     */\n    public func getInfo(response: @escaping Web3ResponseCompletion<UserInfo>) {\n        let request = BasicRPCRequest(method: UserMethod.magic_get_info.rawValue, params: [])\n        return self.provider.send(request: request, response: response)\n    }\n    \n    public func getInfo() -> Promise<UserInfo>  {\n        return Promise { resolver in\n            getInfo(response: promiseResolver(resolver))\n        }\n    }\n    \n    /**\n                IsLogged In\n     */", "explanation": "Here is a concise summary of the block's purpose and functionality:\n\n**Purpose:** \nThis code snippet provides methods for interacting with a Magic Auth user, including generating an ID token, getting user info, and checking if the user is logged in.\n\n**Functionality:**\n\n1. **generateIdToken**: Returns a promise resolving to a string representing the generated ID token.\n2. **getInfo**: Returns a promise resolving to a `UserInfo` object or takes a completion handler as an argument to handle the result.\n3. The methods make RPC requests to the Magic Auth provider, which handles the underlying authentication and authorization logic.\n\nThe code is written in Swift and uses a Promise library for asynchronous programming.", "metadata": {"repo": "magiclabs/magic-ios", "file": "Sources/MagicSDK/Modules/User/UserModule.swift", "chunk_number": 2, "total_chunks": 6}, "repository_explanation": "The `magiclabs/magic-ios` repository is a public codebase for the Magic iOS app. \n\nKey points:\n\n* Purpose: Official implementation of the Magic payment processing library for iOS\n* Content:\n\t+ Source code for the Magic iOS app and SDK\n\t+ Documentation and guides for developers", "file_summary": "Here is a concise summary of the file 'Sources/MagicSDK/Modules/User/UserModule.swift':\n\nThe UserModule class provides an interface for managing user authentication, including generating ID tokens, getting user info, checking login status, updating email addresses, logging out, displaying settings, and recovering accounts through RPC requests to a blockchain provider."}
{"code": "    public func isLoggedIn(response: @escaping Web3ResponseCompletion<Bool>) {\n        let request = BasicRPCRequest(method: UserMethod.magic_auth_is_logged_in.rawValue, params: [])\n        self.provider.send(request: request, response: response)\n    }\n    \n    public func isLoggedIn() -> Promise<Bool>  {\n        return Promise { resolver in\n            isLoggedIn(response: promiseResolver(resolver))\n        }\n    }\n    \n    /**\n     *       Update Email\n     */\n    public func updateEmail(_ configuration: UpdateEmailConfiguration, response: @escaping Web3ResponseCompletion<Bool>) {\n        let request = RPCRequest<[UpdateEmailConfiguration]>(method: UserMethod.magic_auth_update_email.rawValue, params: [configuration])\n        \n        return self.provider.send(request: request, response: response)\n    }\n    \n    public func updateEmail(_ configuration: UpdateEmailConfiguration) -> Promise<Bool> {\n        return Promise { resolver in", "explanation": "Here is a concise summary of the block:\n\n**Purpose:** Check if user is logged in or update email address on blockchain.\n\n**Functionality:**\n\n* `isLoggedIn`: Verifies user's login status with a single method call.\n\t+ **Sync**: Returns a boolean value indicating login status.\n\t+ **Async**: Takes a callback to provide response (isLoggedIn() -> Promise<Bool>)\n* `updateEmail`: Updates user's email address on blockchain.\n\t+ **Sync**: Takes an UpdateEmailConfiguration object and returns a boolean value indicating success.\n\t+ **Async**: Also takes a callback to provide response (updateEmail(configuration: ) -> Promise<Bool>)", "metadata": {"repo": "magiclabs/magic-ios", "file": "Sources/MagicSDK/Modules/User/UserModule.swift", "chunk_number": 3, "total_chunks": 6}, "repository_explanation": "The `magiclabs/magic-ios` repository is a public codebase for the Magic iOS app. \n\nKey points:\n\n* Purpose: Official implementation of the Magic payment processing library for iOS\n* Content:\n\t+ Source code for the Magic iOS app and SDK\n\t+ Documentation and guides for developers", "file_summary": "Here is a concise summary of the file 'Sources/MagicSDK/Modules/User/UserModule.swift':\n\nThe UserModule class provides an interface for managing user authentication, including generating ID tokens, getting user info, checking login status, updating email addresses, logging out, displaying settings, and recovering accounts through RPC requests to a blockchain provider."}
{"code": "            updateEmail(configuration, response: promiseResolver(resolver))\n        }\n    }\n    \n    public func updateEmail(_ configuration: UpdateEmailConfiguration, eventLog: Bool) -> MagicEventPromise<Bool> {\n        return MagicEventPromise (eventCenter: self.magicEventCenter, eventLog: eventLog){ resolver in\n            self.updateEmail(configuration, response: promiseResolver(resolver))\n        }\n    }\n    \n    /**\n            Logout\n     */\n    public func logout (response: @escaping Web3ResponseCompletion<Bool>) {\n        let request = BasicRPCRequest(method: UserMethod.magic_auth_logout.rawValue, params: [])\n        self.provider.send(request: request, response: response)\n    }\n    \n    public func logout() -> Promise<Bool>  {\n        return Promise { resolver in\n            logout(response: promiseResolver(resolver))\n        }\n    }\n    /**\n        showSettings\n     */\n    public func showSettings(response: @escaping Web3ResponseCompletion<UserInfo>) {", "explanation": "Here is a concise summary of the purpose and functionality of this block:\n\n**Purpose:** Provide methods for updating email, logging out, and showing settings.\n\n**Functionality:**\n\n* `updateEmail`: Updates user's email address.\n\t+ Two overloads: one with a configuration object and another with promise resolver.\n* `logout`: Logs user out.\n\t+ Two overloads: one with a completion handler and another that returns a promise.\n* `showSettings`: Displays user settings.\n\t+ One overload with a completion handler.", "metadata": {"repo": "magiclabs/magic-ios", "file": "Sources/MagicSDK/Modules/User/UserModule.swift", "chunk_number": 4, "total_chunks": 6}, "repository_explanation": "The `magiclabs/magic-ios` repository is a public codebase for the Magic iOS app. \n\nKey points:\n\n* Purpose: Official implementation of the Magic payment processing library for iOS\n* Content:\n\t+ Source code for the Magic iOS app and SDK\n\t+ Documentation and guides for developers", "file_summary": "Here is a concise summary of the file 'Sources/MagicSDK/Modules/User/UserModule.swift':\n\nThe UserModule class provides an interface for managing user authentication, including generating ID tokens, getting user info, checking login status, updating email addresses, logging out, displaying settings, and recovering accounts through RPC requests to a blockchain provider."}
{"code": "        let request = BasicRPCRequest(method: UserMethod.magic_auth_settings.rawValue, params: [])\n        self.provider.send(request: request, response: response)\n    }\n    \n    public func showSettings() -> Promise<UserInfo> {\n        return Promise { resolver in\n            showSettings(response: promiseResolver(resolver))\n        }\n    }\n    \n    /**\n        updatePhoneNumber\n     */\n    public func updatePhoneNumber(response: @escaping Web3ResponseCompletion<String>) {\n        let request = BasicRPCRequest(method: UserMethod.magic_auth_update_phone_number.rawValue, params: [])\n        self.provider.send(request: request, response: response)\n    }\n    \n    public func updatePhoneNumber() -> Promise<String> {\n        return Promise { resolver in\n            updatePhoneNumber(response: promiseResolver(resolver))\n        }\n    }        \n    \n    /**\n        recoverAccount\n     */\n    public func recoverAccount(_ configuration: RecoverAccountConfiguration, response: @escaping Web3ResponseCompletion<Bool>) {", "explanation": "Here is a concise summary:\n\n**Purpose:** Send RPC requests to interact with a blockchain provider.\n\n**Functionality:** Two types of interactions are supported:\n\n1. **User Settings**: Retrieve or display user settings (e.g., magic auth settings).\n2. **Account Management**: Update phone number and recover account (with configuration).", "metadata": {"repo": "magiclabs/magic-ios", "file": "Sources/MagicSDK/Modules/User/UserModule.swift", "chunk_number": 5, "total_chunks": 6}, "repository_explanation": "The `magiclabs/magic-ios` repository is a public codebase for the Magic iOS app. \n\nKey points:\n\n* Purpose: Official implementation of the Magic payment processing library for iOS\n* Content:\n\t+ Source code for the Magic iOS app and SDK\n\t+ Documentation and guides for developers", "file_summary": "Here is a concise summary of the file 'Sources/MagicSDK/Modules/User/UserModule.swift':\n\nThe UserModule class provides an interface for managing user authentication, including generating ID tokens, getting user info, checking login status, updating email addresses, logging out, displaying settings, and recovering accounts through RPC requests to a blockchain provider."}
{"code": "        let request = RPCRequest<[RecoverAccountConfiguration]>(method: UserMethod.magic_auth_recover_account.rawValue, params: [configuration])\n        \n        return self.provider.send(request: request, response: response)\n    }\n    \n    public func recoverAccount(_ configuration: RecoverAccountConfiguration) -> Promise<Bool> {\n        return Promise { resolver in\n            recoverAccount(configuration, response: promiseResolver(resolver))\n        }\n    }\n}\n", "explanation": "**Purpose:** Sends a request to recover an account using magic authentication.\n\n**Functionality:** Makes a network call to send a recovery configuration and returns a promise resolving to a boolean result.", "metadata": {"repo": "magiclabs/magic-ios", "file": "Sources/MagicSDK/Modules/User/UserModule.swift", "chunk_number": 6, "total_chunks": 6}, "repository_explanation": "The `magiclabs/magic-ios` repository is a public codebase for the Magic iOS app. \n\nKey points:\n\n* Purpose: Official implementation of the Magic payment processing library for iOS\n* Content:\n\t+ Source code for the Magic iOS app and SDK\n\t+ Documentation and guides for developers", "file_summary": "Here is a concise summary of the file 'Sources/MagicSDK/Modules/User/UserModule.swift':\n\nThe UserModule class provides an interface for managing user authentication, including generating ID tokens, getting user info, checking login status, updating email addresses, logging out, displaying settings, and recovering accounts through RPC requests to a blockchain provider."}
{"code": "//\n//  UserResponse.swift\n//  Magic\n//\n//  Created by Jerry Liu on 3/16/20.\n//  Copyright \u00a9 2020 Magic Labs Inc. All rights reserved.\n//\n\nimport Foundation\nimport MagicSDK_Web3\n\npublic protocol MagicResponse: Codable {}\n\n/// Get Id Token configuration\npublic struct UserInfo: MagicResponse {\n    \n    public let issuer: String?\n    public let publicAddress: String?\n    public let email: String?\n    public let phoneNumber: String?\n    public let isMfaEnabled: Bool\n    public let recoveryFactors: [RecoveryFactor]\n    \n    public var description: String {\n        return \"\"\"\n        issuer: \\(issuer ?? \"nil\")\n        publicAddress: \\(publicAddress ?? \"nil\")\n        email: \\(email ?? \"nil\")\n        phoneNumber: \\(phoneNumber ?? \"nil\")\n        isMfaEnabled: \\(isMfaEnabled)\n        recoveryFactors: \\(recoveryFactors)\n        \"\"\"\n    }\n}\n", "explanation": "Here is a concise summary:\n\n**UserResponse.swift**\n\nPurpose: A protocol and struct for handling user response data from Magic SDK Web3.\n\nFunctionality: Defines a `UserInfo` struct that holds user identity information (e.g., email, phone number) and provides a description string for debugging purposes.", "metadata": {"repo": "magiclabs/magic-ios", "file": "Sources/MagicSDK/Modules/User/UserResponse.swift", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "The `magiclabs/magic-ios` repository is a public codebase for the Magic iOS app. \n\nKey points:\n\n* Purpose: Official implementation of the Magic payment processing library for iOS\n* Content:\n\t+ Source code for the Magic iOS app and SDK\n\t+ Documentation and guides for developers", "file_summary": "Here is a concise holistic summary of the file 'Sources/MagicSDK/Modules/User/UserResponse.swift':\n\n**UserResponse.swift**\n\nA protocol and struct for handling user response data from Magic SDK Web3, encapsulating user identity information (e.g., email, phone number) in a `UserInfo` struct."}
{"code": "//\n//  WalletConfiguration.swift\n//\n//\n//  Created by Arian Flores on 02/16/23.\n//\n\nimport Foundation\n\npublic enum WalletUserInfoEmailOptions: String, Codable {\n    case required, optional\n}\n\npublic struct RequestUserInfoWithUIConfiguration: BaseConfiguration {\n    let scope: WalletUserInfoScope\n    \n    public init(scope: WalletUserInfoScope) {\n        self.scope = scope\n    }\n    \n    enum CodingKeys: String, CodingKey {\n        case scope\n    }\n}\n\npublic struct WalletUserInfoScope: Codable {\n    var email: WalletUserInfoEmailOptions\n    \n    enum CodingKeys: String, CodingKey {\n        case email\n    }\n}\n", "explanation": "Here is a concise summary:\n\nThis block defines a set of Swift structs and enums for configuring wallet user information, including options for handling email and defining scope for authentication requests.", "metadata": {"repo": "magiclabs/magic-ios", "file": "Sources/MagicSDK/Modules/Wallet/WalletConfiguration.swift", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "The `magiclabs/magic-ios` repository is a public codebase for the Magic iOS app. \n\nKey points:\n\n* Purpose: Official implementation of the Magic payment processing library for iOS\n* Content:\n\t+ Source code for the Magic iOS app and SDK\n\t+ Documentation and guides for developers", "file_summary": "Here is a concise and holistic summary of the file 'Sources/MagicSDK/Modules/Wallet/WalletConfiguration.swift':\n\n\"This file provides configuration options for wallet user information in Swift, enabling control over email handling and authentication request scoping.\""}
{"code": "//\n//  ConnectMethod.swift\n//\n//\n//  Created by Jerry Liu on 9/6/22.\n//\n\nimport Foundation\n\ninternal enum WalletMethod: String, CaseIterable {\n\n    // MC\n    case mc_login = \"eth_requestAccounts\"\n    case mc_get_wallet_info\n    case mc_wallet\n    case mc_request_user_info\n    case mc_disconnect\n}\n", "explanation": "**Purpose:** Define a list of wallet connection methods.\n\n**Functionality:** Enumerates 5 cases representing different wallet connection operations, using string values for identification.", "metadata": {"repo": "magiclabs/magic-ios", "file": "Sources/MagicSDK/Modules/Wallet/WalletMethod.swift", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "The `magiclabs/magic-ios` repository is a public codebase for the Magic iOS app. \n\nKey points:\n\n* Purpose: Official implementation of the Magic payment processing library for iOS\n* Content:\n\t+ Source code for the Magic iOS app and SDK\n\t+ Documentation and guides for developers", "file_summary": "Here is a concise and to-the-point summary:\n\n`WalletMethod.swift`: Defines an enum with 5 cases representing various wallet connection operations."}
{"code": "//\n//  WalletModule.swift\n//\n//\n//  Created by Arian Flores on 02/16/23.\n//\n\nimport Foundation\nimport MagicSDK_Web3\n\npublic class WalletModule: BaseModule {\n    /**\n     connectWithUI\n     */\n    public func connectWithUI(response: @escaping Web3ResponseCompletion<[String]>) {\n        let request = BasicRPCRequest(method: WalletMethod.mc_login.rawValue, params: [])\n\n        return self.provider.send(request: request, response: response)\n    }\n    \n    /**\n     showUI\n     */\n    public func showUI(response: @escaping Web3ResponseCompletion<Bool>) {\n        let request = BasicRPCRequest(method: WalletMethod.mc_wallet.rawValue, params: [])\n\n        return self.provider.send(request: request, response: response)\n    }\n\n    /**\n     getInfo\n     */\n    public func getInfo(response: @escaping Web3ResponseCompletion<WalletInfoResponse>) {\n        let request = BasicRPCRequest(method: WalletMethod.mc_get_wallet_info.rawValue, params: [])\n\n        return self.provider.send(request: request, response: response)\n    }\n\n\n    /**", "explanation": "**Summary**\n\nThe `WalletModule` class provides a set of functions for interacting with a cryptocurrency wallet using the Magic SDK Web3 library. The main functionalities are:\n\n* Connecting to the wallet using UI (`connectWithUI`)\n* Displaying the wallet's user interface (`showUI`)\n* Retrieving information about the connected wallet (`getInfo`)", "metadata": {"repo": "magiclabs/magic-ios", "file": "Sources/MagicSDK/Modules/Wallet/WalletModule.swift", "chunk_number": 1, "total_chunks": 2}, "repository_explanation": "The `magiclabs/magic-ios` repository is a public codebase for the Magic iOS app. \n\nKey points:\n\n* Purpose: Official implementation of the Magic payment processing library for iOS\n* Content:\n\t+ Source code for the Magic iOS app and SDK\n\t+ Documentation and guides for developers", "file_summary": "Here is a concise and holistic summary of the file 'Sources/MagicSDK/Modules/Wallet/WalletModule.swift':\n\nThe `WalletModule` class provides a set of functions for interacting with a cryptocurrency wallet, including connecting and disconnecting, displaying UI, and retrieving information about the connected wallet using Magic SDK Web3 library protocols."}
{"code": "     requestUserInfoWithUI\n     */\n    public func requestUserInfoWithUI(_ configuration: RequestUserInfoWithUIConfiguration? = nil, response: @escaping Web3ResponseCompletion<UserInfoResponse>) {\n        let request = RPCRequest<[RequestUserInfoWithUIConfiguration?]>(method: WalletMethod.mc_request_user_info.rawValue, params: (configuration != nil) ? [configuration]: [])\n\n        return self.provider.send(request: request, response: response)\n    }\n\n    /**\n     disconnect\n     */\n    public func disconnect(response: @escaping Web3ResponseCompletion<Bool>) {\n        let request = BasicRPCRequest(method: WalletMethod.mc_disconnect.rawValue, params: [])\n\n        return self.provider.send(request: request, response: response)\n    }\n}\n", "explanation": "This block appears to be a part of a wallet API, containing two functions:\n\n1. `requestUserInfoWithUI`: Requests user information with UI configuration.\n2. `disconnect`: Disconnects from an unknown service.\n\nBoth functions send RPC requests to a provider using Web3 protocols.", "metadata": {"repo": "magiclabs/magic-ios", "file": "Sources/MagicSDK/Modules/Wallet/WalletModule.swift", "chunk_number": 2, "total_chunks": 2}, "repository_explanation": "The `magiclabs/magic-ios` repository is a public codebase for the Magic iOS app. \n\nKey points:\n\n* Purpose: Official implementation of the Magic payment processing library for iOS\n* Content:\n\t+ Source code for the Magic iOS app and SDK\n\t+ Documentation and guides for developers", "file_summary": "Here is a concise and holistic summary of the file 'Sources/MagicSDK/Modules/Wallet/WalletModule.swift':\n\nThe `WalletModule` class provides a set of functions for interacting with a cryptocurrency wallet, including connecting and disconnecting, displaying UI, and retrieving information about the connected wallet using Magic SDK Web3 library protocols."}
{"code": "//\n//  ConnectResponse.swift\n//\n//\n//  Created by Wentao Liu on 9/22/22.\n//\n\nimport Foundation\n\npublic struct UserInfoResponse: MagicResponse {\n\n    public let email: String?\n}\n\npublic struct WalletInfoResponse: MagicResponse {\n    public let walletType: String?\n}\n", "explanation": "This block defines two Swift structs, `UserInfoResponse` and `WalletInfoResponse`, which conform to a protocol called `MagicResponse`. They each have a single property: `email` for `UserInfoResponse` and `walletType` for `WalletInfoResponse`.", "metadata": {"repo": "magiclabs/magic-ios", "file": "Sources/MagicSDK/Modules/Wallet/WalletResponse.swift", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "The `magiclabs/magic-ios` repository is a public codebase for the Magic iOS app. \n\nKey points:\n\n* Purpose: Official implementation of the Magic payment processing library for iOS\n* Content:\n\t+ Source code for the Magic iOS app and SDK\n\t+ Documentation and guides for developers", "file_summary": "Here is a concise and holistic summary of the file 'Sources/MagicSDK/Modules/Wallet/WalletResponse.swift':\n\nThis file defines two Swift structs, `UserInfoResponse` and `WalletInfoResponse`, which conform to the `MagicResponse` protocol, each with a single property: `email` and `walletType`, respectively."}
{"code": "//\n//  EthereumTypedData.swift\n//  Web3\n//\n//  Created by Yehor Popovych on 3/19/19.\n//  From: https://github.com/Boilertalk/Web3.swift/pull/75/commits/24c556f970115d15d38a4497952767fc4582b2b2\nimport Foundation\nimport MagicSDK_Web3\n\n\n// MARK: - EIP 712\npublic struct EIP712TypedData: Codable, Equatable {\n    public struct `Type`: Codable, Equatable {\n        let name: String\n        let type: String\n    }\n\n    public struct Domain: Codable, Equatable {\n        let name: String?\n        let version: String?\n        let chainId: Int?\n        let verifyingContract: String?\n        let salt: UInt32?\n    }\n\n    public let types: Dictionary<String, Array<Type>>\n    public let primaryType: String\n    public let domain: Domain\n    public let message: Dictionary<String, JSONValue>\n\n    public init(\n        primaryType: String,\n        domain: Domain,\n        types: Dictionary<String, Array<Type>>,\n        message: Dictionary<String, JSONValue>\n    ) {\n        self.primaryType = primaryType\n        self.domain = domain", "explanation": "**Ethereum Typed Data**\n\nA struct that implements EIP-712 typed data, allowing for secure and efficient data signing on Ethereum. It consists of:\n\n* `types`: A dictionary mapping type names to arrays of type definitions\n* `primaryType`: The main type of the data being signed\n* `domain`: Information about the domain signing the data (e.g., contract address)\n* `message`: The actual data being signed, represented as a JSON object", "metadata": {"repo": "magiclabs/magic-ios", "file": "Sources/MagicSDK/Modules/Web3/EIP712TypedData.swift", "chunk_number": 1, "total_chunks": 3}, "repository_explanation": "The `magiclabs/magic-ios` repository is a public codebase for the Magic iOS app. \n\nKey points:\n\n* Purpose: Official implementation of the Magic payment processing library for iOS\n* Content:\n\t+ Source code for the Magic iOS app and SDK\n\t+ Documentation and guides for developers", "file_summary": "Here is a concise summary:\n\n**Sources/MagicSDK/Modules/Web3/EIP712TypedData.swift**\n\nThis file implements EIP-712 typed data for secure and efficient data signing on Ethereum, including structs for data calls with legacy fields and serialization capabilities via Codable and Equatable protocols."}
{"code": "        self.types = types\n        self.message = message\n    }\n}\n\npublic struct SignTypedDataCallParams: Codable, Equatable {\n    public let account: EthereumAddress\n    public let data: EIP712TypedData\n\n    public init(account: EthereumAddress, data: EIP712TypedData) {\n        self.account = account\n        self.data = data\n    }\n\n    public init(from decoder: Decoder) throws {\n        var container = try decoder.unkeyedContainer()\n        let account = try container.decode(EthereumAddress.self)\n        let data = try container.decode(EIP712TypedData.self)\n        self.init(account: account, data: data)\n    }\n\n    public func encode(to encoder: Encoder) throws {\n        var container = encoder.unkeyedContainer()\n        try container.encode(account)\n        try container.encode(data)\n    }\n}\n\n\n// MARK: - EIP 712 legacy\npublic struct EIP712TypedDataLegacyFields: Codable, Equatable {\n\n    public let type: String\n    public let name: String\n    public let value: String\n\n    public init(\n        type: String,", "explanation": "Here is a concise summary of the purpose and functionality:\n\n**Structs for Ethereum Data Calls**\n\n* `SignTypedDataCallParams`: A struct containing `account` (EthereumAddress) and `data` (EIP712TypedData) used to initialize an Ethereum data call.\n* `EIP712TypedDataLegacyFields`: A struct representing legacy EIP 712 fields with `type`, `name`, and `value` properties.\n\nThese structs are designed for use in Ethereum data calls, specifically for signing typed data. They implement the Codable and Equatable protocols for serialization and comparison purposes.", "metadata": {"repo": "magiclabs/magic-ios", "file": "Sources/MagicSDK/Modules/Web3/EIP712TypedData.swift", "chunk_number": 2, "total_chunks": 3}, "repository_explanation": "The `magiclabs/magic-ios` repository is a public codebase for the Magic iOS app. \n\nKey points:\n\n* Purpose: Official implementation of the Magic payment processing library for iOS\n* Content:\n\t+ Source code for the Magic iOS app and SDK\n\t+ Documentation and guides for developers", "file_summary": "Here is a concise summary:\n\n**Sources/MagicSDK/Modules/Web3/EIP712TypedData.swift**\n\nThis file implements EIP-712 typed data for secure and efficient data signing on Ethereum, including structs for data calls with legacy fields and serialization capabilities via Codable and Equatable protocols."}
{"code": "        name: String,\n        value: String\n    ) {\n        self.type = type\n        self.name = name\n        self.value = value\n    }\n}\n\n\npublic struct SignTypedDataLegacyCallParams: Codable, Equatable {\n    public let data: [EIP712TypedDataLegacyFields]\n    public let account: EthereumAddress\n\n    public init(data: [EIP712TypedDataLegacyFields], account: EthereumAddress) {\n        self.data = data\n        self.account = account\n    }\n\n    public init(from decoder: Decoder) throws {\n        var container = try decoder.unkeyedContainer()\n        let data = try container.decode(EIP712TypedDataLegacyFields.self)\n        let account = try container.decode(EthereumAddress.self)\n        self.init(data: [data], account: account)\n    }\n\n    public func encode(to encoder: Encoder) throws {\n        var container = encoder.unkeyedContainer()\n        try container.encode(data)\n        try container.encode(account)\n    }\n}\n", "explanation": "Here is a concise summary:\n\n**Block 1:** A struct initializer that sets properties `type`, `name`, and `value` from input parameters.\n\n**Block 2:** A struct `SignTypedDataLegacyCallParams` that represents legacy EIP712 typed data call parameters, containing an array of `EIP712TypedDataLegacyFields` and an Ethereum address. It conforms to `Codable` and `Equatable`.", "metadata": {"repo": "magiclabs/magic-ios", "file": "Sources/MagicSDK/Modules/Web3/EIP712TypedData.swift", "chunk_number": 3, "total_chunks": 3}, "repository_explanation": "The `magiclabs/magic-ios` repository is a public codebase for the Magic iOS app. \n\nKey points:\n\n* Purpose: Official implementation of the Magic payment processing library for iOS\n* Content:\n\t+ Source code for the Magic iOS app and SDK\n\t+ Documentation and guides for developers", "file_summary": "Here is a concise summary:\n\n**Sources/MagicSDK/Modules/Web3/EIP712TypedData.swift**\n\nThis file implements EIP-712 typed data for secure and efficient data signing on Ethereum, including structs for data calls with legacy fields and serialization capabilities via Codable and Equatable protocols."}
{"code": "//\n//  JSONValue.swift\n//  Web3\n//\n//  Created by Yehor Popovych on 3/19/19.\n//  from https://github.com/Boilertalk/Web3.swift/pull/75/commits/24c556f970115d15d38a4497952767fc4582b2b2\nimport Foundation\n\npublic enum JSONValue: Equatable {\n    case null\n    case bool(Bool)\n    case number(Double)\n    case string(String)\n    case array(Array<JSONValue>)\n    case object(Dictionary<String, JSONValue>)\n}\n\nextension JSONValue: Codable {\n    public func encode(to encoder: Encoder) throws {\n        var container = encoder.singleValueContainer()\n        switch self {\n        case let .array(array):\n            try container.encode(array)\n        case let .object(object):\n            try container.encode(object)\n        case let .string(string):\n            try container.encode(string)\n        case let .number(number):\n            try container.encode(number)\n        case let .bool(bool):\n            try container.encode(bool)\n        case .null:\n            try container.encodeNil()\n        }\n    }\n", "explanation": "Here is a concise summary:\n\n**JSONValue.swift**\n\nThis block defines an enumeration `JSONValue` for working with JSON data in Swift. It represents various types of JSON values, such as null, boolean, number, string, array, and object, and provides a way to encode these values into a Codable format.", "metadata": {"repo": "magiclabs/magic-ios", "file": "Sources/MagicSDK/Modules/Web3/JSONValue.swift", "chunk_number": 1, "total_chunks": 5}, "repository_explanation": "The `magiclabs/magic-ios` repository is a public codebase for the Magic iOS app. \n\nKey points:\n\n* Purpose: Official implementation of the Magic payment processing library for iOS\n* Content:\n\t+ Source code for the Magic iOS app and SDK\n\t+ Documentation and guides for developers", "file_summary": "Here is a concise summary:\n\n**Sources/MagicSDK/Modules/Web3/JSONValue.swift**\n\nThis file defines an enumeration `JSONValue` for working with JSON data in Swift, providing a Codable format and safe accessors to underlying values. It enables easy and safe decoding of JSON values, handling unknown or invalid types by returning default string representations."}
{"code": "    public init(from decoder: Decoder) throws {\n        let container = try decoder.singleValueContainer()\n        if let object = try? container.decode([String: JSONValue].self) {\n            self = .object(object)\n        } else if let array = try? container.decode([JSONValue].self) {\n            self = .array(array)\n        } else if let string = try? container.decode(String.self) {\n            self = .string(string)\n        } else if let bool = try? container.decode(Bool.self) {\n            self = .bool(bool)\n        } else if let number = try? container.decode(Double.self) {\n            self = .number(number)\n        } else if container.decodeNil() {\n            self = .null\n        } else {\n            throw DecodingError.dataCorrupted(\n                .init(codingPath: decoder.codingPath, debugDescription: \"Invalid JSON value.\")\n            )\n        }\n    }\n}\n\nextension JSONValue: CustomDebugStringConvertible {\n    public var debugDescription: String {\n        switch self {", "explanation": "**Purpose:** Decodes a single JSON value from a given decoder.\n\n**Functionality:** Attempts to decode the container as different types of JSON values (e.g., object, array, string, bool, number, null) and returns the corresponding `JSONValue` enum case upon success. If decoding fails or an invalid JSON type is encountered, throws a `DecodingError`.", "metadata": {"repo": "magiclabs/magic-ios", "file": "Sources/MagicSDK/Modules/Web3/JSONValue.swift", "chunk_number": 2, "total_chunks": 5}, "repository_explanation": "The `magiclabs/magic-ios` repository is a public codebase for the Magic iOS app. \n\nKey points:\n\n* Purpose: Official implementation of the Magic payment processing library for iOS\n* Content:\n\t+ Source code for the Magic iOS app and SDK\n\t+ Documentation and guides for developers", "file_summary": "Here is a concise summary:\n\n**Sources/MagicSDK/Modules/Web3/JSONValue.swift**\n\nThis file defines an enumeration `JSONValue` for working with JSON data in Swift, providing a Codable format and safe accessors to underlying values. It enables easy and safe decoding of JSON values, handling unknown or invalid types by returning default string representations."}
{"code": "        case .string(let str):\n            return str.debugDescription\n        case .number(let num):\n            return num.debugDescription\n        case .bool(let bool):\n            return bool.description\n        case .null:\n            return \"null\"\n        default:\n            let encoder = JSONEncoder()\n            encoder.outputFormatting = [.prettyPrinted]\n            return try! String(data: encoder.encode(self), encoding: .utf8)!\n        }\n    }\n}\n\npublic extension JSONValue {\n    /// Return the string value if this is a `.string`, otherwise `nil`\n    var string: String? {\n        if case .string(let value) = self {\n            return value\n        }\n        return nil\n    }\n\n    /// Return the double value if this is a `.number`, otherwise `nil`\n    var number: Double? {\n        if case .number(let value) = self {\n            return value\n        }\n        return nil\n    }\n\n    /// Return the bool value if this is a `.bool`, otherwise `nil`\n    var bool: Bool? {\n        if case .bool(let value) = self {", "explanation": "Here is a concise summary:\n\n**Functionality:** A Swift extension for JSONValue that provides methods to safely unwrap string, number, and boolean values from a JSON representation.\n\n**Purpose:** To enable easy and safe access to the underlying value of a JSON object, while handling unknown or invalid types by returning a default string representation.", "metadata": {"repo": "magiclabs/magic-ios", "file": "Sources/MagicSDK/Modules/Web3/JSONValue.swift", "chunk_number": 3, "total_chunks": 5}, "repository_explanation": "The `magiclabs/magic-ios` repository is a public codebase for the Magic iOS app. \n\nKey points:\n\n* Purpose: Official implementation of the Magic payment processing library for iOS\n* Content:\n\t+ Source code for the Magic iOS app and SDK\n\t+ Documentation and guides for developers", "file_summary": "Here is a concise summary:\n\n**Sources/MagicSDK/Modules/Web3/JSONValue.swift**\n\nThis file defines an enumeration `JSONValue` for working with JSON data in Swift, providing a Codable format and safe accessors to underlying values. It enables easy and safe decoding of JSON values, handling unknown or invalid types by returning default string representations."}
{"code": "            return value\n        }\n        return nil\n    }\n\n    /// Return the object value if this is an `.object`, otherwise `nil`\n    var objec: Dictionary<String, JSONValue>? {\n        if case .object(let value) = self {\n            return value\n        }\n        return nil\n    }\n\n    /// Return the array value if this is an `.array`, otherwise `nil`\n    var array: Array<JSONValue>? {\n        if case .array(let value) = self {\n            return value\n        }\n        return nil\n    }\n\n    /// Return `true` if this is `.null`\n    var isNull: Bool {\n        if case .null = self {\n            return true\n        }\n        return false\n    }\n\n    /// If this is an `.array`, return item at index\n    ///\n    /// If this is not an `.array` or the index is out of bounds, returns `nil`.\n    subscript(index: Int) -> JSONValue? {\n        if case .array(let arr) = self, arr.indices.contains(index) {\n            return arr[index]\n        }\n        return nil\n    }\n\n    /// If this is an `.object`, return item at key", "explanation": "**Purpose:** Customized accessors for a JSON value enum (e.g., `JSONValue`)\n\n**Functionality:**\n\n* Provide safe access to nested values (dict, array, or object)\n* Automatically return `nil` if accessing an invalid type\n* Optional values can be nil-safe accessed using subscript (`[]`)", "metadata": {"repo": "magiclabs/magic-ios", "file": "Sources/MagicSDK/Modules/Web3/JSONValue.swift", "chunk_number": 4, "total_chunks": 5}, "repository_explanation": "The `magiclabs/magic-ios` repository is a public codebase for the Magic iOS app. \n\nKey points:\n\n* Purpose: Official implementation of the Magic payment processing library for iOS\n* Content:\n\t+ Source code for the Magic iOS app and SDK\n\t+ Documentation and guides for developers", "file_summary": "Here is a concise summary:\n\n**Sources/MagicSDK/Modules/Web3/JSONValue.swift**\n\nThis file defines an enumeration `JSONValue` for working with JSON data in Swift, providing a Codable format and safe accessors to underlying values. It enables easy and safe decoding of JSON values, handling unknown or invalid types by returning default string representations."}
{"code": "    subscript(key: String) -> JSONValue? {\n        if case .object(let dict) = self {\n            return dict[key]\n        }\n        return nil\n    }\n}\n", "explanation": "**Purpose:** Allows access to a specific key in a JSON object.\n\n**Functionality:** Returns the value associated with the given key, or `nil` if the key is not found.", "metadata": {"repo": "magiclabs/magic-ios", "file": "Sources/MagicSDK/Modules/Web3/JSONValue.swift", "chunk_number": 5, "total_chunks": 5}, "repository_explanation": "The `magiclabs/magic-ios` repository is a public codebase for the Magic iOS app. \n\nKey points:\n\n* Purpose: Official implementation of the Magic payment processing library for iOS\n* Content:\n\t+ Source code for the Magic iOS app and SDK\n\t+ Documentation and guides for developers", "file_summary": "Here is a concise summary:\n\n**Sources/MagicSDK/Modules/Web3/JSONValue.swift**\n\nThis file defines an enumeration `JSONValue` for working with JSON data in Swift, providing a Codable format and safe accessors to underlying values. It enables easy and safe decoding of JSON values, handling unknown or invalid types by returning default string representations."}
{"code": "//\n//  Web3Extension.swift\n//  Magic\n//\n//  Created by Jerry Liu on 2/9/20.\n//  Copyright \u00a9 2020 Magic Labs Inc. All rights reserved.\n//\n\nimport Foundation\nimport MagicSDK_Web3\nimport PromiseKit\n\n// MARK: - web3 extension with closure\npublic extension Web3.Eth {\n\n    func getCoinbase(response: @escaping Web3.Web3ResponseCompletion<EthereumAddress>) {\n        let req = BasicRPCRequest(\n            id: properties.rpcId,\n            jsonrpc: Web3.jsonrpc,\n            method: \"eth_coinbase\",\n            params: []\n        )\n        properties.provider.send(request: req, response: response)\n    }\n\n    func sign(from: EthereumAddress, message: EthereumData, response: @escaping Web3.Web3ResponseCompletion<EthereumData>) {\n        let req = RPCRequest<EthereumValue>(\n            id: properties.rpcId,\n            jsonrpc: Web3.jsonrpc,\n            method: \"eth_sign\",\n            params: [from, message]\n        )\n        properties.provider.send(request: req, response: response)\n    }\n\n    func signTypedDataV1(", "explanation": "Here is a concise summary:\n\n**Purpose:** Provides a web3 extension with functions for interacting with Ethereum.\n\n**Functionality:** Offers three methods:\n1. `getCoinbase`: Retrieves the current coinbase address.\n2. `sign`: Signs a message with an Ethereum account.\n3. `signTypedDataV1`: Signs typed data using a specific version of the protocol.", "metadata": {"repo": "magiclabs/magic-ios", "file": "Sources/MagicSDK/Modules/Web3/Web3Extension.swift", "chunk_number": 1, "total_chunks": 5}, "repository_explanation": "The `magiclabs/magic-ios` repository is a public codebase for the Magic iOS app. \n\nKey points:\n\n* Purpose: Official implementation of the Magic payment processing library for iOS\n* Content:\n\t+ Source code for the Magic iOS app and SDK\n\t+ Documentation and guides for developers", "file_summary": "Here's a holistic summary of the file 'Sources/MagicSDK/Modules/Web3/Web3Extension.swift':\n\n**Purpose:** Provides an extension with functions for interacting with Ethereum, enabling users to send RPC requests for various operations.\n\n**Functionality:** Offers multiple methods for signing typed data (versions V1, V3, and V4) using a specified account and retrieving the current coinbase address. It also includes a set of Ethereum network types defined by the `EthNetwork` enum.\n\nIn summary, this file provides a comprehensive set of functions for interacting with the Ethereum network, including signing transactions and retrieving information."}
{"code": "        data: [EIP712TypedDataLegacyFields],\n        account: EthereumAddress,\n        response: @escaping Web3ResponseCompletion<EthereumData>\n    ) {\n        let req = RPCRequest<SignTypedDataLegacyCallParams>(\n            id: properties.rpcId,\n            jsonrpc: Web3.jsonrpc,\n            method: \"eth_signTypedData\",\n            params: SignTypedDataLegacyCallParams(\n                data: data, account: account\n            )\n        )\n        properties.provider.send(request: req, response: response)\n    }\n\n    func signTypedDataV3(\n        account: EthereumAddress,\n        data: EIP712TypedData,\n        response: @escaping Web3ResponseCompletion<EthereumData>\n    ) {\n        let req = RPCRequest<SignTypedDataCallParams>(\n            id: properties.rpcId,\n            jsonrpc: Web3.jsonrpc,\n            method: \"eth_signTypedData_v3\",\n            params: SignTypedDataCallParams(\n                account: account, data: data\n            )\n        )", "explanation": "**Summary**\n\nThis code snippet defines two functions:\n\n1. `signTypedDataLegacy`: Sends a request to the Ethereum provider to sign legacy EIP-712 typed data with a given account.\n2. `signTypedDataV3`: Sends a request to the Ethereum provider to sign EIP-712 typed data version 3 with a given account.\n\n**Purpose**: Sign EIP-712 typed data on the Ethereum network using the specified account.", "metadata": {"repo": "magiclabs/magic-ios", "file": "Sources/MagicSDK/Modules/Web3/Web3Extension.swift", "chunk_number": 2, "total_chunks": 5}, "repository_explanation": "The `magiclabs/magic-ios` repository is a public codebase for the Magic iOS app. \n\nKey points:\n\n* Purpose: Official implementation of the Magic payment processing library for iOS\n* Content:\n\t+ Source code for the Magic iOS app and SDK\n\t+ Documentation and guides for developers", "file_summary": "Here's a holistic summary of the file 'Sources/MagicSDK/Modules/Web3/Web3Extension.swift':\n\n**Purpose:** Provides an extension with functions for interacting with Ethereum, enabling users to send RPC requests for various operations.\n\n**Functionality:** Offers multiple methods for signing typed data (versions V1, V3, and V4) using a specified account and retrieving the current coinbase address. It also includes a set of Ethereum network types defined by the `EthNetwork` enum.\n\nIn summary, this file provides a comprehensive set of functions for interacting with the Ethereum network, including signing transactions and retrieving information."}
{"code": "        properties.provider.send(request: req, response: response)\n    }\n\n    func signTypedDataV4(\n        account: EthereumAddress,\n        data: EIP712TypedData,\n        response: @escaping Web3ResponseCompletion<EthereumData>\n    ) {\n        let req = RPCRequest<SignTypedDataCallParams>(\n            id: properties.rpcId,\n            jsonrpc: Web3.jsonrpc,\n            method: \"eth_signTypedData_v4\",\n            params: SignTypedDataCallParams(\n                account: account, data: data\n            )\n        )\n        properties.provider.send(request: req, response: response)\n    }\n}\n\n// MARK: - web3 extension Promises\n///\npublic extension Web3.Eth {\n\n    func getCoinbase() -> Promise<EthereumAddress> {\n        return Promise { resolver in\n            getCoinbase(response: promiseResolver(resolver))\n        }\n    }\n\n    func sign(from: EthereumAddress, message: EthereumData) -> Promise<EthereumData> {\n        return Promise { resolver in", "explanation": "Here is a concise summary of the purpose and functionality of this code block:\n\n**Purpose:** Send RPC requests to an Ethereum provider for various operations.\n\n**Functionality:** The code defines two functions: `signTypedDataV4` (for signing typed data) and `getCoinbase`/`sign` functions that send RPC requests to retrieve a coinbase address or sign a message.", "metadata": {"repo": "magiclabs/magic-ios", "file": "Sources/MagicSDK/Modules/Web3/Web3Extension.swift", "chunk_number": 3, "total_chunks": 5}, "repository_explanation": "The `magiclabs/magic-ios` repository is a public codebase for the Magic iOS app. \n\nKey points:\n\n* Purpose: Official implementation of the Magic payment processing library for iOS\n* Content:\n\t+ Source code for the Magic iOS app and SDK\n\t+ Documentation and guides for developers", "file_summary": "Here's a holistic summary of the file 'Sources/MagicSDK/Modules/Web3/Web3Extension.swift':\n\n**Purpose:** Provides an extension with functions for interacting with Ethereum, enabling users to send RPC requests for various operations.\n\n**Functionality:** Offers multiple methods for signing typed data (versions V1, V3, and V4) using a specified account and retrieving the current coinbase address. It also includes a set of Ethereum network types defined by the `EthNetwork` enum.\n\nIn summary, this file provides a comprehensive set of functions for interacting with the Ethereum network, including signing transactions and retrieving information."}
{"code": "            sign(from: from, message: message, response: promiseResolver(resolver))\n        }\n    }\n\n    func signTypedDataLegacy(\n        account: EthereumAddress, data: [EIP712TypedDataLegacyFields]) -> Promise<EthereumData> {\n        return Promise { resolver in\n            signTypedDataV1(data: data, account: account, response: promiseResolver(resolver))\n        }\n    }\n\n    func signTypedData(\n        account: EthereumAddress, data: EIP712TypedData) -> Promise<EthereumData> {\n        return Promise { resolver in\n            signTypedDataV3(account: account, data: data, response: promiseResolver(resolver))\n        }\n    }\n\n    func signTypedDataV4(\n        account: EthereumAddress, data: EIP712TypedData) -> Promise<EthereumData> {\n        return Promise { resolver in\n            signTypedDataV4(account: account, data: data, response: promiseResolver(resolver))\n        }\n    }\n}\n\npublic extension RPCRequest {\n\n    init(method: String, params: Params) {", "explanation": "Here is a concise summary of the purpose and functionality of this block:\n\n**Purpose:** A set of functions for signing Ethereum transactions, including typed data, using various versions (V1, V3, and V4).\n\n**Functionality:** These functions return promises that resolve with signed Ethereum data or typed data, allowing users to create and sign transactions programmatically.", "metadata": {"repo": "magiclabs/magic-ios", "file": "Sources/MagicSDK/Modules/Web3/Web3Extension.swift", "chunk_number": 4, "total_chunks": 5}, "repository_explanation": "The `magiclabs/magic-ios` repository is a public codebase for the Magic iOS app. \n\nKey points:\n\n* Purpose: Official implementation of the Magic payment processing library for iOS\n* Content:\n\t+ Source code for the Magic iOS app and SDK\n\t+ Documentation and guides for developers", "file_summary": "Here's a holistic summary of the file 'Sources/MagicSDK/Modules/Web3/Web3Extension.swift':\n\n**Purpose:** Provides an extension with functions for interacting with Ethereum, enabling users to send RPC requests for various operations.\n\n**Functionality:** Offers multiple methods for signing typed data (versions V1, V3, and V4) using a specified account and retrieving the current coinbase address. It also includes a set of Ethereum network types defined by the `EthNetwork` enum.\n\nIn summary, this file provides a comprehensive set of functions for interacting with the Ethereum network, including signing transactions and retrieving information."}
{"code": "        self = RPCRequest(id: generateRandomId(), jsonrpc: \"2.0\", method: method, params: params)\n    }\n}\n\n/// Represents distinct Ethereum Networks\n///\n/// Note: Conforms to Hashable so that we can use these as a Dictionary key\npublic enum EthNetwork: String {\n    case mainnet\n    case goerli\n}\n", "explanation": "Here is a concise summary:\n\n**Purpose:** Create an RPC request with a unique ID and parameters.\n\n**Functionality:** The code initializes an RPCRequest object with a randomly generated ID, JSON-RPC version 2.0, a specified method, and parameters. \n\nAnd separately:\n\n**Purpose:** Define a set of Ethereum network types.\n\n**Functionality:** The `EthNetwork` enum represents distinct Ethereum networks, including mainnet and Goerli, and conforms to the Hashable protocol for use as dictionary keys.", "metadata": {"repo": "magiclabs/magic-ios", "file": "Sources/MagicSDK/Modules/Web3/Web3Extension.swift", "chunk_number": 5, "total_chunks": 5}, "repository_explanation": "The `magiclabs/magic-ios` repository is a public codebase for the Magic iOS app. \n\nKey points:\n\n* Purpose: Official implementation of the Magic payment processing library for iOS\n* Content:\n\t+ Source code for the Magic iOS app and SDK\n\t+ Documentation and guides for developers", "file_summary": "Here's a holistic summary of the file 'Sources/MagicSDK/Modules/Web3/Web3Extension.swift':\n\n**Purpose:** Provides an extension with functions for interacting with Ethereum, enabling users to send RPC requests for various operations.\n\n**Functionality:** Offers multiple methods for signing typed data (versions V1, V3, and V4) using a specified account and retrieving the current coinbase address. It also includes a set of Ethereum network types defined by the `EthNetwork` enum.\n\nIn summary, this file provides a comprehensive set of functions for interacting with the Ethereum network, including signing transactions and retrieving information."}
{"code": "//\n//  Number.swift\n//  Magic\n//\n//  Created by Jerry Liu on 3/11/20.\n//\n\nimport Foundation\n\npublic func generateRandomId() -> Int{\n    return Int.random(in: 1000..<100000)\n}\n", "explanation": "**Block Summary**\n\nThis block defines a Swift function called `generateRandomId()` that returns a random integer ID between 1000 and 99999 (exclusive).", "metadata": {"repo": "magiclabs/magic-ios", "file": "Sources/MagicSDK/Utilities/Number.swift", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "The `magiclabs/magic-ios` repository is a public codebase for the Magic iOS app. \n\nKey points:\n\n* Purpose: Official implementation of the Magic payment processing library for iOS\n* Content:\n\t+ Source code for the Magic iOS app and SDK\n\t+ Documentation and guides for developers", "file_summary": "Here is a concise summary of the file 'Sources/MagicSDK/Utilities/Number.swift':\n\nThis module contains a single utility function, `generateRandomId()`, which generates a unique random integer ID within the range 1000 to 99999 (exclusive)."}
{"code": "//\n//  Query.swift\n//  Magic\n//\n//  Created by Jerry Liu on 2/5/20.\n//\n\nimport Foundation\n\nenum QueryConstructError: Error {\n    case generationFailed(code: String)\n}\n\npublic func btoa(jsonString: String) -> String {\n    if let utf8str = jsonString.data(using: String.Encoding.utf8) {\n        let base64 = utf8str.base64EncodedString(options: Data.Base64EncodingOptions(rawValue: 0))\n        return base64\n    }\n    return \"\"\n}\n\nfunc atob(encodedString: String) -> String {\n    let decodedData = Data(base64Encoded: encodedString)!\n    return String(data: decodedData, encoding: .utf8)!\n}\n", "explanation": "**Summary**\n\nThis is a Swift module named `Query.swift` with two main functions:\n\n1. **btoa**: Base-64 encodes a JSON string.\n2. **atob**: Decodes a Base-64 encoded string back into a JSON string.\n\nIt also defines an error enum for query construction errors.", "metadata": {"repo": "magiclabs/magic-ios", "file": "Sources/MagicSDK/Utilities/Query.swift", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "The `magiclabs/magic-ios` repository is a public codebase for the Magic iOS app. \n\nKey points:\n\n* Purpose: Official implementation of the Magic payment processing library for iOS\n* Content:\n\t+ Source code for the Magic iOS app and SDK\n\t+ Documentation and guides for developers", "file_summary": "Here is a concise and to-the-point summary:\n\n**Summary**\n\n`Query.swift`: A Swift module containing functions for base-64 encoding and decoding JSON strings, along with an error enum for query construction issues."}
{"code": "//\n//  SEKeys.swift\n//  Based on the tutorial from https://developer.apple.com/documentation/cryptokit/storing_cryptokit_keys_in_the_keychain#3369560\n//  Keypairs generated from SE (Secure Enclave) can only be unwrapped by the same SE. Exporting it will be useless\n//  Created by Jerry Liu on 7/5/23.\n//\n\nimport Foundation\n\nimport Security\nimport CryptoKit\n\nlet account = \"link.magic.auth.dpop\".data(using: .utf8)!\n\n// seccured enclave key pairs error\npublic enum SEKPError: Swift.Error {\n    case KeyStoreError(String)\n}\n\n\nfunc createP256KeyInSE () throws -> SecureEnclave.P256.Signing.PrivateKey {\n    let accessControl = SecAccessControlCreateWithFlags(\n        kCFAllocatorDefault,\n        kSecAttrAccessibleWhenUnlocked,\n        [.privateKeyUsage],\n        nil\n    )!\n\n    // Generate a new private key in the Secure Enclave.\n    let privateKey = try SecureEnclave.P256.Signing.PrivateKey(accessControl: accessControl)\n\n    try storeKeyToKeyChain(privateKey)\n\n    return privateKey\n}\n", "explanation": "**Summary**\n\nThis Swift code (SEKeys.swift) provides a utility for generating and storing private keys in the Secure Enclave (SE) on an Apple device. It allows creation of P256 key pairs within the SE, stores them securely using Keychain, and includes error handling for potential issues.", "metadata": {"repo": "magiclabs/magic-ios", "file": "Sources/MagicSDK/Utilities/SEKP.swift", "chunk_number": 1, "total_chunks": 4}, "repository_explanation": "The `magiclabs/magic-ios` repository is a public codebase for the Magic iOS app. \n\nKey points:\n\n* Purpose: Official implementation of the Magic payment processing library for iOS\n* Content:\n\t+ Source code for the Magic iOS app and SDK\n\t+ Documentation and guides for developers", "file_summary": "Here is a concise summary of the file 'Sources/MagicSDK/Utilities/SEKP.swift':\n\n**Purpose:** Securely store and retrieve cryptographic keys in the Keychain, using the Secure Enclave for key creation.\n\n**Functionality:** Generates P256 key pairs, stores them securely, and provides interfaces for retrieval, deletion, and initialization from raw byte data."}
{"code": "func storeKeyToKeyChain<T: GenericPasswordConvertible>(_ key: T) throws {\n    // Treat the key data as a generic password.\n    let query = [kSecClass: kSecClassGenericPassword,\n                 kSecAttrAccount: account,\n                 kSecAttrAccessible: kSecAttrAccessibleWhenUnlocked,\n                 kSecUseDataProtectionKeychain: true,\n                 kSecValueData: key.rawRepresentation] as [String: Any]\n\n\n    // Add the key data.\n    let status = SecItemAdd(query as CFDictionary, nil)\n    guard status == errSecSuccess else {\n        throw SEKPError.KeyStoreError(\"Unable to store item: \\(status.description)\")\n    }\n}\n\nfunc retrieveKeyFromKeyChain () throws -> SecureEnclave.P256.Signing.PrivateKey {\n    // Seek a generic password with the given account.\n    let query = [kSecClass: kSecClassGenericPassword,\n                 kSecAttrAccount: account,\n                 kSecUseDataProtectionKeychain: true,\n                 kSecReturnData: true] as [String: Any]\n\n\n    // Find and cast the result as data.", "explanation": "Here is a concise summary of the purpose and functionality of this block:\n\n**Purpose:** Stores and retrieves cryptographic keys in the KeyChain.\n\n**Functionality:** \n\n1. `storeKeyToKeyChain`: Stores a key in the KeyChain, treating it as a generic password.\n2. `retrieveKeyFromKeyChain`: Retrieves a stored key from the KeyChain and returns it as a private key.", "metadata": {"repo": "magiclabs/magic-ios", "file": "Sources/MagicSDK/Utilities/SEKP.swift", "chunk_number": 2, "total_chunks": 4}, "repository_explanation": "The `magiclabs/magic-ios` repository is a public codebase for the Magic iOS app. \n\nKey points:\n\n* Purpose: Official implementation of the Magic payment processing library for iOS\n* Content:\n\t+ Source code for the Magic iOS app and SDK\n\t+ Documentation and guides for developers", "file_summary": "Here is a concise summary of the file 'Sources/MagicSDK/Utilities/SEKP.swift':\n\n**Purpose:** Securely store and retrieve cryptographic keys in the Keychain, using the Secure Enclave for key creation.\n\n**Functionality:** Generates P256 key pairs, stores them securely, and provides interfaces for retrieval, deletion, and initialization from raw byte data."}
{"code": "    var item: CFTypeRef?\n    switch SecItemCopyMatching(query as CFDictionary, &item) {\n    case errSecSuccess:\n        guard let data = item as? Data else { return try createP256KeyInSE() }\n        return try SecureEnclave.P256.Signing.PrivateKey(rawRepresentation: data)  // Convert back to a key.\n    case errSecItemNotFound: return try createP256KeyInSE()\n    case let status: throw SEKPError.KeyStoreError(\"Keychain read failed: \\(status.description)\")\n    }\n}\n\nfunc deleteKeyFromKeyChain() throws {\n    let query = [kSecClass: kSecClassGenericPassword,\n                 kSecAttrAccount: account,\n                 kSecUseDataProtectionKeychain: true] as [String: Any]\n\n    let status = SecItemDelete(query as CFDictionary)\n    guard status == errSecSuccess || status == errSecItemNotFound else {\n        throw SEKPError.KeyStoreError(\"Unable to delete item: \\(status.description)\")\n    }\n}\n\n\nprotocol GenericPasswordConvertible: CustomStringConvertible {\n    /// Creates a key from a raw representation.", "explanation": "Here is a concise summary of the purpose and functionality of this block:\n\n**Purpose:** Retrieve a private key from the Keychain or create a new one in the Secure Enclave, and provide an interface to delete a key from the Keychain.\n\n**Functionality:**\n\n1. **Retrieve key**: Attempt to retrieve a private key from the Keychain using a query.\n2. **Convert key**: If successful, convert the retrieved data into a P256 signing private key object.\n3. **Create new key**: If retrieval fails, create a new P256 key in the Secure Enclave.\n4. **Delete key**: Provide an interface to delete a key from the Keychain using a query.", "metadata": {"repo": "magiclabs/magic-ios", "file": "Sources/MagicSDK/Utilities/SEKP.swift", "chunk_number": 3, "total_chunks": 4}, "repository_explanation": "The `magiclabs/magic-ios` repository is a public codebase for the Magic iOS app. \n\nKey points:\n\n* Purpose: Official implementation of the Magic payment processing library for iOS\n* Content:\n\t+ Source code for the Magic iOS app and SDK\n\t+ Documentation and guides for developers", "file_summary": "Here is a concise summary of the file 'Sources/MagicSDK/Utilities/SEKP.swift':\n\n**Purpose:** Securely store and retrieve cryptographic keys in the Keychain, using the Secure Enclave for key creation.\n\n**Functionality:** Generates P256 key pairs, stores them securely, and provides interfaces for retrieval, deletion, and initialization from raw byte data."}
{"code": "    init<D>(rawRepresentation data: D) throws where D: ContiguousBytes\n\n    /// A raw representation of the key.\n    var rawRepresentation: Data { get }\n}\n\n\nextension SecureEnclave.P256.Signing.PrivateKey: GenericPasswordConvertible {\n    public var description: String {\n        return \"\"\n    }\n\n    init<D>(rawRepresentation data: D) throws where D: ContiguousBytes {\n        try self.init(dataRepresentation: data as! Data)\n    }\n\n    var rawRepresentation: Data {\n        return dataRepresentation  // Contiguous bytes repackaged as a Data instance.\n    }\n}\n", "explanation": "Here is a summary of the purpose and functionality of this block:\n\n**Purpose:** Initialize a private key from a raw byte representation.\n\n**Functionality:** Takes a contiguous byte array (e.g. `Data`) and attempts to initialize a private key from it, returning the raw byte representation as a `Data` instance.", "metadata": {"repo": "magiclabs/magic-ios", "file": "Sources/MagicSDK/Utilities/SEKP.swift", "chunk_number": 4, "total_chunks": 4}, "repository_explanation": "The `magiclabs/magic-ios` repository is a public codebase for the Magic iOS app. \n\nKey points:\n\n* Purpose: Official implementation of the Magic payment processing library for iOS\n* Content:\n\t+ Source code for the Magic iOS app and SDK\n\t+ Documentation and guides for developers", "file_summary": "Here is a concise summary of the file 'Sources/MagicSDK/Utilities/SEKP.swift':\n\n**Purpose:** Securely store and retrieve cryptographic keys in the Keychain, using the Secure Enclave for key creation.\n\n**Functionality:** Generates P256 key pairs, stores them securely, and provides interfaces for retrieval, deletion, and initialization from raw byte data."}
{"code": "import XCTest\n@testable import MagicSDK\n\nfinal class MagicSDKTests: XCTestCase {\n    func testExample() throws {\n    }\n}\n", "explanation": "This is a test class for the Magic SDK, written in Swift using the XCTest framework. It defines a single test case with no implementation (i.e., an empty test method).", "metadata": {"repo": "magiclabs/magic-ios", "file": "Tests/MagicSDKTests/MagicSDKTests.swift", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "The `magiclabs/magic-ios` repository is a public codebase for the Magic iOS app. \n\nKey points:\n\n* Purpose: Official implementation of the Magic payment processing library for iOS\n* Content:\n\t+ Source code for the Magic iOS app and SDK\n\t+ Documentation and guides for developers", "file_summary": "Here is a concise summary of the file 'Tests/MagicSDKTests/MagicSDKTests.swift':\n\n**Magic SDK Test Class**\nA Swift XCTest class for testing the Magic SDK, containing an unimplemented test case."}

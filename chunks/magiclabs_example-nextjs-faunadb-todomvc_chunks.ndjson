{"code": "# We\u2019ll use the NEXT_PUBLIC_ prefix\n# to expose this variable to the browser.\n# See: https://nextjs.org/docs/basic-features/environment-variables\nNEXT_PUBLIC_MAGIC_PUBLISHABLE_KEY=\n\nMAGIC_SECRET_KEY=\n\nFAUNADB_SECRET_KEY=\n\n# Use your database's region-specific domain\n# See: https://docs.fauna.com/fauna/current/api/fql/region_groups\nFAUNADB_DOMAIN=db.fauna.com\n\n# We'll use this to encrypt session cookies\n# for our application!\nENCRYPTION_SECRET=this-is-a-secret-value-with-at-least-32-characters\n", "explanation": "This block defines a set of environment variables for a Next.js project, exposing sensitive data (API keys, secrets) to the browser in a secure manner using the `NEXT_PUBLIC_` prefix.", "metadata": {"repo": "magiclabs/example-nextjs-faunadb-todomvc", "file": ".env.local.example", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise explanation:\n\n**Repository Name:** `magiclabs/example-nextjs-faunadb-todomvc`\n\n**Purpose:** A demonstration of a Next.js app using FaunaDB as a backend database.\n\n**Content:**\n\n* A simple TodoMVC implementation in Next.js\n* Integration with FaunaDB for data storage and retrieval\n\nThis repository showcases how to use FaunaDB in conjunction with Next.js, providing a basic example of a real-world application.", "file_summary": "Here is a concise and to-the-point summary:\n\n`.env.local.example` sets up Next.js environment variables with sensitive data (e.g. API keys) securely exposed to the browser via `NEXT_PUBLIC_` prefix."}
{"code": "# FaunaDB with Magic Authentication (featuring Next.js)\n\nFollow along with [the official tutorial](https://docs.magic.link/guides/todomvc) to build your own FaunaDB-powered TodoMVC app with Magic passwordless login!\n\n\ud83d\udc49 See the [live demo](https://example-nextjs-faunadb-todomvc.vercel.app/login)\n\n## Deploy your own\n\nDeploy the example with [Vercel](https://vercel.com/docs):\n\n[![Deploy with Vercel](https://vercel.com/button)](https://vercel.com/new/git/external?repository-url=https%3A%2F%2Fgithub.com%2Fmagiclabs%2Fexample-nextjs-faunadb-todomvc&env=NEXT_PUBLIC_MAGIC_PUBLISHABLE_KEY,MAGIC_SECRET_KEY,FAUNADB_SECRET_KEY,ENCRYPTION_SECRET)\n\n## Configuration\n\nLogin to the [Magic Dashboard](https://dashboard.magic.link/) to get API keys for your application.\n\n![Magic Dashboard](https://gblobscdn.gitbook.com/assets%2F-M1XNjqusnKyXZc7t7qQ%2F-M3HsSftOAghkNs-ttU3%2F-M3HsllfdwdDmeFXBK3U%2Fdashboard-pk.png?alt=media&token=4d6e7543-ae20-4355-951c-c6421b8f1b5f)\n", "explanation": "**Summary:**\n\nThis block provides a guide on how to build a FaunaDB-powered TodoMVC app with Magic passwordless login using Next.js, along with a live demo and deployment instructions via Vercel.", "metadata": {"repo": "magiclabs/example-nextjs-faunadb-todomvc", "file": "README.md", "chunk_number": 1, "total_chunks": 3}, "repository_explanation": "Here is a concise explanation:\n\n**Repository Name:** `magiclabs/example-nextjs-faunadb-todomvc`\n\n**Purpose:** A demonstration of a Next.js app using FaunaDB as a backend database.\n\n**Content:**\n\n* A simple TodoMVC implementation in Next.js\n* Integration with FaunaDB for data storage and retrieval\n\nThis repository showcases how to use FaunaDB in conjunction with Next.js, providing a basic example of a real-world application.", "file_summary": "Here is a holistic summary of the file 'README.md':\n\nThis README guides you through setting up a TodoMVC app with FaunaDB-powered backend, Magic passwordless login, and Next.js frontend, including live demo and deployment instructions via Vercel. It also covers configuring environment variables for a Vercel deployment and initializing a FaunaDB database."}
{"code": "Next, you'll create a FaunaDB database for your application [here](https://dashboard.fauna.com/db-new/). Once you've configured your database, you'll need to prepare it for the schema expected by this example code. Execute the step-by-step queries found in [`init.fql`](./init.fql) from either [FaunaDB's CLI](https://github.com/fauna/fauna-shell) or FaunaDB's Dashboard shell interface. Finally, you'll need to acquire an admin access key for your database (located in the `\"Security\"` page of FaunaDB's Dashboard sidebar).\n\nNext, create a `32` random string as your encryption secret. You can create one in the terminal with openssl running `openssl rand -base64 24`\n\nNext, copy the `.env.local.example` file in this directory to `.env.local` (this file is intentionally ignored by Git):\n\n```bash\ncp .env.local.example .env.local\n```\n\nThen, set each variable in `.env.local`:\n\n- `NEXT_PUBLIC_MAGIC_PUBLISHABLE_KEY` should look like `pk_test_abc` or `pk_live_ABC`", "explanation": "**Summary:**\n\nThis block sets up a FaunaDB database for an application by:\n\n1. Creating a new database in FaunaDB.\n2. Executing initial configuration queries from `init.fql`.\n3. Acquiring an admin access key.\n\nAdditionally, it generates a random encryption secret and configures environment variables in `.env.local` file.", "metadata": {"repo": "magiclabs/example-nextjs-faunadb-todomvc", "file": "README.md", "chunk_number": 2, "total_chunks": 3}, "repository_explanation": "Here is a concise explanation:\n\n**Repository Name:** `magiclabs/example-nextjs-faunadb-todomvc`\n\n**Purpose:** A demonstration of a Next.js app using FaunaDB as a backend database.\n\n**Content:**\n\n* A simple TodoMVC implementation in Next.js\n* Integration with FaunaDB for data storage and retrieval\n\nThis repository showcases how to use FaunaDB in conjunction with Next.js, providing a basic example of a real-world application.", "file_summary": "Here is a holistic summary of the file 'README.md':\n\nThis README guides you through setting up a TodoMVC app with FaunaDB-powered backend, Magic passwordless login, and Next.js frontend, including live demo and deployment instructions via Vercel. It also covers configuring environment variables for a Vercel deployment and initializing a FaunaDB database."}
{"code": "- `MAGIC_SECRET_KEY` should look like `sk_test_ABC` or `sk_live_ABC`\n- `FAUNADB_SECRET_KEY` should look like `fnRB4Ld...`\n- `ENCRYPTION_SECRET` should look like a random string of `32` chars\n\nTo complete your deployment on Vercel, you'll need to configure some environment variables with the [Environment Variables UI](https://vercel.com/blog/environment-variables-ui) or using the [Vercel CLI](https://vercel.com/download) ([Documentation](https://vercel.com/docs/cli#commands/env)).\n\nInstall [Vercel CLI](https://vercel.com/download); log in to your account from the CLI; link your project; then run the following command to add the `NEXT_PUBLIC_MAGIC_PUBLISHABLE_KEY`, `MAGIC_SECRET_KEY`, `FAUNADB_SECRET_KEY`, and `ENCRYPTION_SECRET` environment variables.\n\n```bash\nvercel env add\n```\n", "explanation": "**Purpose:** Configure environment variables for a Vercel deployment.\n**Functionality:** Set four specific secret keys: MAGIC_PUBLISHABLE_KEY, MAGIC_SECRET_KEY, FAUNADB_SECRET_KEY, and ENCRYPTION_SECRET using the Vercel CLI or UI.", "metadata": {"repo": "magiclabs/example-nextjs-faunadb-todomvc", "file": "README.md", "chunk_number": 3, "total_chunks": 3}, "repository_explanation": "Here is a concise explanation:\n\n**Repository Name:** `magiclabs/example-nextjs-faunadb-todomvc`\n\n**Purpose:** A demonstration of a Next.js app using FaunaDB as a backend database.\n\n**Content:**\n\n* A simple TodoMVC implementation in Next.js\n* Integration with FaunaDB for data storage and retrieval\n\nThis repository showcases how to use FaunaDB in conjunction with Next.js, providing a basic example of a real-world application.", "file_summary": "Here is a holistic summary of the file 'README.md':\n\nThis README guides you through setting up a TodoMVC app with FaunaDB-powered backend, Magic passwordless login, and Next.js frontend, including live demo and deployment instructions via Vercel. It also covers configuring environment variables for a Vercel deployment and initializing a FaunaDB database."}
{"code": "import React, { useCallback } from 'react'\nimport { v4 as uuid } from 'uuid'\n\nexport default function AddTodo({ todos, mutateTodos }) {\n  const addTodo = useCallback((e) => {\n    const title = e.target.value\n    if (title) {\n      e.preventDefault()\n      e.target.value = ''\n      const tempID = uuid()\n\n      // Immediately update local state so we don't\n      // have to wait for remote server to finish processing the request.\n      mutateTodos(currTodos => [...currTodos, { id: tempID, title, completed: false, loading: true }], false)\n\n      // Send a `POST` request to add remote todo state,\n      // then re-validate our local todo state.\n      fetch('/api/todo', {\n          method: 'POST',\n          body: JSON.stringify({ title })\n        })\n        .then(() => mutateTodos())\n    }\n  }, [mutateTodos])\n\n  const addTodoOnPressEnter = useCallback(async (e) => {\n    if (e.keyCode === 13) {\n      addTodo(e)\n    }\n  }, [addTodo])\n\n  const hasActiveTodos = !!todos.find(todo => !todo.completed)\n", "explanation": "**Purpose:** A React component that allows adding new todo items.\n\n**Functionality:**\n\n* Allows user input for a todo title.\n* Adds a new todo item to local state when Enter is pressed or the \"add\" button is clicked.\n* Sends a POST request to a remote server to update the remote state.\n* Re-fetches the updated todos from the remote server and updates the local state.", "metadata": {"repo": "magiclabs/example-nextjs-faunadb-todomvc", "file": "components/add-todo.js", "chunk_number": 1, "total_chunks": 3}, "repository_explanation": "Here is a concise explanation:\n\n**Repository Name:** `magiclabs/example-nextjs-faunadb-todomvc`\n\n**Purpose:** A demonstration of a Next.js app using FaunaDB as a backend database.\n\n**Content:**\n\n* A simple TodoMVC implementation in Next.js\n* Integration with FaunaDB for data storage and retrieval\n\nThis repository showcases how to use FaunaDB in conjunction with Next.js, providing a basic example of a real-world application.", "file_summary": "Here is a concise summary of the file 'components/add-todo.js':\n\n**Adds a new todo item**\n\nThis React component allows adding new todos by inputting a title, which is then sent to a remote server and synced with local state."}
{"code": "  const toggleAllTodos = useCallback(() => {\n    if (hasActiveTodos) {\n      mutateTodos(currTodos => currTodos.map(todo => ({ ...todo, completed: true })), false)\n      fetch('/api/todos', { method: 'PATCH', body: JSON.stringify({ completed: true }) }).then(() => mutateTodos())\n    } else {\n      mutateTodos(currTodos => currTodos.map(todo => ({ ...todo, completed: false })), false)\n      fetch('/api/todos', { method: 'PATCH', body: JSON.stringify({ completed: false }) }).then(() => mutateTodos())\n    }\n  }, [hasActiveTodos])\n\n  return (<>\n    <div>\n      <button\n        disabled={!todos.length}\n        onClick={toggleAllTodos}\n        aria-label={hasActiveTodos\n          ? 'Mark all todos as complete'\n          : 'Mark all todos as incomplete'}>\n          \u276f\n      </button>\n\n      <input\n        aria-label=\"What needs to be done?\"\n        placeholder=\"What needs to be done?\"\n        onBlur={addTodo}\n        onKeyDown={addTodoOnPressEnter} />\n    </div>\n\n    <style jsx>{`\n      div {\n        display: flex;\n      }\n", "explanation": "Here is a concise summary:\n\n**Block Purpose:** Toggles completion status of all todos.\n\n**Functionality:** Marks all existing todos as complete or incomplete based on whether there are active (incomplete) todos. Updates API data accordingly.", "metadata": {"repo": "magiclabs/example-nextjs-faunadb-todomvc", "file": "components/add-todo.js", "chunk_number": 2, "total_chunks": 3}, "repository_explanation": "Here is a concise explanation:\n\n**Repository Name:** `magiclabs/example-nextjs-faunadb-todomvc`\n\n**Purpose:** A demonstration of a Next.js app using FaunaDB as a backend database.\n\n**Content:**\n\n* A simple TodoMVC implementation in Next.js\n* Integration with FaunaDB for data storage and retrieval\n\nThis repository showcases how to use FaunaDB in conjunction with Next.js, providing a basic example of a real-world application.", "file_summary": "Here is a concise summary of the file 'components/add-todo.js':\n\n**Adds a new todo item**\n\nThis React component allows adding new todos by inputting a title, which is then sent to a remote server and synced with local state."}
{"code": "      input {\n        flex-grow: 1;\n        border: none;\n        padding: 16px;\n        font-size: 24px;\n        font-weight: 100;\n        color: #4d4d4d;\n      }\n\n      input::placeholder {\n        color: #e2dcff;\n        font-style: italic;\n      }\n\n      input:focus {\n        outline: none;\n      }\n\n      button {\n        font-size: 22px;\n        color: #e6e6e6;\n        padding: 0 27px;\n        background: transparent;\n        border: none;\n        transform: rotate(90deg);\n        cursor: pointer;\n        transition: all 0.2s;\n      }\n\n      button:hover {\n        color: #4d4d4d\n      }\n\n      button:disabled {\n        opacity: 0;\n        pointer-events: none;\n      }\n    `}</style>\n  </>)\n}\n", "explanation": "This block is a CSS style definition for two HTML elements: an input field and a button.\n\n* The input field has styles for appearance, placeholder text, and focus states.\n* The button has styles for font, color, size, padding, rotation, cursor, and hover/ disabled states.", "metadata": {"repo": "magiclabs/example-nextjs-faunadb-todomvc", "file": "components/add-todo.js", "chunk_number": 3, "total_chunks": 3}, "repository_explanation": "Here is a concise explanation:\n\n**Repository Name:** `magiclabs/example-nextjs-faunadb-todomvc`\n\n**Purpose:** A demonstration of a Next.js app using FaunaDB as a backend database.\n\n**Content:**\n\n* A simple TodoMVC implementation in Next.js\n* Integration with FaunaDB for data storage and retrieval\n\nThis repository showcases how to use FaunaDB in conjunction with Next.js, providing a basic example of a real-world application.", "file_summary": "Here is a concise summary of the file 'components/add-todo.js':\n\n**Adds a new todo item**\n\nThis React component allows adding new todos by inputting a title, which is then sent to a remote server and synced with local state."}
{"code": "import React from 'react'\nimport classNames from 'classnames'\n\nexport default function Button(props) {\n  const { className, isActive, ...otherProps } = props\n\n  return (<>\n    <button className={classNames(className, isActive && 'active')} {...otherProps} />\n\n    <style jsx>{`\n      button {\n        padding: 0.5rem 1rem;\n        cursor: pointer;\n        background: #fff;\n        border: 1px solid #bdbdbd;\n        border-radius: 4px;\n        box-shadow: 0 0 0 3px transparent;\n        transition: all 0.2s;\n      }\n\n      button:hover {\n        border-color: #6851ff;\n      }\n\n      button:focus {\n        outline: none;\n        border-color: #6851ff;\n        box-shadow: 0 0 0 3px #e2dcff;\n      }\n\n      button:active,\n      button.active {\n        outline: none;\n        border-color: #6851ff;\n        box-shadow: 0 0 0 3px #a796ff;\n      }\n\n      button:disabled {\n        pointer-events: none;\n      }\n    `}</style>\n  </>)\n}\n", "explanation": "Here is a concise summary:\n\n**Button Component**\n\nPurpose: A reusable button component that can be customized with styles and props.\n\nFunctionality: Renders a styled `<button>` element with optional active, hover, focus, and disabled states. Accepts `className` and other props through React.", "metadata": {"repo": "magiclabs/example-nextjs-faunadb-todomvc", "file": "components/button.js", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise explanation:\n\n**Repository Name:** `magiclabs/example-nextjs-faunadb-todomvc`\n\n**Purpose:** A demonstration of a Next.js app using FaunaDB as a backend database.\n\n**Content:**\n\n* A simple TodoMVC implementation in Next.js\n* Integration with FaunaDB for data storage and retrieval\n\nThis repository showcases how to use FaunaDB in conjunction with Next.js, providing a basic example of a real-world application.", "file_summary": "Here is a concise and holistic summary of the file 'components/button.js':\n\n**Button Component**\n\nA reusable button component that can be customized with styles and props, rendering a styled `<button>` element with optional states (active, hover, focus, disabled) and accepting `className` and other props."}
{"code": "import Head from 'next/head'\nimport { useUser } from '../lib/hooks'\n\nexport default function Layout({ children }) {\n  const { user } = useUser()\n\n  return (<>\n    <Head>\n      <title>Magic</title>\n      <link rel=\"icon\" href=\"/favicon.ico\" />\n    </Head>\n\n    <header>\n      <h1>Todos</h1>\n    </header>\n\n    <main>\n      <div className=\"container\">{children}</div>\n      {user && <div className=\"current-user\">\n        <span>{user.email}</span>\n        <a href=\"/api/logout\">Logout</a>\n      </div>}\n    </main>\n\n    <footer>\n      <a\n        href=\"https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        Powered by <img src=\"/vercel.svg\" alt=\"Vercel Logo\" />\n      </a>\n    </footer>\n\n    <style jsx global>{`\n      *,\n      *::before,\n      *::after {\n        box-sizing: border-box;\n      }\n\n      body {\n        margin: 0;\n        color: #333;\n        font: 14px 'Helvetica Neue', Helvetica, Arial, sans-serif;\n      }\n", "explanation": "**Summary**\n\nThis block is a reusable layout component for a Next.js app. It renders a basic HTML structure with a header, main content area, and footer. The component also checks if a user is logged in using the `useUser` hook from `lib/hooks`, and displays their email and logout link accordingly.", "metadata": {"repo": "magiclabs/example-nextjs-faunadb-todomvc", "file": "components/layout.js", "chunk_number": 1, "total_chunks": 3}, "repository_explanation": "Here is a concise explanation:\n\n**Repository Name:** `magiclabs/example-nextjs-faunadb-todomvc`\n\n**Purpose:** A demonstration of a Next.js app using FaunaDB as a backend database.\n\n**Content:**\n\n* A simple TodoMVC implementation in Next.js\n* Integration with FaunaDB for data storage and retrieval\n\nThis repository showcases how to use FaunaDB in conjunction with Next.js, providing a basic example of a real-world application.", "file_summary": "Here is a holistic summary of the file 'components/layout.js':\n\nThis reusable layout component for a Next.js app renders a basic HTML structure with header, main content area, and footer. It also checks user login status and displays relevant information (email and logout link)."}
{"code": "      header {\n        padding: 50px 0 35px 0;\n      }\n\n      header h1 {\n        color: #e2dcff;\n        font-size: 100px;\n        font-weight: 100;\n        text-transform: lowercase;\n        text-align: center;\n        margin: 0;\n        line-height: 1;\n      }\n\n      .container {\n        max-width: 550px;\n        margin: 0 auto;\n        border-radius: 10px;\n        box-shadow: 0 0 25px rgba(0, 0, 0, 0.15);\n        overflow: hidden;\n      }\n\n      .current-user {\n        display: flex;\n        justify-content: flex-end;\n        max-width: 550px;\n        margin: 0 auto;\n        margin-top: 15px;\n      }\n\n      .current-user > span {\n        font-weight: 600;\n        margin-right: 10px;\n      }\n\n      .current-user > a {\n        margin-right: 25px;\n      }\n\n      footer {\n        width: 100%;\n        height: 100px;\n        display: flex;\n        opacity: 0.5;\n        justify-content: center;\n        align-items: center;\n        margin-top: 75px;\n      }\n\n      footer a {\n        display: inline-flex;\n        color: black;", "explanation": "Here is a concise summary of the block's purpose and functionality:\n\n**Summary:** This CSS code defines styles for various HTML elements, including header, container, current-user information, and footer.\n\n**Key Functionality:**\n\n* Styles the header with padding and typography\n* Formats the container with a maximum width, rounded corners, and box shadow\n* Displays user information in a flexible layout\n* Defines a footer with a fixed height, opacity, and centered text.", "metadata": {"repo": "magiclabs/example-nextjs-faunadb-todomvc", "file": "components/layout.js", "chunk_number": 2, "total_chunks": 3}, "repository_explanation": "Here is a concise explanation:\n\n**Repository Name:** `magiclabs/example-nextjs-faunadb-todomvc`\n\n**Purpose:** A demonstration of a Next.js app using FaunaDB as a backend database.\n\n**Content:**\n\n* A simple TodoMVC implementation in Next.js\n* Integration with FaunaDB for data storage and retrieval\n\nThis repository showcases how to use FaunaDB in conjunction with Next.js, providing a basic example of a real-world application.", "file_summary": "Here is a holistic summary of the file 'components/layout.js':\n\nThis reusable layout component for a Next.js app renders a basic HTML structure with header, main content area, and footer. It also checks user login status and displays relevant information (email and logout link)."}
{"code": "        text-decoration: none;\n      }\n\n      footer img {\n        margin-left: 3px;\n      }\n    `}</style>\n  </>)\n}\n", "explanation": "This block defines a CSS stylesheet, specifically styling rules for HTML elements with classes \"footer\" and a nested image within that class.", "metadata": {"repo": "magiclabs/example-nextjs-faunadb-todomvc", "file": "components/layout.js", "chunk_number": 3, "total_chunks": 3}, "repository_explanation": "Here is a concise explanation:\n\n**Repository Name:** `magiclabs/example-nextjs-faunadb-todomvc`\n\n**Purpose:** A demonstration of a Next.js app using FaunaDB as a backend database.\n\n**Content:**\n\n* A simple TodoMVC implementation in Next.js\n* Integration with FaunaDB for data storage and retrieval\n\nThis repository showcases how to use FaunaDB in conjunction with Next.js, providing a basic example of a real-world application.", "file_summary": "Here is a holistic summary of the file 'components/layout.js':\n\nThis reusable layout component for a Next.js app renders a basic HTML structure with header, main content area, and footer. It also checks user login status and displays relevant information (email and logout link)."}
{"code": "import React from 'react';\n\nexport default function Spinner() {\n  return <>\n    <div className=\"spinner\" aria-label=\"Loading\"></div>\n\n    <style jsx>{`\n      .spinner {\n        border: 5px solid transparent;\n        border-top: 5px solid #6851ff;\n        border-radius: 50%;\n        width: 50px;\n        height: 50px;\n        animation: spin 1s linear infinite;\n      }\n\n      @keyframes spin {\n        0% { transform: rotate(0deg); }\n        100% { transform: rotate(360deg); }\n      }\n    `}</style>\n  </>\n}\n", "explanation": "**Purpose:** A reusable React component that displays a loading animation (spinner).\n\n**Functionality:** Renders a circular spinner with a rotating effect, indicating loading or processing activity.", "metadata": {"repo": "magiclabs/example-nextjs-faunadb-todomvc", "file": "components/spinner.js", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise explanation:\n\n**Repository Name:** `magiclabs/example-nextjs-faunadb-todomvc`\n\n**Purpose:** A demonstration of a Next.js app using FaunaDB as a backend database.\n\n**Content:**\n\n* A simple TodoMVC implementation in Next.js\n* Integration with FaunaDB for data storage and retrieval\n\nThis repository showcases how to use FaunaDB in conjunction with Next.js, providing a basic example of a real-world application.", "file_summary": "Here is a holistic summary of the file 'components/spinner.js':\n\n**A Reusable Spinner Component**\n\nDisplays a rotating circular animation to indicate loading or processing activity in React applications."}
{"code": "import React, { useCallback } from 'react'\nimport classNames from 'classnames'\n\nexport default function TodoItem({ id, title, completed, loading, mutateTodos }) {\n  const updateTodo = useCallback((data) => {\n    // Immediately update local state so we don't\n    // have to wait for remote server to finish processing the request.\n    mutateTodos(currTodos => {\n      return currTodos.map(todo => id === todo.id ? { ...todo, ...data }: todo)\n    }, false)\n\n    // Send a `PATCH` request to update remote todo state,\n    // then re-validate our local todo state.\n    fetch(`/api/todo?id=${id}`, { method: 'PATCH', body: JSON.stringify(data) })\n      .then(() => mutateTodos())\n  }, [id])\n\n  const deleteTodo = useCallback(async () => {\n    // Immediately remove the todo from local state so we don't\n    // have to wait for remote server to finish processing the request.\n    mutateTodos(currTodos => [...currTodos].filter(todo => id !== todo.id), false)\n\n    // Send a `DELETE` request to update remote todo state,", "explanation": "**Summary:**\n\nThis block is a React functional component named `TodoItem`. It displays a single todo item with its title, completion status, and loading indicator. The component has two main functions:\n\n1. **Update Todo**: Updates the todo's local state and sends a PATCH request to update the remote server.\n2. **Delete Todo**: Removes the todo from local state and sends a DELETE request to update the remote server.\n\nThe component uses React hooks (useCallback) to memoize the `updateTodo` and `deleteTodo` functions, ensuring they are only recreated when necessary.", "metadata": {"repo": "magiclabs/example-nextjs-faunadb-todomvc", "file": "components/todo-item.js", "chunk_number": 1, "total_chunks": 4}, "repository_explanation": "Here is a concise explanation:\n\n**Repository Name:** `magiclabs/example-nextjs-faunadb-todomvc`\n\n**Purpose:** A demonstration of a Next.js app using FaunaDB as a backend database.\n\n**Content:**\n\n* A simple TodoMVC implementation in Next.js\n* Integration with FaunaDB for data storage and retrieval\n\nThis repository showcases how to use FaunaDB in conjunction with Next.js, providing a basic example of a real-world application.", "file_summary": "Here is a concise and to-the-point holistic summary of the file 'components/todo-item.js':\n\n**Summary:** \nThe `TodoItem` component displays a single todo item, allowing updates and deletion via PATCH and DELETE requests respectively.\nIt handles user input for completion and title changes, validating on ID changes and enabling toggle functionality."}
{"code": "    // then re-validate our local todo state.\n    await fetch(`/api/todo?id=${id}`, { method: 'DELETE' })\n  }, [id])\n\n  const updateTodoCompletedStateOnInputChange = useCallback(async (e) => {\n    e.preventDefault()\n    updateTodo({ completed: !completed})\n  }, [updateTodo, completed])\n\n  const updateTodoTitleOnInputBlur = useCallback((e) => {\n    e.preventDefault()\n    if (e.target.value) {\n      updateTodo({ title: e.target.value })\n    } else {\n      e.target.value = title\n    }\n  }, [updateTodo, title])\n\n  const updateTodoTitleOnPressEnter = useCallback((e) => {\n    if (e.keyCode === 13) {\n      updateTodoTitleOnInputBlur(e)\n    }\n  }, [updateTodoTitleOnInputBlur])\n\n  return (<>\n    <div className=\"todo\">\n      <input\n        className=\"checkbox\"\n        disabled={loading}\n        type=\"checkbox\"\n        checked={completed}\n        onChange={updateTodoCompletedStateOnInputChange} />\n\n      <input\n        className={classNames('title', completed && 'completed')}\n        defaultValue={title}\n        placeholder={title}", "explanation": "Here is a concise summary of the purpose and functionality:\n\n**Block Purpose:** Update Todo item state (completion and title) based on user input.\n\n**Functionality:**\n\n* Re-validate Todo item completion when ID changes.\n* Toggle Todo item completion on checkbox change.\n* Update Todo item title on input blur or press enter.", "metadata": {"repo": "magiclabs/example-nextjs-faunadb-todomvc", "file": "components/todo-item.js", "chunk_number": 2, "total_chunks": 4}, "repository_explanation": "Here is a concise explanation:\n\n**Repository Name:** `magiclabs/example-nextjs-faunadb-todomvc`\n\n**Purpose:** A demonstration of a Next.js app using FaunaDB as a backend database.\n\n**Content:**\n\n* A simple TodoMVC implementation in Next.js\n* Integration with FaunaDB for data storage and retrieval\n\nThis repository showcases how to use FaunaDB in conjunction with Next.js, providing a basic example of a real-world application.", "file_summary": "Here is a concise and to-the-point holistic summary of the file 'components/todo-item.js':\n\n**Summary:** \nThe `TodoItem` component displays a single todo item, allowing updates and deletion via PATCH and DELETE requests respectively.\nIt handles user input for completion and title changes, validating on ID changes and enabling toggle functionality."}
{"code": "        onBlur={updateTodoTitleOnInputBlur}\n        onKeyDown={updateTodoTitleOnPressEnter} />\n\n      <button className=\"delete-button\" disabled={loading} onClick={deleteTodo}>x</button>\n    </div>\n\n    <style jsx>{`\n      .todo {\n        display: flex;\n        align-items: center;\n        border-top: solid 1px #eeeeee;\n      }\n\n      .title {\n        flex-grow: 1;\n        border: none;\n        padding: 16px;\n        font-size: 24px;\n        font-weight: 100;\n        color: #4d4d4d;\n        opacity: 1;\n        transition: all 0.2s;\n      }\n\n      .title::placeholder {\n        color: #e2dcff;\n        font-style: italic;\n      }\n\n      .title:focus {\n        outline: none;\n      }\n\n      .title.completed {\n        text-decoration: line-through;\n        opacity: 0.5;\n      }\n\n      .todo:hover .delete-button {\n        opacity: 1;\n      }\n\n      .delete-button {\n        opacity: 0;\n        border: none;\n        background: transparent;\n        padding: 0 30px;\n        cursor: pointer;\n        color: #ff5635;\n        font-size: 20px;", "explanation": "**Summary**\n\nThis block contains two event handlers and a button:\n\n* An input field that triggers `updateTodoTitleOnInputBlur` when blurred and `updateTodoTitleOnPressEnter` when enter is pressed.\n* A delete button (`x`) that removes the todo item when clicked, disabled while loading.", "metadata": {"repo": "magiclabs/example-nextjs-faunadb-todomvc", "file": "components/todo-item.js", "chunk_number": 3, "total_chunks": 4}, "repository_explanation": "Here is a concise explanation:\n\n**Repository Name:** `magiclabs/example-nextjs-faunadb-todomvc`\n\n**Purpose:** A demonstration of a Next.js app using FaunaDB as a backend database.\n\n**Content:**\n\n* A simple TodoMVC implementation in Next.js\n* Integration with FaunaDB for data storage and retrieval\n\nThis repository showcases how to use FaunaDB in conjunction with Next.js, providing a basic example of a real-world application.", "file_summary": "Here is a concise and to-the-point holistic summary of the file 'components/todo-item.js':\n\n**Summary:** \nThe `TodoItem` component displays a single todo item, allowing updates and deletion via PATCH and DELETE requests respectively.\nIt handles user input for completion and title changes, validating on ID changes and enabling toggle functionality."}
{"code": "        font-weight: 100;\n        transform: scale(1);\n        transition: all 0.2s;\n      }\n\n      .delete-button:hover {\n        transform: scale(1.2);\n      }\n\n      .checkbox {\n        margin: 0 25px;\n      }\n    `}</style>\n  </>)\n}\n", "explanation": "This block is a CSS stylesheet snippet that styles two HTML elements:\n\n* A \"delete-button\" element, which changes its scale when hovered over.\n* A \".checkbox\" element, which adds a margin of 25px.\n\nIn summary: Styles delete button and checkbox elements with hover effect and spacing.", "metadata": {"repo": "magiclabs/example-nextjs-faunadb-todomvc", "file": "components/todo-item.js", "chunk_number": 4, "total_chunks": 4}, "repository_explanation": "Here is a concise explanation:\n\n**Repository Name:** `magiclabs/example-nextjs-faunadb-todomvc`\n\n**Purpose:** A demonstration of a Next.js app using FaunaDB as a backend database.\n\n**Content:**\n\n* A simple TodoMVC implementation in Next.js\n* Integration with FaunaDB for data storage and retrieval\n\nThis repository showcases how to use FaunaDB in conjunction with Next.js, providing a basic example of a real-world application.", "file_summary": "Here is a concise and to-the-point holistic summary of the file 'components/todo-item.js':\n\n**Summary:** \nThe `TodoItem` component displays a single todo item, allowing updates and deletion via PATCH and DELETE requests respectively.\nIt handles user input for completion and title changes, validating on ID changes and enabling toggle functionality."}
{"code": "# IMPORTANT NOTE: Run each step as a separate query to FaunaDB!\n#\n# Why?\n# Because step #2 depends on step #1\n# and it's better to be organized!\n\n# Step 1: Create a \"users\" collection\nCreateCollection({ name: \"users\" });\n\n# Step 2: Create \"todos\" collection\nCreateCollection({ name: \"todos\" });\n\n# Step 3: Create all relevant Indexes\nCreateIndex({\n  name: \"users_by_email\",\n  source: Collection(\"users\"),\n  terms: [{ field: [\"data\", \"email\"] }],\n  unique: true\n});\nCreateIndex({\n  name: \"all_todos\",\n  source: Collection(\"todos\"),\n});\nCreateIndex({\n  name: \"todos_by_completed_state\",\n  source: Collection(\"todos\"),\n  terms: [{ field: [\"data\", \"completed\"] }],\n});\n\n# Step 4: Add ABAC role\nCreateRole({\n  name: \"todo-user-role\",\n  membership: [\n    {\n      resource: Collection(\"users\")\n    }\n  ],\n  privileges: [\n    {\n      resource: Collection(\"todos\"),\n      actions: {\n        read: Query(\n          Lambda(\n            \"todoRef\",\n            Let(\n              {\n                todo: Get(Var(\"todoRef\")),", "explanation": "Here is a concise summary of the purpose and functionality of this block:\n\n**Purpose:** Set up FaunaDB collections, indexes, and roles for managing users and todos.\n\n**Functionality:**\n\n1. Creates \"users\" and \"todos\" collections.\n2. Defines indexes for:\n\t* Retrieving users by email\n\t* Retrieving all todos\n\t* Retrieving todos by completion state\n3. Adds an ABAC (Attribute-Based Access Control) role for accessing user data in the \"users\" collection.", "metadata": {"repo": "magiclabs/example-nextjs-faunadb-todomvc", "file": "init.fql", "chunk_number": 1, "total_chunks": 2}, "repository_explanation": "Here is a concise explanation:\n\n**Repository Name:** `magiclabs/example-nextjs-faunadb-todomvc`\n\n**Purpose:** A demonstration of a Next.js app using FaunaDB as a backend database.\n\n**Content:**\n\n* A simple TodoMVC implementation in Next.js\n* Integration with FaunaDB for data storage and retrieval\n\nThis repository showcases how to use FaunaDB in conjunction with Next.js, providing a basic example of a real-world application.", "file_summary": "Here is a concise summary of the file 'init.fql':\n\n**Summary:** Initializes FaunaDB with collections, indexes, and roles for managing users and todos, enabling secure CRUD access control based on user identity."}
{"code": "                userRef: Select([\"data\", \"user\"], Var(\"todo\"))\n              },\n              Equals(Var(\"userRef\"), CurrentIdentity())\n            )\n          )\n        ),\n        write: true,\n        create: true,\n        delete: true,\n        history_read: false,\n        history_write: false,\n        unrestricted_read: false\n      }\n    },\n    {\n      resource: Index(\"all_todos\"),\n      actions: {\n        unrestricted_read: false,\n        read: true\n      }\n    },\n    {\n      resource: Index(\"todos_by_completed_state\"),\n      actions: {\n        unrestricted_read: false,\n        read: true\n      }\n    },\n    {\n      resource: Index(\"users_by_email\"),\n      actions: {\n        unrestricted_read: false,\n        read: true\n      }\n    }\n  ]\n})\n", "explanation": "This block defines permissions for a database. It grants CRUD (create, read, update, delete) access to data related to the current user's identity, while restricting or denying access to other resources.", "metadata": {"repo": "magiclabs/example-nextjs-faunadb-todomvc", "file": "init.fql", "chunk_number": 2, "total_chunks": 2}, "repository_explanation": "Here is a concise explanation:\n\n**Repository Name:** `magiclabs/example-nextjs-faunadb-todomvc`\n\n**Purpose:** A demonstration of a Next.js app using FaunaDB as a backend database.\n\n**Content:**\n\n* A simple TodoMVC implementation in Next.js\n* Integration with FaunaDB for data storage and retrieval\n\nThis repository showcases how to use FaunaDB in conjunction with Next.js, providing a basic example of a real-world application.", "file_summary": "Here is a concise summary of the file 'init.fql':\n\n**Summary:** Initializes FaunaDB with collections, indexes, and roles for managing users and todos, enabling secure CRUD access control based on user identity."}
{"code": "import { serialize, parse } from 'cookie'\nimport { encrypt, decrypt } from './iron'\n\nconst TOKEN_NAME = 'session'\nconst MAX_AGE = 60 * 60 * 8 // 8 hours\n\nfunction parseCookies(req) {\n  // For API Routes we don't need to parse the cookies.\n  if (req.cookies) return req.cookies\n\n  // For pages we do need to parse the cookies.\n  const cookie = req.headers?.cookie\n  return parse(cookie || '')\n}\n\nexport async function createSession(res, data) {\n  const encryptedToken = await encrypt(data)\n\n  const cookie = serialize(TOKEN_NAME, encryptedToken, {\n    maxAge: MAX_AGE,\n    expires: new Date(Date.now() + MAX_AGE * 1000),\n    httpOnly: true,\n    secure: process.env.NODE_ENV === 'production',\n    path: '/',\n    sameSite: 'lax',\n  })\n\n  res.setHeader('Set-Cookie', cookie)\n}\n\nexport async function getSession(req) {\n  const cookies = parseCookies(req)\n  return decrypt(cookies?.[TOKEN_NAME]);\n}\n\nexport function removeSession(res) {\n  const cookie = serialize(TOKEN_NAME, '', {\n    maxAge: -1,\n    path: '/',\n  })\n", "explanation": "Here is a summary of the block's purpose and functionality:\n\n**Purpose:** Manages user sessions with secure encryption and token-based authentication.\n\n**Functionality:**\n\n* Encrypts and decrypts session data using the Iron library.\n* Sets, gets, and removes session cookies for API routes and pages.\n* Supports secure cookie settings (e.g., HTTPS-only, same-site enforcement).\n* Exports functions to create, get, and remove sessions.", "metadata": {"repo": "magiclabs/example-nextjs-faunadb-todomvc", "file": "lib/auth-cookies.js", "chunk_number": 1, "total_chunks": 2}, "repository_explanation": "Here is a concise explanation:\n\n**Repository Name:** `magiclabs/example-nextjs-faunadb-todomvc`\n\n**Purpose:** A demonstration of a Next.js app using FaunaDB as a backend database.\n\n**Content:**\n\n* A simple TodoMVC implementation in Next.js\n* Integration with FaunaDB for data storage and retrieval\n\nThis repository showcases how to use FaunaDB in conjunction with Next.js, providing a basic example of a real-world application.", "file_summary": "Here is a concise summary of `lib/auth-cookies.js`:\n\n**Purpose:** Manages user sessions securely through token-based authentication.\n\n**Key Features:**\n\n* Encrypts/decrypts session data with Iron library\n* Sets, gets, and removes secure cookies for API routes & pages\n* Supports HTTPS-only and same-site cookie settings"}
{"code": "  res.setHeader('Set-Cookie', cookie)\n}\n", "explanation": "This block sets a cookie with the specified name (cookie) on the client's browser using the HTTP response header.", "metadata": {"repo": "magiclabs/example-nextjs-faunadb-todomvc", "file": "lib/auth-cookies.js", "chunk_number": 2, "total_chunks": 2}, "repository_explanation": "Here is a concise explanation:\n\n**Repository Name:** `magiclabs/example-nextjs-faunadb-todomvc`\n\n**Purpose:** A demonstration of a Next.js app using FaunaDB as a backend database.\n\n**Content:**\n\n* A simple TodoMVC implementation in Next.js\n* Integration with FaunaDB for data storage and retrieval\n\nThis repository showcases how to use FaunaDB in conjunction with Next.js, providing a basic example of a real-world application.", "file_summary": "Here is a concise summary of `lib/auth-cookies.js`:\n\n**Purpose:** Manages user sessions securely through token-based authentication.\n\n**Key Features:**\n\n* Encrypts/decrypts session data with Iron library\n* Sets, gets, and removes secure cookies for API routes & pages\n* Supports HTTPS-only and same-site cookie settings"}
{"code": "import faunadb from 'faunadb'\n\n/** Alias to `faunadb.query` */\nexport const q = faunadb.query\n\n/**\n * Creates an authenticated FaunaDB client\n * configured with the given `secret`.\n */\nexport function getClient(secret) {\n  return new faunadb.Client({ secret, domain: process.env.FAUNADB_DOMAIN })\n}\n\n/** FaunaDB Client configured with our server secret. */\nexport const adminClient = getClient(process.env.FAUNADB_SECRET_KEY)\n", "explanation": "Here is a concise summary of the purpose and functionality of this block:\n\n**Purpose:** Initialize FaunaDB clients for authentication.\n\n**Functionality:**\n\n* Exposes `q` as an alias to `faunadb.query`.\n* Provides a function `getClient` to create authenticated FaunaDB clients.\n* Initializes an admin client with a server secret key.", "metadata": {"repo": "magiclabs/example-nextjs-faunadb-todomvc", "file": "lib/faunadb.js", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise explanation:\n\n**Repository Name:** `magiclabs/example-nextjs-faunadb-todomvc`\n\n**Purpose:** A demonstration of a Next.js app using FaunaDB as a backend database.\n\n**Content:**\n\n* A simple TodoMVC implementation in Next.js\n* Integration with FaunaDB for data storage and retrieval\n\nThis repository showcases how to use FaunaDB in conjunction with Next.js, providing a basic example of a real-world application.", "file_summary": "Here is a concise summary of the file 'lib/faunadb.js':\n\n**Purpose:** Initialize FaunaDB clients for authentication.\n\n**Functionality:** Provides access to FaunaDB through `q` alias, `getClient`, and an initialized admin client with server secret key."}
{"code": "import { useCallback, useEffect, useRef } from 'react'\nimport useSWR from 'swr'\nimport { get } from 'lodash'\n\nconst jsonFetcher = (selector) => (url) =>\n  fetch(url)\n    .then((r) => r.json())\n    .then((data) => selector ? get(data, selector, null) : data ?? null)\n\nexport function useAllTodos() {\n  const { data, isValidating, mutate } = useSWR('/api/todos', jsonFetcher('todos'))\n  return { todos: data ?? [], loading: isValidating, mutate }\n}\n\nexport function useUser() {\n  const { data, isValidating } = useSWR('/api/user', jsonFetcher())\n  const user = data?.user ?? null;\n  return { user, loading: isValidating };\n}\n\nexport function useIsMounted() {\n  const isMountedRef = useRef(false);\n\n  useEffect(() => {\n    isMountedRef.current = true;\n\n    return () => {\n      isMountedRef.current = false;\n    };\n  }, []);\n\n  return useCallback(() => isMountedRef.current, []);\n}\n\nexport function useFirstRender() {\n  const firstRender = useRef(true);\n\n  useEffect(() => {\n    firstRender.current = false;\n  }, []);\n", "explanation": "Here is a concise summary of the block's purpose and functionality:\n\n**Library:** React with SWR (react-query) library.\n\n**Functionality:**\n\n* Three custom hooks are exported:\n\t+ `useAllTodos`: fetches all todos from API, returns data, loading status, and mutate function.\n\t+ `useUser`: fetches user data from API, returns user object, and loading status.\n\t+ `useIsMounted` and `useFirstRender`: utility hooks to check if component is still mounted or has been rendered for the first time.", "metadata": {"repo": "magiclabs/example-nextjs-faunadb-todomvc", "file": "lib/hooks.js", "chunk_number": 1, "total_chunks": 2}, "repository_explanation": "Here is a concise explanation:\n\n**Repository Name:** `magiclabs/example-nextjs-faunadb-todomvc`\n\n**Purpose:** A demonstration of a Next.js app using FaunaDB as a backend database.\n\n**Content:**\n\n* A simple TodoMVC implementation in Next.js\n* Integration with FaunaDB for data storage and retrieval\n\nThis repository showcases how to use FaunaDB in conjunction with Next.js, providing a basic example of a real-world application.", "file_summary": "Here is a holistic summary of the file 'lib/hooks.js':\n\n**Summary:** \n\nThis file exports three custom hooks for managing data with React and SWR: `useAllTodos` for fetching todos, `useUser` for user data, and utility hooks `useIsMounted` and `useFirstRender`."}
{"code": "  return firstRender.current;\n}\n", "explanation": "This block returns a reference to an object (firstRender) stored in React's `useRef` hook, allowing access to its current value.", "metadata": {"repo": "magiclabs/example-nextjs-faunadb-todomvc", "file": "lib/hooks.js", "chunk_number": 2, "total_chunks": 2}, "repository_explanation": "Here is a concise explanation:\n\n**Repository Name:** `magiclabs/example-nextjs-faunadb-todomvc`\n\n**Purpose:** A demonstration of a Next.js app using FaunaDB as a backend database.\n\n**Content:**\n\n* A simple TodoMVC implementation in Next.js\n* Integration with FaunaDB for data storage and retrieval\n\nThis repository showcases how to use FaunaDB in conjunction with Next.js, providing a basic example of a real-world application.", "file_summary": "Here is a holistic summary of the file 'lib/hooks.js':\n\n**Summary:** \n\nThis file exports three custom hooks for managing data with React and SWR: `useAllTodos` for fetching todos, `useUser` for user data, and utility hooks `useIsMounted` and `useFirstRender`."}
{"code": "import Iron from '@hapi/iron'\n\nexport async function encrypt(data) {\n  return data && Iron.seal(data, process.env.ENCRYPTION_SECRET, Iron.defaults)\n}\n\nexport async function decrypt(data) {\n  return data && Iron.unseal(data, process.env.ENCRYPTION_SECRET, Iron.defaults)\n}\n", "explanation": "Here is a summary of the purpose and functionality:\n\n**Purpose:** Encrypt and Decrypt Data using Hapi's Iron library.\n\n**Functionality:**\n\n* `encrypt`: Takes data as input, encrypts it with a secret key (process.env.ENCRYPTION_SECRET), and returns the encrypted result.\n* `decrypt`: Takes encrypted data as input, decrypts it with the same secret key, and returns the decrypted result.", "metadata": {"repo": "magiclabs/example-nextjs-faunadb-todomvc", "file": "lib/iron.js", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise explanation:\n\n**Repository Name:** `magiclabs/example-nextjs-faunadb-todomvc`\n\n**Purpose:** A demonstration of a Next.js app using FaunaDB as a backend database.\n\n**Content:**\n\n* A simple TodoMVC implementation in Next.js\n* Integration with FaunaDB for data storage and retrieval\n\nThis repository showcases how to use FaunaDB in conjunction with Next.js, providing a basic example of a real-world application.", "file_summary": "Here is a concise summary of the file 'lib/iron.js':\n\n**Iron.js**: Encrypts and Decrypts Data using Hapi's Iron library, utilizing a secret key (process.env.ENCRYPTION_SECRET) for secure data transformation."}
{"code": "import { Magic } from '@magic-sdk/admin'\n\nexport const magic = new Magic(process.env.MAGIC_SECRET_KEY)\n", "explanation": "**Summary**\n\nThis block initializes a Magic SDK instance with an admin secret key, enabling authentication and authorization functionality.", "metadata": {"repo": "magiclabs/example-nextjs-faunadb-todomvc", "file": "lib/magic.js", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise explanation:\n\n**Repository Name:** `magiclabs/example-nextjs-faunadb-todomvc`\n\n**Purpose:** A demonstration of a Next.js app using FaunaDB as a backend database.\n\n**Content:**\n\n* A simple TodoMVC implementation in Next.js\n* Integration with FaunaDB for data storage and retrieval\n\nThis repository showcases how to use FaunaDB in conjunction with Next.js, providing a basic example of a real-world application.", "file_summary": "Here is a concise summary:\n\n`lib/magic.js`: Initializes a Magic SDK instance with an admin secret key for authentication and authorization."}
{"code": "import { q, getClient } from '../faunadb'\n\nexport class TodoModel {\n  constructor(token) {\n    this.client = getClient(token);\n  }\n\n  async getAllTodos() {\n    return this.client.query(\n      q.Map(\n        q.Paginate(q.Match(q.Index('all_todos'))),\n        q.Lambda('todo_ref', {\n          id: q.Select(['ref', 'id'], q.Get(q.Var('todo_ref'))),\n          title: q.Select(['data', 'title'], q.Get(q.Var('todo_ref'))),\n          completed: q.Select(['data', 'completed'], q.Get(q.Var('todo_ref'))),\n        })\n      )\n    ).then(res => res.data)\n  }\n\n  async addTodo(title) {\n    const user = q.CurrentIdentity();\n    const newTodo = { title, user, completed: false };\n\n    const res = await this.client.query(\n      q.Create(q.Collection('todos'), {\n        data: newTodo,\n      })\n    )\n\n    return res.ref.id\n  }\n\n  async getTodo(id) {\n    return this.client.query(\n      q.Let(\n        { user: q.Get(q.Ref(q.Collection('todos'), id)) },\n        {\n          id: q.Select(['ref', 'id'], q.Var('user')),", "explanation": "Here is a summary of the purpose and functionality of this block:\n\n**Purpose:** A TodoModel class that interacts with FaunaDB, a NoSQL database.\n\n**Functionality:** Allows for CRUD (Create, Read, Update, Delete) operations on a \"todos\" collection in FaunaDB. Specifically, it enables getting all todos, adding a new todo, and retrieving a single todo by ID.", "metadata": {"repo": "magiclabs/example-nextjs-faunadb-todomvc", "file": "lib/models/todo-model.js", "chunk_number": 1, "total_chunks": 2}, "repository_explanation": "Here is a concise explanation:\n\n**Repository Name:** `magiclabs/example-nextjs-faunadb-todomvc`\n\n**Purpose:** A demonstration of a Next.js app using FaunaDB as a backend database.\n\n**Content:**\n\n* A simple TodoMVC implementation in Next.js\n* Integration with FaunaDB for data storage and retrieval\n\nThis repository showcases how to use FaunaDB in conjunction with Next.js, providing a basic example of a real-world application.", "file_summary": "Here is a concise summary of the 'lib/models/todo-model.js' file:\n\n**Summary:** This file defines a TodoModel class for interacting with FaunaDB, providing CRUD operations on a \"todos\" collection."}
{"code": "          title: q.Select(['data', 'title'], q.Var('user')),\n          completed: q.Select(['data', 'completed'], q.Var('user'))\n        }\n      )\n    ).then(res => res.data)\n  }\n\n  async updateAllTodos({ title, completed }) {\n    await this.client.query(\n      q.Map(\n        q.Paginate(q.Match(q.Index('all_todos'))),\n        q.Lambda('todo', q.Update(q.Var('todo'), {\n          data: { title, completed }\n        }))\n      )\n    )\n  }\n\n  async updateTodo(id, { title, completed }) {\n    await this.client.query(\n      q.Update(q.Ref(q.Collection('todos'), id), {\n        data: { title, completed }\n      })\n    )\n  }\n\n  async deleteTodo(id) {\n    await this.client.query(\n      q.Delete(q.Ref(q.Collection('todos'), id))\n    )\n  }\n\n  async deleteCompletedTodos() {\n    await this.client.query(\n      q.Map(\n        q.Paginate(\n          q.Match(q.Index('todos_by_completed_state'), true)\n        ),\n        q.Lambda('todo', q.Delete(q.Var('todo')))\n      )\n    )\n  }\n}\n", "explanation": "**Summary:**\n\nThis block provides an object with methods for interacting with a Foursquare-like todo list database:\n\n* `updateAllTodos`: Updates all todos in the database.\n* `updateTodo`: Updates a specific todo by ID.\n* `deleteTodo`: Deletes a specific todo by ID.\n* `deleteCompletedTodos`: Deletes all completed todos.", "metadata": {"repo": "magiclabs/example-nextjs-faunadb-todomvc", "file": "lib/models/todo-model.js", "chunk_number": 2, "total_chunks": 2}, "repository_explanation": "Here is a concise explanation:\n\n**Repository Name:** `magiclabs/example-nextjs-faunadb-todomvc`\n\n**Purpose:** A demonstration of a Next.js app using FaunaDB as a backend database.\n\n**Content:**\n\n* A simple TodoMVC implementation in Next.js\n* Integration with FaunaDB for data storage and retrieval\n\nThis repository showcases how to use FaunaDB in conjunction with Next.js, providing a basic example of a real-world application.", "file_summary": "Here is a concise summary of the 'lib/models/todo-model.js' file:\n\n**Summary:** This file defines a TodoModel class for interacting with FaunaDB, providing CRUD operations on a \"todos\" collection."}
{"code": "import { q, adminClient, getClient } from '../faunadb'\n\nexport class UserModel {\n  async createUser(email) {\n    return adminClient.query(q.Create(q.Collection(\"users\"), {\n      data: { email },\n    }))\n  }\n\n  async getUserByEmail(email) {\n    return adminClient.query(\n      q.Get(q.Match(q.Index(\"users_by_email\"), email))\n    ).catch(() => undefined)\n  }\n\n  async obtainFaunaDBToken(user) {\n    return adminClient.query(\n      q.Create(q.Tokens(), { instance: q.Select(\"ref\", user) }),\n    ).then(res => res?.secret).catch(() => undefined)\n  }\n\n  async invalidateFaunaDBToken(token) {\n    await getClient(token).query(q.Logout(true))\n  }\n}\n", "explanation": "Here is a concise summary of the purpose and functionality of this block:\n\n**Purpose:** A user management class for interacting with FaunaDB, a NoSQL database.\n\n**Functionality:**\n\n* Create new users\n* Retrieve users by email\n* Obtain authentication tokens for users\n* Invalidate user authentication tokens", "metadata": {"repo": "magiclabs/example-nextjs-faunadb-todomvc", "file": "lib/models/user-model.js", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise explanation:\n\n**Repository Name:** `magiclabs/example-nextjs-faunadb-todomvc`\n\n**Purpose:** A demonstration of a Next.js app using FaunaDB as a backend database.\n\n**Content:**\n\n* A simple TodoMVC implementation in Next.js\n* Integration with FaunaDB for data storage and retrieval\n\nThis repository showcases how to use FaunaDB in conjunction with Next.js, providing a basic example of a real-world application.", "file_summary": "Here is a holistic summary of the file 'lib/models/user-model.js':\n\n**User Management Class**\nA FaunaDB-powered class providing functionality for managing user accounts, including creating new users, retrieving by email, generating auth tokens, and invalidating existing tokens."}
{"code": "/**\n * Handles REST HTTP methods defined in `handlers`\n * as a dictionary of methods-to-functions.\n *\n * Errors are caught and returned.\n */\nexport function createHandlers(handlers) {\n  return async (req, res) => {\n    const handler = handlers[req.method]\n    if (handler) {\n      try {\n        await handler(req, res)\n      } catch (err) {\n        res.status(err.status || 500).end(err.message)\n      }\n    } else {\n      res.setHeader('Allow', Object.keys(handlers))\n      res.status(405).end(`Method ${req.method} Not Allowed`)\n    }\n  }\n}\n", "explanation": "**Purpose:** Creates a middleware function that handles REST HTTP methods defined in a dictionary.\n\n**Functionality:** Maps incoming requests to corresponding functions based on method (e.g., GET, POST), catches errors, and returns standardized responses.", "metadata": {"repo": "magiclabs/example-nextjs-faunadb-todomvc", "file": "lib/rest-utils.js", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise explanation:\n\n**Repository Name:** `magiclabs/example-nextjs-faunadb-todomvc`\n\n**Purpose:** A demonstration of a Next.js app using FaunaDB as a backend database.\n\n**Content:**\n\n* A simple TodoMVC implementation in Next.js\n* Integration with FaunaDB for data storage and retrieval\n\nThis repository showcases how to use FaunaDB in conjunction with Next.js, providing a basic example of a real-world application.", "file_summary": "Here is a concise summary of the file 'lib/rest-utils.js':\n\n\"Provides a middleware function that maps REST HTTP methods to corresponding handlers, catching errors and returning standardized responses.\""}
{"code": "module.exports = {\n  devIndicators: {\n    autoPrerender: false,\n  },\n}\n", "explanation": "This is a JavaScript module export object.\n\n**Purpose:** Configure development indicators for a project.\n\n**Functionality:** Sets a single property `autoPrerender` to `false`.", "metadata": {"repo": "magiclabs/example-nextjs-faunadb-todomvc", "file": "next.config.js", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise explanation:\n\n**Repository Name:** `magiclabs/example-nextjs-faunadb-todomvc`\n\n**Purpose:** A demonstration of a Next.js app using FaunaDB as a backend database.\n\n**Content:**\n\n* A simple TodoMVC implementation in Next.js\n* Integration with FaunaDB for data storage and retrieval\n\nThis repository showcases how to use FaunaDB in conjunction with Next.js, providing a basic example of a real-world application.", "file_summary": "Here's a holistic summary of the file 'next.config.js':\n\nConfigures Next.js project with dev settings, disabling auto-prerendering."}
{"code": "import { magic } from '../../lib/magic'\nimport { createSession } from '../../lib/auth-cookies'\nimport { createHandlers } from '../../lib/rest-utils'\nimport { UserModel } from '../../lib/models/user-model'\n\nconst handlers = {\n  POST: async (req, res) => {\n    const didToken = magic.utils.parseAuthorizationHeader(req.headers.authorization)\n\n    magic.token.validate(didToken);\n    const { email, issuer } = await magic.users.getMetadataByToken(didToken)\n\n    const userModel = new UserModel()\n    // We auto-detect signups if `getUserByEmail` resolves to `undefined`\n    const user = await userModel.getUserByEmail(email) ?? await userModel.createUser(email);\n    const token = await userModel.obtainFaunaDBToken(user);\n\n    await createSession(res, { token, email, issuer })\n\n    res.status(200).send({ done: true })\n  },\n}\n\nexport default function login(req, res) {\n  const handler = createHandlers(handlers);\n  return handler(req, res);\n}\n", "explanation": "**Functionality Summary**\n\nThis block handles a POST request for user login using Magic.link authentication. It:\n\n* Validates DID token\n* Retrieves user metadata (email & issuer)\n* Creates or retrieves user account based on email\n* Obtains FaunaDB token for the user\n* Creates a session with the obtained token and metadata\n* Returns a 200 response indicating successful login", "metadata": {"repo": "magiclabs/example-nextjs-faunadb-todomvc", "file": "pages/api/login.js", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise explanation:\n\n**Repository Name:** `magiclabs/example-nextjs-faunadb-todomvc`\n\n**Purpose:** A demonstration of a Next.js app using FaunaDB as a backend database.\n\n**Content:**\n\n* A simple TodoMVC implementation in Next.js\n* Integration with FaunaDB for data storage and retrieval\n\nThis repository showcases how to use FaunaDB in conjunction with Next.js, providing a basic example of a real-world application.", "file_summary": "Here is a concise summary:\n\n**pages/api/login.js**\n\nHandles POST request for user login using Magic.link authentication, validating DID token, creating or retrieving user account, obtaining FaunaDB token, and returning a 200 response upon successful login."}
{"code": "import { magic } from '../../lib/magic'\nimport { getSession, removeSession } from '../../lib/auth-cookies'\nimport { createHandlers } from '../../lib/rest-utils'\nimport { UserModel } from '../../lib/models/user-model'\n\nconst handlers = {\n  GET: async (req, res) => {\n    const { token, issuer } = await getSession(req)\n\n    const userModel = new UserModel()\n\n    await Promise.all([\n      magic.users.logoutByIssuer(issuer),\n      userModel.invalidateFaunaDBToken(token),\n    ])\n\n    removeSession(res)\n\n    res.writeHead(302, { Location: '/' })\n    res.end()\n  },\n}\n\nexport default function logout(req, res) {\n  const handler = createHandlers(handlers)\n  return handler(req, res)\n}\n", "explanation": "**Purpose:** Handles user logout functionality.\n\n**Functionality:** Logs out a user by invalidating their session and FaunaDB token, then redirects them to the root URL (/).", "metadata": {"repo": "magiclabs/example-nextjs-faunadb-todomvc", "file": "pages/api/logout.js", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise explanation:\n\n**Repository Name:** `magiclabs/example-nextjs-faunadb-todomvc`\n\n**Purpose:** A demonstration of a Next.js app using FaunaDB as a backend database.\n\n**Content:**\n\n* A simple TodoMVC implementation in Next.js\n* Integration with FaunaDB for data storage and retrieval\n\nThis repository showcases how to use FaunaDB in conjunction with Next.js, providing a basic example of a real-world application.", "file_summary": "Here is a concise summary of the file 'pages/api/logout.js':\n\n**File Summary:**\nHandles user logout functionality by invalidating session and FaunaDB token, redirecting to root URL (/)."}
{"code": "import { createHandlers } from '../../lib/rest-utils'\nimport { TodoModel } from '../../lib/models/todo-model'\nimport { getSession } from '../../lib/auth-cookies'\n\nconst handlers = {\n  GET: async (req, res) => {\n    const { token } = await getSession(req)\n    const todoModel = new TodoModel(token)\n    const todo = await todoModel.getTodo(req.query.id)\n    res.status(200).json({ todo })\n  },\n\n  POST: async (req, res) => {\n    const { token } = await getSession(req)\n    const { title } = JSON.parse(req.body)\n    const todoModel = new TodoModel(token)\n    const id = await todoModel.addTodo(title)\n    res.status(200).json({ id })\n  },\n\n  PATCH: async (req, res) => {\n    const { token } = await getSession(req)\n    const todoModel = new TodoModel(token)\n    const data = JSON.parse(req.body)\n    await todoModel.updateTodo(req.query.id, data)\n    res.status(200).json({ done: true })\n  },\n\n  DELETE: async (req, res) => {\n    const { token } = await getSession(req)\n    const todoModel = new TodoModel(token)", "explanation": "Here is a concise summary:\n\n**Purpose:** Handle HTTP requests for CRUD operations on TODO items.\n\n**Functionality:** \n\n* GET: Retrieve a specific TODO item by ID.\n* POST: Add a new TODO item with title.\n* PATCH: Update an existing TODO item by ID.\n* DELETE: Remove a TODO item by ID.", "metadata": {"repo": "magiclabs/example-nextjs-faunadb-todomvc", "file": "pages/api/todo.js", "chunk_number": 1, "total_chunks": 2}, "repository_explanation": "Here is a concise explanation:\n\n**Repository Name:** `magiclabs/example-nextjs-faunadb-todomvc`\n\n**Purpose:** A demonstration of a Next.js app using FaunaDB as a backend database.\n\n**Content:**\n\n* A simple TodoMVC implementation in Next.js\n* Integration with FaunaDB for data storage and retrieval\n\nThis repository showcases how to use FaunaDB in conjunction with Next.js, providing a basic example of a real-world application.", "file_summary": "Here is a concise and holistic summary of the file 'pages/api/todo.js':\n\n**Handle TODO Item CRUD Operations**\n\nThis API endpoint handles HTTP requests for basic CRUD operations on TODO items, allowing retrieval, addition, updating, and deletion of items by ID with corresponding GET, POST, PATCH, and DELETE methods."}
{"code": "    await todoModel.deleteTodo(req.query.id)\n    res.status(200).json({ done: true })\n  },\n}\n\nexport default function todo(req, res) {\n  const handler = createHandlers(handlers)\n  return handler(req, res)\n}\n", "explanation": "**Purpose:** Delete a Todo item by ID.\n\n**Functionality:** Sends a DELETE request to delete a Todo item and returns a success response (200 OK).", "metadata": {"repo": "magiclabs/example-nextjs-faunadb-todomvc", "file": "pages/api/todo.js", "chunk_number": 2, "total_chunks": 2}, "repository_explanation": "Here is a concise explanation:\n\n**Repository Name:** `magiclabs/example-nextjs-faunadb-todomvc`\n\n**Purpose:** A demonstration of a Next.js app using FaunaDB as a backend database.\n\n**Content:**\n\n* A simple TodoMVC implementation in Next.js\n* Integration with FaunaDB for data storage and retrieval\n\nThis repository showcases how to use FaunaDB in conjunction with Next.js, providing a basic example of a real-world application.", "file_summary": "Here is a concise and holistic summary of the file 'pages/api/todo.js':\n\n**Handle TODO Item CRUD Operations**\n\nThis API endpoint handles HTTP requests for basic CRUD operations on TODO items, allowing retrieval, addition, updating, and deletion of items by ID with corresponding GET, POST, PATCH, and DELETE methods."}
{"code": "import { createHandlers } from '../../lib/rest-utils'\nimport { TodoModel } from '../../lib/models/todo-model'\nimport { getSession } from '../../lib/auth-cookies'\n\nconst handlers = {\n  GET: async (req, res) => {\n    const { token } = await getSession(req)\n    const model = new TodoModel(token)\n    const todos = await model.getAllTodos()\n    res.status(200).json({ todos })\n  },\n\n  PATCH: async (req, res) => {\n    const { token } = await getSession(req)\n    const model = new TodoModel(token)\n    const data = JSON.parse(req.body)\n    await model.updateAllTodos(data)\n    res.status(200).json({ done: true })\n  },\n\n  DELETE: async (req, res) => {\n    const { token } = await getSession(req)\n    const model = new TodoModel(token)\n    await model.deleteCompletedTodos()\n    res.status(200).json({ done: true })\n  },\n}\n\nexport default function todos(req, res) {\n  const handler = createHandlers(handlers)\n  return handler(req, res)\n}\n", "explanation": "Here is a concise summary:\n\n**Purpose:** Handles HTTP requests for a Todo List API.\n\n**Functionality:**\n\n* GET: Returns all todos.\n* PATCH: Updates all todos with new data.\n* DELETE: Deletes completed todos.\n* Utilizes authentication via cookie-based session management.", "metadata": {"repo": "magiclabs/example-nextjs-faunadb-todomvc", "file": "pages/api/todos.js", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise explanation:\n\n**Repository Name:** `magiclabs/example-nextjs-faunadb-todomvc`\n\n**Purpose:** A demonstration of a Next.js app using FaunaDB as a backend database.\n\n**Content:**\n\n* A simple TodoMVC implementation in Next.js\n* Integration with FaunaDB for data storage and retrieval\n\nThis repository showcases how to use FaunaDB in conjunction with Next.js, providing a basic example of a real-world application.", "file_summary": "Here is a concise summary:\n\n**pages/api/todos.js**: Handles Todo List API requests, enabling CRUD operations (GET, PATCH, DELETE) while authenticating users via cookie-based sessions."}
{"code": "import { getSession } from '../../lib/auth-cookies'\n\nexport default async function user(req, res) {\n  const session = await getSession(req)\n\n  if (session) {\n    const { email, issuer } = session\n    res.status(200).json({ user: { email, issuer } })\n  } else {\n    res.status(200).json({ user: null })\n  }\n}\n", "explanation": "**Purpose:** Verify user authentication via a session cookie.\n\n**Functionality:** Returns user data (email and issuer) if authenticated; returns null otherwise.", "metadata": {"repo": "magiclabs/example-nextjs-faunadb-todomvc", "file": "pages/api/user.js", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise explanation:\n\n**Repository Name:** `magiclabs/example-nextjs-faunadb-todomvc`\n\n**Purpose:** A demonstration of a Next.js app using FaunaDB as a backend database.\n\n**Content:**\n\n* A simple TodoMVC implementation in Next.js\n* Integration with FaunaDB for data storage and retrieval\n\nThis repository showcases how to use FaunaDB in conjunction with Next.js, providing a basic example of a real-world application.", "file_summary": "Here is a concise and holistic summary of the file 'pages/api/user.js':\n\n\"Verifies user authentication via a session cookie, returning user data (email and issuer) on success or null on failure.\""}
{"code": "import React, { useCallback, useEffect, useState } from 'react'\nimport { useUser, useFirstRender, useAllTodos } from '../lib/hooks'\nimport { useRouter } from 'next/router'\nimport Layout from '../components/layout'\nimport Spinner from '../components/spinner'\nimport AddTodo from '../components/add-todo'\nimport TodoItem from '../components/todo-item'\nimport Button from '../components/button'\n\nexport default function Home() {\n  const router = useRouter();\n  const [initialized, setInitialized] = useState(false)\n  const isFirstRender = useFirstRender()\n\n  const { user, loading: userLoading } = useUser()\n  const { todos, loading: todosLoading, mutate: mutateTodos } = useAllTodos()\n\n  useEffect(() => {\n    // Flag initialization complete,\n    // this will hide the loading state.\n    if (user && !userLoading && !todosLoading && !initialized) {\n      setInitialized(true)\n    }\n  }, [user, userLoading, todosLoading, initialized])\n\n  useEffect(() => {\n    // If no user is logged in, redirect", "explanation": "Here is a concise summary of the purpose and functionality of this code block:\n\n**Purpose:** Initialize the Home page with data from APIs (User and Todos) and handle loading states.\n\n**Functionality:**\n\n1. Load User data using `useUser()` hook.\n2. Load all Todo data using `useAllTodos()` hook.\n3. Hide loading state when both User and Todos data are loaded.\n4. Redirect to another page if no user is logged in.\n5. Display Add Todo, Todo Item, Spinner, Layout, and Button components.", "metadata": {"repo": "magiclabs/example-nextjs-faunadb-todomvc", "file": "pages/index.js", "chunk_number": 1, "total_chunks": 4}, "repository_explanation": "Here is a concise explanation:\n\n**Repository Name:** `magiclabs/example-nextjs-faunadb-todomvc`\n\n**Purpose:** A demonstration of a Next.js app using FaunaDB as a backend database.\n\n**Content:**\n\n* A simple TodoMVC implementation in Next.js\n* Integration with FaunaDB for data storage and retrieval\n\nThis repository showcases how to use FaunaDB in conjunction with Next.js, providing a basic example of a real-world application.", "file_summary": "Here's a holistic summary of the file 'pages/index.js':\n\nThis React component initializes the Home page by fetching User and Todo data from APIs, handling loading states, and rendering various components. It also includes features like filtering todos by status, displaying an \"actions\" section with filters, and allowing deletion of completed todos."}
{"code": "    // to the `/login` page automatically.\n    if (!(user || userLoading) && !isFirstRender) {\n      router.push('/login')\n    }\n  }, [user, userLoading])\n\n  const [filter, setFilter] = useState('all');\n  const filteredTodos = todos.filter(todo => {\n    switch (filter) {\n      case 'active':\n        return !todo.completed\n\n      case 'completed':\n        return todo.completed\n\n      case 'all':\n      default:\n        return true\n    }\n  })\n\n  const hasCompletedTodos = !!todos.find(todo => todo.completed)\n\n  const clearCompletedTodos = useCallback(() => {\n    mutateTodos(currTodos => currTodos.filter(todo => !todo.completed), false)\n    fetch('/api/todos', { method: 'DELETE' }).then(() => mutateTodos())\n  }, [])\n\n  return (\n    <Layout>\n      {initialized ? <>\n        <AddTodo todos={todos} mutateTodos={mutateTodos} />\n        {filteredTodos.map(todo => <TodoItem mutateTodos={mutateTodos} {...todo} key={todo.id} /> )}\n        {!!todos.length && (<div className=\"actions\">\n          <div className=\"filters\">", "explanation": "Here is a concise summary:\n\nThis block appears to be a React component that manages a list of todos. It:\n\n* Redirects to the login page if no user is logged in.\n* Filters todos by status (active, completed, or all).\n* Displays an \"actions\" section with filters and allows deletion of completed todos.", "metadata": {"repo": "magiclabs/example-nextjs-faunadb-todomvc", "file": "pages/index.js", "chunk_number": 2, "total_chunks": 4}, "repository_explanation": "Here is a concise explanation:\n\n**Repository Name:** `magiclabs/example-nextjs-faunadb-todomvc`\n\n**Purpose:** A demonstration of a Next.js app using FaunaDB as a backend database.\n\n**Content:**\n\n* A simple TodoMVC implementation in Next.js\n* Integration with FaunaDB for data storage and retrieval\n\nThis repository showcases how to use FaunaDB in conjunction with Next.js, providing a basic example of a real-world application.", "file_summary": "Here's a holistic summary of the file 'pages/index.js':\n\nThis React component initializes the Home page by fetching User and Todo data from APIs, handling loading states, and rendering various components. It also includes features like filtering todos by status, displaying an \"actions\" section with filters, and allowing deletion of completed todos."}
{"code": "            <div><Button isActive={filter === 'all'} onClick={() => setFilter('all')}>All</Button></div>\n            <div><Button isActive={filter === 'completed'} onClick={() => setFilter('completed')}>Completed</Button></div>\n            <div><Button isActive={filter === 'active'} onClick={() => setFilter('active')}>Active</Button></div>\n          </div>\n\n          <Button\n            disabled={!hasCompletedTodos}\n            className=\"clear-completed\"\n            onClick={clearCompletedTodos}>\n              Clear Completed\n          </Button>\n        </div>)}\n      </> : <div className=\"loader\">\n        <Spinner />\n      </div>}\n\n      <style jsx>{`\n        .loader {\n          display: flex;\n          justify-content: center;\n          padding: 3rem;\n        }\n\n        .actions {\n          display: flex;\n          justify-content: space-between;\n          border-top: solid 1px #eeeeee;\n          padding: 10px;\n        }\n\n        .actions .filters > div:not(:last-child) {\n          margin-right: 10px !important;", "explanation": "Here is a concise summary:\n\n**Purpose:** Filter todo items by status (all, completed, active)\n\n**Functionality:** Three buttons toggle filter state. A fourth button clears completed todos when available.", "metadata": {"repo": "magiclabs/example-nextjs-faunadb-todomvc", "file": "pages/index.js", "chunk_number": 3, "total_chunks": 4}, "repository_explanation": "Here is a concise explanation:\n\n**Repository Name:** `magiclabs/example-nextjs-faunadb-todomvc`\n\n**Purpose:** A demonstration of a Next.js app using FaunaDB as a backend database.\n\n**Content:**\n\n* A simple TodoMVC implementation in Next.js\n* Integration with FaunaDB for data storage and retrieval\n\nThis repository showcases how to use FaunaDB in conjunction with Next.js, providing a basic example of a real-world application.", "file_summary": "Here's a holistic summary of the file 'pages/index.js':\n\nThis React component initializes the Home page by fetching User and Todo data from APIs, handling loading states, and rendering various components. It also includes features like filtering todos by status, displaying an \"actions\" section with filters, and allowing deletion of completed todos."}
{"code": "        }\n\n        .filters {\n          display: flex;\n        }\n      `}</style>\n    </Layout>\n  )\n}\n", "explanation": "This block appears to be a React component. The purpose is to render HTML with a CSS style applied, specifically making an element with class \".filters\" display as a flexible box.", "metadata": {"repo": "magiclabs/example-nextjs-faunadb-todomvc", "file": "pages/index.js", "chunk_number": 4, "total_chunks": 4}, "repository_explanation": "Here is a concise explanation:\n\n**Repository Name:** `magiclabs/example-nextjs-faunadb-todomvc`\n\n**Purpose:** A demonstration of a Next.js app using FaunaDB as a backend database.\n\n**Content:**\n\n* A simple TodoMVC implementation in Next.js\n* Integration with FaunaDB for data storage and retrieval\n\nThis repository showcases how to use FaunaDB in conjunction with Next.js, providing a basic example of a real-world application.", "file_summary": "Here's a holistic summary of the file 'pages/index.js':\n\nThis React component initializes the Home page by fetching User and Todo data from APIs, handling loading states, and rendering various components. It also includes features like filtering todos by status, displaying an \"actions\" section with filters, and allowing deletion of completed todos."}
{"code": "import React, { useEffect, useState, useCallback } from 'react'\nimport { useUser, useIsMounted } from '../lib/hooks'\nimport { Magic } from 'magic-sdk'\nimport { useRouter } from 'next/router'\nimport Layout from '../components/layout'\nimport Button from '../components/button'\n\nexport default function Login() {\n  const router = useRouter()\n  const { user } = useUser()\n  const [isLoggingIn, setIsLoggingIn] = useState(false);\n  const [errorMsg, setErrorMsg] = useState(undefined)\n  const isMounted = useIsMounted();\n\n  useEffect(() => {\n    // If a user is already logged in,\n    // redirect to the home page automatically.\n    if (user) router.push('/')\n  }, [user]);\n\n  const login = useCallback(async (email) => {\n    if (isMounted() && errorMsg) setErrorMsg(undefined)\n\n    try {\n      const magic = new Magic(process.env.NEXT_PUBLIC_MAGIC_PUBLISHABLE_KEY)\n      const didToken = await magic.auth.loginWithMagicLink({ email })\n\n      const res = await fetch('/api/login', {\n        method: 'POST',\n        headers: {", "explanation": "Here is a concise summary of the purpose and functionality of this block:\n\n**Purpose:** Handle user login and redirect to home page if already logged in.\n\n**Functionality:**\n\n* Checks for existing user session and redirects to home page if found.\n* Handles user login using Magic SDK, sending a magic link email to the user.\n* Updates UI state with error message if login fails.", "metadata": {"repo": "magiclabs/example-nextjs-faunadb-todomvc", "file": "pages/login.js", "chunk_number": 1, "total_chunks": 3}, "repository_explanation": "Here is a concise explanation:\n\n**Repository Name:** `magiclabs/example-nextjs-faunadb-todomvc`\n\n**Purpose:** A demonstration of a Next.js app using FaunaDB as a backend database.\n\n**Content:**\n\n* A simple TodoMVC implementation in Next.js\n* Integration with FaunaDB for data storage and retrieval\n\nThis repository showcases how to use FaunaDB in conjunction with Next.js, providing a basic example of a real-world application.", "file_summary": "Here is a concise summary of the file 'pages/login.js':\n\n**Handles user login**: Checks for existing session, sends login request via Magic SDK, and redirects to home page on success or updates error state on failure."}
{"code": "          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${didToken}`\n        },\n        body: JSON.stringify({ email })\n      })\n\n      if (res.status === 200) {\n        router.push('/')\n      } else {\n        throw new Error(await res.text())\n      }\n    } catch (err) {\n      console.error('An unexpected error occurred:', err)\n      if (isMounted()) setErrorMsg(err.message)\n    }\n  }, [errorMsg])\n\n  const onSubmit = useCallback((e) => {\n    e.preventDefault()\n    if (isLoggingIn) return;\n    setIsLoggingIn(true);\n    login(e.currentTarget.email.value).then(() => setIsLoggingIn(false))\n  }, [login, isLoggingIn])\n\n  return (\n    <Layout>\n      <form onSubmit={onSubmit}>\n        <h2>Log in</h2>\n\n        <label htmlFor=\"email\">Email<span aria-hidden={true}>*</span></label>\n        <input type=\"email\" name=\"email\" required placeholder=\"hello@magic.link\" />\n\n        <Button disabled={isLoggingIn} type=\"submit\">Sign Up / Login</Button>\n\n        {errorMsg && <p className=\"error\">{errorMsg}</p>}", "explanation": "**Summary**\n\nThis block is a login function that sends a JSON payload with an email address to a server, awaiting a response. If successful (200 status), it redirects the user to the homepage. Otherwise, it throws an error. It's called on form submission and also handles errors by updating an `errorMsg` state variable.", "metadata": {"repo": "magiclabs/example-nextjs-faunadb-todomvc", "file": "pages/login.js", "chunk_number": 2, "total_chunks": 3}, "repository_explanation": "Here is a concise explanation:\n\n**Repository Name:** `magiclabs/example-nextjs-faunadb-todomvc`\n\n**Purpose:** A demonstration of a Next.js app using FaunaDB as a backend database.\n\n**Content:**\n\n* A simple TodoMVC implementation in Next.js\n* Integration with FaunaDB for data storage and retrieval\n\nThis repository showcases how to use FaunaDB in conjunction with Next.js, providing a basic example of a real-world application.", "file_summary": "Here is a concise summary of the file 'pages/login.js':\n\n**Handles user login**: Checks for existing session, sends login request via Magic SDK, and redirects to home page on success or updates error state on failure."}
{"code": "      </form>\n\n      <style jsx>{`\n        form {\n          padding: 3rem;\n        }\n\n        h2 {\n          margin-top: 0;\n          margin-bottom: 25px;\n        }\n\n        label {\n          display: block;\n          font-weight: 600;\n        }\n\n        input {\n          display: block;\n          padding: 8px;\n          width: 100%;\n          margin: 0.3rem 0 1rem;\n          border: 1px solid #bdbdbd;\n          border-radius: 4px;\n          box-shadow: 0 0 0 3px transparent;\n          transition: all 0.2s;\n        }\n\n        input:focus {\n          outline: none;\n          border-color: #6851ff;\n          box-shadow: 0 0 0 3px #a796ff;\n        }\n\n        input:invalid {\n          border-color: #d02f20;\n          box-shadow: 0 0 0 3px #fba67f;\n        }\n\n        .error {\n          color: brown;\n          margin: 1rem 0 0;\n        }\n      `}</style>\n    </Layout>\n  )\n}\n", "explanation": "This block is a CSS style block that defines visual styles for HTML form elements, such as padding, margins, fonts, and border effects.", "metadata": {"repo": "magiclabs/example-nextjs-faunadb-todomvc", "file": "pages/login.js", "chunk_number": 3, "total_chunks": 3}, "repository_explanation": "Here is a concise explanation:\n\n**Repository Name:** `magiclabs/example-nextjs-faunadb-todomvc`\n\n**Purpose:** A demonstration of a Next.js app using FaunaDB as a backend database.\n\n**Content:**\n\n* A simple TodoMVC implementation in Next.js\n* Integration with FaunaDB for data storage and retrieval\n\nThis repository showcases how to use FaunaDB in conjunction with Next.js, providing a basic example of a real-world application.", "file_summary": "Here is a concise summary of the file 'pages/login.js':\n\n**Handles user login**: Checks for existing session, sends login request via Magic SDK, and redirects to home page on success or updates error state on failure."}
{"code": "<svg width=\"70\" height=\"16\" viewBox=\"0 0 283 64\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M141.04 16c-11.04 0-19 7.2-19 18s8.96 18 20 18c6.67 0 12.55-2.64 16.19-7.09l-7.65-4.42c-2.02 2.21-5.09 3.5-8.54 3.5-4.79 0-8.86-2.5-10.37-6.5h28.02c.22-1.12.35-2.28.35-3.5 0-10.79-7.96-17.99-19-17.99zm-9.46 14.5c1.25-3.99 4.67-6.5 9.45-6.5 4.79 0 8.21 2.51 9.45 6.5h-18.9zM248.72 16c-11.04 0-19 7.2-19 18s8.96 18 20 18c6.67 0 12.55-2.64 16.19-7.09l-7.65-4.42c-2.02 2.21-5.09 3.5-8.54 3.5-4.79 0-8.86-2.5-10.37-6.5h28.02c.22-1.12.35-2.28.35-3.5 0-10.79-7.96-17.99-19-17.99zm-9.45 14.5c1.25-3.99 4.67-6.5 9.45-6.5 4.79 0 8.21 2.51 9.45 6.5h-18.9zM200.24 34c0 6 3.92 10 10 10 4.12 0 7.21-1.87 8.8-4.92l7.68 4.43c-3.18 5.3-9.14 8.49-16.48 8.49-11.05 0-19-7.2-19-18s7.96-18 19-18c7.34 0 13.29 3.19 16.48 8.49l-7.68 4.43c-1.59-3.05-4.68-4.92-8.8-4.92-6.07 0-10 4-10 10zm82.48-29v46h-9V5h9zM36.95 0L73.9 64H0L36.95 0zm92.38 5l-27.71 48L73.91 5H84.3l17.32 30 17.32-30h10.39zm58.91 12v9.69c-1-.29-2.06-.49-3.2-.49-5.81 0-10 4-10 10V51h-9V17h9v9.2c0-5.08 5.91-9.2 13.2-9.2z\" fill=\"#000\"/></svg>", "explanation": "This block is an SVG icon, a graphical representation used for visual purposes in digital design. It has a rectangular shape with various lines and curves, and is filled with black color (#000). Its purpose is likely decorative or illustrative, possibly representing a \"block\" or \"square\" concept.", "metadata": {"repo": "magiclabs/example-nextjs-faunadb-todomvc", "file": "public/vercel.svg", "chunk_number": 1, "total_chunks": 2}, "repository_explanation": "Here is a concise explanation:\n\n**Repository Name:** `magiclabs/example-nextjs-faunadb-todomvc`\n\n**Purpose:** A demonstration of a Next.js app using FaunaDB as a backend database.\n\n**Content:**\n\n* A simple TodoMVC implementation in Next.js\n* Integration with FaunaDB for data storage and retrieval\n\nThis repository showcases how to use FaunaDB in conjunction with Next.js, providing a basic example of a real-world application.", "file_summary": "Here's a concise summary of the file 'public/vercel.svg':\n\nThe 'public/vercel.svg' is an SVG icon representing a rectangular block with various lines and curves, filled with black color (#000), likely used for decorative or illustrative purposes."}
{"code": "", "explanation": "You haven't provided a block for me to summarize. Please provide the text or code snippet you'd like me to summarize, and I'll do my best to concisely explain its purpose and functionality.", "metadata": {"repo": "magiclabs/example-nextjs-faunadb-todomvc", "file": "public/vercel.svg", "chunk_number": 2, "total_chunks": 2}, "repository_explanation": "Here is a concise explanation:\n\n**Repository Name:** `magiclabs/example-nextjs-faunadb-todomvc`\n\n**Purpose:** A demonstration of a Next.js app using FaunaDB as a backend database.\n\n**Content:**\n\n* A simple TodoMVC implementation in Next.js\n* Integration with FaunaDB for data storage and retrieval\n\nThis repository showcases how to use FaunaDB in conjunction with Next.js, providing a basic example of a real-world application.", "file_summary": "Here's a concise summary of the file 'public/vercel.svg':\n\nThe 'public/vercel.svg' is an SVG icon representing a rectangular block with various lines and curves, filled with black color (#000), likely used for decorative or illustrative purposes."}

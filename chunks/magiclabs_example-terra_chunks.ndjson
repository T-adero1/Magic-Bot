{"code": "<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n\t<meta charset=\"utf-8\">\n\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\">\n\t<meta name=\"theme-color\" content=\"#000000\">\n\t<!--\n      manifest.json provides metadata used when your web app is added to the\n      homescreen on Android. See https://developers.google.com/web/fundamentals/engage-and-retain/web-app-manifest/\n    -->\n\t<link rel=\"manifest\" href=\"%PUBLIC_URL%/manifest.json\">\n\t<link rel=\"shortcut icon\" href=\"%PUBLIC_URL%/favicon.ico\">\n\t<!--\n      Notice the use of %PUBLIC_URL% in the tags above.\n      It will be replaced with the URL of the `public` folder during the build.\n      Only files inside the `public` folder can be referenced from the HTML.\n\n      Unlike \"/favicon.ico\" or \"favicon.ico\", \"%PUBLIC_URL%/favicon.ico\" will\n      work correctly both with client-side routing and a non-root public URL.\n      Learn how to configure a non-root public URL by running `npm run build`.\n    -->\n\t<title>React App</title>\n</head>\n", "explanation": "This block defines the metadata and basic structure of an HTML document, specifically:\n\n* Specifies character encoding and viewport settings\n* Links to external resources (manifest.json, favicon.ico)\n* Sets the title of the webpage (\"React App\")", "metadata": {"repo": "magiclabs/example-terra", "file": "public/index.html", "chunk_number": 1, "total_chunks": 2}, "repository_explanation": "This repository appears to be an example Terraform configuration (`example/main.tf`) and accompanying files (e.g., `backend.tf`, `variables.tf`) for a fictional \"Magic Labs\" project.\n\nThe purpose is likely to demonstrate basic Terraform usage, perhaps as a learning resource or starting point for a real-world deployment.", "file_summary": "Here is a concise summary of the `public/index.html` file:\n\n\"Initializes and structures web development projects, specifying character encoding, viewport settings, linking external resources (manifest.json, favicon.ico), and setting the webpage title.\""}
{"code": "<body>\n\t<noscript>\n\t\tYou need to enable JavaScript to run this app.\n\t</noscript>\n\t<div id=\"root\"></div>\n\t<!--\n      This HTML file is a template.\n      If you open it directly in the browser, you will see an empty page.\n\n      You can add webfonts, meta tags, or analytics to this file.\n      The build step will place the bundled scripts into the <body> tag.\n\n      To begin the development, run `npm start` or `yarn start`.\n      To create a production bundle, use `npm run build` or `yarn build`.\n    -->\n</body>\n\n</html>", "explanation": "This block is an HTML template file that serves as a starting point for web development projects. Its purpose is to provide a basic structure for the application's content and instructs developers on how to initialize and build the project using npm or yarn commands.", "metadata": {"repo": "magiclabs/example-terra", "file": "public/index.html", "chunk_number": 2, "total_chunks": 2}, "repository_explanation": "This repository appears to be an example Terraform configuration (`example/main.tf`) and accompanying files (e.g., `backend.tf`, `variables.tf`) for a fictional \"Magic Labs\" project.\n\nThe purpose is likely to demonstrate basic Terraform usage, perhaps as a learning resource or starting point for a real-world deployment.", "file_summary": "Here is a concise summary of the `public/index.html` file:\n\n\"Initializes and structures web development projects, specifying character encoding, viewport settings, linking external resources (manifest.json, favicon.ico), and setting the webpage title.\""}
{"code": "import React, { useState, useEffect } from \"react\";\nimport \"./styles.css\";\nimport { Magic } from \"magic-sdk\";\nimport { TerraExtension } from \"@magic-ext/terra\";\nimport {LCDClient, MsgSend, Key, SimplePublicKey} from '@terra-money/terra.js';\n\nconst rpcUrl = 'https://bombay-lcd.terra.dev';\n\nexport class MagicRawKey extends Key {\n    constructor(publicKey) {\n        super(new SimplePublicKey(publicKey));\n    }\n\n    async sign(payload){\n        return magic.terra.sign(payload)\n    }\n}\n\nconst magic = new Magic(\"pk_live_1F739F3147657A01\", {\n    extensions: {\n        terra: new TerraExtension({\n            rpcUrl\n        })\n    }\n});\n\nexport default function App() {\n    const [email, setEmail] = useState(\"\");\n    const [publicAddress, setPublicAddress] = useState(\"\");\n    const [destinationAddress, setDestinationAddress] = useState(\"\");\n    const [sendAmount, setSendAmount] = useState(0);\n    const [isLoggedIn, setIsLoggedIn] = useState(false);\n    const [userMetadata, setUserMetadata] = useState({});", "explanation": "Here is a concise summary:\n\n**Purpose:** This block sets up a Magic SDK integration with Terra blockchain, enabling user authentication and cryptocurrency transactions.\n\n**Functionality:**\n\n* Authenticates users via email\n* Displays public address and allows user metadata management\n* Enables sending of Terra coins to a specified destination address\n* Utilizes the Magic SDK for cryptographic operations (signing)", "metadata": {"repo": "magiclabs/example-terra", "file": "src/App.js", "chunk_number": 1, "total_chunks": 6}, "repository_explanation": "This repository appears to be an example Terraform configuration (`example/main.tf`) and accompanying files (e.g., `backend.tf`, `variables.tf`) for a fictional \"Magic Labs\" project.\n\nThe purpose is likely to demonstrate basic Terraform usage, perhaps as a learning resource or starting point for a real-world deployment.", "file_summary": "Here's a concise summary of the file 'src/App.js':\n\n**Summary:** \nThis React app integrates with Terra blockchain, enabling user authentication via email using Magic SDK, managing user metadata, and sending Terra coins with transaction status updates. It also includes input fields for collecting destination address and amount to send, along with a \"Sign Transaction\" button."}
{"code": "    const [txHash, setTxHash] = useState(\"\");\n    const [sendingTransaction, setSendingTransaction] = useState(false);\n\n    useEffect(() => {\n        magic.user.isLoggedIn().then(async (magicIsLoggedIn) => {\n            setIsLoggedIn(magicIsLoggedIn);\n            if (magicIsLoggedIn) {\n                const metadata = await magic.user.getMetadata()\n                setPublicAddress(metadata.publicAddress);\n                setUserMetadata(metadata);\n            }\n        });\n    }, [isLoggedIn]);\n\n    const login = async () => {\n        await magic.auth.loginWithMagicLink({ email });\n        setIsLoggedIn(true);\n    };\n\n    const logout = async () => {\n        await magic.user.logout();\n        setIsLoggedIn(false);\n    };\n\n    const handleTerraSignTransaction = async () => {\n        setSendingTransaction(true);\n        const publicKey = await magic.terra.getPublicKey();\n        const mk = new MagicRawKey(publicKey);\n\n        const terra = new LCDClient({\n            URL: rpcUrl,\n            chainID: 'bombay-12',", "explanation": "Here is a concise summary:\n\nThis block manages user authentication with the Magic library, allowing users to login, logout, and send Terra transactions. It tracks the login status and retrieves public address metadata upon successful login.", "metadata": {"repo": "magiclabs/example-terra", "file": "src/App.js", "chunk_number": 2, "total_chunks": 6}, "repository_explanation": "This repository appears to be an example Terraform configuration (`example/main.tf`) and accompanying files (e.g., `backend.tf`, `variables.tf`) for a fictional \"Magic Labs\" project.\n\nThe purpose is likely to demonstrate basic Terraform usage, perhaps as a learning resource or starting point for a real-world deployment.", "file_summary": "Here's a concise summary of the file 'src/App.js':\n\n**Summary:** \nThis React app integrates with Terra blockchain, enabling user authentication via email using Magic SDK, managing user metadata, and sending Terra coins with transaction status updates. It also includes input fields for collecting destination address and amount to send, along with a \"Sign Transaction\" button."}
{"code": "        });\n\n        const wallet = terra.wallet(mk);\n\n        const send = new MsgSend(\n            publicAddress,\n            destinationAddress,\n            { uluna: sendAmount }\n        );\n\n        const tx = await wallet.createAndSignTx({\n            msgs: [send],\n            memo: 'test from terra.js!',\n        })\n        setSendingTransaction(false);\n\n        console.log('signed transaction', tx);\n    }\n\n    return (\n        <div className=\"App\">\n            {!isLoggedIn ? (\n                <div className=\"container\">\n                    <h1>Please sign up or login</h1>\n                    <input\n                        type=\"email\"\n                        name=\"email\"\n                        required=\"required\"\n                        placeholder=\"Enter your email\"\n                        onChange={(event) => {\n                            setEmail(event.target.value);\n                        }}\n                    />\n                    <button onClick={login}>Send</button>\n                </div>", "explanation": "**Summary:**\n\nThis block of code creates a signed transaction using Terra.js, sending a specific amount of UOS (uluna) coins from one address to another. It also updates a state variable (`setSendingTransaction`) and logs the signed transaction to the console.", "metadata": {"repo": "magiclabs/example-terra", "file": "src/App.js", "chunk_number": 3, "total_chunks": 6}, "repository_explanation": "This repository appears to be an example Terraform configuration (`example/main.tf`) and accompanying files (e.g., `backend.tf`, `variables.tf`) for a fictional \"Magic Labs\" project.\n\nThe purpose is likely to demonstrate basic Terraform usage, perhaps as a learning resource or starting point for a real-world deployment.", "file_summary": "Here's a concise summary of the file 'src/App.js':\n\n**Summary:** \nThis React app integrates with Terra blockchain, enabling user authentication via email using Magic SDK, managing user metadata, and sending Terra coins with transaction status updates. It also includes input fields for collecting destination address and amount to send, along with a \"Sign Transaction\" button."}
{"code": "            ) : (\n                <div>\n                    <div className=\"container\">\n                        <h1>Current user: {userMetadata.email}</h1>\n                        <button onClick={logout}>Logout</button>\n                    </div>\n                    <div className=\"container\">\n                        <h1>Terra address</h1>\n                        <div className=\"info\">{publicAddress}</div>\n                    </div>\n                    <div className=\"container\">\n                        <h1>Send Transaction</h1>\n                        {txHash ? (\n                            <div>\n                                <div>Send transaction success</div>\n                                <div className=\"info\">{txHash}</div>\n                            </div>\n                        ) : sendingTransaction ? (\n                            <div className=\"sending-status\">Sending transaction</div>\n                        ) : (\n                            <div />\n                        )}", "explanation": "**Summary**\n\nThis block displays user metadata and functionality for interacting with a Terra blockchain:\n\n* Displays current user's email\n* Allows logout button click\n* Shows Terra address\n* Enables sending transaction feature with status updates:\n\t+ Success: displays successful send transaction message and txHash\n\t+ Sending: displays \"Sending transaction\" status\n\t+ Not sending: shows no content", "metadata": {"repo": "magiclabs/example-terra", "file": "src/App.js", "chunk_number": 4, "total_chunks": 6}, "repository_explanation": "This repository appears to be an example Terraform configuration (`example/main.tf`) and accompanying files (e.g., `backend.tf`, `variables.tf`) for a fictional \"Magic Labs\" project.\n\nThe purpose is likely to demonstrate basic Terraform usage, perhaps as a learning resource or starting point for a real-world deployment.", "file_summary": "Here's a concise summary of the file 'src/App.js':\n\n**Summary:** \nThis React app integrates with Terra blockchain, enabling user authentication via email using Magic SDK, managing user metadata, and sending Terra coins with transaction status updates. It also includes input fields for collecting destination address and amount to send, along with a \"Sign Transaction\" button."}
{"code": "                        <input\n                            type=\"text\"\n                            name=\"destination\"\n                            className=\"full-width\"\n                            required=\"required\"\n                            placeholder=\"Destination address\"\n                            onChange={(event) => {\n                                setDestinationAddress(event.target.value);\n                            }}\n                        />\n                        <input\n                            type=\"text\"\n                            name=\"amount\"\n                            className=\"full-width\"\n                            required=\"required\"\n                            placeholder=\"Amount in uluna\"\n                            onChange={(event) => {\n                                setSendAmount(event.target.value);\n                            }}\n                        />\n                        <button id=\"btn-send-txn\" onClick={handleTerraSignTransaction}>", "explanation": "**Summary:**\n\nThis block contains two input fields for collecting user data:\n\n1. **Destination address**: a text field to enter a destination address.\n2. **Amount in uluna**: a text field to enter an amount.\n\nBoth fields are required, have placeholders, and trigger state updates (`setDestinationAddress` and `setSendAmount`) when their values change. A button with the ID \"btn-send-txn\" is also present, but its purpose is not explicitly described in this snippet (it's handled by a separate function `handleTerraSignTransaction`).", "metadata": {"repo": "magiclabs/example-terra", "file": "src/App.js", "chunk_number": 5, "total_chunks": 6}, "repository_explanation": "This repository appears to be an example Terraform configuration (`example/main.tf`) and accompanying files (e.g., `backend.tf`, `variables.tf`) for a fictional \"Magic Labs\" project.\n\nThe purpose is likely to demonstrate basic Terraform usage, perhaps as a learning resource or starting point for a real-world deployment.", "file_summary": "Here's a concise summary of the file 'src/App.js':\n\n**Summary:** \nThis React app integrates with Terra blockchain, enabling user authentication via email using Magic SDK, managing user metadata, and sending Terra coins with transaction status updates. It also includes input fields for collecting destination address and amount to send, along with a \"Sign Transaction\" button."}
{"code": "                            Sign Transaction\n                        </button>\n                    </div>\n                </div>\n            )}\n        </div>\n    );\n}\n", "explanation": "This is a React component that renders a \"Sign Transaction\" button.", "metadata": {"repo": "magiclabs/example-terra", "file": "src/App.js", "chunk_number": 6, "total_chunks": 6}, "repository_explanation": "This repository appears to be an example Terraform configuration (`example/main.tf`) and accompanying files (e.g., `backend.tf`, `variables.tf`) for a fictional \"Magic Labs\" project.\n\nThe purpose is likely to demonstrate basic Terraform usage, perhaps as a learning resource or starting point for a real-world deployment.", "file_summary": "Here's a concise summary of the file 'src/App.js':\n\n**Summary:** \nThis React app integrates with Terra blockchain, enabling user authentication via email using Magic SDK, managing user metadata, and sending Terra coins with transaction status updates. It also includes input fields for collecting destination address and amount to send, along with a \"Sign Transaction\" button."}
{"code": "import { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  rootElement\n);\n", "explanation": "**Summary:**\n\nThis code sets up a React app by rendering it into an HTML element with the ID \"root\". It uses Strict Mode for debugging purposes and runs the App component as the main application.", "metadata": {"repo": "magiclabs/example-terra", "file": "src/index.js", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "This repository appears to be an example Terraform configuration (`example/main.tf`) and accompanying files (e.g., `backend.tf`, `variables.tf`) for a fictional \"Magic Labs\" project.\n\nThe purpose is likely to demonstrate basic Terraform usage, perhaps as a learning resource or starting point for a real-world deployment.", "file_summary": "Here is a concise and to-the-point summary of `src/index.js`:\n\n**Summary:** Sets up a React app, rendering it into an HTML element with ID \"root\" using Strict Mode."}
{"code": ".App {\n  align-self: center;\n  justify-self: center;\n}\n\n#root {\n  font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto,\n  Oxygen-Sans, Ubuntu, Cantarell, \"Helvetica Neue\", sans-serif;\n  height: 100vh;\n  display: grid;\n  font-size: 18px;\n}\n\n.container {\n  width: 300px;\n  background-color: #eee;\n  text-align: center;\n  padding: 27px 18px;\n  margin-bottom: 27px;\n}\n\nh1 {\n  margin: 0;\n  padding-bottom: 18px;\n  font-size: 18px;\n}\n\n.info {\n  max-width: 21ch;\n  margin: 0 auto;\n  margin-bottom: 18px;\n  background-color: #ddd;\n  padding: 12px 24px;\n  word-wrap: break-word;\n  font-family: \"Lucida Console\", Monaco, monospace;\n  font-size: 15px;\n}\n\n.info a {\n  color: black;\n}\n\ninput,\nbutton {\n  padding: 9px;\n  font-size: 18px;\n  margin-bottom: 9px;\n}\n\ninput.full-width {\n  display: block;\n  margin: 0 auto;\n  margin-bottom: 9px;\n  text-align: center;\n}\n\n.sending-status {\n  margin-bottom: 10px;\n}\n", "explanation": "**Summary**\n\nThis block is a collection of CSS styles that define layout, typography, and visual appearance for various HTML elements on a web page.\n\n**Key Functionality**\n\n* Centers content horizontally using grid display\n* Sets font family, size, and styles for headings, paragraphs, and inputs\n* Defines padding, margins, and background colors for containers and text areas\n* Styles links, inputs, and buttons with specific typography and layout", "metadata": {"repo": "magiclabs/example-terra", "file": "src/styles.css", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "This repository appears to be an example Terraform configuration (`example/main.tf`) and accompanying files (e.g., `backend.tf`, `variables.tf`) for a fictional \"Magic Labs\" project.\n\nThe purpose is likely to demonstrate basic Terraform usage, perhaps as a learning resource or starting point for a real-world deployment.", "file_summary": "Here is a concise summary of the file 'src/styles.css':\n\n\"Defines global CSS styles for a web page, covering layout (horizontal centering), typography, and visual appearance for various elements.\""}

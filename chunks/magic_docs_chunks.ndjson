{"code": "#\n\nEtherlink is a Layer 2 EVM-compatible blockchain offering low transaction fees and native MEV protection. It is powered by Tezos Smart Rollup technology, uses decentralized sequencers, and is secured by the Tezos layer 1 blockchain.\n\nEtherlink\n\nAs Etherlink is EVM compatible, you can follow the Ethereum documentation to send your first transaction and utilize all other wallet features.\n\nEthereum", "explanation": "The 'Etherlink - Etherlink - #Overview' section describes Etherlink, a Layer 2 blockchain compatible with Ethereum's Virtual Machine (EVM). Its main purpose is to provide a blockchain environment with lower transaction fees and built-in protection against Miner Extractable Value (MEV). Etherlink leverages Tezos Smart Rollup technology and uses decentralized sequencers for operations, ensuring its security through the Tezos layer 1 blockchain. Given its compatibility with EVM, users can apply Ethereum's documentation and tools for transactions and wallet features on Etherlink.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/evm/etherlink#chunk-1", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nEnsure you have installed the Magic SDK and have access to your API key, follow the quickstart to get started.\n\nquickstart\n\nCopy\n\n01\n\n// Setting network to point to Etherlink testnet\n\n01\n\n// Setting network to point to Etherlink testnet\n\n02\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_PUBLISHABLE_API_KEY'\n\n,\n\n{\n\n02\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_PUBLISHABLE_API_KEY'\n\n,\n\n{\n\n03\n\nnetwork\n\n:\n\n{\n\n03\n\nnetwork\n\n:\n\n{\n\n04\n\nrpcUrl\n\n:\n\n'https://node.ghostnet.etherlink.com'\n\n,\n\n04\n\nrpcUrl\n\n:\n\n'https://node.ghostnet.etherlink.com'\n\n,\n\n05\n\nchainId\n\n:\n\n128123\n\n,\n\n05\n\nchainId\n\n:\n\n128123\n\n,\n\n06\n\n}\n\n06\n\n}\n\n07\n\n)\n\n;\n\n07\n\n)\n\n;", "explanation": "The section titled \"#Configure Etherlink\" from the Magic Labs documentation provides guidance on setting up the Magic SDK to connect to the Etherlink testnet, a specific blockchain environment. The primary purpose of this setup is to allow developers to interface with the Etherlink testnet using the Magic SDK by specifying the network's remote procedure call (RPC) URL and chain ID.\n\nThe instructions include initializing the Magic instance with a user's publishable API key and configuring the network settings. The given code sample demonstrates how to set the `rpcUrl` to `https://node.ghostnet.etherlink.com` and the `chainId` to `128123`, which are the necessary parameters for connecting to the Etherlink testnet. This setup is crucial for developers who want to integrate and test blockchain applications on the Etherlink network using Magic's authentication and wallet services.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/evm/etherlink#chunk-2", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 All Auth, User and Wallet module methods for Dedicated Wallets\n\n\u2022 All EVM Provider functionality to respond to supported RPC methods\n\nAuth\n\nUser\n\nWallet\n\nDedicated Wallets\n\nRPC methods\n\nNeed a feature or see a problem? File an issue on our github repo.\n\ngithub repo", "explanation": "The '#Compatibility' section from the Magic Labs documentation outlines the capabilities and functions supported by the Etherlink integration with EVM-compatible blockchains. It specifies that the following features are supported:\n\n1. **Auth, User, and Wallet module methods**: These are applicable specifically for \"Dedicated Wallets,\" ensuring that all authentication, user management, and wallet functionalities are fully operational.\n\n2. **EVM Provider Functionality**: This ensures that the provider can correctly handle and respond to any supported Remote Procedure Call (RPC) methods, which are standard protocols used to communicate with blockchains.\n\nThe section also encourages users to report any issues or request new features via their GitHub repository, ensuring continuous improvement and user engagement.\n\nThe main purpose of this section is to inform developers and users about the compatibility and supported features of the Etherlink integration, as well as to provide a channel for feedback and enhancement requests.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/evm/etherlink#chunk-3", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 Documentation: https://docs.etherlink.com/\n\n\u2022 Block Explorer: https://testnet-explorer.etherlink.com/ (Testnet)https://explorer.etherlink.com/ (Mainnet)\n\nhttps://docs.etherlink.com/\n\n\u2022 https://testnet-explorer.etherlink.com/ (Testnet)\n\n\u2022 https://explorer.etherlink.com/ (Mainnet)\n\nhttps://testnet-explorer.etherlink.com/\n\nhttps://explorer.etherlink.com/\n\n\u2022 Faucets: https://faucet.etherlink.com/\n\nhttps://faucet.etherlink.com/", "explanation": "The section titled '#Resources & Tools' in the Etherlink documentation provides a list of helpful links and resources for users working with the Etherlink blockchain. Its main purpose is to offer quick access to essential tools and references that users might need while interacting with the Etherlink ecosystem. The resources include:\n\n1. **Documentation**: A link to the comprehensive documentation for Etherlink, which likely includes setup guides, API references, and detailed information on using Etherlink.\n\n2. **Block Explorers**: Links to the block explorers for both the testnet and mainnet versions of Etherlink. These explorers allow users to view transactions, blocks, and other blockchain data.\n\n3. **Faucet**: A link to the Etherlink faucet, which provides free testnet Etherlink tokens that developers can use for testing purposes without using real value tokens. \n\nBy consolidating these resources, this section aims to facilitate easier navigation and utilization of the Etherlink environment for developers and users.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/evm/etherlink#chunk-4", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nTo interact with the EVM network, you can use either ethers.js or web3.js libraries with Magic.\n\nethers.js\n\nethers.js\n\nweb3.js\n\nweb3.js\n\n\u2060To get started, install the following dependencies for your project:\n\n#\n\nCopy\n\n01\n\nnpm\n\ninstall\n\nethers magic-sdk\n\n01\n\nnpm\n\ninstall\n\nethers magic-sdk", "explanation": "The section titled \"How to Integrate with the Ethereum Blockchain using Javascript - #Installation - #Ethers.js\" from the Magic Labs documentation guides developers on how to set up their projects to interact with the Ethereum Virtual Machine (EVM) network using JavaScript. Specifically, it focuses on using the ethers.js library, along with Magic's SDK, to facilitate this interaction. The main purpose of this section is to provide the initial installation instruction to integrate these libraries into a project, enabling developers to start building decentralized applications on the Ethereum blockchain with the necessary tools. The installation command provided is `npm install ethers magic-sdk`, which adds ethers.js and the Magic SDK as dependencies to the project.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/featured-chains/ethereum/javascript#chunk-1", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\nnpm\n\ninstall\n\nweb3 magic-sdk\n\n01\n\nnpm\n\ninstall\n\nweb3 magic-sdk", "explanation": "The '#Web3.js' section from the Magic Labs documentation is focused on providing instructions for integrating Magic SDK with the Web3.js library to interact with the Ethereum blockchain. The main purpose of this section is to guide developers on how to set up their development environment by installing the necessary packages, namely `web3` and `magic-sdk`. This installation step is essential for enabling blockchain interactions, such as sending transactions and reading data from smart contracts, through a seamless integration of Magic's authentication features with Web3.js.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/featured-chains/ethereum/javascript#chunk-2", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nThe Magic class is the entry-point to the Magic SDK. It must be instantiated with a Magic publishable key.\n\nEthereum provider is only supported in magic-sdk@1.0.1 or later versions.\n\n#\n\n#\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\nimport\n\n{\n\nethers\n\n}\n\nfrom\n\n'ethers'\n\n;\n\n02\n\nimport\n\n{\n\nethers\n\n}\n\nfrom\n\n'ethers'\n\n;\n\n03\n\n03\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n05\n\nconst\n\nprovider\n\n=\n\nnew\n\nethers\n\n.\n\nBrowserProvider\n\n(\n\nmagic\n\n.\n\nrpcProvider\n\n)\n\n;\n\n05\n\nconst\n\nprovider\n\n=\n\nnew\n\nethers\n\n.\n\nBrowserProvider\n\n(\n\nmagic\n\n.\n\nrpcProvider\n\n)\n\n;", "explanation": "The given documentation section explains how to initialize and set up the Magic SDK with Ethers.js using ES Modules or TypeScript for Ethereum blockchain interactions. The main purpose of this section is to guide developers on how to instantiate the Magic class, which serves as the entry point to the Magic SDK, using their Magic publishable API key. \n\nIt also describes how to create an Ethereum provider by integrating Magic's RPC provider with the Ethers.js library. This setup is essential for developers who want to use the Magic SDK to interact with the Ethereum blockchain in web applications, leveraging the authentication and payment features provided by Magic. The document specifies that the Ethereum provider functionality is supported from `magic-sdk@1.0.1` or later versions.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/featured-chains/ethereum/javascript#chunk-3", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\nconst\n\n{\n\nMagic\n\n}\n\n=\n\nrequire\n\n(\n\n'magic-sdk'\n\n)\n\n;\n\n01\n\nconst\n\n{\n\nMagic\n\n}\n\n=\n\nrequire\n\n(\n\n'magic-sdk'\n\n)\n\n;\n\n02\n\nconst\n\nethers\n\n=\n\nrequire\n\n(\n\n'ethers'\n\n)\n\n;\n\n02\n\nconst\n\nethers\n\n=\n\nrequire\n\n(\n\n'ethers'\n\n)\n\n;\n\n03\n\n03\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n05\n\nconst\n\nprovider\n\n=\n\nnew\n\nethers\n\n.\n\nBrowserProvider\n\n(\n\nmagic\n\n.\n\nrpcProvider\n\n)\n\n;\n\n05\n\nconst\n\nprovider\n\n=\n\nnew\n\nethers\n\n.\n\nBrowserProvider\n\n(\n\nmagic\n\n.\n\nrpcProvider\n\n)\n\n;", "explanation": "The documentation section titled \"#CommonJS\" provides a code snippet for setting up and integrating the Magic SDK with the ethers.js library in a Node.js project using the CommonJS module syntax. CommonJS is a module format used in Node.js environments that allows you to include and manage dependencies in a project.\n\nThe main purpose of this snippet is to show developers how to initialize Magic and configure it to work with ethers.js, a popular library for interacting with the Ethereum blockchain. Here's a breakdown of what the code does:\n\n1. **Import Libraries**: It imports the `Magic` class from the `magic-sdk` and the `ethers` library using the `require` function, which is common in CommonJS syntax.\n\n2. **Initialize Magic**: It creates a new instance of the `Magic` class by providing your publishable API key (`'YOUR_PUBLISHABLE_API_KEY'`). This key is required to authenticate requests and use Magic's services.\n\n3. **Setup ethers.js Provider**: It configures a provider using `ethers.js` that acts as a bridge between Magic's authentication features and the ethers.js library. In this setup, `magic.rpcProvider` integrates Magic's authentication flow with Ethereum transactions and operations (`ethers.BrowserProvider`).\n\nThis setup enables developers to harness Magic's passwordless authentication while interacting with Ethereum, simplifying user onboarding and management in decentralized applications (DApps).", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/featured-chains/ethereum/javascript#chunk-4", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n#\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\nimport\n\nWeb3\n\nfrom\n\n'web3'\n\n;\n\n02\n\nimport\n\nWeb3\n\nfrom\n\n'web3'\n\n;\n\n03\n\n03\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n05\n\nconst\n\nweb3\n\n=\n\nnew\n\nWeb3\n\n(\n\nmagic\n\n.\n\nrpcProvider\n\n)\n\n;\n\n// Or window.web3 = ...\n\n05\n\nconst\n\nweb3\n\n=\n\nnew\n\nWeb3\n\n(\n\nmagic\n\n.\n\nrpcProvider\n\n)\n\n;\n\n// Or window.web3 = ...", "explanation": "The provided documentation section titled '#Web3.js - #ES Modules/TypeScript' from the Magic Labs documentation website explains how to integrate the Magic SDK with Web3.js using ES Modules or TypeScript for Ethereum development. The main purpose is to guide developers on setting up Magic's authentication and blockchain interaction capabilities in a JavaScript or TypeScript environment.\n\nThe key steps included are:\n1. Importing the necessary Magic SDK and Web3 libraries.\n2. Creating an instance of the `Magic` class using your unique publishable API key.\n3. Initializing a Web3 instance connected to the Magic RPC provider, allowing interaction with the Ethereum blockchain.\n\nThis setup allows developers to leverage Magic\u2019s authentication system alongside Web3.js for building decentralized applications on the Ethereum blockchain.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/featured-chains/ethereum/javascript#chunk-5", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\nconst\n\n{\n\nMagic\n\n}\n\n=\n\nrequire\n\n(\n\n'magic-sdk'\n\n)\n\n;\n\n01\n\nconst\n\n{\n\nMagic\n\n}\n\n=\n\nrequire\n\n(\n\n'magic-sdk'\n\n)\n\n;\n\n02\n\nconst\n\nWeb3\n\n=\n\nrequire\n\n(\n\n'web3'\n\n)\n\n;\n\n02\n\nconst\n\nWeb3\n\n=\n\nrequire\n\n(\n\n'web3'\n\n)\n\n;\n\n03\n\n03\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n05\n\nconst\n\nweb3\n\n=\n\nnew\n\nWeb3\n\n(\n\nmagic\n\n.\n\nrpcProvider\n\n)\n\n;\n\n// Or window.web3 = ...\n\n05\n\nconst\n\nweb3\n\n=\n\nnew\n\nWeb3\n\n(\n\nmagic\n\n.\n\nrpcProvider\n\n)\n\n;\n\n// Or window.web3 = ...", "explanation": "The '#CommonJS' section you provided from the documentation is about setting up a Magic SDK instance and integrating it with the Web3.js library using CommonJS syntax. The main purpose of this setup is to enable interaction with the Ethereum blockchain through Magic's authentication and wallet services.\n\nHere's a breakdown:\n\n1. **Import Magic SDK and Web3.js**: \n   - The `require` statements import the Magic SDK and Web3 library. These are necessary for blockchain-related operations and managing user authentication in a decentralized app (dApp).\n\n2. **Initialize Magic Instance**:\n   - `Magic('YOUR_PUBLISHABLE_API_KEY')` creates a new Magic instance using a provided API key. This key allows the SDK to authenticate users under your specific application.\n\n3. **Configure Web3 Provider**:\n   - A new Web3 instance is created with `new Web3(magic.rpcProvider)`, which links Web3.js to Magic's RPC provider. This configuration allows sending blockchain transactions and interacting with smart contracts while leveraging Magic's functionalities, like passwordless login.\n\nThe section guides developers on how to set up an environment that combines Magic's authentication features with Web3's capabilities for Ethereum-based applications, primarily using the CommonJS module pattern.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/featured-chains/ethereum/javascript#chunk-6", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nMainnet Block Explorer: https://etherscan.io\n\nhttps://etherscan.io\n\nCopy\n\n01\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_PUBLISHABLE_API_KEY'\n\n,\n\n{\n\n01\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_PUBLISHABLE_API_KEY'\n\n,\n\n{\n\n02\n\nnetwork\n\n:\n\n'mainnet'\n\n,\n\n02\n\nnetwork\n\n:\n\n'mainnet'\n\n,\n\n03\n\n}\n\n)\n\n;\n\n03\n\n}\n\n)\n\n;\n\n04\n\n\u2060\n\n04\n\n\u2060\n\n05\n\n// Magic's node infrastructure maps 'mainnet' and 'testnet' to 2 unique set of addresses.\n\n05\n\n// Magic's node infrastructure maps 'mainnet' and 'testnet' to 2 unique set of addresses.", "explanation": "The section titled '#Mainnet' in the Magic Labs embedded wallet documentation focuses on setting up the Magic SDK to interact with the Ethereum Mainnet. It provides a brief code snippet that shows how to initialize the Magic object with a publishable API key and specifies connecting to the 'mainnet' network. The section also includes a link to a mainnet block explorer, Etherscan, which is a tool used for viewing transactions and contract interactions on the Ethereum blockchain.\n\nThe primary purpose of this section is to guide developers on how to configure their application to connect with the Ethereum Mainnet using Magic's infrastructure. It indicates that Magic's infrastructure supports both 'mainnet' and 'testnet' with distinct address sets, implying configurations and interactions can be network-specific.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/featured-chains/ethereum/javascript#chunk-7", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nSepolia Block Explorer: https://sepolia.etherscan.io/\n\nhttps://sepolia.etherscan.io/\n\nSepolia Testnet Faucet: https://sepoliafaucet.com/\n\nhttps://sepoliafaucet.com/\n\nCopy\n\n01\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_PUBLISHABLE_API_KEY'\n\n,\n\n{\n\n01\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_PUBLISHABLE_API_KEY'\n\n,\n\n{\n\n02\n\nnetwork\n\n:\n\n'sepolia'\n\n,\n\n02\n\nnetwork\n\n:\n\n'sepolia'\n\n,\n\n03\n\n}\n\n)\n\n;\n\n03\n\n}\n\n)\n\n;\n\n04\n\n04\n\n05\n\n// Magic's node infrastructure maps 'mainnet' and 'sepolia' to 2 unique set of addresses.\n\n05\n\n// Magic's node infrastructure maps 'mainnet' and 'sepolia' to 2 unique set of addresses.", "explanation": "The documentation section titled '#Testnet' provides information on how to set up and use the Magic SDK with the Sepolia Ethereum Testnet. The Sepolia Testnet is a testing environment for blockchain developers that mimics the Ethereum mainnet but uses test Ether for transactions instead of real currency. This allows developers to experiment and test their smart contracts and decentralized applications (dApps) without incurring any cost.\n\nThe main purpose of this section is to guide developers on configuring their Magic SDK instance to connect to the Sepolia Testnet. It includes:\n\n1. **Sepolia Block Explorer URL**: Provides a link to the Sepolia Block Explorer, where developers can view transactions, blocks, and other network activities on the Sepolia network.\n\n2. **Sepolia Testnet Faucet URL**: Provides a link to the Sepolia Testnet Faucet, where developers can obtain test Ether to use within the Sepolia Testnet.\n\n3. **Code Snippet**: Demonstrates how to initialize the Magic SDK with the Sepolia network. It highlights the necessary configuration, specifically setting the `network` parameter to `'sepolia'` when creating a new instance of Magic with your publishable API key.\n\n4. **Node Infrastructure Mapping Note**: Informs that Magic's node infrastructure handles `'mainnet'` and `'sepolia'` differently, mapping them to unique sets of addresses to facilitate operations on these networks. \n\nThis documentation section is aimed at developers wishing to test their applications in a risk-free environment before deployment on Ethereum's mainnet.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/featured-chains/ethereum/javascript#chunk-8", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nYou can allow specific URLs to interact with the Magic SDK, such as a custom RPC URL to send transactions to your node. The Content Security Policy (CSP) of a browser dictates what resources can be loaded. If you're using a Dedicated Wallet, you can update the policy in the settings page of the dashboard with your custom URL. If you're using a Universal Wallet, please reach out to support to get your URL added.\n\nDedicated Wallet\n\ndashboard\n\nUniversal Wallet\n\nThe use of a custom node will require the RPC URL to the project's Content Security Policy from your Magic dashboard. Refer to the CSP documentation.\n\nMagic dashboard\n\nCSP documentation\n\nCopy\n\n01\n\nconst\n\ncustomNodeOptions\n\n=\n\n{\n\n01\n\nconst\n\ncustomNodeOptions\n\n=\n\n{\n\n02\n\nrpcUrl\n\n:\n\n'http://127.0.0.1:7545'\n\n,\n\n// Your own node URL\n\n02\n\nrpcUrl\n\n:\n\n'http://127.0.0.1:7545'\n\n,\n\n// Your own node URL\n\n03\n\nchainId\n\n:\n\n1011\n\n,\n\n// Your own node's chainId\n\n03\n\nchainId\n\n:\n\n1011\n\n,\n\n// Your own node's chainId\n\n04\n\n}\n\n;\n\n04\n\n}\n\n;\n\n05\n\n05\n\n06\n\n// Setting network to localhost blockchain\n\n06\n\n// Setting network to localhost blockchain\n\n07\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_PUBLISHABLE_API_KEY'\n\n,\n\n{\n\n07\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_PUBLISHABLE_API_KEY'\n\n,\n\n{\n\n08\n\nnetwork\n\n:\n\ncustomNodeOptions\n\n,\n\n08\n\nnetwork\n\n:\n\ncustomNodeOptions\n\n,\n\n09\n\n}\n\n)\n\n;\n\n09\n\n}\n\n)\n\n;\n\n10\n\n10\n\n11\n\n// This configuration will map addresses in line with Magic's 'mainnet' setup.\n\n11\n\n// This configuration will map addresses in line with Magic's 'mainnet' setup.", "explanation": "The section titled '#Custom Node' from the Magic Labs documentation explains how to configure a custom node for interacting with the Magic SDK. The main purpose is to allow developers to use specific URLs, such as a custom RPC (Remote Procedure Call) URL, to send transactions to their own Ethereum node instead of using the default nodes provided by Magic. This configuration is particularly useful for developers who require more control over the blockchain environment, such as for testing or when connecting to a private Ethereum network.\n\nKey points from the documentation include:\n\n1. **Content Security Policy (CSP)**: A browser's CSP dictates what resources can be interacted with. When using a custom node, the RPC URL must be allowed by the CSP. This requires configuration on the Magic dashboard for those using Dedicated Wallets. For Universal Wallet users, support must add the URL.\n\n2. **Custom Node Configuration**: Developers can specify their own node's RPC URL and chain ID within their application's code. This is done by setting parameters such as 'rpcUrl' and 'chainId' in a configuration object.\n\n3. **Implementation Example**: The documentation provides a code snippet illustrating how to set up a custom node. This snippet demonstrates how to create a `Magic` object with the custom network options, allowing integration with the developer's own blockchain setup. \n\nOverall, this customization enables a more tailored and possibly more secure operation by connecting directly to a specific blockchain node or network.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/featured-chains/ethereum/javascript#chunk-9", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nAll Web.js examples are using web3@1.2.0 or later version.\n\n#\n\n#\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\nimport\n\n{\n\nethers\n\n}\n\nfrom\n\n'ethers'\n\n;\n\n02\n\nimport\n\n{\n\nethers\n\n}\n\nfrom\n\n'ethers'\n\n;\n\n03\n\n03\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n05\n\nconst\n\nprovider\n\n=\n\nnew\n\nethers\n\n.\n\nBrowserProvider\n\n(\n\nmagic\n\n.\n\nrpcProvider\n\n)\n\n;\n\n05\n\nconst\n\nprovider\n\n=\n\nnew\n\nethers\n\n.\n\nBrowserProvider\n\n(\n\nmagic\n\n.\n\nrpcProvider\n\n)\n\n;\n\n06\n\n06\n\n07\n\n// \u2b50\ufe0f After user is successfully authenticated\n\n07\n\n// \u2b50\ufe0f After user is successfully authenticated\n\n08\n\n08\n\n09\n\nconst\n\nsigner\n\n=\n\nawait\n\nprovider\n\n.\n\ngetSigner\n\n(\n\n)\n\n;\n\n09\n\nconst\n\nsigner\n\n=\n\nawait\n\nprovider\n\n.\n\ngetSigner\n\n(\n\n)\n\n;\n\n10\n\n10\n\n11\n\nconst\n\ndestination\n\n=\n\n'0xE0cef4417a772512E6C95cEf366403839b0D6D6D'\n\n;\n\n11\n\nconst\n\ndestination\n\n=\n\n'0xE0cef4417a772512E6C95cEf366403839b0D6D6D'\n\n;\n\n12\n\nconst\n\namount\n\n=\n\nethers\n\n.\n\nparseEther\n\n(\n\n'1.0'\n\n)\n\n;\n\n// Convert 1 ether to wei\n\n12\n\nconst\n\namount\n\n=\n\nethers\n\n.\n\nparseEther\n\n(\n\n'1.0'\n\n)\n\n;\n\n// Convert 1 ether to wei\n\n13\n\n13\n\n14\n\n// Submit transaction to the blockchain\n\n14\n\n// Submit transaction to the blockchain\n\n15\n\nconst\n\ntx\n\n=\n\nawait\n\nsigner\n\n.\n\nsendTransaction\n\n(\n\n{\n\n15\n\nconst\n\ntx\n\n=\n\nawait\n\nsigner\n\n.\n\nsendTransaction\n\n(\n\n{\n\n16\n\nto\n\n:\n\ndestination\n\n,\n\n16\n\nto\n\n:\n\ndestination\n\n,\n\n17\n\nvalue\n\n:\n\namount\n\n,\n\n17\n\nvalue\n\n:\n\namount\n\n,\n\n18\n\n}\n\n)\n\n;\n\n18\n\n}\n\n)\n\n;\n\n19\n\n19\n\n20\n\n// Wait for transaction to be mined\n\n20\n\n// Wait for transaction to be mined\n\n21\n\nconst\n\nreceipt\n\n=\n\nawait\n\ntx\n\n.\n\nwait\n\n(\n\n)\n\n;\n\n21\n\nconst\n\nreceipt\n\n=\n\nawait\n\ntx\n\n.\n\nwait\n\n(\n\n)\n\n;", "explanation": "The '#Common Methods - #Send Transaction - #Ethers.js' section from the Magic Labs documentation provides a guide on how to send a cryptocurrency transaction using ethers.js within an application that integrates the Magic SDK. This section demonstrates a use case where a transaction is created and submitted to the Ethereum blockchain.\n\nIts main purpose is to showcase how developers can use Magic's features in conjunction with ethers.js to send cryptocurrency transactions securely from a user-authenticated session. The code example entails the following steps:\n\n1. **Setup**: Imports the `Magic` SDK and `ethers.js` libraries, then initializes a Magic instance using your publishable API key. This sets up the necessary provider that integrates with the Magic authentication system.\n\n2. **Authentication**: Assumes that the user is already authenticated, making it possible to proceed with performing blockchain transactions.\n\n3. **Create a Signer**: Uses the provider to retrieve a signer, which represents an account's ability to sign transactions.\n\n4. **Transaction Details**: Specifies a destination address and the transaction amount. The amount is converted from ether to wei (the smallest unit of ether).\n\n5. **Send Transaction**: Uses the signer to send the transaction to the given destination with the specified amount.\n\n6. **Transaction Receipt**: Waits for the transaction to be mined on the blockchain and receives a transaction receipt, confirming the transaction has been processed.\n\nThis walkthrough illustrates the process of securely executing Ethereum transactions through a combination of Magic authentication and ethers.js, leveraging web3 technologies for blockchain interactions.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/featured-chains/ethereum/javascript#chunk-10", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\nimport\n\nWeb3\n\nfrom\n\n'web3'\n\n;\n\n02\n\nimport\n\nWeb3\n\nfrom\n\n'web3'\n\n;\n\n03\n\n03\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n05\n\nconst\n\nweb3\n\n=\n\nnew\n\nWeb3\n\n(\n\nmagic\n\n.\n\nrpcProvider\n\n)\n\n;\n\n05\n\nconst\n\nweb3\n\n=\n\nnew\n\nWeb3\n\n(\n\nmagic\n\n.\n\nrpcProvider\n\n)\n\n;\n\n06\n\n06\n\n07\n\n// \u2b50\ufe0f After user is successfully authenticated\n\n07\n\n// \u2b50\ufe0f After user is successfully authenticated\n\n08\n\n08\n\n09\n\n// Get user's Ethereum public address\n\n09\n\n// Get user's Ethereum public address\n\n10\n\nconst\n\nfromAddress\n\n=\n\n(\n\nawait\n\nweb3\n\n.\n\neth\n\n.\n\ngetAccounts\n\n(\n\n)\n\n)\n\n[\n\n0\n\n]\n\n;\n\n10\n\nconst\n\nfromAddress\n\n=\n\n(\n\nawait\n\nweb3\n\n.\n\neth\n\n.\n\ngetAccounts\n\n(\n\n)\n\n)\n\n[\n\n0\n\n]\n\n;\n\n11\n\n11\n\n12\n\nconst\n\ndestination\n\n=\n\n'0xE0cef4417a772512E6C95cEf366403839b0D6D6D'\n\n;\n\n12\n\nconst\n\ndestination\n\n=\n\n'0xE0cef4417a772512E6C95cEf366403839b0D6D6D'\n\n;\n\n13\n\nconst\n\namount\n\n=\n\nweb3\n\n.\n\nutils\n\n.\n\ntoWei\n\n(\n\n1\n\n)\n\n;\n\n// Convert 1 ether to wei\n\n13\n\nconst\n\namount\n\n=\n\nweb3\n\n.\n\nutils\n\n.\n\ntoWei\n\n(\n\n1\n\n)\n\n;\n\n// Convert 1 ether to wei\n\n14\n\n14\n\n15\n\n// Submit transaction to the blockchain and wait for it to be mined\n\n15\n\n// Submit transaction to the blockchain and wait for it to be mined\n\n16\n\nconst\n\nreceipt\n\n=\n\nawait\n\nweb3\n\n.\n\neth\n\n.\n\nsendTransaction\n\n(\n\n{\n\n16\n\nconst\n\nreceipt\n\n=\n\nawait\n\nweb3\n\n.\n\neth\n\n.\n\nsendTransaction\n\n(\n\n{\n\n17\n\nfrom\n\n:\n\nfromAddress\n\n,\n\n17\n\nfrom\n\n:\n\nfromAddress\n\n,\n\n18\n\nto\n\n:\n\ndestination\n\n,\n\n18\n\nto\n\n:\n\ndestination\n\n,\n\n19\n\nvalue\n\n:\n\namount\n\n,\n\n19\n\nvalue\n\n:\n\namount\n\n,\n\n20\n\n}\n\n)\n\n;\n\n20\n\n}\n\n)\n\n;", "explanation": "The section titled '#Web3.js' from the Magic Labs documentation provides a detailed guide on how to integrate Magic's authentication service with Web3.js to interact with the Ethereum blockchain in a JavaScript environment. The main purpose of this section is to demonstrate a basic workflow to authenticate a user, retrieve their Ethereum public address, and perform a transaction on the Ethereum blockchain using Web3.js and the Magic SDK.\n\nHere's a clear breakdown of the steps included in this documentation:\n\n1. **Importing Required Libraries**: The script begins by importing the `Magic` class from the `magic-sdk` and the `Web3` library from `web3`. These libraries are essential for managing authentication and blockchain interactions.\n\n2. **Initializing Magic and Web3 Instances**: \n   - A `magic` instance is created with a publishable API key, which links the application to Magic's authentication service.\n   - A `web3` instance is initialized using the Magic `rpcProvider`, which allows the use of Web3 to interact with the Ethereum blockchain in conjunction with Magic's authentication.\n\n3. **User Authentication**: After a user is authenticated via Magic, the system can securely interact with the blockchain on behalf of that user.\n\n4. **Retrieving the Ethereum Address**: The script retrieves the authenticated user's Ethereum public address using `web3.eth.getAccounts()`, which accesses the accounts linked to the Magic session.\n\n5. **Transaction Setup and Execution**:\n   - It sets a recipient Ethereum address (`destination`) to which the Ether will be sent.\n   - It converts 1 Ether to Wei using `web3.utils.toWei(1)`, as transactions on Ethereum are conducted in Wei.\n   - Finally, the transaction is created and submitted to the blockchain with `web3.eth.sendTransaction`, specifying details such as sender address, recipient address, and amount.\n\nThe section provides a straightforward example of combining Magic's user authentication capabilities with Web3.js to seamlessly perform Ethereum transactions in a web application.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/featured-chains/ethereum/javascript#chunk-11", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n#\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\nimport\n\n{\n\nethers\n\n}\n\nfrom\n\n'ethers'\n\n;\n\n02\n\nimport\n\n{\n\nethers\n\n}\n\nfrom\n\n'ethers'\n\n;\n\n03\n\n03\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n05\n\nconst\n\nprovider\n\n=\n\nnew\n\nethers\n\n.\n\nBrowserProvider\n\n(\n\nmagic\n\n.\n\nrpcProvider\n\n)\n\n;\n\n05\n\nconst\n\nprovider\n\n=\n\nnew\n\nethers\n\n.\n\nBrowserProvider\n\n(\n\nmagic\n\n.\n\nrpcProvider\n\n)\n\n;\n\n06\n\n06\n\n07\n\n// \u2b50\ufe0f After user is successfully authenticated\n\n07\n\n// \u2b50\ufe0f After user is successfully authenticated\n\n08\n\n08\n\n09\n\nconst\n\nsigner\n\n=\n\nawait\n\nprovider\n\n.\n\ngetSigner\n\n(\n\n)\n\n;\n\n09\n\nconst\n\nsigner\n\n=\n\nawait\n\nprovider\n\n.\n\ngetSigner\n\n(\n\n)\n\n;\n\n10\n\n10\n\n11\n\nconst\n\noriginalMessage\n\n=\n\n'YOUR_MESSAGE'\n\n;\n\n11\n\nconst\n\noriginalMessage\n\n=\n\n'YOUR_MESSAGE'\n\n;\n\n12\n\nconst\n\nsignedMessage\n\n=\n\nawait\n\nsigner\n\n.\n\nsignMessage\n\n(\n\noriginalMessage\n\n)\n\n;\n\n12\n\nconst\n\nsignedMessage\n\n=\n\nawait\n\nsigner\n\n.\n\nsignMessage\n\n(\n\noriginalMessage\n\n)\n\n;", "explanation": "The section titled '#Sign Message - #Ethers.js - Personal Sign' in the documentation is about using the Magic Labs SDK combined with Ethers.js to create a system for signing messages on the Ethereum blockchain. \n\nThe main purpose of this code example is to demonstrate how to authenticate a user and then sign a message using the user's cryptographic credentials. Here's a breakdown of the process described in the code:\n\n1. **Import Libraries**: The `magic-sdk` and `ethers` libraries are imported. The `Magic` SDK is used for authentication through Magic's API, whereas Ethers.js is a library for interacting with the Ethereum blockchain.\n\n2. **Initialize Magic and Provider**: The `Magic` instance is initialized with a publishable API key, and a `provider` is created using `ethers.BrowserProvider`, which leverages Magic\u2019s RPC provider.\n\n3. **Authenticate User**: The example assumes that the user has been successfully authenticated.\n\n4. **Create Signer**: A `signer` object is obtained from the provider. The `signer` is essentially an object representing the user's Ethereum account used to sign transactions or messages.\n\n5. **Sign a Message**: An `originalMessage` is defined. The `signer` then uses its `signMessage` method to sign this message. The signed message is stored in `signedMessage`.\n\nThis process is useful for verifying the authenticity of data (like signing a contract or proving ownership) without revealing sensitive information such as private keys. It forms a cornerstone for many decentralized applications that require message verification or user-specific actions authenticated on the blockchain.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/featured-chains/ethereum/javascript#chunk-12", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "Copy\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\nimport\n\n{\n\nethers\n\n}\n\nfrom\n\n'ethers'\n\n;\n\n02\n\nimport\n\n{\n\nethers\n\n}\n\nfrom\n\n'ethers'\n\n;\n\n03\n\n03\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n05\n\nconst\n\nprovider\n\n=\n\nnew\n\nethers\n\n.\n\nBrowserProvider\n\n(\n\nmagic\n\n.\n\nrpcProvider\n\n)\n\n;\n\n05\n\nconst\n\nprovider\n\n=\n\nnew\n\nethers\n\n.\n\nBrowserProvider\n\n(\n\nmagic\n\n.\n\nrpcProvider\n\n)\n\n;\n\n06\n\n06\n\n07\n\n// \u2b50\ufe0f After user is successfully authenticated\n\n07\n\n// \u2b50\ufe0f After user is successfully authenticated\n\n08\n\n08\n\n09\n\nconst\n\nsigner\n\n=\n\nawait\n\nprovider\n\n.\n\ngetSigner\n\n(\n\n)\n\n;\n\n09\n\nconst\n\nsigner\n\n=\n\nawait\n\nprovider\n\n.\n\ngetSigner\n\n(\n\n)\n\n;\n\n10\n\n10\n\n11\n\n// Get user's Ethereum public address\n\n11\n\n// Get user's Ethereum public address\n\n12\n\nconst\n\nfromAddress\n\n=\n\nawait\n\nsigner\n\n.\n\ngetAddress\n\n(\n\n)\n\n;\n\n12\n\nconst\n\nfromAddress\n\n=\n\nawait\n\nsigner\n\n.\n\ngetAddress\n\n(\n\n)\n\n;\n\n13\n\n13\n\n14\n\nconst\n\noriginalMessage\n\n=\n\n[\n\n14\n\nconst\n\noriginalMessage\n\n=\n\n[\n\n15\n\n{\n\n15\n\n{\n\n16\n\ntype\n\n:\n\n'string'\n\n,\n\n16\n\ntype\n\n:\n\n'string'\n\n,\n\n17\n\nname\n\n:\n\n'fullName'\n\n,\n\n17\n\nname\n\n:\n\n'fullName'\n\n,\n\n18\n\nvalue\n\n:\n\n'John Doe'\n\n,\n\n18\n\nvalue\n\n:\n\n'John Doe'\n\n,\n\n19\n\n}\n\n,\n\n19\n\n}\n\n,\n\n20\n\n{\n\n20\n\n{\n\n21\n\ntype\n\n:\n\n'uint32'\n\n,\n\n21\n\ntype\n\n:\n\n'uint32'\n\n,\n\n22\n\nname\n\n:\n\n'userId'\n\n,\n\n22\n\nname\n\n:\n\n'userId'\n\n,\n\n23\n\nvalue\n\n:\n\n'1234'\n\n,\n\n23\n\nvalue\n\n:\n\n'1234'\n\n,\n\n24\n\n}\n\n,\n\n24\n\n}\n\n,\n\n25\n\n]\n\n;\n\n25\n\n]\n\n;\n\n26\n\nconst\n\nparams\n\n=\n\n[\n\noriginalMessage\n\n,\n\nfromAddress\n\n]\n\n;\n\n26\n\nconst\n\nparams\n\n=\n\n[\n\noriginalMessage\n\n,\n\nfromAddress\n\n]\n\n;\n\n27\n\nconst\n\nmethod\n\n=\n\n'eth_signTypedData'\n\n;\n\n27\n\nconst\n\nmethod\n\n=\n\n'eth_signTypedData'\n\n;\n\n28\n\n28\n\n29\n\nconst\n\nsignedMessage\n\n=\n\nawait\n\nsigner\n\n.\n\nprovider\n\n.\n\nsend\n\n(\n\nmethod\n\n,\n\nparams\n\n)\n\n;\n\n29\n\nconst\n\nsignedMessage\n\n=\n\nawait\n\nsigner\n\n.\n\nprovider\n\n.\n\nsend\n\n(\n\nmethod\n\n,\n\nparams\n\n)\n\n;", "explanation": "The section titled 'Sign Typed Data v1' from the Magic Labs documentation explains how to use the Magic SDK in conjunction with the Ethers.js library to sign typed data on the Ethereum blockchain. This is particularly relevant for Ethereum applications that require secure and verifiable signing of structured data.\n\n### Main Purpose:\nThe main purpose of this section is to guide developers in implementing a process where a user's Ethereum wallet can sign structured data (referred to as \"typed data\") while maintaining security and integrity. This is typically used in decentralized applications (dApps) to validate user actions or agreements without exposing their private keys.\n\n### Key Steps Explained:\n1. **Import Libraries:** \n   - The `magic-sdk` for interfacing with Magic's authentication services.\n   - The `ethers` library for Ethereum-specific operations.\n\n2. **Initialize Magic and Ethers Provider:**\n   - A `Magic` instance is created using a publishable API key.\n   - An Ethereum provider is set up using `ethers.BrowserProvider` and Magic's RPC provider.\n\n3. **User Authentication:**\n   - The process begins after a user is authenticated through Magic.\n\n4. **Get Signer and Address:**\n   - The `provider.getSigner()` method fetches the authenticated user's signer object.\n   - The `signer.getAddress()` retrieves the user's public Ethereum address.\n\n5. **Create Typed Data:**\n   - An array of objects defines the message to be signed, specifying data types and values (e.g., a string for a full name and a uint32 for a user ID).\n\n6. **Sign Typed Data:**\n   - The method `eth_signTypedData` is called with parameters `originalMessage` and `fromAddress` for the signing process.\n   - The signed message is obtained asynchronously.\n\nThis signing mechanism ensures that data can be securely signed off-chain, maintaining authenticity and enabling verification without the need for centralized signatures.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/featured-chains/ethereum/javascript#chunk-13", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "Copy\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\nimport\n\n{\n\nethers\n\n}\n\nfrom\n\n'ethers'\n\n;\n\n02\n\nimport\n\n{\n\nethers\n\n}\n\nfrom\n\n'ethers'\n\n;\n\n03\n\n03\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n05\n\nconst\n\nprovider\n\n=\n\nnew\n\nethers\n\n.\n\nBrowserProvider\n\n(\n\nmagic\n\n.\n\nrpcProvider\n\n)\n\n;\n\n05\n\nconst\n\nprovider\n\n=\n\nnew\n\nethers\n\n.\n\nBrowserProvider\n\n(\n\nmagic\n\n.\n\nrpcProvider\n\n)\n\n;\n\n06\n\n06\n\n07\n\n// \u2b50\ufe0f After user is successfully authenticated\n\n07\n\n// \u2b50\ufe0f After user is successfully authenticated\n\n08\n\n08\n\n09\n\nconst\n\nsigner\n\n=\n\nawait\n\nprovider\n\n.\n\ngetSigner\n\n(\n\n)\n\n;\n\n09\n\nconst\n\nsigner\n\n=\n\nawait\n\nprovider\n\n.\n\ngetSigner\n\n(\n\n)\n\n;\n\n10\n\n10\n\n11\n\n// Get user's Ethereum public address\n\n11\n\n// Get user's Ethereum public address\n\n12\n\nconst\n\nfromAddress\n\n=\n\nawait\n\nsigner\n\n.\n\ngetAddress\n\n(\n\n)\n\n;\n\n12\n\nconst\n\nfromAddress\n\n=\n\nawait\n\nsigner\n\n.\n\ngetAddress\n\n(\n\n)\n\n;\n\n13\n\n13\n\n14\n\nconst\n\noriginalMessage\n\n=\n\n{\n\n14\n\nconst\n\noriginalMessage\n\n=\n\n{\n\n15\n\ntypes\n\n:\n\n{\n\n15\n\ntypes\n\n:\n\n{\n\n16\n\nEIP712Domain\n\n:\n\n[\n\n16\n\nEIP712Domain\n\n:\n\n[\n\n17\n\n{\n\n17\n\n{\n\n18\n\nname\n\n:\n\n'name'\n\n,\n\n18\n\nname\n\n:\n\n'name'\n\n,\n\n19\n\ntype\n\n:\n\n'string'\n\n,\n\n19\n\ntype\n\n:\n\n'string'\n\n,\n\n20\n\n}\n\n,\n\n20\n\n}\n\n,\n\n21\n\n{\n\n21\n\n{\n\n22\n\nname\n\n:\n\n'version'\n\n,\n\n22\n\nname\n\n:\n\n'version'\n\n,\n\n23\n\ntype\n\n:\n\n'string'\n\n,\n\n23\n\ntype\n\n:\n\n'string'\n\n,\n\n24\n\n}\n\n,\n\n24\n\n}\n\n,\n\n25\n\n{\n\n25\n\n{\n\n26\n\nname\n\n:\n\n'verifyingContract'\n\n,\n\n26\n\nname\n\n:\n\n'verifyingContract'\n\n,\n\n27\n\ntype\n\n:\n\n'address'\n\n,\n\n27\n\ntype\n\n:\n\n'address'\n\n,\n\n28\n\n}\n\n,\n\n28\n\n}\n\n,\n\n29\n\n]\n\n,\n\n29\n\n]\n\n,\n\n30\n\nGreeting\n\n:\n\n[\n\n30\n\nGreeting\n\n:\n\n[\n\n31\n\n{\n\n31\n\n{\n\n32\n\nname\n\n:\n\n'contents'\n\n,\n\n32\n\nname\n\n:\n\n'contents'\n\n,\n\n33\n\ntype\n\n:\n\n'string'\n\n,\n\n33\n\ntype\n\n:\n\n'string'\n\n,\n\n34\n\n}\n\n,\n\n34\n\n}\n\n,\n\n35\n\n]\n\n,\n\n35\n\n]\n\n,\n\n36\n\n}\n\n,\n\n36\n\n}\n\n,\n\n37\n\nprimaryType\n\n:\n\n'Greeting'\n\n,\n\n37\n\nprimaryType\n\n:\n\n'Greeting'\n\n,\n\n38\n\ndomain\n\n:\n\n{\n\n38\n\ndomain\n\n:\n\n{\n\n39\n\nname\n\n:\n\n'Magic'\n\n,\n\n39\n\nname\n\n:\n\n'Magic'\n\n,\n\n40\n\nversion\n\n:\n\n'1'\n\n,\n\n40\n\nversion\n\n:\n\n'1'\n\n,\n\n41\n\nverifyingContract\n\n:\n\n'0xE0cef4417a772512E6C95cEf366403839b0D6D6D'\n\n,\n\n41\n\nverifyingContract\n\n:\n\n'0xE0cef4417a772512E6C95cEf366403839b0D6D6D'\n\n,\n\n42\n\n}\n\n,\n\n42\n\n}\n\n,\n\n43\n\nmessage\n\n:\n\n{\n\n43\n\nmessage\n\n:\n\n{\n\n44\n\ncontents\n\n:\n\n'Hello, from Magic!'\n\n,\n\n44\n\ncontents\n\n:\n\n'Hello, from Magic!'\n\n,\n\n45\n\n}\n\n,\n\n45\n\n}\n\n,\n\n46\n\n}\n\n;\n\n46\n\n}\n\n;\n\n47\n\nconst\n\nparams\n\n=\n\n[\n\nfromAddress\n\n,\n\noriginalMessage\n\n]\n\n;\n\n47\n\nconst\n\nparams\n\n=\n\n[\n\nfromAddress\n\n,\n\noriginalMessage\n\n]\n\n;\n\n48\n\nconst\n\nmethod\n\n=\n\n'eth_signTypedData_v3'\n\n;\n\n48\n\nconst\n\nmethod\n\n=\n\n'eth_signTypedData_v3'\n\n;\n\n49\n\n49\n\n50\n\nconst\n\nsignedMessage\n\n=\n\nawait\n\nsigner\n\n.\n\nprovider\n\n.\n\nsend\n\n(\n\nmethod\n\n,\n\nparams\n\n)\n\n;\n\n50\n\nconst\n\nsignedMessage\n\n=\n\nawait\n\nsigner\n\n.\n\nprovider\n\n.\n\nsend\n\n(\n\nmethod\n\n,\n\nparams\n\n)\n\n;", "explanation": "The section titled 'Sign Typed Data v3' from the Magic Labs documentation explains how to implement the signing of typed data in Ethereum using the Magic SDK and Ethers.js library. The process involves using the Ethereum standard `eth_signTypedData_v3`, which allows structured data (EIP-712 compliant) to be signed by users.\n\n### Main Purpose:\n- **Initialization**:\n  - Import necessary modules (`Magic` from `magic-sdk` and `ethers` from `ethers`).\n  - Initialize the Magic SDK with your publishable API key to create a `magic` instance.\n  - Create an Ethereum provider using `ethers.BrowserProvider` with `magic.rpcProvider`.\n\n- **User Authentication**:\n  - After the user is authenticated, get the Ethereum signer object from the provider, which will facilitate interaction with the user's wallet.\n\n- **Signing Typed Data**:\n  - Retrieve the user's Ethereum address using `signer.getAddress()`.\n  - Define the `originalMessage` to be signed. It follows the EIP-712 standard with specified types (`EIP712Domain` and a custom `Greeting`) and an actual message.\n  - Set up the parameters, including the address and message, and define the method `eth_signTypedData_v3`.\n  - Use the `provider.send()` method to sign the message, which provides a digital signature that can authenticate the message without exposing private keys.\n\nThis operation is crucial for enabling secure and authenticated interactions, ensuring that messages or data are legitimately signed by the owner of an Ethereum address.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/featured-chains/ethereum/javascript#chunk-14", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "Copy\n\n01\n\n/*\n\n01\n\n/*\n\n02\n\nSign Typed Data v4 adds support for\n\n02\n\nSign Typed Data v4 adds support for\n\n03\n\narrays and recursive data types.\n\n03\n\narrays and recursive data types.\n\n04\n\n04\n\n05\n\nOtherwise, it works the same as Sign Typed Data v3.\n\n05\n\nOtherwise, it works the same as Sign Typed Data v3.\n\n06\n\n*/\n\n06\n\n*/\n\n07\n\n07\n\n08\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n08\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n09\n\nimport\n\n{\n\nethers\n\n}\n\nfrom\n\n'ethers'\n\n;\n\n09\n\nimport\n\n{\n\nethers\n\n}\n\nfrom\n\n'ethers'\n\n;\n\n10\n\n10\n\n11\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n11\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n12\n\nconst\n\nprovider\n\n=\n\nnew\n\nethers\n\n.\n\nBrowserProvider\n\n(\n\nmagic\n\n.\n\nrpcProvider\n\n)\n\n;\n\n12\n\nconst\n\nprovider\n\n=\n\nnew\n\nethers\n\n.\n\nBrowserProvider\n\n(\n\nmagic\n\n.\n\nrpcProvider\n\n)\n\n;\n\n13\n\n13\n\n14\n\n// \u2b50\ufe0f After user is successfully authenticated\n\n14\n\n// \u2b50\ufe0f After user is successfully authenticated\n\n15\n\n15\n\n16\n\nconst\n\nsigner\n\n=\n\nawait\n\nprovider\n\n.\n\ngetSigner\n\n(\n\n)\n\n;\n\n16\n\nconst\n\nsigner\n\n=\n\nawait\n\nprovider\n\n.\n\ngetSigner\n\n(\n\n)\n\n;\n\n17\n\n17\n\n18\n\n// Get user's Ethereum public address\n\n18\n\n// Get user's Ethereum public address\n\n19\n\nconst\n\nfromAddress\n\n=\n\nawait\n\nsigner\n\n.\n\ngetAddress\n\n(\n\n)\n\n;\n\n19\n\nconst\n\nfromAddress\n\n=\n\nawait\n\nsigner\n\n.\n\ngetAddress\n\n(\n\n)\n\n;\n\n20\n\n20\n\n21\n\nconst\n\noriginalMessage\n\n=\n\n{\n\n21\n\nconst\n\noriginalMessage\n\n=\n\n{\n\n22\n\ntypes\n\n:\n\n{\n\n22\n\ntypes\n\n:\n\n{\n\n23\n\nEIP712Domain\n\n:\n\n[\n\n23\n\nEIP712Domain\n\n:\n\n[\n\n24\n\n{\n\n24\n\n{\n\n25\n\nname\n\n:\n\n'name'\n\n,\n\n25\n\nname\n\n:\n\n'name'\n\n,\n\n26\n\ntype\n\n:\n\n'string'\n\n,\n\n26\n\ntype\n\n:\n\n'string'\n\n,\n\n27\n\n}\n\n,\n\n27\n\n}\n\n,\n\n28\n\n{\n\n28\n\n{\n\n29\n\nname\n\n:\n\n'version'\n\n,\n\n29\n\nname\n\n:\n\n'version'\n\n,\n\n30\n\ntype\n\n:\n\n'string'\n\n,\n\n30\n\ntype\n\n:\n\n'string'\n\n,\n\n31\n\n}\n\n,\n\n31\n\n}\n\n,\n\n32\n\n{\n\n32\n\n{\n\n33\n\nname\n\n:\n\n'verifyingContract'\n\n,\n\n33\n\nname\n\n:\n\n'verifyingContract'\n\n,\n\n34\n\ntype\n\n:\n\n'address'\n\n,\n\n34\n\ntype\n\n:\n\n'address'\n\n,\n\n35\n\n}\n\n,\n\n35\n\n}\n\n,\n\n36\n\n]\n\n,\n\n36\n\n]\n\n,\n\n37\n\nGreeting\n\n:\n\n[\n\n37\n\nGreeting\n\n:\n\n[\n\n38\n\n{\n\n38\n\n{\n\n39\n\nname\n\n:\n\n'contents'\n\n,\n\n39\n\nname\n\n:\n\n'contents'\n\n,\n\n40\n\ntype\n\n:\n\n'string'\n\n,\n\n40\n\ntype\n\n:\n\n'string'\n\n,\n\n41\n\n}\n\n,\n\n41\n\n}\n\n,\n\n42\n\n]\n\n,\n\n42\n\n]\n\n,\n\n43\n\n}\n\n,\n\n43\n\n}\n\n,\n\n44\n\nprimaryType\n\n:\n\n'Greeting'\n\n,\n\n44\n\nprimaryType\n\n:\n\n'Greeting'\n\n,\n\n45\n\ndomain\n\n:\n\n{\n\n45\n\ndomain\n\n:\n\n{\n\n46\n\nname\n\n:\n\n'Magic'\n\n,\n\n46\n\nname\n\n:\n\n'Magic'\n\n,\n\n47\n\nversion\n\n:\n\n'1'\n\n,\n\n47\n\nversion\n\n:\n\n'1'\n\n,\n\n48\n\nverifyingContract\n\n:\n\n'0xE0cef4417a772512E6C95cEf366403839b0D6D6D'\n\n,\n\n48\n\nverifyingContract\n\n:\n\n'0xE0cef4417a772512E6C95cEf366403839b0D6D6D'\n\n,\n\n49\n\n}\n\n,\n\n49\n\n}\n\n,\n\n50\n\nmessage\n\n:\n\n{\n\n50\n\nmessage\n\n:\n\n{\n\n51\n\ncontents\n\n:\n\n'Hello, from Magic!'\n\n,\n\n51\n\ncontents\n\n:\n\n'Hello, from Magic!'\n\n,\n\n52\n\n}\n\n,\n\n52\n\n}\n\n,\n\n53\n\n}\n\n;\n\n53\n\n}\n\n;\n\n54\n\nconst\n\nparams\n\n=\n\n[\n\nfromAddress\n\n,\n\noriginalMessage\n\n]\n\n;\n\n54\n\nconst\n\nparams\n\n=\n\n[\n\nfromAddress\n\n,\n\noriginalMessage\n\n]\n\n;\n\n55\n\nconst\n\nmethod\n\n=\n\n'eth_signTypedData_v4'\n\n;\n\n55\n\nconst\n\nmethod\n\n=\n\n'eth_signTypedData_v4'\n\n;\n\n56\n\n56\n\n57\n\nconst\n\nsignedMessage\n\n=\n\nawait\n\nsigner\n\n.\n\nprovider\n\n.\n\nsend\n\n(\n\nmethod\n\n,\n\nparams\n\n)\n\n;\n\n57\n\nconst\n\nsignedMessage\n\n=\n\nawait\n\nsigner\n\n.\n\nprovider\n\n.\n\nsend\n\n(\n\nmethod\n\n,\n\nparams\n\n)\n\n;", "explanation": "The \"Sign Typed Data v4\" section from the Magic Labs documentation provides guidance on implementing the `eth_signTypedData_v4` method for signing structured data on the Ethereum blockchain. This method, part of the Ethereum ecosystem, extends the capabilities of its predecessor, v3, by adding support for arrays and recursive data types. It is used to ensure data integrity and authenticity in blockchain applications, enabling a more comprehensive and flexible data signing process.\n\nThe example code provided demonstrates how to implement this functionality using the Magic SDK and ethers.js library. It outlines how to authenticate a user, retrieve their Ethereum public address, define a structured data message using the EIP-712 standard, and sign that data using the `eth_signTypedData_v4` method. The process involves specifying the data types, the domain, the primary type, and the message itself, leading to the generation of a signed message that can be used for various blockchain operations requiring verified signatures.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/featured-chains/ethereum/javascript#chunk-15", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\nimport\n\nWeb3\n\nfrom\n\n'web3'\n\n;\n\n02\n\nimport\n\nWeb3\n\nfrom\n\n'web3'\n\n;\n\n03\n\n03\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n05\n\nconst\n\nweb3\n\n=\n\nnew\n\nWeb3\n\n(\n\nmagic\n\n.\n\nrpcProvider\n\n)\n\n;\n\n05\n\nconst\n\nweb3\n\n=\n\nnew\n\nWeb3\n\n(\n\nmagic\n\n.\n\nrpcProvider\n\n)\n\n;\n\n06\n\n06\n\n07\n\n// \u2b50\ufe0f After user is successfully authenticated\n\n07\n\n// \u2b50\ufe0f After user is successfully authenticated\n\n08\n\n08\n\n09\n\n// Get user's Ethereum public address\n\n09\n\n// Get user's Ethereum public address\n\n10\n\nconst\n\nfromAddress\n\n=\n\n(\n\nawait\n\nweb3\n\n.\n\neth\n\n.\n\ngetAccounts\n\n(\n\n)\n\n)\n\n[\n\n0\n\n]\n\n;\n\n10\n\nconst\n\nfromAddress\n\n=\n\n(\n\nawait\n\nweb3\n\n.\n\neth\n\n.\n\ngetAccounts\n\n(\n\n)\n\n)\n\n[\n\n0\n\n]\n\n;\n\n11\n\n11\n\n12\n\nconst\n\noriginalMessage\n\n=\n\n'YOUR_MESSAGE'\n\n;\n\n12\n\nconst\n\noriginalMessage\n\n=\n\n'YOUR_MESSAGE'\n\n;\n\n13\n\n13\n\n14\n\nconst\n\nsignedMessage\n\n=\n\nawait\n\nweb3\n\n.\n\neth\n\n.\n\npersonal\n\n.\n\nsign\n\n(\n\noriginalMessage\n\n,\n\nfromAddress\n\n)\n\n;\n\n14\n\nconst\n\nsignedMessage\n\n=\n\nawait\n\nweb3\n\n.\n\neth\n\n.\n\npersonal\n\n.\n\nsign\n\n(\n\noriginalMessage\n\n,\n\nfromAddress\n\n)\n\n;", "explanation": "The '#Web3.js - Personal Sign' section of the documentation provides a straightforward guide on how to use Magic SDK along with Web3.js to perform a personal sign operation in an Ethereum-based application. The main purpose of this section is to demonstrate how to authenticate users, retrieve their Ethereum public address, and have them digitally sign a message using their Ethereum account.\n\nHere's a breakdown of what the code does:\n\n1. **Importing Libraries**: It begins by importing the necessary libraries, Magic SDK, and Web3.js.\n\n2. **Instance Creation**: A new `Magic` instance is created using a publishable API key, followed by initializing a `Web3` instance using the Magic RPC provider. This setup enables interaction with the Ethereum blockchain through Magic's infrastructure.\n\n3. **User Authentication**: The comment highlights that the following steps assume the user is successfully authenticated. Magic handles user authentication for the decentralized application.\n\n4. **Getting Ethereum Address**: Once authenticated, the user's Ethereum public address is retrieved. This is done via the `web3.eth.getAccounts()` method, which returns an array of accounts, and the first account (`[0]`) is typically the primary address.\n\n5. **Message Signing**: An original message (denoted by `'YOUR_MESSAGE'`) is defined. The `web3.eth.personal.sign` method is then used to have the user sign this message with their Ethereum account (`fromAddress`), producing a cryptographic signature.\n\nThis process is crucial for various blockchain applications, particularly those requiring proof of identity or message authenticity, as it verifies that a specific Ethereum account indeed authorized an action or approved a message.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/featured-chains/ethereum/javascript#chunk-16", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "Copy\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\nimport\n\nWeb3\n\nfrom\n\n'web3'\n\n;\n\n02\n\nimport\n\nWeb3\n\nfrom\n\n'web3'\n\n;\n\n03\n\n03\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n05\n\nconst\n\nweb3\n\n=\n\nnew\n\nWeb3\n\n(\n\nmagic\n\n.\n\nrpcProvider\n\n)\n\n;\n\n05\n\nconst\n\nweb3\n\n=\n\nnew\n\nWeb3\n\n(\n\nmagic\n\n.\n\nrpcProvider\n\n)\n\n;\n\n06\n\n06\n\n07\n\n// \u2b50\ufe0f After user is successfully authenticated\n\n07\n\n// \u2b50\ufe0f After user is successfully authenticated\n\n08\n\n08\n\n09\n\n// Get user's Ethereum public address\n\n09\n\n// Get user's Ethereum public address\n\n10\n\nconst\n\nfromAddress\n\n=\n\n(\n\nawait\n\nweb3\n\n.\n\neth\n\n.\n\ngetAccounts\n\n(\n\n)\n\n)\n\n[\n\n0\n\n]\n\n;\n\n10\n\nconst\n\nfromAddress\n\n=\n\n(\n\nawait\n\nweb3\n\n.\n\neth\n\n.\n\ngetAccounts\n\n(\n\n)\n\n)\n\n[\n\n0\n\n]\n\n;\n\n11\n\n11\n\n12\n\nconst\n\nmessage\n\n=\n\n[\n\n12\n\nconst\n\nmessage\n\n=\n\n[\n\n13\n\n{\n\n13\n\n{\n\n14\n\ntype\n\n:\n\n'string'\n\n,\n\n14\n\ntype\n\n:\n\n'string'\n\n,\n\n15\n\nname\n\n:\n\n'fullName'\n\n,\n\n15\n\nname\n\n:\n\n'fullName'\n\n,\n\n16\n\nvalue\n\n:\n\n'John Doe'\n\n,\n\n16\n\nvalue\n\n:\n\n'John Doe'\n\n,\n\n17\n\n}\n\n,\n\n17\n\n}\n\n,\n\n18\n\n{\n\n18\n\n{\n\n19\n\ntype\n\n:\n\n'uint32'\n\n,\n\n19\n\ntype\n\n:\n\n'uint32'\n\n,\n\n20\n\nname\n\n:\n\n'userId'\n\n,\n\n20\n\nname\n\n:\n\n'userId'\n\n,\n\n21\n\nvalue\n\n:\n\n'1234'\n\n,\n\n21\n\nvalue\n\n:\n\n'1234'\n\n,\n\n22\n\n}\n\n,\n\n22\n\n}\n\n,\n\n23\n\n]\n\n;\n\n23\n\n]\n\n;\n\n24\n\n24\n\n25\n\nsignedMessage\n\n=\n\nawait\n\nweb3\n\n.\n\neth\n\n.\n\nsignTypedData\n\n(\n\nfromAddress\n\n,\n\nmessage\n\n,\n\ntrue\n\n)\n\n;\n\n25\n\nsignedMessage\n\n=\n\nawait\n\nweb3\n\n.\n\neth\n\n.\n\nsignTypedData\n\n(\n\nfromAddress\n\n,\n\nmessage\n\n,\n\ntrue\n\n)\n\n;", "explanation": "The section titled 'Sign Typed Data v1' from the provided documentation is explaining how to use the Magic SDK and Web3.js to sign typed data on the Ethereum blockchain. This specific functionality allows a user to authenticate and subsequently sign structured data with their Ethereum address. \n\nHere's a breakdown of its main components and purpose:\n\n1. **Imports and Setup:**\n   - `Magic`: A library that enables developers to integrate passwordless authentication into applications. It is imported from the `magic-sdk`.\n   - `Web3`: A JavaScript library used to interact with the Ethereum blockchain. It is imported from `web3`.\n\n2. **Initialization:**\n   - `magic`: An instance of the `Magic` class is created using your publishable API key, which is necessary to connect to Magic's services.\n   - `web3`: A new Web3 instance is instantiated, using Magic's RPC (Remote Procedure Call) provider to interact with the Ethereum blockchain.\n\n3. **Authentication:**\n   - The code initiates the process after the user has been authenticated successfully. This step ensures that the user has logged in or is otherwise verified.\n\n4. **Getting User's Ethereum Address:**\n   - The user's Ethereum public address is retrieved using `web3.eth.getAccounts()`. The first address from the returned list is assumed to be the current user's address.\n\n5. **Creating a Message to Sign:**\n   - A JSON-like structure is prepared containing the data to sign. It consists of fields with types such as `string` and `uint32`, which describe the data: 'fullName' with value 'John Doe', and 'userId' with value '1234'.\n\n6. **Signing the Typed Data:**\n   - The `web3.eth.signTypedData` method is called with the user's Ethereum address, the message to sign, and a boolean flag `true` indicating it should use the EIP-712 method for signing. EIP-712 is an Ethereum Improvement Proposal that provides a standardized way to sign structured data, ensuring that signatures are user-readable and secure.\n\nIn summary, the section provides a guide on preparing and signing structured data using a user's Ethereum address via the Magic SDK, which is beneficial for authenticity and security in decentralized applications.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/featured-chains/ethereum/javascript#chunk-17", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "Copy\n\n01\n\n/*\n\n01\n\n/*\n\n02\n\nSign Typed Data v4 adds support for\n\n02\n\nSign Typed Data v4 adds support for\n\n03\n\narrays and recursive data types.\n\n03\n\narrays and recursive data types.\n\n04\n\n04\n\n05\n\nOtherwise, it works the same as Sign Typed Data v3.\n\n05\n\nOtherwise, it works the same as Sign Typed Data v3.\n\n06\n\n*/\n\n06\n\n*/\n\n07\n\n07\n\n08\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n08\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n09\n\nimport\n\nWeb3\n\nfrom\n\n'web3'\n\n;\n\n09\n\nimport\n\nWeb3\n\nfrom\n\n'web3'\n\n;\n\n10\n\n10\n\n11\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n11\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n12\n\nconst\n\nweb3\n\n=\n\nnew\n\nWeb3\n\n(\n\nmagic\n\n.\n\nrpcProvider\n\n)\n\n;\n\n12\n\nconst\n\nweb3\n\n=\n\nnew\n\nWeb3\n\n(\n\nmagic\n\n.\n\nrpcProvider\n\n)\n\n;\n\n13\n\n13\n\n14\n\n// \u2b50\ufe0f After user is successfully authenticated\n\n14\n\n// \u2b50\ufe0f After user is successfully authenticated\n\n15\n\n15\n\n16\n\n// Get user's Ethereum public address\n\n16\n\n// Get user's Ethereum public address\n\n17\n\nconst\n\nfromAddress\n\n=\n\n(\n\nawait\n\nweb3\n\n.\n\neth\n\n.\n\ngetAccounts\n\n(\n\n)\n\n)\n\n[\n\n0\n\n]\n\n;\n\n17\n\nconst\n\nfromAddress\n\n=\n\n(\n\nawait\n\nweb3\n\n.\n\neth\n\n.\n\ngetAccounts\n\n(\n\n)\n\n)\n\n[\n\n0\n\n]\n\n;\n\n18\n\n18\n\n19\n\nconst\n\nmessage\n\n=\n\n{\n\n19\n\nconst\n\nmessage\n\n=\n\n{\n\n20\n\ntypes\n\n:\n\n{\n\n20\n\ntypes\n\n:\n\n{\n\n21\n\nEIP712Domain\n\n:\n\n[\n\n21\n\nEIP712Domain\n\n:\n\n[\n\n22\n\n{\n\n22\n\n{\n\n23\n\nname\n\n:\n\n'name'\n\n,\n\n23\n\nname\n\n:\n\n'name'\n\n,\n\n24\n\ntype\n\n:\n\n'string'\n\n,\n\n24\n\ntype\n\n:\n\n'string'\n\n,\n\n25\n\n}\n\n,\n\n25\n\n}\n\n,\n\n26\n\n{\n\n26\n\n{\n\n27\n\nname\n\n:\n\n'version'\n\n,\n\n27\n\nname\n\n:\n\n'version'\n\n,\n\n28\n\ntype\n\n:\n\n'string'\n\n,\n\n28\n\ntype\n\n:\n\n'string'\n\n,\n\n29\n\n}\n\n,\n\n29\n\n}\n\n,\n\n30\n\n{\n\n30\n\n{\n\n31\n\nname\n\n:\n\n'verifyingContract'\n\n,\n\n31\n\nname\n\n:\n\n'verifyingContract'\n\n,\n\n32\n\ntype\n\n:\n\n'address'\n\n,\n\n32\n\ntype\n\n:\n\n'address'\n\n,\n\n33\n\n}\n\n,\n\n33\n\n}\n\n,\n\n34\n\n]\n\n,\n\n34\n\n]\n\n,\n\n35\n\nGreeting\n\n:\n\n[\n\n35\n\nGreeting\n\n:\n\n[\n\n36\n\n{\n\n36\n\n{\n\n37\n\nname\n\n:\n\n'contents'\n\n,\n\n37\n\nname\n\n:\n\n'contents'\n\n,\n\n38\n\ntype\n\n:\n\n'string'\n\n,\n\n38\n\ntype\n\n:\n\n'string'\n\n,\n\n39\n\n}\n\n,\n\n39\n\n}\n\n,\n\n40\n\n]\n\n,\n\n40\n\n]\n\n,\n\n41\n\n}\n\n,\n\n41\n\n}\n\n,\n\n42\n\nprimaryType\n\n:\n\n'Greeting'\n\n,\n\n42\n\nprimaryType\n\n:\n\n'Greeting'\n\n,\n\n43\n\ndomain\n\n:\n\n{\n\n43\n\ndomain\n\n:\n\n{\n\n44\n\nname\n\n:\n\n'Magic'\n\n,\n\n44\n\nname\n\n:\n\n'Magic'\n\n,\n\n45\n\nversion\n\n:\n\n'1'\n\n,\n\n45\n\nversion\n\n:\n\n'1'\n\n,\n\n46\n\nverifyingContract\n\n:\n\n'0xE0cef4417a772512E6C95cEf366403839b0D6D6D'\n\n,\n\n46\n\nverifyingContract\n\n:\n\n'0xE0cef4417a772512E6C95cEf366403839b0D6D6D'\n\n,\n\n47\n\n}\n\n,\n\n47\n\n}\n\n,\n\n48\n\nmessage\n\n:\n\n{\n\n48\n\nmessage\n\n:\n\n{\n\n49\n\ncontents\n\n:\n\n'Hello, from Magic!'\n\n,\n\n49\n\ncontents\n\n:\n\n'Hello, from Magic!'\n\n,\n\n50\n\n}\n\n,\n\n50\n\n}\n\n,\n\n51\n\n}\n\n;\n\n51\n\n}\n\n;\n\n52\n\n52\n\n53\n\nconst\n\nsignedMessage\n\n=\n\nawait\n\nweb3\n\n.\n\neth\n\n.\n\nsignTypedData\n\n(\n\nfromAddress\n\n,\n\nmessage\n\n)\n\n;\n\n53\n\nconst\n\nsignedMessage\n\n=\n\nawait\n\nweb3\n\n.\n\neth\n\n.\n\nsignTypedData\n\n(\n\nfromAddress\n\n,\n\nmessage\n\n)\n\n;", "explanation": "The \"Sign Typed Data v4\" section of the Magic Labs documentation demonstrates how to use Magic SDK in combination with Web3.js to sign structured data according to the EIP-712 standard on the Ethereum blockchain. This version adds support for arrays and recursive data types while maintaining compatibility with the previous version, Sign Typed Data v3.\n\n### Main Purpose:\nThe primary purpose of this functionality is to facilitate the signing of typed data, which can be used to ensure that messages are human-readable and clearly define the structure of the data being signed. This approach enhances data integrity and security in smart contracts and applications by enabling users to understand precisely what they are approving or signing.\n\n### Key Points:\n- **Enhancements in v4:** Sign Typed Data v4 includes support for arrays and recursive data types, expanding its use cases in decentralized applications.\n- **Usage of Magic SDK:** The example shows how to initialize the Magic SDK and integrate it with Web3.js, providing a seamless user authentication flow for Ethereum users.\n- **EIP-712 Domain:** It defines a structured typed data message using EIP-712, specifying types such as `EIP712Domain` and a custom type `Greeting`.\n- **Signing Process:** After authenticating the user and retrieving the Ethereum address, the script constructs a typed message and requests the user to sign it using their Ethereum account.\n- **Sample Code:** The documentation includes a code snippet demonstrating the setup, message typing, and execution of the `signTypedData` function, facilitating a practical understanding of how to implement the feature.\n\nOverall, this feature supports applications that need more robust, structured data validation and confirmation processes in transactions or agreements on the Ethereum blockchain.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/featured-chains/ethereum/javascript#chunk-18", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n#\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\nimport\n\n{\n\nethers\n\n}\n\nfrom\n\n'ethers'\n\n;\n\n02\n\nimport\n\n{\n\nethers\n\n}\n\nfrom\n\n'ethers'\n\n;\n\n03\n\n03\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_PUBLISHABLE_API_KEY'\n\n)\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_PUBLISHABLE_API_KEY'\n\n)\n\n05\n\nconst\n\nprovider\n\n=\n\nnew\n\nethers\n\n.\n\nBrowserProvider\n\n(\n\nmagic\n\n.\n\nrpcProvider\n\n)\n\n;\n\n05\n\nconst\n\nprovider\n\n=\n\nnew\n\nethers\n\n.\n\nBrowserProvider\n\n(\n\nmagic\n\n.\n\nrpcProvider\n\n)\n\n;\n\n06\n\n06\n\n07\n\n// \u2b50\ufe0f After user is successfully authenticated\n\n07\n\n// \u2b50\ufe0f After user is successfully authenticated\n\n08\n\n08\n\n09\n\nconst\n\nsigner\n\n=\n\nawait\n\nprovider\n\n.\n\ngetSigner\n\n(\n\n)\n\n;\n\n09\n\nconst\n\nsigner\n\n=\n\nawait\n\nprovider\n\n.\n\ngetSigner\n\n(\n\n)\n\n;\n\n10\n\n10\n\n11\n\n// Get user's Ethereum public address\n\n11\n\n// Get user's Ethereum public address\n\n12\n\nconst\n\naddress\n\n=\n\nawait\n\nsigner\n\n.\n\ngetAddress\n\n(\n\n)\n\n;\n\n12\n\nconst\n\naddress\n\n=\n\nawait\n\nsigner\n\n.\n\ngetAddress\n\n(\n\n)\n\n;\n\n13\n\n13\n\n14\n\n// Get user's balance in ether\n\n14\n\n// Get user's balance in ether\n\n15\n\nconst\n\nbalance\n\n=\n\nethers\n\n.\n\nformatEther\n\n(\n\n15\n\nconst\n\nbalance\n\n=\n\nethers\n\n.\n\nformatEther\n\n(\n\n16\n\nawait\n\nprovider\n\n.\n\ngetBalance\n\n(\n\naddress\n\n)\n\n,\n\n// Balance is in wei\n\n16\n\nawait\n\nprovider\n\n.\n\ngetBalance\n\n(\n\naddress\n\n)\n\n,\n\n// Balance is in wei\n\n17\n\n)\n\n;\n\n17\n\n)\n\n;", "explanation": "The section titled '#Get Balance - #Ethers.js' from the provided documentation URL outlines a process for retrieving the Ethereum balance of a user through a JavaScript implementation using Magic Labs' SDK and the Ethers.js library. Its main purpose is to guide developers on how to authenticate a user and subsequently access and display the user's Ethereum balance in ether, a derivative currency unit of Ethereum.\n\nHere's a concise summary of the process covered in the documentation section:\n\n1. **Import Libraries:** The code starts by importing required libraries, specifically `magic-sdk` for authentication and `ethers` for interacting with the Ethereum blockchain.\n\n2. **Instantiate Magic SDK:** A new instance of `Magic` is created using the user's publishable API key, which facilitates user authentication.\n\n3. **Configuration of Provider:** An instance of `ethers.BrowserProvider` is configured using the Magic RPC provider. This establishes a connection to the Ethereum network to enable blockchain interactions.\n\n4. **User Authentication:** Before any blockchain operations, the user must be successfully authenticated. Though not shown in the snippet, this is a prerequisite.\n\n5. **Signer Initialization:** After authentication is successful, a `signer` is retrieved from the provider, which represents the user's active wallet and is necessary for executing transactions and signing messages.\n\n6. **Retrieve Ethereum Address:** The Ethereum public address of the authenticated user is obtained using the `getAddress` function of the signer.\n\n7. **Fetch and Format Balance:** The user's balance is fetched in wei (the smallest unit of ether) using the `getBalance` method of the provider with the user's address. It is then formatted into ether using `ethers.formatEther`, making the balance human-readable.\n\nThis documentation section is crucial for developers who wish to build applications that require access to real-time Ethereum balances while leveraging Magic's authentication capabilities to ensure secure and seamless user experiences.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/featured-chains/ethereum/javascript#chunk-19", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\nimport\n\nWeb3\n\nfrom\n\n'web3'\n\n;\n\n02\n\nimport\n\nWeb3\n\nfrom\n\n'web3'\n\n;\n\n03\n\n03\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n05\n\nconst\n\nweb3\n\n=\n\nnew\n\nWeb3\n\n(\n\nmagic\n\n.\n\nrpcProvider\n\n)\n\n;\n\n05\n\nconst\n\nweb3\n\n=\n\nnew\n\nWeb3\n\n(\n\nmagic\n\n.\n\nrpcProvider\n\n)\n\n;\n\n06\n\n06\n\n07\n\n// \u2b50\ufe0f After user is successfully authenticated\n\n07\n\n// \u2b50\ufe0f After user is successfully authenticated\n\n08\n\n08\n\n09\n\n// Get user's Ethereum public address\n\n09\n\n// Get user's Ethereum public address\n\n10\n\nconst\n\naddress\n\n=\n\n(\n\nawait\n\nweb3\n\n.\n\neth\n\n.\n\ngetAccounts\n\n(\n\n)\n\n)\n\n[\n\n0\n\n]\n\n;\n\n10\n\nconst\n\naddress\n\n=\n\n(\n\nawait\n\nweb3\n\n.\n\neth\n\n.\n\ngetAccounts\n\n(\n\n)\n\n)\n\n[\n\n0\n\n]\n\n;\n\n11\n\n11\n\n12\n\n// Get user's balance in ether\n\n12\n\n// Get user's balance in ether\n\n13\n\nconst\n\nbalance\n\n=\n\nweb3\n\n.\n\nutils\n\n.\n\nfromWei\n\n(\n\n13\n\nconst\n\nbalance\n\n=\n\nweb3\n\n.\n\nutils\n\n.\n\nfromWei\n\n(\n\n14\n\nawait\n\nweb3\n\n.\n\neth\n\n.\n\ngetBalance\n\n(\n\naddress\n\n)\n\n,\n\n// Balance is in wei\n\n14\n\nawait\n\nweb3\n\n.\n\neth\n\n.\n\ngetBalance\n\n(\n\naddress\n\n)\n\n,\n\n// Balance is in wei\n\n15\n\n)\n\n;\n\n15\n\n)\n\n;", "explanation": "The provided documentation section under the title \"#Web3.js\" appears to be a guide or code example explaining how to integrate the Magic SDK with the Web3.js library for Ethereum blockchain applications. The main purpose is to demonstrate how to use the Magic SDK with Web3.js to authenticate users and interact with the Ethereum blockchain, specifically to retrieve a user's public Ethereum address and their balance in ether.\n\nHere's a breakdown of the code:\n\n1. **Import Libraries**: It imports the `Magic` class from 'magic-sdk' and the `Web3` class from 'web3'.\n\n2. **Initialize Magic and Web3**:\n   - A new instance of `Magic` is created using a `YOUR_PUBLISHABLE_API_KEY`.\n   - A new instance of `Web3` is initialized with the Magic SDK's `rpcProvider`, which acts as a custom provider for Ethereum RPC calls.\n\n3. **User Authentication**: The code assumes that user authentication is already successfully handled via Magic.\n\n4. **Retrieve User's Ethereum Address**: \n   - Utilizes `web3.eth.getAccounts()` to get the user's Ethereum public address.\n\n5. **Retrieve User's Balance**:\n   - Uses `web3.eth.getBalance(address)` to get the balance in wei (the smallest denomination of ether).\n   - Converts the balance from wei to ether using `web3.utils.fromWei()`.\n\nOverall, this code snippet serves as an introductory example to build decentralized applications (dApps) with user authentication and Ethereum interaction using Magic SDK and Web3.js.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/featured-chains/ethereum/javascript#chunk-20", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nIn this example, we'll be demonstrating how to use Magic with ethers.js or web3.js to interact with Solidity smart contracts. The simple Hello World contract allows anyone to read and write a message to it.\n\nCopy\n\n01\n\npragma\n\nsolidity\n\n^\n\n0.5.10\n\n;\n\n01\n\npragma\n\nsolidity\n\n^\n\n0.5.10\n\n;\n\n02\n\n02\n\n03\n\ncontract\n\nHelloWorld\n\n{\n\n03\n\ncontract\n\nHelloWorld\n\n{\n\n04\n\n04\n\n05\n\nstring\n\npublic\n\nmessage\n\n;\n\n05\n\nstring\n\npublic\n\nmessage\n\n;\n\n06\n\n06\n\n07\n\nconstructor\n\n(\n\nstring\n\nmemory\n\ninitMessage\n\n)\n\npublic\n\n{\n\n07\n\nconstructor\n\n(\n\nstring\n\nmemory\n\ninitMessage\n\n)\n\npublic\n\n{\n\n08\n\nmessage\n\n=\n\ninitMessage\n\n;\n\n08\n\nmessage\n\n=\n\ninitMessage\n\n;\n\n09\n\n}\n\n09\n\n}\n\n10\n\n10\n\n11\n\nfunction\n\nupdate\n\n(\n\nstring\n\nmemory\n\nnewMessage\n\n)\n\npublic\n\n{\n\n11\n\nfunction\n\nupdate\n\n(\n\nstring\n\nmemory\n\nnewMessage\n\n)\n\npublic\n\n{\n\n12\n\nmessage\n\n=\n\nnewMessage\n\n;\n\n12\n\nmessage\n\n=\n\nnewMessage\n\n;\n\n13\n\n}\n\n13\n\n}\n\n14\n\n}\n\n14\n\n}\n\n#\n\n#\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\nimport\n\n{\n\nethers\n\n}\n\nfrom\n\n'ethers'\n\n;\n\n02\n\nimport\n\n{\n\nethers\n\n}\n\nfrom\n\n'ethers'\n\n;\n\n03\n\n03\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n05\n\nconst\n\nprovider\n\n=\n\nnew\n\nethers\n\n.\n\nBrowserProvider\n\n(\n\nmagic\n\n.\n\nrpcProvider\n\n)\n\n;\n\n05\n\nconst\n\nprovider\n\n=\n\nnew\n\nethers\n\n.\n\nBrowserProvider\n\n(\n\nmagic\n\n.\n\nrpcProvider\n\n)\n\n;\n\n06\n\n06\n\n07\n\n// \u2b50\ufe0f After user is successfully authenticated\n\n07\n\n// \u2b50\ufe0f After user is successfully authenticated\n\n08\n\n08\n\n09\n\nconst\n\nsigner\n\n=\n\nawait\n\nprovider\n\n.\n\ngetSigner\n\n(\n\n)\n\n;\n\n09\n\nconst\n\nsigner\n\n=\n\nawait\n\nprovider\n\n.\n\ngetSigner\n\n(\n\n)\n\n;\n\n10\n\n10\n\n11\n\nconst\n\ncontractABI\n\n=\n\n11\n\nconst\n\ncontractABI\n\n=\n\n12\n\n'[{\"constant\":false,\"inputs\":[{\"name\":\"newMessage\",\"type\":\"string\"}],\"name\":\"update\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"message\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"initMessage\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]'\n\n;\n\n12\n\n'[{\"constant\":false,\"inputs\":[{\"name\":\"newMessage\",\"type\":\"string\"}],\"name\":\"update\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"message\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"initMessage\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]'\n\n;\n\n13\n\n13\n\n14\n\nconst\n\ncontractByteCode\n\n=\n\n14\n\nconst\n\ncontractByteCode\n\n=\n\n15\n\n'0x608060405234801561001057600080fd5b5060405161047f38038061047f8339818101604052602081101561003357600080fd5b81019080805164010000000081111561004b57600080fd5b8281019050602081018481111561006157600080fd5b815185600182028301116401000000008211171561007e57600080fd5b5050929190505050806000908051906020019061009c9291906100a3565b5050610148565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106100e457805160ff1916838001178555610112565b82800160010185558215610112579182015b828111156101115782518255916020019190600101906100f6565b5b50905061011f9190610123565b5090565b61014591905b80821115610141576000816000905550600101610129565b5090565b90565b610328806101576000396000f3fe608060405234801561001057600080fd5b5060043610610053576000357c0100000000000000000000000000000000000000000000000000000000900480633d7403a314610058578063e21f37ce14610113575b600080fd5b6101116004803603602081101561006e57600080fd5b810190808035906020019064010000000081111561008b57600080fd5b82018360208201111561009d57600080fd5b803590602001918460018302840111640100000000831117156100bf57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050610196565b005b61011b6101b0565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561015b578082015181840152602081019050610140565b50505050905090810190601f1680156101885780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b80600090805190602001906101ac92919061024e565b5050565b60008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156102465780601f1061021b57610100808354040283529160200191610246565b820191906000526020600020905b81548152906001019060200180831161022957829003601f168201915b505050505081565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061028f57805160ff19168380011785556102bd565b828001600101855582156102bd579182015b828111156102bc5782518255916020019190600101906102a1565b5b5090506102ca91906102ce565b5090565b6102f091905b808211156102ec5760008160009055506001016102d4565b5090565b9056fea265627a7a7230582003ae1ef5a63bf058bfd2b31398bdee39d3cbfbb7fbf84235f4bc2ec352ee810f64736f6c634300050a0032'\n\n;\n\n15\n\n'0x608060405234801561001057600080fd5b5060405161047f38038061047f8339818101604052602081101561003357600080fd5b81019080805164010000000081111561004b57600080fd5b8281019050602081018481111561006157600080fd5b815185600182028301116401000000008211171561007e57600080fd5b5050929190505050806000908051906020019061009c9291906100a3565b5050610148565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106100e457805160ff1916838001178555610112565b82800160010185558215610112579182015b828111156101115782518255916020019190600101906100f6565b5b50905061011f9190610123565b5090565b61014591905b80821115610141576000816000905550600101610129565b5090565b90565b610328806101576000396000f3fe608060405234801561001057600080fd5b5060043610610053576000357c0100000000000000000000000000000000000000000000000000000000900480633d7403a314610058578063e21f37ce14610113575b600080fd5b6101116004803603602081101561006e57600080fd5b810190808035906020019064010000000081111561008b57600080fd5b82018360208201111561009d57600080fd5b803590602001918460018302840111640100000000831117156100bf57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050610196565b005b61011b6101b0565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561015b578082015181840152602081019050610140565b50505050905090810190601f1680156101885780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b80600090805190602001906101ac92919061024e565b5050565b60008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156102465780601f1061021b57610100808354040283529160200191610246565b820191906000526020600020905b81548152906001019060200180831161022957829003601f168201915b505050505081565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061028f57805160ff19168380011785556102bd565b828001600101855582156102bd579182015b828111156102bc5782518255916020019190600101906102a1565b5b5090506102ca91906102ce565b5090565b6102f091905b808211156102ec5760008160009055506001016102d4565b5090565b9056fea265627a7a7230582003ae1ef5a63bf058bfd2b31398bdee39d3cbfbb7fbf84235f4bc2ec352ee810f64736f6c634300050a0032'\n\n;\n\n16\n\nconst\n\ncontractFactory\n\n=\n\nnew\n\nethers\n\n.\n\nContractFactory\n\n(\n\ncontractABI\n\n,\n\ncontractByteCode\n\n,\n\nsigner\n\n)\n\n;\n\n16\n\nconst\n\ncontractFactory\n\n=\n\nnew\n\nethers\n\n.\n\nContractFactory\n\n(\n\ncontractABI\n\n,\n\ncontractByteCode\n\n,\n\nsigner\n\n)\n\n;\n\n17\n\n17\n\n18\n\n// Deploy contract with \"Hello World!\" in the constructor\n\n18\n\n// Deploy contract with \"Hello World!\" in the constructor\n\n19\n\nconst\n\ncontract\n\n=\n\nawait\n\ncontractFactory\n\n.\n\ndeploy\n\n(\n\n'Hello World!'\n\n)\n\n;\n\n19\n\nconst\n\ncontract\n\n=\n\nawait\n\ncontractFactory\n\n.\n\ndeploy\n\n(\n\n'Hello World!'\n\n)\n\n;\n\n20\n\n// Wait for deployment to finish\n\n20\n\n// Wait for deployment to finish\n\n21\n\nconst\n\nreceipt\n\n=\n\ncontract\n\n.\n\ndeploymentTransaction\n\n(\n\n)\n\n21\n\nconst\n\nreceipt\n\n=\n\ncontract\n\n.\n\ndeploymentTransaction\n\n(\n\n)", "explanation": "This section of Magic Labs' documentation provides a step-by-step guide on how to deploy a simple Solidity smart contract on the Ethereum blockchain using Magic's SDK in conjunction with `ethers.js`. The main purpose of this documentation is to demonstrate the integration process of using Magic's authentication and wallet services to facilitate interaction with a smart contract, specifically focusing on contract deployment.\n\nThe example initiates with a basic Solidity contract called `HelloWorld`, which allows reading and writing a message. It consists of a constructor to set an initial message and a function to update the message. This is a typical \"Hello World\" program in the context of smart contracts, which serves as an introduction to managing contract state.\n\nThe JavaScript example involves:\n\n1. Importing the `Magic` SDK and `ethers` library.\n2. Setting up Magic with a publishable API key.\n3. Creating an `ethers` provider that utilizes Magic's RPC provider for blockchain interaction.\n4. Authenticating the user, which is crucial for enabling actions like signing transactions.\n5. Defining the smart contract's ABI (Application Binary Interface) and bytecode.\n6. Using `ethers` to create a `ContractFactory` that handles the contract's deployment.\n7. Deploying the `HelloWorld` smart contract with the initial message \"Hello World!\".\n8. Awaiting the transaction to be mined, ensuring the deployment is completed.\n\nThis documentation serves as a practical illustration for developers on how to combine Magic's authentication and wallet functionalities with `ethers.js` to deploy smart contracts, providing an easily adoptable pattern for further Ethereum-based dApp development.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/featured-chains/ethereum/javascript#chunk-21", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\nimport\n\nWeb3\n\nfrom\n\n'web3'\n\n;\n\n02\n\nimport\n\nWeb3\n\nfrom\n\n'web3'\n\n;\n\n03\n\n03\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n05\n\nconst\n\nweb3\n\n=\n\nnew\n\nWeb3\n\n(\n\nmagic\n\n.\n\nrpcProvider\n\n)\n\n;\n\n05\n\nconst\n\nweb3\n\n=\n\nnew\n\nWeb3\n\n(\n\nmagic\n\n.\n\nrpcProvider\n\n)\n\n;\n\n06\n\n06\n\n07\n\n// \u2b50\ufe0f After user is successfully authenticated\n\n07\n\n// \u2b50\ufe0f After user is successfully authenticated\n\n08\n\n08\n\n09\n\n// Get user's Ethereum public address\n\n09\n\n// Get user's Ethereum public address\n\n10\n\nconst\n\nfromAddress\n\n=\n\n(\n\nawait\n\nweb3\n\n.\n\neth\n\n.\n\ngetAccounts\n\n(\n\n)\n\n)\n\n[\n\n0\n\n]\n\n;\n\n10\n\nconst\n\nfromAddress\n\n=\n\n(\n\nawait\n\nweb3\n\n.\n\neth\n\n.\n\ngetAccounts\n\n(\n\n)\n\n)\n\n[\n\n0\n\n]\n\n;\n\n11\n\n11\n\n12\n\nconst\n\ncontractABI\n\n=\n\n12\n\nconst\n\ncontractABI\n\n=\n\n13\n\n'[{\"constant\":false,\"inputs\":[{\"name\":\"newMessage\",\"type\":\"string\"}],\"name\":\"update\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"message\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"initMessage\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]'\n\n;\n\n13\n\n'[{\"constant\":false,\"inputs\":[{\"name\":\"newMessage\",\"type\":\"string\"}],\"name\":\"update\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"message\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"initMessage\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]'\n\n;\n\n14\n\nconst\n\ncontractByteCode\n\n=\n\n14\n\nconst\n\ncontractByteCode\n\n=\n\n15\n\n'0x608060405234801561001057600080fd5b5060405161047f38038061047f8339818101604052602081101561003357600080fd5b81019080805164010000000081111561004b57600080fd5b8281019050602081018481111561006157600080fd5b815185600182028301116401000000008211171561007e57600080fd5b5050929190505050806000908051906020019061009c9291906100a3565b5050610148565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106100e457805160ff1916838001178555610112565b82800160010185558215610112579182015b828111156101115782518255916020019190600101906100f6565b5b50905061011f9190610123565b5090565b61014591905b80821115610141576000816000905550600101610129565b5090565b90565b610328806101576000396000f3fe608060405234801561001057600080fd5b5060043610610053576000357c0100000000000000000000000000000000000000000000000000000000900480633d7403a314610058578063e21f37ce14610113575b600080fd5b6101116004803603602081101561006e57600080fd5b810190808035906020019064010000000081111561008b57600080fd5b82018360208201111561009d57600080fd5b803590602001918460018302840111640100000000831117156100bf57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050610196565b005b61011b6101b0565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561015b578082015181840152602081019050610140565b50505050905090810190601f1680156101885780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b80600090805190602001906101ac92919061024e565b5050565b60008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156102465780601f1061021b57610100808354040283529160200191610246565b820191906000526020600020905b81548152906001019060200180831161022957829003601f168201915b505050505081565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061028f57805160ff19168380011785556102bd565b828001600101855582156102bd579182015b828111156102bc5782518255916020019190600101906102a1565b5b5090506102ca91906102ce565b5090565b6102f091905b808211156102ec5760008160009055506001016102d4565b5090565b9056fea265627a7a7230582003ae1ef5a63bf058bfd2b31398bdee39d3cbfbb7fbf84235f4bc2ec352ee810f64736f6c634300050a0032'\n\n;\n\n15\n\n'0x608060405234801561001057600080fd5b5060405161047f38038061047f8339818101604052602081101561003357600080fd5b81019080805164010000000081111561004b57600080fd5b8281019050602081018481111561006157600080fd5b815185600182028301116401000000008211171561007e57600080fd5b5050929190505050806000908051906020019061009c9291906100a3565b5050610148565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106100e457805160ff1916838001178555610112565b82800160010185558215610112579182015b828111156101115782518255916020019190600101906100f6565b5b50905061011f9190610123565b5090565b61014591905b80821115610141576000816000905550600101610129565b5090565b90565b610328806101576000396000f3fe608060405234801561001057600080fd5b5060043610610053576000357c0100000000000000000000000000000000000000000000000000000000900480633d7403a314610058578063e21f37ce14610113575b600080fd5b6101116004803603602081101561006e57600080fd5b810190808035906020019064010000000081111561008b57600080fd5b82018360208201111561009d57600080fd5b803590602001918460018302840111640100000000831117156100bf57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050610196565b005b61011b6101b0565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561015b578082015181840152602081019050610140565b50505050905090810190601f1680156101885780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b80600090805190602001906101ac92919061024e565b5050565b60008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156102465780601f1061021b57610100808354040283529160200191610246565b820191906000526020600020905b81548152906001019060200180831161022957829003601f168201915b505050505081565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061028f57805160ff19168380011785556102bd565b828001600101855582156102bd579182015b828111156102bc5782518255916020019190600101906102a1565b5b5090506102ca91906102ce565b5090565b6102f091905b808211156102ec5760008160009055506001016102d4565b5090565b9056fea265627a7a7230582003ae1ef5a63bf058bfd2b31398bdee39d3cbfbb7fbf84235f4bc2ec352ee810f64736f6c634300050a0032'\n\n;\n\n16\n\nconst\n\ncontract\n\n=\n\nnew\n\nweb3\n\n.\n\neth\n\n.\n\nContract\n\n(\n\nJSON\n\n.\n\nparse\n\n(\n\ncontractABI\n\n)\n\n)\n\n;\n\n16\n\nconst\n\ncontract\n\n=\n\nnew\n\nweb3\n\n.\n\neth\n\n.\n\nContract\n\n(\n\nJSON\n\n.\n\nparse\n\n(\n\ncontractABI\n\n)\n\n)\n\n;\n\n17\n\n17\n\n18\n\n// Deploy contract with \"Hello World!\" in the constructor and wait to finish\n\n18\n\n// Deploy contract with \"Hello World!\" in the constructor and wait to finish\n\n19\n\nconst\n\ncontractInstance\n\n=\n\nawait\n\ncontract\n\n19\n\nconst\n\ncontractInstance\n\n=\n\nawait\n\ncontract\n\n20\n\n.\n\ndeploy\n\n(\n\n{\n\n20\n\n.\n\ndeploy\n\n(\n\n{\n\n21\n\ndata\n\n:\n\ncontractByteCode\n\n,\n\n21\n\ndata\n\n:\n\ncontractByteCode\n\n,\n\n22\n\narguments\n\n:\n\n[\n\n'Hello World!'\n\n]\n\n,\n\n22\n\narguments\n\n:\n\n[\n\n'Hello World!'\n\n]\n\n,\n\n23\n\n}\n\n)\n\n23\n\n}\n\n)\n\n24\n\n.\n\nsend\n\n(\n\n{\n\n24\n\n.\n\nsend\n\n(\n\n{\n\n25\n\nfrom\n\n:\n\nfromAddress\n\n,\n\n25\n\nfrom\n\n:\n\nfromAddress\n\n,\n\n26\n\n}\n\n)\n\n;\n\n26\n\n}\n\n)\n\n;", "explanation": "The documentation section titled \"#Web3.js\" provides a guide on how to use the Magic SDK in conjunction with the Web3.js library to work with the Ethereum blockchain. The purpose of this section is to demonstrate how developers can integrate blockchain functionality into a JavaScript application using Magic SDK for authentication and Web3.js for blockchain interaction.\n\nThe main steps and purposes outlined in the document are as follows:\n\n1. **Import Libraries**: The script begins by importing the necessary libraries, `Magic` from the `magic-sdk` and `Web3` from `web3`.\n\n2. **Initialize Magic SDK**: A new instance of the Magic class is created using the developer's publishable API key. This handles authentication and provides an RPC provider that can be used with Web3.\n\n3. **Setup Web3 Instance**: A Web3 instance is set up using the RPC provider from the Magic instance, allowing interaction with the Ethereum blockchain.\n\n4. **Authenticate User**: After successful authentication of the user, the script retrieves the user's Ethereum public address using the `web3.eth.getAccounts()` method, which returns an array of accounts associated with the RPC provider, and selects the first one.\n\n5. **Prepare Smart Contract Interaction**: \n   - The Ethereum smart contract's ABI (Application Binary Interface) and Bytecode are defined. The ABI is a JSON array describing the methods and structures of the smart contract, while the Bytecode is the compiled code of the smart contract.\n   - A new contract instance is created using the `web3.eth.Contract` method, passing the parsed contract ABI.\n\n6. **Deploy Smart Contract**: The smart contract is deployed to the Ethereum blockchain:\n   - The `deploy` method is used with the Bytecode and required constructor arguments (in this case, a string \"Hello World!\").\n   - The `send` method sends the transaction from the user's Ethereum account to deploy the contract onto the blockchain.\n\nThis documentation is intended to help developers integrate Ethereum blockchain functionality within their applications, offering step-by-step instructions from setting up the SDKs to deploying a smart contract.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/featured-chains/ethereum/javascript#chunk-22", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n#\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\nimport\n\n{\n\nethers\n\n}\n\nfrom\n\n'ethers'\n\n;\n\n02\n\nimport\n\n{\n\nethers\n\n}\n\nfrom\n\n'ethers'\n\n;\n\n03\n\n03\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n05\n\nconst\n\nprovider\n\n=\n\nnew\n\nethers\n\n.\n\nBrowserProvider\n\n(\n\nmagic\n\n.\n\nrpcProvider\n\n)\n\n;\n\n05\n\nconst\n\nprovider\n\n=\n\nnew\n\nethers\n\n.\n\nBrowserProvider\n\n(\n\nmagic\n\n.\n\nrpcProvider\n\n)\n\n;\n\n06\n\n06\n\n07\n\n// \u2b50\ufe0f After user is successfully authenticated\n\n07\n\n// \u2b50\ufe0f After user is successfully authenticated\n\n08\n\n08\n\n09\n\nconst\n\nsigner\n\n=\n\nawait\n\nprovider\n\n.\n\ngetSigner\n\n(\n\n)\n\n;\n\n09\n\nconst\n\nsigner\n\n=\n\nawait\n\nprovider\n\n.\n\ngetSigner\n\n(\n\n)\n\n;\n\n10\n\n10\n\n11\n\nconst\n\ncontractABI\n\n=\n\n11\n\nconst\n\ncontractABI\n\n=\n\n12\n\n'[{\"constant\":false,\"inputs\":[{\"name\":\"newMessage\",\"type\":\"string\"}],\"name\":\"update\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"message\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"initMessage\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]'\n\n;\n\n12\n\n'[{\"constant\":false,\"inputs\":[{\"name\":\"newMessage\",\"type\":\"string\"}],\"name\":\"update\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"message\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"initMessage\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]'\n\n;\n\n13\n\nconst\n\ncontractAddress\n\n=\n\n'CONTRACT_ADDRESS'\n\n;\n\n13\n\nconst\n\ncontractAddress\n\n=\n\n'CONTRACT_ADDRESS'\n\n;\n\n14\n\nconst\n\ncontract\n\n=\n\nnew\n\nethers\n\n.\n\nContract\n\n(\n\ncontractAddress\n\n,\n\ncontractABI\n\n,\n\nsigner\n\n)\n\n;\n\n14\n\nconst\n\ncontract\n\n=\n\nnew\n\nethers\n\n.\n\nContract\n\n(\n\ncontractAddress\n\n,\n\ncontractABI\n\n,\n\nsigner\n\n)\n\n;\n\n15\n\n15\n\n16\n\n// Read message from smart contract\n\n16\n\n// Read message from smart contract\n\n17\n\nconst\n\nmessage\n\n=\n\nawait\n\ncontract\n\n.\n\nmessage\n\n(\n\n)\n\n;\n\n17\n\nconst\n\nmessage\n\n=\n\nawait\n\ncontract\n\n.\n\nmessage\n\n(\n\n)\n\n;", "explanation": "The section titled '#Read From Contract - #Ethers.js' from the Magic Labs documentation provides a walkthrough for reading data from an Ethereum smart contract using Ethers.js with Magic SDK. The primary purpose of this documentation is to help developers integrate Ethereum blockchain interactions into their JavaScript applications. Here's a breakdown of the key steps involved:\n\n1. **Import Libraries**: The script imports the `Magic` class from 'magic-sdk' to authenticate users and the `ethers` library to interact with the Ethereum blockchain.\n\n2. **Initialize Magic and Ethers Providers**: \n   - Instantiate the `Magic` class using a publishable API key to set up a Magic Link authentication provider.\n   - Create a new `ethers.BrowserProvider` instance using `magic.rpcProvider` to facilitate Ethereum network requests through the Magic authentication process.\n\n3. **Authenticate the User**: After user authentication, the script fetches a signer object from the provider, which is necessary for interacting with Ethereum contracts.\n\n4. **Define Contract Details**:\n   - Declare `contractABI`, the Application Binary Interface, which defines the contract's functions and data structures.\n   - Specify the `contractAddress`, which is the blockchain address where the contract is deployed.\n\n5. **Create Contract Instance**: Instantiate an `ethers.Contract` object using the contract address, ABI, and signer. This object represents the deployed contract and allows for interaction with its functions.\n\n6. **Read Data from Contract**: Execute a read operation on the contract by calling the `message` function, which retrieves a specific value stored in the contract without modifying any state.\n\nThis guide demonstrates how to authenticate users with Magic and interact with Ethereum smart contracts using Ethers.js in a client-side JavaScript application. It specifically shows how to set up the environment for reading contract data, an essential operation when building decentralized applications.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/featured-chains/ethereum/javascript#chunk-23", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\nimport\n\nWeb3\n\nfrom\n\n'web3'\n\n;\n\n02\n\nimport\n\nWeb3\n\nfrom\n\n'web3'\n\n;\n\n03\n\n03\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n05\n\nconst\n\nweb3\n\n=\n\nnew\n\nWeb3\n\n(\n\nmagic\n\n.\n\nrpcProvider\n\n)\n\n;\n\n05\n\nconst\n\nweb3\n\n=\n\nnew\n\nWeb3\n\n(\n\nmagic\n\n.\n\nrpcProvider\n\n)\n\n;\n\n06\n\n06\n\n07\n\n// \u2b50\ufe0f After user is successfully authenticated\n\n07\n\n// \u2b50\ufe0f After user is successfully authenticated\n\n08\n\n08\n\n09\n\n// Get user's Ethereum public address\n\n09\n\n// Get user's Ethereum public address\n\n10\n\nconst\n\nfromAddress\n\n=\n\n(\n\nawait\n\nweb3\n\n.\n\neth\n\n.\n\ngetAccounts\n\n(\n\n)\n\n)\n\n[\n\n0\n\n]\n\n;\n\n10\n\nconst\n\nfromAddress\n\n=\n\n(\n\nawait\n\nweb3\n\n.\n\neth\n\n.\n\ngetAccounts\n\n(\n\n)\n\n)\n\n[\n\n0\n\n]\n\n;\n\n11\n\n11\n\n12\n\nconst\n\ncontractABI\n\n=\n\n12\n\nconst\n\ncontractABI\n\n=\n\n13\n\n'[{\"constant\":false,\"inputs\":[{\"name\":\"newMessage\",\"type\":\"string\"}],\"name\":\"update\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"message\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"initMessage\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]'\n\n;\n\n13\n\n'[{\"constant\":false,\"inputs\":[{\"name\":\"newMessage\",\"type\":\"string\"}],\"name\":\"update\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"message\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"initMessage\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]'\n\n;\n\n14\n\nconst\n\ncontractAddress\n\n=\n\n'CONTRACT_ADDRESS'\n\n;\n\n14\n\nconst\n\ncontractAddress\n\n=\n\n'CONTRACT_ADDRESS'\n\n;\n\n15\n\nconst\n\ncontract\n\n=\n\nnew\n\nweb3\n\n.\n\neth\n\n.\n\nContract\n\n(\n\nJSON\n\n.\n\nparse\n\n(\n\ncontractABI\n\n)\n\n,\n\ncontractAddress\n\n)\n\n;\n\n15\n\nconst\n\ncontract\n\n=\n\nnew\n\nweb3\n\n.\n\neth\n\n.\n\nContract\n\n(\n\nJSON\n\n.\n\nparse\n\n(\n\ncontractABI\n\n)\n\n,\n\ncontractAddress\n\n)\n\n;\n\n16\n\n16\n\n17\n\n// Read message from smart contract\n\n17\n\n// Read message from smart contract\n\n18\n\nconst\n\nmessage\n\n=\n\nawait\n\ncontract\n\n.\n\nmethods\n\n.\n\nmessage\n\n(\n\n)\n\n.\n\ncall\n\n(\n\n)\n\n;\n\n18\n\nconst\n\nmessage\n\n=\n\nawait\n\ncontract\n\n.\n\nmethods\n\n.\n\nmessage\n\n(\n\n)\n\n.\n\ncall\n\n(\n\n)\n\n;", "explanation": "The section titled '#Web3.js' from the Magic Labs documentation provides a code example that demonstrates how to integrate the Magic SDK with Web3.js to interact with Ethereum smart contracts. The main purpose of this code is to guide developers on setting up an Ethereum wallet connection using the Magic SDK and using Web3.js to interact with smart contracts on the Ethereum blockchain.\n\nHere's a breakdown of the process described in the code:\n\n1. **Imports**: The `Magic` class from 'magic-sdk' is imported, which will be used to set up an Ethereum wallet, and the `Web3` library is imported for blockchain interactions.\n\n2. **Initialization**: An instance of `Magic` is created using a publishable API key, which facilitates user authentication and wallet creation. Then, a `Web3` instance is initialized using the RPC provider from the Magic instance, establishing a connection to the Ethereum blockchain.\n\n3. **User Authentication**: After a user has successfully authenticated, you can retrieve their Ethereum public address using Web3.js.\n\n4. **Smart Contract Interaction**:\n   - The ABI (Application Binary Interface) of a smart contract is defined, which is required to interact with the smart contract's methods.\n   - The contract's Ethereum address is specified.\n   - A new contract instance is created using Web3.js by providing the contract ABI and address.\n   - The code then demonstrates how to read a message from the smart contract using a method call.\n\nThis integration enables developers to manage Ethereum blockchain transactions and interact with smart contracts while leveraging the seamless authentication capabilities of the Magic SDK.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/featured-chains/ethereum/javascript#chunk-24", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n#\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\nimport\n\n{\n\nethers\n\n}\n\nfrom\n\n'ethers'\n\n;\n\n02\n\nimport\n\n{\n\nethers\n\n}\n\nfrom\n\n'ethers'\n\n;\n\n03\n\n03\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n05\n\nconst\n\nprovider\n\n=\n\nnew\n\nethers\n\n.\n\nBrowserProvider\n\n(\n\nmagic\n\n.\n\nrpcProvider\n\n)\n\n;\n\n05\n\nconst\n\nprovider\n\n=\n\nnew\n\nethers\n\n.\n\nBrowserProvider\n\n(\n\nmagic\n\n.\n\nrpcProvider\n\n)\n\n;\n\n06\n\n06\n\n07\n\n// \u2b50\ufe0f After user is successfully authenticated\n\n07\n\n// \u2b50\ufe0f After user is successfully authenticated\n\n08\n\n08\n\n09\n\nconst\n\nsigner\n\n=\n\nawait\n\nprovider\n\n.\n\ngetSigner\n\n(\n\n)\n\n;\n\n09\n\nconst\n\nsigner\n\n=\n\nawait\n\nprovider\n\n.\n\ngetSigner\n\n(\n\n)\n\n;\n\n10\n\n10\n\n11\n\nconst\n\ncontractABI\n\n=\n\n11\n\nconst\n\ncontractABI\n\n=\n\n12\n\n'[{\"constant\":false,\"inputs\":[{\"name\":\"newMessage\",\"type\":\"string\"}],\"name\":\"update\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"message\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"initMessage\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]'\n\n;\n\n12\n\n'[{\"constant\":false,\"inputs\":[{\"name\":\"newMessage\",\"type\":\"string\"}],\"name\":\"update\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"message\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"initMessage\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]'\n\n;\n\n13\n\nconst\n\ncontractAddress\n\n=\n\n'CONTRACT_ADDRESS'\n\n;\n\n13\n\nconst\n\ncontractAddress\n\n=\n\n'CONTRACT_ADDRESS'\n\n;\n\n14\n\nconst\n\ncontract\n\n=\n\nnew\n\nethers\n\n.\n\nContract\n\n(\n\ncontractAddress\n\n,\n\ncontractABI\n\n,\n\nsigner\n\n)\n\n;\n\n14\n\nconst\n\ncontract\n\n=\n\nnew\n\nethers\n\n.\n\nContract\n\n(\n\ncontractAddress\n\n,\n\ncontractABI\n\n,\n\nsigner\n\n)\n\n;\n\n15\n\n15\n\n16\n\n// Send transaction to smart contract to update message\n\n16\n\n// Send transaction to smart contract to update message\n\n17\n\nconst\n\ntx\n\n=\n\nawait\n\ncontract\n\n.\n\nupdate\n\n(\n\n'NEW_MESSAGE'\n\n)\n\n;\n\n17\n\nconst\n\ntx\n\n=\n\nawait\n\ncontract\n\n.\n\nupdate\n\n(\n\n'NEW_MESSAGE'\n\n)\n\n;\n\n18\n\n18\n\n19\n\n// Wait for transaction to finish\n\n19\n\n// Wait for transaction to finish\n\n20\n\nconst\n\nreceipt\n\n=\n\nawait\n\ntx\n\n.\n\nwait\n\n(\n\n)\n\n;\n\n20\n\nconst\n\nreceipt\n\n=\n\nawait\n\ntx\n\n.\n\nwait\n\n(\n\n)\n\n;", "explanation": "The documentation section titled '#Write to Contract - #Ethers.js\u2019 is a guide on how to interact with an Ethereum smart contract using the Magic SDK and Ethers.js library. Here are the main points and purposes of this section:\n\n1. **Initialization**: \n   - It demonstrates how to initialize the Magic SDK with a publishable API key. This setup is vital for using Magic's authentication and blockchain interactions.\n   - The Ethers.js library is imported to connect and interact with the Ethereum blockchain.\n\n2. **Provider and Signing**:\n   - A new `BrowserProvider` is created using Magic's RPC provider, which means the Magic SDK is set as the backend provider to facilitate transactions.\n   - A signer is obtained from the provider, which is necessary for transaction signing and sending since Ethereum requires transactions to be signed by the sender.\n\n3. **Contract Interaction Setup**:\n   - The guide provides a sample smart contract ABI (Application Binary Interface), a JSON array that defines the functions and structures provided by a contract.\n   - A contract address is used to specify which deployed contract to interact with.\n   - An `ethers.Contract` object is created with the specified address, ABI, and signer, enabling the invocation of contract methods.\n\n4. **Writing to the Contract**:\n   - Demonstrates how to call a function in the contract (in this case `update`) to change the contract's stored message to `NEW_MESSAGE`.\n   - The transaction is sent to the smart contract, and it waits for the transaction to be confirmed.\n\n5. **Purpose**: \n   - The document primarily serves as a tutorial for developers aiming to interact with and perform transactions on a blockchain smart contract using JavaScript. It combines Magic for user-friendly authentication with Ethers.js for blockchain operations, simplifying processes such as updating or querying contract states for frontend web applications.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/featured-chains/ethereum/javascript#chunk-25", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\nimport\n\nWeb3\n\nfrom\n\n'web3'\n\n;\n\n02\n\nimport\n\nWeb3\n\nfrom\n\n'web3'\n\n;\n\n03\n\n03\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n05\n\nconst\n\nweb3\n\n=\n\nnew\n\nWeb3\n\n(\n\nmagic\n\n.\n\nrpcProvider\n\n)\n\n;\n\n05\n\nconst\n\nweb3\n\n=\n\nnew\n\nWeb3\n\n(\n\nmagic\n\n.\n\nrpcProvider\n\n)\n\n;\n\n06\n\n06\n\n07\n\n// \u2b50\ufe0f After user is successfully authenticated\n\n07\n\n// \u2b50\ufe0f After user is successfully authenticated\n\n08\n\n08\n\n09\n\n// Get user's Ethereum public address\n\n09\n\n// Get user's Ethereum public address\n\n10\n\nconst\n\nfromAddress\n\n=\n\n(\n\nawait\n\nweb3\n\n.\n\neth\n\n.\n\ngetAccounts\n\n(\n\n)\n\n)\n\n[\n\n0\n\n]\n\n;\n\n10\n\nconst\n\nfromAddress\n\n=\n\n(\n\nawait\n\nweb3\n\n.\n\neth\n\n.\n\ngetAccounts\n\n(\n\n)\n\n)\n\n[\n\n0\n\n]\n\n;\n\n11\n\n11\n\n12\n\nconst\n\ncontractABI\n\n=\n\n12\n\nconst\n\ncontractABI\n\n=\n\n13\n\n'[{\"constant\":false,\"inputs\":[{\"name\":\"newMessage\",\"type\":\"string\"}],\"name\":\"update\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"message\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"initMessage\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]'\n\n;\n\n13\n\n'[{\"constant\":false,\"inputs\":[{\"name\":\"newMessage\",\"type\":\"string\"}],\"name\":\"update\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"message\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"initMessage\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]'\n\n;\n\n14\n\nconst\n\ncontractAddress\n\n=\n\n'CONTRACT_ADDRESS'\n\n;\n\n14\n\nconst\n\ncontractAddress\n\n=\n\n'CONTRACT_ADDRESS'\n\n;\n\n15\n\nconst\n\ncontract\n\n=\n\nnew\n\nweb3\n\n.\n\neth\n\n.\n\nContract\n\n(\n\nJSON\n\n.\n\nparse\n\n(\n\ncontractABI\n\n)\n\n,\n\ncontractAddress\n\n)\n\n;\n\n15\n\nconst\n\ncontract\n\n=\n\nnew\n\nweb3\n\n.\n\neth\n\n.\n\nContract\n\n(\n\nJSON\n\n.\n\nparse\n\n(\n\ncontractABI\n\n)\n\n,\n\ncontractAddress\n\n)\n\n;\n\n16\n\n16\n\n17\n\n// Send transaction to smart contract to update message and wait to finish\n\n17\n\n// Send transaction to smart contract to update message and wait to finish\n\n18\n\nconst\n\nreceipt\n\n=\n\nawait\n\ncontract\n\n.\n\nmethods\n\n.\n\nupdate\n\n(\n\n'NEW_MESSAGE'\n\n)\n\n.\n\nsend\n\n(\n\n{\n\nfrom\n\n:\n\nfromAddress\n\n}\n\n)\n\n;\n\n18\n\nconst\n\nreceipt\n\n=\n\nawait\n\ncontract\n\n.\n\nmethods\n\n.\n\nupdate\n\n(\n\n'NEW_MESSAGE'\n\n)\n\n.\n\nsend\n\n(\n\n{\n\nfrom\n\n:\n\nfromAddress\n\n}\n\n)\n\n;", "explanation": "The '#Web3.js' section of the documentation provides a code example demonstrating how to integrate Web3.js with Magic SDK for Ethereum blockchain interaction. Its main purpose is to guide developers on setting up and using a Web3 provider powered by Magic to interact with Ethereum smart contracts. Here's a breakdown of the key steps outlined in the example:\n\n1. **Import Modules**: It imports the `Magic` module from 'magic-sdk' and `Web3` from 'web3'.\n2. **Initialize Magic**: A new instance of the Magic SDK is created using a publishable API key.\n3. **Create Web3 Instance**: A new Web3 instance is initialized with Magic's RPC provider.\n4. **Authentication**: Indicates that these steps follow successful user authentication.\n5. **Get User's Address**: Retrieves the Ethereum address of the authenticated user.\n6. **Smart Contract Setup**: Defines the ABI (Application Binary Interface) and address of an Ethereum smart contract.\n7. **Interact with Smart Contract**: Demonstrates sending a transaction to the smart contract to update a message, using the user's Ethereum address recovered earlier.\n\nThis example helps developers understand the process of using Magic for authentication in conjunction with Web3.js for interacting with Ethereum blockchain applications, specifically for sending transactions to smart contracts.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/featured-chains/ethereum/javascript#chunk-26", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 Magic JavaScript SDK\n\n\u2022 Ethers.js JavaScript example\n\n\u2022 Web3.js JavaScript example\n\nMagic JavaScript SDK\n\nEthers.js JavaScript example\n\nWeb3.js JavaScript example", "explanation": "The '#Resources' section of the documentation from the URL you provided is a list of tools and examples intended to help developers integrate with Ethereum using Magic Labs' embedded wallet. The main purpose of this section is to provide resources for developers to get started with and build applications on the Ethereum blockchain.\n\nHere's what each item represents:\n\n- **Magic JavaScript SDK**: This is a software development kit provided by Magic Labs that allows developers to integrate Magic's authentication and wallet services into their applications using JavaScript.\n\n- **Ethers.js JavaScript example**: This is likely a code example or a guide demonstrating how to use the Ethers.js library with the Magic SDK to interact with the Ethereum blockchain. Ethers.js is a popular library for interacting with the Ethereum blockchain and its smart contracts.\n\n- **Web3.js JavaScript example**: Similar to the Ethers.js example, this would be a code snippet or guide showing how to use the Web3.js library in conjunction with the Magic SDK. Web3.js is another widely-used library for connecting with and interacting with Ethereum.\n\nThis section is crucial for developers looking to quickly find and utilize the tools they need to implement blockchain functionality in their applications using Magic Labs' solutions.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/featured-chains/ethereum/javascript#chunk-27", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nMagic interacts with the Cosmos blockchain via Magic's extension NPM package @magic-ext/cosmos. The Cosmos extension also lets you interact with the blockchain using methods from cosmjs.\n\nCosmos\n\n@magic-ext/cosmos\n\n@magic-ext/cosmos\n\nYou can skip straight to our kitchen sink example directly:\n\n\ud83d\udc49 Cosmos Example\n\nCosmos Example\n\nCopy\n\n01\n\nnpm\n\ninstall\n\n--save @magic-ext/cosmos\n\n01\n\nnpm\n\ninstall\n\n--save @magic-ext/cosmos", "explanation": "The 'Cosmos - Cosmos - #Installation' section of the documentation is about setting up and installing the Magic extension package, `@magic-ext/cosmos`, which is used to interact with the Cosmos blockchain. This setup allows developers to utilize methods from the JavaScript library, cosmjs, to engage with the Cosmos network through Magic's interface. The main purpose of this section is to guide users on how to install this package using npm, a package manager for JavaScript, so they can start building and experimenting with applications on the Cosmos blockchain. It also points users to a comprehensive example, termed the \"kitchen sink example,\" showcasing the capabilities and uses of the extension.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/other/cosmos#chunk-1", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\nimport\n\n{\n\nCosmosExtension\n\n}\n\nfrom\n\n'@magic-ext/cosmos'\n\n;\n\n02\n\nimport\n\n{\n\nCosmosExtension\n\n}\n\nfrom\n\n'@magic-ext/cosmos'\n\n;\n\n03\n\n03\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_API_KEY'\n\n,\n\n{\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_API_KEY'\n\n,\n\n{\n\n05\n\nextensions\n\n:\n\n[\n\n05\n\nextensions\n\n:\n\n[\n\n06\n\nnew\n\nCosmosExtension\n\n(\n\n{\n\n06\n\nnew\n\nCosmosExtension\n\n(\n\n{\n\n07\n\nrpcUrl\n\n:\n\n'cosmos rpc url'\n\n,\n\n07\n\nrpcUrl\n\n:\n\n'cosmos rpc url'\n\n,\n\n08\n\n}\n\n)\n\n,\n\n08\n\n}\n\n)\n\n,\n\n09\n\n]\n\n,\n\n09\n\n]\n\n,\n\n10\n\n}\n\n)\n\n;\n\n10\n\n}\n\n)\n\n;", "explanation": "The provided documentation section titled '#Initialization' from Magic Labs illustrates how to set up and initialize the Magic SDK specifically for integrating with the Cosmos blockchain through a Cosmos extension. \n\n### Main Purpose:\n- **Importing Modules**: It details the importation of necessary modules, specifically `Magic` from 'magic-sdk' and `CosmosExtension` from '@magic-ext/cosmos'.\n- **Creating a Magic Instance**: It guides you through creating a new instance of `Magic` using your API key.\n- **Configuring Extensions**: The instance is configured with the `CosmosExtension` added into the 'extensions' array. This extension is instantiated with a `rpcUrl`, which should be the URL of the Cosmos blockchain's RPC endpoint.\n\nOverall, the initialization process is designed to set up an embedded wallet environment capable of interacting with the Cosmos blockchain network by leveraging the add-on functionalities provided through the Cosmos extension.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/other/cosmos#chunk-2", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n#\n\nTo send or sign a standard Cosmos blockchain transaction, you can call the magic.cosmos.signAndBroadcast method or magic.cosmos.sign method.\n\nmagic.cosmos.signAndBroadcast\n\nmagic.cosmos.sign\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\nimport\n\n{\n\nCosmosExtension\n\n}\n\nfrom\n\n'@magic-ext/cosmos'\n\n;\n\n02\n\nimport\n\n{\n\nCosmosExtension\n\n}\n\nfrom\n\n'@magic-ext/cosmos'\n\n;\n\n03\n\nimport\n\n{\n\ncoins\n\n}\n\nfrom\n\n'@cosmjs/launchpad'\n\n;\n\n03\n\nimport\n\n{\n\ncoins\n\n}\n\nfrom\n\n'@cosmjs/launchpad'\n\n;\n\n04\n\n04\n\n05\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_API_KEY'\n\n,\n\n{\n\n05\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_API_KEY'\n\n,\n\n{\n\n06\n\nextensions\n\n:\n\n[\n\n06\n\nextensions\n\n:\n\n[\n\n07\n\nnew\n\nCosmosExtension\n\n(\n\n{\n\n07\n\nnew\n\nCosmosExtension\n\n(\n\n{\n\n08\n\nrpcUrl\n\n:\n\n'cosmos rpc url'\n\n,\n\n08\n\nrpcUrl\n\n:\n\n'cosmos rpc url'\n\n,\n\n09\n\n}\n\n)\n\n,\n\n09\n\n}\n\n)\n\n,\n\n10\n\n]\n\n,\n\n10\n\n]\n\n,\n\n11\n\n}\n\n)\n\n;\n\n11\n\n}\n\n)\n\n;\n\n12\n\n12\n\n13\n\nconst\n\nhandlerSendTransaction\n\n=\n\nasync\n\n(\n\n)\n\n=>\n\n{\n\n13\n\nconst\n\nhandlerSendTransaction\n\n=\n\nasync\n\n(\n\n)\n\n=>\n\n{\n\n14\n\nconst\n\nmetadata\n\n=\n\nawait\n\nmagic\n\n.\n\nuser\n\n.\n\ngetMetadata\n\n(\n\n)\n\n;\n\n14\n\nconst\n\nmetadata\n\n=\n\nawait\n\nmagic\n\n.\n\nuser\n\n.\n\ngetMetadata\n\n(\n\n)\n\n;\n\n15\n\n15\n\n16\n\nconst\n\nmessage\n\n=\n\n[\n\n16\n\nconst\n\nmessage\n\n=\n\n[\n\n17\n\n{\n\n17\n\n{\n\n18\n\ntypeUrl\n\n:\n\n'/cosmos.bank.v1beta1.MsgSend'\n\n,\n\n18\n\ntypeUrl\n\n:\n\n'/cosmos.bank.v1beta1.MsgSend'\n\n,\n\n19\n\nvalue\n\n:\n\n{\n\n19\n\nvalue\n\n:\n\n{\n\n20\n\nfromAddress\n\n:\n\nmetadata\n\n.\n\npublicAddress\n\n,\n\n20\n\nfromAddress\n\n:\n\nmetadata\n\n.\n\npublicAddress\n\n,\n\n21\n\ntoAddress\n\n:\n\ndestinationAddress\n\n,\n\n21\n\ntoAddress\n\n:\n\ndestinationAddress\n\n,\n\n22\n\namount\n\n:\n\n[\n\n22\n\namount\n\n:\n\n[\n\n23\n\n{\n\n23\n\n{\n\n24\n\namount\n\n:\n\nString\n\n(\n\nsendAmount\n\n)\n\n,\n\n24\n\namount\n\n:\n\nString\n\n(\n\nsendAmount\n\n)\n\n,\n\n25\n\ndenom\n\n:\n\n'atom'\n\n,\n\n25\n\ndenom\n\n:\n\n'atom'\n\n,\n\n26\n\n}\n\n,\n\n26\n\n}\n\n,\n\n27\n\n]\n\n,\n\n27\n\n]\n\n,\n\n28\n\n}\n\n,\n\n28\n\n}\n\n,\n\n29\n\n}\n\n,\n\n29\n\n}\n\n,\n\n30\n\n]\n\n;\n\n30\n\n]\n\n;\n\n31\n\nconst\n\nfee\n\n=\n\n{\n\n31\n\nconst\n\nfee\n\n=\n\n{\n\n32\n\namount\n\n:\n\n[\n\n{\n\ndenom\n\n:\n\n'uatom'\n\n,\n\namount\n\n:\n\n'500'\n\n}\n\n]\n\n,\n\n32\n\namount\n\n:\n\n[\n\n{\n\ndenom\n\n:\n\n'uatom'\n\n,\n\namount\n\n:\n\n'500'\n\n}\n\n]\n\n,\n\n33\n\ngas\n\n:\n\n'200000'\n\n,\n\n33\n\ngas\n\n:\n\n'200000'\n\n,\n\n34\n\n}\n\n;\n\n34\n\n}\n\n;\n\n35\n\n35\n\n36\n\nconst\n\nsendTransactionResult\n\n=\n\nawait\n\nmagic\n\n.\n\ncosmos\n\n.\n\nsignAndBroadcast\n\n(\n\nmessage\n\n,\n\nfee\n\n)\n\n;\n\n36\n\nconst\n\nsendTransactionResult\n\n=\n\nawait\n\nmagic\n\n.\n\ncosmos\n\n.\n\nsignAndBroadcast\n\n(\n\nmessage\n\n,\n\nfee\n\n)\n\n;\n\n37\n\n//or\n\n37\n\n//or\n\n38\n\nconst\n\nsignTransactionResult\n\n=\n\nawait\n\nmagic\n\n.\n\ncosmos\n\n.\n\nsign\n\n(\n\nmessage\n\n,\n\nfee\n\n)\n\n;\n\n38\n\nconst\n\nsignTransactionResult\n\n=\n\nawait\n\nmagic\n\n.\n\ncosmos\n\n.\n\nsign\n\n(\n\nmessage\n\n,\n\nfee\n\n)\n\n;\n\n39\n\n}\n\n;\n\n39\n\n}\n\n;", "explanation": "The documentation section titled \"#Common Methods - #Sign and Send Transaction\" provides guidance on how to sign and send transactions on the Cosmos blockchain using the Magic SDK. It explains the usage of two primary methods: `magic.cosmos.signAndBroadcast` and `magic.cosmos.sign`.\n\n### Main Purpose:\nThe main purpose of this documentation is to help developers integrate the functionality of signing and sending Cosmos blockchain transactions into their applications using the Magic SDK. This involves:\n\n1. **Setup**: \n   - Import necessary modules, including `Magic` from 'magic-sdk' and `CosmosExtension` from '@magic-ext/cosmos'.\n   - Initialize a new Magic instance with an API key and configure it with Cosmos RPC URL using the `CosmosExtension`.\n\n2. **Transaction Preparation**:\n   - Gather user metadata, which includes the public address required for the transaction.\n   - Prepare the transaction message which defines the details of the transaction like the sender's address, recipient's address, the amount to be sent, and the denomination (e.g., 'atom').\n\n3. **Transaction Fee**:\n   - Define the transaction fee, specifying its amount and gas requirements.\n\n4. **Signing and Broadcasting**:\n   - Use `magic.cosmos.signAndBroadcast` to sign the transaction and broadcast it to the network.\n   - Alternatively, use `magic.cosmos.sign` if only signing is required without broadcasting immediately.\n\n5. **Example Code**:\n   - The documentation provides example code snippets demonstrating how to perform these operations asynchronously.\n\nThis documentation aims to streamline the implementation process for developers looking to leverage the Magic SDK for Cosmos blockchain transactions, enabling them to handle the complexities of transaction signing and broadcasting efficiently.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/other/cosmos#chunk-3", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nUsing magic.cosmos.sendTokens function to native tokens on Cosmos blockchain.\n\nmagic.cosmos.sendTokens\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\nimport\n\n{\n\nCosmosExtension\n\n}\n\nfrom\n\n'@magic-ext/cosmos'\n\n;\n\n02\n\nimport\n\n{\n\nCosmosExtension\n\n}\n\nfrom\n\n'@magic-ext/cosmos'\n\n;\n\n03\n\n03\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_API_KEY'\n\n,\n\n{\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_API_KEY'\n\n,\n\n{\n\n05\n\nextensions\n\n:\n\n[\n\n05\n\nextensions\n\n:\n\n[\n\n06\n\nnew\n\nCosmosExtension\n\n(\n\n{\n\n06\n\nnew\n\nCosmosExtension\n\n(\n\n{\n\n07\n\nrpcUrl\n\n:\n\n'cosmos rpc url'\n\n,\n\n07\n\nrpcUrl\n\n:\n\n'cosmos rpc url'\n\n,\n\n08\n\n}\n\n)\n\n,\n\n08\n\n}\n\n)\n\n,\n\n09\n\n]\n\n,\n\n09\n\n]\n\n,\n\n10\n\n}\n\n)\n\n;\n\n10\n\n}\n\n)\n\n;\n\n11\n\n11\n\n12\n\nconst\n\nresult\n\n=\n\nawait\n\nmagic\n\n.\n\ncosmos\n\n.\n\nsendTokens\n\n(\n\n'recipientAddress'\n\n,\n\n'transferAmount'\n\n,\n\n'denom'\n\n,\n\n'memo'\n\n)\n\n;\n\n12\n\nconst\n\nresult\n\n=\n\nawait\n\nmagic\n\n.\n\ncosmos\n\n.\n\nsendTokens\n\n(\n\n'recipientAddress'\n\n,\n\n'transferAmount'\n\n,\n\n'denom'\n\n,\n\n'memo'\n\n)\n\n;", "explanation": "The \"#Send Tokens\" section in the documentation provides guidance on using the `magic.cosmos.sendTokens` function to transfer native tokens on the Cosmos blockchain. This function is part of the Magic SDK, a developer tool that facilitates interactions with blockchain technologies.\n\nThe key steps outlined in the section include:\n\n1. Importing necessary modules from `magic-sdk` and `@magic-ext/cosmos`, specifically the `Magic` and `CosmosExtension` classes.\n2. Initializing a `Magic` instance with your API key and adding a `CosmosExtension` configured with an RPC URL pertinent to the Cosmos blockchain.\n3. Utilizing the `sendTokens` method from the `magic.cosmos` object to send tokens. The method requires specific parameters: the recipient's address (`recipientAddress`), the amount to transfer (`transferAmount`), the token denomination (`denom`), and an optional memo (`memo`).\n\nThe main purpose of this section is to enable developers to programmatically send Cosmos blockchain tokens using Magic's extensions, facilitating seamless integration into applications that require token transactions.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/other/cosmos#chunk-4", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nUsing magic.cosmos.changeAddress function to change the address prefix.\n\nmagic.cosmos.changeAddress\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\nimport\n\n{\n\nCosmosExtension\n\n}\n\nfrom\n\n'@magic-ext/cosmos'\n\n;\n\n02\n\nimport\n\n{\n\nCosmosExtension\n\n}\n\nfrom\n\n'@magic-ext/cosmos'\n\n;\n\n03\n\n03\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_API_KEY'\n\n,\n\n{\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_API_KEY'\n\n,\n\n{\n\n05\n\nextensions\n\n:\n\n[\n\n05\n\nextensions\n\n:\n\n[\n\n06\n\nnew\n\nCosmosExtension\n\n(\n\n{\n\n06\n\nnew\n\nCosmosExtension\n\n(\n\n{\n\n07\n\nrpcUrl\n\n:\n\n'cosmos rpc url'\n\n,\n\n07\n\nrpcUrl\n\n:\n\n'cosmos rpc url'\n\n,\n\n08\n\n}\n\n)\n\n,\n\n08\n\n}\n\n)\n\n,\n\n09\n\n]\n\n,\n\n09\n\n]\n\n,\n\n10\n\n}\n\n)\n\n;\n\n10\n\n}\n\n)\n\n;\n\n11\n\n11\n\n12\n\nconst\n\nresult\n\n=\n\nawait\n\nmagic\n\n.\n\ncosmos\n\n.\n\nchangeAddress\n\n(\n\n'address prefix'\n\n)\n\n;\n\n12\n\nconst\n\nresult\n\n=\n\nawait\n\nmagic\n\n.\n\ncosmos\n\n.\n\nchangeAddress\n\n(\n\n'address prefix'\n\n)\n\n;", "explanation": "The `#Change Address` section of the Magic Labs documentation explains how to change the address prefix for Cosmos blockchain addresses using the `magic.cosmos.changeAddress` function. This is useful when interacting with the Cosmos blockchain, which requires specific address prefixes depending on the network or application. The code snippet shows how to import necessary modules, initialize a Magic instance with a given API key, and configure it with the `CosmosExtension` by providing the RPC URL. Finally, it demonstrates how to change the address prefix by calling the `magic.cosmos.changeAddress()` function with the desired address prefix as an argument. This allows developers to ensure that addresses are compatible with a particular Cosmos blockchain network.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/other/cosmos#chunk-5", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 Cosmos Developer Portal\n\nCosmos Developer Portal", "explanation": "The '#Resources' section from the documentation URL you provided likely serves as a reference area, directing users to additional tools and information that can assist them in developing and integrating with the Cosmos blockchain. The specific mention of the \"Cosmos Developer Portal\" suggests that this resource is a centralized hub where developers can access documentation, tutorials, guides, and other materials relevant to building applications within the Cosmos ecosystem. Its main purpose is to support developers by providing them with the necessary resources to effectively utilize Cosmos's technology and features.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/other/cosmos#chunk-6", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nMagic Admin SDK is the entry-point to secure and passwordless authentication for your application. It enables features such as session management, DID token validation along with many other useful features.\n\nRuby\n\nPython\n\nPHP\n\nLaravel\n\nNode\n\nGo", "explanation": "The Magic Admin SDK is designed to provide secure, passwordless authentication for applications. Its main purpose is to manage user sessions and validate decentralized identifiers (DID) tokens, among other functionalities that help enhance security and user experience. The SDK supports multiple programming languages and frameworks, including Ruby, Python, PHP, Laravel, Node.js, and Go, ensuring broad compatibility and ease of integration into various tech stacks.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/overview#chunk-1", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nThe following examples provide a glimpse into the versatile capabilities of the Magic Admin SDK. This is not an exhaustive list, and the applications of these tools extend beyond the mentioned scenarios.\n\nSession Management: Securely handle user sessions within your application using session management, making sure that users benefit from a controlled and protected digital wallet tied to their accounts, enhancing overall session security. This functionality is exclusive to the Dedicated Wallet.\n\nsession management\n\nToken Gating: Add an additional layer of security to your application by controlling access based on token validity! The Magic Admin SDK facilitates the validation of tokens, guaranteeing that only authorized and valid tokens are accepted. This plays a crucial role in preventing unauthorized access and reinforcing the overall security of your authentication processes.\n\nPasswordless Authentication: The passwordless authentication feature eliminates the need for users to remember and input passwords. This not only streamlines the user experience but also significantly reduces the risk of password-related vulnerabilities such as phishing attacks and password leaks.\n\npasswordless authentication\n\nUser Metadata Retrieval: Gain access to additional information associated with user accounts. By retrieving user metadata, you gain the ability to customize and tailor your application based on individual user preferences. This empowers dynamic content adjustments and the delivery of personalized user experiences.\n\nDID Token Validation: Verify the integrity and authenticity of user identities within your application using DID token validation. The Magic Admin SDK includes functionality to validate Decentralized Identity tokens, ensuring that users' digital identities are secure and trustworthy. \u2060\n\nDID token validation", "explanation": "The provided '#Use Cases' section from the Magic Admin SDK documentation illustrates the diverse functionalities available through the SDK, emphasizing their applications in enhancing security and user experience in digital environments. The key capabilities highlighted include:\n\n1. **Session Management:** Ensures secure user sessions, particularly by managing user accounts and their linked digital wallets. This feature is crucial for maintaining session security and is exclusive to the Dedicated Wallet.\n\n2. **Token Gating:** Enhances application security by permitting access only to users with valid tokens. This method helps prevent unauthorized access and fortifies authentication processes.\n\n3. **Passwordless Authentication:** Simplifies user login experience by removing the need for passwords, mitigating password-related vulnerabilities like phishing attacks.\n\n4. **User Metadata Retrieval:** Allows applications to access and use additional user data for creating personalized experiences, enabling dynamic content and customization based on user preferences.\n\n5. **DID Token Validation:** Ensures the validity and trustworthiness of user identities through Decentralized Identity (DID) token validation, maintaining secure digital identities.\n\nOverall, this section showcases the Magic Admin SDK's tools for robust security management, user authentication, and personalized user interactions.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/overview#chunk-2", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nMagic Link Security Checks provide an added layer of protection on magic links. When a user clicks on a magic link from their email, they will be required to enter a 3-digit code that was presented in the app that they attempted to log in from.", "explanation": "The \"Magic Link Security Check\" is a security feature designed to enhance the safety of user authentication via magic links. When a user clicks on a magic link sent to their email, they are prompted to enter a 3-digit code. This code is displayed in the application from which they attempted to log in. The feature aims to verify the user's identity and ensure that the person clicking the magic link is the same individual who initiated the login attempt, thereby reducing the risk of unauthorized access.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/security/magic-link-security-check#chunk-1", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nThe Magic Link Security Check feature only applies to Dedicated Wallets; Universal Wallets do not support magic links as a login method. Dedicated Wallets are by default opted out, but we do recommend that you enable it to enhance wallet security.\n\nTo enable Magic Link Security Checks in the user wallets of your app:\n\n\u2022 Go to the Magic Dashboard and sign into your developer account\n\n\u2022 Go to your Dedicated Wallet app for which you would like to enable this feature\n\n\u2022 Go to \u201cSettings\u201d on the left navigation bar, scroll down to the \u201cMagic Link Security Check\u201d section, and click \"Edit\" in the top right corner\n\n\u2022 Toggle on \u201cEnable security check on login\u201d and click \u201cSave\u201d\n\nMagic Dashboard", "explanation": "The '#Usage' section of the documentation for the Magic Link Security Check feature explains the steps to enable an enhanced security measure for users' Dedicated Wallets in an application. This feature is not available for Universal Wallets. By default, Dedicated Wallets do not have this security check enabled, but the documentation recommends activating it to improve wallet security during login processes. The section provides a step-by-step guide for developers to access the Magic Dashboard, navigate to the app's settings, and enable the Magic Link Security Check to fortify user accounts against unauthorized access.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/security/magic-link-security-check#chunk-2", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "This feature requires a subscription to Startup or Growth Plan", "explanation": "The \"Data Export - Data Export\" section from the Magic Labs documentation outlines a feature that allows users to export important authentication data related to their embedded wallet service. This feature is available to users who are subscribed to either the Startup or Growth Plan. The main purpose of this capability is to provide businesses with the flexibility to extract and utilize their authentication data for external analysis, reporting, or integration with other systems, which can help in making informed decisions and enhancing their service offerings.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/data/data-export#chunk-1", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nOnly available with Dedicated Wallet.\n\nDedicated Wallet\n\nData for which users are using your application can be found in the Users tab in your Magic Dashboard. Basic attributes are provided per user, including their email address, when they signed up and when they last logged in.\n\nMagic Dashboard\n\nCustomers who are Startup and Growth subscribers will also have the ability to export data into a CSV format. This is available via the Export CSV button in the top right hand corner of the page.\n\nExport CSV", "explanation": "The \"#Overview\" section of the documentation provides an introduction to the data export feature available for users with a Dedicated Wallet in the Magic Labs system. It outlines that user-specific data, such as their email address, signup date, and last login date, can be accessed within the Users tab of the Magic Dashboard. Additionally, it specifies that customers with Startup and Growth subscriptions have the capability to export this data in a CSV format by utilizing the \"Export CSV\" button located at the top right corner of the page. The main purpose of this section is to inform users about how to access and export user data from the Magic Dashboard, highlighting the prerequisites and subscription levels needed to utilize the export feature.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/data/data-export#chunk-2", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nMagic offers fiat on-ramp functionality in our wallet widget UI, allowing US and international users to purchase crypto through multiple payment options, including instant ACH, credit card, debit card, Apple Pay, Google Pay, and SEPA transfer. Fiat on-ramp is only supported on Ethereum and Polygon networks.\n\n#\n\n\u2022 For Dedicated Wallet, Stripe is the default on-ramp provider and is the only service compatible. To get access to alternative providers, reach out to sales.\n\n\u2022 For Universal Wallet, all of the on-ramp providers are available\n\n\u2022 Fiat on-ramp functionality is available via the widget UI using the following client-side SDKs:WebReact NativeiOSAndroid\n\non-ramp providers\n\nwidget UI\n\n\u2022 Web\n\n\u2022 React Native\n\n\u2022 iOS\n\n\u2022 Android\n\nWeb\n\nReact Native\n\niOS\n\nAndroid\n\nUniversal wallets will soon be merged with Dedicated Wallets into a single product line. Universal apps created before February 7, 2024 will work as expected with no change. See our blog post to learn more.\n\nblog post", "explanation": "The section from the Magic Labs documentation gives an overview of the fiat on-ramp feature integrated into their wallet widget UI. This allows both US and international users to buy cryptocurrencies using various payment methods. The supported options include instant ACH, credit/debit cards, Apple Pay, Google Pay, and SEPA transfer. Currently, this feature is only available on the Ethereum and Polygon networks.\n\nFor users with a Dedicated Wallet, Stripe is the designated and sole on-ramp provider. However, users interested in other providers need to contact Magic Labs sales. In contrast, the Universal Wallet supports all available on-ramp providers.\n\nThis fiat on-ramp functionality can be accessed through the wallet widget UI across multiple platforms using the client-side SDKs for Web, React Native, iOS, and Android.\n\nLastly, Magic Labs is planning to merge Universal Wallets with Dedicated Wallets into a unified product. Universal apps developed before the cut-off date of February 7, 2024, will remain functional without changes. Additional details on this transition can be found in their referenced blog post.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/wallets/features/fiat-on-ramps#chunk-1", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 Allow users to purchase cryptocurrencies via our on-ramp partners through the wallet widget UI\n\n\u2022 Prompt users to top-up their wallet\u2019s token balance if they do not have enough to complete a certain on-chain transaction\n\nwidget UI", "explanation": "The '#Use Cases' section from the Magic Labs documentation on fiat on-ramps outlines the practical applications of integrating fiat on-ramp features into the Magic embedded wallet. The main purpose of this feature is to enable users to conveniently purchase cryptocurrencies directly through the wallet interface, utilizing the services of on-ramp partners. Additionally, it is designed to notify users if their wallet lacks sufficient tokens to perform specific on-chain transactions, prompting them to top up their balance. This enhances user experience by ensuring seamless wallet funding and transaction execution without needing to leave the wallet environment.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/wallets/features/fiat-on-ramps#chunk-2", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nOnce you have verified the correct setup of the Magic SDK and successfully authenticated the user, the wallet widget can then be displayed in an iframe by calling the showUI function: \u2060 \u2060\n\nshowUI\n\nCopy\n\n01\n\nconst\n\nwalletInfo\n\n=\n\nawait\n\nmagic\n\n.\n\nuser\n\n.\n\ngetInfo\n\n(\n\n)\n\n;\n\n01\n\nconst\n\nwalletInfo\n\n=\n\nawait\n\nmagic\n\n.\n\nuser\n\n.\n\ngetInfo\n\n(\n\n)\n\n;\n\n02\n\nconst\n\nwalletType\n\n=\n\nwalletInfo\n\n.\n\nwalletType\n\n;\n\n02\n\nconst\n\nwalletType\n\n=\n\nwalletInfo\n\n.\n\nwalletType\n\n;\n\n03\n\n03\n\n04\n\nif\n\n(\n\nwalletType\n\n===\n\n\"magic\"\n\n)\n\n{\n\n04\n\nif\n\n(\n\nwalletType\n\n===\n\n\"magic\"\n\n)\n\n{\n\n05\n\nawait\n\nmagic\n\n.\n\nwallet\n\n.\n\nshowUI\n\n(\n\n)\n\n;\n\n05\n\nawait\n\nmagic\n\n.\n\nwallet\n\n.\n\nshowUI\n\n(\n\n)\n\n;\n\n06\n\n}\n\n;\n\n06\n\n}\n\n;", "explanation": "The section titled \"#Usage - How do I allow users to purchase cryptocurrencies through the wallet widget UI?\" from the Magic Labs documentation is about integrating a feature that lets users buy cryptocurrencies directly within the wallet interface provided by Magic SDK. The main purpose of the documentation is to guide developers on how to implement a user interface (UI) element, specifically a wallet widget, within their application where users can conduct cryptocurrency purchases.\n\nThe process outlined involves verifying the setup of the Magic SDK, authenticating the user, and then using the `showUI` function to display the wallet widget in an iframe. This function checks the type of wallet the user has and, if it is a Magic wallet, it proceeds to show the UI. The documentation aims to provide a clear and simple code snippet for developers to follow so they can enable this feature within their applications, enhancing the user experience by allowing seamless cryptocurrency transactions.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/wallets/features/fiat-on-ramps#chunk-3", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "Fiat on-ramp functionality can also be invoked during the transaction signing flow with the sendTransaction() function. This allows users to top-up their wallet's if their token balance is insufficient to complete the on-chain transaction.\n\nsendTransaction()", "explanation": "The documentation section titled \"How do I allow users to purchase crypto within the context of a transaction flow?\" explains how to integrate fiat on-ramp functionality into a transaction signing process within an application. The main purpose of this feature is to allow users to seamlessly buy cryptocurrency if they don't have enough tokens to complete an on-chain transaction. By using the `sendTransaction()` function, users can top-up their wallets directly within the transaction flow, enhancing the user experience by reducing the friction typically involved in purchasing crypto separately before completing a transaction.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/wallets/features/fiat-on-ramps#chunk-4", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nWe\u2019ve partnered with PayPal, Sardine, Onramper, and Stripe to offer a wide variety of dependable on-ramp options to users in all 50 US states and a total of 150+ countries.\n\nPayPal\n\nSardine\n\nOnramper\n\nStripe\n\nPlease consult the documentation of our partners (linked below) for information on their fiat, token, and blockchain coverage.\n\n\u2022 PayPal\n\nPayPal\n\n\u2022 Sardine\n\n\u2022 Onramper\n\n\u2022 Stripe\n\nSardine\n\nSardine\n\nOnramper\n\nOnramper\n\nStripe\n\nStripe", "explanation": "The section titled '#On-Ramp Partners' in the Magic Labs embedded wallet documentation outlines partnerships with major financial service providers\u2014namely, PayPal, Sardine, Onramper, and Stripe. The main purpose of this section is to inform users that Magic Labs offers various reliable on-ramp options, allowing users to convert fiat currency to cryptocurrency. These services are accessible across all 50 US states and in over 150 countries globally.\n\nThe document serves as a guide for users to explore further details about the specific fiat, token, and blockchain services that each partner provides. It directs users to consult the respective documentation of these partners for in-depth information on their offerings. This section essentially highlights the diversity and reach of the on-ramp services integrated by Magic Labs to facilitate ease of crypto transactions through trusted financial platforms.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/wallets/features/fiat-on-ramps#chunk-5", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 Quickstart\n\nQuickstart", "explanation": "The '#Resources' section titled \"Quickstart\" in the Magic Labs embedded wallet documentation likely serves as an entry point for developers and users who want to get started quickly with using the fiat on-ramps feature. This section would provide essential information, instructions, or links to help users quickly understand and implement the feature, enabling them to integrate fiat currency transactions into their applications or services with minimal time and effort. Its main purpose is to make the onboarding process efficient, allowing users to leverage the fiat on-ramp capabilities of Magic Labs' wallet system swiftly.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/wallets/features/fiat-on-ramps#chunk-6", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nTailor your authentication experience to perfection by selecting from a diverse array of passwordless login options, ensuring an ideal fit for your audience. All users are provisioned with a non-custodial wallet on signup, enabling one-click web3 onboarding experiences.\n\nFor simplicity, Magic is the default identity provider for authentication. For increased control over user authentication and identity, you can bring your own IDP and use JWTs to securely integrate with Magic. Authentication method availability and scope will depend on your wallet type.\n\nbring your own IDP\n\nwallet type", "explanation": "The \"Authentication - #Overview\" section from Magic Labs documentation provides an overview of the authentication features offered by Magic. Its main purpose is to introduce and explain the flexible authentication options available to developers for integrating Magic's services. Key points include:\n\n1. **Passwordless Login Options**: Magic offers a variety of passwordless authentication methods, allowing developers to choose the most suitable option for their audience, enhancing user experience and security.\n\n2. **Non-Custodial Wallets**: Upon signup, each user is provided with a non-custodial wallet, facilitating easy access to web3 services with minimal friction.\n\n3. **Magic as Default Identity Provider**: By default, Magic acts as the identity provider, simplifying the integration process for developers.\n\n4. **Custom IDP Integration**: For developers seeking more control, Magic allows the integration of external Identity Providers (IDPs) using JWTs, offering flexibility in how user identities are managed.\n\n5. **Wallet Type Dependencies**: The available authentication methods and their functionality depend on the type of wallet being used, indicating that different wallet types may offer varied features or constraints.\n\nOverall, this section outlines the customization and flexibility Magic provides for user authentication and identity management in web3 environments.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/overview#chunk-1", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nEmail OTP\n\nMagic Links\n\nSMS Login\n\nWebAuthn\n\nBring Your Own IDP\n\nFarcaster", "explanation": "The '#Login' section in the Magic Labs documentation provides an overview of the different authentication methods available for integrating Magic's embedded wallet solutions. Each method corresponds to a different way of logging users into an application or service:\n\n1. **Email OTP**: This method uses a One-Time Password sent to a user's email for authentication.\n   \n2. **Magic Links**: This involves sending a unique, time-sensitive link to a user's email, which, when clicked, logs the user into the application.\n\n3. **SMS Login**: Similar to email OTP, but the One-Time Password is sent via SMS to the user's mobile device.\n\n4. **WebAuthn**: A modern web standard allowing users to log in using biometrics or hardware-based authenticators.\n\n5. **Bring Your Own IDP**: This allows developers to integrate their own Identity Provider (IDP) for user authentication, leveraging Magic's flexible infrastructure.\n\n6. **Farcaster**: Likely refers to integration with Farcaster, a decentralized platform for supporting custom authentication mechanisms.\n\nThe main purpose of this section is to outline the various login options Magic offers to enhance user experience and security during the authentication process.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/overview#chunk-2", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nGetting Started With OAuth\n\nGoogle\n\nFacebook\n\nTwitter\n\nApple\n\nDiscord", "explanation": "The '#Social Logins' section of the Magic Labs documentation provides information on integrating various social login providers into your application using OAuth. This allows users to authenticate using their existing accounts from platforms like Google, Facebook, Twitter, Apple, and Discord. The main purpose of this section is to guide developers in setting up these social authentication methods, enhancing user experience by offering quick and convenient login options that eliminate the need to create new account credentials.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/overview#chunk-3", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nMFA\n\nAdvanced MFA\n\nAccount Recovery\n\nAccount Linking\n\nDecentralized ID", "explanation": "The '#Features' section of the Magic Labs authentication documentation provides an overview of the key functionalities and services offered by their embedded wallet solution. Here's a clear and concise breakdown of the main features listed:\n\n1. **MFA (Multi-Factor Authentication):** This feature offers an additional layer of security for user authentication by requiring multiple forms of verification before granting access. This ensures enhanced security beyond just a single password.\n\n2. **Advanced MFA:** This likely refers to more sophisticated or customizable multi-factor authentication options that provide even greater security measures compared to standard MFA.\n\n3. **Account Recovery:** This feature focuses on providing users with efficient methods to recover their accounts in case they lose access, ensuring seamless continuity and user experience.\n\n4. **Account Linking:** This allows users to connect multiple accounts or services under a single identity, which can streamline the user experience and provide more flexibility in managing their digital identities.\n\n5. **Decentralized ID:** This emphasizes the use of decentralized technology to create and manage digital identities, promoting more user control, privacy, and security across transactions and identity verifications.\n\nOverall, the main purpose of this section is to highlight the comprehensive security and identity management features available with Magic's authentication solutions, catering to needs ranging from basic security to advanced identity management.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/overview#chunk-4", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nLogin UI\n\nLocalization\n\nCustom Email Provider\n\nCustom Email Template", "explanation": "The '#Customization' section in the Magic Labs documentation on authentication outlines the various ways in which you can tailor the authentication experience to align with your brand or application requirements. It covers four main customization aspects:\n\n1. **Login UI**: This allows you to adjust the visual and functional elements of the login interface ensuring that it matches the look and feel of your application.\n\n2. **Localization**: This feature lets you adapt the language and regional settings of the authentication process, making it accessible and intuitive to a global audience.\n\n3. **Custom Email Provider**: You have the option to configure a different email service provider for sending transactional emails related to authentication, giving you control over email deliverability and branding.\n\n4. **Custom Email Template**: This enables you to design and deploy email templates that fit your brand's identity, ensuring that any emails sent during the authentication process are consistent with your overall communication strategy.\n\nThe main purpose of this section is to provide guidance on personalizing the authentication flow to enhance user experience and maintain brand consistency.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/overview#chunk-5", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nData Export\n\nEmail Logs\n\nGDPR Deletion Request", "explanation": "The '#Data' section in the Magic Labs documentation covers topics related to the handling and management of user data within their authentication system. The main purposes of this section are:\n\n1. **Data Export**: It likely explains the process for exporting user data, allowing users or administrators to obtain a copy of the data maintained in the system.\n\n2. **Email Logs**: This part likely discusses how email communication records are managed, providing insights into the tracking and storage of emails for security or compliance purposes.\n\n3. **GDPR Deletion Request**: This section focuses on how users can request the deletion of their personal data in accordance with the General Data Protection Regulation (GDPR), emphasizing the platform's compliance with privacy laws and user rights to data erasure.\n\nOverall, the section aims to guide users and administrators in understanding data privacy, security, and compliance procedures related to the Magic Labs authentication services.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/overview#chunk-6", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nAccess Control\n\nDomain Allowlist\n\nRedirect Allowlist\n\nMobile Access Allow Listing\n\nDevice Registration\n\nCustom Session Management", "explanation": "The section titled '#Security' from the Magic Labs documentation focuses on various security features and measures that help protect the use of the Magic embedded wallet. Here's a concise breakdown of what each segment likely covers:\n\n1. **Access Control**: This refers to mechanisms that manage who has the ability to interact with the wallet features, ensuring only authorized users can access or make changes.\n\n2. **Domain Allowlist**: This feature allows developers to specify which domains are permitted to interact with the wallet, adding a layer of security by preventing unauthorized domains from accessing the wallet services.\n\n3. **Redirect Allowlist**: By maintaining a list of allowed redirect destinations, this feature ensures that once authentication is complete, only safe and pre-approved URLs can be used for redirect purposes, protecting against phishing and redirection attacks.\n\n4. **Mobile Access Allow Listing**: Similar to domain allowlisting, this may encompass specific rules to verify and allow access from mobile devices, ensuring that only trusted applications on mobile platforms can interact with the wallet.\n\n5. **Device Registration**: This pertains to enrolling devices that are permitted to access the wallet. It can help in tracking devices and adds an extra security layer by recognizing known and trusted devices.\n\n6. **Custom Session Management**: This involves settings and features related to how user sessions are managed, potentially offering options to customize session duration, invalidation, and other session-related parameters that influence the security and user experience.\n\nThe main purpose of this section is to outline and explain the key security features available in Magic Labs' authentication solutions, aimed at helping developers secure their applications and protect user data effectively.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/overview#chunk-7", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nYou can allow your users to sign up & log in to your web app with their Discord account.", "explanation": "The section titled 'Discord Social Login with Magic - #Overview' from Magic Labs documentation provides guidance on integrating Discord as a social login option within a web application. The main purpose of this feature is to enable users to sign up and log in using their Discord credentials, thereby streamlining the authentication process and enhancing user convenience by allowing them to access the app without creating a new username and password.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/login/social-logins/social-providers/discord#chunk-1", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n#\n\nMagic SDK offers two OAuth extensions: v1 and v2. For web applications, it is recommended to use v2, while v1 should be used for mobile applications.\n\nv1\n\nv2\n\n\u2022 You will need a Discord account\n\n\u2022 You will need to have the Magic SDK installed into your web app\n\n\u2022 You will need to have the Magic SDK - OAuth Extension installed into your web app\n\nDiscord\n\nMagic SDK installed\n\nMagic SDK - OAuth Extension", "explanation": "The '#Usage - #Prerequisites' section of the Magic Labs documentation for Discord social logins outlines the initial requirements needed to integrate Discord authentication into web or mobile applications using the Magic SDK. The main purpose of this section is to guide developers in setting up their applications correctly with the necessary tools and accounts. It highlights two versions of OAuth extensions provided by Magic SDK: v1 for mobile apps and v2 for web apps. For successful implementation, developers need to ensure they have a Discord account, and their web app must have both the Magic SDK and the Magic SDK OAuth Extension installed.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/login/social-logins/social-providers/discord#chunk-2", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nAfter installing the OAuth extension, you can now enable GitHub Login for your Magic app:\n\n\u2022 Create a Discord API application\n\n\u2022 Go to your Magic Dashboard\n\n\u2022 Select the Magic app for which you\u2019d like to enable Discord Login, or create a new app\n\n\u2022 Navigate to Social Login from the sidebar\n\n\u2022 Click the toggle for Discord\n\n\u2022 Copy the Redirect URI field from your Magic Dashboard\n\n\u2022 Return to your Discord developer Dashboard, navigate to OAuth2 from the sidebar, and paste the Redirect URI you obtained from your Magic Dashboard into the \"Redirect URI\" field. Don't forget to save your changes!\n\n\u2022 Next, obtain the \"Client ID\" and \"Client Secret\" from the current page\n\n\u2022 Return to your Magic Dashboard and input the Client ID and Client Secret for your Discord OAuth app\n\n\u2022 In Magic Dashboard, click \u201cSave\u201d \u2013 Done!\n\nAPI application\n\nMagic Dashboard", "explanation": "The '#Discord Setup (v1 extension)' section from the provided documentation guides users on how to configure Discord as a social login provider for their Magic app. The main purpose of this setup is to allow users to log into the Magic app using their Discord credentials, thereby centralizing and simplifying the authentication process.\n\nHere\u2019s a clear breakdown of the process:\n\n1. **Create a Discord API Application:** Begin by setting up an application on the Discord developer platform, which will serve as the bridge between your app and Discord's OAuth service.\n\n2. **Magic Dashboard Configuration:** Access the Magic Dashboard to select or create a new Magic app where Discord login will be enabled.\n\n3. **Enable Discord as a Social Login:** In the Magic Dashboard, navigate to the Social Login settings and activate Discord as a login method.\n\n4. **Configure OAuth in Discord:** \n   - Obtain the Redirect URI from the Magic Dashboard and enter it into the Discord developer portal under the OAuth2 settings to ensure successful communication between both platforms.\n   - Retrieve the \"Client ID\" and \"Client Secret\" from the Discord OAuth2 settings.\n\n5. **Finalize configuration in Magic Dashboard:** Enter the Discord \u201cClient ID\u201d and \u201cClient Secret\u201d within the Magic Dashboard settings to complete the integration process.\n\n6. **Save Changes:** Ensure all information is saved properly within the Magic Dashboard.\n\nBy following these steps, developers can seamlessly integrate Discord login functionality into their Magic-powered applications, enhancing user experience by leveraging existing Discord accounts for authentication.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/login/social-logins/social-providers/discord#chunk-3", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 Follow above steps, but disregard Magic's Redirect URI in step 6\n\n\u2022 In step 7, paste the Redirect URI you are passing in as the redirectURI argument to the loginWithRedirect method\n\nCopy\n\n01\n\nawait\n\nmagic\n\n.\n\noauth2\n\n.\n\nloginWithRedirect\n\n(\n\n{\n\n01\n\nawait\n\nmagic\n\n.\n\noauth2\n\n.\n\nloginWithRedirect\n\n(\n\n{\n\n02\n\nprovider\n\n:\n\n'discord'\n\n,\n\n02\n\nprovider\n\n:\n\n'discord'\n\n,\n\n03\n\nredirectURI\n\n:\n\n'https://your-app.com/your/oauth/callback'\n\n,\n\n// <== whitelist this with Discord\n\n03\n\nredirectURI\n\n:\n\n'https://your-app.com/your/oauth/callback'\n\n,\n\n// <== whitelist this with Discord\n\n04\n\n}\n\n)\n\n;\n\n04\n\n}\n\n)\n\n;", "explanation": "The section titled '#Discord Setup (v2 extension)' from the Magic Labs documentation is about configuring the Discord social login integration using Magic's OAuth 2.0 features. The primary purpose of this section is to guide developers on how to set up their application to authenticate users via Discord. It outlines the steps needed to correctly implement the `loginWithRedirect` method to initiate the Discord login process.\n\nKey points include:\n\n1. **Custom Redirect URI**: In this setup, instead of using Magic's default Redirect URI, you are instructed to provide your own custom Redirect URI as the `redirectURI` argument in the `loginWithRedirect` method. This custom URI must be whitelisted with Discord to ensure security.\n\n2. **Implementation Example**: The documentation provides a code snippet demonstrating how to call the `loginWithRedirect` method using the OAuth 2.0 provider 'discord'. This includes specifying the provider (`'discord'`) and the Redirect URI which should direct the user back to the specified URL (`'https://your-app.com/your/oauth/callback'`) after authentication.\n\nThis setup is crucial for integrating Discord as a social login provider in applications using Magic's solutions, ensuring users can log in with their Discord accounts securely.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/login/social-logins/social-providers/discord#chunk-4", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 Discord Social Login Demo\n\nDiscord Social Login Demo", "explanation": "The '#Resources' section in the Magic Labs documentation provides users with a specific resource related to the implementation of Discord social logins. Its primary purpose is to offer a practical demonstration, named \"Discord Social Login Demo,\" that likely showcases how to integrate and utilize Discord as an authentication provider within applications using Magic\u2019s platform. This demo serves as a reference or instructional tool to help developers understand and implement the necessary steps for enabling Discord-based social logins.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/login/social-logins/social-providers/discord#chunk-5", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nMoonbeam is a platform for cross-chain connected applications that unites assets and functionality from many blockchains. As a smart contract platform for building cross-chain connected applications, Moonbeam powers dApps that can access users, assets, and services on any chain.\n\nMoonbeam\n\nAs Moonbeam is EVM compatible, you can follow the Ethereum documentation to send your first transaction and utilize all other wallet features.\n\nEthereum", "explanation": "The documentation section titled 'Moonbeam / Moonriver - Moonbeam / Moonriver - #Overview' provides an introduction to Moonbeam, a platform designed for creating cross-chain connected applications. It highlights Moonbeam's capability to integrate assets and features from various blockchains, facilitating the development of decentralized applications (dApps) that can interact with users, assets, and services across different chains. The section also emphasizes that since Moonbeam is compatible with the Ethereum Virtual Machine (EVM), users can refer to Ethereum documentation to perform transactions and use wallet features on Moonbeam.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/evm/moonbeam#chunk-1", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n#\n\nCopy\n\n01\n\n// Mainnet\n\n01\n\n// Mainnet\n\n02\n\nconst\n\ncustomNodeOptions\n\n=\n\n{\n\n02\n\nconst\n\ncustomNodeOptions\n\n=\n\n{\n\n03\n\nrpcUrl\n\n:\n\n'https://rpc.api.moonbeam.network'\n\n,\n\n03\n\nrpcUrl\n\n:\n\n'https://rpc.api.moonbeam.network'\n\n,\n\n04\n\nchainId\n\n:\n\n1284\n\n04\n\nchainId\n\n:\n\n1284\n\n05\n\n}\n\n05\n\n}\n\n06\n\n06\n\n07\n\n// Or connect to Moonbeam's Testnet\n\n07\n\n// Or connect to Moonbeam's Testnet\n\n08\n\nconst\n\ncustomNodeOptions\n\n=\n\n{\n\n08\n\nconst\n\ncustomNodeOptions\n\n=\n\n{\n\n09\n\nrpcUrl\n\n:\n\n'https://rpc.api.moonbase.moonbeam.network'\n\n,\n\n09\n\nrpcUrl\n\n:\n\n'https://rpc.api.moonbase.moonbeam.network'\n\n,\n\n10\n\nchainId\n\n:\n\n1287\n\n10\n\nchainId\n\n:\n\n1287\n\n11\n\n}\n\n11\n\n}\n\n12\n\n12\n\n13\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_PUBLISHABLE_API_KEY'\n\n,\n\n{\n\nnetwork\n\n:\n\ncustomNodeOptions\n\n}\n\n)\n\n;\n\n13\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_PUBLISHABLE_API_KEY'\n\n,\n\n{\n\nnetwork\n\n:\n\ncustomNodeOptions\n\n}\n\n)\n\n;", "explanation": "The section titled \"#Configure Moonbeam\" from the documentation explains how to set up the Moonbeam blockchain network with the Magic Labs embedded wallet. This involves configuring network parameters, either for the Moonbeam mainnet or the Moonbeam testnet, using JavaScript code.\n\n- **Mainnet Setup**: It provides the configuration for connecting to the Moonbeam mainnet using a specified RPC URL (`'https://rpc.api.moonbeam.network'`) and a chain ID (`1284`). \n\n- **Testnet Setup**: Similarly, it shows how to connect to the Moonbeam testnet by setting a different RPC URL (`'https://rpc.api.moonbase.moonbeam.network'`) and a different chain ID (`1287`).\n\nThe main purpose of this setup is to define the node connection settings that the Magic instance will use for interacting with the specified Moonbeam network. This configuration allows developers to securely and efficiently integrate the Magic wallet into their applications while ensuring correct network interactions. The `Magic` object is instantiated using a publishable API key and the defined network settings, enabling wallet operations on the selected blockchain environment.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/evm/moonbeam#chunk-2", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nYou can also connect to Moonriver, which is currently live on Kusama, Polkadot's canary network. Moonriver is also EVM compatible so you can directly follow the Ethereum installation.\n\nMoonriver\n\nKusama\n\nEthereum installation\n\nCopy\n\n01\n\nconst\n\ncustomNodeOptions\n\n=\n\n{\n\n01\n\nconst\n\ncustomNodeOptions\n\n=\n\n{\n\n02\n\nrpcUrl\n\n:\n\n'https://rpc.api.moonriver.moonbeam.network'\n\n,\n\n02\n\nrpcUrl\n\n:\n\n'https://rpc.api.moonriver.moonbeam.network'\n\n,\n\n03\n\nchainId\n\n:\n\n1285\n\n03\n\nchainId\n\n:\n\n1285\n\n04\n\n}\n\n04\n\n}\n\n05\n\n05\n\n06\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_PUBLISHABLE_API_KEY'\n\n,\n\n{\n\nnetwork\n\n:\n\ncustomNodeOptions\n\n}\n\n)\n\n;\n\n06\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_PUBLISHABLE_API_KEY'\n\n,\n\n{\n\nnetwork\n\n:\n\ncustomNodeOptions\n\n}\n\n)\n\n;", "explanation": "The provided documentation section titled '#Moonriver' is about connecting to the Moonriver blockchain network using Magic Labs' embedded wallet solution. Moonriver is a blockchain that operates on the Kusama network, which serves as Polkadot's canary network \u2013 a testing ground for new features before they are deployed on Polkadot. The section highlights that Moonriver is compatible with the Ethereum Virtual Machine (EVM), which means that developers can integrate with it using the same methods as they would for Ethereum.\n\nThe main purpose of this section is to guide developers on how to configure the Magic Labs wallet to connect with Moonriver. It provides a code snippet that sets up a connection through custom node options specifying the RPC URL (`https://rpc.api.moonriver.moonbeam.network`) and the network chain ID (1285). By following these instructions, developers can build applications that interact with the Moonriver blockchain using the Magic Labs wallet infrastructure.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/evm/moonbeam#chunk-3", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 All Auth, User and most Wallet module methods* for Dedicated Wallets\n\n\u2022 All EVM Provider functionality to respond to supported RPC methods\n\nAuth\n\nUser\n\nWallet\n\nDedicated Wallets\n\nRPC methods\n\n*Some features are not yet compatible such as NFT Viewer and Fiat On-ramps.\n\nNeed a feature or see a problem? File an issue on our github repo.\n\ngithub repo", "explanation": "The \"#Compatibility\" section in the Magic Labs documentation for Moonbeam outlines the supported features and functionalities for using Magic's embedded wallet with the Moonbeam blockchain. It specifies that all authorization, user management, and most wallet module methods for dedicated wallets are supported. Additionally, it mentions that all Ethereum Virtual Machine (EVM) provider functions can handle supported Remote Procedure Call (RPC) methods. However, it notes that certain features, such as the NFT Viewer and Fiat On-ramps, are not yet compatible. The section also encourages users to report any feature needs or issues on their GitHub repository. The main purpose of this section is to inform developers about the current compatibility status of Magic's wallet features with the Moonbeam blockchain and provide a channel for feedback and issue reporting.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/evm/moonbeam#chunk-4", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 Documentation: https://docs.moonbeam.network/\n\n\u2022 Faucet: https://faucet.moonbeam.network/\n\n\u2022 Block Explorer: https://moonscan.io/\n\nhttps://docs.moonbeam.network/\n\nhttps://faucet.moonbeam.network/\n\nhttps://moonscan.io/", "explanation": "The '#Resources & Tools' section from the Magic Labs documentation for Moonbeam provides a list of essential resources and tools for developers and users working with the Moonbeam blockchain network. Its main purpose is to offer easy access to key resources needed for development and exploration on Moonbeam:\n\n1. **Documentation**: A link to the Moonbeam network's official documentation, providing comprehensive guides, tutorials, and technical details necessary for understanding and working with the Moonbeam blockchain.\n\n2. **Faucet**: A link to the Moonbeam faucet, which allows developers to obtain free test tokens. These tokens are essential for testing and deploying applications on the Moonbeam test network without requiring real cryptocurrency.\n\n3. **Block Explorer**: A link to Moonscan, a block explorer for Moonbeam. It enables users and developers to view and track transactions, blocks, and other data on the Moonbeam blockchain network, facilitating transparency and effective monitoring.\n\nThese tools collectively support users in developing, testing, and monitoring their applications on the Moonbeam network efficiently.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/evm/moonbeam#chunk-5", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "This feature requires a subscription to Startup or Growth Plan", "explanation": "The \"Multi-factor Authentication - Multi-factor Authentication\" section in the Magic Labs documentation outlines a security feature designed to enhance account protection. Multi-factor authentication (MFA) adds an additional layer of security by requiring users to provide multiple forms of verification before gaining access to their accounts. This reduces the risk of unauthorized access, as it requires not just a password, but also other verification methods, such as a temporary code sent to a user's mobile device. The main purpose of this feature is to increase security for users and protect their accounts from malicious attacks or breaches. It's important to note that enabling this feature requires a subscription to either the Startup or Growth Plan offered by Magic Labs.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/features/mfa#chunk-1", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nMulti-factor authentication is a common technique used to add an additional layer of security to an account. This means a secondary factor is validated along with the existing primary factor in order to login to an account. Typically, the primary factor is an email and the secondary factor is a phone number or mobile device authenticator. The idea is that both factors must be compromised in order for an account to be breached. There are many forms of both primary and secondary factors.\n\nMagic offers end-user MFA through mobile authenticator apps like Authy or Google Authenticator. This is currently supported for email, SMS, and social login primary factors. WebAuthn will be supported in the future.\n\n#\n\nOnly available with Dedicated Wallet. Cannot use with white-label login flows.\n\nDedicated Wallet\n\nMulti-factor auth is currently compatible with end-user accounts created via email magic link or SMS login.\n\nMulti-factor auth SDK methods are available via the following client-side SDKs:\n\n\u2022 Web\n\n\u2022 React Native\n\n\u2022 iOS\n\n\u2022 Android\n\nWeb\n\nReact Native\n\niOS\n\nAndroid", "explanation": "The section you're referring to discusses the implementation of multi-factor authentication (MFA) as an additional security measure for Magic Labs' embedded wallet. Here's a breakdown of the key points and purpose:\n\n1. **Purpose of MFA**: Multi-factor authentication is designed to enhance account security by requiring two forms of evidence (factors) to authenticate a user. This reduces the risk of unauthorized access as both the primary (e.g., email) and secondary (e.g., phone number or authenticator app) factors would need to be compromised.\n\n2. **Magic's Offering**: Magic provides MFA options using mobile authenticator apps such as Authy or Google Authenticator. This feature is available for users who authenticate using email, SMS, or social logins. Additionally, Magic plans to add support for WebAuthn as a future enhancement.\n\n3. **Compatibility and Limitations**: The MFA feature is only available with the Dedicated Wallet setup, and it does not support white-label login flows. This means users can only utilize MFA if they are using specific login methods like email magic links or SMS logins. It is not applicable to white-labeled authentication solutions.\n\n4. **Platform Support**: Magic Labs has developed SDKs to facilitate the implementation of MFA across multiple platforms, including Web, React Native, iOS, and Android. These SDKs provide the necessary tools for developers to enable MFA in their applications on these platforms.\n\nOverall, this section of the documentation highlights how Magic Labs integrates MFA to secure user accounts, the compatibility specifics, and the development support provided for implementing this feature across different platforms.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/features/mfa#chunk-2", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nThe most obvious benefit of MFA is increased security. Magic's MFA increases your users' security by requiring additional proof of ownership to their wallet. If a bad actor has found a way to compromise a user\u2019s primary email or SMS, Magic's MFA provides a second layer of protection to prevent account compromise. Enabling MFA can also help you meet regulatory requirements. If you are required to meet HIPAA, PCI, or CJIS compliance standards, then MFA should be enabled for your users.\n\nThis does come with some drawbacks, specifically a lengthier sign-in process for end users. Requiring MFA during initial registration can also decrease user conversion rates by increasing friction. A common way to mitigate this is by nudging users to enable MFA after initial registration. Magic was developed to give you maximum flexibility when you want to enroll your users into MFA. You can nudge them to enroll at the end of user registration or when they have hit a milestone on their user journey that may benefit from the enhanced security of MFA - for example, once they start to hold assets in their wallet.", "explanation": "The '#Benefits of MFA' section from the Magic Labs documentation explains the advantages and considerations related to implementing Multi-Factor Authentication (MFA) for Magic's embedded wallet users. The primary purpose of MFA is to enhance security by requiring users to provide additional proof of ownership beyond their primary email or SMS, creating a second layer of protection against unauthorized access. This feature is crucial for preventing account compromises even if a user's initial credentials are compromised by a bad actor.\n\nIn addition to increasing security, enabling MFA can help organizations comply with various regulatory standards such as HIPAA, PCI, or CJIS. However, implementing MFA may lead to a lengthier sign-in process and potentially lower user conversion rates due to increased friction during initial registration. To balance security with user experience, the documentation suggests introducing MFA as an optional feature post-registration, once users become more invested or when they reach a critical point, such as holding assets in their wallet. Magic Labs provides flexibility in timing when to prompt users to opt into MFA, ensuring that security enhancements can be integrated smoothly and strategically in the user journey.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/features/mfa#chunk-3", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n#\n\n#\n\nMulti-factor auth is a premium feature available to all customers for an additional monthly charge. To unlock MFA for your workspace, please activate Dedicated Wallet Pro within your developer dashboard.\n\nDedicated Wallet Pro", "explanation": "The section titled '#Usage - #Implementation - #Unlocking MFA' from the given URL explains how to enable Multi-Factor Authentication (MFA) for your Magic Labs account. MFA is a premium feature that adds an extra layer of security beyond just a password. To activate MFA, users must subscribe to the Dedicated Wallet Pro plan, which incurs an additional monthly fee. This plan can be activated through the Magic Labs developer dashboard. The main purpose of this section is to guide users on unlocking and setting up MFA to enhance security for their workspace.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/features/mfa#chunk-4", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 Client-side SDK\n\n\u2022 Feature unlocked by subscribing to Dedicated Wallet Pro\n\n\u2022 Feature enabled through Multi-factor Auth Dashboard page\n\nClient-side SDK", "explanation": "The '#Pre-requisites' section for the Magic Labs authentication feature with multi-factor authentication (MFA) outlines the necessary conditions and components required before utilizing the MFA feature. The main purpose of this section is to ensure that users are aware of what is needed to successfully implement and use multi-factor authentication with the Magic Labs embedded wallet. Here's a breakdown of the pre-requisites:\n\n1. **Client-side SDK**: This indicates that a Software Development Kit (SDK) must be used on the client side to facilitate the interaction with the MFA feature.\n\n2. **Subscription to Dedicated Wallet Pro**: This feature is unlocked only when you subscribe to the Dedicated Wallet Pro plan, implying that it's a premium feature and requires a specific level of service with Magic Labs.\n\n3. **Enabling through Multi-factor Auth Dashboard page**: The feature needs to be activated through a specific dashboard page dedicated to configuring multi-factor authentication settings. \n\nTogether, these pre-requisites ensure the user is equipped with the necessary technical tools, service level agreement, and configuration settings to implement MFA successfully.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/features/mfa#chunk-5", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nYou can allow users to add MFA via one of several SDK method options\n\n\u2022 magicClient.user.showSettings() - this will bring up the entire settings modal, and one of those settings options will allow users to enable or disable MFA.\n\n\u2022 magicClient.user.enableMFA() - this will deeplink the user to the start of the enable MFA flow. The counter part to this is magicClient.user.disableMFA()\n\nmagicClient.user.showSettings()\n\nmagicClient.user.enableMFA()\n\nmagicClient.user.disableMFA()\n\nCalling the SDK method magic.user.getInfo() will return whether the user has MFA enabled or not. This can be used to progressively introduce MFA to users via a banner reminding them to enable it or similar.\n\nmagic.user.getInfo()\n\nmagic.user.getInfo()", "explanation": "The section titled '#Add MFA to your app' from the documentation at Magic Labs is about integrating Multi-Factor Authentication (MFA) into your application using various Software Development Kit (SDK) methods. Its main purpose is to provide a step-by-step guide on how developers can offer MFA functionality to enhance security for their application's users.\n\nHere's a breakdown of the details provided in the documentation:\n\n1. **magicClient.user.showSettings()**: This method displays a settings modal that includes an option for users to enable or disable MFA. It is a broad approach that allows users to manage multiple settings in a single interface.\n\n2. **magicClient.user.enableMFA()**: This method directly leads the user to the MFA enabling process. It is a more focused approach for users specifically looking to activate MFA. \n\n3. **magicClient.user.disableMFA()**: This is the counterpart of the enable method and is used to deactivate the MFA feature if the user chooses to do so.\n\n4. **magic.user.getInfo()**: This method fetches information to determine if a user has activated MFA. This can be leveraged to encourage users to enable MFA by displaying reminders or prompts within the application.\n\nOverall, these methods provide a straightforward way to integrate MFA into applications, enhancing security by requiring a second form of verification from users.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/features/mfa#chunk-6", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nTo disable MFA, remove any settings implementation for the Magic SDK or Login Form. Existing users with MFA enabled will still be able to use their second factor to login.", "explanation": "The '#Disabling MFA' section of the Magic Labs documentation provides guidance on how to deactivate Multi-Factor Authentication (MFA) within your application using the Magic SDK or Login Form. The main purpose of this section is to explain the process for removing MFA settings from your application. However, it also notes that even after the settings are removed, existing users who have previously enabled MFA will still be able to utilize their second authentication factor when logging in.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/features/mfa#chunk-7", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n#\n\nWhen registering for MFA, end users are given one-time use recovery codes. If an end-user loses access to their MFA, they can use their one-time recovery code to self-service recover their account.\n\nUsing the recovery code will authenticate the user and deactivate MFA in the process for the given device. The user will be given a new recovery code after they complete MFA enrollment.", "explanation": "The documentation section titled \"#End-user account recovery - #MFA recovery codes\" explains the process and purpose of recovery codes in Multi-Factor Authentication (MFA) for end users. When users set up MFA, they receive one-time use recovery codes. These codes are critical for situations where users lose access to their MFA method (e.g., losing their phone). By using a recovery code, users can independently regain access to their accounts. The process of using a recovery code involves authenticating the user and deactivating the existing MFA on the device. After successfully recovering their account, users are given a new recovery code when they reenroll in MFA, ensuring they have a backup method for future account access issues. The main purpose of these recovery codes is to provide a safety net, enhancing security while maintaining user accessibility even if the primary MFA method becomes unavailable.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/features/mfa#chunk-8", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nIf a user loses their recovery code, you can reset their MFA via the Users section in the Magic dashboard. Simply search for the user, and use the action menu on the right side to disable MFA. You will be asked to confirm the user again before MFA will be disabled.", "explanation": "The '#Admin reset' section in the documentation explains how administrators can assist users who have lost their multi-factor authentication (MFA) recovery codes. The main purpose of this section is to guide admins on resetting a user's MFA settings using the Magic dashboard. Admins can locate the user in the Users section, and via the action menu, they can disable MFA for that user. The system requires a confirmation step before the MFA is actually disabled to ensure security and accuracy. This feature helps users regain access to their accounts when they cannot authenticate themselves through MFA.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/features/mfa#chunk-9", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 MFA Demo\n\nMFA Demo", "explanation": "The '#Resources' section in the documentation URL https://magic.link/docs/authentication/features/mfa likely provides supplementary materials or tools related to Multi-Factor Authentication (MFA). The main purpose of this section is to offer users a way to explore MFA functionality through a demo. By providing an MFA Demo, it aims to help users understand how MFA works within the Magic Labs authentication environment and see its implementation in action. This can aid developers in grasping the practical aspects of integrating MFA into their own applications.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/features/mfa#chunk-10", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nYou can allow your users to sign up & log in to your web app with their Twitch account.", "explanation": "The 'Twitch Social Login with Magic' documentation section explains how to integrate Twitch as a social login option for your web application using Magic's services. The main purpose is to enable users to effortlessly sign up and log into the web app using their existing Twitch accounts, thereby providing a seamless and quick authentication experience.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/login/social-logins/social-providers/twitch#chunk-1", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n#\n\nMagic SDK offers two OAuth extensions: v1 and v2. For web applications, it is recommended to use v2, while v1 should be used for mobile applications.\n\nv1\n\nv2\n\n\u2022 You will need a Twitch account\n\n\u2022 You will need to have the Magic SDK installed into your web app\n\n\u2022 You will need to have the Magic SDK - OAuth Extension installed into your web app\n\nTwitch\n\nMagic SDK installed\n\nMagic SDK - OAuth Extension", "explanation": "The \"#Usage - #Prerequisites\" section of the Magic Labs documentation for Twitch social login is outlining the necessary requirements to implement Twitch as a social login option using the Magic SDK. It specifies the need for having a Twitch account, the Magic SDK installed, and specifically mentions having the Magic SDK - OAuth Extension installed in a web application. The section highlights that v2 of the OAuth extension is recommended for web applications, whereas v1 should be used for mobile applications. The primary purpose is to ensure that developers have all necessary components and accounts set up before integrating Twitch social login functionality into their application using the Magic SDK.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/login/social-logins/social-providers/twitch#chunk-2", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nAfter installing the OAuth extension, you can now enable Twitch Login for your Magic app:\n\n\u2022 Go to your Magic Dashboard\n\n\u2022 Select the Magic app for which you\u2019d like to enable Twitch Login, or create a new app\n\n\u2022 Navigate to Social Login from the sidebar\n\n\u2022 Click the toggle for Twitch\n\n\u2022 Copy the Redirect URI field from your Magic Dashboard\n\n\u2022 Follow Twitch's registration instructions to register your app\n\n\u2022 Paste Redirect URI into the OAuth Redirect URLs\n\n\u2022 After creation of your Twitch app, click Manage\n\n\u2022 In the manage application section, click New Secret\n\n\u2022 Obtain the Client ID and Client Secret\n\n\u2022 Return to your Magic Dashboard and input the Client ID and Client Secret for your Twitch OAuth app\n\n\u2022 In Magic Dashboard, click \u201cSave\u201d\n\n\u2022 Click \"Test Connection\" to give your new Twitch OAuth flow a try!\n\nMagic Dashboard\n\nregistration instructions\n\nregister your app", "explanation": "The section titled \"#Twitch Setup (v1 extension)\" from the Magic Labs documentation is a guide for integrating Twitch as a social login option in a Magic-powered application. The main purpose of this section is to provide a step-by-step process for app developers on how to configure and enable Twitch Login using OAuth 2.0 in their applications through the Magic Dashboard. It outlines the steps needed to set up the Twitch OAuth extension, obtain the necessary credentials (Client ID and Client Secret), and configure them within the Magic Dashboard to enable users to authenticate using their Twitch accounts. The guide ends with testing the new Twitch login setup to ensure it functions correctly.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/login/social-logins/social-providers/twitch#chunk-3", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 Follow above steps, but disregard Magic's Redirect URI in step 5\n\n\u2022 In step 7, paste the Redirect URI you are passing in as the redirectURI argument to the loginWithRedirect method\n\nCopy\n\n01\n\nawait\n\nmagic\n\n.\n\noauth2\n\n.\n\nloginWithRedirect\n\n(\n\n{\n\n01\n\nawait\n\nmagic\n\n.\n\noauth2\n\n.\n\nloginWithRedirect\n\n(\n\n{\n\n02\n\nprovider\n\n:\n\n'twitch'\n\n,\n\n02\n\nprovider\n\n:\n\n'twitch'\n\n,\n\n03\n\nredirectURI\n\n:\n\n'https://your-app.com/your/oauth/callback'\n\n,\n\n// <== whitelist this with Twitch\n\n03\n\nredirectURI\n\n:\n\n'https://your-app.com/your/oauth/callback'\n\n,\n\n// <== whitelist this with Twitch\n\n04\n\n}\n\n)\n\n;\n\n04\n\n}\n\n)\n\n;", "explanation": "The \"#Twitch Setup (v2 extension)\" section in the Magic Labs documentation is about configuring the Twitch authentication process using Magic's OAuth login system for your application. The main purpose of this setup is to guide developers on integrating Twitch as a social login provider, allowing users to log in to their application using their Twitch credentials.\n\nKey Points:\n1. Disregard the Redirect URI provided by Magic in step 5 of the general setup and instead use a custom Redirect URI.\n2. In step 7 of the setup process, the custom Redirect URI you use should be the same one passed as the `redirectURI` argument in the `loginWithRedirect` method.\n3. The code snippet provided shows the implementation of the `loginWithRedirect` method, where `'twitch'` is specified as the provider, and a custom redirect URI (`https://your-app.com/your/oauth/callback`) is defined, which must be whitelisted with Twitch to ensure the redirection process functions correctly during authentication.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/login/social-logins/social-providers/twitch#chunk-4", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 Twitch Social Login Demo\n\nTwitch Social Login Demo", "explanation": "The '#Resources' section in the documentation at the provided URL primarily serves to offer users a demonstration of how to implement and utilize Twitch as a social login option. By accessing the \"Twitch Social Login Demo,\" users can gain a practical understanding of how to integrate Twitch authentication into their applications using Magic Labs' tools. This resource is intended to help developers see a working example, which can aid in replicating a similar setup in their projects for convenient and efficient user login via Twitch.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/login/social-logins/social-providers/twitch#chunk-5", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nMobile Access Allow listing manages the apps that are allowed to access Magic. Adding your App ID (Bundle Identifier from iOS or Application ID from Android) to the mobile app allow list will stop all the traffic from unknown mobile sources.", "explanation": "The 'Mobile Access Allow Listing' section in Magic Labs documentation explains a security feature that controls which mobile apps are permitted to access Magic's services. By adding your app's ID\u2014specifically, the Bundle Identifier for iOS apps or the Application ID for Android apps\u2014to the allow list, you can prevent any traffic or access attempts from unauthorized or unknown mobile sources. This ensures that only approved mobile applications can interact with Magic's systems, enhancing the security of your application's integration with Magic services.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/security/allowlists/mobile-access-allow-listing#chunk-1", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nEnsure your mobile SDK has been updated to the desired version to enable this feature.\n\n\u2022 iOS: since 3.2.0\n\n\u2022 Android: since 2.2.0\n\n\u2022 Flutter: since 1.1.0\n\n\u2022 Unity: since 0.2.0\n\n\u2022 React Native Bare / Expo: since 13.0.0", "explanation": "The '#Prerequisites' section from the Magic Labs documentation outlines the specific SDK versions required to implement the mobile access allow-listing feature for different platforms. It provides details about the minimum version needed for each supported platform\u2014iOS, Android, Flutter, Unity, and React Native Bare/Expo. The main purpose of this section is to ensure that developers update their SDKs to these versions or higher to utilize the allow-listing functionality, which enhances the security of mobile applications by controlling access based on a predefined list of allowed devices or users.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/security/allowlists/mobile-access-allow-listing#chunk-2", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nIn your Dashboard, turn on the Allow List toggle, enter the App ID you want to allow, then click Add. This App ID will come from your mobile app settings and must follow the naming rules set by Apple and Android:\n\n\u2022 It must have at least two segments (one or more dots)\n\n\u2022 All characters must be alphanumeric [a-zA-Z0-9] or an - or _\n\n-\n\n_\n\nAfter you add the App ID, traffic from unauthorized sources is blocked. Users from unauthorized apps will see the message below when they try to log in. If this happens unexpectedly, add the App ID in the message to unblock these users.\n\n#\n\nThe App ID is represented by the bundle identifier on iOS and the applicationId on Android. See below for help finding each of these.\n\n#\n\nAppl uses bundle identifiers (bundle IDs) to uniquely identifiy an application in Apple's ecosystem. These IDs are usually written in reverse DNS notation, e.g. link.magic.ios.\n\nlink.magic.ios\n\nYour iOS bundle Identifier can be found in Target -> Signing & Capabilities -> Bundle Identifier", "explanation": "The given documentation section explains how to configure Magic Labs' embedded wallet service to selectively allow or block access to a mobile application using an application's unique identifier, known as an App ID. This process involves utilizing the dashboard to activate the \"Allow List\" feature, entering the desired App ID to permit it, and confirming the addition of the App ID.\n\nThe main purpose of this feature is to enhance security by ensuring that only authorized applications can interact with the Magic Labs service. By specifying which App IDs are allowed, any unauthorized access attempts from apps not on the list are blocked, and users attempting to log in from these unauthorized apps are notified.\n\nThe details about App IDs differ slightly between iOS and Android:\n\n- **For iOS:** The App ID is represented as the bundle identifier, which is a unique string that identifies your app within Apple's ecosystem. This identifier can be found within the Xcode development environment under \"Target -> Signing & Capabilities -> Bundle Identifier.\"\n\n- **For Android:** The equivalent is known as the applicationId.\n\nThese identifiers must adhere to certain rules, such as having at least two segments separated by dots and only including alphanumeric characters, dashes, or underscores.\n\nOverall, this section of the documentation provides necessary steps for developers to implement mobile access allow-listing, thereby improving app and data security.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/security/allowlists/mobile-access-allow-listing#chunk-3", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nYour Android App ID is defined by the applicationId property in your module's build.gradle file, as shown here:\n\napplicationId\n\nbuild.gradle\n\nCopy\n\n01\n\nandroid\u00a0{\n\n01\n\nandroid {\n\n02\n\ndefaultConfig\u00a0{\n\n02\n\ndefaultConfig {\n\n03\n\napplicationId\u00a0=\u00a0\"link.magic.android\"\n\n03\n\napplicationId = \"link.magic.android\"\n\n04\n\nminSdk\u00a0=\u00a024\n\n04\n\nminSdk = 24\n\n05\n\ntargetSdk\u00a0=\u00a031\n\n05\n\ntargetSdk = 31\n\n06\n\nversionCode\u00a0=\u00a01\n\n06\n\nversionCode = 1\n\n07\n\nversionName\u00a0=\u00a0\"1.0\"\n\n07\n\nversionName = \"1.0\"\n\n08\n\n}\n\n08\n\n}\n\n09\n\n...\n\n09\n\n...\n\n10\n\n}\n\n10\n\n}\n\nFor more detail about Application ID in Android, please refer to the Official documentation.\n\nOfficial documentation.", "explanation": "The #Android section from the Magic Labs documentation provides guidance on how to specify your Android App ID within your application's build configuration file, specifically the build.gradle file. It demonstrates how the App ID is set using the `applicationId` property inside the `defaultConfig` block of the `android` closure. The example sets `applicationId` to \"link.magic.android\" and outlines additional configuration parameters like `minSdk`, `targetSdk`, `versionCode`, and `versionName`.\n\nThe main purpose of this section is to inform developers about the correct setup for their Android App ID, which is crucial for building and identifying the app. It ensures that the application is properly configured to interact with Magic Labs services, likely for security and access control purposes. The documentation also includes a reference to the official Android documentation for more detailed information on Android Application IDs.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/security/allowlists/mobile-access-allow-listing#chunk-4", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nStability's blockchain is a tokenless, open-source, decentralized, public, and highly scalable platform. It eliminates transaction fees by using API keys instead of tokens. The open-source nature of Stability allows for transparency and security audits. Decentralization is achieved through a trusted network consensus, ensuring no single entity controls the network. Its public accessibility invites widespread participation, and it supports up to 10,000 transactions per second, addressing scalability challenges.\n\nFor more details, you can visit the Stability Protocol documentation.\n\nStability Protocol documentation\n\nAs Stability is EVM compatible, you can follow the Ethereum documentation to send your first transaction and utilize all other wallet features.\n\nEthereum", "explanation": "The section titled 'Stability - Stability - #Overview' in the documentation describes the Stability blockchain. The main purpose of this section is to introduce Stability as a highly scalable and decentralized platform that is both open-source and tokenless. The key features highlighted include:\n\n1. **Tokenless System**: Instead of using tokens, Stability operates using API keys, which eliminates transaction fees.\n\n2. **Open-source Nature**: This ensures transparency and allows for security audits, enhancing trust in the platform.\n\n3. **Decentralization**: The platform uses a trusted network consensus to maintain decentralization, meaning it's not controlled by any single entity.\n\n4. **Public Accessibility**: Stability is publicly accessible, encouraging broad participation in its network.\n\n5. **Scalability**: With the capability to support up to 10,000 transactions per second, Stability addresses common scalability issues faced by other blockchains.\n\n6. **EVM Compatibility**: Stability is compatible with the Ethereum Virtual Machine (EVM), enabling users to utilize existing Ethereum documentation to perform transactions and use wallet features.\n\nOverall, this section aims to convey the technical advantages and operational benefits of the Stability blockchain to potential users and developers.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/evm/stability#chunk-1", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nEnsure you have installed the Magic SDK and have access to your API key, follow the quickstart to get started. You can use Magic's network aliases to connect to either testnet or mainnet on Base.\n\nquickstart\n\nCopy\n\n01\n\n// Setting network to point to Stability testnet\n\n01\n\n// Setting network to point to Stability testnet\n\n02\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'MAGIC_API_KEY'\n\n,\n\n{\n\n02\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'MAGIC_API_KEY'\n\n,\n\n{\n\n03\n\nnetwork\n\n:\n\n{\n\n03\n\nnetwork\n\n:\n\n{\n\n04\n\nrpcUrl\n\n:\n\n'https://free.testnet.stabilityprotocol.com/zgt/<STABILITY_API_KEY>'\n\n,\n\n04\n\nrpcUrl\n\n:\n\n'https://free.testnet.stabilityprotocol.com/zgt/<STABILITY_API_KEY>'\n\n,\n\n05\n\nchainId\n\n:\n\n20180427\n\n,\n\n05\n\nchainId\n\n:\n\n20180427\n\n,\n\n06\n\n}\n\n06\n\n}\n\n07\n\n)\n\n;\n\n07\n\n)\n\n;", "explanation": "The '#Configure Stability' section from the Magic Labs documentation provides instructions on how to set up the network configuration for using Magic's SDK with the Stability testnet. The main purpose of this section is to guide developers in establishing a connection to the Stability protocol's testnet, ensuring that their applications can interact with the blockchain environment during development and testing.\n\nKey points from this section include:\n\n1. **Prerequisites**: Ensure that the Magic SDK is installed and you have your Magic API key accessible.\n\n2. **Network Configuration**: Use the provided code snippet to configure the Magic SDK to connect to Stability testnet. This is achieved by setting the `rpcUrl` to the Stability protocol's testnet endpoint and using `chainId` 20180427, which uniquely identifies the Stability testnet.\n\n3. **Integration Context**: This configuration enables developers to test their applications in a simulated environment before deploying to a production environment, reducing issues and ensuring stability.\n\nThis setup is crucial for developers who want to integrate with Stability's blockchain network using the Magic SDK, as it guides them through the necessary steps to start interacting with the testnet efficiently.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/evm/stability#chunk-2", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nIn order to perform transactions on Stability, developers need to sign up for an API key using Stability's Account Portal. For a quickstart tutorial on Stability, view their tutorial on their documentation at https://docs.stble.io/developers/getting_started.\n\nStability's Account Portal\n\nhttps://docs.stble.io/developers/getting_started\n\nThe testnet public RPC will allow a few transactions to go through, but most clients will need an API key. The mainnet public RPC will not allow any transactions to go through unless an API key is concatenated to it.", "explanation": "The \"#Transactions\" section of the documentation provides guidance for developers on how to perform transactions on the Stability blockchain. It highlights that developers must create an account on Stability's Account Portal to obtain an API key, which is essential for conducting transactions on the blockchain. The section also differentiates between the testnet and mainnet environments: while the testnet public RPC permits limited transactions without an API key, using the mainnet requires developers to attach their API key to any transaction requests. The documentation links are provided for further information and a tutorial on getting started with Stability. The main purpose of this section is to ensure developers understand the necessity of obtaining and using an API key for transactions, particularly on the mainnet.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/evm/stability#chunk-3", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 All Auth, User and Wallet module methods for Dedicated Wallets\n\n\u2022 All EVM Provider functionality to respond to supported RPC methods\n\nAuth\n\nUser\n\nWallet\n\nDedicated Wallets\n\nRPC methods\n\nNeed a feature or see a problem? File an issue on our github repo.\n\ngithub repo", "explanation": "The '#Compatibility' section from the documentation outlines the compatibility features of Magic Labs' embedded wallet technology concerning EVM (Ethereum Virtual Machine) based blockchains. It highlights the following key aspects:\n\n1. **Auth, User, and Wallet Modules:** It confirms that all functionalities within the authentication, user management, and wallet modules are supported for Dedicated Wallets. This suggests that these modules are fully operational and can perform their intended tasks on dedicated EVM wallets.\n\n2. **EVM Provider Functionality:** The section assures that the EVM provider is equipped to handle supported RPC (Remote Procedure Call) methods. This means that the wallet can interact with Ethereum-based blockchains by making these RPC calls, which are essential for executing various blockchain-related tasks like querying balances or sending transactions.\n\n3. **Issue Reporting:** There's an invitation to users to contribute by reporting any needed features or problems through their GitHub repository. This indicates that the documentation is not only a source of information but also a channel for community engagement and continuous improvement.\n\nOverall, this section serves to inform users about the compatibility and capabilities of the Magic Labs wallet with EVM-based chains and encourages collaboration through feedback.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/evm/stability#chunk-4", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 Documentation: https://docs.stabilityprotocol.com/\n\n\u2022 Block Explorer: https://stability.blockscout.com/ (Mainnet)https://stability-testnet.blockscout.com/ (Testnet)\n\nhttps://docs.stabilityprotocol.com/\n\n\u2022 https://stability.blockscout.com/ (Mainnet)\n\n\u2022 https://stability-testnet.blockscout.com/ (Testnet)\n\nhttps://stability.blockscout.com/\n\nhttps://stability-testnet.blockscout.com/", "explanation": "The '#Resources & Tools' section from the documentation provides links to important resources related to the Stability Protocol, which operates on EVM-compatible blockchains. The main purpose of this section is to offer users quick access to essential tools for interacting with and understanding the Stability Protocol network.\n\n1. **Documentation**: Links to the official Stability Protocol documentation page, where users can find detailed information and guidance on using the protocol.\n\n2. **Block Explorer**: Offers links to the block explorer for both the Mainnet and Testnet versions of the Stability Protocol. Block explorers allow users to view, search, and analyze blockchain data such as transactions, blocks, and addresses.\n\nBy providing these resources, the section facilitates efficient interaction with the Stability Protocol and aids in both development and operational tasks.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/evm/stability#chunk-5", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nYou can allow your users to sign up & log in to your web app with their Microsoft account.", "explanation": "The section titled 'Microsoft Social Login with Magic - Microsoft Social Login with Magic - #Overview' from the Magic Labs documentation explains how developers can enable users to sign up and log in to their web applications using their Microsoft accounts. The main purpose of this feature is to simplify the authentication process for users by allowing them to use their existing Microsoft credentials, thereby enhancing user convenience and potentially increasing user engagement for the web application.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/login/social-logins/social-providers/microsoft#chunk-1", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n#\n\nMagic SDK offers two OAuth extensions: v1 and v2. For web applications, it is recommended to use v2, while v1 should be used for mobile applications.\n\nv1\n\nv2\n\n\u2022 You will need a Microsoft Azure account\n\n\u2022 You will need to have the Magic SDK installed into your web app\n\n\u2022 You will need to have the Magic SDK - OAuth Extension installed into your web app\n\nMicrosoft Azure\n\nMagic SDK installed\n\nMagic SDK - OAuth Extension", "explanation": "The '#Usage - #Prerequisites' section of the Magic Labs documentation for integrating Microsoft as a social login provider outlines the necessary conditions and tools needed before implementing the authentication feature. The main purpose of this section is to prepare developers by listing the essential requirements:\n\n1. **Magic SDK Versions**: It distinguishes between versions v1 and v2 of the OAuth extensions, recommending v2 for web applications and v1 for mobile applications.\n\n2. **Azure Account**: A Microsoft Azure account is necessary to facilitate integration with Microsoft's authentication services.\n\n3. **Magic SDK Installation**: Developers must have the Magic SDK installed in their web applications to utilize Magic's authentication capabilities.\n\n4. **OAuth Extension**: Additionally, the Magic SDK - OAuth Extension needs to be integrated into the web app to handle the OAuth login process.\n\nThese prerequisites ensure developers have the foundational setup to successfully implement Microsoft social logins in their applications using Magic SDK.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/login/social-logins/social-providers/microsoft#chunk-2", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nAfter installing the OAuth extension, you can now enable Microsoft Login for your Magic app:\n\n\u2022 Go to your Magic Dashboard\n\n\u2022 Select the Magic app for which you\u2019d like to enable Microsoft Login, or create a new app\n\n\u2022 Navigate to Social Login from the sidebar\n\n\u2022 Click the toggle for Microsoft\n\n\u2022 Copy the Redirect URI field from your Magic Dashboard\n\n\u2022 Follow Microsoft's registration instructions to register your app\n\n\u2022 Search and navigate to App registrations section\n\n\u2022 Click New registration\n\n\u2022 Make sure to select personal Microsoft accounts to allow your users to access your oauth app. Paste redirect link from Magic Dashboard into the Redirect URI.\n\n\u2022 After register your app, select Certificates & secrets in the sidebar, click New client secret, and obtain the client secret Value\n\n\u2022 Navigate back to Overview in the sidebar, obtain the Client ID\n\n\u2022 Return to your Magic Dashboard and input the Client ID and Client Secret for your Microsoft OAuth app and click \u201cSave\u201d\n\n\u2022 Click \"Test Connection\" to give your new Microsoft OAuth flow a try!\n\nMagic Dashboard\n\nregistration instructions", "explanation": "The provided documentation section explains the setup process for enabling Microsoft Login for a Magic app using OAuth. Its main purpose is to guide users through configuring Microsoft as a social login provider for their applications, allowing users to log in using their Microsoft accounts. \n\nKey steps in the process include:\n\n1. Accessing the Magic Dashboard and selecting or creating a Magic app.\n2. Enabling Microsoft Login by toggling the option in the Social Login settings.\n3. Copying the Redirect URI provided in the Magic Dashboard.\n4. Registering your app on Microsoft's platform, specifying that it will support personal Microsoft accounts and pasting the Redirect URI during registration.\n5. Retrieving the client secret and client ID from Microsoft's app registration portal.\n6. Returning to the Magic Dashboard to input the obtained client ID and secret, and testing the Microsoft OAuth login flow.\n\nThis setup ensures seamless integration of Microsoft account authentication into the Magic-powered application.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/login/social-logins/social-providers/microsoft#chunk-3", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 Follow above steps, but disregard Magic's Redirect URI in step 5\n\n\u2022 In step 9, paste the Redirect URI you are passing in as the redirectURI argument to the loginWithRedirect method\n\nCopy\n\n01\n\nawait\n\nmagic\n\n.\n\noauth2\n\n.\n\nloginWithRedirect\n\n(\n\n{\n\n01\n\nawait\n\nmagic\n\n.\n\noauth2\n\n.\n\nloginWithRedirect\n\n(\n\n{\n\n02\n\nprovider\n\n:\n\n'microsoft'\n\n,\n\n02\n\nprovider\n\n:\n\n'microsoft'\n\n,\n\n03\n\nredirectURI\n\n:\n\n'https://your-app.com/your/oauth/callback'\n\n,\n\n// <== whitelist this with Microsoft\n\n03\n\nredirectURI\n\n:\n\n'https://your-app.com/your/oauth/callback'\n\n,\n\n// <== whitelist this with Microsoft\n\n04\n\n}\n\n)\n\n;\n\n04\n\n}\n\n)\n\n;", "explanation": "The '#Microsoft Setup (v2 extension)' section of the documentation provides instructions on configuring the Magic Labs authentication system to integrate Microsoft as a social login provider. Specifically, it outlines how to properly set up the redirect URI for successful authentication using the `loginWithRedirect` method.\n\nThe main purpose of this section is to guide users through the correct process of substituting Magic's default redirect URI with their own custom URI. This involves ensuring that the URI used in the code matches the one registered and whitelisted in Microsoft\u2019s application configuration. By following this setup, developers can enable users to log into their application using their Microsoft account credentials.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/login/social-logins/social-providers/microsoft#chunk-4", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 Microsoft Social Login Demo\n\nMicrosoft Social Login Demo", "explanation": "The section titled \"#Resources\" from the Magic Labs documentation primarily serves to provide users with a practical demonstration of the Microsoft Social Login feature. It is likely that this section includes a link or information about accessing a demo application where users can see how the Microsoft Social Login is implemented using Magic's authentication services. The main purpose is to give developers and users a hands-on experience or a working example of integrating Microsoft's social login capabilities into their own applications using Magic's infrastructure. This helps in understanding the setup and functionality of social login options provided by Magic.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/login/social-logins/social-providers/microsoft#chunk-5", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "Learn how to use email to create EVM wallets with Magic and Next.js.\n\nMagic simplifies the process of securely authenticating users on both web and mobile clients while providing tools that allow your server to tailor user management according to specific requirements.\n\nThis guide will walk through how to use Magic on both the frontend and backend using the Magic SDK and the Magic Admin SDK, respectively. The provided code snippets are based on a Next.js web app utilizing serverless functions. You can adapt the frontend examples to work with most JavaScript frontend frameworks like React. Likewise, you can modify the backend examples to work with most JavaScript server-side frameworks such as Express.", "explanation": "The section titled 'How to set up secure authentication with Magic on both your client and server' from the Magic Labs documentation is about implementing secure user authentication in web applications using the Magic SDK. It focuses on using email to create Ethereum Virtual Machine (EVM) wallets within a Next.js application, a popular React-based web development framework.\n\nThe main purpose of this guide is to demonstrate how Magic can be used to manage authentication both on the frontend and backend of your application. It covers the integration of Magic's client-side SDK for frontend authentication and the Magic Admin SDK for backend user management. The guide includes code examples with a Next.js app and offers flexibility by showing how these examples can be adapted for other JavaScript frontend and backend frameworks, such as React for the frontend and Express for the backend. This ensures secure and tailored user management systems that address the specific needs of your application.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/guides/secure-auth-on-client-and-server#chunk-1", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nTo follow along with this guide, you\u2019ll need three things:\n\n\u2022 A Magic Publishable API Key\n\n\u2022 A Magic Secret API key\n\n\u2022 A web client\n\n\u2022 A server (or a client with serverless functions)\n\nYou can get your Publishable and Secret API Key from your Magic Dashboard.\n\nMagic Dashboard\n\nIf you already have an existing web client and server you plan to add Magic to, feel free to skip ahead to the section titled Add Magic to your web client. Otherwise, you can use the make-scoped-magic-app CLI tool to bootstrap a Next.js app with Magic authentication already baked into the client.\n\nAdd Magic to your web client\n\nmake-scoped-magic-app\n\nThe make-scoped-magic-app CLI tool is an easy way to bootstrap new projects with Magic. To get started, simply run the command below in the shell of your choice. Be sure to replace <YOUR_PUBLISHABLE_API_KEY> with the Publishable API Key from your Magic Dashboard.\n\nmake-scoped-magic-app\n\n<YOUR_PUBLISHABLE_API_KEY>\n\nMagic Dashboard\n\nYou can also run the command without the flags to be guided interactively through the setup process. If you go through the guided prompts, note that this guide\u2019s code snippets assume that you\u2019ve chosen the \u201cQuickstart\u201d option when prompted. If you get stuck, take a look at our Quickstart guide!\n\nQuickstart guide\n\nCopy\n\n01\n\nnpx make-scoped-magic-app\n\n\\\n\n01\n\nnpx make-scoped-magic-app\n\n\\\n\n02\n\n--template nextjs-dedicated-wallet\n\n\\\n\n02\n\n--template nextjs-dedicated-wallet\n\n\\\n\n03\n\n--network polygon-mumbai\n\n\\\n\n03\n\n--network polygon-mumbai\n\n\\\n\n04\n\n--login-methods EmailOTP\n\n\\\n\n04\n\n--login-methods EmailOTP\n\n\\\n\n05\n\n--publishable-api-key\n\n<\n\nYOUR_PUBLISHABLE_API_KEY\n\n>\n\n05\n\n--publishable-api-key\n\n<\n\nYOUR_PUBLISHABLE_API_KEY\n\n>\n\nThe resulting project already contains all of the client-side code shown in the next section (Add Magic to your web client). Go through the next section to learn how the code is structured, but understand there\u2019s no need to write additional code until we get to the section title Add Magic to your server.\n\nAdd Magic to your web client\n\nAdd Magic to your server", "explanation": "The '#Project Setup' section of the Magic Labs documentation provides guidance for setting up a project with the Magic authentication platform. Its main purpose is to help users prepare the necessary tools and environment to integrate Magic into their web applications for secure authentication. \n\nKey elements required for setup include:\n\n1. **Magic Publishable API Key**: This is needed to identify your specific Magic configuration when integrating with your web client.\n\n2. **Magic Secret API Key**: This is used for server-side authentication and validation with Magic services.\n\n3. **Web client and server**: You need to have them ready, or use a client with serverless functions if needed.\n\nThe section also introduces the use of the `make-scoped-magic-app` CLI tool, which simplifies creating a new Next.js application pre-configured with Magic authentication. This tool can be run with specific flags to customize the setup, such as selecting the Next.js template, specifying the network (like Polygon Mumbai), and choosing login methods (e.g., EmailOTP). The guide mentions that after running the setup script, most of the client-side configuration is automated, so users wouldn't need to write any extra code until instructed to do so in the following sections, which cover adding Magic to the server. \n\nOverall, this section is essential to ensure all prerequisites are met before delving into more detailed implementation steps.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/guides/secure-auth-on-client-and-server#chunk-2", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n#\n\nTo get started adding Magic to your project, install the magic-sdk package with your preferred package manager. If you used the make-scoped-magic-app CLI to bootstrap your project, this has already been done for you.\n\nmagic-sdk\n\nmake-scoped-magic-app\n\nCopy\n\n01\n\nnpm\n\ninstall\n\nmagic-sdk\n\n01\n\nnpm\n\ninstall\n\nmagic-sdk", "explanation": "The section titled '#Add Magic to your web client - #Install Magic client-side SDK' from the Magic Labs documentation explains the initial step for integrating Magic into a web project. The main purpose of this section is to guide users on how to install the 'magic-sdk' package, which is essential for implementing Magic's authentication features on the client side of a web application. Users can install the package using a preferred package manager such as npm, and those who have used the 'make-scoped-magic-app' CLI to set up their project initially may find that this package has already been installed. The provided command, 'npm install magic-sdk', is a straightforward way to add the necessary SDK to the project, enabling secure authentication functionalities through Magic's platform.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/guides/secure-auth-on-client-and-server#chunk-3", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nWith the Magic SDK installed, you can initialize Magic with the Magic constructor. This requires your Publishable API Key (found in your Magic dashboard). We prefer to add this to our .env file rather than put it directly into our code.\n\nMagic\n\nMagic dashboard\n\n.env\n\nCopy\n\n01\n\nNEXT_PUBLIC_MAGIC_PUBLISHABLE_KEY=pk_live_1234567890\n\n01\n\nNEXT_PUBLIC_MAGIC_PUBLISHABLE_KEY=pk_live_1234567890\n\nWhere you initialize your Magic instance will depend on your chosen framework and architectural patterns. If you utilized the make-scoped-magic-app CLI to initialize your project, this setup code has already been completed and can be found in src/components/magic/MagicProvider.tsx, where Magic is initialized and surfaced to your app using the React Context API.\n\nmake-scoped-magic-app\n\nsrc/components/magic/MagicProvider.tsx\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n02\n\n02\n\n03\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\nprocess\n\n.\n\nenv\n\n.\n\nNEXT_PUBLIC_MAGIC_PUBLISHABLE_KEY\n\n,\n\n{\n\n03\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\nprocess\n\n.\n\nenv\n\n.\n\nNEXT_PUBLIC_MAGIC_PUBLISHABLE_KEY\n\n,\n\n{\n\n04\n\nnetwork\n\n:\n\n{\n\n04\n\nnetwork\n\n:\n\n{\n\n05\n\nrpcUrl\n\n:\n\n\"<https://rpc2.sepolia.org/>\"\n\n,\n\n05\n\nrpcUrl\n\n:\n\n\"<https://rpc2.sepolia.org/>\"\n\n,\n\n06\n\nchainId\n\n:\n\n11155111\n\n,\n\n06\n\nchainId\n\n:\n\n11155111\n\n,\n\n07\n\n}\n\n,\n\n07\n\n}\n\n,\n\n08\n\n}\n\n)\n\n08\n\n}\n\n)\n\nThis magic variable will be your client\u2019s access point for all things Magic. Take a look at the client-side API documentation for a list of modules and methods accessible through magic.\n\nmagic\n\nclient-side API documentation\n\nmagic", "explanation": "The section titled '#Initialize Magic' from the Magic Labs documentation provides guidance on setting up the Magic SDK to enable secure authentication within your application. The main purpose of this section is to instruct developers on how to initialize a Magic instance using the Magic constructor, which is essential for integrating Magic's authentication capabilities into their applications.\n\nKey points include:\n\n1. **Publishable API Key**: The setup requires a Publishable API Key, obtained from the Magic dashboard, to authenticate requests made by your application. It's recommended to store this key in an environment file (e.g., `.env`) for security reasons instead of hardcoding it into the source code.\n\n2. **Framework-Specific Initialization**: Where and how you initialize the Magic instance depends on the framework and architecture of your application. For example, if you start your project using the `make-scoped-magic-app` CLI, a default setup is already provided in `src/components/magic/MagicProvider.tsx`, leveraging the React Context API to provide Magic functionality throughout your app.\n\n3. **Magic SDK Import and Configuration**: The code snippet demonstrates importing the `Magic` module from the `magic-sdk` library, creating a new Magic instance using the stored Publishable API Key, and optionally configuring it with network parameters like `rpcUrl` and `chainId`.\n\n4. **Client-side Access**: Once initialized, the `magic` variable becomes the client\u2019s gateway to accessing Magic's authentication methods. Developers can refer to the client-side API documentation for further details on available modules and methods.\n\nOverall, this section helps developers set up and initialize Magic's embedded wallet functionality tailored to their application\u2019s specific environment and framework setup.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/guides/secure-auth-on-client-and-server#chunk-4", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nMagic provides a number of ways to authenticate users. For simplicity, we\u2019ll stick with one-time passcodes sent to the user\u2019s email. For this, you\u2019ll need to have a way for them to input their email address, after which you simply call loginWithEmailOTP from Magic\u2019s Auth module.\n\nloginWithEmailOTP\n\nIf the authentication is successful, the return value will be a token representing the user. You can then send this token to your server for identification purposes.\n\ntoken representing the user\n\nIf you've generated a Next.js project using the Magic CLI, you will already have a login function created named handleLogin in src/components/magic/auth/EmailOTP.tsx. This function already calls loginWithEmailOTP but does not send the token to the server. For the purposes of this guide, you\u2019ll have to add a POST request to /api/login similar to the code block below.\n\nhandleLogin\n\nsrc/components/magic/auth/EmailOTP.tsx\n\nloginWithEmailOTP\n\n/api/login\n\nThe /api/login endpoint doesn't exist yet. We'll create it in the next section. If you\u2019re using your own server, remember to replace the URL with the absolute URL to your server once you\u2019ve created the endpoint.\n\n/api/login\n\nCopy\n\n01\n\nconst\n\nhandleLogin\n\n=\n\nasync\n\n(\n\n)\n\n=>\n\n{\n\n01\n\nconst\n\nhandleLogin\n\n=\n\nasync\n\n(\n\n)\n\n=>\n\n{\n\n02\n\n// handle email format validation and other potential errors\n\n02\n\n// handle email format validation and other potential errors\n\n03\n\n03\n\n04\n\nconst\n\ndidToken\n\n=\n\nawait\n\nmagic\n\n?.\n\nauth\n\n.\n\nloginWithEmailOTP\n\n(\n\n{\n\nemail\n\n}\n\n)\n\n04\n\nconst\n\ndidToken\n\n=\n\nawait\n\nmagic\n\n?.\n\nauth\n\n.\n\nloginWithEmailOTP\n\n(\n\n{\n\nemail\n\n}\n\n)\n\n05\n\n05\n\n06\n\nif\n\n(\n\ndidToken\n\n)\n\n{\n\n06\n\nif\n\n(\n\ndidToken\n\n)\n\n{\n\n07\n\n// initialize auth flow\n\n07\n\n// initialize auth flow\n\n08\n\nconst\n\nres\n\n=\n\nawait\n\nfetch\n\n(\n\n`\n\n/api/login\n\n`\n\n,\n\n{\n\n08\n\nconst\n\nres\n\n=\n\nawait\n\nfetch\n\n(\n\n`\n\n/api/login\n\n`\n\n,\n\n{\n\n09\n\nmethod\n\n:\n\n\"POST\"\n\n,\n\n09\n\nmethod\n\n:\n\n\"POST\"\n\n,\n\n10\n\nheaders\n\n:\n\n{\n\n10\n\nheaders\n\n:\n\n{\n\n11\n\n\"Content-Type\"\n\n:\n\n\"application/json\"\n\n,\n\n11\n\n\"Content-Type\"\n\n:\n\n\"application/json\"\n\n,\n\n12\n\nAuthorization\n\n:\n\n\"Bearer \"\n\n+\n\ndidToken\n\n,\n\n12\n\nAuthorization\n\n:\n\n\"Bearer \"\n\n+\n\ndidToken\n\n,\n\n13\n\n}\n\n,\n\n13\n\n}\n\n,\n\n14\n\n}\n\n)\n\n14\n\n}\n\n)\n\n15\n\n}\n\n15\n\n}\n\n16\n\n}\n\n16\n\n}", "explanation": "The section titled '#Authenticate users with Email OTP' explains a method for user authentication using one-time passcodes (OTPs) sent to a user's email address. This method involves the use of Magic's authentication module, specifically the `loginWithEmailOTP` function. Here's a breakdown of the process and its primary purpose:\n\n1. **Purpose**: The main purpose is to authenticate users securely without requiring traditional passwords. Instead, it uses email OTP, enhancing security and user convenience.\n\n2. **Process**:\n   - **User Email Input**: The user provides their email address.\n   - **Function Call**: The `loginWithEmailOTP` function is called with the user's email. This function sends an OTP to the provided email.\n   - **Token Generation**: Upon successful authentication, a token (didToken) representing the user is generated.\n   - **Server Communication**: The generated token is sent from the front-end to the back-end server for identification purposes using a POST request.\n\n3. **Integration**: \n   - If you have generated a Next.js project using the Magic CLI, a login function (`handleLogin`) is pre-created in the `src/components/magic/auth/EmailOTP.tsx` file.\n   - The function `handleLogin` manages the login process, including obtaining the user token by calling `loginWithEmailOTP` but initially does not send the token to the server.\n   - To complete the authentication flow, you need to add a POST request to a specific endpoint (`/api/login`), which handles sending the token to the server for further processing.\n\n4. **Custom Server Consideration**: If you are using a custom server, the URL in the POST request should be updated to the server's absolute URL once the endpoint is established.\n\nOverall, this email OTP authentication method offers a seamless and secure user login experience by leveraging token-based identification and bypassing traditional password entry.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/guides/secure-auth-on-client-and-server#chunk-5", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nMagic provides the Magic Admin SDK so you can customize user management for your app. This portion of the guide will walk you through basic token validation so you can verify on your server that users are who they say they are.\n\nIf you bootstrapped your project with the Magic CLI, everything in the section will be new and you\u2019ll have to add it to the project yourself while going through each section.\n\n#\n\nTo install the Admin SDK, run the following installation command:\n\nCopy\n\n01\n\nnpm\n\ninstall\n\n@magic-sdk/admin\n\n01\n\nnpm\n\ninstall\n\n@magic-sdk/admin\n\nGo to the Magic dashboard and copy your Magic secret key. You\u2019ll need it to initialize Magic on your server. We like to add this to our .env:\n\nMagic dashboard\n\n.env\n\nCopy\n\n01\n\nMAGIC_SECRET_KEY=sk_live_1234567890\n\n01\n\nMAGIC_SECRET_KEY=sk_live_1234567890", "explanation": "The section titled '#Add Magic to your server - #Install Magic Admin SDK' from the Magic Labs documentation is focused on integrating the Magic Admin SDK into your server-side application. The main purpose of this section is to guide developers through the setup process of the Magic Admin SDK, which is essential for authenticating and managing users on the server. This includes validating tokens to verify user identities, ensuring that the users interacting with your application are legitimate and authorized.\n\nThe guide outlines two main steps:\n\n1. **Installation of the Admin SDK:** You will need to run the provided npm command to install the `@magic-sdk/admin` package, which is necessary for integrating the SDK into your project.\n\n2. **Configuration with a Secret Key:** The Magic Admin SDK requires a secret key to function, which you must obtain from the Magic dashboard. The documentation recommends storing this secret key in an environment variable (e.g., `.env` file) to secure your application and manage configurations effectively.\n\nOverall, this guide helps developers set up the foundational elements needed for secure user authentication and management on the server-side of their applications using the Magic authentication platform.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/guides/secure-auth-on-client-and-server#chunk-6", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nIn your server file, add your POST request for authentication. Since we\u2019re using Next.js, we\u2019ll do this by adding a serverless function file at pages/api/login.ts.\n\npages/api/login.ts\n\nThe complete flow, starting with the client, is:\n\n\u2022 User inputs their email\n\n\u2022 A one-time code is sent to the user\u2019s email\n\n\u2022 User inputs the one-time code to authenticate\n\n\u2022 Your client-side code will receive a DID token\n\n\u2022 Your client-side code will send a POST request to /api/login and provide the user\u2019s DID token in the authorization header as a bearer token\n\n\u2022 Your server-side code will use the Magic Admin SDK to validate the token and perform any custom backend logic\n\n/api/login\n\nWhere the Magic instance on the client was initialized with your Publishable API Key, the Magic instance on the server should be initialized with your Secret API key. The token validation can then be performed with magic.token.validate(didToken).\n\nmagic.token.validate(didToken)\n\nThis is what that looks like when it\u2019s all put together on the backend:\n\nCopy\n\n01\n\nimport\n\ntype\n\n{\n\nNextApiRequest\n\n,\n\nNextApiResponse\n\n}\n\nfrom\n\n\"next\"\n\n01\n\nimport\n\ntype\n\n{\n\nNextApiRequest\n\n,\n\nNextApiResponse\n\n}\n\nfrom\n\n\"next\"\n\n02\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n\"@magic-sdk/admin\"\n\n02\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n\"@magic-sdk/admin\"\n\n03\n\n03\n\n04\n\ntype\n\nResponseData\n\n=\n\n04\n\ntype\n\nResponseData\n\n=\n\n05\n\n|\n\n{\n\n05\n\n|\n\n{\n\n06\n\nauthenticated\n\n:\n\nboolean\n\n06\n\nauthenticated\n\n:\n\nboolean\n\n07\n\n}\n\n07\n\n}\n\n08\n\n|\n\n{\n\n08\n\n|\n\n{\n\n09\n\nerror\n\n:\n\nstring\n\n09\n\nerror\n\n:\n\nstring\n\n10\n\n}\n\n10\n\n}\n\n11\n\n11\n\n12\n\nexport\n\ndefault\n\nfunction\n\npost\n\n(\n\n12\n\nexport\n\ndefault\n\nfunction\n\npost\n\n(\n\n13\n\nreq\n\n:\n\nNextApiRequest\n\n,\n\n13\n\nreq\n\n:\n\nNextApiRequest\n\n,\n\n14\n\nres\n\n:\n\nNextApiResponse\n\n<\n\nResponseData\n\n>\n\n14\n\nres\n\n:\n\nNextApiResponse\n\n<\n\nResponseData\n\n>\n\n15\n\n)\n\n{\n\n15\n\n)\n\n{\n\n16\n\nconst\n\nauthHeader\n\n=\n\nreq\n\n.\n\nheaders\n\n.\n\nauthorization\n\n??\n\n\"\"\n\n16\n\nconst\n\nauthHeader\n\n=\n\nreq\n\n.\n\nheaders\n\n.\n\nauthorization\n\n??\n\n\"\"\n\n17\n\nif\n\n(\n\nauthHeader\n\n===\n\n\"\"\n\n)\n\n{\n\n17\n\nif\n\n(\n\nauthHeader\n\n===\n\n\"\"\n\n)\n\n{\n\n18\n\nres\n\n.\n\nstatus\n\n(\n\n401\n\n)\n\n.\n\njson\n\n(\n\n{\n\nerror\n\n:\n\n\"Missing authorization header\"\n\n}\n\n)\n\n18\n\nres\n\n.\n\nstatus\n\n(\n\n401\n\n)\n\n.\n\njson\n\n(\n\n{\n\nerror\n\n:\n\n\"Missing authorization header\"\n\n}\n\n)\n\n19\n\n}\n\n19\n\n}\n\n20\n\n20\n\n21\n\n// creates a new Magic Admin instance for auth\n\n21\n\n// creates a new Magic Admin instance for auth\n\n22\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\nprocess\n\n.\n\nenv\n\n.\n\nMAGIC_SECRET_KEY\n\nas\n\nstring\n\n)\n\n22\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\nprocess\n\n.\n\nenv\n\n.\n\nMAGIC_SECRET_KEY\n\nas\n\nstring\n\n)\n\n23\n\n23\n\n24\n\ntry\n\n{\n\n24\n\ntry\n\n{\n\n25\n\n// retrieves DID token from headers\n\n25\n\n// retrieves DID token from headers\n\n26\n\nconst\n\ndidToken\n\n=\n\nmagic\n\n.\n\nutils\n\n.\n\nparseAuthorizationHeader\n\n(\n\nauthHeader\n\n)\n\n26\n\nconst\n\ndidToken\n\n=\n\nmagic\n\n.\n\nutils\n\n.\n\nparseAuthorizationHeader\n\n(\n\nauthHeader\n\n)\n\n27\n\nif\n\n(\n\n!\n\ndidToken\n\n)\n\n{\n\n27\n\nif\n\n(\n\n!\n\ndidToken\n\n)\n\n{\n\n28\n\nthrow\n\nnew\n\nError\n\n(\n\n\"Authorization header is missing\"\n\n)\n\n28\n\nthrow\n\nnew\n\nError\n\n(\n\n\"Authorization header is missing\"\n\n)\n\n29\n\n}\n\n29\n\n}\n\n30\n\n30\n\n31\n\n// validates the Magic user's DID token\n\n31\n\n// validates the Magic user's DID token\n\n32\n\nmagic\n\n?.\n\ntoken\n\n.\n\nvalidate\n\n(\n\ndidToken\n\n)\n\n32\n\nmagic\n\n?.\n\ntoken\n\n.\n\nvalidate\n\n(\n\ndidToken\n\n)\n\n33\n\n// custom user logic - e.g. save user info, session data, etc.\n\n33\n\n// custom user logic - e.g. save user info, session data, etc.\n\n34\n\n34\n\n35\n\nres\n\n.\n\nstatus\n\n(\n\n200\n\n)\n\n.\n\njson\n\n(\n\n{\n\nauthenticated\n\n:\n\ntrue\n\n}\n\n)\n\n35\n\nres\n\n.\n\nstatus\n\n(\n\n200\n\n)\n\n.\n\njson\n\n(\n\n{\n\nauthenticated\n\n:\n\ntrue\n\n}\n\n)\n\n36\n\n}\n\ncatch\n\n(\n\nerror\n\n)\n\n{\n\n36\n\n}\n\ncatch\n\n(\n\nerror\n\n)\n\n{\n\n37\n\nconsole\n\n.\n\nlog\n\n(\n\n\"Server Error: \"\n\n,\n\nres\n\n.\n\nstatus\n\n(\n\n200\n\n)\n\n)\n\n37\n\nconsole\n\n.\n\nlog\n\n(\n\n\"Server Error: \"\n\n,\n\nres\n\n.\n\nstatus\n\n(\n\n200\n\n)\n\n)\n\n38\n\nres\n\n.\n\nstatus\n\n(\n\n500\n\n)\n\n.\n\njson\n\n(\n\n{\n\nerror\n\n:\n\n(\n\nerror\n\nas\n\nError\n\n)\n\n.\n\nmessage\n\n}\n\n)\n\n38\n\nres\n\n.\n\nstatus\n\n(\n\n500\n\n)\n\n.\n\njson\n\n(\n\n{\n\nerror\n\n:\n\n(\n\nerror\n\nas\n\nError\n\n)\n\n.\n\nmessage\n\n}\n\n)\n\n39\n\n}\n\n39\n\n}\n\n40\n\n}\n\n40\n\n}", "explanation": "The section titled \"#Validate user tokens\" in the Magic Labs documentation clarifies the process of authenticating users on a server using Magic's authentication system, specifically in a Next.js environment. The primary purpose is to ensure that the user's decentralized identifier (DID) token, received after client-side authentication, is valid before allowing the user to access secure resources or perform authenticated actions on the server.\n\nHere\u2019s a concise summary of the flow:\n\n1. **User Login Process**: The user enters their email address, receives a one-time code, and inputs it to authenticate. This successfully generates a DID token on the client-side.\n\n2. **Token Transmission**: The client sends this DID token to the server in a POST request to the `/api/login` endpoint, embedding it in the authorization header.\n\n3. **Server-side Validation**: \n   - The server-side code creates an instance of the Magic Admin SDK using a Secret API key.\n   - It extracts the DID token from the authorization header.\n   - The token is then validated with the Magic Admin SDK using `magic.token.validate(didToken)`.\n   \n4. **Custom Backend Logic**: Post-validation, additional backend tasks such as saving user information or session data can be performed.\n\n5. **Response Handling**:\n   - If the token is valid, the server responds with a status indicating successful authentication.\n   - If validation fails, an appropriate error message is returned. \n\nThis flow ensures secure user authentication by confirming that the tokens used to identify users are legitimately issued by Magic and have not been tampered with, maintaining the integrity of authentication activities on your server.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/guides/secure-auth-on-client-and-server#chunk-7", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nYou now know how to add simple Magic authentication to your web clients and validate user tokens from your server! Feel free to take a look at our final solution code or tinker with it directly in Codesandbox. These are only a few of Magic\u2019s features and methods. Take a look at Magic\u2019s API documentation for a detailed look at the SDK interface.\n\nfinal solution code\n\nCodesandbox\n\nMagic\u2019s API documentation", "explanation": "The '#Next Steps' section in the documentation you provided outlines what you should do after learning how to integrate Magic authentication into your web clients and validate user tokens on your server. The main purpose of this section is to guide users towards further exploration and understanding of Magic's capabilities. It suggests reviewing the final solution code or experimenting with the implementation in Codesandbox for hands-on experience. Moreover, it encourages users to explore Magic\u2019s API documentation to gain a comprehensive understanding of the available features and methods provided by Magic\u2019s SDK.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/guides/secure-auth-on-client-and-server#chunk-8", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 The full codebase can be found on GitHub\n\n\u2022 Work with the project directly in Codesandbox\n\n\u2022 Check out the API documentation\n\nGitHub\n\nCodesandbox\n\nAPI documentation", "explanation": "The #Resources section in the documentation titled \"Secure Authentication on Client and Server\" provides direct links to valuable resources that are intended to assist developers in implementing secure authentication using Magic's technologies. The main purpose of this section is to guide developers to essential tools and references that can help them understand, work with, and effectively utilize Magic's authentication solutions. \n\n- **GitHub**: This link directs developers to the full codebase on GitHub, allowing them to view, fork, and contribute to the project's source code. This is useful for those who want to examine the implementation details or customize the solution.\n\n- **Codesandbox**: This is an interactive platform where developers can work with the project directly in a live coding environment. It offers a hands-on experience without the need to set up a local development environment, facilitating quicker experimentation and prototyping.\n\n- **API documentation**: This link provides access to detailed API documentation, which is crucial for understanding the functions, methods, and endpoints available in Magic's authentication services. It helps developers integrate and use Magic's API effectively in their applications.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/guides/secure-auth-on-client-and-server#chunk-9", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nMagic interacts with the ICON blockchain via Magic's extension NPM package @magic-ext/icon. The ICON extension also lets you interact with the blockchain using methods from ICON's Javascript SDK.\n\nICON\n\n@magic-ext/icon\n\n@magic-ext/icon\n\nICON's Javascript SDK\n\nYou can skip straight to our kitchen sink example directly:\n\n\ud83d\udc49 ICON Example\n\nICON Example\n\nCopy\n\n01\n\nnpm\n\ninstall\n\n--save @magic-ext/icon\n\n01\n\nnpm\n\ninstall\n\n--save @magic-ext/icon", "explanation": "The documentation section titled 'ICON - ICON - #Installation' provides guidance on integrating Magic's interaction capabilities with the ICON blockchain using the NPM package `@magic-ext/icon`. This extension enables developers to interface with the ICON blockchain via methods provided by ICON's Javascript SDK. The primary purpose of this section is to instruct users on how to install the required package to facilitate these interactions. It suggests installing the Magic ICON extension package through npm with the command `npm install --save @magic-ext/icon`. Additionally, it offers a direct link to an example, referred to as the \"kitchen sink example,\" to help users easily understand and implement the interaction with the ICON blockchain.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/other/icon#chunk-1", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\nimport\n\n{\n\nIconExtension\n\n}\n\nfrom\n\n'@magic-ext/icon'\n\n;\n\n02\n\nimport\n\n{\n\nIconExtension\n\n}\n\nfrom\n\n'@magic-ext/icon'\n\n;\n\n03\n\n03\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_API_KEY'\n\n,\n\n{\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_API_KEY'\n\n,\n\n{\n\n05\n\nextensions\n\n:\n\n[\n\n05\n\nextensions\n\n:\n\n[\n\n06\n\nnew\n\nIconExtension\n\n(\n\n{\n\n06\n\nnew\n\nIconExtension\n\n(\n\n{\n\n07\n\nrpcUrl\n\n:\n\n'ICON_RPC_NODE_URL'\n\n,\n\n07\n\nrpcUrl\n\n:\n\n'ICON_RPC_NODE_URL'\n\n,\n\n08\n\n}\n\n)\n\n,\n\n08\n\n}\n\n)\n\n,\n\n09\n\n]\n\n,\n\n09\n\n]\n\n,\n\n10\n\n}\n\n)\n\n;\n\n10\n\n}\n\n)\n\n;", "explanation": "The '#Initialization' section of the Magic Labs embedded wallet documentation provides a code snippet demonstrating how to set up and initialize the Magic SDK for integration with ICON blockchain. The primary purpose of this section is to guide developers on how to create a `Magic` instance configured for using ICON blockchain extensions.\n\nKey Steps Explained:\n1. **Import Statements**: The `Magic` class is imported from the 'magic-sdk' library, and the `IconExtension` is imported from '@magic-ext/icon'.\n2. **API Key**: A new `Magic` instance is created using the provided `YOUR_API_KEY`, which developers are expected to replace with their actual API key from Magic.\n3. **Extension Configuration**: The `IconExtension` is instantiated with a designated 'ICON_RPC_NODE_URL'. This URL should be replaced with the appropriate RPC endpoint for connecting to the ICON network.\n4. **Integration**: The `IconExtension` is added to the Magic instance's list of extensions, enabling the interaction with the ICON blockchain through the initialized Magic SDK.\n\nOverall, this initialization setup is crucial for developers looking to incorporate Magic's features with ICON blockchain support in their applications.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/other/icon#chunk-2", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n#\n\nBefore you can send transaction on the ICON blockchain, you'll need to acquire some test ICON (ICON's native cryptocurrency for test network).\n\n\u2022 Go to our ICON Example application\n\n\u2022 Login with your email address\n\n\u2022 Copy your ICON public address\n\n\u2022 Go to the ICON Faucet\n\n\u2022 Paste your copied ICON public address in the text input\n\n\u2022 You can receive up to 100 test ICON per day\n\n\u2022 Now you can use your test ICON in our example app\n\nICON Example\n\nICON Faucet\n\nexample app", "explanation": "The \"#Common Methods - #Get Test ICON\" section of the documentation provides a step-by-step guide for acquiring test ICON, which is ICON's native cryptocurrency used on the test network. This process is essential for users who want to experiment with or test transactions on the ICON blockchain without using real cryptocurrency. \n\nThe main purpose of this section is to instruct users on how to obtain test ICON needed to conduct trial transactions. Users are guided to log into an ICON Example application, retrieve their ICON public address, and use it to request test ICON from an ICON Faucet. They can acquire up to 100 test ICON per day to use within the example application, allowing them to explore ICON blockchain functionalities in a risk-free environment.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/other/icon#chunk-3", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nUsing getAccount function to get ICON public address for current user.\n\ngetAccount\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\nimport\n\n{\n\nIconExtension\n\n}\n\nfrom\n\n'@magic-ext/icon'\n\n;\n\n02\n\nimport\n\n{\n\nIconExtension\n\n}\n\nfrom\n\n'@magic-ext/icon'\n\n;\n\n03\n\n03\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_API_KEY'\n\n,\n\n{\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_API_KEY'\n\n,\n\n{\n\n05\n\nextensions\n\n:\n\n[\n\n05\n\nextensions\n\n:\n\n[\n\n06\n\nnew\n\nIconExtension\n\n(\n\n{\n\n06\n\nnew\n\nIconExtension\n\n(\n\n{\n\n07\n\nrpcUrl\n\n:\n\n'ICON_RPC_NODE_URL'\n\n,\n\n07\n\nrpcUrl\n\n:\n\n'ICON_RPC_NODE_URL'\n\n,\n\n08\n\n}\n\n)\n\n,\n\n08\n\n}\n\n)\n\n,\n\n09\n\n]\n\n,\n\n09\n\n]\n\n,\n\n10\n\n}\n\n)\n\n;\n\n10\n\n}\n\n)\n\n;\n\n11\n\n11\n\n12\n\n// Get user's ICON public address\n\n12\n\n// Get user's ICON public address\n\n13\n\nconst\n\npublicAddress\n\n=\n\nawait\n\nmagic\n\n.\n\nicon\n\n.\n\ngetAccount\n\n(\n\n)\n\n;\n\n13\n\nconst\n\npublicAddress\n\n=\n\nawait\n\nmagic\n\n.\n\nicon\n\n.\n\ngetAccount\n\n(\n\n)\n\n;\n\n14\n\nconsole\n\n.\n\nlog\n\n(\n\n'ICON Public Address: '\n\n,\n\npublicAddress\n\n)\n\n;\n\n14\n\nconsole\n\n.\n\nlog\n\n(\n\n'ICON Public Address: '\n\n,\n\npublicAddress\n\n)\n\n;", "explanation": "The '#Get User Info' section of the documentation is a guide on how to use the `getAccount` function from the Magic SDK to retrieve the public address of an ICON blockchain user. The primary purpose of this section is to provide developers with the necessary steps to implement this feature in their applications. \n\nThe example code demonstrates how to:\n\n1. Import the `Magic` class from the `magic-sdk` and the `IconExtension` from `@magic-ext/icon`.\n2. Initialize the `Magic` instance with your API key and the ICON extension, specifying the `rpcUrl` for the ICON RPC node.\n3. Use the `getAccount` method from the `icon` extension to asynchronously obtain the user's public address on the ICON blockchain.\n4. Log the retrieved ICON public address to the console for verification or further use in the application.\n\nThis section is designed to help developers integrate ICON blockchain user information retrieval into their applications using Magic's tools.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/other/icon#chunk-4", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nNote that the Magic ICON extension follows the method names and conventions by ICON's Javascript SDK. To send a standard ICON blockchain transaction, you can call the magic.icon.sendTransaction method.\n\nICON's Javascript SDK\n\nmagic.icon.sendTransaction\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\nimport\n\n{\n\nIconExtension\n\n}\n\nfrom\n\n'@magic-ext/icon'\n\n;\n\n02\n\nimport\n\n{\n\nIconExtension\n\n}\n\nfrom\n\n'@magic-ext/icon'\n\n;\n\n03\n\n03\n\n04\n\nimport\n\nIconService\n\nfrom\n\n'icon-sdk-js'\n\n;\n\n04\n\nimport\n\nIconService\n\nfrom\n\n'icon-sdk-js'\n\n;\n\n05\n\n05\n\n06\n\nconst\n\n{\n\nIconBuilder\n\n,\n\nIconAmount\n\n,\n\nIconConverter\n\n}\n\n=\n\nIconService\n\n;\n\n06\n\nconst\n\n{\n\nIconBuilder\n\n,\n\nIconAmount\n\n,\n\nIconConverter\n\n}\n\n=\n\nIconService\n\n;\n\n07\n\n07\n\n08\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_API_KEY'\n\n,\n\n{\n\n08\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_API_KEY'\n\n,\n\n{\n\n09\n\nextensions\n\n:\n\n[\n\n09\n\nextensions\n\n:\n\n[\n\n10\n\nnew\n\nIconExtension\n\n(\n\n{\n\n10\n\nnew\n\nIconExtension\n\n(\n\n{\n\n11\n\nrpcUrl\n\n:\n\n'ICON_RPC_NODE_URL'\n\n,\n\n11\n\nrpcUrl\n\n:\n\n'ICON_RPC_NODE_URL'\n\n,\n\n12\n\n}\n\n)\n\n,\n\n12\n\n}\n\n)\n\n,\n\n13\n\n]\n\n,\n\n13\n\n]\n\n,\n\n14\n\n}\n\n)\n\n;\n\n14\n\n}\n\n)\n\n;\n\n15\n\n15\n\n16\n\nconst\n\nmetadata\n\n=\n\nawait\n\nmagic\n\n.\n\nuser\n\n.\n\ngetMetadata\n\n(\n\n)\n\n;\n\n16\n\nconst\n\nmetadata\n\n=\n\nawait\n\nmagic\n\n.\n\nuser\n\n.\n\ngetMetadata\n\n(\n\n)\n\n;\n\n17\n\nconst\n\ndestinationAddress\n\n=\n\n'hx19f4fc31c6e51d5facccb52e3ccbe6b7d61f409e'\n\n;\n\n17\n\nconst\n\ndestinationAddress\n\n=\n\n'hx19f4fc31c6e51d5facccb52e3ccbe6b7d61f409e'\n\n;\n\n18\n\nconst\n\nsendICXAmount\n\n=\n\n'10'\n\n;\n\n18\n\nconst\n\nsendICXAmount\n\n=\n\n'10'\n\n;\n\n19\n\n19\n\n20\n\n// Build a transaction\n\n20\n\n// Build a transaction\n\n21\n\nconst\n\ntxObj\n\n=\n\nnew\n\nIconBuilder\n\n.\n\nIcxTransactionBuilder\n\n(\n\n)\n\n21\n\nconst\n\ntxObj\n\n=\n\nnew\n\nIconBuilder\n\n.\n\nIcxTransactionBuilder\n\n(\n\n)\n\n22\n\n.\n\nfrom\n\n(\n\nmetadata\n\n.\n\npublicAddress\n\n)\n\n22\n\n.\n\nfrom\n\n(\n\nmetadata\n\n.\n\npublicAddress\n\n)\n\n23\n\n.\n\nto\n\n(\n\ndestinationAddress\n\n)\n\n23\n\n.\n\nto\n\n(\n\ndestinationAddress\n\n)\n\n24\n\n.\n\nvalue\n\n(\n\nIconAmount\n\n.\n\nof\n\n(\n\nsendICXAmount\n\n,\n\nIconAmount\n\n.\n\nUnit\n\n.\n\nICX\n\n)\n\n.\n\ntoLoop\n\n(\n\n)\n\n)\n\n24\n\n.\n\nvalue\n\n(\n\nIconAmount\n\n.\n\nof\n\n(\n\nsendICXAmount\n\n,\n\nIconAmount\n\n.\n\nUnit\n\n.\n\nICX\n\n)\n\n.\n\ntoLoop\n\n(\n\n)\n\n)\n\n25\n\n.\n\nstepLimit\n\n(\n\nIconConverter\n\n.\n\ntoBigNumber\n\n(\n\n100000\n\n)\n\n)\n\n25\n\n.\n\nstepLimit\n\n(\n\nIconConverter\n\n.\n\ntoBigNumber\n\n(\n\n100000\n\n)\n\n)\n\n26\n\n.\n\nnid\n\n(\n\nIconConverter\n\n.\n\ntoBigNumber\n\n(\n\n3\n\n)\n\n)\n\n26\n\n.\n\nnid\n\n(\n\nIconConverter\n\n.\n\ntoBigNumber\n\n(\n\n3\n\n)\n\n)\n\n27\n\n.\n\nnonce\n\n(\n\nIconConverter\n\n.\n\ntoBigNumber\n\n(\n\n1\n\n)\n\n)\n\n27\n\n.\n\nnonce\n\n(\n\nIconConverter\n\n.\n\ntoBigNumber\n\n(\n\n1\n\n)\n\n)\n\n28\n\n.\n\nversion\n\n(\n\nIconConverter\n\n.\n\ntoBigNumber\n\n(\n\n3\n\n)\n\n)\n\n28\n\n.\n\nversion\n\n(\n\nIconConverter\n\n.\n\ntoBigNumber\n\n(\n\n3\n\n)\n\n)\n\n29\n\n.\n\ntimestamp\n\n(\n\nnew\n\nDate\n\n(\n\n)\n\n.\n\ngetTime\n\n(\n\n)\n\n*\n\n1000\n\n)\n\n29\n\n.\n\ntimestamp\n\n(\n\nnew\n\nDate\n\n(\n\n)\n\n.\n\ngetTime\n\n(\n\n)\n\n*\n\n1000\n\n)\n\n30\n\n.\n\nbuild\n\n(\n\n)\n\n;\n\n30\n\n.\n\nbuild\n\n(\n\n)\n\n;\n\n31\n\n31\n\n32\n\n// Send a transaction\n\n32\n\n// Send a transaction\n\n33\n\nconst\n\ntxhash\n\n=\n\nawait\n\nmagic\n\n.\n\nicon\n\n.\n\nsendTransaction\n\n(\n\ntxObj\n\n)\n\n;\n\n33\n\nconst\n\ntxhash\n\n=\n\nawait\n\nmagic\n\n.\n\nicon\n\n.\n\nsendTransaction\n\n(\n\ntxObj\n\n)\n\n;\n\n34\n\n34\n\n35\n\nconsole\n\n.\n\nlog\n\n(\n\n`\n\nTransaction Hash:\n\n${\n\ntxhash\n\n}\n\n`\n\n)\n\n;\n\n35\n\nconsole\n\n.\n\nlog\n\n(\n\n`\n\nTransaction Hash:\n\n${\n\ntxhash\n\n}\n\n`\n\n)\n\n;", "explanation": "The `#Send Transaction` section of the documentation describes how to send a transaction on the ICON blockchain using the Magic SDK and ICON's JavaScript SDK. It provides a step-by-step guide to create and send a standard blockchain transaction.\n\n### Main Purpose:\n- **Integration with Magic SDK**: The guide demonstrates how to integrate Magic's SDK with ICON blockchain functionality by utilizing the `magic.icon.sendTransaction` method.\n- **Transaction Construction**: It illustrates how to build a transaction object using ICON's JavaScript SDK components (`IconBuilder`, `IconAmount`, `IconConverter`) with specified details like the source and destination addresses, amount to be sent, and transaction parameters such as `stepLimit`, `nid`, `nonce`, `version`, and `timestamp`.\n- **Sending a Transaction**: The documentation shows how to execute the transaction by sending the constructed transaction object through the Magic SDK, and provides code to output the resulting transaction hash, demonstrating successful transaction submission.\n\nThe guide essentially enables developers to use the Magic SDK to easily send transactions on the ICON blockchain with clear JavaScript code samples and implementation details.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/other/icon#chunk-5", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nTo send a standard ICON blockchain transaction, you can call the magic.icon.signTransaction method to get the signature and raw transaction then send to blockchain by yourself.\n\nmagic.icon.signTransaction\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\nimport\n\n{\n\nIconExtension\n\n}\n\nfrom\n\n'@magic-ext/icon'\n\n;\n\n02\n\nimport\n\n{\n\nIconExtension\n\n}\n\nfrom\n\n'@magic-ext/icon'\n\n;\n\n03\n\n03\n\n04\n\nimport\n\nIconService\n\nfrom\n\n'icon-sdk-js'\n\n;\n\n04\n\nimport\n\nIconService\n\nfrom\n\n'icon-sdk-js'\n\n;\n\n05\n\n05\n\n06\n\nconst\n\n{\n\nIconBuilder\n\n,\n\nIconAmount\n\n,\n\nIconConverter\n\n}\n\n=\n\nIconService\n\n;\n\n06\n\nconst\n\n{\n\nIconBuilder\n\n,\n\nIconAmount\n\n,\n\nIconConverter\n\n}\n\n=\n\nIconService\n\n;\n\n07\n\n07\n\n08\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_API_KEY'\n\n,\n\n{\n\n08\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_API_KEY'\n\n,\n\n{\n\n09\n\nextensions\n\n:\n\n[\n\n09\n\nextensions\n\n:\n\n[\n\n10\n\nnew\n\nIconExtension\n\n(\n\n{\n\n10\n\nnew\n\nIconExtension\n\n(\n\n{\n\n11\n\nrpcUrl\n\n:\n\n'ICON_RPC_NODE_URL'\n\n,\n\n11\n\nrpcUrl\n\n:\n\n'ICON_RPC_NODE_URL'\n\n,\n\n12\n\n}\n\n)\n\n,\n\n12\n\n}\n\n)\n\n,\n\n13\n\n]\n\n,\n\n13\n\n]\n\n,\n\n14\n\n}\n\n)\n\n;\n\n14\n\n}\n\n)\n\n;\n\n15\n\n15\n\n16\n\nconst\n\nmetadata\n\n=\n\nawait\n\nmagic\n\n.\n\nuser\n\n.\n\ngetMetadata\n\n(\n\n)\n\n;\n\n16\n\nconst\n\nmetadata\n\n=\n\nawait\n\nmagic\n\n.\n\nuser\n\n.\n\ngetMetadata\n\n(\n\n)\n\n;\n\n17\n\nconst\n\ndestinationAddress\n\n=\n\n'hx19f4fc31c6e51d5facccb52e3ccbe6b7d61f409e'\n\n;\n\n17\n\nconst\n\ndestinationAddress\n\n=\n\n'hx19f4fc31c6e51d5facccb52e3ccbe6b7d61f409e'\n\n;\n\n18\n\nconst\n\nsendICXAmount\n\n=\n\n'10'\n\n;\n\n18\n\nconst\n\nsendICXAmount\n\n=\n\n'10'\n\n;\n\n19\n\n19\n\n20\n\n// Build a transaction\n\n20\n\n// Build a transaction\n\n21\n\nconst\n\ntxObj\n\n=\n\nnew\n\nIconBuilder\n\n.\n\nIcxTransactionBuilder\n\n(\n\n)\n\n21\n\nconst\n\ntxObj\n\n=\n\nnew\n\nIconBuilder\n\n.\n\nIcxTransactionBuilder\n\n(\n\n)\n\n22\n\n.\n\nfrom\n\n(\n\nmetadata\n\n.\n\npublicAddress\n\n)\n\n22\n\n.\n\nfrom\n\n(\n\nmetadata\n\n.\n\npublicAddress\n\n)\n\n23\n\n.\n\nto\n\n(\n\ndestinationAddress\n\n)\n\n23\n\n.\n\nto\n\n(\n\ndestinationAddress\n\n)\n\n24\n\n.\n\nvalue\n\n(\n\nIconAmount\n\n.\n\nof\n\n(\n\nsendICXAmount\n\n,\n\nIconAmount\n\n.\n\nUnit\n\n.\n\nICX\n\n)\n\n.\n\ntoLoop\n\n(\n\n)\n\n)\n\n24\n\n.\n\nvalue\n\n(\n\nIconAmount\n\n.\n\nof\n\n(\n\nsendICXAmount\n\n,\n\nIconAmount\n\n.\n\nUnit\n\n.\n\nICX\n\n)\n\n.\n\ntoLoop\n\n(\n\n)\n\n)\n\n25\n\n.\n\nstepLimit\n\n(\n\nIconConverter\n\n.\n\ntoBigNumber\n\n(\n\n100000\n\n)\n\n)\n\n25\n\n.\n\nstepLimit\n\n(\n\nIconConverter\n\n.\n\ntoBigNumber\n\n(\n\n100000\n\n)\n\n)\n\n26\n\n.\n\nnid\n\n(\n\nIconConverter\n\n.\n\ntoBigNumber\n\n(\n\n3\n\n)\n\n)\n\n26\n\n.\n\nnid\n\n(\n\nIconConverter\n\n.\n\ntoBigNumber\n\n(\n\n3\n\n)\n\n)\n\n27\n\n.\n\nnonce\n\n(\n\nIconConverter\n\n.\n\ntoBigNumber\n\n(\n\n1\n\n)\n\n)\n\n27\n\n.\n\nnonce\n\n(\n\nIconConverter\n\n.\n\ntoBigNumber\n\n(\n\n1\n\n)\n\n)\n\n28\n\n.\n\nversion\n\n(\n\nIconConverter\n\n.\n\ntoBigNumber\n\n(\n\n3\n\n)\n\n)\n\n28\n\n.\n\nversion\n\n(\n\nIconConverter\n\n.\n\ntoBigNumber\n\n(\n\n3\n\n)\n\n)\n\n29\n\n.\n\ntimestamp\n\n(\n\nnew\n\nDate\n\n(\n\n)\n\n.\n\ngetTime\n\n(\n\n)\n\n*\n\n1000\n\n)\n\n29\n\n.\n\ntimestamp\n\n(\n\nnew\n\nDate\n\n(\n\n)\n\n.\n\ngetTime\n\n(\n\n)\n\n*\n\n1000\n\n)\n\n30\n\n.\n\nbuild\n\n(\n\n)\n\n;\n\n30\n\n.\n\nbuild\n\n(\n\n)\n\n;\n\n31\n\n31\n\n32\n\n// Send a transaction\n\n32\n\n// Send a transaction\n\n33\n\nconst\n\n{\n\nsignature\n\n,\n\nrawTransaction\n\n}\n\n=\n\nawait\n\nmagic\n\n.\n\nicon\n\n.\n\nsignTransaction\n\n(\n\ntxObj\n\n)\n\n;\n\n33\n\nconst\n\n{\n\nsignature\n\n,\n\nrawTransaction\n\n}\n\n=\n\nawait\n\nmagic\n\n.\n\nicon\n\n.\n\nsignTransaction\n\n(\n\ntxObj\n\n)\n\n;\n\n34\n\n34\n\n35\n\nconsole\n\n.\n\nlog\n\n(\n\n`\n\nresult:\n\n`\n\n,\n\nsignature\n\n,\n\nrawTransaction\n\n)\n\n;\n\n35\n\nconsole\n\n.\n\nlog\n\n(\n\n`\n\nresult:\n\n`\n\n,\n\nsignature\n\n,\n\nrawTransaction\n\n)\n\n;", "explanation": "The '#Sign Transaction' section in the Magic Labs documentation explains how to use the Magic SDK to sign and prepare a transaction on the ICON blockchain using JavaScript. Here's a breakdown of its main purpose and components:\n\n1. **Objective**: The primary goal of this section is to guide developers on how to sign transactions using the Magic SDK in conjunction with the ICON blockchain. The developer gets a signature and a raw transaction that can then be sent to the blockchain for processing.\n\n2. **Required Packages**: It begins by importing essential libraries such as `Magic` from `magic-sdk`, `IconExtension` from `@magic-ext/icon`, and `IconService` from `icon-sdk-js`.\n\n3. **Initialize Magic SDK**: The Magic SDK is initialized with an API key and configured with an `IconExtension`. This extension requires specifying an RPC URL for the ICON blockchain node.\n\n4. **Fetch User Metadata**: The user\u2019s metadata is retrieved, which includes their public blockchain address, necessary for the transaction.\n\n5. **Transaction Creation**: It outlines creating a transaction object (`txObj`) using the `IconBuilder.IcxTransactionBuilder`. It includes setting parameters such as the sender\u2019s address (from metadata), the receiver\u2019s address (`destinationAddress`), the amount to send (`sendICXAmount`), step limit, network ID, nonce, and version, which are all converted to ICON's native representation.\n\n6. **Sign Transaction**: Using the `magic.icon.signTransaction` method, the transaction object (`txObj`) is signed. The output is a `signature` and `rawTransaction`.\n\n7. **Output**: Finally, it logs the results, i.e., the signature and the raw transaction, which can be used to send the transaction to the ICON blockchain.\n\nThe documentation provides a step-by-step approach to facilitate developers in securely signing ICON blockchain transactions using Magic's authentication and blockchain capabilities.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/other/icon#chunk-6", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nNote that the Magic ICON extension follows the method names and conventions by ICON's Javascript SDK. Please follow ICON contract deploy documentation to create and compile the smart contract. To deploy an ICON smart contract, you can call the magic.icon.sendTransaction method to send deploy contract transaction.\n\nICON's Javascript SDK\n\nICON contract deploy documentation\n\nmagic.icon.sendTransaction\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\nimport\n\n{\n\nIconExtension\n\n}\n\nfrom\n\n'@magic-ext/icon'\n\n;\n\n02\n\nimport\n\n{\n\nIconExtension\n\n}\n\nfrom\n\n'@magic-ext/icon'\n\n;\n\n03\n\n03\n\n04\n\nimport\n\nIconService\n\nfrom\n\n'icon-sdk-js'\n\n;\n\n04\n\nimport\n\nIconService\n\nfrom\n\n'icon-sdk-js'\n\n;\n\n05\n\n05\n\n06\n\nconst\n\n{\n\nDeployTransactionBuilder\n\n,\n\nIconConverter\n\n}\n\n=\n\nIconService\n\n;\n\n06\n\nconst\n\n{\n\nDeployTransactionBuilder\n\n,\n\nIconConverter\n\n}\n\n=\n\nIconService\n\n;\n\n07\n\n07\n\n08\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_API_KEY'\n\n,\n\n{\n\n08\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_API_KEY'\n\n,\n\n{\n\n09\n\nextensions\n\n:\n\n[\n\n09\n\nextensions\n\n:\n\n[\n\n10\n\nnew\n\nIconExtension\n\n(\n\n{\n\n10\n\nnew\n\nIconExtension\n\n(\n\n{\n\n11\n\nrpcUrl\n\n:\n\n'ICON_RPC_NODE_URL'\n\n,\n\n11\n\nrpcUrl\n\n:\n\n'ICON_RPC_NODE_URL'\n\n,\n\n12\n\n}\n\n)\n\n,\n\n12\n\n}\n\n)\n\n,\n\n13\n\n]\n\n,\n\n13\n\n]\n\n,\n\n14\n\n}\n\n)\n\n;\n\n14\n\n}\n\n)\n\n;\n\n15\n\n15\n\n16\n\nconst\n\nmetadata\n\n=\n\nawait\n\nmagic\n\n.\n\nuser\n\n.\n\ngetMetadata\n\n(\n\n)\n\n;\n\n16\n\nconst\n\nmetadata\n\n=\n\nawait\n\nmagic\n\n.\n\nuser\n\n.\n\ngetMetadata\n\n(\n\n)\n\n;\n\n17\n\n17\n\n18\n\n// Build a transaction\n\n18\n\n// Build a transaction\n\n19\n\nconst\n\ntxObj\n\n=\n\nnew\n\nDeployTransactionBuilder\n\n(\n\n)\n\n19\n\nconst\n\ntxObj\n\n=\n\nnew\n\nDeployTransactionBuilder\n\n(\n\n)\n\n20\n\n.\n\nfrom\n\n(\n\nmetadata\n\n.\n\npublicAddress\n\n)\n\n20\n\n.\n\nfrom\n\n(\n\nmetadata\n\n.\n\npublicAddress\n\n)\n\n21\n\n.\n\nto\n\n(\n\n'cx0000000000000000000000000000000000000000'\n\n)\n\n21\n\n.\n\nto\n\n(\n\n'cx0000000000000000000000000000000000000000'\n\n)\n\n22\n\n.\n\nstepLimit\n\n(\n\nIconConverter\n\n.\n\ntoBigNumber\n\n(\n\n2100000000\n\n)\n\n.\n\ntoString\n\n(\n\n)\n\n)\n\n22\n\n.\n\nstepLimit\n\n(\n\nIconConverter\n\n.\n\ntoBigNumber\n\n(\n\n2100000000\n\n)\n\n.\n\ntoString\n\n(\n\n)\n\n)\n\n23\n\n.\n\nnid\n\n(\n\nIconConverter\n\n.\n\ntoBigNumber\n\n(\n\n3\n\n)\n\n.\n\ntoString\n\n(\n\n)\n\n)\n\n23\n\n.\n\nnid\n\n(\n\nIconConverter\n\n.\n\ntoBigNumber\n\n(\n\n3\n\n)\n\n.\n\ntoString\n\n(\n\n)\n\n)\n\n24\n\n.\n\nnonce\n\n(\n\nIconConverter\n\n.\n\ntoBigNumber\n\n(\n\n1\n\n)\n\n.\n\ntoString\n\n(\n\n)\n\n)\n\n24\n\n.\n\nnonce\n\n(\n\nIconConverter\n\n.\n\ntoBigNumber\n\n(\n\n1\n\n)\n\n.\n\ntoString\n\n(\n\n)\n\n)\n\n25\n\n.\n\nversion\n\n(\n\nIconConverter\n\n.\n\ntoBigNumber\n\n(\n\n3\n\n)\n\n.\n\ntoString\n\n(\n\n)\n\n)\n\n25\n\n.\n\nversion\n\n(\n\nIconConverter\n\n.\n\ntoBigNumber\n\n(\n\n3\n\n)\n\n.\n\ntoString\n\n(\n\n)\n\n)\n\n26\n\n.\n\ntimestamp\n\n(\n\nnew\n\nDate\n\n(\n\n)\n\n.\n\ngetTime\n\n(\n\n)\n\n*\n\n1000\n\n)\n\n26\n\n.\n\ntimestamp\n\n(\n\nnew\n\nDate\n\n(\n\n)\n\n.\n\ngetTime\n\n(\n\n)\n\n*\n\n1000\n\n)\n\n27\n\n.\n\ncontentType\n\n(\n\n'application/zip'\n\n)\n\n27\n\n.\n\ncontentType\n\n(\n\n'application/zip'\n\n)\n\n28\n\n.\n\ncontent\n\n(\n\n`\n\n0x\n\n${\n\ncompiledContractContent\n\n}\n\n`\n\n)\n\n28\n\n.\n\ncontent\n\n(\n\n`\n\n0x\n\n${\n\ncompiledContractContent\n\n}\n\n`\n\n)\n\n29\n\n.\n\nparams\n\n(\n\n{\n\n29\n\n.\n\nparams\n\n(\n\n{\n\n30\n\ninitialSupply\n\n:\n\nIconConverter\n\n.\n\ntoHex\n\n(\n\n'100000000000'\n\n)\n\n,\n\n30\n\ninitialSupply\n\n:\n\nIconConverter\n\n.\n\ntoHex\n\n(\n\n'100000000000'\n\n)\n\n,\n\n31\n\ndecimals\n\n:\n\nIconConverter\n\n.\n\ntoHex\n\n(\n\n18\n\n)\n\n,\n\n31\n\ndecimals\n\n:\n\nIconConverter\n\n.\n\ntoHex\n\n(\n\n18\n\n)\n\n,\n\n32\n\nname\n\n:\n\n'StandardToken'\n\n,\n\n32\n\nname\n\n:\n\n'StandardToken'\n\n,\n\n33\n\nsymbol\n\n:\n\n'ST'\n\n,\n\n33\n\nsymbol\n\n:\n\n'ST'\n\n,\n\n34\n\n}\n\n)\n\n34\n\n}\n\n)\n\n35\n\n.\n\nbuild\n\n(\n\n)\n\n;\n\n35\n\n.\n\nbuild\n\n(\n\n)\n\n;\n\n36\n\n36\n\n37\n\n// Send transaction to deploy contract\n\n37\n\n// Send transaction to deploy contract\n\n38\n\nconst\n\ntxhash\n\n=\n\nawait\n\nmagic\n\n.\n\nicon\n\n.\n\nsendTransaction\n\n(\n\ntxObj\n\n)\n\n;\n\n38\n\nconst\n\ntxhash\n\n=\n\nawait\n\nmagic\n\n.\n\nicon\n\n.\n\nsendTransaction\n\n(\n\ntxObj\n\n)\n\n;\n\n39\n\n39\n\n40\n\nconsole\n\n.\n\nlog\n\n(\n\n`\n\nTransaction Hash:\n\n${\n\ntxhash\n\n}\n\n`\n\n)\n\n;\n\n40\n\nconsole\n\n.\n\nlog\n\n(\n\n`\n\nTransaction Hash:\n\n${\n\ntxhash\n\n}\n\n`\n\n)\n\n;", "explanation": "The '#Deploy Smart Contract' section in the documentation provides a detailed guide on how to deploy a smart contract on the ICON blockchain using the Magic SDK. The primary purpose of this section is to offer developers a step-by-step process for integrating Magic's authentication and ICON's JavaScript SDK to facilitate the deployment of ICON smart contracts.\n\nHere is a concise breakdown of the process:\n\n1. **Library Imports**: The guide begins by importing necessary libraries from the Magic SDK, the ICON SDK, and the ICON extension from `@magic-ext/icon`.\n\n2. **Magic Instance Initialization**: A new Magic instance is created using an API key. This instance is extended with the `IconExtension`, which is configured with the ICON network's RPC URL.\n\n3. **User Metadata Retrieval**: The developer retrieves user metadata, specifically the public address, which is used to build the transaction.\n\n4. **Building the Transaction**: The smart contract deployment transaction is constructed using the `DeployTransactionBuilder`. Key transaction parameters are specified, including the sender's address, recipient address (contract deployment address), stepping limits, network ID, nonce, version, timestamp, content type (ZIP), and the smart contract content in hexadecimal format. Additional parameters like token supply, decimals, name, and symbol are defined for the contract being deployed.\n\n5. **Sending the Transaction**: With the transaction object built, the Magic SDK's `sendTransaction` method is used to broadcast the transaction to the ICON network.\n\n6. **Transaction Hash Logging**: Upon sending the transaction, a transaction hash is returned and logged, allowing the developer to track and verify the deployment on the ICON blockchain.\n\nThis documentation section equips developers with the necessary instructions to seamlessly deploy ICON smart contracts using Magic's integrated solutions, aligning with the conventions set by ICON's JavaScript SDK.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/other/icon#chunk-7", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 Icon Developer Tutorials\n\nIcon Developer Tutorials", "explanation": "The '#Resources' section in the Magic Labs documentation for the Icon blockchain appears to provide additional educational materials specifically aimed at developers working with the Icon blockchain. The listed resource, \"Icon Developer Tutorials,\" likely includes tutorials and guides that help developers understand how to effectively integrate and use the Icon blockchain within their projects. The main purpose of this section is to offer supplementary resources that aid in the development and implementation process, enhancing the user's ability to work with the Icon blockchain technology.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/other/icon#chunk-8", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nArbitrum is a Layer 2 solution enhancing Ethereum by providing developers with faster and more cost-efficient transactions. It upholds Ethereum's security through its innovative Arbitrum Rollup protocol, facilitating trustless operations. For developers, its seamless compatibility with Ethereum's ecosystem and tools simplifies dApp development. Arbitrum is especially beneficial for those looking to boost performance while maintaining the decentralized principles of Ethereum.\n\nArbitrum\n\nAs Arbitrum is EVM compatible, you can follow the Ethereum documentation to send your first transaction and utilize all other wallet features.\n\nEthereum", "explanation": "The section titled 'Arbitrum - Arbitrum - #Overview' describes Arbitrum as a Layer 2 scaling solution designed to improve Ethereum's performance by offering faster and cheaper transactions. It achieves this by leveraging its Arbitrum Rollup protocol, which ensures secure and trustless operations. Arbitrum is fully compatible with Ethereum's ecosystem, allowing developers to easily build decentralized applications (dApps) using familiar Ethereum tools and methodologies. This makes Arbitrum particularly advantageous for developers seeking to enhance application performance while adhering to the core decentralized attributes of Ethereum. Being EVM-compatible, users can refer to Ethereum documentation for transaction handling and wallet functionalities.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/evm/arbitrum#chunk-1", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nEnsure you have installed the Magic SDK and have access to your API key, follow the quickstart to get started. You can use Magic's network aliases to connect to either testnet or mainnet on Arbitrum.\n\nquickstart\n\nCopy\n\n01\n\n// Setting network to point to testnet\n\n01\n\n// Setting network to point to testnet\n\n02\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_PUBLISHABLE_API_KEY'\n\n,\n\n{\n\n02\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_PUBLISHABLE_API_KEY'\n\n,\n\n{\n\n03\n\nnetwork\n\n:\n\n{\n\n03\n\nnetwork\n\n:\n\n{\n\n04\n\nrpcUrl\n\n:\n\n'https://sepolia-rollup.arbitrum.io/rpc'\n\n,\n\n04\n\nrpcUrl\n\n:\n\n'https://sepolia-rollup.arbitrum.io/rpc'\n\n,\n\n05\n\nchainId\n\n:\n\n421614\n\n,\n\n05\n\nchainId\n\n:\n\n421614\n\n,\n\n06\n\n}\n\n06\n\n}\n\n07\n\n)\n\n;\n\n07\n\n)\n\n;", "explanation": "The documentation section titled '#Configure Arbitrum' provides guidance on how to set up the Magic SDK for use with the Arbitrum blockchain, specifically connecting to a testnet environment. This is part of the broader process of integrating Arbitrum with applications using the Magic platform's authentication and wallet services.\n\nThe main purpose of this section is to instruct developers on how to configure their application to connect to Arbitrum testnet nodes. It demonstrates how to initialize the Magic object with the appropriate API key and network parameters, including the RPC URL and chain ID for Arbitrum's testnet. This setup allows developers to interact and test their applications on Arbitrum's testnet before moving to the mainnet, ensuring the functionality and stability of their blockchain-based applications.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/evm/arbitrum#chunk-2", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 All Auth, User and Wallet module methods for Dedicated Wallets\n\n\u2022 All EVM Provider functionality to respond to supported RPC methods\n\nAuth\n\nUser\n\nWallet\n\nDedicated Wallets\n\nRPC methods\n\nNeed a feature or see a problem? File an issue on our github repo.\n\ngithub repo", "explanation": "The \"#Compatibility\" section in the Magic Labs embedded wallet documentation for Arbitrum provides an overview of the components and functionalities that are supported for use with the Arbitrum blockchain. It states that all methods related to Authentication, User management, and Wallet operations for Dedicated Wallets are compatible. Additionally, it confirms that all Ethereum Virtual Machine (EVM) Provider capabilities are in place to handle supported Remote Procedure Call (RPC) methods effectively. The section also encourages users to report issues or request new features via their GitHub repository. This ensures users can integrate and use the Magic Labs wallet solution with Arbitrum seamlessly and provides a channel for feedback and improvements.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/evm/arbitrum#chunk-3", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 Documentation: https://docs.arbitrum.io/\n\n\u2022 Block Explorer:https://arbiscan.io/ (Mainnet)https://sepolia.arbiscan.io/ (Testnet)\n\n\u2022 Faucet: https://faucet.quicknode.com/arbitrum\n\nhttps://docs.arbitrum.io/\n\n\u2022 https://arbiscan.io/ (Mainnet)\n\n\u2022 https://sepolia.arbiscan.io/ (Testnet)\n\nhttps://arbiscan.io/\n\nhttps://sepolia.arbiscan.io/\n\nhttps://faucet.quicknode.com/arbitrum", "explanation": "The section titled \"#Resources & Tools\" from the Magic Labs documentation for the Arbitrum chain provides a list of useful links and tools that users can utilize when working with Arbitrum. The main purpose of this section is to offer quick access to essential resources that facilitate development and research activities on the Arbitrum blockchain. \n\nHere's what each item offers:\n\n1. **Documentation**: A link to Arbitrum's official documentation page (https://docs.arbitrum.io/), providing comprehensive guides, tutorials, and reference materials for developers.\n\n2. **Block Explorer**: Links to Arbiscan, which is the block explorer for Arbitrum. The block explorer is available for both the Mainnet (https://arbiscan.io/) and Testnet (https://sepolia.arbiscan.io/), enabling users to browse transaction histories, blocks, and smart contracts.\n\n3. **Faucet**: A link to a faucet (https://faucet.quicknode.com/arbitrum) that allows users to obtain testnet Arbitrum tokens for free. This is useful for testing and development without the need for real tokens.\n\nOverall, these resources and tools support developers and users in exploring and interacting with the Arbitrum blockchain effectively.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/evm/arbitrum#chunk-4", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nChiliz is a Layer 1 blockchain network that's compatible with the Ethereum Virtual Machine (EVM), specifically designed to revolutionize the world of sports. Through the Magic SDK, users can easily create wallets and engage with Chiliz Chain, enabling teams, fans, and developers to craft Web3 products and experiences that unite fans and brands like never before.\n\nChiliz\n\nAs Chiliz is EVM compatible, you can follow the Ethereum documentation to send your first transaction and utilize all other features.\n\nEthereum", "explanation": "The \"Chiliz - Chiliz - #Overview\" section of the Magic Labs documentation explains that Chiliz is a Layer 1 blockchain network compatible with the Ethereum Virtual Machine (EVM) and is focused on transforming the sports industry. The main purpose of Chiliz, in conjunction with the Magic SDK, is to enable easy wallet creation and interaction with the Chiliz Chain, allowing sports teams, fans, and developers to create Web3 products and experiences. Since Chiliz supports EVM, users can follow standard Ethereum documentation to perform transactions and leverage other blockchain features.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/evm/chiliz#chunk-1", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nEnsure you have installed the Magic SDK and have access to your API key, follow the quickstart to get started. You can use Magic's network aliases to connect to either testnet or mainnet on Chiliz. For more network information, see here.\n\nquickstart\n\nhere\n\nCopy\n\n01\n\n// Setting network to point to Chiliz testnet\n\n01\n\n// Setting network to point to Chiliz testnet\n\n02\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_PUBLISHABLE_API_KEY'\n\n,\n\n{\n\n02\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_PUBLISHABLE_API_KEY'\n\n,\n\n{\n\n03\n\nnetwork\n\n:\n\n{\n\n03\n\nnetwork\n\n:\n\n{\n\n04\n\nrpcUrl\n\n:\n\n'https://spicy-rpc.chiliz.com'\n\n,\n\n04\n\nrpcUrl\n\n:\n\n'https://spicy-rpc.chiliz.com'\n\n,\n\n05\n\nchainId\n\n:\n\n88882\n\n,\n\n05\n\nchainId\n\n:\n\n88882\n\n,\n\n06\n\n}\n\n06\n\n}\n\n07\n\n)\n\n;\n\n07\n\n)\n\n;", "explanation": "The '#Configure Chiliz' section of the Magic Labs documentation provides guidance on setting up and configuring the Magic SDK to interact with the Chiliz blockchain. The primary focus is on specifying the network details to connect to the Chiliz testnet or mainnet using Magic's network aliases.\n\nThe instructions indicate that you need to have the Magic SDK installed and your API key ready. You configure the connection by setting the `rpcUrl` to `\"https://spicy-rpc.chiliz.com\"` and `chainId` to `88882`, which corresponds to the Chiliz testnet. These settings allow your application to communicate with the Chiliz blockchain through the Magic SDK, enabling development and testing on this specific network. The documentation is a quick guide to start building blockchain applications using Chiliz with Magic's tools.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/evm/chiliz#chunk-2", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 All Auth, User and most Wallet module methods* for Dedicated Wallets\n\n\u2022 All EVM Provider functionality to respond to supported RPC methods\n\nAuth\n\nUser\n\nWallet\n\nDedicated Wallets\n\nRPC methods\n\n*Some Widget UI features are not yet compatible such as NFT Viewer and Fiat On-ramps.\n\nNeed a feature or see a problem? File an issue on our github repo.\n\ngithub repo", "explanation": "The '#Compatibility' section in the Magic Labs documentation outlines the support and functionality available for the Chiliz blockchain using Magic's embedded wallet solution. It specifies that all authentication, user management, and most wallet-related methods for Dedicated Wallets are compatible with Chiliz. Additionally, all Ethereum Virtual Machine (EVM) Provider functions can respond to the supported Remote Procedure Call (RPC) methods. However, it notes that some features of the Widget UI, like the NFT Viewer and Fiat On-ramps, are not yet compatible. If users need additional features or encounter issues, they are encouraged to file an issue on the GitHub repository. The purpose of this section is to inform users of the current capabilities and limitations of using Magic's services with the Chiliz blockchain.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/evm/chiliz#chunk-3", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 Documentation: https://docs.chiliz.com/\n\n\u2022 Block Explorer: https://scan.chiliz.com/ (Mainnet)https://spicy-explorer.chiliz.com/ (Testnet)\n\n\u2022 Testnet Faucet: https://spicy-faucet.chiliz.com/\n\nhttps://docs.chiliz.com/\n\n\u2022 https://scan.chiliz.com/ (Mainnet)\n\n\u2022 https://spicy-explorer.chiliz.com/ (Testnet)\n\nhttps://scan.chiliz.com/\n\nhttps://spicy-explorer.chiliz.com/\n\nhttps://spicy-faucet.chiliz.com/", "explanation": "The \"#Resources & Tools\" section of the Magic Labs documentation provides users with a collection of essential links and resources to interact with the Chiliz blockchain within the EVM (Ethereum Virtual Machine) framework. Its main purpose is to offer developers and users easy access to:\n\n1. **Documentation**: A comprehensive guide to understanding and implementing the functionalities of the Chiliz blockchain, accessible via https://docs.chiliz.com/.\n\n2. **Block Explorers**: Tools for viewing transaction history and blockchain data on Chiliz, with specific links for both the Mainnet (https://scan.chiliz.com/) and Testnet (https://spicy-explorer.chiliz.com/).\n\n3. **Testnet Faucet**: A service providing free test tokens for use on the Chiliz test network, allowing developers to experiment and test their applications without risk, available at https://spicy-faucet.chiliz.com/.\n\nThis section is designed to aid developers in efficiently accessing the necessary tools and resources to develop, test, and monitor their applications on the Chiliz blockchain environment.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/evm/chiliz#chunk-4", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "Magic makes it easy to authenticate users and integrate them into your Web3 dApps quickly.\n\nThe quickstart options below show how you can use Magic in a Next.js app to connect to an EVM-based testnet, but you can follow a similar flow with Magic\u2019s mobile SDKs or integrate with any of the 30+ blockchains supported by Magic.\n\nMagic\u2019s mobile SDKs\n\n30+ blockchains supported by Magic\n\nRecommended\n\nUse our interactive CLI tool to set up and run a Magic app in less than 2 minutes", "explanation": "The \"Magic Quickstart - Build with CLI\" section from the documentation provides guidance on rapidly integrating Magic's authentication and blockchain connectivity features into a Web3 decentralized application (dApp). The primary aim is to help developers quickly set up a Magic-powered application using an interactive Command Line Interface (CLI) tool, specifically demonstrated within a Next.js app environment connected to an EVM-based testnet. This process is designed to be completed swiftly, in under two minutes, offering a streamlined approach for developers. Additionally, the documentation notes the versatility of Magic's integration capabilities, which extend to its mobile SDKs, and support for over 30 different blockchains, catering to diverse development needs across platforms.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/home/quickstart/integration#chunk-1", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "Add Magic to a new or existing Next.js app\n\nIntegrating Magic into a new or existing app is as simple as installing the SDK, initializing Magic with your Magic Publishable API Key and chosen blockchain, authenticating your users with magic.wallet.connectWithUI() and other common smart contract interactions like sending a transaction and checking a user's balance. The sections below go through each of these steps one at a time.\n\nMagic\n\nmagic.wallet.connectWithUI()\n\nIf you want to jump straight into the code, check out this GitHub Repository or tinker directly in the browser with the CodeSandbox version.\n\nGitHub Repository\n\nCodeSandbox", "explanation": "The section titled 'Integrate into a Next.js app' from the Magic Labs documentation provides instructions for adding Magic's embedded wallet functionality to a Next.js application. The main purpose of the documentation is to guide developers through the process of incorporating Magic's authentication and blockchain interaction features into either a new or existing Next.js project.\n\nThe key steps outlined include:\n\n1. **Installing the SDK**: The initial step involves adding the Magic SDK to your application to access its features.\n\n2. **Initializing Magic**: Developers are shown how to initialize Magic using their Magic Publishable API Key along with the selected blockchain, setting up the necessary configuration to use Magic's services.\n\n3. **Authenticating Users**: The document explains how to authenticate users using the `magic.wallet.connectWithUI()` method, allowing for seamless user sign-in via the Magic wallet interface.\n\n4. **Interacting with Smart Contracts**: It covers additional functionalities such as sending transactions and checking user balances, which are common interactions in blockchain applications.\n\nFor those who prefer practical learning, the documentation provides links to a GitHub repository and a CodeSandbox environment where developers can experiment with code examples.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/home/quickstart/integration#chunk-2", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nNavigate to your project directory and install the Magic SDK as a project dependency.\n\nCopy\n\n01\n\nnpm\n\ninstall\n\nmagic-sdk\n\n01\n\nnpm\n\ninstall\n\nmagic-sdk", "explanation": "The section titled \"#Install the SDK\" from the Magic Labs documentation provides instructions for setting up the Magic SDK in your project. Its main purpose is to guide users through the initial step of integrating the Magic SDK by installing it as a dependency in their project. The instructions include the command to run in the terminal, which uses the Node Package Manager (npm) to install the 'magic-sdk' package in your project directory. This installation is fundamental for utilizing Magic's features in an application, enabling functionalities like secure authentication and user login protocols based on Magic's service offerings.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/home/quickstart/integration#chunk-3", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nGrab your Magic Publishable API Key from your Magic Dashboard. If you haven\u2019t already, you\u2019ll need to sign up for a free developer account.\n\nMagic Dashboard", "explanation": "The section titled '#Get your Magic Publishable API Key' from the Magic Labs documentation is about obtaining a necessary credential required for using Magic's services. The Magic Publishable API Key is an essential identifier that allows you to integrate Magic's functionalities into your application. To get this key, you must first access the Magic Dashboard, which is the control panel for managing your Magic integration. If you do not have an account, you will need to sign up for a free developer account to access the dashboard and acquire your API key. The main purpose of this key is to enable secure communication between your application and Magic\u2019s authentication services, ensuring that you can implement Magic's identity verification and security features in your application.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/home/quickstart/integration#chunk-4", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nMagic\n\nTo get started, simply initialize an instance of Magic with your Publishable API Key and your choice of blockchain. Then initialize your chosen blockchain library, like Web3.js or Ethers.js, with the RPC provider in a separate file.\n\nMagic\n\nHere's how you would initialize the Magic instance.\n\nCopy\n\n01\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\nprocess\n\n.\n\nenv\n\n.\n\nNEXT_PUBLIC_MAGIC_API_KEY\n\n,\n\n{\n\n01\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\nprocess\n\n.\n\nenv\n\n.\n\nNEXT_PUBLIC_MAGIC_API_KEY\n\n,\n\n{\n\n02\n\nnetwork\n\n:\n\n{\n\n02\n\nnetwork\n\n:\n\n{\n\n03\n\nrpcUrl\n\n:\n\n\"<https://rpc2.sepolia.org/>\"\n\n,\n\n03\n\nrpcUrl\n\n:\n\n\"<https://rpc2.sepolia.org/>\"\n\n,\n\n04\n\nchainId\n\n:\n\n11155111\n\n,\n\n04\n\nchainId\n\n:\n\n11155111\n\n,\n\n05\n\n}\n\n,\n\n05\n\n}\n\n,\n\n06\n\n}\n\n)\n\n06\n\n}\n\n)\n\nThe suggested approach for the Magic instance is to create a hook so Magic can be made available and used across the whole application like the one below.\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\nas\n\nMagicBase\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\nas\n\nMagicBase\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\nimport\n\n{\n\nReactNode\n\n,\n\ncreateContext\n\n,\n\nuseContext\n\n,\n\nuseEffect\n\n,\n\nuseMemo\n\n,\n\nuseState\n\n}\n\nfrom\n\n'react'\n\n;\n\n02\n\nimport\n\n{\n\nReactNode\n\n,\n\ncreateContext\n\n,\n\nuseContext\n\n,\n\nuseEffect\n\n,\n\nuseMemo\n\n,\n\nuseState\n\n}\n\nfrom\n\n'react'\n\n;\n\n03\n\n03\n\n04\n\nexport\n\ntype\n\nMagic\n\n=\n\nMagicBase\n\n<\n\nOAuthExtension\n\n[\n\n]\n\n>\n\n;\n\n04\n\nexport\n\ntype\n\nMagic\n\n=\n\nMagicBase\n\n<\n\nOAuthExtension\n\n[\n\n]\n\n>\n\n;\n\n05\n\n05\n\n06\n\ntype\n\nMagicContextType\n\n=\n\n{\n\n06\n\ntype\n\nMagicContextType\n\n=\n\n{\n\n07\n\nmagic\n\n:\n\nMagic\n\n|\n\nnull\n\n;\n\n07\n\nmagic\n\n:\n\nMagic\n\n|\n\nnull\n\n;\n\n08\n\n}\n\n;\n\n08\n\n}\n\n;\n\n09\n\n09\n\n10\n\nconst\n\nMagicContext\n\n=\n\ncreateContext\n\n<\n\nMagicContextType\n\n>\n\n(\n\n{\n\n10\n\nconst\n\nMagicContext\n\n=\n\ncreateContext\n\n<\n\nMagicContextType\n\n>\n\n(\n\n{\n\n11\n\nmagic\n\n:\n\nnull\n\n,\n\n11\n\nmagic\n\n:\n\nnull\n\n,\n\n12\n\n}\n\n)\n\n;\n\n12\n\n}\n\n)\n\n;\n\n13\n\n13\n\n14\n\nexport\n\nconst\n\nuseMagic\n\n=\n\n(\n\n)\n\n=>\n\nuseContext\n\n(\n\nMagicContext\n\n)\n\n;\n\n14\n\nexport\n\nconst\n\nuseMagic\n\n=\n\n(\n\n)\n\n=>\n\nuseContext\n\n(\n\nMagicContext\n\n)\n\n;\n\n15\n\n15\n\n16\n\nconst\n\nMagicProvider\n\n=\n\n(\n\n{\n\nchildren\n\n}\n\n:\n\n{\n\nchildren\n\n:\n\nReactNode\n\n}\n\n)\n\n=>\n\n{\n\n16\n\nconst\n\nMagicProvider\n\n=\n\n(\n\n{\n\nchildren\n\n}\n\n:\n\n{\n\nchildren\n\n:\n\nReactNode\n\n}\n\n)\n\n=>\n\n{\n\n17\n\nconst\n\n[\n\nmagic\n\n,\n\nsetMagic\n\n]\n\n=\n\nuseState\n\n<\n\nMagic\n\n|\n\nnull\n\n>\n\n(\n\nnull\n\n)\n\n;\n\n17\n\nconst\n\n[\n\nmagic\n\n,\n\nsetMagic\n\n]\n\n=\n\nuseState\n\n<\n\nMagic\n\n|\n\nnull\n\n>\n\n(\n\nnull\n\n)\n\n;\n\n18\n\n18\n\n19\n\nuseEffect\n\n(\n\n(\n\n)\n\n=>\n\n{\n\n19\n\nuseEffect\n\n(\n\n(\n\n)\n\n=>\n\n{\n\n20\n\nif\n\n(\n\nprocess\n\n.\n\nenv\n\n.\n\nNEXT_PUBLIC_MAGIC_API_KEY\n\n)\n\n{\n\n20\n\nif\n\n(\n\nprocess\n\n.\n\nenv\n\n.\n\nNEXT_PUBLIC_MAGIC_API_KEY\n\n)\n\n{\n\n21\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagicBase\n\n(\n\nprocess\n\n.\n\nenv\n\n.\n\nNEXT_PUBLIC_MAGIC_API_KEY\n\nas\n\nstring\n\n,\n\n{\n\n21\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagicBase\n\n(\n\nprocess\n\n.\n\nenv\n\n.\n\nNEXT_PUBLIC_MAGIC_API_KEY\n\nas\n\nstring\n\n,\n\n{\n\n22\n\nnetwork\n\n:\n\n{\n\n22\n\nnetwork\n\n:\n\n{\n\n23\n\nrpcUrl\n\n:\n\n\"<https://rpc2.sepolia.org/>\"\n\n,\n\n23\n\nrpcUrl\n\n:\n\n\"<https://rpc2.sepolia.org/>\"\n\n,\n\n24\n\nchainId\n\n:\n\n11155111\n\n,\n\n24\n\nchainId\n\n:\n\n11155111\n\n,\n\n25\n\n}\n\n,\n\n25\n\n}\n\n,\n\n26\n\n}\n\n)\n\n;\n\n26\n\n}\n\n)\n\n;\n\n27\n\n27\n\n28\n\nsetMagic\n\n(\n\nmagic\n\n)\n\n;\n\n28\n\nsetMagic\n\n(\n\nmagic\n\n)\n\n;\n\n29\n\n}\n\n29\n\n}\n\n30\n\n}\n\n,\n\n[\n\n]\n\n)\n\n;\n\n30\n\n}\n\n,\n\n[\n\n]\n\n)\n\n;\n\n31\n\n31\n\n32\n\nconst\n\nvalue\n\n=\n\nuseMemo\n\n(\n\n(\n\n)\n\n=>\n\n{\n\n32\n\nconst\n\nvalue\n\n=\n\nuseMemo\n\n(\n\n(\n\n)\n\n=>\n\n{\n\n33\n\nreturn\n\n{\n\n33\n\nreturn\n\n{\n\n34\n\nmagic\n\n,\n\n34\n\nmagic\n\n,\n\n35\n\n}\n\n;\n\n35\n\n}\n\n;\n\n36\n\n}\n\n,\n\n[\n\nmagic\n\n]\n\n)\n\n;\n\n36\n\n}\n\n,\n\n[\n\nmagic\n\n]\n\n)\n\n;\n\n37\n\n37\n\n38\n\nreturn\n\n<\n\nMagicContext\n\n.\n\nProvider\n\nvalue\n\n=\n\n{\n\nvalue\n\n}\n\n>\n\n{\n\nchildren\n\n}\n\n<\n\n/\n\nMagicContext\n\n.\n\nProvider\n\n>\n\n;\n\n38\n\nreturn\n\n<\n\nMagicContext\n\n.\n\nProvider\n\nvalue\n\n=\n\n{\n\nvalue\n\n}\n\n>\n\n{\n\nchildren\n\n}\n\n<\n\n/\n\nMagicContext\n\n.\n\nProvider\n\n>\n\n;\n\n39\n\n}\n\n;\n\n39\n\n}\n\n;\n\n40\n\n40\n\n41\n\nexport\n\ndefault\n\nMagicProvider\n\n;\n\n41\n\nexport\n\ndefault\n\nMagicProvider\n\n;\n\nWhen you want to use the Magic instance, import the hook and destructure the required properties from it, which in this case is the Magic instance itself.\n\nCopy\n\n01\n\nconst\n\n{\n\nmagic\n\n}\n\n=\n\nuseMagic\n\n(\n\n)\n\n;\n\n01\n\nconst\n\n{\n\nmagic\n\n}\n\n=\n\nuseMagic\n\n(\n\n)\n\n;\n\nIn a separate file, create a hook to initialize your web3 instance. For this quickstart we will be using the Web3.js library but you can use other web3 blockchain libraries such as Ethers.js.\n\nCopy\n\n01\n\nimport\n\n{\n\nWeb3\n\n}\n\nfrom\n\n'web3'\n\n;\n\n01\n\nimport\n\n{\n\nWeb3\n\n}\n\nfrom\n\n'web3'\n\n;\n\n02\n\nimport\n\n{\n\nuseEffect\n\n,\n\nuseState\n\n}\n\nfrom\n\n'react'\n\n;\n\n02\n\nimport\n\n{\n\nuseEffect\n\n,\n\nuseState\n\n}\n\nfrom\n\n'react'\n\n;\n\n03\n\nimport\n\n{\n\nuseMagic\n\n}\n\nfrom\n\n'./MagicProvider'\n\n;\n\n03\n\nimport\n\n{\n\nuseMagic\n\n}\n\nfrom\n\n'./MagicProvider'\n\n;\n\n04\n\n04\n\n05\n\nconst\n\nuseWeb3\n\n=\n\n(\n\n)\n\n=>\n\n{\n\n05\n\nconst\n\nuseWeb3\n\n=\n\n(\n\n)\n\n=>\n\n{\n\n06\n\nconst\n\n{\n\nmagic\n\n}\n\n=\n\nuseMagic\n\n(\n\n)\n\n;\n\n06\n\nconst\n\n{\n\nmagic\n\n}\n\n=\n\nuseMagic\n\n(\n\n)\n\n;\n\n07\n\nconst\n\n[\n\nweb3\n\n,\n\nsetWeb3\n\n]\n\n=\n\nuseState\n\n<\n\nWeb3\n\n|\n\nnull\n\n>\n\n(\n\nnull\n\n)\n\n;\n\n07\n\nconst\n\n[\n\nweb3\n\n,\n\nsetWeb3\n\n]\n\n=\n\nuseState\n\n<\n\nWeb3\n\n|\n\nnull\n\n>\n\n(\n\nnull\n\n)\n\n;\n\n08\n\n08\n\n09\n\nuseEffect\n\n(\n\n(\n\n)\n\n=>\n\n{\n\n09\n\nuseEffect\n\n(\n\n(\n\n)\n\n=>\n\n{\n\n10\n\nif\n\n(\n\nmagic\n\n)\n\n{\n\n10\n\nif\n\n(\n\nmagic\n\n)\n\n{\n\n11\n\nsetWeb3\n\n(\n\nnew\n\nWeb3\n\n(\n\n(\n\nmagic\n\nas\n\nany\n\n)\n\n.\n\nrpcProvider\n\n)\n\n)\n\n;\n\n11\n\nsetWeb3\n\n(\n\nnew\n\nWeb3\n\n(\n\n(\n\nmagic\n\nas\n\nany\n\n)\n\n.\n\nrpcProvider\n\n)\n\n)\n\n;\n\n12\n\n}\n\nelse\n\n{\n\n12\n\n}\n\nelse\n\n{\n\n13\n\nconsole\n\n.\n\nlog\n\n(\n\n'Magic is not initialized'\n\n)\n\n;\n\n13\n\nconsole\n\n.\n\nlog\n\n(\n\n'Magic is not initialized'\n\n)\n\n;\n\n14\n\n}\n\n14\n\n}\n\n15\n\n}\n\n,\n\n[\n\nmagic\n\n]\n\n)\n\n;\n\n15\n\n}\n\n,\n\n[\n\nmagic\n\n]\n\n)\n\n;\n\n16\n\n16\n\n17\n\nreturn\n\nweb3\n\n;\n\n17\n\nreturn\n\nweb3\n\n;\n\n18\n\n}\n\n;\n\n18\n\n}\n\n;\n\n19\n\n19\n\n20\n\nexport\n\ndefault\n\nuseWeb3\n\n;\n\n20\n\nexport\n\ndefault\n\nuseWeb3\n\n;\n\nNow whenever you need to use the web3 instance, import the hook into the file you need it in and call it within your component to get the web3 instance.\n\nweb3\n\nweb3\n\nCopy\n\n01\n\nconst\n\nweb3\n\n=\n\nuseWeb3\n\n(\n\n)\n\n;\n\n01\n\nconst\n\nweb3\n\n=\n\nuseWeb3\n\n(\n\n)\n\n;\n\nThe above code snippets initializes Magic and web3 with a public Sepolia Testnet URL. You can point the instance to a different chain by modifying the URL and Chain ID. Magic seamlessly supports over 25 different blockchains.\n\nMagic\n\nweb3\n\n25 different blockchains", "explanation": "The \"#Initialize Magic\" section of the Magic Labs documentation provides a guide on setting up the Magic SDK for blockchain integration within an application. Here's a breakdown of its main purpose and content:\n\n1. **Initialization**: The primary focus is on initializing an instance of the Magic SDK with a publishable API key and configuring it with a specific blockchain. This setup involves specifying the RPC URL and Chain ID, enabling seamless interaction with the chosen blockchain network.\n\n2. **Magic as a Context Provider**: The document also describes creating a React context to make the Magic instance available across the entire application. This involves setting up a `MagicProvider` and a custom hook, `useMagic`, which facilitates easy access to the Magic instance in React components.\n\n3. **Integration with Web3**: It shows how to initialize Web3.js, or any compatible blockchain library, to interact with blockchain through the Magic instance's RPC provider. This includes another custom hook, `useWeb3`, which initializes and provides a Web3 instance tied to the Magic provider.\n\n4. **Flexibility and Support**: The guide outlines that while the example uses the Sepolia Testnet, the setup supports over 25 different blockchains by adjusting the RPC URL and Chain ID. This flexibility allows developers to easily switch between testnets and mainnets as needed.\n\n5. **Usage**: Finally, the documentation demonstrates how to utilize the Magic and Web3 instances within application components by importing and leveraging these custom hooks.\n\nOverall, this documentation section serves as an introductory guide to integrating the Magic SDK with blockchain applications using React, providing a foundation for developers to authenticate users and interact with decentralized networks.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/home/quickstart/integration#chunk-5", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nAuthenticating your users is as easy as calling magic.wallet.connectWithUI(). This will display Magic's Login UI. Magic will handle authentication using Email OTP with no additional code needed from your app. You log your users out by calling magic.user.logout().\n\nmagic.wallet.connectWithUI()\n\nLogin UI\n\nEmail OTP\n\nmagic.user.logout()\n\nIn addition to the flow provided by the Login UI, you can customize a Dedicated Wallet to use a variety of authentication options like SMS login, OAuth through popular social login providers, and more.\n\nvariety of authentication options", "explanation": "The documentation section titled '#Authenticate your users' explains how to utilize the Magic Labs embedded wallet service to authenticate users within your application. The main purpose of this section is to guide developers on how to implement user authentication using Magic's services easily.\n\nThe documented process involves:\n\n1. **magic.wallet.connectWithUI()**: This function call triggers Magic's built-in Login UI, which facilitates the authentication process through an Email-based One-Time Password (OTP) system. This approach requires no additional coding for handling authentication from the developer's side.\n\n2. **magic.user.logout()**: This function allows developers to log users out of the application.\n\nAdditionally, the section highlights that developers can customize the authentication process beyond the default Email OTP flow. By creating a Dedicated Wallet, they can offer alternative authentication options such as SMS login and OAuth integrations which include popular social login providers, thereby enhancing the flexibility and adaptability of user login methods.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/home/quickstart/integration#chunk-6", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nDisplay the authenticated user\u2019s wallet with magic.wallet.showUI(). This will show the user\u2019s wallet using Magic\u2019s Widget UI.\n\nmagic.wallet.showUI()\n\nWidget UI", "explanation": "The section titled '#Display the authenticated user\u2019s wallet' in the Magic Labs documentation outlines how to use the `magic.wallet.showUI()` function to display the current user's wallet. This function triggers Magic's Widget UI to visually present the user's wallet interface. The main purpose is to provide a seamless and integrated method for authenticated users to view and interact with their crypto wallet within an application using Magic's tools. This simplifies the user experience by embedding wallet functionalities directly into the app.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/home/quickstart/integration#chunk-7", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nOne thing you may want to do is retrieve the address and balance of a logged in user. To do this, call the getInfo function and set it as a variable. Then on that variable call the publicAddress property to get the user's address.\n\ngetInfo\n\npublicAddress\n\nCopy\n\n01\n\nconst\n\nmetadata\n\n=\n\nawait\n\nmagic\n\n?.\n\nuser\n\n.\n\ngetInfo\n\n(\n\n)\n\n;\n\n01\n\nconst\n\nmetadata\n\n=\n\nawait\n\nmagic\n\n?.\n\nuser\n\n.\n\ngetInfo\n\n(\n\n)\n\n;\n\n02\n\nconst\n\npublicAddress\n\n=\n\nmetadata\n\n.\n\npublicAddress\n\n;\n\n02\n\nconst\n\npublicAddress\n\n=\n\nmetadata\n\n.\n\npublicAddress\n\n;", "explanation": "The \"#Get user address\" section of the Magic Labs embedded wallet documentation is about retrieving the blockchain address of a user who is logged in to your application. This is done by using the `getInfo` function provided by Magic's API. This function gathers the user's information, which includes their public blockchain address. The main purpose of this section is to guide developers on how to access and store a user's public address in their application. You first call the `getInfo` function and assign the result to a variable (`metadata` in this case). Then, you access the `publicAddress` property from this variable to obtain the user's blockchain address. This allows developers to manage user interactions with blockchain transactions within their application.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/home/quickstart/integration#chunk-8", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nTo get the token balance of a user, import the web3 instance and then inside an asynchronous function call the getBalance function and pass the Magic user's public address to it. Given that the Magic instance is connected to the Sepolia network, calling getBalance will return the amount of Sepolia tokens the user has.\n\ngetBalance\n\ngetBalance\n\nIn this we will be using the web3 instance mentioned earlier.\n\nweb3\n\nCopy\n\n01\n\nconst\n\nweb3\n\n=\n\nuseWeb3\n\n(\n\n)\n\n;\n\n01\n\nconst\n\nweb3\n\n=\n\nuseWeb3\n\n(\n\n)\n\n;\n\n02\n\nconst\n\nbalance\n\n=\n\nawait\n\nweb3\n\n.\n\neth\n\n.\n\ngetBalance\n\n(\n\npublicAddress\n\n)\n\n;\n\n02\n\nconst\n\nbalance\n\n=\n\nawait\n\nweb3\n\n.\n\neth\n\n.\n\ngetBalance\n\n(\n\npublicAddress\n\n)\n\n;", "explanation": "The '#Get user balance' section in the Magic Labs documentation describes how to retrieve the token balance of a user utilizing the web3 instance. The main purpose of this section is to guide developers on how to check the amount of Sepolia tokens a specific user possesses. This is accomplished by creating an asynchronous function that calls the `getBalance` method on the web3 instance, which has been connected to the Sepolia network. By passing the Magic user's public address to the `getBalance` function, the user's Sepolia token balance is returned. The instructions provide a code snippet showing how to use the `web3.eth.getBalance` function to achieve this.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/home/quickstart/integration#chunk-9", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nMagic integrates with all popular blockchain libraries so that you don\u2019t have to change anything about how you interact with the blockchain. For example, if you\u2019re using Ethereum or other EVM chains, you can get the user\u2019s wallet address or sign and send transactions the same way you normally would using Web3.js or Ethers.js.\n\nHere is an example of sending a transaction:\n\nCopy\n\n01\n\nasync\n\nfunction\n\nsendEth\n\n(\n\namount\n\n:\n\nnumber\n\n,\n\nrecipientAddress\n\n:\n\nstring\n\n)\n\n{\n\n01\n\nasync\n\nfunction\n\nsendEth\n\n(\n\namount\n\n:\n\nnumber\n\n,\n\nrecipientAddress\n\n:\n\nstring\n\n)\n\n{\n\n02\n\nconst\n\nmetadata\n\n=\n\nawait\n\nmagic\n\n?.\n\nuser\n\n.\n\ngetInfo\n\n(\n\n)\n\n;\n\n02\n\nconst\n\nmetadata\n\n=\n\nawait\n\nmagic\n\n?.\n\nuser\n\n.\n\ngetInfo\n\n(\n\n)\n\n;\n\n03\n\nconst\n\nsenderAddress\n\n=\n\nmetadata\n\n.\n\npublicAddress\n\n;\n\n03\n\nconst\n\nsenderAddress\n\n=\n\nmetadata\n\n.\n\npublicAddress\n\n;\n\n04\n\n04\n\n05\n\nconst\n\ntxnParams\n\n=\n\n{\n\n05\n\nconst\n\ntxnParams\n\n=\n\n{\n\n06\n\nfrom\n\n:\n\nsenderAddress\n\n,\n\n06\n\nfrom\n\n:\n\nsenderAddress\n\n,\n\n07\n\nto\n\n:\n\nrecipientAddress\n\n,\n\n07\n\nto\n\n:\n\nrecipientAddress\n\n,\n\n08\n\nvalue\n\n:\n\nweb3\n\n.\n\nutils\n\n.\n\ntoWei\n\n(\n\namount\n\n,\n\n\"ether\"\n\n)\n\n,\n\n08\n\nvalue\n\n:\n\nweb3\n\n.\n\nutils\n\n.\n\ntoWei\n\n(\n\namount\n\n,\n\n\"ether\"\n\n)\n\n,\n\n09\n\ngas\n\n:\n\n21000\n\n,\n\n09\n\ngas\n\n:\n\n21000\n\n,\n\n10\n\n}\n\n10\n\n}\n\n11\n\n11\n\n12\n\nweb3\n\n.\n\neth\n\n12\n\nweb3\n\n.\n\neth\n\n13\n\n.\n\nsendTransaction\n\n(\n\ntxnParams\n\nas\n\nany\n\n)\n\n13\n\n.\n\nsendTransaction\n\n(\n\ntxnParams\n\nas\n\nany\n\n)\n\n14\n\n.\n\non\n\n(\n\n\"transactionHash\"\n\n,\n\n(\n\ntxHash\n\n:\n\nstring\n\n)\n\n=>\n\n{\n\n14\n\n.\n\non\n\n(\n\n\"transactionHash\"\n\n,\n\n(\n\ntxHash\n\n:\n\nstring\n\n)\n\n=>\n\n{\n\n15\n\nconsole\n\n.\n\nlog\n\n(\n\n\"Transaction hash:\"\n\n,\n\ntxHash\n\n)\n\n15\n\nconsole\n\n.\n\nlog\n\n(\n\n\"Transaction hash:\"\n\n,\n\ntxHash\n\n)\n\n16\n\n}\n\n)\n\n16\n\n}\n\n)\n\n17\n\n.\n\nthen\n\n(\n\n(\n\nreceipt\n\n:\n\nany\n\n)\n\n=>\n\n{\n\n17\n\n.\n\nthen\n\n(\n\n(\n\nreceipt\n\n:\n\nany\n\n)\n\n=>\n\n{\n\n18\n\nconsole\n\n.\n\nlog\n\n(\n\n\"Transaction receipt:\"\n\n,\n\nreceipt\n\n)\n\n18\n\nconsole\n\n.\n\nlog\n\n(\n\n\"Transaction receipt:\"\n\n,\n\nreceipt\n\n)\n\n19\n\n}\n\n)\n\n19\n\n}\n\n)\n\n20\n\n}\n\n20\n\n}", "explanation": "The \"#Interact with the network\" section of the Magic Labs documentation focuses on demonstrating how developers can integrate and interact with blockchain networks using Magic's services without altering their current processes. The main purpose is to ensure a seamless experience where developers can carry out essential blockchain interactions, such as obtaining a user's wallet address or signing and sending transactions, using familiar tools like Web3.js or Ethers.js. \n\nThe provided example illustrates how to send an Ethereum transaction. It involves retrieving the user's wallet information via Magic, setting up transaction parameters (such as sender and recipient addresses and the amount to transfer), and finally sending the transaction using `web3.eth.sendTransaction`. The example also includes event listeners to log the transaction hash and receipt, which are essential for tracking and confirming the transaction's status on the blockchain.\n\nOverall, this section is designed to simplify blockchain integration by offering native compatibility with popular blockchain libraries, ensuring developers can use established methods to accomplish blockchain tasks efficiently with Magic's infrastructure.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/home/quickstart/integration#chunk-10", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nThis application uses our Dedicated Wallet. The Dedicated Wallet meets the widest variety of needs while still being incredibly simple to implement. In addition to the baked-in Login UI, it has plenty of customization options, supports social login through providers like GitHub and Discord, allows for enterprise multi-factor authentication, and more.\n\nDedicated Wallet\n\nLogin UI\n\nsocial login\n\nenterprise multi-factor authentication", "explanation": "The section titled '#Customize Your App' from the Magic Labs documentation explains how to tailor the Magic Dedicated Wallet for your specific application needs. The main purpose of this section is to highlight the flexibility and ease of implementation provided by the Dedicated Wallet. It outlines various features such as a built-in Login User Interface (UI), customization options, support for social logins through platforms like GitHub and Discord, and enterprise-level multi-factor authentication. This allows developers to enhance their application's security and user experience while integrating Magic's wallet solutions.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/home/quickstart/integration#chunk-11", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nWe have a suite of resources to help developers and companies with a wide variety of use cases. Below are some ideas to get you started, but feel free to browse our documentation or reach out with specific questions.\n\n\u2022 Take a look at this demo's GitHub Repository or CodeSandbox\n\n\u2022 Add support for OAuth social providers like Google, GitHub, and Discord\n\n\u2022 Add support for one or more of the 25+ blockchains accessible through Magic\n\n\u2022 Use Magic across a variety of platforms, including Web, iOS, Android, Unity, and more\n\n\u2022 Learn more about Magic's security framework and how it can make your applications more secure\n\n\u2022 Read Magic's Whitepaper\n\n\u2022 View Magic Guides for comprehensive articles covering a wide range of use cases\n\nTake a look at this demo's GitHub Repository or CodeSandbox\n\nGitHub Repository\n\nCodeSandbox\n\nAdd support for OAuth social providers like Google, GitHub, and Discord\n\nGoogle\n\nGitHub\n\nDiscord\n\nAdd support for one or more of the 25+ blockchains accessible through Magic\n\n25+ blockchains accessible through Magic\n\nUse Magic across a variety of platforms, including Web, iOS, Android, Unity, and more\n\nvariety of platforms\n\nLearn more about Magic's security framework and how it can make your applications more secure\n\nMagic's security framework\n\nRead Magic's Whitepaper\n\nWhitepaper\n\nView Magic Guides for comprehensive articles covering a wide range of use cases\n\nMagic Guides", "explanation": "The '#Next Steps' section of the Magic Labs embedded wallet documentation provides guidance for developers and companies on how to further explore and leverage Magic's capabilities after an initial integration. Its main purpose is to suggest various resources and actions that can help enhance their applications and expand their use of Magic's technology. This includes:\n\n1. **Exploring Demos**: Developers can examine functional examples in GitHub or CodeSandbox to gain practical insight.\n\n2. **Integrating OAuth Providers**: Suggestions are made to incorporate popular OAuth social providers like Google, GitHub, and Discord for user authentication.\n\n3. **Accessing Blockchains**: Instructions on integrating one or more of the 25+ blockchains supported by Magic are offered.\n\n4. **Multi-Platform Use**: Guidance is provided for using Magic on various platforms, such as Web, iOS, Android, and Unity.\n\n5. **Security Framework**: Developers are encouraged to learn about Magic's security framework to enhance application security.\n\n6. **Educational Resources**: Access to Magic's Whitepaper for in-depth understanding and Magic Guides for wide-ranging use cases are recommended.\n\nOverall, this section serves as an encouragement to delve deeper into Magic's offerings, consider additional integrations, and utilize available resources for optimal use of their technology.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/home/quickstart/integration#chunk-12", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nDomain Allowlist allows your application to be secure-by-default, meaning that it establishes a strong security posture right from the start, and only permits communication with specific domains and redirect URIs that have been explicitly approved. Magic will reject all requests from domains and redirect URIs that are not part of the allowlist. This protects your public API keys from unauthorized usage.", "explanation": "The \"Domain Allowlist\" section from the Magic Labs documentation outlines a security feature that ensures your application communicates only with pre-approved domains and redirect URIs. By default, this feature enhances the security of your application by blocking any interaction with domains that are not on the allowlist. This safeguard prevents the misuse of your public API keys by rejecting requests from unauthorized sources, thereby maintaining a secure environment for your application's operations.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/security/allowlists/domain-allowlist#chunk-1", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nNavigate to the Magic dashboard and select the application in which you need to add domains to the allowlist. Inside the dashboard, go to the \"Settings\" tab of your selected application and scroll \"Allowed Origins & Redirects\". In this section, you'll find a toggle button that allows you to manage the allowlist.\n\nMagic dashboard\n\nOnce the feature is on, a text input field will be displayed. Here, you can input the domains that you want to add to the allowlist.\n\n#\n\nFor new applications, the Domain Allowlist feature is mandatory. By default, the localhost domain is included for convenience. However, any additional domains that will make requests to Magic must be explicitly added to the allowlist.\n\nlocalhost", "explanation": "The '#Usage - #New Projects' section of the Magic Labs documentation is about setting up a Domain Allowlist for applications using the Magic dashboard. The main purpose of this feature is to enhance security by specifying which domains are permitted to interact with your application when making requests to Magic. This prevents unauthorized domains from accessing your application.\n\nTo accomplish this, you must navigate to the Magic dashboard, select your application, and go to the \"Settings\" tab where you can manage the allowlist under \"Allowed Origins & Redirects.\" When you enable this feature, you can input the domains you trust into a provided text input field.\n\nFor new applications, using the Domain Allowlist is a mandatory step. The system includes \"localhost\" by default to facilitate development, but any other domains that will be interacting with Magic need to be manually added to the allowlist to ensure they are permitted to make requests. This requirement ensures that you have control over which domains can communicate with your application, improving the overall security posture.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/security/allowlists/domain-allowlist#chunk-2", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nFor any existing applications created prior to December, 15 2023, the Domain Allowlist feature will not be enforced, however warning messages will appear if the domain allowlist feature is not toggled on.\n\nWhile it's not mandatory to turn on this feature and add domains for existing apps, it is highly recommended. Without enabling the Domain Allowlist, your API keys remain vulnerable to unauthorized usage.\n\nIf a project attempts to utilize a public key on a domain not included in the application's allowlist, a modal will appear. This modal will notify the user that an unauthorized domain is being used and that access has not been approved for that specific domain by the application.", "explanation": "The section titled \"#Existing Projects\" from the Magic Labs documentation outlines information regarding the Domain Allowlist feature for applications created before December 15, 2023. The main purpose of this section is to inform users that:\n\n1. **Warning Messages:** While the Domain Allowlist feature is not enforced for projects created before the specified date, users will receive warning messages if this feature is not activated.\n\n2. **Recommendation for Security:** It is highly recommended to enable the Domain Allowlist to enhance security. This feature helps protect API keys from unauthorized use by specifying which domains are allowed to interact with the application.\n\n3. **Modal Notification for Unauthorized Domains:** If a project uses a domain not included in the allowlist with its public key, a modal will appear to notify the user of the unauthorized domain attempt, indicating that access is not permitted for that domain.\n\nOverall, the section encourages users of existing projects to adopt the Domain Allowlist feature to safeguard their API keys against potential misuse.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/security/allowlists/domain-allowlist#chunk-3", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nAlternatively, domains can be added to your applications allowlist using Curl. In order to interact with the email access control list for your application using Curl, you will need a Secret Key and Client ID.\n\nTo obtain the required information, follow the steps below:\n\n\u2022 On the Dashboard landing page, right-click anywhere and select Inspect\n\n\u2022 Navigate to the Network tab and look for info?magic_client_id=<CLIENT_ID>\n\n\u2022 Navigate to the Response tab and extract live_secret_key as your Secret Key and magic_client_id as your Client ID\n\ninfo?magic_client_id=<CLIENT_ID>\n\nlive_secret_key\n\nmagic_client_id\n\nProvide the Secret Key and/or Client ID in your Curl commands, along with the chosen domains for the interaction:\n\nCopy\n\n01\n\ncurl\n\n--location --request POST\n\n'https://api.magic.link/v2/api/magic_client/allowlist/add'\n\n\\\n\n01\n\ncurl\n\n--location --request POST\n\n'https://api.magic.link/v2/api/magic_client/allowlist/add'\n\n\\\n\n02\n\n--header\n\n'X-Magic-Secret-Key: sk_live_06FC010DA25ED4F2'\n\n\\\n\n02\n\n--header\n\n'X-Magic-Secret-Key: sk_live_06FC010DA25ED4F2'\n\n\\\n\n03\n\n--header\n\n'Content-Type: application/json'\n\n\\\n\n03\n\n--header\n\n'Content-Type: application/json'\n\n\\\n\n04\n\n--data-raw\n\n'{\n\n04\n\n--data-raw\n\n'{\n\n05\n\n\"access_type\": \"domain\",\n\n05\n\n\"access_type\": \"domain\",\n\n06\n\n\"target_client_id\": \"etjubJsY5Cvn6ukDzJYpd3MEAtgw45oetxxoX1PxvP4=\",\n\n06\n\n\"target_client_id\": \"etjubJsY5Cvn6ukDzJYpd3MEAtgw45oetxxoX1PxvP4=\",\n\n07\n\n\"value\": \"https://magic.link\"\n\n07\n\n\"value\": \"https://magic.link\"\n\n08\n\n}'\n\n08\n\n}'", "explanation": "The '#Programmatic Configuration' section of the Magic Labs documentation provides a guide on how to add domains to your application's allowlist using Curl, which is a command-line tool for making network requests. This process involves programmatic access to manage which email domains are permitted for authentication purposes in your application.\n\n**Main Purpose:**\n1. **Secret Key and Client ID Acquisition**: It explains how to retrieve the necessary credentials (Secret Key and Client ID) from the Magic Labs Dashboard. This requires using the browser's developer tools to inspect network activity and extract the necessary data.\n\n2. **Curl Command Setup**: With the Secret Key and Client ID, the documentation provides a Curl command example that sends a POST request to the Magic Labs API. This request adds specified domains to the allowlist, enabling or restricting access based on domain-based email authentication.\n\n3. **Security Management**: This functionality allows developers to programmatically define which email domains can authenticate with their application, enhancing security by ensuring only users with emails from specific domains can gain access.\n\nOverall, it facilitates secure and automated control over domain-based access in applications that use Magic Labs authentication services.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/security/allowlists/domain-allowlist#chunk-4", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nAuthenticate a user passwordlessly using a \"magic link\" sent to the specified user's email address.\n\n#\n\nOnly available with Dedicated Wallet.\n\nDedicated Wallet\n\nMagic link SDK methods are available via the Web client-side SDK. These methods are deprecated on all mobile SDKs.\n\nWeb client-side SDK", "explanation": "**Magic Links Overview and Compatibility**\n\nThe \"Magic Links\" feature is a passwordless authentication method provided by Magic Labs that allows users to access their wallets using a \"magic link\" sent to their registered email addresses. \n\nThe main purpose of this feature is to enable users to log in to their wallets securely without needing to enter their passwords. This method simplifies the authentication process, improving user experience and reducing the risk of password-related security issues.\n\n**Important Compatibility Note:**\n\n* Magic Links are only available for Dedicated Wallet users.\n* The Magic Links functionality is accessible through the Magic Labs Web client-side SDK.\n* Note that Magic link SDK methods have been deprecated on all mobile SDKs.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/login/magic-links#chunk-1", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nThe loginWithMagicLink function sends an authentication request to the user. The resolved value is a Decentralized ID token with a default 15-minute lifespan. Refer to the API documentation for information on how to install and initialize Magic.\n\nloginWithMagicLink\n\nAPI documentation\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\n02\n\n03\n\n// must use a Dedicated Wallet API Key\n\n03\n\n// must use a Dedicated Wallet API Key\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'API_KEY'\n\n)\n\n;\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'API_KEY'\n\n)\n\n;\n\n05\n\n05\n\n06\n\n// log in a user by their email\n\n06\n\n// log in a user by their email\n\n07\n\ntry\n\n{\n\n07\n\ntry\n\n{\n\n08\n\nawait\n\nmagic\n\n.\n\nauth\n\n.\n\nloginWithMagicLink\n\n(\n\n{\n\nemail\n\n:\n\n'hello@example.com'\n\n}\n\n)\n\n;\n\n08\n\nawait\n\nmagic\n\n.\n\nauth\n\n.\n\nloginWithMagicLink\n\n(\n\n{\n\nemail\n\n:\n\n'hello@example.com'\n\n}\n\n)\n\n;\n\n09\n\n}\n\ncatch\n\n{\n\n09\n\n}\n\ncatch\n\n{\n\n10\n\n// Handle errors if required!\n\n10\n\n// Handle errors if required!\n\n11\n\n}\n\n11\n\n}\n\n12\n\n12\n\n13\n\n// log in a user by their email, without showing an out-of-the box UI.\n\n13\n\n// log in a user by their email, without showing an out-of-the box UI.\n\n14\n\ntry\n\n{\n\n14\n\ntry\n\n{\n\n15\n\nawait\n\nmagic\n\n.\n\nauth\n\n.\n\nloginWithMagicLink\n\n(\n\n{\n\nemail\n\n:\n\n'hello@example.com'\n\n,\n\nshowUI\n\n:\n\nfalse\n\n}\n\n)\n\n;\n\n15\n\nawait\n\nmagic\n\n.\n\nauth\n\n.\n\nloginWithMagicLink\n\n(\n\n{\n\nemail\n\n:\n\n'hello@example.com'\n\n,\n\nshowUI\n\n:\n\nfalse\n\n}\n\n)\n\n;\n\n16\n\n}\n\ncatch\n\n{\n\n16\n\n}\n\ncatch\n\n{\n\n17\n\n// Handle errors if required!\n\n17\n\n// Handle errors if required!\n\n18\n\n}\n\n18\n\n}\n\n#\n\nTo achieve a fully white-labeled experience, you will need to implement some custom error handling according to your UI needs. Here's a short example to illustrate how errors can be caught and identified by their code:\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n,\n\nRPCError\n\n,\n\nRPCErrorCode\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n,\n\nRPCError\n\n,\n\nRPCErrorCode\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\n02\n\n03\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'API_KEY'\n\n)\n\n;\n\n03\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'API_KEY'\n\n)\n\n;\n\n04\n\n04\n\n05\n\ntry\n\n{\n\n05\n\ntry\n\n{\n\n06\n\nawait\n\nmagic\n\n.\n\nauth\n\n.\n\nloginWithMagicLink\n\n(\n\n{\n\nemail\n\n:\n\n'hello@example.com'\n\n,\n\nshowUI\n\n:\n\nfalse\n\n}\n\n)\n\n;\n\n06\n\nawait\n\nmagic\n\n.\n\nauth\n\n.\n\nloginWithMagicLink\n\n(\n\n{\n\nemail\n\n:\n\n'hello@example.com'\n\n,\n\nshowUI\n\n:\n\nfalse\n\n}\n\n)\n\n;\n\n07\n\n}\n\ncatch\n\n(\n\nerr\n\n)\n\n{\n\n07\n\n}\n\ncatch\n\n(\n\nerr\n\n)\n\n{\n\n08\n\nif\n\n(\n\nerr\n\ninstanceof\n\nRPCError\n\n)\n\n{\n\n08\n\nif\n\n(\n\nerr\n\ninstanceof\n\nRPCError\n\n)\n\n{\n\n09\n\nswitch\n\n(\n\nerr\n\n.\n\ncode\n\n)\n\n{\n\n09\n\nswitch\n\n(\n\nerr\n\n.\n\ncode\n\n)\n\n{\n\n10\n\ncase\n\nRPCErrorCode\n\n.\n\nMagicLinkFailedVerification\n\n:\n\n10\n\ncase\n\nRPCErrorCode\n\n.\n\nMagicLinkFailedVerification\n\n:\n\n11\n\ncase\n\nRPCErrorCode\n\n.\n\nMagicLinkExpired\n\n:\n\n11\n\ncase\n\nRPCErrorCode\n\n.\n\nMagicLinkExpired\n\n:\n\n12\n\ncase\n\nRPCErrorCode\n\n.\n\nMagicLinkRateLimited\n\n:\n\n12\n\ncase\n\nRPCErrorCode\n\n.\n\nMagicLinkRateLimited\n\n:\n\n13\n\ncase\n\nRPCErrorCode\n\n.\n\nUserAlreadyLoggedIn\n\n:\n\n13\n\ncase\n\nRPCErrorCode\n\n.\n\nUserAlreadyLoggedIn\n\n:\n\n14\n\n// Handle errors accordingly :)\n\n14\n\n// Handle errors accordingly :)\n\n15\n\nbreak\n\n;\n\n15\n\nbreak\n\n;\n\n16\n\n}\n\n16\n\n}\n\n17\n\n}\n\n17\n\n}\n\n18\n\n}\n\n18\n\n}", "explanation": "This documentation section, titled '#Usage - #Error Handling', is about handling errors that may occur when using the `loginWithMagicLink` function to authenticate users with Magic Links. \n\nThe main purpose of this section is to provide guidance on how to catch and handle errors that may arise when using the `loginWithMagicLink` function. This function sends an authentication request to the user and returns a Decentralized ID token.\n\nThe documentation provides examples of how to implement custom error handling to achieve a fully white-labeled experience. It shows how to catch errors and identify them by their unique codes, such as `MagicLinkFailedVerification`, `MagicLinkExpired`, `MagicLinkRateLimited`, and `UserAlreadyLoggedIn`.\n\nBy following the guidance in this section, developers can create a more robust and user-friendly authentication experience by handling potential errors and exceptions that may occur during the authentication process.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/login/magic-links#chunk-2", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nMagic's client-side Web SDK provides Test Mode as a quick way to test your integration locally by asserting specific error codes or bypassing the magic link flow completely. Test Mode only works when logging in with Magic links. As the name suggests, this is for testing. Users and wallets created in test mode should not be treated as secure or production-ready. Data surfaced while in Test Mode should not be considered secure, accurate, or production-ready.\n\nTo enable Test Mode, provide testMode: true to the SDK constructor.\n\ntestMode: true\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\n02\n\n03\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_API_KEY'\n\n,\n\n{\n\n03\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_API_KEY'\n\n,\n\n{\n\n04\n\ntestMode\n\n:\n\ntrue\n\n,\n\n04\n\ntestMode\n\n:\n\ntrue\n\n,\n\n05\n\n}\n\n)\n\n;\n\n05\n\n}\n\n)\n\n;\n\nWith Test Mode enabled, you can assert the desired behavior through the email address you provide to loginWithMagicLink:\n\nloginWithMagicLink\n\n\u2022 To assert a success state, use test+success@magic.link\n\n\u2022 To assert a failed state, use test+fail@magic.link\n\n\u2022 To assert a case-specific failed state, provide an RPC error code with test+fail_with_{RPC_ERROR_CODE}@magic.link\n\ntest+success@magic.link\n\ntest+fail@magic.link\n\nRPC error code\n\ntest+fail_with_{RPC_ERROR_CODE}@magic.link\n\nCopy\n\n01\n\nmagic\n\n.\n\nauth\n\n.\n\nloginWithMagicLink\n\n(\n\n{\n\nemail\n\n:\n\n'test+success@magic.link'\n\n}\n\n)\n\n;\n\n01\n\nmagic\n\n.\n\nauth\n\n.\n\nloginWithMagicLink\n\n(\n\n{\n\nemail\n\n:\n\n'test+success@magic.link'\n\n}\n\n)\n\n;\n\nWeb3 and blockchain use-cases sometimes require access to deterministic key-pairs so that testnet funds are available at runtime. To enable this, users can explicitly specify the key-pair associated to a test user with the following email: test+success_with_{PUBLIC_KEY:PRIVATE_KEY}@magic.link.\n\ntest+success_with_{PUBLIC_KEY:PRIVATE_KEY}@magic.link\n\nThe key-pair provided in the email address during test mode is not protected by Magic's delegated key management system. These keys should not be considered secure or private. Never store mainnet funds with these keys!\n\nIn practice, you can assert a successful login with:\n\nCopy\n\n01\n\nmagic\n\n.\n\nauth\n\n.\n\nloginWithMagicLink\n\n(\n\n{\n\n01\n\nmagic\n\n.\n\nauth\n\n.\n\nloginWithMagicLink\n\n(\n\n{\n\n02\n\nemail\n\n:\n\n02\n\nemail\n\n:\n\n03\n\n'test+success_with_{0x89A3983da27fF0eFCF901F74C4df84e0450A17B7:0x19de850af732e9e5745915162d707d6d8cf013ce7b2862e93081b0c8883bdfae}@magic.link'\n\n,\n\n03\n\n'test+success_with_{0x89A3983da27fF0eFCF901F74C4df84e0450A17B7:0x19de850af732e9e5745915162d707d6d8cf013ce7b2862e93081b0c8883bdfae}@magic.link'\n\n,\n\n04\n\n}\n\n)\n\n;\n\n04\n\n}\n\n)\n\n;\n\nIn the example above, we encode an Ethereum-compatible key-pair in the test user's email address. The login method will immediately resolve with a success state, bypassing the passwordless flow and enabling Ethereum or EVM-compatible signing methods to work seamlessly with your existing Web3 code.", "explanation": "**Test Mode Overview**\n\nThe \"Test Mode\" feature in Magic's client-side Web SDK is designed to simplify testing and development of your Magic Link integration. When enabled, Test Mode allows you to simulate different scenarios, such as successful or failed logins, by using specific email addresses. This feature is only available when logging in with Magic Links and should not be used in production environments.\n\n**Main Purpose**\n\nThe primary purpose of Test Mode is to facilitate testing and development of your application's Magic Link integration. By enabling Test Mode, you can:\n\n1. Test login success and failure scenarios\n2. Bypass the passwordless flow for testing purposes\n3. Use deterministic key-pairs for Web3 and blockchain use-cases\n\n**Key Features**\n\nTo enable Test Mode, set `testMode: true` in the SDK constructor.\n\nTo test different scenarios, use the following email addresses:\n\n* `test+success@magic.link`: Simulate a successful login\n* `test+fail@magic.link`: Simulate a failed login\n* `test+fail_with_{RPC_ERROR_CODE}@magic.link`: Simulate a case-specific failed state with an RPC error code\n* `test+success_with_{PUBLIC_KEY:PRIVATE_KEY}@magic.link`: Use a specific key-pair for Web3 and blockchain use-cases\n\nNote that users and wallets created in Test Mode are not secure or production-ready, and data surfaced during Test Mode should not be considered accurate or secure.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/login/magic-links#chunk-3", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n#\n\nMagic\u2019s top priority is ensuring secure authentication for your end users in your app. Magic recently implemented and added a layer of security for all login flows with email magic link. Specifically, the change ensures that the IP address associated with the device that a user enters their email address on matches the IP address associated with the device that clicks the magic link. If the IP address does not match, the following error is shown to the user when they click on the magic link.\n\nIn addition, for desktop web users, magic links will now authenticate the session clicked from a user\u2019s email. This means that the session or browser tab where the user first enters their email address will no longer sign the user in. This will help ensure that users remain secure in an evolving threat environment, while still delivering a smooth sign-in experience. For customers using the web SDK, there are no code changes required.", "explanation": "**Security Notes: IP Address Verification**\n\nThis documentation section explains a security feature implemented by Magic to ensure secure authentication for end-users. The main purpose is to verify that the IP address of the device where a user enters their email address matches the IP address of the device that clicks the magic link. This adds an extra layer of security to prevent unauthorized access.\n\n**Key Points:**\n\n* IP address verification is required for email magic link login flows.\n* If the IP addresses do not match, an error is shown to the user.\n* For desktop web users, magic links will only authenticate the session from which the user clicked the link, ensuring a secure sign-in experience.\n* No code changes are required for customers using the web SDK.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/login/magic-links#chunk-4", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nMagic Links are no longer supported on mobile as of June 20th, 2023. We advise customers to switch over to Email OTP instead. Please refer to the documentation below on how to implement OTP on mobile.\n\nHow to add OTP email login on iOS\n\nHow to add OTP email login on iOS\n\nHow to add OTP email login on Android\n\nHow to add OTP email login on Android\n\nHow to add OTP email login on Flutter\n\nHow to add OTP email login on Flutter\n\nHow to add OTP email login on Unity\n\nHow to add OTP email login on Unity\n\nHow to add OTP email login in React Native\n\nHow to add OTP email login in React Native", "explanation": "**Explanation of the \"#Mobile Support\" Section**\n\nThis section announces that Magic Links are no longer supported on mobile devices as of June 20th, 2023. The primary purpose of this section is to inform customers that Magic Links can no longer be used as an authentication method on mobile platforms and to recommend switching to Email OTP (One-Time Password) instead.\n\n**Main Purpose:**\n\nThe main purpose of this section is to:\n\n1. Notify customers about the deprecation of Magic Links on mobile devices.\n2. Provide alternatives, specifically Email OTP, for mobile authentication.\n3. Offer resources and documentation on how to implement OTP on various mobile platforms, including iOS, Android, Flutter, Unity, and React Native.\n\nBy following these guidelines, customers can transition from Magic Links to Email OTP and ensure secure authentication on mobile devices.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/login/magic-links#chunk-5", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 Error Codes\n\nError Codes", "explanation": "The section '#Resources' is a subset of the Magic Labs embedded wallet documentation, specifically on 'Magic Links Authentication'. Within this section, there is a brief mention of 'Error Codes'. \n\nThis section is about providing users with a resource that lists possible error messages or codes they might encounter when implementing the Magic Links authentication method. \n\nThe main purpose of this section is to give developers a reference point to consult when troubleshooting and resolving issues related to authentication, allowing them to identify the cause of errors and implement the necessary fixes.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/login/magic-links#chunk-6", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "Have a question that isn't answered here? Reach out to us via our help widget in the bottom-right corner of this screen.", "explanation": "The \"FAQ - Dedicated Wallet\" section from the Magic Labs documentation is a compilation of frequently asked questions related to their Dedicated Wallet feature. The main purpose of this section is to provide quick answers and solutions to common inquiries or issues users may encounter while using the Dedicated Wallet.\n\nIt aims to:\n\n1. Save users' time by providing readily available answers to commonly asked questions.\n2. Reduce the number of support requests by addressing potential issues upfront.\n3. Serve as a troubleshooting guide for users experiencing problems with the Dedicated Wallet.\n\nBy covering frequently asked questions, Magic Labs aims to improve the overall user experience and make it easier for customers to use their Dedicated Wallet feature effectively.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/home/faqs/dedicated-wallet#chunk-1", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n#\n\nYes! When calling the loginWithMagicLink sdk method you can pass in an optional redirectURI value which specifies the URL to redirect your user back to once the magic link is clicked. If no redirect is specified, the user will see a confirmation screen telling them to go back to the original tab where they will be logged in. We recommend this for an improved UX flow.\n\nloginWithMagicLink\n\nloginWithMagicLink\n\nredirectURI\n\nredirectURI", "explanation": "**Magic Link Redirect Feature Explanation**\n\nThe \"#General - Can the magic link redirect to a specific URL?\" documentation section explains how to redirect users to a specific URL after they click on a magic link generated by the Magic Labs embedded wallet SDK.\n\n**Main Purpose:**\n\nThe main purpose of this feature is to provide an improved user experience (UX) flow. When a user clicks on the magic link, they will be redirected to the specified URL, instead of being left on a confirmation screen. This allows developers to control the post-login experience and ensure a seamless transition for their users.\n\n**Key Takeaway:**\n\nTo utilize this feature, developers can pass in an optional `redirectURI` value when calling the `loginWithMagicLink` SDK method, specifying the desired redirect URL.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/home/faqs/dedicated-wallet#chunk-2", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nWe don't support deleting users from your dashboard view. However if you are requesting to delete any PII user data on behalf of the user we can absolutely process those requests.", "explanation": "This documentation section, titled '#Can I delete users from the dashboard?' from the Magic Labs dedicated wallet documentation, addresses a common user question.\n\nIt is about the capability to delete user accounts from the administrative dashboard in the Magic Labs dedicated wallet system.\n\nThe main purpose of this section is to inform administrators that they cannot delete user accounts directly from the dashboard. However, if a user requests the deletion of their personally identifiable information (PII), Magic Labs can facilitate this process upon request.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/home/faqs/dedicated-wallet#chunk-3", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nMagic offers a Deletion Request API that enables developers to delete users' information in compliance with GDPR.\n\nDeletion Request API", "explanation": "The section \"#How can I service GDPR deletion requests from my users?\" from the Magic Labs dedicated wallet documentation is about providing a method for developers to comply with the General Data Protection Regulation (GDPR) when it comes to user data deletion.\n\nThe main purpose of this section is to inform developers that Magic offers a \"Deletion Request API\" that allows them to programmatically delete users' information in compliance with GDPR requirements, ensuring that they can handle user requests for data deletion in a secure and efficient manner.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/home/faqs/dedicated-wallet#chunk-4", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nMagic developers can specify which domains are allowed to use their application's publishable API key by configuring Domain & Mobile Access Whitelisting from the Settings page within the Magic Dashboard. The Domain & Mobile Access Whitelisting configuration is disabled by default for all newly created apps. Only the domains you specify will be accessible by your application when enabled.\n\nTo configure domain access, open your application's Settings Page from the Magic Dashboard. From there, you can Edit the list of domains you want to support. Specific domains and wildcards using * are supported. Examples are below:\n\n\u2022 http://localhost\n\n\u2022 https://example.com\n\n\u2022 https://*.example.com\n\n\u2022 http://example.com:8080\u2060\n\nhttp://localhost\n\nhttps://example.com\n\nhttps://*.example.com\n\nhttp://example.com:8080\u2060\n\nThere is no need to whitelist domains required to complete any Social Login (i.e., https://accounts.google.com, https://facebook.com, etc.) or Private Key Export (i.e., https://reveal.magic.link) flow. Magic automatically accepts these domains and any other domains on your whitelist.", "explanation": "**Restricting Domain Access to Your API Key**\n\nThis documentation section explains how to control which domains can access your Magic Labs embedded wallet's API key. By default, domain access is disabled, and you must specify allowed domains in the Magic Dashboard.\n\n**Main Purpose:**\nThe main purpose is to enhance security by limiting the domains that can use your API key, thereby reducing the risk of unauthorized access. By configuring the Domain & Mobile Access Whitelisting, you ensure that only trusted domains can interact with your wallet's API key.\n\n**Key Points:**\n\n* Domain access is disabled by default and must be manually enabled.\n* You can specify specific domains or use wildcards (*) to allow access.\n* You don't need to whitelist domains required for Social Login or Private Key Export flows, as Magic automatically accepts these domains.\n\nBy following these steps, you can restrict which domains have access to your API key, ensuring a more secure and controlled environment for your Magic Labs embedded wallet.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/home/faqs/dedicated-wallet#chunk-5", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nMagic is not meant to replace your database, so if you need to store any information about users, you'll manage your own DB. We also won't store any custom user data, (only email, public address and issuer) but that doesn't stop you from prompting users for more info (such as first name, last name, etc) and storing that in your database. Magic also does not support importing user data.\n\nemail\n\npublic address\n\nissuer", "explanation": "**Summary: Magic's Role in Data Storage**\n\nThe documentation section \"#Can Magic serve as my database?\" clarifies the limits of Magic Labs embedded wallet in terms of data storage. Its main purpose is to inform developers that Magic should not be used as a replacement for a traditional database.\n\n**Key Points:**\n\n1. **Magic is not a database**: Developers should manage their own database to store user information.\n2. **Limited data storage**: Magic only stores basic user data, including email, public address, and issuer.\n3. **No custom user data storage**: Developers can prompt users for additional information, but it must be stored in their own database.\n4. **No user data import**: Magic does not support importing user data.\n\nIn summary, this section sets expectations for developers on the role of Magic Labs embedded wallet in their application's data storage architecture.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/home/faqs/dedicated-wallet#chunk-6", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCurrently, when a user logs in through email and then through a social login, those are counted as two separate users (each will be given a unique ID) even if using the same email.", "explanation": "**Summary of Documentation Section**\n\nThe section '#Can I link email addresses and social logins?' from the Magic Labs embedded wallet documentation (https://magic.link/docs/home/faqs/dedicated-wallet) discusses an important consideration for user authentication.\n\n**What it's about:**\nThe documentation explains that the Magic Labs embedded wallet currently treats email login and social login (e.g., Google, Facebook) as two separate authentication methods. This means that if a user logs in using both their email and social login, they will be counted as two distinct users with unique IDs, even if they use the same email address for both.\n\n**Main purpose:**\nThe main purpose of this section is to inform developers about this specific behavior and its implications for user management within their applications. This allows developers to design their user authentication workflows and manage their user data accordingly, ensuring a seamless user experience and accurate user tracking.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/home/faqs/dedicated-wallet#chunk-7", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nAbsolutely. The Magic code to power the authentication will be the same regardless of if it's a first time user signing up or a returning user logging in. However if you want to prompt new users for additional information to store in your database such as name or address, you can have a separate login and register page. To check if a user is new, you can simply query your database for the email before calling loginWithMagicLink and if the email doesn't exist you know it's a first time user and redirect them to the register page.\n\nloginWithMagicLink", "explanation": "**Separating Login and Signup with Magic Labs Embedded Wallet**\n\nThis section explains how to differentiate between the login and signup processes when using the Magic Labs embedded wallet. The main purpose is to guide developers on how to handle new users who need to provide additional information, such as name or address, when creating an account.\n\n**Key Takeaway:**\n\nDevelopers can use the same Magic code for authentication, but create separate login and register pages. To determine if a user is new, they can query their database for the user's email before calling the `loginWithMagicLink` function. If the email doesn't exist, it's a first-time user, and they can be redirected to the register page to collect additional information.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/home/faqs/dedicated-wallet#chunk-8", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nMagic comes with essentially no vendor lock-in, so migrating away is easy. You will have the user's unique ID (issuer) and email both stored in your database (and any other user info) so are free to choose another service or move authentication in-house should you want to do that.\n\nissuer", "explanation": "The documentation section '#How can I migrate off Magic?' is about providing information to developers on how to transition away from using Magic Labs' embedded wallet solution. \n\nIts main purpose is to reassure developers that Magic Labs' system is designed with minimal vendor lock-in, meaning they can easily switch to another service or implement their own authentication solution if needed. This is possible because Magic Labs provides user data, including the user's unique ID (issuer) and email, which can be stored in the developer's database and used for authentication purposes.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/home/faqs/dedicated-wallet#chunk-9", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n#\n\nRarely, a user may not receive a magic link email immediately after requesting one. This is usually due to a spam filter holding onto the email before eventually displaying it in the user's inbox. If it's a personal email, adding our sending domain noreply@trymagic.com to their email contacts list should solve the problem. If it's a corporate email, asking the user to have their IT team add our noreply@trymagic.com email domain to their internal allowlist should prevent emails from being held up by the spam filters.\n\nnoreply@trymagic.com\n\nnoreply@trymagic.com", "explanation": "**Documentation Section Overview**\n\nThe \"#Questions Around Email - #What to do if emails are delayed\" section from the Magic Labs embedded wallet documentation tackles issues related to delayed email receipt from Magic Labs. Specifically, it addresses cases where users do not receive magic links immediately after requesting them.\n\n**Main Purpose**\n\nThe primary purpose of this section is to provide a solution for users experiencing delayed email receipt due to spam filters. It offers troubleshooting steps to resolve the issue, including:\n\n1. For personal emails: Adding the Magic Labs sending domain (noreply@trymagic.com) to the user's email contacts list.\n2. For corporate emails: Requesting the user's IT team to add the Magic Labs sending domain (noreply@trymagic.com) to their internal allowlist.\n\nBy following these steps, users can resolve email delay issues and receive magic links from Magic Labs successfully.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/home/faqs/dedicated-wallet#chunk-10", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nIf a user loses access to their email account, they need to contact their email service provider (i.e.: Gmail, Microsoft Outlook, iCloud Mail) and follow steps for account recovery.", "explanation": "This documentation section, titled '#What if a user loses access to their email?', is about troubleshooting a scenario where a user loses access to their email account. \n\nIts main purpose is to inform users that if they are unable to access their email account (which may be linked to their Magic Labs embedded wallet), they should contact their email service provider (e.g., Gmail, Outlook, iCloud Mail) to seek help with recovering their email account, rather than seeking direct assistance from Magic Labs.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/home/faqs/dedicated-wallet#chunk-11", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nPhishing attacks are an ongoing problem that exists in our industry today. However, this doesn't mean we are sticking to the status quo; we are actively working on ways to mitigate this. We have minimized the attack vectors significantly by going passwordless\u2014no credentials are passed around! Compared to traditional password-based solutions, Magic eliminates the case where users can be phished for compromising account information.\n\nPhishing attacks\n\nPlus, if a magic link email is lost or stolen (or even somehow compromised in transit), a user's account is safe! The token included in the magic link email is only privileged to verify a login request from the device and/or browsing context that initiated the request. An attacker would require physical access to the user's device and unencrypted email inbox to be malicious.\n\nHowever, a motivated attacker could create an identical replica of your application, which is a known phishing pattern that occurs today. For this case, we recommend developers to whitelist specific domains for their Publishable API Keys on the Magic Dashboard so that illegitimate applications cannot forge requests through the Magic SDKs.\n\nMagic Dashboard", "explanation": "**Summary of '#What if someone tries to phish users with a fraudulent magic link email?' Documentation**\n\nThis documentation section addresses the concern of phishing attacks on users through fraudulent magic link emails. The main purpose is to inform developers and users about the measures Magic Labs has taken to mitigate phishing attacks and provide recommendations on how to further prevent them.\n\n**Key Points:**\n\n1. Magic's passwordless approach minimizes attack vectors by not requiring credentials to be passed around.\n2. Magic links contain tokens that can only verify login requests from the device and browsing context that initiated the request, making it difficult for attackers to compromise accounts.\n3. If a magic link email is compromised, the attacker would still need physical access to the user's device and unencrypted email inbox to be malicious.\n4. To prevent phishing attacks through identical replicas of an application, developers are recommended to whitelist specific domains for their Publishable API Keys on the Magic Dashboard.\n\nOverall, this documentation section aims to reassure users and developers that Magic Labs is actively working to prevent phishing attacks and provides guidance on how to further secure accounts.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/home/faqs/dedicated-wallet#chunk-12", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nRight now there isn't a way, but we will soon implement a feature that enables developers to be able to completely customize the magic link email, and that will include being able to add your company-specific Terms of Service.", "explanation": "**Explanation and Purpose of Documentation Section**\n\nThis documentation section is titled '#Is there a way to add custom text to the magic link email?' and is found on the dedicated wallet FAQs page of Magic Labs' documentation.\n\n**What it is about:**\nThe section addresses a common inquiry about whether it is possible to add custom text to the magic link email, which is sent to users during the wallet setup or login process.\n\n**Main Purpose:**\nThe main purpose of this section is to inform developers and users that, as of the current documentation, it is not possible to add custom text to the magic link email. However, the section also provides reassurance that a feature to enable complete customization of the magic link email, including adding company-specific Terms of Service, will be implemented in the future.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/home/faqs/dedicated-wallet#chunk-13", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n#\n\nSome country codes are blocked due to heavy spam traffic from the region. If a user's country code is blocked they may still authenticate through email.\n\nCurrently blocked country codes:\n\n+7, +20, +53, +62, +92, +94, +98, +221, +225, +231, +234, +235, +241, +243, +244, +249, +263, +291, +370, +375, +591, +670, +855, +870, +880, +881, +882, +883, +961, +962, +963, +964, +968, +992, +994, +996, +998, +44745, +44778, +44783, +447624, +4477003, +4478299", "explanation": "**Summary and Main Purpose:**\n\nThe documentation section \"#Questions Around SMS - #Is my country code supported?\" explains which country codes are supported or blocked for SMS authentication in the Magic Labs embedded wallet. The main purpose of this section is to inform users about potential limitations when trying to authenticate via SMS, specifically due to heavy spam traffic from certain regions. It allows users to determine if their country code is supported or not, and provides an alternative authentication method (via email) if their country code is blocked.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/home/faqs/dedicated-wallet#chunk-14", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n#\n\nBy default, users remain authenticated with Magic for up to 7 days (or until they logout or browser data is cleared). Developers can enable and configure auto refresh sessions in our developer dashboard, extending the session up to 90 days instead of 7. See Session Management for more.\n\ndeveloper dashboard\n\nSession Management\n\nIf you're building a custom backend, we recommend our Decentralized ID token as a way to initiate server-side sessions. The DID Token is a cryptographically-generated proof of user authentication. Your resource server simply needs to validate the token and set an HTTPS session cookie. This option gives you the flexibility of maintaining your own sessions without storing user secrets.\n\nDecentralized ID token", "explanation": "This section of the Magic Labs embedded wallet documentation explains the duration of a user's logged-in session and the options available to manage it.\n\n**Default Session Duration:** By default, a user remains authenticated with Magic for up to 7 days (or until they manually log out or clear their browser data).\n\n**Configurable Session Duration:** Through the developer dashboard, developers can enable and configure auto-refresh sessions to extend the user authentication period from 7 days to up to 90 days.\n\n**Decentralized ID Token (Alternative Option):** For custom backend developments, Magic Labs recommends using the Decentralized ID token to initiate server-side sessions. This option allows for flexible session management without storing user secrets, by having the resource server validate the token and set an HTTPS session cookie.\n\nThe main purpose of this section is to provide developers with options and recommendations for managing user authentication sessions to suit their specific use cases and backend implementations.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/home/faqs/dedicated-wallet#chunk-15", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nThe session (how long a user is logged in for) is set by Magic through cookies/browser storage. Client-side, you can tell if a user has a valid session by calling magic.user.isLoggedIn which will return true or false.\n\nmagic.user.isLoggedIn\n\ntrue\n\nfalse\n\nA DID token is proof of authentication, not necessarily proof of having a valid session. That's because the getIdToken sdk method can create a token that expires far in the future, and just because a token was theoretically created with an expiration for one year in the future, the session set by Magic may not still be valid. The DID token that's returned from loginWithMagicLink has a default lifespan of 15 minutes and is generally used to send to the server after login to validate its authenticity with the admin sdk validate function. The DID token can be used to access a protected API route on the server if stored in a cookie or client-side storage. You can create a token with getIdToken any time a user is logged in.\n\nDID token\n\ngetIdToken\n\nloginWithMagicLink\n\nvalidate\n\nDID token\n\ngetIdToken\n\nDevelopers can control how long the Magic session lasts in the developer dashboard.\n\ndeveloper dashboard", "explanation": "**Session vs DID Token: Understanding the Difference**\n\nThe '#Session vs DID Token?' section in the Magic Labs embedded wallet documentation explains the distinction between a user's session and a DID (Decentralized Identifier) token.\n\n**Main Purpose:**\n\nThe main purpose of this section is to clarify that a user's session and a DID token serve different purposes and have different lifespans.\n\n**Key Takeaways:**\n\n* **Session:** A session refers to the duration a user is logged in for, controlled by Magic through cookies/browser storage. It can be checked using `magic.user.isLoggedIn`.\n* **DID Token:** A DID token is proof of authentication, not necessarily proof of a valid session. It has a default lifespan of 15 minutes and can be created using `getIdToken` whenever a user is logged in.\n* **Key differences:**\n\t+ A DID token can expire in the future, but the session may not still be valid.\n\t+ A DID token is used to validate authenticity with the admin SDK validate function, while a session is used to check if a user is logged in.\n\n**Developer Control:**\n\nDevelopers can control the duration of the Magic session in the developer dashboard.\n\nBy understanding the difference between a session and a DID token, developers can use them effectively in their applications, ensuring secure authentication and authorization mechanisms.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/home/faqs/dedicated-wallet#chunk-16", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nThe issuer is the unique ID provided by Magic for each user. The DID token shouldn't ever be used as the unique ID because for each user, and each login, the token is unique. When decoded, it contains information about the login, including a timestamp.\n\nissuer\n\nDID token", "explanation": "**Unique User ID Documentation Explanation**\n\nThis documentation section explains the correct unique user ID to save in a database when integrating Magic Labs embedded wallet. The main purpose is to advise integrators to use the \"issuer\" ID instead of the \"DID token\" as the unique user identifier.\n\nThe DID token is not suitable for this purpose because it changes with each login and contains information about the login session, including a timestamp. In contrast, the \"issuer\" ID is a unique and persistent identifier provided by Magic for each user, making it the recommended choice for storing in a database to accurately identify individual users.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/home/faqs/dedicated-wallet#chunk-17", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nWhen a user logs out, the session will expire but a previously generated DID token is not automatically invalidated. The only way for a once-valid DID token to be invalidated is for it to expire. That's why it's best to create short-lasting DID tokens when the user is logged in and re-generate them as needed (if needed) by your application.", "explanation": "**Explanation:**\n\nThe section \"#Are DID tokens invalidated when a user logs out?\" clarifies the behavior of Decentralized Identifier (DID) tokens when a user logs out of the Magic Labs embedded wallet. \n\n**Main purpose:**\n\nThe main purpose of this documentation section is to inform developers that DID tokens, once generated, remain valid even after a user logs out, unless they expire. It advises developers to create short-lasting DID tokens and re-generate them as needed to maintain session security and control.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/home/faqs/dedicated-wallet#chunk-18", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n#\n\nWhile the Auto Refresh sessions feature is enabled, Magic will use the browser's IndexDB to store refresh tokens under your domain. These refresh tokens can be exchanged for a Magic session. If your application is vulnerable to Cross-Site Scripting (XSS), it is not within Magic's control how an attacker will exfiltrate these refresh tokens. We strongly recommend that you review OWASP's documentation on XSS vulnerabilities. OWASP also provides a great starter sheet for XSS prevention.\n\nIndexDB\n\nMagic session\n\nXSS vulnerabilities\n\nstarter sheet for XSS prevention\n\nIf you are a Web 3 developer, we strongly encourage you in particular to understand your application's exposure to XSS. A successful XSS attack targeting a Magic refresh token on your application could translate to the attacker owning your end user's Web 3 address/wallet.", "explanation": "**Refresh Token Security - Securing the Magic Refresh Token**\n\nThis documentation section discusses the security measures required to protect the Magic refresh tokens stored in the browser's IndexDB when using the Auto Refresh sessions feature. \n\n**Main Purpose:**\n\nThe main purpose of this section is to alert developers, particularly those working on Web 3 applications, about the potential risks of Cross-Site Scripting (XSS) vulnerabilities that could compromise the Magic refresh tokens. \n\n**Key Points:**\n\n1. Magic stores refresh tokens in the browser's IndexDB under the application's domain.\n2. These tokens can be exchanged for a Magic session.\n3. If the application is vulnerable to XSS, Magic cannot prevent an attacker from exploiting the refresh tokens.\n4. Developers are urged to review OWASP's documentation on XSS vulnerabilities and use the provided starter sheet for XSS prevention to mitigate the risk.\n\n**Conclusion:**\n\nSecuring the Magic refresh token is crucial to prevent unauthorized access to end users' Web 3 wallets. By understanding the risks and taking necessary precautions to prevent XSS vulnerabilities, developers can ensure the security and integrity of their Web 3 applications.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/home/faqs/dedicated-wallet#chunk-19", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n#\n\nMagic provides robust blockchain support, including the ability to emit requests directly to your own, custom node infrastructure. To maintain a high-level of security, we require that customers' coordinate with our support team to allow the domain of your specific node provider to work within our <iframe>. Please reach out via our help widget If your app uses Universal wallets and you see errors similar to the following:\n\n<iframe>", "explanation": "**Section Explanation: Resolving Custom Node Configuration Issues due to CSP Errors**\n\nThis documentation section addresses an issue that may occur when customers attempt to use their own custom node configuration with Magic Labs' embedded wallet. The problem arises when Content Security Policy (CSP) errors prevent their custom node from functioning properly within Magic's iframe.\n\n**Main Purpose:**\n\nThe primary purpose of this section is to inform customers about the necessary steps to resolve these CSP errors and ensure their custom node configuration works seamlessly with Magic Labs' wallet. It instructs customers to coordinate with Magic's support team to allow their specific node provider's domain to work within the iframe, thereby resolving the issue and enabling their custom node configuration to function as intended.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/home/faqs/dedicated-wallet#chunk-20", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nDevelopers can now call the revealPrivateKey method to initaite the private key reveal flow within their apps. Users no longer need to leave your app to get their private keys! This method is available on our Web, React Native, and Android SDKs. If your app is not able to use this method please continue reading about how you may request a private key reveal page.\n\nrevealPrivateKey\n\nWeb\n\nReact Native\n\nAndroid\n\nFor applications that aren't able to call the reveal private key method, \u2060Magic creates a private key reveal page for your users to log into using the same login methods as your app. This page is only made for your app upon request. When the user logs in they will follow intuitive prompts to reveal their private key. If you would like your users to be able to view and export their private key, please contact us using the chat widget in the bottom-right corner of this page with the following information:\n\n\u2022 Your API key (starts with pk_live)\n\n\u2022 A list of blockchains you are using\n\n\u2022 Your app name for the endpoint, such as https://reveal.magic.link/your-app-name\n\nYour API key (starts with pk_live)\n\npk_live\n\nA list of blockchains you are using\n\nYour app name for the endpoint, such as https://reveal.magic.link/your-app-name\n\nhttps://reveal.magic.link/your-app-name\n\nThe login methods available on your reveal page will match the login methods that you have activated in your Magic developer dashboard (found under \"Passwordless Login\" and \"Social Login\"). Please make sure to deactivate any login methods that you are not using. Login methods can be added and removed at any point and changes will be immediately visible on your reveal page.\n\nMagic developer dashboard\n\nThe look of the UI for your reveal page will also match the settings configured within the \"branding\" section of your developer dashboard. This includes the logo shown, the primary color, as well as choosing between light/dark mode. More details on branding and UI customization can be found here.\n\nfound here", "explanation": "**Viewing and Exporting Private Keys: Developer Options and Customizable Reveal Pages**\n\nThe purpose of this document section is to explain how developers can enable users to view and export their private keys within their application, while utilizing the Magic Labs embedded wallet service. \n\nDevelopers have two options:\n\n1. **revealPrivateKey method**: Developers can integrate this method into their application using Web, React Native, or Android SDKs. This approach allows users to initiate the private key reveal flow without leaving the application.\n\n2. **Customizable private key reveal page**: For developers who cannot use the revealPrivateKey method, Magic Labs can create a dedicated private key reveal page for their application. This page is only generated upon request, and users can log in using the same methods as their app. Developers must provide their API key, list of used blockchains, and desired app endpoint (e.g., https://reveal.magic.link/your-app-name).\n\nThe reveal page is customizable through the Magic developer dashboard, including:\n\n* Login methods (passwordless login, social login, etc.)\n* Branding and UI settings (logo, primary color, light/dark mode)\n\nDevelopers should ensure they deactivate unused login methods and configure the desired branding to ensure a seamless user experience.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/home/faqs/dedicated-wallet#chunk-21", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nIf you have an existing private key reveal page hosted by Magic and need to make changes, please reach out via our support widget in the bottom-right corner of this page.", "explanation": "This documentation section is about modifying a legacy private key reveal page, which is hosted by Magic. \n\nIts main purpose is to direct users who have an existing private key reveal page to contact Magic's support team for making any necessary changes to the page. The support can be initiated by using the support widget available at the bottom-right corner of the page.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/home/faqs/dedicated-wallet#chunk-22", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n#\n\nYou can create a test email account and provide the login credentials on submission. The reviewer can authenticate by logging into the test email account and clicking the link or getting the OTP code.\n\nAlternatively, you could provide the reviewer with a test email address you already own, such as `name+test@company.com` and click the link when triggered by the reviewer to log them in.", "explanation": "This documentation section is about providing a test account for App Store reviewers to test the Magic Labs embedded wallet within an application. \n\nThe main purpose is to instruct developers on how to create a test account that allows App Store reviewers to test the wallet's login functionality without requiring them to create their own account or having access to sensitive information.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/home/faqs/dedicated-wallet#chunk-23", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nBerachain is an EVM-compatible L1 blockchain built on-top of the Cosmos-SDK, which uses Proof-of-Liquidity consensus.\n\nBerachain\n\nProof-of-Liquidity\n\nAs Berachain is EVM compatible, you can follow the Ethereum documentation to send your first transaction and utilize all other wallet features.\n\nEthereum", "explanation": "**Overview of Berachain**\n\nThe documentation section \"Berachain - Overview\" describes Berachain as a Layer 1 (L1) blockchain that is compatible with the Ethereum Virtual Machine (EVM) and built on top of the Cosmos-SDK framework. The key feature of Berachain is its use of Proof-of-Liquidity (PoL) consensus, which is a consensus mechanism that differs from traditional Proof-of-Work (PoW) or Proof-of-Stake (PoS) mechanisms.\n\n**Main Purpose**\n\nThe main purpose of Berachain is to provide an EVM-compatible blockchain that can leverage the existing Ethereum ecosystem and tools. This means that developers can use the same wallets, transaction methods, and smart contracts they use on Ethereum, making it easier to deploy and interact with applications on Berachain.\n\nIn essence, Berachain is designed to offer a scalable, secure, and compatible platform for building decentralized applications (dApps) that can tap into the liquidity and ecosystem of Ethereum.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/evm/berachain#chunk-1", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nEnsure you have installed the Magic SDK and have access to your API key, follow the quickstart to get started.\n\nquickstart\n\nCopy\n\n01\n\n// Setting network to point to Berachain Artio testnet\n\n01\n\n// Setting network to point to Berachain Artio testnet\n\n02\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_PUBLISHABLE_API_KEY'\n\n,\n\n{\n\n02\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_PUBLISHABLE_API_KEY'\n\n,\n\n{\n\n03\n\nnetwork\n\n:\n\n{\n\n03\n\nnetwork\n\n:\n\n{\n\n04\n\nrpcUrl\n\n:\n\n'https://artio.rpc.berachain.com/'\n\n,\n\n04\n\nrpcUrl\n\n:\n\n'https://artio.rpc.berachain.com/'\n\n,\n\n05\n\nchainId\n\n:\n\n80085\n\n,\n\n05\n\nchainId\n\n:\n\n80085\n\n,\n\n06\n\n}\n\n,\n\n06\n\n}\n\n,\n\n07\n\n}\n\n)\n\n;\n\n07\n\n}\n\n)\n\n;", "explanation": "**Configuration of Berachain**\n\nThe section titled '#Configure Berachain' provides instructions on how to set up and connect to the Berachain network using the Magic SDK.\n\n**Main Purpose:**\n\nThe primary purpose of this section is to guide developers in configuring their Magic SDK instance to interact with the Berachain Artio testnet. This involves specifying the RPC (Remote Procedure Call) URL and chain ID for Berachain, which enables communication between the application and the Berachain network.\n\n**Key Steps:**\n\n1. Install the Magic SDK and obtain a publishable API key.\n2. Initialize a new Magic instance, passing in the API key.\n3. Configure the network settings:\n\t* Set `rpcUrl` to `https://artio.rpc.berachain.com/` (Berachain Artio testnet RPC endpoint).\n\t* Set `chainId` to `80085` (Berachain's chain ID).\n\nBy following these steps, developers can successfully connect to the Berachain network using the Magic SDK and start building applications that interact with the Berachain blockchain.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/evm/berachain#chunk-2", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 All Auth, User and Wallet module methods for Dedicated Wallets\n\n\u2022 All EVM Provider functionality to respond to supported RPC methods\n\nAuth\n\nUser\n\nWallet\n\nDedicated Wallets\n\nRPC methods\n\nNeed a feature or see a problem? File an issue on our github repo.\n\ngithub repo", "explanation": "This documentation section, titled '#Compatibility', is about the compatibility of Magic Labs' embedded wallet with the Berachain blockchain. \n\nThe main purpose of this section is to list the compatible features and functionalities of the Magic Labs wallet when used with the Berachain blockchain. Specifically, it states that the wallet's:\n\n- Authentication (Auth), User, and Wallet module methods\n- EVM (Ethereum Virtual Machine) Provider functionality, supporting specific RPC (Remote Procedure Call) methods\n\nare all compatible with Dedicated Wallets on Berachain. \n\nThis information helps developers determine if Magic Labs' wallet can be used with the Berachain blockchain and what features are available when integrating the two.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/evm/berachain#chunk-3", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 Documentation: https://docs.berachain.com/\n\n\u2022 Block Explorer: https://artio.beratrail.io/ (Testnet)\n\nhttps://docs.berachain.com/\n\n\u2022 https://artio.beratrail.io/ (Testnet)\n\nhttps://artio.beratrail.io/\n\n\u2022 Faucets: https://docs.berachain.com/developers/testnet-faucet\n\nhttps://docs.berachain.com/developers/testnet-faucet", "explanation": "**Resources & Tools for Berachain Integration**\n\nThis section provides essential links for developers integrating Berachain into their applications using Magic Labs embedded wallet. The main purpose is to offer convenient access to Berachain's documentation, tools, and resources.\n\nHere's a breakdown of what each link provides:\n\n* **Documentation**: Official Berachain documentation for understanding the blockchain's architecture, smart contracts, and development guidelines.\n* **Block Explorer**: A testnet block explorer to inspect, verify, and debug transactions on Berachain's test network. It also links to the main network explorer.\n* **Faucets**: A testnet faucet for developers to obtain Berachain tokens for testing and development purposes.\n\nBy providing these resources, Magic Labs aims to facilitate seamless integration and development on the Berachain network, making it easier for developers to get started and build on the platform.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/evm/berachain#chunk-4", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nThe Magic SDK for Node is your entry-point to secure, passwordless authentication for your application. This guide will cover some important topics for getting started with Node APIs and to make the most of Magic's features.", "explanation": "The documentation section titled \"Node API Reference - Overview\" is an introduction to the Magic SDK (Software Development Kit) for Node.js. This SDK is a tool that enables developers to integrate secure, passwordless authentication into their applications.\n\nThe main purpose of this guide is to provide developers with essential information and guidance on how to get started with using the Magic Node.js API, making the most of its features to implement seamless and secure authentication for their users.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/node#chunk-1", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nThe Magic class is the entry-point to the Magic SDK. It must be instantiated with a Magic secret key.\n\n#\n\nCopy\n\n01\n\nnpm\n\ninstall\n\n@magic-sdk/admin\n\n01\n\nnpm\n\ninstall\n\n@magic-sdk/admin", "explanation": "This section of the documentation, titled \"'#Getting Started - #Installation\", is about setting up and installing the Magic SDK for Node.js. \n\nIt explains that to use the Magic SDK, you need to first create an instance of the 'Magic' class, and to do this, you require a Magic secret key.\n\nThe main purpose of this section is to guide developers on how to install the required package (`@magic-sdk/admin`) via npm (Node Package Manager), which is essential for integrating the Magic wallet functionality into their Node.js applications.\n\nIn a concise manner: It's about installing and setting up the Magic wallet SDK for your Node.js project.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/node#chunk-2", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n#\n\nMagic.init()\n\nParameter\n\nType\n\nDefinition\n\nsecretApiKey\n\nsecretApiKey\n\nString\n\nYour secret API Key retrieved from the Magic Dashboard.\n\noptions.endpoint?\n\noptions.endpoint?\n\nString\n\nA URL pointing to the Magic API. You should not need to provide this value except in case you are building highly custom integration tests.", "explanation": "**Constructor Overview: Magic.init()**\n\nThe `Magic.init()` constructor is a crucial function in the Magic Labs embedded wallet documentation. It serves as the entry point for initializing the Magic SDK in a Node.js environment. \n\n**Main Purpose:**\n\nThe primary purpose of `Magic.init()` is to set up and authenticate your Magic SDK instance using your secret API key. This key is obtained from the Magic Dashboard. \n\n**Key Parameters:**\n\n* `secretApiKey`: A string parameter that requires your secret API key from the Magic Dashboard. This is a required parameter.\n* `options.endpoint`: An optional string parameter that specifies the URL pointing to the Magic API. This value is usually not needed unless you're creating custom integration tests.\n\nBy initializing the Magic SDK with your secret API key, you can securely interact with the Magic API, enabling features such as user authentication and wallet integration in your application.\n\nHere's an example of how to use `Magic.init()` to get started:\n\n```javascript\nconst { Magic } = require('magic-sdk');\n\nconst magic = new Magic('YOUR_SECRET_API_KEY');\n```\n\nReplace `YOUR_SECRET_API_KEY` with your actual secret API key obtained from the Magic Dashboard.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/node#chunk-3", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\nconst\n\n{\n\nMagic\n\n}\n\n=\n\nrequire\n\n(\n\n'@magic-sdk/admin'\n\n)\n\n;\n\n01\n\nconst\n\n{\n\nMagic\n\n}\n\n=\n\nrequire\n\n(\n\n'@magic-sdk/admin'\n\n)\n\n;\n\n02\n\n02\n\n03\n\nlet\n\nmagic\n\n;\n\n03\n\nlet\n\nmagic\n\n;\n\n04\n\n04\n\n05\n\n// Construct with an API key:\n\n05\n\n// Construct with an API key:\n\n06\n\nmagic\n\n=\n\nawait\n\nMagic\n\n.\n\ninit\n\n(\n\n'SECRET_API_KEY'\n\n)\n\n;\n\n06\n\nmagic\n\n=\n\nawait\n\nMagic\n\n.\n\ninit\n\n(\n\n'SECRET_API_KEY'\n\n)\n\n;\n\n07\n\n07\n\n08\n\n// Construct with an API key plus options:\n\n08\n\n// Construct with an API key plus options:\n\n09\n\nmagic\n\n=\n\nawait\n\nMagic\n\n.\n\ninit\n\n(\n\n'SECRET_API_KEY'\n\n,\n\n{\n\nendpoint\n\n:\n\n'...'\n\n}\n\n)\n\n;\n\n09\n\nmagic\n\n=\n\nawait\n\nMagic\n\n.\n\ninit\n\n(\n\n'SECRET_API_KEY'\n\n,\n\n{\n\nendpoint\n\n:\n\n'...'\n\n}\n\n)\n\n;", "explanation": "**Initialization of Magic Labs Embedded Wallet SDK**\n\nThe Initialization section in the Magic Labs embedded wallet documentation explains how to initialize the Magic SDK in a Node.js environment. \n\n**Main Purpose:**\nThe main purpose of this section is to provide instructions on how to authenticate and set up the Magic SDK instance using a SECRET_API_KEY, which is required to interact with the Magic Labs services.\n\n**Key Points:**\n\n1. Import the `Magic` class from the `@magic-sdk/admin` module.\n2. Create a `magic` instance using the `init()` method and pass in your SECRET_API_KEY.\n3. Optionally, you can pass additional configuration options, such as an `endpoint` URL, as an object in the second argument of the `init()` method.\n\nBy following these steps, you can successfully initialize the Magic Labs embedded wallet SDK in your Node.js application.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/node#chunk-4", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nThe Token Module and its members are accessible on the Magic Admin SDK instance by the token property.\n\ntoken\n\nCopy\n\n01\n\nconst\n\n{\n\nMagic\n\n}\n\n=\n\nrequire\n\n(\n\n'@magic-sdk/admin'\n\n)\n\n;\n\n01\n\nconst\n\n{\n\nMagic\n\n}\n\n=\n\nrequire\n\n(\n\n'@magic-sdk/admin'\n\n)\n\n;\n\n02\n\n02\n\n03\n\nconst\n\nmagic\n\n=\n\nawait\n\nMagic\n\n.\n\ninit\n\n(\n\n'SECRET_API_KEY'\n\n)\n\n;\n\n03\n\nconst\n\nmagic\n\n=\n\nawait\n\nMagic\n\n.\n\ninit\n\n(\n\n'SECRET_API_KEY'\n\n)\n\n;\n\n04\n\n04\n\n05\n\nmagic\n\n.\n\ntoken\n\n;\n\n05\n\nmagic\n\n.\n\ntoken\n\n;\n\n06\n\nmagic\n\n.\n\ntoken\n\n.\n\ngetIssuer\n\n;\n\n06\n\nmagic\n\n.\n\ntoken\n\n.\n\ngetIssuer\n\n;\n\n07\n\nmagic\n\n.\n\ntoken\n\n.\n\ngetPublicAddress\n\n;\n\n07\n\nmagic\n\n.\n\ntoken\n\n.\n\ngetPublicAddress\n\n;\n\n08\n\nmagic\n\n.\n\ntoken\n\n.\n\ndecode\n\n;\n\n08\n\nmagic\n\n.\n\ntoken\n\n.\n\ndecode\n\n;\n\n09\n\nmagic\n\n.\n\ntoken\n\n.\n\nvalidate\n\n;\n\n09\n\nmagic\n\n.\n\ntoken\n\n.\n\nvalidate\n\n;\n\n#\n\ngetIssuer\n\n#\n\n\u2022 didToken (String): A Decentralized ID Token generated by a Magic user on the client-side.\n\ndidToken\n\nDecentralized ID Token", "explanation": "**Token Module - getIssuer: Arguments**\n\nThe `getIssuer` function is part of the `Token Module` in the Magic Labs embedded wallet documentation. This function is used to retrieve the issuer of a Decentralized ID (DID) Token.\n\n**Main Purpose:**\n\nThe primary purpose of `getIssuer` is to extract the issuer's information from a DID Token. A DID Token is a unique token generated by a Magic user on the client-side.\n\n**Input Argument:**\n\n* `didToken`: A required string argument representing the Decentralized ID Token.\n\nBy passing a valid DID Token to the `getIssuer` function, you can obtain the issuer's details associated with that token. This can be useful in various use cases, such as authentication, authorization, or identity verification.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/node#chunk-5", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 A Decentralized ID (iss) of the Magic user who generated the DID Token\n\niss", "explanation": "The '#Returns' section in the provided documentation URL is related to the response or output of a function or API call in the Magic Labs embedded wallet Node SDK.\n\nIn specific, this section explains that when a DID (Decentralized Identifier) Token is generated by a Magic user, the response will include a property called `'iss'`, which stands for \"issuer\".\n\nThe main purpose of this `'iss'` property is to identify the Magic user who generated the DID Token. It uniquely represents the user and is used as their Decentralized ID.\n\nThink of it like a return address or a unique identifier that allows the system to associate the DID Token with the correct user who created it. This information is crucial for verification and authentication processes in the Magic Labs ecosystem.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/node#chunk-6", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\ngetPublicAddress\n\nGets the cryptographic public address of the Magic User who generated the supplied token.\n\n#\n\n\u2022 didToken (String): A Decentralized ID Token generated by a Magic user on the client-side\n\ndidToken", "explanation": "The `#getPublicAddress` section of the documentation describes a function that retrieves the public cryptographic address of a Magic user. \n\n**Purpose:** Its main purpose is to allow server-side applications to retrieve the user's public address, which can be used for various purposes such as cryptocurrency transactions or identity verification.\n\n**Inputs:** The function takes a single argument, `didToken`, which is a Decentralized ID Token generated by a Magic user on the client-side.\n\nIn essence, `#getPublicAddress` helps link a user's Magic account to their cryptographic identity, enabling secure and authenticated interactions on the blockchain.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/node#chunk-7", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 The public address of the Magic User who generated the DID Token. Currently, this value is associated with the Ethereum blockchain.\n\npublic address", "explanation": "The \"#Returns\" section is a documentation block that explains the response or output of a specific function or API call. \n\nThis section in particular describes what the API returns when a DID token is generated. \n\nThe main purpose of this section is to inform developers about the data they can expect to receive as a result of calling the API. In this case, the API returns the 'public address' of the Magic User who generated the DID token, which is currently associated with the Ethereum blockchain.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/node#chunk-8", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\ndecode\n\nDecodes a Decentralized ID Token from a Base64 string into a tuple of its individual components.\n\n#\n\n\u2022 didToken (String): A Decentralized ID Token generated by a Magic user on the client-side\n\ndidToken", "explanation": "This section, '#decode - #Arguments', is about the `decode` function in the Magic Labs embedded wallet documentation, specifically for the Node.js server-side SDK. \n\nThe `decode` function is used to extract and decode a Decentralized ID (DID) Token, which is a Base64-encoded string. This token is generated by a Magic user on the client-side.\n\nThe `decode` function takes one argument:\n\n- `didToken`: a string representing the Decentralized ID Token to be decoded.\n\nThe main purpose of the `decode` function is to break down the DID Token into its individual components, which can then be used for further authentication, verification, or other purposes within the application.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/node#chunk-9", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 proof (String): A digital signature that proves the validity of the given claim\n\n\u2022 claim (Object): Unsigned data the user asserts. This should equal the proof after Elliptic Curve recovery. See Decentralized ID Token Specification for fields inside the claim.\n\nproof\n\nclaim\n\nclaim\n\nproof\n\nDecentralized ID Token Specification\n\nclaim\n\nThe claim is automatically parsed to the following interface:\n\nclaim\n\nCopy\n\n01\n\ninterface\n\nClaim\n\n{\n\n01\n\ninterface\n\nClaim\n\n{\n\n02\n\niat\n\n:\n\nnumber\n\n;\n\n// Issued At Timestamp\n\n02\n\niat\n\n:\n\nnumber\n\n;\n\n// Issued At Timestamp\n\n03\n\next\n\n:\n\nnumber\n\n;\n\n// Expiration Timestamp\n\n03\n\next\n\n:\n\nnumber\n\n;\n\n// Expiration Timestamp\n\n04\n\niss\n\n:\n\nstring\n\n;\n\n// Issuer of DID Token\n\n04\n\niss\n\n:\n\nstring\n\n;\n\n// Issuer of DID Token\n\n05\n\nsub\n\n:\n\nstring\n\n;\n\n// Subject\n\n05\n\nsub\n\n:\n\nstring\n\n;\n\n// Subject\n\n06\n\naud\n\n:\n\nstring\n\n;\n\n// Audience\n\n06\n\naud\n\n:\n\nstring\n\n;\n\n// Audience\n\n07\n\nnbf\n\n:\n\nnumber\n\n;\n\n// Not Before Timestamp\n\n07\n\nnbf\n\n:\n\nnumber\n\n;\n\n// Not Before Timestamp\n\n08\n\ntid\n\n:\n\nstring\n\n;\n\n// DID Token ID\n\n08\n\ntid\n\n:\n\nstring\n\n;\n\n// DID Token ID\n\n09\n\nadd\n\n:\n\nstring\n\n;\n\n// (optional) Misc additional signed data\n\n09\n\nadd\n\n:\n\nstring\n\n;\n\n// (optional) Misc additional signed data\n\n10\n\n}\n\n10\n\n}\n\nAs a convenience, the above interface is available to your code in TypeScript:\n\nTypeScript\n\nCopy\n\n01\n\nimport\n\n{\n\nClaim\n\n}\n\nfrom\n\n'@magic-sdk/admin'\n\n;\n\n01\n\nimport\n\n{\n\nClaim\n\n}\n\nfrom\n\n'@magic-sdk/admin'\n\n;", "explanation": "**Explanation of '#Returns' Documentation Section**\n\nThe '#Returns' section in the Magic Labs embedded wallet documentation explains the structure and content of the response returned by the server-side SDK.\n\n**Purpose:**\n\nThe main purpose of this section is to provide information about the proof and claim objects returned by the server-side SDK, specifically the contents and format of these objects.\n\n**Key Components:**\n\n1. **Proof**: A digital signature that proves the validity of the given claim.\n2. **Claim**: An unsigned object that the user asserts, which is expected to match the proof after Elliptic Curve recovery.\n\n**Claim Interface:**\n\nThe claim object is automatically parsed to an interface with the following fields:\n\n* `iat`: Issued At Timestamp (Number)\n* `ext`: Expiration Timestamp (Number)\n* `iss`: Issuer of DID Token (String)\n* `sub`: Subject (String)\n* `aud`: Audience (String)\n* `nbf`: Not Before Timestamp (Number)\n* `tid`: DID Token ID (String)\n* `add`: Misc additional signed data (Optional String)\n\nThis interface is available for import in TypeScript as `Claim` from `@magic-sdk/admin`.\n\nIn summary, the '#Returns' section provides essential information about the response format and structure, enabling developers to work with the proof and claim objects effectively.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/node#chunk-10", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nvalidate\n\nValidates a Decentralized ID token.\n\n#\n\n\u2022 didToken (String): A Decentralized ID Token generated by a Magic user on the client-side\n\n\u2022 attachment? (String): Arbitrary, serialized data to be used for recovery of the add field on the Decentralized ID Token (Defaults to \"none\")\n\ndidToken\n\nattachment?\n\nadd\n\n\"none\"", "explanation": "**Overview of `validate` Endpoints and Arguments**\n\nThe `validate` endpoint is a function that verifies the authenticity of a Decentralized ID (DID) token, ensuring that it's legitimate and trustworthy. This endpoint plays a vital role in the overall security and authentication process of a Magic Labs embedded wallet.\n\n**Arguments Breakdown:**\n\n* `didToken`: A required string argument that represents the Decentralized ID Token generated by the Magic user on the client-side. This token is used for authentication and authorization purposes.\n* `attachment`: An optional string argument that contains arbitrary, serialized data. This attachment is utilized for recovery of the 'add' field within the Decentralized ID Token. If not provided, it defaults to the value \"none\".\n* `add`: Not an argument per se, but rather a mention of a field within the Decentralized ID Token that is recoverable using the attachment.\n* `\"none\"`: Default value for the `attachment` if not provided.\n\n**Purpose of `validate`:**\n\nThe primary objective of the `validate` endpoint is to authenticate and verify the legitimacy of a DID token, ensuring that it's not tampered with or malicious. This verification process enables the embedded wallet to trust the authenticity of the user's identity, thereby authorizing or denying access to protected resources.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/node#chunk-11", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 void: The function will return if the specified DID token is authentic and not expired. If the token is forged or otherwise invalid, the function will throw a descriptive error.\n\nvoid", "explanation": "The `#Returns` section is describing the output or behavior of a function in the Magic Labs embedded wallet API, specifically when using the Node.js SDK.\n\nIn simple terms, it states that this function will:\n\n* Successfully return (`void`) if the provided DID (Decentralized Identifier) token is authentic and not expired.\n* Throw a descriptive error if the token is fake, tampered with, or otherwise invalid.\n\nThe main purpose of this section is to inform developers what to expect when calling this function, allowing them to handle successful cases and errors accordingly in their application.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/node#chunk-12", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nOnly available with Dedicated Wallet.\n\n#\n\ngetMetadataByIssuer\n\nRetrieves information about user by the supplied \"issuer\".\n\n#\n\n\u2022 issuer (String): The user's Decentralized ID, which can be parsed using TokenModule.getIssuer\n\nissuer\n\nTokenModule.getIssuer\n\nTokenModule.getIssuer", "explanation": "**Explanation of `getMetadataByIssuer`**\n\nThe `getMetadataByIssuer` function is a method within the Users Module of the Magic Labs embedded wallet documentation. Its primary purpose is to retrieve user information based on their Decentralized ID, also known as an \"issuer\".\n\n**Main Purpose:**\n\nThe main purpose of `getMetadataByIssuer` is to fetch user metadata by using the issuer's Decentralized ID as a unique identifier. This is useful for applications that need to access user data without requiring the user to log in or provide additional authentication.\n\n**Key Argument:**\n\nThe function takes a single argument:\n\n* `issuer` (String): This is the user's Decentralized ID, which can be obtained using the `TokenModule.getIssuer` method.\n\n**Note:**\n\nThis function is only available for users with a Dedicated Wallet setup.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/node#chunk-13", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 A MagicUserMetadata: The data field contains all of the user meta information.issuer (String): The user's Decentralized IDpublicAddress (String): The authenticated user's public address (a.k.a.: public key). Currently, this value is associated with the Ethereum blockchain.email (String): The user's email addressphoneNumber (String | null): The user's phone numberoauthProvider (String | null): OAuth provider, if anywallets (Object[]): The multichain wallets of the authenticated user\n\nMagicUserMetadata\n\ndata\n\n\u2022 issuer (String): The user's Decentralized ID\n\n\u2022 publicAddress (String): The authenticated user's public address (a.k.a.: public key). Currently, this value is associated with the Ethereum blockchain.\n\n\u2022 email (String): The user's email address\n\n\u2022 phoneNumber (String | null): The user's phone number\n\n\u2022 oauthProvider (String | null): OAuth provider, if any\n\n\u2022 wallets (Object[]): The multichain wallets of the authenticated user\n\nissuer\n\npublicAddress\n\nemail\n\nphoneNumber\n\noauthProvider\n\nwallets", "explanation": "**Explanation of '#Returns' Section**\n\nThe '#Returns' section in the Magic Labs embedded wallet documentation describes the structure of the data returned by the API. Specifically, it outlines the properties of the `MagicUserMetadata` object, which contains information about the authenticated user.\n\n**Main Purpose**\n\nThe main purpose of this section is to provide detailed information about the API response data, allowing developers to understand and work with the returned data. This includes the various attributes of the `MagicUserMetadata` object, such as:\n\n* `issuer`: the user's Decentralized ID\n* `publicAddress`: the user's public address associated with the Ethereum blockchain\n* `email`, `phoneNumber`, and `oauthProvider`: the user's email address, phone number, and OAuth provider (if applicable)\n* `wallets`: an array of multichain wallets associated with the authenticated user\n\nBy understanding the structure and contents of the `MagicUserMetadata` object, developers can effectively parse and utilize the API response data in their applications.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/node#chunk-14", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\ngetMetadataByPublicAddress\n\nRetrieves information about user by the supplied public address.\n\n#\n\n\u2022 publicAddress (String): The user's Ethereum public address, which can be parsed using TokenModule.getPublicAddress\n\npublicAddress\n\nTokenModule.getPublicAddress\n\nTokenModule.getPublicAddress", "explanation": "**getMetadataByPublicAddress: Retrieving User Information**\n\nThe `getMetadataByPublicAddress` section of the Magic Labs documentation describes a function that retrieves user information based on their Ethereum public address.\n\n**Main Purpose:**\nThe main purpose of this function is to fetch metadata about a user by providing their Ethereum public address as an argument. This allows developers to access user information associated with the provided public address.\n\n**Required Argument:**\nThe function takes one required argument:\n\n* `publicAddress`: A string representing the user's Ethereum public address. This address can be obtained using the `TokenModule.getPublicAddress` method.\n\nIn summary, `getMetadataByPublicAddress` is a function that helps developers retrieve user metadata by using their Ethereum public address as a unique identifier.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/node#chunk-15", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 A MagicUserMetadata: The data field contains all of the user meta information.issuer (String): The user's Decentralized IDpublicAddress (String): The authenticated user's public address (a.k.a.: public key). Currently, this value is associated with the Ethereum blockchain.email (String): The user's email addressphoneNumber (String | null): The user's phone numberoauthProvider (String | null): OAuth provider, if anywallets (Object[]): The multichain wallets of the authenticated user\n\nMagicUserMetadata\n\ndata\n\n\u2022 issuer (String): The user's Decentralized ID\n\n\u2022 publicAddress (String): The authenticated user's public address (a.k.a.: public key). Currently, this value is associated with the Ethereum blockchain.\n\n\u2022 email (String): The user's email address\n\n\u2022 phoneNumber (String | null): The user's phone number\n\n\u2022 oauthProvider (String | null): OAuth provider, if any\n\n\u2022 wallets (Object[]): The multichain wallets of the authenticated user\n\nissuer\n\npublicAddress\n\nemail\n\nphoneNumber\n\noauthProvider\n\nwallets", "explanation": "**'Returns' Section Explanation**\n\nThe '#Returns' section from the Magic Labs embedded wallet documentation describes the response data structure returned when successfully authenticating or retrieving user information.\n\n**Main Purpose**\n\nThe main purpose of this section is to outline the contents of the `MagicUserMetadata` object, which contains various pieces of user information, including:\n\n1. Decentralized ID (`issuer`)\n2. Public address or Ethereum public key (`publicAddress`)\n3. Email address (`email`)\n4. Phone number (`phoneNumber`)\n5. OAuth provider (`oauthProvider`)\n6. Multichain wallet information (`wallets`)\n\nThis information is crucial for developers to understand the structure of the data they will receive when using the Magic Labs API, allowing them to properly parse and utilize the user metadata in their application.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/node#chunk-16", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\ngetMetadataByToken\n\nRetrieves information about user by the supplied DID Token.\n\n#\n\n\u2022 didToken (String): A valid Decentralized ID Token generated client-side by a Magic user\n\ndidToken", "explanation": "The `getMetadataByToken` section in the Magic Labs embedded wallet documentation is about a function that allows you to retrieve user information based on a Decentralized ID (DID) Token.\n\n**Main Purpose:**\nThe main purpose of this function is to enable server-side retrieval of user metadata, such as profile information, associated with a valid DID Token generated by a Magic user. This allows developers to authenticate and authorize users on their server-side applications using the provided DID Token.\n\n**Key Argument:**\nThe function requires a single argument: `didToken`, which is a string representing a valid Decentralized ID Token generated by a Magic user client-side.\n\nBy using `getMetadataByToken`, developers can simplify the process of user authentication and access control in their applications, leveraging the security and decentralized nature of Magic's DID Token system.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/node#chunk-17", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 A MagicUserMetadata: The data field contains all of the user meta information.issuer (String): The user's Decentralized IDpublicAddress (String): The authenticated user's public address (a.k.a.: public key). Currently, this value is associated with the Ethereum blockchain.email (String): The user's email addressphoneNumber (String | null): The user's phone numberoauthProvider (String | null): OAuth provider, if anywallets (Object[]): The multichain wallets of the authenticated user\n\nMagicUserMetadata\n\ndata\n\n\u2022 issuer (String): The user's Decentralized ID\n\n\u2022 publicAddress (String): The authenticated user's public address (a.k.a.: public key). Currently, this value is associated with the Ethereum blockchain.\n\n\u2022 email (String): The user's email address\n\n\u2022 phoneNumber (String | null): The user's phone number\n\n\u2022 oauthProvider (String | null): OAuth provider, if any\n\n\u2022 wallets (Object[]): The multichain wallets of the authenticated user\n\nissuer\n\npublicAddress\n\nemail\n\nphoneNumber\n\noauthProvider\n\nwallets", "explanation": "**Overview of '#Returns' Section**\n\nThe '#Returns' section in the Magic Labs embedded wallet documentation explains the structure and content of the data returned by the Magic User API. The main purpose of this section is to provide developers with information on how to parse and utilize the data received from the API.\n\n**Returned Data Format**\n\nThe returned data is in the format of a `MagicUserMetadata` object, which contains several key-value pairs that provide metadata about the authenticated user. The main keys in this object include:\n\n1. `issuer`: A string representing the user's Decentralized ID.\n2. `publicAddress`: A string representing the authenticated user's public address (or public key), currently associated with the Ethereum blockchain.\n3. `email`: A string representing the user's email address.\n4. `phoneNumber`: A string (or null) representing the user's phone number.\n5. `oauthProvider`: A string (or null) representing the OAuth provider used by the user, if any.\n6. `wallets`: An array of objects representing the multichain wallets of the authenticated user.\n\n**Purpose of Returned Data**\n\nThe returned data provides essential information about the authenticated user, including their decentralized identity, public address, contact details, and wallet information. This data can be used by developers to verify user identities, manage user sessions, and integrate wallet functionality into their applications.\n\nBy understanding the structure and content of the returned data, developers can effectively parse and utilize the data to implement various use cases, such as authentication, authorization, and wallet management.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/node#chunk-18", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nlogoutByIssuer\n\nLogs a user out of all client-side Magic SDK sessions given the user's Decentralized ID.\n\n#\n\n\u2022 issuer (String): The user's Decentralized ID, which can be parsed using TokenModule.getIssuer\n\nissuer\n\nTokenModule.getIssuer\n\nTokenModule.getIssuer", "explanation": "**logoutByIssuer: Explanation and Purpose**\n\nThe `logoutByIssuer` function is part of the Magic Labs embedded wallet documentation for server-side SDKs in Node.js. Its primary purpose is to log a user out of all client-side Magic SDK sessions associated with their Decentralized ID (also known as an issuer).\n\n**Main Purpose:**\n\nThe `logoutByIssuer` function takes one argument, `issuer`, which is the user's Decentralized ID. This function is designed to invalidate all active sessions for a given user, effectively logging them out. This ensures that when the user attempts to access their account or wallet, they will be prompted to authenticate again, maintaining the security and integrity of their account.\n\n**Key Argument:**\n\n* `issuer`: A string representing the user's Decentralized ID, which can be obtained using the `TokenModule.getIssuer` method.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/node#chunk-19", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 Promise<void>\n\nPromise<void>", "explanation": "The given section, `#Returns`, is part of the Node server-side SDK documentation for Magic Labs embedded wallet. This section specifically explains the expected return type of a function or method.\n\nIn this case, the `#Returns` section indicates that the function returns a `Promise<void>`. This means that the function is asynchronous and does not return any specific data. Instead, it resolves with no value (`void`) once the operation is completed.\n\nIn simpler terms, the main purpose of this section is to inform developers about what to expect as a result of calling this function. Since it returns a `Promise<void>`, developers should handle it accordingly, potentially using `.then()` or `await` syntax to wait for the promise to resolve before proceeding with their code.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/node#chunk-20", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nlogoutByPublicAddress\n\nLogs a user out of all client-side Magic SDK sessions given the user's public address.\n\n#\n\n\u2022 publicAddress (String): The user's Ethereum public address to log out via the Magic API.\n\npublicAddress\n\npublic address", "explanation": "**Logout by Public Address Endpoint**\n\nThe `logoutByPublicAddress` endpoint is a server-side function provided by Magic Labs' Node SDK. Its primary purpose is to remotely log out a user from all active client-side Magic SDK sessions associated with their Ethereum public address.\n\n**Key Functionality:**\n\n* Takes a single argument: `publicAddress`, which is the user's Ethereum public address.\n* When called, it invalidates all active Magic SDK sessions linked to the provided public address, effectively logging the user out from all connected devices and applications.\n\nIn summary, this endpoint enables developers to programmatically log out users from multiple sessions at once, ensuring a secure and seamless experience when managing user sessions across different devices and platforms.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/node#chunk-21", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 Promise<void>\n\nPromise<void>", "explanation": "This '#Returns' section of the Magic Labs embedded wallet documentation is describing the return value of a function.\n\nThe main purpose is to indicate that the function does not return a value, as denoted by 'Promise<void>'. \n\nIn other words, when this function completes its execution, it will resolve with nothing or 'void' rather than a specific value. This is useful for functions that are primarily used for their side effects, such as sending a request or making a change, rather than computing a value.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/node#chunk-22", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nlogoutByToken\n\nLogs a user out of all client-side Magic SDK sessions given the user's DID token.\n\n#\n\n\u2022 didToken (String): A valid Decentralized ID Token generated client-side by a Magic user\n\ndidToken", "explanation": "The `#logoutByToken` section in the Magic Labs embedded wallet documentation explains the process of logging out a user from all client-side Magic SDK sessions using their DID token. \n\nThe main purpose of `#logoutByToken` is to provide a way for a server to remotely log out a user from all their active Magic SDK sessions, effectively ending their current authentication session. \n\nTo achieve this, the `logoutByToken` function requires a single argument: \n\n- `didToken`: a valid Decentralized ID Token generated by a Magic user on the client-side. \n\nBy passing the user's DID token to the `logoutByToken` function, the server can successfully log out the user from all their active sessions, enhancing security and improving user management.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/node#chunk-23", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 Promise<void>\n\nPromise<void>", "explanation": "The documentation section titled '#Returns' is describing the type of value returned by a function. \n\nIn this specific case, the function returns a `Promise` that resolves to `void`. This means that when the function is executed, it will not return any data or value (`void` type), but it will still indicate when the operation is complete through the resolution of the `Promise`. \n\nThe main purpose of this section is to inform the developer what to expect in terms of output when calling the function, which is crucial for writing correct and efficient code.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/node#chunk-24", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nThe following multichain methods require the use of the enum WalletType that is exported from the Magic Admin SDK.\n\nWalletType\n\nCopy\n\n01\n\n\u2060\n\nenum\n\nWalletType\n\n{\n\n01\n\n\u2060\n\nenum\n\nWalletType\n\n{\n\n02\n\nETH\n\n=\n\n'ETH'\n\n,\n\n02\n\nETH\n\n=\n\n'ETH'\n\n,\n\n03\n\nHARMONY\n\n=\n\n'HARMONY'\n\n,\n\n03\n\nHARMONY\n\n=\n\n'HARMONY'\n\n,\n\n04\n\nICON\n\n=\n\n'ICON'\n\n,\n\n04\n\nICON\n\n=\n\n'ICON'\n\n,\n\n05\n\nFLOW\n\n=\n\n'FLOW'\n\n,\n\n05\n\nFLOW\n\n=\n\n'FLOW'\n\n,\n\n06\n\nTEZOS\n\n=\n\n'TEZOS'\n\n,\n\n06\n\nTEZOS\n\n=\n\n'TEZOS'\n\n,\n\n07\n\nZILLIQA\n\n=\n\n'ZILLIQA'\n\n,\n\n07\n\nZILLIQA\n\n=\n\n'ZILLIQA'\n\n,\n\n08\n\nPOLKADOT\n\n=\n\n'POLKADOT'\n\n,\n\n08\n\nPOLKADOT\n\n=\n\n'POLKADOT'\n\n,\n\n09\n\nSOLANA\n\n=\n\n'SOLANA'\n\n,\n\n09\n\nSOLANA\n\n=\n\n'SOLANA'\n\n,\n\n10\n\nAVAX\n\n=\n\n'AVAX'\n\n,\n\n10\n\nAVAX\n\n=\n\n'AVAX'\n\n,\n\n11\n\nALGOD\n\n=\n\n'ALGOD'\n\n,\n\n11\n\nALGOD\n\n=\n\n'ALGOD'\n\n,\n\n12\n\nCOSMOS\n\n=\n\n'COSMOS'\n\n,\n\n12\n\nCOSMOS\n\n=\n\n'COSMOS'\n\n,\n\n13\n\nCELO\n\n=\n\n'CELO'\n\n,\n\n13\n\nCELO\n\n=\n\n'CELO'\n\n,\n\n14\n\nBITCOIN\n\n=\n\n'BITCOIN'\n\n,\n\n14\n\nBITCOIN\n\n=\n\n'BITCOIN'\n\n,\n\n15\n\nNEAR\n\n=\n\n'NEAR'\n\n,\n\n15\n\nNEAR\n\n=\n\n'NEAR'\n\n,\n\n16\n\nHELIUM\n\n=\n\n'HELIUM'\n\n,\n\n16\n\nHELIUM\n\n=\n\n'HELIUM'\n\n,\n\n17\n\nCONFLUX\n\n=\n\n'CONFLUX'\n\n,\n\n17\n\nCONFLUX\n\n=\n\n'CONFLUX'\n\n,\n\n18\n\nTERRA\n\n=\n\n'TERRA'\n\n,\n\n18\n\nTERRA\n\n=\n\n'TERRA'\n\n,\n\n19\n\nTAQUITO\n\n=\n\n'TAQUITO'\n\n,\n\n19\n\nTAQUITO\n\n=\n\n'TAQUITO'\n\n,\n\n20\n\nED\n\n=\n\n'ED'\n\n,\n\n20\n\nED\n\n=\n\n'ED'\n\n,\n\n21\n\nHEDERA\n\n=\n\n'HEDERA'\n\n,\n\n21\n\nHEDERA\n\n=\n\n'HEDERA'\n\n,\n\n22\n\nNONE\n\n=\n\n'NONE'\n\n,\n\n22\n\nNONE\n\n=\n\n'NONE'\n\n,\n\n23\n\nANY\n\n=\n\n'ANY'\n\n,\n\n23\n\nANY\n\n=\n\n'ANY'\n\n,\n\n24\n\n}\n\n24\n\n}", "explanation": "This documentation section is titled '#Multichain Methods' but it mainly explains the `WalletType` enum exported from the Magic Admin SDK.\n\nThe main purpose of this section is to list and define the different blockchain platforms supported by the Magic Admin SDK. The `WalletType` enum is an enumeration of all the supported blockchain platforms, with each platform assigned a unique identifier.\n\nThe listed blockchain platforms include:\n\n- Ethereum (ETH)\n- Harmony (HARMONY)\n- ICON (ICON)\n- Flow (FLOW)\n- Tezos (TEZOS)\n- Zilliqa (ZILLIQA)\n- Polkadot (POLKADOT)\n- Solana (SOLANA)\n- Avalanche (AVAX)\n- Algorand (ALGOD)\n- Cosmos (COSMOS)\n- Celo (CELO)\n- Bitcoin (BITCOIN)\n- Near (NEAR)\n- Helium (HELIUM)\n- Conflux (CONFLUX)\n- Terra (TERRA)\n- Taquito (TAQUITO)\n- ED (ED)\n- Hedera (HEDERA)\n- NONE (NONE)\n- ANY (ANY)\n\nThis enum can be used in various multichain methods provided by the Magic Admin SDK to specify the target blockchain platform for a particular operation.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/node#chunk-25", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\ngetMetadataByIssuerAndWallet\n\nRetrieves information about user, including their multichain wallets, by the supplied issuer.\n\n#\n\n\u2022 issuer (String): The user's Decentralized ID, which can be parsed using TokenModule.getIssuer\n\n\u2022 walletType (WalletType): The wallet type. Must import WalletType from Admin SDK.\n\nissuer\n\nTokenModule.getIssuer\n\nTokenModule.getIssuer\n\nwalletType\n\nWalletType", "explanation": "The `getMetadataByIssuerAndWallet` method is a part of the Magic Labs embedded wallet SDK documentation. This method allows you to retrieve information about a user, including their multichain wallets, based on the user's Decentralized ID (also known as the \"issuer\") and the specific wallet type.\n\nIn simpler terms, this method helps you to fetch user data, including their wallet details, when you know the user's unique identifier (issuer) and the type of wallet they are using.\n\nThe main purpose of this method is to provide an easy way to access user data, including wallet information, in a secure and decentralized manner. This is particularly useful in applications that require access to user wallet data, such as cryptocurrency exchanges or decentralized finance (DeFi) platforms.\n\nThe required arguments for this method are:\n\n1. `issuer`: The user's Decentralized ID (a unique string that identifies the user).\n2. `walletType`: The type of wallet the user is using (e.g., Ethereum, Bitcoin, etc.).", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/node#chunk-26", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 A MagicUserMetadata: The data field contains all of the user meta information.issuer (String): The user's Decentralized IDpublicAddress (String): The authenticated user's public address (a.k.a.: public key). Currently, this value is associated with the Ethereum blockchain.email (String): The user's email addressphoneNumber (String | null): The user's phone numberoauthProvider (String | null): OAuth provider, if anywallets (Object[]): The multichain wallets of the authenticated user\n\nMagicUserMetadata\n\ndata\n\n\u2022 issuer (String): The user's Decentralized ID\n\n\u2022 publicAddress (String): The authenticated user's public address (a.k.a.: public key). Currently, this value is associated with the Ethereum blockchain.\n\n\u2022 email (String): The user's email address\n\n\u2022 phoneNumber (String | null): The user's phone number\n\n\u2022 oauthProvider (String | null): OAuth provider, if any\n\n\u2022 wallets (Object[]): The multichain wallets of the authenticated user\n\nissuer\n\npublicAddress\n\nemail\n\nphoneNumber\n\noauthProvider\n\nwallets", "explanation": "**MagicUserMetadata Returns Documentation Explanation**\n\nThe given documentation section, titled '#Returns', outlines the structure and content of the `MagicUserMetadata` object returned by the Magic Labs server-side SDK for Node. \n\n**Main Purpose:**\n\nThe primary purpose of this section is to describe the properties and data contained within the `MagicUserMetadata` object, which provides information about the authenticated user.\n\n**Properties:**\n\nThe `MagicUserMetadata` object contains six key properties:\n\n1. **issuer (String)**: The user's Decentralized ID.\n2. **publicAddress (String)**: The user's public address (public key), currently associated with the Ethereum blockchain.\n3. **email (String)**: The user's email address.\n4. **phoneNumber (String | null)**: The user's phone number (can be null).\n5. **oauthProvider (String | null)**: The OAuth provider used for authentication (can be null).\n6. **wallets (Object[])**: An array of objects containing the user's multichain wallets.\n\n**In Summary:**\n\nThis documentation section explains the structure and properties of the `MagicUserMetadata` object, which contains authenticated user information, such as their Decentralized ID, public address, email, phone number, OAuth provider, and multichain wallets.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/node#chunk-27", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\ngetMetadataByPublicAddressAndWallet\n\nRetrieves information about user, including their multichain wallets, by the supplied public address.\n\n#\n\n\u2022 publicAddress (String): The user's Ethereum public address, which can be parsed using TokenModule.getPublicAddress\n\n\u2022 walletType (WalletType): The wallet type. Must import WalletType from Admin SDK.\n\npublicAddress\n\nTokenModule.getPublicAddress\n\nTokenModule.getPublicAddress\n\nwalletType\n\nWalletType", "explanation": "**Overview of getMetadataByPublicAddressAndWallet**\n\nThe `getMetadataByPublicAddressAndWallet` function is a server-side API endpoint provided by Magic Labs that retrieves information about a user's multichain wallets and other relevant metadata.\n\n**Main Purpose:**\n\nThe primary purpose of this function is to fetch user data, including their multichain wallet details, by using their Ethereum public address as an identifier. This information can be used for various purposes, such as verifying user identity, retrieving their wallet balances, or managing their transactions.\n\n**Key Arguments:**\n\nTo use this function, you need to provide two required arguments:\n\n1. `publicAddress`: The user's Ethereum public address, which can be obtained using `TokenModule.getPublicAddress`.\n2. `walletType`: The type of wallet, which must be an instance of the `WalletType` enum imported from the Admin SDK.\n\nBy passing these arguments, the function can retrieve the requested metadata and return it to your application for further processing.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/node#chunk-28", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 A MagicUserMetadata: The data field contains all of the user meta information.issuer (String): The user's Decentralized IDpublicAddress (String): The authenticated user's public address (a.k.a.: public key). Currently, this value is associated with the Ethereum blockchain.email (String): The user's email addressphoneNumber (String | null): The user's phone numberoauthProvider (String | null): OAuth provider, if anywallets (Object[]): The multichain wallets of the authenticated user\n\nMagicUserMetadata\n\ndata\n\n\u2022 issuer (String): The user's Decentralized ID\n\n\u2022 publicAddress (String): The authenticated user's public address (a.k.a.: public key). Currently, this value is associated with the Ethereum blockchain.\n\n\u2022 email (String): The user's email address\n\n\u2022 phoneNumber (String | null): The user's phone number\n\n\u2022 oauthProvider (String | null): OAuth provider, if any\n\n\u2022 wallets (Object[]): The multichain wallets of the authenticated user\n\nissuer\n\npublicAddress\n\nemail\n\nphoneNumber\n\noauthProvider\n\nwallets", "explanation": "**Summary of '#Returns' Section**\n\nThe '#Returns' section from the Magic Labs API documentation explains what data is returned when a server-side SDK request is successfully executed. Specifically, it describes the structure and contents of the `MagicUserMetadata` object that contains user-specific information.\n\n**Main Purpose:**\n\nThe primary purpose of this section is to provide developers with an understanding of the format and fields included in the response data returned by the Magic Labs server-side SDKs. This information allows developers to effectively parse and utilize the returned data in their applications.\n\n**Key Components:**\n\nThe `MagicUserMetadata` object includes the following essential components:\n\n1. `issuer`: The user's Decentralized ID.\n2. `publicAddress`: The authenticated user's public address (within the Ethereum blockchain).\n3. `email`: The user's email address.\n4. `phoneNumber`: The user's phone number (optional).\n5. `oauthProvider`: The OAuth provider used (if any).\n6. `wallets`: An array of objects representing the authenticated user's multichain wallets.\n\nBy understanding the contents of this section, developers can easily integrate the Magic Labs server-side SDKs into their applications and make informed decisions about how to use the returned data.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/node#chunk-29", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\ngetMetadataByTokenAndWallet\n\nRetrieves information about user, including their multichain wallets, by the supplied DID Token.\n\n#\n\n\u2022 didToken (String): A valid Decentralized ID Token generated client-side by a Magic user\n\n\u2022 walletType ( WalletType ): The wallet type. Must import WalletType from Admin SDK.\n\ndidToken\n\nwalletType\n\nWalletType", "explanation": "**Explanation of `getMetadataByTokenAndWallet`**\n\nThe `getMetadataByTokenAndWallet` method is a function in the Magic Labs embedded wallet API that retrieves user information, including their multichain wallets, based on a supplied Decentralized ID (DID) Token.\n\n**Main Purpose:**\nThe main purpose of this method is to fetch user data, including wallet information, by verifying the user's DID Token. This allows developers to access and manage user wallets securely.\n\n**Required Arguments:**\n\n1. `didToken`: A valid Decentralized ID Token generated by a Magic user on the client-side.\n2. `walletType`: The type of wallet, which must be imported from the Admin SDK, specifically `WalletType`.\n\nBy calling this method with a valid `didToken` and `walletType`, developers can retrieve user metadata, enabling them to build custom wallet management and authentication workflows in their applications.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/node#chunk-30", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 A MagicUseMetadata: The data field contains all of the user meta information.issuer (String): The user's Decentralized IDpublicAddress (String): The authenticated user's public address (a.k.a.: public key). Currently, this value is associated with the Ethereum blockchain.email (String): The user's email addressphoneNumber (String | null): The user's phone numberoauthProvider (String | null): OAuth provider, if anywallets (Object[]): The multichain wallets of the authenticated user\n\nMagicUseMetadata\n\ndata\n\n\u2022 issuer (String): The user's Decentralized ID\n\n\u2022 publicAddress (String): The authenticated user's public address (a.k.a.: public key). Currently, this value is associated with the Ethereum blockchain.\n\n\u2022 email (String): The user's email address\n\n\u2022 phoneNumber (String | null): The user's phone number\n\n\u2022 oauthProvider (String | null): OAuth provider, if any\n\n\u2022 wallets (Object[]): The multichain wallets of the authenticated user\n\nissuer\n\npublicAddress\n\nemail\n\nphoneNumber\n\noauthProvider\n\nwallets", "explanation": "**Magic Labs Embedded Wallet Documentation: `#Returns` Section Explanation**\n\nThe `#Returns` section in the Magic Labs embedded wallet documentation outlines the structure and content of the data returned when a user is successfully authenticated using Magic's server-side SDKs for Node.js.\n\n**Main Purpose:**\n\nThe primary purpose of this section is to provide developers with a clear understanding of the user metadata that is returned after a successful authentication. This information enables developers to efficiently process and utilize the user's data for various purposes, such as identity verification, user profiling, or user authentication.\n\n**Returned Data:**\n\nThe returned data is an object called `MagicUseMetadata`, which contains several key-value pairs that provide detailed user information:\n\n1. **`issuer`**: The user's Decentralized ID.\n2. **`publicAddress`**: The user's public address (public key) associated with the Ethereum blockchain.\n3. **`email`**: The user's email address.\n4. **`phoneNumber`**: The user's phone number (optional).\n5. **`oauthProvider`**: The OAuth provider used for authentication (if any).\n6. **`wallets`**: An array of objects containing the user's multichain wallets.\n\nBy understanding the structure and content of the returned data, developers can effectively integrate Magic's embedded wallet solution into their applications and seamless authenticate their users.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/node#chunk-31", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nThe Utils Module and it's members are accessible on the Magic Admin SDK instance by the utils property.\n\nutils\n\nCopy\n\n01\n\nconst\n\n{\n\nMagic\n\n}\n\n=\n\nrequire\n\n(\n\n'@magic-sdk/admin'\n\n)\n\n;\n\n01\n\nconst\n\n{\n\nMagic\n\n}\n\n=\n\nrequire\n\n(\n\n'@magic-sdk/admin'\n\n)\n\n;\n\n02\n\n02\n\n03\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n)\n\n;\n\n03\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n)\n\n;\n\n04\n\n04\n\n05\n\nmagic\n\n.\n\nutils\n\n;\n\n05\n\nmagic\n\n.\n\nutils\n\n;\n\n06\n\nmagic\n\n.\n\nutils\n\n.\n\nparseAuthorizationHeader\n\n;\n\n06\n\nmagic\n\n.\n\nutils\n\n.\n\nparseAuthorizationHeader\n\n;\n\n#\n\nparseAuthorizationHeader\n\n#\n\n\u2022 header (String): A request authorization header passed in from the client-side application that looks like Bearer WyIweG...n0iXQ==\n\nheader\n\nBearer WyIweG...n0iXQ==", "explanation": "The `#parseAuthorizationHeader` function is part of the `Utils Module` within the Magic Labs Admin SDK. Its primary purpose is to process and decode the authorization header passed in from a client-side application.\n\nThe function takes one argument: `header`, which is a string representing the authorization header in the format `Bearer <token>`. \n\nWhen called, `parseAuthorizationHeader` decodes and extracts the token from the provided header. This is useful for server-side authentication and authorization purposes. \n\nHere's a step-by-step breakdown:\n\n1. Client-side application sends a request with an authorization header in the format `Bearer <token>`.\n2. Server-side application receives the request and retrieves the authorization header.\n3. The server-side application calls `magic.utils.parseAuthorizationHeader(header)` to decode and process the header.\n4. The `parseAuthorizationHeader` function extracts and returns the decoded token, allowing the server-side application to authenticate and authorize the request.\n\nIn summary, `parseAuthorizationHeader` is a utility function within the Magic Labs Admin SDK that simplifies the process of authenticating and authorizing requests by extracting and decoding the authorization header passed in from client-side applications.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/node#chunk-32", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 string: The DID token embedded in the authorization header \u2060 This is only available to Admin SDK version 1.1.0 and above.\n\nstring", "explanation": "The '#Returns' section of the Magic Labs API documentation explains what data is returned when the API is successfully executed. \n\nIn this specific case, it states that a string value will be returned. This string is a 'DID token' that has been embedded in the 'authorization header'. Additionally, it mentions that this returned value is only available for users of Admin SDK version 1.1.0 and above.\n\nIn essence, the main purpose of this section is to inform developers about what to expect as output when they use the API, which helps them to properly handle and utilize the returned data.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/node#chunk-33", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n#\n\nSDKError\n\nThe SDKError class is exposed for instanceof operations.\n\nSDKError\n\ninstanceof\n\nCopy\n\n01\n\nimport\n\n{\n\nSDKError\n\n}\n\nfrom\n\n'@magic-sdk/admin'\n\n;\n\n01\n\nimport\n\n{\n\nSDKError\n\n}\n\nfrom\n\n'@magic-sdk/admin'\n\n;\n\n02\n\n02\n\n03\n\ntry\n\n{\n\n03\n\ntry\n\n{\n\n04\n\n// Something async...\n\n04\n\n// Something async...\n\n05\n\ncatch\n\n(\n\nerr\n\n)\n\n{\n\n05\n\ncatch\n\n(\n\nerr\n\n)\n\n{\n\n06\n\nif\n\n(\n\nerr\n\ninstanceof\n\nSDKError\n\n)\n\n{\n\n06\n\nif\n\n(\n\nerr\n\ninstanceof\n\nSDKError\n\n)\n\n{\n\n07\n\n// Handle...\n\n07\n\n// Handle...\n\n08\n\n}\n\n08\n\n}\n\n09\n\n}\n\n09\n\n}\n\nAdditionally, an enumeration of relevant error codes is also exposed for convenience and human readability:\n\nCopy\n\n01\n\nimport\n\n{\n\nErrorCode\n\n}\n\nfrom\n\n'@magic-sdk/admin'\n\n;\n\n01\n\nimport\n\n{\n\nErrorCode\n\n}\n\nfrom\n\n'@magic-sdk/admin'\n\n;\n\n02\n\n02\n\n03\n\nErrorCode\n\n.\n\nApiKeyMissing\n\n;\n\n03\n\nErrorCode\n\n.\n\nApiKeyMissing\n\n;\n\n04\n\nErrorCode\n\n.\n\nMissingAuthHeader\n\n;\n\n04\n\nErrorCode\n\n.\n\nMissingAuthHeader\n\n;\n\n05\n\nErrorCode\n\n.\n\nIncorrectSignerAddress\n\n;\n\n05\n\nErrorCode\n\n.\n\nIncorrectSignerAddress\n\n;\n\n06\n\n// and so forth...\n\n06\n\n// and so forth...\n\n07\n\n// Please reference the `Enum Key` column of the error table below.\n\n07\n\n// Please reference the `Enum Key` column of the error table below.\n\n#\n\nTokenExpired\n\nTokenCannotBeUsedYet\n\nnbf\n\nIncorrectSignerAddress\n\nFailedRecoveryProof\n\nApiKeyMissing\n\nMalformedTokenError\n\nServiceError\n\ndata\n\nExpectedBearerString\n\nExpectedBearerString\n\nThe supplied DID token needs to be in the proper format of Bearer {token}\n\nBearer {token}\n\nAudienceMismatch\n\nAudienceMismatch\n\nAudience does not match client ID. Please ensure your secret key matches the application which generated the DID token.", "explanation": "**Understanding SDKError and Error Codes in Magic Labs Embedded Wallet Documentation**\n\nThe `#Errors & Warnings - #SDKError - #Error Codes` section of the Magic Labs embedded wallet documentation explains how to handle errors that may occur when using the SDK. The main purpose of this section is to provide developers with a clear understanding of the types of errors that can occur, how to identify them, and how to handle them properly.\n\n**The SDKError Class**\n\nThe `SDKError` class is exposed by the SDK to enable `instanceof` operations. This allows developers to catch and handle SDK-specific errors in their code. The class is imported from `@magic-sdk/admin` and can be used in `try-catch` blocks to catch and handle SDK errors.\n\n**Error Codes**\n\nIn addition to the `SDKError` class, the documentation provides an enumeration of relevant error codes for convenience and human readability. The error codes are exposed as an `ErrorCode` enumeration, which can be imported from `@magic-sdk/admin`. The error codes provide a standard way to identify and handle specific errors that may occur when using the SDK.\n\n**Error Code Table**\n\nThe documentation includes a table that lists the various error codes, their corresponding enum keys, and a brief description of each error. The table includes error codes such as `ApiKeyMissing`, `MissingAuthHeader`, `IncorrectSignerAddress`, and others. This table serves as a reference guide for developers to quickly identify and handle specific errors that may occur when using the SDK.\n\nOverall, the `#Errors & Warnings - #SDKError - #Error Codes` section of the Magic Labs embedded wallet documentation provides developers with the necessary information to handle errors that may occur when using the SDK. By understanding how to identify and handle SDK errors, developers can build more robust and reliable applications that provide a better user experience.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/node#chunk-34", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\ndata\n\nFor additional context about an error, the SDKError.data property contains an array of potentially illuminating metadata. At the moment, this property is reserved for service errors when communication to Magic APIs fail.\n\nSDKError.data", "explanation": "This section of the documentation explains the `data` property within the `SDKError` object.\n\n**Purpose:** \nThe `data` property provides additional context and metadata when an error occurs, specifically when there's a communication failure with the Magic APIs.\n\n**Main Point:**\nIn the event of a service error, the `data` property will contain an array of metadata that can help identify the root cause of the issue or provide further information about the error.\n\nIn simpler terms, when something goes wrong with the Magic API, this `data` property will offer extra details that can be useful for debugging and troubleshooting the problem.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/node#chunk-35", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 GitHub\n\n\u2022 NPM\n\nGitHub\n\nNPM", "explanation": "The '#Resources' section in the Magic Labs embedded wallet API documentation points to external links where users can find additional information and resources related to the Node.js server-side SDK. \n\nThe main purpose of this section is to provide easy access to the following resources:\n\n1. **GitHub**: This link likely points to the GitHub repository of the Magic Labs Node.js SDK, where users can find the source code, contribute to the project, or open issues.\n\n2. **NPM (Node Package Manager)**: This link directs users to the NPM page of the Magic Labs SDK, where they can find installation instructions, version history, and other relevant details about the package.\n\nBy providing these links, Magic Labs aims to enable developers to easily find additional information, troubleshoot issues, and stay up-to-date with the latest developments related to their Node.js SDK.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/node#chunk-36", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nAll changes to the SDK are covered in our latest release notes.\n\nlatest release notes", "explanation": "This section, titled \"#Versions\", is a brief note in the documentation about versioning for the Magic Labs Embedded Wallet Server-Side SDK (Node). \n\nIts main purpose is to inform users that any changes made to the SDK, including new features, bug fixes, and deprecations, are documented in the \"latest release notes\", which is likely an external link or a separate page. This note serves as a pointer to the most up-to-date information about changes to the SDK, allowing users to stay informed and adapt their usage accordingly.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/node#chunk-37", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nYou can allow your users to sign up & log in to your web application with their Twitter account.", "explanation": "This section of the Magic Labs documentation explains how to implement Twitter social login functionality within a web application. Its main purpose is to enable users to sign up and log in to the application using their existing Twitter account credentials, rather than creating a new account or remembering separate login information.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/login/social-logins/social-providers/twitter#chunk-1", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n#\n\n\u2022 You will need a Twitter Developer account (only free access is required)Note: Twitter has recently deprecated their legacy Twitter API access tiers (essential and elevated packages are no longer available). If your application has been suspended as part of this, please sign up for the Free access tier to have it unsuspended.\n\n\u2022 You will need to have the Magic SDK installed into your web application\n\n\u2022 You will need to have the Magic SDK - OAuth Extension installed into your web application\n\nTwitter\n\n\u2022 Note: Twitter has recently deprecated their legacy Twitter API access tiers (essential and elevated packages are no longer available). If your application has been suspended as part of this, please sign up for the Free access tier to have it unsuspended.\n\nMagic SDK installed\n\nMagic SDK - OAuth Extension", "explanation": "**Explanation of '#Usage - #Prerequisites' Documentation Section**\n\nThe '#Usage - #Prerequisites' section outlines the necessary requirements for using Twitter social login with Magic Labs embedded wallet documentation. The main purpose of this section is to ensure developers have the necessary setup and accounts before integrating Twitter social login into their web application using Magic SDK.\n\n**Required Prerequisites:**\n\n1. **Twitter Developer Account**: A free Twitter Developer account is required.\n2. **Magic SDK Installation**: The Magic SDK must be installed into the web application.\n3. **Magic SDK - OAuth Extension Installation**: The Magic SDK OAuth Extension must also be installed into the web application.\n\nBy listing these prerequisites, the documentation helps developers ensure they have the necessary setup and accounts to successfully integrate Twitter social login using Magic Labs embedded wallet documentation.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/login/social-logins/social-providers/twitter#chunk-2", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nAfter installing the OAuth extension, you can now enable Twitter Login for your Magic application:\n\n\u2022 Go to your Magic Dashboard\n\n\u2022 Select the Magic application for which you\u2019d like to enable Twitter Login, or create a new application\n\n\u2022 Navigate to Social Login from the sidebar\n\n\u2022 Click the toggle for Twitter\n\n\u2022 Copy the Redirect URI field from your Magic Dashboard\n\n\u2022 Go to Twitter App Dashboard and navigate to Projects & Apps\n\n\u2022 In the Overview section, click on Add Project\n\n\u2022 Add your project name, use case and description\n\n\u2022 Make sure to copy the API Key and API Key Secret to the Magic dashboard, which you can then use with your application that connects to Twitter\n\n\u2022 Navigate to the application on the sidebar and click Set up under User authentication settings\n\n\u2022 Fill out all of the required permissions and app type information\n\n\u2022 Paste the Redirect URI from the Magic Dashboard in the Callback URI / Redirect URL and add your applications Website URL \u2060\n\n\u2022 After saving these details for the first time, Twitter will then display an OAuth 2.0 Client ID and Client Secret. IMPORTANT: These are NOT the keys that Magic requires and can be ignored. The correct keys are the API Key and API Key Secret from step 9 of this walkthrough.\n\n\u2022 \u2060Return to your Magic Dashboard and click \"Test Connection\" to give your new Twitter OAuth flow a try!\n\nMagic Dashboard", "explanation": "**Twitter Setup (v1 extension) for Magic Applications**\n\nThe Twitter Setup documentation section guides users through the process of enabling Twitter Login for their Magic application. The main purpose of this section is to help users integrate Twitter's OAuth extension into their Magic application, allowing users to log in with their Twitter accounts.\n\n**Key Steps:**\n\n1. Enable Twitter Login in the Magic Dashboard.\n2. Register a new project in the Twitter App Dashboard.\n3. Obtain the API Key and API Key Secret from Twitter.\n4. Configure the Twitter OAuth settings in the Magic Dashboard.\n5. Test the connection to ensure a successful integration.\n\nBy following these steps, users can successfully integrate Twitter Login into their Magic application, enabling a seamless login experience for their users.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/login/social-logins/social-providers/twitter#chunk-3", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 Go to your Magic Dashboard\n\n\u2022 Select the Magic application for which you\u2019d like to enable Twitter Login, or create a new application\n\n\u2022 Navigate to Social Login from the sidebar\n\n\u2022 Click the toggle for Twitter\n\n\u2022 Go to Twitter App Dashboard and navigate to Projects & Apps\n\n\u2022 In the Overview section, click on Add Project\n\n\u2022 Add your project name, use case and description\n\n\u2022 Do NOT use the API Key and Secret under Consumer Keys. Make sure to copy the Client ID and Client Secret to the Magic dashboard, which you can then use with your application that connects to Twitter. Complete flow if OAuth 2.0 Client ID and Client Secret are not visible\n\n\u2022 Navigate to the application on the sidebar and click Set up under User authentication settings\n\n\u2022 Fill out all of the required permissions and app type information\n\n\u2022 Paste the Redirect URI you will pass as the redirectURI argument to the loginWithRedirect method, in the Callback URI / Redirect URL and add your applications Website URL\n\n\u2022 After saving these details for the first time, Twitter will then display an OAuth 2.0 Client ID and Client Secret. IMPORTANT: These are the keys that Magic requires to use v2. Do NOT use the API Key and API Key Secret for v2.\n\n\u2022 \"Test Connection\" function in dashboard will not work for v2.\n\nMagic Dashboard", "explanation": "The section '#Twitter Setup (v2 extension)' explains the process of setting up Twitter login integration with Magic Labs embedded wallet. This setup allows users to log in to a Magic application using their Twitter credentials.\n\nThe main purpose of this section is to guide developers in configuring their Twitter App to work with Magic's Social Login feature, specifically the v2 extension. This involves:\n\n1. Enabling Twitter login in the Magic Dashboard.\n2. Creating a new Twitter project and application.\n3. Obtaining the OAuth 2.0 Client ID and Client Secret from Twitter.\n4. Configuring user authentication settings in the Twitter application.\n5. Providing required permissions and app type information.\n\nUltimately, this setup enables Magic applications to use Twitter's v2 extension for OAuth authentication, allowing users to seamlessly log in with their Twitter credentials.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/login/social-logins/social-providers/twitter#chunk-4", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 Twitter Social Login Demo\n\nTwitter Social Login Demo", "explanation": "The '#Resources' section from the provided documentation URL is about supplementary materials or examples that can be used to support or enhance the understanding of Twitter Social Logins integration using Magic Labs embedded wallet.\n\nThe main purpose of this section is to provide developers with a practical example, in this case, a 'Twitter Social Login Demo', that they can refer to and use as a starting point for implementing Twitter social logins in their applications.\n\nIn essence, this section is offering a hands-on resource to help developers better understand the concepts and implementation details presented in the rest of the documentation.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/login/social-logins/social-providers/twitter#chunk-5", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nYou might wonder what Magic is and why it\u2019s needed to connect to a website or app you\u2019re visiting. Can\u2019t this be done directly through the website or app?\n\nMagic provides websites and apps with technology that enables you to set up a virtual wallet, which is a unique account that exists on a highly secure database (i.e., a blockchain).\n\nIn order to give you full control over your digital collectibles and allow you to securely store them, brands need to use this database.\n\nDue to the technical complexity, most websites and apps do not provide a way for users to access this database. This is why they use Magic to help you connect your email, phone number or social login to a new virtual wallet, allowing you to instantly sign in to a website or app that requires a wallet without any hassle.\n\nNeither Magic nor any service provider or user can access or control your wallet. Once your wallet is setup, only you have permission to manage the assets within it.", "explanation": "**Summary of 'Why is Magic Involved?' FAQ Section**\n\nThis FAQ section explains the purpose of Magic in enabling websites and apps to provide their users with a virtual wallet, a unique account on a secure blockchain database. Magic's technology allows users to connect their email, phone number, or social login to this virtual wallet, giving them full control over their digital collectibles and secure storage.\n\n**Main Purpose:**\n\nThe main purpose of this section is to inform wallet end-users about the role of Magic in facilitating the creation of a virtual wallet, and to address potential concerns about security, control, and access. By explaining the technical complexity and the limitations of websites and apps, Magic aims to reassure users that only they have permission to manage their wallet assets.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/home/faqs/wallet-end-users#chunk-1", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nWallets are used to interact with blockchains. Each wallet has a unique address and can contain things like cryptocurrencies or digital collectibles (NFTs). A single wallet can be used across different blockchain networks, but wallet assets stay tied to a specific blockchain.", "explanation": "**Summary of \"#What is a wallet?\" Section**\n\nThis section defines what a wallet is and its main purpose in the context of blockchain interactions. In summary, a wallet is a tool used to interact with blockchains and contains a unique address where cryptocurrencies, digital collectibles (NFTs), and other assets can be stored. Notably, a wallet can be used across multiple blockchain networks, but the assets within the wallet are tied to a specific blockchain.\n\n**Main Purpose:**\nThe main purpose of a wallet is to store and manage digital assets, such as cryptocurrencies and NFTs, in a way that allows users to interact with various blockchain networks.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/home/faqs/wallet-end-users#chunk-2", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nMagic Wallet is a web-based wallet that does not require browser extensions, secret phrases, or downloads. It\u2019s interoperable, meaning you can bring your wallet over to any site that supports it, but wallet.magic.link is your go-to destination to access your wallet at any time.\n\nwallet.magic.link", "explanation": "The documentation section titled '#How does Magic Wallet work?' explains the basic functionality and features of Magic Wallet. \n\nIn essence, Magic Wallet is a web-based digital wallet that can be accessed directly through a web browser without the need for additional downloads, extensions, or secret phrases. The main purpose of this section is to provide an overview of the wallet's key characteristics, specifically:\n\n1. Interoperability: The wallet can be used across multiple websites that support it, allowing users to bring their wallet with them.\n2. Central access point: The user's primary point of access to their wallet is wallet.magic.link.\n\nThe goal of this section is to introduce users to the key benefits and usability of Magic Wallet, ensuring a seamless and straightforward experience.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/home/faqs/wallet-end-users#chunk-3", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nYour Magic Wallet is protected by bank-grade encryption and best-in-class passwordless authentication. You can dive into the deep end of our security architecture by reading Magic's Whitepaper.\n\nFor an additional level of security, we recommend enabling two-factor authentication with your email service providers like Gmail or Outlook.", "explanation": "**Section Overview:**\nThe \"#Is Magic Wallet secure?\" section is a Frequently Asked Question (FAQ) in the Magic Labs embedded wallet documentation. It aims to reassure users about the security features of the Magic Wallet.\n\n**Main Purpose:**\nThe main purpose of this section is to inform users about the security measures in place to protect their Magic Wallet. Specifically, it highlights:\n\n1. Bank-grade encryption to safeguard user data.\n2. Best-in-class passwordless authentication for secure access.\n3. An optional, additional security measure: enabling two-factor authentication with email service providers.\n\nBy providing this information, Magic Labs aims to establish trust and confidence with its users regarding the security of their wallet.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/home/faqs/wallet-end-users#chunk-4", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\"Dapp\" (sometimes stylized as dApp) is commonly referring to decentralized apps. A dapp is an application built on a decentralized network like Ethereum. Examples of popular dapps are Zerion, Uniswap, and Opensea.", "explanation": "The '#What is a dapp?' section explains that a \"dapp\" (short for decentralized app) is a type of application built on a decentralized network, such as Ethereum. The main purpose of this section is to provide a brief definition and understanding of what a dapp is, likely to help users of the Magic Labs embedded wallet navigate and interact with these types of applications within the Magic Labs ecosystem.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/home/faqs/wallet-end-users#chunk-5", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nYou can purchase cryptocurrencies by clicking \"Buy\" to go through the transaction flow, or receive from an existing wallet by clicking \"Receive\" to share your wallet QR code or wallet address with the sender.\n\nFor more information on payment methods offered, see What payment methods can I use to buy crypto?\n\nWhat payment methods can I use to buy crypto?", "explanation": "This documentation section is about guiding users on how to deposit or add cryptocurrency into their Magic Labs embedded wallet. \n\nThe main purpose of this section is to provide users with two options to get crypto into their wallet: \n1. Purchasing cryptocurrency directly through the wallet interface by clicking the \"Buy\" button and following the transaction flow.\n2. Receiving cryptocurrency from an external wallet by clicking the \"Receive\" button, which allows users to share their wallet QR code or wallet address with the sender.\n\nIt also references a related section that provides more detailed information on the available payment methods for buying cryptocurrency.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/home/faqs/wallet-end-users#chunk-6", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nMagic Wallet acts as a bridge connecting you with dapps in the web3 world. Magic is committed to privacy, so no personal info is shared with dapps when you log in with Magic Wallet. The dapp's developers won\u2019t get your email address without your consent.", "explanation": "**Section Summary: \"How does Magic Wallet work with dapps?\"**\n\nThis documentation section explains the role of Magic Wallet in interacting with decentralized applications (dapps) in the web3 ecosystem.\n\n**Main Purpose:**\n\nThe primary purpose of this section is to inform users about the secure and private connection between Magic Wallet and dapps, ensuring that personal information is protected and only shared with consent.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/home/faqs/wallet-end-users#chunk-7", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nYes, users can hold digital collectibles in their Magic wallet. Our documentation contains integration instructions for the many blockchains we support and links to examples.\n\ndocumentation\n\nWe allow you to have full control of the wallet UI/UX for your users - so Magic will fit seamlessly into your project.", "explanation": "This documentation section answers a question about the capabilities of the Magic wallet, specifically whether users can store digital collectibles. The answer is yes, Magic wallets do support holding digital collectibles. \n\nThe main purpose of this section is to inform developers that Magic wallets are compatible with various blockchains and offer customization options for a seamless user experience, allowing them to integrate Magic into their projects while maintaining full control over the wallet's UI/UX.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/home/faqs/wallet-end-users#chunk-8", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nMagic has partnered with Onramper, Sardine, and Link by Stripe to offer users various payment methods in 150+ countries.\n\nOnramper\n\nSardine\n\nLink by Stripe\n\nPlease note that Instant Bank Transfer is only available to US residents, excluding New York and Hawaii.", "explanation": "**Summary: Payment Methods for Buying Crypto**\n\nThis documentation section informs users about the available payment methods for purchasing cryptocurrency using the Magic Labs embedded wallet. \n\n**Main Purpose:**\nThe main purpose of this section is to provide users with information on the various payment options available in over 150 countries through Magic's partnerships with Onramper, Sardine, and Link by Stripe, as well as specific availability details for Instant Bank Transfers in the US.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/home/faqs/wallet-end-users#chunk-9", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nYou can transfer crypto by clicking \"Send\" and following the prompts.\n\nPlease keep in mind that when sending or receiving crypto, ALWAYS confirm that you are using the correct network. Using an incorrect network will cause the funds to be lost.", "explanation": "This documentation section is about transferring cryptocurrency out of the Magic Wallet. The main purpose is to inform Magic Wallet users that they can initiate a transfer by clicking the 'Send' button and following subsequent steps.\n\nAdditionally, it serves as a crucial warning about correctly selecting the network to avoid losing funds. It emphasizes that users must double-check the network before sending or receiving cryptocurrency to prevent errors that could lead to lost funds.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/home/faqs/wallet-end-users#chunk-10", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nMagic Universal Wallets currently supports Ethereum, Polygon, Optimism, and Flow.\n\nMagic Universal Wallets\n\nMagic Dedicated Wallets support 24+ blockchains including Ethereum, Polygon, Solana, Bitcoin, Cosmos, Tezos, Aptos, and many more. Visit here see our supported blockchains.\n\nMagic Dedicated Wallets\n\nVisit here", "explanation": "**Explanation and Purpose of Documentation Section**\n\nThis documentation section, titled \"#What blockchain does Magic Wallet support?\", aims to inform users about the various blockchain networks supported by Magic Wallet. Specifically, it clarifies the difference in blockchain support between two types of Magic Wallets: \n\n* **Magic Universal Wallets**: Currently supports a limited set of popular blockchains (Ethereum, Polygon, Optimism, and Flow).\n* **Magic Dedicated Wallets**: Offers broader support for 24+ blockchains, including Ethereum, Polygon, Solana, Bitcoin, and others.\n\n**Main Purpose**\n\nThe primary purpose of this documentation section is to provide users with clear information about the blockchain compatibility of Magic Wallet, allowing them to determine which type of wallet best suits their needs.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/home/faqs/wallet-end-users#chunk-11", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nYou can click the network dropdown at the top of the Magic Wallet modal to select a different network, or you can use the following links to directly access each supported blockchain:\n\nMagic Wallet modal\n\n\u2022 Ethereum\n\n\u2022 Polygon\n\n\u2022 Optimism\n\n\u2022 Flow\n\nEthereum\n\nPolygon\n\nOptimism\n\nFlow", "explanation": "This documentation section explains how users of the Magic Wallet App can switch between different blockchain networks. \n\nThe main purpose is to provide users with a step-by-step solution to change the blockchain network within the app. This allows users to easily move between supported blockchains such as Ethereum, Polygon, Optimism, and Flow.\n\nThe instructions inform users that they can either click the network dropdown at the top of the Magic Wallet modal or use direct links to select the desired blockchain network.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/home/faqs/wallet-end-users#chunk-12", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nPlease note that Magic will not and cannot ever take funds out of a user's wallet. If you just purchased crypto and the funds are not showing up, be aware that payments may take anywhere between several minutes to a few days to fully process, depending on the payment processor and amount purchased. You can contact the provider who processed the payment for an exact timeline.", "explanation": "This documentation section is titled '#I\u2019m having trouble receiving the crypto that I purchased in Magic Wallet. What should I do?' and it addresses a common issue that users may encounter when purchasing cryptocurrency in Magic Wallet. \n\nThe main purpose of this section is to inform users that Magic itself cannot access or remove funds from their wallets, and if they are experiencing delays in receiving purchased cryptocurrency, it may be due to the payment processing time. The section instructs users to contact the payment processor for a more accurate timeline on when they can expect their funds to be available.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/home/faqs/wallet-end-users#chunk-13", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nYes, a user may request the application where they created their account to delete their data. Applications are able to service these requests using our Deletion Request API.\n\nDeletion Request API", "explanation": "This section of the Magic Labs embedded wallet documentation explains that users have the right to request deletion of their data. The main purpose of this section is to inform application developers about the process of handling user data deletion requests.\n\nIn essence, it states that when a user wants to delete their data, they should request it from the application where they created their account. To facilitate this, the application can use Magic Labs' Deletion Request API to service these requests.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/home/faqs/wallet-end-users#chunk-14", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "\u2060This feature requires an enterprise agreement", "explanation": "The 'Advanced Multi-Factor Authentication' (MFA) feature is a premium security solution available to Magic Labs enterprise customers. Its main purpose is to provide an additional layer of protection to users' accounts by requiring them to complete an extra verification step after entering their credentials.\n\nThis feature is designed to prevent unauthorized access and ensure that only legitimate users can access their accounts, even if their passwords are compromised. The Advanced MFA solution offers enhanced security and helps to safeguard sensitive information, making it particularly useful for businesses and organizations that require robust authentication measures.\n\nIn summary, the main purpose of the Advanced Multi-Factor Authentication feature is to provide an extra layer of security and protection for users' accounts, preventing potential unauthorized access and ensuring the integrity of sensitive information.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/features/advanced-mfa#chunk-1", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nToday Magic offers MFA support with tools such as Google Authenticator and Authy. However, some customers may choose to use their own custom MFA provider to verify sessions. With the Enterprise MFA feature, Magic can integrate with any MFA provider. Please note that this feature is part of the Magic Enterprise tier, please reach out to learn more.\n\nreach out\n\n#\n\nOnly available with Dedicated Wallet.\n\nDedicated Wallet\n\nAdvanced MFA SDK methods are available via the following client-side SDKs:\n\n\u2022 Web\n\n\u2022 React Native\n\nWeb\n\nReact Native", "explanation": "**Overview of Advanced MFA Compatibility**\n\nThis section explains the compatibility and availability of Magic Labs' Advanced Multi-Factor Authentication (MFA) feature. \n\n**Main Purpose:**\n\nThe main purpose of this section is to inform users about the integration of Magic's Enterprise MFA feature with custom MFA providers, its compatibility with different client-side SDKs, and the requirements to access this feature.\n\n**Key Points:**\n\n1. Magic's Enterprise MFA feature allows integration with any custom MFA provider.\n2. This feature is only available in the Magic Enterprise tier.\n3. The Advanced MFA SDK methods are accessible via the Web and React Native client-side SDKs.\n4. A Dedicated Wallet is required to use this feature.\n\nIn summary, this section provides information on the compatibility and requirements of Magic Labs' Advanced MFA feature, helping users understand how to access and use it.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/features/advanced-mfa#chunk-2", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nTo enable Enterprise MFA, all that is required is for your third-party provider to be configured in our system and their issued JWT to be set in the custom authorization header via magic.auth.setAuthorizationToken prior to calling login:\n\nmagic.auth.setAuthorizationToken\n\nCopy\n\n01\n\n\u2060\n\nconst\n\nhandleLogin\n\n=\n\nasync\n\n(\n\n)\n\n=>\n\n{\n\n01\n\n\u2060\n\nconst\n\nhandleLogin\n\n=\n\nasync\n\n(\n\n)\n\n=>\n\n{\n\n02\n\nawait\n\nmagic\n\n.\n\nauth\n\n.\n\nsetAuthorizationToken\n\n(\n\njwt\n\n)\n\n02\n\nawait\n\nmagic\n\n.\n\nauth\n\n.\n\nsetAuthorizationToken\n\n(\n\njwt\n\n)\n\n03\n\nawait\n\nmagic\n\n.\n\nauth\n\n.\n\nloginWithEmailOTP\n\n(\n\n{\n\nemail\n\n}\n\n)\n\n;\n\n03\n\nawait\n\nmagic\n\n.\n\nauth\n\n.\n\nloginWithEmailOTP\n\n(\n\n{\n\nemail\n\n}\n\n)\n\n;\n\n04\n\n}\n\n;\n\n04\n\n}\n\n;\n\nOnce you have added the setAuthorizationToken call into your login handler, Magic must enable the feature for your application. If you have users actively accessing your application, we recommend first testing this integration with a test application so that we can be sure to avoid any downtime when we turn on your production application.\n\nsetAuthorizationToken", "explanation": "**Enabling Enterprise Multi-Factor Authentication (MFA)**\n\nThe '#Usage' documentation section explains how to integrate Enterprise MFA into your Magic Labs embedded wallet. To do this, you need to:\n\n1. **Configure a third-party MFA provider** in the Magic Labs system.\n2. **Obtain a JSON Web Token (JWT)** from the MFA provider.\n3. **Set the JWT** using `magic.auth.setAuthorizationToken` before calling the `loginWithEmailOTP` method.\n\n**Main Purpose:**\nThe main purpose of this code snippet is to demonstrate how to enable Enterprise MFA in your Magic Labs application. By setting the authorization token with the MFA provider's JWT, you ensure that users must complete an additional authentication step before accessing your application.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/features/advanced-mfa#chunk-3", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "\u2060This feature requires an enterprise agreement", "explanation": "The Generalized Delegated Key Management Service (Generalized DKMS) is a feature that allows enterprises to manage their users' private keys securely. Key management is the process of safely storing, managing, and controlling access to sensitive cryptographic keys.\n\nThe main purpose of Generalized DKMS is to provide a secure and decentralized key management solution, enabling enterprises to delegate the ownership and control of private keys to their users while maintaining centralized administrative management and control. This feature ensures secure key management practices and flexibility in how private keys are managed within an enterprise setup.\n\nIn simpler terms, Generalized DKMS offers a secure way for enterprises to manage and delegate control of private keys of their users, providing both the enterprise and the user control and peace of mind, while streamlining the overall key management process.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/wallets/enterprise-features/generalized-dkms#chunk-1", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nGeneralized Delegated Key Management Service, or G-DKMS for short, provides developers with a mechanism to encrypt and decrypt private user data. It leverages Magic\u2019s patented Delegated Key Management System to encrypt any data in the secure iframe using the user's private key. From there, developers can store the data via any mechanism - Magic does not store the data. The data always remains private and secure - developers and Magic cannot manipulate the data.\n\n#\n\nOnly available in Dedicated Wallet.\n\nG-DKMS SDK methods are available via the Web client-side SDK.\n\nWeb client-side SDK", "explanation": "The section '#Overview - #Compatibility' from the Magic Labs embedded wallet documentation explains Generalized Delegated Key Management Service (G-DKMS). \n\n**Main Purpose:**\nG-DKMS provides a secure mechanism for developers to encrypt and decrypt private user data using the user's private key, ensuring the data remains private and secure.\n\n**Key Functionality:**\n\n- Encrypts any data in a secure iframe using the user's private key.\n- Allows developers to store the encrypted data using any mechanism they choose.\n- Ensures that the data remains private and secure, as Magic and developers cannot manipulate it.\n\n**Important Note:**\nG-DKMS is only available in Dedicated Wallet, and its SDK methods can be accessed via the Web client-side SDK.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/wallets/enterprise-features/generalized-dkms#chunk-2", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nTo leverage G-DKMS a developer can call the following two methods after a user has been logged in:\n\nCopy\n\n01\n\nconst\n\ncipherText\n\n=\n\nawait\n\nmagic\n\n.\n\ngdkms\n\n.\n\nencryptWithPrivateKey\n\n(\n\n'hello world'\n\n)\n\n;\n\n01\n\nconst\n\ncipherText\n\n=\n\nawait\n\nmagic\n\n.\n\ngdkms\n\n.\n\nencryptWithPrivateKey\n\n(\n\n'hello world'\n\n)\n\n;\n\n02\n\n// <- \"U2FsdGVkX19CZ2XlS839ihS7J9cXPw8cTzCVabagdGw=\"\n\n02\n\n// <- \"U2FsdGVkX19CZ2XlS839ihS7J9cXPw8cTzCVabagdGw=\"\n\n03\n\n03\n\n04\n\nconst\n\nmessage\n\n=\n\nawait\n\nmagic\n\n.\n\ngdkms\n\n.\n\ndecryptWithPrivateKey\n\n(\n\n'U2FsdGVkX19CZ2XlS839ihS7J9cXPw8cTzCVabagdGw='\n\n)\n\n;\n\n04\n\nconst\n\nmessage\n\n=\n\nawait\n\nmagic\n\n.\n\ngdkms\n\n.\n\ndecryptWithPrivateKey\n\n(\n\n'U2FsdGVkX19CZ2XlS839ihS7J9cXPw8cTzCVabagdGw='\n\n)\n\n;\n\n05\n\n// <- \"hello world\"\n\n05\n\n// <- \"hello world\"\n\nThis is an Enterprise only feature - please reach out if you\u2019re interested to learn more.\n\nreach out", "explanation": "**Explanation of '#Usage' Section:**\n\nThe '#Usage' section explains how to use Generalized Distributed Key Management System (G-DKMS), a feature in Magic Labs Enterprise embedded wallet. G-DKMS allows developers to securely encrypt and decrypt sensitive data using private keys.\n\n**Main Purpose:**\n\nThe main purpose of this documentation section is to provide a step-by-step guide on how to leverage G-DKMS in two main operations:\n\n1. **Encryption**: Encrypting a plaintext message (`'hello world'`) using a private key, resulting in a ciphertext output (`\"U2FsdGVkX19CZ2XlS839ihS7J9cXPw8cTzCVabagdGw=\"`).\n2. **Decryption**: Decrypting a ciphertext message (`\"U2FsdGVkX19CZ2XlS839ihS7J9cXPw8cTzCVabagdGw=\"`) using a private key, resulting in the original plaintext message (`\"hello world\"`).\n\nThese operations are demonstrated using two methods: `encryptWithPrivateKey` and `decryptWithPrivateKey`, which are part of the `magic.gdkms` module. This section is intended for developers who want to integrate G-DKMS into their applications to securely manage sensitive data.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/wallets/enterprise-features/generalized-dkms#chunk-3", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "We believe that when it comes to building great apps, collaboration is key. That's why every Magic developer is given a personal team by default.\n\nYou can work solo, or invite up to two collaborators to your team to help integrate Magic, update branding, or manage users.\n\nNeed more than 2 seats? Subscribe to Magic's Startup or Growth plan to unlock additional team seats along with other features. See Pricing for more details.\n\nPricing\n\n#\n\nTeams consist of two basic permission levels: a team owner and collaborators.\n\nOwners have full control over managing their team. They're also responsible for billing. All apps within a team's Dashboard will be billed to the team owner.", "explanation": "The documentation section \"Teams - Billing and Permissions\" explains the team management and billing structure for Magic Labs embedded wallet. Here's a clear and concise breakdown:\n\n**Main Purpose:** This section informs Magic developers about the team management and billing process, including permission levels and subscription plans.\n\n**Key Points:**\n\n1. Every Magic developer gets a personal team by default, allowing solo work or collaboration with up to 2 others.\n2. To add more than 2 seats, users must subscribe to the Startup or Growth plan.\n3. Teams have two permission levels:\n\t* Team Owner: Has full control and is responsible for billing.\n\t* Collaborators: Can help with integration, branding, and user management, but don't have full control.\n\nThis section aims to help developers understand how to manage their Magic teams and billing, ensuring they can effectively collaborate and integrate Magic into their apps.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/home/teams#chunk-1", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nAs a team owner you can add members, remove members, or customize your team name through the Teams page in the Account section of Dashboard.\n\nTeams page\n\nMagic does not currently allow for the creation of new teams.\n\nQuestions or feedback? Join us on Discord!\n\nJoin us on Discord", "explanation": "The documentation section '#Managing your team' is about describing how a team owner can manage their team settings within the Magic Labs platform. The main purpose of this section is to inform team owners on how to perform basic team management tasks, such as adding or removing members and customizing the team name, through the 'Teams page' in the Account section of the Dashboard. Note that currently, creating new teams is not possible.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/home/teams#chunk-2", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "Looking for Passport? Sign up for early access\n\nSign up for early access\n\nMagic's SDKs integrate into any web or mobile application to enable:\n\n\u2022 Passwordless authentication (e.g., email OTP, magic link, social, WebAuthn, 3rd party ID provider)\n\n\u2022 Non-custodial wallets-as-a-service with best-in-class security and performance\n\n\u2022 Customizable embedded wallet widget UI\n\n\u2022 Compatibility with 30+ blockchains\n\nPasswordless authentication (e.g., email OTP, magic link, social, WebAuthn, 3rd party ID provider)\n\nauthentication\n\nNon-custodial wallets-as-a-service with best-in-class security and performance\n\nwallets-as-a-service\n\nCustomizable embedded wallet widget UI\n\nwidget UI\n\nCompatibility with 30+ blockchains\n\n30+ blockchains\n\nRead Magic Guides\n\nVideo Tutorials\n\nUse our CLI or follow our guide to get Magic setup with your web app in minutes.\n\nTry Magic\n\nTry Magic", "explanation": "This documentation section, 'Magic Home - Quick Start' from Magic Labs, is a brief introduction to the Magic platform and its capabilities. It appears to be an overview of the key features and benefits of using Magic's SDKs (Software Development Kits) for web or mobile applications.\n\nThe main purpose of this section is to:\n\n1. Showcase the core features of Magic SDKs, which include:\n\t* Passwordless authentication methods\n\t* Non-custodial wallets-as-a-service with strong security and performance\n\t* Customizable embedded wallet widget UI\n\t* Support for over 30 blockchains\n2. Encourage users to try Magic and get started with integrating it into their web or mobile applications\n3. Provide resources for further learning, such as Magic Guides, Video Tutorials, and a CLI (Command-Line Interface) setup guide.\n\nOverall, this section aims to onboard new users and provide a brief overview of the Magic platform's capabilities and benefits.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/home/welcome#chunk-1", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n#\n\nChoose between a variety of passwordless login options to best suit your audience and use case.\n\nEmail OTP\n\nMagic Links\n\nSMS Login\n\nWebAuthn\n\nBring Your Own IDP\n\nFarcaster", "explanation": "**Authentication Features Overview**\n\nThe documentation section titled 'Features - Authentication' from Magic Labs embedded wallet documentation explains the various authentication options available for users to log in securely without relying on traditional passwords. \n\n**Main Purpose:**\nThe main purpose of this section is to provide developers with the flexibility to choose from multiple passwordless login methods, catering to different user needs and use cases. These options aim to enhance security and user experience while simplifying the login process.\n\n**Available Options:**\nThe section lists the following authentication methods:\n\n1. Email OTP (One-Time Password): Users receive a unique code via email to authenticate.\n2. Magic Links: Users receive a secure link to authenticate.\n3. SMS Login: Users receive a unique code via SMS to authenticate.\n4. WebAuthn: Uses biometric data (e.g., fingerprints or face recognition) or authenticators for secure login.\n5. Bring Your Own IDP (Identity Provider): Integrates with existing identity providers for seamless authentication.\n6. Farcaster: Yet another authentication method, but details are not provided here.\n\nBy choosing the most suitable authentication method, developers can create a more secure and user-friendly login experience for their audience.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/home/welcome#chunk-2", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nMagic creates wallets for your users when they sign up. Our patented Delegated Key Management System (DKMS) keeps keys secure and non-custodial.\n\nDelegated Key Management System (DKMS)\n\nTransaction Signing\n\nPersonal Signatures\n\nFiat On-Ramps\n\nEmail Collection\n\nThird Party Wallets\n\nKey Export", "explanation": "The '#Wallets' section in the Magic Labs documentation is about the wallet system created by Magic for its users. \n\n**Main Purpose:**\nThe main purpose of this section is to provide information on how Magic manages user wallets securely and in a non-custodial manner through its patented Delegated Key Management System (DKMS).\n\n**Key Takeaways:**\n\n1. Magic automatically creates wallets for its users upon sign-up.\n2. The Delegated Key Management System (DKMS) is the core technology that secures user keys without holding custody over them.\n3. The section links to subtopics that delve deeper into various wallet-related features, including:\n   - Transaction Signing\n   - Personal Signatures\n   - Fiat On-Ramps\n   - Email Collection\n   - Third Party Wallets\n   - Key Export\n\nThese topics suggest that the '#Wallets' section is designed to educate developers on how to integrate Magic's wallet management system into their applications while ensuring user key security.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/home/welcome#chunk-3", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nWe support 30+ blockchains and integrate with their respective web3 libraries to minimize additional code needed to use Magic.\n\nPolygon\n\nEthereum\n\nSolana\n\nFlow\n\nAptos\n\nAlgorand", "explanation": "The '#Blockchains' section is about the list of various blockchain platforms that Magic Labs' embedded wallet supports. \n\nIts main purpose is to inform users that Magic offers integrations with over 30 different blockchain platforms, including popular ones like Ethereum, Solana, and Polygon, by working with their respective web3 libraries. \n\nThis means developers using Magic can easily integrate multiple blockchain platforms into their application with minimal additional coding required, making it easier to support different blockchain networks and expand their application's capabilities.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/home/welcome#chunk-4", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "This feature requires a subscription to Growth Plan", "explanation": "The documentation section 'Custom Email Template' from Magic Labs is about customizing email templates used in authentication workflows, specifically for users on the Growth Plan subscription. \n\nThe main purpose of this feature is to allow developers to personalize the content and design of automatically-generated emails, such as password reset, confirmation, and invitation notifications, sent to their users. This customization enables businesses to maintain a cohesive brand identity and enhance the overall user experience.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/customization/custom-email-template#chunk-1", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nMagic's Custom Email Template feature allows you to fully tailor your app's login email using your own custom HTML. With this feature, developers can customize emails that use one-time passcodes or magic links.\n\nNote: Custom email templates require using your own existing email provider. You can register a custom email provider through the Settings page in the Magic dashboard. This feature is available to developers on our Growth or Enterprise Plans - you can head here to learn more.\n\nhere", "explanation": "This section is about Magic's Custom Email Template feature. It allows developers to fully customize the login emails sent to their app users using their own custom HTML. This feature supports emails with one-time passcodes or magic links, but it requires an existing email provider and is available only to developers on the Growth or Enterprise Plans.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/customization/custom-email-template#chunk-2", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCustom Email Templates can be figured in the Magic dashboard. Navigate to Customization, then Email to create and edit templates.\n\nMagic dashboard\n\nThe following is a list of variables that can be used when creating a custom email template in Magic. From the dashboard editor, variables must be wrapped in {{}} in order to be resolved to their value. For example, to use the one-time passcode, insert {{otp}} into the template.\n\n{{}}\n\n{{otp}}\n\n\u2022 otp: One-time passcode. Example: 412320\n\n\u2022 magic_link: Magic link URL. Example: \u201chttps://auth.magic.link/confirm?tlt=eyJh\u2026\u201d\n\n\u2022 app.name: The name of the application. Example: \u201cMy test app\u201d\n\n\u2022 user.email: Email address of the user receiving the login email. Example: joe@magic.link\n\n\u2022 template.locale: Language of the user receiving the login email. Example: en_US\n\n\u2022 login.device.browser: Browser of the user receiving the login email. Example: Chrome\n\n\u2022 login.device.os: Operating system of the user receiving the login email. Example: MacOS\n\n\u2022 login.timestamp: Timestamp of when email was requested\n\notp\n\nmagic_link\n\napp.name\n\nuser.email\n\ntemplate.locale\n\nlogin.device.browser\n\nlogin.device.os\n\nlogin.timestamp", "explanation": "The '#Configuration' section in the Magic Labs embedded wallet documentation is about customizing email templates for authentication. The main purpose is to provide a list of variables that can be used to personalize email templates created in the Magic dashboard.\n\nThese variables, such as one-time passcodes, magic link URLs, application names, user email addresses, and device information, can be inserted into the email template using a syntax like `{{variable_name}}`. This allows for dynamic content in the email templates, making them more informative and user-friendly.\n\nBy using these variables, developers can create customized email templates that provide a better user experience and simplify the authentication process.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/customization/custom-email-template#chunk-3", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n#\n\nOnce a template has been created, you can use the Send Test button at the bottom of the customization page to send an email to the account that is currently logged in. Note that test emails will contain placeholder values for otp and magic_link.\n\notp\n\nmagic_link\n\nYou can also view a live preview of your email in a separate browser window by selecting Preview from the overflow menu at the top of the page.\n\nTesting the full end-to-end user experience will require publishing your template to a live development environment. To ensure the best results, we recommend utilizing a dedicated email testing service such as Litmus.\n\nLitmus", "explanation": "The documentation section '#Usage - #Testing' from the Magic Labs embedded wallet documentation provides information on testing a custom email template.\n\nThe main purpose of this section is to guide users on how to test their custom email templates to ensure they are working as expected before publishing them to a live environment.\n\nThe section explains:\n\n- How to send test emails to the account currently logged in, which will contain placeholder values for OTP and Magic Link.\n- How to view a live preview of the email in a separate browser window.\n- The recommended next step for testing, which is publishing the template to a live development environment using a dedicated email testing service like Litmus for the best results.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/customization/custom-email-template#chunk-4", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nIn order to use the newly created template, the template name must be passed in as an argument into the login method.\n\ntemplate name\n\nCopy\n\n01\n\n\u2060\n\n01\n\n\u2060\n\n02\n\n\u2060\n\n//one-time passcode\n\n02\n\n\u2060\n\n//one-time passcode\n\n03\n\nmagic\n\n.\n\nauth\n\n.\n\nloginWithEmailOTP\n\n(\n\n{\n\n03\n\nmagic\n\n.\n\nauth\n\n.\n\nloginWithEmailOTP\n\n(\n\n{\n\n04\n\nemail\n\n:\n\n'john@example.com'\n\n,\n\n04\n\nemail\n\n:\n\n'john@example.com'\n\n,\n\n05\n\noverrides\n\n:\n\n{\n\n05\n\noverrides\n\n:\n\n{\n\n06\n\nvariation\n\n:\n\n'template name'\n\n,\n\n06\n\nvariation\n\n:\n\n'template name'\n\n,\n\n07\n\n}\n\n07\n\n}\n\n08\n\n}\n\n)\n\n\u2060\n\n08\n\n}\n\n)\n\n\u2060\n\n09\n\n09\n\n10\n\n//magic link\u2060\n\n10\n\n//magic link\u2060\n\n11\n\nmagic\n\n.\n\nauth\n\n.\n\nloginWithMagicLink\n\n(\n\n{\n\n11\n\nmagic\n\n.\n\nauth\n\n.\n\nloginWithMagicLink\n\n(\n\n{\n\n12\n\nemail\n\n:\n\n'john@example.com'\n\n,\n\n12\n\nemail\n\n:\n\n'john@example.com'\n\n,\n\n13\n\noverrides\n\n:\n\n{\n\n13\n\noverrides\n\n:\n\n{\n\n14\n\nvariation\n\n:\n\n'template name'\n\n,\n\n14\n\nvariation\n\n:\n\n'template name'\n\n,\n\n15\n\n}\n\n15\n\n}\n\n16\n\n}\n\n)\n\n16\n\n}\n\n)\n\n17\n\n\u2060\n\n17\n\n\u2060", "explanation": "**Production Documentation Section Explanation**\n\nThe given documentation section, titled '#Production', explains how to integrate a custom email template into Magic Labs' embedded wallet, specifically for production use. \n\n**Main Purpose:**\nThe primary purpose of this section is to provide developers with the necessary code snippets to use a newly created custom email template in their production environment.\n\n**Key Steps:**\n\n1. When calling the `loginWithEmailOTP` or `loginWithMagicLink` method, you need to pass the custom template name as an argument.\n2. This is done by adding an `overrides` object to the method call, which contains a `variation` property set to the name of the custom template.\n\n**Example Code:**\nThe provided code snippets demonstrate how to implement this in both `loginWithEmailOTP` and `loginWithMagicLink` methods. By following this example, developers can ensure that their custom email template is used when sending one-time passcodes or magic links to users in their production environment.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/customization/custom-email-template#chunk-5", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "This feature requires a subscription to Startup or Growth Plan", "explanation": "The \"Account Recovery\" feature from Magic Labs embedded wallet documentation allows users to recover their account in case they lose access to it. This is typically achieved by authenticating the user through alternative means, such as providing verification information or answering security questions.\n\nThe main purpose of this feature is to enable users to regain access to their account even if they have forgotten their login credentials or if their account has been compromised. This feature aims to provide a seamless and secure way for users to recover their account, minimizing the disruption to their experience.\n\nBy offering Account Recovery, Magic Labs embedded wallet helps application developers to provide a more robust and user-friendly authentication experience to their users.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/features/account-recovery#chunk-1", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nMagic allows users to recover their account if they can no longer access the email associated with their account. This is made possible via the Account Recovery feature, which is enabled via the user's phone through SMS. Upon recovering the account, the user is prompted to change their email address.\n\nThis feature requires two prerequisites:\n\n\u2022 The primary login factor is an email (this includes loginWithMagicLink and loginWithEmailOTP implementations)\n\n\u2022 The user can prove ownership of a phone number, which will be used as the recovery factor\n\nThe primary login factor is an email (this includes loginWithMagicLink and loginWithEmailOTP implementations)\n\nloginWithMagicLink\n\nloginWithEmailOTP\n\nThe user can prove ownership of a phone number, which will be used as the recovery factor\n\n#\n\nOnly available with Dedicated Wallet.\n\nDedicated Wallet\n\nAccount recovery methods are available on the following client-side SDKs:\n\n\u2022 Web\n\n\u2022 React Native\n\n\u2022 iOS\n\n\u2022 Android\n\nWeb\n\nReact Native\n\niOS\n\nAndroid", "explanation": "**Overview of Account Recovery Feature**\n\nThe Magic Labs Account Recovery feature allows users to regain access to their account when they no longer have access to their associated email address. This feature uses SMS verification through a user's phone as a recovery factor, requiring the user to prove ownership of a phone number. After account recovery, the user must update their email address.\n\n**Main Purpose and Requirements**\n\nThe primary purpose of this feature is to provide an alternative method for users to recover their account when they can no longer access their email account. \n\nTo use this feature, two conditions must be met:\n\n1. The primary login factor is an email-based method (either loginWithMagicLink or loginWithEmailOTP).\n2. The user has a verified phone number that can be used as the recovery factor.\n\n**Compatibility**\n\nAccount Recovery is only available for Dedicated Wallets and is supported on the following client-side SDKs:\n\n- Web\n- React Native\n- iOS\n- Android", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/features/account-recovery#chunk-2", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n#\n\nTo enable SMS recovery for your users:\n\nCopy\n\n01\n\n\u2060magic\n\n.\n\nuser\n\n.\n\nshowSettings\n\n(\n\n)\n\n;\n\n01\n\n\u2060magic\n\n.\n\nuser\n\n.\n\nshowSettings\n\n(\n\n)\n\n;\n\nThis will display a settings modal where users will be able to add a recovery factor.\n\nAdditionally, Magic supports a deep linking flow where you can send users straight to adding a recovery factor. The flow can also be whitelabeled:\n\nThe flow can also be whitelabeled\n\nCopy\n\n01\n\nmagic\n\n.\n\nuser\n\n.\n\nshowSettings\n\n(\n\n{\n\npage\n\n:\n\n'recovery'\n\n}\n\n)\n\n;\n\n01\n\nmagic\n\n.\n\nuser\n\n.\n\nshowSettings\n\n(\n\n{\n\npage\n\n:\n\n'recovery'\n\n}\n\n)\n\n;", "explanation": "The documentation section '#Usage - #Enabling Account Recovery' from the Magic Labs embedded wallet is about allowing users to recover their accounts in case they lose access to their primary authentication method. \n\nThe main purpose of this section is to guide developers on how to enable account recovery via SMS for their users. This is done by displaying a settings modal where users can add a recovery factor, such as a phone number. \n\nThe documentation also provides two code snippets:\n\n1. The first one displays a general settings modal, which allows users to access various settings, including account recovery.\n\n2. The second one is more specific, and it directs users to the recovery page directly using deep linking. This flow can also be customized (whitelabeled) to match the developer's desired branding.\n\nIn summary, this section of the documentation helps developers implement account recovery functionality in their Magic Labs embedded wallet, making it easier for users to regain access to their accounts in case of an issue.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/features/account-recovery#chunk-3", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nOnce a recovery factor is a set up, a user can recover their account. To enable this, the developer should call the following:\n\nCopy\n\n01\n\nmagic\n\n.\n\nuser\n\n.\n\nrecoverAccount\n\n(\n\n{\n\nemail\n\n:\n\nemail\n\n}\n\n)\n\n01\n\nmagic\n\n.\n\nuser\n\n.\n\nrecoverAccount\n\n(\n\n{\n\nemail\n\n:\n\nemail\n\n}\n\n)\n\nIt\u2019s important to note that updating the recovery factor is a security sensitive operation so users will first be prompted to demonstrate account ownership by authenticating their email via a one-time-passcode before they are able to add a recovery phone number.", "explanation": "**Recover Account Feature Explanation**\n\nThe '#Recover Account' section in the Magic Labs embedded wallet documentation explains how to enable account recovery for users in case they forget their login credentials. The main purpose of this feature is to allow users to regain access to their accounts in a secure manner.\n\n**Key Steps and Security Measures:**\n\n1. **Recovery Factor Setup**: The user sets up a recovery factor, such as a recovery phone number.\n2. **Recovery Account Function**: To initiate account recovery, the developer calls the `magic.user.recoverAccount` function, passing the user's email as an argument.\n3. **Email Verification**: To ensure security, the user is prompted to authenticate their email via a one-time passcode before they can add a recovery phone number.\n\nBy implementing this feature, developers can provide a secure and convenient way for users to recover their accounts, while maintaining the security and integrity of the user's account data.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/features/account-recovery#chunk-4", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nzkSync is a Layer 2 scaling solution for Ethereum, leveraging zk-rollup technology to offer fast and low-cost transactions while maintaining a high level of security.\n\nzkSync\n\nAs zkSync is EVM compatible, you can follow the Ethereum documentation to send your first transaction and utilize all other wallet features.\n\nEthereum", "explanation": "The provided documentation section is about zkSync, a Layer 2 scaling solution for Ethereum. Here's a clear and concise explanation:\n\n**What is zkSync?**\nzkSync is a technology that enables faster and cheaper transactions on the Ethereum blockchain while maintaining high security standards. It uses \"zk-rollup\" technology to achieve this.\n\n**Main Purpose:**\nThe primary purpose of zkSync is to improve the scalability and efficiency of the Ethereum network. By leveraging zk-rollup technology, zkSync reduces the processing time and transaction costs associated with traditional Ethereum transactions, making it a more viable option for high-volume or high-frequency transactions.\n\n**Key Takeaway:**\nAs zkSync is compatible with the Ethereum Virtual Machine (EVM), developers can utilize Ethereum documentation to interact with zkSync, including sending transactions and using other wallet features.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/evm/zksync#chunk-1", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nEnsure you have installed the Magic SDK and have access to your API key, follow the quickstart to get started.\n\nquickstart\n\nCopy\n\n01\n\n// Setting network to point to zkSync testnet\n\n01\n\n// Setting network to point to zkSync testnet\n\n02\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_PUBLISHABLE_API_KEY'\n\n,\n\n{\n\n02\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_PUBLISHABLE_API_KEY'\n\n,\n\n{\n\n03\n\nnetwork\n\n:\n\n{\n\n03\n\nnetwork\n\n:\n\n{\n\n04\n\nrpcUrl\n\n:\n\n'https://sepolia.era.zksync.dev'\n\n,\n\n04\n\nrpcUrl\n\n:\n\n'https://sepolia.era.zksync.dev'\n\n,\n\n05\n\nchainId\n\n:\n\n300\n\n,\n\n05\n\nchainId\n\n:\n\n300\n\n,\n\n06\n\n}\n\n,\n\n06\n\n}\n\n,\n\n07\n\n}\n\n)\n\n;\n\n07\n\n}\n\n)\n\n;", "explanation": "**Configure zkSync Documentation Overview**\n\nThe given documentation section, \"#Configure zkSync\", from the Magic Labs embedded wallet documentation, provides instructions on how to set up and configure the zkSync testnet using the Magic SDK.\n\n**Main Purpose:**\n\nThe main purpose of this section is to guide developers in configuring their application to interact with the zkSync blockchain testnet using the Magic SDK. Specifically, it explains how to:\n\n1. Install the Magic SDK and obtain an API key.\n2. Initialize the Magic library with the API key.\n3. Set the network configuration to point to the zkSync testnet.\n\n**Key Configuration Details:**\n\n* `rpcUrl`: set to `'https://sepolia.era.zksync.dev'`, which is the URL for the zkSync testnet.\n* `chainId`: set to `300`, which is the unique identifier for the zkSync testnet.\n\nBy following these steps, developers can successfully configure their application to interact with the zkSync testnet using the Magic SDK, enabling them to build and test their decentralized applications.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/evm/zksync#chunk-2", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 All Auth, User and Wallet module methods for Dedicated Wallets\n\n\u2022 All EVM Provider functionality to respond to supported RPC methods\n\nAuth\n\nUser\n\nWallet\n\nDedicated Wallets\n\nRPC methods\n\nNeed a feature or see a problem? File an issue on our github repo.\n\ngithub repo", "explanation": "The '#Compatibility' section in the Magic Labs embedded wallet documentation for zkSync is about specifying the compatible features and functionalities of the Magic platform with the zkSync blockchain.\n\nIn essence, this section is stating that Magic supports the following features on the zkSync blockchain:\n\n1. All Auth, User, and Wallet module methods for Dedicated Wallets.\n2. EVM (Ethereum Virtual Machine) Provider functionality that can respond to supported RPC (Remote Procedure Call) methods.\n\nThe main purpose of this section is to inform developers about the compatibility of the Magic platform with the zkSync blockchain, allowing them to understand what features they can use and integrate seamlessly with their applications.\n\nIf developers need additional features or encounter any issues, they are encouraged to file an issue on the Magic Labs GitHub repository for further support.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/evm/zksync#chunk-3", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 Documentation: https://docs.zksync.io/\n\n\u2022 Block Explorer: https://explorer.zksync.io/ (Mainnet)https://sepolia.explorer.zksync.io/ (Testnet)\n\nhttps://docs.zksync.io/\n\n\u2022 https://explorer.zksync.io/ (Mainnet)\n\n\u2022 https://sepolia.explorer.zksync.io/ (Testnet)\n\nhttps://explorer.zksync.io/\n\nhttps://sepolia.explorer.zksync.io/\n\n\u2022 Faucets: https://faucet.chainstack.com/zksync-testnet-faucet\n\nhttps://faucet.chainstack.com/zksync-testnet-faucet", "explanation": "The '#Resources & Tools' section is about providing users with links to useful external resources for zkSync, an EVM-compatible blockchain. The main purpose of this section is to offer convenient access to additional information and tools that facilitate the development and testing of applications on the zkSync blockchain. \n\nThis includes links to:\n\n- Official zkSync documentation (for learning and understanding the technology)\n- zkSync block explorer (for viewing and verifying transactions on the mainnet and testnet)\n- Faucets (for obtaining testnet tokens to fuel development and testing)\n\nBy providing these resources, the section aims to empower developers with the necessary tools and information to build, test, and deploy their applications on the zkSync blockchain.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/evm/zksync#chunk-4", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nDecentralized ID (DID) tokens are used as cryptographically-generated proofs that are used to manage user access to your application's resource server.\n\nBy adapting W3C's Decentralized Identifiers (DID) protocol, the DID token created by the Magic client-side SDK (see getIdToken) leverages the Ethereum blockchain and elliptic curve cryptography to generate verifiable proofs of identity and authorization. These proofs are encoded in a lightweight, digital signature that can be shared between client and server to manage permissions, protect routes and resources, or authenticate users.\n\nDecentralized Identifiers\n\ngetIdToken\n\ngetIdToken\n\nEthereum\n\nelliptic curve cryptography\n\nThe DID token is encoded as a Base64 JSON string tuple representing [proof, claim]:\n\n[proof, claim]\n\n\u2022 proof: A digital signature that proves the validity of the given claim.\n\n\u2022 claim: Unsigned data the user asserts. This should equal the proof after Elliptic Curve recovery.\n\nproof\n\nclaim\n\nclaim\n\nproof\n\nCopy\n\n01\n\nconst\n\nclaim\n\n=\n\nJSON\n\n.\n\nstringify\n\n(\n\n{\n\n...\n\n}\n\n)\n\n;\n\n// Data representing the user's access\n\n01\n\nconst\n\nclaim\n\n=\n\nJSON\n\n.\n\nstringify\n\n(\n\n{\n\n...\n\n}\n\n)\n\n;\n\n// Data representing the user's access\n\n02\n\nconst\n\nproof\n\n=\n\nsign\n\n(\n\nclaim\n\n)\n\n;\n\n// Sign data with Ethereum's `personal_sign` method\n\n02\n\nconst\n\nproof\n\n=\n\nsign\n\n(\n\nclaim\n\n)\n\n;\n\n// Sign data with Ethereum's `personal_sign` method\n\n03\n\nconst\n\nDIDToken\n\n=\n\nbtoa\n\n(\n\nJSON\n\n.\n\nstringify\n\n(\n\n[\n\nproof\n\n,\n\nclaim\n\n]\n\n)\n\n)\n\n;\n\n03\n\nconst\n\nDIDToken\n\n=\n\nbtoa\n\n(\n\nJSON\n\n.\n\nstringify\n\n(\n\n[\n\nproof\n\n,\n\nclaim\n\n]\n\n)\n\n)\n\n;", "explanation": "**Overview of Decentralized ID (DID) Tokens**\n\nDecentralized ID (DID) tokens are cryptographically-generated digital signatures that prove a user's identity and authorization to access specific resources within an application. These tokens are created using the Magic client-side SDK's `getIdToken` feature, which employs the Ethereum blockchain and elliptic curve cryptography to generate secure, verifiable proofs of identity.\n\n**Main Purpose:**\n\nThe primary purpose of DID tokens is to manage user access to an application's resource server by providing a secure, lightweight way to authenticate users and authorize access to protected routes and resources. The DID token contains two components: \n\n1. **Proof**: A digital signature that confirms the validity of the claim.\n2. **Claim**: Unsigned data asserted by the user, which should match the proof after elliptic curve recovery.\n\n**How it Works:**\n\nThe DID token creation process involves:\n\n1. Signing user access data with Ethereum's `personal_sign` method to generate a digital signature (proof).\n2. Encoding the proof and claim as a Base64 JSON string tuple (`[proof, claim]`).\n3. Using this encoded string to create the DID token, which can be shared between the client and server to manage permissions and authenticate users.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/features/decentralized-id#chunk-1", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 Users have control over their own identity without relying on a central authority\n\n\u2022 DIDs can be used for secure authentication and authorization processes", "explanation": "**Explanation of the Documentation Section**\n\nThe '#Use Cases' section in the Magic Labs embedded wallet documentation, specifically under the 'Decentralized ID' feature, highlights the main purposes and benefits of using Decentralized Identifiers (DIDs). \n\n**Main Purpose:**\nThe two use cases outlined in this section focus on user control and security in identity management. The main purpose is to give users autonomy over their identity data while enabling secure authentication and authorization processes.\n\n**Key Takeaways:**\n1. **User Control:** Users can manage their own identity without relying on a central authority.\n2. **Secure Authentication:** DIDs can be utilized for secure authentication and authorization, promoting a more secure and trustworthy environment.\n\nIn summary, the '#Use Cases' section showcases the potential applications and benefits of Decentralized Identifiers in the Magic Labs embedded wallet, emphasizing user control and secure authentication.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/features/decentralized-id#chunk-2", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n#\n\nCopy\n\n01\n\n// Construct the user's claim\n\n01\n\n// Construct the user's claim\n\n02\n\nconst\n\nclaim\n\n=\n\nJSON\n\n.\n\nstringify\n\n(\n\n{\n\n02\n\nconst\n\nclaim\n\n=\n\nJSON\n\n.\n\nstringify\n\n(\n\n{\n\n03\n\niat\n\n:\n\nMath\n\n.\n\nfloor\n\n(\n\nDate\n\n.\n\nnow\n\n(\n\n)\n\n/\n\n1000\n\n)\n\n,\n\n03\n\niat\n\n:\n\nMath\n\n.\n\nfloor\n\n(\n\nDate\n\n.\n\nnow\n\n(\n\n)\n\n/\n\n1000\n\n)\n\n,\n\n04\n\next\n\n:\n\nMath\n\n.\n\nfloor\n\n(\n\nDate\n\n.\n\nnow\n\n(\n\n)\n\n/\n\n1000\n\n)\n\n+\n\nlifespan\n\n,\n\n04\n\next\n\n:\n\nMath\n\n.\n\nfloor\n\n(\n\nDate\n\n.\n\nnow\n\n(\n\n)\n\n/\n\n1000\n\n)\n\n+\n\nlifespan\n\n,\n\n05\n\niss\n\n:\n\n`\n\ndid:ethr:\n\n${\n\nuser_public_address\n\n}\n\n`\n\n,\n\n05\n\niss\n\n:\n\n`\n\ndid:ethr:\n\n${\n\nuser_public_address\n\n}\n\n`\n\n,\n\n06\n\nsub\n\n:\n\nsubject\n\n,\n\n06\n\nsub\n\n:\n\nsubject\n\n,\n\n07\n\naud\n\n:\n\naudience\n\n,\n\n07\n\naud\n\n:\n\naudience\n\n,\n\n08\n\nnbf\n\n:\n\nMath\n\n.\n\nfloor\n\n(\n\nDate\n\n.\n\nnow\n\n(\n\n)\n\n/\n\n1000\n\n)\n\n,\n\n08\n\nnbf\n\n:\n\nMath\n\n.\n\nfloor\n\n(\n\nDate\n\n.\n\nnow\n\n(\n\n)\n\n/\n\n1000\n\n)\n\n,\n\n09\n\ntid\n\n:\n\nuuid\n\n(\n\n)\n\n,\n\n09\n\ntid\n\n:\n\nuuid\n\n(\n\n)\n\n,\n\n10\n\n}\n\n)\n\n;\n\n10\n\n}\n\n)\n\n;\n\n11\n\n11\n\n12\n\n// Sign the claim with the user's private key\n\n12\n\n// Sign the claim with the user's private key\n\n13\n\n// (this way the claim is verifiable and impossible to forge).\n\n13\n\n// (this way the claim is verifiable and impossible to forge).\n\n14\n\nconst\n\nproof\n\n=\n\nsign\n\n(\n\nclaim\n\n)\n\n;\n\n14\n\nconst\n\nproof\n\n=\n\nsign\n\n(\n\nclaim\n\n)\n\n;\n\n15\n\n15\n\n16\n\n// Encode the DIDToken so it can be transported over HTTP.\n\n16\n\n// Encode the DIDToken so it can be transported over HTTP.\n\n17\n\nconst\n\nDIDToken\n\n=\n\nbtoa\n\n(\n\nJSON\n\n.\n\nstringify\n\n(\n\n[\n\nproof\n\n,\n\nclaim\n\n]\n\n)\n\n)\n\n;\n\n17\n\nconst\n\nDIDToken\n\n=\n\nbtoa\n\n(\n\nJSON\n\n.\n\nstringify\n\n(\n\n[\n\nproof\n\n,\n\nclaim\n\n]\n\n)\n\n)\n\n;", "explanation": "**Decentralized ID (DID) Token Generation**\n\nThe provided pseudo-code snippet is from the Magic Labs documentation, specifically the \"Usage - Generating a DID Token\" section. The main purpose of this code is to generate a Decentralized ID (DID) token, which is a digital credential that verifies a user's identity without relying on a centralized authority.\n\n**Step-by-Step Explanation:**\n\n1. **Construct the User's Claim**: Create a JSON object containing the user's claims, such as:\n\t* `iat`: Issued At (the current timestamp)\n\t* `ext`: Expiration Time (the current timestamp plus a specified lifespan)\n\t* `iss`: Issuer (the user's Ethereum address in the format `did:ethr:<user_public_address>`)\n\t* `sub`: Subject (the user's identifier)\n\t* `aud`: Audience (the intended recipient of the token)\n\t* `nbf`: Not Before (the current timestamp)\n\t* `tid`: Transaction ID (a unique identifier generated using a UUID function)\n2. **Sign the Claim**: Use the user's private key to sign the claim, making it verifiable and impossible to forge.\n3. **Encode the DID Token**: Combine the signed claim and proof, and then encode the result using Base64 (btoa) so it can be safely transported over HTTP.\n\n**Generated DID Token**: The resulting `DIDToken` is a URL-safe string that can be used to authenticate and verify the user's identity in decentralized systems.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/features/decentralized-id#chunk-3", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\niat\n\next\n\nnbf\n\niss\n\nDecentralized Identifier\n\nsub\n\naud\n\nadd\n\ntid", "explanation": "The Token Specification section from the Magic Labs documentation outlines the structure of a specific token used in Decentralized Identifier (DID) authentication. \n\nThis token is in JSON Web Token (JWT) format and contains several key-value pairs that define the token's properties and payload.\n\nThe main purpose of this section is to detail the mandatory and optional claims that are included in the token. These claims provide information about the token's issuer, subject, audience, and expiration, among others.\n\nHere's a breakdown of what each claim represents:\n\n* `iat`: Issued At - The time at which the token was issued.\n* `ext`: Expiration Time - The time at which the token expires.\n* `nbf`: Not Before - The earliest time at which the token can be used.\n* `iss`: Issuer - The entity that issued the token.\n* `Decentralized Identifier`: A string that is a unique identifier, used to identify the subject of the token.\n* `sub`: Subject - The subject of the token, often the user's DID.\n* `aud`: Audience - The intended recipient of the token.\n* `add`: Additional data - Custom data that is included in the token for specific use cases.\n* `tid`: Transaction ID - A unique identifier for the transaction.\n\nThis Token Specification provides developers with a clear understanding of the expected structure and contents of the token, enabling seamless integration and verification.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/features/decentralized-id#chunk-4", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 Decentralized ID - (W3C)\n\nDecentralized ID - (W3C)", "explanation": "The \"#Resources\" section from the Magic Labs embedded wallet documentation appears to be a section that provides a reference or citation to a related resource. \n\nThe main purpose of this section is to acknowledge and provide further reading or information on the Decentralized ID concept, specifically referencing the World Wide Web Consortium (W3C) standards. \n\nIn simpler terms, this section is saying \"for more information on Decentralized IDs, check out the W3C's documentation\", thus allowing users to delve deeper into the topic if needed, and giving credit to the original sources that Magic Labs may have used for their own implementation or write-up on the topic.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/features/decentralized-id#chunk-5", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nFlow is an L1 blockchain featuring a distinctive multi-role architecture designed to increase throughput and efficiency without resorting to sharding. It adopts Cadence as its smart contract language and FCL (Flow Client Library) as the primary protocol for dapp, wallet, and user interactions with the chain.\n\nFlow\n\nFCL (Flow Client Library)", "explanation": "The documentation section 'Flow - Overview' provides an introduction to the Flow blockchain and its primary components. \n\nThe main points are:\n\n1. **Flow Blockchain**: Flow is a Layer 1 (L1) blockchain that aims to improve performance and efficiency through a unique multi-role architecture, avoiding the need for sharding.\n\n2. **Key Components**: \n   - **Cadence**: It is the smart contract language used on the Flow blockchain.\n   - **FCL (Flow Client Library)**: It is the primary protocol used for interactions between dapps (decentralized applications), wallets, and users with the Flow chain.\n\nThe main purpose of this section is to provide a brief overview of the Flow blockchain, its architecture, and key components, which is essential for developers to understand how to integrate and interact with the Flow blockchain, specifically when using Magic Labs embedded wallet.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/other/flow#chunk-1", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nThis section will cover how to use our previous Flow integration via a custom extension that can be used alongside the core Magic SDK. You can use this extension to access Magic functionality alongside your FCL integration, however you do not need to use the authorization function shown here.\n\n#\n\nMagic interacts with the Flow blockchain via Magic's extension NPM package @magic-ext/flow. The Flow extension also lets you interact with the blockchain using methods from Flow's Javascript SDK.\n\nFlow\n\n@magic-ext/flow\n\n@magic-ext/flow\n\nFlow's Javascript SDK\n\nTo get started, install the following dependencies for your project:\n\nCopy\n\n01\n\nnpm\n\ninstall\n\n@magic-ext/flow magic-sdk\n\n01\n\nnpm\n\ninstall\n\n@magic-ext/flow magic-sdk", "explanation": "**Magic Extension Installation for Flow Blockchain**\n\nThis documentation section explains how to install and set up the Magic Extension for the Flow blockchain in your project. The Magic Extension is a custom integration that allows you to use Magic functionality alongside the Flow blockchain, in addition to your existing Flow Client Library (FCL) integration.\n\n**Main Purpose:**\nThe main purpose of this section is to guide developers in installing the required dependencies for the Magic Extension, specifically `@magic-ext/flow` and `magic-sdk`, using NPM (Node Package Manager). This installation enables developers to interact with the Flow blockchain using Magic's extension, as well as methods from Flow's JavaScript SDK.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/other/flow#chunk-2", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nThe Magic class is the entry-point to the Magic SDK. It must be instantiated with a Magic publishable key.\n\nIf this is your first time using Magic with Flow, you may need to wait up to 30 seconds after clicking the magic link before your login completes because Magic has to wait for the Flow blockchain to confirm a transaction that creates your account.\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\nimport\n\n{\n\nFlowExtension\n\n}\n\nfrom\n\n'@magic-ext/flow'\n\n;\n\n02\n\nimport\n\n{\n\nFlowExtension\n\n}\n\nfrom\n\n'@magic-ext/flow'\n\n;\n\n03\n\n03\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_API_KEY'\n\n,\n\n{\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_API_KEY'\n\n,\n\n{\n\n05\n\nextensions\n\n:\n\n[\n\n05\n\nextensions\n\n:\n\n[\n\n06\n\nnew\n\nFlowExtension\n\n(\n\n{\n\n06\n\nnew\n\nFlowExtension\n\n(\n\n{\n\n07\n\n// testnet or mainnet to connect different network\n\n07\n\n// testnet or mainnet to connect different network\n\n08\n\nrpcUrl\n\n:\n\n'https://rest-testnet.onflow.org'\n\n,\n\n08\n\nrpcUrl\n\n:\n\n'https://rest-testnet.onflow.org'\n\n,\n\n09\n\nnetwork\n\n:\n\n'testnet'\n\n09\n\nnetwork\n\n:\n\n'testnet'\n\n10\n\n}\n\n)\n\n,\n\n10\n\n}\n\n)\n\n,\n\n11\n\n]\n\n,\n\n11\n\n]\n\n,\n\n12\n\n}\n\n)\n\n;\n\n12\n\n}\n\n)\n\n;", "explanation": "**Initialization - ES Modules/TypeScript**\n\nThis documentation section explains how to initialize the Magic SDK in an ES Modules/TypeScript environment to interact with the Flow blockchain.\n\n**Main Purpose:**\n\nThe main purpose of this code snippet is to set up the Magic SDK with a Flow extension, allowing developers to authenticate and interact with the Flow blockchain. The Magic class is the entry point to the Magic SDK and requires a Magic publishable key to be instantiated.\n\n**Key Steps:**\n\n1. Import the Magic class from the `magic-sdk` module and the FlowExtension class from the `@magic-ext/flow` module.\n2. Create a new instance of the Magic class, passing in your Magic API key and an options object.\n3. In the options object, specify the `extensions` property with a new FlowExtension instance configured for the desired network (testnet or mainnet).\n\n**Configuration Options:**\n\nThe FlowExtension instance takes an options object with the following properties:\n\n* `rpcUrl`: The URL of the Flow blockchain node to connect to.\n* `network`: The network to connect to (either `testnet` or `mainnet`).\n\nBy following these steps, developers can initialize the Magic SDK and start interacting with the Flow blockchain using the Magic Wallet.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/other/flow#chunk-3", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nYou can use magic.flow.getAccount() method to let users login.\n\nmagic.flow.getAccount()\n\nCopy\n\n01\n\nimport\n\n*\n\nas\n\nfcl\n\nfrom\n\n'@onflow/fcl'\n\n;\n\n01\n\nimport\n\n*\n\nas\n\nfcl\n\nfrom\n\n'@onflow/fcl'\n\n;\n\n02\n\n02\n\n03\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n03\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n04\n\nimport\n\n{\n\nFlowExtension\n\n}\n\nfrom\n\n'@magic-ext/flow'\n\n;\n\n04\n\nimport\n\n{\n\nFlowExtension\n\n}\n\nfrom\n\n'@magic-ext/flow'\n\n;\n\n05\n\n05\n\n06\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_API_KEY'\n\n,\n\n{\n\n06\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_API_KEY'\n\n,\n\n{\n\n07\n\nextensions\n\n:\n\n[\n\n07\n\nextensions\n\n:\n\n[\n\n08\n\nnew\n\nFlowExtension\n\n(\n\n{\n\n08\n\nnew\n\nFlowExtension\n\n(\n\n{\n\n09\n\nrpcUrl\n\n:\n\n'https://rest-testnet.onflow.org'\n\n,\n\n09\n\nrpcUrl\n\n:\n\n'https://rest-testnet.onflow.org'\n\n,\n\n10\n\nnetwork\n\n:\n\n'testnet'\n\n// testnet or mainnet to connect different network\n\n10\n\nnetwork\n\n:\n\n'testnet'\n\n// testnet or mainnet to connect different network\n\n11\n\n}\n\n)\n\n,\n\n11\n\n}\n\n)\n\n,\n\n12\n\n]\n\n,\n\n12\n\n]\n\n,\n\n13\n\n}\n\n)\n\n;\n\n13\n\n}\n\n)\n\n;\n\n14\n\n14\n\n15\n\nconst\n\nlogin\n\n=\n\nasync\n\n(\n\n)\n\n=>\n\n{\n\n15\n\nconst\n\nlogin\n\n=\n\nasync\n\n(\n\n)\n\n=>\n\n{\n\n16\n\nconst\n\naccount\n\n=\n\nawait\n\nmagic\n\n.\n\nflow\n\n.\n\ngetAccount\n\n(\n\n)\n\n;\n\n16\n\nconst\n\naccount\n\n=\n\nawait\n\nmagic\n\n.\n\nflow\n\n.\n\ngetAccount\n\n(\n\n)\n\n;\n\n17\n\nconsole\n\n.\n\nlog\n\n(\n\naccount\n\n)\n\n17\n\nconsole\n\n.\n\nlog\n\n(\n\naccount\n\n)\n\n18\n\n}\n\n18\n\n}\n\n19\n\n19\n\n20\n\nlogin\n\n(\n\n)\n\n20\n\nlogin\n\n(\n\n)", "explanation": "**Login Functionality with Magic Labs Embedded Wallet on Flow Blockchain**\n\nThe provided documentation section, '#Login', explains how to allow users to log in using the Magic Labs embedded wallet on the Flow blockchain. \n\n**Main Purpose:**\nThe main purpose of this code snippet is to enable users to log in to a Flow blockchain application using their Magic Labs wallet. This is achieved by utilizing the `magic.flow.getAccount()` method, which retrieves the user's account information and allows them to access the application.\n\n**Key Steps:**\n\n1. Import necessary libraries, including `@onflow/fcl`, `magic-sdk`, and `@magic-ext/flow`.\n2. Initialize the Magic Labs instance with your API key and specify the Flow extension.\n3. Configure the Flow extension with the desired RPC URL and network (testnet or mainnet).\n4. Define an asynchronous login function that calls the `magic.flow.getAccount()` method to retrieve the user's account information.\n5. Log the retrieved account information to the console.\n\nBy following these steps, developers can integrate the Magic Labs embedded wallet into their Flow blockchain application and provide a seamless login experience for users.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/other/flow#chunk-4", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n#\n\nBefore you can send transaction on the Flow blockchain, you'll need to acquire some test Flow (Flow's native cryptocurrency for test network).\n\n\u2022 Go to our Flow Example application\n\n\u2022 Login with your email address\n\n\u2022 Copy your Flow public address\n\n\u2022 Go to the Flow Faucet\n\n\u2022 Fill in the form and paste your copied Flow public address in the Address field\n\n\u2022 You can receive 1000 test Flow\n\n\u2022 Now you can use your test Flow in our example app\n\nFlow Example\n\nFlow Faucet\n\nexample app", "explanation": "This documentation section provides a step-by-step guide to acquire test Flow (Flow's native cryptocurrency on the test network) before sending a transaction on the Flow blockchain. \n\nThe main purpose of this section is to walk the user through obtaining test Flow using the Flow Faucet in order to test and simulate transactions on the Flow network within the Magic Labs embedded wallet.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/other/flow#chunk-5", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "Note that the Magic Flow extension follows the method names and conventions of Flow's Javascript SDK. You can use the magic.flow.authorization() method to replace the fcl.authenticate().\n\nFlow's Javascript SDK\n\nmagic.flow.authorization()\n\nfcl.authenticate()", "explanation": "The 'Call Extension Method' documentation section is about using the Magic Flow extension with the Magic Labs embedded wallet. Specifically, it focuses on replacing a method from Flow's official JavaScript SDK (fcl.authenticate()) with a similar method provided by Magic Lab's extension (magic.flow.authorization()).\n\nThe main purpose of this section is to inform developers that they can use magic.flow.authorization() in place of fcl.authenticate() when working with the Magic Flow extension. This allows for easier integration and authentication with the Flow blockchain, leveraging the functionality of the Magic Labs embedded wallet.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/other/flow#chunk-6", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "Copy\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\nimport\n\n{\n\nFlowExtension\n\n}\n\nfrom\n\n'@magic-ext/flow'\n\n;\n\n02\n\nimport\n\n{\n\nFlowExtension\n\n}\n\nfrom\n\n'@magic-ext/flow'\n\n;\n\n03\n\nimport\n\n*\n\nas\n\nfcl\n\nfrom\n\n'@onflow/fcl'\n\n;\n\n03\n\nimport\n\n*\n\nas\n\nfcl\n\nfrom\n\n'@onflow/fcl'\n\n;\n\n04\n\n04\n\n05\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_API_KEY'\n\n,\n\n{\n\n05\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_API_KEY'\n\n,\n\n{\n\n06\n\nextensions\n\n:\n\n[\n\n06\n\nextensions\n\n:\n\n[\n\n07\n\nnew\n\nFlowExtension\n\n(\n\n{\n\n07\n\nnew\n\nFlowExtension\n\n(\n\n{\n\n08\n\n// testnet or mainnet to connect different network\n\n08\n\n// testnet or mainnet to connect different network\n\n09\n\nrpcUrl\n\n:\n\n'https://rest-testnet.onflow.org'\n\n,\n\n09\n\nrpcUrl\n\n:\n\n'https://rest-testnet.onflow.org'\n\n,\n\n10\n\nnetwork\n\n:\n\n'testnet'\n\n10\n\nnetwork\n\n:\n\n'testnet'\n\n11\n\n}\n\n)\n\n,\n\n11\n\n}\n\n)\n\n,\n\n12\n\n]\n\n,\n\n12\n\n]\n\n,\n\n13\n\n}\n\n)\n\n;\n\n13\n\n}\n\n)\n\n;\n\n14\n\n14\n\n15\n\n// CONFIGURE ACCESS NODE\n\n15\n\n// CONFIGURE ACCESS NODE\n\n16\n\nfcl\n\n.\n\nconfig\n\n(\n\n)\n\n.\n\nput\n\n(\n\n'accessNode.api'\n\n,\n\n'https://rest-testnet.onflow.org'\n\n)\n\n;\n\n16\n\nfcl\n\n.\n\nconfig\n\n(\n\n)\n\n.\n\nput\n\n(\n\n'accessNode.api'\n\n,\n\n'https://rest-testnet.onflow.org'\n\n)\n\n;\n\n17\n\n17\n\n18\n\n// CONFIGURE WALLET\n\n18\n\n// CONFIGURE WALLET\n\n19\n\n// replace with your own wallets configuration\n\n19\n\n// replace with your own wallets configuration\n\n20\n\n// Below is the local environment configuration for the dev-wallet\n\n20\n\n// Below is the local environment configuration for the dev-wallet\n\n21\n\nfcl\n\n.\n\nconfig\n\n(\n\n)\n\n.\n\nput\n\n(\n\n'challenge.handshake'\n\n,\n\n'http://access-001.devnet9.nodes.onflow.org:8000'\n\n)\n\n;\n\n21\n\nfcl\n\n.\n\nconfig\n\n(\n\n)\n\n.\n\nput\n\n(\n\n'challenge.handshake'\n\n,\n\n'http://access-001.devnet9.nodes.onflow.org:8000'\n\n)\n\n;\n\n22\n\n22\n\n23\n\nconst\n\nAUTHORIZATION_FUNCTION\n\n=\n\nmagic\n\n.\n\nflow\n\n.\n\nauthorization\n\n;\n\n23\n\nconst\n\nAUTHORIZATION_FUNCTION\n\n=\n\nmagic\n\n.\n\nflow\n\n.\n\nauthorization\n\n;\n\n24\n\n24\n\n25\n\nconst\n\nverify\n\n=\n\nasync\n\n(\n\n)\n\n=>\n\n{\n\n25\n\nconst\n\nverify\n\n=\n\nasync\n\n(\n\n)\n\n=>\n\n{\n\n26\n\ntry\n\n{\n\n26\n\ntry\n\n{\n\n27\n\nconst\n\ngetReferenceBlock\n\n=\n\nasync\n\n(\n\n)\n\n=>\n\n{\n\n27\n\nconst\n\ngetReferenceBlock\n\n=\n\nasync\n\n(\n\n)\n\n=>\n\n{\n\n28\n\nconst\n\nresponse\n\n=\n\nawait\n\nfcl\n\n.\n\nsend\n\n(\n\n[\n\nfcl\n\n.\n\ngetBlock\n\n(\n\n)\n\n]\n\n)\n\n;\n\n28\n\nconst\n\nresponse\n\n=\n\nawait\n\nfcl\n\n.\n\nsend\n\n(\n\n[\n\nfcl\n\n.\n\ngetBlock\n\n(\n\n)\n\n]\n\n)\n\n;\n\n29\n\nconst\n\ndata\n\n=\n\nawait\n\nfcl\n\n.\n\ndecode\n\n(\n\nresponse\n\n)\n\n;\n\n29\n\nconst\n\ndata\n\n=\n\nawait\n\nfcl\n\n.\n\ndecode\n\n(\n\nresponse\n\n)\n\n;\n\n30\n\nreturn\n\ndata\n\n.\n\nid\n\n;\n\n30\n\nreturn\n\ndata\n\n.\n\nid\n\n;\n\n31\n\n}\n\n;\n\n31\n\n}\n\n;\n\n32\n\n32\n\n33\n\nconsole\n\n.\n\nlog\n\n(\n\n'SENDING TRANSACTION'\n\n)\n\n;\n\n33\n\nconsole\n\n.\n\nlog\n\n(\n\n'SENDING TRANSACTION'\n\n)\n\n;\n\n34\n\nvar\n\nresponse\n\n=\n\nawait\n\nfcl\n\n.\n\nsend\n\n(\n\n[\n\n34\n\nvar\n\nresponse\n\n=\n\nawait\n\nfcl\n\n.\n\nsend\n\n(\n\n[\n\n35\n\nfcl\n\n.\n\ntransaction\n\n`\n\n35\n\nfcl\n\n.\n\ntransaction\n\n`\n\n36\n\ntransaction {\n\n36\n\ntransaction {\n\n37\n\nvar acct: AuthAccount\n\n37\n\nvar acct: AuthAccount\n\n38\n\n38\n\n39\n\nprepare(acct: AuthAccount) {\n\n39\n\nprepare(acct: AuthAccount) {\n\n40\n\nself.acct = acct\n\n40\n\nself.acct = acct\n\n41\n\n}\n\n41\n\n}\n\n42\n\n42\n\n43\n\nexecute {\n\n43\n\nexecute {\n\n44\n\nlog(self.acct.address)\n\n44\n\nlog(self.acct.address)\n\n45\n\n}\n\n45\n\n}\n\n46\n\n}\n\n46\n\n}\n\n47\n\n`\n\n,\n\n47\n\n`\n\n,\n\n48\n\nfcl\n\n.\n\nref\n\n(\n\nawait\n\ngetReferenceBlock\n\n(\n\n)\n\n)\n\n,\n\n48\n\nfcl\n\n.\n\nref\n\n(\n\nawait\n\ngetReferenceBlock\n\n(\n\n)\n\n)\n\n,\n\n49\n\nfcl\n\n.\n\nproposer\n\n(\n\nAUTHORIZATION_FUNCTION\n\n)\n\n,\n\n49\n\nfcl\n\n.\n\nproposer\n\n(\n\nAUTHORIZATION_FUNCTION\n\n)\n\n,\n\n50\n\nfcl\n\n.\n\nauthorizations\n\n(\n\n[\n\nAUTHORIZATION_FUNCTION\n\n]\n\n)\n\n,\n\n50\n\nfcl\n\n.\n\nauthorizations\n\n(\n\n[\n\nAUTHORIZATION_FUNCTION\n\n]\n\n)\n\n,\n\n51\n\nfcl\n\n.\n\npayer\n\n(\n\nAUTHORIZATION_FUNCTION\n\n)\n\n,\n\n51\n\nfcl\n\n.\n\npayer\n\n(\n\nAUTHORIZATION_FUNCTION\n\n)\n\n,\n\n52\n\n]\n\n)\n\n;\n\n52\n\n]\n\n)\n\n;\n\n53\n\nconsole\n\n.\n\nlog\n\n(\n\n'TRANSACTION SENT'\n\n)\n\n;\n\n53\n\nconsole\n\n.\n\nlog\n\n(\n\n'TRANSACTION SENT'\n\n)\n\n;\n\n54\n\nconsole\n\n.\n\nlog\n\n(\n\n'TRANSACTION RESPONSE'\n\n,\n\nresponse\n\n)\n\n;\n\n54\n\nconsole\n\n.\n\nlog\n\n(\n\n'TRANSACTION RESPONSE'\n\n,\n\nresponse\n\n)\n\n;\n\n55\n\n55\n\n56\n\nconsole\n\n.\n\nlog\n\n(\n\n'WAITING FOR TRANSACTION TO BE SEALED'\n\n)\n\n;\n\n56\n\nconsole\n\n.\n\nlog\n\n(\n\n'WAITING FOR TRANSACTION TO BE SEALED'\n\n)\n\n;\n\n57\n\nvar\n\ndata\n\n=\n\nawait\n\nfcl\n\n.\n\ntx\n\n(\n\nresponse\n\n)\n\n.\n\nonceSealed\n\n(\n\n)\n\n;\n\n57\n\nvar\n\ndata\n\n=\n\nawait\n\nfcl\n\n.\n\ntx\n\n(\n\nresponse\n\n)\n\n.\n\nonceSealed\n\n(\n\n)\n\n;\n\n58\n\nconsole\n\n.\n\nlog\n\n(\n\n'TRANSACTION SEALED'\n\n,\n\ndata\n\n)\n\n;\n\n58\n\nconsole\n\n.\n\nlog\n\n(\n\n'TRANSACTION SEALED'\n\n,\n\ndata\n\n)\n\n;\n\n59\n\n59\n\n60\n\nif\n\n(\n\ndata\n\n.\n\nstatus\n\n===\n\n4\n\n&&\n\ndata\n\n.\n\nstatusCode\n\n===\n\n0\n\n)\n\n{\n\n60\n\nif\n\n(\n\ndata\n\n.\n\nstatus\n\n===\n\n4\n\n&&\n\ndata\n\n.\n\nstatusCode\n\n===\n\n0\n\n)\n\n{\n\n61\n\nconsole\n\n.\n\nlog\n\n(\n\n'Congrats!!! I Think It Works'\n\n)\n\n;\n\n61\n\nconsole\n\n.\n\nlog\n\n(\n\n'Congrats!!! I Think It Works'\n\n)\n\n;\n\n62\n\n}\n\nelse\n\n{\n\n62\n\n}\n\nelse\n\n{\n\n63\n\nconsole\n\n.\n\nlog\n\n(\n\n`\n\nOh No:\n\n${\n\ndata\n\n.\n\nerrorMessage\n\n}\n\n`\n\n)\n\n;\n\n63\n\nconsole\n\n.\n\nlog\n\n(\n\n`\n\nOh No:\n\n${\n\ndata\n\n.\n\nerrorMessage\n\n}\n\n`\n\n)\n\n;\n\n64\n\n}\n\n64\n\n}\n\n65\n\n}\n\ncatch\n\n(\n\nerror\n\n)\n\n{\n\n65\n\n}\n\ncatch\n\n(\n\nerror\n\n)\n\n{\n\n66\n\nconsole\n\n.\n\nerror\n\n(\n\n'FAILED TRANSACTION'\n\n,\n\nerror\n\n)\n\n;\n\n66\n\nconsole\n\n.\n\nerror\n\n(\n\n'FAILED TRANSACTION'\n\n,\n\nerror\n\n)\n\n;\n\n67\n\n}\n\n67\n\n}\n\n68\n\n}\n\n;\n\n68\n\n}\n\n;", "explanation": "This documentation section is about using Magic Labs' embedded wallet with the Flow blockchain using ES Modules and TypeScript.\n\n**Main Purpose:**\n\nThe main purpose of this code is to demonstrate how to create a transaction on the Flow blockchain using Magic Labs' embedded wallet. The code imports the necessary dependencies, configures the wallet and access node, and then creates a transaction that logs the account address.\n\n**Step-by-Step Breakdown:**\n\n1. **Import Dependencies**: The code imports Magic, FlowExtension, and fcl (Flow Client Library) modules.\n2. **Configure Wallet and Access Node**: The code configures the wallet and access node by setting the API key, network, and RPC URL.\n3. **Create a Transaction**: The code creates a transaction that logs the account address using the `execute` function.\n4. **Send the Transaction**: The code sends the transaction to the Flow blockchain using the `fcl.send` method.\n5. **Wait for Transaction to be Sealed**: The code waits for the transaction to be sealed using the `fcl.tx` method.\n6. **Verify Transaction Status**: The code verifies the transaction status and logs the result.\n\n**Key Takeaways:**\n\n* This code demonstrates how to use Magic Labs' embedded wallet with the Flow blockchain.\n* The code configures the wallet and access node before creating a transaction.\n* The code uses the `fcl` library to send and verify transactions on the Flow blockchain.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/other/flow#chunk-7", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 Flow Developer Portal\n\nFlow Developer Portal\n\n\u2022 Flow Faucet\n\nFlow Faucet", "explanation": "The '#Resources' section from the Magic Labs documentation is about providing helpful links for developers working with the Flow blockchain.\n\nThe main purpose of this section is to offer convenient access to two essential external resources for development on the Flow blockchain:\n\n1. **Flow Developer Portal**: This link directs developers to the official Flow Developer Portal, where they can access documentation, tutorials, and tools for building applications on the Flow blockchain.\n\n2. **Flow Faucet**: This link allows developers to access the Flow Faucet, a testing ground where they can request free test tokens for testing and debugging purposes, without incurring costs.\n\nIn essence, the '#Resources' section aims to save developers time by aggregating these useful links in one place, making it easier to access the information and tools needed for successful Flow blockchain development.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/other/flow#chunk-8", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCronos is a Layer 2 solution enhancing Ethereum by providing developers with faster and more cost-efficient transactions. Cronos is especially beneficial for those looking to boost performance while maintaining the decentralized principles of Ethereum.\n\nCronos\n\nAs Cronos is EVM compatible, you can follow the Ethereum documentation to send your first transaction and utilize all other wallet features.\n\nEthereum", "explanation": "The 'Cronos - Cronos - #Overview' section is about using the Cronos blockchain with Magic Labs' embedded wallet documentation. \n\nIn simple terms, Cronos is a layer 2 solution that helps improve the performance and efficiency of Ethereum transactions, making them faster and more cost-effective while maintaining decentralization.\n\nThe main purpose of this section is to inform users that since Cronos is compatible with the Ethereum Virtual Machine (EVM), they can use the same Ethereum documentation provided by Magic Labs to perform transactions and utilize wallet features on the Cronos blockchain. This means users can follow the same steps as they would for Ethereum, making it easier to work with Cronos.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/evm/cronos#chunk-1", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nVia Magic SDK, you can connect to Cronos. Cronos is EVM compatible so you can directly follow the Ethereum installation.\n\nCronos\n\nEthereum installation\n\n#\n\nMainnet Block Explorer: https://cronoscan.com/\n\nhttps://cronoscan.com/\n\nCopy\n\n01\n\nconst\n\ncustomNodeOptions\n\n=\n\n{\n\n01\n\nconst\n\ncustomNodeOptions\n\n=\n\n{\n\n02\n\nrpcUrl\n\n:\n\n'https://evm.cronos.org/'\n\n,\n\n// Cronos mainnet URL\n\n02\n\nrpcUrl\n\n:\n\n'https://evm.cronos.org/'\n\n,\n\n// Cronos mainnet URL\n\n03\n\nchainId\n\n:\n\n25\n\n,\n\n// Your own node's chainId\n\n03\n\nchainId\n\n:\n\n25\n\n,\n\n// Your own node's chainId\n\n04\n\n}\n\n04\n\n}\n\n05\n\n05\n\n06\n\n// Setting network to Cronos\n\n06\n\n// Setting network to Cronos\n\n07\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_PUBLISHABLE_API_KEY'\n\n,\n\n{\n\nnetwork\n\n:\n\ncustomNodeOptions\n\n}\n\n)\n\n;\n\n07\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_PUBLISHABLE_API_KEY'\n\n,\n\n{\n\nnetwork\n\n:\n\ncustomNodeOptions\n\n}\n\n)\n\n;", "explanation": "**Configuring Cronos Mainnet**\n\nThis documentation section explains how to set up and connect to the Cronos Mainnet using the Magic SDK. The main purpose is to provide a step-by-step guide on configuring the Cronos blockchain, which is compatible with the Ethereum Virtual Machine (EVM), allowing developers to integrate it into their applications.\n\n**Key Points:**\n\n1. **Connection setup**: The documentation explains how to connect to the Cronos Mainnet using the Magic SDK, which is compatible with EVM.\n2. **Custom node options**: A JavaScript object (`customNodeOptions`) is created to hold the Cronos Mainnet configuration, including the RPC URL (`https://evm.cronos.org/`) and chain ID (25).\n3. **Magic SDK initialization**: The Magic SDK is initialized with the custom node options, setting the network to Cronos.\n\nBy following these steps, developers can successfully configure and connect to the Cronos Mainnet using the Magic SDK, enabling them to build and deploy applications on this blockchain.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/evm/cronos#chunk-2", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nTestnet Block Explorer: https://testnet.cronoscan.com/\n\nhttps://testnet.cronoscan.com/\n\nCopy\n\n01\n\nconst\n\ncustomNodeOptions\n\n=\n\n{\n\n01\n\nconst\n\ncustomNodeOptions\n\n=\n\n{\n\n02\n\nrpcUrl\n\n:\n\n'https://evm-t3.cronos.org/'\n\n,\n\n// Cronos testnet URL\n\n02\n\nrpcUrl\n\n:\n\n'https://evm-t3.cronos.org/'\n\n,\n\n// Cronos testnet URL\n\n03\n\nchainId\n\n:\n\n338\n\n,\n\n// Cronos testnet chainId\n\n03\n\nchainId\n\n:\n\n338\n\n,\n\n// Cronos testnet chainId\n\n04\n\n}\n\n04\n\n}\n\n05\n\n05\n\n06\n\n// Setting network to Cronos\n\n06\n\n// Setting network to Cronos\n\n07\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_PUBLISHABLE_API_KEY'\n\n,\n\n{\n\nnetwork\n\n:\n\ncustomNodeOptions\n\n}\n\n)\n\n;\n\n07\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_PUBLISHABLE_API_KEY'\n\n,\n\n{\n\nnetwork\n\n:\n\ncustomNodeOptions\n\n}\n\n)\n\n;", "explanation": "**Explanation of the '#Testnet' Documentation Section:**\n\nThis section is about testing and integrating the Magic Labs embedded wallet with the Cronos testnet, a testing environment for the Cronos blockchain.\n\n**Main Purpose:**\n\nThe main purpose of this section is to provide instructions and configuration examples for developers to test their Magic Labs embedded wallet implementation with the Cronos testnet, rather than the mainnet.\n\n**Contents:**\n\n1. **Testnet Block Explorer:** A link to the Cronos testnet block explorer (https://testnet.cronoscan.com/) where developers can view and explore the testnet.\n2. **Custom Node Options:** A code example showing how to configure the `customNodeOptions` object with the testnet's RPC URL (`https://evm-t3.cronos.org/`) and chain ID (`338`), indicating that the network should be set to the Cronos testnet.\n3. **Initializing Magic:** A code example that initializes the Magic object with a publishable API key and sets the network to the custom Cronos testnet configuration.\n\nBy following these instructions, developers can test their wallet implementation in a sandboxed environment before deploying it to the mainnet. This allows them to validate their implementation without risking real assets or Mainnet cryptocurrency.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/evm/cronos#chunk-3", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 All Auth, User and most Wallet module methods* for Dedicated Wallets\n\n\u2022 All EVM Provider functionality to respond to supported RPC methods\n\nAuth\n\nUser\n\nWallet\n\nDedicated Wallets\n\nRPC methods\n\n*Some Widget UI features are not yet compatible such as NFT Viewer and Fiat On-ramps.\n\nNeed a feature or see a problem? File an issue on our github repo.\n\ngithub repo", "explanation": "The \"#Compatibility\" section of the Magic Labs embedded wallet documentation for Cronos (an EVM-based blockchain) lists the compatible features and functionalities. \n\nIn particular, it states that:\n\n- All authentication and user module methods \n- Most wallet module methods (with some exceptions for Dedicated Wallets)\n- EVM Provider functionality to support various RPC methods\n\nHowever, it notes that certain widget UI features, such as NFT Viewer and Fiat On-ramps, are not yet compatible. \n\nThe main purpose of this section is to inform developers of the extent to which Magic Labs wallet is compatible with Cronos, allowing them to assess the suitability of this technology for their specific use case.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/evm/cronos#chunk-4", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 Documentation: https://docs.cronos.org/getting-started/readme\n\n\u2022 Block Explorer:https://cronoscan.com/ (Mainnet)https://explorer.cronos.org/testnet/ (Testnet)\n\nhttps://docs.cronos.org/getting-started/readme\n\n\u2022 https://cronoscan.com/ (Mainnet)\n\n\u2022 https://explorer.cronos.org/testnet/ (Testnet)\n\nhttps://cronoscan.com/\n\nhttps://explorer.cronos.org/testnet/\n\n\u2022 Demo\n\n\u2022 GitHub\n\nDemo\n\nGitHub", "explanation": "This '#Resources & Tools' section from the Magic Labs documentation for Cronos EVM blockchain is about providing relevant links to valuable resources and tools for users to access further information and assistance. \n\nThe main purpose of this section is to help users and developers navigate and find official Cronos documentation, block explorers for both mainnet and testnet, and possibly additional tools like demo and GitHub repositories. This section aims to support users in working with the Cronos blockchain by offering easy access to these resources.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/evm/cronos#chunk-5", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nBase, a Layer 2 blockchain compatible with the Ethereum Virtual Machine (EVM), offers developers a robust platform for building decentralized apps. It integrates seamlessly with Coinbase products and distribution, ensuring scalability and accessibility.\n\nBase\n\nAs Base is EVM compatible, you can follow the Ethereum documentation to send your first transaction and utilize all other wallet features.\n\nEthereum", "explanation": "This documentation section is titled 'Base - Overview' and covers the integration of the Magic Labs embedded wallet with Base, a Layer 2 blockchain compatible with the Ethereum Virtual Machine (EVM). \n\nIts main purpose is to inform developers that: \n\n1. Base is compatible with the Ethereum Virtual Machine (EVM), making it easy to integrate into existing Ethereum-based development workflows.\n2. As a result of this compatibility, the Ethereum documentation can be used to send the first transaction and utilize other wallet features with the Magic Labs embedded wallet on the Base blockchain.\n\nIn essence, this documentation section provides a brief overview of how Magic Labs embedded wallet supports Base, allowing developers to easily build and interact with decentralized apps on the Base blockchain.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/evm/base#chunk-1", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nEnsure you have installed the Magic SDK and have access to your API key, follow the quickstart to get started. You can use Magic's network aliases to connect to either testnet or mainnet on Base.\n\nquickstart\n\nCopy\n\n01\n\n// Setting network to point to Base testnet\n\n01\n\n// Setting network to point to Base testnet\n\n02\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_PUBLISHABLE_API_KEY'\n\n,\n\n{\n\n02\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_PUBLISHABLE_API_KEY'\n\n,\n\n{\n\n03\n\nnetwork\n\n:\n\n{\n\n03\n\nnetwork\n\n:\n\n{\n\n04\n\nrpcUrl\n\n:\n\n'https://sepolia.base.org'\n\n,\n\n04\n\nrpcUrl\n\n:\n\n'https://sepolia.base.org'\n\n,\n\n05\n\nchainId\n\n:\n\n84532\n\n,\n\n05\n\nchainId\n\n:\n\n84532\n\n,\n\n06\n\n}\n\n06\n\n}\n\n07\n\n)\n\n;\n\n07\n\n)\n\n;", "explanation": "**Configure Base**\n\nThis documentation section explains how to configure the Magic SDK to connect to the Base blockchain network. \n\n**Main Purpose:**\nThe main purpose of this section is to guide developers in setting up their Magic SDK to interact with the Base blockchain, specifically by configuring the network to point to either the Base testnet (Sepolia) or mainnet.\n\n**Key Steps:**\n\n1. Ensure you have installed the Magic SDK and have access to your API key.\n2. Follow the provided code example to set the network configuration, specifying the `rpcUrl` and `chainId` for the desired Base network (testnet or mainnet).\n\nBy following these steps, developers can successfully connect their Magic SDK to the Base blockchain, enabling them to build and interact with dApps on the network.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/evm/base#chunk-2", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 All Auth, User and Wallet module methods for Dedicated Wallets\n\n\u2022 All EVM Provider functionality to respond to supported RPC methods\n\nAuth\n\nUser\n\nWallet\n\nDedicated Wallets\n\nRPC methods\n\nNeed a feature or see a problem? File an issue on our github repo.\n\ngithub repo", "explanation": "The documentation section '#Compatibility' from the provided URL explains the compatibility features of Magic Labs Embedded Wallet. It lists the supported components and functionalities that are compatible with the Embedded Wallet.\n\nThe main purpose of this section is to inform developers of the compatible modules and methods that they can use with the Embedded Wallet on the EVM (Ethereum Virtual Machine) blockchain. Specifically, it outlines that the Auth, User, and Wallet modules, as well as the EVM Provider functionality for Dedicated Wallets, are compatible.\n\nIn essence, this section provides assurance to developers that these modules and methods will work seamlessly with the Embedded Wallet, allowing them to focus on building their applications without compatibility concerns.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/evm/base#chunk-3", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 Documentation: https://docs.base.org/\n\n\u2022 Block Explorer: https://basescan.org/ (Mainnet)https://base-sepolia.blockscout.com/ (Testnet)\n\n\u2022 Faucets: https://docs.base.org/tools/network-faucets/\n\nhttps://docs.base.org/\n\n\u2022 https://basescan.org/ (Mainnet)\n\n\u2022 https://base-sepolia.blockscout.com/ (Testnet)\n\nhttps://basescan.org/\n\nhttps://base-sepolia.blockscout.com/\n\nhttps://docs.base.org/tools/network-faucets/", "explanation": "This section, titled '#Resources & Tools', is part of the Magic Labs embedded wallet documentation for integrating with the Base blockchain. \n\nThe main purpose of this section is to provide developers with a compilation of helpful links to external resources related to the Base blockchain. These resources include:\n\n1. Official Base documentation: A comprehensive guide for developers working with the Base blockchain.\n2. Block Explorers: Tools (BaseScan) for viewing transactions and blockchain data on both the Mainnet and Testnet.\n3. Faucets: Links to pages that provide access to testnet funds (faucets), allowing developers to test their applications without incurring costs.\n\nBy including these links, the documentation aims to help developers quickly access the information and tools they need to integrate the Base blockchain with the Magic Labs embedded wallet, streamlining their development process.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/evm/base#chunk-4", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "Learn how to integrate Magic with MoonPay cryptocurrency onramping\n\nLowering the barrier to entry in cryptocurrency is one of the most vital pieces to onboarding the next generation of users and consumers. Traditionally, acquiring specific tokens involved interacting directly with centralized and decentralized exchanges. This can be a confusing and costly experience for some given that you have to take into account gas payments, security concerns and bad user experiences.\n\nCrypto onramping tools such as MoonPay alleviate a lot of these concerns by providing a smooth and straight-forward process to buying cryptocurrency using debit or credit cards. A user can simply:\n\n\u2022 Select the cryptocurrency they want to purchase in their preferred currency\n\n\u2022 Add the preferred wallet address\n\n\u2022 Add some personal details for KYC (such as address)\n\n\u2022 Add payment details\n\n\u2022 Submit the transaction\n\n\u2022 Receive the cryptocurrency\n\nThis guide will walk through integrating the MoonPay onramp widget with a Next.js dApp created from the Magic CLI. We will be utilizing the MoonPay React library to purchase cryptocurrency in a sandbox environment.", "explanation": "This documentation section, \"MoonPay crypto onramping\", explains how to integrate Magic with MoonPay's cryptocurrency onramping tool. MoonPay's tool allows users to easily purchase cryptocurrency using their debit or credit cards, eliminating the need to interact with complex exchanges and alleviating concerns about gas payments, security, and user experience.\n\nThe main purpose of this documentation section is to provide a guide on how to integrate the MoonPay onramp widget with a Next.js dApp (decentralized application) created using Magic CLI. This guide will walk through the process of using the MoonPay React library to enable users to purchase cryptocurrency in a sandbox environment.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/wallets/integrations/moonpay-integration#chunk-1", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nTo follow along with this guide, you\u2019ll need three things:\n\n\u2022 A Magic Publishable API Key\n\n\u2022 A web client\n\n\u2022 MoonPay business account\n\nYou can get your Publishable API Key from your Magic Dashboard.\n\nMagic Dashboard\n\nYou can sign up and get a MoonPay business account to acquire the API keys needed to set up a sandbox environment for MoonPay and start testing onramping.\n\nbusiness account\n\nWe\u2019ll use the make-scoped-magic-app CLI tool to bootstrap a Next.js app with Magic authentication already baked into the client. You\u2019re welcome to use your own client, but this tutorial and its accompanying code snippets assume the output of the make-scoped-magic-app CLI as the starting point.\n\nmake-scoped-magic-app\n\nmake-scoped-magic-app\n\nThe make-scoped-magic-app CLI tool is an easy way to bootstrap new projects with Magic. To get started, simply run the command below in the shell of your choice. Be sure to replace <YOUR_PUBLISHABLE_API_KEY> with the Publishable API Key from your Magic Dashboard.\n\nmake-scoped-magic-app\n\n<YOUR_PUBLISHABLE_API_KEY>\n\nMagic Dashboard\n\nCopy\n\n01\n\nnpx make-scoped-magic-app\n\n\\\n\n01\n\nnpx make-scoped-magic-app\n\n\\\n\n02\n\n--template nextjs-dedicated-wallet\n\n\\\n\n02\n\n--template nextjs-dedicated-wallet\n\n\\\n\n03\n\n--network ethereum-sepolia\n\n\\\n\n03\n\n--network ethereum-sepolia\n\n\\\n\n04\n\n--login-methods EmailOTP\n\n\\\n\n04\n\n--login-methods EmailOTP\n\n\\\n\n05\n\n--publishable-api-key\n\n<\n\nYOUR_PUBLISHABLE_API_KEY\n\n>\n\n05\n\n--publishable-api-key\n\n<\n\nYOUR_PUBLISHABLE_API_KEY\n\n>\n\nThis will bootstrap the starting point of the tutorial for you. In the scaffolded project, be sure to add your Magic Publishable API Key to the .env as NEXT_PUBLIC_MAGIC_API_KEY if you didn\u2019t add it to the CLI command above.\n\n.env\n\nNEXT_PUBLIC_MAGIC_API_KEY\n\nFrom your MoonPay business dashboard, click on the \"Developers\" tab on the left hand side navigation. Copy the publishable key and add it to your .env as NEXT_PUBLIC_MOONPAY_API_KEY.\n\n.env\n\nNEXT_PUBLIC_MOONPAY_API_KEY\n\nCopy\n\n01\n\n// Publishable API Key found in the Magic Dashboard\n\n01\n\n// Publishable API Key found in the Magic Dashboard\n\n02\n\nNEXT_PUBLIC_MAGIC_API_KEY\n\n=\n\npk_live_1234567890\n\n02\n\nNEXT_PUBLIC_MAGIC_API_KEY\n\n=\n\npk_live_1234567890\n\n03\n\n03\n\n04\n\n// The RPC URL for the blockchain network\n\n04\n\n// The RPC URL for the blockchain network\n\n05\n\nNEXT_PUBLIC_BLOCKCHAIN_NETWORK\n\n=\n\nethereum\n\n-\n\nsepolia\n\n05\n\nNEXT_PUBLIC_BLOCKCHAIN_NETWORK\n\n=\n\nethereum\n\n-\n\nsepolia\n\n06\n\n06\n\n07\n\nNEXT_PUBLIC_MOONPAY_API_KEY\n\n=\n\npk_test_12345678901234567890\n\n07\n\nNEXT_PUBLIC_MOONPAY_API_KEY\n\n=\n\npk_test_12345678901234567890", "explanation": "**Project Prerequisites Documentation Explanation**\n\nThis documentation section titled '#Project prerequisites' outlines the necessary requirements and steps to follow along with a guide on integrating Magic Labs embedded wallet with MoonPay.\n\n**Main Purpose:**\nThe main purpose of this section is to ensure that users have the necessary setup and tools to successfully complete the integration tutorial. It provides a checklist of prerequisites and step-by-step instructions on how to acquire and set up the necessary components.\n\n**Key Prerequisites:**\n\n1. **Magic Publishable API Key**: Obtainable from the Magic Dashboard.\n2. **Web Client**: A web client is required, and the tutorial assumes the use of a Next.js app bootstrapped with the `make-scoped-magic-app` CLI tool.\n3. **MoonPay Business Account**: Required to acquire API keys and set up a sandbox environment for MoonPay.\n\n**Additional Instructions:**\n\n* How to use the `make-scoped-magic-app` CLI tool to bootstrap a Next.js app with Magic authentication.\n* How to add Magic and MoonPay API keys to the project's `.env` file.\n\nBy following these prerequisites and instructions, users can set up their project and environment correctly, ensuring a smooth integration process with Magic Labs embedded wallet and MoonPay.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/wallets/integrations/moonpay-integration#chunk-2", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nIn addition to the packages included in the scaffold produced by the make-scoped-magic-app CLI, you\u2019ll also need to install @moonpay/moonpay-react to have access to the MoonPay onramping components.\n\nmake-scoped-magic-app\n\n@moonpay/moonpay-react\n\nRun the following command to install the required dependencies:\n\nCopy\n\n01\n\nnpm\n\ninstall\n\n@moonpay/moonpay-react\n\n01\n\nnpm\n\ninstall\n\n@moonpay/moonpay-react", "explanation": "**Install Additional Project Dependencies**\n\nThis documentation section explains the need to install additional project dependencies to integrate Moonpay onramping components into a Magic Labs embedded wallet project.\n\n**Main Purpose:**\n\nThe main purpose of this step is to install the `@moonpay/moonpay-react` package, which is required to access the MoonPay onramping components. This package is not included in the default project scaffold generated by the `make-scoped-magic-app` CLI, and therefore needs to be installed separately using npm.\n\n**Action Required:**\n\nTo complete this step, you need to run the following command in your terminal:\n\n```bash\nnpm install @moonpay/moonpay-react\n```\n\nBy installing this package, you will gain access to the MoonPay onramping components, enabling users to buy cryptocurrency directly within your wallet application.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/wallets/integrations/moonpay-integration#chunk-3", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nInside of src/pages/index.tsx, we need to wrap our application with the MoonPay provider. We do this by importing the MoonPayProvider and nesting it underneath the existing MagicProvider.\n\nsrc/pages/index.tsx\n\nMoonPayProvider\n\nMagicProvider\n\nSince we\u2019re using Next.js, it is recommended to import the provider dynamically. We will need to utilize dynamic from next/dynamic to do this. Inside the Home function, create a variable named MoonPayProvider:\n\ndynamic\n\nnext/dynamic\n\nHome\n\nMoonPayProvider\n\nCopy\n\n01\n\nimport\n\ndynamic\n\nfrom\n\n'next/dynamic'\n\n;\n\n01\n\nimport\n\ndynamic\n\nfrom\n\n'next/dynamic'\n\n;\n\n02\n\n02\n\n03\n\nconst\n\nMoonPayProvider\n\n=\n\ndynamic\n\n(\n\n03\n\nconst\n\nMoonPayProvider\n\n=\n\ndynamic\n\n(\n\n04\n\n(\n\n)\n\n=>\n\nimport\n\n(\n\n'@moonpay/moonpay-react'\n\n)\n\n.\n\nthen\n\n(\n\n(\n\nmod\n\n)\n\n=>\n\nmod\n\n.\n\nMoonPayProvider\n\n)\n\n,\n\n04\n\n(\n\n)\n\n=>\n\nimport\n\n(\n\n'@moonpay/moonpay-react'\n\n)\n\n.\n\nthen\n\n(\n\n(\n\nmod\n\n)\n\n=>\n\nmod\n\n.\n\nMoonPayProvider\n\n)\n\n,\n\n05\n\n{\n\nssr\n\n:\n\nfalse\n\n}\n\n,\n\n05\n\n{\n\nssr\n\n:\n\nfalse\n\n}\n\n,\n\n06\n\n)\n\n;\n\n06\n\n)\n\n;\n\nInside the return statement and below the Magic provider, wrap the rest of the application with the MoonPay provider:\n\nCopy\n\n01\n\n<\n\nMagicProvider\n\n>\n\n01\n\n<\n\nMagicProvider\n\n>\n\n02\n\n<\n\nMoonPayProvider\n\n02\n\n<\n\nMoonPayProvider\n\n03\n\napiKey\n\n=\n\n{\n\nprocess\n\n.\n\nenv\n\n.\n\nNEXT_PUBLIC_MOONPAY_API_KEY\n\n||\n\n\"\"\n\n}\n\n03\n\napiKey\n\n=\n\n{\n\nprocess\n\n.\n\nenv\n\n.\n\nNEXT_PUBLIC_MOONPAY_API_KEY\n\n||\n\n\"\"\n\n}\n\n04\n\ndebug\n\n04\n\ndebug\n\n05\n\n>\n\n05\n\n>\n\n06\n\n// other components\n\n06\n\n// other components\n\n07\n\n<\n\n/\n\nMoonPayProvider\n\n>\n\n07\n\n<\n\n/\n\nMoonPayProvider\n\n>\n\n08\n\n<\n\n/\n\nMagicProvider\n\n>\n\n08\n\n<\n\n/\n\nMagicProvider\n\n>", "explanation": "The documentation section titled '#Initialize MoonPay provider' explains how to integrate the MoonPay provider with the Magic Labs embedded wallet in a Next.js application.\n\nThe main purpose of this section is to guide developers in setting up the MoonPay provider, which is necessary for enabling fiat-to-crypto on-ramps and off-ramps in their wallet application.\n\nIn essence, it provides step-by-step instructions on how to:\n\n1. Import and dynamically load the MoonPay provider using `next/dynamic`.\n2. Wrap the entire application with the MoonPay provider, which should be nested underneath the existing Magic provider.\n3. Pass the required API key and debugging options to the MoonPay provider.\n\nBy following these steps, developers can successfully integrate MoonPay with their Magic Labs embedded wallet, allowing their users to seamlessly buy, sell, and swap cryptocurrencies using traditional payment methods.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/wallets/integrations/moonpay-integration#chunk-4", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nNow that we have MoonPay configured, we can now add the ability to use the onramping widget.\n\nSimilarly to the provider we created in the previous step, it is recommended to import the component dynamically to avoid errors. At the top of the src/components/magic/cards/SendTransactionCard.tsx, below the rest of the existing imports, add the following:\n\nsrc/components/magic/cards/SendTransactionCard.tsx\n\nCopy\n\n01\n\nimport\n\ndynamic\n\nfrom\n\n'next/dynamic'\n\n;\n\n01\n\nimport\n\ndynamic\n\nfrom\n\n'next/dynamic'\n\n;\n\n02\n\n02\n\n03\n\nconst\n\nMoonPayBuyWidget\n\n=\n\ndynamic\n\n(\n\n03\n\nconst\n\nMoonPayBuyWidget\n\n=\n\ndynamic\n\n(\n\n04\n\n(\n\n)\n\n=>\n\nimport\n\n(\n\n'@moonpay/moonpay-react'\n\n)\n\n.\n\nthen\n\n(\n\n(\n\nmod\n\n)\n\n=>\n\nmod\n\n.\n\nMoonPayBuyWidget\n\n)\n\n,\n\n04\n\n(\n\n)\n\n=>\n\nimport\n\n(\n\n'@moonpay/moonpay-react'\n\n)\n\n.\n\nthen\n\n(\n\n(\n\nmod\n\n)\n\n=>\n\nmod\n\n.\n\nMoonPayBuyWidget\n\n)\n\n,\n\n05\n\n{\n\nssr\n\n:\n\nfalse\n\n}\n\n,\n\n05\n\n{\n\nssr\n\n:\n\nfalse\n\n}\n\n,\n\n06\n\n)\n\n;\n\n06\n\n)\n\n;\n\nThe widget itself can take a variety of props such as themes, currency codes and languages. To find out more on what customization is possible with the MoonPay buy widget, visit the onramp params page.\n\nonramp params page\n\nThe first thing we need to do is create a variable named isVisible. This will determine if the onramp overlay is displayed. Underneath the other variables, add the following:\n\nisVisible\n\nCopy\n\n01\n\nconst\n\n[\n\nisVisible\n\n,\n\nsetIsVisible\n\n]\n\n=\n\nuseState\n\n<\n\nboolean\n\n>\n\n(\n\nfalse\n\n)\n\n01\n\nconst\n\n[\n\nisVisible\n\n,\n\nsetIsVisible\n\n]\n\n=\n\nuseState\n\n<\n\nboolean\n\n>\n\n(\n\nfalse\n\n)\n\nThe component provides 4 different visual variants:\n\n\u2022 overlay: Overlays the widget on your existing interface\n\n\u2022 embedded: Embeds the widget into your existing interface\n\n\u2022 newTab: Opens in new tab\n\n\u2022 newWindow: Opens in new window\n\noverlay\n\nembedded\n\nnewTab\n\nnewWindow\n\nLets add a button that will allow us to display the MoonPay widget and onramp some sandbox cryptocurrency.\n\nIn the return statement of the SendTransaction card, inside the getFaucetUrl() && conditional, replace the div with the following:\n\nSendTransaction\n\ngetFaucetUrl() &&\n\nCopy\n\n01\n\n<\n\ndiv className\n\n=\n\n\"flex flex-col gap-2\"\n\n>\n\n01\n\n<\n\ndiv className\n\n=\n\n\"flex flex-col gap-2\"\n\n>\n\n02\n\n<\n\na href\n\n=\n\n{\n\ngetFaucetUrl\n\n(\n\n)\n\n}\n\ntarget\n\n=\n\n\"_blank\"\n\nrel\n\n=\n\n\"noreferrer\"\n\n>\n\n02\n\n<\n\na href\n\n=\n\n{\n\ngetFaucetUrl\n\n(\n\n)\n\n}\n\ntarget\n\n=\n\n\"_blank\"\n\nrel\n\n=\n\n\"noreferrer\"\n\n>\n\n03\n\n<\n\nFormButton\n\nonClick\n\n=\n\n{\n\n(\n\n)\n\n=>\n\nnull\n\n}\n\ndisabled\n\n=\n\n{\n\nfalse\n\n}\n\n>\n\n03\n\n<\n\nFormButton\n\nonClick\n\n=\n\n{\n\n(\n\n)\n\n=>\n\nnull\n\n}\n\ndisabled\n\n=\n\n{\n\nfalse\n\n}\n\n>\n\n04\n\nGet\n\nTest\n\n{\n\ngetNetworkToken\n\n(\n\n)\n\n}\n\n04\n\nGet\n\nTest\n\n{\n\ngetNetworkToken\n\n(\n\n)\n\n}\n\n05\n\n<\n\nImage\n\nsrc\n\n=\n\n{\n\nLink\n\n}\n\nalt\n\n=\n\n\"link-icon\"\n\nclassName\n\n=\n\n\"ml-[3px]\"\n\n/\n\n>\n\n05\n\n<\n\nImage\n\nsrc\n\n=\n\n{\n\nLink\n\n}\n\nalt\n\n=\n\n\"link-icon\"\n\nclassName\n\n=\n\n\"ml-[3px]\"\n\n/\n\n>\n\n06\n\n<\n\n/\n\nFormButton\n\n>\n\n06\n\n<\n\n/\n\nFormButton\n\n>\n\n07\n\n<\n\n/\n\na\n\n>\n\n07\n\n<\n\n/\n\na\n\n>\n\n08\n\n<\n\nFormButton\n\nonClick\n\n=\n\n{\n\n(\n\n)\n\n=>\n\nsetIsVisible\n\n(\n\ntrue\n\n)\n\n}\n\ndisabled\n\n=\n\n{\n\nfalse\n\n}\n\n>\n\n08\n\n<\n\nFormButton\n\nonClick\n\n=\n\n{\n\n(\n\n)\n\n=>\n\nsetIsVisible\n\n(\n\ntrue\n\n)\n\n}\n\ndisabled\n\n=\n\n{\n\nfalse\n\n}\n\n>\n\n09\n\nBuy\n\nCrypto\n\nwith\n\nMoonPay\n\n09\n\nBuy\n\nCrypto\n\nwith\n\nMoonPay\n\n10\n\n<\n\nImage\n\nsrc\n\n=\n\n{\n\nLink\n\n}\n\nalt\n\n=\n\n\"link-icon\"\n\nclassName\n\n=\n\n\"ml-[3px]\"\n\n/\n\n>\n\n10\n\n<\n\nImage\n\nsrc\n\n=\n\n{\n\nLink\n\n}\n\nalt\n\n=\n\n\"link-icon\"\n\nclassName\n\n=\n\n\"ml-[3px]\"\n\n/\n\n>\n\n11\n\n<\n\n/\n\nFormButton\n\n>\n\n11\n\n<\n\n/\n\nFormButton\n\n>\n\n12\n\n<\n\nMoonPayBuyWidget\n\n12\n\n<\n\nMoonPayBuyWidget\n\n13\n\nvariant\n\n=\n\n\"overlay\"\n\n13\n\nvariant\n\n=\n\n\"overlay\"\n\n14\n\nbaseCurrencyCode\n\n=\n\n\"usd\"\n\n// Currency to pay\n\n14\n\nbaseCurrencyCode\n\n=\n\n\"usd\"\n\n// Currency to pay\n\n15\n\nbaseCurrencyAmount\n\n=\n\n\"100\"\n\n// Pre-populated buy amount\n\n15\n\nbaseCurrencyAmount\n\n=\n\n\"100\"\n\n// Pre-populated buy amount\n\n16\n\ndefaultCurrencyCode\n\n=\n\n\"eth\"\n\n// Default crypto selection\n\n16\n\ndefaultCurrencyCode\n\n=\n\n\"eth\"\n\n// Default crypto selection\n\n17\n\nvisible\n\n=\n\n{\n\nisVisible\n\n}\n\n17\n\nvisible\n\n=\n\n{\n\nisVisible\n\n}\n\n18\n\nonCloseOverlay\n\n=\n\n{\n\n(\n\n)\n\n=>\n\nsetIsVisible\n\n(\n\n!\n\nisVisible\n\n)\n\n}\n\n18\n\nonCloseOverlay\n\n=\n\n{\n\n(\n\n)\n\n=>\n\nsetIsVisible\n\n(\n\n!\n\nisVisible\n\n)\n\n}\n\n19\n\n/\n\n>\n\n19\n\n/\n\n>\n\n20\n\n<\n\nDivider\n\n/\n\n>\n\n20\n\n<\n\nDivider\n\n/\n\n>\n\n21\n\n<\n\n/\n\ndiv\n\n>\n\n21\n\n<\n\n/\n\ndiv\n\n>", "explanation": "This documentation section explains how to integrate the MoonPay Buy Widget into the Magic Labs embedded wallet UI.\n\n**Purpose:**\nThe main purpose of this section is to guide developers on how to add the MoonPay Buy Widget, a payment gateway that allows users to buy cryptocurrencies, to their wallet interface.\n\n**Key Steps:**\n\n1. Import the MoonPay Buy Widget dynamically using the `next/dynamic` module to avoid errors.\n2. Create a variable `isVisible` to control the visibility of the onramp overlay.\n3. Add a button to trigger the display of the MoonPay Buy Widget.\n4. Customize the MoonPay Buy Widget by passing props, such as themes, currency codes, and languages.\n5. Display the MoonPay Buy Widget as an overlay on the existing interface.\n\n**Key Props:**\n\n* `variant`: Allows selection of different visual variants (e.g., overlay, embedded, newTab, newWindow).\n* `baseCurrencyCode`: Sets the currency to pay (e.g., USD).\n* `baseCurrencyAmount`: Pre-populates the buy amount.\n* `defaultCurrencyCode`: Sets the default cryptocurrency selection (e.g., ETH).\n* `visible`: Controls the visibility of the widget.\n* `onCloseOverlay`: Handles the close event of the overlay.\n\nBy following these steps, developers can successfully integrate the MoonPay Buy Widget into their Magic Labs embedded wallet UI, enabling users to easily buy cryptocurrencies.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/wallets/integrations/moonpay-integration#chunk-5", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nNow that we\u2019ve configured MoonPay and added the widget to our UI, we are ready to test the functionality in the provided sandbox environment.\n\nStart your local development server and run through the Magic email OTP flow to log in. Once logged in you will notice a card displayed with the header \u201cSend Transaction\u201d. Click on this button to display the onramp widget. You will be instructed to select a cryptocurrency to buy along with the amount you want to buy and the preferred currency to pay for it.\n\nFor the sake of this guide, we will be purchasing some ETH. Once you have made your selections and clicked \u201cContinue\u201d, you will be prompted to either connect to the site using your browser wallet, or to paste in the wallet address you wish to receive the crypto for.\n\nThe following prompt will be to add the payment details. MoonPay provides us with dummy credit card information. Use the following card number, expiry date and CVC:\n\n\u2022 Credit card number: 4485 0403 7153 6584\n\n\u2022 Expiry date: 12/2030\n\n\u2022 CVC: 123\n\nFollow through the steps to add credit card details and address.\n\nNote: If you use a United States of America address you may be asked to add a Social Security Number. Please do not use a genuine SSN. Any 9 digit dummy value will work.\n\nOnce you\u2019ve added this information we can now confirm the order. If successful, we will see the button text changes to display \u201cView on block explorer\u201d, meaning that the test transaction has been executed.", "explanation": "**Testing the MoonPay Widget:**\n\nThis documentation section is about testing the MoonPay onramp widget in a sandbox environment after it has been added to your application's UI. The main purpose is to verify that the integration is working correctly by simulating a real-world purchase flow.\n\n**Step-by-Step Test Process:**\n\n1. Log in using the Magic email OTP flow.\n2. Click on the \"Send Transaction\" button to display the onramp widget.\n3. Select a cryptocurrency to buy (in this guide, ETH) and proceed to the next steps.\n4. Input payment details using the provided dummy credit card information.\n5. Follow through the remaining steps, including adding address information (and a dummy Social Security Number if using a US address).\n6. Confirm the order to execute the test transaction.\n\n**Expected Outcome:**\n\nIf the integration is successful, the button text will change to \"View on block explorer,\" indicating that the test transaction has been executed.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/wallets/integrations/moonpay-integration#chunk-6", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nYou now know how to integrate MoonPay with Magic and include the following features:\n\n\u2022 Simple authentication with Email OTP\n\n\u2022 Buy funds using MoonPay onramp\n\nFeel free to take a look at our final code solution or tinker with it directly in Codesandbox. Take a look at the MoonPay React docs for more information on what is possible with Magic and MoonPay.\n\nfinal code solution\n\nCodesandbox\n\nReact docs", "explanation": "The '#Next Steps' section is a concluding part of the documentation that provides users with a summary of what they have learned (integrating MoonPay with Magic embedded wallet, implementing simple authentication with Email OTP, and enabling onramp purchases using MoonPay) and suggests additional actions they can take.\n\nIts main purpose is to offer users:\n\n1. **Verification of their progress**: A recap of the key features they have successfully implemented.\n2. **Additional learning resources**: Links to further explore and experiment with the integration, such as a final code solution, an interactive Codesandbox example, and React documentation for deeper insight into the capabilities of the Magic and MoonPay integration.\n3. **Guidance on where to go next**: A way to build upon their existing knowledge and explore more advanced features of the Magic and MoonPay integration.\n\nThis section aims to help users solidify their understanding, explore additional possibilities, and move forward with their project implementation.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/wallets/integrations/moonpay-integration#chunk-7", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "Zyfi is a gas abstraction layer on the zkSync network. Zyfi is effectively a \u201cPaymaster-As-A-Service,\u201d providing developer tools that enable end users to cover gas fees with any ERC-20 token (~80 tokens).\n\nZyfi\n\nzkSync network\n\nZyfi\u2019s interface aims for simplicity when it comes to dApp integration and only requires a single API call to use. As a developer you maintain full control and are provided the flexibility to adopt any desired model without the need for changes to the smart contract. Some of the many benefits of using Zyfi include:\n\n\u2022 The user knows the fee amount when signing, and is allowing the paymaster only that\n\n\u2022 Any gas that isn't spent is refunded to the user in the fee token itself\n\n\u2022 The smart contracts are audited, immutable and verified\n\nIn the future, Zyfi will release a new paymaster and endpoint that allows the custom sponsorhip whereby protocols can use off-chain logic to decide to sponsor part or all of each transaction.\n\nThis guide will walk through using zkSync's native account abstraction primitives and integrating Zyfi with an existing Next.js dApp created from the Magic CLI. We will utilize the Zyfi paymaster API and all transaction fees will be paid using a testnet ERC-20 token.", "explanation": "This documentation section, \"ZkSync with Zyfi Account Abstraction,\" explains the integration of Zyfi, a gas abstraction layer on the zkSync network, with an existing dApp (Decentralized Application) built using Magic CLI and Next.js.\n\nIn simple terms, Zyfi is a service that allows dApp users to pay for transaction fees using any ERC-20 token (around 80 tokens are supported), making it easier for developers to integrate gas payment functionality without requiring complex changes to their smart contracts.\n\nThe main purpose of this guide is to walk developers through the process of using zkSync's native account abstraction features and integrating Zyfi's paymaster API with an existing dApp, allowing for seamless payment of transaction fees using a testnet ERC-20 token.\n\nIn essence, this integration enables a more user-friendly experience, as users know the exact fee amount when signing transactions and receive refunds for unused gas. Additionally, the guide paves the way for future improvements, such as custom sponsorship capabilities, where protocols can use off-chain logic to sponsor part or all of each transaction.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/wallets/integrations/zksync-zyfi-integration#chunk-1", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nTo follow along with this guide, you\u2019ll need three things:\n\n\u2022 A Magic Publishable API Key\n\n\u2022 A web client\n\n\u2022 zkSync Sepolia tokens\n\nYou can get your Publishable API Key from your Magic Dashboard.\n\nMagic Dashboard\n\nYou can get a small amount of zkSync Sepolia tokens from the QuickNode faucet. Alternatively, you can bridge Sepolia ETH to zkSync Sepolia using the zkSync bridge.\n\nQuickNode faucet\n\nzkSync bridge\n\nWe\u2019ll use the make-scoped-magic-app CLI tool to bootstrap a Next.js app with Magic authentication already baked into the client. You\u2019re welcome to use your own client, but this tutorial and its accompanying code snippets assume the output of the make-scoped-magic-app CLI as the starting point.\n\nmake-scoped-magic-app\n\nmake-scoped-magic-app\n\nThe make-scoped-magic-app CLI tool is an easy way to bootstrap new projects with Magic. To get started, simply run the command below in the shell of your choice. Be sure to replace <YOUR_PUBLISHABLE_API_KEY> with the Publishable API Key from your Magic Dashboard.\n\nmake-scoped-magic-app\n\n<YOUR_PUBLISHABLE_API_KEY>\n\nMagic Dashboard\n\nCopy\n\n01\n\nnpx make-scoped-magic-app\n\n\\\n\n\\\n\n\\\n\n\\\n\n01\n\nnpx make-scoped-magic-app\n\n\\\n\n\\\n\n\\\n\n\\\n\n02\n\n--template nextjs-dedicated-wallet\n\n\\\n\n\\\n\n\\\n\n\\\n\n02\n\n--template nextjs-dedicated-wallet\n\n\\\n\n\\\n\n\\\n\n\\\n\n03\n\n--network zksync-sepolia\n\n\\\n\n\\\n\n\\\n\n\\\n\n03\n\n--network zksync-sepolia\n\n\\\n\n\\\n\n\\\n\n\\\n\n04\n\n--login-methods EmailOTP\n\n\\\n\n\\\n\n\\\n\n\\\n\n04\n\n--login-methods EmailOTP\n\n\\\n\n\\\n\n\\\n\n\\\n\n05\n\n--publishable-api-key\n\n<\n\nYOUR_PUBLISHABLE_API_KEY\n\n>\n\n05\n\n--publishable-api-key\n\n<\n\nYOUR_PUBLISHABLE_API_KEY\n\n>\n\nThis will bootstrap the starting point of the tutorial for you. In the scaffolded project, be sure to add your Magic Publishable API Key to the .env as NEXT_PUBLIC_MAGIC_API_KEY if you didn\u2019t add it to the CLI command above\n\n.env\n\nNEXT_PUBLIC_MAGIC_API_KEY\n\nCopy\n\n01\n\n// Publishable API Key found in the Magic Dashboard\n\n01\n\n// Publishable API Key found in the Magic Dashboard\n\n02\n\nNEXT_PUBLIC_MAGIC_API_KEY=pk_live_1234567890\n\n02\n\nNEXT_PUBLIC_MAGIC_API_KEY=pk_live_1234567890\n\n03\n\n03\n\n04\n\n// The RPC URL for the blockchain network\n\n04\n\n// The RPC URL for the blockchain network\n\n05\n\nNEXT_PUBLIC_BLOCKCHAIN_NETWORK=zksync-sepolia\n\n05\n\nNEXT_PUBLIC_BLOCKCHAIN_NETWORK=zksync-sepolia", "explanation": "**Project Prerequisites Overview**\n\nThe '#Project prerequisites' section outlines the necessary requirements to follow the guide for integrating Magic Labs embedded wallet with zkSync and zyFi. The main purpose of this section is to ensure that users have the necessary tools and setup before proceeding with the integration.\n\n**Required Components:**\n\n1. **Magic Publishable API Key**: Obtainable from the Magic Dashboard, this key is required for authentication and authorization.\n2. **Web client**: A web client is necessary for the integration. Users can either use their own client or bootstrap a Next.js app using the `make-scoped-magic-app` CLI tool.\n3. **zkSync Sepolia tokens**: Users need a small amount of zkSync Sepolia tokens, which can be obtained from the QuickNode faucet or by bridging Sepolia ETH to zkSync Sepolia using the zkSync bridge.\n\n**Setup Instructions:**\n\nThe section also provides instructions on how to:\n\n* Bootstrap a Next.js app using the `make-scoped-magic-app` CLI tool.\n* Add the Magic Publishable API Key to the `.env` file as `NEXT_PUBLIC_MAGIC_API_KEY`.\n\nBy following these prerequisites, users can ensure a smooth integration process and proceed with the guide.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/wallets/integrations/zksync-zyfi-integration#chunk-2", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nIn addition to the packages included in the scaffold produced by the make-scoped-magic-app CLI, you\u2019ll also need to install viem for EVM-related types and transaction convenience methods.\n\nmake-scoped-magic-app\n\nviem\n\nRun the following command to install the required dependencies:\n\nCopy\n\n01\n\nnpm\n\ninstall\n\nviem\n\n01\n\nnpm\n\ninstall\n\nviem", "explanation": "**Explanation of '#Install additional project dependencies' documentation section**\n\nThis section of the Magic Labs documentation explains the necessity of installing additional project dependencies beyond the initial setup generated by the `make-scoped-magic-app CLI`. The main purpose of this step is to install `viem`, a package that provides EVM (Ethereum Virtual Machine)-related type definitions and convenience methods for transactions.\n\nIn simpler terms, `viem` is required to facilitate seamless interactions with the Ethereum blockchain, and installing it is essential for a complete and functional integration with ZkSync and ZyFi. By following the provided command, `npm install viem`, users can add the necessary dependencies to their project and ensure proper functionality.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/wallets/integrations/zksync-zyfi-integration#chunk-3", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nThe code snippets provided below outline the process of initializing the walletClient within the application. This client serves as an interface for the application to interact with the zkSync network, minimizing the complexities of direct communication and transaction handling.\n\nwalletClient\n\nInside of src/components/magic/MagicProvider.tsx, import the following from Viem:\n\nsrc/components/magic/MagicProvider.tsx\n\nCopy\n\n01\n\nimport\n\n{\n\nClient\n\n,\n\ncreateWalletClient\n\n,\n\ncustom\n\n}\n\nfrom\n\n'viem'\n\n;\n\n01\n\nimport\n\n{\n\nClient\n\n,\n\ncreateWalletClient\n\n,\n\ncustom\n\n}\n\nfrom\n\n'viem'\n\n;\n\n02\n\nimport\n\n{\n\nzkSyncSepoliaTestnet\n\n}\n\nfrom\n\n'viem/chains'\n\n;\n\n02\n\nimport\n\n{\n\nzkSyncSepoliaTestnet\n\n}\n\nfrom\n\n'viem/chains'\n\n;\n\n03\n\nimport\n\n{\n\neip712WalletActions\n\n}\n\nfrom\n\n\"viem/zksync\"\n\n03\n\nimport\n\n{\n\neip712WalletActions\n\n}\n\nfrom\n\n\"viem/zksync\"\n\nNext, create the wallet client state that will be used when we send the transaction:\n\nCopy\n\n01\n\nconst\n\n[\n\nwalletClient\n\n,\n\nsetWalletClient\n\n]\n\n=\n\nuseState\n\n<\n\nClient\n\n|\n\nnull\n\n>\n\n(\n\nnull\n\n)\n\n;\n\n01\n\nconst\n\n[\n\nwalletClient\n\n,\n\nsetWalletClient\n\n]\n\n=\n\nuseState\n\n<\n\nClient\n\n|\n\nnull\n\n>\n\n(\n\nnull\n\n)\n\n;\n\nWe must then create the wallet client inside of our useEffect hook that initializes the Magic provider and Web3 instance. Viem provides a function named createWalletClient. This function returns an object that acts as an interface for interacting with Ethereum wallets. It takes in the following arguments:\n\ncreateWalletClient\n\n\u2022 chain: The network that the wallet client is connecting to. In this case zkSyncSepoliaTestnet.\n\n\u2022 account: Ethereum address of the connected user. In this case it is the Magic user that has logged in using Email OTP.\n\n\u2022 transport: Acts as the intermediary layer tasked with handling outbound requests, such as RPC requests\n\nchain\n\nzkSyncSepoliaTestnet\n\naccount\n\ntransport\n\nThe client is also initialized with EIP712 transaction support using eip712WalletActions. This is a suite of Wallet Actions for developing with zkSync chains.\n\neip712WalletActions\n\nsuite of Wallet Actions\n\nInside the useEffect underneath the magic variable declaration, add the following function and invocation:\n\nmagic\n\nCopy\n\n01\n\nconst\n\ninitializeWalletClient\n\n=\n\nasync\n\n(\n\n)\n\n=>\n\n{\n\n01\n\nconst\n\ninitializeWalletClient\n\n=\n\nasync\n\n(\n\n)\n\n=>\n\n{\n\n02\n\nconst\n\nprovider\n\n=\n\nawait\n\nmagic\n\n?.\n\nwallet\n\n.\n\ngetProvider\n\n(\n\n)\n\n02\n\nconst\n\nprovider\n\n=\n\nawait\n\nmagic\n\n?.\n\nwallet\n\n.\n\ngetProvider\n\n(\n\n)\n\n03\n\nconst\n\nwalletClient\n\n=\n\ncreateWalletClient\n\n(\n\n{\n\n03\n\nconst\n\nwalletClient\n\n=\n\ncreateWalletClient\n\n(\n\n{\n\n04\n\nchain\n\n?\n\n:\n\nzkSyncSepoliaTestnet\n\n,\n\n04\n\nchain\n\n?\n\n:\n\nzkSyncSepoliaTestnet\n\n,\n\n05\n\naccount\n\n?\n\n:\n\nlocalStorage\n\n.\n\ngetItem\n\n(\n\n\"user\"\n\n)\n\nas\n\n`\n\n0x\n\n${\n\nstring\n\n}\n\n`\n\n,\n\n05\n\naccount\n\n?\n\n:\n\nlocalStorage\n\n.\n\ngetItem\n\n(\n\n\"user\"\n\n)\n\nas\n\n`\n\n0x\n\n${\n\nstring\n\n}\n\n`\n\n,\n\n06\n\ntransport\n\n:\n\ncustom\n\n(\n\nprovider\n\n)\n\n,\n\n06\n\ntransport\n\n:\n\ncustom\n\n(\n\nprovider\n\n)\n\n,\n\n07\n\n}\n\n)\n\n.\n\nextend\n\n(\n\neip712WalletActions\n\n(\n\n)\n\n)\n\n;\n\n07\n\n}\n\n)\n\n.\n\nextend\n\n(\n\neip712WalletActions\n\n(\n\n)\n\n)\n\n;\n\n08\n\nsetWalletClient\n\n(\n\nwalletClient\n\n)\n\n08\n\nsetWalletClient\n\n(\n\nwalletClient\n\n)\n\n09\n\n}\n\n09\n\n}\n\n10\n\n10\n\n11\n\ninitializeWalletClient\n\n(\n\n)\n\n;\n\n11\n\ninitializeWalletClient\n\n(\n\n)\n\n;\n\n12\n\n// rest of the code\n\n12\n\n// rest of the code\n\nNow that we\u2019ve created and set the wallet client, we want to export it so we gain global access to the client. Update the useMemo hook and add walletClient:\n\nuseMemo\n\nwalletClient\n\nCopy\n\n01\n\nconst\n\nvalue\n\n=\n\nuseMemo\n\n(\n\n(\n\n)\n\n=>\n\n{\n\n01\n\nconst\n\nvalue\n\n=\n\nuseMemo\n\n(\n\n(\n\n)\n\n=>\n\n{\n\n02\n\nreturn\n\n{\n\n02\n\nreturn\n\n{\n\n03\n\nmagic\n\n,\n\n03\n\nmagic\n\n,\n\n04\n\nweb3\n\n,\n\n04\n\nweb3\n\n,\n\n05\n\nwalletClient\n\n05\n\nwalletClient\n\n06\n\n}\n\n;\n\n06\n\n}\n\n;\n\n07\n\n}\n\n,\n\n[\n\nmagic\n\n,\n\nweb3\n\n,\n\nwalletClient\n\n]\n\n)\n\n;\n\n07\n\n}\n\n,\n\n[\n\nmagic\n\n,\n\nweb3\n\n,\n\nwalletClient\n\n]\n\n)\n\n;", "explanation": "The documentation section '#Initialize wallet client' describes the process of initializing a wallet client within an application that interacts with the zkSync network. The wallet client serves as an interface between the application and the zkSync network, simplifying direct communication and transaction handling.\n\nThe main purpose of initializing the wallet client is to create a connection between the application and the zkSync network, allowing users to interact with their wallets and perform transactions.\n\nThe provided code snippets outline the steps to initialize the wallet client:\n\n1. Import necessary modules from Viem, including `Client`, `createWalletClient`, and `custom`.\n2. Create a state to store the wallet client using `useState`.\n3. Inside a `useEffect` hook, create the wallet client using `createWalletClient`, passing in the network (`zkSyncSepoliaTestnet`), account (Ethereum address of the connected user), and transport (intermediary layer for handling outbound requests).\n4. Initialize the wallet client with EIP712 transaction support using `eip712WalletActions`.\n5. Set the created wallet client in the state using `setWalletClient`.\n6. Export the wallet client using a `useMemo` hook, allowing for global access to the client.\n\nBy following these steps, the application can establish a connection to the zkSync network and enable users to interact with their wallets and perform transactions.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/wallets/integrations/zksync-zyfi-integration#chunk-4", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nIn this guide, we're utilizing a testnet token called ERC20Mock to cover gas fees. This requires minting tokens to the wallet associated with the Magic user currently logged in, ensuring sufficient funds are available for gas expenses.\n\nERC20Mock\n\nHere's a step-by-step guide:\n\n\u2022 Start Your Development Server: Begin by launching your development server.\n\n\u2022 Login via Email OTP: Proceed through the Email OTP login flow to authenticate.\n\n\u2022 Copy Your Wallet Address: Once logged in, locate the wallet component on your dashboard. Copy the address displayed there.\n\n\u2022 Access the ERC20Mock Contract: Visit the ERC20Mock contract page on the Sepolia Explorer.\n\n\u2022 Navigate to the \"Write\" tab.\n\n\u2022 Minting Tokens: Scroll to the \"mint\" function. Here, paste the wallet address you copied earlier into the designated field. We'll be minting an equivalent of 0.1 ETH worth of tokens. In the amount input, enter 100000000000000000 (representing 0.1 ETH in wei, the smallest unit of ether). Click on the \"Write\" button and follow the on-screen prompts to complete the process.\n\nERC20Mock contract page on the Sepolia Explorer\n\n100000000000000000\n\nIf minting was successful, your wallet should reflect a balance increase of 0.1 ERC20Mock tokens, ensuring you have the necessary funds to cover gas fees.", "explanation": "**Explanation of '#Mint testnet tokens' Documentation Section**\n\nThe '#Mint testnet tokens' section is a step-by-step guide on how to obtain testnet tokens, specifically ERC20Mock tokens, for use on the Sepolia test network. The main purpose of this guide is to help developers obtain sufficient funds (0.1 ETH worth of tokens) to cover gas expenses for transactions on the test network.\n\nThis is necessary because, even on test networks, transactions require gas to execute, and this guide provides a way to acquire the necessary tokens to facilitate development and testing of blockchain-based applications.\n\nIn summary, the '#Mint testnet tokens' guide shows developers how to mint ERC20Mock tokens to their wallet address associated with their Magic user account, ensuring they have enough funds to cover gas expenses on the Sepolia test network.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/wallets/integrations/zksync-zyfi-integration#chunk-5", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nZyfi has created a straightforward API modeled after the standard transaction format. First send the transaction object to their provided paymaster endpoint. Their server will generate and return the required payload to submit to the network.\n\nSee the steps below on how to use Zyfi:\n\n\u2022 The frontend calls the paymaster API, which then processes transaction details and incorporates paymaster-specific information, such as the fee charged in ERC-20 tokens to cover gas expenses\n\n\u2022 The user starts a transaction, choosing a paymaster for gas fees and granting it an ERC-20 token allowance. The bootloader checks with the paymaster on-chain, which confirms the user's intent and collects the token. Once validated, the paymaster covers the transaction's costs, executed by the bootloader. Unused gas gets refunded to the paymaster, who then returns it to the user in the ERC-20 token, making the process efficient and free of direct gas charges for the user.\n\n\u2022 Following this, the Zyfi paymaster collects the ERC-20 token fee, which enables it to validate and carry out the transaction on behalf of the user, covering the necessary ETH gas costs\n\n\u2022 The transaction is then verified and submitted to the network\n\nWe've created and exported the walletClient that is vital for processing transactions. Before this client handles the transaction data, it needs to incorporate the paymaster details, including the fee charged in ERC-20 tokens.\n\nwalletClient\n\nGo to src/components/magic/cards/SendTransactionCard.tsx and take a look at the sendTransaction function. This is where we will simulate a transaction for transferring testnet ETH to another wallet.\n\nsrc/components/magic/cards/SendTransactionCard.tsx\n\nsendTransaction\n\nInside this function is where the POST request is sent to Zyfi with the required payload which includes the following:\n\n\u2022 feeTokenAddress: The ERC-20 token address used to pay for gas\n\n\u2022 isTestnet: Boolean indicating if the transaction is executed on the zkSync Sepolia chain\n\n\u2022 txData: Transaction data. In this case it is the sender, transfer recipient, and transfer amount.\n\nfeeTokenAddress\n\nisTestnet\n\ntxData\n\nAfter the first conditionals, add the following API call to Zyfi:\n\nCopy\n\n01\n\nconst\n\nres\n\n=\n\nawait\n\nfetch\n\n(\n\n'<https://api.zyfi.org/api/erc20_paymaster/v1>'\n\n,\n\n{\n\n01\n\nconst\n\nres\n\n=\n\nawait\n\nfetch\n\n(\n\n'<https://api.zyfi.org/api/erc20_paymaster/v1>'\n\n,\n\n{\n\n02\n\nmethod\n\n:\n\n'POST'\n\n,\n\n02\n\nmethod\n\n:\n\n'POST'\n\n,\n\n03\n\nheaders\n\n:\n\n{\n\n03\n\nheaders\n\n:\n\n{\n\n04\n\n'Content-Type'\n\n:\n\n'application/json'\n\n04\n\n'Content-Type'\n\n:\n\n'application/json'\n\n05\n\n}\n\n,\n\n05\n\n}\n\n,\n\n06\n\nbody\n\n:\n\nJSON\n\n.\n\nstringify\n\n(\n\n{\n\n06\n\nbody\n\n:\n\nJSON\n\n.\n\nstringify\n\n(\n\n{\n\n07\n\n\"feeTokenAddress\"\n\n:\n\n\"0xFD1fBFf2E1bAa053C927dc513579a8B2727233D8\"\n\n,\n\n07\n\n\"feeTokenAddress\"\n\n:\n\n\"0xFD1fBFf2E1bAa053C927dc513579a8B2727233D8\"\n\n,\n\n08\n\n\"gasLimit\"\n\n:\n\n\"500000\"\n\n,\n\n08\n\n\"gasLimit\"\n\n:\n\n\"500000\"\n\n,\n\n09\n\n\"isTestnet\"\n\n:\n\ntrue\n\n,\n\n09\n\n\"isTestnet\"\n\n:\n\ntrue\n\n,\n\n10\n\n\"txData\"\n\n:\n\n{\n\n10\n\n\"txData\"\n\n:\n\n{\n\n11\n\n\"from\"\n\n:\n\npublicAddress\n\n,\n\n11\n\n\"from\"\n\n:\n\npublicAddress\n\n,\n\n12\n\n\"to\"\n\n:\n\ntoAddress\n\n,\n\n12\n\n\"to\"\n\n:\n\ntoAddress\n\n,\n\n13\n\n\"value\"\n\n:\n\nweb3\n\n.\n\nutils\n\n.\n\ntoWei\n\n(\n\namount\n\n,\n\n'ether'\n\n)\n\n,\n\n13\n\n\"value\"\n\n:\n\nweb3\n\n.\n\nutils\n\n.\n\ntoWei\n\n(\n\namount\n\n,\n\n'ether'\n\n)\n\n,\n\n14\n\n\"data\"\n\n:\n\n\"0x\"\n\n14\n\n\"data\"\n\n:\n\n\"0x\"\n\n15\n\n}\n\n15\n\n}\n\n16\n\n}\n\n)\n\n16\n\n}\n\n)\n\n17\n\n}\n\n)\n\n17\n\n}\n\n)\n\nThis API call will retrieve the transaction request, estimate gas fees, and determine the ERC-20 token price for gas. The API then finalizes the transaction details, including the gas fee, and prepares it for user approval by signing it. This process ensures that transactions are ready and optimized for the network.\n\nBelow is a sample response from the Zyfi API which is signed by the user. Take notice of the customData attribute. It includes the paymaster address and paymasterInput, which includes the following values:\n\ncustomData\n\npaymasterInput\n\n\u2022 0x949431dc: Specifies that this is an approval flow, where the user pays with a given token\n\n\u2022 fd1fbff2e1baa053c927dc513579a8b2727233d8: Fee token address, which in this case is the ERC20Mock token\n\n\u2022 1d54c9cb44: Fee token amount that the user allows to the paymaster for payment. This is calculated off-chain and enables gas savings since the gas used for modifying the allowance storage slot is entirely reimbursed at the transaction's conclusion, due to the slot's value changing from zero to a specific value and back to zero.\n\n\u2022 18e2f1dcacf: block.timestamp at which the transaction expires\n\n\u2022 41fffe1f0df68221efb3c42f18bcbd7762e22a7d1e2a86441e0eb74515bc6eedb677756f3656b03d39ea1490d29940e083c5224af228983678009b07e215f9707e1c: Message signed by Zyfi API\n\n0x949431dc\n\nfd1fbff2e1baa053c927dc513579a8b2727233d8\n\n1d54c9cb44\n\n18e2f1dcacf\n\n41fffe1f0df68221efb3c42f18bcbd7762e22a7d1e2a86441e0eb74515bc6eedb677756f3656b03d39ea1490d29940e083c5224af228983678009b07e215f9707e1c\n\nIt also contains additional data pertaining to the Zyfi request, not all of which needs to be included in the final transaction, but can be used in the UI or for validation.\n\nCopy\n\n01\n\n{\n\n01\n\n{\n\n02\n\n// signed by the user\n\n02\n\n// signed by the user\n\n03\n\n\"txData\"\n\n:\n\n{\n\n03\n\n\"txData\"\n\n:\n\n{\n\n04\n\n\"chainId\"\n\n:\n\n300\n\n,\n\n04\n\n\"chainId\"\n\n:\n\n300\n\n,\n\n05\n\n\"from\"\n\n:\n\n\"0xae37E4c7b3AD318E7d381804C9eAC15636e82079\"\n\n,\n\n05\n\n\"from\"\n\n:\n\n\"0xae37E4c7b3AD318E7d381804C9eAC15636e82079\"\n\n,\n\n06\n\n\"to\"\n\n:\n\n\"0x765fEB3FB358867453B26c715a29BDbbC10Be772\"\n\n,\n\n06\n\n\"to\"\n\n:\n\n\"0x765fEB3FB358867453B26c715a29BDbbC10Be772\"\n\n,\n\n07\n\n\"value\"\n\n:\n\n\"10000000000000\"\n\n,\n\n07\n\n\"value\"\n\n:\n\n\"10000000000000\"\n\n,\n\n08\n\n\"data\"\n\n:\n\n\"0x\"\n\n,\n\n08\n\n\"data\"\n\n:\n\n\"0x\"\n\n,\n\n09\n\n\"customData\"\n\n:\n\n{\n\n09\n\n\"customData\"\n\n:\n\n{\n\n10\n\n\"paymasterParams\"\n\n:\n\n{\n\n10\n\n\"paymasterParams\"\n\n:\n\n{\n\n11\n\n\"paymaster\"\n\n:\n\n\"0xEcacba301285cE4308aAFc71319F9a670fdd1C7a\"\n\n,\n\n11\n\n\"paymaster\"\n\n:\n\n\"0xEcacba301285cE4308aAFc71319F9a670fdd1C7a\"\n\n,\n\n12\n\n\"paymasterInput\"\n\n:\n\n\"0x949431dc000000000000000000000000fd1fbff2e1baa053c927dc513579a8b2727233d80000000000000000000000000000000000000000000000000001d54c9cb44000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000018e2f1dcacf00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000041fffe1f0df68221efb3c42f18bcbd7762e22a7d1e2a86441e0eb74515bc6eedb677756f3656b03d39ea1490d29940e083c5224af228983678009b07e215f9707e1c00000000000000000000000000000000000000000000000000000000000000\"\n\n12\n\n\"paymasterInput\"\n\n:\n\n\"0x949431dc000000000000000000000000fd1fbff2e1baa053c927dc513579a8b2727233d80000000000000000000000000000000000000000000000000001d54c9cb44000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000018e2f1dcacf00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000041fffe1f0df68221efb3c42f18bcbd7762e22a7d1e2a86441e0eb74515bc6eedb677756f3656b03d39ea1490d29940e083c5224af228983678009b07e215f9707e1c00000000000000000000000000000000000000000000000000000000000000\"\n\n13\n\n}\n\n,\n\n13\n\n}\n\n,\n\n14\n\n\"gasPerPubdata\"\n\n:\n\n50000\n\n14\n\n\"gasPerPubdata\"\n\n:\n\n50000\n\n15\n\n}\n\n,\n\n15\n\n}\n\n,\n\n16\n\n\"maxFeePerGas\"\n\n:\n\n\"100000000\"\n\n,\n\n16\n\n\"maxFeePerGas\"\n\n:\n\n\"100000000\"\n\n,\n\n17\n\n\"gasLimit\"\n\n:\n\n1245000\n\n17\n\n\"gasLimit\"\n\n:\n\n1245000\n\n18\n\n}\n\n,\n\n18\n\n}\n\n,\n\n19\n\n\"gasLimit\"\n\n:\n\n\"1245000\"\n\n,\n\n19\n\n\"gasLimit\"\n\n:\n\n\"1245000\"\n\n,\n\n20\n\n\"gasPrice\"\n\n:\n\n\"100000000\"\n\n,\n\n20\n\n\"gasPrice\"\n\n:\n\n\"100000000\"\n\n,\n\n21\n\n\"tokenAddress\"\n\n:\n\n\"0xFD1fBFf2E1bAa053C927dc513579a8B2727233D8\"\n\n,\n\n21\n\n\"tokenAddress\"\n\n:\n\n\"0xFD1fBFf2E1bAa053C927dc513579a8B2727233D8\"\n\n,\n\n22\n\n\"tokenPrice\"\n\n:\n\n\"10\"\n\n,\n\n22\n\n\"tokenPrice\"\n\n:\n\n\"10\"\n\n,\n\n23\n\n\"feeTokenAmount\"\n\n:\n\n\"516000000000000\"\n\n,\n\n23\n\n\"feeTokenAmount\"\n\n:\n\n\"516000000000000\"\n\n,\n\n24\n\n\"feeTokendecimals\"\n\n:\n\n\"18\"\n\n,\n\n24\n\n\"feeTokendecimals\"\n\n:\n\n\"18\"\n\n,\n\n25\n\n\"feeUSD\"\n\n:\n\n\"0.005160000000000001\"\n\n,\n\n25\n\n\"feeUSD\"\n\n:\n\n\"0.005160000000000001\"\n\n,\n\n26\n\n\"markup\"\n\n:\n\n\"-20%\"\n\n,\n\n26\n\n\"markup\"\n\n:\n\n\"-20%\"\n\n,\n\n27\n\n\"expirationTime\"\n\n:\n\n\"1710187465423\"\n\n,\n\n27\n\n\"expirationTime\"\n\n:\n\n\"1710187465423\"\n\n,\n\n28\n\n\"expiresIn\"\n\n:\n\n\"1 hour\"\n\n28\n\n\"expiresIn\"\n\n:\n\n\"1 hour\"\n\n29\n\n}\n\n29\n\n}", "explanation": "**Explanation of the Zyfi Paymaster API Documentation**\n\nThe documentation section \"#Call to Zyfi paymaster API\" describes the process of integrating with the Zyfi paymaster API to enable gasless transactions on the zkSync network. The main purpose of this API is to handle the complexities of transaction processing, including estimating gas fees, calculating the ERC-20 token price for gas, and finalizing transaction details.\n\n**Main Steps:**\n\n1. The frontend application sends a transaction object to the Zyfi paymaster API endpoint.\n2. The API processes the transaction details, incorporates paymaster-specific information, and estimates gas fees.\n3. The API returns a payload to the frontend application, which includes the paymaster address, paymaster input, and other transaction details.\n4. The frontend application uses the returned payload to create a signed transaction, which is then submitted to the network.\n\n**Key Benefits:**\n\n* Gasless transactions: The paymaster API handles gas costs, making transactions more efficient and cost-effective for users.\n* Optimized transactions: The API optimizes transaction processing, reducing gas consumption and making the process more efficient.\n\n**Relevant Code Snippets:**\n\n* The `sendTransaction` function in `src/components/magic/cards/SendTransactionCard.tsx` is used to simulate a transaction and send a POST request to the Zyfi API.\n* The API call to Zyfi is made using the `fetch` function, with the required payload including the fee token address, isTestnet boolean, and transaction data.\n\n**Example Response:**\n\n* The API response includes the signed transaction data, paymaster address, paymaster input, and other relevant details.\n* The response also includes additional data pertaining to the Zyfi request, which can be used for UI or validation purposes.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/wallets/integrations/zksync-zyfi-integration#chunk-6", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nOnce you receive the response, you can use destructuring assignment to extract the txData property from the JSON response. Next, format the transaction data necessary for submission, including key details like the account address, recipient, value, chain specifications, gas limits, and paymaster information. This structured data is tailored specifically for the transaction and ensures that all necessary parameters are correctly set for processing the transaction properly.\n\ntxData\n\nCopy\n\n01\n\nconst\n\n{\n\ntxData\n\n:\n\napiTxData\n\n}\n\n=\n\nawait\n\nres\n\n.\n\njson\n\n(\n\n)\n\n01\n\nconst\n\n{\n\ntxData\n\n:\n\napiTxData\n\n}\n\n=\n\nawait\n\nres\n\n.\n\njson\n\n(\n\n)\n\n02\n\n02\n\n03\n\nconst\n\npaymasterTxData\n\n=\n\n{\n\n03\n\nconst\n\npaymasterTxData\n\n=\n\n{\n\n04\n\naccount\n\n:\n\npublicAddress\n\nas\n\n`\n\n0x\n\n${\n\nstring\n\n}\n\n`\n\n,\n\n04\n\naccount\n\n:\n\npublicAddress\n\nas\n\n`\n\n0x\n\n${\n\nstring\n\n}\n\n`\n\n,\n\n05\n\nto\n\n:\n\napiTxData\n\n.\n\nto\n\n,\n\n05\n\nto\n\n:\n\napiTxData\n\n.\n\nto\n\n,\n\n06\n\nvalue\n\n:\n\nBigInt\n\n(\n\napiTxData\n\n.\n\nvalue\n\n)\n\n,\n\n06\n\nvalue\n\n:\n\nBigInt\n\n(\n\napiTxData\n\n.\n\nvalue\n\n)\n\n,\n\n07\n\nchain\n\n:\n\nzkSyncSepoliaTestnet\n\n,\n\n07\n\nchain\n\n:\n\nzkSyncSepoliaTestnet\n\n,\n\n08\n\ngas\n\n:\n\nBigInt\n\n(\n\napiTxData\n\n.\n\ngasLimit\n\n)\n\n,\n\n08\n\ngas\n\n:\n\nBigInt\n\n(\n\napiTxData\n\n.\n\ngasLimit\n\n)\n\n,\n\n09\n\ngasPerPubdata\n\n:\n\nBigInt\n\n(\n\napiTxData\n\n.\n\ncustomData\n\n.\n\ngasPerPubdata\n\n)\n\n,\n\n09\n\ngasPerPubdata\n\n:\n\nBigInt\n\n(\n\napiTxData\n\n.\n\ncustomData\n\n.\n\ngasPerPubdata\n\n)\n\n,\n\n10\n\nmaxFeePerGas\n\n:\n\nBigInt\n\n(\n\napiTxData\n\n.\n\nmaxFeePerGas\n\n)\n\n,\n\n10\n\nmaxFeePerGas\n\n:\n\nBigInt\n\n(\n\napiTxData\n\n.\n\nmaxFeePerGas\n\n)\n\n,\n\n11\n\nmaxPriorityFeePerGas\n\n:\n\nBigInt\n\n(\n\n0\n\n)\n\n,\n\n11\n\nmaxPriorityFeePerGas\n\n:\n\nBigInt\n\n(\n\n0\n\n)\n\n,\n\n12\n\ndata\n\n:\n\napiTxData\n\n.\n\ndata\n\n,\n\n12\n\ndata\n\n:\n\napiTxData\n\n.\n\ndata\n\n,\n\n13\n\npaymaster\n\n:\n\napiTxData\n\n.\n\ncustomData\n\n.\n\npaymasterParams\n\n.\n\npaymaster\n\n,\n\n13\n\npaymaster\n\n:\n\napiTxData\n\n.\n\ncustomData\n\n.\n\npaymasterParams\n\n.\n\npaymaster\n\n,\n\n14\n\npaymasterInput\n\n:\n\napiTxData\n\n.\n\ncustomData\n\n.\n\npaymasterParams\n\n.\n\npaymasterInput\n\n,\n\n14\n\npaymasterInput\n\n:\n\napiTxData\n\n.\n\ncustomData\n\n.\n\npaymasterParams\n\n.\n\npaymasterInput\n\n,\n\n15\n\n}\n\n15\n\n}\n\nThe data is correctly formatted and the transaction is ready to submit to the network. Add the following try/catch for sending the transaction beneath the rest of the code:\n\ntry/catch\n\nCopy\n\n01\n\ntry\n\n{\n\n01\n\ntry\n\n{\n\n02\n\nconst\n\nhash\n\n=\n\nawait\n\nwalletClient\n\n?.\n\nsendTransaction\n\n(\n\npaymasterTxData\n\n)\n\n02\n\nconst\n\nhash\n\n=\n\nawait\n\nwalletClient\n\n?.\n\nsendTransaction\n\n(\n\npaymasterTxData\n\n)\n\n03\n\nsetHash\n\n(\n\nhash\n\n)\n\n03\n\nsetHash\n\n(\n\nhash\n\n)\n\n04\n\n}\n\ncatch\n\n(\n\nerr\n\n)\n\n{\n\n04\n\n}\n\ncatch\n\n(\n\nerr\n\n)\n\n{\n\n05\n\nconsole\n\n.\n\nlog\n\n(\n\n\"Something went wrong: \"\n\n,\n\nerr\n\n)\n\n05\n\nconsole\n\n.\n\nlog\n\n(\n\n\"Something went wrong: \"\n\n,\n\nerr\n\n)\n\n06\n\n}\n\n06\n\n}\n\nThat's it! You should have now successfully transferred the desired amount, all while covering the gas fees using the testnet ERC-20 token. Click the \"Transaction history\" button to view the transaction on the zkSync block explorer.", "explanation": "**Sending a Transaction with zkSync and Magic Labs Embedded Wallet**\n\nThe provided documentation section titled '#Sending the transaction' explains the process of preparing and sending a transaction using the Magic Labs embedded wallet and zkSync integration.\n\n**Main Purpose**\n\nThe main purpose of this section is to demonstrate how to format the transaction data, including account information, recipient, value, and gas limits, in a structured way that can be submitted to the zkSync network for processing.\n\n**Key Steps**\n\n1. Extract the `txData` property from the JSON response received from the Magic Labs API.\n2. Format the transaction data using the `paymasterTxData` object, which includes details like account address, recipient, value, chain specifications, gas limits, and paymaster information.\n3. Use the `walletClient` to send the formatted transaction data to the zkSync network.\n4. Handle any errors that may occur during the transaction submission using a try/catch block.\n5. Once the transaction is successful, retrieve the transaction hash and store it for future reference.\n\n**End Goal**\n\nThe end goal of this section is to successfully transfer a desired amount of tokens using the testnet ERC-20 token, covering gas fees, and viewing the transaction on the zkSync block explorer.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/wallets/integrations/zksync-zyfi-integration#chunk-7", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nYou now know how to integrate Zyfi with Magic and include the following features:\n\n\u2022 Simple authentication with Email OTP\n\n\u2022 Transfer funds using Zyfi paymaster to pay for gas using any ERC-20 token\n\nFeel free to take a look at our final solution code or tinker with it directly in Codesandbox. You can also check out the Zyfi paymaster docs for more information on what is possible with Magic and Zyfi.\n\nfinal solution code\n\nCodesandbox\n\npaymaster docs", "explanation": "**Purpose of the '#Next Steps' Section:**\n\nThe '#Next Steps' section serves as a concluding part of the documentation, summarizing the integration of Zyfi with Magic. Its main purpose is to:\n\n1. **Recap**: Briefly recall the key features that have been successfully integrated, specifically simple authentication with Email OTP and transfer of funds using the Zyfi paymaster.\n2. **Provide Additional Resources**: Offer users further learning opportunities by linking to:\n\t* A final solution code for reference.\n\t* A Codesandbox for hands-on experimentation.\n\t* The Zyfi paymaster documentation for exploring more possibilities with Magic and Zyfi.\n\nIn essence, this section aims to give users a sense of accomplishment, provide additional learning resources, and encourage further exploration and experimentation with the integration.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/wallets/integrations/zksync-zyfi-integration#chunk-8", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nGet to market faster with our out-of-the-box embedded wallet widgets that helps users view their assets and perform common blockchain interactions. You can customize the wallet UI experience by incorporating branding, NFTs, fiat-onramps, and more, allowing you to tailor the perfect web3 experience for your end-users.\n\nThe Widget UI currently supports the following blockchains: Ethereum, Polygon, Base, Arbitrum, and Optimism.", "explanation": "The 'Widget UI' documentation section is about Magic Labs' pre-built embedded wallet widgets that allow users to view their assets and perform common blockchain interactions. The main purpose of this feature is to help developers and businesses quickly integrate a customizable wallet UI into their applications, enabling them to create a tailored web3 experience for their end-users with features such as branding, NFTs, and fiat-onramps.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/wallets/customization/widget-ui#chunk-1", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 Full Wallet Experience: Embed our widget UI in your app with just a single line of code, allowing your users to manage, view, send, and receive blockchain assets\n\n\u2022 Transaction Signing: Utilize our secure personal signature confirmation to collect direct confirmation from the user anytime a signature is requested from their wallet\n\n\u2022 Displaying Assets: Show the user their address, token balances and/or NFTs\n\n\u2022 Fiat On-Ramps: Allow your users to purchase crypto with fiat directly into their Magic wallet. We've partnered with Stripe to provide fiat on-ramp for Dedicated Wallets. Check out their supported blockchains, currencies, and geographies here. For other on-ramp providers, please reach out for more information.\n\nhere", "explanation": "This section of the documentation, titled '#Use Cases', describes the different scenarios in which the Magic Labs embedded wallet can be utilized in a custom application. \n\nThe main purpose is to provide developers with a clear understanding of the various use cases supported by the Magic Labs embedded wallet, including:\n\n1. Providing a full wallet experience within an app\n2. Securely requesting confirmation for transaction signing\n3. Displaying user assets, such as address, token balances, and NFTs\n4. Enabling users to purchase cryptocurrency using fiat through integrated on-ramp providers.\n\nBy highlighting these use cases, the documentation aims to guide developers on the application's potential use and incorporate the Magic Labs embedded wallet into their projects effectively.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/wallets/customization/widget-ui#chunk-2", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nTo utilize the widget UI, you can call any of the following methods:\n\nCopy\n\n01\n\nmagic\n\n.\n\nwallet\n\n.\n\nconnectWithUI\n\n(\n\n)\n\n// Simple Email OTP login form\n\n01\n\nmagic\n\n.\n\nwallet\n\n.\n\nconnectWithUI\n\n(\n\n)\n\n// Simple Email OTP login form\n\n02\n\nmagic\n\n.\n\nwallet\n\n.\n\nshowUI\n\n(\n\n)\n\n// Full end-user wallet experience\n\n02\n\nmagic\n\n.\n\nwallet\n\n.\n\nshowUI\n\n(\n\n)\n\n// Full end-user wallet experience\n\n03\n\nmagic\n\n.\n\nwallet\n\n.\n\nshowAddress\n\n(\n\n)\n\n03\n\nmagic\n\n.\n\nwallet\n\n.\n\nshowAddress\n\n(\n\n)\n\n04\n\nmagic\n\n.\n\nwallet\n\n.\n\nshowSendTokensUI\n\n(\n\n)\n\n04\n\nmagic\n\n.\n\nwallet\n\n.\n\nshowSendTokensUI\n\n(\n\n)\n\n05\n\nmagic\n\n.\n\nwallet\n\n.\n\nshowBalances\n\n(\n\n)\n\n05\n\nmagic\n\n.\n\nwallet\n\n.\n\nshowBalances\n\n(\n\n)\n\n06\n\nmagic\n\n.\n\nwallet\n\n.\n\nshowNFTs\n\n(\n\n)\n\n06\n\nmagic\n\n.\n\nwallet\n\n.\n\nshowNFTs\n\n(\n\n)\n\n07\n\nmagic\n\n.\n\nwallet\n\n.\n\nshowOnRamp\n\n(\n\n)\n\n07\n\nmagic\n\n.\n\nwallet\n\n.\n\nshowOnRamp\n\n(\n\n)\n\nconnectWithUI\n\nRenders a simple login form UI to collect the user's email address and authenticate them passwordlessly using a one-time passcode (OTP) sent to the email address they input.", "explanation": "The documentation section '#Usage - connectWithUI' is about utilizing the Magic Labs embedded wallet's widget UI to facilitate user authentication. \n\nThe main purpose of this section is to explain how to use the `connectWithUI` method to render a simple login form that allows users to input their email address and authenticate passwordlessly using a one-time passcode (OTP) sent to their email address.\n\nIn essence, `connectWithUI` enables a seamless and secure authentication process for users, eliminating the need for traditional passwords.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/wallets/customization/widget-ui#chunk-3", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "showUI\n\nDisplays the fully navigable wallet to the user that adheres to the toggled configurations on your developer dashboard\u2019s Widget UI tab. \u2060 \u2060This is only supported for users who login with email or Google and not third party wallets such as metamask. User must be signed in for this method to return or else it will throw an error.", "explanation": "**Explanation of 'showUI'**\n\n**About:** The `showUI` feature in the Magic Labs embedded wallet documentation is a method that displays the full wallet interface to users.\n\n**Main Purpose:** The main purpose of `showUI` is to showcase a fully navigable wallet to users, adhering to customizations set up in the developer dashboard's Widget UI tab. This allows developers to provide a seamless and tailored wallet experience for their users.\n\n**Key Requirements:**\n\n- Users must be signed in for this method to work.\n- Supported login methods include email and Google, but exclude third-party wallets like MetaMask.\n- If users are not signed in, the method will throw an error.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/wallets/customization/widget-ui#chunk-4", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "showAddress\n\nDisplays an iframe with the current user\u2019s wallet address in a QR Code.", "explanation": "The 'showAddress' feature is a functionality within the Magic Labs embedded wallet that displays the current user's wallet address in the form of a QR code. \n\nIts main purpose is to provide a convenient and scannable way for users to share or use their wallet address, making it easier for them to perform transactions, interact with other services, or share their address with others.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/wallets/customization/widget-ui#chunk-5", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "showSendTokensUI\n\nDisplays an iframe with UI to help the user transfer tokens from their account to another address.", "explanation": "The `showSendTokensUI` is a function that displays an iframe containing a user interface (UI) designed to facilitate the transfer of tokens from the user's account to another specified address. \n\nIn simpler terms, it's a customizable UI widget provided by Magic Labs that allows users of your application to easily send cryptocurrency tokens to other wallets, removing the need for your development team to build a token transfer interface from scratch.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/wallets/customization/widget-ui#chunk-6", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "showBalances\n\nDisplays an iframe that displays the user\u2019s token balances from the currently connected network.", "explanation": "**Overview of showBalances**\n\nThe `showBalances` functionality is a customizable option provided by Magic Labs' embedded wallet. It allows you to display an iframe that showcases the user's token balances from the currently connected network.\n\n**Main Purpose**\n\nThe primary purpose of `showBalances` is to provide users with a convenient way to view their token balances in real-time, directly within your application. This feature helps to enhance the overall user experience by providing transparency and ease of access to their account information. By displaying the user's balances in a clear and concise manner, `showBalances` promotes a more informed and engaged user interaction with your application.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/wallets/customization/widget-ui#chunk-7", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "showNFTs\n\nDisplays an iframe that shows the user\u2019s NFTs in both an aggregated and detailed individual view. Supported only on Ethereum and Polygon. Ensure this is enabled in your developer dashboard via the \u2018Widget UI\u2019 tab.", "explanation": "The `showNFTs` feature is a customization option for the Magic Labs embedded wallet. Its main purpose is to allow users to view their Non-Fungible Tokens (NFTs) in a seamless and user-friendly way.\n\nWhen enabled, `showNFTs` displays an iframe within the wallet that showcases the user's NFTs in two different views:\n\n1. **Aggregated view**: This view provides a comprehensive overview of all the user's NFTs.\n2. **Detailed individual view**: This view offers a more in-depth look at each individual NFT.\n\nNote that this feature is currently only compatible with Ethereum and Polygon blockchain networks. To use `showNFTs`, you must first enable it in your Magic Labs developer dashboard via the 'Widget UI' tab.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/wallets/customization/widget-ui#chunk-8", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "showOnRamp\n\nDisplays an iframe modal with various on-ramp providers for users to purchase crypto directly to their wallet.\n\nTo use fiat on-ramp from the various providers for Dedicated Wallet apps, please contact us to complete the mandatory KYB process with the payment provider. Once approved, ensure this toggle is enabled in your developer dashboard via the \u2018Widget UI\u2019 tab.", "explanation": "**showOnRamp: Enabling Fiat On-Ramp for Wallet Users**\n\nThe `showOnRamp` feature in the Magic Labs embedded wallet allows users to purchase cryptocurrency directly to their wallet through various on-ramp providers. This feature is integrated as an iframe modal, providing a seamless user experience.\n\n**Main Purpose:**\n\nThe primary purpose of `showOnRamp` is to enable users to buy cryptocurrency with fiat currency, making it easier for them to fund their wallets. However, to activate this feature, developers must first undergo a mandatory Know Your Business (KYB) process with the payment provider and then enable the toggle in the developer dashboard under the 'Widget UI' tab.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/wallets/customization/widget-ui#chunk-9", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nThe developer dashboard\u2019s \"Widget UI\" tab contains configurations that allow you to customize the wallet UI with some optional toggles:\n\n\u2022 With the \u201cNFT\u201d toggle, you can hide or show collectibles to your users. This setting will apply across all the UI methods.\n\n\u2022 With transaction signing on, any supported EVM RPC methods that require a signature will trigger a secure end-user confirmation prompt.\n\nNote: Once you enable or disable a toggle, the client will need to be reloaded / refreshed in order to see the changes.\n\nYou can also customize the branding and theming of the UI through the developer dashboard.\n\nbranding and theming of the UI", "explanation": "The '#Configuration' section is about customizing the Magic Labs embedded wallet's user interface (UI) through the developer dashboard. Its main purpose is to provide developers with options to personalize and control the appearance and behavior of the wallet UI for their users.\n\nSpecifically, the configuration options mentioned allow developers to:\n\n1. Hide or show collectibles (NFTs) from users.\n2. Enable transaction signing to prompt end-users for secure confirmation when required.\n3. Customize the branding and theming of the UI to fit their application's style.\n\nThese configurations require a refresh or reload of the client to take effect.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/wallets/customization/widget-ui#chunk-10", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 Wallet Module Methods\n\n\u2022 API Reference\n\nWallet Module Methods\n\nAPI Reference", "explanation": "The section '#Resources' is a part of the Magic Labs embedded wallet documentation, specifically for customizing the widget UI. \n\nThe main purpose of this section is to provide quick access to additional information and references that help users understand and work with the wallet module. It lists two key resources:\n- 'Wallet Module Methods' likely describes functions or methods available within the wallet module that can be used for customization and integration.\n- 'API Reference' serves as a comprehensive guide to the wallet module's API, outlining available endpoints, parameters, and responses.\n\nThe objective is to give users an easy way to find and utilize relevant resources, ensuring they have the necessary tools and knowledge to effectively customize and integrate the widget UI in their applications.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/wallets/customization/widget-ui#chunk-11", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nMagic instantaneously creates non-custodial embedded wallets for your user when they login using any of the provided authentication methods. These wallets utilize our patented \u201cDelegated Key Management System\u201d (DKMS) to keep keys secure and user assets protected. Our wallets are embedded directly into your application and come with a host of features and configurations to make it easy for your users to engage with web3.\n\n\u201cDelegated Key Management System\u201d (DKMS)\n\nMagic provides two wallet options: Dedicated Wallet, a customizable white-labeled wallet with various authentication options, and Universal Wallet, a plug-and-play wallet offering a comprehensive feature set for seamless Web3 experiences.\n\nDedicated Wallet\n\nUniversal Wallet\n\nUniversal wallets will soon be merged with Dedicated Wallets into a single product line. Universal apps created before February 7, 2024 will work as expected with no change. See our blog post to learn more.\n\nblog post", "explanation": "The documentation section \"Wallets - Overview\" explains the concept and functionality of Magic's embedded wallets, specifically designed for seamless web3 integration. \n\nHere's a concise breakdown of the main points and purpose:\n\n**Key Points:**\n\n1. **Instant Non-Custodial Wallets**: Magic creates embedded wallets for users upon login using various authentication methods, ensuring user assets are secure through the Delegated Key Management System (DKMS).\n\n2. **Embedded Wallet Options**: There are two types of wallets - **Dedicated Wallet** (customizable) and **Universal Wallet** (plug-and-play with comprehensive features).\n\n3. **Merger Update**: Universal Wallets will be merged with Dedicated Wallets into a single product line, with no impact on existing Universal apps created before February 7, 2024.\n\n**Main Purpose:**\n\nThe main purpose of this documentation section is to provide an overview of Magic's embedded wallet features and options, enabling developers to understand the benefits and capabilities of integrating these wallets into their applications.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/wallets/overview#chunk-1", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nTransaction Signing\n\nPersonal Signatures\n\nFiat On-Ramps\n\nEmail Collection\n\nThird Party Wallets\n\nKey Export", "explanation": "The \"#Features\" section from the Magic Labs embedded wallet documentation lists the key functionalities and capabilities of the wallet. The main purpose of this section is to provide an overview of the wallet's primary features, allowing developers to understand the wallet's capabilities and potential use cases.\n\nIn summary, the key features listed include:\n\n1. **Transaction Signing**: Enables users to digitally sign transactions for security and authentication.\n2. **Personal Signatures**: Allows users to create unique digital signatures for various transactions and purposes.\n3. **Fiat On-Ramps**: Facilitates users to purchase cryptocurrencies using traditional fiat currencies, making it easy for new users to enter the cryptocurrency ecosystem.\n4. **Email Collection**: Collects users' email addresses for identity verification and potential communication purposes.\n5. **Third Party Wallets**: Integrates support for external wallets, allowing users to manage and interact with different wallet providers.\n6. **Key Export**: Enables users to export their private keys, providing control and flexibility over their cryptocurrency holdings.\n\nOverall, the main purpose of the \"#Features\" section is to provide a concise summary of the wallet's core functionalities, allowing developers to quickly understand the capabilities of the Magic Labs embedded wallet.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/wallets/overview#chunk-2", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nGeneralized DKMS\n\nGas Subsidy", "explanation": "The section '#Enterprise Features' from the Magic Labs embedded wallet documentation appears to be discussing advanced functionalities designed for enterprise-scale use cases. \n\nIt highlights two main features:\n\n1. **Generalized DKMS (Decentralized Key Management System)**: This feature likely provides a more sophisticated and flexible key management system, allowing for more complex and enterprise-specific use cases. A Generalized DKMS would enable better security and control over key management within an organization's wallet solution.\n\n2. **Gas Subsidy**: This feature allows the organization to cover the costs of gas fees on behalf of their users, thereby providing a smoother and more cost-effective experience. This is particularly important in enterprise settings where predictability and cost control are crucial.\n\nThe main purpose of this section is to inform enterprise clients about the advanced features available in Magic Labs' embedded wallet solution, enabling them to better evaluate and utilize the wallet for their specific business needs.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/wallets/overview#chunk-3", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nContent Security Policy", "explanation": "The '#Security' section with the heading 'Content Security Policy' from the Magic Labs embedded wallet documentation is about defining a set of security directives that help protect web applications, including the embedded wallet, from various types of attacks. \n\nIts main purpose is to instruct the browser on what sources of content are allowed to be executed within the wallet's web environment, thereby preventing cross-site scripting (XSS) attacks, data injection, and other security vulnerabilities. \n\nIn essence, the Content Security Policy provides a mechanism for specifying which sources of content can be trusted, helping to maintain the security and integrity of the embedded wallet and its users.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/wallets/overview#chunk-4", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nBrand & Theme\n\nWidget UI", "explanation": "The section '#Customization' is about personalizing the Magic Labs embedded wallet experience to match the user's brand and preferences. The main purpose of this section is to provide information on how to customize the appearance of the wallet UI (User Interface) to fit the specific needs and branding of the application.\n\nSpecifically, it covers two aspects:\n\n1. **Brand**: This likely refers to customizing the wallet with the user's brand identity, such as logos, colors, and typography.\n2. **Theme**: This refers to customizing the overall visual theme of the wallet, such as the layout, colors, and fonts.\n3. **Widget UI**: This specifically refers to customizing the User Interface of the wallet as a widget, which is a self-contained component of the application.\n\nOverall, the purpose of this section is to enable developers to create a seamless and branded experience for their users by allowing them to customize the appearance of the embedded wallet.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/wallets/overview#chunk-5", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nWAGMI", "explanation": "The '#Integration' section is titled \"#Integration\" but there's only one word given which is \"WAGMI.\" WAGMI is an abbreviation for \"We're All Gonna Make It.\" It is likely referring to a popular web3 development framework called WAGMI. \n\nThe main purpose of this section in the Magic Labs embedded wallet documentation is to indicate the compatibility or integration of the Magic Labs wallet with the WAGMI framework, suggesting that developers using WAGMI can seamlessly integrate Magic Labs' embedded wallet into their applications.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/wallets/overview#chunk-6", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nYou can allow your users to sign up & log in to your web app with their Bitbucket account.", "explanation": "The provided documentation section is about integrating Bitbucket Social Login with Magic, a feature that allows users to sign up and log in to a web application using their existing Bitbucket account.\n\nThe main purpose of this feature is to provide users with a convenient and seamless way to authenticate with a web application, without having to create a new username and password. By leveraging their existing Bitbucket credentials, users can enjoy a more streamlined login experience.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/login/social-logins/social-providers/bitbucket#chunk-1", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n#\n\nMagic SDK offers two OAuth extensions: v1 and v2. For web applications, it is recommended to use v2, while v1 should be used for mobile applications.\n\nv1\n\nv2\n\n\u2022 You will need a Bitbucket account\n\n\u2022 You will need to have the Magic SDK installed into your web app\n\n\u2022 You will need to have the Magic SDK - OAuth Extension installed into your web app\n\nBitbucket\n\nMagic SDK installed\n\nMagic SDK - OAuth Extension", "explanation": "The '#Usage - #Prerequisites' section from the Bitbucket social login documentation explains the necessary steps and requirements to integrate Magic Labs' OAuth extension with Bitbucket for social login functionality.\n\nIn summary, to use Bitbucket social login with Magic SDK, you need:\n\n1. A Bitbucket account\n2. The Magic SDK installed in your web or mobile application\n3. The Magic SDK OAuth Extension installed (specifically recommended to use v2 for web applications and v1 for mobile applications)\n\nThe main purpose of this section is to outline the pre-requisites that must be met before you can use the Magic SDK's OAuth extension to enable Bitbucket social login in your application.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/login/social-logins/social-providers/bitbucket#chunk-2", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nAfter installing the OAuth extension, you can now enable Bitbucket Login for your Magic app:\n\n\u2022 Go to your Magic Dashboard\n\n\u2022 Select the Magic app for which you\u2019d like to enable bitbucket Login, or create a new app\n\n\u2022 Navigate to Authentication -> Social Logins from the sidebar\n\n\u2022 Click the toggle for Bitbucket\n\n\u2022 Copy the Redirect URI field from your Magic Dashboard\n\n\u2022 Go to Bitbucket App Dashboard. In the top right corner, click the profile avatar and select Workspace settings. Alternatively you can click on the profile avatar in the top right and choose All workspaces to open an entire list where you can then select Manage on the workspace you need. \u2060\n\n\u2022 On the left sidebar, scroll down to the Apps and Features header and click OAuth consumers, then click the Add consumer button\n\n\u2022 Add the Name along with the Redirect URI you obtained from your Magic Dashboard into the Callback URL and click Save\n\n\u2022 Please make sure at least to grant Read permission in the account section. Otherwise, authentication will not complete.\n\n\u2022 Obtain the \"Key\" and \"Secret\"\n\n\u2022 Return to your Magic Dashboard and input the Key and Secret for your bitbucket OAuth app\n\n\u2022 In Magic Dashboard, click \u201cSave\u201d \u2013 Done!\n\nMagic Dashboard", "explanation": "**Bitbucket Setup (v1 extension) Documentation Explanation**\n\nThe '#Bitbucket Setup (v1 extension)' documentation section describes the step-by-step process of enabling Bitbucket login for a Magic app. Its main purpose is to guide users through the setup and configuration of Bitbucket OAuth authentication, allowing users to log in to their Magic app using their Bitbucket credentials.\n\nThe documentation covers the following key tasks:\n\n1. Enabling Bitbucket login in the Magic Dashboard\n2. Creating an OAuth consumer in the Bitbucket App Dashboard\n3. Configuring the OAuth consumer with the necessary permissions and redirect URI\n4. Obtaining the client key and secret for the Bitbucket OAuth app\n5. Integrating the client key and secret into the Magic Dashboard\n\nBy following these steps, users can successfully enable Bitbucket login for their Magic app, allowing for a seamless authentication experience.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/login/social-logins/social-providers/bitbucket#chunk-3", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 Follow above steps, but disregard Magic's Redirect URI in step 5\n\n\u2022 In step 8, paste the Redirect URI you are passing in as the redirectURI argument to the loginWithRedirect method\n\nCopy\n\n01\n\nawait\n\nmagic\n\n.\n\noauth2\n\n.\n\nloginWithRedirect\n\n(\n\n{\n\n01\n\nawait\n\nmagic\n\n.\n\noauth2\n\n.\n\nloginWithRedirect\n\n(\n\n{\n\n02\n\nprovider\n\n:\n\n'bitbucket'\n\n,\n\n02\n\nprovider\n\n:\n\n'bitbucket'\n\n,\n\n03\n\nredirectURI\n\n:\n\n'https://your-app.com/your/oauth/callback'\n\n,\n\n// <== whitelist this with Bitbucket\n\n03\n\nredirectURI\n\n:\n\n'https://your-app.com/your/oauth/callback'\n\n,\n\n// <== whitelist this with Bitbucket\n\n04\n\n}\n\n)\n\n;\n\n04\n\n}\n\n)\n\n;", "explanation": "**Bitbucket Setup (v2 extension)**\n\nThis documentation section is about setting up Magic Labs' embedded wallet to work with Bitbucket's OAuth authentication using the v2 extension. \n\n**Main Purpose:**\n\nThe main purpose of this section is to instruct developers on how to configure Magic Labs' SDK to redirect users to their Bitbucket account for authentication, and then back to the application after authorization. \n\nThis involves specifying a custom redirect URI in the `loginWithRedirect` method, which must be whitelisted in the Bitbucket settings to allow the authentication flow to complete successfully. \n\nIn essence, this setup enables users to log in to your application using their Bitbucket credentials.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/login/social-logins/social-providers/bitbucket#chunk-4", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 Bitbucket Social Login Demo\n\nBitbucket Social Login Demo", "explanation": "The '#Resources' section in the given documentation link is about a resources section for Bitbucket Social Login.\n\nIts main purpose is to provide a usable example for implementing Bitbucket Social Login using the Magic Labs embedded wallet. The given resource is a demo that developers can refer to when integrating Bitbucket Social Login into their application.\n\nThis demo is likely to be a live example that showcases the functionality of the Bitbucket Social Login integration with Magic Labs, allowing developers to see the login process in action and replicate it in their own projects.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/login/social-logins/social-providers/bitbucket#chunk-5", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nThe Magic SDK for Flutter is your entry-point to secure, passwordless authentication for your mobile app. This guide will cover some important topics for getting started with Flutter APIs and to make the most of Magic's features.", "explanation": "The provided documentation section, \"Flutter API Reference - Overview\", is an introduction to the Magic SDK for Flutter. \n\nIn essence, it's a guide that explains how to integrate the Magic SDK into a Flutter mobile app, enabling secure and passwordless authentication. \n\nThe main purpose of this documentation is to familiarize developers with the Flutter APIs and help them effectively utilize Magic's features, such as passwordless authentication, within their mobile app.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/flutter#chunk-1", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nThe Magic class is the entry-point to the Magic SDK. It must be instantiated with a Magic publishable key.\n\n#\n\nAdd magic_sdk to your pubspec.yaml:\n\nmagic_sdk\n\npubspec.yaml\n\nCopy\n\n01\n\ndependencies\n\n:\n\n01\n\ndependencies\n\n:\n\n02\n\nflutter\n\n:\n\n02\n\nflutter\n\n:\n\n03\n\nsdk\n\n:\n\nflutter\n\n03\n\nsdk\n\n:\n\nflutter\n\n04\n\nmagic_sdk\n\n:\n\n^6.0.1\n\n04\n\nmagic_sdk\n\n:\n\n^6.0.1\n\nRun the following command to install dependencies:\n\nCopy\n\n01\n\n$ dart pub get\n\n01\n\n$ dart pub get", "explanation": "**Getting Started with Magic Labs Embedded Wallet: Installation**\n\nThis documentation section outlines the initial steps required to set up the Magic Labs Embedded Wallet SDK in a Flutter application. The main purpose of this section is to guide developers through the process of installing the Magic SDK and setting it up for use in their Flutter project.\n\n**Key Steps:**\n\n1. **Add Magic SDK to pubspec.yaml**: Update the dependencies in the `pubspec.yaml` file to include `magic_sdk`.\n2. **Run dependencies installation command**: Execute the `dart pub get` command to install the Magic SDK and other required dependencies.\n\n**In summary**, this section provides a concise guide on how to get started with the Magic Labs Embedded Wallet SDK in Flutter by setting up the necessary dependencies and performing a successful installation.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/flutter#chunk-2", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nWe use service workers for for better performance on web3 operations. They are enabled by default on Android, but if you'd like to take advantage of this performance boost on iOS as well, you'd have to enable app bound domains. To do that, add the following to your Info.plist and rebuild your app:\n\nInfo.plist\n\nCopy\n\n01\n\n<key>WKAppBoundDomains</key>\n\n01\n\n<key>WKAppBoundDomains</key>\n\n02\n\n<array>\n\n02\n\n<array>\n\n03\n\n<string>https://auth.magic.link</string>\n\n03\n\n<string>https://auth.magic.link</string>\n\n04\n\n</array>\n\n04\n\n</array>", "explanation": "**Performance Improvement (Optional)**\n\nThe documentation section explains an optional step to enhance the performance of Magic Labs' embedded wallet on iOS devices. \n\n**Main Purpose:**\n\nThe main purpose of this step is to enable service workers on iOS, which are already enabled by default on Android. Service workers improve the performance of web3 operations.\n\n**To Achieve This:**\n\nTo take advantage of this performance boost on iOS, you need to enable app-bound domains in your app's Info.plist file. This is done by adding a specific key (`WKAppBoundDomains`) and an array with a single string value (`https://auth.magic.link`). Once added, rebuild your app to apply the changes.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/flutter#chunk-3", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n#\n\nMagic()\n\nMagic(apiKey, {MagicLocale locale})\n\nMagic(apiKey, {MagicLocale locale})\n\nParameter\n\nType\n\nDefinition\n\napiKey\n\napiKey\n\nString\n\nYour publishable API Key retrieved from the Magic Dashboard.\n\nlocale?\n\nlocale?\n\nMagicLocale\n\nCustomize the language of Magic's modal, email and confirmation screen. See Localization for more.\n\nLocalization\n\nMagic.eth(String apiKey, { required EthNetwork network, MagicLocale locale})\n\nMagic.eth(String apiKey, { required EthNetwork network, MagicLocale locale})\n\nParameter\n\nType\n\nDefinition\n\nnetwork\n\nnetwork\n\nEthNetwork\n\nA representation of the connected Ethereum network (one of: mainnet or goerli).\n\nMagic.custom(String apiKey, { required String rpcUrl, int? chainId, MagicLocale locale})\n\nMagic.custom(String apiKey, { required String rpcUrl, int? chainId, MagicLocale locale})\n\nParameter\n\nType\n\nDefinition\n\nrpcUrl\n\nrpcUrl\n\nString\n\nA URL pointing to your custom Ethereum Node.\n\nchainId?\n\nchainId?\n\nint\n\nSome Node infrastructures require you to pass an explicit chain ID. If you are aware that your Node requires this configuration, pass it here as an integer.", "explanation": "**Constructor - Magic()**\n\nThe `Magic()` constructor is used to create a new instance of the Magic client in a Flutter application. It is the primary entry point for integrating Magic's embedded wallet functionality into your app.\n\n**Main Purpose**\n\nThe main purpose of the `Magic()` constructor is to initialize the Magic client with your publishable API key and optional locale settings. This allows you to customize the language of Magic's modal, email, and confirmation screens.\n\n**Key Parameters**\n\n* `apiKey`: A required string parameter that represents your publishable API key retrieved from the Magic Dashboard.\n* `locale`: An optional parameter that allows you to customize the language of Magic's interface. You can choose from predefined locales or use the default language.\n\n**Variations**\n\nThe `Magic()` constructor has three variations:\n\n1. `Magic(apiKey)`: Initializes the Magic client with your publishable API key.\n2. `Magic(apiKey, {MagicLocale locale})`: Initializes the Magic client with your publishable API key and optional locale settings.\n3. `Magic.eth(apiKey, { required EthNetwork network, MagicLocale locale})` and `Magic.custom(apiKey, { required String rpcUrl, int? chainId, MagicLocale locale})`: Initializes the Magic client with your publishable API key and additional settings for Ethereum networks (mainnet or goerli) or custom Ethereum nodes, respectively.\n\nIn summary, the `Magic()` constructor is used to initialize the Magic client with your API key and optional locale settings, allowing you to customize the language and behavior of the embedded wallet in your Flutter application.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/flutter#chunk-4", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\nimport\n\n'package:magic_sdk/magic_sdk.dart'\n\n;\n\n01\n\nimport\n\n'package:magic_sdk/magic_sdk.dart'\n\n;\n\n02\n\n02\n\n03\n\n// Construct with an API key:\n\n03\n\n// Construct with an API key:\n\n04\n\nMagic\n\n.\n\ninstance\n\n=\n\nMagic\n\n(\n\n\"PUBLISHABLE_API_KEY\"\n\n)\n\n;\n\n04\n\nMagic\n\n.\n\ninstance\n\n=\n\nMagic\n\n(\n\n\"PUBLISHABLE_API_KEY\"\n\n)\n\n;\n\n05\n\n05\n\n06\n\n// Construct with an API key and locale:\n\n06\n\n// Construct with an API key and locale:\n\n07\n\nMagic\n\n.\n\ninstance\n\n=\n\nMagic\n\n(\n\n\"PUBLISHABLE_API_KEY\"\n\n,\n\nlocale\n\n:\n\nMagicLocale\n\n.\n\nen_US\n\n)\n\n;\n\n07\n\nMagic\n\n.\n\ninstance\n\n=\n\nMagic\n\n(\n\n\"PUBLISHABLE_API_KEY\"\n\n,\n\nlocale\n\n:\n\nMagicLocale\n\n.\n\nen_US\n\n)\n\n;\n\n08\n\n08\n\n09\n\n// Construct with an API key and network:\n\n09\n\n// Construct with an API key and network:\n\n10\n\nMagic\n\n.\n\ninstance\n\n=\n\nMagic\n\n.\n\neth\n\n(\n\n\"PUBLISHABLE_API_KEY\"\n\n,\n\nnetwork\n\n:\n\nEthNetwork\n\n.\n\ngoerli\n\n)\n\n;\n\n10\n\nMagic\n\n.\n\ninstance\n\n=\n\nMagic\n\n.\n\neth\n\n(\n\n\"PUBLISHABLE_API_KEY\"\n\n,\n\nnetwork\n\n:\n\nEthNetwork\n\n.\n\ngoerli\n\n)\n\n;\n\n11\n\n11\n\n12\n\n// Construct with an API key and custom node options:\n\n12\n\n// Construct with an API key and custom node options:\n\n13\n\nMagic\n\n.\n\ninstance\n\n=\n\nMagic\n\n.\n\ncustom\n\n(\n\n\"PUBLISHABLE_API_KEY\"\n\n,\n\nrpcUrl\n\n:\n\n\"https://your.custom.url/\"\n\n,\n\nchainId\n\n:\n\n1\n\n)\n\n;\n\n13\n\nMagic\n\n.\n\ninstance\n\n=\n\nMagic\n\n.\n\ncustom\n\n(\n\n\"PUBLISHABLE_API_KEY\"\n\n,\n\nrpcUrl\n\n:\n\n\"https://your.custom.url/\"\n\n,\n\nchainId\n\n:\n\n1\n\n)\n\n;", "explanation": "**Initialization of Magic SDK**\n\nThe documentation section '#Initialization' from the Magic Labs embedded wallet documentation explains how to initialize the Magic SDK in a Flutter application. The main purpose of this section is to guide developers on how to properly set up and configure the Magic SDK instance with an API key, locale, network, or custom node options.\n\nIn essence, initializing the Magic SDK involves creating a `Magic` instance and passing in the required configuration parameters, such as:\n\n1. **API Key**: A publishable API key is required to initialize the Magic SDK.\n2. **Locale**: An optional locale parameter can be set to customize the language and region settings.\n3. **Network**: For Ethereum-based projects, the network can be specified, such as Goerli or Mainnet.\n4. **Custom Node Options**: Developers can also configure the Magic SDK to use a custom node with a provided RPC URL and chain ID.\n\nBy following the initialization procedures outlined in this section, developers can effectively set up the Magic SDK and start using its features in their Flutter application.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/flutter#chunk-5", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nThe Auth Module and its members are accessible on the Magic SDK instance by the auth property.\n\nauth\n\nCopy\n\n01\n\nimport\n\n'package:magic_sdk/magic_sdk.dart'\n\n;\n\n01\n\nimport\n\n'package:magic_sdk/magic_sdk.dart'\n\n;\n\n02\n\n02\n\n03\n\nMagic\n\nmagic\n\n=\n\nMagic\n\n.\n\ninstance\n\n;\n\n03\n\nMagic\n\nmagic\n\n=\n\nMagic\n\n.\n\ninstance\n\n;\n\n04\n\n04\n\n05\n\nmagic\n\n.\n\nauth\n\n;\n\n05\n\nmagic\n\n.\n\nauth\n\n;\n\n06\n\nmagic\n\n.\n\nauth\n\n.\n\nloginWithSMS\n\n;\n\n06\n\nmagic\n\n.\n\nauth\n\n.\n\nloginWithSMS\n\n;\n\n07\n\nmagic\n\n.\n\nauth\n\n.\n\nloginWithEmailOTP\n\n;\n\n07\n\nmagic\n\n.\n\nauth\n\n.\n\nloginWithEmailOTP\n\n;\n\n#\n\nloginWithSMS\n\nAuthenticate a user passwordlessly using a one-time code sent to the specified phone number.\n\nList of Currently Blocked Country Codes\n\nList of Currently Blocked Country Codes\n\n#\n\nFuture<String> loginWithSMS({ required String email })\n\nFuture<String> loginWithSMS({ required String email })\n\nphoneNumber", "explanation": "The `#loginWithSMS` method in the `#Auth Module` of the Magic SDK is designed to allow user authentication without a password, using a one-time code sent to the user's phone.\n\n**Main purpose:**\nIts main purpose is to authenticate a user by sending a one-time code (OTP) to the user's specified phone number, rather than requiring a traditional password. This process facilitates passwordless authentication and makes it more convenient for users.\n\n**How it works:**\nThis method is accessible through the `auth` property of the Magic SDK instance. It takes a required `phoneNumber` (instead of `email`) as a parameter, though the documentation states `required String email`, indicating that the correct parameter name may be `phoneNumber` (of type `String`) for this method. Upon calling this method, the Magic SDK sends a one-time code to the specified phone number, and when the user enters the correct code, they are authenticated without needing a password.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/flutter#chunk-6", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 Future<string> The future resolves upon authentication request success and throws with a specific error code if the request fails. The resolved value is a Decentralized ID token with a default 15-minute lifespan.\n\nFuture<string>", "explanation": "**Explanation of '#Returns' Documentation Section**\n\nThe '#Returns' section in the Magic Labs documentation describes the expected outcome of a successful authentication request in their Flutter client-side SDK.\n\n**Main Purpose:**\n\nThe main purpose of this section is to inform developers about the type of data they can expect to receive after initiating an authentication request. Specifically, it indicates that the authentication request will return a:\n\n* `Future<string>`: an asynchronous operation that resolves to a string value\n* **Decentralized ID token**: a unique token with a default 15-minute lifespan, which is used to authenticate and authorize the user\n* **Error handling**: if the request fails, it will throw a specific error code.\n\nIn summary, this section helps developers understand the successful authentication response format and how to handle potential errors, making it easier for them to integrate the Magic Labs authentication solution into their Flutter applications.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/flutter#chunk-7", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\nimport\n\n'package:magic_sdk/magic_sdk.dart'\n\n;\n\n01\n\nimport\n\n'package:magic_sdk/magic_sdk.dart'\n\n;\n\n02\n\n02\n\n03\n\nMagic\n\n.\n\ninstance\n\n=\n\nMagic\n\n(\n\n\"PUBLISHABLE_API_KEY\"\n\n)\n\n;\n\n03\n\nMagic\n\n.\n\ninstance\n\n=\n\nMagic\n\n(\n\n\"PUBLISHABLE_API_KEY\"\n\n)\n\n;\n\n04\n\n04\n\n05\n\n// log in a user by using text input Controller\n\n05\n\n// log in a user by using text input Controller\n\n06\n\ntry\n\n{\n\n06\n\ntry\n\n{\n\n07\n\nvar\n\nmagic\n\n=\n\nMagic\n\n.\n\ninstance\n\n;\n\n07\n\nvar\n\nmagic\n\n=\n\nMagic\n\n.\n\ninstance\n\n;\n\n08\n\nawait\n\nmagic\n\n.\n\nauth\n\n.\n\nloginWithSMS\n\n(\n\nphoneNumber\n\n:\n\ntextController\n\n.\n\ntext\n\n)\n\n;\n\n08\n\nawait\n\nmagic\n\n.\n\nauth\n\n.\n\nloginWithSMS\n\n(\n\nphoneNumber\n\n:\n\ntextController\n\n.\n\ntext\n\n)\n\n;\n\n09\n\n}\n\ncatch\n\n{\n\n09\n\n}\n\ncatch\n\n{\n\n10\n\n// Handle errors if required!\n\n10\n\n// Handle errors if required!\n\n11\n\n}\n\n11\n\n}", "explanation": "**Example Documentation Explanation**\n\nThis documentation section, titled '#Example', provides a code snippet that demonstrates how to use the Magic Labs embedded wallet SDK in a Flutter application. The main purpose of this example is to show how to log a user in using their phone number and SMS authentication.\n\n**Key Points:**\n\n1. The example imports the Magic SDK and initializes it with a publishable API key.\n2. It then uses the `loginWithSMS` method to authenticate a user by sending an SMS to their phone number, which is obtained from a text input controller.\n3. The example also includes error handling, allowing developers to catch and handle any errors that may occur during the authentication process.\n\n**In summary**, this example documentation serves as a quick guide for developers to get started with integrating the Magic Labs embedded wallet SDK in their Flutter application, specifically for SMS-based user authentication.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/flutter#chunk-8", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nloginWithEmailOTP\n\nAuthenticate a user passwordlessly using an email one-time code sent to the specified user's email address.\n\n#\n\nFuture<String> loginWithEmailOTP({ required String email })\n\nFuture<String> loginWithEmailOTP({ required String email })\n\nemail", "explanation": "**Overview of `loginWithEmailOTP`**\n\n`loginWithEmailOTP` is a public method provided by the Magic Labs embedded wallet documentation for Flutter SDK. Its primary purpose is to authenticate a user using a one-time code sent to their email address, eliminating the need for traditional passwords.\n\n**How it Works**\n\nWhen you call `loginWithEmailOTP`, it sends a one-time code to the user's specified email address. Once the user receives the code, they can use it to complete the authentication process.\n\n**Method Signature**\n\nThe method signature is:\n```dart\nFuture<String> loginWithEmailOTP({required String email})\n```\nHere:\n\n* `email`: a required parameter specifying the user's email address where the one-time code will be sent.\n\n**Return Value**\n\nThe method returns a `Future<String>`, indicating that the authentication process is asynchronous. Upon successful authentication, the method resolves with a string value (presumably an authentication token or user ID).\n\n**In Summary**\n\n`loginWithEmailOTP` is a passwordless authentication method that sends a one-time code to the user's email address, allowing for secure and convenient user authentication.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/flutter#chunk-9", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 Future<string> The future resolves upon authentication request success and throws with a specific error code if the request fails. The resolved value is a Decentralized ID token with a default 15-minute lifespan.\n\nFuture<string>", "explanation": "The '#Returns' section of the documentation explains the expected outcome or result of a specific API or function call, in this case, the authentication request in the Magic Labs Flutter client-side SDK.\n\nMain purpose: \nThis section serves as a guide to inform developers what to expect after they make an authentication request using the SDK. \n\nKey points:\n\n* If the authentication request is successful, the function will return a Future that resolves to a string.\n* The returned string is a Decentralized ID (DID) token.\n* The DID token has a default lifespan of 15 minutes.\n* If the authentication request fails, the Future will throw an error with a specific error code.\n\nBy understanding what the API or function call returns, developers can anticipate and handle the response accordingly in their application, making it easier to integrate and use the Magic Labs SDK effectively.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/flutter#chunk-10", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\nimport\n\n'package:magic_sdk/magic_sdk.dart'\n\n;\n\n01\n\nimport\n\n'package:magic_sdk/magic_sdk.dart'\n\n;\n\n02\n\n02\n\n03\n\nMagic\n\n.\n\ninstance\n\n=\n\nMagic\n\n(\n\n\"PUBLISHABLE_API_KEY\"\n\n)\n\n;\n\n03\n\nMagic\n\n.\n\ninstance\n\n=\n\nMagic\n\n(\n\n\"PUBLISHABLE_API_KEY\"\n\n)\n\n;\n\n04\n\n04\n\n05\n\n// log in a user by using text input Controller\n\n05\n\n// log in a user by using text input Controller\n\n06\n\ntry\n\n{\n\n06\n\ntry\n\n{\n\n07\n\nvar\n\nmagic\n\n=\n\nMagic\n\n.\n\ninstance\n\n;\n\n07\n\nvar\n\nmagic\n\n=\n\nMagic\n\n.\n\ninstance\n\n;\n\n08\n\nawait\n\nmagic\n\n.\n\nauth\n\n.\n\nloginWithEmailOTP\n\n(\n\nemail\n\n:\n\ntextController\n\n.\n\ntext\n\n)\n\n;\n\n08\n\nawait\n\nmagic\n\n.\n\nauth\n\n.\n\nloginWithEmailOTP\n\n(\n\nemail\n\n:\n\ntextController\n\n.\n\ntext\n\n)\n\n;\n\n09\n\n}\n\ncatch\n\n{\n\n09\n\n}\n\ncatch\n\n{\n\n10\n\n// Handle errors if required!\n\n10\n\n// Handle errors if required!\n\n11\n\n}\n\n11\n\n}", "explanation": "This documentation section is an example of how to use the Magic Labs embedded wallet SDK in a Flutter application to authenticate a user via email and one-time password (OTP). \n\nThe main purpose of this example is to demonstrate the following steps:\n- Importing the Magic Labs SDK into the Flutter project.\n- Initializing the Magic instance using a Publishable API Key.\n- Logging in a user using an email address obtained from a text input controller.\n- Handling any potential errors that may occur during the login process.\n\nThis example provides a clear and concise way to implement email-based OTP authentication in a Flutter application using the Magic Labs SDK.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/flutter#chunk-11", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nThe User Module and it's members are accessible on the Magic SDK instance by the user property.\n\nCopy\n\n01\n\nimport\n\n'package:magic_sdk/magic_sdk.dart'\n\n;\n\n01\n\nimport\n\n'package:magic_sdk/magic_sdk.dart'\n\n;\n\n02\n\n02\n\n03\n\nMagic\n\n.\n\ninstance\n\n=\n\nMagic\n\n(\n\n\"PUBLISHABLE_API_KEY\"\n\n)\n\n;\n\n03\n\nMagic\n\n.\n\ninstance\n\n=\n\nMagic\n\n(\n\n\"PUBLISHABLE_API_KEY\"\n\n)\n\n;\n\n04\n\n04\n\n05\n\nvar\n\nm\n\n=\n\nMagic\n\n.\n\ninstance\n\n;\n\n05\n\nvar\n\nm\n\n=\n\nMagic\n\n.\n\ninstance\n\n;\n\n06\n\n06\n\n07\n\nm\n\n.\n\nuser\n\n;\n\n07\n\nm\n\n.\n\nuser\n\n;\n\n08\n\nm\n\n.\n\nuser\n\n.\n\ngetIdToken\n\n;\n\n08\n\nm\n\n.\n\nuser\n\n.\n\ngetIdToken\n\n;\n\n09\n\nm\n\n.\n\nuser\n\n.\n\ngenerateIdToken\n\n;\n\n09\n\nm\n\n.\n\nuser\n\n.\n\ngenerateIdToken\n\n;\n\n10\n\nm\n\n.\n\nuser\n\n.\n\ngetInfo\n\n;\n\n10\n\nm\n\n.\n\nuser\n\n.\n\ngetInfo\n\n;\n\n11\n\nm\n\n.\n\nuser\n\n.\n\nisLoggedIn\n\n;\n\n11\n\nm\n\n.\n\nuser\n\n.\n\nisLoggedIn\n\n;\n\n12\n\nm\n\n.\n\nuser\n\n.\n\nupdateEmail\n\n;\n\n12\n\nm\n\n.\n\nuser\n\n.\n\nupdateEmail\n\n;\n\n13\n\nm\n\n.\n\nuser\n\n.\n\nlogout\n\n;\n\n13\n\nm\n\n.\n\nuser\n\n.\n\nlogout\n\n;\n\n#\n\nupdateEmail\n\nInitiates the update email flow that allows a user to change their email address.\n\n#\n\nFuture<bool> updateEmail({required String email, bool showUI = true})\n\nFuture<bool> updateEmail({required String email, bool showUI = true})\n\nemail\n\nshowUI?\n\ntrue", "explanation": "**User Module - updateEmail - Arguments**\n\nThe `updateEmail` function is a part of the User Module within the Magic SDK. Its primary purpose is to initiate the process of updating a user's email address.\n\n**Function Signature:**\n```dart\nFuture<bool> updateEmail({required String email, bool showUI = true})\n```\n\n**Arguments:**\n\n* `email`: (required) The new email address to be updated.\n* `showUI`: (optional, default: `true`) A boolean flag indicating whether to show the user interface for updating the email address. If set to `false`, the UI will not be displayed.\n\n**Main Purpose:**\n\nThe `updateEmail` function allows a user to change their registered email address within an application. By calling this function, the user will be guided through a flow to update their email address, which can include displaying a user interface (if `showUI` is `true`). The function returns a Future that resolves to a boolean value indicating whether the update was successful.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/flutter#chunk-12", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 Future<boolean>: The future resolves with a true boolean value if update email is successful and rejects with a specific error code if the request fails\n\nFuture<boolean>", "explanation": "**Returns Section Explanation**\n\nThe `#Returns` section is a part of the Magic Labs embedded wallet documentation for Flutter client-side SDKs. It explains the expected output or result of a specific function or method, in this case, related to updating a user's email.\n\n**Main Purpose**\n\nThe main purpose of this section is to inform developers about the expected response or outcome when calling a particular API function. In this instance, the `#Returns` section specifies that:\n\n* The function returns a `Future` object, which is an asynchronous operation that may take some time to complete.\n* The `Future` resolves with a `true` boolean value if the email update operation is successful.\n* If the request fails, the `Future` rejects with a specific error code, which can be handled and processed by the developer.\n\nThis information allows developers to write code that correctly handles the outcome of the email update operation and provides a better user experience by handling potential errors.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/flutter#chunk-13", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\nimport\n\n'package:magic_sdk/magic_sdk.dart'\n\n;\n\n01\n\nimport\n\n'package:magic_sdk/magic_sdk.dart'\n\n;\n\n02\n\n02\n\n03\n\nMagic\n\n.\n\ninstance\n\n=\n\nMagic\n\n(\n\n\"PUBLISHABLE_API_KEY\"\n\n)\n\n;\n\n03\n\nMagic\n\n.\n\ninstance\n\n=\n\nMagic\n\n(\n\n\"PUBLISHABLE_API_KEY\"\n\n)\n\n;\n\n04\n\n04\n\n05\n\n// Initiates the flow to update a user's current email to a new one.\n\n05\n\n// Initiates the flow to update a user's current email to a new one.\n\n06\n\ntry\n\n{\n\n06\n\ntry\n\n{\n\n07\n\nvar\n\nmagic\n\n=\n\nMagic\n\n.\n\ninstance\n\n;\n\n07\n\nvar\n\nmagic\n\n=\n\nMagic\n\n.\n\ninstance\n\n;\n\n08\n\n08\n\n09\n\n/* Assuming user is logged in */\n\n09\n\n/* Assuming user is logged in */\n\n10\n\nawait\n\nmagic\n\n.\n\nuser\n\n.\n\nupdateEmail\n\n(\n\nemail\n\n:\n\n'new_user_email@example.com'\n\n)\n\n;\n\n10\n\nawait\n\nmagic\n\n.\n\nuser\n\n.\n\nupdateEmail\n\n(\n\nemail\n\n:\n\n'new_user_email@example.com'\n\n)\n\n;\n\n11\n\n}\n\ncatch\n\n{\n\n11\n\n}\n\ncatch\n\n{\n\n12\n\n// Handle errors if required!\n\n12\n\n// Handle errors if required!\n\n13\n\n}\n\n13\n\n}\n\n14\n\n14\n\n15\n\n/**\n\n15\n\n/**\n\n16\n\n* Initiates the flow to update a user's current email to a new one,\n\n16\n\n* Initiates the flow to update a user's current email to a new one,\n\n17\n\n* without showing an out-of-the box UI.\n\n17\n\n* without showing an out-of-the box UI.\n\n18\n\n*/\n\n18\n\n*/\n\n19\n\ntry\n\n{\n\n19\n\ntry\n\n{\n\n20\n\nvar\n\nmagic\n\n=\n\nMagic\n\n.\n\ninstance\n\n;\n\n20\n\nvar\n\nmagic\n\n=\n\nMagic\n\n.\n\ninstance\n\n;\n\n21\n\n21\n\n22\n\n/* Assuming user is logged in */\n\n22\n\n/* Assuming user is logged in */\n\n23\n\nawait\n\nmagic\n\n.\n\nuser\n\n.\n\nupdateEmail\n\n(\n\n{\n\nemail\n\n:\n\n'new_user_email@example.com'\n\n,\n\nshowUI\n\n:\n\nfalse\n\n}\n\n)\n\n;\n\n23\n\nawait\n\nmagic\n\n.\n\nuser\n\n.\n\nupdateEmail\n\n(\n\n{\n\nemail\n\n:\n\n'new_user_email@example.com'\n\n,\n\nshowUI\n\n:\n\nfalse\n\n}\n\n)\n\n;\n\n24\n\n}\n\ncatch\n\n{\n\n24\n\n}\n\ncatch\n\n{\n\n25\n\n// Handle errors if required!\n\n25\n\n// Handle errors if required!\n\n26\n\n}\n\n26\n\n}", "explanation": "This documentation section, titled '#Example', provides a code example demonstrating how to update a user's current email to a new one using the Magic Labs embedded wallet Flutter SDK.\n\n**Main Purpose:**\nThe main purpose of this example is to show how developers can use the `updateEmail` function in the Magic Labs SDK to update a user's email. This function initiates an email update flow, allowing users to change their email addresses.\n\n**Key Points:**\n\n* The example initializes the Magic instance with a publishable API key.\n* It then demonstrates two ways to update a user's email:\n\t1. Using the `updateEmail` function with the new email address as a string.\n\t2. Using the `updateEmail` function with a JSON object containing the new email address and an option to hide the out-of-the-box UI (`showUI: false`).\n* Both examples assume the user is already logged in.\n\nBy following this example, developers can integrate email update functionality into their applications using the Magic Labs embedded wallet Flutter SDK.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/flutter#chunk-14", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\ngetIdToken\n\nGenerates a Decentralized Id Token which acts as a proof of authentication to resource servers.\n\nDecentralized Id Token\n\n#\n\nFuture<String> getIdToken({int lifespan = 900})\n\nFuture<String> getIdToken({int lifespan = 900})\n\nlifespan?", "explanation": "**getIdToken Documentation Explanation**\n\nThe `getIdToken` method, located in the Magic Labs embedded wallet documentation for Flutter, generates a Decentralized Id Token (DID Token). This token serves as proof of authentication to resource servers, allowing users to access protected resources.\n\n**Main Purpose:**\n\nThe primary purpose of `getIdToken` is to provide a secure authentication token that can be used to authenticate users with resource servers. This token is essential for ensuring that users accessing sensitive resources are genuine and authorized.\n\n**Method Signature:**\n\nThe `getIdToken` method returns a `Future<String>` and accepts an optional `lifespan` parameter, which defaults to 900 seconds (15 minutes) if not specified. The `lifespan` parameter determines the validity duration of the generated token.\n\n**In summary**, `getIdToken` is a crucial method for generating authentication tokens in the Magic Labs embedded wallet, allowing users to securely access resource servers.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/flutter#chunk-15", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 Future<string>: Base64-encoded string representation of a JSON tuple representing [proof, claim]\n\nFuture<string>\n\n[proof, claim]", "explanation": "The documentation section titled '#Returns' refers to the expected output of a specific function or method in the Magic Labs embedded wallet Flutter SDK.\n\nIn this case, it indicates that the function will return a Base64-encoded string, which is a JSON tuple containing two values:\n\n1. **proof**: This is likely a cryptographic proof or verification result, used to confirm the authenticity of the user's identity or ownership.\n2. **claim**: This is likely a claim or assertion made by the user, which has been verified or processed by the Magic Labs embedded wallet.\n\nThe main purpose of this section is to inform developers what to expect as output from the function they are using, allowing them to correctly handle and parse the returned data in their application.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/flutter#chunk-16", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\nimport\n\n'package:magic_sdk/magic_sdk.dart'\n\n;\n\n01\n\nimport\n\n'package:magic_sdk/magic_sdk.dart'\n\n;\n\n02\n\n02\n\n03\n\nMagic\n\n.\n\ninstance\n\n=\n\nMagic\n\n(\n\n\"PUBLISHABLE_API_KEY\"\n\n)\n\n;\n\n03\n\nMagic\n\n.\n\ninstance\n\n=\n\nMagic\n\n(\n\n\"PUBLISHABLE_API_KEY\"\n\n)\n\n;\n\n04\n\n04\n\n05\n\n// Assumes a user is already logged in\n\n05\n\n// Assumes a user is already logged in\n\n06\n\ntry\n\n{\n\n06\n\ntry\n\n{\n\n07\n\nvar\n\nm\n\n=\n\nMagic\n\n.\n\ninstance\n\n;\n\n07\n\nvar\n\nm\n\n=\n\nMagic\n\n.\n\ninstance\n\n;\n\n08\n\nconst\n\nidToken\n\n=\n\nawait\n\nm\n\n.\n\nuser\n\n.\n\ngetIdToken\n\n(\n\n)\n\n;\n\n08\n\nconst\n\nidToken\n\n=\n\nawait\n\nm\n\n.\n\nuser\n\n.\n\ngetIdToken\n\n(\n\n)\n\n;\n\n09\n\n}\n\ncatch\n\n{\n\n09\n\n}\n\ncatch\n\n{\n\n10\n\n// Handle errors if required!\n\n10\n\n// Handle errors if required!\n\n11\n\n}\n\n11\n\n}", "explanation": "**Example Documentation Section: Initializing the Magic SDK and Getting a User's ID Token**\n\nThis documentation section provides a code example in Flutter demonstrating how to initialize the Magic SDK with a publishable API key and retrieve a user's ID token.\n\n**Main Purpose:**\n\nThe main purpose of this example is to illustrate the steps required to:\n\n1. Import the Magic SDK library in a Flutter project.\n2. Initialize the Magic SDK instance with a publishable API key.\n3. Retrieve a user's ID token, assuming the user is already logged in.\n\nThis example serves as a guide for developers integrating Magic Labs' embedded wallet into their Flutter applications. It helps them understand how to properly initialize the SDK and access user authentication tokens.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/flutter#chunk-17", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\ngenerateIdToken\n\nGenerates a Decentralized Id Token with optional serialized data.\n\nDecentralized Id Token\n\n#\n\nFuture<String> generateIdToken({int lifespan = 900, String attachment = 'none'})\n\nFuture<String> generateIdToken({int lifespan = 900, String attachment = 'none'})\n\nlifespan?\n\nattachment?\n\n\"none\"", "explanation": "**Explanation of `#generateIdToken`**\n\nThe `#generateIdToken` function is part of the Magic Labs embedded wallet documentation for Flutter client-side SDKs. Its main purpose is to generate a Decentralized Id Token (DID Token) with optional serialized data.\n\n**Breaking down the arguments:**\n\n* `lifespan` (optional, default: 900): This specifies the time in seconds that the DID Token is valid for. You can adjust this value to set a custom expiration time for the token.\n* `attachment` (optional, default: 'none'): This allows you to include additional data with the DID Token. The value is serialized and included in the token.\n\n**What is a Decentralized Id Token (DID Token)?**\n\nA DID Token is a type of authentication token that securely verifies the identity of a user or entity. It's like a digital ID that can be used to authenticate and authorize access to resources.\n\n**In essence, the `#generateIdToken` function helps you create a secure DID Token with customizable expiration and attachment options, making it easier to manage authentication and authorization in your application.**", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/flutter#chunk-18", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 Future<string>: Base64-encoded string representation of a JSON tuple representing [proof, claim]\n\nFuture<string>\n\n[proof, claim]", "explanation": "**Explanation of '#Returns' Section in Magic Labs Embedded Wallet Documentation**\n\nThe '#Returns' section in the Magic Labs embedded wallet documentation specifies the expected output of an API call or function. In this particular case, it describes the return value of a method related to authentication or authorization.\n\n**Main Purpose:**\n\nThe main purpose of this section is to inform developers about the format and content of the data returned by the API call. Specifically, it indicates that the method returns a `Future<string>`, which is a promise to deliver a string value at a later point in time.\n\n**Returned Value:**\n\nThe returned string is a Base64-encoded representation of a JSON tuple containing two elements:\n\n1. `proof`: This likely refers to a proof of authentication or verification, indicating that the user has successfully authenticated or provided the required credentials.\n2. `claim`: This might represent a claim or assertion made by the user, such as their identity, permissions, or access level.\n\nBy understanding the structure and content of the returned data, developers can process and handle the response accordingly in their application, ensuring seamless integration with the Magic Labs embedded wallet.\n\n**Example Response:**\n\nWhen calling the API method, the response might look like a Base64-encoded string, which can be decoded and parsed as a JSON tuple containing the `proof` and `claim` values.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/flutter#chunk-19", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\nimport\n\n'package:magic_sdk/magic_sdk.dart'\n\n;\n\n01\n\nimport\n\n'package:magic_sdk/magic_sdk.dart'\n\n;\n\n02\n\n02\n\n03\n\nMagic\n\n.\n\ninstance\n\n=\n\nMagic\n\n(\n\n\"PUBLISHABLE_API_KEY\"\n\n)\n\n;\n\n03\n\nMagic\n\n.\n\ninstance\n\n=\n\nMagic\n\n(\n\n\"PUBLISHABLE_API_KEY\"\n\n)\n\n;\n\n04\n\n04\n\n05\n\n// Assumes a user is already logged in\n\n05\n\n// Assumes a user is already logged in\n\n06\n\ntry\n\n{\n\n06\n\ntry\n\n{\n\n07\n\nvar\n\nm\n\n=\n\nMagic\n\n.\n\ninstance\n\n;\n\n07\n\nvar\n\nm\n\n=\n\nMagic\n\n.\n\ninstance\n\n;\n\n08\n\n08\n\n09\n\nconst\n\nidToken\n\n=\n\nawait\n\nm\n\n.\n\nuser\n\n.\n\ngenerateIdToken\n\n(\n\n{\n\nattachment\n\n:\n\n'SERVER_SECRET'\n\n}\n\n)\n\n;\n\n09\n\nconst\n\nidToken\n\n=\n\nawait\n\nm\n\n.\n\nuser\n\n.\n\ngenerateIdToken\n\n(\n\n{\n\nattachment\n\n:\n\n'SERVER_SECRET'\n\n}\n\n)\n\n;\n\n10\n\n}\n\ncatch\n\n{\n\n10\n\n}\n\ncatch\n\n{\n\n11\n\n// Handle errors if required!\n\n11\n\n// Handle errors if required!\n\n12\n\n}\n\n12\n\n}", "explanation": "**Example Code for Magic SDK Initialization and ID Token Generation**\n\nThis documentation section provides an example of how to initialize the Magic SDK in a Flutter application and generate an ID token for an authenticated user.\n\n**Main Purpose:**\n\nThe main purpose of this code example is to demonstrate the basic steps required to integrate the Magic SDK into a Flutter app and use it to generate an ID token that can be used to authenticate the user on a server-side application.\n\n**Breakdown:**\n\n1. The code initializes the Magic SDK by creating an instance of the `Magic` class, passing in a publishable API key.\n2. It assumes that a user is already logged in and then uses the `generateIdToken` method to generate an ID token for the user.\n3. The `generateIdToken` method takes an options object with a required `attachment` property, which must be set to a server secret.\n4. The code handles any errors that may occur during the ID token generation process.\n\n**Key Takeaways:**\n\n* Initialize the Magic SDK by creating a `Magic` instance with a publishable API key.\n* Use the `generateIdToken` method to generate an ID token for an authenticated user.\n* Pass a server secret as an attachment to the `generateIdToken` method.\n* Handle any errors that may occur during ID token generation.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/flutter#chunk-20", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\ngetInfo\n\nRetrieves information for the authenticated user.\n\n#\n\n\u2022 None", "explanation": "The `#getInfo` section in the Magic Labs embedded wallet documentation is about a method that retrieves information for the authenticated user. In other words, it's used to fetch data about the currently logged-in user.\n\nThe main purpose of `getInfo` is to provide a way for developers to retrieve user information after a successful authentication, likely to display it in their application or use it for further processing. \n\nGiven that it accepts no arguments (\u2022 None), it suggests that the method relies on the already established authentication context to determine which user's information to return.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/flutter#chunk-21", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 Future<UserInfo>: an object containing the issuer, email and cryptographic public address of the authenticated user\n\nFuture<UserInfo>\n\nissuer\n\nemail\n\npublicAddress\n\nisMfaEnabled\n\nisMfaEnabled\n\nBoolean\n\nA boolean indicating if user has multi-factor authentication enabled.\n\nrecoveryFactors\n\nrecoveryFactors\n\n\u2022 List<RecoveryFactor>valuetype\n\nList<RecoveryFactor>\n\n\u2022 value\n\n\u2022 type\n\nvalue\n\ntype", "explanation": "**Explanation of '#Returns' Section in Magic Labs Embedded Wallet Documentation**\n\nThe '#Returns' section in the Magic Labs embedded wallet documentation for Flutter client-side SDK describes the structure and content of the response returned when a user is successfully authenticated.\n\n**Main Purpose:**\nThe main purpose of this section is to provide details about the data returned in the `UserInfo` object, which contains important information about the authenticated user.\n\n**Key Components:**\nThe returned `UserInfo` object includes the following key components:\n\n1. `issuer`: The issuer of the user's authentication credentials.\n2. `email`: The user's email address.\n3. `publicAddress`: The user's cryptographic public address.\n4. `isMfaEnabled`: A boolean indicating whether the user has multi-factor authentication (MFA) enabled.\n5. `recoveryFactors`: A list of recovery factors, which are used to recover access to the user's account.\n\n**Recovery Factors:**\nEach recovery factor is represented by an object with two properties:\n\n1. `value`: The value of the recovery factor.\n2. `type`: The type of recovery factor.\n\nOverall, the '#Returns' section provides essential information for developers to understand and work with the data returned by the Magic Labs embedded wallet authentication process.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/flutter#chunk-22", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\nimport\n\n'package:magic_sdk/magic_sdk.dart'\n\n;\n\n01\n\nimport\n\n'package:magic_sdk/magic_sdk.dart'\n\n;\n\n02\n\n02\n\n03\n\nMagic\n\n.\n\ninstance\n\n=\n\nMagic\n\n(\n\n\"PUBLISHABLE_API_KEY\"\n\n)\n\n;\n\n03\n\nMagic\n\n.\n\ninstance\n\n=\n\nMagic\n\n(\n\n\"PUBLISHABLE_API_KEY\"\n\n)\n\n;\n\n04\n\n04\n\n05\n\n// Assumes a user is already logged in\n\n05\n\n// Assumes a user is already logged in\n\n06\n\ntry\n\n{\n\n06\n\ntry\n\n{\n\n07\n\nvar\n\nm\n\n=\n\nMagic\n\n.\n\ninstance\n\n07\n\nvar\n\nm\n\n=\n\nMagic\n\n.\n\ninstance\n\n08\n\nawait\n\nm\n\n.\n\nuser\n\n.\n\ngetInfo\n\n(\n\n)\n\n;\n\n08\n\nawait\n\nm\n\n.\n\nuser\n\n.\n\ngetInfo\n\n(\n\n)\n\n;\n\n09\n\n}\n\ncatch\n\n{\n\n09\n\n}\n\ncatch\n\n{\n\n10\n\n// Handle errors if required!\n\n10\n\n// Handle errors if required!\n\n11\n\n}\n\n11\n\n}", "explanation": "**Example Documentation Explanation**\n\nThe provided code snippet is an example from the Magic Labs embedded wallet documentation, specifically for the Flutter client-side SDK. \n\n**Main Purpose:**\n\nThe primary purpose of this example is to demonstrate how to initialize the Magic instance with a publishable API key and retrieve user information using the `getInfo` method.\n\n**Breakdown:**\n\n1. The code starts by importing the `MagicSdk` package and creating a new instance of `Magic` with a publishable API key.\n2. It then assumes that a user is already logged in and attempts to retrieve their information using the `getInfo` method.\n3. The example includes a `try-catch` block to handle any potential errors that may occur during the `getInfo` request.\n4. If an error is encountered, it provides a placeholder for error handling, allowing developers to implement their own error management logic.\n\n**In summary**, this example serves as a basic template for developers to integrate the Magic Labs embedded wallet into their Flutter applications, initialize the Magic instance, and retrieve user information while handling potential errors.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/flutter#chunk-23", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nisLoggedIn\n\nChecks if a user is currently logged in to the Magic SDK.\n\n#\n\n\u2022 None", "explanation": "**Documentation Breakdown: `#isLoggedIn`**\n\nThe `#isLoggedIn` method is part of the Magic Labs embedded wallet documentation, specifically for the Flutter SDK. This method checks if a user is currently authenticated and logged in to the Magic SDK.\n\n**Main Purpose:**\n\nThe primary purpose of `#isLoggedIn` is to determine the user's login status. It returns a boolean value indicating whether a user is currently logged in or not. This method can be used to:\n\n* Verify the user's authentication status before accessing protected resources.\n* Update the app's UI or behavior based on the user's login status.\n* Trigger re-authentication or log out actions when needed.\n\nIn essence, `#isLoggedIn` helps developers manage user sessions and authentication within their Flutter applications, ensuring a seamless and secure user experience.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/flutter#chunk-24", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 Future<Boolean>\n\nFuture<Boolean>", "explanation": "The '#Returns' section is a part of the documentation for the Magic Labs embedded wallet's Flutter client-side SDK. \n\nIn this particular section, it is explaining what the return value or output of a function or method would be. \n\nThe main purpose of this section is to inform developers using the SDK about the expected return type, which is a 'Future' of 'Boolean' (true or false). A 'Future' in programming represents an object that will produce a result at some point in the future, hence the name 'Future'. \n\nIn essence, this section is telling developers that the function they are calling will eventually return a boolean (true or false) result in a asynchronous manner, in other words, it will return a boolean value once the operation is completed.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/flutter#chunk-25", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\nimport\n\n'package:magic_sdk/magic_sdk.dart'\n\n;\n\n01\n\nimport\n\n'package:magic_sdk/magic_sdk.dart'\n\n;\n\n02\n\n02\n\n03\n\nMagic\n\n.\n\ninstance\n\n=\n\nMagic\n\n(\n\n\"PUBLISHABLE_API_KEY\"\n\n)\n\n;\n\n03\n\nMagic\n\n.\n\ninstance\n\n=\n\nMagic\n\n(\n\n\"PUBLISHABLE_API_KEY\"\n\n)\n\n;\n\n04\n\n04\n\n05\n\ntry\n\n{\n\n05\n\ntry\n\n{\n\n06\n\nconst\n\nisLoggedIn\n\n=\n\nawait\n\nm\n\n.\n\nuser\n\n.\n\nisLoggedIn\n\n(\n\n)\n\n;\n\n06\n\nconst\n\nisLoggedIn\n\n=\n\nawait\n\nm\n\n.\n\nuser\n\n.\n\nisLoggedIn\n\n(\n\n)\n\n;\n\n07\n\ndebugPrint\n\n(\n\nisLoggedIn\n\n)\n\n;\n\n// => `true` or `false`\n\n07\n\ndebugPrint\n\n(\n\nisLoggedIn\n\n)\n\n;\n\n// => `true` or `false`\n\n08\n\n}\n\ncatch\n\n{\n\n08\n\n}\n\ncatch\n\n{\n\n09\n\n// Handle errors if required!\n\n09\n\n// Handle errors if required!\n\n10\n\n}\n\n10\n\n}", "explanation": "This documentation section, titled '#Example', is about demonstrating how to use the Magic Labs embedded wallet SDK in a Flutter application. The main purpose of this example is to showcase how to:\n\n1. Import the Magic Labs SDK into a Flutter project.\n2. Initialize the Magic instance with a publishable API key.\n3. Use the `isLoggedIn` method to check if a user is logged in.\n\nIn essence, this example provides a simple and concise code snippet to help developers get started with integrating Magic Labs' embedded wallet functionality into their Flutter applications.\n\nHere's a breakdown of the code:\n\n- Import the Magic SDK\n- Initialize the Magic instance with an API key\n- Use the `isLoggedIn` method to check the user's login status\n- Handle any potential errors that may occur during this process\n\nThe code snippet is designed to be easy to read and understand, making it a useful resource for developers looking to implement Magic Labs' embedded wallet features in their Flutter projects.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/flutter#chunk-26", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nlogout\n\nLogs out the currently authenticated Magic user\n\n#\n\n\u2022 None", "explanation": "The '#logout - #Arguments' section in the Magic Labs embedded wallet documentation explains how to log out a currently authenticated user.\n\n**Main Purpose:** The main purpose of this endpoint is to invalidate the current user session, effectively logging the user out of the Magic wallet.\n\n**Key Information:**\n\n- This endpoint takes no arguments (`\u2022 None`), indicating that no additional parameters are required to initiate the logout process.\n- Once executed, this endpoint will log out the currently authenticated Magic user. \n\nIn summary, this endpoint provides a straightforward way to log out the user from the Magic wallet, typically used when a user wants to end their current session or when implementing a logout feature in an application.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/flutter#chunk-27", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 Future<Boolean>\n\nFuture<Boolean>", "explanation": "This section of the documentation is titled '#Returns' and indicates that a function or method being described in the documentation returns a value of type 'Future<Boolean>'.\n\n\nIn simple terms, the '#Returns' section tells you what kind of data or result you can expect from calling a specific function or method in the Magic Labs embedded wallet Flutter SDK.\n\n\nA 'Future' in Dart (the programming language used for Flutter development) represents a value that will be available at some point in the future. It's a way to handle asynchronous operations.\n\n\nA 'Boolean' is a basic data type that can have one of two values: true or false.\n\n\nSo, in essence, this '#Returns' section is stating that when you call a certain function or method in the Magic Labs embedded wallet Flutter SDK, it will eventually return either 'true' or 'false'.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/flutter#chunk-28", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\n02\n\n03\n\nconst\n\nm\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n03\n\nconst\n\nm\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n04\n\n04\n\n05\n\ntry\n\n{\n\n05\n\ntry\n\n{\n\n06\n\nawait\n\nm\n\n.\n\nuser\n\n.\n\nlogout\n\n(\n\n)\n\n;\n\n06\n\nawait\n\nm\n\n.\n\nuser\n\n.\n\nlogout\n\n(\n\n)\n\n;\n\n07\n\ndebugPrint\n\n(\n\nawait\n\nm\n\n.\n\nuser\n\n.\n\nisLoggedIn\n\n(\n\n)\n\n)\n\n;\n\n// => `false`\n\n07\n\ndebugPrint\n\n(\n\nawait\n\nm\n\n.\n\nuser\n\n.\n\nisLoggedIn\n\n(\n\n)\n\n)\n\n;\n\n// => `false`\n\n08\n\n}\n\ncatch\n\n{\n\n08\n\n}\n\ncatch\n\n{\n\n09\n\n// Handle errors if required!\n\n09\n\n// Handle errors if required!\n\n10\n\n}\n\n10\n\n}", "explanation": "The documentation section titled '#Example' is a code snippet in Dart programming language, used for the Magic Labs embedded wallet in Flutter. \n\nIts main purpose is to demonstrate how to use the Magic Labs SDK to log a user out from the embedded wallet. \n\nThe code creates a new instance of the Magic class with a publishable API key, then calls the logout method on the user object. After logging out, it checks if the user is still logged in using the isLoggedIn method, which is expected to return false after a successful logout.\n\nThe example provides a simple and clear illustration of how to handle user logout in the Magic Labs embedded wallet using the Flutter SDK, allowing developers to integrate this functionality into their applications.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/flutter#chunk-29", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nThe OAuth Module and it's members are accessible on the Magic SDK instance by the oauth property.\n\noauth\n\nCopy\n\n01\n\nimport\n\n'package:magic_sdk/magic_sdk.dart'\n\n;\n\n01\n\nimport\n\n'package:magic_sdk/magic_sdk.dart'\n\n;\n\n02\n\nimport\n\n'package:magic_ext_oauth/magic_ext_oauth.dart'\n\n;\n\n02\n\nimport\n\n'package:magic_ext_oauth/magic_ext_oauth.dart'\n\n;\n\n03\n\n03\n\n04\n\nMagic\n\nmagic\n\n=\n\nMagic\n\n.\n\ninstance\n\n;\n\n04\n\nMagic\n\nmagic\n\n=\n\nMagic\n\n.\n\ninstance\n\n;\n\n05\n\n05\n\n06\n\nmagic\n\n.\n\noauth\n\n;\n\n06\n\nmagic\n\n.\n\noauth\n\n;\n\n07\n\nmagic\n\n.\n\noauth\n\n.\n\nloginWithPopup\n\n;\n\n07\n\nmagic\n\n.\n\noauth\n\n.\n\nloginWithPopup\n\n;\n\n#\n\nloginWithPopup\n\nStarts the OAuth 2.0 login flow.\n\nOnly available with Dedicated Wallet.\n\n#\n\n\u2022 provider (String): The OAuth provider being used for login\n\n\u2022 redirectURI (String): A URL a user is sent to after they successfully log in\n\n\u2022 scope? (Array): Defines the specific permissions an application requests from a user\n\nprovider\n\nredirectURI\n\nscope?", "explanation": "**OAuth Module: loginWithPopup - Understanding the Functionality**\n\nThe `loginWithPopup` function is a part of the OAuth Module in the Magic Labs embedded wallet SDK for Flutter. Its primary purpose is to initiate an OAuth 2.0 login flow, allowing users to authenticate with a specific provider.\n\n**Key Components:**\n\n1. **provider (String)**: Specifies the OAuth provider (e.g., Google, Facebook, GitHub) used for login.\n2. **redirectURI (String)**: The URL to which the user is redirected after a successful login.\n3. **scope? (Array)**: Optional parameter defining the specific permissions an application requests from the user.\n\n**Main Purpose:**\nThe `loginWithPopup` function enables seamless user authentication through popular OAuth providers. By integrating this function into your application, you can provide users with a convenient login experience while maintaining the security and flexibility offered by OAuth 2.0.\n\n**Note:** This function is only available with the Dedicated Wallet feature.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/flutter#chunk-30", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 None", "explanation": "The documentation section titled '#Returns' is about specifying what a function or method returns after it has been executed.\n\nIn this case, the '#Returns' section states that there is \"None\", which means that the function or method being documented does not return any value.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/flutter#chunk-31", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nGoogle\n\n'google'\n\n'google'\n\nFacebook\n\n'facebook'\n\n'facebook'\n\nTwitter\n\n'twitter'\n\n'twitter'\n\nApple\n\n'apple'\n\n'apple'\n\nDiscord\n\n'discord'\n\n'discord'\n\nGitHub\n\n'github'\n\n'github'\n\nLinkedIn\n\n'linkedin'\n\n'linkedin'\n\nBitbucket\n\n'bitbucket'\n\n'bitbucket'\n\nGitLab\n\n'gitlab'\n\n'gitlab'\n\nTwitch\n\n'twitch'\n\n'twitch'\n\nMicrosoft\n\n'microsoft'\n\n'microsoft'", "explanation": "**Valid Providers Section**\n\nThe \"#Valid Providers\" section from the Magic Labs embedded wallet documentation explains the list of supported authentication providers that can be used with the Magic Client-Side SDK for Flutter.\n\n**Main Purpose**\n\nThe main purpose of this section is to provide developers with a list of approved and recognized authentication providers that can be integrated into their applications using Magic's SDK. This list helps developers identify the permitted providers for authenticating users, ensuring that their implementation aligns with the allowed providers.\n\nIn this context, these authentication providers include popular social media platforms and identity services like Google, Facebook, Twitter, Apple, Discord, GitHub, and others. The listed providers are essential for implementing social login functionality, allowing users to log in to an application using their existing credentials from one of these providers.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/flutter#chunk-32", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\nimport\n\n'package:magic_sdk/magic_sdk.dart'\n\n;\n\n01\n\nimport\n\n'package:magic_sdk/magic_sdk.dart'\n\n;\n\n02\n\nimport\n\n'package:magic_ext_oauth/magic_ext_oauth.dart'\n\n;\n\n02\n\nimport\n\n'package:magic_ext_oauth/magic_ext_oauth.dart'\n\n;\n\n03\n\n03\n\n04\n\nMagic\n\n.\n\ninstance\n\n=\n\nMagic\n\n(\n\n\"YOUR_PUBLISHABLE_KEY\"\n\n)\n\n;\n\n04\n\nMagic\n\n.\n\ninstance\n\n=\n\nMagic\n\n(\n\n\"YOUR_PUBLISHABLE_KEY\"\n\n)\n\n;\n\n05\n\nMagic\n\nmagic\n\n=\n\nMagic\n\n.\n\ninstance\n\n;\n\n05\n\nMagic\n\nmagic\n\n=\n\nMagic\n\n.\n\ninstance\n\n;\n\n06\n\n06\n\n07\n\nvar\n\nconfiguration\n\n=\n\nOAuthConfiguration\n\n(\n\nprovider\n\n:\n\nOAuthProvider\n\n.\n\nGITHUB\n\n,\n\nredirectURI\n\n:\n\n'YOUR_APP_SCHEME://'\n\n)\n\n;\n\n07\n\nvar\n\nconfiguration\n\n=\n\nOAuthConfiguration\n\n(\n\nprovider\n\n:\n\nOAuthProvider\n\n.\n\nGITHUB\n\n,\n\nredirectURI\n\n:\n\n'YOUR_APP_SCHEME://'\n\n)\n\n;\n\n08\n\nvar\n\nresult\n\n=\n\nawait\n\nmagic\n\n.\n\noauth\n\n.\n\nloginWithPopup\n\n(\n\nconfiguration\n\n)\n\n;\n\n08\n\nvar\n\nresult\n\n=\n\nawait\n\nmagic\n\n.\n\noauth\n\n.\n\nloginWithPopup\n\n(\n\nconfiguration\n\n)\n\n;", "explanation": "**Example Documentation Explanation**\n\nThe given documentation section titled '#Example' provides a code example for using the Magic Labs SDK in a Flutter application, specifically for authentication with OAuth.\n\n**Main Purpose:**\n\nThe main purpose of this example is to demonstrate how to initialize the Magic Labs SDK, configure OAuth settings, and perform a login with a popup using the GitHub OAuth provider.\n\n**Key Steps:**\n\n1. Importing the necessary packages (`magic_sdk` and `magic_ext_oauth`).\n2. Initializing the Magic instance with a publishable key.\n3. Creating an `OAuthConfiguration` object specifying the OAuth provider (GitHub) and redirect URI.\n4. Using the `loginWithPopup` method to perform a login with the configured provider.\n\n**Prerequisites:**\n\nTo use this example, you need to replace `YOUR_PUBLISHABLE_KEY` and `YOUR_APP_SCHEME` with your actual Magic Labs publishable key and application scheme, respectively.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/flutter#chunk-33", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nThis module requires an enterprise agreement. For more details click here.\n\nclick here\n\nThe OpenID Module and it's members are accessible on the Magic Flutter SDK instance by the openid property.\n\nopenid\n\nTo use the OpenID Module in your application, install magic-ext/oidc along with magic-sdk.\n\nmagic-ext/oidc\n\nmagic-sdk\n\nCopy\n\n01\n\n# pubspec\n\n.\n\nyaml\n\n01\n\n# pubspec\n\n.\n\nyaml\n\n02\n\ndependencies\n\n:\n\n02\n\ndependencies\n\n:\n\n03\n\nflutter\n\n:\n\n03\n\nflutter\n\n:\n\n04\n\nsdk\n\n:\n\nflutter\n\n04\n\nsdk\n\n:\n\nflutter\n\n05\n\nmagic_sdk\n\n:\n\n^\n\n5.0\n\n.1\n\n05\n\nmagic_sdk\n\n:\n\n^\n\n5.0\n\n.1\n\n06\n\nmagic_ext_oidc\n\n:\n\n^\n\n0.0\n\n.1\n\n06\n\nmagic_ext_oidc\n\n:\n\n^\n\n0.0\n\n.1\n\n07\n\n07\n\n08\n\nmagic\n\n.\n\nopenid\n\n;\n\n08\n\nmagic\n\n.\n\nopenid\n\n;\n\n09\n\nmagic\n\n.\n\nopenid\n\n.\n\nloginWithOIDC\n\n;\n\n09\n\nmagic\n\n.\n\nopenid\n\n.\n\nloginWithOIDC\n\n;\n\n#\n\nloginWithOIDC\n\nAuthenticate users via your preferred OIDC client.\n\nOnly available with Dedicated Wallet.\n\n#\n\n\u2022 jwt (String): The OIDC token from your identity provider\n\n\u2022 providerId (String): An alphanumeric ID provided by Magic after successful configuration of your identity provider\n\njwt (String): The OIDC token from your identity provider\n\njwt\n\nproviderId (String): An alphanumeric ID provided by Magic after successful configuration of your identity provider\n\nproviderId", "explanation": "**Overview of the OpenID Module - loginWithOIDC - Arguments**\n\nThe OpenID Module is a feature within the Magic Flutter SDK that allows for authentication using OpenID Connect (OIDC) protocol. This module requires an enterprise agreement and can be accessed by installing the `magic-ext/oidc` package along with `magic-sdk`.\n\n**Purpose of the OpenID Module**\n\nThe primary purpose of the OpenID Module is to authenticate users via OIDC, enabling them to log in to your application using their preferred OIDC client. This module is only available with Dedicated Wallet.\n\n**loginWithOIDC Method**\n\nThe `loginWithOIDC` method is used to authenticate users via OIDC. This method requires two arguments:\n\n1. **jwt (String)**: The OIDC token from your identity provider.\n2. **providerId (String)**: An alphanumeric ID provided by Magic after successful configuration of your identity provider.\n\nBy passing these two arguments to the `loginWithOIDC` method, users can be authenticated using OIDC, allowing for a secure and seamless login experience within your application.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/flutter#chunk-34", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 String: The resolved value is a Decentralized ID token with a default 15-minute lifespan\n\nString: The resolved value is a Decentralized ID token with a default 15-minute lifespan\n\nString", "explanation": "This section of the documentation is titled '#Returns', which indicates that it describes the expected output or result of a particular function or method. \n\nIn this specific case, the '#Returns' section is explaining that the function or method will return a 'String' value. This string value is described as a \"Decentralized ID (DID) token\" that has a default lifespan of 15 minutes. \n\nIn simpler terms, when you call this function or method, it will give you back a token that proves your identity (similar to a temporary login token) and that token will expire after 15 minutes.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/flutter#chunk-35", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\nimport\n\n'package:magic_sdk/magic_sdk.dart'\n\n;\n\n01\n\nimport\n\n'package:magic_sdk/magic_sdk.dart'\n\n;\n\n02\n\nimport\n\n'package:magic_ext_oidc/magic_ext_oidc.dart'\n\n;\n\n02\n\nimport\n\n'package:magic_ext_oidc/magic_ext_oidc.dart'\n\n;\n\n03\n\n03\n\n04\n\nvoid\n\nmain\n\n(\n\n)\n\n{\n\n04\n\nvoid\n\nmain\n\n(\n\n)\n\n{\n\n05\n\nMagic\n\n.\n\ninstance\n\n=\n\nMagic\n\n(\n\n\"PUBLISHABLE_API_KEY\"\n\n)\n\n;\n\n05\n\nMagic\n\n.\n\ninstance\n\n=\n\nMagic\n\n(\n\n\"PUBLISHABLE_API_KEY\"\n\n)\n\n;\n\n06\n\n06\n\n07\n\n// Use the OIDC extension to perform login\n\n07\n\n// Use the OIDC extension to perform login\n\n08\n\nvar\n\nconfiguration\n\n=\n\nOpenIdConfiguration\n\n(\n\n08\n\nvar\n\nconfiguration\n\n=\n\nOpenIdConfiguration\n\n(\n\n09\n\njwt\n\n:\n\n'JWT_FROM_YOUR_OPEN_ID_PROVIDER'\n\n,\n\n09\n\njwt\n\n:\n\n'JWT_FROM_YOUR_OPEN_ID_PROVIDER'\n\n,\n\n10\n\n\u2060       providerId\n\n:\n\n'YOUR_MAGIC_PROVIDER_ID'\n\n)\n\n;\n\n10\n\n\u2060 providerId\n\n:\n\n'YOUR_MAGIC_PROVIDER_ID'\n\n)\n\n;\n\n11\n\n\u2060\n\n11\n\n\u2060\n\n12\n\nvar\n\ndidToken\n\n=\n\nawait\n\nmagic\n\n.\n\nopenid\n\n.\n\nloginWithOIDC\n\n(\n\nconfiguration\n\n)\n\n;\n\n12\n\nvar\n\ndidToken\n\n=\n\nawait\n\nmagic\n\n.\n\nopenid\n\n.\n\nloginWithOIDC\n\n(\n\nconfiguration\n\n)\n\n;\n\n13\n\n13\n\n14\n\n// Use the DID token for further authentication or requests\n\n14\n\n// Use the DID token for further authentication or requests\n\n15\n\nprint\n\n(\n\n'DID Token: $didToken'\n\n)\n\n;\n\n15\n\nprint\n\n(\n\n'DID Token: $didToken'\n\n)\n\n;\n\n16\n\n}\n\n16\n\n}", "explanation": "**Documentation Explanation: Example usage of Magic Labs embedded wallet with OpenID Connect (OIDC)**\n\nThis code snippet is an example of how to integrate the Magic Labs embedded wallet with OpenID Connect (OIDC) using the Magic SDK for Flutter. The main purpose of this example is to demonstrate how to perform a login flow using OIDC and obtain a Decentralized Identifier (DID) token.\n\nHere's a breakdown of the code:\n\n1. The example starts by importing the necessary packages, including the Magic SDK and the Magic OIDC extension.\n2. It then initializes the Magic instance with a publishable API key.\n3. The OIDC extension is used to perform a login flow by creating an `OpenIdConfiguration` object with the required parameters (JWT token and provider ID).\n4. The `loginWithOIDC` method is called with the configuration object to initiate the login flow and obtain a DID token.\n5. The obtained DID token is then printed to the console, demonstrating successful authentication.\n\nThis example serves as a guide for developers to integrate the Magic Labs embedded wallet with OIDC in their Flutter applications. By following this example, developers can implement a seamless login experience for their users.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/flutter#chunk-36", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 GitHub\n\n\u2022 \u2060Demo\n\n\u2022 Goerli Testnet Faucet\n\nGitHub\n\nDemo\n\nGoerli Testnet Faucet", "explanation": "The '#Resources' section is a part of the Magic Labs embedded wallet documentation, specifically the client-side SDK for Flutter. This section provides a list of external links to relevant resources that developers can use to supplement their knowledge and work with the Magic SDK.\n\nThe main purpose of this section is to offer additional support and tools for developers, including:\n\n1. **GitHub**: Access to the Magic SDK's GitHub repository, where developers can review source code, report issues, and contribute to the project.\n2. **Demo**: A live demonstration or example project showcasing the Magic SDK's functionality and use cases.\n3. **Goerli Testnet Faucet**: A testing tool for developers to request testnet Ether, allowing them to test and experiment with the Magic SDK in a controlled environment.\n\nBy providing these resources, the '#Resources' section aims to empower developers with the necessary tools and information to effectively integrate the Magic SDK into their projects.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/flutter#chunk-37", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "How to use Magic with the Celo blockchain", "explanation": "**Summary of Celo Implementation Guide**\n\nThe 'Celo - Celo - Celo implementation guide' is a documentation section that provides instructions on how to integrate the Magic Labs embedded wallet with the Celo blockchain. Celo is an open-source, decentralized, and mobile-first blockchain platform that utilizes a carbon-neutral, proof-of-stake consensus algorithm.\n\n**Main Purpose**\n\nThe main purpose of this guide is to help developers enable users to interact with the Celo blockchain using the Magic Labs embedded wallet. This allows users to access and manage their Celo assets (e.g., cGLD, cUSD) within a Magic-integrated application. The guide likely covers topics such as:\n\n* Setting up a Magic wallet with Celo support\n* Configuring wallet connections to the Celo network\n* Executing transactions and interacting with Celo smart contracts\n* Handling errors and edge cases\n\nBy following this guide, developers can integrate Magic Labs' wallet solution with the Celo blockchain, providing users with a seamless and secure experience when interacting with Celo-based applications.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/evm/celo#chunk-1", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCelo is a Layer 2 solution enhancing Ethereum by providing developers with faster and more cost-efficient transactions. For developers, its seamless compatibility with Ethereum's ecosystem and tools simplifies dApp development. Celo is especially beneficial for those looking to boost performance while maintaining the decentralized principles of Ethereum.\n\nCelo\n\nAs Celo is EVM compatible, you can follow the Ethereum documentation to send your first transaction and utilize all other wallet features.\n\nEthereum", "explanation": "The '#Overview' section from the Magic Labs embedded wallet documentation (https://magic.link/docs/blockchains/other-chains/evm/celo) discusses Celo, a Layer 2 solution that builds upon Ethereum. The main purpose of this section is to introduce Celo as a compatible and efficient alternative to Ethereum, offering faster and more cost-effective transactions while maintaining decentralized principles.\n\nIn essence, this section informs developers that they can leverage Celo's benefits while still utilizing Ethereum's ecosystem and tools, making it an attractive option for dApp development. Additionally, it mentions that since Celo is EVM-compatible, developers can refer to the Ethereum documentation for guidance on using Celo with the Magic Labs embedded wallet.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/evm/celo#chunk-2", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nTo install Magic and Celo, follow the instructions below.\n\nCopy\n\n01\n\nnpm\n\ninstall\n\n--save magic-sdk @celo/contractkit\n\n01\n\nnpm\n\ninstall\n\n--save magic-sdk @celo/contractkit", "explanation": "**Celo Installation Documentation Explanation**\n\nThe documentation section titled '#Installation' provides step-by-step instructions on installing Magic and Celo in a development environment. \n\nThe main purpose of this section is to guide developers in incorporating Magic's embeddable wallet and Celo blockchain functionality into their projects.\n\nIn essence, this section emphasizes running a specific npm (Node Package Manager) command. \n\nThis command installs two critical packages:\n1. `magic-sdk`: The magic link software development kit. It serves as the interface to interact with the Magic Labs embeddable wallet.\n2. `@celo/contractkit`: The Celo contract kit package, a toolset for easy integration with the Celo blockchain network.\n\nDevelopers can easily copy and execute the provided command in their terminal or command prompt to install these essential packages for working with Magic and Celo.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/evm/celo#chunk-3", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n#\n\nBefore you can send transaction on the Celo blockchain, you'll need to acquire some test CELO token (Celo's native cryptocurrency for test network).\n\n\u2022 Go to our Celo Example application\n\n\u2022 Login with your email address\n\n\u2022 Copy your Celo public address\n\n\u2022 Go to the Celo Faucet\n\n\u2022 Paste your copied Celo public address in the text input\n\n\u2022 Now you can use your test CELO token in our Celo Example\n\nCelo Example\n\nCelo Faucet\n\nCelo Example", "explanation": "This documentation section is titled '#Send Transaction - #Getting Test CELO token'. It explains the steps to obtain test CELO tokens, which is the native cryptocurrency of the Celo blockchain, for testing and development purposes.\n\nThe main purpose of this section is to guide users in acquiring the necessary tokens to send transactions on the Celo test network. This is a necessary step before users can experiment with sending transactions on the Celo blockchain, allowing them to test their applications without incurring the costs and risks associated with using real tokens on the mainnet.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/evm/celo#chunk-4", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\nimport\n\n{\n\nnewKitFromWeb3\n\n}\n\nfrom\n\n'@celo/contractkit'\n\n;\n\n02\n\nimport\n\n{\n\nnewKitFromWeb3\n\n}\n\nfrom\n\n'@celo/contractkit'\n\n;\n\n03\n\nimport\n\nWeb3\n\nfrom\n\n'web3'\n\n;\n\n03\n\nimport\n\nWeb3\n\nfrom\n\n'web3'\n\n;\n\n04\n\n04\n\n05\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_API_KEY'\n\n,\n\n{\n\n05\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_API_KEY'\n\n,\n\n{\n\n06\n\nnetwork\n\n:\n\n{\n\n06\n\nnetwork\n\n:\n\n{\n\n07\n\nrpcUrl\n\n:\n\n'https://alfajores-forno.celo-testnet.org'\n\n,\n\n07\n\nrpcUrl\n\n:\n\n'https://alfajores-forno.celo-testnet.org'\n\n,\n\n08\n\n}\n\n,\n\n08\n\n}\n\n,\n\n09\n\n}\n\n)\n\n;\n\n09\n\n}\n\n)\n\n;\n\n10\n\n10\n\n11\n\nconst\n\nweb3\n\n=\n\nnew\n\nWeb3\n\n(\n\nmagic\n\n.\n\nrpcProvider\n\n)\n\n;\n\n11\n\nconst\n\nweb3\n\n=\n\nnew\n\nWeb3\n\n(\n\nmagic\n\n.\n\nrpcProvider\n\n)\n\n;\n\n12\n\nconst\n\nkit\n\n=\n\nnewKitFromWeb3\n\n(\n\nweb3\n\n)\n\n;\n\n12\n\nconst\n\nkit\n\n=\n\nnewKitFromWeb3\n\n(\n\nweb3\n\n)\n\n;\n\n13\n\n13\n\n14\n\nconst\n\n{\n\npublicAddress\n\n}\n\n=\n\nawait\n\nmagic\n\n.\n\nuser\n\n.\n\ngetMetadata\n\n(\n\n)\n\n;\n\n14\n\nconst\n\n{\n\npublicAddress\n\n}\n\n=\n\nawait\n\nmagic\n\n.\n\nuser\n\n.\n\ngetMetadata\n\n(\n\n)\n\n;\n\n15\n\n15\n\n16\n\nkit\n\n.\n\ndefaultAccount\n\n=\n\npublicAddress\n\n;\n\n16\n\nkit\n\n.\n\ndefaultAccount\n\n=\n\npublicAddress\n\n;\n\n17\n\n17\n\n18\n\nconst\n\noneGold\n\n=\n\nkit\n\n.\n\nweb3\n\n.\n\nutils\n\n.\n\ntoWei\n\n(\n\n'1'\n\n,\n\n'ether'\n\n)\n\n;\n\n18\n\nconst\n\noneGold\n\n=\n\nkit\n\n.\n\nweb3\n\n.\n\nutils\n\n.\n\ntoWei\n\n(\n\n'1'\n\n,\n\n'ether'\n\n)\n\n;\n\n19\n\n19\n\n20\n\nconst\n\ntx\n\n=\n\nawait\n\nkit\n\n.\n\nsendTransaction\n\n(\n\n{\n\n20\n\nconst\n\ntx\n\n=\n\nawait\n\nkit\n\n.\n\nsendTransaction\n\n(\n\n{\n\n21\n\nfrom\n\n:\n\npublicAddress\n\n,\n\n21\n\nfrom\n\n:\n\npublicAddress\n\n,\n\n22\n\nto\n\n:\n\n'Destination Address'\n\n,\n\n22\n\nto\n\n:\n\n'Destination Address'\n\n,\n\n23\n\nvalue\n\n:\n\noneGold\n\n,\n\n23\n\nvalue\n\n:\n\noneGold\n\n,\n\n24\n\ngasPrice\n\n:\n\n1000000000\n\n,\n\n24\n\ngasPrice\n\n:\n\n1000000000\n\n,\n\n25\n\n}\n\n)\n\n;\n\n25\n\n}\n\n)\n\n;\n\n26\n\n26\n\n27\n\nconst\n\nhash\n\n=\n\nawait\n\ntx\n\n.\n\ngetHash\n\n(\n\n)\n\n;\n\n27\n\nconst\n\nhash\n\n=\n\nawait\n\ntx\n\n.\n\ngetHash\n\n(\n\n)\n\n;\n\n28\n\nconst\n\nreceipt\n\n=\n\nawait\n\ntx\n\n.\n\nwaitReceipt\n\n(\n\n)\n\n;\n\n28\n\nconst\n\nreceipt\n\n=\n\nawait\n\ntx\n\n.\n\nwaitReceipt\n\n(\n\n)\n\n;\n\n29\n\n29\n\n30\n\nconsole\n\n.\n\nlog\n\n(\n\n'transaction result: '\n\n,\n\nhash\n\n,\n\nreceipt\n\n)\n\n;\n\n30\n\nconsole\n\n.\n\nlog\n\n(\n\n'transaction result: '\n\n,\n\nhash\n\n,\n\nreceipt\n\n)\n\n;", "explanation": "**Overview of the Documentation Section**\n\nThis documentation section, titled '#Use Magic Rpc Provider - ES Modules/TypeScript', is part of the Magic Labs embedded wallet documentation for Celo, a blockchain platform. The main purpose of this section is to guide developers on how to use Magic's RPC (Remote Procedure Call) provider to interact with the Celo blockchain using TypeScript or ES Modules.\n\n**Key Steps and Concepts**\n\nThe documentation provides a step-by-step guide on how to:\n\n1. Import necessary dependencies, including Magic SDK, ContractKit, and Web3.\n2. Initialize a Magic instance with an API key and configure the network settings for Celo's Alfajores testnet.\n3. Create a new Web3 instance using Magic's RPC provider.\n4. Create a ContractKit instance using the Web3 instance.\n5. Get the user's public address using Magic's `user.getMetadata` method.\n6. Set the default account for the ContractKit instance.\n7. Send a transaction using the ContractKit instance.\n8. Get the transaction hash and receipt.\n\n**Main Purpose**\n\nThe main purpose of this documentation section is to demonstrate how to use Magic's RPC provider to interact with the Celo blockchain in a TypeScript or ES Modules environment. By following these steps, developers can integrate Magic's embedded wallet with their Celo-based applications, enabling users to manage their digital assets securely and seamlessly.\n\n**Prerequisites and Target Audience**\n\nTo use this documentation section, developers should have basic knowledge of:\n\n* TypeScript or ES Modules\n* Celo blockchain and its testnets\n* Web3 and ContractKit libraries\n* Magic SDK and its RPC provider\n\nThis documentation section is targeted towards developers who want to integrate Magic's embedded wallet with their Celo-based applications using TypeScript or ES Modules.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/evm/celo#chunk-5", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n#\n\nBefore you can send transaction on the Celo blockchain, you'll need to acquire some test CELO token (Celo's native cryptocurrency for test network).\n\n\u2022 Go to our Celo Example application\n\n\u2022 Login with your email address\n\n\u2022 Copy your Celo public address\n\n\u2022 Go to the Celo Faucet\n\n\u2022 Paste your copied Celo public address in the text input\n\n\u2022 Now you can use your test CELO token in our Celo Example\n\nCelo Example\n\nCelo Faucet\n\nCelo Example", "explanation": "The documentation section titled '#Smart Contract - #Getting Test CELO token' explains how to obtain test CELO tokens, which are required to send transactions on the Celo blockchain's test network. \n\nIn simple terms, to interact with the Celo blockchain (a test environment in this case), you need \"token\" (cryptocurrency) but this section is about how to get free test token which cannot be used to buy real goods but used rather to try out functionality of an application written for the blockchain. \n\nThe main purpose is to guide users to acquire these test tokens by following a step-by-step process:\n\n- Going to the Celo Example application\n- Signing in with your email\n- Retrieving your public address\n- Using the Celo Faucet to receive test tokens\n- Pasting the public address to get the test tokens\n\nAfter completing these steps, users can use the test tokens to interact with the Celo blockchain test environment.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/evm/celo#chunk-6", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\nimport\n\n{\n\nnewKitFromWeb3\n\n}\n\nfrom\n\n'@celo/contractkit'\n\n;\n\n02\n\nimport\n\n{\n\nnewKitFromWeb3\n\n}\n\nfrom\n\n'@celo/contractkit'\n\n;\n\n03\n\nimport\n\nWeb3\n\nfrom\n\n'web3'\n\n;\n\n03\n\nimport\n\nWeb3\n\nfrom\n\n'web3'\n\n;\n\n04\n\n04\n\n05\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_API_KEY'\n\n,\n\n{\n\n05\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_API_KEY'\n\n,\n\n{\n\n06\n\nnetwork\n\n:\n\n{\n\n06\n\nnetwork\n\n:\n\n{\n\n07\n\nrpcUrl\n\n:\n\n'https://alfajores-forno.celo-testnet.org'\n\n,\n\n07\n\nrpcUrl\n\n:\n\n'https://alfajores-forno.celo-testnet.org'\n\n,\n\n08\n\n}\n\n,\n\n08\n\n}\n\n,\n\n09\n\n}\n\n)\n\n;\n\n09\n\n}\n\n)\n\n;\n\n10\n\n10\n\n11\n\nconst\n\ncontractAddress\n\n=\n\n'0xcf71aB733148F70647129F3006E92439d11946A9'\n\n;\n\n11\n\nconst\n\ncontractAddress\n\n=\n\n'0xcf71aB733148F70647129F3006E92439d11946A9'\n\n;\n\n12\n\n12\n\n13\n\nconst\n\nabi\n\n=\n\n[\n\n13\n\nconst\n\nabi\n\n=\n\n[\n\n14\n\n{\n\n14\n\n{\n\n15\n\nconstant\n\n:\n\ntrue\n\n,\n\n15\n\nconstant\n\n:\n\ntrue\n\n,\n\n16\n\ninputs\n\n:\n\n[\n\n]\n\n,\n\n16\n\ninputs\n\n:\n\n[\n\n]\n\n,\n\n17\n\nname\n\n:\n\n'getName'\n\n,\n\n17\n\nname\n\n:\n\n'getName'\n\n,\n\n18\n\noutputs\n\n:\n\n[\n\n18\n\noutputs\n\n:\n\n[\n\n19\n\n{\n\n19\n\n{\n\n20\n\ninternalType\n\n:\n\n'string'\n\n,\n\n20\n\ninternalType\n\n:\n\n'string'\n\n,\n\n21\n\nname\n\n:\n\n''\n\n,\n\n21\n\nname\n\n:\n\n''\n\n,\n\n22\n\ntype\n\n:\n\n'string'\n\n,\n\n22\n\ntype\n\n:\n\n'string'\n\n,\n\n23\n\n}\n\n,\n\n23\n\n}\n\n,\n\n24\n\n]\n\n,\n\n24\n\n]\n\n,\n\n25\n\npayable\n\n:\n\nfalse\n\n,\n\n25\n\npayable\n\n:\n\nfalse\n\n,\n\n26\n\nstateMutability\n\n:\n\n'view'\n\n,\n\n26\n\nstateMutability\n\n:\n\n'view'\n\n,\n\n27\n\ntype\n\n:\n\n'function'\n\n,\n\n27\n\ntype\n\n:\n\n'function'\n\n,\n\n28\n\n}\n\n,\n\n28\n\n}\n\n,\n\n29\n\n{\n\n29\n\n{\n\n30\n\nconstant\n\n:\n\nfalse\n\n,\n\n30\n\nconstant\n\n:\n\nfalse\n\n,\n\n31\n\ninputs\n\n:\n\n[\n\n31\n\ninputs\n\n:\n\n[\n\n32\n\n{\n\n32\n\n{\n\n33\n\ninternalType\n\n:\n\n'string'\n\n,\n\n33\n\ninternalType\n\n:\n\n'string'\n\n,\n\n34\n\nname\n\n:\n\n'newName'\n\n,\n\n34\n\nname\n\n:\n\n'newName'\n\n,\n\n35\n\ntype\n\n:\n\n'string'\n\n,\n\n35\n\ntype\n\n:\n\n'string'\n\n,\n\n36\n\n}\n\n,\n\n36\n\n}\n\n,\n\n37\n\n]\n\n,\n\n37\n\n]\n\n,\n\n38\n\nname\n\n:\n\n'setName'\n\n,\n\n38\n\nname\n\n:\n\n'setName'\n\n,\n\n39\n\noutputs\n\n:\n\n[\n\n]\n\n,\n\n39\n\noutputs\n\n:\n\n[\n\n]\n\n,\n\n40\n\npayable\n\n:\n\nfalse\n\n,\n\n40\n\npayable\n\n:\n\nfalse\n\n,\n\n41\n\nstateMutability\n\n:\n\n'nonpayable'\n\n,\n\n41\n\nstateMutability\n\n:\n\n'nonpayable'\n\n,\n\n42\n\ntype\n\n:\n\n'function'\n\n,\n\n42\n\ntype\n\n:\n\n'function'\n\n,\n\n43\n\n}\n\n,\n\n43\n\n}\n\n,\n\n44\n\n]\n\n;\n\n44\n\n]\n\n;\n\n45\n\nconst\n\n{\n\npublicAddress\n\n}\n\n=\n\nawait\n\nmagic\n\n.\n\nuser\n\n.\n\ngetMetadata\n\n(\n\n)\n\n;\n\n45\n\nconst\n\n{\n\npublicAddress\n\n}\n\n=\n\nawait\n\nmagic\n\n.\n\nuser\n\n.\n\ngetMetadata\n\n(\n\n)\n\n;\n\n46\n\n46\n\n47\n\nconst\n\nweb3\n\n=\n\nnew\n\nWeb3\n\n(\n\nmagic\n\n.\n\nrpcProvider\n\n)\n\n;\n\n47\n\nconst\n\nweb3\n\n=\n\nnew\n\nWeb3\n\n(\n\nmagic\n\n.\n\nrpcProvider\n\n)\n\n;\n\n48\n\nconst\n\nkit\n\n=\n\nnewKitFromWeb3\n\n(\n\nweb3\n\n)\n\n;\n\n48\n\nconst\n\nkit\n\n=\n\nnewKitFromWeb3\n\n(\n\nweb3\n\n)\n\n;\n\n49\n\n49\n\n50\n\nlet\n\ninstance\n\n=\n\nnew\n\nweb3\n\n.\n\neth\n\n.\n\nContract\n\n(\n\nabi\n\n,\n\ncontractAddress\n\n)\n\n;\n\n50\n\nlet\n\ninstance\n\n=\n\nnew\n\nweb3\n\n.\n\neth\n\n.\n\nContract\n\n(\n\nabi\n\n,\n\ncontractAddress\n\n)\n\n;\n\n51\n\n51\n\n52\n\nconst\n\ntxObject\n\n=\n\nawait\n\ninstance\n\n.\n\nmethods\n\n.\n\nsetName\n\n(\n\n'new name'\n\n)\n\n;\n\n52\n\nconst\n\ntxObject\n\n=\n\nawait\n\ninstance\n\n.\n\nmethods\n\n.\n\nsetName\n\n(\n\n'new name'\n\n)\n\n;\n\n53\n\n53\n\n54\n\nlet\n\ntx\n\n=\n\nawait\n\nkit\n\n.\n\nsendTransactionObject\n\n(\n\ntxObject\n\n,\n\n{\n\nfrom\n\n:\n\npublicAddress\n\n,\n\ngasPrice\n\n:\n\n1000000000\n\n}\n\n)\n\n;\n\n54\n\nlet\n\ntx\n\n=\n\nawait\n\nkit\n\n.\n\nsendTransactionObject\n\n(\n\ntxObject\n\n,\n\n{\n\nfrom\n\n:\n\npublicAddress\n\n,\n\ngasPrice\n\n:\n\n1000000000\n\n}\n\n)\n\n;\n\n55\n\n55\n\n56\n\nconst\n\nhash\n\n=\n\nawait\n\ntx\n\n.\n\ngetHash\n\n(\n\n)\n\n;\n\n56\n\nconst\n\nhash\n\n=\n\nawait\n\ntx\n\n.\n\ngetHash\n\n(\n\n)\n\n;\n\n57\n\n57\n\n58\n\nlet\n\nreceipt\n\n=\n\nawait\n\ntx\n\n.\n\nwaitReceipt\n\n(\n\n)\n\n;\n\n58\n\nlet\n\nreceipt\n\n=\n\nawait\n\ntx\n\n.\n\nwaitReceipt\n\n(\n\n)\n\n;\n\n59\n\n59\n\n60\n\nconsole\n\n.\n\nlog\n\n(\n\n'contract send result: '\n\n,\n\nhash\n\n,\n\nreceipt\n\n)\n\n;\n\n60\n\nconsole\n\n.\n\nlog\n\n(\n\n'contract send result: '\n\n,\n\nhash\n\n,\n\nreceipt\n\n)\n\n;", "explanation": "This section of the documentation, titled '#Contract Send - ES Modules/TypeScript', explains how to send a transaction to a smart contract on the Celo blockchain using Magic SDK and Web3.js in an ES Modules/TypeScript environment.\n\n**Main Purpose:**\nThe primary goal of this code example is to demonstrate how to interact with a smart contract deployed on the Celo blockchain, specifically by sending a transaction to the `setName` function of the contract.\n\n**Step-by-Step Overview:**\n\n1. Import necessary dependencies, including Magic SDK, Web3.js, and Celo Contract Kit.\n2. Initialize the Magic SDK instance with an API key and define the network (in this case, the Celo Alfajores testnet).\n3. Define the contract address and ABI (Application Binary Interface).\n4. Use the Magic SDK to retrieve the user's public address.\n5. Create a Web3 instance using the Magic SDK's RPC provider.\n6. Create a Celo Contract Kit instance from the Web3 instance.\n7. Create a contract instance using the contract address and ABI.\n8. Define a transaction object to call the `setName` function on the contract.\n9. Send the transaction using the Celo Contract Kit and the user's public address.\n10. Retrieve the transaction hash and wait for the receipt.\n11. Log the transaction result, including the hash and receipt.\n\n**Key Takeaways:**\nThis example demonstrates how to send a transaction to a smart contract on the Celo blockchain using Magic SDK and Web3.js. It covers the essential steps, from initializing the SDK and defining the contract to sending the transaction and retrieving the result.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/evm/celo#chunk-7", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 All Auth, User and most Wallet module methods* for Dedicated Wallets\n\n\u2022 All EVM Provider functionality to respond to supported RPC methods\n\nAuth\n\nUser\n\nWallet\n\nDedicated Wallets\n\nRPC methods\n\n*Some features are not yet compatible such as NFT Viewer and Fiat On-ramps.\n\nNeed a feature or see a problem? File an issue on our github repo.\n\ngithub repo", "explanation": "The '#Compatibility' section is about describing the compatibility of Magic Labs' embedded wallet with the Celo blockchain. The main purpose of this section is to inform developers about which features and functions of the wallet are currently supported on the Celo blockchain.\n\nIn summary, the section states that the following are compatible:\n\n- Most Auth, User, and Wallet module methods for Dedicated Wallets\n- All EVM (Ethereum Virtual Machine) provider functionality, allowing the wallet to respond to supported RPC (Remote Procedure Call) methods\n\nHowever, it also notes that some features, such as NFT (Non-Fungible Token) Viewer and Fiat On-ramps, are not yet supported.\n\nThis section helps developers understand what they can and cannot use when integrating the Magic Labs wallet with the Celo blockchain.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/evm/celo#chunk-8", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 Documentation: https://docs.celo.org/\n\n\u2022 Block Explorer:https://explorer.celo.org/mainnet/ (Mainnet)\n\n\u2022 Faucet: https://faucet.quicknode.com/celo\n\nhttps://docs.celo.org/\n\n\u2022 https://explorer.celo.org/mainnet/ (Mainnet)\n\nhttps://explorer.celo.org/mainnet/\n\nhttps://faucet.quicknode.com/celo\n\n\u2022 Demo\n\n\u2022 Example\n\nDemo\n\nExample", "explanation": "The section '#Resources & Tools' from the Magic Labs documentation provides a list of helpful links and tools for working with the Celo blockchain. \n\nThe main purpose of this section is to offer quick access to additional information and resources for developers integrating Magic's embedded wallet with the Celo blockchain. This includes: \n\n- Official Celo documentation for in-depth explanations of the blockchain and its functionality.\n- The Celo block explorer for tracking and viewing transaction data on the Mainnet.\n- A faucet for testing purposes, allowing developers to receive free test tokens.\n- Demo and example resources, which can be used as reference points or starting points for projects.\n\nIn summary, the '#Resources & Tools' section is a collection of valuable links and resources to help developers navigate and work with the Celo blockchain more efficiently.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/evm/celo#chunk-9", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nThe Magic SDK for Android is your entry-point to secure, passwordless authentication for your mobile app. This guide will cover some important topics for getting started with Android APIs and to make the most of Magic's features.\n\nMagic can support either server-based or serverless web applications. It is up to the developers to implement the Admin SDK to validate the DID Token.", "explanation": "**Overview of Magic SDK for Android API Reference**\n\nThis documentation section provides an introduction to the Magic SDK for Android, which is a toolkit for integrating secure, passwordless authentication into mobile apps. The main purpose of this API reference is to serve as a guide for developers to get started with Magic's Android APIs and make the most of its features.\n\nIn essence, the Magic SDK allows developers to implement passwordless authentication in their mobile apps, supporting both server-based and serverless web applications. The key takeaway is that developers are responsible for implementing the Admin SDK to validate the DID Token, which is a crucial step in the authentication process.\n\nBy following this guide, developers can effectively utilize the Magic SDK for Android to enhance the security and user experience of their mobile apps.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/android#chunk-1", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nThe Magic class is the entry-point to the Magic SDK. It must be instantiated with a Magic publishable key. The minimum Android version supported by the Android Magic SDK is version 24.\n\nMagic\n\n#\n\nMagic SDK is available in mavenCentral. Simply add the following to your build.gradle and settings.gradle, respectively.\n\nmavenCentral\n\nbuild.gradle\n\nsettings.gradle\n\nCopy\n\n01\n\n// build.gradle file\n\n01\n\n// build.gradle file\n\n02\n\n02\n\n03\n\ndependencies {\n\n03\n\ndependencies {\n\n04\n\nimplementation 'link.magic:magic-android:9.1.0'\n\n04\n\nimplementation 'link.magic:magic-android:9.1.0'\n\n05\n\nimplementation 'org.web3j:core:4.8.8-android'\n\n05\n\nimplementation 'org.web3j:core:4.8.8-android'\n\n06\n\n}\n\n06\n\n}\n\nCopy\n\n01\n\n// settings.gradle file\n\n01\n\n// settings.gradle file\n\n02\n\n02\n\n03\n\nrepositories {\n\n03\n\nrepositories {\n\n04\n\nmavenCentral()\n\n04\n\nmavenCentral()\n\n05\n\n}\n\n05\n\n}\n\nSync the project with new dependencies settings.", "explanation": "**Getting Started: Installation of Magic SDK for Android**\n\nThis documentation section explains how to integrate the Magic SDK into an Android project. The main purpose is to provide step-by-step instructions on setting up the Magic SDK, which is required to use the Magic class and access its features.\n\n**Key Points:**\n\n1. **Prerequisites**: The Android project must have a minimum version of 24.\n2. **SDK Source**: The Magic SDK is available in `mavenCentral`.\n3. **Implementation**:\n\t* Add `mavenCentral` to the `repositories` section in the `settings.gradle` file.\n\t* Add the Magic SDK dependency (`link.magic:magic-android:9.1.0`) and Web3j core dependency (`org.web3j:core:4.8.8-android`) to the `dependencies` section in the `build.gradle` file.\n4. **Sync the Project**: After updating the `build.gradle` and `settings.gradle` files, sync the project with the new dependencies settings.\n\nBy following these steps, developers can successfully install the Magic SDK and start using its features in their Android project.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/android#chunk-2", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n#\n\nMagic()\n\nParameter\n\nType\n\nDefinition\n\ncontext\n\ncontext\n\nContext\n\nContext\n\nAndroid Context object\n\nContext\n\napiKey\n\napiKey\n\nString\n\nYour publishable API Key retrieved from the Magic Dashboard.\n\nethNetwork?\n\nethNetwork?\n\nEthNetwork\n\nEthNetwork\n\nAn enum with values Mainnet and Goerli. Use customNodeConfiguration for other network options.\n\nMainnet\n\nGoerli\n\ncustomNodeConfiguration\n\nDefaults to Ethereum Mainnet.\n\ncustomNodeConfiguration?\n\ncustomNodeConfiguration?\n\nCustomNodeConfiguration\n\nCustomNodeConfiguration\n\nA custom node configuration with the following shape: \u2060 \u2060\n\nrpcUrl (String): A URL pointing to your custom Ethereum Node. \u2060 \u2060\n\nrpcUrl\n\nchainId? (Number): Some Node infrastructures require you to pass an explicit chain ID. If you are aware that your Node requires this configuration, pass it here as an integer. \u2060\n\nchainId?\n\nlocale?\n\nlocale?\n\nString\n\nCustomize the language of Magic's modal, email and confirmation screen. See Localization for more.\n\nLocalization", "explanation": "**Constructor Magic() Documentation Explanation**\n\nThe `Magic()` constructor is a part of the Magic Labs embedded wallet documentation for Android. It is used to initialize the Magic client-side SDK, which provides an interface to interact with the Magic platform.\n\n**Main Purpose:**\n\nThe main purpose of the `Magic()` constructor is to set up a Magic instance with the required configuration settings, such as the Android context object, publishable API key, and Ethereum network options.\n\n**Key Parameters:**\n\n1. `context`: An Android Context object, which provides access to the application environment.\n2. `apiKey`: A publishable API key retrieved from the Magic Dashboard, used for authentication.\n3. `ethNetwork`: An optional parameter that specifies the Ethereum network to use (Mainnet or Goerli). Custom node configurations can be provided using `customNodeConfiguration`.\n4. `customNodeConfiguration`: An optional parameter that allows for custom node configurations, including RPC URL and chain ID.\n5. `locale`: An optional parameter that customizes the language of Magic's modal, email, and confirmation screen.\n\n**In Summary:**\n\nThe `Magic()` constructor is the entry point for initializing the Magic client-side SDK for Android. It takes in essential configuration parameters to set up the Magic instance, enabling interactions with the Magic platform.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/android#chunk-3", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\nclass\n\nMagicDemoApp\n\n:\n\nApplication\n\n(\n\n)\n\n{\n\n01\n\nclass\n\nMagicDemoApp\n\n:\n\nApplication\n\n(\n\n)\n\n{\n\n02\n\n02\n\n03\n\nlateinit\n\nvar\n\nmagic\n\n:\n\nMagic\n\n03\n\nlateinit\n\nvar\n\nmagic\n\n:\n\nMagic\n\n04\n\n04\n\n05\n\noverride\n\nfun\n\nonCreate\n\n(\n\n)\n\n{\n\n05\n\noverride\n\nfun\n\nonCreate\n\n(\n\n)\n\n{\n\n06\n\nmagic\n\n=\n\nMagic\n\n(\n\nthis\n\n,\n\n\"PUBLISHABLE_API_KEY\"\n\n)\n\n06\n\nmagic\n\n=\n\nMagic\n\n(\n\nthis\n\n,\n\n\"PUBLISHABLE_API_KEY\"\n\n)\n\n07\n\nsuper\n\n.\n\nonCreate\n\n(\n\n)\n\n07\n\nsuper\n\n.\n\nonCreate\n\n(\n\n)\n\n08\n\n}\n\n08\n\n}\n\n09\n\n}\n\n09\n\n}", "explanation": "**Initialization of Magic SDK in Android App**\n\nThe provided code snippet is from the Magic Labs documentation, specifically the Android SDK section. It explains how to initialize the Magic SDK in an Android application.\n\n**Main Purpose:**\n\nThe primary goal of this code is to set up the Magic SDK in an Android app by creating an instance of the `Magic` class. This instance, `magic`, is initialized with the current application context (`this`) and a publishable API key.\n\n**Initialization Steps:**\n\n1. Create a class that extends the `Application` class (e.g., `MagicDemoApp`).\n2. Declare a variable `magic` of type `Magic` and mark it as `lateinit`, indicating that it will be initialized later.\n3. In the `onCreate` method, which is called when the application is created, initialize the `magic` variable by passing the current application context (`this`) and your publishable API key (`\"PUBLISHABLE_API_KEY\"`).\n4. Call the superclass's `onCreate` method (`super.onCreate()`) to perform any necessary initializations.\n\n**Why is this important?**\n\nProper initialization of the Magic SDK is crucial for accessing its features and functionality within your Android app. By following these steps, you can ensure that your app is set up to interact with the Magic SDK, enabling features such as embedded wallets, authentication, and more.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/android#chunk-4", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nThe Auth Module and its members are accessible on the Magic SDK instance by the auth property.\n\nauth\n\nCopy\n\n01\n\nimport\n\nlink\n\n.\n\nmagic\n\n.\n\nandroid\n\n.\n\nMagic\n\n01\n\nimport\n\nlink\n\n.\n\nmagic\n\n.\n\nandroid\n\n.\n\nMagic\n\n02\n\n02\n\n03\n\nvar\n\nmagic\n\n:\n\nMagic\n\n03\n\nvar\n\nmagic\n\n:\n\nMagic\n\n04\n\n04\n\n05\n\nmagic\n\n.\n\nauth\n\n;\n\n05\n\nmagic\n\n.\n\nauth\n\n;\n\n06\n\nmagic\n\n.\n\nauth\n\n.\n\nloginWithSMS\n\n;\n\n06\n\nmagic\n\n.\n\nauth\n\n.\n\nloginWithSMS\n\n;\n\n07\n\nmagic\n\n.\n\nauth\n\n.\n\nloginWithEmailOTP\n\n;\n\n07\n\nmagic\n\n.\n\nauth\n\n.\n\nloginWithEmailOTP\n\n;\n\n#\n\nOnly available with Dedicated Wallet\n\nAuthenticate a user passwordlessly using a one-time code sent to the specified phone number.\n\nList of Currently Blocked Country Codes\n\nList of Currently Blocked Country Codes\n\n#\n\n\u2022 context (Context): Global information about application environment\n\n\u2022 configuration (LoginWithSMSConfiguration):phoneNumber (str): The user phone number to log in with\n\ncontext\n\nconfiguration\n\n\u2022 phoneNumber (str): The user phone number to log in with\n\nphoneNumber", "explanation": "**Auth Module - loginWithSMS - Arguments**\n\nThe `loginWithSMS` method is a part of the Magic SDK's Auth Module, which allows users to authenticate passwordlessly using a one-time code sent to their phone number. This feature is only available with a Dedicated Wallet setup.\n\n**Main Purpose:**\nThe main purpose of the `loginWithSMS` method is to authenticate a user without requiring a password. Instead, a one-time code is sent to the user's phone number, which they can use to log in to their account.\n\n**Arguments:**\nTo use the `loginWithSMS` method, you need to provide two main arguments:\n\n1. `context`: Global information about the application environment.\n2. `configuration` ( LoginWithSMSConfiguration ): This contains a single property:\n\t* `phoneNumber`: The user's phone number to log in with.\n\nBy providing these arguments, the `loginWithSMS` method can send a one-time code to the specified phone number, allowing the user to authenticate passwordlessly.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/android#chunk-5", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 DIDToken: Response<String>() - The function resolves upon authentication request success and rejects with a specific error code if the request fails. The resolved value is a Decentralized ID token with a default 15-minute lifespan.\n\nDIDToken: Response<String>()", "explanation": "**Section Explanation:**\n\nThe '#Returns' section of the Magic Labs documentation explains the expected outcome when calling an authentication request function in their Android client-side SDK.\n\n**Main Purpose:**\n\nThe primary purpose of this section is to provide clarity on what to expect after an authentication request is made. It specifies that if the request is successful, the function returns a `DIDToken`, which is a Decentralized ID token with a default lifespan of 15 minutes, wrapped in a `Response<String>` object. Conversely, if the request fails, it will reject with a specific error code. This information is crucial for developers to properly handle the outcome of their authentication requests in their Android applications.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/android#chunk-6", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\nclass\n\nMagicActivity\n\n:\n\nAppCompatActivity\n\n(\n\n)\n\n{\n\n01\n\nclass\n\nMagicActivity\n\n:\n\nAppCompatActivity\n\n(\n\n)\n\n{\n\n02\n\n02\n\n03\n\nlateinit\n\nvar\n\nmagic\n\n:\n\nMagic\n\n03\n\nlateinit\n\nvar\n\nmagic\n\n:\n\nMagic\n\n04\n\n04\n\n05\n\noverride\n\nfun\n\nonCreate\n\n(\n\nsavedInstanceState\n\n:\n\nBundle\n\n?\n\n)\n\n{\n\n05\n\noverride\n\nfun\n\nonCreate\n\n(\n\nsavedInstanceState\n\n:\n\nBundle\n\n?\n\n)\n\n{\n\n06\n\nsuper\n\n.\n\nonCreate\n\n(\n\nsavedInstanceState\n\n)\n\n06\n\nsuper\n\n.\n\nonCreate\n\n(\n\nsavedInstanceState\n\n)\n\n07\n\n07\n\n08\n\nmagic\n\n=\n\nMagic\n\n(\n\nthis\n\n,\n\n\"PUBLISHABLE_API_KEY\"\n\n)\n\n08\n\nmagic\n\n=\n\nMagic\n\n(\n\nthis\n\n,\n\n\"PUBLISHABLE_API_KEY\"\n\n)\n\n09\n\n}\n\n09\n\n}\n\n10\n\n10\n\n11\n\nfun\n\nlogin\n\n(\n\nv\n\n:\n\nView\n\n)\n\n{\n\n11\n\nfun\n\nlogin\n\n(\n\nv\n\n:\n\nView\n\n)\n\n{\n\n12\n\nval\n\nphoneNumber\n\n=\n\nfindViewById\n\n<\n\nEditText\n\n>\n\n(\n\nR\n\n.\n\nid\n\n.\n\nphone_number_input\n\n)\n\n12\n\nval\n\nphoneNumber\n\n=\n\nfindViewById\n\n<\n\nEditText\n\n>\n\n(\n\nR\n\n.\n\nid\n\n.\n\nphone_number_input\n\n)\n\n13\n\nval\n\nconfiguration\n\n=\n\nLoginWithSMSConfiguration\n\n(\n\nphoneNumber\n\n.\n\ntext\n\n.\n\ntoString\n\n(\n\n)\n\n)\n\n13\n\nval\n\nconfiguration\n\n=\n\nLoginWithSMSConfiguration\n\n(\n\nphoneNumber\n\n.\n\ntext\n\n.\n\ntoString\n\n(\n\n)\n\n)\n\n14\n\nval\n\ncompletable\n\n=\n\nmagic\n\n.\n\nauth\n\n.\n\nloginWithSMS\n\n(\n\nconfiguration\n\n)\n\n14\n\nval\n\ncompletable\n\n=\n\nmagic\n\n.\n\nauth\n\n.\n\nloginWithSMS\n\n(\n\nconfiguration\n\n)\n\n15\n\n15\n\n16\n\n// Logging in\n\n16\n\n// Logging in\n\n17\n\ncompletable\n\n.\n\nwhenComplete\n\n{\n\nresponse\n\n:\n\nDIDToken\n\n?\n\n,\n\nerror\n\n:\n\nThrowable\n\n?\n\n->\n\n17\n\ncompletable\n\n.\n\nwhenComplete\n\n{\n\nresponse\n\n:\n\nDIDToken\n\n?\n\n,\n\nerror\n\n:\n\nThrowable\n\n?\n\n->\n\n18\n\nif\n\n(\n\nerror\n\n!=\n\nnull\n\n)\n\n{\n\n18\n\nif\n\n(\n\nerror\n\n!=\n\nnull\n\n)\n\n{\n\n19\n\n// Handle error\n\n19\n\n// Handle error\n\n20\n\n}\n\n20\n\n}\n\n21\n\nif\n\n(\n\nresponse\n\n!=\n\nnull\n\n&&\n\n!\n\nresponse\n\n.\n\nhasError\n\n(\n\n)\n\n)\n\n{\n\n21\n\nif\n\n(\n\nresponse\n\n!=\n\nnull\n\n&&\n\n!\n\nresponse\n\n.\n\nhasError\n\n(\n\n)\n\n)\n\n{\n\n22\n\nLog\n\n.\n\nd\n\n(\n\n\"Magic\"\n\n,\n\n\"You're logged in!\"\n\n+\n\nresponse\n\n.\n\nresult\n\n)\n\n22\n\nLog\n\n.\n\nd\n\n(\n\n\"Magic\"\n\n,\n\n\"You're logged in!\"\n\n+\n\nresponse\n\n.\n\nresult\n\n)\n\n23\n\n}\n\nelse\n\n{\n\n23\n\n}\n\nelse\n\n{\n\n24\n\nLog\n\n.\n\nd\n\n(\n\n\"Magic\"\n\n,\n\n\"Not Logged in\"\n\n)\n\n24\n\nLog\n\n.\n\nd\n\n(\n\n\"Magic\"\n\n,\n\n\"Not Logged in\"\n\n)\n\n25\n\n}\n\n25\n\n}\n\n26\n\n}\n\n26\n\n}\n\n27\n\n}\n\n27\n\n}\n\n28\n\n}\n\n28\n\n}", "explanation": "**Example Documentation Overview**\n\nThe provided documentation section is an example code snippet from the Magic Labs embedded wallet documentation for Android client-side SDK. It showcases how to implement Magic's authentication feature using SMS login with Android.\n\n**Main Purpose:**\n\nThe main purpose of this code snippet is to demonstrate how to integrate Magic's authentication functionality into an Android application. Specifically, it illustrates how to:\n\n1. Initialize the Magic SDK with a publishable API key.\n2. Handle user phone number input.\n3. Configure the login with SMS feature using the user's phone number.\n4. Use the Magic SDK's `loginWithSMS` function to authenticate the user.\n5. Handle the response from the authentication request, including error handling and logging.\n\nThis example provides a clear and concise implementation guide for developers to integrate Magic's authentication feature into their Android applications.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/android#chunk-7", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nloginWithEmailOTP\n\nOnly available with Dedicated Wallet\n\nAuthenticate a user passwordlessly using an email one-time code sent to the specified user's email address.\n\n#\n\n\u2022 context (Context): Global information about application environment\n\n\u2022 configuration (LoginWithEmailOTPConfiguration):email (str): The user email to log in with\n\ncontext\n\nconfiguration\n\n\u2022 email (str): The user email to log in with\n\nemail", "explanation": "The section \"#loginWithEmailOTP - #Arguments\" from the Magic Labs documentation explains the parameters required for the `loginWithEmailOTP` function. This function is used for passwordless authentication, allowing a user to log in using a one-time code sent to their email address.\n\nThere are two main arguments:\n\n1. `context`: Provides information about the application environment.\n2. `configuration`: Requires an object containing a single property: `email`, which specifies the user's email address to log in with.\n\nThe main purpose of this function is to enable users to authenticate securely without needing a password, instead relying on a unique one-time code sent to their email address. This feature is only available with Dedicated Wallet.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/android#chunk-8", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 DIDToken: Response<String>() - The function resolves upon authentication request success and rejects with a specific error code if the request fails. The resolved value is a Decentralized ID token with a default 15-minute lifespan.\n\nDIDToken: Response<String>()", "explanation": "**Explanation of '#Returns' Section**\n\nThe '#Returns' section explains the response behavior of a function, specifically related to DIDToken (Decentralized ID token). \n\n**Main Purpose:**\n\nThe main purpose of this section is to inform developers that upon successful authentication using the function, they can expect a response containing a DIDToken (a token representing a decentralized identifier) in the form of a string. \n\n**Key Points:**\n\n- **Resolve**: If the authentication request is successful, the function will resolve with a DIDToken.\n- **Reject**: If the authentication request fails, the function will reject with a specific error code.\n- **DIDToken**: The resolved value (DIDToken) has a default lifespan of 15 minutes.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/android#chunk-9", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\nclass\n\nMagicActivity\n\n:\n\nAppCompatActivity\n\n(\n\n)\n\n{\n\n01\n\nclass\n\nMagicActivity\n\n:\n\nAppCompatActivity\n\n(\n\n)\n\n{\n\n02\n\n02\n\n03\n\nlateinit\n\nvar\n\nmagic\n\n:\n\nMagic\n\n03\n\nlateinit\n\nvar\n\nmagic\n\n:\n\nMagic\n\n04\n\n04\n\n05\n\noverride\n\nfun\n\nonCreate\n\n(\n\nsavedInstanceState\n\n:\n\nBundle\n\n?\n\n)\n\n{\n\n05\n\noverride\n\nfun\n\nonCreate\n\n(\n\nsavedInstanceState\n\n:\n\nBundle\n\n?\n\n)\n\n{\n\n06\n\nsuper\n\n.\n\nonCreate\n\n(\n\nsavedInstanceState\n\n)\n\n06\n\nsuper\n\n.\n\nonCreate\n\n(\n\nsavedInstanceState\n\n)\n\n07\n\n07\n\n08\n\nmagic\n\n=\n\nMagic\n\n(\n\nthis\n\n,\n\n\"PUBLISHABLE_API_KEY\"\n\n)\n\n08\n\nmagic\n\n=\n\nMagic\n\n(\n\nthis\n\n,\n\n\"PUBLISHABLE_API_KEY\"\n\n)\n\n09\n\n}\n\n09\n\n}\n\n10\n\n10\n\n11\n\nfun\n\nlogin\n\n(\n\nv\n\n:\n\nView\n\n)\n\n{\n\n11\n\nfun\n\nlogin\n\n(\n\nv\n\n:\n\nView\n\n)\n\n{\n\n12\n\nval\n\nemail\n\n=\n\nfindViewById\n\n<\n\nEditText\n\n>\n\n(\n\nR\n\n.\n\nid\n\n.\n\nemail_input\n\n)\n\n12\n\nval\n\nemail\n\n=\n\nfindViewById\n\n<\n\nEditText\n\n>\n\n(\n\nR\n\n.\n\nid\n\n.\n\nemail_input\n\n)\n\n13\n\nval\n\nconfiguration\n\n=\n\nLoginWithEmailOTPConfiguration\n\n(\n\nemail\n\n.\n\ntext\n\n.\n\ntoString\n\n(\n\n)\n\n)\n\n13\n\nval\n\nconfiguration\n\n=\n\nLoginWithEmailOTPConfiguration\n\n(\n\nemail\n\n.\n\ntext\n\n.\n\ntoString\n\n(\n\n)\n\n)\n\n14\n\nval\n\ncompletable\n\n=\n\nmagic\n\n.\n\nauth\n\n.\n\nloginWithEmailOTP\n\n(\n\nconfiguration\n\n)\n\n14\n\nval\n\ncompletable\n\n=\n\nmagic\n\n.\n\nauth\n\n.\n\nloginWithEmailOTP\n\n(\n\nconfiguration\n\n)\n\n15\n\n15\n\n16\n\n// Logging in\n\n16\n\n// Logging in\n\n17\n\ncompletable\n\n.\n\nwhenComplete\n\n{\n\nresponse\n\n:\n\nDIDToken\n\n?\n\n,\n\nerror\n\n:\n\nThrowable\n\n?\n\n->\n\n17\n\ncompletable\n\n.\n\nwhenComplete\n\n{\n\nresponse\n\n:\n\nDIDToken\n\n?\n\n,\n\nerror\n\n:\n\nThrowable\n\n?\n\n->\n\n18\n\nif\n\n(\n\nerror\n\n!=\n\nnull\n\n)\n\n{\n\n18\n\nif\n\n(\n\nerror\n\n!=\n\nnull\n\n)\n\n{\n\n19\n\n// Handle error\n\n19\n\n// Handle error\n\n20\n\n}\n\n20\n\n}\n\n21\n\nif\n\n(\n\nresponse\n\n!=\n\nnull\n\n&&\n\n!\n\nresponse\n\n.\n\nhasError\n\n(\n\n)\n\n)\n\n{\n\n21\n\nif\n\n(\n\nresponse\n\n!=\n\nnull\n\n&&\n\n!\n\nresponse\n\n.\n\nhasError\n\n(\n\n)\n\n)\n\n{\n\n22\n\nLog\n\n.\n\nd\n\n(\n\n\"Magic\"\n\n,\n\n\"You're logged in!\"\n\n+\n\nresponse\n\n.\n\nresult\n\n)\n\n22\n\nLog\n\n.\n\nd\n\n(\n\n\"Magic\"\n\n,\n\n\"You're logged in!\"\n\n+\n\nresponse\n\n.\n\nresult\n\n)\n\n23\n\n}\n\nelse\n\n{\n\n23\n\n}\n\nelse\n\n{\n\n24\n\nLog\n\n.\n\nd\n\n(\n\n\"Magic\"\n\n,\n\n\"Not Logged in\"\n\n)\n\n24\n\nLog\n\n.\n\nd\n\n(\n\n\"Magic\"\n\n,\n\n\"Not Logged in\"\n\n)\n\n25\n\n}\n\n25\n\n}\n\n26\n\n}\n\n26\n\n}\n\n27\n\n}\n\n27\n\n}\n\n28\n\n}\n\n28\n\n}", "explanation": "**Example Section Explanation**\n\nThe provided documentation section, titled '#Example', is an Android code snippet that demonstrates how to use the Magic SDK to log in a user with Magic's OAuth flow using Email OTP.\n\n**Main Purpose:**\n\nThe main purpose of this example is to guide developers in implementing Magic's Email OTP login functionality into their Android application. It showcases how to:\n\n1. Initialize the Magic SDK with a Publishable API Key.\n2. Create a login function that retrieves the user's email address from an input field.\n3. Use the `loginWithEmailOTP` method to send a login request with the user's email address.\n4. Handle the login response by checking for errors or a successful login.\n\n**In summary**, this example provides a concrete implementation of Magic's Email OTP login feature, making it easier for developers to integrate the Magic SDK into their Android applications.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/android#chunk-10", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nThe Wallet Module and its members are accessible on the Magic SDK instance by the wallet property.\n\nwallet\n\nCopy\n\n01\n\nimport\n\nlink\n\n.\n\nmagic\n\n.\n\nandroid\n\n.\n\nMagic\n\n01\n\nimport\n\nlink\n\n.\n\nmagic\n\n.\n\nandroid\n\n.\n\nMagic\n\n02\n\n02\n\n03\n\nvar\n\nmagic\n\n:\n\nMagic\n\n03\n\nvar\n\nmagic\n\n:\n\nMagic\n\n04\n\n04\n\n05\n\nmagic\n\n.\n\nwallet\n\n;\n\n05\n\nmagic\n\n.\n\nwallet\n\n;\n\n06\n\nmagic\n\n.\n\nwallet\n\n.\n\nconnectWithUI\n\n;\n\n06\n\nmagic\n\n.\n\nwallet\n\n.\n\nconnectWithUI\n\n;\n\n07\n\nmagic\n\n.\n\nwallet\n\n.\n\nshowUI\n\n;\n\n07\n\nmagic\n\n.\n\nwallet\n\n.\n\nshowUI\n\n;\n\n08\n\nmagic\n\n.\n\nwallet\n\n.\n\nrequestUserInfoWithUI\n\n;\n\n08\n\nmagic\n\n.\n\nwallet\n\n.\n\nrequestUserInfoWithUI\n\n;\n\n#\n\nconnectWithUI\n\nRenders a simple login form UI to collect the user's email address and authenticate them passwordlessly using a one-time passcode (OTP) sent to their email address they input.\n\n#\n\n\u2022 context (Context): Global information about application environment\n\ncontext", "explanation": "**Clear and Concise Explanation**\n\nThe `#connectWithUI` function is part of the Wallet Module in the Magic SDK for Android. Its main purpose is to render a simple login form that collects a user's email address and then authenticates them using a one-time passcode (OTP) sent to their email address. This allows for passwordless login.\n\n**Key Components**\n\n* `context (Context)`: Provides global information about the application environment, which is required as an argument for the `connectWithUI` function.\n\n**How it Works**\n\n1. The `connectWithUI` function is called on the `wallet` property of the Magic SDK instance.\n2. A simple login form UI is rendered, collecting the user's email address.\n3. Upon submission, a one-time passcode (OTP) is sent to the user's email address.\n4. The user is authenticated once the OTP is successfully verified.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/android#chunk-11", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 A promiEvent which returns an String[] when resolved: An array of user accounts that are connected, with the first element being the current public address of the user. You can read more on PromiEvents here.\n\npromiEvent\n\nString[]\n\nhere", "explanation": "The section '#Returns' from the Magic Labs documentation explains that a specific API request or method returns a `promiEvent` object, which resolves into an array of strings (`String[]`). \n\nThe main purpose of this section is to inform developers about the expected output result when a particular function or method is executed. \n\nIn simpler terms, when you call a certain function in the Magic Labs client-side SDK for Android, it will return a promise-like object (`promiEvent`) that will resolve into an array of strings, containing the user's connected accounts. The first element in the array will be the user's current public address.\n\nThis information is crucial for developers to properly handle the returned data in their application code, ensuring correct functionality and expected results.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/android#chunk-12", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\nprivate\n\nfun\n\nmcLogin\n\n(\n\nv\n\n:\n\nView\n\n)\n\n{\n\n01\n\nprivate\n\nfun\n\nmcLogin\n\n(\n\nv\n\n:\n\nView\n\n)\n\n{\n\n02\n\nval\n\naccounts\n\n=\n\n(\n\nmagic\n\nas\n\nMagic\n\n)\n\n.\n\nwallet\n\n.\n\nconnectWithUI\n\n(\n\nthis\n\n)\n\n02\n\nval\n\naccounts\n\n=\n\n(\n\nmagic\n\nas\n\nMagic\n\n)\n\n.\n\nwallet\n\n.\n\nconnectWithUI\n\n(\n\nthis\n\n)\n\n03\n\naccounts\n\n.\n\nwhenComplete\n\n{\n\nresponse\n\n:\n\nConnectWithUIResponse\n\n?\n\n,\n\nerror\n\n:\n\nThrowable\n\n?\n\n->\n\n03\n\naccounts\n\n.\n\nwhenComplete\n\n{\n\nresponse\n\n:\n\nConnectWithUIResponse\n\n?\n\n,\n\nerror\n\n:\n\nThrowable\n\n?\n\n->\n\n04\n\nif\n\n(\n\nerror\n\n!=\n\nnull\n\n)\n\n{\n\n04\n\nif\n\n(\n\nerror\n\n!=\n\nnull\n\n)\n\n{\n\n05\n\nLog\n\n.\n\nd\n\n(\n\n\"error\"\n\n,\n\nerror\n\n.\n\nlocalizedMessage\n\n)\n\n05\n\nLog\n\n.\n\nd\n\n(\n\n\"error\"\n\n,\n\nerror\n\n.\n\nlocalizedMessage\n\n)\n\n06\n\n}\n\n06\n\n}\n\n07\n\nif\n\n(\n\nresponse\n\n!=\n\nnull\n\n&&\n\n!\n\nresponse\n\n.\n\nhasError\n\n(\n\n)\n\n)\n\n{\n\n07\n\nif\n\n(\n\nresponse\n\n!=\n\nnull\n\n&&\n\n!\n\nresponse\n\n.\n\nhasError\n\n(\n\n)\n\n)\n\n{\n\n08\n\nresponse\n\n.\n\nresult\n\n?\n\n.\n\nlet\n\n{\n\nLog\n\n.\n\nd\n\n(\n\n\"Your Public Address is:\"\n\n,\n\nit\n\n.\n\nfirst\n\n(\n\n)\n\n)\n\n}\n\n08\n\nresponse\n\n.\n\nresult\n\n?\n\n.\n\nlet\n\n{\n\nLog\n\n.\n\nd\n\n(\n\n\"Your Public Address is:\"\n\n,\n\nit\n\n.\n\nfirst\n\n(\n\n)\n\n)\n\n}\n\n09\n\nstartTabActivity\n\n(\n\n)\n\n09\n\nstartTabActivity\n\n(\n\n)\n\n10\n\n}\n\nelse\n\n{\n\n10\n\n}\n\nelse\n\n{\n\n11\n\nresponse\n\n?\n\n.\n\nresult\n\n?\n\n.\n\nlet\n\n{\n\nLog\n\n.\n\nd\n\n(\n\n\"Your Public Address is:\"\n\n,\n\nit\n\n.\n\nfirst\n\n(\n\n)\n\n)\n\n}\n\n11\n\nresponse\n\n?\n\n.\n\nresult\n\n?\n\n.\n\nlet\n\n{\n\nLog\n\n.\n\nd\n\n(\n\n\"Your Public Address is:\"\n\n,\n\nit\n\n.\n\nfirst\n\n(\n\n)\n\n)\n\n}\n\n12\n\nLog\n\n.\n\ni\n\n(\n\n\"mcLogin RESPONSE\"\n\n,\n\n\"Response is:\n\n${\n\nresponse\n\n.\n\ntoString\n\n(\n\n)\n\n}\n\n\"\n\n)\n\n12\n\nLog\n\n.\n\ni\n\n(\n\n\"mcLogin RESPONSE\"\n\n,\n\n\"Response is:\n\n${\n\nresponse\n\n.\n\ntoString\n\n(\n\n)\n\n}\n\n\"\n\n)\n\n13\n\nLog\n\n.\n\nd\n\n(\n\n\"MC Login\"\n\n,\n\n\"Magic Connect Not logged in\"\n\n)\n\n13\n\nLog\n\n.\n\nd\n\n(\n\n\"MC Login\"\n\n,\n\n\"Magic Connect Not logged in\"\n\n)\n\n14\n\n}\n\n14\n\n}\n\n15\n\n}\n\n15\n\n}\n\n16\n\n}\n\n16\n\n}", "explanation": "**Example: Handling Magic Connect Login with UI**\n\nThe code snippet in the given documentation section, titled '#Example', showcases an example of handling Magic Connect login with a UI in an Android application using the Magic Labs SDK.\n\n**Main Purpose:**\n\nThe main purpose of this code example is to demonstrate how to:\n\n1. Initialize the Magic SDK and trigger the login process with a UI.\n2. Handle the response from the Magic Connect login process.\n3. Check if the login was successful or not.\n4. If successful, log the user's public address and proceed to the next activity (`startTabActivity()`).\n\n**Breakdown:**\n\nThe code defines a private function `mcLogin` that:\n\n* Calls `connectWithUI()` on the Magic SDK instance to initiate the login process.\n* Uses `whenComplete()` to handle the response from the login process.\n* Checks if the response contains an error or not. If an error occurs, it logs the error message.\n* If the response is successful, it logs the user's public address and starts a new activity (`startTabActivity()`).\n\nThis example provides a starting point for developers to implement Magic Connect login functionality with a UI in their Android applications.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/android#chunk-13", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nshowUI\n\nDisplays the fully navigable wallet to the user that adheres to the toggled configurations on your developer dashboard\u2019s Widget UI tab. \u2060 \u2060This is only supported for users who login with email or Google and not third party wallets such as metamask. User must be signed in for this method to return or else it will throw an error.\n\nnavigable wallet\n\n#\n\n\u2022 context (Context): Global information about application environment\n\ncontext", "explanation": "The `#showUI` section of the Magic Labs embedded wallet documentation explains a method that displays a fully navigable wallet interface to the user. \n\nThe main purpose of `#showUI` is to present a wallet UI, adhering to the custom configurations set on the developer dashboard, allowing users to interact with it. This method is only supported for users who log in using email or Google authentication, and not for users using third-party wallets like MetaMask. \n\nBefore calling `#showUI`, it is essential to ensure the user is signed in, as attempting to display the wallet without a valid user session will result in an error. The `#showUI` method requires a `context` (Context) argument, which contains global information about the application environment.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/android#chunk-14", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 Promise which resolves when the user closes the window\n\nPromise\n\nOptionally, add a .on() handler to catch the disconnect event emitted when the user logs out from the wallet widget.\n\n.on()\n\ndisconnect", "explanation": "This section of the Magic Labs documentation, '#Returns', explains what to expect when the user closes the wallet window or logs out from the wallet widget in an Android application.\n\n**Main Purpose:** \nThe main purpose of this section is to inform developers about the events emitted by the wallet when the user closes the window or logs out. This allows developers to handle these events in their application, for example, by redirecting the user to a specific page or updating the application state.\n\n**Key Points:**\n\n- When the user closes the window, the function returns a Promise that is resolved.\n- Developers can use the `.on()` method to catch the 'disconnect' event when the user logs out from the wallet widget.\n- This information can be used to handle user disconnection and update the application state accordingly.\n\nBy understanding this section, developers can create a seamless and robust user experience in their Android application.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/android#chunk-15", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\nfun\n\nshowUI\n\n(\n\nv\n\n:\n\nView\n\n)\n\n{\n\n01\n\nfun\n\nshowUI\n\n(\n\nv\n\n:\n\nView\n\n)\n\n{\n\n02\n\nval\n\ncompletable\n\n=\n\nmagic\n\n.\n\nwallet\n\n.\n\nshowUI\n\n(\n\nthis\n\n.\n\nrequireContext\n\n(\n\n)\n\n)\n\n02\n\nval\n\ncompletable\n\n=\n\nmagic\n\n.\n\nwallet\n\n.\n\nshowUI\n\n(\n\nthis\n\n.\n\nrequireContext\n\n(\n\n)\n\n)\n\n03\n\ncompletable\n\n.\n\nwhenComplete\n\n{\n\nresponse\n\n:\n\nShowWalletResponse\n\n?\n\n,\n\nerror\n\n:\n\nThrowable\n\n?\n\n->\n\n03\n\ncompletable\n\n.\n\nwhenComplete\n\n{\n\nresponse\n\n:\n\nShowWalletResponse\n\n?\n\n,\n\nerror\n\n:\n\nThrowable\n\n?\n\n->\n\n04\n\nif\n\n(\n\nerror\n\n!=\n\nnull\n\n)\n\n{\n\n04\n\nif\n\n(\n\nerror\n\n!=\n\nnull\n\n)\n\n{\n\n05\n\nLog\n\n.\n\nd\n\n(\n\n\"error\"\n\n,\n\nerror\n\n.\n\nlocalizedMessage\n\n)\n\n05\n\nLog\n\n.\n\nd\n\n(\n\n\"error\"\n\n,\n\nerror\n\n.\n\nlocalizedMessage\n\n)\n\n06\n\n}\n\n06\n\n}\n\n07\n\nif\n\n(\n\nresponse\n\n!=\n\nnull\n\n)\n\n{\n\n07\n\nif\n\n(\n\nresponse\n\n!=\n\nnull\n\n)\n\n{\n\n08\n\ntabActivity\n\n.\n\ntoastAsync\n\n(\n\n\"show Wallet:\"\n\n+\n\nresponse\n\n.\n\nresult\n\n)\n\n08\n\ntabActivity\n\n.\n\ntoastAsync\n\n(\n\n\"show Wallet:\"\n\n+\n\nresponse\n\n.\n\nresult\n\n)\n\n09\n\n}\n\n09\n\n}\n\n10\n\n}\n\n10\n\n}\n\n11\n\n}\n\n11\n\n}", "explanation": "**Example Section Explanation**\n\nThe provided documentation section titled '#Example' demonstrates how to show the Magic Labs embedded wallet UI in an Android application.\n\n**Main Purpose:**\n\nThe main purpose of this code snippet is to provide a sample implementation of displaying the Magic Labs wallet user interface (UI) within an Android app using the Magic SDK. It shows how to handle the response and potential errors when showing the wallet UI.\n\n**Step-by-Step Breakdown:**\n\n1. `magic.wallet.showUI(this.requireContext())`: This line shows the Magic Labs wallet UI.\n2. `completable.whenComplete { ... }`: This closure handles the response and potential errors from showing the wallet UI.\n   - If there is an error (`error != null`), it logs the error message.\n   - If there is a response (`response != null`), it displays a toast message with the result.\n\nThis example code helps developers understand how to integrate and display the Magic Labs embedded wallet UI in their Android applications, as well as handle the resulting responses and potential errors.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/android#chunk-16", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nrequestUserInfoWithUI\n\nDisplays the wallet widget within an iframe that prompts the user to consent to sharing information with the requesting dApp with OpenID profile scopes. Currently, the only profile scope that can be requested is a verified email. Collecting a verified email address from third-party wallet users (MetaMask, Coinbase Wallet, etc.) is a premium feature but included in the free trial period (see pricing). User must be signed in for this method to return or else it will throw an error.\n\npricing\n\n#\n\n\u2022 context (Context): Global information about application environment\n\n\u2022 configuration (RequestUserInfoWithUIConfiguration):email (str): The user email to log in with\n\ncontext\n\nconfiguration\n\n\u2022 email (str): The user email to log in with\n\nemail", "explanation": "**Explanation of requestUserInfoWithUI**\n\nThe `requestUserInfoWithUI` method is a part of the Magic Labs embedded wallet documentation for Android. Its primary purpose is to display a wallet widget within an iframe that prompts users to share their verified email address with a requesting dApp (decentralized application).\n\n**Main Purpose:**\nThe main purpose of `requestUserInfoWithUI` is to allow dApps to collect a verified email address from wallet users (like MetaMask or Coinbase Wallet users) while ensuring the users' consent. This method only works if the user is already signed in; otherwise, it throws an error.\n\n**Required Arguments:**\n\n1. `context`: Provides global information about the application environment.\n2. `configuration`: Contains the `email` field, which specifies the user email to log in with.\n\n**Key Use Cases:**\n\n* Collect verified email addresses from third-party wallet users.\n* Request user consent for sharing their verified email address with a dApp.\n* Enable dApps to access verified email addresses for premium features (free during the trial period).\n\nIn summary, `requestUserInfoWithUI` is a method for requesting user consent to share their verified email address with a dApp, ensuring a secure and consent-based process for both users and dApps.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/android#chunk-17", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 Promise which resolves when the user closes the window\n\nPromise", "explanation": "This documentation section titled '#Returns' explains what value the Magic Labs SDK function returns upon completion. In this specific case, the function returns a 'Promise' which resolves (or completes) when the user closes the window.\n\nIn simpler terms, this indicates that the function does not immediately return a value. Instead, it keeps running until the user closes the window, and then it completes, allowing the program to proceed.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/android#chunk-18", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\nfun\n\nrequestUserInfoWithUI\n\n(\n\nv\n\n:\n\nView\n\n)\n\n{\n\n01\n\nfun\n\nrequestUserInfoWithUI\n\n(\n\nv\n\n:\n\nView\n\n)\n\n{\n\n02\n\nval\n\nconfig\n\n=\n\nRequestUserInfoWithUIConfiguration\n\n(\n\n02\n\nval\n\nconfig\n\n=\n\nRequestUserInfoWithUIConfiguration\n\n(\n\n03\n\nscope\n\n=\n\nWalletUserInfoScope\n\n(\n\nemail\n\n=\n\nWalletUserInfoEmailOptions\n\n.\n\nrequired\n\n)\n\n03\n\nscope\n\n=\n\nWalletUserInfoScope\n\n(\n\nemail\n\n=\n\nWalletUserInfoEmailOptions\n\n.\n\nrequired\n\n)\n\n04\n\n)\n\n04\n\n)\n\n05\n\nval\n\ncompletable\n\n=\n\nmagic\n\n.\n\nwallet\n\n.\n\nrequestUserInfoWithUI\n\n(\n\nthis\n\n.\n\nrequireContext\n\n(\n\n)\n\n,\n\nconfig\n\n)\n\n05\n\nval\n\ncompletable\n\n=\n\nmagic\n\n.\n\nwallet\n\n.\n\nrequestUserInfoWithUI\n\n(\n\nthis\n\n.\n\nrequireContext\n\n(\n\n)\n\n,\n\nconfig\n\n)\n\n06\n\ncompletable\n\n.\n\nwhenComplete\n\n{\n\nresponse\n\n:\n\nRequestUserInfoWithUIResponse\n\n?\n\n,\n\nerror\n\n:\n\nThrowable\n\n?\n\n->\n\n06\n\ncompletable\n\n.\n\nwhenComplete\n\n{\n\nresponse\n\n:\n\nRequestUserInfoWithUIResponse\n\n?\n\n,\n\nerror\n\n:\n\nThrowable\n\n?\n\n->\n\n07\n\nif\n\n(\n\nerror\n\n!=\n\nnull\n\n)\n\n{\n\n07\n\nif\n\n(\n\nerror\n\n!=\n\nnull\n\n)\n\n{\n\n08\n\nLog\n\n.\n\nd\n\n(\n\n\"error\"\n\n,\n\nerror\n\n.\n\nlocalizedMessage\n\n)\n\n08\n\nLog\n\n.\n\nd\n\n(\n\n\"error\"\n\n,\n\nerror\n\n.\n\nlocalizedMessage\n\n)\n\n09\n\n}\n\n09\n\n}\n\n10\n\nif\n\n(\n\nresponse\n\n!=\n\nnull\n\n)\n\n{\n\n10\n\nif\n\n(\n\nresponse\n\n!=\n\nnull\n\n)\n\n{\n\n11\n\ntabActivity\n\n.\n\ntoastAsync\n\n(\n\n\"Request User Info\"\n\n+\n\nresponse\n\n.\n\nresult\n\n.\n\nemail\n\n)\n\n11\n\ntabActivity\n\n.\n\ntoastAsync\n\n(\n\n\"Request User Info\"\n\n+\n\nresponse\n\n.\n\nresult\n\n.\n\nemail\n\n)\n\n12\n\n}\n\n12\n\n}\n\n13\n\n}\n\n13\n\n}\n\n14\n\n}\n\n14\n\n}", "explanation": "This documentation section is titled \"#Example\" and is part of the Magic Labs embedded wallet documentation for Android.\n\n**Purpose:** \nThe main purpose of this code example is to demonstrate how to request user information using the Magic Labs wallet with a user interface (UI) on an Android device.\n\n**What it does:**\n\n- It creates a configuration (`RequestUserInfoWithUIConfiguration`) that specifies the user information to be requested, which in this case is the user's email address.\n- It uses the `requestUserInfoWithUI` method to request the user's email address with a UI, passing in the configuration and a context.\n- It then handles the response by displaying a toast message with the user's email address if the request is successful, or logging an error message if the request fails.\n\nIn summary, this example shows how to use the Magic Labs wallet to request user information in an Android app with a user interface.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/android#chunk-19", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nThe User Module and its members are accessible on the Magic SDK instance by the user property.\n\nuser\n\nCopy\n\n01\n\nimport\n\nlink\n\n.\n\nmagic\n\n.\n\nandroid\n\n.\n\nMagic\n\n01\n\nimport\n\nlink\n\n.\n\nmagic\n\n.\n\nandroid\n\n.\n\nMagic\n\n02\n\n02\n\n03\n\nvar\n\nmagic\n\n:\n\nMagic\n\n03\n\nvar\n\nmagic\n\n:\n\nMagic\n\n04\n\n04\n\n05\n\nmagic\n\n.\n\nuser\n\n05\n\nmagic\n\n.\n\nuser\n\n06\n\nmagic\n\n.\n\nuser\n\n.\n\nupdateEmail\n\n06\n\nmagic\n\n.\n\nuser\n\n.\n\nupdateEmail\n\n07\n\nmagic\n\n.\n\nuser\n\n.\n\ngetIdToken\n\n07\n\nmagic\n\n.\n\nuser\n\n.\n\ngetIdToken\n\n08\n\nmagic\n\n.\n\nuser\n\n.\n\ngenerateIdToken\n\n08\n\nmagic\n\n.\n\nuser\n\n.\n\ngenerateIdToken\n\n09\n\nmagic\n\n.\n\nuser\n\n.\n\ngetMetadata\n\n09\n\nmagic\n\n.\n\nuser\n\n.\n\ngetMetadata\n\n10\n\nmagic\n\n.\n\nuser\n\n.\n\nisLoggedIn\n\n10\n\nmagic\n\n.\n\nuser\n\n.\n\nisLoggedIn\n\n11\n\nmagic\n\n.\n\nuser\n\n.\n\nlogout\n\n11\n\nmagic\n\n.\n\nuser\n\n.\n\nlogout\n\n12\n\nmagic\n\n.\n\nuser\n\n.\n\nshowSettings\n\n12\n\nmagic\n\n.\n\nuser\n\n.\n\nshowSettings\n\n13\n\nmagic\n\n.\n\nuser\n\n.\n\nupdatePhoneNumber\n\n13\n\nmagic\n\n.\n\nuser\n\n.\n\nupdatePhoneNumber\n\n14\n\nmagic\n\n.\n\nuser\n\n.\n\nrecoverAccount\n\n14\n\nmagic\n\n.\n\nuser\n\n.\n\nrecoverAccount\n\n15\n\nmagic\n\n.\n\nuser\n\n.\n\nrevealPrivateKey\n\n15\n\nmagic\n\n.\n\nuser\n\n.\n\nrevealPrivateKey\n\n#\n\nupdateEmail\n\nOnly available with Dedicated Wallet\n\nInitiates the update email flow that allows a user to change to a new email.\n\n#\n\n\u2022 context (Context): Global information about application environment\n\ncontext\n\n\u2022 configuration (UpdateEmailConfiguration):email (str): The user email to update withshowUI (boolean): If true, show an out-of-the-box pending UI while the request is in flight\n\nconfiguration\n\n\u2022 email (str): The user email to update with\n\n\u2022 showUI (boolean): If true, show an out-of-the-box pending UI while the request is in flight\n\nemail\n\nshowUI\n\ntrue", "explanation": "The `updateEmail` section in the Magic Labs embedded wallet documentation is about updating a user's email address. This functionality is part of the User Module and is accessible through the `magic.user` property.\n\nThe main purpose of `updateEmail` is to initiate an update email flow that allows a user to change their existing email address to a new one. This feature is only available with a Dedicated Wallet.\n\nThe `updateEmail` function takes in two main arguments:\n\n* `context`: an object that contains global information about the application environment.\n* `configuration`: an `UpdateEmailConfiguration` object that includes two properties:\n\t+ `email`: the new email address to update with.\n\t+ `showUI`: a boolean that determines whether to show a pending UI while the request is being processed. If `true`, an out-of-the-box UI is displayed.\n\nBy calling `updateEmail` with the required arguments, a developer can enable users to update their email addresses within their application, providing a seamless and user-friendly experience.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/android#chunk-20", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 UpdateEmailResponse: Response<Boolean>() - The Completable resolves with a true boolean value if update email is successful and rejects with a specific error code if the request fails\n\nUpdateEmailResponse: Response<Boolean>()\n\nCompletable", "explanation": "The `#Returns` section of the documentation explains the expected outcome or response when calling the `updateEmail` function from the Magic Labs embedded wallet client-side SDK for Android.\n\nIn simple terms, when you update a user's email using this function, it will return one of two possible results:\n\n1. **Successful Update**: A boolean value `true` if the email update is successful, indicating that the operation was completed without any issues.\n2. **Failed Update**: An error code if the request fails, providing information about what went wrong.\n\nThe response is wrapped in a `Completable` object, which is a type of asynchronous callback in Java/Android that signals the completion of a task (in this case, the email update). The `Completable` resolves to a `Response<Boolean>` object, which contains the boolean outcome of the update operation.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/android#chunk-21", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\nclass\n\nMagicActivity\n\n:\n\nAppCompatActivity\n\n(\n\n)\n\n{\n\n01\n\nclass\n\nMagicActivity\n\n:\n\nAppCompatActivity\n\n(\n\n)\n\n{\n\n02\n\n02\n\n03\n\nlateinit\n\nvar\n\nmagic\n\n:\n\nMagic\n\n03\n\nlateinit\n\nvar\n\nmagic\n\n:\n\nMagic\n\n04\n\n04\n\n05\n\noverride\n\nfun\n\nonCreate\n\n(\n\nsavedInstanceState\n\n:\n\nBundle\n\n?\n\n)\n\n{\n\n05\n\noverride\n\nfun\n\nonCreate\n\n(\n\nsavedInstanceState\n\n:\n\nBundle\n\n?\n\n)\n\n{\n\n06\n\nsuper\n\n.\n\nonCreate\n\n(\n\nsavedInstanceState\n\n)\n\n06\n\nsuper\n\n.\n\nonCreate\n\n(\n\nsavedInstanceState\n\n)\n\n07\n\n07\n\n08\n\nmagic\n\n=\n\nMagic\n\n(\n\nthis\n\n,\n\n\"PUBLISHABLE_API_KEY\"\n\n)\n\n08\n\nmagic\n\n=\n\nMagic\n\n(\n\nthis\n\n,\n\n\"PUBLISHABLE_API_KEY\"\n\n)\n\n09\n\n}\n\n09\n\n}\n\n10\n\n10\n\n11\n\n// Assuming user is logged in\n\n11\n\n// Assuming user is logged in\n\n12\n\nfun\n\nupdateEmail\n\n(\n\nv\n\n:\n\nView\n\n)\n\n{\n\n12\n\nfun\n\nupdateEmail\n\n(\n\nv\n\n:\n\nView\n\n)\n\n{\n\n13\n\n13\n\n14\n\nval\n\nconfiguration\n\n=\n\nUpdateEmailConfiguration\n\n(\n\n\"new_user_email@example.com\"\n\n)\n\n14\n\nval\n\nconfiguration\n\n=\n\nUpdateEmailConfiguration\n\n(\n\n\"new_user_email@example.com\"\n\n)\n\n15\n\nval\n\ncompletable\n\n=\n\nmagic\n\n.\n\nuser\n\n.\n\nupdateEmail\n\n(\n\nthis\n\n,\n\nconfiguration\n\n)\n\n15\n\nval\n\ncompletable\n\n=\n\nmagic\n\n.\n\nuser\n\n.\n\nupdateEmail\n\n(\n\nthis\n\n,\n\nconfiguration\n\n)\n\n16\n\ncompletable\n\n.\n\nwhenComplete\n\n{\n\nresponse\n\n:\n\nUpdateEmailResponse\n\n?\n\n,\n\nerror\n\n:\n\nThrowable\n\n?\n\n->\n\n16\n\ncompletable\n\n.\n\nwhenComplete\n\n{\n\nresponse\n\n:\n\nUpdateEmailResponse\n\n?\n\n,\n\nerror\n\n:\n\nThrowable\n\n?\n\n->\n\n17\n\nif\n\n(\n\nresponse\n\n!=\n\nnull\n\n)\n\n{\n\n17\n\nif\n\n(\n\nresponse\n\n!=\n\nnull\n\n)\n\n{\n\n18\n\nLog\n\n.\n\nd\n\n(\n\n\"Magic\"\n\n,\n\nresponse\n\n.\n\nresult\n\n.\n\ntoString\n\n(\n\n)\n\n)\n\n// \"True\"\n\n18\n\nLog\n\n.\n\nd\n\n(\n\n\"Magic\"\n\n,\n\nresponse\n\n.\n\nresult\n\n.\n\ntoString\n\n(\n\n)\n\n)\n\n// \"True\"\n\n19\n\n}\n\nelse\n\n{\n\n19\n\n}\n\nelse\n\n{\n\n20\n\n// handle error\n\n20\n\n// handle error\n\n21\n\n}\n\n21\n\n}\n\n22\n\n}\n\n22\n\n}\n\n23\n\n}\n\n23\n\n}\n\n24\n\n}\n\n24\n\n}", "explanation": "**Explanation of the `#Example` Documentation Section**\n\nThe `#Example` section from the Magic Labs embedded wallet documentation for Android Client-Side SDK provides an example implementation of updating a user's email address using the Magic SDK.\n\n**Main Purpose:**\n\nThe main purpose of this example is to demonstrate how to use the Magic SDK to update a user's email address, providing a concrete illustration of how to:\n\n1. Initialize the Magic SDK with a publishable API key.\n2. Create an `UpdateEmailConfiguration` object with the new email address.\n3. Call the `updateEmail` method on the `magic.user` object, passing the configuration and the current activity context.\n4. Handle the response or error from the `updateEmail` method using a `Completable` object.\n\n**Context:**\n\nThis example assumes that the user is already logged in and that the Magic SDK has been properly initialized with a publishable API key. The code snippet is written in Kotlin and is intended to be used in an Android application.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/android#chunk-22", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\ngetIdToken\n\nOnly available with Dedicated Wallet\n\nGenerates a Decentralized Id Token which acts as proof of authentication to resource servers.\n\n#\n\n\u2022 context (Context): Global information about application environment\n\n\u2022 configuration (GetIdTokenConfiguration):lifespan (number): will set the lifespan of the generated token. Defaults to 900s (15 mins).\n\ncontext\n\nconfiguration\n\n\u2022 lifespan (number): will set the lifespan of the generated token. Defaults to 900s (15 mins).\n\nlifespan", "explanation": "**getIdToken - Arguments**\n\nThis section of the documentation explains the `getIdToken` function, which is only available for Dedicated Wallet users. The main purpose of `getIdToken` is to generate a Decentralized Identity Token, which serves as proof of authentication for accessing resource servers.\n\n**Required Arguments:**\n\nTwo main arguments are required:\n\n1. **context**: This refers to the global information about the application environment.\n2. **configuration**: This is an object that contains a specific setting:\n   - **lifespan**: This is a numerical value that sets the duration (in seconds) for which the generated token remains valid. The default duration is 900 seconds (15 minutes).\n\n**Purpose:**\n\nThe `getIdToken` function is essential for generating a token that verifies a user's identity when interacting with resource servers. By specifying the context and configuration (including token lifespan), developers can obtain a token that facilitates secure authentication and access to protected resources.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/android#chunk-23", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 PromiEvent<string> - Base64-encoded string representation of a JSON tuple representing [proof, claim]\n\nPromiEvent<string>\n\n[proof, claim]\n\nCopy\n\n01\n\nclass\n\nMagicActivity\n\n:\n\nAppCompatActivity\n\n(\n\n)\n\n{\n\n01\n\nclass\n\nMagicActivity\n\n:\n\nAppCompatActivity\n\n(\n\n)\n\n{\n\n02\n\nlateinit\n\nvar\n\nmagic\n\n:\n\nMagic\n\n02\n\nlateinit\n\nvar\n\nmagic\n\n:\n\nMagic\n\n03\n\n03\n\n04\n\noverride\n\nfun\n\nonCreate\n\n(\n\nsavedInstanceState\n\n:\n\nBundle\n\n?\n\n)\n\n{\n\n04\n\noverride\n\nfun\n\nonCreate\n\n(\n\nsavedInstanceState\n\n:\n\nBundle\n\n?\n\n)\n\n{\n\n05\n\nsuper\n\n.\n\nonCreate\n\n(\n\nsavedInstanceState\n\n)\n\n05\n\nsuper\n\n.\n\nonCreate\n\n(\n\nsavedInstanceState\n\n)\n\n06\n\n06\n\n07\n\nmagic\n\n=\n\nMagic\n\n(\n\nthis\n\n,\n\n\"PUBLISHABLE_API_KEY\"\n\n)\n\n07\n\nmagic\n\n=\n\nMagic\n\n(\n\nthis\n\n,\n\n\"PUBLISHABLE_API_KEY\"\n\n)\n\n08\n\n}\n\n08\n\n}\n\n09\n\n09\n\n10\n\n// Assuming user is logged in\n\n10\n\n// Assuming user is logged in\n\n11\n\nfun\n\ngetIdToken\n\n(\n\nv\n\n:\n\nView\n\n)\n\n{\n\n11\n\nfun\n\ngetIdToken\n\n(\n\nv\n\n:\n\nView\n\n)\n\n{\n\n12\n\nval\n\nconfiguration\n\n=\n\nGetIdTokenConfiguration\n\n(\n\nlifespan\n\n=\n\n900\n\n)\n\n12\n\nval\n\nconfiguration\n\n=\n\nGetIdTokenConfiguration\n\n(\n\nlifespan\n\n=\n\n900\n\n)\n\n13\n\nval\n\ncompletable\n\n=\n\nmagic\n\n.\n\nuser\n\n.\n\ngetIdToken\n\n(\n\nconfiguration\n\n)\n\n13\n\nval\n\ncompletable\n\n=\n\nmagic\n\n.\n\nuser\n\n.\n\ngetIdToken\n\n(\n\nconfiguration\n\n)\n\n14\n\ncompletable\n\n.\n\nwhenComplete\n\n{\n\nresponse\n\n:\n\nGetIdTokenResponse\n\n?\n\n,\n\nerror\n\n:\n\nThrowable\n\n?\n\n->\n\n14\n\ncompletable\n\n.\n\nwhenComplete\n\n{\n\nresponse\n\n:\n\nGetIdTokenResponse\n\n?\n\n,\n\nerror\n\n:\n\nThrowable\n\n?\n\n->\n\n15\n\nif\n\n(\n\nresponse\n\n!=\n\nnull\n\n)\n\n{\n\n15\n\nif\n\n(\n\nresponse\n\n!=\n\nnull\n\n)\n\n{\n\n16\n\nLog\n\n.\n\nd\n\n(\n\n\"Magic\"\n\n,\n\nresponse\n\n.\n\nresult\n\n)\n\n16\n\nLog\n\n.\n\nd\n\n(\n\n\"Magic\"\n\n,\n\nresponse\n\n.\n\nresult\n\n)\n\n17\n\n}\n\nelse\n\n{\n\n17\n\n}\n\nelse\n\n{\n\n18\n\n// handle Error\n\n18\n\n// handle Error\n\n19\n\n}\n\n19\n\n}\n\n20\n\n}\n\n20\n\n}\n\n21\n\n}\n\n21\n\n}\n\n22\n\n}\n\n22\n\n}", "explanation": "The documentation section titled '#Returns' is about the output value type of a specific function, which in this context is `getIdToken`. \n\nIts main purpose is to indicate that the function returns a promise (`PromiEvent`) that resolves to a Base64-encoded string representation of a JSON tuple containing two values: `[proof, claim]`. The `PromiEvent<string>` represents a result that can be resolved with a string value.\n\nHere is the excerpt relevant to '#Returns' :\n\n`PromiEvent<string>` - Base64-encoded string representation of a JSON tuple representing `[proof, claim]`.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/android#chunk-24", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\ngenerateIdToken\n\nOnly available with Dedicated Wallet\n\nGenerates a Decentralized Id Token with optional serialized data.\n\n#\n\n\u2022 configuration (GenerateIdTokenConfiguration):lifespan (number): will set the lifespan of the generated token. Defaults to 900s (15 mins).attachment (str): will set a signature of serialized data in the generated token. Defaults to \"none\".\n\nconfiguration\n\n\u2022 lifespan (number): will set the lifespan of the generated token. Defaults to 900s (15 mins).\n\n\u2022 attachment (str): will set a signature of serialized data in the generated token. Defaults to \"none\".\n\nlifespan\n\nattachment\n\n\"none\"", "explanation": "The `generateIdToken` function is part of the Magic Labs API for Android, and it's used to create a Decentralized Id Token. This token is an authentication mechanism that verifies a user's identity and can also include additional, serialized data.\n\nThe main purpose of `generateIdToken` is to securely authenticate a user while optionally attaching specific, serialized data to the token. This token has a limited lifespan, which defaults to 15 minutes (900 seconds) but can be customized.\n\nWhen calling `generateIdToken`, you need to provide a configuration object with two properties:\n\n1. `lifespan`: specifies the token's validity period in seconds (defaults to 15 minutes).\n2. `attachment`: includes a signature of serialized data in the generated token (defaults to \"none\").\n\nBy using `generateIdToken`, developers can create short-lived authentication tokens with attached data for their decentralized applications, making user authentication and data exchange more secure and efficient.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/android#chunk-25", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 GenerateIdTokenResponse: Response<String>() - Base64-encoded string representation of a JSON tuple representing [proof, claim]\n\nGenerateIdTokenResponse: Response<String>()\n\n[proof, claim]", "explanation": "**Explanation of '#Returns' Documentation Section**\n\nThe '#Returns' section from the Magic Labs embedded wallet documentation for Android client-side SDK explains the expected response format when generating an ID token.\n\n**Purpose:**\n\nThe primary purpose of this section is to inform developers about the structure and content of the response they can expect when using the `GenerateIdToken` functionality in their Android applications.\n\n**Breakdown:**\n\n* `GenerateIdTokenResponse`: The type of response expected when generating an ID token.\n* `Response<String>()`: The response is a string value wrapped in a `Response` object.\n* `Base64-encoded string representation of a JSON tuple`: The string response is a Base64-encoded representation of a JSON tuple.\n* `[proof, claim]`: The JSON tuple contains two main elements: `proof` and `claim`. The exact structure and content of these elements are not specified in this section, but they are likely to contain cryptographic proof and claim-related data, respectively.\n\nIn summary, this section is crucial for developers to understand the format and content of the ID token response, enabling them to parse and utilize the returned data correctly in their applications.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/android#chunk-26", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\nclass\n\nMagicActivity\n\n:\n\nAppCompatActivity\n\n(\n\n)\n\n{\n\n01\n\nclass\n\nMagicActivity\n\n:\n\nAppCompatActivity\n\n(\n\n)\n\n{\n\n02\n\n02\n\n03\n\nlateinit\n\nvar\n\nmagic\n\n:\n\nMagic\n\n03\n\nlateinit\n\nvar\n\nmagic\n\n:\n\nMagic\n\n04\n\n04\n\n05\n\noverride\n\nfun\n\nonCreate\n\n(\n\nsavedInstanceState\n\n:\n\nBundle\n\n?\n\n)\n\n{\n\n05\n\noverride\n\nfun\n\nonCreate\n\n(\n\nsavedInstanceState\n\n:\n\nBundle\n\n?\n\n)\n\n{\n\n06\n\nsuper\n\n.\n\nonCreate\n\n(\n\nsavedInstanceState\n\n)\n\n06\n\nsuper\n\n.\n\nonCreate\n\n(\n\nsavedInstanceState\n\n)\n\n07\n\n07\n\n08\n\nmagic\n\n=\n\nMagic\n\n(\n\nthis\n\n,\n\n\"PUBLISHABLE_API_KEY\"\n\n)\n\n08\n\nmagic\n\n=\n\nMagic\n\n(\n\nthis\n\n,\n\n\"PUBLISHABLE_API_KEY\"\n\n)\n\n09\n\n}\n\n09\n\n}\n\n10\n\n10\n\n11\n\n// Assuming user is logged in\n\n11\n\n// Assuming user is logged in\n\n12\n\nfun\n\ngenerateIdToken\n\n(\n\nv\n\n:\n\nView\n\n)\n\n{\n\n12\n\nfun\n\ngenerateIdToken\n\n(\n\nv\n\n:\n\nView\n\n)\n\n{\n\n13\n\nval\n\nconfiguration\n\n=\n\nGenerateIdTokenConfiguration\n\n(\n\nlifespan\n\n=\n\n900\n\n,\n\nattachment\n\n=\n\n\"none\"\n\n)\n\n13\n\nval\n\nconfiguration\n\n=\n\nGenerateIdTokenConfiguration\n\n(\n\nlifespan\n\n=\n\n900\n\n,\n\nattachment\n\n=\n\n\"none\"\n\n)\n\n14\n\nval\n\ncompletable\n\n=\n\nmagic\n\n.\n\nuser\n\n.\n\ngenerateIdToken\n\n(\n\nconfiguration\n\n)\n\n14\n\nval\n\ncompletable\n\n=\n\nmagic\n\n.\n\nuser\n\n.\n\ngenerateIdToken\n\n(\n\nconfiguration\n\n)\n\n15\n\n15\n\n16\n\ncompletable\n\n.\n\nwhenComplete\n\n{\n\nresponse\n\n:\n\nGenerateIdTokenResponse\n\n?\n\n,\n\nerror\n\n:\n\nThrowable\n\n?\n\n->\n\n16\n\ncompletable\n\n.\n\nwhenComplete\n\n{\n\nresponse\n\n:\n\nGenerateIdTokenResponse\n\n?\n\n,\n\nerror\n\n:\n\nThrowable\n\n?\n\n->\n\n17\n\nif\n\n(\n\nresponse\n\n!=\n\nnull\n\n)\n\n{\n\n17\n\nif\n\n(\n\nresponse\n\n!=\n\nnull\n\n)\n\n{\n\n18\n\nLog\n\n.\n\nd\n\n(\n\n\"Magic\"\n\n,\n\nresponse\n\n.\n\nresult\n\n)\n\n18\n\nLog\n\n.\n\nd\n\n(\n\n\"Magic\"\n\n,\n\nresponse\n\n.\n\nresult\n\n)\n\n19\n\n}\n\nelse\n\n{\n\n19\n\n}\n\nelse\n\n{\n\n20\n\n// handle Error\n\n20\n\n// handle Error\n\n21\n\n}\n\n21\n\n}\n\n22\n\n}\n\n22\n\n}\n\n23\n\n}\n\n23\n\n}\n\n24\n\n}\n\n24\n\n}", "explanation": "This documentation section, titled `#Example`, is an example implementation of a Magic Labs embedded wallet in Android using the Kotlin programming language. It provides a basic template for integrating the Magic Wallet into an Android application.\n\nHere's what it does and its main purpose:\n\n**Overview**\n\nThe example code defines a custom `MagicActivity` class that extends the Android `AppCompatActivity`. This activity is used to integrate the Magic Wallet into the app.\n\n**Initialization**\n\nIn the `onCreate()` method, an instance of the Magic Wallet (`magic`) is created with a publishable API key. This API key is likely provided by Magic Labs for their embedded wallet solution.\n\n**Generating ID Tokens**\n\nThe code defines a function called `generateIdToken()` that assumes the user is logged in. It creates a configuration object for generating an ID token, which is then used to generate a token using the `magic.user.generateIdToken()` method.\n\n**Handling Responses**\n\nWhen the ID token generation completes, the code uses the `whenComplete()` method to handle two possible outcomes:\n\n1. If a response is generated (`response != null`), it logs the result using `Log.d()`.\n2. If an error occurs (`error != null`), it handles the error.\n\n**Main Purpose**\n\nThe main purpose of this example code is to demonstrate how to integrate the Magic Wallet into an Android application, specifically by generating ID tokens for users who are logged in. This can be used as a starting point for implementing authentication and authorization within an app that uses Magic Labs' embedded wallet solution.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/android#chunk-27", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\ngetMetadata\n\nRetrieves information for the authenticated user.\n\n#\n\n\u2022 None.", "explanation": "This documentation section explains a function called `getMetadata` that retrieves information about the currently authenticated user within an Android app. The main purpose of this function is to gather and return metadata (i.e., data) related to the user who has been authenticated by the Magic Labs embedded wallet SDK in the Android application context. This can include various details such as user ID, profile information, or other relevant authentication data without specifying it further.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/android#chunk-28", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 GetMetadataResponse: Response<UserMetadataResponse>() - The Completable containing the issuer, email, phone number, and cryptographic public address of the authenticated user.issuer (str): The Decentralized ID of the user. In server-side use-cases, we recommend this value to be used as the user ID in your own tables.email (str): Email address of the authenticated userphoneNumber (str): Phone number of the authenticated userpublicAddress (str): The authenticated user's public address (a.k.a.: public key). Currently, this value is associated with the Ethereum blockchain.\n\nGetMetadataResponse: Response<UserMetadataResponse>()\n\nCompletable\n\npublic address\n\n\u2022 issuer (str): The Decentralized ID of the user. In server-side use-cases, we recommend this value to be used as the user ID in your own tables.\n\n\u2022 email (str): Email address of the authenticated user\n\n\u2022 phoneNumber (str): Phone number of the authenticated user\n\n\u2022 publicAddress (str): The authenticated user's public address (a.k.a.: public key). Currently, this value is associated with the Ethereum blockchain.\n\nissuer\n\nemail\n\nphoneNumber\n\npublicAddress", "explanation": "**#Returns**\n\nThis documentation section explains what data is returned when a specific API call is made.\n\n**Purpose:**\n\nThe main purpose of this section is to inform developers about the structure and contents of the response they can expect from the `GetMetadataResponse` API call. It provides details on the type and format of the data that will be returned, including the user's metadata.\n\n**Key Points:**\n\n* The `GetMetadataResponse` call returns a `Completable` containing user metadata.\n* The metadata includes four fields:\n\t+ **issuer**: A unique Decentralized ID for the user (recommended to use as user ID in own tables).\n\t+ **email**: The authenticated user's email address.\n\t+ **phoneNumber**: The authenticated user's phone number.\n\t+ **publicAddress**: The user's public address, associated with the Ethereum blockchain.\n\nBy understanding what data is returned in the `GetMetadataResponse`, developers can properly handle and utilize this information in their applications.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/android#chunk-29", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\nclass\n\nMagicActivity\n\n:\n\nAppCompatActivity\n\n(\n\n)\n\n{\n\n01\n\nclass\n\nMagicActivity\n\n:\n\nAppCompatActivity\n\n(\n\n)\n\n{\n\n02\n\n02\n\n03\n\nlateinit\n\nvar\n\nmagic\n\n:\n\nMagic\n\n03\n\nlateinit\n\nvar\n\nmagic\n\n:\n\nMagic\n\n04\n\n04\n\n05\n\noverride\n\nfun\n\nonCreate\n\n(\n\nsavedInstanceState\n\n:\n\nBundle\n\n?\n\n)\n\n{\n\n05\n\noverride\n\nfun\n\nonCreate\n\n(\n\nsavedInstanceState\n\n:\n\nBundle\n\n?\n\n)\n\n{\n\n06\n\nsuper\n\n.\n\nonCreate\n\n(\n\nsavedInstanceState\n\n)\n\n06\n\nsuper\n\n.\n\nonCreate\n\n(\n\nsavedInstanceState\n\n)\n\n07\n\n07\n\n08\n\nmagic\n\n=\n\nMagic\n\n(\n\nthis\n\n,\n\n\"PUBLISHABLE_API_KEY\"\n\n)\n\n08\n\nmagic\n\n=\n\nMagic\n\n(\n\nthis\n\n,\n\n\"PUBLISHABLE_API_KEY\"\n\n)\n\n09\n\n}\n\n09\n\n}\n\n10\n\n10\n\n11\n\n// Assuming user is logged in\n\n11\n\n// Assuming user is logged in\n\n12\n\nfun\n\ngetMetadata\n\n(\n\nv\n\n:\n\nView\n\n)\n\n{\n\n12\n\nfun\n\ngetMetadata\n\n(\n\nv\n\n:\n\nView\n\n)\n\n{\n\n13\n\nval\n\ncompletable\n\n=\n\nmagic\n\n.\n\nuser\n\n.\n\ngetMetadata\n\n(\n\n)\n\n13\n\nval\n\ncompletable\n\n=\n\nmagic\n\n.\n\nuser\n\n.\n\ngetMetadata\n\n(\n\n)\n\n14\n\ncompletable\n\n.\n\nwhenComplete\n\n{\n\nresponse\n\n:\n\nGetMetadataResponse\n\n?\n\n,\n\nerror\n\n:\n\nThrowable\n\n?\n\n->\n\n14\n\ncompletable\n\n.\n\nwhenComplete\n\n{\n\nresponse\n\n:\n\nGetMetadataResponse\n\n?\n\n,\n\nerror\n\n:\n\nThrowable\n\n?\n\n->\n\n15\n\nif\n\n(\n\nresponse\n\n!=\n\nnull\n\n)\n\n{\n\n15\n\nif\n\n(\n\nresponse\n\n!=\n\nnull\n\n)\n\n{\n\n16\n\nLog\n\n.\n\nd\n\n(\n\n\"Magic\"\n\n,\n\n\"Email: \"\n\n+\n\nresponse\n\n.\n\nresult\n\n.\n\nemail\n\n)\n\n16\n\nLog\n\n.\n\nd\n\n(\n\n\"Magic\"\n\n,\n\n\"Email: \"\n\n+\n\nresponse\n\n.\n\nresult\n\n.\n\nemail\n\n)\n\n17\n\nLog\n\n.\n\nd\n\n(\n\n\"Magic\"\n\n,\n\n\"Issuer: \"\n\n+\n\nresponse\n\n.\n\nresult\n\n.\n\nissuer\n\n)\n\n17\n\nLog\n\n.\n\nd\n\n(\n\n\"Magic\"\n\n,\n\n\"Issuer: \"\n\n+\n\nresponse\n\n.\n\nresult\n\n.\n\nissuer\n\n)\n\n18\n\n}\n\nelse\n\n{\n\n18\n\n}\n\nelse\n\n{\n\n19\n\n// handle Error\n\n19\n\n// handle Error\n\n20\n\n}\n\n20\n\n}\n\n21\n\n}\n\n21\n\n}\n\n22\n\n}\n\n22\n\n}\n\n23\n\n}\n\n23\n\n}", "explanation": "This documentation section is about implementing a Magic Labs embedded wallet in an Android app.\n\nHere's what it's about and its main purpose:\n\n**What:** This code snippet shows how to integrate the Magic Labs embedded wallet into an Android app. It provides a basic implementation of the `MagicActivity` class, which serves as the entry point for the Magic wallet.\n\n**Main Purpose:**\n\n1. **Initialization**: The code initializes the Magic wallet by creating an instance of the `Magic` class and passing the app's context (`this`) and a publishable API key.\n2. **Metadata Retrieval**: The `getMetadata` function is used to retrieve metadata about the user, such as their email address and issuer information. This function uses the `magic.user.getMetadata()` method to make an asynchronous call to the Magic Labs API.\n\n**Key Points:**\n\n* The code assumes that the user is already logged in.\n* The `whenComplete` block handles the response from the API call, logging the email and issuer information if the response is not null.\n* If there's an error, it is handled by executing the code within the `error` block.\n\nOverall, this documentation section provides a basic example of how to integrate the Magic Labs embedded wallet into an Android app, focusing on initialization and metadata retrieval.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/android#chunk-30", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nisLoggedIn\n\nChecks if a user is currently logged in to the Magic SDK.\n\n#\n\n\u2022 None", "explanation": "**isLoggedIn - Overview**\n\nThe `isLoggedIn` function is a property of the Magic SDK for Android client-side SDKs. \n\n**Purpose:**\n\nIts main purpose is to check whether a user is currently logged in to the Magic SDK. This function does not require any arguments, making it simple to use.\n\nIn essence, `isLoggedIn` helps developers determine the current authentication state of a user, allowing them to handle various application scenarios such as conditional rendering, redirecting, or displaying specific content based on the user's login state.\n\nExample use case:\n\n- A developer can use `isLoggedIn` to conditionally render a 'login' or 'logout' button in their application based on the user's current authentication state.\n\nThe returned result of `isLoggedIn` will be a boolean value, typically `true` if the user is logged in, and `false` otherwise.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/android#chunk-31", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 IsLoggedInResponse: Response<Boolean>(): A boolean value indicating if a user is logged in\n\nIsLoggedInResponse: Response<Boolean>()", "explanation": "Let's break down the `#Returns` section from the Magic Labs documentation.\n\n**Summary:** This section defines the return type of an API method or function, specifically related to checking if a user is logged in on the client-side Android SDK.\n\n**Key point:** The `IsLoggedInResponse` object returns a boolean value indicating whether a user is currently logged in or not.\n\nIn simpler terms, this documentation snippet explains that when you call a specific API method ( likely `is_logged_in()` or similar) to check if a user is logged in on an Android device using the Magic Labs SDK, it will return a simple \"true\" or \"false\" answer (i.e., a boolean value).", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/android#chunk-32", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\nclass\n\nMagicActivity\n\n:\n\nAppCompatActivity\n\n(\n\n)\n\n{\n\n01\n\nclass\n\nMagicActivity\n\n:\n\nAppCompatActivity\n\n(\n\n)\n\n{\n\n02\n\n02\n\n03\n\nlateinit\n\nvar\n\nmagic\n\n:\n\nMagic\n\n03\n\nlateinit\n\nvar\n\nmagic\n\n:\n\nMagic\n\n04\n\n04\n\n05\n\noverride\n\nfun\n\nonCreate\n\n(\n\nsavedInstanceState\n\n:\n\nBundle\n\n?\n\n)\n\n{\n\n05\n\noverride\n\nfun\n\nonCreate\n\n(\n\nsavedInstanceState\n\n:\n\nBundle\n\n?\n\n)\n\n{\n\n06\n\nsuper\n\n.\n\nonCreate\n\n(\n\nsavedInstanceState\n\n)\n\n06\n\nsuper\n\n.\n\nonCreate\n\n(\n\nsavedInstanceState\n\n)\n\n07\n\n07\n\n08\n\nmagic\n\n=\n\nMagic\n\n(\n\nthis\n\n,\n\n\"PUBLISHABLE_API_KEY\"\n\n)\n\n08\n\nmagic\n\n=\n\nMagic\n\n(\n\nthis\n\n,\n\n\"PUBLISHABLE_API_KEY\"\n\n)\n\n09\n\n}\n\n09\n\n}\n\n10\n\n10\n\n11\n\n// Assuming user is logged in\n\n11\n\n// Assuming user is logged in\n\n12\n\nfun\n\nisLoggedIn\n\n(\n\nv\n\n:\n\nView\n\n)\n\n{\n\n12\n\nfun\n\nisLoggedIn\n\n(\n\nv\n\n:\n\nView\n\n)\n\n{\n\n13\n\nval\n\ncompletable\n\n=\n\nmagic\n\n.\n\nuser\n\n.\n\nisLoggedIn\n\n(\n\n)\n\n13\n\nval\n\ncompletable\n\n=\n\nmagic\n\n.\n\nuser\n\n.\n\nisLoggedIn\n\n(\n\n)\n\n14\n\ncompletable\n\n.\n\nwhenComplete\n\n{\n\nresponse\n\n:\n\nIsLoggedInResponse\n\n?\n\n,\n\nerror\n\n:\n\nThrowable\n\n?\n\n->\n\n14\n\ncompletable\n\n.\n\nwhenComplete\n\n{\n\nresponse\n\n:\n\nIsLoggedInResponse\n\n?\n\n,\n\nerror\n\n:\n\nThrowable\n\n?\n\n->\n\n15\n\nif\n\n(\n\nresponse\n\n!=\n\nnull\n\n&&\n\nresponse\n\n.\n\nresult\n\n)\n\n{\n\n15\n\nif\n\n(\n\nresponse\n\n!=\n\nnull\n\n&&\n\nresponse\n\n.\n\nresult\n\n)\n\n{\n\n16\n\nLog\n\n.\n\nd\n\n(\n\n\"Magic\"\n\n,\n\n\"You're Logged In\"\n\n)\n\n16\n\nLog\n\n.\n\nd\n\n(\n\n\"Magic\"\n\n,\n\n\"You're Logged In\"\n\n)\n\n17\n\n}\n\n17\n\n}\n\n18\n\nif\n\n(\n\nerror\n\n!=\n\nnull\n\n)\n\n{\n\n18\n\nif\n\n(\n\nerror\n\n!=\n\nnull\n\n)\n\n{\n\n19\n\n// handle Error\n\n19\n\n// handle Error\n\n20\n\n}\n\n20\n\n}\n\n21\n\n}\n\n21\n\n}\n\n22\n\n}\n\n22\n\n}\n\n23\n\n}\n\n23\n\n}", "explanation": "This documentation section is titled `#Example` and it appears to be a code snippet in Kotlin, a programming language used for Android app development.\n\nThe main purpose of this example is to demonstrate how to use the Magic Labs embedded wallet SDK to check if a user is logged in. Here's a breakdown of what the code does:\n\n1. It creates an instance of the `Magic` class, which is part of the Magic Labs SDK.\n2. It uses the `isLoggedIn()` method to check if the user is logged in.\n3. The method returns a `Completable` object, which is a Kotlin class that represents a future or a promise.\n4. When the `Completable` object completes, it executes the code inside the `whenComplete()` block.\n5. If the response from the Magic Labs SDK indicates that the user is logged in (i.e., `response.result != null`), it logs a message saying \"You're Logged In\".\n6. If there's an error, it logs a message saying \"Error: [error.message]\".\n\nIn summary, this example shows how to use the Magic Labs embedded wallet SDK to check if a user is logged in and handle any errors that may occur.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/android#chunk-33", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nlogout\n\nLogs out the currently authenticated Magic user.\n\n#\n\n\u2022 None", "explanation": "The `#logout` section in the Magic Labs embedded wallet documentation refers to a method that allows users to log out of their Magic account.\n\n**Main Purpose:**\n\nThe primary purpose of this function is to securely terminate an active user session, ensuring that the user's login credentials and access tokens are properly removed from the system.\n\n**Key Point:**\n\nThere are no arguments required for this method, as indicated by the \"None\" entry in the documentation. This implies that calling `#logout` is a straightforward process that doesn't involve any input parameters.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/android#chunk-34", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 LogoutResponse: Response<Boolean>(): A boolean value indicating if a user has been logged out.\n\nLogoutResponse: Response<Boolean>()", "explanation": "This documentation section explains the `LogoutResponse` class.\n\n**What is it about?**\n\nThe `LogoutResponse` class represents the response received from the Magic Labs embedded wallet when a user attempts to log out. It's essentially a way to confirm whether the logout operation was successful or not.\n\n**Main purpose:**\n\nThe main purpose of the `LogoutResponse` class is to provide a boolean value indicating whether the user has been logged out successfully (`true`) or not (`false`). This allows your application to handle the logout result and perform any necessary actions, such as updating the user's status or displaying a success message.\n\nIn simple terms, this response helps you confirm if the user has indeed logged out of their Magic Labs embedded wallet account.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/android#chunk-35", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\nclass\n\nMagicActivity\n\n:\n\nAppCompatActivity\n\n(\n\n)\n\n{\n\n01\n\nclass\n\nMagicActivity\n\n:\n\nAppCompatActivity\n\n(\n\n)\n\n{\n\n02\n\n02\n\n03\n\nlateinit\n\nvar\n\nmagic\n\n:\n\nMagic\n\n03\n\nlateinit\n\nvar\n\nmagic\n\n:\n\nMagic\n\n04\n\n04\n\n05\n\noverride\n\nfun\n\nonCreate\n\n(\n\nsavedInstanceState\n\n:\n\nBundle\n\n?\n\n)\n\n{\n\n05\n\noverride\n\nfun\n\nonCreate\n\n(\n\nsavedInstanceState\n\n:\n\nBundle\n\n?\n\n)\n\n{\n\n06\n\nsuper\n\n.\n\nonCreate\n\n(\n\nsavedInstanceState\n\n)\n\n06\n\nsuper\n\n.\n\nonCreate\n\n(\n\nsavedInstanceState\n\n)\n\n07\n\n07\n\n08\n\nmagic\n\n=\n\nMagic\n\n(\n\nthis\n\n,\n\n\"PUBLISHABLE_API_KEY\"\n\n)\n\n08\n\nmagic\n\n=\n\nMagic\n\n(\n\nthis\n\n,\n\n\"PUBLISHABLE_API_KEY\"\n\n)\n\n09\n\n}\n\n09\n\n}\n\n10\n\n10\n\n11\n\n// Assuming user is logged in\n\n11\n\n// Assuming user is logged in\n\n12\n\nfun\n\nlogout\n\n(\n\nv\n\n:\n\nView\n\n)\n\n{\n\n12\n\nfun\n\nlogout\n\n(\n\nv\n\n:\n\nView\n\n)\n\n{\n\n13\n\nval\n\ncompletable\n\n=\n\nmagic\n\n.\n\nuser\n\n.\n\nlogout\n\n(\n\n)\n\n13\n\nval\n\ncompletable\n\n=\n\nmagic\n\n.\n\nuser\n\n.\n\nlogout\n\n(\n\n)\n\n14\n\ncompletable\n\n.\n\nwhenComplete\n\n{\n\nresponse\n\n:\n\nLogoutResponse\n\n?\n\n,\n\nerror\n\n:\n\nThrowable\n\n?\n\n->\n\n14\n\ncompletable\n\n.\n\nwhenComplete\n\n{\n\nresponse\n\n:\n\nLogoutResponse\n\n?\n\n,\n\nerror\n\n:\n\nThrowable\n\n?\n\n->\n\n15\n\nif\n\n(\n\nresponse\n\n!=\n\nnull\n\n&&\n\nresponse\n\n.\n\nresult\n\n)\n\n{\n\n15\n\nif\n\n(\n\nresponse\n\n!=\n\nnull\n\n&&\n\nresponse\n\n.\n\nresult\n\n)\n\n{\n\n16\n\nLog\n\n.\n\nd\n\n(\n\n\"Magic\"\n\n,\n\n\"You're logged out!\"\n\n)\n\n16\n\nLog\n\n.\n\nd\n\n(\n\n\"Magic\"\n\n,\n\n\"You're logged out!\"\n\n)\n\n17\n\n}\n\n17\n\n}\n\n18\n\nif\n\n(\n\nerror\n\n!=\n\nnull\n\n)\n\n{\n\n18\n\nif\n\n(\n\nerror\n\n!=\n\nnull\n\n)\n\n{\n\n19\n\n// handle Error\n\n19\n\n// handle Error\n\n20\n\n}\n\n20\n\n}\n\n21\n\n}\n\n21\n\n}\n\n22\n\n}\n\n22\n\n}\n\n23\n\n}\n\n23\n\n}", "explanation": "This documentation section is an example code snippet in Kotlin, specifically for an Android app using the Magic Labs embedded wallet SDK. Here's a breakdown of what it is and its main purpose:\n\n**What it is:**\n\nThis is an example implementation of a `MagicActivity` class that extends `AppCompatActivity`. The activity is responsible for handling user authentication and logout functionality.\n\n**Main Purpose:**\n\nThe primary goal of this code snippet is to demonstrate how to integrate the Magic Labs embedded wallet SDK into an Android app. Specifically, it shows how to:\n\n1. Initialize the Magic SDK with a publishable API key.\n2. Handle user login (though not implemented in this example).\n3. Implement a logout functionality that uses the `magic.user.logout()` method to terminate the user session.\n\n**Key points:**\n\n* The `MagicActivity` class is initialized with a publishable API key, which is used to authenticate users.\n* The `logout` function uses the `magic.user.logout()` method to terminate the user session. This is done by creating a completable (a Kotlin equivalent of a Future) that completes when the logout operation is finished.\n* If the logout operation is successful, a log message is printed indicating that the user has been logged out.\n* If an error occurs during logout, the error is caught and handled accordingly.\n\nOverall, this code snippet provides a basic example of how to integrate the Magic Labs embedded wallet SDK into an Android app, focusing on authentication and logout functionality.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/android#chunk-36", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nshowSettings\n\nDisplays an iframe with the current user\u2019s settings. Allows for users to update their email address, enable multi-factor authentication, and add a recovery factor.\n\nOnly available with Dedicated Wallet. Access to MFA and account recovery require paid add-ons.\n\nMFA\n\naccount recovery\n\n#\n\n\u2022 page? (String): Optional argument to deeplink to a specific page ('mfa' | 'update-email' | 'recovery')\n\npage?\n\n'mfa' | 'update-email' | 'recovery'", "explanation": "Let's break down the `#showSettings - #Arguments` section of the Magic Labs embedded wallet documentation.\n\n**What it is:**\nThe `showSettings` function displays an iframe (a self-contained web page) with the current user's settings in the Magic Labs wallet. This allows users to update their email address, enable multi-factor authentication (MFA), and add a recovery factor.\n\n**Main purpose:**\nThe main purpose of this feature is to provide users with a convenient way to manage their account settings directly within the wallet, without needing to access separate pages or apps.\n\n**Key points:**\n\n* Available only with Dedicated Wallet\n* MFA and account recovery require paid add-ons\n* `page?` argument allows for deep-linking to specific settings pages (MFA, email update, or recovery)\n\nIn summary, `showSettings` is a feature that enables users to access and manage their account settings within the Magic Labs wallet, with optional deep-linking capabilities.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/android#chunk-37", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 Promise which resolves when the user closes the window\n\nPromise", "explanation": "The documentation section '#Returns' explains what happens when an action is completed in the Magic Labs embedded wallet.\n\nThe main purpose of this section is to inform developers that when the user closes the embedded wallet window, the associated action will resolve with a 'Promise'. In other words, '#Returns' indicates the expected outcome or result of a specific action or function.\n\nIn the context of the provided snippet:\n\n\u2022 A 'Promise' is being returned, which is a result object that is used to handle asynchronous operations in JavaScript.\n\u2022 This 'Promise' resolves when the user closes the window, meaning that when the user exits the embedded wallet, the associated code or callback functions will be executed.\n\nThis information helps developers understand the behavior of the embedded wallet and how to properly handle actions after the user closes the window.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/android#chunk-38", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\nclass\n\nMagicActivity\n\n:\n\nAppCompatActivity\n\n(\n\n)\n\n{\n\n01\n\nclass\n\nMagicActivity\n\n:\n\nAppCompatActivity\n\n(\n\n)\n\n{\n\n02\n\n02\n\n03\n\nlateinit\n\nvar\n\nmagic\n\n:\n\nMagic\n\n03\n\nlateinit\n\nvar\n\nmagic\n\n:\n\nMagic\n\n04\n\n04\n\n05\n\noverride\n\nfun\n\nonCreate\n\n(\n\nsavedInstanceState\n\n:\n\nBundle\n\n?\n\n)\n\n{\n\n05\n\noverride\n\nfun\n\nonCreate\n\n(\n\nsavedInstanceState\n\n:\n\nBundle\n\n?\n\n)\n\n{\n\n06\n\nsuper\n\n.\n\nonCreate\n\n(\n\nsavedInstanceState\n\n)\n\n06\n\nsuper\n\n.\n\nonCreate\n\n(\n\nsavedInstanceState\n\n)\n\n07\n\n07\n\n08\n\nmagic\n\n=\n\nMagic\n\n(\n\nthis\n\n,\n\n\"PUBLISHABLE_API_KEY\"\n\n)\n\n08\n\nmagic\n\n=\n\nMagic\n\n(\n\nthis\n\n,\n\n\"PUBLISHABLE_API_KEY\"\n\n)\n\n09\n\n}\n\n09\n\n}\n\n10\n\n10\n\n11\n\n// Assuming user is logged in\n\n11\n\n// Assuming user is logged in\n\n12\n\nfun\n\nshowSettings\n\n(\n\nv\n\n:\n\nView\n\n)\n\n{\n\n12\n\nfun\n\nshowSettings\n\n(\n\nv\n\n:\n\nView\n\n)\n\n{\n\n13\n\nval\n\nresult\n\n=\n\nmagic\n\n.\n\nuser\n\n.\n\nshowSettings\n\n(\n\n)\n\n13\n\nval\n\nresult\n\n=\n\nmagic\n\n.\n\nuser\n\n.\n\nshowSettings\n\n(\n\n)\n\n14\n\nresult\n\n.\n\nwhenComplete\n\n{\n\nresponse\n\n:\n\nGetMetadataResponse\n\n?\n\n,\n\nerror\n\n:\n\nThrowable\n\n?\n\n->\n\n14\n\nresult\n\n.\n\nwhenComplete\n\n{\n\nresponse\n\n:\n\nGetMetadataResponse\n\n?\n\n,\n\nerror\n\n:\n\nThrowable\n\n?\n\n->\n\n15\n\nif\n\n(\n\nerror\n\n!=\n\nnull\n\n)\n\n{\n\n15\n\nif\n\n(\n\nerror\n\n!=\n\nnull\n\n)\n\n{\n\n16\n\nLog\n\n.\n\nd\n\n(\n\n\"error\"\n\n,\n\nerror\n\n.\n\nlocalizedMessage\n\n)\n\n16\n\nLog\n\n.\n\nd\n\n(\n\n\"error\"\n\n,\n\nerror\n\n.\n\nlocalizedMessage\n\n)\n\n17\n\n}\n\n17\n\n}\n\n18\n\nif\n\n(\n\nresponse\n\n!=\n\nnull\n\n)\n\n{\n\n18\n\nif\n\n(\n\nresponse\n\n!=\n\nnull\n\n)\n\n{\n\n19\n\ntabActivity\n\n.\n\ntoastAsync\n\n(\n\n\"Email: \"\n\n+\n\nresponse\n\n.\n\nresult\n\n.\n\nemail\n\n+\n\n\"\\n\"\n\n+\n\n\"issuer: \"\n\n+\n\nresponse\n\n.\n\nresult\n\n.\n\nissuer\n\n+\n\n\"\\n\"\n\n)\n\n19\n\ntabActivity\n\n.\n\ntoastAsync\n\n(\n\n\"Email: \"\n\n+\n\nresponse\n\n.\n\nresult\n\n.\n\nemail\n\n+\n\n\"\\n\"\n\n+\n\n\"issuer: \"\n\n+\n\nresponse\n\n.\n\nresult\n\n.\n\nissuer\n\n+\n\n\"\\n\"\n\n)\n\n20\n\n}\n\n20\n\n}\n\n21\n\n}\n\n21\n\n}\n\n22\n\n}\n\n22\n\n}\n\n23\n\n}\n\n23\n\n}", "explanation": "This documentation section is titled '#Example' and it appears to be a code snippet written in Kotlin, specifically for an Android application. The main purpose of this code is to demonstrate how to use the Magic Labs embedded wallet SDK.\n\nHere's a breakdown of what the code does:\n\n1. It defines a `MagicActivity` class that extends `AppCompatActivity`.\n2. Inside the activity, it initializes a `magic` object using the `Magic` constructor, passing in the current activity (`this`) and a publishable API key.\n3. The `showSettings` function is called, which assumes the user is logged in.\n4. Within `showSettings`, it uses the `magic` object to show settings for the user.\n5. The result of showing settings is awaited using `whenComplete`.\n6. If there's an error, it logs the error message.\n7. If there's a response (i.e., metadata), it shows a toast notification with the email and issuer details.\n\nIn summary, this code snippet demonstrates how to use the Magic Labs embedded wallet SDK to show settings for a logged-in user, retrieve metadata, and display relevant information in a toast notification.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/android#chunk-39", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nupdatePhoneNumber\n\nInitiates the update phone number flow that allows a user to change their phone number.\n\n#\n\n\u2022 context (Context): Global information about application environment\n\ncontext\n\n\u2022 configuration:phoneNumber (str): The user phone number to update withshowUI (boolean): If true, show an out-of-the-box pending UI while the request is in flight\n\nconfiguration\n\n\u2022 phoneNumber (str): The user phone number to update with\n\n\u2022 showUI (boolean): If true, show an out-of-the-box pending UI while the request is in flight\n\nphoneNumber\n\nshowUI\n\ntrue", "explanation": "**#updatePhoneNumber - #Arguments**\n\nThis documentation section explains how to initiate a process that allows users to change their phone number using the Magic Labs embedded wallet on Android.\n\n**Main Purpose:**\n\nThe `updatePhoneNumber` function is designed to start a flow that enables users to update their phone number. This is likely used for authentication or verification purposes, allowing users to replace an old phone number with a new one in the Magic Labs system.\n\n**Key Parameters:**\n\nThe function takes three parameters:\n\n1. **context (Context):** Global information about the application environment.\n2. **configuration:** An object with two properties:\n\t* **phoneNumber (str):** The new phone number to update with.\n\t* **showUI (boolean):** A flag indicating whether to display a pending UI while the request is in flight.\n\nBy calling `updatePhoneNumber` and passing in these parameters, developers can initiate the process of updating a user's phone number within the Magic Labs embedded wallet on Android.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/android#chunk-40", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 PromiEvent<boolean>: The promise resolves with a true boolean value if update email is successful and rejects with a specific error code if the request fails\n\nPromiEvent<boolean>", "explanation": "**Returns Section Explanation**\n\nThe `#Returns` section of the Magic Labs documentation explains how to handle the result of an API call, specifically updating an email address.\n\n**Key Point**: The API returns a promise that resolves with a boolean value indicating whether the email update was successful or not.\n\n**In Simple Terms**:\n\nWhen you send a request to update an email address using the Magic Labs SDK, it will either succeed (return `true`) or fail (return an error code). This section of the documentation tells you how to check if the update was successful and what to do if it wasn't.\n\n**Main Purpose**:\n\nThe main purpose of this section is to provide a clear understanding of how to handle the outcome of an email update request, making it easier for developers to write robust and reliable code using the Magic Labs SDK.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/android#chunk-41", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\nfun\n\nupdateSMS\n\n(\n\nv\n\n:\n\nView\n\n)\n\n{\n\n01\n\nfun\n\nupdateSMS\n\n(\n\nv\n\n:\n\nView\n\n)\n\n{\n\n02\n\nval\n\ncompletable\n\n=\n\nmagic\n\n.\n\nuser\n\n.\n\nupdatePhoneNumber\n\n(\n\nthis\n\n.\n\nrequireActivity\n\n(\n\n)\n\n)\n\n02\n\nval\n\ncompletable\n\n=\n\nmagic\n\n.\n\nuser\n\n.\n\nupdatePhoneNumber\n\n(\n\nthis\n\n.\n\nrequireActivity\n\n(\n\n)\n\n)\n\n03\n\ncompletable\n\n.\n\nwhenComplete\n\n{\n\nupdatePhoneNumberResponse\n\n:\n\nUpdatePhoneNumberResponse\n\n?\n\n,\n\nerror\n\n:\n\nThrowable\n\n?\n\n->\n\n03\n\ncompletable\n\n.\n\nwhenComplete\n\n{\n\nupdatePhoneNumberResponse\n\n:\n\nUpdatePhoneNumberResponse\n\n?\n\n,\n\nerror\n\n:\n\nThrowable\n\n?\n\n->\n\n04\n\nif\n\n(\n\nerror\n\n!=\n\nnull\n\n)\n\n{\n\n04\n\nif\n\n(\n\nerror\n\n!=\n\nnull\n\n)\n\n{\n\n05\n\nLog\n\n.\n\nd\n\n(\n\n\"error\"\n\n,\n\nerror\n\n.\n\nlocalizedMessage\n\n)\n\n05\n\nLog\n\n.\n\nd\n\n(\n\n\"error\"\n\n,\n\nerror\n\n.\n\nlocalizedMessage\n\n)\n\n06\n\n}\n\n06\n\n}\n\n07\n\nif\n\n(\n\nupdatePhoneNumberResponse\n\n!=\n\nnull\n\n)\n\n{\n\n07\n\nif\n\n(\n\nupdatePhoneNumberResponse\n\n!=\n\nnull\n\n)\n\n{\n\n08\n\nLog\n\n.\n\nd\n\n(\n\n\"Update phone number result\"\n\n,\n\nupdatePhoneNumberResponse\n\n.\n\nresult\n\n.\n\ntoString\n\n(\n\n)\n\n)\n\n08\n\nLog\n\n.\n\nd\n\n(\n\n\"Update phone number result\"\n\n,\n\nupdatePhoneNumberResponse\n\n.\n\nresult\n\n.\n\ntoString\n\n(\n\n)\n\n)\n\n09\n\n}\n\n09\n\n}\n\n10\n\n}\n\n10\n\n}\n\n11\n\n}\n\n11\n\n}", "explanation": "This documentation section is about a function called `updateSMS` in an Android client-side SDK. The main purpose of this function is to update the phone number associated with a Magic Labs user.\n\nHere's a breakdown of what the code does:\n\n1. It calls the `updatePhoneNumber` method on the `magic.user` object, passing the current activity as an argument.\n2. This method returns a `Completable`, which is a type of observable that completes when it's finished processing.\n3. The `whenComplete` block is used to handle two possible scenarios:\n\t* If there's an error (`Throwable`) associated with the update process, it logs an error message using the `Log.d` function.\n\t* If the update is successful (i.e., `updatePhoneNumberResponse` is not null), it logs a success message using the `Log.d` function.\n\nIn summary, this code updates the phone number associated with a Magic Labs user and handles any errors that may occur during the process.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/android#chunk-42", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nrecoverAccount\n\nInitiates the account recovery flow that allows a user to recover their account using their email address.\n\n#\n\n\u2022 email (str): The user email address to recover account with\n\nemail", "explanation": "The `#recoverAccount` section is a part of the Magic Labs embedded wallet documentation, specifically describing an API function or method called `recoverAccount`.\n\n**Purpose:**\nThe main purpose of this feature is to initiate the account recovery process for a user who has forgotten their login credentials. It allows users to recover their account by using their registered email address.\n\n**Key Point:**\nIn this context, the `email` parameter (a string) is used to specify the user's email address associated with their Magic Labs account, which will be used to initiate the recovery flow.\n\nIn essence, this API function enables users to regain access to their Magic Labs account by providing their email address, allowing them to reset their credentials and gain back control over their account.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/android#chunk-43", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 PromiEvent<boolean>: The promise resolves with a true boolean value if the account recovery is successful and rejects with a specific error code if the request fails\n\nPromiEvent<boolean>", "explanation": "The `#Returns` section in the Magic Labs embedded wallet documentation refers to the expected outcome or response of a specific function or method call.\n\nIn this case, the `#Returns` section describes that the function or method will return a `PromiEvent` object containing a boolean value (`true` or `false`). The boolean value indicates the result of an account recovery operation.\n\nThe main purpose of this `#Returns` section is to inform developers:\n\n* What type of response to expect from the function or method (a `PromiEvent` object with a boolean value)\n* The possible values returned by the function or method (`true` for a successful account recovery, or an error code if the request fails)\n\nWith this information, developers can properly handle the response and integrate the Magic Labs embedded wallet functionality into their Android application.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/android#chunk-44", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\nprivate\n\nfun\n\nrecoverAccount\n\n(\n\nv\n\n:\n\nView\n\n)\n\n{\n\n01\n\nprivate\n\nfun\n\nrecoverAccount\n\n(\n\nv\n\n:\n\nView\n\n)\n\n{\n\n02\n\nval\n\nemail\n\n=\n\nfindViewById\n\n<\n\nEditText\n\n>\n\n(\n\nR\n\n.\n\nid\n\n.\n\nrecovery_email_input\n\n)\n\n02\n\nval\n\nemail\n\n=\n\nfindViewById\n\n<\n\nEditText\n\n>\n\n(\n\nR\n\n.\n\nid\n\n.\n\nrecovery_email_input\n\n)\n\n03\n\nval\n\nconfiguration\n\n=\n\nRecoverAccountConfiguration\n\n(\n\nemail\n\n=\n\nemail\n\n.\n\ntext\n\n.\n\ntoString\n\n(\n\n)\n\n)\n\n03\n\nval\n\nconfiguration\n\n=\n\nRecoverAccountConfiguration\n\n(\n\nemail\n\n=\n\nemail\n\n.\n\ntext\n\n.\n\ntoString\n\n(\n\n)\n\n)\n\n04\n\nval\n\nresult\n\n=\n\n(\n\nmagic\n\nas\n\nMagic\n\n)\n\n.\n\nuser\n\n.\n\nrecoverAccount\n\n(\n\nthis\n\n,\n\nconfiguration\n\n)\n\n04\n\nval\n\nresult\n\n=\n\n(\n\nmagic\n\nas\n\nMagic\n\n)\n\n.\n\nuser\n\n.\n\nrecoverAccount\n\n(\n\nthis\n\n,\n\nconfiguration\n\n)\n\n05\n\nresult\n\n.\n\nwhenComplete\n\n{\n\nresponse\n\n:\n\nRecoverAccountResponse\n\n?\n\n,\n\nerror\n\n:\n\nThrowable\n\n?\n\n->\n\n05\n\nresult\n\n.\n\nwhenComplete\n\n{\n\nresponse\n\n:\n\nRecoverAccountResponse\n\n?\n\n,\n\nerror\n\n:\n\nThrowable\n\n?\n\n->\n\n06\n\nif\n\n(\n\nerror\n\n!=\n\nnull\n\n)\n\n{\n\n06\n\nif\n\n(\n\nerror\n\n!=\n\nnull\n\n)\n\n{\n\n07\n\nLog\n\n.\n\nd\n\n(\n\n\"error\"\n\n,\n\nerror\n\n.\n\nlocalizedMessage\n\n)\n\n07\n\nLog\n\n.\n\nd\n\n(\n\n\"error\"\n\n,\n\nerror\n\n.\n\nlocalizedMessage\n\n)\n\n08\n\n}\n\n08\n\n}\n\n09\n\nif\n\n(\n\nresponse\n\n!=\n\nnull\n\n)\n\n{\n\n09\n\nif\n\n(\n\nresponse\n\n!=\n\nnull\n\n)\n\n{\n\n10\n\nvar\n\nresult\n\n=\n\nresponse\n\n.\n\nresult\n\n10\n\nvar\n\nresult\n\n=\n\nresponse\n\n.\n\nresult\n\n11\n\nLog\n\n.\n\nd\n\n(\n\n\"recover account resp result\"\n\n,\n\nresult\n\n.\n\ntoString\n\n(\n\n)\n\n)\n\n11\n\nLog\n\n.\n\nd\n\n(\n\n\"recover account resp result\"\n\n,\n\nresult\n\n.\n\ntoString\n\n(\n\n)\n\n)\n\n12\n\nif\n\n(\n\nresult\n\n!=\n\nnull\n\n)\n\n{\n\n12\n\nif\n\n(\n\nresult\n\n!=\n\nnull\n\n)\n\n{\n\n13\n\nstartTabActivity\n\n(\n\n)\n\n13\n\nstartTabActivity\n\n(\n\n)\n\n14\n\n}\n\nelse\n\n{\n\n14\n\n}\n\nelse\n\n{\n\n15\n\ntoastAsync\n\n(\n\n\"RecoverAccount error, consider using a different email\"\n\n)\n\n15\n\ntoastAsync\n\n(\n\n\"RecoverAccount error, consider using a different email\"\n\n)\n\n16\n\n}\n\n16\n\n}\n\n17\n\n}\n\n17\n\n}\n\n18\n\n}\n\n18\n\n}\n\n19\n\n}\n\n19\n\n}", "explanation": "This documentation section is titled \"#Example\" and it's about a specific implementation of the `recoverAccount` method in an Android application.\n\n**Main Purpose:**\n\nThe main purpose of this code snippet is to demonstrate how to implement a \"recover account\" feature using the Magic Labs embedded wallet SDK. This feature allows users to recover their account by providing an email address associated with their account.\n\n**Key Points:**\n\n1. The `recoverAccount` method takes a `View` object as a parameter, which is likely a UI component such as a button or text input.\n2. The method uses the Magic Labs SDK's `RecoverAccountConfiguration` class to configure the recovery process.\n3. The method calls the `user.recoverAccount()` method of the Magic Labs SDK to initiate the recovery process.\n4. The method handles two possible scenarios:\n\t* If an error occurs during the recovery process, it logs the error message and displays a toast notification with an error message.\n\t* If the recovery process is successful, it logs the result and starts a tab activity using the `startTabActivity()` method.\n5. If the result is null or not available, it displays a toast notification with an error message.\n\n**Context:**\n\nThis code snippet is likely used in a Android application that integrates the Magic Labs embedded wallet SDK to provide a \"recover account\" feature for users. The application would display a UI component (e.g., button or text input) that calls this method when clicked, allowing users to initiate the recovery process.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/android#chunk-45", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nrevealPrivateKey\n\nDisplays an iframe revealing the current user\u2019s private key. Allows for users to take their private key to another wallet. Neither Magic nor the developer can see this key; only the end user can.\n\n#\n\n\u2022 None", "explanation": "The `#revealPrivateKey` section in the Magic Labs documentation is about a feature that allows users to access and display their private key within an iframe, which is a separate HTML page or frame embedded within another web page. This feature serves several purposes:\n\n1.  **User Control**: By displaying the user's private key, this feature gives them full control over their wallet information.\n2.  **Key Portability**: It allows users to easily take their private key to another wallet if they wish to switch or for any other reason.\n3.  **Security Transparency**: This process is designed with security in mind; neither Magic nor the developer can access or see the user's private key during this operation.\n\nIn summary, `#revealPrivateKey` is a feature that securely allows users to access and manage their private keys within an embedded iframe.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/android#chunk-46", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 Promise which resolves when the user closes the window\n\nPromise", "explanation": "### Understanding the '#Returns' Section\n\nThe '#Returns' section in the Magic Labs embedded wallet documentation explains the result or outcome that occurs when a specific function or method is executed. \n\nIn this particular case, the section indicates that the function or method in question returns a Promise. A Promise is a result object that is used to handle asynchronous operations.\n\n### Main Purpose\n\nThe main purpose of the '#Returns' section is to inform developers about the expected outcome of a function or method, enabling them to write code that can effectively handle the returned value.\n\nIn this instance, the Promise resolves when the user closes the window. This means that the code execution will wait until the window is closed before proceeding further, allowing developers to execute actions or methods after the window closure.\n\nIn simpler terms, this section serves as a guide, helping developers anticipate and handle the outcome of a specific function or method in their code.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/android#chunk-47", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\nfun\n\nrevealPrivateKey\n\n(\n\nv\n\n:\n\nView\n\n)\n\n{\n\n01\n\nfun\n\nrevealPrivateKey\n\n(\n\nv\n\n:\n\nView\n\n)\n\n{\n\n02\n\nval\n\nresult\n\n=\n\nmagic\n\n.\n\nuser\n\n.\n\nrevealPrivateKey\n\n(\n\nthis\n\n.\n\nrequireContext\n\n(\n\n)\n\n)\n\n02\n\nval\n\nresult\n\n=\n\nmagic\n\n.\n\nuser\n\n.\n\nrevealPrivateKey\n\n(\n\nthis\n\n.\n\nrequireContext\n\n(\n\n)\n\n)\n\n03\n\nresult\n\n.\n\nwhenComplete\n\n{\n\nresponse\n\n:\n\nRevealPrivateKeyResponse\n\n?\n\n,\n\nerror\n\n:\n\nThrowable\n\n?\n\n->\n\n03\n\nresult\n\n.\n\nwhenComplete\n\n{\n\nresponse\n\n:\n\nRevealPrivateKeyResponse\n\n?\n\n,\n\nerror\n\n:\n\nThrowable\n\n?\n\n->\n\n04\n\nif\n\n(\n\nerror\n\n!=\n\nnull\n\n)\n\n{\n\n04\n\nif\n\n(\n\nerror\n\n!=\n\nnull\n\n)\n\n{\n\n05\n\nLog\n\n.\n\nd\n\n(\n\n\"error\"\n\n,\n\nerror\n\n.\n\nlocalizedMessage\n\n)\n\n05\n\nLog\n\n.\n\nd\n\n(\n\n\"error\"\n\n,\n\nerror\n\n.\n\nlocalizedMessage\n\n)\n\n06\n\n}\n\n06\n\n}\n\n07\n\nif\n\n(\n\nresponse\n\n!=\n\nnull\n\n)\n\n{\n\n07\n\nif\n\n(\n\nresponse\n\n!=\n\nnull\n\n)\n\n{\n\n08\n\ntabActivity\n\n.\n\ntoastAsync\n\n(\n\n\"Key revealed\"\n\n)\n\n08\n\ntabActivity\n\n.\n\ntoastAsync\n\n(\n\n\"Key revealed\"\n\n)\n\n09\n\n}\n\n09\n\n}\n\n10\n\n}\n\n10\n\n}\n\n11\n\n}\n\n11\n\n}", "explanation": "This documentation section is about a function called `revealPrivateKey` in the Magic Labs Android SDK.\n\n**Main Purpose:**\nThe main purpose of this function is to reveal or show a private key associated with a user's wallet, stored on the client-side (i.e., on the device itself).\n\n**Key Points:**\n\n* The function takes a `View` parameter (`v`) which is likely used as a context or container for displaying the result.\n* It calls the `revealPrivateKey` method of the Magic Labs SDK's `user` object, passing in the current app context using `requireContext`.\n* The response from this method is handled using a `whenComplete` block, which checks if there was an error (`Throwable`) or a successful response (`RevealPrivateKeyResponse`).\n* If an error occurs, it logs an error message with the localized exception message.\n* If the response is successful (i.e., not null), it displays a toast notification on the screen saying \"Key revealed\".\n\nIn summary, this function is used to reveal or show a private key associated with a user's wallet in the Magic Labs Android SDK.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/android#chunk-48", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nThis module requires an enterprise agreement. For more details click here.\n\nclick here\n\nThe OpenID Module and it's members are accessible on the Magic SDK instance by the openid property.\n\nopenid\n\nTo use the OpenID Module in your application, install :magic:ext:oidc along with magic-android.\n\n:magic:ext:oidc\n\nmagic-android\n\nCopy\n\n01\n\n# In build.gradle\n\n01\n\n# In build.gradle\n\n02\n\nimplementation project(':magic:core')\n\n02\n\nimplementation project(':magic:core')\n\n03\n\nimplementation project(':magic:ext:oidc')\n\n03\n\nimplementation project(':magic:ext:oidc')\n\n04\n\n04\n\n05\n\nmagic.openid;\n\n05\n\nmagic.openid;\n\n06\n\nmagic.openid.loginWithOIDC;\n\n06\n\nmagic.openid.loginWithOIDC;\n\n#\n\nloginWithOIDC\n\nAuthenticate users via your preferred OIDC client.\n\nOnly available with Dedicated Wallet.\n\n#\n\n\u2022 jwt (String): The OIDC token from your identity provider\n\n\u2022 providerId (String): An alphanumeric ID provided by Magic after successful configuration of your identity provider\n\njwt (String): The OIDC token from your identity provider\n\njwt\n\nproviderId (String): An alphanumeric ID provided by Magic after successful configuration of your identity provider\n\nproviderId", "explanation": "This documentation section explains how to use the OpenID Module in an Android application using the Magic SDK.\n\n**Main Purpose:**\n\nThe main purpose of this module is to allow users to authenticate with their preferred OpenID Connect (OIDC) client, which is a standardized protocol for identity and authentication.\n\n**Key Points:**\n\n* The OpenID Module requires an enterprise agreement.\n* To use it in your application, you need to install `magic-android` and `:magic:ext:oidc`.\n* You can access the OpenID Module by using the `openid` property on the Magic SDK instance (`magic.openid`).\n* The module provides a single method called `loginWithOIDC`, which takes two arguments:\n\t+ `jwt`: The OIDC token from your identity provider.\n\t+ `providerId`: An alphanumeric ID provided by Magic after successful configuration of your identity provider.\n\nIn summary, this documentation section explains how to integrate the OpenID Module in an Android application using the Magic SDK, and how to use its `loginWithOIDC` method to authenticate users via their preferred OIDC client.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/android#chunk-49", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 PromiEvent<string | null>: The promise resolves upon authentication request success and rejects with a specific error code if the request fails. The resolved value is a Decentralized ID token with a default 15-minute lifespan.\n\nPromiEvent<string | null>: The promise resolves upon authentication request success and rejects with a specific error code if the request fails. The resolved value is a Decentralized ID token with a default 15-minute lifespan.\n\nPromiEvent<string | null>", "explanation": "**Section Title:** #Returns\n\n**Summary:**\n\nThis documentation section describes the outcome of an authentication request made through Magic Labs' embedded wallet.\n\n**Main Purpose:**\n\nThe main purpose of this section is to inform developers about what to expect when sending an authentication request using Magic Labs' Android SDK. Specifically, it explains how the request will be resolved (i.e., a Decentralized ID token) and rejected (with a specific error code), allowing developers to properly handle these scenarios in their applications.\n\n**Key Points:**\n\n* The `PromiEvent` resolves with a Decentralized ID token upon authentication success.\n* The `PromiEvent` rejects with a specific error code if the request fails.\n* The Decentralized ID token has a default lifespan of 15 minutes.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/android#chunk-50", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\npackage\n\nlink\n\n.\n\nmagic\n\n.\n\nandroid\n\n.\n\nextension\n\n.\n\noidc\n\n.\n\n*\n\n01\n\npackage\n\nlink\n\n.\n\nmagic\n\n.\n\nandroid\n\n.\n\nextension\n\n.\n\noidc\n\n.\n\n*\n\n02\n\n\u2060\n\n02\n\n\u2060\n\n03\n\nmagic\n\n=\n\nMagic\n\n(\n\nthis\n\n,\n\n'<your_magic_api_key>'\n\n)\n\n03\n\nmagic\n\n=\n\nMagic\n\n(\n\nthis\n\n,\n\n'<your_magic_api_key>'\n\n)\n\n04\n\n\u2060\n\n04\n\n\u2060\n\n05\n\nprivate\n\nfun\n\nloginWithOIDC\n\n(\n\nv\n\n:\n\nView\n\n)\n\n{\n\n05\n\nprivate\n\nfun\n\nloginWithOIDC\n\n(\n\nv\n\n:\n\nView\n\n)\n\n{\n\n06\n\n\u2060\n\nval\n\nproviderId\n\n=\n\nfindViewById\n\n<\n\nEditText\n\n>\n\n(\n\nR\n\n.\n\nid\n\n.\n\nprovider_id_text\n\n)\n\n06\n\n\u2060\n\nval\n\nproviderId\n\n=\n\nfindViewById\n\n<\n\nEditText\n\n>\n\n(\n\nR\n\n.\n\nid\n\n.\n\nprovider_id_text\n\n)\n\n07\n\nval\n\njwt\n\n=\n\nfindViewById\n\n<\n\nEditText\n\n>\n\n(\n\nR\n\n.\n\nid\n\n.\n\njwt_text\n\n)\n\n07\n\nval\n\njwt\n\n=\n\nfindViewById\n\n<\n\nEditText\n\n>\n\n(\n\nR\n\n.\n\nid\n\n.\n\njwt_text\n\n)\n\n08\n\n\u2060\n\n08\n\n\u2060\n\n09\n\nval\n\nconfiguration\n\n=\n\nOpenIdConfiguration\n\n(\n\njwt\n\n.\n\ntext\n\n.\n\ntoString\n\n(\n\n)\n\n,\n\nproviderId\n\n.\n\ntext\n\n.\n\ntoString\n\n(\n\n)\n\n)\n\n09\n\nval\n\nconfiguration\n\n=\n\nOpenIdConfiguration\n\n(\n\njwt\n\n.\n\ntext\n\n.\n\ntoString\n\n(\n\n)\n\n,\n\nproviderId\n\n.\n\ntext\n\n.\n\ntoString\n\n(\n\n)\n\n)\n\n10\n\n10\n\n11\n\nval\n\ndid\n\n=\n\nmagic\n\n.\n\nopenid\n\n.\n\nloginWithOIDC\n\n(\n\nthis\n\n,\n\nconfiguration\n\n)\n\n11\n\nval\n\ndid\n\n=\n\nmagic\n\n.\n\nopenid\n\n.\n\nloginWithOIDC\n\n(\n\nthis\n\n,\n\nconfiguration\n\n)\n\n12\n\n12\n\n13\n\ndid\n\n.\n\nwhenComplete\n\n{\n\nresponse\n\n:\n\nDIDToken\n\n?\n\n,\n\nerror\n\n:\n\nThrowable\n\n?\n\n->\n\n13\n\ndid\n\n.\n\nwhenComplete\n\n{\n\nresponse\n\n:\n\nDIDToken\n\n?\n\n,\n\nerror\n\n:\n\nThrowable\n\n?\n\n->\n\n14\n\nif\n\n(\n\nerror\n\n!=\n\nnull\n\n)\n\n{\n\n14\n\nif\n\n(\n\nerror\n\n!=\n\nnull\n\n)\n\n{\n\n15\n\nLog\n\n.\n\nd\n\n(\n\n\"error\"\n\n,\n\nerror\n\n.\n\nlocalizedMessage\n\n)\n\n15\n\nLog\n\n.\n\nd\n\n(\n\n\"error\"\n\n,\n\nerror\n\n.\n\nlocalizedMessage\n\n)\n\n16\n\n}\n\n16\n\n}\n\n17\n\n17\n\n18\n\nif\n\n(\n\nresponse\n\n!=\n\nnull\n\n&&\n\n!\n\nresponse\n\n.\n\nhasError\n\n(\n\n)\n\n)\n\n{\n\n18\n\nif\n\n(\n\nresponse\n\n!=\n\nnull\n\n&&\n\n!\n\nresponse\n\n.\n\nhasError\n\n(\n\n)\n\n)\n\n{\n\n19\n\nresponse\n\n.\n\nresult\n\n?\n\n.\n\nlet\n\n{\n\nLog\n\n.\n\nd\n\n(\n\n\"login\"\n\n,\n\nit\n\n)\n\n}\n\n19\n\nresponse\n\n.\n\nresult\n\n?\n\n.\n\nlet\n\n{\n\nLog\n\n.\n\nd\n\n(\n\n\"login\"\n\n,\n\nit\n\n)\n\n}\n\n20\n\n}\n\nelse\n\n{\n\n20\n\n}\n\nelse\n\n{\n\n21\n\nLog\n\n.\n\nd\n\n(\n\n\"login\"\n\n,\n\n\"OpenID Not Logged in\"\n\n)\n\n21\n\nLog\n\n.\n\nd\n\n(\n\n\"login\"\n\n,\n\n\"OpenID Not Logged in\"\n\n)\n\n22\n\n}\n\n22\n\n}\n\n23\n\n}\n\n23\n\n}\n\n24\n\n}\n\n24\n\n}", "explanation": "The documentation section titled '#Example' from the Magic Labs embedded wallet documentation URL https://magic.link/docs/api/client-side-sdks/android is an example code snippet that demonstrates how to use the `Magic` class to login with OpenID Connect (OIDC) on Android.\n\nHere's a breakdown of what the code does:\n\n1. It creates an instance of the `Magic` class, passing in the Magic API key.\n2. It defines two private functions: `loginWithOIDC` and another `loginWithOIDC`.\n3. In each `loginWithOIDC` function, it:\n\t* Finds two `EditText` views by their IDs (`provider_id_text` and `jwt_text`) to get the provider ID and JWT (JSON Web Token) values.\n\t* Creates an instance of `OpenIdConfiguration` with the JWT and provider ID values.\n\t* Uses the `loginWithOIDC` method of the `Magic` class to login with OIDC, passing in the `configuration` object.\n4. The `whenComplete` method is used to handle the result of the login operation. If there's an error, it logs the error message. If the response is successful and doesn't have an error, it logs a success message.\n\nThe main purpose of this example code snippet is to demonstrate how to use the Magic SDK on Android to login with OIDC, which is a common authentication flow in many applications.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/android#chunk-51", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 GitHub\n\n\u2022 Demo\n\n\u2022 Goerli Testnet Faucet\n\nGitHub\n\nDemo\n\nGoerli Testnet Faucet", "explanation": "The '#Resources' section is a part of the Magic Labs embedded wallet documentation, specifically for the Android client-side SDK. \n\nThis section is about providing additional resources that users or developers can utilize to help with their understanding and implementation of the Magic Labs embedded wallet on Android. \n\nThe main purpose of this section is to point users to supplementary materials that can be useful for development, troubleshooting, or testing purposes, such as:\n\n- The GitHub repository, which likely contains the source code or a library for the Android SDK.\n- A Demo page or project that demonstrates how to use the Magic Labs embedded wallet on Android.\n- The Goerli Testnet Faucet, which allows developers to obtain testnet cryptocurrency for testing their application on the Goerli test network, rather than using the main Ethereum network.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/android#chunk-52", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nTo interact with the Ethereum blockchain, Magic Android SDK integrates Web3j as sub dependency.\n\nWeb3j\n\nWeb3j\n\nAdd the following dependencies in build.gradle\n\nbuild.gradle\n\nCopy\n\n01\n\ndependencies {\n\n01\n\ndependencies {\n\n02\n\nimplementation 'link.magic:magic-android:4.0.0'\n\n02\n\nimplementation 'link.magic:magic-android:4.0.0'\n\n03\n\nimplementation 'org.web3j:core:4.8.8-android'\n\n03\n\nimplementation 'org.web3j:core:4.8.8-android'\n\n04\n\nimplementation 'org.web3j:geth:4.8.8-android'\n\n04\n\nimplementation 'org.web3j:geth:4.8.8-android'\n\n05\n\n}\n\n05\n\n}", "explanation": "This documentation section explains how to integrate the Magic Labs embedded wallet with the Ethereum blockchain using an Android app.\n\n**Main Purpose:** \nThe main purpose of this section is to guide developers on how to add the necessary dependencies (or libraries) in their Android project's build file (`build.gradle`) to enable interaction with the Ethereum blockchain using Magic Labs' Android SDK and Web3j as a sub-dependency.\n\n**Key Points:**\n\n1. The Magic Android SDK integrates Web3j as a sub-dependency to interact with the Ethereum blockchain.\n2. To use this integration, you need to add specific dependencies in your `build.gradle` file.\n3. The required dependencies are:\n\t* `link.magic:magic-android:4.0.0`\n\t* `org.web3j:core:4.8.8-android`\n\t* `org.web3j:geth:4.8.8-android`\n\nBy following these steps, developers can integrate their Android app with the Ethereum blockchain using Magic Labs' embedded wallet and Web3j as a sub-dependency.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/featured-chains/ethereum/android#chunk-1", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nThe Magic class is the entry-point to the Magic SDK. It must be instantiated with a Magic publishable key.\n\nThe following example uses Kotlin 1.3 and Magic Android 4.x. Android demo will be open-sourced soon. You may use Android Studio to convert Java to Kotlin or vice versa.\n\nCopy\n\n01\n\nclass\n\nMagicDemoApp\n\n:\n\nApplication\n\n(\n\n)\n\n{\n\n01\n\nclass\n\nMagicDemoApp\n\n:\n\nApplication\n\n(\n\n)\n\n{\n\n02\n\n02\n\n03\n\nlateinit\n\nvar\n\nmagic\n\n:\n\nMagic\n\n03\n\nlateinit\n\nvar\n\nmagic\n\n:\n\nMagic\n\n04\n\noverride\n\nfun\n\nonCreate\n\n(\n\n)\n\n{\n\n04\n\noverride\n\nfun\n\nonCreate\n\n(\n\n)\n\n{\n\n05\n\nmagic\n\n=\n\nMagic\n\n(\n\nthis\n\n,\n\n\"YOUR_PUBLISHABLE_KEY\"\n\n)\n\n05\n\nmagic\n\n=\n\nMagic\n\n(\n\nthis\n\n,\n\n\"YOUR_PUBLISHABLE_KEY\"\n\n)\n\n06\n\n\u2060\n\nsuper\n\n.\n\nonCreate\n\n(\n\n)\n\n06\n\n\u2060\n\nsuper\n\n.\n\nonCreate\n\n(\n\n)\n\n07\n\n}\n\n07\n\n}\n\n08\n\n}\n\n08\n\n}\n\n09\n\n09\n\n10\n\n// Initialize web3j\n\n10\n\n// Initialize web3j\n\n11\n\nclass\n\nMagicActivity\n\n:\n\nAppCompatActivity\n\n(\n\n)\n\n{\n\n11\n\nclass\n\nMagicActivity\n\n:\n\nAppCompatActivity\n\n(\n\n)\n\n{\n\n12\n\n12\n\n13\n\nlateinit\n\nvar\n\nweb3j\n\n:\n\nWeb3j\n\n13\n\nlateinit\n\nvar\n\nweb3j\n\n:\n\nWeb3j\n\n14\n\nlateinit\n\nvar\n\ngethWeb3j\n\n:\n\nGeth\n\n14\n\nlateinit\n\nvar\n\ngethWeb3j\n\n:\n\nGeth\n\n15\n\n15\n\n16\n\noverride\n\nfun\n\nonCreate\n\n(\n\nsavedInstanceState\n\n:\n\nBundle\n\n?\n\n)\n\n{\n\n16\n\noverride\n\nfun\n\nonCreate\n\n(\n\nsavedInstanceState\n\n:\n\nBundle\n\n?\n\n)\n\n{\n\n17\n\nsuper\n\n.\n\nonCreate\n\n(\n\nsavedInstanceState\n\n)\n\n17\n\nsuper\n\n.\n\nonCreate\n\n(\n\nsavedInstanceState\n\n)\n\n18\n\nweb3j\n\n=\n\nWeb3j\n\n.\n\nbuild\n\n(\n\nmagic\n\n.\n\nrpcProvider\n\n)\n\n18\n\nweb3j\n\n=\n\nWeb3j\n\n.\n\nbuild\n\n(\n\nmagic\n\n.\n\nrpcProvider\n\n)\n\n19\n\ngethWeb3j\n\n=\n\nGeth\n\n.\n\nbuild\n\n(\n\nmagic\n\n.\n\nrpcProvider\n\n)\n\n19\n\ngethWeb3j\n\n=\n\nGeth\n\n.\n\nbuild\n\n(\n\nmagic\n\n.\n\nrpcProvider\n\n)\n\n20\n\n}\n\n20\n\n}\n\n21\n\n}\n\n21\n\n}", "explanation": "**Initialization**\n\nThe `#Initialization` section of the Magic Labs embedded wallet documentation provides an example code snippet in Kotlin for initializing the Magic SDK and Web3j libraries.\n\n**Purpose:**\n\nThe main purpose of this initialization is to set up the necessary components for interacting with Ethereum blockchain through the Magic SDK and Web3j libraries. This includes:\n\n1. **Instantiating the Magic class**: The `Magic` class is initialized with a publishable key, which is a unique identifier used by Magic Labs.\n2. **Initializing Web3j**: The `Web3j` library is instantiated using the `rpcProvider` method from the Magic SDK instance, allowing for Ethereum blockchain interactions.\n\n**Key Code Snippets:**\n\n* `magic = Magic(this, \"YOUR_PUBLISHABLE_KEY\")`: Initializes the Magic class with a publishable key.\n* `web3j = Web3j.build(magic.rpcProvider)`: Initializes Web3j using the `rpcProvider` method from the Magic SDK instance.\n* `gethWeb3j = Geth.build(magic.rpcProvider)`: Initializes Geth (a Web3j variant for Ethereum) using the same `rpcProvider` method.\n\n**Context:**\n\nThis initialization code is likely used in Android applications that integrate with the Magic Labs embedded wallet, enabling users to interact with Ethereum blockchain through the Magic SDK and Web3j libraries.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/featured-chains/ethereum/android#chunk-2", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n#\n\nGoerli Block Explorer: https://goerli.etherscan.io\n\nhttps://goerli.etherscan.io\n\n\u2060Goerli Testnet Faucet: https://goerlifaucet.com\n\nhttps://goerlifaucet.com\n\nCopy\n\n01\n\nmagic\n\n=\n\nMagic\n\n(\n\nthis\n\n,\n\n\"YOUR_PUBLISHABLE_API_KEY\"\n\n,\n\nMagic\n\n.\n\nNetwork\n\n.\n\ngoerli\n\n)\n\n01\n\nmagic\n\n=\n\nMagic\n\n(\n\nthis\n\n,\n\n\"YOUR_PUBLISHABLE_API_KEY\"\n\n,\n\nMagic\n\n.\n\nNetwork\n\n.\n\ngoerli\n\n)", "explanation": "This documentation section is about testing the Magic Labs embedded wallet on the Ethereum blockchain using the Goerli testnet.\n\n**Main Purpose:**\n\nThe main purpose of this section is to provide instructions and resources for developers to test their Magic Labs implementation on a separate, non-production environment (the Goerli testnet) before deploying it on the actual Ethereum network.\n\n**Key Points:**\n\n1. **Goerli Block Explorer**: A link to a block explorer website where you can view transactions and blocks on the Goerli testnet.\n2. **Goerli Testnet Faucet**: A link to a website that provides free Ether (the cryptocurrency used on the Ethereum blockchain) for testing purposes, allowing developers to test their Magic Labs implementation without using real Ether.\n3. **Code Snippet**: An example code snippet in JavaScript shows how to configure and use the Magic Labs embedded wallet on the Goerli testnet.\n\nBy following this documentation section, developers can ensure that their Magic Labs implementation works correctly on the Ethereum blockchain before deploying it to production.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/featured-chains/ethereum/android#chunk-3", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nYou can allow specific URLs to interact with the Magic SDK, such as a custom RPC URL to send transactions to your node. The Content Security Policy (CSP) of a browser dictates what resources can be loaded. If you're using a Dedicated Wallet, you can update the policy in the settings page of the dashboard with your custom URL. If you're using a Universal Wallet, please reach out to support to get your URL added.\n\nDedicated Wallet\n\ndashboard\n\nUniversal Wallet\n\nThe use of a custom node will require the RPC URL to the project's Content Security Policy from your Magic dashboard. Refer to the CSP documentation.\n\nMagic dashboard\n\nCSP documentation\n\nCopy\n\n01\n\nmagic\n\n=\n\nMagic\n\n(\n\nthis\n\n,\n\n\"YOUR_PUBLISHABLE_API_KEY\"\n\n,\n\nCustomNodeConfiguration\n\n(\n\n\"https://alchemy.io\"\n\n)\n\n)\n\n01\n\nmagic\n\n=\n\nMagic\n\n(\n\nthis\n\n,\n\n\"YOUR_PUBLISHABLE_API_KEY\"\n\n,\n\nCustomNodeConfiguration\n\n(\n\n\"https://alchemy.io\"\n\n)\n\n)\n\nDo not set the custom nodes to local IP address (E.x. \"http://127.0.0.1\"\\), because local IP will point to the network environment inside mobile device / simulator. Try accessible IP address in the same Wifi/Internet Environment (E.x. \"http://10.0.0.93:3000\"\\)\n\nhttp://127.0.0.1\"\\\n\nhttp://10.0.0.93:3000\"\\\n\n#\n\nCustomNodeConfiguration(rpcUrl: String, chainId: Int?)\n\nCustomNodeConfiguration(rpcUrl: String, chainId: Int?)\n\n\u2022 rpcUrl: Your own node URL\n\n\u2022 chainId: Your own node's chainId\n\nrpcUrl\n\nchainId\n\nMagic.EthNetwork\n\nMagic.EthNetwork\n\nCopy\n\n01\n\nenum\n\nclass\n\nEthNetwork\n\n{\n\n01\n\nenum\n\nclass\n\nEthNetwork\n\n{\n\n02\n\nMainnet\n\n,\n\nGoerli\n\n02\n\nMainnet\n\n,\n\nGoerli\n\n03\n\n}\n\n03\n\n}", "explanation": "**Custom Node - Associated Class**\n\nThis documentation section explains how to configure a custom node for interaction with the Magic SDK in an Android application.\n\n**Main Purpose:**\n\nThe main purpose of this feature is to allow specific URLs (custom nodes) to interact with the Magic SDK, such as a custom RPC URL to send transactions to your own node. This enables developers to use their own infrastructure for interacting with blockchain networks, rather than relying on default or public APIs.\n\n**Key Points:**\n\n1. **Custom Node Configuration:** The `CustomNodeConfiguration` class is used to configure a custom node. It takes two parameters:\n\t* `rpcUrl`: Your own node's URL (e.g., \"https://alchemy.io\").\n\t* `chainId`: Your own node's chain ID (optional).\n2. **Content Security Policy (CSP):** The CSP of a browser dictates what resources can be loaded. If using a Dedicated Wallet, update the policy in the Magic dashboard with your custom URL.\n3. **Usage:** In an Android application, use the `CustomNodeConfiguration` class to configure your custom node and pass it to the Magic SDK.\n\n**Example Code:**\n```swift\n// Create a CustomNodeConfiguration instance\nlet customNode = CustomNodeConfiguration(rpcUrl: \"https://alchemy.io\", chainId: 1)\n\n// Pass the custom node configuration to the Magic SDK\nmagic = Magic(this, YOUR_PUBLISHABLE_API_KEY, customNode)\n```\nBy using this feature, developers can integrate their own blockchain infrastructure with the Magic SDK, providing more flexibility and control over interactions with blockchain networks.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/featured-chains/ethereum/android#chunk-4", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n#\n\nCopy\n\n01\n\nclass\n\nMagicActivity\n\n:\n\nAppCompatActivity\n\n(\n\n)\n\n{\n\n01\n\nclass\n\nMagicActivity\n\n:\n\nAppCompatActivity\n\n(\n\n)\n\n{\n\n02\n\n02\n\n03\n\nlateinit\n\nvar\n\nmagic\n\n:\n\nMagic\n\n03\n\nlateinit\n\nvar\n\nmagic\n\n:\n\nMagic\n\n04\n\nlateinit\n\nvar\n\nweb3j\n\n:\n\nWeb3j\n\n04\n\nlateinit\n\nvar\n\nweb3j\n\n:\n\nWeb3j\n\n05\n\n05\n\n06\n\noverride\n\nfun\n\nonCreate\n\n(\n\nsavedInstanceState\n\n:\n\nBundle\n\n?\n\n)\n\n{\n\n06\n\noverride\n\nfun\n\nonCreate\n\n(\n\nsavedInstanceState\n\n:\n\nBundle\n\n?\n\n)\n\n{\n\n07\n\nsuper\n\n.\n\nonCreate\n\n(\n\nsavedInstanceState\n\n)\n\n07\n\nsuper\n\n.\n\nonCreate\n\n(\n\nsavedInstanceState\n\n)\n\n08\n\nmagic\n\n=\n\n(\n\napplicationContext\n\nas\n\nMagicDemoApp\n\n)\n\n.\n\nmagic\n\n08\n\nmagic\n\n=\n\n(\n\napplicationContext\n\nas\n\nMagicDemoApp\n\n)\n\n.\n\nmagic\n\n09\n\nweb3j\n\n=\n\nWeb3j\n\n.\n\nbuild\n\n(\n\nmagic\n\n.\n\nrpcProvider\n\n)\n\n09\n\nweb3j\n\n=\n\nWeb3j\n\n.\n\nbuild\n\n(\n\nmagic\n\n.\n\nrpcProvider\n\n)\n\n10\n\n}\n\n10\n\n}\n\n11\n\n11\n\n12\n\n// After user is successfully authenticated\n\n12\n\n// After user is successfully authenticated\n\n13\n\nfun\n\nsendTransaction\n\n(\n\nv\n\n:\n\nView\n\n)\n\n{\n\n13\n\nfun\n\nsendTransaction\n\n(\n\nv\n\n:\n\nView\n\n)\n\n{\n\n14\n\ntry\n\n{\n\n14\n\ntry\n\n{\n\n15\n\nval\n\nvalue\n\n:\n\nBigInteger\n\n=\n\nConvert\n\n.\n\ntoWei\n\n(\n\n\"0.5\"\n\n,\n\nConvert\n\n.\n\nUnit\n\n.\n\nETHER\n\n)\n\n.\n\ntoBigInteger\n\n(\n\n)\n\n15\n\nval\n\nvalue\n\n:\n\nBigInteger\n\n=\n\nConvert\n\n.\n\ntoWei\n\n(\n\n\"0.5\"\n\n,\n\nConvert\n\n.\n\nUnit\n\n.\n\nETHER\n\n)\n\n.\n\ntoBigInteger\n\n(\n\n)\n\n16\n\nval\n\ntransaction\n\n=\n\ncreateEtherTransaction\n\n(\n\naccount\n\n,\n\nBigInteger\n\n(\n\n\"1\"\n\n)\n\n,\n\nBigInteger\n\n(\n\n\"21000\"\n\n)\n\n,\n\nBigInteger\n\n(\n\n\"21000\"\n\n)\n\n,\n\naccount\n\n,\n\nvalue\n\n)\n\n16\n\nval\n\ntransaction\n\n=\n\ncreateEtherTransaction\n\n(\n\naccount\n\n,\n\nBigInteger\n\n(\n\n\"1\"\n\n)\n\n,\n\nBigInteger\n\n(\n\n\"21000\"\n\n)\n\n,\n\nBigInteger\n\n(\n\n\"21000\"\n\n)\n\n,\n\naccount\n\n,\n\nvalue\n\n)\n\n17\n\nval\n\nreceipt\n\n=\n\nweb3j\n\n.\n\nethSendTransaction\n\n(\n\ntransaction\n\n)\n\n.\n\nsend\n\n(\n\n)\n\n17\n\nval\n\nreceipt\n\n=\n\nweb3j\n\n.\n\nethSendTransaction\n\n(\n\ntransaction\n\n)\n\n.\n\nsend\n\n(\n\n)\n\n18\n\nLog\n\n.\n\nd\n\n(\n\n\"Transaction complete: \"\n\n+\n\nreceipt\n\n.\n\ntransactionHash\n\n)\n\n18\n\nLog\n\n.\n\nd\n\n(\n\n\"Transaction complete: \"\n\n+\n\nreceipt\n\n.\n\ntransactionHash\n\n)\n\n19\n\n}\n\ncatch\n\n(\n\ne\n\n:\n\nException\n\n)\n\n{\n\n19\n\n}\n\ncatch\n\n(\n\ne\n\n:\n\nException\n\n)\n\n{\n\n20\n\nLog\n\n.\n\ne\n\n(\n\n\"Error\"\n\n,\n\ne\n\n.\n\nlocalizedMessage\n\n)\n\n20\n\nLog\n\n.\n\ne\n\n(\n\n\"Error\"\n\n,\n\ne\n\n.\n\nlocalizedMessage\n\n)\n\n21\n\n}\n\n21\n\n}\n\n22\n\n}\n\n22\n\n}\n\n23\n\n}\n\n23\n\n}", "explanation": "The documentation section you provided is a Java code snippet that implements a method called `sendTransaction` in an Android application. The main purpose of this method is to send an Ethereum transaction using the Magic Labs embedded wallet.\n\nHere's a breakdown of what the code does:\n\n1. It initializes the Magic and Web3j libraries, which are used to interact with the Ethereum blockchain.\n2. After user authentication (not shown in this snippet), it defines a function `sendTransaction` that takes a View parameter ( likely a button or other UI element) as input.\n3. Inside `sendTransaction`, it tries to create an Ether transaction using the `createEtherTransaction` function, which is not shown here. The parameters passed to this function are:\n\t* An account address\n\t* A value of 1 Ether (equivalent to $21,000 at the time of writing)\n4. It then sends the transaction using Web3j's `ethSendTransaction` method.\n5. If the transaction is successful, it logs a message with the transaction hash.\n6. If an error occurs during the transaction process, it catches the exception and logs an error message.\n\nIn summary, this code snippet provides a way to send an Ethereum transaction from within an Android application using Magic Labs' embedded wallet.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/featured-chains/ethereum/android#chunk-5", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nMagic Android SDK extends the functionality from Web3j to allow developers to sign Typed Data. You may find it in magic.web3jSigExt\n\nmagic.web3jSigExt\n\n#\n\nCopy\n\n01\n\nclass\n\nMagicActivity\n\n:\n\nAppCompatActivity\n\n(\n\n)\n\n{\n\n01\n\nclass\n\nMagicActivity\n\n:\n\nAppCompatActivity\n\n(\n\n)\n\n{\n\n02\n\n02\n\n03\n\nlateinit\n\nvar\n\nmagic\n\n:\n\nMagic\n\n03\n\nlateinit\n\nvar\n\nmagic\n\n:\n\nMagic\n\n04\n\nlateinit\n\nvar\n\nweb3j\n\n:\n\nWeb3j\n\n04\n\nlateinit\n\nvar\n\nweb3j\n\n:\n\nWeb3j\n\n05\n\nlateinit\n\nvar\n\ngethWeb3j\n\n:\n\nGeth\n\n05\n\nlateinit\n\nvar\n\ngethWeb3j\n\n:\n\nGeth\n\n06\n\n06\n\n07\n\n// After user is successfully authenticated\n\n07\n\n// After user is successfully authenticated\n\n08\n\nprivate\n\nvar\n\naccount\n\n:\n\nString\n\n?\n\n=\n\nnull\n\n08\n\nprivate\n\nvar\n\naccount\n\n:\n\nString\n\n?\n\n=\n\nnull\n\n09\n\n09\n\n10\n\noverride\n\nfun\n\nonCreate\n\n(\n\nsavedInstanceState\n\n:\n\nBundle\n\n?\n\n)\n\n{\n\n10\n\noverride\n\nfun\n\nonCreate\n\n(\n\nsavedInstanceState\n\n:\n\nBundle\n\n?\n\n)\n\n{\n\n11\n\nsuper\n\n.\n\nonCreate\n\n(\n\nsavedInstanceState\n\n)\n\n11\n\nsuper\n\n.\n\nonCreate\n\n(\n\nsavedInstanceState\n\n)\n\n12\n\nmagic\n\n=\n\n(\n\napplicationContext\n\nas\n\nMagicDemoApp\n\n)\n\n.\n\nmagic\n\n12\n\nmagic\n\n=\n\n(\n\napplicationContext\n\nas\n\nMagicDemoApp\n\n)\n\n.\n\nmagic\n\n13\n\nweb3j\n\n=\n\nWeb3j\n\n.\n\nbuild\n\n(\n\nmagic\n\n.\n\nrpcProvider\n\n)\n\n13\n\nweb3j\n\n=\n\nWeb3j\n\n.\n\nbuild\n\n(\n\nmagic\n\n.\n\nrpcProvider\n\n)\n\n14\n\ngethWeb3j\n\n=\n\nGeth\n\n.\n\nbuild\n\n(\n\nmagic\n\n.\n\nrpcProvider\n\n)\n\n14\n\ngethWeb3j\n\n=\n\nGeth\n\n.\n\nbuild\n\n(\n\nmagic\n\n.\n\nrpcProvider\n\n)\n\n15\n\n}\n\n15\n\n}\n\n16\n\n16\n\n17\n\nfun\n\npersonSign\n\n(\n\nview\n\n:\n\nView\n\n)\n\n{\n\n17\n\nfun\n\npersonSign\n\n(\n\nview\n\n:\n\nView\n\n)\n\n{\n\n18\n\nval\n\nmessage\n\n=\n\n\"Hello from Magic!!!\"\n\n18\n\nval\n\nmessage\n\n=\n\n\"Hello from Magic!!!\"\n\n19\n\nval\n\npersonalSign\n\n:\n\nPersonalSign\n\n=\n\ngethWeb3j\n\n.\n\npersonalSign\n\n(\n\n19\n\nval\n\npersonalSign\n\n:\n\nPersonalSign\n\n=\n\ngethWeb3j\n\n.\n\npersonalSign\n\n(\n\n20\n\nmessage\n\n,\n\naccount\n\n,\n\n\"password\"\n\n)\n\n20\n\nmessage\n\n,\n\naccount\n\n,\n\n\"password\"\n\n)\n\n21\n\n.\n\nsend\n\n(\n\n)\n\n21\n\n.\n\nsend\n\n(\n\n)\n\n22\n\nLog\n\n.\n\nd\n\n(\n\n\"Magic\"\n\n,\n\n\"Signed Message: \"\n\n+\n\npersonalSign\n\n.\n\nsignedMessage\n\n)\n\n22\n\nLog\n\n.\n\nd\n\n(\n\n\"Magic\"\n\n,\n\n\"Signed Message: \"\n\n+\n\npersonalSign\n\n.\n\nsignedMessage\n\n)\n\n23\n\n23\n\n24\n\n// Recover Message\n\n24\n\n// Recover Message\n\n25\n\nval\n\nrecovered\n\n=\n\ngethWeb3j\n\n.\n\npersonalEcRecover\n\n(\n\nmessage\n\n,\n\npersonalSign\n\n.\n\nsignedMessage\n\n)\n\n.\n\nsend\n\n(\n\n)\n\n25\n\nval\n\nrecovered\n\n=\n\ngethWeb3j\n\n.\n\npersonalEcRecover\n\n(\n\nmessage\n\n,\n\npersonalSign\n\n.\n\nsignedMessage\n\n)\n\n.\n\nsend\n\n(\n\n)\n\n26\n\nLog\n\n.\n\nd\n\n(\n\n\"Magic\"\n\n,\n\n\"Recovered Address: \"\n\n+\n\nrecovered\n\n.\n\nrecoverAccountId\n\n)\n\n26\n\nLog\n\n.\n\nd\n\n(\n\n\"Magic\"\n\n,\n\n\"Recovered Address: \"\n\n+\n\nrecovered\n\n.\n\nrecoverAccountId\n\n)\n\n27\n\n}\n\n27\n\n}\n\n28\n\n}\n\n28\n\n}", "explanation": "The documentation section titled '#Sign Message - #Personal Sign' appears to be a code snippet from the Magic Android SDK, specifically from the `MagicActivity` class. Here's what it's about and its main purpose in a clear and concise manner:\n\n**Purpose:**\nThis code snippet demonstrates how to use the Magic Android SDK to sign a message using the Personal Sign (EIP-1271) protocol.\n\n**What is Personal Sign?**\nPersonal Sign is a digital signature scheme that allows users to sign messages with their Ethereum address. It's a way for users to prove ownership of an Ethereum account without revealing their private key.\n\n**How it works:**\n\n1. The user authenticates with the Magic SDK.\n2. A message is created, in this case, \"Hello from Magic!!!\".\n3. The `gethWeb3j` instance (a Geth-based Web3J library) creates a Personal Sign object.\n4. The `personalSign` method is called to sign the message with the user's Ethereum address and a password (in this example).\n5. The signed message is then sent to the Magic SDK for logging.\n\n**What it shows:**\nThis code snippet demonstrates how to use the Magic Android SDK to:\n\n* Authenticate users\n* Sign messages using Personal Sign protocol\n* Recover addresses from signed messages\n\nOverall, this documentation section provides a practical example of how to integrate the Magic Android SDK with Ethereum-based signing protocols.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/featured-chains/ethereum/android#chunk-6", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\nclass\n\nMagicActivity\n\n:\n\nAppCompatActivity\n\n(\n\n)\n\n{\n\n01\n\nclass\n\nMagicActivity\n\n:\n\nAppCompatActivity\n\n(\n\n)\n\n{\n\n02\n\n02\n\n03\n\nlateinit\n\nvar\n\nmagic\n\n:\n\nMagic\n\n03\n\nlateinit\n\nvar\n\nmagic\n\n:\n\nMagic\n\n04\n\n04\n\n05\n\n// After user is successfully authenticated\n\n05\n\n// After user is successfully authenticated\n\n06\n\nprivate\n\nvar\n\naccount\n\n:\n\nString\n\n?\n\n=\n\nnull\n\n06\n\nprivate\n\nvar\n\naccount\n\n:\n\nString\n\n?\n\n=\n\nnull\n\n07\n\n07\n\n08\n\noverride\n\nfun\n\nonCreate\n\n(\n\nsavedInstanceState\n\n:\n\nBundle\n\n?\n\n)\n\n{\n\n08\n\noverride\n\nfun\n\nonCreate\n\n(\n\nsavedInstanceState\n\n:\n\nBundle\n\n?\n\n)\n\n{\n\n09\n\nsuper\n\n.\n\nonCreate\n\n(\n\nsavedInstanceState\n\n)\n\n09\n\nsuper\n\n.\n\nonCreate\n\n(\n\nsavedInstanceState\n\n)\n\n10\n\nmagic\n\n=\n\n(\n\napplicationContext\n\nas\n\nMagicDemoApp\n\n)\n\n.\n\nmagic\n\n10\n\nmagic\n\n=\n\n(\n\napplicationContext\n\nas\n\nMagicDemoApp\n\n)\n\n.\n\nmagic\n\n11\n\n}\n\n11\n\n}\n\n12\n\n12\n\n13\n\n// Sign with EIP712 Data Field\n\n13\n\n// Sign with EIP712 Data Field\n\n14\n\nfun\n\nsignTypedDataLegacy\n\n(\n\nv\n\n:\n\nView\n\n)\n\n{\n\n14\n\nfun\n\nsignTypedDataLegacy\n\n(\n\nv\n\n:\n\nView\n\n)\n\n{\n\n15\n\nval\n\nlist\n\n=\n\nlistOf\n\n(\n\n15\n\nval\n\nlist\n\n=\n\nlistOf\n\n(\n\n16\n\nEIP712TypedDataLegacyFields\n\n(\n\n\"string\"\n\n,\n\n\"Hello from Magic\"\n\n,\n\n\"This message will be signed by you\"\n\n)\n\n,\n\n16\n\nEIP712TypedDataLegacyFields\n\n(\n\n\"string\"\n\n,\n\n\"Hello from Magic\"\n\n,\n\n\"This message will be signed by you\"\n\n)\n\n,\n\n17\n\nEIP712TypedDataLegacyFields\n\n(\n\n\"uint32\"\n\n,\n\n\"Here is a number\"\n\n,\n\n\"90210\"\n\n)\n\n17\n\nEIP712TypedDataLegacyFields\n\n(\n\n\"uint32\"\n\n,\n\n\"Here is a number\"\n\n,\n\n\"90210\"\n\n)\n\n18\n\n)\n\n18\n\n)\n\n19\n\nval\n\nsignature\n\n=\n\nmagic\n\n.\n\nweb3jSigExt\n\n.\n\nsignTypedDataLegacy\n\n(\n\naccount\n\n,\n\nlist\n\n)\n\n.\n\nsend\n\n(\n\n)\n\n19\n\nval\n\nsignature\n\n=\n\nmagic\n\n.\n\nweb3jSigExt\n\n.\n\nsignTypedDataLegacy\n\n(\n\naccount\n\n,\n\nlist\n\n)\n\n.\n\nsend\n\n(\n\n)\n\n20\n\nLog\n\n.\n\nd\n\n(\n\n\"Magic\"\n\n,\n\nsignature\n\n.\n\nresult\n\n)\n\n20\n\nLog\n\n.\n\nd\n\n(\n\n\"Magic\"\n\n,\n\nsignature\n\n.\n\nresult\n\n)\n\n21\n\n}\n\n21\n\n}\n\n22\n\n22\n\n23\n\n// Sign with JSON String\n\n23\n\n// Sign with JSON String\n\n24\n\nfun\n\nsignTypedDataLegacyJson\n\n(\n\nv\n\n:\n\nView\n\n)\n\n{\n\n24\n\nfun\n\nsignTypedDataLegacyJson\n\n(\n\nv\n\n:\n\nView\n\n)\n\n{\n\n25\n\nval\n\njsonString\n\n=\n\n\"[{\\\"type\\\":\\\"string\\\",\\\"name\\\":\\\"Hello from Magic\\\",\\\"value\\\":\\\"This message will be signed by you\\\"},{\\\"type\\\":\\\"uint32\\\",\\\"name\\\":\\\"Here is a number\\\",\\\"value\\\":\\\"90210\\\"}]\"\n\n25\n\nval\n\njsonString\n\n=\n\n\"[{\\\"type\\\":\\\"string\\\",\\\"name\\\":\\\"Hello from Magic\\\",\\\"value\\\":\\\"This message will be signed by you\\\"},{\\\"type\\\":\\\"uint32\\\",\\\"name\\\":\\\"Here is a number\\\",\\\"value\\\":\\\"90210\\\"}]\"\n\n26\n\nval\n\nsignature\n\n=\n\nmagic\n\n.\n\nweb3jSigExt\n\n.\n\nsignTypedDataLegacy\n\n(\n\naccount\n\n,\n\njsonString\n\n)\n\n.\n\nsend\n\n(\n\n)\n\n26\n\nval\n\nsignature\n\n=\n\nmagic\n\n.\n\nweb3jSigExt\n\n.\n\nsignTypedDataLegacy\n\n(\n\naccount\n\n,\n\njsonString\n\n)\n\n.\n\nsend\n\n(\n\n)\n\n27\n\nLog\n\n.\n\nd\n\n(\n\n\"Magic\"\n\n,\n\nsignature\n\n.\n\nresult\n\n)\n\n27\n\nLog\n\n.\n\nd\n\n(\n\n\"Magic\"\n\n,\n\nsignature\n\n.\n\nresult\n\n)\n\n28\n\n}\n\n28\n\n}\n\n29\n\n}\n\n29\n\n}", "explanation": "The provided documentation section is about signing typed data using the Magic Labs embedded wallet in an Android application.\n\n**Purpose:**\n\nThe main purpose of this code snippet is to demonstrate how to sign typed data using the Magic Labs embedded wallet in an Android application. The typed data is represented as EIP712 Typed Data, which is a standardized format for encoding structured data in Ethereum transactions.\n\n**Key Functions:**\n\nThere are two key functions in this code snippet:\n\n1. `signTypedDataLegacy`: This function takes a list of EIP712 Typed Data fields and uses the Magic Labs embedded wallet to sign the typed data.\n2. `signTypedDataLegacyJson`: This function takes a JSON string representing the EIP712 Typed Data fields and uses the Magic Labs embedded wallet to sign the typed data.\n\n**How it Works:**\n\nHere's a step-by-step explanation of how the code works:\n\n1. The `signTypedDataLegacy` function creates a list of EIP712 Typed Data fields using the `EIP712TypedDataLegacyFields` class.\n2. The function then uses the Magic Labs embedded wallet to sign the typed data with the user's account signature.\n3. The signed data is stored in a variable called `signature`.\n4. The function logs the result of the signing process using the `Log.d` method.\n\nSimilarly, the `signTypedDataLegacyJson` function takes a JSON string representing the EIP712 Typed Data fields and uses the Magic Labs embedded wallet to sign the typed data.\n\n**Context:**\n\nThis code snippet is likely part of an Android application that uses the Magic Labs embedded wallet to enable users to sign transactions and interact with Ethereum smart contracts. The purpose of this code snippet is to demonstrate how to use the Magic Labs embedded wallet to sign typed data, which can be used in a variety of scenarios such as transaction signing, smart contract execution, and more.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/featured-chains/ethereum/android#chunk-7", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\nclass\n\nMagicActivity\n\n:\n\nAppCompatActivity\n\n(\n\n)\n\n{\n\n01\n\nclass\n\nMagicActivity\n\n:\n\nAppCompatActivity\n\n(\n\n)\n\n{\n\n02\n\n02\n\n03\n\nlateinit\n\nvar\n\nmagic\n\n:\n\nMagic\n\n03\n\nlateinit\n\nvar\n\nmagic\n\n:\n\nMagic\n\n04\n\nlateinit\n\nvar\n\nweb3j\n\n:\n\nWeb3j\n\n04\n\nlateinit\n\nvar\n\nweb3j\n\n:\n\nWeb3j\n\n05\n\nlateinit\n\nvar\n\ngethWeb3j\n\n:\n\nGeth\n\n05\n\nlateinit\n\nvar\n\ngethWeb3j\n\n:\n\nGeth\n\n06\n\n06\n\n07\n\n// After user is successfully authenticated\n\n07\n\n// After user is successfully authenticated\n\n08\n\nprivate\n\nvar\n\naccount\n\n:\n\nString\n\n?\n\n=\n\nnull\n\n08\n\nprivate\n\nvar\n\naccount\n\n:\n\nString\n\n?\n\n=\n\nnull\n\n09\n\n09\n\n10\n\noverride\n\nfun\n\nonCreate\n\n(\n\nsavedInstanceState\n\n:\n\nBundle\n\n?\n\n)\n\n{\n\n10\n\noverride\n\nfun\n\nonCreate\n\n(\n\nsavedInstanceState\n\n:\n\nBundle\n\n?\n\n)\n\n{\n\n11\n\nsuper\n\n.\n\nonCreate\n\n(\n\nsavedInstanceState\n\n)\n\n11\n\nsuper\n\n.\n\nonCreate\n\n(\n\nsavedInstanceState\n\n)\n\n12\n\nmagic\n\n=\n\n(\n\napplicationContext\n\nas\n\nMagicDemoApp\n\n)\n\n.\n\nmagic\n\n12\n\nmagic\n\n=\n\n(\n\napplicationContext\n\nas\n\nMagicDemoApp\n\n)\n\n.\n\nmagic\n\n13\n\n}\n\n13\n\n}\n\n14\n\n14\n\n15\n\nfun\n\nsignTypedData\n\n(\n\nv\n\n:\n\nView\n\n)\n\n{\n\n15\n\nfun\n\nsignTypedData\n\n(\n\nv\n\n:\n\nView\n\n)\n\n{\n\n16\n\nval\n\njsonString\n\n=\n\n\"{\\\"types\\\":{\\\"EIP712Domain\\\":[{\\\"name\\\":\\\"name\\\",\\\"type\\\":\\\"string\\\"},{\\\"name\\\":\\\"version\\\",\\\"type\\\":\\\"string\\\"},{\\\"name\\\":\\\"verifyingContract\\\",\\\"type\\\":\\\"address\\\"}],\\\"Order\\\":[{\\\"name\\\":\\\"makerAddress\\\",\\\"type\\\":\\\"address\\\"},{\\\"name\\\":\\\"takerAddress\\\",\\\"type\\\":\\\"address\\\"},{\\\"name\\\":\\\"feeRecipientAddress\\\",\\\"type\\\":\\\"address\\\"},{\\\"name\\\":\\\"senderAddress\\\",\\\"type\\\":\\\"address\\\"},{\\\"name\\\":\\\"makerAssetAmount\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"name\\\":\\\"takerAssetAmount\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"name\\\":\\\"makerFee\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"name\\\":\\\"takerFee\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"name\\\":\\\"expirationTimeSeconds\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"name\\\":\\\"salt\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"name\\\":\\\"makerAssetData\\\",\\\"type\\\":\\\"bytes\\\"},{\\\"name\\\":\\\"takerAssetData\\\",\\\"type\\\":\\\"bytes\\\"}]},\\\"domain\\\":{\\\"name\\\":\\\"0x Protocol\\\",\\\"version\\\":\\\"2\\\",\\\"verifyingContract\\\":\\\"0x35dd2932454449b14cee11a94d3674a936d5d7b2\\\"},\\\"message\\\":{\\\"exchangeAddress\\\":\\\"0x35dd2932454449b14cee11a94d3674a936d5d7b2\\\",\\\"senderAddress\\\":\\\"0x0000000000000000000000000000000000000000\\\",\\\"makerAddress\\\":\\\"0x338be8514c1397e8f3806054e088b2daf1071fcd\\\",\\\"takerAddress\\\":\\\"0x0000000000000000000000000000000000000000\\\",\\\"makerFee\\\":\\\"0\\\",\\\"takerFee\\\":\\\"0\\\",\\\"makerAssetAmount\\\":\\\"97500000000000\\\",\\\"takerAssetAmount\\\":\\\"15000000000000000\\\",\\\"makerAssetData\\\":\\\"0xf47261b0000000000000000000000000d0a1e359811322d97991e03f863a0c30c2cf029c\\\",\\\"takerAssetData\\\":\\\"0xf47261b00000000000000000000000006ff6c0ff1d68b964901f986d4c9fa3ac68346570\\\",\\\"salt\\\":\\\"1553722433685\\\",\\\"feeRecipientAddress\\\":\\\"0xa258b39954cef5cb142fd567a46cddb31a670124\\\",\\\"expirationTimeSeconds\\\":\\\"1553808833\\\"},\\\"primaryType\\\":\\\"Order\\\"}\"\n\n16\n\nval\n\njsonString\n\n=\n\n\"{\\\"types\\\":{\\\"EIP712Domain\\\":[{\\\"name\\\":\\\"name\\\",\\\"type\\\":\\\"string\\\"},{\\\"name\\\":\\\"version\\\",\\\"type\\\":\\\"string\\\"},{\\\"name\\\":\\\"verifyingContract\\\",\\\"type\\\":\\\"address\\\"}],\\\"Order\\\":[{\\\"name\\\":\\\"makerAddress\\\",\\\"type\\\":\\\"address\\\"},{\\\"name\\\":\\\"takerAddress\\\",\\\"type\\\":\\\"address\\\"},{\\\"name\\\":\\\"feeRecipientAddress\\\",\\\"type\\\":\\\"address\\\"},{\\\"name\\\":\\\"senderAddress\\\",\\\"type\\\":\\\"address\\\"},{\\\"name\\\":\\\"makerAssetAmount\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"name\\\":\\\"takerAssetAmount\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"name\\\":\\\"makerFee\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"name\\\":\\\"takerFee\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"name\\\":\\\"expirationTimeSeconds\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"name\\\":\\\"salt\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"name\\\":\\\"makerAssetData\\\",\\\"type\\\":\\\"bytes\\\"},{\\\"name\\\":\\\"takerAssetData\\\",\\\"type\\\":\\\"bytes\\\"}]},\\\"domain\\\":{\\\"name\\\":\\\"0x Protocol\\\",\\\"version\\\":\\\"2\\\",\\\"verifyingContract\\\":\\\"0x35dd2932454449b14cee11a94d3674a936d5d7b2\\\"},\\\"message\\\":{\\\"exchangeAddress\\\":\\\"0x35dd2932454449b14cee11a94d3674a936d5d7b2\\\",\\\"senderAddress\\\":\\\"0x0000000000000000000000000000000000000000\\\",\\\"makerAddress\\\":\\\"0x338be8514c1397e8f3806054e088b2daf1071fcd\\\",\\\"takerAddress\\\":\\\"0x0000000000000000000000000000000000000000\\\",\\\"makerFee\\\":\\\"0\\\",\\\"takerFee\\\":\\\"0\\\",\\\"makerAssetAmount\\\":\\\"97500000000000\\\",\\\"takerAssetAmount\\\":\\\"15000000000000000\\\",\\\"makerAssetData\\\":\\\"0xf47261b0000000000000000000000000d0a1e359811322d97991e03f863a0c30c2cf029c\\\",\\\"takerAssetData\\\":\\\"0xf47261b00000000000000000000000006ff6c0ff1d68b964901f986d4c9fa3ac68346570\\\",\\\"salt\\\":\\\"1553722433685\\\",\\\"feeRecipientAddress\\\":\\\"0xa258b39954cef5cb142fd567a46cddb31a670124\\\",\\\"expirationTimeSeconds\\\":\\\"1553808833\\\"},\\\"primaryType\\\":\\\"Order\\\"}\"\n\n17\n\nval\n\nsignature\n\n=\n\nmagic\n\n.\n\nweb3jSigExt\n\n.\n\nsignTypedData\n\n(\n\naccount\n\n,\n\njsonString\n\n)\n\n.\n\nsend\n\n(\n\n)\n\n17\n\nval\n\nsignature\n\n=\n\nmagic\n\n.\n\nweb3jSigExt\n\n.\n\nsignTypedData\n\n(\n\naccount\n\n,\n\njsonString\n\n)\n\n.\n\nsend\n\n(\n\n)\n\n18\n\nLog\n\n.\n\nd\n\n(\n\n\"Magic\"\n\n,\n\n\"Signature: \"\n\n+\n\nsignature\n\n.\n\nresult\n\n)\n\n18\n\nLog\n\n.\n\nd\n\n(\n\n\"Magic\"\n\n,\n\n\"Signature: \"\n\n+\n\nsignature\n\n.\n\nresult\n\n)\n\n19\n\n}\n\n19\n\n}\n\n20\n\n}\n\n20\n\n}", "explanation": "The documentation section `#Sign Typed Data v3` is a part of the Magic Labs embedded wallet documentation, specifically related to Android development.\n\n**What is it about?**\n\nThis section explains how to use the `MagicActivity` class to sign typed data using the Magic SDK. Typed data is a structured format for representing data in Ethereum smart contracts, and signing it requires authentication with the user's Ethereum account.\n\n**Main purpose:**\n\nThe main purpose of this documentation section is to provide an example code snippet that demonstrates how to use `Log```````````````````````````````", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/featured-chains/ethereum/android#chunk-8", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\nclass\n\nMagicActivity\n\n:\n\nAppCompatActivity\n\n(\n\n)\n\n{\n\n01\n\nclass\n\nMagicActivity\n\n:\n\nAppCompatActivity\n\n(\n\n)\n\n{\n\n02\n\n02\n\n03\n\nlateinit\n\nvar\n\nmagic\n\n:\n\nMagic\n\n03\n\nlateinit\n\nvar\n\nmagic\n\n:\n\nMagic\n\n04\n\nlateinit\n\nvar\n\nweb3j\n\n:\n\nWeb3j\n\n04\n\nlateinit\n\nvar\n\nweb3j\n\n:\n\nWeb3j\n\n05\n\nlateinit\n\nvar\n\ngethWeb3j\n\n:\n\nGeth\n\n05\n\nlateinit\n\nvar\n\ngethWeb3j\n\n:\n\nGeth\n\n06\n\n06\n\n07\n\n// After user is successfully authenticated\n\n07\n\n// After user is successfully authenticated\n\n08\n\nprivate\n\nvar\n\naccount\n\n:\n\nString\n\n?\n\n=\n\nnull\n\n08\n\nprivate\n\nvar\n\naccount\n\n:\n\nString\n\n?\n\n=\n\nnull\n\n09\n\n09\n\n10\n\noverride\n\nfun\n\nonCreate\n\n(\n\nsavedInstanceState\n\n:\n\nBundle\n\n?\n\n)\n\n{\n\n10\n\noverride\n\nfun\n\nonCreate\n\n(\n\nsavedInstanceState\n\n:\n\nBundle\n\n?\n\n)\n\n{\n\n11\n\nsuper\n\n.\n\nonCreate\n\n(\n\nsavedInstanceState\n\n)\n\n11\n\nsuper\n\n.\n\nonCreate\n\n(\n\nsavedInstanceState\n\n)\n\n12\n\nmagic\n\n=\n\n(\n\napplicationContext\n\nas\n\nMagicDemoApp\n\n)\n\n.\n\nmagic\n\n12\n\nmagic\n\n=\n\n(\n\napplicationContext\n\nas\n\nMagicDemoApp\n\n)\n\n.\n\nmagic\n\n13\n\n}\n\n13\n\n}\n\n14\n\n14\n\n15\n\nfun\n\nsignTypedDataV4\n\n(\n\nv\n\n:\n\nView\n\n)\n\n{\n\n15\n\nfun\n\nsignTypedDataV4\n\n(\n\nv\n\n:\n\nView\n\n)\n\n{\n\n16\n\nval\n\njsonString\n\n=\n\n\"{\\\"domain\\\":{\\\"chainId\\\":1,\\\"name\\\":\\\"Ether Mail\\\",\\\"verifyingContract\\\":\\\"0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC\\\",\\\"version\\\":\\\"1\\\"},\\\"message\\\":{\\\"contents\\\":\\\"Hello, Bob!\\\",\\\"from\\\":{\\\"name\\\":\\\"Cow\\\",\\\"wallets\\\":[\\\"0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826\\\",\\\"0xDeaDbeefdEAdbeefdEadbEEFdeadbeEFdEaDbeeF\\\"]},\\\"to\\\":[{\\\"name\\\":\\\"Bob\\\",\\\"wallets\\\":[\\\"0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB\\\",\\\"0xB0BdaBea57B0BDABeA57b0bdABEA57b0BDabEa57\\\",\\\"0xB0B0b0b0b0b0B000000000000000000000000000\\\"]}]},\\\"primaryType\\\":\\\"Mail\\\",\\\"types\\\":{\\\"EIP712Domain\\\":[{\\\"name\\\":\\\"name\\\",\\\"type\\\":\\\"string\\\"},{\\\"name\\\":\\\"version\\\",\\\"type\\\":\\\"string\\\"},{\\\"name\\\":\\\"chainId\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"name\\\":\\\"verifyingContract\\\",\\\"type\\\":\\\"address\\\"}],\\\"Group\\\":[{\\\"name\\\":\\\"name\\\",\\\"type\\\":\\\"string\\\"},{\\\"name\\\":\\\"members\\\",\\\"type\\\":\\\"Person[]\\\"}],\\\"Mail\\\":[{\\\"name\\\":\\\"from\\\",\\\"type\\\":\\\"Person\\\"},{\\\"name\\\":\\\"to\\\",\\\"type\\\":\\\"Person[]\\\"},{\\\"name\\\":\\\"contents\\\",\\\"type\\\":\\\"string\\\"}],\\\"Person\\\":[{\\\"name\\\":\\\"name\\\",\\\"type\\\":\\\"string\\\"},{\\\"name\\\":\\\"wallets\\\",\\\"type\\\":\\\"address[]\\\"}]}}\"\n\n16\n\nval\n\njsonString\n\n=\n\n\"{\\\"domain\\\":{\\\"chainId\\\":1,\\\"name\\\":\\\"Ether Mail\\\",\\\"verifyingContract\\\":\\\"0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC\\\",\\\"version\\\":\\\"1\\\"},\\\"message\\\":{\\\"contents\\\":\\\"Hello, Bob!\\\",\\\"from\\\":{\\\"name\\\":\\\"Cow\\\",\\\"wallets\\\":[\\\"0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826\\\",\\\"0xDeaDbeefdEAdbeefdEadbEEFdeadbeEFdEaDbeeF\\\"]},\\\"to\\\":[{\\\"name\\\":\\\"Bob\\\",\\\"wallets\\\":[\\\"0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB\\\",\\\"0xB0BdaBea57B0BDABeA57b0bdABEA57b0BDabEa57\\\",\\\"0xB0B0b0b0b0b0B000000000000000000000000000\\\"]}]},\\\"primaryType\\\":\\\"Mail\\\",\\\"types\\\":{\\\"EIP712Domain\\\":[{\\\"name\\\":\\\"name\\\",\\\"type\\\":\\\"string\\\"},{\\\"name\\\":\\\"version\\\",\\\"type\\\":\\\"string\\\"},{\\\"name\\\":\\\"chainId\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"name\\\":\\\"verifyingContract\\\",\\\"type\\\":\\\"address\\\"}],\\\"Group\\\":[{\\\"name\\\":\\\"name\\\",\\\"type\\\":\\\"string\\\"},{\\\"name\\\":\\\"members\\\",\\\"type\\\":\\\"Person[]\\\"}],\\\"Mail\\\":[{\\\"name\\\":\\\"from\\\",\\\"type\\\":\\\"Person\\\"},{\\\"name\\\":\\\"to\\\",\\\"type\\\":\\\"Person[]\\\"},{\\\"name\\\":\\\"contents\\\",\\\"type\\\":\\\"string\\\"}],\\\"Person\\\":[{\\\"name\\\":\\\"name\\\",\\\"type\\\":\\\"string\\\"},{\\\"name\\\":\\\"wallets\\\",\\\"type\\\":\\\"address[]\\\"}]}}\"\n\n17\n\nval\n\nsignature\n\n=\n\nmagic\n\n.\n\nweb3jSigExt\n\n.\n\nsignTypedDataV4\n\n(\n\naccount\n\n,\n\njsonString\n\n)\n\n.\n\nsend\n\n(\n\n)\n\n17\n\nval\n\nsignature\n\n=\n\nmagic\n\n.\n\nweb3jSigExt\n\n.\n\nsignTypedDataV4\n\n(\n\naccount\n\n,\n\njsonString\n\n)\n\n.\n\nsend\n\n(\n\n)\n\n18\n\nLog\n\n.\n\nd\n\n(\n\n\"Magic\"\n\n,\n\n\"Signature: \"\n\n+\n\nsignature\n\n.\n\nresult\n\n)\n\n18\n\nLog\n\n.\n\nd\n\n(\n\n\"Magic\"\n\n,\n\n\"Signature: \"\n\n+\n\nsignature\n\n.\n\nresult\n\n)\n\n19\n\n}\n\n19\n\n}\n\n20\n\n}\n\n20\n\n}", "explanation": "The documentation section titled `#Sign Typed Data v4` is about a function called `signTypedDataV4` in the Magic Labs embedded wallet. Here's what it's about and its main purpose:\n\n**What is Sign Typed Data?**\n\nSign Typed Data is a cryptographic protocol that allows users to sign complex data structures, such as EIP-712 typed data, using their Ethereum wallets.\n\n**Purpose of `signTypedDataV4` function**\n\nThe `signTypedDataV4` function is designed to facilitate the signing process by taking in the following inputs:\n\n1. An instance of the Magic Labs embedded wallet (`magic`)\n2. A JSON string representing the typed data to be signed\n3. The user's Ethereum account address (`account`)\n\nThe function uses the Magic Labs embedded wallet's `web3jSigExt` extension to sign the typed data using the EIP-712 protocol, and returns a signature object.\n\n**Main purpose**\n\nThe main purpose of this function is to enable users to sign complex data structures, such as EIP-712 typed data, using their Ethereum wallets in a secure and efficient manner. This can be useful for various applications, such as digital signatures, authentication, and authorization.\n\nIn the provided code snippet, the `signTypedDataV4` function is used to sign a JSON string representing an email message with typed data. The signature object is then logged to the console using the Log.d() method.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/featured-chains/ethereum/android#chunk-9", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\nclass\n\nMagicActivity\n\n:\n\nAppCompatActivity\n\n(\n\n)\n\n{\n\n01\n\nclass\n\nMagicActivity\n\n:\n\nAppCompatActivity\n\n(\n\n)\n\n{\n\n02\n\n02\n\n03\n\nlateinit\n\nvar\n\nweb3j\n\n:\n\nWeb3j\n\n03\n\nlateinit\n\nvar\n\nweb3j\n\n:\n\nWeb3j\n\n04\n\n04\n\n05\n\noverride\n\nfun\n\nonCreate\n\n(\n\nsavedInstanceState\n\n:\n\nBundle\n\n?\n\n)\n\n{\n\n05\n\noverride\n\nfun\n\nonCreate\n\n(\n\nsavedInstanceState\n\n:\n\nBundle\n\n?\n\n)\n\n{\n\n06\n\nsuper\n\n.\n\nonCreate\n\n(\n\nsavedInstanceState\n\n)\n\n06\n\nsuper\n\n.\n\nonCreate\n\n(\n\nsavedInstanceState\n\n)\n\n07\n\nmagic\n\n=\n\n(\n\napplicationContext\n\nas\n\nMagicDemoApp\n\n)\n\n.\n\nmagic\n\n07\n\nmagic\n\n=\n\n(\n\napplicationContext\n\nas\n\nMagicDemoApp\n\n)\n\n.\n\nmagic\n\n08\n\nweb3j\n\n=\n\nWeb3j\n\n.\n\nbuild\n\n(\n\nmagic\n\n.\n\nrpcProvider\n\n)\n\n08\n\nweb3j\n\n=\n\nWeb3j\n\n.\n\nbuild\n\n(\n\nmagic\n\n.\n\nrpcProvider\n\n)\n\n09\n\n}\n\n09\n\n}\n\n10\n\n10\n\n11\n\n// After user is successfully authenticated\n\n11\n\n// After user is successfully authenticated\n\n12\n\nfun\n\ngetAccount\n\n(\n\n)\n\n{\n\n12\n\nfun\n\ngetAccount\n\n(\n\n)\n\n{\n\n13\n\ntry\n\n{\n\n13\n\ntry\n\n{\n\n14\n\nval\n\naccounts\n\n=\n\nweb3j\n\n.\n\nethAccounts\n\n(\n\n)\n\n.\n\nsendAsync\n\n(\n\n)\n\n14\n\nval\n\naccounts\n\n=\n\nweb3j\n\n.\n\nethAccounts\n\n(\n\n)\n\n.\n\nsendAsync\n\n(\n\n)\n\n15\n\n15\n\n16\n\naccounts\n\n.\n\nwhenComplete\n\n{\n\naccRepsonse\n\n:\n\nEthAccounts\n\n?\n\n,\n\nerror\n\n:\n\nThrowable\n\n?\n\n->\n\n16\n\naccounts\n\n.\n\nwhenComplete\n\n{\n\naccRepsonse\n\n:\n\nEthAccounts\n\n?\n\n,\n\nerror\n\n:\n\nThrowable\n\n?\n\n->\n\n17\n\nif\n\n(\n\nerror\n\n!=\n\nnull\n\n)\n\n{\n\n17\n\nif\n\n(\n\nerror\n\n!=\n\nnull\n\n)\n\n{\n\n18\n\nLog\n\n.\n\ne\n\n(\n\n\"MagicError\"\n\n,\n\nerror\n\n.\n\nlocalizedMessage\n\n)\n\n18\n\nLog\n\n.\n\ne\n\n(\n\n\"MagicError\"\n\n,\n\nerror\n\n.\n\nlocalizedMessage\n\n)\n\n19\n\n}\n\n19\n\n}\n\n20\n\nif\n\n(\n\naccRepsonse\n\n!=\n\nnull\n\n&&\n\n!\n\naccRepsonse\n\n.\n\nhasError\n\n(\n\n)\n\n)\n\n{\n\n20\n\nif\n\n(\n\naccRepsonse\n\n!=\n\nnull\n\n&&\n\n!\n\naccRepsonse\n\n.\n\nhasError\n\n(\n\n)\n\n)\n\n{\n\n21\n\naccount\n\n=\n\naccRepsonse\n\n.\n\naccounts\n\n[\n\n0\n\n]\n\n21\n\naccount\n\n=\n\naccRepsonse\n\n.\n\naccounts\n\n[\n\n0\n\n]\n\n22\n\nLog\n\n.\n\nd\n\n(\n\n\"Magic\"\n\n,\n\n\"Your address is\n\n$account\n\n\"\n\n)\n\n22\n\nLog\n\n.\n\nd\n\n(\n\n\"Magic\"\n\n,\n\n\"Your address is\n\n$account\n\n\"\n\n)\n\n23\n\n}\n\n23\n\n}\n\n24\n\n}\n\n24\n\n}\n\n25\n\n}\n\ncatch\n\n(\n\ne\n\n:\n\nException\n\n)\n\n{\n\n25\n\n}\n\ncatch\n\n(\n\ne\n\n:\n\nException\n\n)\n\n{\n\n26\n\nLog\n\n.\n\ne\n\n(\n\n\"Error\"\n\n,\n\ne\n\n.\n\nlocalizedMessage\n\n)\n\n26\n\nLog\n\n.\n\ne\n\n(\n\n\"Error\"\n\n,\n\ne\n\n.\n\nlocalizedMessage\n\n)\n\n27\n\n}\n\n27\n\n}\n\n28\n\n}\n\n28\n\n}\n\n29\n\n}\n\n29\n\n}", "explanation": "The documentation section titled '#Get User Info' appears to be a Java code snippet that retrieves the Ethereum account information of a user who has been successfully authenticated. Here's a clear and concise explanation of its main purpose:\n\n**Purpose:** The `getAccount` function is designed to retrieve the Ethereum account address of a user after they have been authenticated.\n\n**Steps:**\n\n1. The function uses the Web3j library to create an instance of the Ethereum API (`web3j`) and initialize it with the RPC provider URL.\n2. It then calls the `ethAccounts` method on the Web3j instance, which retrieves the list of Ethereum accounts associated with the user.\n3. The function uses a `whenComplete` block to handle the asynchronous result of the `ethAccounts` call. If an error occurs, it logs the error using the `Log.e` method.\n4. If the account retrieval is successful, the function extracts the first account from the list and logs its address using the `Log.d` method.\n\n**Main Takeaways:**\n\n* The code uses Web3j to interact with the Ethereum API.\n* It retrieves the Ethereum account information of a user after authentication.\n* The function handles errors and logs them accordingly.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/featured-chains/ethereum/android#chunk-10", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nIn this example, we'll be demonstrating how to use Magic with Web3j to interact with Solidity smart contracts. The simple Hello World contract allows anyone to read and write a message to it.\n\nCopy\n\n01\n\npragma\n\nsolidity\n\n^\n\n0.5.10\n\n;\n\n01\n\npragma\n\nsolidity\n\n^\n\n0.5.10\n\n;\n\n02\n\n02\n\n03\n\ncontract\n\nHelloWorld\n\n{\n\n03\n\ncontract\n\nHelloWorld\n\n{\n\n04\n\n04\n\n05\n\nstring\n\npublic\n\nmessage\n\n;\n\n05\n\nstring\n\npublic\n\nmessage\n\n;\n\n06\n\n06\n\n07\n\nconstructor\n\n(\n\nstring\n\nmemory\n\ninitMessage\n\n)\n\npublic\n\n{\n\n07\n\nconstructor\n\n(\n\nstring\n\nmemory\n\ninitMessage\n\n)\n\npublic\n\n{\n\n08\n\nmessage\n\n=\n\ninitMessage\n\n;\n\n08\n\nmessage\n\n=\n\ninitMessage\n\n;\n\n09\n\n}\n\n09\n\n}\n\n10\n\n10\n\n11\n\nfunction\n\nupdate\n\n(\n\nstring\n\nmemory\n\nnewMessage\n\n)\n\npublic\n\n{\n\n11\n\nfunction\n\nupdate\n\n(\n\nstring\n\nmemory\n\nnewMessage\n\n)\n\npublic\n\n{\n\n12\n\nmessage\n\n=\n\nnewMessage\n\n;\n\n12\n\nmessage\n\n=\n\nnewMessage\n\n;\n\n13\n\n}\n\n13\n\n}\n\n14\n\n}\n\n14\n\n}\n\n#\n\nWeb3j supports the auto-generation of smart contract function wrappers in Java from Solidity ABI files.\n\nTo get started, you must have two files\n\n\u2022 ABI JSON file <Contract>.json\n\n\u2022 ByteCode file <Contract>.bin\n\n<Contract>.json\n\n<Contract>.bin", "explanation": "**Section Overview: Creating a Kotlin/Java Contract Class from ABI**\n\nThis documentation section explains how to generate a Java contract class from a Solidity smart contract's ABI (Application Binary Interface) file using Web3j. The purpose is to enable interaction between a Kotlin/Java application and a smart contract deployed on the Ethereum blockchain.\n\n**Main Purpose:**\n\nThe main purpose of this section is to guide developers in using the Web3j library to auto-generate Java wrappers for their Solidity smart contracts. This allows them to easily interact with the contract functions, such as reading and writing data, directly from their Kotlin/Java application.\n\n**Key Requirements:**\n\nTo follow this tutorial, developers need to have two files:\n\n1. ABI JSON file (`<Contract>.json`)\n2. ByteCode file (`<Contract>.bin`)\n\nThese files are used as input to generate the Java contract class, which can then be used to interact with the smart contract on the Ethereum blockchain.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/featured-chains/ethereum/android#chunk-11", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\n$\n\ncurl\n\n-L https://get.web3j.io\n\n|\n\nsh\n\n01\n\n$\n\ncurl\n\n-L https://get.web3j.io\n\n|\n\nsh\n\nYou may need to install a JDK to support this library\n\nAfter it has been installed to your computer, you may run the following command to check\n\nCopy\n\n01\n\n$ web3j version\n\n01\n\n$ web3j version", "explanation": "This documentation section is about installing the `web3j` CLI tool.\n\n**What is web3j?**\n`web3j` is a Java-based library for interacting with Ethereum blockchain. It allows developers to write smart contracts, interact with them, and access Ethereum data in a programmatic way.\n\n**Main Purpose:**\nThe main purpose of this section is to guide users on how to install the `web3j` CLI tool on their computer, which is a command-line interface for interacting with the Ethereum blockchain using Java.\n\n**Key Points:**\n\n* The installation process involves downloading and running a script from a URL (`https://get.web3j.io`) using the `curl` command.\n* This may require installing a JDK (Java Development Kit) on your computer, if you don't already have one.\n* After installation, users can verify that `web3j` is installed correctly by running the command `web3j version`.\n\nIn summary, this section of documentation helps users get started with using the `web3j` library for Ethereum development by installing the CLI tool on their computer.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/featured-chains/ethereum/android#chunk-12", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\n$ web3j solidity generate -a\n\n=\n\n./path/to/\n\n<\n\nContract\n\n>\n\n.json -b\n\n=\n\n./path/to/\n\n<\n\nContract\n\n>\n\n.bin -o\n\n=\n\n/output/path/ -p\n\n=\n\n{\n\npackageName\n\n}\n\n01\n\n$ web3j solidity generate -a\n\n=\n\n./path/to/\n\n<\n\nContract\n\n>\n\n.json -b\n\n=\n\n./path/to/\n\n<\n\nContract\n\n>\n\n.bin -o\n\n=\n\n/output/path/ -p\n\n=\n\n{\n\npackageName\n\n}\n\nYou\u2019ll find a Contract.java file created in your output directory above. Put this file in your project, and no more changes are needed.\n\nContract.java\n\nFor more details about this section, please click here.\n\nclick here", "explanation": "This documentation section is titled \"#Create the contract class\" and it's about using a command-line tool called `web3j` to generate a Java file (`Contract.java`) that represents an Ethereum smart contract.\n\nThe main purpose of this step is to:\n\n1. Take a Solidity contract (written in a specific programming language for Ethereum) as input.\n2. Use the `web3j` tool to convert the Solidity contract into a corresponding Java class (i.e., `Contract.java`).\n3. This generated Java class can then be used in an Android project to interact with the smart contract on the Ethereum blockchain.\n\nIn other words, this section is about automating the process of creating a Java interface for an Ethereum smart contract, making it easier to integrate the contract's functionality into an Android app.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/featured-chains/ethereum/android#chunk-13", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nWhen deploying contract, building or interacting with a contract using web3j library, Magic offers MagicTxnManager class as a default TransactionManager that helps you to avoid dealing with private keys or credentials that Contract class requires.\n\nMagicTxnManager\n\nTransactionManager\n\nCopy\n\n01\n\nimport\n\nlink\n\n.\n\nmagic\n\n.\n\ndemo\n\n.\n\ncontract\n\n.\n\nContract\n\n// This is the contract class you created above\n\n01\n\nimport\n\nlink\n\n.\n\nmagic\n\n.\n\ndemo\n\n.\n\ncontract\n\n.\n\nContract\n\n// This is the contract class you created above\n\n02\n\n02\n\n03\n\nclass\n\nMagicActivity\n\n:\n\nAppCompatActivity\n\n(\n\n)\n\n{\n\n03\n\nclass\n\nMagicActivity\n\n:\n\nAppCompatActivity\n\n(\n\n)\n\n{\n\n04\n\n04\n\n05\n\nlateinit\n\nvar\n\nmagic\n\n:\n\nMagic\n\n05\n\nlateinit\n\nvar\n\nmagic\n\n:\n\nMagic\n\n06\n\nlateinit\n\nvar\n\nweb3j\n\n:\n\nWeb3j\n\n06\n\nlateinit\n\nvar\n\nweb3j\n\n:\n\nWeb3j\n\n07\n\n07\n\n08\n\n// After user is successfully authenticated\n\n08\n\n// After user is successfully authenticated\n\n09\n\nprivate\n\nvar\n\naccount\n\n:\n\nString\n\n?\n\n=\n\nnull\n\n09\n\nprivate\n\nvar\n\naccount\n\n:\n\nString\n\n?\n\n=\n\nnull\n\n10\n\n10\n\n11\n\noverride\n\nfun\n\nonCreate\n\n(\n\nsavedInstanceState\n\n:\n\nBundle\n\n?\n\n)\n\n{\n\n11\n\noverride\n\nfun\n\nonCreate\n\n(\n\nsavedInstanceState\n\n:\n\nBundle\n\n?\n\n)\n\n{\n\n12\n\nsuper\n\n.\n\nonCreate\n\n(\n\nsavedInstanceState\n\n)\n\n12\n\nsuper\n\n.\n\nonCreate\n\n(\n\nsavedInstanceState\n\n)\n\n13\n\nmagic\n\n=\n\n(\n\napplicationContext\n\nas\n\nMagicDemoApp\n\n)\n\n.\n\nmagic\n\n13\n\nmagic\n\n=\n\n(\n\napplicationContext\n\nas\n\nMagicDemoApp\n\n)\n\n.\n\nmagic\n\n14\n\nweb3j\n\n=\n\nWeb3j\n\n.\n\nbuild\n\n(\n\nmagic\n\n.\n\nrpcProvider\n\n)\n\n14\n\nweb3j\n\n=\n\nWeb3j\n\n.\n\nbuild\n\n(\n\nmagic\n\n.\n\nrpcProvider\n\n)\n\n15\n\n}\n\n15\n\n}\n\n16\n\n16\n\n17\n\nfun\n\ndeployContract\n\n(\n\nview\n\n:\n\nView\n\n)\n\n{\n\n17\n\nfun\n\ndeployContract\n\n(\n\nview\n\n:\n\nView\n\n)\n\n{\n\n18\n\ntry\n\n{\n\n18\n\ntry\n\n{\n\n19\n\nval\n\nprice\n\n=\n\nBigInteger\n\n.\n\nvalueOf\n\n(\n\n22000000000L\n\n)\n\n19\n\nval\n\nprice\n\n=\n\nBigInteger\n\n.\n\nvalueOf\n\n(\n\n22000000000L\n\n)\n\n20\n\nval\n\nlimit\n\n=\n\nBigInteger\n\n.\n\nvalueOf\n\n(\n\n4300000\n\n)\n\n20\n\nval\n\nlimit\n\n=\n\nBigInteger\n\n.\n\nvalueOf\n\n(\n\n4300000\n\n)\n\n21\n\nval\n\ngasProvider\n\n=\n\nStaticGasProvider\n\n(\n\nprice\n\n,\n\nlimit\n\n)\n\n21\n\nval\n\ngasProvider\n\n=\n\nStaticGasProvider\n\n(\n\nprice\n\n,\n\nlimit\n\n)\n\n22\n\nval\n\ncontract\n\n=\n\nContract\n\n.\n\ndeploy\n\n(\n\n22\n\nval\n\ncontract\n\n=\n\nContract\n\n.\n\ndeploy\n\n(\n\n23\n\nweb3j\n\n,\n\n23\n\nweb3j\n\n,\n\n24\n\naccount\n\n?\n\n.\n\nlet\n\n{\n\nMagicTxnManager\n\n(\n\nweb3j\n\n,\n\nit\n\n)\n\n}\n\n,\n\n24\n\naccount\n\n?\n\n.\n\nlet\n\n{\n\nMagicTxnManager\n\n(\n\nweb3j\n\n,\n\nit\n\n)\n\n}\n\n,\n\n25\n\ngasProvider\n\n,\n\n25\n\ngasProvider\n\n,\n\n26\n\n\"HELLO_WORLD_FROM_ANDROID\"\n\n26\n\n\"HELLO_WORLD_FROM_ANDROID\"\n\n27\n\n)\n\n.\n\nsend\n\n(\n\n)\n\n27\n\n)\n\n.\n\nsend\n\n(\n\n)\n\n28\n\nLog\n\n.\n\nd\n\n(\n\n\"Magic\"\n\n,\n\n\"Deploy to\"\n\n+\n\ncontract\n\n.\n\ncontractAddress\n\n)\n\n28\n\nLog\n\n.\n\nd\n\n(\n\n\"Magic\"\n\n,\n\n\"Deploy to\"\n\n+\n\ncontract\n\n.\n\ncontractAddress\n\n)\n\n29\n\n}\n\ncatch\n\n(\n\ne\n\n:\n\nException\n\n)\n\n{\n\n29\n\n}\n\ncatch\n\n(\n\ne\n\n:\n\nException\n\n)\n\n{\n\n30\n\nLog\n\n.\n\ne\n\n(\n\n\"E\"\n\n,\n\n\"error\"\n\n,\n\ne\n\n)\n\n30\n\nLog\n\n.\n\ne\n\n(\n\n\"E\"\n\n,\n\n\"error\"\n\n,\n\ne\n\n)\n\n31\n\n}\n\n31\n\n}\n\n32\n\n}\n\n32\n\n}\n\n33\n\n}\n\n33\n\n}", "explanation": "The `#Deploy Contract` section is a documentation part of the Magic Labs embedded wallet, specifically for Android. It explains how to deploy a contract using the Web3j library and Magic's `MagicTxnManager` class.\n\n**Main Purpose:**\n\nThe main purpose of this section is to provide a clear guide on how to interact with a contract on the Ethereum blockchain using the Magic Labs embedded wallet on Android devices. This includes:\n\n1. Creating a contract instance using the `Contract` class.\n2. Deploying the contract to the Ethereum blockchain using the `deploy` method.\n3. Using the `MagicTxnManager` class as a default Transaction Manager to avoid dealing with private keys or credentials required by the Contract class.\n\n**Key Points:**\n\n* The section provides an example code snippet for deploying a contract, including setting up a Web3j instance and creating a `StaticGasProvider`.\n* It explains how to use the `MagicTxnManager` class to handle transactions without exposing sensitive information.\n* The example uses a simple \"Hello World\" contract as a demonstration.\n\n**Context:**\n\nThis documentation section is likely intended for developers who want to integrate the Magic Labs embedded wallet into their Android applications and interact with Ethereum contracts. It provides a step-by-step guide on how to use the Magic Labs API to deploy contracts and manage transactions securely.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/featured-chains/ethereum/android#chunk-14", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\nfun\n\ncontractRead\n\n(\n\nview\n\n:\n\nView\n\n)\n\n{\n\n01\n\nfun\n\ncontractRead\n\n(\n\nview\n\n:\n\nView\n\n)\n\n{\n\n02\n\ntry\n\n{\n\n02\n\ntry\n\n{\n\n03\n\nval\n\nprice\n\n=\n\nBigInteger\n\n.\n\nvalueOf\n\n(\n\n22000000000L\n\n)\n\n03\n\nval\n\nprice\n\n=\n\nBigInteger\n\n.\n\nvalueOf\n\n(\n\n22000000000L\n\n)\n\n04\n\nval\n\nlimit\n\n=\n\nBigInteger\n\n.\n\nvalueOf\n\n(\n\n4300000\n\n)\n\n04\n\nval\n\nlimit\n\n=\n\nBigInteger\n\n.\n\nvalueOf\n\n(\n\n4300000\n\n)\n\n05\n\nval\n\ngasProvider\n\n=\n\nStaticGasProvider\n\n(\n\nprice\n\n,\n\nlimit\n\n)\n\n05\n\nval\n\ngasProvider\n\n=\n\nStaticGasProvider\n\n(\n\nprice\n\n,\n\nlimit\n\n)\n\n06\n\n06\n\n07\n\n// Contract in testnet\n\n07\n\n// Contract in testnet\n\n08\n\nval\n\ncontract\n\n=\n\nExampleContract\n\n.\n\nload\n\n(\n\n\"0x6a2d321a3679b1b3c8a19b84e41abd11763a8ab5\"\n\n,\n\nweb3j\n\n,\n\naccount\n\n?\n\n.\n\nlet\n\n{\n\nMagicTxnManager\n\n(\n\nweb3j\n\n,\n\nit\n\n)\n\n}\n\n,\n\ngasProvider\n\n)\n\n08\n\nval\n\ncontract\n\n=\n\nExampleContract\n\n.\n\nload\n\n(\n\n\"0x6a2d321a3679b1b3c8a19b84e41abd11763a8ab5\"\n\n,\n\nweb3j\n\n,\n\naccount\n\n?\n\n.\n\nlet\n\n{\n\nMagicTxnManager\n\n(\n\nweb3j\n\n,\n\nit\n\n)\n\n}\n\n,\n\ngasProvider\n\n)\n\n09\n\nif\n\n(\n\ncontract\n\n.\n\nisValid\n\n)\n\n{\n\n09\n\nif\n\n(\n\ncontract\n\n.\n\nisValid\n\n)\n\n{\n\n10\n\nval\n\nethCall\n\n=\n\ncontract\n\n.\n\nmessage\n\n(\n\n)\n\n.\n\nsend\n\n(\n\n)\n\n10\n\nval\n\nethCall\n\n=\n\ncontract\n\n.\n\nmessage\n\n(\n\n)\n\n.\n\nsend\n\n(\n\n)\n\n11\n\nLog\n\n.\n\nd\n\n(\n\n\"Magic\"\n\n,\n\nethCall\n\n.\n\ntoString\n\n(\n\n)\n\n)\n\n11\n\nLog\n\n.\n\nd\n\n(\n\n\"Magic\"\n\n,\n\nethCall\n\n.\n\ntoString\n\n(\n\n)\n\n)\n\n12\n\n}\n\nelse\n\n{\n\n12\n\n}\n\nelse\n\n{\n\n13\n\nthrow\n\nError\n\n(\n\n\"contract not valid\"\n\n)\n\n13\n\nthrow\n\nError\n\n(\n\n\"contract not valid\"\n\n)\n\n14\n\n}\n\n14\n\n}\n\n15\n\n}\n\ncatch\n\n(\n\ne\n\n:\n\nException\n\n)\n\n{\n\n15\n\n}\n\ncatch\n\n(\n\ne\n\n:\n\nException\n\n)\n\n{\n\n16\n\nLog\n\n.\n\ne\n\n(\n\n\"E\"\n\n,\n\n\"error\"\n\n,\n\ne\n\n)\n\n16\n\nLog\n\n.\n\ne\n\n(\n\n\"E\"\n\n,\n\n\"error\"\n\n,\n\ne\n\n)\n\n17\n\n}\n\n17\n\n}\n\n18\n\n}\n\n18\n\n}", "explanation": "The `contractRead` function is a part of the Magic Labs embedded wallet documentation and serves to read data from an Ethereum contract. Here's a breakdown of its purpose and functionality:\n\n**Purpose:**\n\nThe primary goal of this function is to interact with a specified Ethereum contract, retrieve specific data (in this case, a message), and handle any errors that might occur during the process.\n\n**Functionality:**\n\n1. **Contract Loading**: The `contractRead` function loads an Ethereum contract using the `ExampleContract.load()` method. It takes several parameters:\n\t* The contract's address (`\"0x6a2d321a3679b1b3c8a19b84e41abd11763a8ab5\"`).\n\t* A `web3j` instance, which is a popular Java library for interacting with the Ethereum blockchain.\n\t* An optional `account?` parameter, which seems to be related to a specific Ethereum account.\n\t* A `gasProvider` object, used to estimate gas costs for transactions. In this case, it's created using the `StaticGasProvider` class with predefined values (`price` and `limit`).\n2. **Data Retrieval**: If the contract is valid (i.e., successfully loaded), the function retrieves a message from the contract using the `message()` method.\n3. **Error Handling**: The function catches any exceptions that occur during data retrieval or contract loading. If an error occurs, it logs a message with the error details and re-throws the exception.\n4. **Logging Result**: If the data retrieval is successful, the function logs a message with the retrieved data.\n\nIn summary, the `contractRead` function provides a way to interact with an Ethereum contract, retrieve specific data, and handle errors that might occur during this process.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/featured-chains/ethereum/android#chunk-15", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\nfun\n\ncontractWrite\n\n(\n\nview\n\n:\n\nView\n\n)\n\n{\n\n01\n\nfun\n\ncontractWrite\n\n(\n\nview\n\n:\n\nView\n\n)\n\n{\n\n02\n\ntry\n\n{\n\n02\n\ntry\n\n{\n\n03\n\nval\n\nprice\n\n=\n\nBigInteger\n\n.\n\nvalueOf\n\n(\n\n22000000000L\n\n)\n\n03\n\nval\n\nprice\n\n=\n\nBigInteger\n\n.\n\nvalueOf\n\n(\n\n22000000000L\n\n)\n\n04\n\nval\n\nlimit\n\n=\n\nBigInteger\n\n.\n\nvalueOf\n\n(\n\n4300000\n\n)\n\n04\n\nval\n\nlimit\n\n=\n\nBigInteger\n\n.\n\nvalueOf\n\n(\n\n4300000\n\n)\n\n05\n\nval\n\ngasProvider\n\n=\n\nStaticGasProvider\n\n(\n\nprice\n\n,\n\nlimit\n\n)\n\n05\n\nval\n\ngasProvider\n\n=\n\nStaticGasProvider\n\n(\n\nprice\n\n,\n\nlimit\n\n)\n\n06\n\n06\n\n07\n\n// Contract in testnet\n\n07\n\n// Contract in testnet\n\n08\n\nval\n\ncontract\n\n=\n\nExampleContract\n\n.\n\nload\n\n(\n\n\"0x6a2d321a3679b1b3c8a19b84e41abd11763a8ab5\"\n\n,\n\nweb3j\n\n,\n\naccount\n\n?\n\n.\n\nlet\n\n{\n\nMagicTxnManager\n\n(\n\nweb3j\n\n,\n\nit\n\n)\n\n}\n\n,\n\ngasProvider\n\n)\n\n08\n\nval\n\ncontract\n\n=\n\nExampleContract\n\n.\n\nload\n\n(\n\n\"0x6a2d321a3679b1b3c8a19b84e41abd11763a8ab5\"\n\n,\n\nweb3j\n\n,\n\naccount\n\n?\n\n.\n\nlet\n\n{\n\nMagicTxnManager\n\n(\n\nweb3j\n\n,\n\nit\n\n)\n\n}\n\n,\n\ngasProvider\n\n)\n\n09\n\nif\n\n(\n\ncontract\n\n.\n\nisValid\n\n)\n\n{\n\n09\n\nif\n\n(\n\ncontract\n\n.\n\nisValid\n\n)\n\n{\n\n10\n\nval\n\nethCall\n\n=\n\ncontract\n\n.\n\nupdate\n\n(\n\n\"NEW_MESSAGE_FROM_ANDROID\"\n\n)\n\n.\n\nsend\n\n(\n\n)\n\n10\n\nval\n\nethCall\n\n=\n\ncontract\n\n.\n\nupdate\n\n(\n\n\"NEW_MESSAGE_FROM_ANDROID\"\n\n)\n\n.\n\nsend\n\n(\n\n)\n\n11\n\nLog\n\n.\n\nd\n\n(\n\n\"Magic\"\n\n,\n\nethCall\n\n.\n\ntoString\n\n(\n\n)\n\n)\n\n11\n\nLog\n\n.\n\nd\n\n(\n\n\"Magic\"\n\n,\n\nethCall\n\n.\n\ntoString\n\n(\n\n)\n\n)\n\n12\n\n}\n\nelse\n\n{\n\n12\n\n}\n\nelse\n\n{\n\n13\n\nthrow\n\nError\n\n(\n\n\"contract not valid\"\n\n)\n\n13\n\nthrow\n\nError\n\n(\n\n\"contract not valid\"\n\n)\n\n14\n\n}\n\n14\n\n}\n\n15\n\n}\n\ncatch\n\n(\n\ne\n\n:\n\nException\n\n)\n\n{\n\n15\n\n}\n\ncatch\n\n(\n\ne\n\n:\n\nException\n\n)\n\n{\n\n16\n\nLog\n\n.\n\ne\n\n(\n\n\"E\"\n\n,\n\n\"error\"\n\n,\n\ne\n\n)\n\n16\n\nLog\n\n.\n\ne\n\n(\n\n\"E\"\n\n,\n\n\"error\"\n\n,\n\ne\n\n)\n\n17\n\n}\n\n17\n\n}\n\n18\n\n}\n\n18\n\n}", "explanation": "The `contractWrite` function is a part of the Magic Labs embedded wallet documentation, specifically designed for Android devices. Here's what it does in simple terms:\n\n**Purpose:**\n\nThe main purpose of this function is to write (or update) data on a smart contract using Ethereum.\n\n**Key Steps:**\n\n1. **Define Gas Price and Limit:** The function sets a gas price (2.20 ether) and limit (4,300,000 gas units) for the transaction.\n2. **Load Contract:** It loads an example contract from a testnet address (\"0x6a2d321a36...\") using the Web3j library and Magic Txn Manager.\n3. **Check Contract Validity:** If the loaded contract is valid, proceed to step 4; otherwise, throw an error.\n4. **Update Contract:** The function updates the contract by calling its `update` method with a message (\"NEW_MESSAGE_FROM_ANDROID\").\n5. **Send Transaction:** It sends the updated transaction using the `send` method.\n6. **Log Result:** If successful, logs a debug message with the result of the transaction.\n\n**Error Handling:**\n\nIf any error occurs during this process (e.g., contract is invalid or exception is thrown), it will be logged and handled accordingly.\n\nIn summary, the `contractWrite` function enables writing data to an Ethereum smart contract using Magic Labs' embedded wallet on Android devices.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/featured-chains/ethereum/android#chunk-16", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 Magic Android SDK\n\nMagic Android SDK", "explanation": "The '#Resources' section is a documentation block that provides a related resource for developers integrating Magic Labs' embedded wallet technology, specifically for the Ethereum blockchain on Android platforms.\n\nThe main purpose of this section is to point developers to the necessary library or tool, which in this case is the \"Magic Android SDK\". This SDK is likely a software development kit that allows Android developers to easily integrate Magic Labs' wallet functionality into their Android apps, making it a crucial resource for developers who want to leverage Magic Labs' technology on the Android platform.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/featured-chains/ethereum/android#chunk-17", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nThe Magic SDK for React Native is your entry-point to secure, passwordless authentication for your mobile app. This guide will cover some important topics for getting started with React Native APIs and to make the most of Magic's features.", "explanation": "This documentation section is about integrating Magic Labs' embedded wallet into a React Native mobile application. The main purpose is to provide an overview and guide on how to securely implement passwordless authentication in a React Native app using Magic's SDK (Software Development Kit).", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/react-native#chunk-1", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nThe Magic class is the entry-point to the Magic SDK. It must be instantiated with a Magic publishable API key.\n\n#\n\nThe Magic SDK for React Native supports both Bare and Expo. Follow the installation steps relevant to your setup.\n\nCopy\n\n01\n\nnpm\n\ninstall\n\n--save @magic-sdk/react-native-bare\n\n01\n\nnpm\n\ninstall\n\n--save @magic-sdk/react-native-bare\n\n02\n\nnpm\n\ninstall\n\n--save react-native-device-info\n\n# Required Peer Dependency\n\n02\n\nnpm\n\ninstall\n\n--save react-native-device-info\n\n# Required Peer Dependency\n\n03\n\nnpm\n\ninstall\n\n--save @react-native-community/async-storage\n\n# Required Peer Dependency\n\n03\n\nnpm\n\ninstall\n\n--save @react-native-community/async-storage\n\n# Required Peer Dependency\n\n04\n\nnpm\n\ninstall\n\n--save react-native-safe-area-context\n\n# Required Peer Dependency\n\n04\n\nnpm\n\ninstall\n\n--save react-native-safe-area-context\n\n# Required Peer Dependency\n\n05\n\n05\n\n06\n\n# For iOS\n\n06\n\n# For iOS\n\n07\n\ncd\n\nios\n\n07\n\ncd\n\nios\n\n08\n\n\u2060pod\n\ninstall\n\n08\n\n\u2060pod\n\ninstall\n\n09\n\n\u2060\n\n09\n\n\u2060\n\n10\n\n# Start your app\n\n10\n\n# Start your app\n\n11\n\n\u2060cd /path/to/project/root\n\n11\n\n\u2060cd /path/to/project/root\n\n12\n\nyarn\n\nstart\n\n12\n\nyarn\n\nstart\n\n13\n\n\u2060\n\n13\n\n\u2060", "explanation": "This documentation section is about installing the Magic Labs embedded wallet SDK for React Native, which is a JavaScript framework for building mobile apps. The main purpose of this section is to guide developers on how to set up and integrate the Magic SDK into their React Native project.\n\nHere's what you need to know:\n\n1. **Instantiating the Magic class**: The first step is to create an instance of the Magic class, which serves as the entry-point for the Magic SDK. This requires a publishable API key.\n2. **Installation steps**: The section provides specific instructions on how to install the required dependencies using npm (Node Package Manager) or yarn. These dependencies include:\n\t* `@magic-sdk/react-native-bare`\n\t* `react-native-device-info` (peer dependency)\n\t* `@react-native-community/async-storage` (peer dependency)\n\t* `react-native-safe-area-context` (peer dependency)\n3. **iOS-specific instructions**: For iOS development, the section provides additional steps to run `pod install` in the project root directory.\n4. **Starting the app**: Once all dependencies are installed and configured, you can start your React Native app using `yarn start`.\n\nBy following these installation steps, developers can successfully integrate the Magic Labs embedded wallet SDK into their React Native projects, enabling them to provide a secure and seamless payment experience for their users.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/react-native#chunk-2", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n#\n\nMagic()\n\nConfigure and construct your Magic SDK instance.\n\nParameter\n\nType\n\nDefinition\n\napiKey\n\napiKey\n\nString\n\nYour publishable API Key retrieved from the Magic Dashboard.\n\noptions.locale?\n\noptions.locale?\n\nString\n\nCustomize the language of Magic's modal, email and confirmation screen. See Localization for more.\n\nLocalization\n\noptions.network?\n\noptions.network?\n\nString | Object\n\n(String): A representation of the connected Ethereum network (mainnet or goerli).\n\n\u2060(Object): A custom Ethereum Node configuration with the following shape:\n\n\u2060rpcUrl (String): A URL pointing to your custom Ethereum Node.\u2060\u2060\n\nrpcUrl\n\n\u2060chainId? (Number): Some Node infrastructures require you to pass an explicit chain ID. If you are aware that your Node requires this configuration, pass it here as an integer.\n\nchainId?\n\noptions.endpoint?\n\noptions.endpoint?\n\nString\n\nA URL pointing to the Magic <iframe> application.\n\n<iframe>\n\noptions.deferPreload?\n\noptions.deferPreload?\n\nBoolean\n\nAn optional flag to delay the loading of the Magic Iframe's static assets until an SDK function is explicitly invoked. \u2060\u2060\u2060Set this to true if latency bottlenecks are a concern.\n\noptions.useStorageCache?\n\noptions.useStorageCache?\n\nBoolean\n\nAn optional flag to allow the usage of the local storage as cache. Currently it is only used for faster calls to isLoggedIn. When set to true, the magic.user.onUserLoggedOut event listener needs to be used.\n\nisLoggedIn\n\ntrue\n\nmagic.user.onUserLoggedOut", "explanation": "**Constructor: `Magic()`**\n\nThe `Magic()` constructor is a method in the Magic SDK that allows you to configure and construct an instance of the SDK. This method is essential for initializing the Magic client-side SDK, which enables features like authentication, user management, and wallet integration.\n\n**Key Parameters:**\n\n1. **`apiKey`:** A required parameter that takes your publishable API Key from the Magic Dashboard. This key is used to authenticate with the Magic server.\n2. **`options.locale`:** An optional parameter that allows you to customize the language of Magic's modal, email, and confirmation screens.\n3. **`options.network`:** An optional parameter that enables you to specify a custom Ethereum network (mainnet or goerli) or a custom Ethereum Node configuration with `rpcUrl`, `chainId`, and other options.\n4. **`options.endpoint`:** An optional parameter that takes a URL pointing to the Magic <iframe> application.\n5. **`options.deferPreload`:** An optional boolean flag that delays the loading of the Magic Iframe's static assets until an SDK function is explicitly invoked.\n6. **`options.useStorageCache`:** An optional boolean flag that allows using local storage as a cache for faster calls to `isLoggedIn`. This also requires you to use the `magic.user.onUserLoggedOut` event listener.\n\n**Main Purpose:**\n\nThe primary purpose of the `Magic()` constructor is to initialize an instance of the Magic SDK, which enables you to use various features like authentication, user management, and wallet integration in your React Native application. By configuring the SDK with your API key, custom options (if needed), and event listeners, you can integrate the Magic SDK into your app and provide a seamless experience for users.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/react-native#chunk-3", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nInitialize Magic instance.\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'@magic-sdk/react-native-bare'\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'@magic-sdk/react-native-bare'\n\n02\n\n02\n\n03\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n03\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)", "explanation": "The Initialization section explains how to set up the Magic instance, a crucial step in integrating Magic Labs' embedded wallet functionality into a React Native application.\n\n**Main Purpose:**\nThe primary purpose is to create a new instance of the Magic class, which is the main entry point for interacting with Magic's API. This instance is required for further wallet operations, such as user authentication and transaction management.\n\n**Key Steps:**\n\n1. Import the Magic class from the `@magic-sdk/react-native-bare` package.\n2. Create a new instance of the Magic class, passing your Publishable API Key as an argument to the constructor.\n\nBy following these steps, developers can establish a connection to Magic's API and begin building embedded wallet functionality into their React Native application.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/react-native#chunk-4", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nRelayer\n\nTo facilitate events between the Magic <iframe> context and your React Native application, the <Relayer> React component must be exposed on your Magic instance.\n\n<iframe>\n\n<Relayer>\n\n#\n\n\u2022 backgroundColor? (String): Used to render a custom background color. By default, the background will be white. If you have changed the background color as part of your custom branding setup, make sure to pass that color to magic.Relayer.\n\nbackgroundColor?\n\ncustom branding setup\n\nmagic.Relayer", "explanation": "Here's a clear and concise explanation of what the `#Relayer - #Arguments` documentation section is about:\n\n**What is it?**\nThe `Relayer` is a React component provided by Magic Labs to facilitate communication between the Magic iframe context and a React Native application.\n\n**Main Purpose:**\nThe main purpose of the `Relayer` component is to enable events to be passed between the Magic iframe and your React Native app, allowing for seamless integration and synchronization of data between the two contexts.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/react-native#chunk-5", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\nfunction\n\nApp\n\n(\n\n)\n\n{\n\n01\n\nfunction\n\nApp\n\n(\n\n)\n\n{\n\n02\n\nreturn\n\n(\n\n02\n\nreturn\n\n(\n\n03\n\n<\n\nSafeAreaProvider\n\n>\n\n03\n\n<\n\nSafeAreaProvider\n\n>\n\n04\n\n{\n\n/* Remember to render the `Relayer` component into your app! */\n\n}\n\n04\n\n{\n\n/* Remember to render the `Relayer` component into your app! */\n\n}\n\n05\n\n<\n\nm.Relayer\n\n/>\n\n05\n\n<\n\nm.Relayer\n\n/>\n\n06\n\n</\n\nSafeAreaProvider\n\n>\n\n06\n\n</\n\nSafeAreaProvider\n\n>\n\n07\n\n)\n\n;\n\n07\n\n)\n\n;\n\n08\n\n}\n\n08\n\n}", "explanation": "This documentation section is an example code snippet in JavaScript, specifically using the React Native framework. It appears to be a basic implementation of a Magic Labs embedded wallet in a React Native app.\n\nHere's what it does:\n\n1. Defines a `App` function that returns a JSX (JavaScript XML) element.\n2. The `App` function is called twice, which seems redundant but might be due to a copy-paste error or a specific requirement in the documentation.\n3. Inside the `App` function, a `SafeAreaProvider` component from React Native is wrapped around another JSX element.\n4. Within the inner JSX element, two instances of a comment remind the user to render the `Relayer` component (imported from a module named `m`) into their app.\n5. Finally, the `Relayer` component is rendered.\n\nThe main purpose of this code snippet is to demonstrate how to integrate Magic Labs' embedded wallet into a React Native app. The `Relayer` component is likely responsible for handling interactions with the Magic Labs wallet, such as user authentication and transaction signing.\n\nTo use this example in your own project, you would need to:\n\n* Import the `m.Relayer` component from the correct module\n* Render the `App` function as the root element of your app\n* Make sure to render the `Relayer` component within the app", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/react-native#chunk-6", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nThe Auth Module and it's members are accessible on the Magic SDK instance by the auth property.\n\nauth\n\nCopy\n\n01\n\n// Bare React Native\n\n01\n\n// Bare React Native\n\n02\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'@magic-sdk/react-native-bare'\n\n;\n\n02\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'@magic-sdk/react-native-bare'\n\n;\n\n03\n\n// Expo React Native\n\n03\n\n// Expo React Native\n\n04\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'@magic-sdk/react-native-expo'\n\n;\n\n04\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'@magic-sdk/react-native-expo'\n\n;\n\n05\n\n05\n\n06\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n06\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n07\n\n07\n\n08\n\nmagic\n\n.\n\nauth\n\n;\n\n08\n\nmagic\n\n.\n\nauth\n\n;\n\n09\n\nmagic\n\n.\n\nauth\n\n.\n\nloginWithEmailOTP\n\n;\n\n09\n\nmagic\n\n.\n\nauth\n\n.\n\nloginWithEmailOTP\n\n;\n\n10\n\nmagic\n\n.\n\nauth\n\n.\n\nloginWithSMS\n\n;\n\n10\n\nmagic\n\n.\n\nauth\n\n.\n\nloginWithSMS\n\n;\n\n11\n\nmagic\n\n.\n\nauth\n\n.\n\nupdateEmailWithUI\n\n;\n\n11\n\nmagic\n\n.\n\nauth\n\n.\n\nupdateEmailWithUI\n\n;\n\n#\n\nloginWithEmailOTP\n\nAuthenticate a user passwordlessly using an email one-time code sent to the specified user's email address.\n\nOnly available with Dedicated Wallet.\n\n#\n\n\u2022 email (String): The user email to log in with\n\n\u2022 showUI? (Boolean): If true, show an out-of-the-box UI to accept the OTP from user. Defaults to true.\n\n\u2022 deviceCheckUI? (Boolean): The default value is true. It shows Magic branded UI securing sign-ins from new devices. If set to false, the UI will remain hidden. However, this the false value only takes effect when you have also set the showUI: false. \u2060Available since magic-sdk@19.1.0.\n\nemail\n\nshowUI?\n\ntrue\n\ntrue\n\ndeviceCheckUI?\n\ntrue\n\nfalse\n\nshowUI: false\n\nmagic-sdk@19.1.0", "explanation": "**Auth Module - #loginWithEmailOTP - #Arguments**\n\nThis documentation section explains how to use the `auth.loginWithEmailOTP` method in the Magic Labs embedded wallet SDK to authenticate a user passwordlessly using an email one-time code sent to their email address.\n\n**Main Purpose:**\n\nThe main purpose of this method is to provide a secure and passwordless authentication experience for users, using an email one-time code as a verification mechanism. This approach eliminates the need for passwords, reducing the risk of password-related security issues.\n\n**Key Parameters:**\n\n* `email`: The user's email address to authenticate with.\n* `showUI?` (Boolean): An optional parameter that defaults to true. When set to true, it displays an out-of-the-box UI to accept the OTP from the user.\n* `deviceCheckUI?` (Boolean): Another optional parameter that defaults to true. It shows Magic branded UI securing sign-ins from new devices. If set to false, the UI will remain hidden.\n\n**Example Usage:**\n\n```javascript\nconst magic = new Magic('PUBLISHABLE_API_KEY');\nmagic.auth.loginWithEmailOTP({\n  email: 'user@example.com',\n  showUI: true,\n  deviceCheckUI: true,\n});\n```\n\nIn this example, the `loginWithEmailOTP` method is used to authenticate a user with the email address `user@example.com`, displaying an out-of-the-box UI to accept the OTP from the user and showing Magic branded UI securing sign-ins from new devices.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/react-native#chunk-7", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 PromiEvent<string | null>: The promise resolves upon authentication request success and rejects with a specific error code if the request fails. The resolved value is a Decentralized ID token with a default 15-minute lifespan.\n\nPromiEvent<string | null>", "explanation": "**#Returns Documentation Explanation**\n\nThe `#Returns` section in the Magic Labs embedded wallet documentation for React Native explains what value is returned by a function or method, specifically in this case, an authentication request.\n\n**Main Purpose:**\n\nThe main purpose of this section is to inform developers about the expected output of a successful or failed authentication request. It provides information about the type of value returned and its characteristics.\n\n**Key Points:**\n\n1. **PromiEvent Type**: The returned value is of type `PromiEvent`, which is a promise that resolves to a specific value or rejects with an error code.\n2. **Resolved Value**: If the authentication request is successful, the promise resolves to a **Decentralized ID token** with a default lifespan of **15 minutes**.\n3. **Rejected Error**: If the request fails, the promise rejects with a specific error code.\n\nBy understanding this `#Returns` section, developers can properly handle the output of authentication requests and manage the returned Decentralized ID token accordingly.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/react-native#chunk-8", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\n// Bare React Native\n\n01\n\n// Bare React Native\n\n02\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'@magic-sdk/react-native-bare'\n\n;\n\n02\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'@magic-sdk/react-native-bare'\n\n;\n\n03\n\n// Expo React Native\n\n03\n\n// Expo React Native\n\n04\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'@magic-sdk/react-native-expo'\n\n;\n\n04\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'@magic-sdk/react-native-expo'\n\n;\n\n05\n\n05\n\n06\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n06\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n07\n\n07\n\n08\n\n// log in a user by their email\n\n08\n\n// log in a user by their email\n\n09\n\ntry\n\n{\n\n09\n\ntry\n\n{\n\n10\n\nawait\n\nmagic\n\n.\n\nauth\n\n.\n\nloginWithEmailOTP\n\n(\n\n{\n\nemail\n\n:\n\n'hello@example.com'\n\n}\n\n)\n\n;\n\n10\n\nawait\n\nmagic\n\n.\n\nauth\n\n.\n\nloginWithEmailOTP\n\n(\n\n{\n\nemail\n\n:\n\n'hello@example.com'\n\n}\n\n)\n\n;\n\n11\n\n}\n\ncatch\n\n{\n\n11\n\n}\n\ncatch\n\n{\n\n12\n\n// Handle errors if required!\n\n12\n\n// Handle errors if required!\n\n13\n\n}\n\n13\n\n}\n\n14\n\n14\n\n15\n\n// log in a user by their email, without showing an out-of-the box UI.\n\n15\n\n// log in a user by their email, without showing an out-of-the box UI.\n\n16\n\ntry\n\n{\n\n16\n\ntry\n\n{\n\n17\n\nawait\n\nmagic\n\n.\n\nauth\n\n.\n\nloginWithEmailOTP\n\n(\n\n{\n\nemail\n\n:\n\n'hello@example.com'\n\n,\n\nshowUI\n\n:\n\nfalse\n\n}\n\n)\n\n;\n\n17\n\nawait\n\nmagic\n\n.\n\nauth\n\n.\n\nloginWithEmailOTP\n\n(\n\n{\n\nemail\n\n:\n\n'hello@example.com'\n\n,\n\nshowUI\n\n:\n\nfalse\n\n}\n\n)\n\n;\n\n18\n\n}\n\ncatch\n\n{\n\n18\n\n}\n\ncatch\n\n{\n\n19\n\n// Handle errors if required!\n\n19\n\n// Handle errors if required!\n\n20\n\n}\n\n20\n\n}", "explanation": "The `#Example` section of the documentation is an example code snippet that demonstrates how to use the Magic Labs embedded wallet in a React Native app.\n\nHere's what it does:\n\n1. It imports the `Magic` library from the `@magic-sdk/react-native-bare` or `@magic-sdk/react-native-expo` package, depending on whether you're using a bare React Native project or an Expo project.\n2. It creates a new instance of the `Magic` class, passing in a publishable API key as a string.\n3. It logs in a user by their email address using the `loginWithEmailOTP` method, which sends a one-time password (OTP) to the user's email address and then prompts them to enter it to complete the login process.\n\nThe example code is repeated twice, once with the `showUI` option set to `true` (which would show an out-of-the-box UI for the login process), and again with `showUI` set to `false`, which would not show any UI and instead handle the login process programmatically.\n\nThe main purpose of this example code is to demonstrate how to integrate the Magic Labs embedded wallet into a React Native app, specifically how to log in a user using their email address.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/react-native#chunk-9", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nRelevant Events\n\nRelevant Events\n\nA white-label OTP login flow is available when passing showUI: false to this login method. Here's a short example to illustrate listening for and emitting events during the login flow:\n\nshowUI: false\n\nCopy\n\n01\n\n// Bare React Native\n\n01\n\n// Bare React Native\n\n02\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'@magic-sdk/react-native-bare'\n\n;\n\n02\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'@magic-sdk/react-native-bare'\n\n;\n\n03\n\n// Expo React Native\n\n03\n\n// Expo React Native\n\n04\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'@magic-sdk/react-native-expo'\n\n;\n\n04\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'@magic-sdk/react-native-expo'\n\n;\n\n05\n\n05\n\n06\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n06\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n07\n\n07\n\n08\n\ntry\n\n{\n\n08\n\ntry\n\n{\n\n09\n\n// Initiate login flow\n\n09\n\n// Initiate login flow\n\n10\n\nconst\n\nhandle\n\n=\n\nmagic\n\n.\n\nauth\n\n.\n\nloginWithEmailOTP\n\n(\n\n{\n\nemail\n\n:\n\n\"hello@example.com\"\n\n,\n\nshowUI\n\n:\n\nfalse\n\n,\n\ndeviceCheckUI\n\n:\n\nfalse\n\n}\n\n)\n\n;\n\n10\n\nconst\n\nhandle\n\n=\n\nmagic\n\n.\n\nauth\n\n.\n\nloginWithEmailOTP\n\n(\n\n{\n\nemail\n\n:\n\n\"hello@example.com\"\n\n,\n\nshowUI\n\n:\n\nfalse\n\n,\n\ndeviceCheckUI\n\n:\n\nfalse\n\n}\n\n)\n\n;\n\n11\n\n11\n\n12\n\nhandle\n\n12\n\nhandle\n\n13\n\n.\n\non\n\n(\n\n'email-otp-sent'\n\n,\n\n(\n\n)\n\n=>\n\n{\n\n13\n\n.\n\non\n\n(\n\n'email-otp-sent'\n\n,\n\n(\n\n)\n\n=>\n\n{\n\n14\n\n// The email has been sent to the user\n\n14\n\n// The email has been sent to the user\n\n15\n\n15\n\n16\n\n// Prompt the user for the OTP\n\n16\n\n// Prompt the user for the OTP\n\n17\n\nconst\n\notp\n\n=\n\nwindow\n\n.\n\nprompt\n\n(\n\n'Enter Email OTP'\n\n)\n\n;\n\n17\n\nconst\n\notp\n\n=\n\nwindow\n\n.\n\nprompt\n\n(\n\n'Enter Email OTP'\n\n)\n\n;\n\n18\n\n18\n\n19\n\n// Send the OTP for verification\n\n19\n\n// Send the OTP for verification\n\n20\n\nhandle\n\n.\n\nemit\n\n(\n\n'verify-email-otp'\n\n,\n\notp\n\n)\n\n;\n\n20\n\nhandle\n\n.\n\nemit\n\n(\n\n'verify-email-otp'\n\n,\n\notp\n\n)\n\n;\n\n21\n\n}\n\n)\n\n21\n\n}\n\n)\n\n22\n\n.\n\non\n\n(\n\n'invalid-email-otp'\n\n,\n\n(\n\n)\n\n=>\n\n{\n\n22\n\n.\n\non\n\n(\n\n'invalid-email-otp'\n\n,\n\n(\n\n)\n\n=>\n\n{\n\n23\n\n// User entered invalid OTP\n\n23\n\n// User entered invalid OTP\n\n24\n\n24\n\n25\n\n/*\n\n25\n\n/*\n\n26\n\nHave the user retry entering the OTP.\n\n26\n\nHave the user retry entering the OTP.\n\n27\n\nThen emit the \"verify-email-otp\" event with the OTP.\n\n27\n\nThen emit the \"verify-email-otp\" event with the OTP.\n\n28\n\n*/\n\n28\n\n*/\n\n29\n\n29\n\n30\n\n/*\n\n30\n\n/*\n\n31\n\nYou may limit the amount of retries and\n\n31\n\nYou may limit the amount of retries and\n\n32\n\nemit a \"cancel\" event to cancel the login request.\n\n32\n\nemit a \"cancel\" event to cancel the login request.\n\n33\n\n*/\n\n33\n\n*/\n\n34\n\n34\n\n35\n\n// cancel login request\n\n35\n\n// cancel login request\n\n36\n\nhandle\n\n.\n\nemit\n\n(\n\n'cancel'\n\n)\n\n;\n\n36\n\nhandle\n\n.\n\nemit\n\n(\n\n'cancel'\n\n)\n\n;\n\n37\n\n}\n\n)\n\n37\n\n}\n\n)\n\n38\n\n.\n\non\n\n(\n\n'done'\n\n,\n\n(\n\nresult\n\n)\n\n=>\n\n{\n\n38\n\n.\n\non\n\n(\n\n'done'\n\n,\n\n(\n\nresult\n\n)\n\n=>\n\n{\n\n39\n\n// is called when the Promise resolves\n\n39\n\n// is called when the Promise resolves\n\n40\n\n40\n\n41\n\n// convey login success to user\n\n41\n\n// convey login success to user\n\n42\n\nalert\n\n(\n\n'Login complete!'\n\n)\n\n;\n\n42\n\nalert\n\n(\n\n'Login complete!'\n\n)\n\n;\n\n43\n\n43\n\n44\n\n// DID Token returned in result\n\n44\n\n// DID Token returned in result\n\n45\n\nconst\n\ndidToken\n\n=\n\nresult\n\n;\n\n45\n\nconst\n\ndidToken\n\n=\n\nresult\n\n;\n\n46\n\n}\n\n)\n\n46\n\n}\n\n)\n\n47\n\n.\n\non\n\n(\n\n'error'\n\n,\n\n(\n\nreason\n\n)\n\n=>\n\n{\n\n47\n\n.\n\non\n\n(\n\n'error'\n\n,\n\n(\n\nreason\n\n)\n\n=>\n\n{\n\n48\n\n// is called if the Promise rejects\n\n48\n\n// is called if the Promise rejects\n\n49\n\nconsole\n\n.\n\nerror\n\n(\n\nreason\n\n)\n\n;\n\n49\n\nconsole\n\n.\n\nerror\n\n(\n\nreason\n\n)\n\n;\n\n50\n\n}\n\n)\n\n50\n\n}\n\n)\n\n51\n\n.\n\non\n\n(\n\n'settled'\n\n,\n\n(\n\n)\n\n=>\n\n{\n\n51\n\n.\n\non\n\n(\n\n'settled'\n\n,\n\n(\n\n)\n\n=>\n\n{\n\n52\n\n// is called when the Promise either resolves or rejects\n\n52\n\n// is called when the Promise either resolves or rejects\n\n53\n\n}\n\n)\n\n53\n\n}\n\n)\n\n54\n\n54\n\n55\n\n/**\n\n55\n\n/**\n\n56\n\n* Device Verification Events\n\n56\n\n* Device Verification Events\n\n57\n\n*/\n\n57\n\n*/\n\n58\n\n.\n\non\n\n(\n\n'device-needs-approval'\n\n,\n\n(\n\n)\n\n=>\n\n{\n\n58\n\n.\n\non\n\n(\n\n'device-needs-approval'\n\n,\n\n(\n\n)\n\n=>\n\n{\n\n59\n\n// is called when device is not recognized and requires approval\n\n59\n\n// is called when device is not recognized and requires approval\n\n60\n\n}\n\n)\n\n60\n\n}\n\n)\n\n61\n\n.\n\non\n\n(\n\n'device-verification-email-sent'\n\n,\n\n(\n\n)\n\n=>\n\n{\n\n61\n\n.\n\non\n\n(\n\n'device-verification-email-sent'\n\n,\n\n(\n\n)\n\n=>\n\n{\n\n62\n\n// is called when the device verification email is sent\n\n62\n\n// is called when the device verification email is sent\n\n63\n\n}\n\n)\n\n63\n\n}\n\n)\n\n64\n\n.\n\non\n\n(\n\n'device-approved'\n\n,\n\n(\n\n)\n\n=>\n\n{\n\n64\n\n.\n\non\n\n(\n\n'device-approved'\n\n,\n\n(\n\n)\n\n=>\n\n{\n\n65\n\n// is called when the device has been approved\n\n65\n\n// is called when the device has been approved\n\n66\n\n}\n\n)\n\n66\n\n}\n\n)\n\n67\n\n.\n\non\n\n(\n\n'device-verification-link-expired'\n\n,\n\n(\n\n)\n\n=>\n\n{\n\n67\n\n.\n\non\n\n(\n\n'device-verification-link-expired'\n\n,\n\n(\n\n)\n\n=>\n\n{\n\n68\n\n// is called when the device verification link is expired\n\n68\n\n// is called when the device verification link is expired\n\n69\n\n// Retry device verification\n\n69\n\n// Retry device verification\n\n70\n\nhandle\n\n.\n\nemit\n\n(\n\n'device-retry'\n\n)\n\n;\n\n70\n\nhandle\n\n.\n\nemit\n\n(\n\n'device-retry'\n\n)\n\n;\n\n71\n\n}\n\n)\n\n;\n\n71\n\n}\n\n)\n\n;\n\n72\n\n72\n\n73\n\n/*\n\n73\n\n/*\n\n74\n\nIn typescript, you may use DeviceVerificationEventOnReceived types for strong typing\n\n74\n\nIn typescript, you may use DeviceVerificationEventOnReceived types for strong typing\n\n75\n\n*/\n\n75\n\n*/\n\n76\n\n/*\n\n76\n\n/*\n\n77\n\nYou may use 'cancel' from white-label otp event\n\n77\n\nYou may use 'cancel' from white-label otp event\n\n78\n\nto terminate the unresolved request\n\n78\n\nto terminate the unresolved request\n\n79\n\n*/\n\n79\n\n*/\n\n80\n\n}\n\ncatch\n\n(\n\nerr\n\n)\n\n{\n\n80\n\n}\n\ncatch\n\n(\n\nerr\n\n)\n\n{\n\n81\n\n// handle errors\n\n81\n\n// handle errors\n\n82\n\n}\n\n82\n\n}", "explanation": "This is a JavaScript code snippet that appears to be implementing an authentication flow using the Device Verification API. Here's a breakdown of the code:\n\n**Importing Libraries**\n\nThe code starts by importing several libraries, including `Promise` and `DeviceVerificationEvent`.\n\n**DeviceVerificationHandle Class**\n\nThe code defines a class called `DeviceVerificationHandle`. This class has several methods that handle different events related to device verification.\n\n**Events Handling**\n\nThe class has several event handlers, which are functions that get called when specific events occur. These events include:\n\n* `'device-needs-approval'`: The device is not recognized and requires approval.\n* `'device-verification-email-sent'`: The device verification email is sent.\n* `'device-approved'`: The device has been approved.\n* `'device-verification-link-expired'`: The device verification link has expired.\n\n**Canceling the Request**\n\nThe code also includes a method to cancel the login request. This is done by emitting an event called `cancel`.\n\n**Error Handling**\n\nFinally, the code catches any errors that may occur during the authentication flow and handles them accordingly.\n\nSome possible scenarios based on this code are:\n\n1. **Successful Login**: If the device verification is successful, the user will be logged in, and the `'device-approved'` event will be emitted.\n2. **Device Verification Failure**: If the device verification fails, the user will not be logged in, and an error message will be displayed.\n3. **Canceling the Request**: If the user cancels the login request, the `'cancel'` event will be emitted, and the authentication flow will be terminated.\n\nNote that this code snippet is quite long and might require some additional context to fully understand its purpose and functionality.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/react-native#chunk-10", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nEmail OTP\n\nemail-otp-sent\n\nverify-email-otp\n\ninvalid-email-otp\n\ncancel\n\ncancel\n\nEmit to cancel the login request.\n\nDevice Verification\n\ndevice-needs-approval\n\ndevice-verification-email-sent\n\ndevice-approved\n\ndevice-verification-link-expired\n\ndevice-verification-link-expired\n\nDispatched when the email verification email has expired\n\ndevice-retry\n\ndevice-retry\n\nEmit to restart the device registration flow", "explanation": "**Events Section in Magic Labs Documentation**\n\nThe `#Events` section is a part of the Magic Labs embedded wallet documentation, specifically for the React Native SDK. This section outlines the various events that can be emitted by the Magic Labs library during different authentication and verification flows.\n\n**Purpose:**\n\nThe primary purpose of this section is to inform developers about the types of events they can expect to receive when using the Magic Labs library in their React Native applications. These events are triggered at specific points during the authentication and verification processes, providing a way for developers to react to and handle these events programmatically.\n\n**Key Events:**\n\nSome key events mentioned in this section include:\n\n* `email-otp-sent`: Sent when an email OTP is generated.\n* `verify-email-otp`, `invalid-email-otp`: Triggered during email OTP verification, with the latter indicating a failed verification attempt.\n* `cancel`: Emitted to cancel the login request.\n* `device-needs-approval`, `device-approved`: Related to device verification flows.\n* `device-verification-email-sent`, `device-verification-link-expired`: Triggers for sending and expiring email verification links, respectively.\n* `device-retry`: Allows restarting the device registration flow.\n\n**Developers' Use Case:**\n\nAs a developer using Magic Labs in their React Native application, this events section would be useful to:\n\n1. Understand when specific actions occur during authentication and verification flows.\n2. React to these events programmatically by handling them accordingly (e.g., updating UI, sending notifications, etc.).\n\nBy being aware of these events, developers can build more robust, interactive, and user-friendly applications that handle different authentication and verification scenarios effectively.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/react-native#chunk-11", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nTo achieve a fully white-labeled experience, you will need to implement some custom error handling according to your UI needs. Here's a short example to illustrate how errors can be caught and identified by their code:\n\nCopy\n\n01\n\n// Bare React Native\n\n01\n\n// Bare React Native\n\n02\n\nimport\n\n{\n\nMagic\n\n,\n\nRPCError\n\n,\n\nRPCErrorCode\n\n}\n\nfrom\n\n'@magic-sdk/react-native-bare'\n\n;\n\n02\n\nimport\n\n{\n\nMagic\n\n,\n\nRPCError\n\n,\n\nRPCErrorCode\n\n}\n\nfrom\n\n'@magic-sdk/react-native-bare'\n\n;\n\n03\n\n// Expo React Native\n\n03\n\n// Expo React Native\n\n04\n\nimport\n\n{\n\nMagic\n\n,\n\nRPCError\n\n,\n\nRPCErrorCode\n\n}\n\nfrom\n\n'@magic-sdk/react-native-expo'\n\n;\n\n04\n\nimport\n\n{\n\nMagic\n\n,\n\nRPCError\n\n,\n\nRPCErrorCode\n\n}\n\nfrom\n\n'@magic-sdk/react-native-expo'\n\n;\n\n05\n\n05\n\n06\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n06\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n07\n\n07\n\n08\n\ntry\n\n{\n\n08\n\ntry\n\n{\n\n09\n\nawait\n\nmagic\n\n.\n\nauth\n\n.\n\nloginWithEmailOTP\n\n(\n\n{\n\nemail\n\n:\n\n'hello@example.com'\n\n}\n\n)\n\n;\n\n09\n\nawait\n\nmagic\n\n.\n\nauth\n\n.\n\nloginWithEmailOTP\n\n(\n\n{\n\nemail\n\n:\n\n'hello@example.com'\n\n}\n\n)\n\n;\n\n10\n\n}\n\ncatch\n\n(\n\nerr\n\n)\n\n{\n\n10\n\n}\n\ncatch\n\n(\n\nerr\n\n)\n\n{\n\n11\n\nif\n\n(\n\nerr\n\ninstanceof\n\nRPCError\n\n)\n\n{\n\n11\n\nif\n\n(\n\nerr\n\ninstanceof\n\nRPCError\n\n)\n\n{\n\n12\n\nswitch\n\n(\n\nerr\n\n.\n\ncode\n\n)\n\n{\n\n12\n\nswitch\n\n(\n\nerr\n\n.\n\ncode\n\n)\n\n{\n\n13\n\ncase\n\nRPCErrorCode\n\n.\n\nMagicLinkExpired\n\n13\n\ncase\n\nRPCErrorCode\n\n.\n\nMagicLinkExpired\n\n14\n\ncase\n\nRPCErrorCode\n\n.\n\nUserAlreadyLoggedIn\n\n:\n\n14\n\ncase\n\nRPCErrorCode\n\n.\n\nUserAlreadyLoggedIn\n\n:\n\n15\n\n// Handle errors accordingly :)\n\n15\n\n// Handle errors accordingly :)\n\n16\n\nbreak\n\n;\n\n16\n\nbreak\n\n;\n\n17\n\n}\n\n17\n\n}\n\n18\n\n}\n\n18\n\n}\n\n19\n\n}\n\n19\n\n}", "explanation": "**Error Handling in Magic Labs Embedded Wallet Documentation**\n\nThe provided documentation section is about implementing custom error handling for a fully white-labeled experience in the Magic Labs embedded wallet. This involves catching and identifying errors by their code, allowing developers to handle specific error cases accordingly.\n\n**Key Components:**\n\n1. **Try-Catch Block**: The `try` block attempts to execute the `loginWithEmailOTP` method, while the `catch` block catches any errors that occur.\n2. **Error Identification**: The `instanceof` operator checks if the caught error is an instance of `RPCError`. If it is, the code proceeds to identify the specific error code using a switch statement.\n3. **Error Code Handling**: The `switch` statement checks the error code and executes specific handling logic for each case.\n\n**Main Purpose:**\n\nThe main purpose of this documentation section is to provide an example of how developers can implement custom error handling in their Magic Labs embedded wallet implementation, allowing them to create a fully white-labeled experience tailored to their UI needs.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/react-native#chunk-12", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nloginWithSMS\n\nAuthenticate a user passwordlessly using a one-time code sent to the specified phone number.\n\nList of Currently Blocked Country Codes\n\nList of Currently Blocked Country Codes\n\nOnly available with Dedicated Wallet.\n\n#\n\n\u2022 phoneNumber (String): E.164 formatted phone number\n\nphoneNumber", "explanation": "**Overview of `loginWithSMS` Method**\n\nThe `loginWithSMS` method is a client-side authentication function provided by Magic Labs, specifically designed for React Native applications.\n\n**Main Purpose**\n\nThe primary purpose of `loginWithSMS` is to enable passwordless authentication for users by sending a one-time verification code to a specified phone number. This allows users to log in to an application without providing a traditional password, enhancing the user experience and security.\n\n**Key Requirements and Arguments**\n\nThe `loginWithSMS` method takes one required argument:\n\n* `phoneNumber`: The user's phone number in E.164 format.\n\n**Important Notes**\n\n* This method is only available for dedicated wallets.\n* Certain country codes are currently blocked and cannot be used with this method.\n\nBy utilizing the `loginWithSMS` method, developers can provide users with a seamless and secure authentication experience in their React Native applications.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/react-native#chunk-13", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 PromiEvent<string | null>: The promise resolves upon authentication request success and rejects with a specific error code if the request fails. The resolved value is a Decentralized ID token with a default 15-minute lifespan.\n\nPromiEvent<string | null>", "explanation": "Let's break down what this documentation section means.\n\n**What is it?**\n\nThis section describes a function or method called `Returns`, which is part of the Magic Labs embedded wallet API for React Native (a mobile app development framework).\n\n**What does it do?**\n\nThe `Returns` section explains that when you call the authentication request method, it will return a promise (a value that may not be available yet, but will be resolved at some point in the future) with two possible outcomes:\n\n1. **Success**: If the authentication request is successful, the promise resolves with a Decentralized ID token. This token has a default lifespan of 15 minutes.\n2. **Failure**: If the authentication request fails, the promise rejects with a specific error code.\n\nIn summary, this section is about how to get a Decentralized ID token after authenticating a user with Magic Labs embedded wallet API in React Native. The main purpose is to inform developers about what to expect when they call the authentication request method and how to handle the response (either a successful token or an error code).", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/react-native#chunk-14", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\n// Bare React Native\n\n01\n\n// Bare React Native\n\n02\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'@magic-sdk/react-native-bare'\n\n;\n\n02\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'@magic-sdk/react-native-bare'\n\n;\n\n03\n\n// Expo React Native\n\n03\n\n// Expo React Native\n\n04\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'@magic-sdk/react-native-expo'\n\n;\n\n04\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'@magic-sdk/react-native-expo'\n\n;\n\n05\n\n05\n\n06\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n06\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n07\n\n07\n\n08\n\n// log in a user by their phone number\n\n08\n\n// log in a user by their phone number\n\n09\n\ntry\n\n{\n\n09\n\ntry\n\n{\n\n10\n\nawait\n\nmagic\n\n.\n\nauth\n\n.\n\nloginWithSMS\n\n(\n\n{\n\n'+14151231234'\n\n}\n\n)\n\n;\n\n10\n\nawait\n\nmagic\n\n.\n\nauth\n\n.\n\nloginWithSMS\n\n(\n\n{\n\n'+14151231234'\n\n}\n\n)\n\n;\n\n11\n\n}\n\ncatch\n\n{\n\n11\n\n}\n\ncatch\n\n{\n\n12\n\n// Handle errors if required!\n\n12\n\n// Handle errors if required!\n\n13\n\n}\n\n13\n\n}", "explanation": "**Example Documentation Section**\n\nThis documentation section is titled `#Example` and it provides a code example for using the Magic Labs embedded wallet in a React Native application.\n\n**Main Purpose:**\n\nThe main purpose of this example is to demonstrate how to use the Magic SDK to log in a user by their phone number using SMS authentication. The example code shows how to create an instance of the `Magic` class, initialize it with a publishable API key, and then use the `loginWithSMS` method to authenticate a user.\n\n**Key Code Snippets:**\n\n1. Importing the Magic SDK:\n```jsx\nimport { Magic } from '@magic-sdk/react-native-bare';\n```\n2. Creating an instance of the Magic class:\n```jsx\nconst magic = new Magic('PUBLISHABLE_API_KEY');\n```\n3. Logging in a user by their phone number using SMS authentication:\n```jsx\nawait magic.auth.loginWithSMS({ '+14151231234' });\n```\n**Important Notes:**\n\n* The example code assumes that you have already replaced `'PUBLISHABLE_API_KEY'` with your actual publishable API key.\n* The `try-catch` block is used to handle any errors that may occur during the authentication process. You should replace the empty catch blocks with error handling logic if required.\n\nOverall, this example documentation section provides a clear and concise code example for using the Magic Labs embedded wallet in a React Native application.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/react-native#chunk-15", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nRelevant Error Codes\n\nRelevant Error Codes\n\nTo achieve a fully white-labeled experience, you will need to implement some custom error handling according to your UI needs. Here's a short example to illustrate how errors can be caught and identified by their code:\n\nCopy\n\n01\n\n// Bare React Native\n\n01\n\n// Bare React Native\n\n02\n\nimport\n\n{\n\nMagic\n\n,\n\nRPCError\n\n,\n\nRPCErrorCode\n\n}\n\nfrom\n\n'@magic-sdk/react-native-bare'\n\n;\n\n02\n\nimport\n\n{\n\nMagic\n\n,\n\nRPCError\n\n,\n\nRPCErrorCode\n\n}\n\nfrom\n\n'@magic-sdk/react-native-bare'\n\n;\n\n03\n\n// Expo React Native\n\n03\n\n// Expo React Native\n\n04\n\nimport\n\n{\n\nMagic\n\n,\n\nRPCError\n\n,\n\nRPCErrorCode\n\n}\n\nfrom\n\n'@magic-sdk/react-native-expo'\n\n;\n\n04\n\nimport\n\n{\n\nMagic\n\n,\n\nRPCError\n\n,\n\nRPCErrorCode\n\n}\n\nfrom\n\n'@magic-sdk/react-native-expo'\n\n;\n\n05\n\n05\n\n06\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n06\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n07\n\n07\n\n08\n\ntry\n\n{\n\n08\n\ntry\n\n{\n\n09\n\nawait\n\nmagic\n\n.\n\nauth\n\n.\n\nloginWithSMS\n\n(\n\n{\n\nphoneNumber\n\n:\n\n\"+14151231234\"\n\n}\n\n)\n\n;\n\n09\n\nawait\n\nmagic\n\n.\n\nauth\n\n.\n\nloginWithSMS\n\n(\n\n{\n\nphoneNumber\n\n:\n\n\"+14151231234\"\n\n}\n\n)\n\n;\n\n10\n\n}\n\ncatch\n\n(\n\nerr\n\n)\n\n{\n\n10\n\n}\n\ncatch\n\n(\n\nerr\n\n)\n\n{\n\n11\n\nif\n\n(\n\nerr\n\ninstanceof\n\nRPCError\n\n)\n\n{\n\n11\n\nif\n\n(\n\nerr\n\ninstanceof\n\nRPCError\n\n)\n\n{\n\n12\n\nswitch\n\n(\n\nerr\n\n.\n\ncode\n\n)\n\n{\n\n12\n\nswitch\n\n(\n\nerr\n\n.\n\ncode\n\n)\n\n{\n\n13\n\ncase\n\nRPCErrorCode\n\n.\n\nAccessDeniedToUser\n\n:\n\n13\n\ncase\n\nRPCErrorCode\n\n.\n\nAccessDeniedToUser\n\n:\n\n14\n\ncase\n\nRPCErrorCode\n\n.\n\nMagicLinkRateLimited\n\n:\n\n14\n\ncase\n\nRPCErrorCode\n\n.\n\nMagicLinkRateLimited\n\n:\n\n15\n\ncase\n\nRPCErrorCode\n\n.\n\nUserAlreadyLoggedIn\n\n:\n\n15\n\ncase\n\nRPCErrorCode\n\n.\n\nUserAlreadyLoggedIn\n\n:\n\n16\n\n// Handle errors accordingly :)\n\n16\n\n// Handle errors accordingly :)\n\n17\n\nbreak\n\n;\n\n17\n\nbreak\n\n;\n\n18\n\n}\n\n18\n\n}\n\n19\n\n}\n\n19\n\n}\n\n20\n\n}\n\n20\n\n}", "explanation": "The section titled '#Error Handling' is a documentation section from the Magic Labs embedded wallet documentation that explains how to handle errors in a Magic SDK-based application.\n\n**Main Purpose:**\n\nThe main purpose of this section is to provide an example of how to catch and identify specific error codes, allowing developers to implement custom error handling according to their UI needs. This enables them to create a fully white-labeled experience for their users.\n\n**Key Points:**\n\n1. **Error Codes:** The documentation mentions several error codes, such as `AccessDeniedToUser`, `MagicLinkRateLimited`, and `UserAlreadyLoggedIn`. These code values can be used to identify specific errors.\n2. **Try-Catch Block:** The example demonstrates how to use a try-catch block to catch errors thrown by the Magic SDK. This is essential for handling errors in a robust way.\n3. **RPCError and RPCErrorCode:** The `RPCError` class represents an error that occurred during a remote procedure call (RPC), while `RPCErrorCode` provides a way to identify specific error codes.\n4. **Switch Statement:** The example shows how to use a switch statement to handle different error codes based on their values.\n\n**In Summary:**\n\nThe '#Error Handling' section of the Magic Labs embedded wallet documentation provides an example of how to catch and identify specific error codes, allowing developers to implement custom error handling in their applications. By following this example, developers can create a robust and white-labeled experience for their users.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/react-native#chunk-16", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nupdateEmailWithUI\n\nInitiates the update email flow that allows a user to change their email address.\n\nOnly available with Dedicated Wallet.\n\n#\n\n\u2022 email (String): The new email to update to\n\n\u2022 showUI? (Boolean): If true, shows an out-of-the-box pending UI which includes instructions on which step of the confirmation process the user is on. Dismisses automatically when the process is complete.\n\nemail\n\nshowUI?\n\ntrue", "explanation": "The `#updateEmailWithUI - #Arguments` section from the Magic Labs documentation explains how to initiate a user-flow in an embedded wallet to update their email address.\n\n**Main Purpose:**\n\nThis method allows customers (or users) to change their email address within the Magic Labs wallet, which is only available with Dedicated Wallet setup. \n\n**Key Functionality:**\n\nThe `updateEmailWithUI` function takes two arguments:\n\n1. **email (String)**: The new email address that the user wants to update to.\n2. **showUI? (Boolean)**: A boolean value indicating whether to display an out-of-the-box pending UI, which guides the user through the confirmation process and dismisses automatically when complete. The default is `true`, meaning the UI will be shown.\n\nIn summary, this documentation section provides information on how to facilitate a seamless email update experience for users within the Magic Labs wallet, ensuring they are properly guided through the confirmation process.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/react-native#chunk-17", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 PromiEvent<boolean>: The promise resolves with a true boolean value if update email is successful and rejects with a specific error code if the request fails\n\nPromiEvent<boolean>", "explanation": "This documentation section is titled \"#Returns\" and it's about the expected response when updating an email address using the Magic Labs embedded wallet in React Native.\n\n**In simple terms:** \n\nThe `#Returns` section tells you what happens after making a request to update your email address. It says that:\n\n* If the update is successful, the promise will resolve with a **true boolean value**, which means \"yes\" or \"1\". Think of it like a green checkmark.\n* If something goes wrong and the update fails, the promise will **reject** (or cancel) with a specific error code. This means there's an issue that needs to be fixed before you can proceed.\n\nThe main purpose of this section is to inform developers about how to handle the outcome of their code execution, specifically when updating email addresses in Magic Labs embedded wallet for React Native.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/react-native#chunk-18", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\n// Bare React Native\n\n01\n\n// Bare React Native\n\n02\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'@magic-sdk/react-native-bare'\n\n;\n\n02\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'@magic-sdk/react-native-bare'\n\n;\n\n03\n\n// Expo React Native\n\n03\n\n// Expo React Native\n\n04\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'@magic-sdk/react-native-expo'\n\n;\n\n04\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'@magic-sdk/react-native-expo'\n\n;\n\n05\n\n05\n\n06\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n06\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n07\n\n07\n\n08\n\n// Initiates the flow to update a user's current email to a new one.\n\n08\n\n// Initiates the flow to update a user's current email to a new one.\n\n09\n\ntry\n\n{\n\n09\n\ntry\n\n{\n\n10\n\n...\n\n10\n\n...\n\n11\n\n/* Assuming user is logged in */\n\n11\n\n/* Assuming user is logged in */\n\n12\n\nawait\n\nmagic\n\n.\n\nauth\n\n.\n\nupdateEmailWithUI\n\n(\n\n{\n\nemail\n\n:\n\n'new_user_email@example.com'\n\n}\n\n)\n\n;\n\n12\n\nawait\n\nmagic\n\n.\n\nauth\n\n.\n\nupdateEmailWithUI\n\n(\n\n{\n\nemail\n\n:\n\n'new_user_email@example.com'\n\n}\n\n)\n\n;\n\n13\n\n}\n\ncatch\n\n{\n\n13\n\n}\n\ncatch\n\n{\n\n14\n\n// Handle errors if required!\n\n14\n\n// Handle errors if required!\n\n15\n\n}\n\n15\n\n}\n\n16\n\n16\n\n17\n\n/**\n\n17\n\n/**\n\n18\n\n* Initiates the flow to update a user's current email to a new one,\n\n18\n\n* Initiates the flow to update a user's current email to a new one,\n\n19\n\n* without showing an out-of-the box UI.\n\n19\n\n* without showing an out-of-the box UI.\n\n20\n\n*/\n\n20\n\n*/\n\n21\n\ntry\n\n{\n\n21\n\ntry\n\n{\n\n22\n\n/* Assuming user is logged in */\n\n22\n\n/* Assuming user is logged in */\n\n23\n\nawait\n\nmagic\n\n.\n\nauth\n\n.\n\nupdateEmailWithUI\n\n(\n\n{\n\nemail\n\n:\n\n'new_user_email@example.com'\n\n,\n\nshowUI\n\n:\n\nfalse\n\n}\n\n)\n\n;\n\n23\n\nawait\n\nmagic\n\n.\n\nauth\n\n.\n\nupdateEmailWithUI\n\n(\n\n{\n\nemail\n\n:\n\n'new_user_email@example.com'\n\n,\n\nshowUI\n\n:\n\nfalse\n\n}\n\n)\n\n;\n\n24\n\n}\n\ncatch\n\n{\n\n24\n\n}\n\ncatch\n\n{\n\n25\n\n// Handle errors if required!\n\n25\n\n// Handle errors if required!\n\n26\n\n}\n\n26\n\n}", "explanation": "This documentation section is titled `#Example` and it provides an example of how to use the Magic Labs embedded wallet in a React Native application.\n\nHere's what it's about:\n\n* The first part of the example shows how to import the Magic SDK for React Native Bare (a version of React Native that doesn't include Expo) or Expo React Native.\n* The second part of the example demonstrates how to create an instance of the `Magic` class, passing in a publishable API key as a string.\n* The third part of the example shows two ways to initiate the flow to update a user's current email to a new one:\n\t+ Without showing an out-of-the-box UI (`updateEmailWithUI` method with `showUI` set to `true`).\n\t+ Without showing an out-of-the-box UI (`updateEmailWithUI` method with `showUI` set to `false`).\n\nThe example uses `try-catch` blocks to handle any errors that may occur during the authentication flow.\n\nThe main purpose of this example is to demonstrate how to integrate Magic Labs embedded wallet into a React Native application, and provide guidance on how to initiate the flow to update a user's email address.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/react-native#chunk-19", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nRelevant Error Codes\n\nRelevant Error Codes\n\nTo achieve a fully white-labeled experience, you will need to implement some custom error handling according to your UI needs. Here's a short example to illustrate how errors can be caught and identified by their code:\n\nCopy\n\n01\n\n// Bare React Native\n\n01\n\n// Bare React Native\n\n02\n\nimport\n\n{\n\nMagic\n\n,\n\nRPCError\n\n,\n\nRPCErrorCode\n\n}\n\nfrom\n\n'@magic-sdk/react-native-bare'\n\n;\n\n02\n\nimport\n\n{\n\nMagic\n\n,\n\nRPCError\n\n,\n\nRPCErrorCode\n\n}\n\nfrom\n\n'@magic-sdk/react-native-bare'\n\n;\n\n03\n\n// Expo React Native\n\n03\n\n// Expo React Native\n\n04\n\nimport\n\n{\n\nMagic\n\n,\n\nRPCError\n\n,\n\nRPCErrorCode\n\n}\n\nfrom\n\n'@magic-sdk/react-native-expo'\n\n;\n\n04\n\nimport\n\n{\n\nMagic\n\n,\n\nRPCError\n\n,\n\nRPCErrorCode\n\n}\n\nfrom\n\n'@magic-sdk/react-native-expo'\n\n;\n\n05\n\n05\n\n06\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n06\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n07\n\n07\n\n08\n\ntry\n\n{\n\n08\n\ntry\n\n{\n\n09\n\nawait\n\nmagic\n\n.\n\nauth\n\n.\n\nupdateEmailWithUI\n\n(\n\n{\n\nemail\n\n:\n\n'hello@example.com'\n\n,\n\nshowUI\n\n:\n\nfalse\n\n}\n\n)\n\n;\n\n09\n\nawait\n\nmagic\n\n.\n\nauth\n\n.\n\nupdateEmailWithUI\n\n(\n\n{\n\nemail\n\n:\n\n'hello@example.com'\n\n,\n\nshowUI\n\n:\n\nfalse\n\n}\n\n)\n\n;\n\n10\n\n}\n\ncatch\n\n(\n\nerr\n\n)\n\n{\n\n10\n\n}\n\ncatch\n\n(\n\nerr\n\n)\n\n{\n\n11\n\nif\n\n(\n\nerr\n\ninstanceof\n\nRPCError\n\n)\n\n{\n\n11\n\nif\n\n(\n\nerr\n\ninstanceof\n\nRPCError\n\n)\n\n{\n\n12\n\nswitch\n\n(\n\nerr\n\n.\n\ncode\n\n)\n\n{\n\n12\n\nswitch\n\n(\n\nerr\n\n.\n\ncode\n\n)\n\n{\n\n13\n\ncase\n\nRPCErrorCode\n\n.\n\nUpdateEmailFailed\n\n:\n\n13\n\ncase\n\nRPCErrorCode\n\n.\n\nUpdateEmailFailed\n\n:\n\n14\n\n// Handle errors accordingly :)\n\n14\n\n// Handle errors accordingly :)\n\n15\n\nbreak\n\n;\n\n15\n\nbreak\n\n;\n\n16\n\n}\n\n16\n\n}\n\n17\n\n}\n\n17\n\n}\n\n18\n\n}\n\n18\n\n}", "explanation": "This documentation section is about implementing custom error handling in a Magic Labs embedded wallet for React Native applications. Here's what it's about and its main purpose:\n\n**Purpose:**\nThe main purpose of this section is to guide developers on how to catch and identify specific errors that may occur during the usage of the Magic Labs embedded wallet, allowing them to implement custom error handling according to their UI needs.\n\n**Key Points:**\n\n1. **Error codes:** The section mentions relevant error codes that can be caught and identified by their code.\n2. **Magic SDK imports:** It shows how to import the necessary modules (`Magic`, `RPCError`, and `RPCErrorCode`) from the Magic SDK for React Native (bare or Expo).\n3. **Try-catch block:** A try-catch block is demonstrated, where an error occurs during a call to the `updateEmailWithUI` method of the `auth` object.\n4. **Error handling:** Within the catch block, it checks if the error instance is of type `RPCError`. If so, it uses a switch statement to identify the specific error code and handle it accordingly.\n\n**Main Takeaway:**\nThis documentation section is about implementing custom error handling for the Magic Labs embedded wallet in React Native applications. It provides an example of how to catch and identify errors by their codes, allowing developers to tailor their UI and error handling strategy according to their needs.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/react-native#chunk-20", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nnew-email-confirmed\n\nemail-sent\n\nemail-not-deliverable\n\nold-email-confirmed\n\nretry\n\nshowUI: true", "explanation": "**Understanding the Events Section in Magic Labs Embedded Wallet Documentation**\n\nThe `#Events` section in the Magic Labs embedded wallet documentation refers to a set of event listeners and notifications that allow developers to track and respond to specific actions or changes within the wallet's email management system.\n\n**Main Events and Their Purposes:**\n\n1. **new-email-confirmed**: Fired when a new email address is confirmed by the user.\n2. **email-sent**: Triggered when an email is sent by the wallet for verification or other purposes.\n3. **email-not-deliverable**: Occurs when an email sent by the wallet cannot be delivered to the user's email address.\n4. **old-email-confirmed**: Fired when the user's old email address is confirmed.\n5. **retry**: Triggered when the wallet needs to retry a previous action (e.g., sending an email).\n\n**Purpose of Events:**\n\nThe primary purpose of these events is to enable developers to receive notifications about changes or interactions within the wallet's email system. By listening to these events, developers can:\n\n* Update their application's state to reflect the user's email changes\n* Handle errors or exceptions related to email delivery\n* Provide a better user experience by responding to email verification or sending events\n* Implement custom logic based on specific email-related events\n\nIn the provided example, the event object includes a `showUI` property set to `true`, which indicates that the wallet's UI should be displayed to the user for a specific event.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/react-native#chunk-21", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nThe Wallet Module and it's members are accessible on the Magic SDK instance by the wallet property. \u2060 \u2060Note: The Wallet Module is currently only compatiable with Ethereum, Polygon, Flow (no NFTs), and Optimism.\n\nwallet\n\nCopy\n\n01\n\n// Bare React Native\n\n01\n\n// Bare React Native\n\n02\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'@magic-sdk/react-native-bare'\n\n;\n\n02\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'@magic-sdk/react-native-bare'\n\n;\n\n03\n\n// Expo React Native\n\n03\n\n// Expo React Native\n\n04\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'@magic-sdk/react-native-expo'\n\n;\n\n04\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'@magic-sdk/react-native-expo'\n\n;\n\n05\n\n05\n\n06\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n06\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n07\n\n07\n\n08\n\nmagic\n\n.\n\nwallet\n\n;\n\n08\n\nmagic\n\n.\n\nwallet\n\n;\n\n09\n\nmagic\n\n.\n\nwallet\n\n.\n\nconnectWithUI\n\n;\n\n09\n\nmagic\n\n.\n\nwallet\n\n.\n\nconnectWithUI\n\n;\n\n10\n\nmagic\n\n.\n\nwallet\n\n.\n\nshowUI\n\n;\n\n10\n\nmagic\n\n.\n\nwallet\n\n.\n\nshowUI\n\n;\n\n11\n\nmagic\n\n.\n\nwallet\n\n.\n\nshowAddress\n\n;\n\n11\n\nmagic\n\n.\n\nwallet\n\n.\n\nshowAddress\n\n;\n\n12\n\nmagic\n\n.\n\nwallet\n\n.\n\nshowBalances\n\n;\n\n12\n\nmagic\n\n.\n\nwallet\n\n.\n\nshowBalances\n\n;\n\n13\n\nmagic\n\n.\n\nwallet\n\n.\n\nshowNFTs\n\n;\n\n13\n\nmagic\n\n.\n\nwallet\n\n.\n\nshowNFTs\n\n;\n\n14\n\nmagic\n\n.\n\nwallet\n\n.\n\nshowSendTokensUI\n\n;\n\n14\n\nmagic\n\n.\n\nwallet\n\n.\n\nshowSendTokensUI\n\n;\n\n15\n\nmagic\n\n.\n\nwallet\n\n.\n\nshowOnRamp\n\n;\n\n// enterprise only\n\n15\n\nmagic\n\n.\n\nwallet\n\n.\n\nshowOnRamp\n\n;\n\n// enterprise only\n\n16\n\nmagic\n\n.\n\nwallet\n\n.\n\ngetProvider\n\n;\n\n16\n\nmagic\n\n.\n\nwallet\n\n.\n\ngetProvider\n\n;\n\n#\n\nconnectWithUI\n\nRenders a simple login form UI to collect the user's email address and authenticate them passwordlessly using a one-time passcode (OTP) sent to their email address they input.\n\n#\n\n\u2022 None", "explanation": "This documentation section is about the `connectWithUI` method of the Wallet Module in Magic Labs' embedded wallet SDK. Here's what it's about and its main purpose:\n\n**Purpose:** The `connectWithUI` method allows users to log in passwordlessly using a one-time passcode (OTP) sent to their email address.\n\n**How it works:**\n\n1. When called, the `connectWithUI` method renders a simple login form UI that collects the user's email address.\n2. Once the email address is input and submitted, Magic Labs sends an OTP to the provided email address.\n3. The user then inputs the OTP in the login form UI.\n4. After verifying the OTP, the user is authenticated passwordlessly.\n\n**Main purpose:** The `connectWithUI` method provides a seamless login experience for users, eliminating the need for passwords and reducing friction during onboarding.\n\nIn summary, this method enables users to log in using an email-based one-time passcode, making it easy and secure for them to access their Magic Labs wallet.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/react-native#chunk-22", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 A promiEvent which returns an String[] when resolved: An array of user accounts that are connected, with the first element being the current public address of the user. You can read more on PromiEvents here.\n\npromiEvent\n\nString[]\n\nhere", "explanation": "Let's break it down:\n\n**What is it?**\n\nThe documentation section you're referring to is about a specific type of response returned by an API function called `#Returns`. It's a technical term, so bear with me.\n\n**What does it mean?**\n\nIn this context, `#Returns` refers to the output or result of a particular operation. The key point here is that the result is a **promiEvent**, which is a type of asynchronous promise in JavaScript.\n\n**What is a promiEvent?**\n\nA promiEvent is an object that represents a value that may not be available yet (e.g., when an operation takes time to complete). It's similar to a regular promise, but with additional features for handling multiple values or events. When the value becomes available, the promiEvent resolves and returns the actual result.\n\n**What does it return?**\n\nIn this specific case, when the promiEvent is resolved (i.e., the operation completes), it returns an **array of strings** (`String[]`). This array contains information about user accounts connected to a Magic Labs embedded wallet.\n\n**Main purpose:**\n\nThe main purpose of this documentation section is to inform developers about what they can expect as output from the `#Returns` function. It provides essential information for those who need to integrate Magic Labs' functionality into their applications, ensuring they understand how to handle and use the returned data effectively.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/react-native#chunk-23", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\n// Bare React Native\n\n01\n\n// Bare React Native\n\n02\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'@magic-sdk/react-native-bare'\n\n;\n\n02\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'@magic-sdk/react-native-bare'\n\n;\n\n03\n\n// Expo React Native\n\n03\n\n// Expo React Native\n\n04\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'@magic-sdk/react-native-expo'\n\n;\n\n04\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'@magic-sdk/react-native-expo'\n\n;\n\n05\n\n05\n\n06\n\nconst\n\naccounts\n\n=\n\nawait\n\nmagic\n\n.\n\nwallet\n\n.\n\nconnectWithUI\n\n(\n\n)\n\n;\n\n06\n\nconst\n\naccounts\n\n=\n\nawait\n\nmagic\n\n.\n\nwallet\n\n.\n\nconnectWithUI\n\n(\n\n)\n\n;\n\n07\n\n\u2060\n\n07\n\n\u2060\n\n08\n\n/* Optionally, chain to the id token creation event if needed and configured */\n\n08\n\n/* Optionally, chain to the id token creation event if needed and configured */\n\n09\n\nmagic\n\n.\n\nwallet\n\n.\n\nconnectWithUI\n\n(\n\n)\n\n.\n\non\n\n(\n\n'id-token-created'\n\n,\n\n(\n\nparams\n\n)\n\n=>\n\n{\n\n09\n\nmagic\n\n.\n\nwallet\n\n.\n\nconnectWithUI\n\n(\n\n)\n\n.\n\non\n\n(\n\n'id-token-created'\n\n,\n\n(\n\nparams\n\n)\n\n=>\n\n{\n\n10\n\nconst\n\n{\n\nidToken\n\n}\n\n=\n\nparams\n\n10\n\nconst\n\n{\n\nidToken\n\n}\n\n=\n\nparams\n\n11\n\nconsole\n\n.\n\nlog\n\n(\n\nidToken\n\n)\n\n11\n\nconsole\n\n.\n\nlog\n\n(\n\nidToken\n\n)\n\n12\n\n// send to your resource server for validation\n\n12\n\n// send to your resource server for validation\n\n13\n\n// ...\n\n13\n\n// ...\n\n14\n\n}\n\n)\n\n;\n\n14\n\n}\n\n)\n\n;", "explanation": "This documentation section is titled \"#Example\" and it provides an example code snippet for integrating the Magic Labs embedded wallet into a React Native app. Here's what it's about and its main purpose:\n\n**What it's about:**\n\nThis example code shows how to use the `Magic` library from `@magic-sdk/react-native-bare` (or `@magic-sdk/react-native-expo` for Expo React Native) to connect a user to their Magic Labs wallet using the `connectWithUI` method. This allows users to authenticate with their Magic Labs account and access their wallets.\n\n**Main purpose:**\n\nThe main purpose of this example code is to demonstrate how to use the `Magic` library to integrate the Magic Labs embedded wallet into a React Native app, making it possible for users to connect to their Magic Labs wallets using the `connectWithUI` method. This can be used as a starting point for developers who want to implement Magic Labs wallet authentication in their apps.\n\nNote that this example code also shows how to chain to the ID token creation event if needed and configured, which is an optional step in the authentication process. The code logs the ID token to the console and then suggests sending it to a resource server for validation.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/react-native#chunk-24", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nEvent Name\n\nDefinition\n\nid-token-created\n\nid-token-created\n\nReturns an object containing a short lived, time bound ID token that can be used to verify the ownership of a user's wallet address on login.\n\nRead more about this token and how to use it.\n\nRead more", "explanation": "**Event Name: id-token-created**\n\nThe `id-token-created` event is triggered when a short-lived, time-bound ID token is generated. This token can be used to verify the ownership of a user's wallet address upon login.\n\n**Main Purpose:** The main purpose of this event is to provide a secure way to authenticate users by verifying their wallet address through a one-time token. This ensures that only authorized users can access their account, adding an extra layer of security to the Magic Labs embedded wallet.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/react-native#chunk-25", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nshowUI\n\nDisplays the fully navigable wallet to the user that adheres to the toggled configurations on your developer dashboard\u2019s Widget UI tab. \u2060 \u2060This is only supported for users who login with email or Google and not third party wallets such as metamask. User must be signed in for this method to return or else it will throw an error.\n\nnavigable wallet\n\n#\n\n\u2022 None", "explanation": "**Purpose of `showUI` Method**\n\nThe `showUI` method, as described in the Magic Labs documentation, is used to display a fully navigable wallet interface to the user. This means that when called, it will render a complete wallet experience on top of the application, following the custom configurations set up in the developer dashboard's Widget UI tab.\n\n**Key Points**\n\n* The `showUI` method is only supported for users who log in with email or Google authentication.\n* It is not compatible with third-party wallets like MetaMask.\n* The user must be signed in for this method to return successfully; otherwise, it will throw an error.\n\n**Main Use Case**\n\nThe main purpose of the `showUI` method is to provide a seamless wallet experience to users who have logged in using email or Google authentication. It allows developers to display a fully functional wallet interface while maintaining custom configurations set up on their developer dashboard.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/react-native#chunk-26", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 Promise which resolves when the user closes the window\n\nPromise\n\n\u2060Optionally, add a .on() handler to catch the disconnect event emitted when the user logs out from the wallet widget.\n\n.on()\n\ndisconnect", "explanation": "**Returns**\n\nThis documentation section explains how the Magic Labs embedded wallet handles user interactions and events.\n\n**Main Purpose:**\n\nThe `# Returns` section informs developers about the outcome of two specific user actions:\n\n1. **Closing the window**: When the user closes the Magic Labs wallet window, a promise is resolved. This means that your application can expect to receive a signal or notification when the user has closed the wallet.\n2. **User logout**: Additionally, you can attach an event listener using `.on()` to catch the `disconnect` event emitted when the user logs out from the wallet widget. This allows your application to react accordingly to the user's logout action.\n\nIn summary, this section provides information on how to handle user interactions and events in the Magic Labs embedded wallet, enabling developers to integrate its functionality seamlessly into their applications.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/react-native#chunk-27", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\n// Bare React Native\n\n01\n\n// Bare React Native\n\n02\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'@magic-sdk/react-native-bare'\n\n;\n\n02\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'@magic-sdk/react-native-bare'\n\n;\n\n03\n\n// Expo React Native\n\n03\n\n// Expo React Native\n\n04\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'@magic-sdk/react-native-expo'\n\n;\n\n04\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'@magic-sdk/react-native-expo'\n\n;\n\n05\n\n05\n\n06\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n06\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n07\n\n07\n\n08\n\nawait\n\nmagic\n\n.\n\nwallet\n\n.\n\nshowUI\n\n(\n\n)\n\n08\n\nawait\n\nmagic\n\n.\n\nwallet\n\n.\n\nshowUI\n\n(\n\n)", "explanation": "This documentation section, titled \"#Example\", provides a code snippet demonstrating how to use the Magic Labs embedded wallet in a React Native application.\n\n**Main Purpose:**\n\nThe main purpose of this example is to showcase the basic usage of the Magic Labs wallet in a React Native environment. It shows how to import the Magic SDK, initialize it with a Publishable API Key, and display the wallet UI using the `showUI` method.\n\n**Key Components:**\n\n1. Importing the Magic SDK:\n\t* The code imports the Magic SDK from either `@magic-sdk/react-native-bare` or `@magic-sdk/react-native-expo`, depending on whether you're using a bare React Native project or Expo.\n2. Initializing the Magic instance:\n\t* The code creates a new instance of the Magic class, passing in the Publishable API Key as an argument.\n3. Displaying the wallet UI:\n\t* The code uses the `showUI` method to display the Magic Labs wallet UI.\n\n**Example Use Case:**\n\nThis example can be used as a starting point for integrating the Magic Labs wallet into your React Native application. By following this code snippet, you can quickly set up the wallet and start using it in your project.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/react-native#chunk-28", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nshowAddress\n\nDisplays an iframe with the current user\u2019s wallet address in a QR Code.\n\n#\n\n\u2022 None", "explanation": "Based on the provided documentation section \"#showAddress - #Arguments\" from the Magic Labs embedded wallet documentation, here's what it's about and its main purpose:\n\n**What it is:**\nThe `showAddress` function is a client-side API that displays an iframe (inline frame) containing the current user's wallet address in a QR Code format.\n\n**Main Purpose:**\nThe primary purpose of `showAddress` is to provide a visual representation of the user's wallet address, making it easily readable and accessible for them. This can be useful in various scenarios, such as:\n\n* Allowing users to quickly share their wallet address with others\n* Enabling users to verify their own wallet address\n* Providing a convenient way to display the wallet address on a webpage or application\n\nBy using `showAddress`, developers can easily integrate this feature into their applications, making it easier for users to interact with their wallets and access their information.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/react-native#chunk-29", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 Promise which resolves when the user closes the window\n\nPromise", "explanation": "Based on the provided documentation snippet, here's a clear explanation of what it's about and its main purpose:\n\n**What it is:**\n\nThis section, titled `#Returns`, describes the return value of a specific function or method in the Magic Labs embedded wallet SDK for React Native.\n\n**What it returns:**\n\nThe function returns a **Promise**, which is a fundamental concept in JavaScript. A Promise represents a value that may not be available yet (e.g., when an asynchronous operation, like user interaction, is pending). When the value becomes available (i.e., the promise is resolved), the associated result can be accessed.\n\n**Main purpose:**\n\nThe main purpose of this section is to inform developers about what they can expect as a return value from this specific function. By knowing that the function returns a Promise which resolves when the user closes the window, developers can write their code accordingly, handling the promise resolution and any associated result.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/react-native#chunk-30", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\n// Bare React Native\n\n01\n\n// Bare React Native\n\n02\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'@magic-sdk/react-native-bare'\n\n;\n\n02\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'@magic-sdk/react-native-bare'\n\n;\n\n03\n\n// Expo React Native\n\n03\n\n// Expo React Native\n\n04\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'@magic-sdk/react-native-expo'\n\n;\n\n04\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'@magic-sdk/react-native-expo'\n\n;\n\n05\n\n05\n\n06\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n06\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n07\n\n07\n\n08\n\nawait\n\nmagic\n\n.\n\nwallet\n\n.\n\nshowAddress\n\n(\n\n)\n\n08\n\nawait\n\nmagic\n\n.\n\nwallet\n\n.\n\nshowAddress\n\n(\n\n)", "explanation": "**Section Title:** `#Example`\n\n**Purpose:** This documentation section provides a code example for using the Magic Labs embedded wallet in a React Native application.\n\n**Key Points:**\n\n1. **Importing the Magic SDK**: The example shows how to import the Magic SDK from two different packages:\n\t* `@magic-sdk/react-native-bare` (for bare React Native apps)\n\t* `@magic-sdk/react-native-expo` (for Expo React Native apps)\n2. **Initializing the Magic instance**: The code creates a new instance of the Magic class, passing in a publishable API key.\n3. **Using the wallet feature**: The example demonstrates how to use the `wallet.showAddress()` method to display the user's wallet address.\n\n**Main Purpose:** This section is intended to provide a quick and easy-to-understand example for developers who want to integrate the Magic Labs embedded wallet into their React Native application. It serves as a reference point for understanding the basic usage of the SDK and its features.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/react-native#chunk-31", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nshowBalances\n\nDisplays an iframe that displays the user\u2019s token balances from the currently connected network.\n\n#\n\n\u2022 None", "explanation": "The `#showBalances` section in the Magic Labs embedded wallet documentation is about displaying a user's token balances from a specific network. \n\nIts main purpose is to provide an iframe that showcases the user's current token balances from the network they are currently connected to. In other words, this function allows users to view their available token balances in a seamless and user-friendly way.\n\nHowever, based on the provided information, there are no required arguments for this function to work, as indicated by \"\u2022 None\".", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/react-native#chunk-32", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 Promise which resolves when the user closes the window\n\nPromise", "explanation": "Let's break down this documentation section.\n\n**Section:** `#Returns`\n\n**Context:** This section is part of an API documentation for a React Native SDK, specifically from Magic Labs (https://magic.link/docs/api/client-side-sdks/react-native).\n\n**What it says:**\n\n* The section mentions that the function returns:\n\t+ A **Promise**, which is a JavaScript construct that represents an asynchronous operation.\n\t+ This promise resolves when the user closes the window.\n\n**Main purpose:**\n\nThe main purpose of this section is to inform developers about what value or result they can expect from using the Magic Labs SDK in their React Native application. In this case, it's telling them that closing a window will trigger an event that gets handled asynchronously through a promise.\n\nIn simpler terms, this section helps developers understand how to work with the Magic Labs SDK, specifically when dealing with user interactions like closing windows.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/react-native#chunk-33", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\n// Bare React Native\n\n01\n\n// Bare React Native\n\n02\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'@magic-sdk/react-native-bare'\n\n;\n\n02\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'@magic-sdk/react-native-bare'\n\n;\n\n03\n\n// Expo React Native\n\n03\n\n// Expo React Native\n\n04\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'@magic-sdk/react-native-expo'\n\n;\n\n04\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'@magic-sdk/react-native-expo'\n\n;\n\n05\n\n05\n\n06\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n06\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n07\n\n07\n\n08\n\nawait\n\nmagic\n\n.\n\nwallet\n\n.\n\nshowBalances\n\n(\n\n)\n\n08\n\nawait\n\nmagic\n\n.\n\nwallet\n\n.\n\nshowBalances\n\n(\n\n)", "explanation": "This documentation section, titled `#Example`, appears to be an example code snippet that demonstrates how to use the Magic Labs embedded wallet SDK in a React Native application.\n\n**Main Purpose:**\nThe main purpose of this example is to show developers how to initialize and use the Magic Labs wallet SDK in their React Native app, specifically for displaying user balances.\n\n**Key Points:**\n\n1. The code imports the `Magic` class from either `@magic-sdk/react-native-bare` or `@magic-sdk/react-native-expo`, depending on whether you're using a bare React Native setup or Expo.\n2. It creates an instance of the `Magic` class, passing in a publishable API key (represented by `'PUBLISHABLE_API_KEY'`) as an argument.\n3. The code then calls the `showBalances()` method on the `wallet` object, which is a part of the Magic Labs SDK. This method is used to display the user's balances.\n\n**Context:**\nThis example is likely intended for developers who want to integrate the Magic Labs wallet SDK into their React Native app, allowing users to access and manage their digital assets within the app.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/react-native#chunk-34", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nshowNFTs\n\nDisplays an iframe that shows the user\u2019s NFTs in both an aggregated and detailed individual view. Supported only on Ethereum and Polygon. Ensure this is enabled in your developer dashboard via the \u2018Widget UI\u2019 tab.\n\n#\n\n\u2022 None", "explanation": "This documentation section is about a function called `showNFTs` which displays a viewer that shows a user's Non-Fungible Tokens (NFTs) in two views:\n\n1. An aggregated view: This shows all the NFTs the user has in one place.\n2. A detailed individual view: This shows each NFT separately, with more details about it.\n\nThe main purpose of `showNFTs` is to allow users to easily visualize and interact with their NFTs within an application. It's only supported on Ethereum and Polygon blockchains. To use this feature, developers must enable it in their Magic Labs dashboard under the \"Widget UI\" tab.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/react-native#chunk-35", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 Promise which resolves when the user closes the window\n\nPromise", "explanation": "**Explanation of '#Returns' Section**\n\nThe '#Returns' section is part of the Magic Labs embedded wallet documentation for the React Native client-side SDK. Specifically, it describes the return type and behavior of the wallet API when a user closes the window.\n\n**Main Purpose:**\n\nThe main purpose of this section is to inform developers about the expected outcome of an API call or action when a user closes the wallet window. It indicates that the returned value is a **Promise**, which is a result object that is resolved (or fulfilled) when the user closes the window.\n\nIn other words, the '#Returns' section serves as a guide for developers to understand what to expect when a user interacts with the wallet and closes the window, allowing them to properly handle this scenario in their application's logic.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/react-native#chunk-36", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\n// Bare React Native\n\n01\n\n// Bare React Native\n\n02\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'@magic-sdk/react-native-bare'\n\n;\n\n02\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'@magic-sdk/react-native-bare'\n\n;\n\n03\n\n// Expo React Native\n\n03\n\n// Expo React Native\n\n04\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'@magic-sdk/react-native-expo'\n\n;\n\n04\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'@magic-sdk/react-native-expo'\n\n;\n\n05\n\n05\n\n06\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n06\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n07\n\n07\n\n08\n\nawait\n\nmagic\n\n.\n\nwallet\n\n.\n\nshowNFTs\n\n(\n\n)\n\n08\n\nawait\n\nmagic\n\n.\n\nwallet\n\n.\n\nshowNFTs\n\n(\n\n)", "explanation": "This documentation section is titled `#Example` and it's about demonstrating how to use the Magic Labs embedded wallet in a React Native application.\n\nThe main purpose of this example is to show developers how to import and initialize the Magic Labs wallet, and then use its methods to display NFTs (Non-Fungible Tokens) to the user.\n\nHere are the key points:\n\n1. **Importing Magic**: The example shows two different ways to import the `Magic` class from the `@magic-sdk/react-native-bare` or `@magic-sdk/react-native-expo` packages, depending on whether you're using bare React Native or Expo.\n2. **Initializing Magic Labs wallet**: A new instance of the `Magic` class is created with a publishable API key, which is used to initialize the wallet.\n3. **Showing NFTs**: The `showNFTs()` method of the wallet instance is called without any arguments, which likely displays a list of available NFTs to the user.\n\nOverall, this example provides a simple and concise demonstration of how to integrate Magic Labs' embedded wallet into a React Native app and display NFTs to the user.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/react-native#chunk-37", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nshowSendTokensUI\n\nDisplays an iframe with UI to help the user transfer tokens from their account to another address.\n\n#\n\n\u2022 None", "explanation": "This documentation section explains a function called `showSendTokensUI` which is used to display a user interface (UI) that helps customers send tokens from their Magic Labs wallet to another address. The main purpose of this function is to facilitate token transfers in an easy and intuitive way for users.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/react-native#chunk-38", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 Promise which resolves when the user closes the window\n\nPromise", "explanation": "The '#Returns' section in the Magic Labs embedded wallet documentation for React Native SDK is referring to the return value of a function or method.\n\nIn this case, it states that the function or method returns a 'Promise'. A Promise is a JavaScript object that represents an asynchronous operation, allowing the calling code to wait for the operation to complete.\n\nThe main purpose of this section is to inform the developer that the function or method they are using will not return an immediate result, but instead, will return a Promise that will resolve when a specific event occurs. Specifically, the Promise will resolve 'when the user closes the window', meaning that the function or method will complete its execution and return control to the calling code once the user closes the window or completes the intended action.\n\nThis information is crucial for developers to correctly handle the asynchronous operation and write their code to wait for the Promise to resolve or reject, before proceeding with the rest of their logic.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/react-native#chunk-39", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\n// Bare React Native\n\n01\n\n// Bare React Native\n\n02\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'@magic-sdk/react-native-bare'\n\n;\n\n02\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'@magic-sdk/react-native-bare'\n\n;\n\n03\n\n// Expo React Native\n\n03\n\n// Expo React Native\n\n04\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'@magic-sdk/react-native-expo'\n\n;\n\n04\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'@magic-sdk/react-native-expo'\n\n;\n\n05\n\n05\n\n06\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n06\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n07\n\n07\n\n08\n\nawait\n\nmagic\n\n.\n\nwallet\n\n.\n\nshowSendTokensUI\n\n(\n\n)\n\n08\n\nawait\n\nmagic\n\n.\n\nwallet\n\n.\n\nshowSendTokensUI\n\n(\n\n)", "explanation": "**Example Documentation Section**\n\nThis documentation section is titled \"#Example\" and appears to be a code example that demonstrates how to use the Magic Labs embedded wallet in a React Native app.\n\n**Main Purpose:**\n\nThe main purpose of this example is to show developers how to integrate the Magic Labs wallet into their React Native apps using the `@magic-sdk/react-native-bare` or `@magic-sdk/react-native-expo` packages. Specifically, it demonstrates how to:\n\n1. Import the Magic SDK\n2. Initialize a new Magic instance with a publishable API key\n3. Use the `showSendTokensUI` method of the wallet to display the send tokens UI\n\n**Key Takeaways:**\n\n* This example assumes you have already set up a Magic Labs account and obtained a publishable API key.\n* You can use either the `@magic-sdk/react-native-bare` or `@magic-sdk/react-native-expo` packages, depending on your React Native setup (bare or Expo).\n* The `showSendTokensUI` method is used to display the wallet's send tokens UI, allowing users to send cryptocurrencies.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/react-native#chunk-40", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nshowOnRamp\n\nDisplays an iframe modal with various on ramp providers for the user to purchase crypto from directly to their wallet.\n\nTo use the fiat on ramp for Dedicated Wallet apps, you will need to contact us to KYB with the payment provider prior to use. Once approved, ensure this toggle is enabled in your developer dashboard via the \u2018Widget UI\u2019 tab.\n\n#\n\n\u2022 None", "explanation": "Here's a clear and concise explanation of what `#showOnRamp - #Arguments` means:\n\n**Purpose:** The `showOnRamp` function displays an iframe modal with various on-ramp providers, allowing users to purchase cryptocurrency directly into their Magic Labs embedded wallet.\n\n**Key Points:**\n\n* It shows a modal window (iframe) with options for users to buy crypto from different providers.\n* This feature is specifically designed for Dedicated Wallet apps.\n* To use the fiat on-ramp (which enables buying crypto with fiat currency), you need to contact Magic Labs for KYB (Know Your Business) approval prior to implementation.\n* After approval, ensure the toggle is enabled in your developer dashboard under the \"Widget UI\" tab.\n\nIn summary, `showOnRamp` helps users purchase cryptocurrency into their wallet by displaying a modal window with on-ramp providers, but requires prior approval and configuration for fiat on-ramp functionality.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/react-native#chunk-41", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 Promise which resolves when the user closes the window\n\nPromise", "explanation": "**Section #Returns**\n\nThis documentation section explains that the `#Returns` function returns a **Promise**.\n\n**What is a Promise?**\nA Promise is a fundamental concept in JavaScript programming that represents an operation that hasn't completed yet, but will produce a value at some point in the future. It's like a box that holds a value that's not yet available, but will be delivered when the operation completes.\n\n**Main Purpose:**\nThe `#Returns` function returns this Promise, which indicates that it's related to an asynchronous operation (like closing a window). When the user closes the window, the Promise resolves (i.e., becomes fulfilled), and its associated value can be accessed or used in the code.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/react-native#chunk-42", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\n// Bare React Native\n\n01\n\n// Bare React Native\n\n02\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'@magic-sdk/react-native-bare'\n\n;\n\n02\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'@magic-sdk/react-native-bare'\n\n;\n\n03\n\n// Expo React Native\n\n03\n\n// Expo React Native\n\n04\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'@magic-sdk/react-native-expo'\n\n;\n\n04\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'@magic-sdk/react-native-expo'\n\n;\n\n05\n\n05\n\n06\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n06\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n07\n\n07\n\n08\n\nawait\n\nmagic\n\n.\n\nwallet\n\n.\n\nshowOnRamp\n\n(\n\n)\n\n08\n\nawait\n\nmagic\n\n.\n\nwallet\n\n.\n\nshowOnRamp\n\n(\n\n)", "explanation": "This documentation section is titled '#Example' and it provides an example code snippet for using the Magic Labs embedded wallet in a React Native application.\n\nThe main purpose of this example is to demonstrate how to integrate the Magic Labs wallet into a React Native app, specifically:\n\n1. Importing the Magic SDK library\n2. Creating a new instance of the Magic class with a publishable API key\n3. Using the `showOnRamp` method to display the Magic Wallet on the screen\n\nThe code snippet is divided into two sections:\n\n* One for bare React Native (i.e., not using Expo)\n* One for Expo React Native (i.e., using the Expo framework)\n\nIn both cases, the example imports the Magic SDK library, creates a new instance of the Magic class with a publishable API key, and then uses the `showOnRamp` method to display the Magic Wallet on the screen.\n\nThis example is likely intended for developers who want to integrate the Magic Labs wallet into their React Native app, and it provides a clear and concise code snippet that they can use as a starting point.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/react-native#chunk-43", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\ngetProvider\n\nThis method is introduced in magic-sdk@17.0.0 and must be used to get the current provider if third party wallets are enabled. If not using third party wallets, we suggest using magic.rpcProvider.\n\nmagic-sdk@17.0.0\n\nmagic.rpcProvider\n\n#\n\n\u2022 None", "explanation": "**Section Explanation:**\n\nThis documentation section is about a method called `getProvider` in the Magic Labs embedded wallet SDK for React Native.\n\n**Main Purpose:**\n\nThe main purpose of the `getProvider` method is to **retrieve the current provider** when third-party wallets are enabled. If you're not using third-party wallets, it's recommended to use an alternative approach (`magic.rpcProvider`) instead.\n\n**Key Point:**\n\nThis method is only relevant starting from version 17.0.0 of the `magic-sdk`.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/react-native#chunk-44", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 Object: The rpc provider of the wallet a user is currently logged in with (MetaMask, Coinbase Wallet or Magic)\n\nObject\n\nImportant: To ensure rpc requests are routed to the correct wallet, developers must re-fetch the provider object using getProvider() and re-initialize the web3.js or ethers.js instance any time a user logs in, logs out, or disconnects their wallet.\n\ngetProvider()", "explanation": "Let's break down the documentation section titled '#Returns'.\n\n**What is it about?**\n\nThis section explains what is returned by a specific function call `getProvider()` in the Magic Labs embedded wallet.\n\n**Main Purpose:**\n\nThe main purpose of this documentation section is to inform developers about the type of object (`Object`) that is returned by the `getProvider()` method, which provides access to the RPC (Remote Procedure Call) provider of the currently logged-in user's wallet. This is crucial for routing RPC requests correctly.\n\n**Key Point:**\n\nThe section emphasizes the importance of re-fetching the provider object using `getProvider()` and re-initializing web3.js or ethers.js instance whenever a user logs in, logs out, or disconnects their wallet to ensure correct functionality.\n\nIn summary, this documentation section provides essential information for developers integrating Magic Labs embedded wallet into their applications, ensuring seamless communication between the application and the user's selected wallet.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/react-native#chunk-45", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\n// Bare React Native\n\n01\n\n// Bare React Native\n\n02\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'@magic-sdk/react-native-bare'\n\n;\n\n02\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'@magic-sdk/react-native-bare'\n\n;\n\n03\n\n// Expo React Native\n\n03\n\n// Expo React Native\n\n04\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'@magic-sdk/react-native-expo'\n\n;\n\n04\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'@magic-sdk/react-native-expo'\n\n;\n\n05\n\nimport\n\nWeb3\n\nfrom\n\n'web3'\n\n;\n\n05\n\nimport\n\nWeb3\n\nfrom\n\n'web3'\n\n;\n\n06\n\n06\n\n07\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n,\n\n{\n\n07\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n,\n\n{\n\n08\n\nnetwork\n\n:\n\n\"goerli\"\n\n,\n\n08\n\nnetwork\n\n:\n\n\"goerli\"\n\n,\n\n09\n\n}\n\n)\n\n;\n\n09\n\n}\n\n)\n\n;\n\n10\n\n10\n\n11\n\nconst\n\nprovider\n\n=\n\nawait\n\nmagic\n\n.\n\nwallet\n\n.\n\ngetProvider\n\n(\n\n)\n\n;\n\n11\n\nconst\n\nprovider\n\n=\n\nawait\n\nmagic\n\n.\n\nwallet\n\n.\n\ngetProvider\n\n(\n\n)\n\n;\n\n12\n\n12\n\n13\n\nconst\n\nweb3\n\n=\n\nnew\n\nWeb3\n\n(\n\nprovider\n\n)\n\n;\n\n13\n\nconst\n\nweb3\n\n=\n\nnew\n\nWeb3\n\n(\n\nprovider\n\n)\n\n;\n\n14\n\n14\n\n15\n\nconst\n\naccounts\n\n=\n\nawait\n\nmagic\n\n.\n\nwallet\n\n.\n\nconnectWithUI\n\n(\n\n)\n\n;\n\n15\n\nconst\n\naccounts\n\n=\n\nawait\n\nmagic\n\n.\n\nwallet\n\n.\n\nconnectWithUI\n\n(\n\n)\n\n;\n\n16\n\n16\n\n17\n\n// Listen for events\n\n17\n\n// Listen for events\n\n18\n\nweb3\n\n.\n\ncurrentProvider\n\n.\n\non\n\n(\n\n'accountsChanged'\n\n,\n\nhandleAccountsChanged\n\n)\n\n;\n\n18\n\nweb3\n\n.\n\ncurrentProvider\n\n.\n\non\n\n(\n\n'accountsChanged'\n\n,\n\nhandleAccountsChanged\n\n)\n\n;\n\n19\n\nweb3\n\n.\n\ncurrentProvider\n\n.\n\non\n\n(\n\n'chainChanged'\n\n,\n\nhandleChainChanged\n\n)\n\n;\n\n19\n\nweb3\n\n.\n\ncurrentProvider\n\n.\n\non\n\n(\n\n'chainChanged'\n\n,\n\nhandleChainChanged\n\n)\n\n;", "explanation": "This documentation section is about using the Magic Labs embedded wallet with Ethers.js in a React Native application.\n\n**Main Purpose:**\n\nThe main purpose of this code snippet is to connect a user's Ethereum wallet to a React Native app using the Magic Labs embedded wallet and Ethers.js. This allows users to interact with smart contracts on the Ethereum blockchain within the app.\n\n**Key Steps:**\n\n1. Importing the Magic Labs library (`@magic-sdk/react-native-bare` or `@magic-sdk/react-native-expo`) and creating a new instance of the `Magic` class.\n2. Initializing the `Magic` instance with a publishable API key and specifying the network (e.g., Goerli testnet).\n3. Creating a Web3 provider using the `getProvider` method of the Magic wallet instance.\n4. Creating a new Ethers.js instance (`Web3`) using the provider.\n5. Connecting the user's Ethereum wallet to the app using the `connectWithUI` method of the Magic wallet instance.\n6. Listening for events (e.g., account changes and chain changes) using the Ethers.js provider.\n\n**Context:**\n\nThis code snippet is likely used in a React Native application that interacts with Ethereum smart contracts, such as a decentralized finance (DeFi) app or a non-fungible token (NFT) marketplace. The Magic Labs embedded wallet provides a user-friendly interface for users to manage their Ethereum wallets within the app.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/react-native#chunk-46", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nThe User Module and it's members are accessible on the Magic SDK instance by the user property.\n\nuser\n\nCopy\n\n01\n\n// Bare React Native\n\n01\n\n// Bare React Native\n\n02\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'@magic-sdk/react-native-bare'\n\n;\n\n02\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'@magic-sdk/react-native-bare'\n\n;\n\n03\n\n// Expo React Native\n\n03\n\n// Expo React Native\n\n04\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'@magic-sdk/react-native-expo'\n\n;\n\n04\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'@magic-sdk/react-native-expo'\n\n;\n\n05\n\n05\n\n06\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n06\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n07\n\n07\n\n08\n\nmagic\n\n.\n\nuser\n\n;\n\n08\n\nmagic\n\n.\n\nuser\n\n;\n\n09\n\nmagic\n\n.\n\nuser\n\n.\n\ngetIdToken\n\n;\n\n09\n\nmagic\n\n.\n\nuser\n\n.\n\ngetIdToken\n\n;\n\n10\n\nmagic\n\n.\n\nuser\n\n.\n\ngenerateIdToken\n\n;\n\n10\n\nmagic\n\n.\n\nuser\n\n.\n\ngenerateIdToken\n\n;\n\n11\n\nmagic\n\n.\n\nuser\n\n.\n\ngetInfo\n\n;\n\n11\n\nmagic\n\n.\n\nuser\n\n.\n\ngetInfo\n\n;\n\n12\n\nmagic\n\n.\n\nuser\n\n.\n\nisLoggedIn\n\n;\n\n12\n\nmagic\n\n.\n\nuser\n\n.\n\nisLoggedIn\n\n;\n\n13\n\nmagic\n\n.\n\nuser\n\n.\n\nlogout\n\n;\n\n13\n\nmagic\n\n.\n\nuser\n\n.\n\nlogout\n\n;\n\n14\n\nmagic\n\n.\n\nuser\n\n.\n\nshowSettings\n\n;\n\n14\n\nmagic\n\n.\n\nuser\n\n.\n\nshowSettings\n\n;\n\n15\n\nmagic\n\n.\n\nuser\n\n.\n\nrevealPrivateKey\n\n;\n\n15\n\nmagic\n\n.\n\nuser\n\n.\n\nrevealPrivateKey\n\n;\n\n16\n\nmagic\n\n.\n\nuser\n\n.\n\nrequestInfoWithUI\n\n;\n\n16\n\nmagic\n\n.\n\nuser\n\n.\n\nrequestInfoWithUI\n\n;\n\n#\n\ngetIdToken\n\nGenerates a Decentralized Id Token which acts as a proof of authentication to resource servers.\n\nDecentralized Id Token\n\nOnly available with Dedicated Wallet.\n\n#\n\n\u2022 lifespan? (Number): Will set the lifespan of the generated token. Defaults to 900s (15 mins).\n\nlifespan?", "explanation": "**What is the User Module and getIdToken in Magic Labs?**\n\nThe User Module is a part of the Magic Labs SDK that provides methods for interacting with user authentication and identity management. The `getIdToken` method is one of these methods.\n\n**Main Purpose:**\n\nThe main purpose of `getIdToken` is to generate a **Decentralized Id Token**, which serves as proof of authentication to resource servers. This token can be used by the client (in this case, the React Native app) to authenticate with other services without relying on a centralized identity provider.\n\n**Key Points:**\n\n* The `getIdToken` method generates a Decentralized Id Token.\n* This token is only available when using the Dedicated Wallet feature of Magic Labs.\n* The lifespan of the generated token can be set using an optional parameter (lifespan?). By default, the lifespan is 15 minutes (900 seconds).\n\nIn summary, `getIdToken` allows your React Native app to obtain a Decentralized Id Token that can be used for authentication with other services, while also giving you control over the token's lifespan.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/react-native#chunk-47", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 PromiEvent<string>: Base64-encoded string representation of a JSON tuple representing\n\nPromiEvent<string>", "explanation": "**Returns Documentation Explanation**\n\nThe '#Returns' documentation section from the Magic Labs API client-side SDKs for React Native explains what the API endpoint or function returns upon a successful execution.\n\n**Main Purpose:**\n\nThe main purpose of this documentation is to inform developers about the type and format of data they can expect to receive as a response from the API endpoint or function.\n\n**Breakdown:**\n\nIn this specific '#Returns' section, the API endpoint or function returns a `PromiEvent<string>`. Here's a breakdown of what this means:\n\n* `PromiEvent`: This is a type of event that is returned as a Promise. It allows developers to handle asynchronous operations and provides additional functionality for error handling.\n* `string`: The type of data that is returned as a result of the PromiEvent.\n* `Base64-encoded string representation of a JSON tuple representing`: The string that is returned is a Base64-encoded representation of a JSON tuple. This means that the JSON data is encoded using Base64 encoding to ensure it can be safely transmitted as a string.\n\nIn summary, this '#Returns' documentation informs developers that they can expect a Base64-encoded JSON string response from the API endpoint or function, which they can then decode and use in their application.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/react-native#chunk-48", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\n// Bare React Native\n\n01\n\n// Bare React Native\n\n02\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'@magic-sdk/react-native-bare'\n\n;\n\n02\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'@magic-sdk/react-native-bare'\n\n;\n\n03\n\n// Expo React Native\n\n03\n\n// Expo React Native\n\n04\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'@magic-sdk/react-native-expo'\n\n;\n\n04\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'@magic-sdk/react-native-expo'\n\n;\n\n05\n\n05\n\n06\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n06\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n07\n\n07\n\n08\n\n// Assumes a user is already logged in\n\n08\n\n// Assumes a user is already logged in\n\n09\n\ntry\n\n{\n\n09\n\ntry\n\n{\n\n10\n\nconst\n\nidToken\n\n=\n\nawait\n\nmagic\n\n.\n\nuser\n\n.\n\ngetIdToken\n\n(\n\n)\n\n;\n\n10\n\nconst\n\nidToken\n\n=\n\nawait\n\nmagic\n\n.\n\nuser\n\n.\n\ngetIdToken\n\n(\n\n)\n\n;\n\n11\n\n}\n\ncatch\n\n{\n\n11\n\n}\n\ncatch\n\n{\n\n12\n\n// Handle errors if required!\n\n12\n\n// Handle errors if required!\n\n13\n\n}\n\n13\n\n}", "explanation": "This documentation section is about initializing the Magic Labs embedded wallet in a React Native application.\n\n**Main Purpose:**\n\nThe main purpose of this code snippet is to demonstrate how to create an instance of the Magic Labs embedded wallet and retrieve a user's ID token, assuming the user is already logged in.\n\n**Key Points:**\n\n1. Importing the Magic SDK for React Native (bare or Expo)\n2. Creating an instance of the Magic Labs embedded wallet with a publishable API key\n3. Assuming a user is already logged in\n4. Attempting to retrieve the user's ID token using the `getIdToken()` method\n5. Handling errors if required\n\n**Context:**\n\nThis code snippet is likely used in a React Native application that integrates Magic Labs for authentication and authorization purposes. The application would use this code to initialize the embedded wallet and retrieve the user's ID token, which can then be used to authenticate and authorize API requests.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/react-native#chunk-49", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\ngenerateIdToken\n\nGenerates a Decentralized ID token with optional serialized data.\n\nDecentralized ID token\n\nOnly available with Dedicated Wallet.\n\n#\n\n\u2022 lifespan? (Number): Will set the lifespan of the generated token. Defaults to 900s (15 mins).\n\n\u2022 attachment? (String): Will set a signature of serialized data in the generated token. Defaults to \"none\".\n\nlifespan?\n\nattachment?\n\n\"none\"", "explanation": "Here's an explanation of the `#generateIdToken - #Arguments` section:\n\n**What it is:** The `generateIdToken` function generates a Decentralized ID (DID) token with optional serialized data. This is only available with Magic Labs' Dedicated Wallet.\n\n**Main purpose:** The main purpose of this function is to create a secure and decentralized identifier that can be used to authenticate users or devices in a secure manner.\n\n**Function arguments:**\n\n* `lifespan?`: An optional parameter that sets the lifespan (time period) of the generated token. If not provided, it defaults to 15 minutes (900 seconds).\n* `attachment?`: An optional parameter that allows setting a signature of serialized data in the generated token. If not provided, it defaults to \"none\", which means no attachment is set.\n\nIn summary, the `generateIdToken` function generates a secure and decentralized identifier with optional expiration time and attachment data, making it suitable for authentication purposes.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/react-native#chunk-50", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 PromiEvent<string>: Base64-encoded string representation of a JSON tuple representing [proof, claim]\n\nPromiEvent<string>\n\n[proof, claim]", "explanation": "This section of the documentation explains how to retrieve a specific type of data from the Magic Labs embedded wallet.\n\nHere's what it says:\n\n* The `#Returns` section is about something called a `PromiEvent`.\n* A `PromiEvent<string>` is a special kind of data that is returned in string format, specifically as a Base64-encoded string.\n* This encoded string represents a JSON tuple (a set of key-value pairs) containing two values: **proof** and **claim**.\n\nIn simpler terms:\n\n* The Magic Labs wallet returns some data (the proof and claim) as a single string.\n* This string is encoded in a special format called Base64, which protects it from being misinterpreted.\n* When you get this string, you can decode it to retrieve the original JSON tuple with two values: proof and claim.\n\nThe main purpose of this section is to inform developers how to handle and work with this specific type of data returned by the Magic Labs embedded wallet.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/react-native#chunk-51", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\n// Bare React Native\n\n01\n\n// Bare React Native\n\n02\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'@magic-sdk/react-native-bare'\n\n;\n\n02\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'@magic-sdk/react-native-bare'\n\n;\n\n03\n\n// Expo React Native\n\n03\n\n// Expo React Native\n\n04\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'@magic-sdk/react-native-expo'\n\n;\n\n04\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'@magic-sdk/react-native-expo'\n\n;\n\n05\n\n05\n\n06\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n06\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n07\n\n07\n\n08\n\n// Assumes a user is already logged in\n\n08\n\n// Assumes a user is already logged in\n\n09\n\ntry\n\n{\n\n09\n\ntry\n\n{\n\n10\n\nconst\n\nidToken\n\n=\n\nawait\n\nmagic\n\n.\n\nuser\n\n.\n\ngenerateIdToken\n\n(\n\n{\n\nattachment\n\n:\n\n'SERVER_SECRET'\n\n}\n\n)\n\n;\n\n10\n\nconst\n\nidToken\n\n=\n\nawait\n\nmagic\n\n.\n\nuser\n\n.\n\ngenerateIdToken\n\n(\n\n{\n\nattachment\n\n:\n\n'SERVER_SECRET'\n\n}\n\n)\n\n;\n\n11\n\n}\n\ncatch\n\n{\n\n11\n\n}\n\ncatch\n\n{\n\n12\n\n// Handle errors if required!\n\n12\n\n// Handle errors if required!\n\n13\n\n}\n\n13\n\n}", "explanation": "This documentation section is an example code snippet in JavaScript, specifically for React Native, which is a framework for building mobile applications using React. The main purpose of this example is to demonstrate how to use the Magic SDK (Software Development Kit) to generate an ID token for a user who is already logged in.\n\nHere's a breakdown of what the code does:\n\n1. It imports the `Magic` library from different modules (`@magic-sdk/react-native-bare` and `@magic-sdk/react-native-expo`) depending on whether it's using the bare React Native or Expo versions.\n2. It creates an instance of the `Magic` library, passing in a publishable API key (represented by `'PUBLISHABLE_API_KEY'`). This is likely a placeholder for your actual Magic API key.\n3. The code assumes that a user is already logged in and uses the `generateIdToken` method to generate an ID token. This method takes an options object as an argument, which includes an `attachment` property set to `'SERVER_SECRET'`. This attachment contains information about the server (or backend) that will validate the ID token.\n4. The code attempts to generate the ID token using `await magic.user.generateIdToken()`, but if any errors occur during this process, it catches them and logs an error message.\n\nThe main purpose of this example is to provide a basic usage pattern for generating an ID token with Magic SDK in React Native applications.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/react-native#chunk-52", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\ngetInfo\n\nRetrieves information for the authenticated user.\n\n#\n\n\u2022 None", "explanation": "The section '#getInfo - #Arguments' is about the `getInfo` function from the Magic Labs embedded wallet API. \n\nThis function retrieves information for the authenticated user, but it does not take any arguments. Its main purpose is to provide information about the user who is currently logged in or authenticated with the Magic Labs wallet.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/react-native#chunk-53", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 PromiEvent<string>:issuer (String): The Decentralized ID of the user. In server-side use-cases, we recommend this value to be used as the user ID in your own tables.email (String): Email address of the authenticated userphoneNumber (String): The phone number of the authenticated userpublicAddress (String): The authenticated user's public address (a.k.a.: public key)walletType (String): Information about the wallet the user is currently signed in with ('magic' | 'metamask' | 'coinbase_wallet')isMfaEnabled (Boolean): Whether or not multi-factor authentication is enabled for the userrecoveryFactors (Array): Any recovery methods that have been enabled (ex. [{ type: 'phone_number', value: '+99999999' }])\n\nPromiEvent<string>\n\n\u2022 issuer (String): The Decentralized ID of the user. In server-side use-cases, we recommend this value to be used as the user ID in your own tables.\n\n\u2022 email (String): Email address of the authenticated user\n\n\u2022 phoneNumber (String): The phone number of the authenticated user\n\n\u2022 publicAddress (String): The authenticated user's public address (a.k.a.: public key)\n\n\u2022 walletType (String): Information about the wallet the user is currently signed in with ('magic' | 'metamask' | 'coinbase_wallet')\n\n\u2022 isMfaEnabled (Boolean): Whether or not multi-factor authentication is enabled for the user\n\n\u2022 recoveryFactors (Array): Any recovery methods that have been enabled (ex. [{ type: 'phone_number', value: '+99999999' }])\n\nissuer\n\nemail\n\nphoneNumber\n\npublicAddress\n\nwalletType\n\n'magic' | 'metamask' | 'coinbase_wallet'\n\nisMfaEnabled\n\nrecoveryFactors\n\n[{ type: 'phone_number', value: '+99999999' }]\n\nWhen calling this method while connected with a 3rd party wallet (MetaMask, Coinbase Wallet), only the walletType will be returned.\n\nwalletType", "explanation": "Let me break it down for you:\n\n**#Returns**\n\nThis documentation section describes what information is returned by an API method when called.\n\n**Main Purpose:**\n\nThe main purpose of this section is to inform developers about the structure and content of the data that will be provided in response to a specific API request, specifically one related to user authentication and wallet details.\n\n**Key Points:**\n\n1. The method returns a `PromiEvent<string>` object, which contains various properties about the authenticated user.\n2. These properties include:\n\t* `issuer`: Decentralized ID of the user\n\t* `email`: Email address of the authenticated user\n\t* `phoneNumber`: Phone number of the authenticated user\n\t* `publicAddress`: Public address (a.k.a. public key) of the authenticated user\n\t* `walletType`: Information about the wallet the user is currently signed in with (e.g., 'magic', 'metamask', or 'coinbase_wallet')\n\t* `isMfaEnabled`: Whether multi-factor authentication is enabled for the user\n\t* `recoveryFactors`: Any recovery methods that have been enabled (e.g., phone number)\n3. When calling this method while connected with a 3rd party wallet (MetaMask, Coinbase Wallet), only the `walletType` will be returned.\n\nIn summary, this documentation section provides essential information for developers about what data to expect from an API call related to user authentication and wallet details.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/react-native#chunk-54", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\n// Bare React Native\n\n01\n\n// Bare React Native\n\n02\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'@magic-sdk/react-native-bare'\n\n;\n\n02\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'@magic-sdk/react-native-bare'\n\n;\n\n03\n\n// Expo React Native\n\n03\n\n// Expo React Native\n\n04\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'@magic-sdk/react-native-expo'\n\n;\n\n04\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'@magic-sdk/react-native-expo'\n\n;\n\n05\n\n05\n\n06\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n06\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n07\n\n07\n\n08\n\n// Assumes a user is already logged in\n\n08\n\n// Assumes a user is already logged in\n\n09\n\ntry\n\n{\n\n09\n\ntry\n\n{\n\n10\n\nconst\n\nuserInfo\n\n=\n\nawait\n\nmagic\n\n.\n\nuser\n\n.\n\ngetInfo\n\n(\n\n)\n\n;\n\n10\n\nconst\n\nuserInfo\n\n=\n\nawait\n\nmagic\n\n.\n\nuser\n\n.\n\ngetInfo\n\n(\n\n)\n\n;\n\n11\n\n}\n\ncatch\n\n{\n\n11\n\n}\n\ncatch\n\n{\n\n12\n\n// Handle errors if required!\n\n12\n\n// Handle errors if required!\n\n13\n\n}\n\n13\n\n}", "explanation": "This documentation section is titled \"#Example\" and it provides an example code snippet for integrating the Magic Labs embedded wallet into a React Native application.\n\n**Main Purpose:**\n\nThe main purpose of this example is to demonstrate how to initialize the Magic SDK in a React Native project, assuming that a user is already logged in. The example shows how to use the `Magic` class to get information about the currently logged-in user.\n\n**Key Points:**\n\n1. The example assumes that you have already installed the Magic SDK for React Native using one of two methods: either the bare React Native version (`@magic-sdk/react-native-bare`) or the Expo React Native version (`@magic-sdk/react-native-expo`).\n2. The code snippet creates a new instance of the `Magic` class, passing in your publishable API key as a string.\n3. It then calls the `getInfo()` method on the `user` property of the `Magic` instance to retrieve information about the currently logged-in user. This is done asynchronously using the `await` keyword.\n4. The example also shows how to handle errors that might occur during this process, by wrapping the code in a try-catch block.\n\n**Context:**\n\nThis example is likely used as a starting point for developers who want to integrate the Magic Labs embedded wallet into their React Native application. It provides a basic implementation of the Magic SDK and can be modified or extended as needed to fit specific use cases.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/react-native#chunk-55", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nisLoggedIn\n\nChecks if a user is currently logged in to the Magic SDK.\n\n#\n\n\u2022 None", "explanation": "The `#isLoggedIn` method is a part of the Magic Labs embedded wallet documentation for their client-side SDK, specifically for React Native. \n\nThis method checks whether a user is currently logged in to the Magic SDK. It takes no arguments (`None`), indicating that it does not require any parameters to perform the check.\n\nIn essence, `#isLoggedIn` is used to verify the current authentication state of a user within the application, allowing developers to determine whether a user is already logged in or needs to be redirected to the login flow.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/react-native#chunk-56", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 PromiEvent<boolean>\n\nPromiEvent<boolean>", "explanation": "This documentation section explains that the `#Returns` value for a specific API endpoint or function in the Magic Labs embedded wallet SDK is a `PromiEvent` with a boolean value.\n\nIn simple terms, here's what it means:\n\n* `PromiEvent`: This is an object type that represents a promise (a result that will be delivered at some point in the future) that also contains additional event-related information.\n* `<boolean>`: The promise returns a boolean value (true or false).\n\nThe main purpose of this section is to inform developers that when they call a particular function or API endpoint, they can expect it to return a promise with a boolean outcome. This allows them to write code that handles the result of this function accordingly.\n\nFor example, if you're using this API endpoint in your application and you want to show a success message only when the operation is successful (i.e., when the boolean value is true), you would use something like:\n\n```javascript\nfunction handleResult(result) {\n  if (result) {\n    // Show success message\n  } else {\n    // Handle failure\n  }\n}\n```\n\nIn this example, `handleResult` takes a `PromiEvent<boolean>` as an argument and checks the boolean value returned by it.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/react-native#chunk-57", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\n// Bare React Native\n\n01\n\n// Bare React Native\n\n02\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'@magic-sdk/react-native-bare'\n\n;\n\n02\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'@magic-sdk/react-native-bare'\n\n;\n\n03\n\n// Expo React Native\n\n03\n\n// Expo React Native\n\n04\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'@magic-sdk/react-native-expo'\n\n;\n\n04\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'@magic-sdk/react-native-expo'\n\n;\n\n05\n\n05\n\n06\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n06\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n07\n\n07\n\n08\n\ntry\n\n{\n\n08\n\ntry\n\n{\n\n09\n\nconst\n\nisLoggedIn\n\n=\n\nawait\n\nmagic\n\n.\n\nuser\n\n.\n\nisLoggedIn\n\n(\n\n)\n\n;\n\n09\n\nconst\n\nisLoggedIn\n\n=\n\nawait\n\nmagic\n\n.\n\nuser\n\n.\n\nisLoggedIn\n\n(\n\n)\n\n;\n\n10\n\nconsole\n\n.\n\nlog\n\n(\n\nisLoggedIn\n\n)\n\n;\n\n// => `true` or `false`\n\n10\n\nconsole\n\n.\n\nlog\n\n(\n\nisLoggedIn\n\n)\n\n;\n\n// => `true` or `false`\n\n11\n\n}\n\ncatch\n\n{\n\n11\n\n}\n\ncatch\n\n{\n\n12\n\n// Handle errors if required!\n\n12\n\n// Handle errors if required!\n\n13\n\n}\n\n13\n\n}", "explanation": "**Example Usage of Magic SDK in React Native**\n\nThis documentation section demonstrates how to use the Magic SDK in a React Native application. The example shows how to create a Magic instance, check user login status, and handle potential errors.\n\n**Key Components:**\n\n1. **Importing Magic SDK**: The code imports the Magic SDK from `@magic-sdk/react-native-bare` (for bare React Native) or `@magic-sdk/react-native-expo` (for Expo React Native).\n2. **Creating a Magic instance**: A new Magic instance is created with a publishable API key, which is used to authenticate users.\n3. **Checking user login status**: The `isLoggedIn` method of the Magic instance is called to check if the user is logged in. This returns a boolean value indicating whether the user is logged in or not.\n4. **Handling errors**: The code catches any errors that may occur during the execution of the `isLoggedIn` method and provides an opportunity to handle them.\n\n**Main Purpose:**\n\nThe main purpose of this example is to demonstrate how to integrate the Magic SDK into a React Native application, specifically how to check user login status and handle potential errors. This can be used as a starting point for building authentication features in a React Native app.\n\n**Context:**\n\nThis code is part of the Magic SDK documentation for React Native, which provides a comprehensive guide to using the Magic SDK in mobile applications.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/react-native#chunk-58", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nlogout\n\nLogs out the currently authenticated Magic user\n\n#\n\n\u2022 None", "explanation": "**Logout API Endpoint Explanation**\n\nThe `logout` endpoint is a client-side SDK function provided by Magic Labs, specifically for React Native applications. Its primary purpose is to log out the currently authenticated Magic user from the application.\n\n**No Arguments Required**\n\nNotably, the `logout` endpoint does not require any arguments to be passed, making it a straightforward and simple way to invalidate the user's authentication session. This functionality is essential for maintaining user security and facilitating a seamless logout experience within the application.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/react-native#chunk-59", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 PromiEvent<boolean>\n\nPromiEvent<boolean>", "explanation": "Let's break down the documentation section.\n\n**# Returns**\n\nThis section indicates that the documentation is describing the return values of a function or method. In this case, it specifies what data type to expect as output.\n\n**Main Purpose:**\n\nThe main purpose of this section is to inform developers about the expected output format when using the Magic Labs embedded wallet functionality in their React Native application.\n\nIn other words, it's telling you that when you call a certain function, it will return a value of type `PromiEvent<boolean>`. This means you should be prepared to handle and use data of this type as part of your code.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/react-native#chunk-60", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\n// Bare React Native\n\n01\n\n// Bare React Native\n\n02\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'@magic-sdk/react-native-bare'\n\n;\n\n02\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'@magic-sdk/react-native-bare'\n\n;\n\n03\n\n// Expo React Native\n\n03\n\n// Expo React Native\n\n04\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'@magic-sdk/react-native-expo'\n\n;\n\n04\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'@magic-sdk/react-native-expo'\n\n;\n\n05\n\n05\n\n06\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n06\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n07\n\n07\n\n08\n\ntry\n\n{\n\n08\n\ntry\n\n{\n\n09\n\nawait\n\nm\n\n.\n\nuser\n\n.\n\nlogout\n\n(\n\n)\n\n;\n\n09\n\nawait\n\nm\n\n.\n\nuser\n\n.\n\nlogout\n\n(\n\n)\n\n;\n\n10\n\nconsole\n\n.\n\nlog\n\n(\n\nawait\n\nmagic\n\n.\n\nuser\n\n.\n\nisLoggedIn\n\n(\n\n)\n\n)\n\n;\n\n// => `false`\n\n10\n\nconsole\n\n.\n\nlog\n\n(\n\nawait\n\nmagic\n\n.\n\nuser\n\n.\n\nisLoggedIn\n\n(\n\n)\n\n)\n\n;\n\n// => `false`\n\n11\n\n}\n\ncatch\n\n{\n\n11\n\n}\n\ncatch\n\n{\n\n12\n\n// Handle errors if required!\n\n12\n\n// Handle errors if required!\n\n13\n\n}\n\n13\n\n}", "explanation": "This documentation section is an example code snippet in JavaScript, specifically for React Native applications. It demonstrates how to use the Magic SDK (Software Development Kit) to implement user authentication and logout functionality.\n\nHere's a breakdown of the main purpose and key points:\n\n**Main Purpose:** This code snippet showcases how to authenticate a user using the Magic SDK and then log them out.\n\n**Key Points:**\n\n1. **Importing the Magic SDK**: The code imports the `Magic` class from the `@magic-sdk/react-native-bare` or `@magic-sdk/react-native-expo` package, depending on whether it's a bare React Native app or an Expo app.\n2. **Creating a Magic instance**: A new instance of the `Magic` class is created with a publishable API key, which is stored in the variable `magic`.\n3. **User authentication**: The code attempts to log out the current user using the `logout()` method and then checks if the user is logged in using the `isLoggedIn()` method.\n4. **Error handling**: If any errors occur during this process, they are caught and handled (or not handled, as indicated by the comment).\n\n**Context:** This code snippet is likely used in a React Native app to implement authentication functionality using the Magic SDK. The example demonstrates how to use the `logout()` method and then check if the user is logged in using the `isLoggedIn()` method.\n\nOverall, this documentation section provides a concise example of how to implement user authentication and logout functionality using the Magic SDK in a React Native application.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/react-native#chunk-61", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nshowSettings\n\nDisplays an iframe with the current user\u2019s settings. Allows for users to update their email address, enable multi-factor authentication, and add a recovery factor.\n\nOnly available with Dedicated Wallet. Access to MFA and account recovery require paid add-ons.\n\nMFA\n\naccount recovery\n\n#\n\n\u2022 page? (String): Optional argument to deeplink to a specific page ('mfa' | 'update-email' | 'recovery')\n\npage?\n\n'mfa' | 'update-email' | 'recovery'", "explanation": "**Section Overview**\n\nThe `#showSettings` section is part of the Magic Labs embedded wallet documentation, which allows users to display an iframe with their current settings.\n\n**Main Purpose**\n\nThe main purpose of this feature is to provide users with a way to update their email address, enable multi-factor authentication (MFA), and add a recovery factor. This functionality is only available with the Dedicated Wallet version and requires paid add-ons for access to MFA and account recovery features.\n\n**Key Functionality**\n\n* Displays an iframe with the user's settings\n* Allows users to update their email address\n* Enables users to enable multi-factor authentication (MFA)\n* Adds a recovery factor for account security\n\n**Optional Argument: `page`**\n\nThe `#showSettings` function takes an optional argument called `page`. This allows you to deeplink to a specific page within the settings iframe. The possible values for `page` are:\n\n* `'mfa'`: links to the MFA settings page\n* `'update-email'`: links to the email address update page\n* `'recovery'`: links to the account recovery page\n\nBy using this optional argument, you can programmatically navigate to a specific section of the settings iframe, providing a more tailored user experience.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/react-native#chunk-62", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 Promise which resolves when the user closes the window\n\nPromise", "explanation": "**Understanding '#Returns' in Magic Labs Embedded Wallet Documentation**\n\nThe section '#Returns' from the Magic Labs API documentation URL (https://magic.link/docs/api/client-side-sdks/react-native) is about describing the expected outcome of a specific function or method call.\n\n**Main Purpose:**\nThe main purpose of this section is to inform developers what they can expect to receive as a result of calling the function or method. In this specific case, the '#Returns' section explains that the function returns a **Promise**, which is a programming concept that represents a value that may not be available yet, but will be resolved at some point in the future.\n\n**Promise Resolution:**\nThe promise in this context resolves when the **user closes the window**. This means that the promise will be fulfilled (i.e., resolved) when the user takes a specific action (closes the window), and the code can then proceed with the next steps based on the outcome.\n\nBy understanding the '#Returns' section, developers can effectively handle the outcome of the function call and write robust code that takes into account the expected behavior and timing of the promise resolution.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/react-native#chunk-63", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\n// Bare React Native\n\n01\n\n// Bare React Native\n\n02\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'@magic-sdk/react-native-bare'\n\n;\n\n02\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'@magic-sdk/react-native-bare'\n\n;\n\n03\n\n// Expo React Native\n\n03\n\n// Expo React Native\n\n04\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'@magic-sdk/react-native-expo'\n\n;\n\n04\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'@magic-sdk/react-native-expo'\n\n;\n\n05\n\n05\n\n06\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n06\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n07\n\n07\n\n08\n\ntry\n\n{\n\n08\n\ntry\n\n{\n\n09\n\nawait\n\nmagic\n\n.\n\nuser\n\n.\n\nshowSettings\n\n(\n\n)\n\n;\n\n09\n\nawait\n\nmagic\n\n.\n\nuser\n\n.\n\nshowSettings\n\n(\n\n)\n\n;\n\n10\n\n}\n\ncatch\n\n{\n\n10\n\n}\n\ncatch\n\n{\n\n11\n\n// Handle errors if required!\n\n11\n\n// Handle errors if required!\n\n12\n\n}\n\n12\n\n}\n\n13\n\n13\n\n14\n\n// Deeplink to MFA view\n\n14\n\n// Deeplink to MFA view\n\n15\n\ntry\n\n{\n\n15\n\ntry\n\n{\n\n16\n\nawait\n\nmagic\n\n.\n\nuser\n\n.\n\nshowSettings\n\n(\n\n{\n\npage\n\n:\n\n'mfa'\n\n}\n\n)\n\n;\n\n16\n\nawait\n\nmagic\n\n.\n\nuser\n\n.\n\nshowSettings\n\n(\n\n{\n\npage\n\n:\n\n'mfa'\n\n}\n\n)\n\n;\n\n17\n\n}\n\ncatch\n\n{\n\n17\n\n}\n\ncatch\n\n{\n\n18\n\n// Handle errors if required!\n\n18\n\n// Handle errors if required!\n\n19\n\n}\n\n19\n\n}", "explanation": "This documentation section is titled `#Example` and it provides an example code snippet for using the Magic Labs embedded wallet in a React Native application.\n\nThe main purpose of this example is to demonstrate how to:\n\n1. Import the Magic SDK in different ways (bare React Native and Expo React Native)\n2. Create a new instance of the Magic SDK with a publishable API key\n3. Use the `showSettings` method to display the user's settings page, including an option to deeplink to the MFA view\n\nThe example code is divided into three sections:\n\n1. Bare React Native (sections 01-06)\n2. Expo React Native (sections 03-04)\n3. Example usage (sections 05-19)\n\nThe example uses `try`-`catch` blocks to handle errors, and there are comments indicating where error handling should be implemented.\n\nIn summary, this documentation section provides a practical example of how to use the Magic Labs embedded wallet in a React Native application, making it easier for developers to understand and integrate the SDK into their projects.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/react-native#chunk-64", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nrevealPrivateKey\n\nDisplays an iframe revealing the current user\u2019s private key. Allows for users to take their private key to another wallet. Neither Magic nor the developer can see this key; only the end user can.\n\nOnly available with Dedicated Wallet.\n\n#\n\n\u2022 None", "explanation": "**Reveal Private Key Functionality**\n\nThe `revealPrivateKey` function, as described in the Magic Labs documentation, is a feature that allows users to access and view their private key within the embedded wallet. This private key is essential for managing and securing user accounts, but it should be kept confidential.\n\n**Purpose:**\n\nThe primary purpose of this functionality is to provide users with an option to take control of their private key, allowing them to transfer ownership or management of their account to another wallet. This is typically necessary when a user wants to switch from the Magic Labs dedicated wallet to a different wallet service provider.\n\n**Key Aspects:**\n\n*   The `revealPrivateKey` function operates within an iframe, ensuring that the private key remains hidden from both Magic and the developer.\n*   This feature is only available for users who have access to the Dedicated Wallet.\n\nBy providing this functionality, Magic Labs ensures user flexibility and security when it comes to managing their accounts.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/react-native#chunk-65", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 Promise which resolves when the user closes the window\n\nPromise", "explanation": "**Section #Returns**\n\nThis documentation section explains that the `#Returns` method in Magic Labs' embedded wallet SDK for React Native returns a **Promise**.\n\n**What is a Promise?**\n\nIn programming, a Promise is an object that represents a value that may not be available yet (i.e., still pending). It's used to handle asynchronous operations, like making API calls or waiting for user interactions.\n\n**Main Purpose:**\n\nThe main purpose of the `#Returns` method returning a Promise is to allow your code to **wait for and react to** when the user closes the wallet window. This means you can write code that runs only after the user has interacted with the wallet (e.g., completed a payment or signed in).\n\nIn essence, this method enables your app to **listen** for the completion event of the Magic Labs embedded wallet, allowing your code to proceed accordingly.\n\nExample:\n```javascript\nconst onClose = async () => {\n  const closePromise = magicWallet.onClose();\n  await closePromise;\n  // Code to run after user closes wallet window goes here...\n};\n```\nBy returning a Promise, the `#Returns` method provides a way for your app to manage and respond to the asynchronous closing of the Magic Labs embedded wallet.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/react-native#chunk-66", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\n// Bare React Native\n\n01\n\n// Bare React Native\n\n02\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'@magic-sdk/react-native-bare'\n\n;\n\n02\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'@magic-sdk/react-native-bare'\n\n;\n\n03\n\n// Expo React Native\n\n03\n\n// Expo React Native\n\n04\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'@magic-sdk/react-native-expo'\n\n;\n\n04\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'@magic-sdk/react-native-expo'\n\n;\n\n05\n\n05\n\n06\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n06\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n07\n\n07\n\n08\n\ntry\n\n{\n\n08\n\ntry\n\n{\n\n09\n\nawait\n\nmagic\n\n.\n\nuser\n\n.\n\nrevealPrivateKey\n\n(\n\n)\n\n;\n\n09\n\nawait\n\nmagic\n\n.\n\nuser\n\n.\n\nrevealPrivateKey\n\n(\n\n)\n\n;\n\n10\n\n}\n\ncatch\n\n{\n\n10\n\n}\n\ncatch\n\n{\n\n11\n\n// Handle errors if required!\n\n11\n\n// Handle errors if required!\n\n12\n\n}\n\n12\n\n}", "explanation": "This documentation section is an example code snippet for using the Magic Labs embedded wallet in a React Native application. Here's what it's about and its main purpose:\n\n**Context:** The code is used to demonstrate how to integrate the Magic Labs embedded wallet into a React Native app, which can be built with either the bare React Native framework or the Expo React Native framework.\n\n**Purpose:** The main purpose of this example is to show developers how to initialize the Magic Labs wallet and use its `revealPrivateKey` method to reveal a user's private key. This private key can then be used for various cryptographic operations, such as signing transactions or generating signatures.\n\n**Key components:**\n\n1. Importing the `Magic` library from either `@magic-sdk/react-native-bare` (for bare React Native) or `@magic-sdk/react-native-expo` (for Expo React Native).\n2. Creating a new instance of the `Magic` class, passing in a publishable API key as an argument.\n3. Using the `revealPrivateKey` method to reveal a user's private key.\n\n**Note:** The code is wrapped in a try-catch block to handle any errors that may occur during execution. If required, developers should add error handling code to their application.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/react-native#chunk-67", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nrequestInfoWithUI\n\nUniversal wallets will soon be merged with Dedicated Wallets into a single product line. Universal apps created before February 7, 2024 will work as expected with no change. See our blog post to learn more.\n\nblog post\n\nDisplays the wallet widget within an iframe that prompts the user to consent to sharing information with the requesting dApp with OpenID profile scopes. Currently, the only profile scope that can be requested is a verified email. Collecting a verified email address from third-party wallet users (MetaMask, Coinbase Wallet, etc.) is a premium feature but included in the free trial period (see pricing). User must be signed in for this method to return or else it will throw an error.\n\nwallet widget\n\npricing\n\nOnly available with Universal Wallet.\n\n#\n\n\u2022 scope? (Object): The object containing requested OpenID profile scopes.email?: String : If the user should be prompted to provide them email as a required or optional field\n\nscope?\n\n\u2022 email?: String : If the user should be prompted to provide them email as a required or optional field\n\nemail?: String\n\nrequired\n\noptional", "explanation": "**requestInfoWithUI Documentation**\n\nThe `requestInfoWithUI` function is used in Magic Labs embedded wallet documentation to prompt users for consent and information sharing within an iframe. Its main purpose is to:\n\n* Display the wallet widget, which asks the user to share their verified email address with the requesting dApp (decentralized application).\n* Collect a verified email address from third-party wallet users, such as MetaMask or Coinbase Wallet.\n\n**Key Points:**\n\n* The `requestInfoWithUI` function returns information only if the user is signed in.\n* It requires OpenID profile scopes, currently limited to verified email addresses.\n* This feature is available with Universal Wallets and included in the free trial period.\n\n**Usage:**\n```javascript\nimport { requestInfoWithUI } from 'magic-sdk';\n\nconst scope = {\n  email: 'optional', // or 'required'\n};\n\nrequestInfoWithUI({ scope });\n```\nNote that this function is subject to change as mentioned in the documentation, with Universal wallets soon being merged with Dedicated Wallets.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/react-native#chunk-68", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 A promise which returns an Object: Contains result of the requested scopesemail?: String: The email of the user if they consented to providing it in the UI\n\npromise\n\nObject\n\n\u2022 email?: String: The email of the user if they consented to providing it in the UI\n\nemail?: String", "explanation": "**Explanation of \"#Returns\" Documentation Section**\n\nThe \"#Returns\" section is part of the Magic Labs embedded wallet API documentation, specifically for the React Native SDK. \n\nThis section describes the expected outcome or response when a particular API function is called. In this case, the API function returns a promise, which resolves with an object.\n\n**Main Purpose and Content**\n\nThe main purpose of this section is to inform developers about the structure and content of the API response. It indicates that the returned object may contain an optional property called `email`, which is a string.\n\nThe presence of the `email` property in the response object depends on user consent. If the user agrees to share their email address during the authentication process, the `email` property will be included in the response object. Otherwise, it will be absent.\n\nBy providing this information, the \"#Returns\" section helps developers understand what to expect from the API response and how to handle the returned data in their application.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/react-native#chunk-69", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\n// Bare React Native\n\n01\n\n// Bare React Native\n\n02\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'@magic-sdk/react-native-bare'\n\n;\n\n02\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'@magic-sdk/react-native-bare'\n\n;\n\n03\n\n// Expo React Native\n\n03\n\n// Expo React Native\n\n04\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'@magic-sdk/react-native-expo'\n\n;\n\n04\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'@magic-sdk/react-native-expo'\n\n;\n\n05\n\n05\n\n06\n\n// after user has already logged in\n\n06\n\n// after user has already logged in\n\n07\n\nconst\n\nuserInfo\n\n=\n\nawait\n\nmagic\n\n.\n\nuser\n\n.\n\nrequestInfoWithUI\n\n(\n\n{\n\nscope\n\n:\n\n{\n\nemail\n\n:\n\n\"required\"\n\n}\n\n}\n\n)\n\n07\n\nconst\n\nuserInfo\n\n=\n\nawait\n\nmagic\n\n.\n\nuser\n\n.\n\nrequestInfoWithUI\n\n(\n\n{\n\nscope\n\n:\n\n{\n\nemail\n\n:\n\n\"required\"\n\n}\n\n}\n\n)\n\n08\n\n\u2060\n\nconsole\n\n.\n\nlog\n\n(\n\nuserInfo\n\n.\n\nemail\n\n)\n\n;\n\n// the user's email if they consented.\n\n08\n\n\u2060\n\nconsole\n\n.\n\nlog\n\n(\n\nuserInfo\n\n.\n\nemail\n\n)\n\n;\n\n// the user's email if they consented.", "explanation": "This documentation section is titled \"#Example\" and it appears to be a code example demonstrating how to use the Magic Labs embedded wallet in a React Native application.\n\nHere's a breakdown of what this code snippet does:\n\n1. It imports the `Magic` module from two different packages: `@magic-sdk/react-native-bare` and `@magic-sdk/react-native-expo`. These packages are likely for bare React Native and Expo React Native respectively.\n2. The code then uses the `requestInfoWithUI` method to retrieve user information, specifically their email address, after they have already logged in.\n3. The `scope` parameter is set to an object with a single property `{ email: \"required\" }`, which means that the user's email address will be requested and required for consent.\n4. The `await` keyword is used to wait for the user information to be retrieved before logging it to the console using `console.log`.\n5. The code logs the user's email address if they have consented.\n\nIn summary, this example demonstrates how to use the Magic Labs embedded wallet in a React Native application to request and retrieve user information, specifically their email address, after they have already logged in.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/react-native#chunk-70", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nonUserLoggedOut\n\nWhen the useStorageCache is enabled, there might be situations where the isLoggedIn function returns true despite the user being logged out. In such instances, an event will be emitted after a few milliseconds, providing an opportunity to manage the user's logged-out state, such as when a session expires.\n\nOnly necessary with when the useStorageCache option is set to true.\n\nuseStorageCache\n\ntrue\n\n#\n\n\u2022 callback ((isLoggedOut: boolean) => void): The callback function when the event is emitted\n\ncallback\n\n(isLoggedOut: boolean) => void", "explanation": "This documentation section, `#onUserLoggedOut - #Arguments`, explains a feature in the Magic Labs embedded wallet SDK for React Native.\n\n**What it's about:** When the user logs out of their account, there might be a brief delay (a few milliseconds) before the Magic Labs SDK updates its internal state to reflect the logout. This event is called `onUserLoggedOut`.\n\n**Main purpose:** The main purpose of this feature is to provide an opportunity for your application to manage the user's logged-out state when using the `useStorageCache` option, which enables caching of user data locally on the device.\n\nIn simpler terms, if you're using caching in Magic Labs, this event helps ensure that your app knows when a user has actually logged out, even if there's a brief delay before the SDK updates its internal state. This can help prevent confusion or inconsistencies in your app's behavior after a logout.\n\nThe `onUserLoggedOut` event emits a callback function with a boolean argument (`isLoggedOut: boolean`) that indicates whether the user is indeed logged out. Your application can use this information to update its own state and behave accordingly.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/react-native#chunk-71", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 A function that can be called to unsubscribe from the event\n\nfunction", "explanation": "This documentation section explains a concept related to the Magic Labs React Native SDK.\n\nThe **#Returns** section typically outlines what a function or method returns, i.e., its output. However, in this context, it seems like there's been a misunderstanding since the content is more of an explanation than a return value. \n\nA more accurate interpretation would be that this is describing a function that can be used to unsubscribe from an event. The main purpose of this function would be to stop listening for events or notifications, effectively removing the subscription. This is useful when you no longer need to respond to events or when you're done with a specific process. \n\nIn programming, unsubscribing from events is essential to prevent memory leaks and optimize performance by releasing resources when they are no longer needed.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/react-native#chunk-72", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n\"magic-sdk\"\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n\"magic-sdk\"\n\n02\n\n02\n\n03\n\n\u2060\n\n// Create Magic instance with useStorageCache set to true\n\n03\n\n\u2060\n\n// Create Magic instance with useStorageCache set to true\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n,\n\n{\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n,\n\n{\n\n05\n\nuseStorageCache\n\n:\n\nfalse\n\n05\n\nuseStorageCache\n\n:\n\nfalse\n\n06\n\n}\n\n)\n\n;\n\n06\n\n}\n\n)\n\n;\n\n07\n\n07\n\n08\n\nmagic\n\n.\n\nuser\n\n.\n\nonUserLoggedOut\n\n(\n\n(\n\nisLoggedOut\n\n:\n\nboolean\n\n)\n\n=>\n\n{\n\n08\n\nmagic\n\n.\n\nuser\n\n.\n\nonUserLoggedOut\n\n(\n\n(\n\nisLoggedOut\n\n:\n\nboolean\n\n)\n\n=>\n\n{\n\n09\n\n// Do something when user is logged out\n\n09\n\n// Do something when user is logged out\n\n10\n\nnavigation\n\n.\n\nnavigate\n\n(\n\n'LoginScreen'\n\n)\n\n10\n\nnavigation\n\n.\n\nnavigate\n\n(\n\n'LoginScreen'\n\n)\n\n11\n\n}\n\n)\n\n11\n\n}\n\n)", "explanation": "This documentation section is an example of how to use the Magic Labs embedded wallet in a React Native app.\n\n**What it does:**\n\n1. It imports the `Magic` library from the \"magic-sdk\" package.\n2. It creates a new instance of the `Magic` class, passing in a publishable API key and an options object with a `useStorageCache` property set to `false`.\n3. It defines an event handler for when the user logs out (`onUserLoggedOut`).\n4. When the user logs out, it navigates to a login screen using the `navigation.navigate` method.\n\n**Main purpose:**\n\nThis example demonstrates how to integrate Magic Labs embedded wallet into a React Native app, specifically handling user logout events and redirecting to a login screen when necessary.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/react-native#chunk-73", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nThe OAuth Module and it's members are accessible on the Magic SDK instance by the oauth property.\n\noauth\n\nTo use the OAuth Module in your application, install @magic-ext/oauth along with magic-sdk.\n\n@magic-ext/oauth\n\nmagic-sdk\n\nCopy\n\n01\n\n// Bare React Native\n\n01\n\n// Bare React Native\n\n02\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'@magic-sdk/react-native-bare'\n\n;\n\n02\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'@magic-sdk/react-native-bare'\n\n;\n\n03\n\nimport\n\n{\n\nOAuthExtension\n\n}\n\nfrom\n\n\"@magic-ext/react-native-bare-oauth\"\n\n;\n\n03\n\nimport\n\n{\n\nOAuthExtension\n\n}\n\nfrom\n\n\"@magic-ext/react-native-bare-oauth\"\n\n;\n\n04\n\n// Expo React Native\n\n04\n\n// Expo React Native\n\n05\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'@magic-sdk/react-native-expo'\n\n;\n\n05\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'@magic-sdk/react-native-expo'\n\n;\n\n06\n\nimport\n\n{\n\nOAuthExtension\n\n}\n\nfrom\n\n\"@magic-ext/react-native-expo-oauth\"\n\n;\n\n06\n\nimport\n\n{\n\nOAuthExtension\n\n}\n\nfrom\n\n\"@magic-ext/react-native-expo-oauth\"\n\n;\n\n07\n\n07\n\n08\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n,\n\n{\n\n08\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n,\n\n{\n\n09\n\nextensions\n\n:\n\n[\n\nnew\n\nOAuthExtension\n\n(\n\n)\n\n]\n\n,\n\n09\n\nextensions\n\n:\n\n[\n\nnew\n\nOAuthExtension\n\n(\n\n)\n\n]\n\n,\n\n10\n\n}\n\n)\n\n;\n\n10\n\n}\n\n)\n\n;\n\n11\n\n11\n\n12\n\nmagic\n\n.\n\noauth\n\n;\n\n12\n\nmagic\n\n.\n\noauth\n\n;\n\n13\n\nmagic\n\n.\n\noauth\n\n.\n\nloginWithPopup\n\n;\n\n13\n\nmagic\n\n.\n\noauth\n\n.\n\nloginWithPopup\n\n;\n\n#\n\nloginWithPopup\n\nStarts the OAuth 2.0 login flow.\n\nOnly available with Dedicated Wallet.\n\n#\n\n\u2022 provider (String): The OAuth provider being used for login\n\n\u2022 redirectURI (String): A URL a user is sent to after they successfully log in\n\n\u2022 scope? (Array): Defines the specific permissions an application requests from a user\n\nprovider\n\nredirectURI\n\nscope?", "explanation": "Let's break down this documentation section:\n\n**What is it about?**\n\nThis section is about the OAuth Module, which is a part of the Magic Labs embedded wallet SDK. The OAuth Module allows users to log in with their preferred authentication provider (e.g., Google, Facebook, etc.).\n\n**Main purpose:**\n\nThe main purpose of this section is to explain how to use the `loginWithPopup` method of the OAuth Module to start the login flow with a popup window. This method is only available with the Dedicated Wallet.\n\n**Key points:**\n\n* To use the OAuth Module, you need to install the `@magic-ext/oauth` package along with the Magic SDK.\n* You can access the OAuth Module on the Magic SDK instance using the `oauth` property.\n* The `loginWithPopup` method takes three arguments:\n\t+ `provider`: The authentication provider being used (e.g., \"google\", \"facebook\", etc.).\n\t+ `redirectURI`: A URL that the user will be sent to after successfully logging in.\n\t+ `scope?`: An optional array of specific permissions that your application requests from the user.\n\n**Example code:**\n\nThe example code shows how to create a Magic SDK instance with an OAuth Extension and then access the `loginWithPopup` method on the `oauth` property.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/react-native#chunk-74", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 None", "explanation": "The '#Returns' section in the Magic Labs embedded wallet documentation is about the output or result of a function, method, or operation. \n\nIn this specific case, the section indicates that there is 'None' as a return value, which implies that the function or method does not return any value or output. \n\nThe main purpose of this section is to inform developers what to expect as a result when using a particular function or method, helping them to handle and process the outcome correctly in their code. However, in this instance, since the return value is 'None', developers can expect no explicit output or value from the function or method.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/react-native#chunk-75", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nGoogle\n\n'google'\n\n'google'\n\nFacebook\n\n'facebook'\n\n'facebook'\n\nTwitter\n\n'twitter'\n\n'twitter'\n\nApple\n\n'apple'\n\n'apple'\n\nDiscord\n\n'discord'\n\n'discord'\n\nGitHub\n\n'github'\n\n'github'\n\nLinkedIn\n\n'linkedin'\n\n'linkedin'\n\nBitbucket\n\n'bitbucket'\n\n'bitbucket'\n\nGitLab\n\n'gitlab'\n\n'gitlab'\n\nTwitch\n\n'twitch'\n\n'twitch'\n\nMicrosoft\n\n'microsoft'\n\n'microsoft'", "explanation": "**Valid Providers Section:**\n\nThe \"# Valid Providers\" section is a list of supported identity providers that can be used for authentication in the Magic Labs embedded wallet.\n\n**Main Purpose:**\n\nThis section serves as a reference for developers to know which identity providers (e.g., Google, Facebook, Twitter) are supported by the Magic Labs embedded wallet. This allows them to choose from these pre-integrated providers when implementing authentication flows in their applications.\n\nIn other words, this list informs developers about the valid options they have for user authentication using the Magic Labs wallet, making it easier to integrate and manage authentication in their apps.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/react-native#chunk-76", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\n// Bare React Native\n\n01\n\n// Bare React Native\n\n02\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'@magic-sdk/react-native-bare'\n\n;\n\n02\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'@magic-sdk/react-native-bare'\n\n;\n\n03\n\nimport\n\n{\n\nOAuthExtension\n\n}\n\nfrom\n\n\"@magic-ext/react-native-bare-oauth\"\n\n;\n\n03\n\nimport\n\n{\n\nOAuthExtension\n\n}\n\nfrom\n\n\"@magic-ext/react-native-bare-oauth\"\n\n;\n\n04\n\n// Expo React Native\n\n04\n\n// Expo React Native\n\n05\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'@magic-sdk/react-native-expo'\n\n;\n\n05\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'@magic-sdk/react-native-expo'\n\n;\n\n06\n\nimport\n\n{\n\nOAuthExtension\n\n}\n\nfrom\n\n\"@magic-ext/react-native-expo-oauth\"\n\n;\n\n06\n\nimport\n\n{\n\nOAuthExtension\n\n}\n\nfrom\n\n\"@magic-ext/react-native-expo-oauth\"\n\n;\n\n07\n\n07\n\n08\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n,\n\n{\n\n08\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n,\n\n{\n\n09\n\nextensions\n\n:\n\n[\n\nnew\n\nOAuthExtension\n\n(\n\n)\n\n]\n\n,\n\n09\n\nextensions\n\n:\n\n[\n\nnew\n\nOAuthExtension\n\n(\n\n)\n\n]\n\n,\n\n10\n\n}\n\n)\n\n;\n\n10\n\n}\n\n)\n\n;\n\n11\n\n11\n\n12\n\nawait\n\nmagic\n\n.\n\noauth\n\n.\n\nloginWithPopup\n\n(\n\n{\n\n12\n\nawait\n\nmagic\n\n.\n\noauth\n\n.\n\nloginWithPopup\n\n(\n\n{\n\n13\n\nprovider\n\n:\n\n'...'\n\n/* 'google', 'facebook', 'apple', etc. */\n\n,\n\n13\n\nprovider\n\n:\n\n'...'\n\n/* 'google', 'facebook', 'apple', etc. */\n\n,\n\n14\n\nredirectURI\n\n:\n\n'https://your-app.com/your/oauth/callback'\n\n,\n\n14\n\nredirectURI\n\n:\n\n'https://your-app.com/your/oauth/callback'\n\n,\n\n15\n\nscope\n\n:\n\n[\n\n'user:email'\n\n]\n\n/* optional */\n\n,\n\n15\n\nscope\n\n:\n\n[\n\n'user:email'\n\n]\n\n/* optional */\n\n,\n\n16\n\n}\n\n)\n\n;\n\n16\n\n}\n\n)\n\n;", "explanation": "This documentation section is titled `#Example` and it provides an example code snippet for using the Magic Labs embedded wallet in a React Native application.\n\nHere's what it's about and its main purpose:\n\n**Purpose:** This example demonstrates how to integrate the Magic Labs embedded wallet into a React Native app, allowing users to log in with OAuth providers (e.g., Google, Facebook, Apple) and interact with the wallet.\n\n**Key components:**\n\n1. **Importing Magic SDKs**: The code imports the `Magic` and `OAuthExtension` libraries from specific packages (`@magic-sdk/react-native-bare`, `@magic-ext/react-native-bare-oauth`, etc.). These libraries are used to create a Magic instance and enable OAuth login.\n2. **Creating a Magic instance**: A new `Magic` instance is created with the publishable API key, and an optional extensions array (in this case, using the `OAuthExtension`).\n3. **Login with OAuth popup**: The code uses the `loginWithPopup` method of the `oauth` object to initiate an OAuth login flow with a specified provider (e.g., Google), redirect URI, and scope (optional).\n\n**Main purpose:** This example serves as a reference for developers who want to integrate the Magic Labs embedded wallet into their React Native apps. It provides a basic implementation of the wallet and OAuth login functionality, which can be adapted and customized to fit specific use cases.\n\nIn summary, this documentation section is an example code snippet that demonstrates how to integrate the Magic Labs embedded wallet into a React Native app, using OAuth providers for user authentication.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/react-native#chunk-77", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nThis module requires an enterprise agreement. For more details click here.\n\nclick here\n\nThe OpenID Module and it's members are accessible on the Magic SDK instance by the openid property.\n\nopenid\n\nTo use the OpenID Module in your application, install @magic-ext/oidc along with magic-sdk.\n\n@magic-ext/oidc\n\nmagic-sdk\n\nCopy\n\n01\n\n// Bare React Native\n\n01\n\n// Bare React Native\n\n02\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'@magic-sdk/react-native-bare'\n\n;\n\n02\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'@magic-sdk/react-native-bare'\n\n;\n\n03\n\n// Expo React Native\n\n03\n\n// Expo React Native\n\n04\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'@magic-sdk/react-native-expo'\n\n;\n\n04\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'@magic-sdk/react-native-expo'\n\n;\n\n05\n\n05\n\n06\n\nimport\n\n{\n\nOpenIdExtension\n\n}\n\nfrom\n\n'@magic-ext/oidc'\n\n;\n\n06\n\nimport\n\n{\n\nOpenIdExtension\n\n}\n\nfrom\n\n'@magic-ext/oidc'\n\n;\n\n07\n\n07\n\n08\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n,\n\n{\n\n08\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n,\n\n{\n\n09\n\nextensions\n\n:\n\n[\n\nnew\n\nOpenIdExtension\n\n(\n\n)\n\n]\n\n,\n\n09\n\nextensions\n\n:\n\n[\n\nnew\n\nOpenIdExtension\n\n(\n\n)\n\n]\n\n,\n\n10\n\n}\n\n)\n\n;\n\n10\n\n}\n\n)\n\n;\n\n11\n\n11\n\n12\n\nmagic\n\n.\n\nopenid\n\n;\n\n12\n\nmagic\n\n.\n\nopenid\n\n;\n\n13\n\nmagic\n\n.\n\nopenid\n\n.\n\nloginWithOIDC\n\n;\n\n13\n\nmagic\n\n.\n\nopenid\n\n.\n\nloginWithOIDC\n\n;\n\n#\n\nloginWithOIDC\n\nAuthenticate users via your preferred OIDC client.\n\nOnly available with Dedicated Wallet.\n\n#\n\n\u2022 jwt (String): The OIDC token from your identity provider\n\n\u2022 providerId (String): An alphanumeric ID provided by Magic after successful configuration of your identity provider\n\njwt\n\nproviderId", "explanation": "**What is the OpenID Module?**\n\nThe OpenID Module is a feature in the Magic Labs embedded wallet that allows users to authenticate via their preferred OpenID Connect (OIDC) client. This module is accessible on the Magic SDK instance through the `openid` property.\n\n**Main Purpose:**\n\nThe main purpose of the OpenID Module is to enable user authentication using OIDC, allowing developers to integrate a seamless login experience for their users. This feature is only available with the Dedicated Wallet.\n\n**Key Functionality:**\n\nThe `loginWithOIDC` function is the primary method in the OpenID Module that allows users to authenticate via OIDC. It takes two arguments:\n\n* `jwt`: The OIDC token from the user's identity provider\n* `providerId`: An alphanumeric ID provided by Magic after successful configuration of the identity provider\n\n**Example Usage:**\n\nTo use the OpenID Module, you would create a new instance of the Magic SDK and add the OpenID Extension to it. Then, you can access the `openid` property on the Magic instance and call the `loginWithOIDC` method, passing in the OIDC token and provider ID as arguments.\n\n```javascript\nimport { Magic } from '@magic-sdk/react-native-bare';\nimport { OpenIdExtension } from '@magic-ext/oidc';\n\nconst magic = new Magic('PUBLISHABLE_API_KEY', {\n  extensions: [new OpenIdExtension()],\n});\n\nconst openid = magic.openid;\nopenid.loginWithOIDC('jwtToken', 'providerId');\n```", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/react-native#chunk-78", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 PromiEvent<string | null>: The promise resolves upon authentication request success and rejects with a specific error code if the request fails. The resolved value is a Decentralized ID token with a default 15-minute lifespan.\n\nPromiEvent<string | null>", "explanation": "The '#Returns' section of the Magic Labs documentation explains what value is returned when an authentication request is made using their client-side SDK for React Native.\n\nIn simple terms, when you make an authentication request using this SDK, it will either succeed or fail. If it succeeds, the SDK will return a promise with a decentralized ID (DID) token that expires in 15 minutes. If it fails, the promise will be rejected with an error code.\n\nThe main purpose of this section is to inform developers about the expected outcome of an authentication request, allowing them to handle the response accordingly in their application.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/react-native#chunk-79", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\n// Bare React Native\n\n01\n\n// Bare React Native\n\n02\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'@magic-sdk/react-native-bare'\n\n;\n\n02\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'@magic-sdk/react-native-bare'\n\n;\n\n03\n\n// Expo React Native\n\n03\n\n// Expo React Native\n\n04\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'@magic-sdk/react-native-expo'\n\n;\n\n04\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'@magic-sdk/react-native-expo'\n\n;\n\n05\n\n05\n\n06\n\nimport\n\n{\n\nOpenIdExtension\n\n}\n\nfrom\n\n'@magic-ext/oidc'\n\n;\n\n06\n\nimport\n\n{\n\nOpenIdExtension\n\n}\n\nfrom\n\n'@magic-ext/oidc'\n\n;\n\n07\n\n07\n\n08\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n,\n\n{\n\n08\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n,\n\n{\n\n09\n\nextensions\n\n:\n\n[\n\nnew\n\nOpenIdExtension\n\n(\n\n)\n\n]\n\n,\n\n09\n\nextensions\n\n:\n\n[\n\nnew\n\nOpenIdExtension\n\n(\n\n)\n\n]\n\n,\n\n10\n\n}\n\n)\n\n;\n\n10\n\n}\n\n)\n\n;\n\n11\n\n11\n\n12\n\nconst\n\nDID\n\n=\n\nawait\n\nmagic\n\n.\n\nopenid\n\n.\n\nloginWithOIDC\n\n(\n\n{\n\n12\n\nconst\n\nDID\n\n=\n\nawait\n\nmagic\n\n.\n\nopenid\n\n.\n\nloginWithOIDC\n\n(\n\n{\n\n13\n\n// this oidcToken comes from the identity provider\n\n13\n\n// this oidcToken comes from the identity provider\n\n14\n\njwt\n\n:\n\noidcToken\n\n,\n\n14\n\njwt\n\n:\n\noidcToken\n\n,\n\n15\n\n// this providerId is provided by Magic\n\n15\n\n// this providerId is provided by Magic\n\n16\n\nproviderId\n\n:\n\nmyProviderId\n\n,\n\n16\n\nproviderId\n\n:\n\nmyProviderId\n\n,\n\n17\n\n}\n\n)\n\n;\n\n17\n\n}\n\n)\n\n;", "explanation": "This documentation section is titled \"#Example\" and it's an example code snippet in JavaScript using the Magic Labs embedded wallet SDK for React Native. \n\nThe main purpose of this example is to demonstrate how to use the Magic SDK to login a user with OpenID Connect (OIDC) authentication.\n\nHere are the key points:\n\n* The code imports the `Magic` class from the `@magic-sdk/react-native-bare` package, which is a bare React Native implementation.\n* It then creates an instance of the `Magic` class with a publishable API key and an array of extensions. In this case, it's using the `OpenIdExtension` from the `@magic-ext/oidc` package.\n* The code uses the `loginWithOIDC` method to login a user with OIDC authentication. It passes in an object with two properties: `jwt`, which is the OIDC token received from the identity provider, and `providerId`, which is provided by Magic.\n* The `loginWithOIDC` method returns a promise that resolves to a DID (Decentralized Identifier) string.\n\nOverall, this example code snippet shows how to integrate Magic Labs' embedded wallet SDK with OIDC authentication in a React Native app.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/react-native#chunk-80", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nThere are three types of error class to be aware of when working with Magic's client-side JavaScript SDK:\n\n\u2022 SDKError: Raised by the SDK to indicate missing parameters, communicate deprecation notices, or other internal issues. A notable example would be a MISSING_API_KEY error, which informs the required API key parameter was missing from new Magic(...).\n\n\u2022 RPCError: Errors associated with specific method calls to the Magic <iframe> context. These methods are formatted as JSON RPC 2.0 payloads, so they return error codes as integers. This type of error is raised by methods like auth.loginWithEmailOTP.\n\n\u2022 ExtensionError: Errors associated with method calls to Magic SDK Extensions. Extensions are an upcoming/experimental feature of Magic SDK. More information will be available once Extensions are officially released.\n\nSDKError\n\nMISSING_API_KEY\n\nRPCError\n\n<iframe>\n\nJSON RPC 2.0\n\nauth.loginWithEmailOTP\n\nauth.loginWithEmailOTP\n\nExtensionError\n\n#\n\nSDKError\n\nThe SDKError class is exposed for instanceof operations.\n\nSDKError\n\ninstanceof\n\nCopy\n\n01\n\n// Bare React Native\n\n01\n\n// Bare React Native\n\n02\n\nimport\n\n{\n\nSDKError\n\n}\n\nfrom\n\n'@magic-sdk/react-native-bare'\n\n;\n\n02\n\nimport\n\n{\n\nSDKError\n\n}\n\nfrom\n\n'@magic-sdk/react-native-bare'\n\n;\n\n03\n\n// Expo React Native\n\n03\n\n// Expo React Native\n\n04\n\nimport\n\n{\n\nSDKError\n\n}\n\nfrom\n\n'@magic-sdk/react-native-expo'\n\n;\n\n04\n\nimport\n\n{\n\nSDKError\n\n}\n\nfrom\n\n'@magic-sdk/react-native-expo'\n\n;\n\n05\n\n05\n\n06\n\ntry\n\n{\n\n06\n\ntry\n\n{\n\n07\n\n// Something async...\n\n07\n\n// Something async...\n\n08\n\ncatch\n\n(\n\nerr\n\n)\n\n{\n\n08\n\ncatch\n\n(\n\nerr\n\n)\n\n{\n\n09\n\nif\n\n(\n\nerr\n\ninstanceof\n\nSDKError\n\n)\n\n{\n\n09\n\nif\n\n(\n\nerr\n\ninstanceof\n\nSDKError\n\n)\n\n{\n\n10\n\n// Handle...\n\n10\n\n// Handle...\n\n11\n\n}\n\n11\n\n}\n\n12\n\n}\n\n12\n\n}\n\nSDKError instances expose the code field which may be used to deterministically identify the error. Additionally, an enumeration of error codes is exposed for convenience and readability:\n\nSDKError\n\ncode\n\nCopy\n\n01\n\n// Bare React Native\n\n01\n\n// Bare React Native\n\n02\n\nimport\n\n{\n\nSDKErrorCode\n\n}\n\nfrom\n\n'@magic-sdk/react-native-bare'\n\n;\n\n02\n\nimport\n\n{\n\nSDKErrorCode\n\n}\n\nfrom\n\n'@magic-sdk/react-native-bare'\n\n;\n\n03\n\n// Expo React Native\n\n03\n\n// Expo React Native\n\n04\n\nimport\n\n{\n\nSDKErrorCode\n\n}\n\nfrom\n\n'@magic-sdk/react-native-expo'\n\n;\n\n04\n\nimport\n\n{\n\nSDKErrorCode\n\n}\n\nfrom\n\n'@magic-sdk/react-native-expo'\n\n;\n\n05\n\n05\n\n06\n\nSDKErrorCode\n\n.\n\nMissingApiKey\n\n;\n\n06\n\nSDKErrorCode\n\n.\n\nMissingApiKey\n\n;\n\n07\n\nSDKErrorCode\n\n.\n\nModalNotReady\n\n;\n\n07\n\nSDKErrorCode\n\n.\n\nModalNotReady\n\n;\n\n08\n\nSDKErrorCode\n\n.\n\nMalformedResponse\n\n;\n\n08\n\nSDKErrorCode\n\n.\n\nMalformedResponse\n\n;\n\n09\n\n// and so forth...\n\n09\n\n// and so forth...\n\n10\n\n// Please reference the `Enum Key` column of the error table below.\n\n10\n\n// Please reference the `Enum Key` column of the error table below.\n\n#\n\nMissingApiKey\n\nModalNotReady\n\nasync/await\n\nMalformedResponse\n\nInvalidArgument\n\nExtensionNotInitialized\n\nIncompatibleExtensions\n\nIncompatibleExtensions\n\nOne or more extensions you are trying to use are incompatible with the SDK being used.", "explanation": "The documentation section is about error handling in Magic Labs' client-side JavaScript SDK, specifically for React Native applications.\n\n**Main Purpose:**\n\nThe main purpose of this section is to inform developers how to handle errors that may occur when using Magic Labs' SDK in their React Native apps. It provides an overview of the different types of errors that can be encountered and how to identify and handle them.\n\n**Key Points:**\n\n1. **SDKError**: A class exposed by the SDK for instanceof operations, used to indicate missing parameters or internal issues.\n2. **RPCError**: Errors associated with specific method calls to the Magic <iframe> context, formatted as JSON RPC 2.0 payloads.\n3. **ExtensionError**: Errors related to method calls to Magic SDK Extensions (an experimental feature).\n4. **Error Codes**: An enumeration of error codes is exposed for convenience and readability.\n\n**Example Code:**\n\nThe documentation includes an example code snippet that demonstrates how to use the `SDKError` class to handle errors in a React Native app:\n```javascript\ntry {\n  // Something async...\n} catch (err) {\n  if (err instanceof SDKError) {\n    // Handle...\n  }\n}\n```\nOverall, this section provides essential information for developers to understand and handle errors that may occur when using Magic Labs' SDK in their React Native applications.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/react-native#chunk-81", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nRPCError\n\nThe RPCError class is exposed for instanceof operations:\n\nRPCError\n\ninstanceof\n\nCopy\n\n01\n\n// Bare React Native\n\n01\n\n// Bare React Native\n\n02\n\nimport\n\n{\n\nRPCError\n\n}\n\nfrom\n\n'@magic-sdk/react-native-bare'\n\n;\n\n02\n\nimport\n\n{\n\nRPCError\n\n}\n\nfrom\n\n'@magic-sdk/react-native-bare'\n\n;\n\n03\n\n// Expo React Native\n\n03\n\n// Expo React Native\n\n04\n\nimport\n\n{\n\nRPCError\n\n}\n\nfrom\n\n'@magic-sdk/react-native-expo'\n\n;\n\n04\n\nimport\n\n{\n\nRPCError\n\n}\n\nfrom\n\n'@magic-sdk/react-native-expo'\n\n;\n\n05\n\n05\n\n06\n\ntry\n\n{\n\n06\n\ntry\n\n{\n\n07\n\n// Something async...\n\n07\n\n// Something async...\n\n08\n\ncatch\n\n(\n\nerr\n\n)\n\n{\n\n08\n\ncatch\n\n(\n\nerr\n\n)\n\n{\n\n09\n\nif\n\n(\n\nerr\n\ninstanceof\n\nRPCError\n\n)\n\n{\n\n09\n\nif\n\n(\n\nerr\n\ninstanceof\n\nRPCError\n\n)\n\n{\n\n10\n\n// Handle...\n\n10\n\n// Handle...\n\n11\n\n}\n\n11\n\n}\n\n12\n\n}\n\n12\n\n}\n\nRPCError instances expose the code field which may be used to deterministically identify the error. Additionally, an enumeration of error codes is exposed for convenience and readability:\n\nRPCError\n\ncode\n\nCopy\n\n01\n\n// Bare React Native\n\n01\n\n// Bare React Native\n\n02\n\nimport\n\n{\n\nRPCErrorCode\n\n}\n\nfrom\n\n'@magic-sdk/react-native-bare'\n\n;\n\n02\n\nimport\n\n{\n\nRPCErrorCode\n\n}\n\nfrom\n\n'@magic-sdk/react-native-bare'\n\n;\n\n03\n\n// Expo React Native\n\n03\n\n// Expo React Native\n\n04\n\nimport\n\n{\n\nRPCErrorCode\n\n}\n\nfrom\n\n'@magic-sdk/react-native-expo'\n\n;\n\n04\n\nimport\n\n{\n\nRPCErrorCode\n\n}\n\nfrom\n\n'@magic-sdk/react-native-expo'\n\n;\n\n05\n\n05\n\n06\n\nRPCErrorCode\n\n.\n\nMagicLinkExpired\n\n;\n\n06\n\nRPCErrorCode\n\n.\n\nMagicLinkExpired\n\n;\n\n07\n\nRPCErrorCode\n\n.\n\nUserAlreadyLoggedIn\n\n;\n\n07\n\nRPCErrorCode\n\n.\n\nUserAlreadyLoggedIn\n\n;\n\n08\n\nRPCErrorCode\n\n.\n\nParseError\n\n;\n\n08\n\nRPCErrorCode\n\n.\n\nParseError\n\n;\n\n09\n\nRPCErrorCode\n\n.\n\nMethodNotFound\n\n;\n\n09\n\nRPCErrorCode\n\n.\n\nMethodNotFound\n\n;\n\n10\n\nRPCErrorCode\n\n.\n\nInternalError\n\n;\n\n10\n\nRPCErrorCode\n\n.\n\nInternalError\n\n;\n\n11\n\n// and so forth...\n\n11\n\n// and so forth...\n\n12\n\n// Please reference the `Enum Key` column of the error table below.\n\n12\n\n// Please reference the `Enum Key` column of the error table below.\n\n#\n\nMagicLinkFailedVerification\n\nMagicLinkExpired\n\nMagicLinkRateLimited\n\nshowUI\n\nfalse\n\nMagicLinkInvalidRedirectURL\n\nredirectURI\n\nUserAlreadyLoggedIn\n\nlogout\n\nlogout\n\nUpdateEmailFailed\n\nUserRequestEditEmail\n\n-10010\n\nInactiveRecipient\n\nInactiveRecipient\n\nWe were unable to deliver a Magic Link to the specified email address. The email address might be invalid.\n\n-10011\n\nAccessDeniedToUser\n\nAccessDeniedToUser\n\nUser denied account access.\n\n-10015\n\nRedirectLoginComplete\n\nRedirectLoginComplete\n\nUser has already completed authentication in the redirect window.", "explanation": "**RPCError: Understanding Magic Link Error Codes**\n\nThe `RPCError` class is a crucial part of the Magic Labs embedded wallet documentation, providing a way to handle and identify errors that may occur during user interactions.\n\n**Purpose:** The main purpose of `RPCError` is to expose error codes for instanceof operations, making it easier to determine the type of error that occurred. This enables developers to handle specific error scenarios in their applications.\n\n**Key Features:**\n\n1. **Error Code Exposure**: `RPCError` instances have a `code` field that can be used to deterministically identify the error.\n2. **Error Code Enumeration**: An enumeration of error codes (`RPCErrorCode`) is provided for convenience and readability, listing specific error scenarios with their corresponding codes.\n\n**Example Use Case:**\n\nWhen an asynchronous operation fails (e.g., sending a Magic Link), you can use `try-catch` blocks to handle the error. If the error is an instance of `RPCError`, you can access its `code` field and use it to determine how to proceed.\n```javascript\ntry {\n  // async operation...\n} catch (err) {\n  if (err instanceof RPCError) {\n    switch (err.code) {\n      case MagicLinkExpired:\n        // handle expired link error\n        break;\n      case UserAlreadyLoggedIn:\n        // handle already logged-in user error\n        break;\n      default:\n        // handle other error scenarios...\n        break;\n    }\n  }\n}\n```\n**Error Codes Table:**\n\nThe provided documentation includes a table with a list of error codes, their corresponding `RPCErrorCode` enum values, and brief descriptions. This table serves as a reference for developers to identify specific error scenarios and their corresponding error codes.\n\nBy understanding the `RPCError` class and its associated error codes, developers can write more robust and user-friendly applications that handle Magic Link errors effectively.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/react-native#chunk-82", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nParseError\n\nInvalidRequest\n\nMethodNotFound\n\nInvalidParams\n\nInternalError", "explanation": "**Standard JSON RPC 2.0 Error Codes**\n\nThe section in the Magic Labs embedded wallet documentation titled '#Standard JSON RPC 2.0 Error Codes' outlines a set of standardized error codes used in JSON-RPC (Remote Procedure Call) 2.0 protocol. These codes are defined to provide a uniform way of reporting errors that may occur during communication between a client and a server.\n\nThe main purpose of this section is to document the predefined error codes that may be returned by the Magic Labs embedded wallet API in response to client requests. This allows developers to anticipate, handle, and provide meaningful error messages to users when any of these errors occur.\n\nThe five specific error codes listed are:\n\n1. `ParseError`: Returned when the server cannot parse the request.\n2. `InvalidRequest`: Returned when the request is invalid or malformed.\n3. `MethodNotFound`: Returned when the requested method is not found on the server.\n4. `InvalidParams`: Returned when the parameters provided with the request are invalid.\n5. `InternalError`: Returned when an internal server error occurs.\n\nBy understanding these error codes, developers can implement robust error handling mechanisms in their applications, leading to a better user experience and more efficient debugging.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/react-native#chunk-83", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nExtensionError\n\nThe ExtensionError class is exposed for instanceof operations:\n\nExtensionError\n\ninstanceof\n\nCopy\n\n01\n\nimport\n\n{\n\nExtensionError\n\n}\n\nfrom\n\n'@magic-sdk/react-native-bare'\n\n;\n\n01\n\nimport\n\n{\n\nExtensionError\n\n}\n\nfrom\n\n'@magic-sdk/react-native-bare'\n\n;\n\n02\n\n02\n\n03\n\ntry\n\n{\n\n03\n\ntry\n\n{\n\n04\n\n// Something async...\n\n04\n\n// Something async...\n\n05\n\ncatch\n\n(\n\nerr\n\n)\n\n{\n\n05\n\ncatch\n\n(\n\nerr\n\n)\n\n{\n\n06\n\nif\n\n(\n\nerr\n\ninstanceof\n\nExtensionError\n\n)\n\n{\n\n06\n\nif\n\n(\n\nerr\n\ninstanceof\n\nExtensionError\n\n)\n\n{\n\n07\n\n// Handle...\n\n07\n\n// Handle...\n\n08\n\n}\n\n08\n\n}\n\n09\n\n}\n\n09\n\n}\n\nExtensionError instances expose the code field which may be used to deterministically identify the error. Magic SDK does not export a global enumeration of Extension error codes. Instead, Extension authors are responsible for exposing and documenting error codes relevant to the Extension's use-case.\n\nExtensionError\n\ncode", "explanation": "**ExtensionError: Handling Custom Errors in Magic Labs Embedded Wallet**\n\nThe `ExtensionError` class is a custom exception handler in the Magic SDK for React Native. Its main purpose is to enable developers to catch and handle specific errors that occur within extensions, which are custom modules that integrate with the Magic wallet.\n\n**Key Points:**\n\n1. **Instanceof Operation**: The `ExtensionError` class is exposed for instanceof operations, allowing developers to check if an error is of type `ExtensionError`.\n2. **Error Handling**: When an async operation fails, the code catches the error and checks if it's an instance of `ExtensionError`. If so, it can handle the specific error using the `code` field.\n3. **Custom Error Codes**: Unlike traditional error codes, Magic SDK doesn't export a global enumeration of Extension error codes. Instead, extension authors are responsible for exposing and documenting their own custom error codes relevant to their use-case.\n\n**Example Use Case:**\n\nIn the code snippet provided, an async operation is attempted, which fails with an error (`err`). The code checks if the error is an instance of `ExtensionError` using instanceof. If it is, the code can handle the specific error by checking the `code` field, which may contain a custom error code.\n\nBy using `ExtensionError`, developers can catch and handle custom errors that occur within extensions, providing a more robust and reliable experience for their users.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/react-native#chunk-84", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nMagic SDK provides a flexible interface for handling methods which encompass multiple \"stages\" of an action. Promises returned by Magic SDK resolve when a flow has reached finality, but certain methods also contain life-cycle events that dispatch throughout. We refer to this interface as a PromiEvent. There is prior art to inspire this approach in Ethereum's Web3 standard.\n\nPromises\n\nPromiEvent\n\nWeb3\n\nPromiEvent is a portmanteau of Promise and EventEmitter. Browser and React Native SDK methods return this object type, which is a native JavaScript Promise overloaded with EventEmitter methods. This value can be awaited in modern async/await code, or you may register event listeners to handle method-specific life-cycle hooks. Each PromiEvent contains the following default event types:\n\nPromiEvent\n\nPromise\n\nEventEmitter\n\nEventEmitter\n\nPromise\n\nEventEmitter\n\nawaited\n\nasync/await\n\nPromiEvent\n\n\u2022 \"done\": Called when the Promise resolves. This is equivalent to Promise.then.\n\n\u2022 \"error\": Called if the Promise rejects. This is equivalent to Promise.catch.\n\n\u2022 \"settled\": Called when the Promise either resolves or rejects. This is equivalent to Promise.finally.\n\n\"done\"\n\nPromise\n\nPromise.then\n\n\"error\"\n\nPromise\n\nPromise.catch\n\n\"settled\"\n\nPromise\n\nPromise.finally\n\nLook for additional event types documented near the method they relate to. Events are strongly-typed by TypeScript to offer developer hints and conveniant IDE auto-complete.\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'@magic-sdk/react-native-bare'\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'@magic-sdk/react-native-bare'\n\n;\n\n02\n\n02\n\n03\n\nconst\n\nreq\n\n=\n\nmagic\n\n.\n\nauth\n\n.\n\nloginWithEmailOTP\n\n(\n\n{\n\nemail\n\n:\n\n'hello@magic.link'\n\n}\n\n)\n\n;\n\n03\n\nconst\n\nreq\n\n=\n\nmagic\n\n.\n\nauth\n\n.\n\nloginWithEmailOTP\n\n(\n\n{\n\nemail\n\n:\n\n'hello@magic.link'\n\n}\n\n)\n\n;\n\n04\n\n04\n\n05\n\nreq\n\n05\n\nreq\n\n06\n\n.\n\non\n\n(\n\n'email-sent'\n\n,\n\n(\n\n)\n\n=>\n\n{\n\n06\n\n.\n\non\n\n(\n\n'email-sent'\n\n,\n\n(\n\n)\n\n=>\n\n{\n\n07\n\n/* ... */\n\n07\n\n/* ... */\n\n08\n\n}\n\n)\n\n08\n\n}\n\n)\n\n09\n\n.\n\nthen\n\n(\n\nDIDToken\n\n=>\n\n{\n\n09\n\n.\n\nthen\n\n(\n\nDIDToken\n\n=>\n\n{\n\n10\n\n/* ... */\n\n10\n\n/* ... */\n\n11\n\n}\n\n)\n\n11\n\n}\n\n)\n\n12\n\n.\n\nonce\n\n(\n\n'email-not-deliverable'\n\n,\n\n(\n\n)\n\n=>\n\n{\n\n12\n\n.\n\nonce\n\n(\n\n'email-not-deliverable'\n\n,\n\n(\n\n)\n\n=>\n\n{\n\n13\n\n/* ... */\n\n13\n\n/* ... */\n\n14\n\n}\n\n)\n\n14\n\n}\n\n)\n\n15\n\n.\n\ncatch\n\n(\n\nerror\n\n=>\n\n{\n\n15\n\n.\n\ncatch\n\n(\n\nerror\n\n=>\n\n{\n\n16\n\n/* ... */\n\n16\n\n/* ... */\n\n17\n\n}\n\n)\n\n17\n\n}\n\n)\n\n18\n\n.\n\non\n\n(\n\n'error'\n\n,\n\nerror\n\n=>\n\n{\n\n18\n\n.\n\non\n\n(\n\n'error'\n\n,\n\nerror\n\n=>\n\n{\n\n19\n\n/* ... */\n\n19\n\n/* ... */\n\n20\n\n}\n\n)\n\n;\n\n20\n\n}\n\n)\n\n;", "explanation": "The `PromiEvent` is a feature in the Magic SDK that provides a flexible interface for handling methods with multiple stages of an action. It's a portmanteau of \"Promise\" and \"EventEmitter\".\n\nIn essence, a `PromiEvent` is a native JavaScript Promise overloaded with EventEmitter methods. This means that it allows you to both await the result of a method using modern async/await syntax, or register event listeners to handle specific life-cycle hooks.\n\nHere are the key points about `PromiEvents`:\n\n1. **Default event types**: A `PromiEvent` contains three default event types:\n\t* \"done\": Called when the Promise resolves (equivalent to `Promise.then`).\n\t* \"error\": Called if the Promise rejects (equivalent to `Promise.catch`).\n\t* \"settled\": Called when the Promise either resolves or rejects (equivalent to `Promise.finally`).\n2. **Custom event types**: Depending on the method, additional event types may be documented near the method they relate to.\n3. **Strongly-typed events**: Events are strongly-typed by TypeScript to offer developer hints and convenient IDE auto-complete.\n\nIn the example code you provided, a `PromiEvent` is used to handle the result of the `loginWithEmailOTP` method. The event listeners are registered using the `on`, `once`, and `catch` methods of the `PromiEvent`.\n\nOverall, `PromiEvents` provide a flexible way to handle the results of Magic SDK methods, allowing you to either await the result or register event listeners to handle specific life-cycle hooks.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/react-native#chunk-85", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n#\n\nMagic supports the following EVM RPC Methods that can be called through a web3 provider library such as web3.js or ethers.js.\n\nweb3.js\n\nethers.js\n\nNote: starting from magic-sdk@17.0.0, eth_accounts will return an empty array if no user is logged in, instead of prompting the login form. To prompt the login form, use connectWithUI().\n\nmagic-sdk@17.0.0\n\neth_accounts\n\nconnectWithUI()\n\n\u2022 eth_accounts\n\n\u2022 get_balance\n\n\u2022 eth_estimateGas\n\n\u2022 eth_gasPrice\n\n\u2022 eth_sendTransaction\n\n\u2022 personal_sign\n\n\u2022 eth_signTypedData_v3\n\n\u2022 eth_signTypedData_v4\n\neth_accounts\n\nget_balance\n\neth_estimateGas\n\neth_gasPrice\n\neth_sendTransaction\n\npersonal_sign\n\neth_signTypedData_v3\n\neth_signTypedData_v4", "explanation": "**EVM RPC Methods in Magic SDK**\n\nThe documentation section titled '#Usage - #EVM RPC Methods' explains that Magic supports various EVM ( Ethereum Virtual Machine) RPC methods, which can be called through a web3 provider library such as `web3.js` or `ethers.js`.\n\n**Main Purpose:**\n\nThe main purpose of this documentation is to inform developers about the available EVM RPC methods that can be used with the Magic SDK. This allows them to integrate Magic's wallet functionality into their applications, enabling users to interact with Ethereum smart contracts and perform various blockchain-related operations.\n\n**Key Methods:**\n\nSome key methods mentioned include:\n\n* `eth_accounts`: Returns a list of user accounts.\n* `get_balance`: Retrieves a user's account balance.\n* `eth_estimateGas`: Estimates the gas required for a transaction.\n* `eth_sendTransaction`: Sends a transaction to the Ethereum network.\n* `personal_sign`: Signs a message with a user's private key.\n* `eth_signTypedData_v3` and `eth_signTypedData_v4`: Sign typed data using a user's private key.\n\n**Important Note:**\n\nStarting from Magic SDK version 17.0.0, the `eth_accounts` method returns an empty array if no user is logged in. To prompt the login form, developers should use the `connectWithUI()` method instead.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/react-native#chunk-86", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nAs of v14.0.0 our React Native package offerings wrap the <magic.Relayer /> in react-native-safe-area-context's <SafeAreaView />. To prevent any adverse behavior in your app, please place the Magic iFrame React component at the root view of your application wrapped in a SafeAreaProvider as described in the documentation.\n\n<magic.Relayer />\n\nreact-native-safe-area-context's\n\n<SafeAreaView />\n\nSafeAreaProvider\n\nWe have also added an optional backgroundColor prop to the Relayer to fix issues with SafeAreaView showing the background. By default, the background will be white. If you have changed the background color as part of your custom branding setup, make sure to pass your custom background color to magic.Relayer:\n\nbackgroundColor\n\nRelayer\n\nSafeAreaView\n\ncustom branding setup\n\nmagic.Relayer\n\nCopy\n\n01\n\n<\n\nmagic\n\n.\n\nRelayer\n\nbackgroundColor\n\n=\n\n\"#0000FF\"\n\n/\n\n>\n\n01\n\n<\n\nmagic\n\n.\n\nRelayer\n\nbackgroundColor\n\n=\n\n\"#0000FF\"\n\n/\n\n>", "explanation": "Let's break down the documentation section titled '#SafeAreaView'.\n\n**What is it about?**\n\nThis section explains how to properly integrate the Magic Labs embedded wallet (specifically, the `<magic.Relayer />` component) into a React Native application using the `react-native-safe-area-context` library.\n\n**Main purpose:**\n\nThe main purpose of this documentation section is to inform users that the Magic Labs package for React Native wraps the `<magic.Relayer />` component in a `<SafeAreaView />` from the `react-native-safe-area-context` library. This is done to prevent any adverse behavior in the app.\n\n**Key points:**\n\n* The Magic Labs package uses `react-native-safe-area-context`'s `<SafeAreaView />` to wrap the `<magic.Relayer />` component.\n* To prevent issues, users should place the Magic iFrame React component at the root view of their application wrapped in a `SafeAreaProvider`.\n* An optional `backgroundColor` prop has been added to the `Relayer` component to fix issues with `<SafeAreaView />` showing the background. By default, the background is white.\n\nOverall, this documentation section aims to help users integrate the Magic Labs embedded wallet into their React Native applications correctly and avoid potential issues.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/react-native#chunk-87", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nWhen an app is opened without an internet connection, any request to the Magic SDK will result in a rejection with a MagicSDKError:\n\nMagicSDKError\n\nCopy\n\n01\n\n{\n\n01\n\n{\n\n02\n\n\"code\"\n\n:\n\n\"MODAL_NOT_READY\"\n\n,\n\n02\n\n\"code\"\n\n:\n\n\"MODAL_NOT_READY\"\n\n,\n\n03\n\n\"rawMessage\"\n\n:\n\n\"Modal is not ready.\"\n\n03\n\n\"rawMessage\"\n\n:\n\n\"Modal is not ready.\"\n\n04\n\n}\n\n04\n\n}\n\nIt's good practice to use @react-native-community/netinfo to track the internet connection state of the device. For your convenience, we've also added a hook that uses this library behind the scenes:\n\n@react-native-community/netinfo\n\nCopy\n\n01\n\nimport\n\n{\n\nuseInternetConnection\n\n}\n\nfrom\n\n'@magic-sdk/react-native-expo'\n\n;\n\n01\n\nimport\n\n{\n\nuseInternetConnection\n\n}\n\nfrom\n\n'@magic-sdk/react-native-expo'\n\n;\n\n02\n\n02\n\n03\n\nexport\n\ndefault\n\nfunction\n\nApp\n\n(\n\n)\n\n{\n\n03\n\nexport\n\ndefault\n\nfunction\n\nApp\n\n(\n\n)\n\n{\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n05\n\n05\n\n06\n\nconst\n\nconnected\n\n=\n\nuseInternetConnection\n\n(\n\n)\n\n06\n\nconst\n\nconnected\n\n=\n\nuseInternetConnection\n\n(\n\n)\n\n07\n\n07\n\n08\n\nuseEffect\n\n(\n\n(\n\n)\n\n=>\n\n{\n\n08\n\nuseEffect\n\n(\n\n(\n\n)\n\n=>\n\n{\n\n09\n\nif\n\n(\n\n!\n\nconnected\n\n)\n\n09\n\nif\n\n(\n\n!\n\nconnected\n\n)\n\n10\n\n{\n\n// Unmount this component and show your \"You're offline\" screen.}\n\n10\n\n{\n\n// Unmount this component and show your \"You're offline\" screen.}\n\n11\n\n}\n\n,\n\n[\n\nconnected\n\n]\n\n)\n\n11\n\n}\n\n,\n\n[\n\nconnected\n\n]\n\n)\n\n12\n\n12\n\n13\n\nreturn\n\n<\n\n>\n\n13\n\nreturn\n\n<\n\n>\n\n14\n\n<\n\nSafeAreaProvider\n\n>\n\n14\n\n<\n\nSafeAreaProvider\n\n>\n\n15\n\n{\n\n/* Render the Magic iframe! */\n\n}\n\n15\n\n{\n\n/* Render the Magic iframe! */\n\n}\n\n16\n\n<\n\nmagic\n\n.\n\nRelayer\n\n/\n\n>\n\n16\n\n<\n\nmagic\n\n.\n\nRelayer\n\n/\n\n>\n\n17\n\n{\n\n...\n\n}\n\n17\n\n{\n\n...\n\n}\n\n18\n\n<\n\n/\n\nSafeAreaProvider\n\n>\n\n18\n\n<\n\n/\n\nSafeAreaProvider\n\n>\n\n19\n\n<\n\n/\n\n>\n\n19\n\n<\n\n/\n\n>\n\n20\n\n}\n\n20\n\n}", "explanation": "This documentation section is about handling internet connection problems when using the Magic Labs embedded wallet in a React Native application.\n\n**Main Purpose:**\n\nThe main purpose of this section is to explain how to detect and handle cases where the app is opened without an internet connection, which can result in errors with the Magic SDK. It provides guidance on how to use the `@react-native-community/netinfo` library to track the device's internet connection state and shows a code example that demonstrates how to unmount the component and show a \"You're offline\" screen when there is no internet connection.\n\n**Key Points:**\n\n1. The Magic SDK will return an error with a specific code (`MODAL_NOT_READY`) when there is no internet connection.\n2. To handle this situation, you can use the `useInternetConnection` hook from the `@react-native-community/netinfo` library to track the device's internet connection state.\n3. If there is no internet connection, you should unmount the component and show a \"You're offline\" screen.\n\n**Code Example:**\n\nThe code example shows how to use the `useInternetConnection` hook to detect whether there is an internet connection or not. It also demonstrates how to use the `useEffect` hook to unmount the component and show a \"You're offline\" screen when there is no internet connection.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/react-native#chunk-88", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nA user's Magic SDK session persists up to 7 days by default, so re-authentication is usually frictionless.\n\nNote: the session length is customizable by the developer through the Magic dashboard.\n\nMagic dashboard\n\nBefore re-authenticating a user, install the Magic Client SDK\u200b.\n\ninstall the Magic Client SDK\u200b\n\nCopy\n\n01\n\n// Bare React Native\n\n01\n\n// Bare React Native\n\n02\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'@magic-sdk/react-native-bare'\n\n;\n\n02\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'@magic-sdk/react-native-bare'\n\n;\n\n03\n\n// Expo React Native\n\n03\n\n// Expo React Native\n\n04\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'@magic-sdk/react-native-expo'\n\n;\n\n04\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'@magic-sdk/react-native-expo'\n\n;\n\n05\n\n05\n\n06\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n06\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n07\n\n07\n\n08\n\nconst\n\nemail\n\n=\n\n'example@magic.link'\n\n;\n\n08\n\nconst\n\nemail\n\n=\n\n'example@magic.link'\n\n;\n\n09\n\n09\n\n10\n\nif\n\n(\n\nawait\n\nmagic\n\n.\n\nuser\n\n.\n\nisLoggedIn\n\n(\n\n)\n\n)\n\n{\n\n10\n\nif\n\n(\n\nawait\n\nmagic\n\n.\n\nuser\n\n.\n\nisLoggedIn\n\n(\n\n)\n\n)\n\n{\n\n11\n\nconst\n\ndidToken\n\n=\n\nawait\n\nmagic\n\n.\n\nuser\n\n.\n\ngetIdToken\n\n(\n\n)\n\n;\n\n11\n\nconst\n\ndidToken\n\n=\n\nawait\n\nmagic\n\n.\n\nuser\n\n.\n\ngetIdToken\n\n(\n\n)\n\n;\n\n12\n\n12\n\n13\n\n// Do something with the DID token.\n\n13\n\n// Do something with the DID token.\n\n14\n\n// For instance, this could be a `fetch` call\n\n14\n\n// For instance, this could be a `fetch` call\n\n15\n\n// to a protected backend endpoint.\n\n15\n\n// to a protected backend endpoint.\n\n16\n\n}\n\nelse\n\n{\n\n16\n\n}\n\nelse\n\n{\n\n17\n\n// Log in the user\n\n17\n\n// Log in the user\n\n18\n\nconst\n\nuser\n\n=\n\nawait\n\nmagic\n\n.\n\nauth\n\n.\n\nloginWithEmailOTP\n\n(\n\n{\n\nemail\n\n}\n\n)\n\n;\n\n18\n\nconst\n\nuser\n\n=\n\nawait\n\nmagic\n\n.\n\nauth\n\n.\n\nloginWithEmailOTP\n\n(\n\n{\n\nemail\n\n}\n\n)\n\n;\n\n19\n\n}\n\n19\n\n}", "explanation": "**Re-authenticating Users with Magic Labs Embedded Wallet**\n\nThis documentation section explains how to re-authenticate users in a Magic Labs embedded wallet, which persists for up to 7 days by default. The session length can be customized through the Magic dashboard.\n\n**Key Points:**\n\n1. **Check if user is already logged in**: Use the `isLoggedIn` method to determine if the user has an active session.\n2. **Get DID token (if user is logged in)**: If the user is already logged in, use the `getIdToken` method to retrieve their DID token.\n3. **Use DID token for authentication (if applicable)**: The DID token can be used to authenticate with a protected backend endpoint.\n4. **Log in user if not logged in**: If the user is not logged in, use the `loginWithEmailOTP` method to log them in.\n\n**Example Code Snippet:**\n```javascript\nimport { Magic } from '@magic-sdk/react-native-bare';\n\nconst magic = new Magic('PUBLISHABLE_API_KEY');\n\n// Check if user is already logged in\nif (await magic.user.isLoggedIn()) {\n  // Get DID token\n  const didToken = await magic.user.getIdToken();\n  // Do something with the DID token\n} else {\n  // Log in the user\n  const user = await magic.auth.loginWithEmailOTP({ email: 'example@magic.link' });\n}\n```\nThis code snippet demonstrates how to re-authenticate users using Magic Labs embedded wallet. If the user is already logged in, it retrieves their DID token and performs an action (e.g., a `fetch` call). If not logged in, it logs them in using email OTP authentication.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/react-native#chunk-89", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 Demo\n\n\u2022 GitHub Repository\n\nDemo\n\nGitHub Repository", "explanation": "The `#Resources` section from the Magic Labs embedded wallet documentation for React Native provides users with additional tools and references to aid in their development process.\n\nThis section offers two main resources:\n\n1. **Demo**: This is a working example or demonstration of how the Magic Labs embedded wallet can be integrated into a React Native application. It likely showcases key features and usage examples.\n2. **GitHub Repository**: This is a link to the official GitHub repository for the Magic Labs React Native SDK. It contains the source code, allowing developers to explore the codebase, report issues, and contribute to the project if needed.\n\nThe main purpose of this section is to empower developers with hands-on examples and access to the underlying code, making it easier for them to implement and troubleshoot the Magic Labs embedded wallet in their React Native applications.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/react-native#chunk-90", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nThe Sign Confirmation feature allows you to protect users from front-end attacks when using Magic\u2019s UI for on-chain signature requests such as Transaction Signing, Personal Signatures, and NFT Transfer by popping them out to a safe, Magic-hosted browser window to confirm the action.\n\nTransaction Signing\n\nPersonal Signatures\n\nNFT Transfer\n\n#\n\n\u2022 Dedicated Wallets are by default opted out of Magic's Signature Request UI and Sign Confirmation, but we do recommend that you enable both to enhance wallet security\n\n\u2022 Universal Wallets are all opted into this security feature by default\n\nUniversal wallets will soon be merged with Dedicated Wallets into a single product line. Universal apps created before February 7, 2024 will work as expected with no change. See our blog post to learn more.\n\nblog post", "explanation": "**What is Sign Confirmation?**\n\nSign Confirmation is a security feature provided by Magic Labs that protects users from front-end attacks when using their UI for on-chain signature requests.\n\n**Main Purpose:**\n\nThe main purpose of Sign Confirmation is to **popup a safe, Magic-hosted browser window** to confirm critical actions such as:\n\n* Transaction Signing\n* Personal Signatures\n* NFT Transfer\n\nThis feature helps prevent malicious actors from manipulating users into making unauthorized transactions or signatures.\n\n**Key Points:**\n\n* Dedicated Wallets are not enabled by default, but it's recommended to enable Sign Confirmation for enhanced security.\n* Universal Wallets are opted in by default and will soon be merged with Dedicated Wallets.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/wallets/security/sign-confirmation#chunk-1", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nWhen users connect their wallet to an app (like yours!) or send tokens to another wallet, they are performing an on-chain transaction. Magic provides Signature Request UI that you can enable in the developer dashboard so users are prompted to approve these actions before it is executed.\n\nHowever, malicious front-end attacks can attempt to trick users into performing unintended actions by overlaying malicious content on top of legitimate websites or applications such as your own. By opting into the Sign Confirmation feature, you add an extra layer of security to users\u2019 wallets, preventing front-end attacks and ensuring that they can more safely confirm transactions.", "explanation": "**Main Purpose:** Add an extra layer of security to user wallets by confirming on-chain transactions before execution.\n\n**What it is about:** The section explains the importance of verifying user intentions when performing on-chain transactions, such as connecting a wallet or sending tokens. It highlights the risk of malicious front-end attacks that can trick users into making unintended actions.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/wallets/security/sign-confirmation#chunk-2", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nTo enable the Sign Confirmation feature in the user wallets of your app, follow these steps:\n\n\u2022 Go to the Magic Dashboard and sign into your developer account\n\n\u2022 Go to your Dedicated Wallet app for which you would like to enable this feature\n\n\u2022 Go to \u201cSettings\u201d on the left navigation bar, scroll down to the \u201cSign Confirmation\u201d section, and click \"Edit\" in the top right corner\n\n\u2022 Toggle on \u201cEnable confirmation in new tab\u201d and click \u201cSave\u201d\n\nMagic Dashboard", "explanation": "**What is Sign Confirmation?**\n\nSign Confirmation is a feature that requires users to confirm their digital signature before it's processed. This adds an extra layer of security to prevent unauthorized signatures.\n\n**Main Purpose:**\n\nThe main purpose of Sign Confirmation is to ensure that the user intentionally and knowingly signs transactions, reducing the risk of accidental or malicious signature issuance.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/wallets/security/sign-confirmation#chunk-3", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nSee how to brand this experience with your own logo and colors in the customization section.\n\ncustomization section", "explanation": "The provided section appears to be incomplete, as it lacks specific information under the '#Configuration' title. However, based on the given link to the documentation ('https://magic.link/docs/wallets/security/sign-confirmation), and the section mentioning the 'customization section,' I can infer its main purpose.\n\nThis section is about customizing the experience of sign confirmation, likely related to transaction sign confirmations, in the embedded wallet provided by Magic Labs. The main purpose is to guide users on how to personalize this experience with their own branding (e.g., logo and colors). \n\nIt seems that this section is supposed to redirect users to a more detailed 'Customization' section that provides instructions on implementing these customizations.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/wallets/security/sign-confirmation#chunk-4", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nWhen Magic's wallet widget is shown, you have the ability to configure some UI options to reflect your brand. The level of customization depends on the pricing tier you have selected. During the trial phase, you will have access to all functionality for this feature.\n\n#\n\nIncluded with all plans:\n\n\u2022 Change the default Magic branding to a custom logo and app name\n\n\u2022 Remove the Magic branding from the footer fo the Widget UI\n\nIncluded with Dedicated Wallet and Universal Wallet Pro plans:\n\nUniversal Wallet Pro\n\nUniversal wallets will soon be merged with Dedicated Wallets into a single product line. Universal apps created before February 7, 2024 will work as expected with no change. See our blog post to learn more.\n\nblog post\n\n\u2022 Change the primary brand color and choose a light or dark theme", "explanation": "**Section Summary:**\n\nThis documentation section is about customizing the user interface (UI) of Magic's embedded wallet widget to match your brand. It explains what features are available with different pricing tiers.\n\n**Main Purpose:**\n\nThe main purpose of this section is to inform customers how they can customize the look and feel of Magic's wallet widget to align with their brand, including:\n\n* Changing the default logo and app name\n* Removing Magic branding from the footer\n* Adjusting primary brand colors and theme (available with higher pricing tiers)\n\nThis helps customers understand what customization options are available to them based on their chosen plan.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/wallets/customization/brand-and-theme#chunk-1", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nYou can customize the logo and colors of the Magic link email, confirmation screen, and pending modal on the Branding tab in the Magic Dashboard:\n\nMagic Dashboard\n\nApp with customized branding", "explanation": "This documentation section titled '#Usage' is about customizing the appearance of Magic Labs embedded wallet features through a branded setup.\n\nThe main purpose of this section is to inform users that they can modify the visual identity (logo and colors) of specific wallet-related elements, such as:\n\n* Email links\n* Confirmation screens\n* Pending modals\n\nThese modifications can be done on the 'Branding' tab within the Magic Dashboard, which is an interface likely provided by Magic Labs for administrators or developers to manage and customize their account settings.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/wallets/customization/brand-and-theme#chunk-2", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 To provide a consistent end-to-end user experience, logos are automatically masked to be circular. We recommend using a square image with adequate safe space. Only PNG, JPG, JPEG files and logos up to 512kb are supported.", "explanation": "This documentation section titled '#Notes' is about the requirements for customizing logos in Magic Labs embedded wallets.\n\nThe main purpose of this note is to inform users that:\n\n* Logos will be automatically made circular to maintain a consistent look.\n* To ensure proper display, they should use a square image with enough empty space around the logo (safe space).\n* The supported file formats are PNG, JPG, and JPEG.\n* The maximum file size for logos is 512KB.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/wallets/customization/brand-and-theme#chunk-3", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "Universal wallets will soon be merged with Dedicated Wallets into a single product line. Universal apps created before February 7, 2024 will work as expected with no change. See our blog post to learn more.\n\nblog post", "explanation": "This documentation section is about the upcoming merge of two separate wallet products in Magic Labs: Universal wallets and Dedicated wallets.\n\n**Main Purpose:** The main purpose of this section is to inform customers and developers that:\n\n1. A new, unified wallet product will be introduced, replacing both Universal and Dedicated wallets.\n2. Existing Universal apps created before February 7, 2024 (a specific date) will continue to work as expected without any changes.\n3. To learn more about the merge and its implications, a blog post is referenced.\n\nIn essence, this section serves as a notification to users that an update is coming, and existing applications will be compatible with the new unified wallet product.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/wallets/features/third-party-wallets#chunk-1", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nUniversal Wallet simplifies the integration of 3rd party wallets into your application. Developers and enterprises no longer need to write extensive lines of code to offer MetaMask or Coinbase Pro wallets.\n\nOnly available for Universal Wallet via the Web SDK.\n\nWeb SDK", "explanation": "Here's a clear and concise explanation:\n\n**Overview Section:**\n\nThis section is about the **Universal Wallet** feature, which simplifies integrating third-party (3rd party) wallets into an application.\n\n**Main Purpose:**\n\nThe main purpose of this feature is to allow developers and enterprises to easily offer popular wallets like MetaMask or Coinbase Pro without having to write extensive code. This makes it easier to add wallet functionality to applications.\n\nIn short, the Universal Wallet simplifies the integration process for 3rd party wallets using the Web SDK (Software Development Kit).", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/wallets/features/third-party-wallets#chunk-2", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nThrough a user-friendly toggle on the Magic developer dashboard, you can easily enable or disable these wallets, providing flexibility and choice to your users.\n\nThe SDK will remember this choice on the client and all further RPC calls will be forwarded to the selected wallet. This selection can be reset by calling the logout() SDK method.\n\nlogout()\n\nlogout()\n\nCurrently, MetaMask and Coinbase Wallet are disabled by default for all Universal Wallet apps. Visibility of third-party wallets can be toggled on or off via the Wallet Providers page in the Magic developer dashboard.\n\nMetaMask\n\nCoinbase Wallet", "explanation": "**Documentation Section: '#Usage'**\n\nThis documentation section explains how to enable, disable, and manage third-party wallets (e.g., MetaMask, Coinbase Wallet) for your Universal Wallet app using the Magic developer dashboard.\n\n**Main Purpose:**\n\nThe main purpose of this section is to inform developers about the flexibility to choose which wallets are available to their users. It also provides instructions on how to toggle wallet visibility and reset user selections using the `logout()` SDK method.\n\n**Key Points:**\n\n* Enable or disable third-party wallets through a user-friendly toggle in the Magic developer dashboard.\n* The SDK remembers user choices, and all further RPC calls will be forwarded to the selected wallet.\n* User selections can be reset by calling the `logout()` SDK method.\n* MetaMask and Coinbase Wallet are disabled by default for all Universal Wallet apps.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/wallets/features/third-party-wallets#chunk-3", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 MetaMask\n\n\u2022 Coinbase Pro\n\nMetaMask\n\nCoinbase Pro", "explanation": "This section, titled '#Resources', is a list or catalog of third-party wallet resources that can be integrated or used in conjunction with Magic Labs embedded wallet. However, it appears incomplete, only providing brief mentions of:\n\n- MetaMask: A popular Ethereum wallet that allows users to store, send, and receive Ether and other Ethereum-based tokens.\n- Coinbase Pro: A professional trading platform and wallet service offered by Coinbase, allowing users to store, buy, sell, and trade various cryptocurrencies.\n\nThe main purpose of this section is likely to serve as a starting point or reference for developers who wish to integrate Magic Labs embedded wallet with other popular wallet services. It may be intended to provide a list of supported or compatible wallets, but in its current form, it appears to be incomplete or awaiting further updates.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/wallets/features/third-party-wallets#chunk-4", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nMagic's authentication can enable passwordless Web3 onboarding (no seed phrases) using multiple configurable methods. Each method either creates an account address for the user (non-custodial) or utilizes an existing account address. This is handled completely by Magic with out-of-the-box UI, with no lift from the integrating dApp.\n\n#\n\nThe Login UI is available via the following client-side SDKs:\n\n\u2022 Web\n\n\u2022 React Native\n\n\u2022 iOS\n\n\u2022 Android\n\nWeb\n\nReact Native\n\niOS\n\nAndroid", "explanation": "This documentation section appears to be about customizing the login user interface (UI) for Magic Labs' embedded wallet, a feature that enables passwordless Web3 onboarding. \n\nThe main purpose of this section is to inform developers and users about how to utilize Magic's pre-built UI for logging in, which can be integrated into various dApps through client-side SDKs such as Web, React Native, iOS, and Android.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/customization/login-ui#chunk-1", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 Allow your users to log in and/or sign up to your dApp using their preferred authentication method and gain access to their public wallet address on the network you are connected to.\n\n\u2022 Using Dedicated Wallet you can collect a signed token for wallet address verification and skip the need to explictly request a personal signature which would prompt an additional screen. (For Universal Wallet, an event listener is needed to retrieve the signed token)\n\nDedicated Wallet\n\nUniversal Wallet", "explanation": "**Use Cases Section:**\n\nThis documentation section is titled \"#Use Cases\" and can be found on the Magic Labs embedded wallet documentation page at https://magic.link/docs/authentication/customization/login-ui.\n\n**What it's about:**\n\nThe #Use Cases section describes two specific use cases for implementing authentication in a decentralized application (dApp):\n\n1. **Allow users to log in and sign up**: This use case explains how to enable users to access their public wallet address on the connected network using their preferred authentication method.\n2. **Collect signed token for wallet verification**: This use case discusses an alternative approach to verifying user identity by collecting a signed token from the Magic Labs embedded wallet, which can be used to skip explicit signature requests.\n\n**Main purpose:**\n\nThe primary purpose of this section is to provide clear guidance on implementing authentication in dApps using Magic Labs embedded wallets. By outlining specific use cases and associated implementation details (e.g., for Dedicated Wallet vs Universal Wallet), this documentation aims to assist developers in making informed decisions about how to integrate Magic Labs authentication into their applications.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/customization/login-ui#chunk-2", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n#\n\n#\n\nIf a user chooses to authenticate through their email, they will recieve a unique code to their email that is generated per attempt and the user will be required to enter it to authenticate. OTPs for email provide a simple and effective way to increase security and ensure the safety of user assets.", "explanation": "This documentation section explains how Magic Labs' embedded wallet uses Email One-Time Passcode (OTP) authentication.\n\n**Main Purpose:**\n\nThe main purpose is to describe the process of using an email-based OTP to authenticate users, adding an extra layer of security to protect their assets.\n\n**Key Points:**\n\n* When a user chooses email authentication, they receive a unique code via email for each attempt.\n* This code must be entered by the user to complete the authentication process.\n* Email OTPs provide a simple and effective way to enhance security and safeguard user assets.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/customization/login-ui#chunk-3", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n#\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n\"magic-sdk\"\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n\"magic-sdk\"\n\n02\n\n02\n\n03\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_PUBLISHABLE_API_KEY'\n\n,\n\n{\n\n03\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_PUBLISHABLE_API_KEY'\n\n,\n\n{\n\n04\n\nnetwork\n\n:\n\n\"goerli\"\n\n,\n\n04\n\nnetwork\n\n:\n\n\"goerli\"\n\n,\n\n05\n\n}\n\n)\n\n;\n\n05\n\n}\n\n)\n\n;\n\n06\n\n06\n\n07\n\nconst\n\naccounts\n\n=\n\nawait\n\nmagic\n\n.\n\nwallet\n\n.\n\nconnectWithUI\n\n(\n\n)\n\n;\n\n07\n\nconst\n\naccounts\n\n=\n\nawait\n\nmagic\n\n.\n\nwallet\n\n.\n\nconnectWithUI\n\n(\n\n)\n\n;\n\nThe example above authenticates the user and connects to the Ethereum Goerli Testnet. To connect to a different network, simply replace the configuration with another of the 25+ chains supported by Magic.\n\nthe 25+ chains supported by Magic", "explanation": "**Section Title:** `#Usage - #Login`\n\n**Main Purpose:** This documentation section provides an example code snippet for authenticating users and connecting to the Ethereum Goerli Testnet using the Magic Labs embedded wallet.\n\n**Key Points:**\n\n1. The example uses the `Magic` class from the \"magic-sdk\" library.\n2. It creates a new instance of the `Magic` class with a publishable API key, specifying the network as \"goerli\".\n3. The code then calls the `connectWithUI()` method to authenticate the user and connect to the Ethereum Goerli Testnet.\n4. The section mentions that to connect to a different network, simply replace the configuration with another supported chain (25+ chains are mentioned).\n\n**In summary**, this documentation section provides a concise example of how to use the Magic Labs embedded wallet for authentication and connecting to a specific network (Ethereum Goerli Testnet).", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/customization/login-ui#chunk-4", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nUniversal wallets will soon be merged with Dedicated Wallets into a single product line. Universal apps created before February 7, 2024 will work as expected with no change. See our blog post to learn more.\n\nblog post\n\n#\n\n#\n\nIf a user chooses to authenticate through their email, they will recieve a unique code to their email that is generated per attempt and the user will be required to enter it to authenticate. OTPs for email provide a simple and effective way to increase security and ensure the safety of user assets.", "explanation": "**What it's about:**\n\nThis documentation section explains how users can authenticate (log in) to their Magic Labs wallet using an Email One-Time Passcode (OTP).\n\n**Main purpose:**\n\nThe main purpose is to describe a specific authentication method that uses a unique, randomly generated code sent to the user's email address. This code must be entered by the user to successfully authenticate and access their wallet. The OTP provides an additional layer of security to protect user assets.\n\nIn simple terms, this section explains how Magic Labs users can use an email-based verification process to securely log in to their wallets.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/customization/login-ui#chunk-5", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nGoogle One-Tap logins for Universal Wallet are not available on Mobile SDKs or through in-app browsers.\n\nOne-tap login with Google provides effortless authentication for your users that have Google Accounts. Utilizing the 'One Tap' sign-up API, users can create a secure and passwordless account with just one tap, all within the context of your application. Magic handles all of the authentication flow with Google with no setup for you dApp required.\n\nUsers that sign in using the email OTP method and/or Google One-Tap will resolve to the same address as long as their gmail address is a personal account with the ending @gmail.com and is automatically linked. Auto-linking is not supported for custom G Suite/Google Workspace domains (such as test@acme.co).\n\n@gmail.com\n\ntest@acme.co", "explanation": "**What is Google One-Tap?**\n\nGoogle One-Tap is a feature that allows users to authenticate with their Google Account using a single tap, without the need for a password or OTP. This means that users can quickly and easily create a secure account within your application, with Magic handling all of the authentication flow with Google.\n\n**Main Purpose:**\n\nThe main purpose of Google One-Tap is to provide effortless authentication for users who have Google Accounts, making it easier for them to create a secure account without needing to remember passwords or OTPs.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/customization/login-ui#chunk-6", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nMagic Wallet allows users to connect with existing third-party wallets (e.g. MetaMask). When a user is asked for a public address, they can select a supported third-party wallet to use from the Magic Wallet login view. For more information, visit Third Party Wallets.\n\nThird Party Wallets", "explanation": "**What it's about:**\nThis documentation section explains that Magic Wallet allows users to connect with existing third-party wallets, such as MetaMask.\n\n**Main purpose:**\nThe main purpose of this section is to inform users and developers that they can use Magic Wallet in conjunction with other popular wallet solutions, making it easier for users to access their existing funds.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/customization/login-ui#chunk-7", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nMagic offers a utility method connectWithUI which will ask permission from your user's selected authentication method to connect to your dApp.\n\nconnectWithUI\n\nconnectWithUI\n\n#\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n\"magic-sdk\"\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n\"magic-sdk\"\n\n02\n\nimport\n\nWeb3\n\nfrom\n\n'web3'\n\n;\n\n02\n\nimport\n\nWeb3\n\nfrom\n\n'web3'\n\n;\n\n03\n\n03\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_PUBLISHABLE_API_KEY'\n\n,\n\n{\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_PUBLISHABLE_API_KEY'\n\n,\n\n{\n\n05\n\nnetwork\n\n:\n\n\"goerli\"\n\n,\n\n05\n\nnetwork\n\n:\n\n\"goerli\"\n\n,\n\n06\n\n}\n\n)\n\n;\n\n06\n\n}\n\n)\n\n;\n\n07\n\n07\n\n08\n\nconst\n\nprovider\n\n=\n\nawait\n\nmagic\n\n.\n\nwallet\n\n.\n\ngetProvider\n\n(\n\n)\n\n;\n\n08\n\nconst\n\nprovider\n\n=\n\nawait\n\nmagic\n\n.\n\nwallet\n\n.\n\ngetProvider\n\n(\n\n)\n\n;\n\n09\n\n09\n\n10\n\nconst\n\nweb3\n\n=\n\nnew\n\nWeb3\n\n(\n\nprovider\n\n)\n\n;\n\n10\n\nconst\n\nweb3\n\n=\n\nnew\n\nWeb3\n\n(\n\nprovider\n\n)\n\n;\n\n11\n\n11\n\n12\n\nconst\n\naccounts\n\n=\n\nawait\n\nmagic\n\n.\n\nwallet\n\n.\n\nconnectWithUI\n\n(\n\n)\n\n;\n\n12\n\nconst\n\naccounts\n\n=\n\nawait\n\nmagic\n\n.\n\nwallet\n\n.\n\nconnectWithUI\n\n(\n\n)\n\n;", "explanation": "This documentation section is titled \"#Usage - #Login\" and it's about the `connectWithUI` method provided by Magic Labs, a service for authentication and embedded wallets.\n\n**Main Purpose:**\n\nThe main purpose of this method is to ask permission from the user's selected authentication method (e.g. MetaMask, Google Authenticator, etc.) to connect to your web application or decentralized app (dApp).\n\n**How it works:**\n\n1. The `connectWithUI` method is called on an instance of the Magic Labs SDK (`magic` in this example).\n2. This method will prompt the user to select their preferred authentication method.\n3. Once the user selects and authorizes the connection, the method returns a list of available accounts (e.g. Ethereum addresses) associated with that authentication method.\n\n**Example Code:**\n\nThe provided code snippet demonstrates how to use `connectWithUI` in a JavaScript environment:\n```javascript\nconst magic = new Magic('YOUR_PUBLISHABLE_API_KEY', { network: 'goerli' });\nconst provider = await magic.wallet.getProvider();\nconst web3 = new Web3(provider);\nconst accounts = await magic.wallet.connectWithUI();\n```\nIn this example, the `connectWithUI` method is called on an instance of the Magic Labs SDK (`magic`) and it returns a list of available accounts (`accounts`).", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/customization/login-ui#chunk-8", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nIf you require a signature from the wallet\u2019s private keys on authentication (same as a personal sign) in order to validate the ownership of the wallet address, you can do this by catching the following event after a login occurs as shown below. This requires the domain you are on is on the domain allowlist and verify the token using our Magic Admin SDK's token module.\n\ndomain allowlist\n\nMagic Admin SDK\n\nIf you would like to verify the ownership of a user's wallet address in a single login step, you can optionally listen for the id-token-created event that's fired after connectWithUI is called. The token will only be emitted for email or Google logins, and not for any 3rd party wallet connections.\n\nid-token-created\n\nconnectWithUI\n\nCopy\n\n01\n\n/* On the front end, collect the token as the user signs in */\n\n\u2060\n\n01\n\n/* On the front end, collect the token as the user signs in */\n\n\u2060\n\n02\n\nawait\n\n\u2060magic\n\n.\n\nwallet\n\n.\n\nconnectWithUI\n\n(\n\n)\n\n.\n\non\n\n(\n\n'id-token-created'\n\n,\n\n(\n\nparams\n\n)\n\n=>\n\n{\n\n02\n\nawait\n\n\u2060magic\n\n.\n\nwallet\n\n.\n\nconnectWithUI\n\n(\n\n)\n\n.\n\non\n\n(\n\n'id-token-created'\n\n,\n\n(\n\nparams\n\n)\n\n=>\n\n{\n\n03\n\nconst\n\n{\n\nidToken\n\n}\n\n=\n\nparams\n\n;\n\n03\n\nconst\n\n{\n\nidToken\n\n}\n\n=\n\nparams\n\n;\n\n04\n\nconsole\n\n.\n\nlog\n\n(\n\nidToken\n\n)\n\n;\n\n04\n\nconsole\n\n.\n\nlog\n\n(\n\nidToken\n\n)\n\n;\n\n05\n\n// send to your resource server for validation with the Magic Admin SDK\n\n05\n\n// send to your resource server for validation with the Magic Admin SDK\n\n06\n\n// ...\n\n06\n\n// ...\n\n07\n\n}\n\n)\n\n;\n\n07\n\n}\n\n)\n\n;\n\n08\n\n08\n\n09\n\n/* Alternative to the above, if you are using a third party wallet provider or tool and wish to recieve the event, you can do the following. */\n\n09\n\n/* Alternative to the above, if you are using a third party wallet provider or tool and wish to recieve the event, you can do the following. */\n\n10\n\nawait\n\nmagic\n\n.\n\nrpcProvider\n\n.\n\nenable\n\n(\n\n)\n\n.\n\non\n\n(\n\n'id-token-created'\n\n,\n\n(\n\nparams\n\n)\n\n=>\n\n{\n\n10\n\nawait\n\nmagic\n\n.\n\nrpcProvider\n\n.\n\nenable\n\n(\n\n)\n\n.\n\non\n\n(\n\n'id-token-created'\n\n,\n\n(\n\nparams\n\n)\n\n=>\n\n{\n\n11\n\nconst\n\n{\n\nidToken\n\n}\n\n=\n\nparams\n\n;\n\n11\n\nconst\n\n{\n\nidToken\n\n}\n\n=\n\nparams\n\n;\n\n12\n\nconsole\n\n.\n\nlog\n\n(\n\nidToken\n\n)\n\n;\n\n12\n\nconsole\n\n.\n\nlog\n\n(\n\nidToken\n\n)\n\n;\n\n13\n\n// send to your resource server for validation with the Magic Admin SDK\n\n13\n\n// send to your resource server for validation with the Magic Admin SDK\n\n14\n\n// ...\n\n14\n\n// ...\n\n15\n\n}\n\n)\n\n;\n\n15\n\n}\n\n)\n\n;\n\n16\n\n16\n\n17\n\n/* On your own resource server */\n\n17\n\n/* On your own resource server */\n\n18\n\nconst\n\n{\n\nMagicAdmin\n\n}\n\n=\n\nrequire\n\n(\n\n'@magic-sdk/admin'\n\n)\n\n;\n\n18\n\nconst\n\n{\n\nMagicAdmin\n\n}\n\n=\n\nrequire\n\n(\n\n'@magic-sdk/admin'\n\n)\n\n;\n\n19\n\nconst\n\nmagicAdmin\n\n=\n\nawait\n\nMagicAdmin\n\n.\n\ninit\n\n(\n\n'YOUR_SECRET_API_KEY'\n\n)\n\n;\n\n19\n\nconst\n\nmagicAdmin\n\n=\n\nawait\n\nMagicAdmin\n\n.\n\ninit\n\n(\n\n'YOUR_SECRET_API_KEY'\n\n)\n\n;\n\n20\n\n// ...\n\n20\n\n// ...\n\n21\n\n21\n\n22\n\n/* In some context where the ID token from the FE is passed in */\n\n22\n\n/* In some context where the ID token from the FE is passed in */\n\n23\n\napp\n\n.\n\nget\n\n(\n\n'/login'\n\n,\n\nasync\n\n(\n\nreq\n\n:\n\nany\n\n,\n\nres\n\n:\n\nany\n\n)\n\n=>\n\n{\n\n23\n\napp\n\n.\n\nget\n\n(\n\n'/login'\n\n,\n\nasync\n\n(\n\nreq\n\n:\n\nany\n\n,\n\nres\n\n:\n\nany\n\n)\n\n=>\n\n{\n\n24\n\n/*\n\n24\n\n/*\n\n25\n\nAssumes DIDToken was passed in the Authorization header\n\n25\n\nAssumes DIDToken was passed in the Authorization header\n\n26\n\nin the standard `Bearer {token}` format.\n\n26\n\nin the standard `Bearer {token}` format.\n\n27\n\n*/\n\n27\n\n*/\n\n28\n\nconst\n\nDIDToken\n\n=\n\nreq\n\n.\n\nheaders\n\n.\n\nauthorization\n\n.\n\nsubstring\n\n(\n\n7\n\n)\n\n;\n\n28\n\nconst\n\nDIDToken\n\n=\n\nreq\n\n.\n\nheaders\n\n.\n\nauthorization\n\n.\n\nsubstring\n\n(\n\n7\n\n)\n\n;\n\n29\n\nmagicAdmin\n\n.\n\ntoken\n\n.\n\nvalidate\n\n(\n\nDIDToken\n\n)\n\n;\n\n// returns void, throws error if invalid\n\n29\n\nmagicAdmin\n\n.\n\ntoken\n\n.\n\nvalidate\n\n(\n\nDIDToken\n\n)\n\n;\n\n// returns void, throws error if invalid\n\n30\n\n/* User is logged in. Set cookies! */\n\n30\n\n/* User is logged in. Set cookies! */\n\n31\n\n}\n\n)\n\n;\n\n31\n\n}\n\n)\n\n;\n\nSecurity Notes:\n\n\u2022 The token provided is only valid for 90 seconds after the user has logged in.\n\n\u2022 In the Admin SDK, the user\u2019s token is validated against your client\u2019s unique identifier to ensure the signature occurred on your application\u2019s site.\n\n\u2060Alternatively, you can also explictly request a personal signature from the user with an additional confirmation screen.\n\npersonal signature", "explanation": "**What is \"Log in with wallet verification\"?**\n\n\"Log in with wallet verification\" is a feature that allows users to authenticate themselves using their digital wallet (e.g. MetaMask, Ledger) instead of entering a password or other credentials.\n\n**How does it work?**\n\nWhen a user logs in with their digital wallet, the Magic SDK emits an `id-token-created` event, which can be caught by your application. This event contains a token that can be used to verify the user's identity on your server-side.\n\nTo validate this token, you need to use the Magic Admin SDK to verify it against your client's unique identifier. If the token is valid, it means the user has successfully authenticated with their digital wallet.\n\n**What are the benefits of \"Log in with wallet verification\"?**\n\nThis feature provides an additional layer of security for users by not storing passwords or other sensitive information on your server-side. It also allows you to ensure that only legitimate users can access your application's features and data.\n\n**How is this feature implemented?**\n\nThe implementation involves using the Magic SDK to emit an `id-token-created` event when a user logs in with their digital wallet, and then catching this event on your server-side to retrieve the token. You would then use the Magic Admin SDK to validate this token against your client's unique identifier.\n\n**Security Notes:**\n\n* The token provided is only valid for 90 seconds after the user has logged in.\n* In the Admin SDK, the user\u2019s token is validated against your client\u2019s unique identifier to ensure the signature occurred on your application\u2019s site.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/customization/login-ui#chunk-9", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nFind out more about Device Registration here.\n\nhere", "explanation": "The provided documentation section '#Device Registration' is a placeholder for a link to further information about Device Registration. However, based on the context of the URL 'https://magic.link/docs/authentication/customization/login-ui' which is about customizing the login UI for authentication, Device Registration likely refers to the process of linking a user's device to their Magic Labs embedded wallet account.\n\nThe main purpose of Device Registration is to securely associate a user's device with their wallet, enabling features such as:\n\n- Two-Factor Authentication (2FA)\n- Session persistence across devices\n- Secure authentication for transactions\n\nBy registering a device, users can enjoy a more seamless experience, while Magic Labs ensures enhanced security and authentication for its embedded wallet.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/customization/login-ui#chunk-10", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 You can configure which authentication methods and/or third party wallets are supported by your dApp in your Dashboard settings.\n\n\u2022 See how to brand this experience with your own logo and colors in the customization section.\n\nDashboard settings\n\ncustomization section", "explanation": "This documentation section is about configuring the login experience for a decentralized application (dApp) using Magic Labs embedded wallet.\n\n**Main Purpose:**\nThe main purpose of this configuration is to allow developers to customize which authentication methods and third-party wallets are supported by their dApp. This enables them to tailor the login experience to their specific needs and branding.\n\nIn simple terms, this section explains how to set up and customize the login UI for a Magic Labs embedded wallet in a dApp's dashboard settings.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/customization/login-ui#chunk-11", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 Magic Connect Verification Demo\n\n\u2022 magic.wallet.connectWithUI()\n\n\u2022 magic.wallet.getProvider()\n\nMagic Connect Verification Demo\n\nmagic.wallet.connectWithUI()\n\nmagic.wallet.connectWithUI()\n\nmagic.wallet.getProvider()\n\nmagic.wallet.getProvider()", "explanation": "This section of the documentation is titled '#Resources' and it appears to be a collection of code-related resources.\n\nHere's what each line represents:\n\n* **Magic Connect Verification Demo**: This is likely a link or reference to a demo or example implementation that showcases how to use Magic Connect for verification.\n* **magic.wallet.connectWithUI()** (appears 3 times): This is a function provided by the Magic Labs embedded wallet, which allows users to connect with the wallet using a user interface. The repetition of this line suggests it's an important function or method that needs to be called in specific scenarios.\n* **magic.wallet.getProvider()** (appears 2 times): This is another function provided by the Magic Labs embedded wallet, which returns the provider associated with the current wallet connection.\n\nThe main purpose of this '#Resources' section is to provide a quick reference point for developers or users who need to access specific functions or demos related to Magic Connect and the Magic Labs embedded wallet. It's likely intended to be a \"one-stop\" resource for looking up implementation details, demo links, or other relevant code snippets.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/customization/login-ui#chunk-12", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nMagic interacts with the Tezos blockchain via Magic's extension NPM package @magic-ext/taquito. The Tezos extension also lets you interact with the blockchain using methods from Tezos's Taquito SDK.\n\nTezos\n\n@magic-ext/taquito\n\n@magic-ext/taquito\n\nTaquito\n\nYou can skip straight to our kitchen sink example directly:\n\n\ud83d\udc49 Tezos Taquito Example\n\nTezos Taquito Example\n\nCopy\n\n01\n\nnpm\n\ninstall\n\n--save @magic-ext/taquito\n\n01\n\nnpm\n\ninstall\n\n--save @magic-ext/taquito", "explanation": "This documentation section is about installing and using the Tezos extension in Magic Labs, a platform for interacting with blockchains. Here's a clear and concise explanation of what it's about:\n\n**Main Purpose:** To guide users on how to install and start working with the Tezos blockchain in Magic Labs.\n\n**Key Points:**\n\n1. **Using the @magic-ext/taquito package**: The documentation explains that Magic interacts with the Tezos blockchain through an NPM (Node Package Manager) package called `@magic-ext/taquito`.\n2. **Alternative to direct Taquito SDK usage**: Users are informed that they can skip the installation process and jump straight to a \"kitchen sink example\" ( likely a more extensive demo or tutorial).\n3. **Installation instruction**: The documentation provides an example command for installing the `@magic-ext/taquito` package using npm: `npm install --save @magic-ext/taquito`.\n\nIn summary, this section is focused on helping users get started with using Tezos in Magic Labs by installing the necessary extension package and providing a clear installation process.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/featured-chains/tezos#chunk-1", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\nimport\n\n{\n\nTaquitoExtension\n\n}\n\nfrom\n\n'@magic-ext/taquito'\n\n;\n\n02\n\nimport\n\n{\n\nTaquitoExtension\n\n}\n\nfrom\n\n'@magic-ext/taquito'\n\n;\n\n03\n\n03\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_API_KEY'\n\n,\n\n{\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_API_KEY'\n\n,\n\n{\n\n05\n\nextensions\n\n:\n\n[\n\n05\n\nextensions\n\n:\n\n[\n\n06\n\nnew\n\nTaquitoExtension\n\n(\n\n{\n\n06\n\nnew\n\nTaquitoExtension\n\n(\n\n{\n\n07\n\nrpcUrl\n\n:\n\n'TEZOS_RPC_NODE_URL'\n\n,\n\n07\n\nrpcUrl\n\n:\n\n'TEZOS_RPC_NODE_URL'\n\n,\n\n08\n\n}\n\n)\n\n,\n\n08\n\n}\n\n)\n\n,\n\n09\n\n]\n\n,\n\n09\n\n]\n\n,\n\n10\n\n}\n\n)\n\n;\n\n10\n\n}\n\n)\n\n;", "explanation": "This documentation section is about initializing a Magic Labs embedded wallet using the `magic-sdk`. Here's a breakdown of its main points:\n\n**Purpose:** This code snippet initializes a new instance of the `Magic` class, which represents an embedded wallet.\n\n**Key components:**\n\n1. **Importing necessary modules**: The first two lines import the `Magic` class from the `magic-sdk` module.\n2. **Creating a Magic instance**: A new instance of the `Magic` class is created using the `new` keyword. This instance is stored in a variable named `magic`.\n3. **Passing configuration options**: When creating the `Magic` instance, two arguments are passed: `YOUR_API_KEY` and an object with a single property called `extensions`.\n4. **Configuring extensions**: The `extensions` property is set to an array containing a new instance of the `TaquitoExtension` class.\n5. **Passing configuration options to TaquitoExtension**: The `new TaquitoExtension()` constructor is passed an object with a single property called `rpcUrl`. This sets the RPC URL for the Tezos network.\n\n**Main purpose:** The main purpose of this code snippet is to initialize a Magic Labs embedded wallet instance, which can be used to interact with the Tezos blockchain.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/featured-chains/tezos#chunk-2", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n#\n\nNote that the Magic Taquito extension follows the method names and conventions by Taquito. To send a standard Tezos blockchain transaction, you can call the magic.taquito.createMagicSigner method to create a signer to inject to Tezos client.\n\nTaquito\n\nmagic.taquito.createMagicSigner\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\nimport\n\n{\n\nTaquitoExtension\n\n}\n\nfrom\n\n'@magic-ext/taquito'\n\n;\n\n02\n\nimport\n\n{\n\nTaquitoExtension\n\n}\n\nfrom\n\n'@magic-ext/taquito'\n\n;\n\n03\n\nimport\n\n{\n\nTezosToolkit\n\n}\n\nfrom\n\n'@taquito/taquito'\n\n;\n\n03\n\nimport\n\n{\n\nTezosToolkit\n\n}\n\nfrom\n\n'@taquito/taquito'\n\n;\n\n04\n\n04\n\n05\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_API_KEY'\n\n,\n\n{\n\n05\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_API_KEY'\n\n,\n\n{\n\n06\n\nextensions\n\n:\n\n[\n\n06\n\nextensions\n\n:\n\n[\n\n07\n\nnew\n\nTaquitoExtension\n\n(\n\n{\n\n07\n\nnew\n\nTaquitoExtension\n\n(\n\n{\n\n08\n\nrpcUrl\n\n:\n\n'https://rpc.oxfordnet.teztnets.com'\n\n,\n\n08\n\nrpcUrl\n\n:\n\n'https://rpc.oxfordnet.teztnets.com'\n\n,\n\n09\n\n}\n\n)\n\n,\n\n09\n\n}\n\n)\n\n,\n\n10\n\n]\n\n,\n\n10\n\n]\n\n,\n\n11\n\n}\n\n)\n\n;\n\n11\n\n}\n\n)\n\n;\n\n12\n\n12\n\n13\n\nconst\n\nTezos\n\n=\n\nnew\n\nTezosToolkit\n\n(\n\n'https://rpc.oxfordnet.teztnets.com'\n\n)\n\n;\n\n13\n\nconst\n\nTezos\n\n=\n\nnew\n\nTezosToolkit\n\n(\n\n'https://rpc.oxfordnet.teztnets.com'\n\n)\n\n;\n\n14\n\nconst\n\nmagicSigner\n\n=\n\nawait\n\nmagic\n\n.\n\ntaquito\n\n.\n\ncreateMagicSigner\n\n(\n\n)\n\n;\n\n14\n\nconst\n\nmagicSigner\n\n=\n\nawait\n\nmagic\n\n.\n\ntaquito\n\n.\n\ncreateMagicSigner\n\n(\n\n)\n\n;\n\n15\n\n15\n\n16\n\nTezos\n\n.\n\nsetProvider\n\n(\n\n{\n\nsigner\n\n:\n\nmagicSigner\n\n}\n\n)\n\n;\n\n16\n\nTezos\n\n.\n\nsetProvider\n\n(\n\n{\n\nsigner\n\n:\n\nmagicSigner\n\n}\n\n)\n\n;\n\n17\n\n17\n\n18\n\nconst\n\nop\n\n=\n\nawait\n\nTezos\n\n.\n\nwallet\n\n.\n\ntransfer\n\n(\n\n{\n\nto\n\n:\n\ndestinationAddress\n\n,\n\namount\n\n:\n\nsendXTZAmount\n\n}\n\n)\n\n;\n\n18\n\nconst\n\nop\n\n=\n\nawait\n\nTezos\n\n.\n\nwallet\n\n.\n\ntransfer\n\n(\n\n{\n\nto\n\n:\n\ndestinationAddress\n\n,\n\namount\n\n:\n\nsendXTZAmount\n\n}\n\n)\n\n;\n\n19\n\n19\n\n20\n\nconst\n\nresult\n\n=\n\nawait\n\nop\n\n.\n\nconfirmation\n\n(\n\n)\n\n;\n\n20\n\nconst\n\nresult\n\n=\n\nawait\n\nop\n\n.\n\nconfirmation\n\n(\n\n)\n\n;\n\n21\n\n21\n\n22\n\nconsole\n\n.\n\nlog\n\n(\n\n'result'\n\n,\n\nresult\n\n)\n\n22\n\nconsole\n\n.\n\nlog\n\n(\n\n'result'\n\n,\n\nresult\n\n)", "explanation": "**Common Methods - #Send Transaction**\n\nThis section of the documentation explains how to send a standard Tezos blockchain transaction using the Magic Labs embedded wallet.\n\n### Overview\n\nTo send a transaction, you need to:\n\n1. Create a signer using `magic.taquito.createMagicSigner()`.\n2. Set the provider on the Taquito client with the created signer.\n3. Use the `transfer()` method from the Taquito client to send the transaction.\n\n### Code Example\n\nThe code example demonstrates how to perform these steps:\n```javascript\nimport { Magic } from 'magic-sdk';\nimport { TezosToolkit, TaquitoExtension } from '@taquito/taquito';\n\nconst magic = new Magic('YOUR_API_KEY', {\n  extensions: [new TaquitoExtension({\n    rpcUrl: 'https://rpc.oxfordnet.teztnets.com',\n  })],\n});\n\nconst tezos = new TezosToolkit('https://rpc.oxfordnet.teztnets.com');\n\nconst magicSigner = await magic.taquito.createMagicSigner();\ntezos.setProvider({ signer: magicSigner });\n\nconst op = await tezos.wallet.transfer({\n  to: destinationAddress,\n  amount: sendXTZAmount,\n});\n\nconst result = await op.confirmation();\nconsole.log('result', result);\n```\n**Key Points:**\n\n* `magic.taquito.createMagicSigner()` creates a signer that can be used with the Taquito client.\n* `tezos.setProvider({ signer: magicSigner })` sets the provider on the Taquito client with the created signer.\n* `tezos.wallet.transfer()` sends the transaction to the specified address and amount.\n* `op.confirmation()` waits for the transaction to be confirmed on the blockchain.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/featured-chains/tezos#chunk-3", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 Tezos Block Explorer\n\nTezos Block Explorer", "explanation": "The \"#Resources\" section appears to be a list of external resources related to the Tezos blockchain. Specifically, it mentions the \"Tezos Block Explorer\".\n\nThe Tezos Block Explorer is likely a web-based interface that allows users to view and explore the Tezos blockchain in real-time or historical context. It's a tool that provides information about the blockchain, such as:\n\n* Blocks: Details about individual blocks on the blockchain, including their hash, timestamp, and contents.\n* Transactions: Information about specific transactions that have taken place on the network.\n* Addresses: Data related to addresses on the Tezos blockchain, like balance, transaction history, and more.\n\nThe main purpose of the Tezos Block Explorer is to serve as a useful reference for developers, researchers, and users who want to:\n\n* Understand how the Tezos blockchain works\n* Investigate specific transactions or blocks\n* Monitor the network's activity\n* Verify information about addresses or balances\n\nBy providing access to this explorer, the \"#Resources\" section aims to make it easier for customers to find and use relevant tools and resources related to the Magic Labs embedded wallet documentation on the Tezos blockchain.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/featured-chains/tezos#chunk-4", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nThe Magic package for Python is your entry-point to secure, passwordless authentication for your application. This guide will cover some important topics for getting started with Magic Python package and to make the most of Magic's features.", "explanation": "This documentation section, titled \"Python API Reference - Overview\", is an introduction to the Magic Python SDK (Software Development Kit). Its main purpose is to provide a starting point for developers who want to integrate Magic Labs' authentication feature into their Python-based applications.\n\nIn simple terms, this guide explains how to use the Magic Python package to enable secure and passwordless authentication in your application. It likely covers essential topics such as:\n\n* Importing and initializing the Magic library\n* Authenticating users using Magic's features (e.g., login, logout)\n* Handling errors and exceptions\n\nBy following this guide, developers can quickly get started with implementing Magic Labs' authentication capabilities in their Python-based applications.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/python#chunk-1", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nThe Magic class is the entry-point to the Magic SDK. It must be instantiated with a Magic secret key.\n\n#\n\nCurrent SDK is built with Python3.6. Testing for Python3.6+ will be added soon.\n\nIf you are interested in using the SDK with the earlier versions of Python (ex: 2.7+), please create a ticket in this repo and let us know.\n\nrepo\n\nCopy\n\n01\n\npip\n\ninstall\n\nmagic-admin\n\n01\n\npip\n\ninstall\n\nmagic-admin", "explanation": "**Getting Started - Installation**\n\nThis documentation section provides the necessary information for installing and setting up the Magic Labs embedded wallet SDK in Python.\n\n**Main Purpose:**\n\nThe main purpose of this section is to guide users through the process of installing the required dependencies, specifically the `magic-admin` package, which is necessary for using the Magic SDK.\n\n**Key Points:**\n\n1. The Magic class must be instantiated with a Magic secret key.\n2. The current SDK version supports Python 3.6 and later versions. (Testing for earlier Python versions will be added soon.)\n3. Users interested in using the SDK with Python 2.7 or earlier should create a ticket in the repository.\n\n**Installation Steps:**\n\nTo install the required dependencies, users can run the following command in their terminal:\n\n1. `pip install magic-admin` (install the `magic-admin` package)\n\nBy following these steps and installing the necessary dependencies, users can successfully set up the Magic Labs embedded wallet SDK in Python and start using its features.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/python#chunk-2", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n#\n\nMagic()\n\nParameter\n\nType\n\nDefinition\n\napi_secret_key\n\napi_secret_key\n\nstr\n\nYour secret API Key retrieved from the Magic Dashboard.\n\nretries?\n\nretries?\n\nnum\n\nTotal number of retries to allow.\n\ntimeout?\n\ntimeout?\n\nnum\n\nA period of time the request is going to wait for a response.\n\nbackoff_factor?\n\nbackoff_factor?\n\nnum\n\nA backoff factor to apply between retry attempts.", "explanation": "**Constructor - Magic()**\n\nThe `Magic()` constructor is a key component in initializing and configuring the Magic Labs embedded wallet SDK in Python.\n\n**Main Purpose:**\n\nIts primary purpose is to create an instance of the Magic wallet, allowing developers to use its features and functionality in their applications.\n\n**Key Parameters:**\n\n*   **api_secret_key**: This is the required parameter that takes a string value. It represents your secret API Key, which you need to retrieve from the Magic Dashboard.\n*   **retries?**, **timeout?**, and **backoff_factor?**: These are optional parameters that allow you to customize the retry behavior of the SDK.\n\n**Customization Options:**\n\nBy providing values for these optional parameters, you can control how the SDK handles retries in case of errors. The options are:\n\n*   **retries**: Sets the total number of retries to allow.\n*   **timeout**: Specifies a period of time the request will wait for a response before retrying.\n*   **backoff_factor**: Applies a backoff factor between retry attempts, allowing you to adjust how aggressively the SDK retries requests.\n\n**Example:**\n\nHere's an example of how you might use the `Magic()` constructor in your code:\n\n```python\nfrom magic import Magic\n\nmagic = Magic(\n    api_secret_key=\"YOUR_API_SECRET_KEY_HERE\",\n    retries=3,\n    timeout=5.0,\n    backoff_factor=2.0\n)\n\n# Now you can use the 'magic' object to interact with the Magic wallet.\n```\n\nBy following this documentation, developers can effectively utilize the Magic Labs embedded wallet SDK in their Python applications, leveraging its features and functionality while ensuring reliable and efficient communication with the Magic servers.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/python#chunk-3", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nInitialize Magic instance.\n\nCopy\n\n01\n\nfrom\n\nmagic_admin\n\nimport\n\nMagic\n\n01\n\nfrom\n\nmagic_admin\n\nimport\n\nMagic\n\n02\n\n02\n\n03\n\nmagic\n\n=\n\nMagic\n\n(\n\n03\n\nmagic\n\n=\n\nMagic\n\n(\n\n04\n\napi_secret_key\n\n=\n\n'<SECRET_API_KEY>'\n\n,\n\n04\n\napi_secret_key\n\n=\n\n'<SECRET_API_KEY>'\n\n,\n\n05\n\nretries\n\n=\n\n5\n\n,\n\n05\n\nretries\n\n=\n\n5\n\n,\n\n06\n\ntimeout\n\n=\n\n5\n\n,\n\n06\n\ntimeout\n\n=\n\n5\n\n,\n\n07\n\nbackoff_factor\n\n=\n\n0.01\n\n,\n\n07\n\nbackoff_factor\n\n=\n\n0.01\n\n,\n\n08\n\n)\n\n08\n\n)", "explanation": "**Initialization**\n\nThe `#Initialization` section of the Magic Labs embedded wallet documentation explains how to initialize a Magic instance in Python.\n\n**Main Purpose:**\n\nThe main purpose of this section is to provide a code example that demonstrates how to create and configure a Magic instance, which is necessary for using the Magic Labs wallet API.\n\n**Key Points:**\n\n* The `Magic` class from the `magic_admin` library is imported.\n* A new Magic instance is created by calling the `Magic` class constructor with various configuration options:\n\t+ `api_secret_key`: a secret key used to authenticate API requests (value replaced with `<SECRET_API_KEY>`).\n\t+ `retries`: the number of retries for API requests (default value: 5).\n\t+ `timeout`: the timeout in seconds for API requests (default value: 5).\n\t+ `backoff_factor`: the backoff factor used when retrying failed API requests (default value: 0.01).\n\n**Example Usage:**\n\nTo use this code, you would replace `<SECRET_API_KEY>` with your actual Magic Labs API secret key and assign the resulting Magic instance to a variable (e.g., `magic`) for further usage in your application.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/python#chunk-4", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nThe token resource and its methods are accessible on the Magic instance by the Token attribute. It provides methods to interact with the DID Token.\n\nToken\n\nThe token resource does not make any API calls to the Magic server.\n\nCopy\n\n01\n\nfrom\n\nmagic_admin\n\nimport\n\nMagic\n\n01\n\nfrom\n\nmagic_admin\n\nimport\n\nMagic\n\n02\n\n02\n\n03\n\nmagic\n\n=\n\nMagic\n\n(\n\napi_secret_key\n\n=\n\n'<SECRET_API_KEY>'\n\n)\n\n03\n\nmagic\n\n=\n\nMagic\n\n(\n\napi_secret_key\n\n=\n\n'<SECRET_API_KEY>'\n\n)\n\n04\n\n04\n\n05\n\nmagic\n\n.\n\nToken\n\n05\n\nmagic\n\n.\n\nToken\n\n06\n\nmagic\n\n.\n\nToken\n\n.\n\nget_issuer\n\n06\n\nmagic\n\n.\n\nToken\n\n.\n\nget_issuer\n\n07\n\nmagic\n\n.\n\nToken\n\n.\n\nget_public_address\n\n07\n\nmagic\n\n.\n\nToken\n\n.\n\nget_public_address\n\n08\n\nmagic\n\n.\n\nToken\n\n.\n\ndecode\n\n08\n\nmagic\n\n.\n\nToken\n\n.\n\ndecode\n\n09\n\nmagic\n\n.\n\nToken\n\n.\n\nvalidate\n\n09\n\nmagic\n\n.\n\nToken\n\n.\n\nvalidate\n\n#\n\nget_issuer\n\nExtracts the iss from the DID Token.\n\niss\n\nDID Token\n\nCopy\n\n01\n\nToken\n\n.\n\nget_issuer\n\n(\n\ndid_token\n\n)\n\n01\n\nToken\n\n.\n\nget_issuer\n\n(\n\ndid_token\n\n)\n\n#\n\n\u2022 did_token (str): A DID Token generated by a Magic User on the client-side\n\ndid_token", "explanation": "This documentation section is about a specific method called `get_issuer` within the `Token` resource of the Magic Labs embedded wallet.\n\n**Main Purpose:**\nThe primary purpose of this method, `get_issuer`, is to extract and return the issuer (iss) from a given DID Token (Decentralized Identifier Token).\n\n**Key Points:**\n\n1. **No API calls:** This method does not make any requests to the Magic server.\n2. **Input parameter:** The `did_token` (a string) is the input parameter that must be provided to this method.\n3. **Functionality:** It simply extracts and returns the issuer (iss) from the DID Token.\n\n**Example usage:**\nThe documentation snippet shows an example of how to use this method, with a `Magic` instance being created and then calling the `get_issuer` method on its `Token` attribute with a `did_token` string as input.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/python#chunk-5", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 DIDTokenMalformed if the given DID Token is malformed\n\nDIDTokenMalformed", "explanation": "**Error Handling: DIDTokenMalformed**\n\nThe `#Raises` section in the documentation explains the type of error that can be encountered when using the API. Specifically, it highlights that a `DIDTokenMalformed` error will be raised if the provided DID Token (a security token for Decentralized Identifiers) is malformed.\n\n**Main Purpose:**\n\nThe purpose of this section is to inform developers of potential error scenarios, enabling them to anticipate and handle the `DIDTokenMalformed` exception proactively in their application code. This ensures proper error management, preventing crashes, and providing a better overall user experience.\n\n**Example Use Case:**\n\nWhen working with the API, developers can use this information to wrap the code with a try-catch block, checking for the `DIDTokenMalformed` exception. This allows them to provide informative error messages or retry mechanisms, improving the robustness and reliability of their application.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/python#chunk-6", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 A Decentralized ID (iss) of the Magic user who generated the DID Token\n\niss", "explanation": "This section appears to be describing a specific response attribute related to Magic Labs' decentralized identity verification system.\n\nHere's a breakdown of what it means:\n\n* `#Returns`: This is likely indicating that this section is about the expected output or return value when using a particular API endpoint or method.\n* `A Decentralized ID (iss) of the Magic user who generated the DID Token`:\n\t+ A \"Decentralized ID\" (DID) is a unique identifier for a user in a decentralized identity system, like Magic Labs'.\n\t+ The `(iss)` part refers to the issuer of this DID. In this context, it's the Magic user who generated the DID token.\n* `who generated the DID Token`: This phrase indicates that the DID (Decentralized ID) was created or generated by a specific Magic user.\n\nIn summary, this section is describing what information will be returned when querying a particular aspect of Magic Labs' decentralized identity system, specifically regarding the issuer of a DID token.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/python#chunk-7", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nget_public_address\n\nGets the cryptographic public address of the Magic User who generated the supplied DID Token.\n\npublic address\n\nCopy\n\n01\n\nToken\n\n.\n\nget_public_address\n\n(\n\ndid_token\n\n)\n\n01\n\nToken\n\n.\n\nget_public_address\n\n(\n\ndid_token\n\n)\n\n#\n\n\u2022 did_token (str): A DID Token generated by a Magic user on the client-side\n\ndid_token", "explanation": "**Section Overview: `get_public_address`**\n\nThis documentation section is about a function called `get_public_address`, which is part of the Magic Labs embedded wallet SDK for Python.\n\n**Main Purpose:**\n\nThe primary purpose of `get_public_address` is to retrieve the **cryptographic public address** associated with a Magic User who generated a specific DID (Decentralized Identifier) Token.\n\n**Key Points:**\n\n* The function takes one argument, `did_token`, which is a string representing a DID Token generated on the client-side.\n* The function returns the public address of the Magic User who created the `did_token`.\n\nIn summary, `get_public_address` allows your application to identify and authenticate Magic Users by their public addresses, given a valid DID Token.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/python#chunk-8", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 DIDTokenMalformed if the given DID Token is malformed\n\nDIDTokenMalformed", "explanation": "**#Raises Section Explanation**\n\nThe `#Raises` section in the Magic Labs embedded wallet documentation appears to be a part of their API server-side SDK, specifically designed for Python.\n\n**Purpose:**\n\nThe main purpose of this section is to inform developers about the possible errors that may occur when using the Magic Labs Embedded Wallet's APIs. In this case, it specifies one potential error condition:\n\n* **DIDTokenMalformed**: This indicates that an error will be raised if a malformed (invalid or incorrectly formatted) DID Token (Decentralized Identifier) is provided.\n\n**Key Points:**\n\n1. The section highlights the specific error type (`DIDTokenMalformed`) and its associated condition.\n2. It's essential for developers to understand what constitutes a malformed DID Token to avoid this error when using the Magic Labs Embedded Wallet's APIs in their Python applications.\n\nBy providing this information, the `#Raises` section helps developers anticipate and handle potential errors, making it easier to integrate the Magic Labs Embedded Wallet into their systems.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/python#chunk-9", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 A public address of the Magic User who generated the DID Token. Currently, this value is associated with the Ethereum blockchain.\n\npublic address", "explanation": "The `#Returns` section from the Magic Labs embedded wallet documentation appears to be describing a specific response or output that is returned by the system.\n\nBreaking it down:\n\n* The term \"DID Token\" refers to a Decentralized Identifier (DID) token, which is a type of digital identity on blockchain networks.\n* The public address mentioned in this context is associated with the Ethereum blockchain. In simple terms, a public address on Ethereum is similar to an email address or username, but it's used for transactions and interactions on the blockchain network.\n* The phrase \"A public address of the Magic User who generated the DID Token\" suggests that the system is returning a unique identifier (public address) associated with the user who created the DID token.\n\nThe main purpose of this section seems to be informing developers or users about what information they can expect to receive as a result of some operation or API call, likely related to Magic Labs' embedded wallet functionality. \n\nIn essence, it's telling you that when a certain event or action happens in the system (e.g., generating a DID token), you can expect a specific piece of data (the public address) to be returned or made available.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/python#chunk-10", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\ndecode\n\nDecodes a DID Token from a Base64 string into a tuple of its individual components: proof and claim. This method allows you decode the DID Token and inspect the token. You can apply your own rules and validations on top of the current Token.validate method.\n\nproof\n\nclaim\n\nToken.validate\n\nCopy\n\n01\n\nToken\n\n.\n\ndecode\n\n(\n\ndid_token\n\n)\n\n01\n\nToken\n\n.\n\ndecode\n\n(\n\ndid_token\n\n)\n\n#\n\n\u2022 did_token (str): A DID Token generated by a Magic user on the client-side\n\ndid_token", "explanation": "**Decoding a DID Token with `decode`**\n\nThe `decode` method is a part of the Magic Labs embedded wallet documentation, specifically designed for server-side SDKs in Python. Its primary purpose is to **decode a DID (Decentralized Identifier) Token from a Base64 string into its individual components: proof and claim**.\n\nIn simpler terms, this method takes a Base64-encoded DID Token string as input and breaks it down into two parts:\n\n1. **proof**: This contains information about the user's authentication process.\n2. **claim**: This represents the data or assertion being made by the user.\n\nBy using `decode`, you can inspect and validate the DID Token on your server-side, allowing you to apply custom rules and validation checks beyond what's provided by the default `Token.validate` method.\n\nThe method signature is `decode(did_token: str)`, where `did_token` is the Base64-encoded string to be decoded.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/python#chunk-11", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 DIDTokenMalformed if the given DID Token is malformed\n\nDIDTokenMalformed", "explanation": "The `#Raises` section in the documentation is about error handling. Specifically, it lists the potential exceptions that may be raised when using a certain function or method in the Magic Labs embedded wallet API.\n\nIn this case, the `#Raises` section is stating that if you provide a malformed DID (Decentralized Identifier) Token to the function, it may raise a `DIDTokenMalformed` exception. This exception indicates that the provided DID Token is not correctly formatted, making it unusable.\n\nThe main purpose of the `#Raises` section is to inform developers of the potential errors that may occur when using the API, so they can anticipate and handle these errors properly in their code. This helps developers write more robust and error-free code, ultimately improving the user experience.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/python#chunk-12", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 proof (str): A digital signature that proves the validity of the given claim\n\n\u2022 claim (dict): Unsigned data the user asserts. This should equal the proof after Elliptic Curve recovery. See Decentralized ID Token Specification for fields inside the claim.\n\nproof\n\nclaim\n\nclaim\n\nproof\n\nDecentralized ID Token Specification\n\nclaim", "explanation": "**Documentation Section: #Returns**\n\nThe `#Returns` section of the Magic Labs embedded wallet documentation describes the output format of a specific API call.\n\n**Key Components:**\n\n1. **Proof (str)**: A digital signature that verifies the authenticity and integrity of the user's claim.\n2. **Claim (dict)**: An unsigned data object that represents the user's assertion, which should match the `proof` after being processed through Elliptic Curve recovery.\n\n**Main Purpose:**\n\nThe purpose of this section is to inform developers about the expected output format of a server-side SDK API call in Python, specifically regarding Decentralized ID Token Specifications. It provides details on how to handle and verify user assertions (claims) along with their corresponding digital signatures (proofs).", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/python#chunk-13", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nvalidate\n\nValidates a DID token.\n\nCopy\n\n01\n\nmagic\n\n.\n\nToken\n\n.\n\nvalidate\n\n(\n\ndid_token\n\n)\n\n01\n\nmagic\n\n.\n\nToken\n\n.\n\nvalidate\n\n(\n\ndid_token\n\n)\n\n#\n\n\u2022 did_token (str): A DID Token generated by a Magic user on the client-side\n\ndid_token", "explanation": "Based on the provided documentation, I'd be happy to explain what the `#validate` section is about and its main purpose.\n\n**What it does:**\nThe `#validate` section is related to the validation of a Digital Identity Token (DID Token) generated by a Magic user on the client-side. A DID Token is a type of token that represents a user's digital identity, allowing for secure authentication and verification processes.\n\n**Main purpose:**\nThe main purpose of the `validate` method is to validate a given DID Token, ensuring it has not been tampered with or manipulated in any way. This validation process helps to guarantee the authenticity and integrity of the token, which is crucial for secure authentication and authorization purposes.\n\nIn essence, the `validate` method takes a `did_token` string as input and returns a success or failure indication, depending on whether the token is valid or not. This functionality is essential for Magic Labs' embedded wallet documentation to ensure that user identities are properly verified and authenticated throughout various interactions with their wallets and applications.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/python#chunk-14", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 DIDTokenMalformed if the given DID Token is malformed\n\n\u2022 DIDTokenInvalid if the given DID Token is invalid\n\nDIDTokenMalformed\n\nDIDTokenInvalid", "explanation": "Based on the provided documentation section, here's what I can infer:\n\n**#Raises**\n\nThis section appears to be a part of an error handling or exception management system.\n\n**Main Purpose:**\n\nThe main purpose of this section is to document and specify the types of exceptions that may occur when working with DID (Decentralized Identifier) Tokens in the Magic Labs embedded wallet.\n\n**Specifically, it mentions two types of errors:**\n\n1. **DIDTokenMalformed**: This error occurs when a malformed DID Token is provided.\n2. **DIDTokenInvalid**: This error occurs when an invalid DID Token is given.\n\nIn essence, this section provides information on the potential exceptions that can be raised when dealing with DID Tokens in the Magic Labs embedded wallet.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/python#chunk-15", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 None.", "explanation": "This documentation section titled \"#Returns\" indicates that the function or method being described does not return any value (i.e., it has a return type of \"None\").\n\nIn other words, when this function is executed, it will not produce any output or result. It might simply perform an action, modify external state, or complete some operation without returning any specific value back to the caller.\n\nThis section's main purpose is to inform users or developers that they should not expect a return value from this method, and thus can't rely on it being used in expressions or assignments where a value is expected.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/python#chunk-16", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nThe user resource and its methods are accessible on the Magic instance by the User attribute. It provides methods to interact with the User.\n\nUser\n\nCopy\n\n01\n\nfrom\n\nmagic_admin\n\nimport\n\nMagic\n\n01\n\nfrom\n\nmagic_admin\n\nimport\n\nMagic\n\n02\n\n02\n\n03\n\nmagic\n\n=\n\nMagic\n\n(\n\napi_secret_key\n\n=\n\n'<SECRET_API_KEY>'\n\n)\n\n03\n\nmagic\n\n=\n\nMagic\n\n(\n\napi_secret_key\n\n=\n\n'<SECRET_API_KEY>'\n\n)\n\n04\n\n04\n\n05\n\nmagic\n\n.\n\nUser\n\n05\n\nmagic\n\n.\n\nUser\n\n06\n\nmagic\n\n.\n\nUser\n\n.\n\nget_metadata_by_issuer\n\n06\n\nmagic\n\n.\n\nUser\n\n.\n\nget_metadata_by_issuer\n\n07\n\nmagic\n\n.\n\nUser\n\n.\n\nget_metadata_by_public_address\n\n07\n\nmagic\n\n.\n\nUser\n\n.\n\nget_metadata_by_public_address\n\n08\n\nmagic\n\n.\n\nUser\n\n.\n\nget_metadata_by_token\n\n08\n\nmagic\n\n.\n\nUser\n\n.\n\nget_metadata_by_token\n\n09\n\nmagic\n\n.\n\nUser\n\n.\n\nlogout_by_issuer\n\n09\n\nmagic\n\n.\n\nUser\n\n.\n\nlogout_by_issuer\n\n10\n\nmagic\n\n.\n\nUser\n\n.\n\nlogout_by_public_address\n\n10\n\nmagic\n\n.\n\nUser\n\n.\n\nlogout_by_public_address\n\n11\n\nmagic\n\n.\n\nUser\n\n.\n\nlogout_by_token\n\n11\n\nmagic\n\n.\n\nUser\n\n.\n\nlogout_by_token\n\n#\n\nget_metadata_by_issuer\n\nRetrieves information about the user by the supplied iss from the DID Token. This method is useful if you store the iss with your user data, which is recommended.\n\niss\n\niss\n\nCopy\n\n01\n\nUser\n\n.\n\nget_metadata_by_issuer\n\n(\n\nissuer\n\n)\n\n01\n\nUser\n\n.\n\nget_metadata_by_issuer\n\n(\n\nissuer\n\n)\n\n#\n\n\u2022 issuer (str): The user's Decentralized ID, which can be parsed using Token.get_issuer\n\nissuer\n\nToken.get_issuer", "explanation": "This documentation section is about a method called `get_metadata_by_issuer` within the Magic Labs embedded wallet's API. This method allows you to retrieve information about a user based on their issuer (Decentralized ID). \n\nThe main purpose of this method is to provide a way to interact with user data when the issuer is known, which is recommended for storing user data.\n\nHere are the key points:\n\n* The `get_metadata_by_issuer` method is part of the Magic Labs embedded wallet's API.\n* It allows you to retrieve user information by their issuer (Decentralized ID).\n* You can use this method when you store the issuer with your user data, which is recommended.\n* The method takes a single argument: `issuer`, which should be a string representing the Decentralized ID.\n* You can parse the issuer using the `Token.get_issuer` function.\n\nThis method is useful in scenarios where you have stored the issuer with your user data and want to retrieve their information based on that.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/python#chunk-17", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 RateLimitingError: If you have sent too many requests within a given period of time\n\n\u2022 BadRequestError: If the supplied parameters are invalid\n\n\u2022 AuthenticationError: If your API secret key cannot be authenticated with Magic API server\n\n\u2022 ForbiddenError: If your API secret key is not authorized to access the resources\n\n\u2022 APIError: For any other API error\n\n\u2022 APIConnectionError: If your server cannot communicate with the Magic server. Normally this is a network communication error.\n\nRateLimitingError\n\nBadRequestError\n\nAuthenticationError\n\nForbiddenError\n\nAPIError\n\nAPIConnectionError\n\nSee Error Handling for more examples.\n\nError Handling", "explanation": "**Error Handling in Magic Labs Embedded Wallet API**\n\nThe `#Raises` section of the documentation describes a list of potential exceptions that can be raised when using the Magic Labs embedded wallet API.\n\n**Main Purpose:**\n\nThe main purpose of this section is to inform developers about the possible errors that may occur when interacting with the API, and provide guidance on how to handle these errors programmatically.\n\n**Key Points:**\n\n* The section lists five types of exceptions that can be raised:\n\t+ `RateLimitingError`: Too many requests within a given period.\n\t+ `BadRequestError`: Invalid parameters.\n\t+ `AuthenticationError`: API secret key cannot be authenticated.\n\t+ `ForbiddenError`: API secret key is not authorized to access resources.\n\t+ `APIError`: Any other API error.\n\t+ `APIConnectionError`: Network communication error.\n* The section also provides links to more examples in the Error Handling documentation.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/python#chunk-18", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 A MagicResponse: The data field contains all of the user meta information.issuer (str): The user's Decentralized IDpublic_address (str): The authenticated user's public address (a.k.a.: public key). Currently, this value is associated with the Ethereum blockchain.email (str): The user's email addressphone_number (str): The user's phone numberoauth_provider (str): OAuth provider, if anywallets (arr): Array of user's wallet addresses\n\nMagicResponse\n\nMagicResponse\n\ndata\n\n\u2022 issuer (str): The user's Decentralized ID\n\n\u2022 public_address (str): The authenticated user's public address (a.k.a.: public key). Currently, this value is associated with the Ethereum blockchain.\n\n\u2022 email (str): The user's email address\n\n\u2022 phone_number (str): The user's phone number\n\n\u2022 oauth_provider (str): OAuth provider, if any\n\n\u2022 wallets (arr): Array of user's wallet addresses\n\nissuer\n\npublic_address\n\nemail\n\nphone_number\n\noauth_provider\n\nwallets", "explanation": "**Returns**\n\nThe `#Returns` section in the Magic Labs embedded wallet documentation describes the structure and contents of a successful API response.\n\n**Main Purpose:**\n\nThe main purpose of this section is to outline what information is returned when a valid API request is made, specifically when authenticating a user through the Magic Labs system.\n\n**Key Points:**\n\n* The `data` field contains all user meta information.\n* The user's Decentralized ID, public address, email, phone number, OAuth provider (if any), and wallet addresses are returned as part of the response.\n* These values are provided in a standardized format, making it easier to understand and work with the user data.\n\nBy explaining what is returned in this section, developers can write more effective code that correctly handles and utilizes the user information provided by Magic Labs.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/python#chunk-19", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nget_metadata_by_public_address\n\nRetrieves information about the user by the supplied public_address. This method is useful if you store the public_address with your user data.\n\npublic_address\n\npublic_address\n\nCopy\n\n01\n\nUser\n\n.\n\nget_metadata_by_public_address\n\n(\n\npublic_address\n\n)\n\n01\n\nUser\n\n.\n\nget_metadata_by_public_address\n\n(\n\npublic_address\n\n)\n\n#\n\n\u2022 public_address (str): The user's Ethereum public address, which can be parsed using Token.get_public_address\n\npublic_address\n\nToken.get_public_address", "explanation": "This documentation section is about a method called `get_metadata_by_public_address` in the Magic Labs embedded wallet API.\n\n**Main Purpose:**\nThe main purpose of this method is to retrieve user metadata (information) based on their Ethereum public address. This can be useful when you have stored the public address with your user data and want to fetch additional information about them.\n\n**How it works:**\nYou pass a string containing the user's Ethereum public address as an argument to the `get_metadata_by_public_address` method. The method then returns user metadata, which is presumably retrieved from Magic Labs' servers or another data source.\n\n**Key Point:**\nThis method is useful when you have stored users' public addresses with their account data and want to retrieve more information about them without requiring them to log in again.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/python#chunk-20", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 RateLimitingError: If you have sent too many requests within a given period of time.\n\n\u2022 BadRequestError: If the supplied parameters are invalid\n\n\u2022 AuthenticationError: If your API secret key cannot be authenticated with Magic API server\n\n\u2022 ForbiddenError: If your API secret key is not authorized to access the resources\n\n\u2022 APIError: For any other API error\n\n\u2022 APIConnectionError: If your server cannot communicate with the Magic server. Normally this is a network communication error.\n\nRateLimitingError\n\nBadRequestError\n\nAuthenticationError\n\nForbiddenError\n\nAPIError\n\nAPIConnectionError\n\nSee Error Handling for more examples.\n\nError Handling", "explanation": "**#Raises Section: Error Handling in Magic Labs Embedded Wallet Documentation**\n\nThe `#Raises` section of the documentation explains the types of errors that may occur when using the Magic Labs embedded wallet, specifically when interacting with the Magic API server.\n\n**Purpose:** The primary purpose of this section is to inform developers about potential error scenarios and provide a clear understanding of the error handling mechanisms in place. This enables them to anticipate and handle errors gracefully, ensuring a smoother user experience.\n\n**Main Points:**\n\n1. **Error Types**: The section lists seven distinct error types that may be raised:\n\t* RateLimitingError (exceeding request limits)\n\t* BadRequestError (invalid parameters)\n\t* AuthenticationError (authentication issues with the API secret key)\n\t* ForbiddenError (unauthorized access to resources)\n\t* APIError (catch-all for other API-related errors)\n\t* APIConnectionError (communication issues between servers)\n2. **Error Handling**: The documentation mentions a separate section on Error Handling, which provides more examples and guidelines for handling these error types.\n\nBy understanding the potential errors that may occur and how to handle them, developers can create more robust and user-friendly applications that minimize errors and provide a better experience for their users.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/python#chunk-21", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 A MagicResponse: The data field contains all of the user meta information.issuer (str): The user's Decentralized IDpublic_address (str): The authenticated user's public address (a.k.a.: public key). Currently, this value is associated with the Ethereum blockchain.email (str): The user's email addressphone_number (str): The user's phone numberoauth_provider (str): OAuth provider, if anywallets (arr): Array of user's wallet addresses\n\nMagicResponse\n\nMagicResponse\n\ndata\n\n\u2022 issuer (str): The user's Decentralized ID\n\n\u2022 public_address (str): The authenticated user's public address (a.k.a.: public key). Currently, this value is associated with the Ethereum blockchain.\n\n\u2022 email (str): The user's email address\n\n\u2022 phone_number (str): The user's phone number\n\n\u2022 oauth_provider (str): OAuth provider, if any\n\n\u2022 wallets (arr): Array of user's wallet addresses\n\nissuer\n\npublic_address\n\nemail\n\nphone_number\n\noauth_provider\n\nwallets", "explanation": "**#Returns Section: Understanding the Response Data**\n\nThe `#Returns` section in the Magic Labs documentation explains what data is returned by a specific API endpoint. In this case, it's related to retrieving user meta information.\n\n**Main Purpose:** The main purpose of this section is to provide a clear and concise description of the response data structure, specifically the `MagicResponse` object, which contains various user attributes.\n\n**Key Points:**\n\n* The response data is contained within the `data` field of the `MagicResponse`.\n* The `data` field includes several key-value pairs that represent user meta information.\n* These attributes are:\n\t+ `issuer`: The user's Decentralized ID (a unique identifier).\n\t+ `public_address`: The authenticated user's public address, associated with the Ethereum blockchain.\n\t+ `email`: The user's email address.\n\t+ `phone_number`: The user's phone number.\n\t+ `oauth_provider`: The OAuth provider used for authentication, if any.\n\t+ `wallets`: An array of wallet addresses associated with the user.\n\nBy understanding this response data structure, developers can effectively use the API to retrieve and utilize user meta information in their Magic Labs embedded wallets.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/python#chunk-22", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nget_metadata_by_token\n\nRetrieves information about the user by the supplied DID Token.\n\nCopy\n\n01\n\nUser\n\n.\n\nget_metadata_by_token\n\n(\n\ndid_token\n\n)\n\n01\n\nUser\n\n.\n\nget_metadata_by_token\n\n(\n\ndid_token\n\n)\n\n#\n\n\u2022 did_token (str): A DID Token generated by a Magic User on the client-side.\n\ndid_token", "explanation": "The `get_metadata_by_token` function in the Magic Labs embedded wallet documentation is used to retrieve information about a user based on a supplied **DID Token**.\n\nA DID Token is a unique token generated by a Magic User on the client-side (i.e., their browser or mobile app). It serves as an identifier for that user, allowing the server-side system (in this case, Magic Labs) to verify and retrieve metadata about the user without requiring explicit login credentials.\n\nThe main purpose of `get_metadata_by_token` is to provide a secure way for servers to authenticate users and access their associated data without exposing sensitive information. This function takes a DID Token as input, verifies it, and returns relevant user metadata, such as profile information or authentication status.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/python#chunk-23", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 RateLimitingError: If you have sent too many requests within a given period of time\n\n\u2022 BadRequestError: If the supplied parameters are invalid\n\n\u2022 AuthenticationError: If your API secret key cannot be authenticated with Magic API server\n\n\u2022 ForbiddenError: If your API secret key is not authorized to access the resources\n\n\u2022 APIError: For any other API error\n\n\u2022 APIConnectionError: If your server cannot communicate with the Magic server. Normally this is a network communication error.\n\nRateLimitingError\n\nBadRequestError\n\nAuthenticationError\n\nForbiddenError\n\nAPIError\n\nAPIConnectionError\n\nSee Error Handling for more examples.\n\nError Handling", "explanation": "**What is #Raises?**\n\nThe `#Raises` section in the Magic Labs embedded wallet documentation is a list of exceptions that may be raised by the API when an error occurs.\n\n**Main Purpose:**\n\nThe main purpose of this section is to inform developers about the possible errors that can occur when using the Magic Labs API, and what types of errors they are. This allows developers to handle these exceptions in their code and provide a better user experience.\n\nIn other words, it's a way for the documentation to warn developers about potential issues and guide them on how to manage those errors.\n\n**Key Points:**\n\n* The section lists specific error classes that may be raised by the API (e.g., `RateLimitingError`, `AuthenticationError`).\n* Each error class is accompanied by a brief description of what triggers it.\n* The section also points to an external resource (`See Error Handling for more examples.`) for further information on handling these exceptions.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/python#chunk-24", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 A MagicResponse: The data field contains all of the user meta information.issuer (str): The user's Decentralized IDpublic_address (str): The authenticated user's public address (a.k.a.: public key). Currently, this value is associated with the Ethereum blockchain.email (str): The user's email addressphone_number (str): The user's phone numberoauth_provider (str): OAuth provider, if anywallets (arr): Array of user's wallet addresses\n\nMagicResponse\n\nMagicResponse\n\ndata\n\n\u2022 issuer (str): The user's Decentralized ID\n\n\u2022 public_address (str): The authenticated user's public address (a.k.a.: public key). Currently, this value is associated with the Ethereum blockchain.\n\n\u2022 email (str): The user's email address\n\n\u2022 phone_number (str): The user's phone number\n\n\u2022 oauth_provider (str): OAuth provider, if any\n\n\u2022 wallets (arr): Array of user's wallet addresses\n\nissuer\n\npublic_address\n\nemail\n\nphone_number\n\noauth_provider\n\nwallets", "explanation": "**Returns Section Explanation**\n\nThe **#Returns** section from the Magic Labs embedded wallet documentation explains what data is returned by a specific API call, in this case, when a customer service engineer uses the Magic SDK to authenticate a user.\n\n**Main Purpose:**\n\nThe main purpose of this section is to provide clarity on the structure and content of the `MagicResponse` object that is returned after a successful authentication. This information helps engineers understand how to handle and utilize the data received from the API call in their implementation.\n\n**Key Points:**\n\n* The **data** field within the `MagicResponse` contains user metadata.\n* The **issuer**, **public_address**, **email**, **phone_number**, **oauth_provider**, and **wallets** fields are specific attributes of user meta information returned by the Magic SDK.\n* Each attribute has a corresponding data type, such as string (**str**) or array (**arr**).\n\nBy understanding what is being returned in the `MagicResponse`, engineers can write more effective code that leverages this data to provide accurate and efficient customer service.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/python#chunk-25", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nlogout_by_issuer\n\nLogs a user out of all Magic SDK sessions given the user's Decentralized ID (iss). This method is useful if you store the iss with your user data, which is recommended.\n\niss\n\niss\n\nCopy\n\n01\n\nUser\n\n.\n\nlogout_by_issuer\n\n(\n\nissuer\n\n)\n\n01\n\nUser\n\n.\n\nlogout_by_issuer\n\n(\n\nissuer\n\n)\n\n#\n\n\u2022 issuer (str): The user's Decentralized ID, which can be parsed using Token.get_issuer\n\nissuer\n\nToken.get_issuer", "explanation": "Let me break down the documentation section for you:\n\n**What is it?**\nThe `logout_by_issuer` function logs a user out of all Magic SDK sessions associated with their Decentralized ID (iss).\n\n**Why is it useful?**\nThis method is helpful when storing the user's Decentralized ID (`iss`) along with their data, which is recommended. This allows you to easily log them out across all sessions.\n\n**How does it work?**\nYou simply pass the user's Decentralized ID (`issuer`) as a string argument to the `logout_by_issuer` function. The Magic SDK will then remove the user from all logged-in sessions associated with that ID.\n\nIn summary, `logout_by_issuer` is a convenient way to log out users who have been stored with their Decentralized ID in your database or data storage system.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/python#chunk-26", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 RateLimitingError: If you have sent too many requests within a given period of time\n\n\u2022 BadRequestError: If the supplied parameters are invalid\n\n\u2022 AuthenticationError: If your API secret key cannot be authenticated with Magic API server\n\n\u2022 ForbiddenError: If your API secret key is not authorized to access the resources\n\n\u2022 APIError: For any other API error\n\n\u2022 APIConnectionError: If your server cannot communicate with the Magic server. Normally this is a network communication error.\n\nRateLimitingError\n\nBadRequestError\n\nAuthenticationError\n\nForbiddenError\n\nAPIError\n\nAPIConnectionError\n\nSee Error Handling for more examples.\n\nError Handling", "explanation": "**Understanding `#Raises` in Magic Labs Embedded Wallet Documentation**\n\nThe `#Raises` section in the Magic Labs embedded wallet documentation (https://magic.link/docs/api/server-side-sdks/python) lists exceptions that may be raised when using the API.\n\n**Main Purpose:**\n\nThe primary purpose of this section is to inform developers about potential errors or exceptions that can occur when interacting with the Magic Labs API. By knowing these possible exceptions, developers can write more robust code and handle errors more effectively.\n\n**Key Takeaways:**\n\n1. **Common Exceptions:** The section lists six types of exceptions that may be raised:\n\t* RateLimitingError (too many requests within a given period)\n\t* BadRequestError (invalid parameters)\n\t* AuthenticationError (API secret key authentication failed)\n\t* ForbiddenError (API secret key unauthorized to access resources)\n\t* APIError (any other API-related error)\n\t* APIConnectionError (network communication error with Magic server)\n2. **Error Handling:** The documentation encourages developers to consult the \"Error Handling\" section for more examples and guidance on how to handle these exceptions in their code.\n\nBy understanding the possible exceptions that can occur when using the Magic Labs API, developers can write more reliable and fault-tolerant applications.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/python#chunk-27", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 A MagicResponse\n\nMagicResponse\n\nMagicResponse", "explanation": "The documentation section '#Returns' is explaining the expected response format when making API calls using the Magic Labs Server-Side SDK in Python.\n\nIn this case, the main purpose of the '#Returns' section is to indicate that when you make a successful API call, the response will be in the format of a `MagicResponse`. The `MagicResponse` object is not further explained in the provided context, but it likely contains relevant information and data returned from the API call, which you can then parse and use in your application.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/python#chunk-28", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nlogout_by_public_address\n\nLogs a user out of all Magic SDK sessions given the user's public address. This method is useful if you store the public_address.\n\npublic_address\n\nCopy\n\n01\n\nUser\n\n.\n\nlogout_by_public_address\n\n(\n\npublic_address\n\n)\n\n01\n\nUser\n\n.\n\nlogout_by_public_address\n\n(\n\npublic_address\n\n)\n\n#\n\n\u2022 public_address (str): The user's Ethereum public address\n\npublic_address", "explanation": "This documentation section is about a method called `logout_by_public_address` that can be used to log out a user from all Magic SDK sessions.\n\n**Main Purpose:**\n\nThe main purpose of this method is to allow for user logout by providing their public Ethereum address. This is useful when you're storing users' public addresses in your system and want to facilitate easy logout.\n\nIn essence, if you have a user's public address, you can use this method to log them out of all Magic SDK sessions associated with that address.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/python#chunk-29", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 RateLimitingError: If you have sent too many requests within a given period of time\n\n\u2022 BadRequestError: If the supplied parameters are invalid\n\n\u2022 AuthenticationError: If your API secret key cannot be authenticated with Magic API server\n\n\u2022 ForbiddenError: If your API secret key is not authorized to access the resources\n\n\u2022 APIError: For any other API error\n\n\u2022 APIConnectionError: If your server cannot communicate with the Magic server. Normally this is a network communication error.\n\nRateLimitingError\n\nBadRequestError\n\nAuthenticationError\n\nForbiddenError\n\nAPIError\n\nAPIConnectionError\n\nSee Error Handling for more examples.\n\nError Handling", "explanation": "**What is #Raises?**\n\n`#Raises` is a section in the Magic Labs embedded wallet documentation that lists various exceptions or errors that may occur when using the Magic API SDK.\n\n**Main Purpose:**\n\nThe main purpose of `#Raises` is to inform developers about potential issues that might arise when interacting with the Magic API, and to provide guidance on how to handle these errors.\n\nIn other words, this section serves as a reference for error handling, helping developers to anticipate and manage exceptions that may occur during API usage.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/python#chunk-30", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 A MagicResponse\n\nMagicResponse\n\nMagicResponse", "explanation": "The documentation section '#Returns' is about the expected response from the Magic Labs embedded wallet API when using the Magic Server-Side SDK for Python.\n\nThe main purpose of this section is to inform developers about the structure and type of data they can expect to receive as a response from the API, specifically that the response will be an object of type `MagicResponse`.\n\nIn other words, when a developer makes a request to the Magic Labs API using the Python SDK, the API will return a `MagicResponse` object, which presumably contains relevant data or status information about the request. This information helps developers to understand how to handle and process the response data in their application.\n\nHowever, without the full context of the documentation, further details about the `MagicResponse` object, such as its properties or methods, are not provided in this specific section.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/python#chunk-31", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nlogout_by_token\n\nLogs a user out of all Magic SDK sessions given the DID Token.\n\nCopy\n\n01\n\nUser\n\n.\n\nlogout_by_token\n\n(\n\ndid_token\n\n)\n\n01\n\nUser\n\n.\n\nlogout_by_token\n\n(\n\ndid_token\n\n)\n\n#\n\n\u2022 did_token (str): A DID Token generated by a Magic user on the client-side\n\ndid_token", "explanation": "This documentation section is about the `logout_by_token` function in the Magic Labs SDK. Here's what it does:\n\n**Main Purpose:**\nThe main purpose of `logout_by_token` is to **log out a Magic user from all sessions**, using a unique token called the DID (Decentralized Identifier) Token.\n\n**What is a DID Token?**\nA DID Token is generated by a Magic user on the client-side, and it serves as a proof-of-ownership for that user's identity. This token is used to authenticate the user across multiple sessions.\n\n**How does logout_by_token work?**\nWhen you call `logout_by_token`, you pass in the DID Token of the user you want to log out. The function then invalidates all active Magic SDK sessions associated with that token, effectively logging the user out of all connected applications.\n\nIn summary, `logout_by_token` is a function used to securely log out Magic users from all their active sessions, using a unique client-generated token for authentication and verification purposes.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/python#chunk-32", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 RateLimitingError: If you have sent too many requests within a given period of time\n\n\u2022 BadRequestError: If the supplied parameters are invalid\n\n\u2022 AuthenticationError: If your API secret key cannot be authenticated with Magic API server\n\n\u2022 ForbiddenError: If your API secret key is not authorized to access the resources\n\n\u2022 APIError: For any other API error\n\n\u2022 APIConnectionError: If your server cannot communicate with the Magic server. Normally this is a network communication error.\n\nRateLimitingError\n\nBadRequestError\n\nAuthenticationError\n\nForbiddenError\n\nAPIError\n\nAPIConnectionError\n\nSee Error Handling for more examples.\n\nError Handling", "explanation": "**#Raises**\n\nThe `#Raises` section in the Magic Labs documentation highlights the possible exceptions that may occur when using their embedded wallet SDK.\n\n**Main Purpose:**\n\nThe main purpose of this section is to inform developers about potential errors that can be raised during API interactions, so they can handle these exceptions properly and provide a better user experience.\n\n**Key Points:**\n\n1. **Error Types**: The section lists specific error types that can occur:\n\t* `RateLimitingError`: Exceeding the allowed number of requests within a time frame.\n\t* `BadRequestError`: Invalid input parameters.\n\t* `AuthenticationError`: API secret key authentication failure.\n\t* `ForbiddenError`: Unauthorized access to resources due to an invalid API secret key.\n\t* `APIError`: Catch-all for any other API-related errors.\n\t* `APIConnectionError`: Network communication issues between the server and Magic API server.\n2. **Error Handling**: The section references a separate documentation page on error handling, providing examples of how to handle these exceptions.\n\n**In Summary:**\n\nThe `#Raises` section serves as a warning system for developers, indicating potential errors that may occur when using the Magic Labs embedded wallet SDK. By understanding these possible exceptions, developers can write more robust code and provide a better user experience.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/python#chunk-33", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 A MagicResponse\n\nMagicResponse\n\nMagicResponse", "explanation": "The `#Returns` section from the Magic Labs embedded wallet documentation for the Python SDK is about describing the data structure that is returned as a result of an API request.\n\nThe main purpose of this section is to inform developers about what to expect as a response from the Magic API when making a request. Specifically, it states that the response will be an object of type `MagicResponse`.\n\nIn essence, this section serves as a reference point for developers to understand and parse the response data, allowing them to handle it accordingly in their code.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/python#chunk-34", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n#\n\nThere is only one response object that will be returned from a successful API call.\n\n#\n\nThis is the interface to interact Magic API responses. It will only be returned if the API request status code is between 200 (inclusive) and 300 (exclusive).\n\nYou will have access to the following attributes:\n\n\u2022 content (bytes): Raw content returned by the API response\n\n\u2022 status_code (num): HTTP status code for the given request\n\n\u2022 data (dict): Parsed content\n\ncontent\n\nstatus_code\n\ndata\n\nCopy\n\n01\n\nfrom\n\nmagic_admin\n\n.\n\nresponse\n\nimport\n\nMagicResponse\n\n01\n\nfrom\n\nmagic_admin\n\n.\n\nresponse\n\nimport\n\nMagicResponse\n\n02\n\n02\n\n03\n\nMagicResponse\n\n.\n\ncontent\n\n03\n\nMagicResponse\n\n.\n\ncontent\n\n04\n\nMagicResponse\n\n.\n\nstatus\n\n04\n\nMagicResponse\n\n.\n\nstatus\n\n05\n\nMagicResponse\n\n.\n\ndata\n\n05\n\nMagicResponse\n\n.\n\ndata", "explanation": "**Response and Error Handling: MagicResponse**\n\nThe `MagicResponse` object is a key component in handling API responses from the Magic Labs embedded wallet documentation. Its primary purpose is to provide a standardized interface for interacting with successful API call responses.\n\n**Main Features:**\n\n1. **Content**: The raw content returned by the API response, represented as bytes (`content (bytes)`).\n2. **Status Code**: The HTTP status code for the given request (`status_code (num)`).\n3. **Data**: A parsed representation of the content (`data (dict)`).\n\n**Purpose:**\n\nThe `MagicResponse` object is designed to facilitate easy access and manipulation of API response data. By providing a structured interface, it simplifies the process of working with Magic Labs API responses in your Python applications.\n\nIn summary, the `MagicResponse` object is an essential component for handling successful API calls from the Magic Labs embedded wallet documentation, offering a convenient way to interact with response data and status codes.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/python#chunk-35", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nThe conventional HTTP response is adopted by the SDK. For the status code in:\n\n\u2022 2XX - Indicates success\n\n\u2022 4XX - Indicates client errors. Information provided to the SDK is invalid.\n\n\u2022 5XX - Indicates server errors\n\n2XX\n\n4XX\n\n5XX\n\nBelow is the error class inheritance which can help developers to programmatically handle the error cases.\n\nCopy\n\n01\n\nMagicError\n\n01\n\nMagicError\n\n02\n\n|\n\n02\n\n|\n\n03\n\n|------- RequestError\n\n03\n\n|------- RequestError\n\n04\n\n|\n\n04\n\n|\n\n05\n\n| ------- RateLimitingError\n\n05\n\n| ------- RateLimitingError\n\n06\n\n| ------- BadRequestError\n\n06\n\n| ------- BadRequestError\n\n07\n\n| ------- AuthenticationError\n\n07\n\n| ------- AuthenticationError\n\n08\n\n| ------- ForbiddenError\n\n08\n\n| ------- ForbiddenError\n\n09\n\n| ------- APIError\n\n09\n\n| ------- APIError\n\n10\n\n| ------- APIConnectionError\n\n10\n\n| ------- APIConnectionError\n\n11\n\n|\n\n11\n\n|\n\n12\n\n| ------- DIDTokenInvalid\n\n12\n\n| ------- DIDTokenInvalid\n\n13\n\n|\n\n13\n\n|\n\n14\n\n| ------- DIDTokenMalformed\n\n14\n\n| ------- DIDTokenMalformed\n\n15\n\n|\n\n15\n\n|\n\n16\n\n| ------- DIDTokenExpired\n\n16\n\n| ------- DIDTokenExpired\n\n#\n\nThis is the base class of all the Magic SDK errors.\n\nCopy\n\n01\n\nMagicError\n\n(\n\nmessage\n\n=\n\nNone\n\n)\n\n01\n\nMagicError\n\n(\n\nmessage\n\n=\n\nNone\n\n)", "explanation": "**Error Handling in Magic Labs Embedded Wallet Documentation**\n\nThe `#Errors - #MagicError` section of the documentation is about error handling and classification in the Magic Labs embedded wallet SDK.\n\n**Main Purpose:**\nThe primary purpose of this section is to provide a clear and standardized way for developers to programmatically handle errors that may occur when using the Magic Labs SDK.\n\n**Key Points:**\n\n1. **HTTP Response Codes:** The section explains how the SDK adopts conventional HTTP response codes (2XX, 4XX, 5XX) to indicate success or error conditions.\n2. **Error Class Inheritance:** A hierarchical structure of error classes is presented, showing how specific errors inherit from more general categories (e.g., `MagicError` > `RequestError` > `RateLimitingError`).\n3. **Custom Error Classes:** The section lists 16 custom error classes that can be used by developers to handle specific error cases.\n\n**Developer Benefits:**\n\n1. **Easy Error Handling:** By using the provided error classes, developers can easily and programmatically handle errors in their Magic Labs SDK-based applications.\n2. **Standardized Error Messages:** The standardized error messages and codes help ensure consistency across different parts of the application, making it easier to identify and resolve issues.\n\nBy understanding this section of the documentation, developers can effectively manage errors and improve the overall reliability and user experience of their Magic Labs SDK-based applications.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/python#chunk-36", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nThis is the base class of all the Magic API request errors. This error class will provide details of unsuccessful API requests.\n\nCopy\n\n01\n\nRequestError\n\n(\n\n01\n\nRequestError\n\n(\n\n02\n\nmessage\n\n=\n\nNone\n\n,\n\nhttp_status\n\n=\n\nNone\n\n,\n\nhttp_code\n\n=\n\nNone\n\n,\n\nhttp_resp_data\n\n=\n\nNone\n\n,\n\n02\n\nmessage\n\n=\n\nNone\n\n,\n\nhttp_status\n\n=\n\nNone\n\n,\n\nhttp_code\n\n=\n\nNone\n\n,\n\nhttp_resp_data\n\n=\n\nNone\n\n,\n\n03\n\nhttp_message\n\n=\n\nNone\n\n,\n\nhttp_error_code\n\n=\n\nNone\n\n,\n\nhttp_request_params\n\n=\n\nNone\n\n,\n\n03\n\nhttp_message\n\n=\n\nNone\n\n,\n\nhttp_error_code\n\n=\n\nNone\n\n,\n\nhttp_request_params\n\n=\n\nNone\n\n,\n\n04\n\nhttp_request_data\n\n=\n\nNone\n\n,\n\nhttp_method\n\n=\n\nNone\n\n,\n\n04\n\nhttp_request_data\n\n=\n\nNone\n\n,\n\nhttp_method\n\n=\n\nNone\n\n,\n\n05\n\n)\n\n05\n\n)\n\nRateLimitingError\n\nBadRequestError\n\nAuthenticationError\n\nForbiddenError\n\nAPIError\n\n500\n\n404\n\nAPIConnectionError", "explanation": "**RequestError Class**\n\nThe `RequestError` class is a base class for all Magic API request errors. Its primary purpose is to provide detailed information about unsuccessful API requests.\n\n**Key Features:**\n\n* Provides error details for failed API requests\n* Can be subclassed by specific error types (e.g., RateLimitingError, BadRequestError)\n* Includes properties for:\n\t+ Error message (`message`)\n\t+ HTTP status code (`http_status`, `http_code`)\n\t+ HTTP response data (`http_resp_data`)\n\t+ Detailed HTTP error information (`http_message`, `http_error_code`, `http_request_params`)\n\t+ Request method and data (`http_method`, `http_request_data`)\n\n**Example Usage:**\n\nWhen an API request fails, the `RequestError` class can be instantiated with relevant error details. For instance:\n```python\nerror = RequestError(\n    message='Invalid authentication credentials',\n    http_status=401,\n    http_code=401,\n    http_message='Unauthorized',\n    http_error_code=401,\n    http_request_params={'username': ' invalid', 'password': 'invalid'}\n)\n```\nThis error object can then be used to provide context and information about the failed API request.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/python#chunk-37", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nThis means the given token fails the validation.", "explanation": "The documentation section '#DIDTokenInvalid' from the Magic Labs embedded wallet documentation refers to an error response code. \n\nIt indicates that the provided token has failed the validation process. This means the token is either invalid, expired, or malformed, and cannot be used to authenticate or complete a transaction.\n\nThe main purpose of this error code is to inform the developer or the system that the token is not usable and needs to be refreshed or obtained again before proceeding with the intended action.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/python#chunk-38", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nThis means the given token format is invalid.", "explanation": "The `#DIDTokenMalformed` section of the Magic Labs embedded wallet documentation is related to an error that occurs when a Digital Identity Token (DID Token) has an incorrect or invalid format.\n\n**Main Purpose:**\n\nThe main purpose of this section is to inform developers and users about how to handle and resolve errors when a DID Token is malformed, meaning it doesn't conform to the expected format. This ensures that the Magic Labs embedded wallet can properly process and validate the token, preventing potential issues or errors downstream in the system.\n\nIn simple terms, if a user provides an invalid DID Token, this section explains how to identify and address the issue, so they can fix the problem and successfully interact with the Magic Labs embedded wallet.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/python#chunk-39", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nThis means the given token has expired.", "explanation": "Based on the provided documentation snippet, here's a clear and concise explanation of what `#DIDTokenExpired` is about and its main purpose:\n\n**What it is:** \n`#DIDTokenExpired` is an error or exception code indicating that a Digital Identity Token (DID Token) has expired.\n\n**Main Purpose:**\nThe main purpose of this code is to notify the application or developer that a token, which was previously considered valid, is no longer usable due to expiration. This allows for proper handling and error management within the system.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/python#chunk-40", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nIt is recommended to implement error handling for API responses.\n\nCopy\n\n01\n\ntry\n\n:\n\n01\n\ntry\n\n:\n\n02\n\n# Make requests to Magic server.\n\n02\n\n# Make requests to Magic server.\n\n03\n\nexcept\n\nRateLimitingError\n\nas\n\ne\n\n:\n\n03\n\nexcept\n\nRateLimitingError\n\nas\n\ne\n\n:\n\n04\n\npass\n\n04\n\npass\n\n05\n\nexcept\n\nBadRequestError\n\nas\n\ne\n\n:\n\n05\n\nexcept\n\nBadRequestError\n\nas\n\ne\n\n:\n\n06\n\npass\n\n06\n\npass\n\n07\n\nexcept\n\nAuthenticationError\n\nas\n\ne\n\n:\n\n07\n\nexcept\n\nAuthenticationError\n\nas\n\ne\n\n:\n\n08\n\npass\n\n08\n\npass\n\n09\n\nexcept\n\nForbiddenError\n\nas\n\ne\n\n:\n\n09\n\nexcept\n\nForbiddenError\n\nas\n\ne\n\n:\n\n10\n\npass\n\n10\n\npass\n\n11\n\nexcept\n\nAPIError\n\nas\n\ne\n\n:\n\n11\n\nexcept\n\nAPIError\n\nas\n\ne\n\n:\n\n12\n\npass\n\n12\n\npass\n\n13\n\nexcept\n\nAPIConnectionError\n\nas\n\ne\n\n:\n\n13\n\nexcept\n\nAPIConnectionError\n\nas\n\ne\n\n:\n\n14\n\npass\n\n14\n\npass\n\n15\n\nexcept\n\nDIDTokenInvalid\n\nas\n\ne\n\n:\n\n15\n\nexcept\n\nDIDTokenInvalid\n\nas\n\ne\n\n:\n\n16\n\npass\n\n16\n\npass\n\n17\n\nexcept\n\nDIDTokenMalformed\n\nas\n\ne\n\n:\n\n17\n\nexcept\n\nDIDTokenMalformed\n\nas\n\ne\n\n:\n\n18\n\npass\n\n18\n\npass\n\n19\n\nexcept\n\nDIDTokenExpired\n\nas\n\ne\n\n:\n\n19\n\nexcept\n\nDIDTokenExpired\n\nas\n\ne\n\n:\n\n20\n\npass\n\n20\n\npass", "explanation": "This documentation section is about implementing error handling for API responses in the Magic Labs embedded wallet. Here's a clear and concise explanation:\n\n**Purpose:** The main purpose of this section is to recommend and demonstrate how to implement error handling for API responses, ensuring that your application can recover from and handle potential errors that may occur when interacting with the Magic server.\n\n**Key Points:**\n\n1. **Error Handling is Recommended**: It's essential to implement error handling to prevent crashes or unexpected behavior in your application.\n2. **Try-Except Blocks are Used**: The example code uses try-except blocks to catch specific exceptions, such as RateLimitingError, BadRequestError, AuthenticationError, ForbiddenError, APIError, APIConnectionError, DIDTokenInvalid, DIDTokenMalformed, and DIDTokenExpired.\n3. **Specific Exceptions are Handled**: Each exception is caught and handled separately, allowing for customized error responses or actions to be taken.\n4. **Pass Statement is Used**: In each except block, a pass statement is used, which simply passes control to the next line of code if no specific action needs to be taken.\n\n**In Summary:** This documentation section emphasizes the importance of implementing error handling in your Magic Labs embedded wallet application and provides an example of how to do so by using try-except blocks to catch and handle specific exceptions.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/python#chunk-41", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 GitHub\n\n\u2022 Python package\n\nGitHub\n\nPython package", "explanation": "The '#Resources' section in the provided documentation URL appears to be an incomplete or placeholder entry. However, based on the context and typical documentation structure, it seems to be pointing to two main resources related to Magic Labs' server-side SDKs for Python.\n\nThe main purpose of this section is to provide links or references to additional information or tools that might be useful for developers implementing or learning more about Magic Labs' embedded wallet using the Python SDK. \n\nThese resources likely include:\n\n1. **GitHub**: This may be a link to the official GitHub repository for Magic Labs' server-side SDKs or Python-specific repository, where developers can find the latest code, issues, and documentation.\n\n2. **Python package**: This could be a link to the official Python package for Magic Labs' SDK on PyPI (Python Package Index) or other package repositories, where developers can download and install the required libraries for their projects.\n\nThe intention of including these resources is to make it easier for developers to access relevant information, libraries, and code examples, thus facilitating a smoother integration and implementation process for Magic Labs' embedded wallet using their Python SDK.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/python#chunk-42", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nAll changes to the SDK are covered in our latest release notes.\n\nlatest release notes", "explanation": "**What it is:**\n\nThis section, titled `#Versions`, is a documentation note that provides information on release notes for the Magic Labs embedded wallet API server-side SDK.\n\n**Main purpose:**\n\nThe primary purpose of this section is to inform users that any changes to the SDK are documented in the latest release notes. In other words, it's a pointer to where users can find updates and modifications made to the SDK over time.\n\nIn essence, it's a way for Magic Labs to communicate with developers using their API, keeping them informed about what's new, fixed, or changed in the SDK.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/python#chunk-43", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nFantom is a smart-contract platform that aims to solve the scalability challenges of other blockchains with its Lachesis consensus mechanism. Fantom\u2019s unique architecture allows developers to create highly scalable, fast, and inexpensive Web3 applications.\n\nFantom\n\nAs Fantom is EVM compatible, you can follow the Ethereum documentation to send your first transaction and utilize all other wallet features.\n\nEthereum", "explanation": "Here's a clear and concise explanation of the \"Fantom\" section from the Magic Labs embedded wallet documentation:\n\n**What is Fantom?**\n\nFantom is a blockchain platform designed to address scalability issues in other blockchains. It uses a consensus mechanism called Lachesis, which enables fast and inexpensive transactions.\n\n**Main Purpose:**\n\nThe main purpose of Fantom is to allow developers to build highly scalable, fast, and cost-effective Web3 applications.\n\n**Key Point:**\n\nAs Fantom is compatible with the Ethereum Virtual Machine (EVM), you can use the same documentation for sending your first transaction and utilizing other wallet features as if you were using Ethereum itself.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/evm/fantom#chunk-1", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n#\n\nMainnet Block Explorer URL: https://ftmscan.com/\n\nhttps://ftmscan.com/\n\nCopy\n\n01\n\nconst\n\ncustomNodeOptions\n\n=\n\n{\n\n01\n\nconst\n\ncustomNodeOptions\n\n=\n\n{\n\n02\n\nrpcUrl\n\n:\n\n'https://rpc.ftm.tools/'\n\n,\n\n02\n\nrpcUrl\n\n:\n\n'https://rpc.ftm.tools/'\n\n,\n\n03\n\nchainId\n\n:\n\n250\n\n,\n\n03\n\nchainId\n\n:\n\n250\n\n,\n\n04\n\n}\n\n04\n\n}\n\n05\n\n05\n\n06\n\n// Setting network to Fantom\n\n06\n\n// Setting network to Fantom\n\n07\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_PUBLISHABLE_API_KEY'\n\n,\n\n{\n\nnetwork\n\n:\n\ncustomNodeOptions\n\n}\n\n)\n\n;\n\n07\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_PUBLISHABLE_API_KEY'\n\n,\n\n{\n\nnetwork\n\n:\n\ncustomNodeOptions\n\n}\n\n)\n\n;", "explanation": "This documentation section is about configuring the Fantom (FTM) network on the Magic Labs embedded wallet.\n\n**Main Purpose:** The main purpose of this configuration is to set up the Magic Labs wallet to interact with the Fantom blockchain, allowing users to send and receive FTM tokens.\n\nHere's a brief summary:\n\n1. **Setting the Mainnet Block Explorer URL**: The first line sets the block explorer URL for the Fantom network, which is used to display transaction information.\n2. **Defining custom Node Options**: The `customNodeOptions` object defines the configuration settings for the Magic Labs wallet to connect to the Fantom blockchain. In this case:\n\t* `rpcUrl`: specifies the RPC (Remote Procedure Call) URL for the Fantom network, which is set to `https://rpc.ftm.tools/`.\n\t* `chainId`: sets the chain ID for the Fantom network, which is 250.\n3. **Initializing Magic Labs Wallet**: The `Magic` constructor is used to initialize the Magic Labs wallet with the specified publishable API key and custom node options.\n\nBy following this configuration, users can set up their Magic Labs wallet to work with the Fantom blockchain, enabling them to send, receive, and interact with FTM tokens.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/evm/fantom#chunk-2", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nTestnet Block Explorer URL: https://testnet.ftmscan.com/\n\nhttps://testnet.ftmscan.com/\n\nCopy\n\n01\n\nconst\n\ncustomNodeOptions\n\n=\n\n{\n\n01\n\nconst\n\ncustomNodeOptions\n\n=\n\n{\n\n02\n\nrpcUrl\n\n:\n\n'https://rpc.testnet.fantom.network'\n\n,\n\n02\n\nrpcUrl\n\n:\n\n'https://rpc.testnet.fantom.network'\n\n,\n\n03\n\nchainId\n\n:\n\n4002\n\n,\n\n03\n\nchainId\n\n:\n\n4002\n\n,\n\n04\n\n}\n\n04\n\n}\n\n05\n\n05\n\n06\n\n// Setting network to Fantom - Testnet\n\n06\n\n// Setting network to Fantom - Testnet\n\n07\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_PUBLISHABLE_API_KEY'\n\n,\n\n{\n\nnetwork\n\n:\n\ncustomNodeOptions\n\n}\n\n)\n\n;\n\n07\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_PUBLISHABLE_API_KEY'\n\n,\n\n{\n\nnetwork\n\n:\n\ncustomNodeOptions\n\n}\n\n)\n\n;", "explanation": "**What is the #Testnet section?**\n\nThe #Testnet section is a documentation section that provides information about how to interact with the Fantom test network using the Magic Labs embedded wallet.\n\n**Main purpose:**\n\nThe main purpose of this section is to guide users on how to set up and use the Magic Labs embedded wallet to connect to the Fantom test network. This allows developers and testers to experiment with the Fantom blockchain in a sandbox environment without affecting the main network.\n\n**Key takeaways:**\n\n* The Fantom test network can be accessed through the `https://testnet.ftmscan.com/` URL.\n* To use the Magic Labs embedded wallet on the Fantom test network, you need to set the `rpcUrl` to `https://rpc.testnet.fantom.network` and the `chainId` to `4002`.\n* You can create a new instance of the Magic class with your publishable API key and the custom node options to connect to the Fantom test network.\n\nBy following this section, users can easily set up their environment to interact with the Fantom test network using the Magic Labs embedded wallet.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/evm/fantom#chunk-3", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 All Auth, User and most Wallet module methods* for Dedicated Wallets\n\n\u2022 All EVM Provider functionality to respond to supported RPC methods\n\n\u2022 Widget UI for token balances and token transfers*\n\nAuth\n\nUser\n\nWallet\n\nDedicated Wallets\n\nRPC methods\n\n*Some features are not yet compatible such as NFT Viewer and Fiat On-ramps.\n\nNeed a feature or see a problem? File an issue on our github repo.\n\ngithub repo", "explanation": "**Compatibility Section Explanation**\n\nThe `#Compatibility` section is a documentation subsection that outlines the compatibility of Magic Labs' embedded wallet with various blockchain features and technologies.\n\n**Main Purpose:**\n\nIts primary purpose is to inform users about which blockchain-related functionalities are supported, partially supported, or not supported at all by the Magic Labs embedded wallet.\n\n**Key Points:**\n\n* The section lists specific modules (Auth, User, Wallet) and features that are fully compatible with Dedicated Wallets.\n* It also mentions EVM Provider functionality, which supports a range of RPC methods.\n* However, it notes that certain features (NFT Viewer and Fiat On-ramps) are not yet compatible.\n\n**Actionable Information:**\n\nThe section provides users with clear guidance on what to expect from the Magic Labs embedded wallet in terms of compatibility. It also includes a call-to-action, directing users who need additional features or encounter issues to file an issue on the GitHub repository.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/evm/fantom#chunk-4", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 Documentation: https://docs.fantom.foundation/\n\n\u2022 Block Explorer:https://ftmscan.com/ (Mainnet)https://testnet.ftmscan.com/ (Testnet)\n\nhttps://docs.fantom.foundation/\n\n\u2022 https://ftmscan.com/ (Mainnet)\n\n\u2022 https://testnet.ftmscan.com/ (Testnet)\n\nhttps://ftmscan.com/\n\nhttps://testnet.ftmscan.com/\n\n\u2022 Demo\n\nDemo", "explanation": "The section '#Resources & Tools' from the Magic Labs embedded wallet documentation is about providing a collection of useful resources and tools related to the Fantom blockchain. \n\nMainly, this section serves two purposes:\n\n1.  It lists official documents: The first resource mentioned is the official Fantom documentation, which can be found at https://docs.fantom.foundation/. This link directs users to a comprehensive source of information about the Fantom blockchain, including its architecture, development tools, and technical details.\n\n2.  It links block explorers: The section also includes links to two block explorers for the Fantom Mainnet and Testnet:\n\n    -   https://ftmscan.com/ (Mainnet): This is a full-node-based blockchain explorer that allows users to view transaction history, balance, and other on-chain data for addresses on the Fantom Mainnet.\n\n    -   https://testnet.ftmscan.com/ (Testnet): Similar to the mainnet explorer but tailored for transactions on the Fantom Testnet. This is a sandbox environment where developers can test their applications without affecting the live network.\n\nThe section concludes with a 'Demo' link, though it's not clear what specific demo this refers to or its purpose in relation to the resources listed.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/evm/fantom#chunk-5", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nMagic offers out-of-the-box Signature Request UI when the user is prompted to sign a personal or typed message for the following EVM RPC methods:\n\n\u2022 \u2060personal_sign\n\n\u2022 signTypedData_v3\n\n\u2022 signTypedData_v4\n\npersonal_sign\n\nsignTypedData_v3\n\nsignTypedData_v4\n\nThese methods allow dApps to verifiably prove the ownership of the user's account by getting a signature from their private key and using it to sign arbitrary and/or typed data. Additionally, it is possible to obtain a user's signature during login in a single step using login with verification feature.\n\nlogin with verification feature\n\n#\n\n\u2022 For Dedicated Wallet, Personal Signature UI is disabled by default and can be enabled within the developer dashboard in Customization -> Widget UI. Magic also offers Sign Confirmation, a feature that secures users from front-end attacks, by prompting them to confirm the transaction in a Magic-hosted tab after clicking \"Send\".\n\n\u2022 For Universal Wallet, Personal Signature UI and Sign Confirmation are enabled by default and cannot be turned off\n\nSign Confirmation\n\nSign Confirmation\n\nUniversal wallets will soon be merged with Dedicated Wallets into a single product line. Universal apps created before February 7, 2024 will work as expected with no change. See our blog post to learn more.\n\nblog post", "explanation": "**Personal Signatures Overview**\n\nThe documentation section titled \"Personal Signatures - Personal Signatures - #Overview - #Compatibility\" is about the personal signature feature in Magic Labs' embedded wallet.\n\n**Main Purpose:**\n\nThe main purpose of this feature is to enable users to verifiably prove ownership of their account by signing arbitrary and/or typed data using their private key. This is achieved through three EVM RPC methods:\n\n1. `personal_sign`\n2. `signTypedData_v3`\n3. `signTypedData_v4`\n\nThese methods allow dApps (decentralized applications) to securely authenticate user transactions.\n\n**Key Features:**\n\n* The embedded wallet offers a default UI for signature requests, which can be customized in the developer dashboard.\n* A \"login with verification\" feature enables users to sign arbitrary data during login in a single step.\n* For Dedicated Wallets, personal signature UI is disabled by default but can be enabled in the developer dashboard. Sign Confirmation is also available as an additional security measure.\n* Universal Wallets have both personal signature UI and Sign Confirmation enabled by default.\n\n**Important Note:**\n\nUniversal wallets will soon be merged with Dedicated Wallets into a single product line. This change will not affect existing Universal apps created before February 7, 2024.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/wallets/features/personal-signatures#chunk-1", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 Prove verifiable ownership of a public address through signing arbitrary data provided by the dApp\n\n\u2022 Used in various scenarios where a user needs to sign a structured message as proof of their approval", "explanation": "The section '#Use Cases' explains the main purpose and practical applications of the 'Personal Signatures' feature in the Magic Labs embedded wallet. \n\nIt outlines two primary use cases:\n\n1. **Verifiable Ownership**: The user can prove they own a specific public address by signing arbitrary data (any message) provided by a decentralized application (dApp). This process acts as proof of ownership, ensuring the user has control over the address.\n\n2. **Approval through Signed Messages**: In scenarios requiring proof of user approval or consent, a user can sign a structured message as confirmation of their agreement. This feature ensures secure and tamper-proof user interaction with dApps.\n\nOverall, the main purpose is to provide users with a secure way to verify their identity and prove approval for specific actions within decentralized applications, while ensuring the integrity of the data being signed.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/wallets/features/personal-signatures#chunk-2", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2060Once you have verified the correct setup of the Magic SDK and successfully authenticated the user, you can request consent to collect their information:\n\nCopy\n\n01\n\nimport\n\nWeb3\n\nfrom\n\n\"web3\"\n\n;\n\n01\n\nimport\n\nWeb3\n\nfrom\n\n\"web3\"\n\n;\n\n02\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n\"magic-sdk\"\n\n;\n\n02\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n\"magic-sdk\"\n\n;\n\n03\n\nimport\n\n{\n\nrecoverPersonalSignature\n\n}\n\nfrom\n\n\"@metamask/eth-sig-util\"\n\n;\n\n03\n\nimport\n\n{\n\nrecoverPersonalSignature\n\n}\n\nfrom\n\n\"@metamask/eth-sig-util\"\n\n;\n\n04\n\n04\n\n05\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n\"YOUR_API_KEY\"\n\n,\n\n{\n\n05\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n\"YOUR_API_KEY\"\n\n,\n\n{\n\n06\n\nnetwork\n\n:\n\n\"goerli\"\n\n,\n\n06\n\nnetwork\n\n:\n\n\"goerli\"\n\n,\n\n07\n\n}\n\n)\n\n;\n\n07\n\n}\n\n)\n\n;\n\n08\n\nconst\n\nweb3\n\n=\n\nnew\n\nWeb3\n\n(\n\nmagic\n\n.\n\nrpcProvider\n\n)\n\n;\n\n08\n\nconst\n\nweb3\n\n=\n\nnew\n\nWeb3\n\n(\n\nmagic\n\n.\n\nrpcProvider\n\n)\n\n;\n\n09\n\n09\n\n10\n\nconst\n\nsignAndVerify\n\n=\n\nasync\n\n(\n\n)\n\n=>\n\n{\n\n10\n\nconst\n\nsignAndVerify\n\n=\n\nasync\n\n(\n\n)\n\n=>\n\n{\n\n11\n\nconst\n\nsignedMessage\n\n=\n\nawait\n\nweb3\n\n.\n\neth\n\n.\n\npersonal\n\n.\n\nsign\n\n(\n\n11\n\nconst\n\nsignedMessage\n\n=\n\nawait\n\nweb3\n\n.\n\neth\n\n.\n\npersonal\n\n.\n\nsign\n\n(\n\n12\n\n\"Here is a basic message!\"\n\n,\n\n12\n\n\"Here is a basic message!\"\n\n,\n\n13\n\naccount\n\n,\n\n13\n\naccount\n\n,\n\n14\n\n\"\"\n\n14\n\n\"\"\n\n15\n\n)\n\n;\n\n15\n\n)\n\n;\n\n16\n\nconsole\n\n.\n\nlog\n\n(\n\n\"signedMessage:\"\n\n,\n\nsignedMessage\n\n)\n\n;\n\n16\n\nconsole\n\n.\n\nlog\n\n(\n\n\"signedMessage:\"\n\n,\n\nsignedMessage\n\n)\n\n;\n\n17\n\n// recover the public address of the signer to verify\n\n17\n\n// recover the public address of the signer to verify\n\n18\n\nconst\n\nrecoveredAddress\n\n=\n\nrecoverPersonalSignature\n\n(\n\n{\n\n18\n\nconst\n\nrecoveredAddress\n\n=\n\nrecoverPersonalSignature\n\n(\n\n{\n\n19\n\ndata\n\n:\n\nmessage\n\n,\n\n19\n\ndata\n\n:\n\nmessage\n\n,\n\n20\n\nsignature\n\n:\n\nsignedMessage\n\n,\n\n20\n\nsignature\n\n:\n\nsignedMessage\n\n,\n\n21\n\n}\n\n)\n\n;\n\n21\n\n}\n\n)\n\n;\n\n22\n\nconsole\n\n.\n\nlog\n\n(\n\n22\n\nconsole\n\n.\n\nlog\n\n(\n\n23\n\nrecoveredAddress\n\n.\n\ntoLocaleLowerCase\n\n(\n\n)\n\n===\n\naccount\n\n.\n\ntoLocaleLowerCase\n\n(\n\n)\n\n23\n\nrecoveredAddress\n\n.\n\ntoLocaleLowerCase\n\n(\n\n)\n\n===\n\naccount\n\n.\n\ntoLocaleLowerCase\n\n(\n\n)\n\n24\n\n?\n\n\"Signing success!\"\n\n24\n\n?\n\n\"Signing success!\"\n\n25\n\n:\n\n\"Signing failed!\"\n\n25\n\n:\n\n\"Signing failed!\"\n\n26\n\n)\n\n;\n\n26\n\n)\n\n;\n\n27\n\n}\n\n;\n\n27\n\n}\n\n;", "explanation": "This documentation section titled '#Usage' explains how to collect a user's personal signature using the Magic Labs embedded wallet.\n\nHere's what it's about in a clear and concise manner:\n\n**Step 1: Set up the Magic SDK**\n\nYou need to verify that the Magic SDK is correctly set up on your system. This involves importing the necessary libraries and initializing the Magic object with your API key.\n\n**Step 2: Authenticate the user**\n\nYou must authenticate the user using the Magic SDK before requesting their personal signature.\n\n**Step 3: Request consent to collect the signature**\n\nOnce authenticated, you can request consent from the user to collect their personal signature. This is likely handled by the Magic SDK or a separate library.\n\n**Step 4: Sign and verify the message**\n\nThe `signAndVerify` function is defined to demonstrate how to sign and verify a message using the user's personal signature. It:\n\n1. Creates a new Web3 instance with the RPC provider from the Magic object.\n2. Uses the `personal.sign` method of the Web3 instance to sign a message with the user's account address.\n3. Recovers the public address of the signer from the signed message using the `recoverPersonalSignature` function.\n4. Verifies that the recovered address matches the original account address, indicating successful signing.\n\nThe main purpose of this documentation section is to provide an example implementation of collecting a user's personal signature using Magic Labs embedded wallet, which can be used as a reference or starting point for building your own application.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/wallets/features/personal-signatures#chunk-3", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nSee how to brand this experience with your own logo and colors in the customization section. \u2060\n\ncustomization section", "explanation": "It seems there's no actual content related to '#Configuration' in that documentation URL.\n\nHowever, based on the context of Magic Labs embedded wallet documentation, I'll provide a general explanation of what a configuration section might entail:\n\n**#Configuration**\n\nThe **#Configuration** section is likely a part of the Magic Labs embedded wallet documentation that explains how to set up and customize the wallet's features. This section would provide instructions on configuring various aspects of the wallet, such as:\n\n* Integrating with your application or website\n* Setting up personal signatures (as mentioned in the URL)\n* Customizing the wallet's appearance, including branding and colors\n\nThe main purpose of this section is to guide developers and administrators through the process of configuring the Magic Labs embedded wallet to suit their specific use case. It would provide step-by-step instructions, code snippets, or other relevant information to ensure a smooth and successful integration.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/wallets/features/personal-signatures#chunk-4", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 Quickstart\n\n\u2022 Supported EVM RPC Methods\n\nQuickstart\n\nSupported EVM RPC Methods", "explanation": "The \"#Resources\" section of the Magic Labs embedded wallet documentation appears to be a collection of links or references to further information on specific topics related to personal signatures in wallets. \n\nHere's what each item seems to be about:\n\n1. **Quickstart**: This is likely an introduction or guide that helps users get started with implementing personal signatures in their Magic Labs wallets as quickly as possible.\n\n2. **Supported EVM RPC Methods**: This section probably lists and explains the Remote Procedure Call (RPC) methods of the Ethereum Virtual Machine (EVM) that are supported by the Magic Labs wallet for use with personal signatures. The term \"EVM RPC Methods\" is technical and refers to a set of APIs that allow external programs to interact with an EVM, which powers various blockchain networks including Ethereum.\n\nThe main purpose of this \"#Resources\" section seems to be providing easy access to additional information or resources that can help users better understand how to implement personal signatures in their Magic Labs wallets. It's designed to supplement the existing documentation and possibly save users time by giving them links they need right away rather than forcing them to search through the main documentation for specific details on these topics.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/wallets/features/personal-signatures#chunk-5", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nYou can allow your users to sign up & log in to your web app with their Apple ID.", "explanation": "**Apple Social Login with Magic Overview**\n\nThis documentation section explains how to integrate Apple Social Login into a web application using the Magic Labs embedded wallet.\n\n**Main Purpose:**\n\nThe main purpose of this feature is to enable users to sign up and log in to a web application using their existing Apple ID, streamlining the authentication process for customers who already use Apple services.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/login/social-logins/social-providers/apple#chunk-1", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n#\n\nMagic SDK offers two OAuth extensions: v1 and v2. For web applications, it is recommended to use v2, while v1 should be used for mobile applications.\n\nv1\n\nv2\n\n\u2022 You will need an Apple developer account\n\n\u2022 You will need to have created a primary App ID for your Apple developer account\n\n\u2022 You will need to have the Magic SDK installed into your web app\n\n\u2022 You will need to have the Magic SDK - OAuth Extension installed into your web app\n\nApple developer\n\ncreated a primary App ID\n\nMagic SDK installed\n\nMagic SDK - OAuth Extension", "explanation": "This documentation section is titled '#Usage - #Prerequisites' and it's about setting up an Apple login (via OAuth) in a Magic Labs embedded wallet.\n\nThe main purpose of this section is to list the necessary requirements and setup steps for integrating Apple login into your web application using the Magic SDK.\n\nIn short, it outlines what you need to do before implementing Apple login with Magic:\n\n1. Have an Apple developer account\n2. Create a primary App ID in that account\n3. Ensure the Magic SDK and its OAuth Extension are installed in your web app\n\nThis section provides essential prerequisites for developers who want to use Apple login with Magic Labs embedded wallet.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/login/social-logins/social-providers/apple#chunk-2", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 Go to your Magic Dashboard\n\n\u2022 Select the Magic app for which you\u2019d like to enable Sign in with Apple, or create a new app\n\n\u2022 Navigate to Social Login from the sidebar\n\n\u2022 Click the toggle for Apple. Looks like we'll need to collect a few important details from Apple first: a Services ID, Key ID, Team ID, and Private Key\n\n\u2022 Open a new tab, go to your Apple developer dashboard\n\n\u2022 Navigate to Membership details\n\n\u2022 Find your Team ID. Copy/paste this to the setup form on Magic Dashboard\n\n\u2022 In Apple's dashboard, navigate to Identifiers under Certificates, IDs, & Profiles\n\n\u2022 Add a new Services ID for your Magic authentication connection. The identifier you select here should be added to the setup form on Magic Dashboard as your Services ID. Click Continue, then click Register.\n\n\u2022 You'll be returned to a list of Services IDs you've registered, including your new one for Magic authentication. Click your newly created Services ID to enable it for Sign in with Apple. Then, click Configure.\n\n\u2022 A modal will show, allowing you to connect your Services ID to specific internet domains. In Domains & Subdomains, enter auth.magic.link. In Return URLs, you'll paste the Redirect URI listed on Magic Dashboard for your Apple Social Login connection. Once you've entered the correct information, you can save your Services ID by clicking Continue, then Save.\n\n\u2022 Return to Magic Dashboard, you should have Team ID and Services ID populated by this step. Now you can paste your Key ID as well. Finally, you'll need to paste the contents of the Private Key file you downloaded from Apple's dashboard Click \u201cSave\u201d \u2013 Done!\n\nMagic Dashboard\n\nApple developer dashboard\n\nMembership details\n\nCertificates, IDs, & Profiles\n\nServices ID\n\nauth.magic.link", "explanation": "**What is #Apple Setup (v1 extension)?**\n\nThe `#Apple Setup (v1 extension)` section from the Magic Labs documentation is a step-by-step guide on how to set up Apple's Sign in with Apple feature for authentication in your Magic app.\n\n**Main Purpose:**\n\nThe main purpose of this setup is to connect your Magic app to Apple's services, allowing users to log in using their Apple ID. This involves obtaining and configuring various IDs and keys from the Apple Developer Dashboard, which are then used to set up the Sign in with Apple feature on the Magic Dashboard.\n\n**Key Takeaways:**\n\n1. Obtain a Team ID from the Apple Developer Dashboard.\n2. Create a Services ID for your Magic authentication connection.\n3. Configure the Services ID to include specific internet domains (e.g., auth.magic.link) and Return URLs (from the Magic Dashboard).\n4. Paste the Key ID, Private Key, and other required information into the Magic Dashboard setup form.\n\nBy following these steps, you can successfully set up Apple's Sign in with Apple feature for your Magic app, providing users with a convenient and secure authentication option.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/login/social-logins/social-providers/apple#chunk-3", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 In step 11, whitelist your app's domain in Domains & Subdomains, and paste the Redirect URI you will pass in as the redirectURI argument to the loginWithRedirect method\n\nCopy\n\n01\n\nawait\n\nmagic\n\n.\n\noauth2\n\n.\n\nloginWithRedirect\n\n(\n\n{\n\n01\n\nawait\n\nmagic\n\n.\n\noauth2\n\n.\n\nloginWithRedirect\n\n(\n\n{\n\n02\n\nprovider\n\n:\n\n'apple'\n\n,\n\n02\n\nprovider\n\n:\n\n'apple'\n\n,\n\n03\n\nredirectURI\n\n:\n\n'https://your-app.com/your/oauth/callback'\n\n,\n\n// <== whitelist this with Apple\n\n03\n\nredirectURI\n\n:\n\n'https://your-app.com/your/oauth/callback'\n\n,\n\n// <== whitelist this with Apple\n\n04\n\n}\n\n)\n\n;\n\n04\n\n}\n\n)\n\n;", "explanation": "This documentation section is about setting up an Apple login provider using the Magic Labs embedded wallet's OAuth2 functionality.\n\n**Main Purpose:**\n\nThe main purpose of this setup is to allow users to log in to your application using their Apple account credentials, and then securely authenticate and authorize them using the Magic Labs embedded wallet.\n\n**Key Points:**\n\n1. **Whitelisting**: You need to whitelist your app's domain on Apple's Domains & Subdomains page.\n2. **Redirect URI**: You must specify a Redirect URI in both Apple's setup and your application code, which is used to redirect users back to your app after authentication.\n\n**Magic Labs Embedded Wallet Method:**\n\nThe `loginWithRedirect` method from the Magic Labs embedded wallet is used to initiate the login flow with Apple. The method takes an object with the following properties:\n\n* `provider`: Set to `'apple'`\n* `redirectURI`: Set to a specific URL that will handle the authentication response\n\nBy following these steps, you can integrate Apple login into your application using Magic Labs embedded wallet's OAuth2 functionality.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/login/social-logins/social-providers/apple#chunk-4", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 Apple Social Login Demo\n\nApple Social Login Demo", "explanation": "The '#Resources' section is about providing additional materials or examples to help users implement or understand Apple Social Login on the Magic Labs embedded wallet platform. Specifically, this section contains a resource called 'Apple Social Login Demo'.\n\nThe main purpose of this section is to provide a demonstration or example of how the Apple Social Login feature works on the Magic Labs embedded wallet platform. This demo is likely meant to serve as a practical guide or reference for developers who want to integrate Apple Social Login into their applications, to help them better understand the implementation process and how to troubleshoot any issues that may arise.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/login/social-logins/social-providers/apple#chunk-5", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "This feature requires a subscription to Growth Plan", "explanation": "Based on the provided documentation section \"Custom Email Provider - Custom Email Provider\", I'll summarize its content and main purpose in a clear and concise manner:\n\n**What it is:**\nThe Custom Email Provider feature allows Magic Labs users to set up their own email server for sending transactional emails, such as password reset links or order confirmations.\n\n**Main Purpose:**\nThe primary goal of this feature is to provide an alternative to the default email provider used by Magic Labs, which can help with:\n\n* Compliance with specific regulatory requirements\n* Reducing the risk of email spoofing and phishing attacks\n* Improving deliverability and uptime of transactional emails\n\nIn essence, Custom Email Provider enables users to take control of their email infrastructure and ensure that sensitive communications are sent through a custom email server, rather than relying on Magic Labs' default email provider.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/customization/custom-smtp#chunk-1", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nOnly available with Dedicated Wallet.\n\nDedicated Wallet\n\nCustom Email Provider is a premium feature that allows developers to configure the sender of Magic Link emails by routing emails through their own SMTP servers. Emails sent from our servers come from the default noreply@trymagic.com.\n\nnoreply@trymagic.com\n\nEnabling a custom SMTP gives you full control over where your application's login emails are sent from, as well as the name of the sender. Custom email providers are configured at the application level by visiting the Settings section of the Dashboard.\n\nDashboard", "explanation": "The '#Overview' section is about Custom Email Providers in Magic Link documentation.\n\n**Main Purpose:** This feature allows developers to customize the sender of login emails for their application, giving them full control over where these emails come from and who they appear to be sent by.\n\n**Key Points:**\n\n* Available only with Dedicated Wallet\n* Enables customization of email sender through custom SMTP servers\n* Allows control over email origin and sender name\n* Configurable at the application level in the Dashboard", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/customization/custom-smtp#chunk-2", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nOnce Custom Email Provider has been unlocked for your workspace, you can continue using Magic's existing email infrastructure or configure your own custom SMTP server.\n\nAll we need is the information specified in the form below:\n\n\u2022 Sender email: The email address your app's login emails will be sent from. E.g. example@your-domain.com\u2060Note: Do not to use your dashboard user account email as the Sender Email, or try to login with the Sender Email\n\n\u2022 Sender name (optional): The name that appears on the subject line of the login email. Defaults to sender email address if not provided.\n\n\u2022 Host: Hostname for your SMTP server. E.g. smtp.postmarkapp.com\n\n\u2022 Port: Port of your SMTP server\n\n\u2022 Username, Password: Credentials to authenticate into your SMTP server\n\nexample@your-domain.com\n\n\u2022 \u2060Note: Do not to use your dashboard user account email as the Sender Email, or try to login with the Sender Email\n\nSender Email\n\nSender Email\n\nsmtp.postmarkapp.com\n\nWith the above pieces of information, we will be able to create a TLS-encrypted context to route our Magic Link emails to your server.", "explanation": "**Configuration Section Overview**\n\nThe '#Configuration' section is part of the Magic Labs documentation that allows you to customize the email infrastructure for authentication purposes. Specifically, it enables you to use a custom SMTP (Simple Mail Transfer Protocol) server instead of Magic's default email system.\n\n**Main Purpose**\n\nThe main purpose of this configuration is to allow you to send login-related emails from your app using a custom SMTP server. This provides flexibility and control over the email sending process.\n\n**Key Information Required**\n\nTo configure your custom SMTP server, you'll need to provide the following details:\n\n1. **Sender Email**: The email address that will be used as the sender for login emails.\n2. **Sender Name (optional)**: The name that appears on the subject line of login emails.\n3. **Host**: The hostname for your SMTP server.\n4. **Port**: The port number of your SMTP server.\n5. **Username and Password**: Credentials to authenticate with your custom SMTP server.\n\nBy providing this information, Magic Labs can establish a secure connection (TLS-encrypted context) to route authentication-related emails to your custom SMTP server.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/customization/custom-smtp#chunk-3", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nThe Send test email button will be enabled after saving a valid custom SMTP configuration. It will attempt to send a test email from the specified custom SMTP configuration to the email of the Magic Dashboard user who is currently logged in.\n\nIf you do not receive your test email within 1-2 minutes, please check your configuration settings and try again.\n\nIf you run into any issues during setup, please reach out via our help widget in the bottom-right corner of this page.", "explanation": "This documentation section explains how to send a test email using a custom SMTP (Simple Mail Transfer Protocol) configuration in Magic Labs embedded wallet.\n\n**Main purpose:** To verify that the custom SMTP configuration is working correctly by sending a test email from the specified SMTP settings to the current logged-in user's email address on the Magic Dashboard.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/customization/custom-smtp#chunk-4", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n#\n\nThis method is currently only available through our web, React Native, and Android SDKs. For all other SDKs, refer to our Reveal Page section below.\n\nweb\n\nReact Native\n\nAndroid\n\nReveal Page\n\nImplementing this SDK method will allow your end users to access their private key. Be sure to read through this document carefully before implementing.\n\nFor Dedicated Wallet apps, you can use Magic's user.revealPrivateKey method to allow your users to view their private keys. Implementing this method will allow your end users to back up their private keys or take them to another wallet. Neither Magic nor the developer can see this key; only the end user can.\n\nuser.revealPrivateKey\n\nuser.revealPrivateKey\n\n#\n\nOnce you have verified the correct setup of the Magic SDK and successfully authenticated the user, the reveal private key modal can then be displayed by calling the revealPrivateKey method:\n\nrevealPrivateKey\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\n02\n\n03\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n03\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n04\n\n04\n\n05\n\ntry\n\n{\n\n05\n\ntry\n\n{\n\n06\n\nawait\n\nmagic\n\n.\n\nuser\n\n.\n\nrevealPrivateKey\n\n(\n\n)\n\n;\n\n06\n\nawait\n\nmagic\n\n.\n\nuser\n\n.\n\nrevealPrivateKey\n\n(\n\n)\n\n;\n\n07\n\n}\n\ncatch\n\n{\n\n07\n\n}\n\ncatch\n\n{\n\n08\n\n// Handle errors if required!\n\n08\n\n// Handle errors if required!\n\n09\n\n}\n\n09\n\n}", "explanation": "**Key Export Documentation**\n\nThis documentation section, available at https://magic.link/docs/wallets/features/key-export, explains how to implement a feature in Magic Labs embedded wallet that allows end users to access their private key.\n\n**Main Purpose:**\n\nThe main purpose of this feature is to enable end users to back up their private keys or transfer them to another wallet. This is particularly important for Dedicated Wallet apps, where users may need to access their private keys for various reasons.\n\n**Key Points:**\n\n* The `user.revealPrivateKey` method is used to display a modal that allows users to view their private key.\n* This feature is currently only available through the web, React Native, and Android SDKs. For other SDKs, refer to the Reveal Page section.\n* Implementing this feature requires careful setup of the Magic SDK and successful authentication of the user.\n\n**Example Code:**\n\nThe documentation provides an example code snippet in JavaScript that demonstrates how to call the `revealPrivateKey` method:\n```javascript\nimport { Magic } from 'magic-sdk';\n\nconst magic = new Magic('PUBLISHABLE_API_KEY');\n\ntry {\n  await magic.user.revealPrivateKey();\n} catch {\n  // Handle errors if required!\n}\n```\nNote that this code snippet is for illustrative purposes only and should be modified to fit your specific use case.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/wallets/features/key-export#chunk-1", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nFor non-web SDK apps, Magic creates a private key reveal page for your users to log into using the same login methods as your app. This page is only made for your app upon request. When the user logs in they will follow some intuitive prompts to reveal their private key.\n\nIf you would like your users to be able to view and export their private key, please contact us using the chat widget in the bottom-right corner of this page with the following information:\n\n\u2022 Your API key (starts with pk_live)\n\n\u2022 A list of blockchains you are using\n\n\u2022 Your app name for the endpoint, such as https://reveal.magic.link/your-app-name\n\npk_live\n\nhttps://reveal.magic.link/your-app-name\n\nThe login methods available on your reveal page will match the login methods that you have activated in your Magic developer dashboard (found under \"Passwordless Login\" and \"Social Login\").\n\nMagic developer dashboard\n\nPlease make sure to deactivate any login methods that you are not using. Login methods can be added and removed at any point and changes will be immediately visible on your reveal page.\n\nThe look of the UI for your reveal page will also match the settings configured within the \"branding\" section of your developer dashboard. This includes the logo shown, the primary color, as well as choosing between light/dark mode. More details on branding and UI customization can be found here.\n\nfound here", "explanation": "**Reveal Page: A Key Export Feature for Non-Web SDK Apps**\n\nThe `#Reveal Page` is a feature provided by Magic Labs that enables users to access and export their private key in non-web SDK applications. This page is customized for each app and can be requested by contacting Magic using the chat widget.\n\n**Main Purpose:**\n\nThe primary purpose of the Reveal Page is to provide users with an intuitive way to access and manage their private keys, ensuring that they can securely view and export their key as needed.\n\n**Key Features:**\n\n* Customized login methods matching those configured in the Magic developer dashboard\n* Branding settings (logo, primary color, light/dark mode) aligned with the app's identity\n* Ability to add or remove login methods at any time\n\nBy offering a secure and user-friendly way to manage private keys, the Reveal Page enhances the overall experience of Magic Labs' embedded wallet feature.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/wallets/features/key-export#chunk-2", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nUniversal wallets will soon be merged with Dedicated Wallets into a single product line. Universal apps created before February 7, 2024 will work as expected with no change. See our blog post to learn more.\n\nblog post\n\nFor Universal Wallet apps, users can view their seed phrase directly through wallet.magic.link.\n\nwallet.magic.link\n\nOnce signed in, click on the profile icon in the top left corner and then select \"Wallet Secret Phrase\".", "explanation": "The section titled '#Universal Wallet' is about the Magic Labs Universal Wallet, which is a type of embedded wallet that allows users to manage their cryptocurrency assets. \n\nThe main purpose of this documentation section is to inform developers that Universal Wallets will soon be merged with Dedicated Wallets into a single product line and provide information on how users can view their seed phrase (also known as the wallet secret phrase) for existing Universal Wallet apps.\n\nAdditionally, the documentation provides instructions on how to view the seed phrase: \n\n1. Go to wallet.magic.link\n2. Sign in to your account\n3. Click on the profile icon in the top left corner\n4. Select \"Wallet Secret Phrase\" to view the seed phrase.\n\nThis information is crucial for users to manage their wallet security and recover their assets in case they lose access to their account.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/wallets/features/key-export#chunk-3", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "Learn how to use email to create Solana wallets with Magic and Next.js.\n\nMagic provides leading wallet-as-a-service so that your users can have the best wallet experience with minimal effort on your part. This guide will walk you through how to use Magic to authenticate your users and have them sign and send transactions on Solana. The code snippets provided are based on a Next.js web app but can be modified to work with virtually any JavaScript framework.", "explanation": "**Purpose:** This documentation section explains how to use email authentication with the Magic Labs embedded wallet to create Solana wallets.\n\n**Main Points:**\n\n1. **Magic's Wallet-as-a-Service**: Magic provides a solution for users to have a seamless wallet experience without requiring significant effort from developers.\n2. **Email Authentication**: The guide shows how to use email authentication to enable users to sign and send transactions on the Solana blockchain using Magic.\n3. **Code Examples**: The documentation includes code snippets based on Next.js, but they can be adapted for other JavaScript frameworks.\n\n**Overall Goal:** This section aims to help developers integrate Magic's wallet solution with email authentication to create a user-friendly experience for their users when interacting with the Solana blockchain.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/guides/email-otp-with-solana#chunk-1", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nTo follow along with this guide, you\u2019ll need two things:\n\n\u2022 A Magic Publishable API Key\n\n\u2022 A web client\n\nYou can get your Publishable API Key from your Magic Dashboard.\n\nMagic Dashboard\n\nIf you already have an existing web client to use, feel free to skip ahead to the section titled Install project dependencies. Otherwise, you can use the make-scoped-magic-app CLI tool to bootstrap a Next.js app with Magic authentication already baked into the client.\n\nInstall project dependencies\n\nmake-scoped-magic-app\n\nThe make-scoped-magic-app CLI tool is an easy way to bootstrap new projects with Magic. To get started, simply run the command below in the shell of your choice. Be sure to replace <YOUR_PUBLISHABLE_API_KEY> with the Publishable API Key from your Magic Dashboard.\n\nmake-scoped-magic-app\n\n<YOUR_PUBLISHABLE_API_KEY>\n\nMagic Dashboard\n\nYou can also run the command without the flags to be guided interactively through the setup process. If you go through the guided prompts, note that this guide\u2019s code snippets assume that you\u2019ve chosen the following options when prompted:\n\n\u2022 Custom Setup\n\n\u2022 Solana \u2192 Devnet\n\n\u2022 Email OTP\n\nCopy\n\n01\n\nnpx make-scoped-magic-app\n\n\\\n\n\\\n\n01\n\nnpx make-scoped-magic-app\n\n\\\n\n\\\n\n02\n\n--template nextjs-solana-dedicated-wallet\n\n\\\n\n\\\n\n02\n\n--template nextjs-solana-dedicated-wallet\n\n\\\n\n\\\n\n03\n\n--network solana-devnet\n\n\\\n\n\\\n\n03\n\n--network solana-devnet\n\n\\\n\n\\\n\n04\n\n--login-methods EmailOTP\n\n\\\n\n\\\n\n04\n\n--login-methods EmailOTP\n\n\\\n\n\\\n\n05\n\n--publishable-api-key\n\n<\n\nYOUR_PUBLISHABLE_API_KEY\n\n>\n\n05\n\n--publishable-api-key\n\n<\n\nYOUR_PUBLISHABLE_API_KEY\n\n>\n\nThe resulting project already contains all of the client-side code shown throughout this guide. Go through each section to learn how the code is structured and what it does, but understand there\u2019s no need to write additional code to follow along.", "explanation": "**Project Prerequisites**\n\nThis documentation section outlines the two essential requirements for following along with a Magic Labs embedded wallet guide:\n\n1. **Magic Publishable API Key**: A unique key that grants access to the Magic Dashboard and is required for authentication.\n2. **Web Client**: Either an existing web client or a new one created using the `make-scoped-magic-app` CLI tool.\n\nThe main purpose of this section is to inform users about the prerequisites necessary to complete the guide, ensuring they have everything needed to proceed with the instructions provided.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/guides/email-otp-with-solana#chunk-2", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nTo integrate Magic into your project you\u2019ll need the base magic-sdk package as well as the @magic-ext/solana extension. The magic-sdk package handles Magic\u2019s core authentication, user, and wallet management functionality, while the @magic-ext/solana package adds methods specific to Solana.\n\nmagic-sdk\n\n@magic-ext/solana\n\nmagic-sdk\n\n@magic-ext/solana\n\nYou\u2019ll also want to install @solana/web3.js for Solana-related types and transaction convenience methods.\n\n@solana/web3.js\n\nIf you used the make-scoped-magic-app CLI to bootstrap your project, all three of these packages have been preloaded as dependencies. If you brought your own project to this guide, run the following command to install the required dependencies:\n\nmake-scoped-magic-app\n\nCopy\n\n01\n\nnpm\n\ninstall\n\nmagic-sdk @magic-ext/solana @solana/web3.js\n\n01\n\nnpm\n\ninstall\n\nmagic-sdk @magic-ext/solana @solana/web3.js", "explanation": "**Section Title:** #Install Project Dependencies\n\n**Main Purpose:**\n\nThis documentation section guides you on how to install the necessary dependencies for integrating Magic Labs into your project.\n\n**Key Points:**\n\n1. You need three packages:\n\t* `magic-sdk` (for core authentication, user, and wallet management)\n\t* `@magic-ext/solana` (for Solana-specific methods)\n\t* `@solana/web3.js` (for Solana-related types and transaction convenience methods)\n2. If you created your project using the `make-scoped-magic-app` CLI, these packages are already preloaded as dependencies.\n3. If you brought your own project to this guide, run the following command in your terminal to install the required dependencies:\n\t* `npm install magic-sdk @magic-ext/solana @solana/web3.js`\n\nBy installing these dependencies, you'll be able to integrate Magic Labs into your project and take advantage of its features.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/guides/email-otp-with-solana#chunk-3", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nWith the Magic SDK installed, you can initialize Magic with the Magic constructor. This requires your Publishable API Key (found in your Magic dashboard). We prefer to add this to our .env file rather than put it directly into our code.\n\nMagic\n\nMagic dashboard\n\n.env\n\nCopy\n\n01\n\nNEXT_PUBLIC_MAGIC_PUBLISHABLE_KEY=pk_live_1234567890\n\n01\n\nNEXT_PUBLIC_MAGIC_PUBLISHABLE_KEY=pk_live_1234567890\n\nWhere you initialize your Magic instance will depend on your chosen framework and architectural patterns. If you utilized the make-scoped-magic-app CLI to initialize your project, this setup code has already been completed and can be found in src/components/magic/MagicProvider.tsx, where Magic is initialized and surfaced to your app using the React Context API.\n\nmake-scoped-magic-app\n\nsrc/components/magic/MagicProvider.tsx\n\nWhen initializing your Magic instance, ensure you add a Solana configuration. You do this with the SolanaExtension object from @magic-ext/solana. Simply provide your chosen RPC URL and you\u2019re good to go.\n\nSolanaExtension\n\n@magic-ext/solana\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n02\n\nimport\n\n{\n\nSolanaExtension\n\n}\n\nfrom\n\n'@magic-ext/solana'\n\n;\n\n02\n\nimport\n\n{\n\nSolanaExtension\n\n}\n\nfrom\n\n'@magic-ext/solana'\n\n;\n\n03\n\n03\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\nprocess\n\n.\n\nenv\n\n.\n\nNEXT_PUBLIC_MAGIC_API_KEY\n\nas\n\nstring\n\n,\n\n{\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\nprocess\n\n.\n\nenv\n\n.\n\nNEXT_PUBLIC_MAGIC_API_KEY\n\nas\n\nstring\n\n,\n\n{\n\n05\n\nextensions\n\n:\n\n[\n\n05\n\nextensions\n\n:\n\n[\n\n06\n\nnew\n\nSolanaExtension\n\n(\n\n{\n\n06\n\nnew\n\nSolanaExtension\n\n(\n\n{\n\n07\n\nrpcUrl\n\n:\n\n\"<https://api.devnet.solana.com>\"\n\n,\n\n// or your own preferred RPC URL\n\n07\n\nrpcUrl\n\n:\n\n\"<https://api.devnet.solana.com>\"\n\n,\n\n// or your own preferred RPC URL\n\n08\n\n}\n\n)\n\n,\n\n08\n\n}\n\n)\n\n,\n\n09\n\n]\n\n,\n\n09\n\n]\n\n,\n\n10\n\n}\n\n)\n\n;\n\n10\n\n}\n\n)\n\n;\n\nThis magic object will be your client\u2019s access point for all things Magic. Take a look at the client-side API documentation for a list of modules and methods accessible through magic.\n\nmagic\n\nclient-side API documentation\n\nmagic", "explanation": "**Initializing Magic**\n\nThe `#Initialize Magic` section of the Magic Labs embedded wallet documentation explains how to set up the Magic SDK in your project.\n\n**Purpose:**\n\nThe main purpose of this initialization process is to create a Magic instance, which serves as the client's access point for all things Magic. This instance will allow you to use various Magic features and APIs in your application.\n\n**Key Points:**\n\n1. **Magic API Key**: You need to obtain your Publishable API Key from the Magic dashboard. It's recommended to store this key in a `.env` file rather than hardcoding it directly into your code.\n2. **Choosing the Right Framework**: The initialization process varies depending on your chosen framework and architectural patterns. If you used the `make-scoped-magic-app` CLI to initialize your project, the setup code has already been completed for you.\n3. **Adding Solana Configuration**: You need to add a Solana configuration using the `SolanaExtension` object from `@magic-ext/solana`. This involves providing your chosen RPC URL.\n\n**Example Code:**\n\nThe documentation provides an example code snippet that shows how to initialize the Magic instance and configure it with the Solana extension:\n```javascript\nimport { Magic } from 'magic-sdk';\nimport { SolanaExtension } from '@magic-ext/solana';\n\nconst magic = new Magic(process.env.NEXT_PUBLIC_MAGIC_API_KEY as string, {\n  extensions: [\n    new SolanaExtension({\n      rpcUrl: '<https://api.devnet.solana.com>',\n      // or your own preferred RPC URL\n    }),\n  ],\n});\n```\nBy following these steps and code examples, you can successfully initialize the Magic instance in your project.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/guides/email-otp-with-solana#chunk-4", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nEvery interaction with the Solana network using @solana/web3.js is facilitated through a Connection object. This object serves as the gateway to a specific Solana network, often referred to as a \u201ccluster.\u201d In this guide, we'll be utilizing the Devnet cluster.\n\n@solana/web3.js\n\nConnection\n\nTo employ the Connection object, create an instance by instantiating a new object and supplying your preferred RPC URL. If you bootstrapped your project with the make-scoped-magic-app CLI, your client\u2019s Connection object is initialized in the MagicProvider and surfaced to the rest of the app using the React Context API.\n\nConnection\n\nmake-scoped-magic-app\n\nConnection\n\nMagicProvider\n\nCopy\n\n01\n\nimport\n\n{\n\nConnection\n\n}\n\nfrom\n\n'@solana/web3.js'\n\n;\n\n01\n\nimport\n\n{\n\nConnection\n\n}\n\nfrom\n\n'@solana/web3.js'\n\n;\n\n02\n\n02\n\n03\n\nconst\n\nconnection\n\n=\n\nnew\n\nConnection\n\n(\n\n\"<https://api.devnet.solana.com>\"\n\n)\n\n;\n\n03\n\nconst\n\nconnection\n\n=\n\nnew\n\nConnection\n\n(\n\n\"<https://api.devnet.solana.com>\"\n\n)\n\n;\n\n#\n\nWhen Magic authenticates a user for the first time, Magic will automatically generate a new wallet for that user with zero additional work required by you.\n\nMagic provides a number of ways to authenticate users. For simplicity, we\u2019ll stick with one-time passcodes (Email OTP) sent to the user\u2019s email. To set up Email OTP, you\u2019ll need to have a way for users to input their email address, after which you simply call loginWithEmailOTP from Magic\u2019s Auth module. If the authentication is successful, the return value will be a token representing the user.\n\nloginWithEmailOTP\n\ntoken representing the user\n\nIf you've generated a Next.js project using the Magic CLI, you will already have a login function created named handleLogin in src/components/magic/auth/EmailOTP.tsx.\n\nhandleLogin\n\nsrc/components/magic/auth/EmailOTP.tsx\n\nCopy\n\n01\n\nconst\n\nhandleLogin\n\n=\n\nasync\n\n(\n\n)\n\n=>\n\n{\n\n01\n\nconst\n\nhandleLogin\n\n=\n\nasync\n\n(\n\n)\n\n=>\n\n{\n\n02\n\n// handle email format validation and other potential errors\n\n02\n\n// handle email format validation and other potential errors\n\n03\n\n03\n\n04\n\nconst\n\ndidToken\n\n=\n\nawait\n\nmagic\n\n?.\n\nauth\n\n.\n\nloginWithEmailOTP\n\n(\n\n{\n\nemail\n\n}\n\n)\n\n04\n\nconst\n\ndidToken\n\n=\n\nawait\n\nmagic\n\n?.\n\nauth\n\n.\n\nloginWithEmailOTP\n\n(\n\n{\n\nemail\n\n}\n\n)\n\n05\n\n05\n\n06\n\n// add custom handling, e.g. store token, send to server, etc\n\n06\n\n// add custom handling, e.g. store token, send to server, etc\n\n07\n\n}\n\n07\n\n}", "explanation": "This documentation section is about initializing a Solana connection and creating a Solana wallet with Email OTP authentication using the Magic Labs embedded wallet.\n\n**Main Purpose:**\n\nThe main purpose of this guide is to explain how to:\n\n1. Initialize a Solana connection using the `Connection` object from `@solana/web3.js`.\n2. Create a Solana wallet for a user with zero additional work required, automatically generated by Magic when the user authenticates for the first time.\n3. Authenticate users using Email OTP (one-time passcodes sent to the user's email) and obtain a token representing the user.\n\n**Key Points:**\n\n* The guide assumes you have already bootstrapped your project with the `make-scoped-magic-app` CLI, which initializes the MagicProvider and surfaces the Connection object to the rest of the app.\n* You need to create an instance of the `Connection` object by passing in a preferred RPC URL (in this case, the Devnet cluster).\n* When a user authenticates for the first time, Magic will automatically generate a new wallet with zero additional work required.\n* To authenticate users using Email OTP, you call `loginWithEmailOTP` from Magic's Auth module, which returns a token representing the user.\n\n**Example Code:**\n\nThe guide provides an example code snippet in TypeScript (using Next.js) that demonstrates how to handle authentication using Email OTP. The `handleLogin` function is called when the user submits their email address, and it uses Magic's Auth module to authenticate the user and obtain a token.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/guides/email-otp-with-solana#chunk-5", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nTo send a transaction, build your transactions as you would normally using helper functions from @solana/web3.js. When it comes time to sign, however, you\u2019ll use the signTransaction method accessible through the solana module on your magic instance. Once signed, you\u2019ll send the transaction using the sendRawTransaction method on your connection object. Below is an example component that transfers SOL from the user\u2019s wallet to another wallet.\n\n@solana/web3.js\n\nsignTransaction\n\nsolana\n\nmagic\n\nsendRawTransaction\n\nconnection\n\nCopy\n\n01\n\nimport\n\n{\n\nLAMPORTS_PER_SOL\n\n,\n\nPublicKey\n\n,\n\nSystemProgram\n\n,\n\nTransaction\n\n}\n\nfrom\n\n'@solana/web3.js'\n\n;\n\n01\n\nimport\n\n{\n\nLAMPORTS_PER_SOL\n\n,\n\nPublicKey\n\n,\n\nSystemProgram\n\n,\n\nTransaction\n\n}\n\nfrom\n\n'@solana/web3.js'\n\n;\n\n02\n\nimport\n\n{\n\nuseMagic\n\n}\n\nfrom\n\n'../MagicProvider'\n\n;\n\n02\n\nimport\n\n{\n\nuseMagic\n\n}\n\nfrom\n\n'../MagicProvider'\n\n;\n\n03\n\n03\n\n04\n\nconst\n\nSendTransaction\n\n=\n\n(\n\n)\n\n=>\n\n{\n\n04\n\nconst\n\nSendTransaction\n\n=\n\n(\n\n)\n\n=>\n\n{\n\n05\n\nconst\n\n{\n\nmagic\n\n,\n\nconnection\n\n}\n\n=\n\nuseMagic\n\n(\n\n)\n\n;\n\n05\n\nconst\n\n{\n\nmagic\n\n,\n\nconnection\n\n}\n\n=\n\nuseMagic\n\n(\n\n)\n\n;\n\n06\n\n// add the rest of your state\n\n06\n\n// add the rest of your state\n\n07\n\n07\n\n08\n\nconst\n\nsendTransaction\n\n=\n\nuseCallback\n\n(\n\nasync\n\n(\n\n)\n\n=>\n\n{\n\n08\n\nconst\n\nsendTransaction\n\n=\n\nuseCallback\n\n(\n\nasync\n\n(\n\n)\n\n=>\n\n{\n\n09\n\nconst\n\nuserPublicKey\n\n=\n\nnew\n\nPublicKey\n\n(\n\npublicAddress\n\nas\n\nstring\n\n)\n\n;\n\n09\n\nconst\n\nuserPublicKey\n\n=\n\nnew\n\nPublicKey\n\n(\n\npublicAddress\n\nas\n\nstring\n\n)\n\n;\n\n10\n\nconst\n\nreceiverPublicKey\n\n=\n\nnew\n\nPublicKey\n\n(\n\ntoAddress\n\nas\n\nstring\n\n)\n\n;\n\n10\n\nconst\n\nreceiverPublicKey\n\n=\n\nnew\n\nPublicKey\n\n(\n\ntoAddress\n\nas\n\nstring\n\n)\n\n;\n\n11\n\n11\n\n12\n\nconst\n\nhash\n\n=\n\nawait\n\nconnection\n\n?.\n\ngetLatestBlockhash\n\n(\n\n)\n\n;\n\n12\n\nconst\n\nhash\n\n=\n\nawait\n\nconnection\n\n?.\n\ngetLatestBlockhash\n\n(\n\n)\n\n;\n\n13\n\nif\n\n(\n\n!\n\nhash\n\n)\n\nreturn\n\n;\n\n13\n\nif\n\n(\n\n!\n\nhash\n\n)\n\nreturn\n\n;\n\n14\n\n14\n\n15\n\nconst\n\ntransaction\n\n=\n\nnew\n\nTransaction\n\n(\n\n{\n\n15\n\nconst\n\ntransaction\n\n=\n\nnew\n\nTransaction\n\n(\n\n{\n\n16\n\nfeePayer\n\n:\n\nuserPublicKey\n\n,\n\n16\n\nfeePayer\n\n:\n\nuserPublicKey\n\n,\n\n17\n\n...\n\nhash\n\n,\n\n17\n\n...\n\nhash\n\n,\n\n18\n\n}\n\n)\n\n;\n\n18\n\n}\n\n)\n\n;\n\n19\n\n19\n\n20\n\nconst\n\nlamportsAmount\n\n=\n\nNumber\n\n(\n\namount\n\n)\n\n*\n\nLAMPORTS_PER_SOL\n\n;\n\n20\n\nconst\n\nlamportsAmount\n\n=\n\nNumber\n\n(\n\namount\n\n)\n\n*\n\nLAMPORTS_PER_SOL\n\n;\n\n21\n\n21\n\n22\n\nconst\n\ntransfer\n\n=\n\nSystemProgram\n\n.\n\ntransfer\n\n(\n\n{\n\n22\n\nconst\n\ntransfer\n\n=\n\nSystemProgram\n\n.\n\ntransfer\n\n(\n\n{\n\n23\n\nfromPubkey\n\n:\n\nuserPublicKey\n\n,\n\n23\n\nfromPubkey\n\n:\n\nuserPublicKey\n\n,\n\n24\n\ntoPubkey\n\n:\n\nreceiverPublicKey\n\n,\n\n24\n\ntoPubkey\n\n:\n\nreceiverPublicKey\n\n,\n\n25\n\nlamports\n\n:\n\nlamportsAmount\n\n,\n\n25\n\nlamports\n\n:\n\nlamportsAmount\n\n,\n\n26\n\n}\n\n)\n\n;\n\n26\n\n}\n\n)\n\n;\n\n27\n\n27\n\n28\n\ntransaction\n\n.\n\nadd\n\n(\n\ntransfer\n\n)\n\n;\n\n28\n\ntransaction\n\n.\n\nadd\n\n(\n\ntransfer\n\n)\n\n;\n\n29\n\n29\n\n30\n\n// uses Magic to sign a Solana transaction\n\n30\n\n// uses Magic to sign a Solana transaction\n\n31\n\nconst\n\nsignedTransaction\n\n=\n\nawait\n\nmagic\n\n?.\n\nsolana\n\n.\n\nsignTransaction\n\n(\n\ntransaction\n\n,\n\n{\n\n31\n\nconst\n\nsignedTransaction\n\n=\n\nawait\n\nmagic\n\n?.\n\nsolana\n\n.\n\nsignTransaction\n\n(\n\ntransaction\n\n,\n\n{\n\n32\n\nrequireAllSignatures\n\n:\n\nfalse\n\n,\n\n32\n\nrequireAllSignatures\n\n:\n\nfalse\n\n,\n\n33\n\nverifySignatures\n\n:\n\ntrue\n\n,\n\n33\n\nverifySignatures\n\n:\n\ntrue\n\n,\n\n34\n\n}\n\n)\n\n;\n\n34\n\n}\n\n)\n\n;\n\n35\n\n35\n\n36\n\n// uses the base64 string of signedTransaction and creates a Buffer\n\n36\n\n// uses the base64 string of signedTransaction and creates a Buffer\n\n37\n\n// sends transaction to Solana network\n\n37\n\n// sends transaction to Solana network\n\n38\n\nconst\n\nsignature\n\n=\n\nawait\n\nconnection\n\n?.\n\nsendRawTransaction\n\n(\n\n38\n\nconst\n\nsignature\n\n=\n\nawait\n\nconnection\n\n?.\n\nsendRawTransaction\n\n(\n\n39\n\nBuffer\n\n.\n\nfrom\n\n(\n\nsignedTransaction\n\n?.\n\nrawTransaction\n\nas\n\nstring\n\n,\n\n'base64'\n\n)\n\n,\n\n39\n\nBuffer\n\n.\n\nfrom\n\n(\n\nsignedTransaction\n\n?.\n\nrawTransaction\n\nas\n\nstring\n\n,\n\n'base64'\n\n)\n\n,\n\n40\n\n)\n\n;\n\n40\n\n)\n\n;\n\n41\n\n41\n\n42\n\n// do something with signature\n\n42\n\n// do something with signature\n\n43\n\n}\n\n43\n\n}\n\n44\n\n...\n\n44\n\n...\n\n45\n\n// the rest of the UI component\n\n45\n\n// the rest of the UI component\n\n46\n\n}\n\n46\n\n}\n\nNotice that the signed transaction returned by magic.solana.signTransaction has a property rawTransaction. This value is a base64-encoded string representing the signed transaction. Since the sendRawTransaction method takes a buffer, we construct a new buffer from the base-64 encoded signedTransaction.rawTransaction.\n\nmagic.solana.signTransaction\n\nrawTransaction\n\nsendRawTransaction\n\nsignedTransaction.rawTransaction\n\nTo test this out yourself, you\u2019ll need some Devnet SOL. If you\u2019re using the scaffold generated by the make-scoped-magic-app CLI, there\u2019s a button in the UI to airdrop Devnet SOL to the connected wallet. Otherwise, you can use a faucet like the one provided on Solana\u2019s website.\n\nmake-scoped-magic-app\n\nfaucet like the one provided on Solana\u2019s website", "explanation": "The documentation section \"#Send a transaction\" from the Magic Link guide explains how to send SOL SOL SOL SOL SOL SOL SEL SEL SEL SELF SEL SEL SEL SELF SEL SEL SEL SELF SEL SER SELF SEL SER SET ER SETERSETSERERSESETSERERSETSEREDSERSETESERSESETSESETESERETSEESERETESEEXESERSEEsERESSEENUSERERSEERSEERERREPEERERROERPEORPEPPEPEPOPEPEPEPEPEPEPEPEPEPEPEPEPEPEPEPEPEPEPEPEPEPEPEPEPEPEPEPEPEPEPE", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/guides/email-otp-with-solana#chunk-6", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nYou now know how to integrate Magic into your Solana project and include the following features:\n\n\u2022 Simple authentication with Email OTP\n\n\u2022 Automatic Solana wallet creation for first-time users\n\n\u2022 Ability to have users sign and send a transaction on Solana\n\nFeel free to take a look at our final solution code or tinker with it directly in Codesandbox. These are only a few of Magic and Solana\u2019s features and methods. Take a look at the Solana blockchain docs for more information about how to use Magic with your dApps.\n\nfinal solution code\n\nCodesandbox\n\nSolana blockchain docs", "explanation": "This documentation section, titled '#Next Steps', serves as a conclusion and guide for users who have successfully integrated Magic Labs into their Solana project. The main purpose of this section is to:\n\n1. **Summarize the achieved features**: It lists the three key features that have been implemented:\n\t* Simple authentication with Email OTP\n\t* Automatic Solana wallet creation for first-time users\n\t* Ability to sign and send a transaction on Solana\n2. **Provide resources for further exploration**:\n\t* Direct links to the final solution code, allowing users to review or modify it directly in Codesandbox.\n\t* A link to the Solana blockchain documentation, which provides additional information on using Magic with dApps (Decentralized Applications).\n\nIn essence, this section is a gentle nudge to encourage users to continue learning and exploring the capabilities of Magic Labs with Solana, while also offering concrete resources for further development.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/guides/email-otp-with-solana#chunk-7", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 The full codebase can be found on GitHub\n\n\u2022 Work with the project directly in Codesandbox\n\n\u2022 Check out the documentation\n\nGitHub\n\nCodesandbox\n\ndocumentation", "explanation": "This section titled '#Resources' from the Magic Labs embedded wallet documentation is about providing easy access to external resources that can help with implementing or troubleshooting email OTP with Solana.\n\nThe main purpose of this section is to:\n\n* Provide a link to the full codebase on GitHub for developers who want to explore or contribute to the code.\n* Offer an alternative way to work with the project directly in Codesandbox, which is a online code editor and development environment.\n* Point users to the official documentation for more information on email OTP with Solana.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/guides/email-otp-with-solana#chunk-8", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nProvide users the ability to log into your app via Farcaster. This login method allows Farcaster users to login with their account and create a Magic wallet associated to their digital Farcaster Identifier (FID). Developers can access Farcaster user information such as fid and username, along with Magic metadata.\n\nfid\n\nusername\n\n\u2022 \u2060Test out Farcaster login here!\n\n\u2060Test out Farcaster login here!\n\n#\n\nFarcaster Login is only available with Dedicated Wallet, available as of magic-sdk@28.0.7.\n\nDedicated Wallet\n\nmagic-sdk@28.0.7", "explanation": "This documentation section is about the Farcaster Login feature in Magic Labs embedded wallet.\n\n**Main Purpose:** It allows users to log into an app using their Farcaster account, which creates a Magic wallet associated with their digital Farcaster Identifier (FID). This enables developers to access and utilize user information such as FID and username, along with Magic metadata.\n\n**Key Points:**\n\n* The feature is only available with the Dedicated Wallet, which was introduced in Magic SDK version 28.0.7.\n* It provides a way for Farcaster users to create a Magic wallet linked to their digital identity (FID).\n* Developers can access and utilize user information like FID, username, and Magic metadata.\n\nIn summary, this documentation section explains how to implement the Farcaster Login feature in an app using Magic Labs embedded wallet, which enables seamless user authentication and connects to the Magic ecosystem.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/login/farcaster#chunk-1", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 Authenticate and create wallets for end users by prompting users to login via Farcaster native app.", "explanation": "This documentation section is titled '#Use Cases' and describes a specific scenario where customers can use the Magic Labs embedded wallet to authenticate and create digital wallets for themselves.\n\n**Main Purpose:** The main purpose of this use case is to guide users on how to authenticate themselves using the Farcaster native app and create a new digital wallet within the Magic Labs system.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/login/farcaster#chunk-2", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nYou can implement Farcaster Login by including the Farcaster extension to your Magic instance. Once you've created a Magic client-side instance with the extension, log users in by calling magicClient.farcaster.login(). You can pass a showUI parameter boolean indicating whether or not to show a pre-built modal interface displaying the QR code to the user. When false, you can implement a custom UI to continue the Farcaster login.\n\nmagicClient.farcaster.login()\n\nshowUI\n\nfalse\n\nOnce logged in, you can retrieve the user's Magic wallet address using getInfo for Web/React Native.\n\ngetInfo\n\ngetInfo\n\n#\n\nFarcaster Login works as an extension to Magic SDK. To add Farcaster Login to your Magic integration, start by installing the Farcaster Extension:\n\nCopy\n\n01\n\nnpm\n\ninstall\n\nmagic-sdk @magic-ext/farcaster\n\n01\n\nnpm\n\ninstall\n\nmagic-sdk @magic-ext/farcaster", "explanation": "**Documentation Section: #Usage - #Login**\n\nThis documentation section explains how to implement Farcaster Login using the Magic Labs embedded wallet.\n\n**Main Purpose:** To provide a step-by-step guide on how to integrate Farcaster Login into a Magic instance, allowing users to log in and access their Magic wallet address.\n\n**Key Points:**\n\n1. **Including the Farcaster Extension**: Install the `@magic-ext/farcaster` extension using npm.\n2. **Creating a Magic Client-side Instance**: Create a Magic client-side instance with the Farcaster extension enabled.\n3. **Logging Users In**: Call `magicClient.farcaster.login()` to log users in, optionally showing a pre-built modal interface displaying the QR code (or implementing a custom UI).\n4. **Retrieving Wallet Address**: Use `getInfo` method to retrieve the user's Magic wallet address after logging in.\n\nThis documentation section aims to help developers integrate Farcaster Login into their Magic-based applications, enabling users to securely access and manage their digital wallets.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/login/farcaster#chunk-3", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nWhen creating your Magic instance, you'll need to add an instance of FarcasterExtension to the Magic constructor:\n\nFarcasterExtension\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\nimport\n\n{\n\nFarcasterExtension\n\n}\n\nfrom\n\n'@magic-ext/farcaster'\n\n;\n\n02\n\nimport\n\n{\n\nFarcasterExtension\n\n}\n\nfrom\n\n'@magic-ext/farcaster'\n\n;\n\n03\n\n03\n\n04\n\n// Must use a Dedicated Wallet API Key\n\n04\n\n// Must use a Dedicated Wallet API Key\n\n05\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_API_KEY'\n\n,\n\n{\n\n05\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_API_KEY'\n\n,\n\n{\n\n06\n\nextensions\n\n:\n\n[\n\nnew\n\nFarcasterExtension\n\n(\n\n)\n\n]\n\n,\n\n06\n\nextensions\n\n:\n\n[\n\nnew\n\nFarcasterExtension\n\n(\n\n)\n\n]\n\n,\n\n07\n\n}\n\n)\n\n;\n\n07\n\n}\n\n)\n\n;\n\n#\n\n\u2022 showUI? (Boolean): If true, show an out-of-the-box UI to display the QR code to the user. Defaults to true.\n\nshowUI?\n\ntrue\n\ntrue", "explanation": "**Initialization - Arguments**\n\nThis documentation section explains how to create a Magic instance with the FarcasterExtension enabled.\n\n**Main Purpose:**\n\nThe main purpose of this section is to provide instructions on how to add the FarcasterExtension to the Magic constructor, which enables authentication and login features using Farcaster.\n\n**Key Points:**\n\n* Import the necessary modules (`magic-sdk` and `@magic-ext/farcaster`) in your code.\n* Create a new instance of Magic with a dedicated wallet API key.\n* Pass an array of extensions to the Magic constructor, including a new instance of FarcasterExtension.\n* Optionally, set the `showUI` parameter to true to display an out-of-the-box UI to show the QR code to the user.\n\n**Example Code:**\n```javascript\nimport { Magic } from 'magic-sdk';\nimport { FarcasterExtension } from '@magic-ext/farcaster';\n\nconst magic = new Magic('YOUR_API_KEY', {\n  extensions: [new FarcasterExtension()],\n});\n```\nBy following these steps, you can integrate the FarcasterExtension with your Magic instance and enable authentication and login features.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/login/farcaster#chunk-4", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 PromiEvent<string | null>: The promise resolves upon authentication request success and rejects with a specific error code if the request fails. The resolved value is a Decentralized ID token with a default 15-minute lifespan.\n\nPromiEvent<string | null>", "explanation": "This documentation section explains the behavior of an asynchronous function, specifically how it handles successful and failed login requests.\n\n**Main Purpose:**\n\nThe main purpose of this section is to inform developers about what they can expect from the `login` function in terms of return values.\n\n**Key Points:**\n\n1. The function returns a **Promise**, which is a value that may not be available yet (e.g., it's still being computed or retrieved).\n2. This Promise resolves (i.e., becomes available) when the login request is successful.\n3. If the login request fails, the Promise rejects with a specific error code.\n4. When the Promise resolves, it contains a **Decentralized ID token**, which is a unique string that represents a user's identity on the blockchain.\n\nIn summary, this section helps developers understand how to handle the output of the `login` function, including what to expect when it succeeds or fails.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/login/farcaster#chunk-5", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\nimport\n\n{\n\nFarcasterExtension\n\n}\n\nfrom\n\n'@magic-ext/farcaster'\n\n;\n\n02\n\nimport\n\n{\n\nFarcasterExtension\n\n}\n\nfrom\n\n'@magic-ext/farcaster'\n\n;\n\n03\n\n03\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_API_KEY'\n\n,\n\n{\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_API_KEY'\n\n,\n\n{\n\n05\n\nextensions\n\n:\n\n[\n\nnew\n\nFarcasterExtension\n\n(\n\n)\n\n]\n\n,\n\n05\n\nextensions\n\n:\n\n[\n\nnew\n\nFarcasterExtension\n\n(\n\n)\n\n]\n\n,\n\n06\n\n}\n\n)\n\n;\n\n06\n\n}\n\n)\n\n;\n\n07\n\n07\n\n08\n\ntry\n\n{\n\n08\n\ntry\n\n{\n\n09\n\nawait\n\nmagic\n\n.\n\nfarcaster\n\n.\n\nlogin\n\n(\n\n)\n\n;\n\n09\n\nawait\n\nmagic\n\n.\n\nfarcaster\n\n.\n\nlogin\n\n(\n\n)\n\n;\n\n10\n\n}\n\ncatch\n\n{\n\n10\n\n}\n\ncatch\n\n{\n\n11\n\n// Handle errors or reject if required!\n\n11\n\n// Handle errors or reject if required!\n\n12\n\n}\n\n12\n\n}\n\n13\n\n13\n\n14\n\ntry\n\n{\n\n14\n\ntry\n\n{\n\n15\n\nconst\n\ndidToken\n\n=\n\nawait\n\nmagic\n\n.\n\nfarcaster\n\n.\n\nlogin\n\n(\n\n{\n\nshowUI\n\n:\n\nfalse\n\n}\n\n)\n\n;\n\n15\n\nconst\n\ndidToken\n\n=\n\nawait\n\nmagic\n\n.\n\nfarcaster\n\n.\n\nlogin\n\n(\n\n{\n\nshowUI\n\n:\n\nfalse\n\n}\n\n)\n\n;\n\n16\n\n}\n\ncatch\n\n{\n\n16\n\n}\n\ncatch\n\n{\n\n17\n\n// Handle errors if required!\n\n17\n\n// Handle errors if required!\n\n18\n\n}\n\n18\n\n}", "explanation": "This documentation section is titled `#Example` and it appears to be a code example for using the Magic Labs embedded wallet, specifically the Farcaster extension, to authenticate users through login functionality.\n\nHere's what this code does in simple terms:\n\n1. **Import necessary libraries**: The code starts by importing the Magic Labs SDK (`magic-sdk`) and the Farcaster Extension from their respective packages.\n2. **Create a new Magic instance**: A new `Magic` instance is created with an API key, which is required for authentication purposes. This instance will be used to interact with the Magic Labs embedded wallet.\n3. **Configure the Farcaster Extension**: The code then creates a new instance of the Farcaster Extension and adds it to the Magic instance's extensions list.\n4. **Attempt to login user**: Two separate attempts are made to log in the user using the `login` method from the Farcaster extension, which is a part of the Magic instance.\n\nThe `try-catch` blocks are used to handle potential errors that may occur during this process. If any errors do occur, they can be caught and handled as needed (e.g., by logging an error message or rejecting the login attempt).\n\nThe main purpose of this code example is to demonstrate how to use the Magic Labs embedded wallet's Farcaster extension to authenticate users through a login process. This can be useful for developers looking to integrate Magic Labs into their applications for user authentication and identity verification purposes.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/login/farcaster#chunk-6", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nA white-label Farcaster Login flow is available when passing showUI: false to this login method. Here's a short example to illustrate listening for and emitting events during the login flow:\n\nshowUI: false\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\nimport\n\n{\n\nFarcasterExtension\n\n}\n\nfrom\n\n'@magic-ext/farcaster'\n\n;\n\n02\n\nimport\n\n{\n\nFarcasterExtension\n\n}\n\nfrom\n\n'@magic-ext/farcaster'\n\n;\n\n03\n\n03\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_API_KEY'\n\n,\n\n{\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_API_KEY'\n\n,\n\n{\n\n05\n\nextensions\n\n:\n\n[\n\nnew\n\nFarcasterExtension\n\n(\n\n)\n\n]\n\n,\n\n05\n\nextensions\n\n:\n\n[\n\nnew\n\nFarcasterExtension\n\n(\n\n)\n\n]\n\n,\n\n06\n\n}\n\n)\n\n;\n\n06\n\n}\n\n)\n\n;\n\n07\n\n07\n\n08\n\ntry\n\n{\n\n08\n\ntry\n\n{\n\n09\n\nconst\n\nhandle\n\n=\n\nmagic\n\n.\n\nfarcaster\n\n.\n\nlogin\n\n(\n\n{\n\nshowUI\n\n:\n\nfalse\n\n}\n\n)\n\n;\n\n09\n\nconst\n\nhandle\n\n=\n\nmagic\n\n.\n\nfarcaster\n\n.\n\nlogin\n\n(\n\n{\n\nshowUI\n\n:\n\nfalse\n\n}\n\n)\n\n;\n\n10\n\n10\n\n11\n\nhandle\n\n11\n\nhandle\n\n12\n\n.\n\non\n\n(\n\n\"channel\"\n\n,\n\n(\n\nchannel\n\n)\n\n=>\n\n{\n\n12\n\n.\n\non\n\n(\n\n\"channel\"\n\n,\n\n(\n\nchannel\n\n)\n\n=>\n\n{\n\n13\n\nconsole\n\n.\n\nlog\n\n(\n\n\"channel URL\"\n\n,\n\nchannel\n\n.\n\nurl\n\n)\n\n13\n\nconsole\n\n.\n\nlog\n\n(\n\n\"channel URL\"\n\n,\n\nchannel\n\n.\n\nurl\n\n)\n\n14\n\n// display custom UI with QR code\n\n14\n\n// display custom UI with QR code\n\n15\n\n}\n\n)\n\n15\n\n}\n\n)\n\n16\n\n.\n\non\n\n(\n\n\"success\"\n\n,\n\n(\n\ndata\n\n)\n\n=>\n\n{\n\n16\n\n.\n\non\n\n(\n\n\"success\"\n\n,\n\n(\n\ndata\n\n)\n\n=>\n\n{\n\n17\n\n// get Farcaster user information\n\n17\n\n// get Farcaster user information\n\n18\n\n}\n\n)\n\n18\n\n}\n\n)\n\n19\n\n.\n\non\n\n(\n\n'done'\n\n,\n\n(\n\ndid\n\n)\n\n=>\n\n{\n\n19\n\n.\n\non\n\n(\n\n'done'\n\n,\n\n(\n\ndid\n\n)\n\n=>\n\n{\n\n20\n\n\u2060\n\n// get DID Token\n\n20\n\n\u2060\n\n// get DID Token\n\n21\n\n.\n\non\n\n(\n\n\"failed\"\n\n,\n\n(\n\ne\n\n)\n\n=>\n\n{\n\n21\n\n.\n\non\n\n(\n\n\"failed\"\n\n,\n\n(\n\ne\n\n)\n\n=>\n\n{\n\n22\n\n// user rejects\n\n22\n\n// user rejects\n\n23\n\n}\n\n)\n\n23\n\n}\n\n)\n\n24\n\n\u2060\n\n.\n\non\n\n(\n\n'error'\n\n,\n\n(\n\ne\n\n)\n\n=>\n\n{\n\n24\n\n\u2060\n\n.\n\non\n\n(\n\n'error'\n\n,\n\n(\n\ne\n\n)\n\n=>\n\n{\n\n25\n\n\u2060\n\n// handle error\n\n25\n\n\u2060\n\n// handle error\n\n26\n\n\u2060\n\n}\n\n26\n\n\u2060\n\n}\n\n27\n\n\u2060\u2060\n\n.\n\non\n\n(\n\n'settled'\n\n,\n\n(\n\ne\n\n)\n\n=>\n\n{\n\n27\n\n\u2060\u2060\n\n.\n\non\n\n(\n\n'settled'\n\n,\n\n(\n\ne\n\n)\n\n=>\n\n{\n\n28\n\n\u2060\n\n// handle resolve or reject\n\n28\n\n\u2060\n\n// handle resolve or reject\n\n29\n\n\u2060\n\n}\n\n29\n\n\u2060\n\n}\n\n30\n\n}\n\ncatch\n\n(\n\nerr\n\n)\n\n{\n\n30\n\n}\n\ncatch\n\n(\n\nerr\n\n)\n\n{\n\n31\n\n// handle errors\n\n31\n\n// handle errors\n\n32\n\n}\n\n32\n\n}", "explanation": "The `#Event Handling` section of the documentation is about managing events during the Farcaster Login flow in a Magic Labs embedded wallet. Here's what it's about and its main purpose:\n\n**What it's about:**\n\nThis section shows how to listen for and handle different events that occur during the Farcaster Login flow, such as:\n\n* \"channel\": When the user is redirected to the Farcaster login page\n* \"success\": When the user successfully logs in with Farcaster\n* \"done\": When the Farcaster login process is complete\n* \"failed\": When the user rejects or cancels the login process\n* \"error\": When an error occurs during the login process\n* \"settled\": When the Farcaster login process resolves or rejects\n\n**Main purpose:**\n\nThe main purpose of this section is to provide examples and code snippets that demonstrate how to handle these events in a Magic Labs embedded wallet. By listening for and responding to these events, developers can customize their app's behavior and user experience when integrating with Farcaster.\n\nFor example, the code snippet shows how to:\n\n* Log the URL of the Farcaster login page\n* Display custom UI with QR code\n* Get Farcaster user information\n* Handle errors that occur during the login process\n\nBy following this documentation, developers can build a seamless and secure integration with Farcaster in their Magic Labs embedded wallet.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/login/farcaster#chunk-7", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 Quickstart\n\n\u2022 Web API documentation\n\n\u2022 React Native API documentation\n\nQuickstart\n\nWeb API documentation\n\nReact Native API documentation", "explanation": "The `#Resources` section appears to be a collection of links to supplementary materials or guides related to the Magic Labs embedded wallet, specifically for authentication and login (Farcaster) purposes.\n\nHere's a breakdown of what each item is about:\n\n1. **Quickstart**: A brief guide or tutorial that provides a rapid introduction to getting started with the Magic Labs embedded wallet, likely covering the essential steps and setup process.\n2. **Web API documentation**: Detailed documentation for interacting with the Magic Labs Web APIs (Application Programming Interfaces). This would include information on API endpoints, data formats, authentication methods, and other technical details for integrating the wallet into web-based applications.\n3. **React Native API documentation**: Similar to the Web API documentation, but focused on using the Magic Labs embedded wallet within React Native mobile app development.\n\nThe main purpose of this `#Resources` section is to provide easy access to relevant guides, tutorials, and technical documentation that can help developers and users understand how to implement and utilize the Magic Labs embedded wallet in their applications or systems.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/login/farcaster#chunk-8", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nLoopring is a zkRollup layer 2 open protocol for building decentralized exchanges (DEXs) on the Ethereum blockchain. It allows for high-throughput, low-cost trading and payment on Ethereum.\n\nLoopring\n\nAs Loopring is EVM compatible, you can follow the Ethereum documentation to send your first transaction and utilize all other wallet features.\n\nEthereum", "explanation": "Here's a clear and concise explanation of the Loopring documentation section:\n\n**What is Loopring?**\n\nLoopring is an open protocol, built on the Ethereum blockchain, that enables high-throughput and low-cost decentralized exchange (DEX) operations.\n\n**Main Purpose**\n\nThe main purpose of Loopring is to facilitate fast and efficient trading and payment operations on the Ethereum blockchain. It does this by providing a scalable and cost-effective solution for decentralized exchanges.\n\n**Key Benefits**\n\n* High-throughput: Loopring allows for multiple transactions to be processed quickly and efficiently.\n* Low-cost: Loopring reduces the costs associated with decentralized exchange operations.\n* EVM compatibility: Loopring is EVM (Ethereum Virtual Machine) compatible, making it accessible for users who are familiar with Ethereum.\n\n**Integration with Magic Labs Embedded Wallet**\n\nSince Loopring is EVM compatible, users can follow the Ethereum documentation to send their first transaction and utilize other wallet features, making it easy to integrate Loopring with the Magic Labs embedded wallet.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/evm/loopring#chunk-1", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nMagic interacts with the Loopring blockchain via Magic SDK and the loopring-sdk package.\n\nloopring-sdk\n\nCopy\n\n01\n\nnpm\n\ninstall\n\n--save magic-sdk @loopring-web/loopring-sdk\n\n01\n\nnpm\n\ninstall\n\n--save magic-sdk @loopring-web/loopring-sdk", "explanation": "**Installation Section Overview**\n\nThe '#Installation' section of the Loopring documentation explains how to set up the necessary tools and packages to interact with the Loopring blockchain using Magic SDK. The main purpose of this section is to guide users through the process of installing the required dependencies to begin working with the Loopring blockchain.\n\n**Key Points:**\n\n1. **Required Packages:** The section mentions two required packages: `magic-sdk` and `@loopring-web/loopring-sdk`. These packages enable Magic to interact with the Loopring blockchain.\n2. **Installation Instructions:** The instructions use `npm` (Node Package Manager) to install the packages.\n3. **Saving Packages:** The `--save` flag is used to save the packages as dependencies in the project's `package.json` file.\n\n**Action Item:** To follow this section, users should run the following command in their terminal to install the required packages:\n\n```bash\nnpm install --save magic-sdk @loopring-web/loopring-sdk\n```", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/evm/loopring#chunk-2", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n\"magic-sdk\"\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n\"magic-sdk\"\n\n;\n\n02\n\nimport\n\n*\n\nas\n\nsdk\n\nfrom\n\n'@loopring-web/loopring-sdk'\n\n;\n\n02\n\nimport\n\n*\n\nas\n\nsdk\n\nfrom\n\n'@loopring-web/loopring-sdk'\n\n;\n\n03\n\nimport\n\n{\n\nLOOPRING_EXPORTED_ACCOUNT\n\n,\n\nLoopringAPI\n\n,\n\nsignatureKeyPairMock\n\n,\n\nTOKEN_INFO\n\n,\n\nweb3\n\n}\n\nfrom\n\n\"./Loopring\"\n\n;\n\n03\n\nimport\n\n{\n\nLOOPRING_EXPORTED_ACCOUNT\n\n,\n\nLoopringAPI\n\n,\n\nsignatureKeyPairMock\n\n,\n\nTOKEN_INFO\n\n,\n\nweb3\n\n}\n\nfrom\n\n\"./Loopring\"\n\n;\n\n04\n\n04\n\n05\n\nconst\n\ncustomNodeOptions\n\n=\n\n{\n\n05\n\nconst\n\ncustomNodeOptions\n\n=\n\n{\n\n06\n\n// Your own ethereum node URL\n\n06\n\n// Your own ethereum node URL\n\n07\n\nrpcUrl\n\n:\n\n'https://goerli.infura.io/v3/a06ed9c6b5424b61beafff27ecc3abf3'\n\n,\n\n07\n\nrpcUrl\n\n:\n\n'https://goerli.infura.io/v3/a06ed9c6b5424b61beafff27ecc3abf3'\n\n,\n\n08\n\nchainId\n\n:\n\n5\n\n,\n\n// chainId\n\n08\n\nchainId\n\n:\n\n5\n\n,\n\n// chainId\n\n09\n\n}\n\n;\n\n09\n\n}\n\n;\n\n10\n\n10\n\n11\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n\"YOUR API KEY\"\n\n,\n\n{\n\nnetwork\n\n:\n\ncustomNodeOptions\n\n}\n\n)\n\n;\n\n11\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n\"YOUR API KEY\"\n\n,\n\n{\n\nnetwork\n\n:\n\ncustomNodeOptions\n\n}\n\n)\n\n;\n\n12\n\n12\n\n13\n\nconst\n\nweb3\n\n=\n\nnew\n\nWeb3\n\n(\n\nmagic\n\n.\n\nrpcProvider\n\n)\n\n13\n\nconst\n\nweb3\n\n=\n\nnew\n\nWeb3\n\n(\n\nmagic\n\n.\n\nrpcProvider\n\n)\n\n14\n\n14\n\n15\n\n// Step1. get account info payerAddress should be magic wallet public address\n\n15\n\n// Step1. get account info payerAddress should be magic wallet public address\n\n16\n\nconst\n\n{\n\naccInfo\n\n}\n\n=\n\nawait\n\nLoopringAPI\n\n.\n\nexchangeAPI\n\n.\n\ngetAccount\n\n(\n\n{\n\nowner\n\n:\n\npayerAddress\n\n}\n\n)\n\n;\n\n16\n\nconst\n\n{\n\naccInfo\n\n}\n\n=\n\nawait\n\nLoopringAPI\n\n.\n\nexchangeAPI\n\n.\n\ngetAccount\n\n(\n\n{\n\nowner\n\n:\n\npayerAddress\n\n}\n\n)\n\n;\n\n17\n\nconsole\n\n.\n\nlog\n\n(\n\n\"accInfo:\"\n\n,\n\naccInfo\n\n)\n\n;\n\n17\n\nconsole\n\n.\n\nlog\n\n(\n\n\"accInfo:\"\n\n,\n\naccInfo\n\n)\n\n;\n\n18\n\n18\n\n19\n\n// Step 2. eddsaKey\n\n19\n\n// Step 2. eddsaKey\n\n20\n\nconst\n\neddsaKey\n\n=\n\nawait\n\nsignatureKeyPairMock\n\n(\n\naccInfo\n\n,\n\nweb3\n\n)\n\n;\n\n20\n\nconst\n\neddsaKey\n\n=\n\nawait\n\nsignatureKeyPairMock\n\n(\n\naccInfo\n\n,\n\nweb3\n\n)\n\n;\n\n21\n\nconsole\n\n.\n\nlog\n\n(\n\n\"eddsaKey:\"\n\n,\n\neddsaKey\n\n.\n\nsk\n\n)\n\n;\n\n21\n\nconsole\n\n.\n\nlog\n\n(\n\n\"eddsaKey:\"\n\n,\n\neddsaKey\n\n.\n\nsk\n\n)\n\n;\n\n22\n\n// Step 3. get apikey\n\n22\n\n// Step 3. get apikey\n\n23\n\nconst\n\n{\n\napiKey\n\n}\n\n=\n\nawait\n\nLoopringAPI\n\n.\n\nuserAPI\n\n.\n\ngetUserApiKey\n\n(\n\n{\n\n23\n\nconst\n\n{\n\napiKey\n\n}\n\n=\n\nawait\n\nLoopringAPI\n\n.\n\nuserAPI\n\n.\n\ngetUserApiKey\n\n(\n\n{\n\n24\n\naccountId\n\n:\n\naccInfo\n\n.\n\naccountId\n\n,\n\n24\n\naccountId\n\n:\n\naccInfo\n\n.\n\naccountId\n\n,\n\n25\n\n}\n\n,\n\n25\n\n}\n\n,\n\n26\n\neddsaKey\n\n.\n\nsk\n\n)\n\n;\n\n26\n\neddsaKey\n\n.\n\nsk\n\n)\n\n;\n\n27\n\nconsole\n\n.\n\nlog\n\n(\n\n\"apiKey:\"\n\n,\n\napiKey\n\n)\n\n;\n\n27\n\nconsole\n\n.\n\nlog\n\n(\n\n\"apiKey:\"\n\n,\n\napiKey\n\n)\n\n;\n\n28\n\n28\n\n29\n\n// Step 4. get storageId\n\n29\n\n// Step 4. get storageId\n\n30\n\nconst\n\nstorageId\n\n=\n\nawait\n\nLoopringAPI\n\n.\n\nuserAPI\n\n.\n\ngetNextStorageId\n\n(\n\n{\n\n30\n\nconst\n\nstorageId\n\n=\n\nawait\n\nLoopringAPI\n\n.\n\nuserAPI\n\n.\n\ngetNextStorageId\n\n(\n\n{\n\n31\n\naccountId\n\n:\n\naccInfo\n\n.\n\naccountId\n\n,\n\n31\n\naccountId\n\n:\n\naccInfo\n\n.\n\naccountId\n\n,\n\n32\n\nsellTokenId\n\n:\n\nTOKEN_INFO\n\n.\n\ntokenMap\n\n[\n\n\"LRC\"\n\n]\n\n.\n\ntokenId\n\n32\n\nsellTokenId\n\n:\n\nTOKEN_INFO\n\n.\n\ntokenMap\n\n[\n\n\"LRC\"\n\n]\n\n.\n\ntokenId\n\n33\n\n}\n\n,\n\n33\n\n}\n\n,\n\n34\n\napiKey\n\n)\n\n;\n\n34\n\napiKey\n\n)\n\n;\n\n35\n\nconsole\n\n.\n\nlog\n\n(\n\n\"storageId:\"\n\n,\n\nstorageId\n\n)\n\n;\n\n35\n\nconsole\n\n.\n\nlog\n\n(\n\n\"storageId:\"\n\n,\n\nstorageId\n\n)\n\n;\n\n36\n\n36\n\n37\n\nconst\n\nfee\n\n=\n\nawait\n\nLoopringAPI\n\n.\n\nuserAPI\n\n.\n\ngetOffchainFeeAmt\n\n(\n\n{\n\n37\n\nconst\n\nfee\n\n=\n\nawait\n\nLoopringAPI\n\n.\n\nuserAPI\n\n.\n\ngetOffchainFeeAmt\n\n(\n\n{\n\n38\n\naccountId\n\n:\n\naccInfo\n\n.\n\naccountId\n\n,\n\n38\n\naccountId\n\n:\n\naccInfo\n\n.\n\naccountId\n\n,\n\n39\n\nrequestType\n\n:\n\nsdk\n\n.\n\nOffchainFeeReqType\n\n.\n\nTRANSFER_AND_UPDATE_ACCOUNT\n\n39\n\nrequestType\n\n:\n\nsdk\n\n.\n\nOffchainFeeReqType\n\n.\n\nTRANSFER_AND_UPDATE_ACCOUNT\n\n40\n\n}\n\n,\n\n40\n\n}\n\n,\n\n41\n\napiKey\n\n)\n\n;\n\n41\n\napiKey\n\n)\n\n;\n\n42\n\nconsole\n\n.\n\nlog\n\n(\n\n\"fee:\"\n\n,\n\nfee\n\n)\n\n;\n\n42\n\nconsole\n\n.\n\nlog\n\n(\n\n\"fee:\"\n\n,\n\nfee\n\n)\n\n;\n\n43\n\n43\n\n44\n\nconst\n\nrequest\n\n=\n\n{\n\n44\n\nconst\n\nrequest\n\n=\n\n{\n\n45\n\nexchange\n\n:\n\nLOOPRING_EXPORTED_ACCOUNT\n\n.\n\nexchangeAddress\n\n,\n\n45\n\nexchange\n\n:\n\nLOOPRING_EXPORTED_ACCOUNT\n\n.\n\nexchangeAddress\n\n,\n\n46\n\npayerAddr\n\n:\n\naccInfo\n\n.\n\nowner\n\n,\n\n46\n\npayerAddr\n\n:\n\naccInfo\n\n.\n\nowner\n\n,\n\n47\n\npayerId\n\n:\n\naccInfo\n\n.\n\naccountId\n\n,\n\n47\n\npayerId\n\n:\n\naccInfo\n\n.\n\naccountId\n\n,\n\n48\n\npayeeAddr\n\n:\n\npayeeAddress\n\n,\n\n48\n\npayeeAddr\n\n:\n\npayeeAddress\n\n,\n\n49\n\npayeeId\n\n:\n\npayeeAccountId\n\n,\n\n49\n\npayeeId\n\n:\n\npayeeAccountId\n\n,\n\n50\n\nstorageId\n\n:\n\nstorageId\n\n.\n\noffchainId\n\n,\n\n50\n\nstorageId\n\n:\n\nstorageId\n\n.\n\noffchainId\n\n,\n\n51\n\ntoken\n\n:\n\n{\n\n51\n\ntoken\n\n:\n\n{\n\n52\n\ntokenId\n\n:\n\nTOKEN_INFO\n\n.\n\ntokenMap\n\n.\n\nLRC\n\n.\n\ntokenId\n\n,\n\n52\n\ntokenId\n\n:\n\nTOKEN_INFO\n\n.\n\ntokenMap\n\n.\n\nLRC\n\n.\n\ntokenId\n\n,\n\n53\n\nvolume\n\n:\n\namount\n\n.\n\ntoString\n\n(\n\n)\n\n53\n\nvolume\n\n:\n\namount\n\n.\n\ntoString\n\n(\n\n)\n\n54\n\n}\n\n,\n\n54\n\n}\n\n,\n\n55\n\nmaxFee\n\n:\n\n{\n\n55\n\nmaxFee\n\n:\n\n{\n\n56\n\ntokenId\n\n:\n\nTOKEN_INFO\n\n.\n\ntokenMap\n\n[\n\n\"LRC\"\n\n]\n\n.\n\ntokenId\n\n,\n\n56\n\ntokenId\n\n:\n\nTOKEN_INFO\n\n.\n\ntokenMap\n\n[\n\n\"LRC\"\n\n]\n\n.\n\ntokenId\n\n,\n\n57\n\nvolume\n\n:\n\nfee\n\n.\n\nfees\n\n[\n\n\"LRC\"\n\n]\n\n.\n\nfee\n\n??\n\n\"9400000000000000000\"\n\n57\n\nvolume\n\n:\n\nfee\n\n.\n\nfees\n\n[\n\n\"LRC\"\n\n]\n\n.\n\nfee\n\n??\n\n\"9400000000000000000\"\n\n58\n\n}\n\n,\n\n58\n\n}\n\n,\n\n59\n\nvalidUntil\n\n:\n\nLOOPRING_EXPORTED_ACCOUNT\n\n.\n\nvalidUntil\n\n,\n\n59\n\nvalidUntil\n\n:\n\nLOOPRING_EXPORTED_ACCOUNT\n\n.\n\nvalidUntil\n\n,\n\n60\n\npayPayeeUpdateAccount\n\n:\n\ntrue\n\n60\n\npayPayeeUpdateAccount\n\n:\n\ntrue\n\n61\n\n}\n\n;\n\n61\n\n}\n\n;\n\n62\n\n62\n\n63\n\nconst\n\ntransactionResult\n\n=\n\nawait\n\nLoopringAPI\n\n.\n\nuserAPI\n\n.\n\nsubmitInternalTransfer\n\n(\n\n{\n\n63\n\nconst\n\ntransactionResult\n\n=\n\nawait\n\nLoopringAPI\n\n.\n\nuserAPI\n\n.\n\nsubmitInternalTransfer\n\n(\n\n{\n\n64\n\nrequest\n\n,\n\n64\n\nrequest\n\n,\n\n65\n\nweb3\n\n,\n\n65\n\nweb3\n\n,\n\n66\n\nchainId\n\n:\n\nsdk\n\n.\n\nChainId\n\n.\n\nGOERLI\n\n,\n\n66\n\nchainId\n\n:\n\nsdk\n\n.\n\nChainId\n\n.\n\nGOERLI\n\n,\n\n67\n\nwalletType\n\n:\n\nsdk\n\n.\n\nConnectorNames\n\n.\n\nUnknown\n\n,\n\n67\n\nwalletType\n\n:\n\nsdk\n\n.\n\nConnectorNames\n\n.\n\nUnknown\n\n,\n\n68\n\neddsaKey\n\n:\n\neddsaKey\n\n.\n\nsk\n\n,\n\n68\n\neddsaKey\n\n:\n\neddsaKey\n\n.\n\nsk\n\n,\n\n69\n\napiKey\n\n:\n\napiKey\n\n,\n\n}\n\n)\n\n;\n\n69\n\napiKey\n\n:\n\napiKey\n\n,\n\n}\n\n)\n\n;\n\n70\n\n70\n\n71\n\nconsole\n\n.\n\nlog\n\n(\n\ntransactionResult\n\n)\n\n71\n\nconsole\n\n.\n\nlog\n\n(\n\ntransactionResult\n\n)", "explanation": "The provided documentation section is titled '#Send Transaction - ES Modules/TypeScript' from the Magic Labs embedded wallet documentation. This section demonstrates how to send a transaction using the Loopring SDK, which is a Layer 2 scaling solution built on top of Ethereum. \n\nIn summary, the main purpose of this documentation section is to explain the steps required to send a transaction from a Magic wallet (a Web3 wallet provided by Magic Labs) to a Loopring account. Here's a breakdown of the key points:\n\n1. **Importing necessary modules**: The section begins by importing the necessary modules from the Magic SDK and the Loopring SDK.\n\n2. **Creating a Magic instance**: It creates a Magic instance with a custom Ethereum node URL and initializes the Web3 provider using the Magic RPC provider.\n\n3. **Getting account information**: The section retrieves the account information of the Magic wallet's public address from the Loopring API.\n\n4. **Generating an EDDSA key pair**: It generates an EDDSA key pair using the SIGNATURE_KEYPAIR_MOCK function from the Loopring SDK.\n\n5. **Getting API keys**: The section retrieves the Loopring API key using the userAPI getUserApiKey function.\n\n6. **Generating a request**: It creates a request object with the payload for the internal transfer, including the exchange address, payer and payee addresses, token ID, and maximum fee.\n\n7. **Submitting the transaction**: The section submits the internal transfer request to Loopring using the userAPI submitInternalTransfer function.\n\nThe section provides a step-by-step example of how to send a transaction from a Magic wallet to a Loopring account. It demonstrates how to use the Loopring SDK to generate EDDSA key pairs, retrieve API keys, and submit internal transfer requests to Loopring.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/evm/loopring#chunk-3", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 All Auth, User methods and for Dedicated Wallets\n\n\u2022 All EVM Provider functionality to respond to supported RPC methods\n\nAuth\n\nUser\n\nDedicated Wallets\n\nRPC methods\n\n*Some features are not yet compatible such as the Widget UI.\n\nNeed a feature or see a problem? File an issue on our github repo.\n\ngithub repo", "explanation": "**Compatibility Overview**\n\nThe '#Compatibility' section in the Magic Labs embedded wallet documentation explains the compatibility of certain features and functionalities across different platforms, specifically for the Loopring EVM (Ethereum Virtual Machine) blockchain.\n\n**Main Purpose:**\n\nThe purpose of this section is to inform developers about the current state of compatibility for various features, including:\n\n1. **Auth, User methods**: Integration with authentication and user account management systems.\n2. **Dedicated Wallets**: Compatibility with wallets optimized for specific use cases or platforms.\n3. **EVM Provider functionality**: Support for Ethereum Virtual Machine (EVM) provider methods to interact with the blockchain.\n4. **RPC methods**: Compatibility with Remote Procedure Call (RPC) methods for interacting with the blockchain.\n\n**Key Points:**\n\n* Some features, like the Widget UI, are not yet compatible.\n* Developers are encouraged to report any compatibility issues or missing features on the Magic Labs GitHub repository.\n\nBy knowing the compatibility status of these features, developers can better understand what to expect when integrating the Magic Labs embedded wallet into their applications and can report any issues to the development team for improvement.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/evm/loopring#chunk-4", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 Block Explorer: https://explorer.loopring.io/\n\n\u2022 Example\n\nhttps://explorer.loopring.io/\n\nExample", "explanation": "**Resources & Tools Explanation**\n\nThe '#Resources & Tools' section of the Magic Labs documentation provides links to essential tools and resources for interacting with the Loopring EVM (Ethereum Virtual Machine) blockchain.\n\n**Main Purpose:**\n\nThe primary purpose of this section is to help developers and users:\n\n1. **Explore and understand the blockchain**: By providing access to a block explorer, users can analyze transactions, blocks, and other data on the Loopring EVM network.\n2. **Access examples and demonstrations**: The example link illustrates how to use the block explorer, giving users a better understanding of its functionality.\n\n**Key Component:**\n\nThe **Block Explorer (https://explorer.loopring.io/)** is the central tool in this section. It allows users to:\n\n- View transactions, blocks, and accounts\n- Search for specific data (e.g., addresses, transactions)\n- Monitor network activity\n\nBy leveraging these resources and tools, users and developers can effectively navigate and work with the Loopring EVM blockchain, ensuring a smoother integration experience with their Magic Labs embedded wallets.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/evm/loopring#chunk-5", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "Magic makes it easy to authenticate users and integrate them into your Web3 dApps quickly.\n\nThe quickstart options below show how you can use Magic in a Next.js app to connect to an EVM-based testnet, but you can follow a similar flow with Magic\u2019s mobile SDKs or integrate with any of the 30+ blockchains supported by Magic.\n\nMagic\u2019s mobile SDKs\n\n30+ blockchains supported by Magic\n\nRecommended\n\nUse our interactive CLI tool to set up and run a Magic app in less than 2 minutes", "explanation": "Let's break down the provided documentation section 'Magic Quickstart - How do you want to get started? - Build with CLI'.\n\n**Main Purpose:**\nThe main purpose of this section is to guide users on how to quickly set up and run a Magic app using the command-line interface (CLI) tool, which can be done in under 2 minutes.\n\n**Key Points:**\n\n1. **Introduction to Magic**: Magic is a service that simplifies the process of authenticating users and integrating them into Web3 applications (dApps).\n2. **Supported Options**: Users can use Magic with Next.js applications, as well as with Magic's mobile SDKs, and on over 30+ different blockchains.\n3. **Recommended Approach**: The recommended way to get started with Magic is to utilize the interactive CLI tool, which allows for quick setup and execution of a Magic app.\n\n**Key Takeaways:**\n\n- The CLI tool enables users to quickly set up a Magic app.\n- This is a recommended approach as it can be done in under 2 minutes.\n- The documentation does not provide specifics on how to use the CLI tool, so another part of the documentation must explain how to use the CLI in detail.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/home/quickstart/cli#chunk-1", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "Add Magic to a new or existing Next.js app\n\nThe fastest way to get started with Magic is to bootstrap your project using make-scoped-magic-app, an easy-to-use CLI tool that generates a fully working Next.js application with Magic built in.\n\nmake-scoped-magic-app", "explanation": "The 'Integrate into a Next.js app' documentation section explains how to quickly and easily add the Magic Labs embedded wallet to a new or existing Next.js application using a command-line interface (CLI) tool called `make-scoped-magic-app`.\n\nThe main purpose of this section is to guide developers through the process of setting up a fully functional Next.js application with Magic Labs' authentication and authorization features integrated, eliminating the need for manual coding and setup.\n\nBy using `make-scoped-magic-app`, developers can instantly create a fully working Next.js application with Magic built-in, allowing them to focus on building their application rather than dealing with the complexity of integrating authentication and wallet functionality.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/home/quickstart/cli#chunk-2", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nmake-scoped-magic-app\n\nTo get started, use the following command in your preferred shell:\n\nCopy\n\n01\n\nnpx make-scoped-magic-app\n\n01\n\nnpx make-scoped-magic-app\n\nThe tool will guide you through setting up your project with a series of interactive prompts, starting with your project's name.\n\nAlternatively, you can use the command from your Magic Dashboard after you create a new project. This will include pre-configured flags to skip most of the prompts.\n\nMagic Dashboard", "explanation": "**What is `make-scoped-magic-app`?**\n\n`make-scoped-magic-app` is a CLI (Command-Line Interface) tool provided by Magic Labs that assists in setting up a new embedded wallet project quickly and efficiently.\n\n**Main Purpose:**\n\nThe main purpose of `make-scoped-magic-app` is to guide you through a series of interactive prompts to:\n\n1. Set up a new project with a unique name.\n2. Configure project settings and create a scoped Magic app.\n\n**Key Benefits:**\n\n1. **Streamlines setup process**: By using `make-scoped-magic-app`, you can avoid manually configuring your project settings and focused on development.\n2. **Pre-configured flags**: When using Magic Dashboard, you can leverage pre-configured flags to skip most of the prompts, saving time and effort.\n3. **Efficient project creation**: The tool ensures that your new project is properly set up and configured, allowing you to start developing your embedded wallet app without delays.\n\nIn summary, `make-scoped-magic-app` is a user-friendly tool that simplifies the project setup process, making it easier for developers to create a new Magic apps with minimal configuration overhead.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/home/quickstart/cli#chunk-3", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nAfter entering a name, you\u2019ll be asked to choose between two starting configurations:\n\n\u2022 Quickstart\n\n\u2022 Custom Setup\n\nSelect Quickstart for the simplest setup. This option bootstraps a Next.js project that connects to the Polygon Amoy test network using our Dedicated Wallet.\n\nQuickstart\n\nDedicated Wallet\n\nThe Dedicated Wallet is a white-label wallet you can use to tailor the wallet experience to your app and users. It supports over 30 blockchains, has a suite of enterprise features, and gives you broad control over the user authentication, onboarding, and wallet experience.\n\nsupports over 30 blockchains\n\nIf you prefer to use another wallet, network, or authentication method, you can select Custom Setup. The CLI tool currently supports major chains such as Ethereum, Solana, and Flow. For additional blockchain support, you can get started with our Integration Quickstart and add the relevant blockchain extension.\n\nCustom Setup\n\nIntegration Quickstart\n\nblockchain extension", "explanation": "The '#Configure Your Project' section in the Magic Labs embedded wallet documentation is about helping users set up their projects using the CLI tool provided. It's a crucial step in getting started with integrating the Magic Labs wallet into their application.\n\nThe main purpose of this section is to guide users in choosing the best setup for their project. It provides two options:\n\n1. **Quickstart**: A simplified setup that boots up a Next.js project connected to the Polygon Amoy test network using the Dedicated Wallet. This is the easiest way to get started, but it may not offer the flexibility needed for more complex projects.\n2. **Custom Setup**: A more advanced setup that allows users to choose their preferred wallet, network, or authentication method. The CLI tool supports major chains like Ethereum, Solana, and Flow, and users can add additional blockchain extensions using the Integration Quickstart.\n\nIn summary, this section is about setting up the foundation for your embedded wallet project, allowing you to choose the best approach based on your specific needs and requirements.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/home/quickstart/cli#chunk-4", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nAfter finishing your initial configuration, you'll be prompted to enter your Magic Publishable API Key. You can find this in your Magic Dashboard.\n\nMagic Dashboard\n\nYou can also leave this empty for now and add it to the project's .env file later.\n\n.env", "explanation": "**Adding Your API Key to Magic Labs Embedded Wallet**\n\nThis section of the Magic Labs embedded wallet documentation explains the process of adding your Magic Publishable API Key to the project configuration.\n\n**Purpose:**\n\nThe main purpose of adding your API key is to authenticate and authorize your project with the Magic Labs API, enabling features such as wallet functionality.\n\n**How to Proceed:**\n\nTo add your API key:\n\n1. Locate your Magic Publishable API Key in your Magic Dashboard.\n2. Enter the API key when prompted, or\n3. Leave it empty for now and add it later to the project's `.env` file.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/home/quickstart/cli#chunk-5", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nAt this point, make-scoped-magic-app will create a new directory named after your project, download the code, install dependencies, and start running automatically on port 3000 (if it's not already in use). \u2060 \u2060Next.js has built-in support for hot reloading, so most front-end code changes are applied instantly during development without the need for a server restart. You can update the UI, swap out the RPC URL in the .env file, and more, all without a restart. If you do need to restart the server, you can terminate the console process and execute npm run dev.\n\nmake-scoped-magic-app\n\n.env\n\nnpm run dev\n\nIf you provided your Publishable API Key during the interactive prompts, you'll be able to log in and send a transaction right away! Otherwise, your project will show a landing page directing you to find and add your API Key as an environment variable.\n\nThe login options available depend on your project's configuration. The Quickstart option defaults to Email OTP. See the Dedicated Wallet's documentation for the full list of available authentication options.\n\nQuickstart\n\nfull list of available authentication options", "explanation": "The '#Run Your App' documentation section is about launching and running a Magic Labs embedded wallet application on a development environment.\n\nMain Purpose:\nThe main purpose of this section is to guide developers through the process of:\n\n1. Initializing and running their project using `make-scoped-magic-app`.\n2. Understanding the hot reloading feature provided by Next.js for front-end code changes.\n3. Explaining how to restart the server if needed.\n4. Providing information on how to log in and send a transaction using the embedded wallet application.\n\nKey Points:\n- `make-scoped-magic-app` generates a new project directory and installs dependencies, automatically starting the app on port 3000.\n- Hot reloading enables instant code changes in the front-end.\n- Restarting the server can be done by terminating the console process and running `npm run dev`.\n- Developers can log in and send transactions directly if they provided their Publishable API Key during the interactive prompts. Otherwise, they'll need to add their API Key as an environment variable.\n- The documentation mentions that the Quickstart option uses Email OTP, but a full list of available authentication options is found in the Dedicated Wallet's documentation.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/home/quickstart/cli#chunk-6", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nOnce a user is logged in, the Quickstart app shows a dashboard with 4 cards:\n\n\u2022 UserInfoCard.tsx - Shows the network you're connected to, your address, and your token balance.\n\n\u2022 SendTransactionCard.tsx - Lets you send native tokens to another address\n\n\u2022 WalletMethodsCard.tsx - Shows and lets you test the various user methods available to you\n\n\u2022 SmartContract.tsx - Input element with a button that is connected to a function that triggers a smart contract interaction. It allows you to update the stored integer in a basic storage contract. Only available on EVM testnet templates.\n\nUserInfoCard.tsx\n\nSendTransactionCard.tsx\n\nWalletMethodsCard.tsx\n\nSmartContract.tsx\n\n\u2060\u2060If you're on a test network, the Send Transaction card will have a button to get test tokens. Once you have test tokens, you can add a receiving address, an amount of tokens to send, and click Send Transaction to send tokens with your Magic wallet.\n\nCongratulations! You've successfully bootstrapped a full application and sent your first transaction.\n\n#\n\nTo customize the app, you can modify any of the code and restructure the project according to your needs. Magic-related components are organized in the updated file structure for better clarity and maintenance.\n\nHere are some key directories and files you might want to work with:\n\n\u2022 src/components/magic/: Contains all Magic-related logic, including authentication providers, wallet methods, login/logout functionality, and action cards such as SendTransaction. This directory centralizes components that interact with Magic, making it easier to manage authentication and wallet operations.\n\n\u2022 src/components/ui/: Houses reusable UI components like cards and dividers. This directory ensures that UI elements are consistently styled and easily maintainable across the application.\n\n\u2022 src/hooks/: Provides custom hooks for managing Magic and Web3 instances, such as useMagic and useWeb3. These hooks make Magic and Web3 instances globally available, facilitating their use throughout your components.\n\n\u2022 src/utils/: Contains utility functions used throughout the app, including network configuration, smart contract interactions, type definitions, and more.\n\nsrc/components/magic/\n\nSendTransaction\n\nsrc/components/ui/\n\nsrc/hooks/\n\nuseMagic\n\nuseWeb3\n\nsrc/utils/\n\nNote: The configuration for the Solana and Flow templates may vary from the EVM examples.\n\nYou can swap out the RPC URL in the .env file under the NEXT_PUBLIC_BLOCKCHAIN_NETWORK variable. Replace the value of that variable with one of the following:\n\n.env\n\nNEXT_PUBLIC_BLOCKCHAIN_NETWORK\n\n\u2022 polygon-amoy\n\n\u2022 polygon\n\n\u2022 ethereum-sepolia\n\n\u2022 ethereum\n\n\u2022 etherlink-testnet\n\n\u2022 zksync\n\n\u2022 zksync-sepolia\n\npolygon-amoy\n\npolygon\n\nethereum-sepolia\n\nethereum\n\netherlink-testnet\n\nzksync\n\nzksync-sepolia\n\nTo update any of the styling go to src/styles/globals.css.\n\nsrc/styles/globals.css\n\nThis application uses our Dedicated Wallet. The Dedicated Wallet meets the widest variety of needs while still being incredibly simple to implement. In addition to the baked in Login UI, it has plenty of customization options, supports social login through providers like GitHub and Discord, allows for enterprise multi-factor authentication, and more.\n\nDedicated Wallet\n\nLogin UI\n\nsocial login\n\nenterprise multi-factor authentication", "explanation": "**Customizing Your App**\n\nThis documentation section guides you on how to customize the Magic Labs Quickstart app to suit your requirements. The main purpose is to provide you with the necessary information to modify and extend the app's functionality.\n\n**Components and Structure**\n\nThe app's code is organized into several directories and files, including:\n\n1. **src/components/magic/**: Contains Magic-related logic, including authentication providers, wallet methods, login/logout functionality, and action cards.\n2. **src/components/ui/**: Houses reusable UI components like cards and dividers.\n3. **src/hooks/**: Provides custom hooks for managing Magic and Web3 instances.\n4. **src/utils/**: Contains utility functions used throughout the app.\n\n**Customizing the App**\n\nTo customize the app, you can modify any of the code and restructure the project according to your needs. Here are some key points to consider:\n\n1. **Modify existing components**: You can modify any of the existing components, such as `SendTransactionCard` or `UserInfoCard`, to suit your requirements.\n2. **Create new components**: You can create new components to add new functionality to the app.\n3. **Update styles**: To update any of the styling, go to `src/styles/globals.css`.\n4. **Swap out RPC URLs**: You can swap out the RPC URL in the `.env` file under the `NEXT_PUBLIC_BLOCKCHAIN_NETWORK` variable to use a different blockchain network.\n\n**Magic Dedicated Wallet**\n\nThe app uses Magic's Dedicated Wallet, which provides a wide range of features, including:\n\n1. **Simple implementation**: Dedicated Wallet is incredibly simple to implement.\n2. **Customization options**: It has plenty of customization options.\n3. **Social login**: Supports social login through providers like GitHub and Discord.\n4. **Enterprise multi-factor authentication**: Allows for enterprise multi-factor authentication.\n\nBy following this documentation, you can customize the Magic Labs Quickstart app to suit your needs and requirements.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/home/quickstart/cli#chunk-7", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nOnce you have successfully logged in, the first card on your dashboard will display your Magic wallet details. This card provides a comprehensive overview of your connected wallet, including the network you are connected to, your wallet address, and your token balance. Additionally, there is a disconnect button that allows you to disconnect your wallet from the app.", "explanation": "**Wallet Information Overview**\n\nUnder the '#Wallet Information' section, you'll find essential details about your connected Magic Labs embedded wallet. This card displays a summary of your wallet status:\n\n**Key Components:**\n\n1. **Network Connection**: Identifies the network you are currently connected to.\n2. **Wallet Address**: Shows the unique address associated with your wallet.\n3. **Token Balance**: Displays the current balance of tokens in your wallet.\n4. **Disconnect Button**: Allows you to safely disconnect your wallet from the application.\n\n**Main Purpose:**\n\nThe primary purpose of this section is to provide a quick glance at your wallet's current status, enabling you to monitor your connections, balances, and account details in one place. This helps you stay organized and ensure your wallet is properly connected and configured.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/home/quickstart/cli#chunk-8", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2060\u2060If you're on a test network, the Send Transaction card will have a button to get test tokens. Once you have test tokens, you can add a receiving address, an amount of tokens to send, and click Send Transaction to send tokens with your Magic wallet.\n\nCongratulations! You've successfully sent your first transaction using Magic.", "explanation": "Here's a clear and concise explanation of the '#Send Your First Transaction' documentation section:\n\n**Purpose:** This section guides users through successfully sending their first transaction using the Magic Labs embedded wallet.\n\n**Key Points:**\n\n- It's applicable to users testing on a test network, which provides a safe environment for experimentation.\n- A button on the 'Send Transaction' card is available to obtain test tokens.\n- Users can then add a recipient's address, specify the amount of tokens to send, and initiate the transaction using the Magic wallet.\n- The completion of this process signifies that the user has successfully sent their first transaction with Magic Labs embedded wallet.\n\n**Outcome:** Upon following the steps outlined in this section, users will have successfully completed their first transaction, achieving a fundamental functionality of the Magic Labs embedded wallet.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/home/quickstart/cli#chunk-9", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nThis card offers various user methods that provide actions for managing user authentication and wallet operations, including:\n\n\u2022 Update Email: Allows users to update their registered email address. This feature is particularly useful for users who logged in using the EMAIL method.\n\n\u2022 Get ID Token: Retrieves the user's ID token. ID tokens are essential for verifying the user's identity and can be used for authentication purposes.\n\n\u2022 Get Metadata: Fetches and displays metadata related to the user's Magic wallet. Metadata can include details like the public address, email (if available), and other relevant user information.\n\n\u2022 Disconnect: Provides an option for users to disconnect their wallet from the application. This is useful for logging out securely or switching to a different account.\n\nUpdate Email: Allows users to update their registered email address. This feature is particularly useful for users who logged in using the EMAIL method.\n\nGet ID Token: Retrieves the user's ID token. ID tokens are essential for verifying the user's identity and can be used for authentication purposes.\n\nGet Metadata: Fetches and displays metadata related to the user's Magic wallet. Metadata can include details like the public address, email (if available), and other relevant user information.\n\nDisconnect: Provides an option for users to disconnect their wallet from the application. This is useful for logging out securely or switching to a different account.", "explanation": "**Overview of #Wallet Methods**\n\nThe '#Wallet Methods' section in the Magic Labs embedded wallet documentation outlines various user methods available for managing user authentication and wallet operations.\n\n**Main Purpose**\n\nThe primary purpose of these methods is to provide a set of actions that allow users to interact and manage their wallet and authentication settings in a secure and controlled manner.\n\n**Key Actions**\n\n1. **Update Email**: Allows users to update their registered email address.\n2. **Get ID Token**: Retrieves the user's ID token for identity verification and authentication purposes.\n3. **Get Metadata**: Fetches and displays metadata related to the user's Magic wallet, including public address, email, and other relevant user information.\n4. **Disconnect**: Provides an option for users to disconnect their wallet from the application, useful for logging out securely or switching to a different account.\n\nThese methods aim to enhance the user experience by offering a secure and seamless way to manage their wallet and authentication settings.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/home/quickstart/cli#chunk-10", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nIf you generate an app connected to EVM testnets, a component will be displayed that allows users to update the value in a basic storage smart contract. This serves as an illustration of how to connect Magic to a smart contract. The functionality is available as long as the user is connected to either Ethereum Sepolia, Polygon Amoy, or zkSync Sepolia.", "explanation": "**Smart Contracts Overview**\n\nIn the context of Magic Labs' embedded wallet documentation, the \"Smart contracts\" section refers to a feature that allows users to interact with a basic storage smart contract. This contract is deployed on the Ethereum EVM (Ethereum Virtual Machine) testnets, specifically Sepolia, Polygon Amoy, or zkSync Sepolia.\n\n**Primary Purpose:**\n\nThe main purpose of this feature is to demonstrate how to integrate Magic's embedded wallet with a smart contract. It illustrates the process of connecting to and updating the value in a basic storage smart contract, making it easier for developers to understand and replicate this functionality in their own applications.\n\n**Key Takeaways:**\n\n* Users can update the value in a basic storage smart contract only if they are connected to one of the supported testnets (Sepolia, Polygon Amoy, or zkSync Sepolia).\n* This feature serves as a demonstration of how to connect Magic's embedded wallet to a smart contract, making it easier for developers to replicate this functionality in their own applications.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/home/quickstart/cli#chunk-11", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nWe have a suite of resources to help developers and companies with a wide variety of use cases. Below are some ideas to get you started, but feel free to browse our documentation or reach out with specific questions.\n\n\u2022 Integrate Magic into your existing app by following the Integration Quickstart\n\n\u2022 Add support for OAuth social providers like Google, GitHub, and Discord\n\n\u2022 Add support for one or more of the 25+ blockchains accessible through Magic\n\n\u2022 Use Magic across a variety of platforms, including Web, iOS, Android, Unity, and more\n\n\u2022 Learn more about Magic's security framework and how it can makes your applications more secure\n\n\u2022 Read Magic's Whitepaper\n\n\u2022 View Magic Guides for comprehensive articles covering a wide range of use cases\n\nIntegrate Magic into your existing app by following the Integration Quickstart\n\nIntegration Quickstart\n\nAdd support for OAuth social providers like Google, GitHub, and Discord\n\nGoogle\n\nGitHub\n\nDiscord\n\nAdd support for one or more of the 25+ blockchains accessible through Magic\n\n25+ blockchains accessible through Magic\n\nUse Magic across a variety of platforms, including Web, iOS, Android, Unity, and more\n\nvariety of platforms\n\nLearn more about Magic's security framework and how it can makes your applications more secure\n\nMagic's security framework\n\nRead Magic's Whitepaper\n\nWhitepaper\n\nView Magic Guides for comprehensive articles covering a wide range of use cases\n\nMagic Guides", "explanation": "The '#Next Steps' section of the documentation is a guide that outlines the various next steps for developers and companies who have just started using the Magic Labs embedded wallet. \n\nIts main purpose is to provide a clear direction for potential users to explore and utilize the capabilities of Magic Wallet in their applications.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/home/quickstart/cli#chunk-12", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nThe Magic SDK offers a streamlined way to effortlessly integrate 25+ blockchain networks into your application. Magic aims to keep up to date with wallet standards on these chains and ensure compatibility with their respective web3 wallet libraries.", "explanation": "This document section is titled \"Blockchains - Overview\" and it explains how the Magic Labs embedded wallet facilitates seamless integration of numerous blockchain networks into applications. \n\nThe main purpose of this section is to inform developers that the Magic SDK supports integration with over 25 different blockchain networks, thereby allowing developers to easily connect with a wide range of digital assets and blockchain-based solutions.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/overview#chunk-1", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nPolygon\n\nTezos\n\nSolana\n\nEthereum", "explanation": "**Understanding the '#Featured Chains' Section**\n\nThe '#Featured Chains' section in the Magic Labs embedded wallet documentation appears to be a curated list of blockchain networks that Magic Labs has integrated support for. \n\n**Purpose:**\n\nThe primary purpose of this section is to provide information about the supported blockchain networks, specifically \"featured chains,\" that can be used with Magic Labs embedded wallet.\n\n**Key Information:**\n\nEach listed blockchain (Polygon, Tezos, Solana, and Ethereum) likely has a detailed documentation page that explains the specific integration details, such as:\n\n- Supported features\n- Configuration options\n- SDK requirements\n- Integration guides\n\nThis section serves as a starting point for developers to learn about the supported blockchain networks and navigate to the more detailed documentation for each chain.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/overview#chunk-2", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nAlgorand\n\nAptos\n\nArbitrum\n\nAstar zkEVM\n\nAvalanche\n\nBase", "explanation": "The '#Supported Chains' section in the Magic Labs embedded wallet documentation is a list of blockchain networks that are supported by the Magic Labs platform. This section is primarily informational, providing users with an overview of the various blockchain chains that can be integrated with their applications.\n\nThe main purpose of this section is to inform developers about the blockchain networks that can be used with Magic Labs, enabling them to choose the most suitable chain for their specific use case. By knowing which chains are supported, developers can:\n\n1. Decide which blockchain to use for their application.\n2. Integrate the selected chain with Magic Labs, using their APIs and services.\n3. Take advantage of the features and functionalities provided by the Magic Labs platform for the chosen chain.\n\nThe list in the '#Supported Chains' section appears to include a selection of popular blockchain networks, such as Algorand, Aptos, and Avalanche, among others. By including a wide range of chains, Magic Labs demonstrates its ability to support various blockchain ecosystems, making it a versatile and adaptable platform for developers.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/overview#chunk-3", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nBelow are the most common types in Magic's Typescript SDK, separated by module.\n\nTo view all supported types, feel free to explore the Magic SDK repo.\n\nMagic SDK repo", "explanation": "**Typescript Types - Overview**\n\nThis documentation section provides an overview of the available types in Magic's Typescript SDK. The types are categorized by module, making it easy to find and use them in your code.\n\n**Main Purpose:**\n\nThe main purpose of this section is to:\n\n1. Provide a list of standard types used in Magic's Typescript SDK, including data types, classes, and interfaces.\n2. Give developers a quick reference to the available types, making it easier to integrate the Magic SDK into their applications.\n3. Direct users to the Magic SDK repository for any additional types not listed in this documentation.\n\n**Key Points:**\n\n* The section provides a concise list of essential types for working with Magic.\n* It is a starting point for developers to explore the Magic SDK's capabilities and explore the repository for more advanced types.\n\nBy following this section, developers can easily discover and use the correct types when working with Magic's Typescript SDK, ensuring smooth integration and reducing errors in their applications.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/resources/types#chunk-1", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n#\n\nMagicUserMetadata\n\nCopy\n\n01\n\nexport\n\ninterface\n\nMagicUserMetadata\n\n{\n\n01\n\nexport\n\ninterface\n\nMagicUserMetadata\n\n{\n\n02\n\nissuer\n\n:\n\nstring\n\n|\n\nnull\n\n;\n\n02\n\nissuer\n\n:\n\nstring\n\n|\n\nnull\n\n;\n\n03\n\npublicAddress\n\n:\n\nstring\n\n|\n\nnull\n\n;\n\n03\n\npublicAddress\n\n:\n\nstring\n\n|\n\nnull\n\n;\n\n04\n\nemail\n\n:\n\nstring\n\n|\n\nnull\n\n;\n\n04\n\nemail\n\n:\n\nstring\n\n|\n\nnull\n\n;\n\n05\n\nphoneNumber\n\n:\n\nstring\n\n|\n\nnull\n\n;\n\n05\n\nphoneNumber\n\n:\n\nstring\n\n|\n\nnull\n\n;\n\n06\n\nisMfaEnabled\n\n:\n\nboolean\n\n;\n\n06\n\nisMfaEnabled\n\n:\n\nboolean\n\n;\n\n07\n\nrecoveryFactors\n\n:\n\n[\n\nRecoveryFactor\n\n]\n\n;\n\n07\n\nrecoveryFactors\n\n:\n\n[\n\nRecoveryFactor\n\n]\n\n;\n\n08\n\n}\n\n08\n\n}", "explanation": "**MagicUserMetadata Overview**\n\nThe MagicUserMetadata is a configuration object used to store metadata about a user in the Magic Labs embedded wallet. It's designed to hold relevant information that can be used for various purposes, such as user authentication, verification, and recovery.\n\n**Principal Components of MagicUserMetadata:**\n\n1.  **issuer**: a string representing the identity provider that issued the user's public address.\n2.  **publicAddress**: a string representing the user's unique public wallet address.\n3.  **email**: a string representing the user's email address.\n4.  **phoneNumber**: a string representing the user's phone number.\n5.  **isMfaEnabled**: a boolean indicating whether multi-factor authentication (MFA) is enabled for the user.\n6.  **recoveryFactors**: an array of RecoveryFactor objects containing additional recovery information for the user.\n\n**Purpose of MagicUserMetadata**\n\nThe primary purpose of MagicUserMetadata is to efficiently manage user metadata and facilitate user identification, authentication, and recovery within the embedded wallet. By storing and retrieving this metadata, Magic Labs allows developers to create seamless and secure experiences for their users.\n\nThis module plays a crucial role in Magic Labs' objectives by ensuring that sensitive user data is properly configured and administered, resulting in easier account management and protection.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/resources/types#chunk-2", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nRecoveryMethodType\n\nCopy\n\n01\n\nexport\n\nenum\n\nRecoveryMethodType\n\n{\n\n01\n\nexport\n\nenum\n\nRecoveryMethodType\n\n{\n\n02\n\nPhoneNumber\n\n=\n\n'phone_number'\n\n,\n\n02\n\nPhoneNumber\n\n=\n\n'phone_number'\n\n,\n\n03\n\n}\n\n03\n\n}", "explanation": "**RecoveryMethodType**\n\nThe RecoveryMethodType is an enumeration type that represents the different methods used for account recovery in the Magic Labs embedded wallet. This type defines the available recovery methods that users can choose from to regain access to their wallet.\n\n**Main Purpose:**\nThe main purpose of the RecoveryMethodType is to provide a standardized and structured way to define the types of recovery methods that can be used in the wallet. This allows developers to easily integrate and manage different recovery options, such as phone number, that are required for account recovery.\n\n**Enum Values:**\n\n* The RecoveryMethodType does not explicitly expand out the values of the phone_number, and seems cut off however the provided information suggests:\n  - 02 `PhoneNumber`: Represents a phone number, likely for two-factor authentication or SMS-based recovery.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/resources/types#chunk-3", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nRecoveryFactor\n\nCopy\n\n01\n\ntype\n\nRecoveryFactor\n\n=\n\n{\n\n01\n\ntype\n\nRecoveryFactor\n\n=\n\n{\n\n02\n\ntype\n\n:\n\nRecoveryMethodType\n\n;\n\n02\n\ntype\n\n:\n\nRecoveryMethodType\n\n;\n\n03\n\nvalue\n\n:\n\nstring\n\n;\n\n03\n\nvalue\n\n:\n\nstring\n\n;\n\n04\n\n}\n\n;\n\n04\n\n}\n\n;", "explanation": "Based on the provided documentation section '#RecoveryFactor' from the Magic Labs embedded wallet documentation, here's a clear and concise explanation:\n\n**What is RecoveryFactor?**\n\nA RecoveryFactor is a data structure used to securely back up and restore access to a Magic Labs wallet.\n\n**Main Purpose of RecoveryFactor:**\n\nThe primary purpose of RecoveryFactor is to provide a means of retrieving a user's wallet data in case they forget their password, lose their device, or face any other data recovery issues. It helps ensure the security and integrity of the user's digital assets.\n\n**Key Components of RecoveryFactor:**\n\nA RecoveryFactor typically consists of the following:\n\n1. Two different Recovery Method Types (`RecoveryMethodType`):\n   - These types represent verification methods a user can use to prove their identity and restore their wallet. Examples include email, SMS, or Google Authenticator codes.\n\n2. Two corresponding random strings (`string`):\n   - These strings will be used to aid in the wallet recovery process and should be safely stored by the user.\n\n**How it Works:**\n\nWhen a user creates their Magic Labs wallet, a RecoveryFactor is automatically generated and stored securely. In the event the user loses access to their wallet, they can use the RecoveryFactor to regain entry by using one of the specified Recovery Methods (from the RecoveryMethodType) and entering the corresponding random string.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/resources/types#chunk-4", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nGetIdTokenConfiguration\n\nCopy\n\n01\n\nexport\n\ninterface\n\nGetIdTokenConfiguration\n\n{\n\n01\n\nexport\n\ninterface\n\nGetIdTokenConfiguration\n\n{\n\n02\n\n/**\n\n02\n\n/**\n\n03\n\n* The number of seconds until the generated ID token will expire.\n\n03\n\n* The number of seconds until the generated ID token will expire.\n\n04\n\n*/\n\n04\n\n*/\n\n05\n\nlifespan\n\n?\n\n:\n\nnumber\n\n;\n\n05\n\nlifespan\n\n?\n\n:\n\nnumber\n\n;\n\n06\n\n}\n\n06\n\n}", "explanation": "**GetIdTokenConfiguration**\n\nThe `GetIdTokenConfiguration` is an interface in Magic Labs embedded wallet documentation that provides details about the configuration of an ID token, specifically its expiration time.\n\n**Main Purpose:**\n\nThe main purpose of `GetIdTokenConfiguration` is to specify the lifespan (or expiration time) of a generated ID token in seconds. This allows you to set a time limit after which the ID token will no longer be valid.\n\n**Key Component:**\n\nThe only property in this interface is `lifespan`, which is an optional type of `number`. This property specifies the number of seconds until the generated ID token will expire.\n\n**Example Use Case:**\n\nYou might want to use `GetIdTokenConfiguration` to generate an ID token that is valid for a specific amount of time, such as 30 minutes (1800 seconds) or 1 hour (3600 seconds). This can be useful in scenarios where you want the user to log in and remain authenticated for a limited period.\n\n**Code Example:**\n```typescript\nconst configuration: GetIdTokenConfiguration = {\n  lifespan: 3600, // 1 hour in seconds\n};\n```\nBy using `GetIdTokenConfiguration`, you can control the lifetime of the generated ID token and ensure it remains valid for the intended duration.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/resources/types#chunk-5", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nGenerateIdTokenConfiguration\n\nCopy\n\n01\n\nexport\n\ninterface\n\nGenerateIdTokenConfiguration\n\nextends\n\nGetIdTokenConfiguration\n\n{\n\n01\n\nexport\n\ninterface\n\nGenerateIdTokenConfiguration\n\nextends\n\nGetIdTokenConfiguration\n\n{\n\n02\n\n/**\n\n02\n\n/**\n\n03\n\n* An optional piece of data to sign with the token. Note, however, that the\n\n03\n\n* An optional piece of data to sign with the token. Note, however, that the\n\n04\n\n* unsigned data _will not_ be encoded in the token, only an encrypted\n\n04\n\n* unsigned data _will not_ be encoded in the token, only an encrypted\n\n05\n\n* signature of the data.\n\n05\n\n* signature of the data.\n\n06\n\n*/\n\n06\n\n*/\n\n07\n\nattachment\n\n?\n\n:\n\nstring\n\n;\n\n07\n\nattachment\n\n?\n\n:\n\nstring\n\n;\n\n08\n\n}\n\n08\n\n}", "explanation": "**GenerateIdTokenConfiguration Documentation Explanation**\n\nThe `GenerateIdTokenConfiguration` is an interface in the Magic Labs embedded wallet API documentation. It is used to configure the generation of an ID token.\n\n**Main Purpose:**\n\nThe primary purpose of `GenerateIdTokenConfiguration` is to provide additional information or data to be signed with the generated ID token. This data is not encoded in the token itself but is instead encrypted as a signature.\n\n**Key Components:**\n\n- `attachment?`: An optional parameter that represents the data to be signed with the ID token. It is identified by a question mark after the property name, indicating that it is optional.\n- `string`: The type of the `attachment` property, indicating that it should be a string.\n\n**In Summary:**\n\n`GenerateIdTokenConfiguration` enables you to include a custom piece of data to be signed with the ID token, which can then be verified independently. This allows for secure data transmission within the ID token framework.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/resources/types#chunk-6", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nUpdateEmailConfiguration\n\nCopy\n\n01\n\nexport\n\ninterface\n\nUpdateEmailConfiguration\n\n{\n\n01\n\nexport\n\ninterface\n\nUpdateEmailConfiguration\n\n{\n\n02\n\n/**\n\n02\n\n/**\n\n03\n\n* The new email address to update to\n\n03\n\n* The new email address to update to\n\n04\n\n*/\n\n04\n\n*/\n\n05\n\nemail\n\n:\n\nstring\n\n;\n\n05\n\nemail\n\n:\n\nstring\n\n;\n\n06\n\n06\n\n07\n\n/**\n\n07\n\n/**\n\n08\n\n* When `true`, a pre-built pending modal interface will\n\n08\n\n* When `true`, a pre-built pending modal interface will\n\n09\n\n* guide the user to check their new, followed by old emails\n\n09\n\n* guide the user to check their new, followed by old emails\n\n10\n\n* for confirmation emails.\n\n10\n\n* for confirmation emails.\n\n11\n\n*/\n\n11\n\n*/\n\n12\n\nshowUI\n\n?\n\n:\n\nboolean\n\n;\n\n12\n\nshowUI\n\n?\n\n:\n\nboolean\n\n;\n\n13\n\n}\n\n13\n\n}", "explanation": "**UpdateEmailConfiguration**\n\nThe `UpdateEmailConfiguration` section is a part of the Magic Labs documentation for the Embedded Wallet API. It outlines how to update an email configuration for a user account.\n\n**Main Purpose**\n\nThe primary purpose of the `UpdateEmailConfiguration` interface is to define the parameters needed to update a user's email address. This includes:\n\n- The new email address (`email`) to update to\n- An option to display a pre-built pending modal interface (`showUI`) that guides the user to verify their new email address by comparing it to their old one\n\n**Key Parameters**\n\n- `email`: a string representing the new email address\n- `showUI`: a boolean that indicates whether to display a pre-built pending modal interface (true) or not (false)\n\nBy using this interface, developers can update a user's email address in a secure and user-friendly way, ensuring a smoother experience for their users.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/resources/types#chunk-7", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nUpdateWebAuthnInfoConfiguration\n\nCopy\n\n01\n\nexport\n\ninterface\n\nUpdateWebAuthnInfoConfiguration\n\n{\n\n01\n\nexport\n\ninterface\n\nUpdateWebAuthnInfoConfiguration\n\n{\n\n02\n\n/**\n\n02\n\n/**\n\n03\n\n*  WebAuthn info id\n\n03\n\n* WebAuthn info id\n\n04\n\n*/\n\n04\n\n*/\n\n05\n\nid\n\n:\n\nstring\n\n;\n\n05\n\nid\n\n:\n\nstring\n\n;\n\n06\n\n06\n\n07\n\n/**\n\n07\n\n/**\n\n08\n\n*  nickname that user attempts to update to the webauth device associate to the id.\n\n08\n\n* nickname that user attempts to update to the webauth device associate to the id.\n\n09\n\n*/\n\n09\n\n*/\n\n10\n\nnickname\n\n:\n\nstring\n\n;\n\n10\n\nnickname\n\n:\n\nstring\n\n;\n\n11\n\n}\n\n11\n\n}", "explanation": "Based on the provided documentation section titled '#UpdateWebAuthnInfoConfiguration', I can explain its purpose as follows:\n\n**UpdateWebAuthnInfoConfiguration Interface**\n\nThe `UpdateWebAuthnInfoConfiguration` interface is used to update information related to WebAuthn (Web Authentication) devices. WebAuthn is a web-based authentication standard that enables secure authentication using physical devices such as security keys, smart cards, or U2F keys.\n\n**Main Purpose:**\n\nThe main purpose of the `UpdateWebAuthnInfoConfiguration` interface is to update the nickname associated with a WebAuthn device, identified by its `id`. This allows users to update the nickname that is displayed for a specific WebAuthn device.\n\n**Key Fields:**\n\nThe interface consists of two fields:\n\n1. **id** (string): The unique identifier of the WebAuthn device.\n2. **nickname** (string): The new nickname that the user attempts to update for the associated WebAuthn device.\n\nIn summary, the `UpdateWebAuthnInfoConfiguration` interface enables users to update the nickname associated with a WebAuthn device, making it easier to manage and recognize their authentication devices.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/resources/types#chunk-8", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nRecoverAccountConfiguration\n\nCopy\n\n01\n\nexport\n\ninterface\n\nRecoverAccountConfiguration\n\n{\n\n01\n\nexport\n\ninterface\n\nRecoverAccountConfiguration\n\n{\n\n02\n\n/**\n\n02\n\n/**\n\n03\n\n* The email to recover\n\n03\n\n* The email to recover\n\n04\n\n*/\n\n04\n\n*/\n\n05\n\nemail\n\n:\n\nstring\n\n;\n\n05\n\nemail\n\n:\n\nstring\n\n;\n\n06\n\n}\n\n06\n\n}", "explanation": "Based on the provided documentation section '#RecoverAccountConfiguration' from the Magic Labs embedded wallet documentation, I'll break it down for you:\n\n**RecoverAccountConfiguration Interface:**\n\nThe `RecoverAccountConfiguration` interface is a data structure that allows you to configure account recovery for a user's email address.\n\n**Main Purpose:**\n\nThe main purpose of this interface is to enable account recovery for a user who has forgotten their email address associated with their account. By providing the `RecoverAccountConfiguration` interface, Magic Labs enables you to submit a user's email address to recover their account.\n\n**Key Components:**\n\nThe interface contains a single property called `email`, which is a string. This `email` property represents the user's email address that you want to recover.\n\n**Implementation:**\n\nTo implement the `RecoverAccountConfiguration` interface, you would create an object with the `email` property containing the user's email address. For example:\n\n```json\n{\n  \"email\": \"user@example.com\"\n}\n```\n\nBy using the `RecoverAccountConfiguration` interface, you can initiate the account recovery flow for a user, allowing them to regain access to their account if they have forgotten their email address associated with it.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/resources/types#chunk-9", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nShowSettingsConfiguration\n\nCopy\n\n01\n\nexport\n\ninterface\n\nShowSettingsConfiguration\n\n{\n\n01\n\nexport\n\ninterface\n\nShowSettingsConfiguration\n\n{\n\n02\n\n/**\n\n02\n\n/**\n\n03\n\n* deep linking destination\n\n03\n\n* deep linking destination\n\n04\n\n*/\n\n04\n\n*/\n\n05\n\npage\n\n:\n\nDeepLinkPage\n\n;\n\n05\n\npage\n\n:\n\nDeepLinkPage\n\n;\n\n06\n\n}\n\n06\n\n}", "explanation": "According to the Magic Labs embedded wallet documentation, the `ShowSettingsConfiguration` interface is a configuration object used to customize the settings screen of the embedded wallet.\n\nThe main purpose of the `ShowSettingsConfiguration` is to determine the deep linking destination when the user interacts with the settings screen. \n\nIn simpler terms, it controls where the user will be directed when they navigate to the settings screen of the embedded wallet. \n\nThis configuration allows developers to specify the desired action or page that should be shown when the user accesses the settings, giving them more control over the user experience.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/resources/types#chunk-10", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n#\n\nGasApiResponse\n\nCopy\n\n01\n\nexport\n\ntype\n\nGasApiResponse\n\n=\n\n{\n\n01\n\nexport\n\ntype\n\nGasApiResponse\n\n=\n\n{\n\n02\n\nrequest_id\n\n:\n\nstring\n\n;\n\n02\n\nrequest_id\n\n:\n\nstring\n\n;\n\n03\n\nstate\n\n:\n\nstring\n\n;\n\n03\n\nstate\n\n:\n\nstring\n\n;\n\n04\n\nsuccess\n\n:\n\nboolean\n\n;\n\n04\n\nsuccess\n\n:\n\nboolean\n\n;\n\n05\n\n}\n\n;\n\n05\n\n}\n\n;", "explanation": "**GasApiResponse**\n\nThe `GasApiResponse` type represents a response from the Magic Labs embedded wallet API, specifically related to gas-related operations. It is a structured data format that provides information about the outcome of a gas request.\n\n**Main Properties:**\n\n1. **request_id**: A unique identifier for the request, represented as a string.\n2. **state**: The current state of the request, represented as a string (e.g., \"PENDING\", \"SUCCESS\", \"FAILURE\").\n3. **success**: A boolean indicating whether the request was successful or not.\n\n**Purpose:**\n\nThe `GasApiResponse` type is used to convey the status of a gas-related transaction, such as sending or processing gas. This type is essential for developing applications that interact with the Magic Labs embedded wallet, ensuring that the application can handle and respond to the outcome of gas requests.\n\nBy using this type, developers can easily parse and understand the response from the API, making it easier to implement robust and reliable gas-related functionality in their applications.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/resources/types#chunk-11", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nAccessListEntry\n\nCopy\n\n01\n\nexport\n\ntype\n\nAccessListEntry\n\n=\n\n{\n\naddress\n\n:\n\nstring\n\n;\n\nstorageKeys\n\n:\n\nArray\n\n<\n\nstring\n\n>\n\n}\n\n;\n\n01\n\nexport\n\ntype\n\nAccessListEntry\n\n=\n\n{\n\naddress\n\n:\n\nstring\n\n;\n\nstorageKeys\n\n:\n\nArray\n\n<\n\nstring\n\n>\n\n}\n\n;", "explanation": "Based on the provided documentation, an `AccessListEntry` is a data type representing an entry in the access list of a Magic Labs embedded wallet. It's a JSON object that contains two key-value pairs:\n\n1. `address`: A string representing the Ethereum address associated with the entry.\n2. `storageKeys`: An array of strings representing the storage keys associated with the entry.\n\nThe main purpose of `AccessListEntry` is to keep track of which Ethereum addresses are allowed to access and modify specific storage keys in the wallet. This helps ensure data encryption and authorization, as only authorized addresses can access specific sensitive data stored within the wallet.\n\nIn other words, `AccessListEntry` serves as a record-keeping mechanism for managing access permissions in the Magic Labs embedded wallet.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/resources/types#chunk-12", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nAccessList\n\nCopy\n\n01\n\nexport\n\ntype\n\nAccessList\n\n=\n\nArray\n\n<\n\nAccessListEntry\n\n>\n\n;\n\n01\n\nexport\n\ntype\n\nAccessList\n\n=\n\nArray\n\n<\n\nAccessListEntry\n\n>\n\n;", "explanation": "**AccessList Explanation**\n\nThe `AccessList` is a data type used in the Magic Labs embedded wallet to store a list of access control rules. It's essentially a collection of `AccessListEntry` objects.\n\n**Main Purpose:**\n\nThe primary purpose of `AccessList` is to manage and enforce access control for the user's wallet resources. It allows you to specify which users have read or write access to specific resources, such as accounts, wallets, or secret data.\n\n**Structure:**\n\nAn `AccessList` is an array of `AccessListEntry` objects, which define the access control rules. Each `AccessListEntry` typically includes information such as:\n\n* The user's identifier (e.g., email or username)\n* The resource being accessed (e.g., an account or wallet)\n* The level of access (e.g., read or write)\n\n**Key Features:**\n\n* Supports multiple access control rules\n* allows for granular control over user access\n* Essential for enforcing security policies and protecting user data\n\nBy using the `AccessList` data type, developers can easily manage access control for their Magic Labs embedded wallet applications, ensuring that sensitive data is protected and only accessible to authorized users.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/resources/types#chunk-13", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nGaslessTransactionRequest\n\nCopy\n\n01\n\nexport\n\ninterface\n\nGaslessTransactionRequest\n\n{\n\n01\n\nexport\n\ninterface\n\nGaslessTransactionRequest\n\n{\n\n02\n\n/**\n\n02\n\n/**\n\n03\n\n*  The transaction type.\n\n03\n\n* The transaction type.\n\n04\n\n*/\n\n04\n\n*/\n\n05\n\ntype\n\n?\n\n:\n\nnumber\n\n;\n\n05\n\ntype\n\n?\n\n:\n\nnumber\n\n;\n\n06\n\n06\n\n07\n\n/**\n\n07\n\n/**\n\n08\n\n*  The target of the transaction.\n\n08\n\n* The target of the transaction.\n\n09\n\n*/\n\n09\n\n*/\n\n10\n\nto\n\n?\n\n:\n\nstring\n\n;\n\n10\n\nto\n\n?\n\n:\n\nstring\n\n;\n\n11\n\n11\n\n12\n\n/**\n\n12\n\n/**\n\n13\n\n*  The sender of the transaction.\n\n13\n\n* The sender of the transaction.\n\n14\n\n*/\n\n14\n\n*/\n\n15\n\nfrom\n\n?\n\n:\n\nstring\n\n;\n\n15\n\nfrom\n\n?\n\n:\n\nstring\n\n;\n\n16\n\n16\n\n17\n\n/**\n\n17\n\n/**\n\n18\n\n*  The nonce of the transaction, used to prevent replay attacks.\n\n18\n\n* The nonce of the transaction, used to prevent replay attacks.\n\n19\n\n*/\n\n19\n\n*/\n\n20\n\n20\n\n21\n\nnonce\n\n?\n\n:\n\nnumber\n\n;\n\n21\n\nnonce\n\n?\n\n:\n\nnumber\n\n;\n\n22\n\n22\n\n23\n\n/**\n\n23\n\n/**\n\n24\n\n*  The maximum amount of gas to allow this transaction to consime.\n\n24\n\n* The maximum amount of gas to allow this transaction to consime.\n\n25\n\n*/\n\n25\n\n*/\n\n26\n\ngasLimit\n\n?\n\n:\n\nbigint\n\n;\n\n26\n\ngasLimit\n\n?\n\n:\n\nbigint\n\n;\n\n27\n\n27\n\n28\n\n/**\n\n28\n\n/**\n\n29\n\n*  The gas price to use for legacy transactions or transactions on\n\n29\n\n* The gas price to use for legacy transactions or transactions on\n\n30\n\n*  legacy networks.\n\n30\n\n* legacy networks.\n\n31\n\n*\n\n31\n\n*\n\n32\n\n*  Most of the time the ``max*FeePerGas`` is preferred.\n\n32\n\n* Most of the time the ``max*FeePerGas`` is preferred.\n\n33\n\n*/\n\n33\n\n*/\n\n34\n\ngasPrice\n\n?\n\n:\n\nbigint\n\n;\n\n34\n\ngasPrice\n\n?\n\n:\n\nbigint\n\n;\n\n35\n\n35\n\n36\n\n/**\n\n36\n\n/**\n\n37\n\n*  The [[link-eip-1559]] maximum priority fee to pay per gas.\n\n37\n\n* The [[link-eip-1559]] maximum priority fee to pay per gas.\n\n38\n\n*/\n\n38\n\n*/\n\n39\n\nmaxPriorityFeePerGas\n\n?\n\n:\n\nbigint\n\n;\n\n39\n\nmaxPriorityFeePerGas\n\n?\n\n:\n\nbigint\n\n;\n\n40\n\n40\n\n41\n\n/**\n\n41\n\n/**\n\n42\n\n*  The [[link-eip-1559]] maximum total fee to pay per gas. The actual\n\n42\n\n* The [[link-eip-1559]] maximum total fee to pay per gas. The actual\n\n43\n\n*  value used is protocol enforced to be the block's base fee.\n\n43\n\n* value used is protocol enforced to be the block's base fee.\n\n44\n\n*/\n\n44\n\n*/\n\n45\n\nmaxFeePerGas\n\n?\n\n:\n\nbigint\n\n;\n\n45\n\nmaxFeePerGas\n\n?\n\n:\n\nbigint\n\n;\n\n46\n\n46\n\n47\n\n/**\n\n47\n\n/**\n\n48\n\n*  The transaction data.\n\n48\n\n* The transaction data.\n\n49\n\n*/\n\n49\n\n*/\n\n50\n\ndata\n\n?\n\n:\n\nstring\n\n;\n\n50\n\ndata\n\n?\n\n:\n\nstring\n\n;\n\n51\n\n51\n\n52\n\n/**\n\n52\n\n/**\n\n53\n\n*  The transaction value (in wei).\n\n53\n\n* The transaction value (in wei).\n\n54\n\n*/\n\n54\n\n*/\n\n55\n\nvalue\n\n?\n\n:\n\nbigint\n\n;\n\n55\n\nvalue\n\n?\n\n:\n\nbigint\n\n;\n\n56\n\n56\n\n57\n\n/**\n\n57\n\n/**\n\n58\n\n*  The chain ID for the network this transaction is valid on.\n\n58\n\n* The chain ID for the network this transaction is valid on.\n\n59\n\n*/\n\n59\n\n*/\n\n60\n\nchainId\n\n?\n\n:\n\nbigint\n\n;\n\n60\n\nchainId\n\n?\n\n:\n\nbigint\n\n;\n\n61\n\n61\n\n62\n\n/**\n\n62\n\n/**\n\n63\n\n*  The [[link-eip-2930]] access list. Storage slots included in the access\n\n63\n\n* The [[link-eip-2930]] access list. Storage slots included in the access\n\n64\n\n*  list are //warmed// by pre-loading them, so their initial cost to\n\n64\n\n* list are //warmed// by pre-loading them, so their initial cost to\n\n65\n\n*  fetch is guaranteed, but then each additional access is cheaper.\n\n65\n\n* fetch is guaranteed, but then each additional access is cheaper.\n\n66\n\n*/\n\n66\n\n*/\n\n67\n\naccessList\n\n?\n\n:\n\nAccessList\n\n;\n\n67\n\naccessList\n\n?\n\n:\n\nAccessList\n\n;\n\n68\n\n68\n\n69\n\n/**\n\n69\n\n/**\n\n70\n\n*  A custom object, which can be passed along for network-specific\n\n70\n\n* A custom object, which can be passed along for network-specific\n\n71\n\n*  values.\n\n71\n\n* values.\n\n72\n\n*/\n\n72\n\n*/\n\n73\n\ncustomData\n\n?\n\n:\n\nany\n\n;\n\n73\n\ncustomData\n\n?\n\n:\n\nany\n\n;\n\n74\n\n}\n\n74\n\n}", "explanation": "**GaslessTransactionRequest**\n\nThe `GaslessTransactionRequest` is a data structure used to represent a transaction that can be executed on the blockchain without the need for gas. It's a crucial component in the Magic Labs embedded wallet documentation.\n\n**Main Purpose:**\n\nThe primary purpose of `GaslessTransactionRequest` is to provide a standardized format for transactions that can be executed without the need for gas. This is particularly useful in scenarios where gas fees are high or unpredictable, and the user wants to ensure their transaction is executed without interruption.\n\n**Key Components:**\n\nThe `GaslessTransactionRequest` interface consists of the following key components:\n\n1. **Transaction Type**: The type of transaction being requested (e.g., transfer, contract call).\n2. **Target**: The recipient's address or contract address.\n3. **Sender**: The sender's address.\n4. **Nonce**: A unique identifier to prevent replay attacks.\n5. **Gas Limit**: The maximum amount of gas allowed for the transaction.\n6. **Gas Price**: The price of gas per unit (used for legacy transactions).\n7. **Max Priority Fee Per Gas**: The maximum priority fee per gas (used for EIP-1559 transactions).\n8. **Max Fee Per Gas**: The maximum total fee per gas (used for EIP-1559 transactions).\n9. **Transaction Data**: The actual data being sent with the transaction.\n10. **Transaction Value**: The value of the transaction in wei.\n11. **Chain ID**: The chain ID for the network being used.\n12. **Access List**: A list of storage slots to be accessed during the transaction (used for EIP-2930 optimizations).\n13. **Custom Data**: A custom object that can be passed along for network-specific values or transaction metadata.\n\n**In Summary:**\n\nThe `GaslessTransactionRequest` data structure provides a standardized format for transactions that can be executed on the blockchain without the need for gas. It's an essential component in the Magic Labs embedded wallet documentation and helps ensure transactions are executed efficiently and reliably.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/resources/types#chunk-14", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n#\n\nLoginWithMagicLinkConfiguration\n\nCopy\n\n01\n\nexport\n\ninterface\n\nLoginWithMagicLinkConfiguration\n\n{\n\n01\n\nexport\n\ninterface\n\nLoginWithMagicLinkConfiguration\n\n{\n\n02\n\n/**\n\n02\n\n/**\n\n03\n\n* The email address of the user attempting to login.\n\n03\n\n* The email address of the user attempting to login.\n\n04\n\n*/\n\n04\n\n*/\n\n05\n\nemail\n\n:\n\nstring\n\n;\n\n05\n\nemail\n\n:\n\nstring\n\n;\n\n06\n\n06\n\n07\n\n/**\n\n07\n\n/**\n\n08\n\n* When `true`, a pre-built modal interface will show to the user, directing\n\n08\n\n* When `true`, a pre-built modal interface will show to the user, directing\n\n09\n\n* them to check their email for the \"magic link\" to complete their\n\n09\n\n* them to check their email for the \"magic link\" to complete their\n\n10\n\n* authentication.\n\n10\n\n* authentication.\n\n11\n\n*/\n\n11\n\n*/\n\n12\n\nshowUI\n\n?\n\n:\n\nboolean\n\n;\n\n12\n\nshowUI\n\n?\n\n:\n\nboolean\n\n;\n\n13\n\n13\n\n14\n\n/**\n\n14\n\n/**\n\n15\n\n* You can optionally provide a redirect URI that will be followed at the end\n\n15\n\n* You can optionally provide a redirect URI that will be followed at the end\n\n16\n\n* of the magic link flow. Don't forget to invoke\n\n16\n\n* of the magic link flow. Don't forget to invoke\n\n17\n\n* `magic.auth.loginWithCredential()` to complete the login from the route you\n\n17\n\n* `magic.auth.loginWithCredential()` to complete the login from the route you\n\n18\n\n* configure here.\n\n18\n\n* configure here.\n\n19\n\n*/\n\n19\n\n*/\n\n20\n\nredirectURI\n\n?\n\n:\n\nstring\n\n;\n\n20\n\nredirectURI\n\n?\n\n:\n\nstring\n\n;\n\n21\n\n21\n\n22\n\n/**\n\n22\n\n/**\n\n23\n\n* Enterprise users with a custom SMTP can create custom email templates\n\n23\n\n* Enterprise users with a custom SMTP can create custom email templates\n\n24\n\n* from their dashboard. The default Magic loginWithMagicLink email will be\n\n24\n\n* from their dashboard. The default Magic loginWithMagicLink email will be\n\n25\n\n* overriden when a variation is passed here.\n\n25\n\n* overriden when a variation is passed here.\n\n26\n\n*/\n\n26\n\n*/\n\n27\n\noverrides\n\n?\n\n:\n\n{\n\n27\n\noverrides\n\n?\n\n:\n\n{\n\n28\n\nvariation\n\n?\n\n:\n\nstring\n\n;\n\n28\n\nvariation\n\n?\n\n:\n\nstring\n\n;\n\n29\n\n}\n\n;\n\n29\n\n}\n\n;\n\n30\n\n}\n\n30\n\n}", "explanation": "**Title:** LoginWithMagicLinkConfiguration\n\n**Purpose:** The `LoginWithMagicLinkConfiguration` is an interface used in the Magic Labs embedded wallet API to configure the login process using a magic link. The main purpose of this configuration is to initiate a secure authentication flow where a user receives an email with a \"magic link\" that they can use to complete their login.\n\n**Key Features:**\n\n1. **Email Address:** The user's email address is required to initiate the magic link login flow.\n2. **Show UI:** An optional parameter to display a pre-built modal interface directing the user to check their email for the magic link.\n3. **Redirect URI:** An optional parameter to redirect the user to a specific route after completing the magic link login flow.\n4. **Custom Email Template:** Enterprise users can override the default email template with a custom one from their dashboard by providing a variation.\n\n**Usage:**\n\nTo use the `LoginWithMagicLinkConfiguration` interface, you'll need to provide the required email address and optionally, the `showUI` and `redirectURI` parameters. If you're an enterprise user, you can also provide a custom email template variation to override the default email.\n\n**Example:**\n```javascript\nconst loginConfig = {\n  email: 'user@example.com',\n  showUI: true,\n  redirectURI: 'https://example.com/login/success',\n  overrides: {\n    variation: 'custom-template-abc123',\n  },\n};\n```\nBy using the `LoginWithMagicLinkConfiguration` interface, you can securely authenticate users with a simple and seamless magic link login experience.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/resources/types#chunk-15", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nLoginWithSmsConfiguration\n\nCopy\n\n01\n\nexport\n\ninterface\n\nLoginWithSmsConfiguration\n\n{\n\n01\n\nexport\n\ninterface\n\nLoginWithSmsConfiguration\n\n{\n\n02\n\n/**\n\n02\n\n/**\n\n03\n\n* Specify the phone number of the user attempting to login.\n\n03\n\n* Specify the phone number of the user attempting to login.\n\n04\n\n*/\n\n04\n\n*/\n\n05\n\nphoneNumber\n\n:\n\nstring\n\n;\n\n05\n\nphoneNumber\n\n:\n\nstring\n\n;\n\n06\n\n}\n\n06\n\n}", "explanation": "Based on the provided documentation section '#LoginWithSmsConfiguration', here's a clear and concise explanation of what it is and its main purpose:\n\n**LoginWithSmsConfiguration Interface:**\nThe `LoginWithSmsConfiguration` interface is a documentation section in the Magic Labs embedded wallet API.\n\n**Purpose:**\nIts main purpose is to define the configuration required for users to log in using a one-time SMS code. This allows users to authenticate through their phone number.\n\n**Key Component:**\nThe primary attribute of this interface is the `phoneNumber` property, which is a string type. This property requires a user's phone number as input, which is necessary for sending a one-time SMS code for authentication purposes.\n\n**In Summary:**\nThe `LoginWithSmsConfiguration` interface is a simple data structure that contains a phone number. This phone number is used to send a one-time SMS code to the user, which they can then use to log in to their account by entering the verification code received. This configuration enables users to authenticate using their phone number, enhancing the login experience and adding an extra layer of security to their Magic Labs embedded wallet account.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/resources/types#chunk-16", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nLoginWithEmailOTPConfiguration\n\nCopy\n\n01\n\nexport\n\ninterface\n\nLoginWithEmailOTPConfiguration\n\n{\n\n01\n\nexport\n\ninterface\n\nLoginWithEmailOTPConfiguration\n\n{\n\n02\n\n/**\n\n02\n\n/**\n\n03\n\n* Specify the email address of the user attempting to login.\n\n03\n\n* Specify the email address of the user attempting to login.\n\n04\n\n*/\n\n04\n\n*/\n\n05\n\nemail\n\n:\n\nstring\n\n;\n\n05\n\nemail\n\n:\n\nstring\n\n;\n\n06\n\n06\n\n07\n\n/**\n\n07\n\n/**\n\n08\n\n* When `true`, a pre-built modal interface will show to the user, directing\n\n08\n\n* When `true`, a pre-built modal interface will show to the user, directing\n\n09\n\n* them to check their email for the one time passcode (OTP) to complete their\n\n09\n\n* them to check their email for the one time passcode (OTP) to complete their\n\n10\n\n* authentication.\n\n10\n\n* authentication.\n\n11\n\n*\n\n11\n\n*\n\n12\n\n* When `false`, developers will be able to implement their own custom UI to\n\n12\n\n* When `false`, developers will be able to implement their own custom UI to\n\n13\n\n* continue the email OTP flow.\n\n13\n\n* continue the email OTP flow.\n\n14\n\n*/\n\n14\n\n*/\n\n15\n\nshowUI\n\n?\n\n:\n\nboolean\n\n;\n\n15\n\nshowUI\n\n?\n\n:\n\nboolean\n\n;\n\n16\n\n16\n\n17\n\n/**\n\n17\n\n/**\n\n18\n\n* Device Unrecognized UI will enforce showing up to secure user's login\n\n18\n\n* Device Unrecognized UI will enforce showing up to secure user's login\n\n19\n\n*\n\n19\n\n*\n\n20\n\n* When set to true (default), an improved device recognition UI will be displayed to the user,\n\n20\n\n* When set to true (default), an improved device recognition UI will be displayed to the user,\n\n21\n\n* prompting them to verify their login by checking their email for device approval. This feature\n\n21\n\n* prompting them to verify their login by checking their email for device approval. This feature\n\n22\n\n* enhances authentication security.\n\n22\n\n* enhances authentication security.\n\n23\n\n*\n\n23\n\n*\n\n24\n\n* This param will only be affect if showUI is false. When set to false,\n\n24\n\n* This param will only be affect if showUI is false. When set to false,\n\n25\n\n* developers have the flexibility to implement their own customized UI to\n\n25\n\n* developers have the flexibility to implement their own customized UI to\n\n26\n\n* handle device check events, providing a more tailored user experience.\n\n26\n\n* handle device check events, providing a more tailored user experience.\n\n27\n\n*/\n\n27\n\n*/\n\n28\n\ndeviceCheckUI\n\n?\n\n:\n\nboolean\n\n;\n\n28\n\ndeviceCheckUI\n\n?\n\n:\n\nboolean\n\n;\n\n29\n\n29\n\n30\n\n/**\n\n30\n\n/**\n\n31\n\n* Enterprise users with a custom SMTP can create custom email templates\n\n31\n\n* Enterprise users with a custom SMTP can create custom email templates\n\n32\n\n* from their dashboard. The default Magic loginWithOTP email will be\n\n32\n\n* from their dashboard. The default Magic loginWithOTP email will be\n\n33\n\n* overriden when a variation is passed here.\n\n33\n\n* overriden when a variation is passed here.\n\n34\n\n*/\n\n34\n\n*/\n\n35\n\noverrides\n\n?\n\n:\n\n{\n\n35\n\noverrides\n\n?\n\n:\n\n{\n\n36\n\nvariation\n\n?\n\n:\n\nstring\n\n;\n\n36\n\nvariation\n\n?\n\n:\n\nstring\n\n;\n\n37\n\n}\n\n;\n\n37\n\n}\n\n;\n\n38\n\n}\n\n38\n\n}", "explanation": "**LoginWithEmailOTPConfiguration**\n\nThe `LoginWithEmailOTPConfiguration` interface is a section of documentation for the Magic Labs embedded wallet's API. It describes the configuration options for logging in with an email and one-time passcode (OTP).\n\n**Main Purpose:**\nThe primary purpose of `LoginWithEmailOTPConfiguration` is to provide developers with the flexibility to customize the login flow with email and OTP verification. By using this configuration, developers can control various aspects of the login experience, such as displaying a pre-built modal interface, enforcing device check, and implementing custom UI.\n\n**Key Features:**\n\n* `email`: The email address of the user attempting to login.\n* `showUI`: A boolean flag indicating whether to display a pre-built modal interface for the OTP flow. When `true`, the pre-built modal will be shown; when `false`, developers can implement their own custom UI.\n* `deviceCheckUI`: A boolean flag (only applicable when `showUI` is `false`) that controls the display of an improved device recognition UI for user verification.\n* `overrides`: An optional object that allows enterprise users with custom SMTP settings to create custom email templates for loginWithOTP, overriding the default Magic email template when a `variation` is passed.\n\nIn summary, `LoginWithEmailOTPConfiguration` is a crucial part of the Magic Labs embedded wallet's API, enabling developers to fine-tune the login experience with email and OTP verification.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/resources/types#chunk-17", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\nexport\n\ntype\n\nLoginWithMagicLinkEventHandlers\n\n=\n\n{\n\n01\n\nexport\n\ntype\n\nLoginWithMagicLinkEventHandlers\n\n=\n\n{\n\n02\n\n// Event Received\n\n02\n\n// Event Received\n\n03\n\n[\n\nLoginWithMagicLinkEventOnReceived\n\n.\n\nEmailSent\n\n]\n\n:\n\n(\n\n)\n\n=>\n\nvoid\n\n;\n\n03\n\n[\n\nLoginWithMagicLinkEventOnReceived\n\n.\n\nEmailSent\n\n]\n\n:\n\n(\n\n)\n\n=>\n\nvoid\n\n;\n\n04\n\n[\n\nLoginWithMagicLinkEventOnReceived\n\n.\n\nEmailNotDeliverable\n\n]\n\n:\n\n(\n\n)\n\n=>\n\nvoid\n\n;\n\n04\n\n[\n\nLoginWithMagicLinkEventOnReceived\n\n.\n\nEmailNotDeliverable\n\n]\n\n:\n\n(\n\n)\n\n=>\n\nvoid\n\n;\n\n05\n\n05\n\n06\n\n// Event sent\n\n06\n\n// Event sent\n\n07\n\n[\n\nLoginWithMagicLinkEventEmit\n\n.\n\nRetry\n\n]\n\n:\n\n(\n\n)\n\n=>\n\nvoid\n\n;\n\n07\n\n[\n\nLoginWithMagicLinkEventEmit\n\n.\n\nRetry\n\n]\n\n:\n\n(\n\n)\n\n=>\n\nvoid\n\n;\n\n08\n\n}\n\n&\n\nDeviceVerificationEventHandlers\n\n;\n\n08\n\n}\n\n&\n\nDeviceVerificationEventHandlers\n\n;\n\n09\n\n09\n\n10\n\nexport\n\ntype\n\nLoginWithEmailOTPEventHandlers\n\n=\n\n{\n\n10\n\nexport\n\ntype\n\nLoginWithEmailOTPEventHandlers\n\n=\n\n{\n\n11\n\n// Event Received\n\n11\n\n// Event Received\n\n12\n\n[\n\nLoginWithEmailOTPEventOnReceived\n\n.\n\nEmailOTPSent\n\n]\n\n:\n\n(\n\n)\n\n=>\n\nvoid\n\n;\n\n12\n\n[\n\nLoginWithEmailOTPEventOnReceived\n\n.\n\nEmailOTPSent\n\n]\n\n:\n\n(\n\n)\n\n=>\n\nvoid\n\n;\n\n13\n\n[\n\nLoginWithEmailOTPEventOnReceived\n\n.\n\nInvalidEmailOtp\n\n]\n\n:\n\n(\n\n)\n\n=>\n\nvoid\n\n;\n\n13\n\n[\n\nLoginWithEmailOTPEventOnReceived\n\n.\n\nInvalidEmailOtp\n\n]\n\n:\n\n(\n\n)\n\n=>\n\nvoid\n\n;\n\n14\n\n[\n\nLoginWithEmailOTPEventOnReceived\n\n.\n\nExpiredEmailOtp\n\n]\n\n:\n\n(\n\n)\n\n=>\n\nvoid\n\n;\n\n14\n\n[\n\nLoginWithEmailOTPEventOnReceived\n\n.\n\nExpiredEmailOtp\n\n]\n\n:\n\n(\n\n)\n\n=>\n\nvoid\n\n;\n\n15\n\n15\n\n16\n\n// Event sent\n\n16\n\n// Event sent\n\n17\n\n[\n\nLoginWithEmailOTPEventEmit\n\n.\n\nVerifyEmailOtp\n\n]\n\n:\n\n(\n\notp\n\n:\n\nstring\n\n)\n\n=>\n\nvoid\n\n;\n\n17\n\n[\n\nLoginWithEmailOTPEventEmit\n\n.\n\nVerifyEmailOtp\n\n]\n\n:\n\n(\n\notp\n\n:\n\nstring\n\n)\n\n=>\n\nvoid\n\n;\n\n18\n\n[\n\nLoginWithEmailOTPEventEmit\n\n.\n\nCancel\n\n]\n\n:\n\n(\n\n)\n\n=>\n\nvoid\n\n;\n\n18\n\n[\n\nLoginWithEmailOTPEventEmit\n\n.\n\nCancel\n\n]\n\n:\n\n(\n\n)\n\n=>\n\nvoid\n\n;\n\n19\n\n}\n\n&\n\nDeviceVerificationEventHandlers\n\n;\n\n19\n\n}\n\n&\n\nDeviceVerificationEventHandlers\n\n;\n\n20\n\n20\n\n21\n\ntype\n\nDeviceVerificationEventHandlers\n\n=\n\n{\n\n21\n\ntype\n\nDeviceVerificationEventHandlers\n\n=\n\n{\n\n22\n\n// Event Received\n\n22\n\n// Event Received\n\n23\n\n[\n\nDeviceVerificationEventOnReceived\n\n.\n\nDeviceNeedsApproval\n\n]\n\n:\n\n(\n\n)\n\n=>\n\nvoid\n\n;\n\n23\n\n[\n\nDeviceVerificationEventOnReceived\n\n.\n\nDeviceNeedsApproval\n\n]\n\n:\n\n(\n\n)\n\n=>\n\nvoid\n\n;\n\n24\n\n[\n\nDeviceVerificationEventOnReceived\n\n.\n\nDeviceVerificationEmailSent\n\n]\n\n:\n\n(\n\n)\n\n=>\n\nvoid\n\n;\n\n24\n\n[\n\nDeviceVerificationEventOnReceived\n\n.\n\nDeviceVerificationEmailSent\n\n]\n\n:\n\n(\n\n)\n\n=>\n\nvoid\n\n;\n\n25\n\n[\n\nDeviceVerificationEventOnReceived\n\n.\n\nDeviceVerificationLinkExpired\n\n]\n\n:\n\n(\n\n)\n\n=>\n\nvoid\n\n;\n\n25\n\n[\n\nDeviceVerificationEventOnReceived\n\n.\n\nDeviceVerificationLinkExpired\n\n]\n\n:\n\n(\n\n)\n\n=>\n\nvoid\n\n;\n\n26\n\n[\n\nDeviceVerificationEventOnReceived\n\n.\n\nDeviceApproved\n\n]\n\n:\n\n(\n\n)\n\n=>\n\nvoid\n\n;\n\n26\n\n[\n\nDeviceVerificationEventOnReceived\n\n.\n\nDeviceApproved\n\n]\n\n:\n\n(\n\n)\n\n=>\n\nvoid\n\n;\n\n27\n\n27\n\n28\n\n// Event sent\n\n28\n\n// Event sent\n\n29\n\n[\n\nDeviceVerificationEventEmit\n\n.\n\nRetry\n\n]\n\n:\n\n(\n\n)\n\n=>\n\nvoid\n\n;\n\n29\n\n[\n\nDeviceVerificationEventEmit\n\n.\n\nRetry\n\n]\n\n:\n\n(\n\n)\n\n=>\n\nvoid\n\n;\n\n30\n\n}\n\n;\n\n30\n\n}\n\n;", "explanation": "**#EventHandlers: Handling Magic Labs Embedded Wallet Events**\n\nIn the Magic Labs Embedded Wallet documentation, the `#EventHandlers` section is crucial for handling events that occur throughout the authentication process. These events provide callbacks for various scenarios, allowing your application to be notified and respond accordingly.\n\n**Main Purpose**\n\nThe main purpose of the `EventHandlers` is to:\n\n1. **Handle received events**: Provide callbacks for events that are triggered by Magic Labs, such as emails sent, emails not deliverable, device verification requests, and more.\n2. **Handle sent events**: Provide callbacks for events that your application can trigger, such as retrying a failed authentication attempt, verifying an OTP, or canceling an ongoing process.\n\n**Key Concepts**\n\n1. **Received Events**: These events are triggered by Magic Labs when it sends emails, attempts device verification, or experiences other authentication-related occurrences.\n2. **Sent Events**: These events are triggered by your application when it sends requests to Magic Labs, such as retrying a failed authentication attempt or verifying an OTP.\n\n**Handler Types**\n\nThe `EventHandlers` type is composed of multiple handler types, each specific to a particular event. These handler types include:\n\n* `LoginWithMagicLinkEventHandlers`\n* `LoginWithEmailOTPEventHandlers`\n* `DeviceVerificationEventHandlers`\n\nEach handler type provides a set of callbacks for specific events, allowing your application to react accordingly.\n\n**Callback Structure**\n\nThe callbacks are structured as follows:\n```typescript\n[type of callback]: (event: [type of event]) => void;\n```\nThis means that the callback function takes an object of type `[type of event]` as an argument and returns `void`.\n\n**Example**\n\nHere's an example of how you might use the `DeviceVerificationEventHandlers` type to handle received events:\n```typescript\nconst handlers: DeviceVerificationEventHandlers = {\n  [DeviceVerificationEventOnReceived.DeviceNeedsApproval]: () => {\n    console.log(\"Device needs approval!\");\n  },\n  [DeviceVerificationEventOnReceived.DeviceVerificationEmailSent]: () => {\n    console.log(\"Device verification email sent!\");\n  },\n  [DeviceVerificationEventOnReceived.DeviceVerificationLinkExpired]: () => {\n    console.log(\"Device verification link expired!\");\n  },\n  [DeviceVerificationEventOnReceived.DeviceApproved]: () => {\n    console.log(\"Device approved!\");\n  },\n};\n```\nThis example demonstrates how to define a set of handlers for the `DeviceVerificationEventOnReceived` type, which are triggered when Magic Labs sends requests for device verification.\n\nBy implementing these event handlers, your application can respond to various authentication-related events and provide a more seamless user experience.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/resources/types#chunk-18", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\nexport\n\nenum\n\nLoginWithMagicLinkEventEmit\n\n{\n\n01\n\nexport\n\nenum\n\nLoginWithMagicLinkEventEmit\n\n{\n\n02\n\nRetry\n\n=\n\n'retry'\n\n,\n\n02\n\nRetry\n\n=\n\n'retry'\n\n,\n\n03\n\n}\n\n03\n\n}\n\n04\n\n04\n\n05\n\nexport\n\nenum\n\nLoginWithMagicLinkEventOnReceived\n\n{\n\n05\n\nexport\n\nenum\n\nLoginWithMagicLinkEventOnReceived\n\n{\n\n06\n\nEmailSent\n\n=\n\n'email-sent'\n\n,\n\n06\n\nEmailSent\n\n=\n\n'email-sent'\n\n,\n\n07\n\nEmailNotDeliverable\n\n=\n\n'email-not-deliverable'\n\n,\n\n07\n\nEmailNotDeliverable\n\n=\n\n'email-not-deliverable'\n\n,\n\n08\n\n}\n\n08\n\n}\n\n09\n\n09\n\n10\n\nexport\n\nenum\n\nLoginWithEmailOTPEventEmit\n\n{\n\n10\n\nexport\n\nenum\n\nLoginWithEmailOTPEventEmit\n\n{\n\n11\n\nVerifyEmailOtp\n\n=\n\n'verify-email-otp'\n\n,\n\n11\n\nVerifyEmailOtp\n\n=\n\n'verify-email-otp'\n\n,\n\n12\n\nCancel\n\n=\n\n'cancel'\n\n,\n\n12\n\nCancel\n\n=\n\n'cancel'\n\n,\n\n13\n\n}\n\n13\n\n}\n\n14\n\n14\n\n15\n\nexport\n\nenum\n\nLoginWithEmailOTPEventOnReceived\n\n{\n\n15\n\nexport\n\nenum\n\nLoginWithEmailOTPEventOnReceived\n\n{\n\n16\n\nEmailOTPSent\n\n=\n\n'email-otp-sent'\n\n,\n\n16\n\nEmailOTPSent\n\n=\n\n'email-otp-sent'\n\n,\n\n17\n\nInvalidEmailOtp\n\n=\n\n'invalid-email-otp'\n\n,\n\n17\n\nInvalidEmailOtp\n\n=\n\n'invalid-email-otp'\n\n,\n\n18\n\nExpiredEmailOtp\n\n=\n\n'expired-email-otp'\n\n,\n\n18\n\nExpiredEmailOtp\n\n=\n\n'expired-email-otp'\n\n,\n\n19\n\n}\n\n19\n\n}\n\n20\n\n20\n\n21\n\nexport\n\nenum\n\nDeviceVerificationEventEmit\n\n{\n\n21\n\nexport\n\nenum\n\nDeviceVerificationEventEmit\n\n{\n\n22\n\nRetry\n\n=\n\n'device-retry'\n\n,\n\n22\n\nRetry\n\n=\n\n'device-retry'\n\n,\n\n23\n\n}\n\n23\n\n}\n\n24\n\n24\n\n25\n\nexport\n\nenum\n\nDeviceVerificationEventOnReceived\n\n{\n\n25\n\nexport\n\nenum\n\nDeviceVerificationEventOnReceived\n\n{\n\n26\n\nDeviceApproved\n\n=\n\n'device-approved'\n\n,\n\n26\n\nDeviceApproved\n\n=\n\n'device-approved'\n\n,\n\n27\n\nDeviceNeedsApproval\n\n=\n\n'device-needs-approval'\n\n,\n\n27\n\nDeviceNeedsApproval\n\n=\n\n'device-needs-approval'\n\n,\n\n28\n\nDeviceVerificationLinkExpired\n\n=\n\n'device-verification-link-expired'\n\n,\n\n28\n\nDeviceVerificationLinkExpired\n\n=\n\n'device-verification-link-expired'\n\n,\n\n29\n\nDeviceVerificationEmailSent\n\n=\n\n'device-verification-email-sent'\n\n,\n\n29\n\nDeviceVerificationEmailSent\n\n=\n\n'device-verification-email-sent'\n\n,\n\n30\n\n}\n\n30\n\n}", "explanation": "**#Auth Events Enum Explanation**\n\nThe provided documentation section is about Auth Events Enum, which is part of the Magic Labs embedded wallet documentation. This enum defines various authentication events that occur during the authentication process using Magic Labs.\n\n**Main Purpose:**\n\nThe primary purpose of the Auth Events Enum is to provide a standardized set of event types that can be emitted or received during authentication. These events help in tracking the status of authentication attempts, notifying about errors, and facilitating integration with the Magic Labs platform.\n\n**Enum Breakdown:**\n\nThe enum includes the following event types, grouped into four categories:\n\n1. **LoginWithMagicLinkEventEmit**: Events emitted when a user attempts to log in using a Magic Link (e.g., retry, cancelling).\n2. **LoginWithMagicLinkEventOnReceived**: Events received when a user logs in with a Magic Link (e.g., email sent, email not deliverable).\n3. **LoginWithEmailOTPEventEmit**: Events emitted when a user attempts to log in using Email OTP (e.g., verifying OTP, cancelling).\n4. **LoginWithEmailOTPEventOnReceived**: Events received when a user logs in with Email OTP (e.g., email OTP sent, OTP expired).\n5. **DeviceVerificationEventEmit**: Events emitted when a user attempts to verify their device (e.g., retry).\n6. **DeviceVerificationEventOnReceived**: Events received when a user verifies their device (e.g., device approved, token expired).\n\n**Example Use Cases:**\n\nWhen using Magic Labs, you can leverage these enum events to tailor your application's behavior according to the authentication process. For instance, you can show a retry button when the `Retry` event is emitted, display an error message when `EmailNotDeliverable` event is received, or provide an option to cancel the login process when `Cancel` event is emitted.\n\nBy integrating these event types into your Magic Labs implementation, you can create a seamless user experience while ensuring a high level of security for user authentication.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/resources/types#chunk-19", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n#\n\nNFTPurchaseRequest\n\nCopy\n\n01\n\nexport\n\ninterface\n\nNFTPurchaseRequest\n\n{\n\n01\n\nexport\n\ninterface\n\nNFTPurchaseRequest\n\n{\n\n02\n\nnft\n\n:\n\n{\n\n02\n\nnft\n\n:\n\n{\n\n03\n\nname\n\n:\n\nstring\n\n;\n\n03\n\nname\n\n:\n\nstring\n\n;\n\n04\n\nimageUrl\n\n:\n\nstring\n\n;\n\n04\n\nimageUrl\n\n:\n\nstring\n\n;\n\n05\n\nblockchainNftId\n\n:\n\nstring\n\n;\n\n05\n\nblockchainNftId\n\n:\n\nstring\n\n;\n\n06\n\ncontractAddress\n\n:\n\nstring\n\n;\n\n06\n\ncontractAddress\n\n:\n\nstring\n\n;\n\n07\n\nnetwork\n\n:\n\nstring\n\n;\n\n07\n\nnetwork\n\n:\n\nstring\n\n;\n\n08\n\nplatform\n\n:\n\nstring\n\n;\n\n08\n\nplatform\n\n:\n\nstring\n\n;\n\n09\n\ntype\n\n:\n\nstring\n\n;\n\n09\n\ntype\n\n:\n\nstring\n\n;\n\n10\n\n}\n\n;\n\n10\n\n}\n\n;\n\n11\n\nidentityPrefill\n\n:\n\n{\n\n11\n\nidentityPrefill\n\n:\n\n{\n\n12\n\nfirstName\n\n:\n\nstring\n\n;\n\n12\n\nfirstName\n\n:\n\nstring\n\n;\n\n13\n\nlastName\n\n:\n\nstring\n\n;\n\n13\n\nlastName\n\n:\n\nstring\n\n;\n\n14\n\ndateOfBirth\n\n:\n\nstring\n\n;\n\n// YYYY-MM-DD\n\n14\n\ndateOfBirth\n\n:\n\nstring\n\n;\n\n// YYYY-MM-DD\n\n15\n\nemailAddress\n\n:\n\nstring\n\n;\n\n15\n\nemailAddress\n\n:\n\nstring\n\n;\n\n16\n\nphone\n\n:\n\nstring\n\n;\n\n16\n\nphone\n\n:\n\nstring\n\n;\n\n17\n\naddress\n\n:\n\n{\n\n17\n\naddress\n\n:\n\n{\n\n18\n\nstreet1\n\n:\n\nstring\n\n;\n\n18\n\nstreet1\n\n:\n\nstring\n\n;\n\n19\n\nstreet2\n\n:\n\nstring\n\n;\n\n19\n\nstreet2\n\n:\n\nstring\n\n;\n\n20\n\ncity\n\n:\n\nstring\n\n;\n\n20\n\ncity\n\n:\n\nstring\n\n;\n\n21\n\nregionCode\n\n:\n\nstring\n\n;\n\n21\n\nregionCode\n\n:\n\nstring\n\n;\n\n22\n\npostalCode\n\n:\n\nstring\n\n;\n\n22\n\npostalCode\n\n:\n\nstring\n\n;\n\n23\n\ncountryCode\n\n:\n\nstring\n\n;\n\n23\n\ncountryCode\n\n:\n\nstring\n\n;\n\n24\n\n}\n\n;\n\n24\n\n}\n\n;\n\n25\n\n}\n\n;\n\n25\n\n}\n\n;\n\n26\n\n}\n\n26\n\n}", "explanation": "**#NFT Module - #NFTPurchaseRequest**\n\nThe `NFTPurchaseRequest` interface is a data structure defined in the Magic Labs embedded wallet documentation. Its main purpose is to represent a request for purchasing a Non-Fungible Token (NFT) from a user.\n\n**Key Components:**\n\nThe `NFTPurchaseRequest` interface has two main sections:\n\n1. **NFT Details**: This section contains information about the NFT being purchased, including:\n\t* `name`: The name of the NFT.\n\t* `imageUrl`: The URL of the NFT's image.\n\t* `blockchainNftId`: The ID of the NFT on the blockchain.\n\t* `contractAddress`: The address of the smart contract that holds the NFT.\n\t* `network`: The blockchain network on which the NFT is hosted.\n\t* `platform`: The platform on which the NFT is being purchased (e.g. Magic Link).\n\t* `type`: The type of NFT (e.g. collectible, art, etc.).\n2. **Identity Pre-fill**: This section contains user identity information to facilitate a seamless purchase experience. If a user has previously connected their identity to the Magic wallet, this section populates automatically with the user's existing information, including:\n\t* `firstName`, `lastName`, `dateOfBirth`, `emailAddress`, `phone`, and `address` (with sub-properties `street1`, `street2`, `city`, `regionCode`, `postalCode`, and `countryCode`).\n\n**Context:**\n\nThe `NFTPurchaseRequest` interface is likely used to prepare data for initiating an NFT purchase transaction from within the Magic wallet. The interface ensures that the necessary NFT and user identity information is provided to facilitate a smooth and secure transaction.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/resources/types#chunk-20", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nNFTCheckoutRequest\n\nCopy\n\n01\n\nexport\n\ninterface\n\nNFTCheckoutRequest\n\n{\n\n01\n\nexport\n\ninterface\n\nNFTCheckoutRequest\n\n{\n\n02\n\n// given by magic / found in the developer dashboard in future\n\n02\n\n// given by magic / found in the developer dashboard in future\n\n03\n\ncontractId\n\n:\n\nstring\n\n;\n\n03\n\ncontractId\n\n:\n\nstring\n\n;\n\n04\n\n// in contract, if ERC1155\u2026 for ERC721, use token ID = 0\n\n04\n\n// in contract, if ERC1155\u2026 for ERC721, use token ID = 0\n\n05\n\ntokenId\n\n:\n\nstring\n\n;\n\n05\n\ntokenId\n\n:\n\nstring\n\n;\n\n06\n\nname\n\n:\n\nstring\n\n;\n\n06\n\nname\n\n:\n\nstring\n\n;\n\n07\n\nimageUrl\n\n:\n\nstring\n\n;\n\n07\n\nimageUrl\n\n:\n\nstring\n\n;\n\n08\n\nquantity\n\n?\n\n:\n\nnumber\n\n;\n\n// default is 1\n\n08\n\nquantity\n\n?\n\n:\n\nnumber\n\n;\n\n// default is 1\n\n09\n\nwalletAddress\n\n?\n\n:\n\nstring\n\n;\n\n// default is user's wallet address\n\n09\n\nwalletAddress\n\n?\n\n:\n\nstring\n\n;\n\n// default is user's wallet address\n\n10\n\n}\n\n10\n\n}", "explanation": "**NFTCheckoutRequest Overview**\n\nThe `NFTCheckoutRequest` interface is a key component of the Magic Labs embedded wallet documentation. It represents a request to initiate a Non-Fungible Token (NFT) checkout process.\n\n**Main Purpose:**\n\nThe primary purpose of the `NFTCheckoutRequest` interface is to gather the necessary information required to facilitate a seamless NFT checkout experience for users. This information includes:\n\n1. **Contract ID**: A unique identifier for the NFT contract.\n2. **Token ID**: The specific NFT token being purchased or transferred.\n3. **Name**: The name of the NFT.\n4. **Image URL**: The link to the NFT's image.\n5. **Quantity**: The number of NFTs being purchased or transferred (default is 1).\n6. **Wallet Address**: The user's wallet address associated with the transaction (default is the user's wallet address if not specified).\n\n**Key Takeaways:**\n\n* The NFTCheckoutRequest interface is used to initiate a checkout process for NFTs.\n* It provides a structured way to collect necessary information for NFT transactions.\n* The interface includes optional properties (Quantity and Wallet Address) with default values to simplify the checkout process.\n\nBy understanding the `NFTCheckoutRequest` interface, developers can integrate Magic Labs' embedded wallet functionality into their applications, providing a secure and user-friendly NFT checkout experience for their users.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/resources/types#chunk-21", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nNFTTransferRequest\n\nCopy\n\n01\n\nexport\n\ninterface\n\nNFTTransferRequest\n\n{\n\n01\n\nexport\n\ninterface\n\nNFTTransferRequest\n\n{\n\n02\n\ntokenId\n\n:\n\nstring\n\n;\n\n02\n\ntokenId\n\n:\n\nstring\n\n;\n\n03\n\ncontractAddress\n\n:\n\nstring\n\n;\n\n03\n\ncontractAddress\n\n:\n\nstring\n\n;\n\n04\n\nquantity\n\n?\n\n:\n\nnumber\n\n;\n\n04\n\nquantity\n\n?\n\n:\n\nnumber\n\n;\n\n05\n\nrecipient\n\n?\n\n:\n\nstring\n\n;\n\n05\n\nrecipient\n\n?\n\n:\n\nstring\n\n;\n\n06\n\n}\n\n06\n\n}", "explanation": "The `NFTTransferRequest` is an interface in the Magic Labs embedded wallet documentation, representing a request to transfer a Non-Fungible Token (NFT) from one wallet to another. \n\nHere's a brief explanation of each property within this interface:\n\n1. **`tokenId`**: a string representing the unique identifier of the NFT to be transferred.\n2. **`contractAddress`**: a string representing the Ethereum contract address where the NFT is stored.\n3. **`quantity`**: an optional number that specifies the number of NFTs to transfer (e.g., transferring 3 NFTs). If not specified, it's assumed to be 1 NFT.\n4. **`recipient`**: an optional string representing the Ethereum wallet address where the NFT will be transferred.\n\nThe main purpose of `NFTTransferRequest` is to provide a standardized way to define an NFT transfer request, ensuring that the required information is consistently formatted for integration with the Magic Labs embedded wallet. This interface is likely used in conjunction with a transaction request to execute the actual NFT transfer.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/resources/types#chunk-22", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nResponseStatus\n\nCopy\n\n01\n\nexport\n\ntype\n\nNFTResponseStatus\n\n=\n\n'cancelled'\n\n|\n\n'processed'\n\n|\n\n'declined'\n\n|\n\n'expired'\n\n;\n\n01\n\nexport\n\ntype\n\nNFTResponseStatus\n\n=\n\n'cancelled'\n\n|\n\n'processed'\n\n|\n\n'declined'\n\n|\n\n'expired'\n\n;\n\n02\n\n02\n\n03\n\nexport\n\ntype\n\nNFTResponse\n\n=\n\n{\n\n03\n\nexport\n\ntype\n\nNFTResponse\n\n=\n\n{\n\n04\n\nstatus\n\n:\n\nNFTResponseStatus\n\n;\n\n04\n\nstatus\n\n:\n\nNFTResponseStatus\n\n;\n\n05\n\n}\n\n;\n\n05\n\n}\n\n;\n\n06\n\n06\n\n07\n\nexport\n\ntype\n\nNFTPurchaseResponse\n\n=\n\nNFTResponse\n\n&\n\n{\n\n07\n\nexport\n\ntype\n\nNFTPurchaseResponse\n\n=\n\nNFTResponse\n\n&\n\n{\n\n08\n\nerrorMessage\n\n?\n\n:\n\nstring\n\n;\n\n08\n\nerrorMessage\n\n?\n\n:\n\nstring\n\n;\n\n09\n\n}\n\n;\n\n09\n\n}\n\n;\n\n10\n\n10\n\n11\n\nexport\n\ntype\n\nNFTCheckoutResponse\n\n=\n\nNFTResponse\n\n;\n\n11\n\nexport\n\ntype\n\nNFTCheckoutResponse\n\n=\n\nNFTResponse\n\n;\n\n12\n\n12\n\n13\n\nexport\n\ntype\n\nNFTTransferResponse\n\n=\n\nNFTResponse\n\n;\n\n13\n\nexport\n\ntype\n\nNFTTransferResponse\n\n=\n\nNFTResponse\n\n;", "explanation": "**Responses and ResponseStatus in Magic Labs Embedded Wallet Documentation**\n\nThe Responses and ResponseStatus section in the Magic Labs embedded wallet documentation describes the various types of responses that the API may return after executing a transaction. These responses are categorized into four main types: NFTResponse, NFTPurchaseResponse, NFTCheckoutResponse, and NFTTransferResponse.\n\n**Main Purpose:**\n\nThe main purpose of this section is to provide a clear understanding of the possible outcomes of an API transaction, including their associated statuses and potential error messages. This information helps developers and users troubleshoot and understand the results of their transactions, ensuring seamless integration and smoother user experiences.\n\n**Key Components:**\n\n1. **ResponseStatus**: A type that defines the possible statuses of a transaction, including 'cancelled', 'processed', 'declined', and 'expired'.\n2. **NFTResponse**: A type that represents the base response structure for NFT transactions, containing a status property.\n3. **NFTPurchaseResponse**: An extension of NFTResponse, which adds an optional 'errorMessage' property for purchase transactions.\n4. **NFTCheckoutResponse**: An alias for NFTResponse, used for checkout transactions.\n5. **NFTTransferResponse**: An alias for NFTResponse, used for transfer transactions.\n\nBy understanding the Responses and ResponseStatus types, users can effectively handle and process transaction results, making the Magic Labs embedded wallet API more reliable and user-friendly.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/resources/types#chunk-23", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 Magic Types\n\nMagic Types", "explanation": "Based on the provided documentation URL https://magic.link/docs/api/resources/types, the '#Resources' section is about available resources within the Magic platform, specifically related to types.\n\nHere's a clear and concise explanation of what it is about and its main purpose:\n\n**Magic Types:**\nThe `Magic Types` resource provides information about the available type definitions within the Magic platform. This includes types for different entities such as users, addresses, and more.\n\n**Main Purpose:**\nThe main purpose of the `Magic Types` resource is to serve as a reference for developers working with the Magic API. It allows them to understand the available types, their definitions, and usage, making it easier to integrate Magic into their applications. This resource helps developers to ensure accurate and consistent data handling, data validation, and data serialization when working with Magic.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/resources/types#chunk-24", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nMagic wallet provides two options for wallets. Dedicated and Universal, each catering to distinct user preferences and application needs.\n\nYour access to certain SDK methods or blockchains will depend on the wallet type you choose from your developer dashboard.", "explanation": "This documentation section is about the types of wallets provided by Magic Labs, specifically their main differences and purposes. The two wallet types mentioned are:\n\n1. **Dedicated Wallet**: Designed for specific use cases or applications, catering to distinct user preferences.\n2. **Universal Wallet**: A general-purpose wallet that likely offers broader access to features and blockchain integrations.\n\nThe main purpose of this section is to inform developers about the two wallet types available, how they differ, and the implications of choosing one wallet type over the other, particularly in terms of access to specific SDK methods or blockchain integrations. This allows developers to make informed decisions based on their project requirements.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/wallets/wallet-types#chunk-1", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 Fully white-labeled authentication and wallet API\n\n\u2022 End users, upon signup, are scoped only to your application\n\n\u2022 Supports all authentication methods, including integration with existing identity providers across 25+ blockchains\n\n\u2022 Pro Bundle offers advanced options such as multi-factor authentication and custom email providers\n\nThis option is ideal for developers who desire granular control over the wallet's user and brand experience, want full control of the data collection from the end user, and need a wallet specifically tailored to their dApp. However, users looking to operate across multiple dApps would need to migrate their private keys to other wallets.", "explanation": "**White-labeled Wallet Overview**\n\nThe Magic Labs dedicated wallet is a fully customizable, white-labeled wallet solution designed specifically for developers. The main purpose of this wallet type is to provide a tailored user experience for a particular dApp (Decentralized Application).\n\n**Key Features**\n\n- **Fully White-labeled:** This means you can customize the wallet's branding, identity, and overall experience to match your dApp.\n- **End-user isolation:** Each user is scoped to your application, ensuring that there is no data overlap or contamination.\n- **Multi-chain compatibility:** Supports integration with over 25 blockchains and various existing identity providers.\n- **Advanced security options (Pro Bundle):** Offers multi-factor authentication and custom email providers for enhanced security.\n\n**Ideal for:**\n\n- Developers seeking granular control over the wallet's user experience and data collection.\n- dApps that require a wallet tailored to their specific needs.\n\n**Important Considerations:**\n\n- Users may need to restart the wallet migration process if they want to use their wallet across multiple dApps, due to limited support for private key migration.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/wallets/wallet-types#chunk-2", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nUniversal wallets will soon be merged with Dedicated Wallets into a single product line. Universal apps created before February 7, 2024 will work as expected with no change. See our blog post to learn more.\n\nblog post\n\n\u2022 Plug n' Play, all-in-one wallet widget with a pre-built co-branded UI\n\n\u2022 End users are part of the Magic network and can log in to any other Universal wallet application\n\n\u2022 Supports limited authentication methods: pre-configured Google One Tap and Email OTP login only on Ethereum, Polygon, Flow, Base, Arbitrum, and Optimism blockchains\n\n\u2022 Pro Bundle offers verified third-party wallet email collection and brand customization\n\nUniversal is an optimal choice for end users who favour convenience and ease of access to multiple dApps without managing different wallets. However, developers will need to explicitly request permission to obtain the user's email and have limited branding and theming options.", "explanation": "Here's a clear and concise explanation of the '#Universal Wallet: Embedded Plug & Play Widget' documentation section:\n\nThe Universal Wallet is an all-in-one wallet widget that provides a pre-built co-branded user interface for end-user convenience. Its main purpose is to connect users to the Magic network, allowing seamless login across multiple Universal wallet applications.\n\nKey features of the Universal Wallet include:\n\n1. Convenience: Users can easily access multiple decentralized applications (dApps) without managing different wallets.\n2. Limited authentication methods: Pre-configured Google One Tap and Email OTP login options are supported on specific blockchains (Ethereum, Polygon, Flow, Base, Arbitrum, and Optimism).\n3. Option for email collection and branding: The Pro Bundle allows verified third-party wallets to collect user emails and enables custom branding, but developers must explicitly request permission to access email data.\n\nDevelopers should consider the Universal Wallet when creating end-user experiences that prioritize ease of access and convenience.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/wallets/wallet-types#chunk-3", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nHedera is an EVM-compatible decentralized, open-source and proof-of-stake Layer1 blockchain. It utilizes the leaderless, asynchronous Byzantine Fault Tolerance (aBFT) hashgraph, offering fast transactions and low fees.\n\nHedera\n\nAs Hedera is EVM compatible, you can follow the Ethereum documentation to send your first transaction and utilize all other wallet features.\n\nEthereum", "explanation": "**Overview of Hedera:**\n\nHedera is a decentralized, open-source blockchain platform that supports the Ethereum Virtual Machine (EVM) compatibility. This allows developers to build and deploy smart contracts, decentralized applications (dApps), and other Ethereum-based projects on the Hedera network.\n\n**Key Benefits:**\n\n1. **EVM Compatibility:** Hedera allows developers to build on top of the Ethereum ecosystem, enabling seamless portability of smart contracts and dApps.\n2. **Leaderless, Asynchronous Byzantine Fault Tolerance (aBFT):** Hedera's hashgraph consensus mechanism offers fast transaction processing and low fees.\n3. **Decentralized and Open-Source:** Hedera is an open-source platform, promoting transparency and community involvement.\n\n**Main Purpose:**\n\nThe main purpose of Hedera is to provide a fast, secure, and scalable blockchain platform that supports the development of decentralized applications, with a focus on Ethereum compatibility and cost-effectiveness.\n\n**In Simple Terms:**\n\nHedera is a blockchain platform that lets you build on top of the Ethereum ecosystem, offering a fast and low-cost way to develop decentralized applications, with a strong focus on security and community involvement.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/evm/hedera#chunk-1", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nMagic interacts with the Hedera blockchain via Magic's extension NPM package @magic-ext/hedera. The Hedera extension also lets you interact with the blockchain using methods from Hedera SDK.\n\nHedera\n\n@magic-ext/hedera\n\n@magic-ext/hedera\n\nHedera SDK\n\nCopy\n\n01\n\nnpm\n\ninstall\n\n--save @magic-ext/hedera\n\n01\n\nnpm\n\ninstall\n\n--save @magic-ext/hedera", "explanation": "This documentation section is about the installation process for interacting with the Hedera blockchain using the Magic Labs embedded wallet for EVM (Ethereum Virtual Machine) chains.\n\n**Main Purpose:**\nThe main purpose of this section is to provide the steps for installing the necessary dependencies to start using the Magic Labs embedded wallet with the Hedera blockchain.\n\n**Key Points:**\n\n- The section mentions the @magic-ext/hedera NPM package, which is an extension for using Magic's embedded wallet with the Hedera blockchain.\n- It also mentions the Hedera SDK, which is a JavaScript library for interacting with the Hedera blockchain.\n- The section provides the necessary commands for installing the required dependencies:\n  - `npm install --save @magic-ext/hedera`: This command installs the @magic-ext/hedera package and saves it as a dependency in the project's package.json file.\n\n**In Summary:**\nThis section provides the necessary instructions for setting up the environment to interact with the Hedera blockchain using the Magic Labs embedded wallet, allowing developers to use Magic's extension package and the Hedera SDK for their projects.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/evm/hedera#chunk-2", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\nimport\n\n{\n\nHederaExtension\n\n}\n\nfrom\n\n'@magic-ext/hedera'\n\n;\n\n02\n\nimport\n\n{\n\nHederaExtension\n\n}\n\nfrom\n\n'@magic-ext/hedera'\n\n;\n\n03\n\n03\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n\"YOUR_API_KEY\"\n\n,\n\n{\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n\"YOUR_API_KEY\"\n\n,\n\n{\n\n05\n\nextensions\n\n:\n\n[\n\nnew\n\nHederaExtension\n\n(\n\n{\n\n05\n\nextensions\n\n:\n\n[\n\nnew\n\nHederaExtension\n\n(\n\n{\n\n06\n\nnetwork\n\n:\n\n'testnet'\n\n// 'mainnet' or 'testnet'\n\n06\n\nnetwork\n\n:\n\n'testnet'\n\n// 'mainnet' or 'testnet'\n\n07\n\n}\n\n)\n\n]\n\n07\n\n}\n\n)\n\n]\n\n08\n\n}\n\n)\n\n;\n\n08\n\n}\n\n)\n\n;", "explanation": "**Configure Hedera - ES Modules/TypeScript**\n\nThis section of the Magic Labs embedded wallet documentation outlines the steps to configure the Hedera blockchain using ES (ECMAScript) modules with TypeScript.\n\n**Main Purpose:**\n\nThe purpose of this section is to guide developers in integrating Hedera blockchain functionality into their applications using the Magic SDK in TypeScript. Specifically, it focuses on setting up the Hedera extension, which enables users to interact with the Hedera network.\n\n**Key Steps:**\n\n1. **Import the Magic SDK and Hedera Extension**:\n   - Import the Magic SDK using `import { Magic } from 'magic-sdk';`.\n   - Import the Hedera Extension using `import { HederaExtension } from '@magic-ext/hedera';`.\n\n2. **Create a Magic instance with Hedera Extension**:\n   - Create a new instance of the Magic object with your API key.\n   - Pass an options object with an `extensions` property, which is an array containing a HederaExtension instance.\n   - You can choose between the `mainnet` or `testnet` network by setting the `network` property in the HederaExtension constructor to either `'mainnet'` or `'testnet'`.\n\n**Example Code:**\n\nThe provided code snippet demonstrates the import statements and the creation of a Magic instance with a Hedera Extension.\n\nBy following these steps and configuring the Hedera blockchain in your application, developers can take advantage of the Magic Labs embedded wallet functionality, enabling users to easily create and manage wallets, send and receive funds, and interact with the Hedera network.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/evm/hedera#chunk-3", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n#\n\nNote that the Magic Hedera extension follows the method names and conventions by hedera-sdk-js. To send a standard Hedera blockchain transaction, you can call the inject the MagicWallet to hedera-sdk-js. More details please reference to example-hedera github repo.\n\nhedera-sdk-js\n\nexample-hedera\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\nimport\n\n{\n\nHederaExtension\n\n}\n\nfrom\n\n'@magic-ext/hedera'\n\n;\n\n02\n\nimport\n\n{\n\nHederaExtension\n\n}\n\nfrom\n\n'@magic-ext/hedera'\n\n;\n\n03\n\n03\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n\"YOUR_API_KEY\"\n\n,\n\n{\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n\"YOUR_API_KEY\"\n\n,\n\n{\n\n05\n\nextensions\n\n:\n\n[\n\nnew\n\nHederaExtension\n\n(\n\n{\n\n05\n\nextensions\n\n:\n\n[\n\nnew\n\nHederaExtension\n\n(\n\n{\n\n06\n\nnetwork\n\n:\n\n'testnet'\n\n// 'mainnet' or 'testnet'\n\n06\n\nnetwork\n\n:\n\n'testnet'\n\n// 'mainnet' or 'testnet'\n\n07\n\n}\n\n)\n\n]\n\n07\n\n}\n\n)\n\n]\n\n08\n\n}\n\n)\n\n;\n\n08\n\n}\n\n)\n\n;\n\n09\n\n09\n\n10\n\nconst\n\n{\n\npublicKeyDer\n\n}\n\n=\n\nawait\n\nmagic\n\n.\n\nhedera\n\n.\n\ngetPublicKey\n\n(\n\n)\n\n10\n\nconst\n\n{\n\npublicKeyDer\n\n}\n\n=\n\nawait\n\nmagic\n\n.\n\nhedera\n\n.\n\ngetPublicKey\n\n(\n\n)\n\n11\n\n11\n\n12\n\nconst\n\nmagicSign\n\n=\n\nmessage\n\n=>\n\nmagic\n\n.\n\nhedera\n\n.\n\nsign\n\n(\n\nmessage\n\n)\n\n;\n\n12\n\nconst\n\nmagicSign\n\n=\n\nmessage\n\n=>\n\nmagic\n\n.\n\nhedera\n\n.\n\nsign\n\n(\n\nmessage\n\n)\n\n;\n\n13\n\nconst\n\nmagicWallet\n\n=\n\nnew\n\nMagicWallet\n\n(\n\npublicAddress\n\n,\n\nnew\n\nMagicProvider\n\n(\n\n'testnet'\n\n)\n\n,\n\npublicKeyDer\n\n,\n\nmagicSign\n\n)\n\n13\n\nconst\n\nmagicWallet\n\n=\n\nnew\n\nMagicWallet\n\n(\n\npublicAddress\n\n,\n\nnew\n\nMagicProvider\n\n(\n\n'testnet'\n\n)\n\n,\n\npublicKeyDer\n\n,\n\nmagicSign\n\n)\n\n14\n\n14\n\n15\n\nlet\n\ntransaction\n\n=\n\nawait\n\nnew\n\nTransferTransaction\n\n(\n\n)\n\n15\n\nlet\n\ntransaction\n\n=\n\nawait\n\nnew\n\nTransferTransaction\n\n(\n\n)\n\n16\n\n.\n\nsetNodeAccountIds\n\n(\n\n[\n\nnew\n\nAccountId\n\n(\n\n3\n\n)\n\n]\n\n)\n\n16\n\n.\n\nsetNodeAccountIds\n\n(\n\n[\n\nnew\n\nAccountId\n\n(\n\n3\n\n)\n\n]\n\n)\n\n17\n\n.\n\naddHbarTransfer\n\n(\n\npublicAddress\n\n,\n\n-\n\n1\n\n*\n\nsendAmount\n\n)\n\n17\n\n.\n\naddHbarTransfer\n\n(\n\npublicAddress\n\n,\n\n-\n\n1\n\n*\n\nsendAmount\n\n)\n\n18\n\n.\n\naddHbarTransfer\n\n(\n\ndestinationAddress\n\n,\n\nsendAmount\n\n)\n\n18\n\n.\n\naddHbarTransfer\n\n(\n\ndestinationAddress\n\n,\n\nsendAmount\n\n)\n\n19\n\n.\n\nfreezeWithSigner\n\n(\n\nmagicWallet\n\n)\n\n;\n\n19\n\n.\n\nfreezeWithSigner\n\n(\n\nmagicWallet\n\n)\n\n;\n\n20\n\n20\n\n21\n\n21\n\n22\n\n22\n\n23\n\ntransaction\n\n=\n\nawait\n\ntransaction\n\n.\n\nsignWithSigner\n\n(\n\nmagicWallet\n\n)\n\n;\n\n23\n\ntransaction\n\n=\n\nawait\n\ntransaction\n\n.\n\nsignWithSigner\n\n(\n\nmagicWallet\n\n)\n\n;\n\n24\n\nconst\n\nresult\n\n=\n\nawait\n\ntransaction\n\n.\n\nexecuteWithSigner\n\n(\n\nmagicWallet\n\n)\n\n;\n\n24\n\nconst\n\nresult\n\n=\n\nawait\n\ntransaction\n\n.\n\nexecuteWithSigner\n\n(\n\nmagicWallet\n\n)\n\n;\n\n25\n\nconst\n\nreceipt\n\n=\n\nawait\n\nresult\n\n.\n\ngetReceiptWithSigner\n\n(\n\nmagicWallet\n\n)\n\n;\n\n25\n\nconst\n\nreceipt\n\n=\n\nawait\n\nresult\n\n.\n\ngetReceiptWithSigner\n\n(\n\nmagicWallet\n\n)\n\n;\n\n26\n\n26\n\n27\n\nconsole\n\n.\n\nlog\n\n(\n\nreceipt\n\n.\n\nstatus\n\n.\n\ntoString\n\n(\n\n)\n\n)\n\n;\n\n27\n\nconsole\n\n.\n\nlog\n\n(\n\nreceipt\n\n.\n\nstatus\n\n.\n\ntoString\n\n(\n\n)\n\n)\n\n;", "explanation": "**# Send Transaction - #Call Extension Method - ES Modules/TypeScript**\n\nThis documentation section explains how to send a standard Hedera blockchain transaction using the Magic Labs embedded wallet and Hedera SDK. Here's a concise overview of the main purpose and key components:\n\n**Main Purpose:**\n\nThe main purpose of this section is to provide an example of how to send a Hedera blockchain transaction using the Magic Labs embedded wallet and Hedera SDK in ES Modules/TypeScript.\n\n**Key Components:**\n\n1. **Importing Magic and Hedera Extension Libraries**: The example starts by importing the necessary libraries, including `Magic`, `HederaExtension`, and `MagicWallet`.\n2. **Initializing Magic and Hedera Extension**: The code initializes the Magic LABs wallet extension and sets up the Hedera network (testnet or mainnet).\n3. **Getting Public Key and Signature**: The example demonstrates how to get the public key and signature using the Magic LABs wallet extension.\n4. **Creating a Magic Wallet**: The code creates a new Magic wallet instance using the public address, public key, and signature.\n5. **Creating a Transfer Transaction**: The example shows how to create a new transfer transaction using the Hedera SDK.\n6. **Setting up Transaction Node Account IDs and Transfers**: The code sets up the transaction node account IDs and adds Hbar transfers to the transaction.\n7. **Freezing and Signing the Transaction**: The example demonstrates how to freeze and sign the transaction using the Magic wallet.\n8. **Executing the Transaction and Retrieving Receipt**: The code executes the transaction and retrieves the receipt using the Magic wallet.\n9. **Logging the Receipt Status**: Finally, the example logs the receipt status to the console.\n\n**In Summary:**\n\nThis documentation section provides a step-by-step example of how to send a Hedera blockchain transaction using the Magic Labs embedded wallet and Hedera SDK in ES Modules/TypeScript. It covers key components such as initializing Magic and Hedera Extension, getting public key and signature, creating a Magic wallet, creating a transfer transaction, freezing and signing the transaction, executing the transaction, and retrieving the receipt.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/evm/hedera#chunk-4", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 All Auth, User module methods for Dedicated Wallets\n\n\u2022 All EVM Provider functionality to respond to supported RPC methods\n\nAuth\n\nUser\n\nDedicated Wallets\n\nRPC methods\n\n*Some features are not yet compatible such as the Widget UI.\n\nNeed a feature or see a problem? File an issue on our github repo.\n\ngithub repo", "explanation": "**Compatibility Section Overview**\n\nThe Compatibility section in the Magic Labs documentation outlines the current support and compatibility of their embedded wallet with various features across different blockchains.\n\n**Main Purpose**\n\nThe primary purpose of this section is to inform users about the current status of compatibility for the following features:\n\n1. **Auth**: Authentication methods for dedicated wallets.\n2. **User**: User module methods for dedicated wallets.\n3. **Dedicated Wallets**: Functionality specific to dedicated wallets.\n4. **EVM Provider**: EVM (Ethereum Virtual Machine) provider functionality, specifically the supported RPC (Remote Procedure Call) methods.\n\n**Key Points**\n\n* The section explicitly states that the Widget UI is not yet compatible.\n* Users are directed to the Magic Labs GitHub repository to report any issues or feature requests.\n\n**Summary**\n\nThe Compatibility section provides essential information on the current state of Magic Labs' embedded wallet compatibility with various features and blockchain functions. This helps developers and users understand what is currently supported and what is still in development, ensuring they can plan their integration accordingly.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/evm/hedera#chunk-5", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 Documentation: https://docs.hedera.com/hedera/\n\n\u2022 Block Explorers: https://hedera.com/ecosystem/network-explorers/\n\n\u2022 Example\n\nhttps://docs.hedera.com/hedera/\n\nhttps://hedera.com/ecosystem/network-explorers/\n\nExample", "explanation": "**Resources & Tools Section: A Guide to Useful Links and Tools**\n\nThe '#Resources & Tools' section in the Magic Labs embedded wallet documentation is a collection of useful links and tools related to the Hedera blockchain network. Its main purpose is to provide easy access to essential resources that can aid developers and users working with the Hedera blockchain.\n\n**Key Components:**\n\n1. **Documentation**: The official Hedera documentation website provides in-depth information on the Hedera blockchain, including its architecture, protocols, and APIs.\n2. **Block Explorers**: A list of links to various block explorer tools that allow users to explore the Hedera blockchain, view transactions, and analyze network data.\n\n**Purpose**:\n\nThe '#Resources & Tools' section serves several purposes:\n\n* **Easy Access**: It provides convenient links to essential resources, reducing the time and effort required to find the necessary information.\n* **Quick Learning**: By providing official documentation and block explorer links, developers and users can quickly learn about the Hedera blockchain and its ecosystem.\n* **Troubleshooting**: The section can also serve as a resource for troubleshooting issues related to the Hedera blockchain, as users can easily access relevant documentation and explorer tools.\n\nOverall, the '#Resources & Tools' section is a valuable addition to the Magic Labs embedded wallet documentation, making it easier for users to navigate and work with the Hedera blockchain.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/evm/hedera#chunk-6", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nMagic interacts with the Aptos blockchain via Magic's extension NPM package @magic-ext/aptos (beta version 0.5.0). Additionally, the Aptos extension lets you interact with the blockchain using methods from Aptos' Typescript SDK and/or @aptos-labs/wallet-adapter-core.\n\nAptos\n\n@magic-ext/aptos\n\n@magic-ext/aptos\n\nAptos' Typescript SDK\n\n@aptos-labs/wallet-adapter-core\n\nThis extension requires @magic-ext/aptos version ^0.5.0 , and magic-sdk version ^17.1.6 (latest preferred)\n\nTo get started, install the following dependencies for your project:\n\nCopy\n\n01\n\nnpm\n\ninstall\n\n@aptos-labs/wallet-adapter-core @magic-ext/aptos magic-sdk\n\n01\n\nnpm\n\ninstall\n\n@aptos-labs/wallet-adapter-core @magic-ext/aptos magic-sdk", "explanation": "**Installation Overview for Aptos Blockchain with Magic Labs**\n\nThis documentation section is about installing the required packages to interact with the Aptos blockchain using Magic Labs. Its main purpose is to guide users through the process of setting up their project environment to work with Aptos and Magic.\n\n**Key Points:**\n\n1. **Required Packages:** The section lists the following dependencies that must be installed:\n\t* `@magic-ext/aptos` (beta version 0.5.0) extension for Magic Labs.\n\t* `@aptos-labs/wallet-adapter-core` for interacting with the Aptos blockchain.\n\t* `magic-sdk` (version ^17.1.6 or later) for Magic Labs functionality.\n2. **Compatibility:** The section specifies that `@magic-ext/aptos` requires version ^0.5.0 and `magic-sdk` version ^17.1.6 (or later).\n3. **Installation Command:** Provides the necessary `npm` commands to install the dependencies:\n\t* `npm install @aptos-labs/wallet-adapter-core @magic-ext/aptos magic-sdk` for the first set of dependencies.\n\t* Although it seems there is a replicate command the second command is not necessary to be fully implemented to the actual aptos blockchain instructions.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/other/aptos#chunk-1", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nThe Magic class is the entry-point to the Magic SDK. It must be instantiated with a Magic publishable key.\n\nYou can then use the SDK object to initialize an AptosWallet object that meets the Aptos Wallet standard. You can use any supported login method supported by Magic SDK in the \"connect\" function.\n\nAptos Wallet standard\n\nsupported login method\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\nimport\n\n{\n\nAptosExtension\n\n}\n\nfrom\n\n'@magic-ext/aptos'\n\n;\n\n02\n\nimport\n\n{\n\nAptosExtension\n\n}\n\nfrom\n\n'@magic-ext/aptos'\n\n;\n\n03\n\n03\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_API_KEY'\n\n,\n\n{\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_API_KEY'\n\n,\n\n{\n\n05\n\nextensions\n\n:\n\n[\n\n05\n\nextensions\n\n:\n\n[\n\n06\n\nnew\n\nAptosExtension\n\n(\n\n{\n\n06\n\nnew\n\nAptosExtension\n\n(\n\n{\n\n07\n\nnodeUrl\n\n:\n\n'https://fullnode.testnet.aptoslabs.com'\n\n07\n\nnodeUrl\n\n:\n\n'https://fullnode.testnet.aptoslabs.com'\n\n08\n\n}\n\n)\n\n,\n\n08\n\n}\n\n)\n\n,\n\n09\n\n]\n\n,\n\n09\n\n]\n\n,\n\n10\n\n}\n\n)\n\n;\n\n10\n\n}\n\n)\n\n;\n\n11\n\n11\n\n12\n\nconst\n\nmagicAptosWallet\n\n=\n\nnew\n\nMagicAptosWallet\n\n(\n\nmagic\n\n,\n\n{\n\n12\n\nconst\n\nmagicAptosWallet\n\n=\n\nnew\n\nMagicAptosWallet\n\n(\n\nmagic\n\n,\n\n{\n\n13\n\nconnect\n\n:\n\nasync\n\n(\n\n)\n\n=>\n\n{\n\n13\n\nconnect\n\n:\n\nasync\n\n(\n\n)\n\n=>\n\n{\n\n14\n\nawait\n\nmagic\n\n.\n\nauth\n\n.\n\nloginWithMagicLink\n\n(\n\n{\n\nemail\n\n}\n\n)\n\n;\n\n14\n\nawait\n\nmagic\n\n.\n\nauth\n\n.\n\nloginWithMagicLink\n\n(\n\n{\n\nemail\n\n}\n\n)\n\n;\n\n15\n\nconst\n\naccountInfo\n\n=\n\nawait\n\nmagic\n\n.\n\naptos\n\n.\n\ngetAccountInfo\n\n(\n\n)\n\n;\n\n15\n\nconst\n\naccountInfo\n\n=\n\nawait\n\nmagic\n\n.\n\naptos\n\n.\n\ngetAccountInfo\n\n(\n\n)\n\n;\n\n16\n\nreturn\n\naccountInfo\n\n;\n\n16\n\nreturn\n\naccountInfo\n\n;\n\n17\n\n}\n\n17\n\n}\n\n18\n\n}\n\n)\n\n;\n\n18\n\n}\n\n)\n\n;\n\nThe nodeUrl you specify will determine whether you are using the mainnet or testnet for Aptos.", "explanation": "**Initialization**\n\nThe 'Initialization' section of the Magic Labs embedded wallet documentation explains the process of setting up and connecting to the Magic SDK on the Aptos blockchain. This is the first step required to use the Magic wallet.\n\n**Main Purpose**\n\nThe main purpose of the initialization process is to create an instance of the Magic class, which is the entry point to the Magic SDK, and then use it to initialize an AptosWallet object that meets the Aptos Wallet standard.\n\n**Key Steps:**\n\n1. Import the required modules, which include the Magic class and the AptosExtension.\n2. Instantiate the Magic class with a Magic publishable key.\n3. Create an AptosExtension object, specifying the node URL which determines whether to use the mainnet or testnet for Aptos.\n4. Create an instance of the MagicAptosWallet class, passing in the Magic instance and an options object with a connect function that will be used to authenticate the user and retrieve their account information.\n\n**Example Code**\n\nThe provided example code shows how to initialize the Magic SDK and create an AptosWallet object:\n\n```javascript\nconst magic = new Magic('YOUR_API_KEY', {\n  extensions: [new AptosExtension({\n    nodeUrl: 'https://fullnode.testnet.aptoslabs.com'\n  })],\n});\n\nconst magicAptosWallet = new MagicAptosWallet(magic, {\n  connect: async () => {\n    await magic.auth.loginWithMagicLink({ email });\n    const accountInfo = await magic.aptos.getAccountInfo();\n    return accountInfo;\n  },\n});\n```", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/other/aptos#chunk-2", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n#\n\n#\n\nThe first step will be getting the logged in user's Aptos account address. Follow any of the login guides on the Authentication tab to get started. You can check if a user is logged in with the following code:\n\nAuthentication tab\n\nCopy\n\n01\n\nconst\n\nisLoggedIn\n\n=\n\nawait\n\nmagic\n\n.\n\nuser\n\n.\n\nisLoggedIn\n\n(\n\n)\n\n;\n\n01\n\nconst\n\nisLoggedIn\n\n=\n\nawait\n\nmagic\n\n.\n\nuser\n\n.\n\nisLoggedIn\n\n(\n\n)\n\n;\n\nOnce the user is logged in, you can get their Aptos account address by running:\n\nCopy\n\n01\n\nconst\n\n{\n\naddress\n\n}\n\n=\n\nawait\n\nmagic\n\n.\n\naptos\n\n.\n\ngetAccountInfo\n\n(\n\n)\n\n;\n\n01\n\nconst\n\n{\n\naddress\n\n}\n\n=\n\nawait\n\nmagic\n\n.\n\naptos\n\n.\n\ngetAccountInfo\n\n(\n\n)\n\n;\n\nNote: this does not return an actual AptosAccount object, only the address. See the note below for more detail.\n\nthe note below\n\nAlternatively, you can use MagicAptosWallet's account() method:\n\naccount()\n\nCopy\n\n01\n\nconst\n\n{\n\naddress\n\n}\n\n=\n\nawait\n\nmagicAptosAccount\n\n.\n\naccount\n\n(\n\n)\n\n;\n\n01\n\nconst\n\n{\n\naddress\n\n}\n\n=\n\nawait\n\nmagicAptosAccount\n\n.\n\naccount\n\n(\n\n)\n\n;", "explanation": "**Getting the Aptos Account**\n\nThis documentation section is about retrieving the Aptos account address associated with a logged-in user. The main purpose is to obtain the Aptos account address, which is necessary for sending transactions.\n\n**Steps to Get the Aptos Account Address**\n\n1. Ensure the user is logged in using the provided login guides in the Authentication tab.\n2. Check if the user is logged in using the `magic.user.isLoggedIn()` method.\n3. Once logged in, use one of the following methods to retrieve the Aptos account address:\n   - `magic.aptos.getAccountInfo()`, which returns only the address, not the full `AptosAccount` object.\n   - `magicAptosAccount.account()`, which is a more direct method that also returns the account address.\n\n**Key Methods and Details**\n\n- `magic.user.isLoggedIn()`: Checks if the user is logged in.\n- `magic.aptos.getAccountInfo()`: Returns the Aptos account address associated with the logged-in user.\n- `magicAptosAccount.account()`: Returns the Aptos account address associated with the logged-in user.\n\nThese methods are essential for utilizing the Aptos blockchain with the Magic Labs embedded wallet, enabling users to send transactions and interact with the Aptos network.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/other/aptos#chunk-3", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nNext up for our testing, you'll need to fund the account using the Faucet. This code snippet is taken from the Aptos Tutorial\n\nAptos Tutorial\n\nCopy\n\n01\n\nconst\n\nDEVNET_NODE_URL\n\n=\n\n'https://fullnode.testnet.aptoslabs.com'\n\n;\n\n01\n\nconst\n\nDEVNET_NODE_URL\n\n=\n\n'https://fullnode.testnet.aptoslabs.com'\n\n;\n\n02\n\nconst\n\nDEVNET_FAUCET_URL\n\n=\n\n'https://faucet.testnet.aptoslabs.com'\n\n;\n\n02\n\nconst\n\nDEVNET_FAUCET_URL\n\n=\n\n'https://faucet.testnet.aptoslabs.com'\n\n;\n\n03\n\nconst\n\nfaucetClient\n\n=\n\nnew\n\nFaucetClient\n\n(\n\nDEVNET_NODE_URL\n\n,\n\nDEVNET_FAUCET_URL\n\n)\n\n;\n\n03\n\nconst\n\nfaucetClient\n\n=\n\nnew\n\nFaucetClient\n\n(\n\nDEVNET_NODE_URL\n\n,\n\nDEVNET_FAUCET_URL\n\n)\n\n;\n\n04\n\n\u2060\n\nawait\n\nfaucetClient\n\n.\n\nfundAccount\n\n(\n\naddress\n\n,\n\n100_000_000\n\n)\n\n;\n\n04\n\n\u2060\n\nawait\n\nfaucetClient\n\n.\n\nfundAccount\n\n(\n\naddress\n\n,\n\n100_000_000\n\n)\n\n;", "explanation": "**Funding an Account with the Faucet: A Quick Overview**\n\nThe documentation section titled '#Funding an Account with the Faucet' is a guide that explains how to fund an account with testnet cryptocurrency using a faucet on the Aptos blockchain. \n\n**Main Purpose:**\nThe main purpose of this section is to provide a step-by-step code snippet to transfer 100,000 APT tokens from the faucet to your testing account on the Aptos testnet.\n\n**Key Points:**\n\n1. **Faucet**: A faucet is a service that provides a small amount of cryptocurrency for testing purposes.\n2. **Funding**: Funding involves transferring cryptocurrency to your account.\n3. **Aptos Testnet**: This guide is specific to the Aptos testnet, where developers can test and experiment with the Aptos blockchain.\n\n**Code Explanation:**\n\nThe code snippet creates a new instance of the `FaucetClient` and uses the `fundAccount` method to transfer 100,000 APT tokens to the specified `address`.\n\nTo use this code, you need to:\n\n1. Replace `address` with your actual account address on the Aptos testnet.\n2. Make sure you have the necessary dependencies and libraries installed.\n3. Run the code to fund your account with the faucet.\n\nBy following these steps, developers can quickly fund their accounts and start testing their applications on the Aptos blockchain.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/other/aptos#chunk-4", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nNote that the Magic Aptos extension follows the method names and conventions of Aptos' Typescript SDK.\n\nAptos' Typescript SDK\n\nIf you are using MagicAptosWallet, you can skip the rest of this section and build your application using the Aptos Wallet Standard. You can also find example apps by Aptos here (MagicAptosWallet is not included in this useWallet, however, due to the flexibility Magic SDK provides - and the complexity of setting it up does not neatly fit into this example's React hook).\n\nAptos Wallet Standard\n\nhere\n\nThe Beta version of the Magic Aptos Extension only supports Raw transactions. Future versions will include full support for the following: \u2060 \u2060 - CoinClient \u2060 - TokenClient \u2060 - AptosAccount\n\nIn the meantime, you can find the equivalent RawTransactions in the Aptos source code for any of the object methods above. See the bottom of this page for a detailed example.\n\nCopy\n\n01\n\n// Set the input variables\n\n01\n\n// Set the input variables\n\n02\n\nconst\n\nMAGIC_WALLET_ADDRESS\n\n=\n\n'0x906fd65afe31b7237cd4d7c4073d8bf76c61b6a24ec64dd26f0c16de5c2444d5'\n\n02\n\nconst\n\nMAGIC_WALLET_ADDRESS\n\n=\n\n'0x906fd65afe31b7237cd4d7c4073d8bf76c61b6a24ec64dd26f0c16de5c2444d5'\n\n03\n\nconst\n\nSAMPLE_RAW_TRANSACTION\n\n=\n\n{\n\n03\n\nconst\n\nSAMPLE_RAW_TRANSACTION\n\n=\n\n{\n\n04\n\nfunction\n\n:\n\n\"0x1::coin::transfer\"\n\n,\n\n04\n\nfunction\n\n:\n\n\"0x1::coin::transfer\"\n\n,\n\n05\n\ntype_arguments\n\n:\n\n[\n\n\"0x1::aptos_coin::AptosCoin\"\n\n]\n\n,\n\n05\n\ntype_arguments\n\n:\n\n[\n\n\"0x1::aptos_coin::AptosCoin\"\n\n]\n\n,\n\n06\n\narguments\n\n:\n\n[\n\nMAGIC_WALLET_ADDRESS\n\n,\n\n1000\n\n]\n\n06\n\narguments\n\n:\n\n[\n\nMAGIC_WALLET_ADDRESS\n\n,\n\n1000\n\n]\n\n07\n\n}\n\n07\n\n}\n\n08\n\n08\n\n09\n\n\u2060\n\n09\n\n\u2060\n\n10\n\n// Initialize the AptosClient and transaction\n\n10\n\n// Initialize the AptosClient and transaction\n\n11\n\nconst\n\nclient\n\n=\n\nnew\n\nAptosClient\n\n(\n\nDEVNET_NODE_URL\n\n)\n\n;\n\n11\n\nconst\n\nclient\n\n=\n\nnew\n\nAptosClient\n\n(\n\nDEVNET_NODE_URL\n\n)\n\n;\n\n12\n\nconst\n\nrawTransaction\n\n=\n\nawait\n\nclient\n\n.\n\ngenerateTransaction\n\n(\n\naddress\n\n,\n\nSAMPLE_RAW_TRANSACTION\n\n)\n\n12\n\nconst\n\nrawTransaction\n\n=\n\nawait\n\nclient\n\n.\n\ngenerateTransaction\n\n(\n\naddress\n\n,\n\nSAMPLE_RAW_TRANSACTION\n\n)\n\n13\n\n13\n\n14\n\n// Sign the transaction using Magic SDK, then send\n\n14\n\n// Sign the transaction using Magic SDK, then send\n\n15\n\nconst\n\nsignedTransaction\n\n=\n\nawait\n\nmagic\n\n.\n\naptos\n\n.\n\nsignTransaction\n\n(\n\nrawTransaction\n\n)\n\n15\n\nconst\n\nsignedTransaction\n\n=\n\nawait\n\nmagic\n\n.\n\naptos\n\n.\n\nsignTransaction\n\n(\n\nrawTransaction\n\n)\n\n16\n\n\u2060\n\nconst\n\ntransaction\n\n=\n\nawait\n\nclient\n\n.\n\nsubmitTransaction\n\n(\n\nsignedTransaction\n\n)\n\n16\n\n\u2060\n\nconst\n\ntransaction\n\n=\n\nawait\n\nclient\n\n.\n\nsubmitTransaction\n\n(\n\nsignedTransaction\n\n)\n\n17\n\nconst\n\nresult\n\n=\n\nawait\n\nclient\n\n.\n\nwaitForTransactionWithResult\n\n(\n\ntransaction\n\n.\n\nhash\n\n,\n\n{\n\n17\n\nconst\n\nresult\n\n=\n\nawait\n\nclient\n\n.\n\nwaitForTransactionWithResult\n\n(\n\ntransaction\n\n.\n\nhash\n\n,\n\n{\n\n18\n\ncheckSuccess\n\n:\n\ntrue\n\n18\n\ncheckSuccess\n\n:\n\ntrue\n\n19\n\n}\n\n)\n\n19\n\n}\n\n)", "explanation": "**#Sign and Send Transaction**\n\nThis section of the Magic Labs embedded wallet documentation explains the process of creating, signing, and sending a transaction on the Aptos blockchain. The main purpose of this section is to provide a step-by-step guide on how to build an application using the Magic Aptos extension.\n\n**Process Overview**\n\nThe process involves the following steps:\n\n1. **Setting input variables**: Define the wallet address and raw transaction details, such as the function name, type arguments, and arguments.\n2. **Initializing the AptosClient and transaction**: Create a new AptosClient instance and use it to generate a raw transaction.\n3. **Signing the transaction**: Use the Magic SDK to sign the raw transaction.\n4. **Sending the transaction**: Submit the signed transaction to the Aptos blockchain using the AptosClient instance.\n\n**Key Takeaways**\n\n* The Magic Aptos extension only supports Raw transactions for now.\n* The process involves creating a raw transaction, signing it using the Magic SDK, and then submitting it to the Aptos blockchain.\n* The `aptos` object in the Magic SDK is used to interact with the Aptos blockchain.\n\n**Example Code**\n\nThe provided example code demonstrates the process of signing and sending a transaction using the Magic SDK and AptosClient:\n```javascript\nconst address = '0x906fd65afe31b7237cd4d7c4073d8bf76c61b6a24ec64dd26f0c16de5c2444d5';\nconst SAMPLE_RAW_TRANSACTION = {\n  function: '0x1::coin::transfer',\n  type_arguments: ['0x1::aptos_coin::AptosCoin'],\n  arguments: [MAGIC_WALLET_ADDRESS, 1000],\n};\n\nconst client = new AptosClient(DEVNET_NODE_URL);\nconst rawTransaction = await client.generateTransaction(address, SAMPLE_RAW_TRANSACTION);\nconst signedTransaction = await magic.aptos.signTransaction(rawTransaction);\nconst transaction = await client.submitTransaction(signedTransaction);\nconst result = await client.waitForTransactionWithResult(transaction.hash, { checkSuccess: true });\n```", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/other/aptos#chunk-5", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\nconst\n\naddress\n\n=\n\nawait\n\nmagic\n\n.\n\naptos\n\n.\n\ngetAccountInfo\n\n(\n\n)\n\n;\n\n01\n\nconst\n\naddress\n\n=\n\nawait\n\nmagic\n\n.\n\naptos\n\n.\n\ngetAccountInfo\n\n(\n\n)\n\n;\n\n02\n\nconst\n\nclient\n\n=\n\nnew\n\nAptosClient\n\n(\n\nDEVNET_NODE_URL\n\n)\n\n;\n\n02\n\nconst\n\nclient\n\n=\n\nnew\n\nAptosClient\n\n(\n\nDEVNET_NODE_URL\n\n)\n\n;\n\n03\n\nconst\n\ncoinClient\n\n=\n\nnew\n\nCoinClient\n\n(\n\nclient\n\n)\n\n;\n\n03\n\nconst\n\ncoinClient\n\n=\n\nnew\n\nCoinClient\n\n(\n\nclient\n\n)\n\n;\n\n04\n\n04\n\n05\n\nconst\n\nbalance\n\n=\n\nawait\n\ncoinClient\n\n.\n\ncheckBalance\n\n(\n\naddress\n\n)\n\n;\n\n05\n\nconst\n\nbalance\n\n=\n\nawait\n\ncoinClient\n\n.\n\ncheckBalance\n\n(\n\naddress\n\n)\n\n;\n\n06\n\nconsole\n\n.\n\nlog\n\n(\n\nbalance\n\n)\n\n06\n\nconsole\n\n.\n\nlog\n\n(\n\nbalance\n\n)", "explanation": "**Get Balance**\n\nThe `Get Balance` documentation section from Magic Labs' embedded wallet for Aptos blockchain explains how to retrieve a user's current balance on the Aptos network. This functionality allows developers to monitor and display a user's available balance in their mobile or web application.\n\n**Key Steps:**\n\n1. **Initialize Magic's Aptos Client**: Establish a connection to the Aptos blockchain using the `DEVNET_NODE_URL`.\n2. **Obtain the User's Account Information**: Utilize the `getAccountInfo` method from Magic's Aptos client to retrieve the user's wallet address.\n3. **Create a Coin Client Instance**: Initialize a `CoinClient` instance to perform transactions and balance inquiries.\n4. **Check the User's Balance**: Make an API call to the `checkBalance` method of the Coin Client with the user's wallet address to retrieve their current balance.\n5. **Log the Balance to the Console**: Display the user's balance in the console for debugging purposes.\n\n**Main Purpose:**\n\nThe `Get Balance` section is designed to help developers integrate the Magic Labs embedded wallet with their Aptos blockchain-based applications. This allows users to easily view and keep track of their available balance, enabling seamless transactions and payments within the application.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/other/aptos#chunk-6", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 Aptos Wallet Adapter\n\n\u2022 Magic Aptos Example\n\nAptos Wallet Adapter\n\nMagic Aptos Example", "explanation": "The '#Resources' section in the provided Magic Labs embedded wallet documentation appears to be a collection of helpful links and examples that aid developers in setting up and integrating the Magic Labs wallet on the Aptos blockchain.\n\nHere's a breakdown of its main points:\n\n1. **Aptos Wallet Adapter**: This link likely contains code or documentation on setting up a custom wallet adapter for the Aptos blockchain. A wallet adapter is a piece of software that connects the main Magic Labs wallet to the Aptos blockchain, enabling secure and seamless transactions.\n\n2. **Magic Aptos Example**: This link probably provides an example code or project that demonstrates how to implement the Magic Labs wallet on the Aptos blockchain. It's meant to serve as a reference or starting point for developers, helping them understand how to integrate the Magic Labs wallet with the Aptos blockchain and create their own wallet applications.\n\nIn summary, the '#Resources' section is designed to provide helpful links and examples that support developers in configuring and implementing the Magic Labs wallet on the Aptos blockchain, making it easier for them to create secure and user-friendly wallet applications.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/other/aptos#chunk-7", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nA rate limit is a measure put in place that enforces a maximum number of API requests per minute to Magic\u2019s services. They exist to prevent bad actors from misusing the endpoints while also helping Magic manage infrastructure load. The default rate limit for each application is 500 requests per minute (excludes contracts with custom rate limits). While the default rate limit of 500 requests per minute should capture most scenarios, it\u2019s possible for applications to reach this limit through normal traffic growth or through traffic surges from an NFT drop.\n\nIf your application needs a higher limit, please contact sales for a custom rate limit.\n\ncontact sales", "explanation": "Here's a clear and concise explanation of the 'Rate Limit' documentation section:\n\n**What is an API rate limit?**\n\nAn API rate limit is a restriction that limits the number of API requests an application can make to Magic's services within a specified time frame (in this case, per minute).\n\n**Main purpose:**\n\nThe main purpose of an API rate limit is to:\n\n1. **Prevent abuse**: Limit the number of requests from bad actors who might try to misuse Magic's endpoints.\n2. **Manage infrastructure load**: Prevent traffic spikes that could overwhelm Magic's infrastructure.\n\n**Default limit:**\n\nThe default rate limit is 500 requests per minute, unless a custom rate limit is negotiated with sales. If your application needs to exceed this limit, you should contact Magic's sales team for assistance.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/resources/rate-limit#chunk-1", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nIf your application\u2019s rate limit is exceeded, then each subsequent API request past the limit will return an error code of 429. Please note that the number of API requests made per login can vary depending on which login providers are configured in the admin dashboard.\n\n429", "explanation": "Based on the provided documentation section from the Magic Labs embedded wallet API resources on rate limit, I'll break it down in simple terms:\n\n**What happens if my application surpasses the rate limit?**\n\nWhen your application exceeds the allowed rate limit for API requests, Magic Labs will return a specific error code in response to further requests. \n\n**Main Purpose:**\n\nThe main purpose of this section is to inform users about what happens when their application violates the rate limit. It's essential for developers to understand this to implement rate limiting on their end if needed and ensure their application doesn't exceed the allowed limits, thus preventing errors and associated downtime. \n\n**Key Takeaway:**\n\nIf your application's rate limit is exceeded, you will get a 429 error code. The rate limit varies depending on the configured login providers, so it's crucial to check your admin dashboard for specific information.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/resources/rate-limit#chunk-2", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nGive advance notice to Magic of high-traffic events (e.g. NFT drops, major product launches) so we can help evaluate your rate limit usage and support needs. By informing our team, we can help make preparations to ensure your launch goes smoothly. Here are some services we offer: launch checklists, VIP support, drop support, consultations, and API rate limit upgrades.\n\nWe\u2019ve found that 2-4 weeks notice works best to ensure preparation time for both parties.", "explanation": "The '#Notify Magic about high-volume events' documentation section is about providing advance notice to Magic Labs about upcoming high-traffic events, such as:\n\n- NFT drops (non-fungible token releases)\n- Major product launches\n\nThe main purpose of this section is to allow Magic Labs to:\n\n1. Evaluate rate limit usage and support needs\n2. Prepare for potential increased API traffic\n3. Offer additional support services, including:\n    - Launch checklists\n    - VIP support\n    - Drop support\n    - Consultations\n    - API rate limit upgrades\n\nBy giving Magic Labs 2-4 weeks' notice, the event organizer can ensure a smooth launch and increase the chances of a successful integration with the Magic Labs API.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/resources/rate-limit#chunk-3", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nSoneium is an Ethereum layer-2 blockchain developed by Sony Group Corporation and Startale, designed to create an accessible, developer-friendly platform that empowers creators and communities to explore blockchain's potential in entertainment, gaming, finance, and beyond. Users can effortlessly create wallets and interact with Soneium using the Magic SDK.\n\nSoneium\n\nAs Soneium is EVM compatible, you can follow the Ethereum documentation to send your first transaction and utilize all other features.\n\nEthereum", "explanation": "Here's a clear and concise explanation of what Soneium is and its main purpose:\n\n**What is Soneium?**\n\nSoneium is an Ethereum layer-2 blockchain developed by Sony Group Corporation and Startale. It's a platform designed to make blockchain technology more accessible and user-friendly for creators and communities. \n\n**Main Purpose:**\n- The main purpose of Soneium is to provide a blockchain platform that empowers users to explore cutting-edge technologies like entertainment, gaming, and finance.\n- Soneium offers users the ability to create wallets and interact with the platform in a seamless manner using the Magic SDK.\n\n**EVM Compatibility:**\n- As Soneium is EVM (Ethereum Virtual Machine) compatible, users can easily use Ethereum's documentation to send their first transactions, as well as leverage other features that Ethereum supports.\n\n**Key Benefits:**\n- Simplified access to blockchain technology for creators and communities\n- Empowers users to explore various blockchain applications in entertainment, gaming, finance, and more\n- Easy wallet creation and interaction with the platform using the Magic SDK.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/evm/soneium#chunk-1", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\n// Get your Startale API key here - https://portal.scs.startale.com/\n\n01\n\n// Get your Startale API key here - https://portal.scs.startale.com/\n\n02\n\nconst\n\nSoneiumOptions\n\n=\n\n{\n\n02\n\nconst\n\nSoneiumOptions\n\n=\n\n{\n\n03\n\nrpcUrl\n\n:\n\n'https://soneium-minato.rpc.scs.startale.com?apikey=your-api-key'\n\n,\n\n// Soneium testnet RPC URL\n\n03\n\nrpcUrl\n\n:\n\n'https://soneium-minato.rpc.scs.startale.com?apikey=your-api-key'\n\n,\n\n// Soneium testnet RPC URL\n\n04\n\nchainId\n\n:\n\n1946\n\n,\n\n// Soneium chain id\n\n04\n\nchainId\n\n:\n\n1946\n\n,\n\n// Soneium chain id\n\n05\n\n}\n\n;\n\n05\n\n}\n\n;\n\n06\n\n06\n\n07\n\n// Setting network to point to Soneium\n\n07\n\n// Setting network to point to Soneium\n\n08\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_PUBLISHABLE_API_KEY'\n\n,\n\n{\n\nnetwork\n\n:\n\nSoneiumOptions\n\n}\n\n)\n\n;\n\n08\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_PUBLISHABLE_API_KEY'\n\n,\n\n{\n\nnetwork\n\n:\n\nSoneiumOptions\n\n}\n\n)\n\n;\n\n\u2022 All Auth, User and most Wallet module methods* for Dedicated Wallets\n\n\u2022 All EVM Provider functionality to respond to supported RPC methods\n\nAuth\n\nUser\n\nWallet\n\nDedicated Wallets\n\nRPC methods\n\n*Some features are not yet compatible such as NFT Viewer and Fiat On-ramps.\n\nNeed a feature or see a problem? File an issue on our github repo.\n\ngithub repo", "explanation": "**Configure Soneium Section Overview**\n\nThe `Configure Soneium` section of the Magic Labs documentation provides instructions on how to set up and configure the Magic wallet to interact with the Soneium blockchain. Soneium is an EVM (Ethereum Virtual Machine) compatible blockchain, and this configuration is necessary to perform various wallet operations, such as authentication, user management, and RPC (Remote Procedure Call) method handling.\n\n**Main Purpose**\n\nThe main purpose of this section is to provide developers with the necessary information to integrate the Magic wallet with the Soneium blockchain. This involves setting up a network connection to the Soneium blockchain and enabling various wallet features, including:\n\n1. **Auth**: Authentication methods for dedicated wallets\n2. **User**: User management features\n3. **Wallet**: General wallet functionality\n4. **Dedicated Wallets**: Features specific to dedicated wallets\n5. **RPC methods**: Handling of RPC methods supported by the EVM provider\n\n**Key Configuration Settings**\n\nTo configure the Magic wallet for Soneium, you need to:\n\n1. Obtain a Startale API key from the Startale Portal.\n2. Define the `SoneiumOptions` object, which includes:\n\t* `rpcUrl`: The Soneium RPC URL, including your API key.\n\t* `chainId`: The Soneium chain ID (1946).\n3. Create a new instance of the Magic class, passing in your publishable API key and the `SoneiumOptions` object.\n\n**Note**\n\nSome features, such as the NFT Viewer and Fiat On-ramps, are not yet compatible with the Soneium blockchain. If you encounter any issues or need additional features, you can file an issue on the Magic Labs GitHub repository.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/evm/soneium#chunk-2", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 Startale Cloud Services: https://startale.com/en/scs\n\n\u2022 Documentation: https://docs.soneium.org/docs/\n\n\u2022 Block Explorer: https://explorer-testnet.soneium.org/\n\n\u2022 Testnet Faucet: https://docs.soneium.org/docs/builders/tools/faucets\n\nhttps://startale.com/en/scs\n\nhttps://docs.soneium.org/docs/\n\nhttps://explorer-testnet.soneium.org/\n\nhttps://docs.soneium.org/docs/builders/tools/faucets", "explanation": "**Introduction to Resources & Tools**\n\nThe '#Resources & Tools' section is a critical part of the Magic Labs embedded wallet documentation, providing essential information and links to external tools and services that are necessary for understanding and working with the Soneium blockchain.\n\n**Purpose**\n\nThe main purpose of this section is to offer a centralized collection of resources and tools that developers, testers, and users can utilize when working with the Soneium EVM chain. These resources streamline the development process by providing quick access to necessary documentation, testing environments, and utility tools.\n\n**Main Components**\n\n1. **Startale Cloud Services**: A cloud-based service that offers a range of blockchain development tools and resources.\n2. **Documentation**: The official Soneium documentation website, containing detailed guides, API references, and technical documentation.\n3. **Block Explorer**: A testnet block explorer for exploring and inspecting transactions, addresses, and other blockchain data on the Soneium testnet.\n4. **Testnet Faucet**: A tool for obtaining free testnet tokens, allowing developers to test their applications and software.\n\n**Benefits**\n\nThe '#Resources & Tools' section provides developers with:\n\n* Quick access to essential resources and tools\n* Easy testing and debugging of blockchain applications\n* Detailed documentation and guides for successful integration\n* Means to obtain free testnet tokens for development and testing purposes\n\nBy providing these resources and tools in one centralized location, Magic Labs aims to simplify the development process and promote efficiency in building blockchain applications on the Soneium EVM chain.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/evm/soneium#chunk-3", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\ud83d\udc49 You can dive into the deep end by reading Magic's Whitepaper or Litepaper.\n\nWhitepaper\n\nLitepaper\n\nMagic\u2019s goal is to meet companies wherever they are on the path to Web3 adoption\u2014from exploring authentication options to fully integrating with a blockchain, Magic provides solutions that developers and enterprises alike can trust. Our mission to onboard the next billion users to Web3 is not just a catchphrase, it\u2019s a foundation that affects how we address security at every aspect of the user journey.", "explanation": "This documentation section, titled 'Product Security - #Background', provides an overview of Magic Labs' approach to security and its mission to onboard users to Web3 (Web 3.0). \n\nIn simple terms, Magic Labs is committed to ensuring the security of its products and services, particularly for developers and enterprises integrating with blockchain technology. The primary purpose of this section is to:\n\n1. Introduce Magic Labs' vision and mission for Web3 adoption.\n2. Emphasize the importance of security in its product lineup, especially as companies move towards embracing blockchain technology.\n3. Provide a foundation for understanding how Magic Labs approaches security at various stages of user interaction with its products.\n\nBy offering trustworthy solutions and prioritizing security, Magic Labs aims to facilitate the adoption of Web3 technology among a broader user base.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/home/security/product-security#chunk-1", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n#\n\nCompanies that have a database with passwords are a high-value target for hackers, who have successfully breached companies of all sizes.", "explanation": "This section from the Magic Labs embedded wallet documentation is discussing a common issue related to password security. In essence, it highlights that companies storing passwords in their databases become attractive targets for hackers, as they are aware that a successful breach can reveal sensitive information and put a large number of users at risk.\n\nThe main purpose of this section is to emphasize the importance of not storing passwords, which is in line with Magic Labs' approach to embedded wallet security. By not storing passwords, Magic Labs is reducing the risk associated with password breaches and minimizing the consequences of a potential security incident.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/home/security/product-security#chunk-2", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nPasswords are only one (obsolete) way to handle authentication. Magic utilizes one-time passcodes to grant access. Delivered through email, these passcodes are time-bound tokens that enable authentication without having to store and maintain passwords. Optionally, Magic also partners with social providers to leverage cross-platform authentication for our products.", "explanation": "Here's a clear and concise explanation of the provided documentation section:\n\n**Implementation Method Alternation: No Password, One-Time Passcodes and Social Providers.**\n\nThe main purpose of this section in the Magic Labs embedded wallet documentation revolves around information regarding an alternative approach to conventional passwords, thus ensuring safety from them. It explains that Magic utilizes two (2) alternative models; they are,\n\n1. **One-Time Passcodes (delivered via email)**: One-time passcodes (time-bound tokens) through email improve authentication safety by making them non-reusable by each user. However, Magic Labs places strong emphasis on emphasizing security above convenience with this method often bringing about extra user friction.\n\n2. **Cross-Platform Authentication (via Social Providers)**: Magic also offers alternative means of access via several social media (like Google, Facebook) platforms, allowing shared cross-platform authentication, therefore avoiding having stored data on passwords and adding ease to users switching between different accounts.\n\nAccordingly, these two methods strive to counter conventional method weaknesses by making them potentially inconvincible \"black box\" mediums where malicious attacks would often have to depend on users personally knowing social account secrets; hence they only secure user identification (name) as opposed to current passwords.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/home/security/product-security#chunk-3", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n#\n\nSince the creation of the internet, hackers have leveraged phishing to direct victims to authentic-looking pages to attack them or steal their credentials. Hackers can craft incredibly realistic pages, utilize social engineering to entice victims to connect, and capture credentials for later use in direct attacks or credential-stuffing attacks elsewhere on the internet.", "explanation": "**Phishing Explanation**\n\nPhishing is a type of online scam where hackers create fake or deceptive websites, emails, or messages that appear legitimate to trick users into revealing sensitive information such as:\n\n* Passwords\n* Login credentials\n* Financial information\n* Personal data\n\n**Purpose of Phishing**\n\nThe main purpose of phishing is to trick users into divulging confidential information, which can be used by hackers for malicious purposes, including:\n\n* Stealing credentials for direct attacks on victim's accounts\n* Using stolen credentials for credential-stuffing attacks on other websites\n* Gaining unauthorized access to sensitive information\n\n**In the context of Magic Labs embedded wallet**\n\nPhishing is a significant threat to users of Magic Labs embedded wallets. Hackers may attempt to phish users by creating fake websites or messages that mimic the legitimate Magic Labs wallet interface. If a user falls victim to phishing, their sensitive information, such as wallet seed or private keys, may be compromised, putting their funds at risk.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/home/security/product-security#chunk-4", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nMagic\u2019s approach to authentication makes phishing much more difficult. Because Magic uses time-bound tokens, any credentials captured from successful phishing attacks have the same limited shelf life. Magic\u2019s innovative approach to device registration for authentication, for customers who wish to take advantage of it, dramatically increases the difficulty of phishing attempts.", "explanation": "**Explanation:**\n\nThe documentation section, \"# Magic\u2019s approach makes phishing more difficult,\" discusses how Magic Labs' unique authentication method makes it challenging for attackers to succeed with phishing attempts. \n\n**Main Purpose:**\n\nThe main purpose of this section is to assure users that Magic Labs has implemented security measures to protect them from phishing attacks, making it more difficult for attackers to gain access to sensitive information. The section highlights two key security features:\n\n1. **Time-bound tokens**: Any captured credentials from a phishing attack will have a limited time frame (shelf life) to be used, making it easier for Magic Labs to detect and prevent unauthorized access.\n2. **Device registration for authentication**: An optional feature for customers that significantly increases the difficulty of phishing attempts, suggesting an additional layer of security for users who choose to use it.\n\nBy emphasizing these security features, Magic Labs aims to build trust with its users and demonstrate its commitment to protecting their sensitive information.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/home/security/product-security#chunk-5", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n#\n\nOnce an end-user uses their time-bound token to establish a session with Magic, Magic generates a key pair based on the Ethereum blockchain. The public key acts as an identifier for the user. Leveraging elliptic curve cryptography, the private key is used to generate a verifiable proof of identification and authorization from a claim. The proof is then sent to the developer application servers where data in the claim can be recovered, and the authenticity of the request can be ensured.\n\nEthereum\n\nAuthentication and authorization are achieved without requiring user passwords. The claim format is an adaptation of the W3C Decentralized Identifiers (DID) protocol. Learn More about Magic DID's here.\n\nDecentralized Identifiers\n\nhere", "explanation": "**Public-Private Key Pair Identity Verification**\n\nIn the Magic Labs embedded wallet documentation, this section explains how Magic ensures end-user identity through a secure public-private key pair system, without the need for passwords.\n\n**Key Points:**\n\n1. **Key Pair Generation**: After a user authenticates with a time-bound token, Magic creates a key pair based on the Ethereum blockchain.\n2. **Public Key as Identifier**: The public key serves as a unique identifier for the user.\n3. **Private Key Verification**: The private key is used to generate a verifiable proof of identification and authorization from a claim.\n4. **Proof of Authentication**: The proof is sent to developer application servers, ensuring the authenticity of the request and allowing data recovery from the claim.\n\n**Main Purpose:**\n\nThe main purpose of this public-private key pair system is to achieve secure authentication and authorization without requiring users to remember passwords. This approach is made possible by leveraging elliptic curve cryptography and the W3C Decentralized Identifiers (DID) protocol.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/home/security/product-security#chunk-6", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n#\n\nWith this public-private key-pair approach, it is critical to ensure that users' private keys are properly secured. This is what our patented (Patent US-11546321-B2) Delegated Key Management System (DKMS) was designed for. Our DKMS has secured millions of private keys for thousands of companies for years. By leveraging our DKMS, Magic provides secure private key management backed by best-in-class cryptography standards.", "explanation": "According to the provided documentation for Magic Link, the section is about protecting private keys using their patented **Delegated Key Management System (DKMS)**.\n\nIn essence, the DKMS is designed to securely manage users' private keys, which are essential for encrypting and decrypting sensitive information. The main purpose of the DKMS is to safeguard these private keys from loss, theft, or unauthorized access, thus providing an additional layer of security.\n\nThe DKMS leverages best-in-class cryptography standards to offer reliable protection for millions of private keys, indicating its effectiveness in securing sensitive information.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/home/security/product-security#chunk-7", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nMagic provides infrastructure that manages the encrypted private keys. This encrypted key is shared with the user upon successful authentication. The user is then able to decrypt their encrypted private key with a user master key. Our Delegated Key Management architecture delegates critical encryption and decryption operations to trusted AWS Key Management Service (KMS) and AWS Cognito.", "explanation": "**DKMS (Delegated Key Management Services) Explanation**\n\nDKMS is a cryptographic security architecture provided by Magic Labs to manage and protect encrypted private keys associated with embedded wallets. \n\n**Key Functionality:**\n\n1. **Encrypted Key Sharing**: Upon successful user authentication, Magic shares an encrypted private key with the user.\n2. **User Master Key Decryption**: The user can then decrypt the shared encrypted key using their individual User Master Key.\n3. **Security Delegation**: Critical encryption and decryption operations are entrusted to trusted cloud services: \n   - AWS Key Management Service (KMS) for secure key storage and management.\n   - AWS Cognito for secure authentication and authorization.\n\nIn essence, DKMS enables Magic Labs to provide a secure and robust mechanism for managing and protecting private keys associated with embedded wallets, ensuring a secure interaction between Magic and its users.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/home/security/product-security#chunk-8", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n#\n\nMagic leverages Hardware Security Modules (HSMs) provided by AWS KMS. User master keys are stored on the HSMs, which are generated using AES-256 with 384 bits of entropy. The master keys never leave the hardware as they are meant to be locked inside and unable to be exported. Thus, all encryption and decryption operations happen inside the hardware itself. HSMs are similar to popular FIDO devices like YubiKeys or hardware-based crypto wallets such as Trezor or Ledger, except they are stored in the cloud, heavily secured by AWS\u2019s data centers.\n\nUsers' private keys are encrypted by these hardware-based user master keys, which means that attackers need to gain access to this AWS-secured hardware to retrieve the keys and are forced to stay within Magic's infrastructure - which enables detecting, impeding and monitoring an attacker's progress.", "explanation": "Here's a clear and concise explanation of the documentation section on Hardware Security Modules (HSMs) titled '#Wait, another encryption key!? Can\u2019t that one get stolen? - #Hardware Security Modules (HSMs)' from the Magic link documentation site:\n\n**What are Hardware Security Modules (HSMs)?**\n\nMagic uses Hardware Security Modules (HSMs) provided by AWS KMS to store and manage user master keys securely. HSMs are specialized hardware devices that perform cryptographic operations, such as encryption and decryption, within their own secure environment.\n\n**Main Purpose:**\n\nThe main purpose of HSMs in Magic's infrastructure is to provide an additional layer of security for user private keys. These sensitive keys are encrypted by the user's master keys, which are stored on the HSMs. This ensures that even if an attacker gains access to Magic's infrastructure, they still need to obtain control of the HSMs, which are heavily secured by AWS, to compromise the user's private keys.\n\n**Benefits:**\n\nUsing HSMs in Magic's infrastructure offers several benefits, including:\n\n* Protection of user private keys through encryption\n* Prevention of master key export, ensuring they remain locked inside the HSMs\n* All encryption and decryption operations are carried out within the secure environment of the HSMs\n* Enhanced security within Magic's infrastructure, with systems in place to detect, impede, and monitor any potential attacks.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/home/security/product-security#chunk-9", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n#\n\nUsers need to authenticate using Magic\u2019s auth relayer to access their HSMs. Upon successful authentication, users receive a time-bound access token which is traded for scoped credentials that interact with AWS directly. The scoped credentials exclusively enable users to call AWS to access their master keys stored on the HSM for encryption and decryption. This mechanism, by design, bypasses the Magic backend entirely, and Magic cannot intercept the scoped credentials. Both access tokens and scoped credentials are created dynamically by AWS with audit logs and with TTLs enabled.\n\nWhen a user signs up, a public-and-private key-pair is generated on the client-side for the user inside an iframe inaccessible by the integrated app. Keys are generated with cryptographically secure pseudo-random 256-bits of entropy. Once generated, the key is then encrypted by DKMS, where Magic never sees the raw private keys. After encryption of the keys with the HSM, the encrypted key is then uploaded to the Magic back-end to be retrieved, decrypted, and used on the client side in future wallet operations.\n\nWhen users authenticate again, the encrypted private key is downloaded to the client. Users can then decrypt the encrypted private key directly with AWS KMS via Cognito.", "explanation": "The '#Not my key, not my crypto!' - #Client to AWS Data Flow' section explains the secure authentication and data flow process between a Magic Labs embedded wallet and Amazon Web Services (AWS).\n\nThe main purpose of this mechanism is to:\n\n1. **Securely authenticate users**: Users authenticate through Magic's auth relayer, receiving a time-bound access token.\n2. **Authorize access to user's data**: This access token is traded for scoped credentials, allowing users to access their master keys stored on AWS-managed Hardware Security Modules (HSMs) to perform encryption and decryption operations.\n3. **Prevent Magic backend interception**: By interacting directly with AWS, Magic cannot intercept the scoped credentials, ensuring that only the user can access their encrypted data.\n4. **Generate and manage user keys**: When a user signs up, a cryptographically secure key pair is generated client-side in an iframe, encrypted by the HSM, and uploaded to Magic's backend. This ensures that raw private keys are never accessible to Magic.\n\nThis secure data flow aims to provide users with complete control over their encrypted data and keys, protecting them from potential vulnerabilities in the Magic Labs embedded wallet.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/home/security/product-security#chunk-10", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nSecurity Compliance is a vital part of Magic\u2019s comprehensive security program. At Magic, we understand that trust is extremely important in any successful business relationship. As such, we recognize that compliance with security regulations and industry-standard frameworks is not merely a checkbox exercise but a measurement of our dedication to the security of our customer's data. Magic is the first Wallet-as-a-Service (WaaS) provider to attain SOC 2 Type 2, SOC 3 Type 2, ISO 27001, and HIPAA attestations, further underscoring our commitment to trust.\n\nWe communicate trust to our clients by providing tangible evidence that our security approach aligns with industry best practices and regulatory requirements.", "explanation": "The 'Security Compliance' section is about demonstrating Magic's commitment to securing customer data through adherence to industry-standard security frameworks and regulations. The main purpose of this section is to provide assurance to clients that Magic's approach to security meets rigorous standards, including:\n\n1. SOC 2 Type 2 and SOC 3 Type 2, which assess a company's internal controls over financial reporting and management.\n2. ISO 27001, a widely adopted international standard for information security management systems.\n3. HIPAA (Health Insurance Portability and Accountability Act), which protects sensitive patient health information.\n\nBy highlighting these certifications, Magic communicates its dedication to trust and transparency in data security, making it more likely for clients to trust the company with their sensitive information.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/home/security/security-compliance#chunk-1", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n#\n\nMagic\u2019s systems, processes and controls undergo rigorous audits conducted by an industry-leading assessment provider as part of our SOC 2 Type 2 external assessment process. These reports are produced annually and are available after executing an NDA on Magic\u2019s Trust Center.\n\nTrust Center", "explanation": "Based on the documentation provided, here's a clear and concise explanation of SOC 2 Type 2:\n\n**What is SOC 2 Type 2?**\n\nSOC 2 Type 2 is an independent audit report that focuses on ensuring the security, availability, and processing integrity of Magic's systems, processes, and controls. This audit assesses Magic's internal controls and processes to ensure they meet industry standards for security, availability, and performance.\n\n**Main Purpose:**\n\nThe main purpose of the SOC 2 Type 2 audit report is to:\n\n1. **Provide assurance**: Gives users and stakeholders confidence in Magic's system security and controls by providing a third-party validation of its operational effectiveness.\n2. **Ensure compliance**: Verifies that Magic's systems and processes meet industry standards for security, availability, and performance.\n3. **Maintain transparency**: Demonstrates Magic's commitment to openness and accountability by sharing the audit report publicly (under non-disclosure agreement).\n\n**Key Components:**\n\n1. **Annual audits**: The SOC 2 Type 2 report is issued annually, providing a snapshot of Magic's security and compliance posture at a specific point in time.\n2. **Industry-leading assessment**: The audit is conducted by a reputable, industry-leading assessment provider to ensure objectivity and reliability.\n3. **Trust Center**: The report is accessible through Magic's Trust Center, allowing users and stakeholders to view the report after executing a non-disclosure agreement (NDA).", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/home/security/security-compliance#chunk-2", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nAs part of Magic\u2019s external assessment process, SOC 3 Type 2 reports are produced annually. While an NDA is required to access Magic\u2019s SOC 2 Type 2 report, the SOC 3 Type 2 report is public and can be obtained without an NDA on Magic\u2019s Trust Center.\n\nTrust Center", "explanation": "The SOC 3 Type 2 report is a public security compliance report that Magic Labs produces annually as part of their external assessment process. Here's what it's all about:\n\n**What is SOC 3 Type 2?**\n\nSOC 3 is a service organization control report, developed by the American Institute of Certified Public Accountants (AICPA). The SOC 3 report is a condensed, high-level version of a SOC 2 report, which focuses on a service organization's system controls related to security, availability, processing integrity, confidentiality, and privacy.\n\n**Key aspects of SOC 3 Type 2:**\n\n- **Type 2**: Represents a report on controls for a specific period of time (in this case, a year). This report includes the auditor's opinion on whether the controls were operating effectively for the duration of the examination period.\n- **Public availability**: Unlike the SOC 2 Type 2 report, which is only available upon request and requires a non-disclosure agreement (NDA), the SOC 3 Type 2 report is publicly available on Magic Labs' Trust Center.\n- **Summary of controls**: The SOC 3 Type 2 report provides a high-level summary of Magic Labs' system controls related to security, including measures taken to protect user data.\n\n**Main purpose:**\n\nThe main purpose of the SOC 3 Type 2 report is to provide stakeholders, including customers and partners, with an overview of Magic Labs' security controls and commitments to protect sensitive user information. This report helps establish trust and confidence in Magic Labs' handling of customer data, making it an essential component of their security compliance strategy.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/home/security/security-compliance#chunk-3", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nMagic is ISO 27001:2013 certified, the pre-eminent internationally recognized standard for Information Security Management Systems (ISMS). Following an extensive audit by an industry-leading assessment provider, this certification confirms that Magic meets the highest standards for establishing, implementing, maintaining and continually improving ISMS. Magic\u2019s ISO 27001:2013 certification is available after executing an NDA on Magic\u2019s Trust Center.\n\nTrust Center", "explanation": "The iso 27001 is a globally recognized standard for Information Security Management Systems (ISMS). It involves establishing, implementing, and maintaining policies and procedures for securing sensitive information. Key aspects include:\n\n- Information acquisition, processing, storing, transmission, and disposal.\n- Policies, procedures, training, and contractual obligations for ISMS.\n- Assessing risks and the need for corrective, preventative, and mitigative measures.\n- Continuous security audits, reviews, and assessments.\n \n Magic Labs obtaining this ISO 27001 certification ensures they meet the highest standards in managing and securing customer information, which adheres to global best practices for securing client data and contributing to a robust digital security environment within the Magic ecosystem.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/home/security/security-compliance#chunk-4", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nThe Health Insurance Portability and Accountability Act of 1996 (HIPAA) is a federal law that requires the creation of national standards to protect sensitive patient health information from being disclosed without the patient's consent or knowledge. Magic\u2019s products and services are HIPAA compliant and undergo rigorous HIPAA-specific audits annually. Magic\u2019s HIPAA Type 2 report is available after executing an NDA on Magic\u2019s Trust Center.\n\nTrust Center", "explanation": "**HIPAA Compliance Overview**\n\nHipaa compliance is a security standard for healthcare organizations to protect sensitive patient healthcare information from unauthorized disclosure. \n\n**Main Purpose:**\n\nThe main purpose of Hipaa compliance in Magic's context is to ensure that Magic's products and services meet the federal security standards set by the Health Insurance Portability and Accountability Act of 1996, specifically in terms of handling sensitive patient health information. \n\n**Key Points:**\n\n1. **HIPAA Compliance:** Magic's products and services meet the required security standards to safeguard patient health information.\n2. **Annual Audits:** Magic undergoes rigorous HIPAA-specific audits annually to ensure ongoing compliance.\n3. **HIPAA Type 2 Report:** A comprehensive report detailing Magic's HIPAA compliance is available upon executing a non-disclosure agreement (NDA) through Magic's Trust Center.\n\nBy prioritizing Hipaa compliance, Magic ensures the security and protection of patient health information, maintaining the trust of healthcare organizations that use its products and services.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/home/security/security-compliance#chunk-5", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n#\n\nAt Magic, we prioritize the security of our operations, and this extends to our relationships with vendors and subprocessors. We place a strong emphasis on third-party risk management by conducting thorough security reviews before entering into any agreements and ensuring annual assessments thereafter. To learn more about the trusted subprocessors we work with, please visit Magic\u2019s Trust Center.\n\nTrust Center", "explanation": "Based on the provided documentation section \"#Internal Processes - #Third-Party Risk Management\" from Magic's security compliance documentation, here's a clear and concise explanation:\n\n**What is it about?**\n\nThis section of the documentation outlines Magic's process for managing third-party risks. Third-party risks refer to potential security threats or vulnerabilities associated with vendors, subprocessors, or other external parties that Magic works with.\n\n**Main purpose:**\n\nThe primary purpose of this process is to ensure the security of Magic's operations by thoroughly assessing and mitigating potential risks when partnering with third-party vendors or subprocessors.\n\n**Key components:**\n\n1. **Pre-Contract Security Reviews:** Magic conducts comprehensive security reviews before entering into agreements with vendors or subprocessors to identify and assess potential security risks.\n2. **Annual Assessments:** Magic ensures that annual security assessments are performed on all vendors and subprocessors to maintain compliance and identify any potential security threats.\n3. **Trust Center:** Magic provides transparency into the trusted subprocessors they work with through their Trust Center. This allows customers and stakeholders to view the list of trusted partners.\n\n**Overall, the main purpose is to:** \n\nEnsure that Magic maintains a secure environment by carefully selecting and monitoring third-party vendors and subprocessors, thereby protecting customer data and maintaining trust.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/home/security/security-compliance#chunk-6", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nWe believe that maintaining a robust security compliance posture is an ongoing commitment. We constantly assess the effectiveness of our controls to keep them in line with industry best practices, reinforcing our industry-leading security compliance posture. Our continuous control monitoring aligns our internal processes with industry best practices, instilling confidence in our services to our customers and their end-users.", "explanation": "**Continuous Control Monitoring Overview**\n\nContinuous Control Monitoring (CCM) is a security compliance method employed by Magic Labs to regularly assess and improve their security controls. It ensures that their security measures align with industry best practices.\n\n**Main Purpose:**\n\nThe primary goal of CCM is to maintain a robust security posture by:\n\n1. **Evaluating the effectiveness of existing controls**: Regular assessments help identify areas for improvement.\n2. **Reinforcing industry-leading security compliance**: Magic Labs stays in line with the latest industry standards.\n3. **Instilling confidence**: CCM ensures that customers and end-users trust the security and reliability of Magic Labs' services.\n\nBy implementing Continuous Control Monitoring, Magic Labs demonstrates its commitment to robust security compliance, fostering trust and confidence in their services.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/home/security/security-compliance#chunk-7", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nTo get in touch with Magic\u2019s Security team, send us an email at security@magic.link.\n\nsecurity@magic.link", "explanation": "The '#Get In Touch' section is a part of the Magic Labs' security documentation, which provides a contact method for customers or users who need to reach out to the Security team at Magic Labs. \n\nThe main purpose of this section is to inform users that if they have any security-related concerns, questions, or issues that require the attention of Magic Labs' Security experts, they can do so by sending an email to `security@magic.link`.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/home/security/security-compliance#chunk-8", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nFlare is a Layer 1 blockchain with native data acquisition protocols, providing developers with decentralized access to high-integrity data from other blockchains without relying on third party oracles. Users can effortlessly create wallets and interact with Flare using the Magic SDK.\n\nFlare\n\nAs Flare is EVM compatible, you can follow the Ethereum documentation to send your first transaction and utilize all other features.\n\nEthereum", "explanation": "**What is Flare?**\n\nFlare is a Layer 1 blockchain that offers native data acquisition protocols, allowing developers to access high-integrity data from other blockchains in a decentralized manner.\n\n**Main Purpose:**\n\nThe main purpose of Flare is to provide a reliable, decentralized way for developers to retrieve data from other blockchains without relying on third-party oracles. This enables seamless interaction with other blockchains in a trustless environment.\n\n**Key Benefit:**\n\nAs Flare is EVM (Ethereum Virtual Machine) compatible, developers can utilize the Magic SDK to effortlessly create wallets and interact with Flare, as they would with Ethereum. This compatibility and ease of use make Flare an attractive option for developers looking to integrate blockchain data into their applications.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/evm/flare#chunk-1", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\nconst\n\nFlareOptions\n\n=\n\n{\n\n01\n\nconst\n\nFlareOptions\n\n=\n\n{\n\n02\n\nrpcUrl\n\n:\n\n'https://coston-api.flare.network/ext/bc/C/rpc'\n\n,\n\n02\n\nrpcUrl\n\n:\n\n'https://coston-api.flare.network/ext/bc/C/rpc'\n\n,\n\n03\n\nchainId\n\n:\n\n16\n\n,\n\n03\n\nchainId\n\n:\n\n16\n\n,\n\n04\n\n}\n\n;\n\n04\n\n}\n\n;\n\n05\n\n05\n\n06\n\n// Setting network to point to Coston Testnet\n\n06\n\n// Setting network to point to Coston Testnet\n\n07\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_PUBLISHABLE_API_KEY'\n\n,\n\n{\n\nnetwork\n\n:\n\nFlareOptions\n\n}\n\n)\n\n;\n\n07\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_PUBLISHABLE_API_KEY'\n\n,\n\n{\n\nnetwork\n\n:\n\nFlareOptions\n\n}\n\n)\n\n;", "explanation": "**Configure Flare**\n\nThe `#Configure Flare` section from the Magic Labs embedded wallet documentation provides information on how to set up and configure the Flare network for use with the Magic wallet.\n\n**Main Purpose:**\n\nThe main purpose of this section is to guide developers on how to pass specific configuration options to the `Magic` constructor to initialize the Flare network.\n\n**Key Configuration Options:**\n\nThe section focuses on setting up the following two configuration options:\n\n1. **`rpcUrl`**: This option specifies the URL of the blockchain's RPC endpoint. In this case, it's set to `https://coston-api.flare.network/ext/bc/C/rpc`.\n2. **`chainId`**: This option specifies the unique identifier for the Flare network. It's set to `16`.\n\n**Code Snippet:**\n\nThe code snippet provided creates a `FlareOptions` object that holds these configuration options. This object is then passed to the `Magic` constructor to initialize the Flare network. The resulting `magic` object can be used to interact with the Flare network.\n\n**Note:**\n\nThe code snippet also includes a commented-out section that sets the network to point to Coston Testnet, indicating that this configuration is for testing purposes. Additionally, a placeholder API key (`'YOUR_PUBLISHABLE_API_KEY'`) is used, which should be replaced with a valid API key obtained from Magic Labs.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/evm/flare#chunk-2", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 All Auth, User and most Wallet module methods* for Dedicated Wallets\n\n\u2022 All EVM Provider functionality to respond to supported RPC methods\n\nAuth\n\nUser\n\nWallet\n\nDedicated Wallets\n\nRPC methods\n\n*Some features are not yet compatible such as NFT Viewer and Fiat On-ramps.\n\nNeed a feature or see a problem? File an issue on our github repo.\n\ngithub repo", "explanation": "**Compatibility Section Overview**\n\nThe #Compatibility section is a part of the Magic Labs embedded wallet documentation for the Flare EVM blockchain. Its main purpose is to outline the compatibility of various Magic Labs features and APIs with the Flare EVM chain.\n\n**Key Points:**\n\n* The section covers the compatibility of Magic Labs features, including Authentication (Auth), User management, Wallet functionality, and Dedicated Wallets.\n* It specifically mentions that all EVM Provider functionality responds to supported RPC (Remote Procedure Call) methods.\n* However, it notes that some features are not yet compatible, such as NFT Viewer and Fiat On-ramps.\n\n**Main Purpose:**\n\nThe primary purpose of this section is to inform developers and users about which Magic Labs features are currently supported and work on the Flare EVM chain. This section helps prevent confusion and reduces the risk of compatibility issues, enabling developers to make informed decisions about which features to use in their applications.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/evm/flare#chunk-3", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 Documentation: https://docs.flare.network/\n\n\u2022 Block Explorer:https://mainnet.flarescan.com/ (Mainnet)https://coston-explorer.flare.network/ (Testnet)\n\n\u2022 Testnet Faucet: https://faucet.flare.network/coston\n\nhttps://docs.flare.network/\n\n\u2022 https://mainnet.flarescan.com/ (Mainnet)\n\n\u2022 https://coston-explorer.flare.network/ (Testnet)\n\nhttps://mainnet.flarescan.com/\n\nhttps://coston-explorer.flare.network/\n\nhttps://faucet.flare.network/coston", "explanation": "**Resources & Tools Section Overview**\n\nThe '#Resources & Tools' section is a collection of essential links and tools that provide developers and users with the necessary information and utilities to interact with the Flare Network, specifically designed for Magic Labs embedded wallet documentation.\n\n**Main Purpose:**\n\nThe primary purpose of this section is to provide readers with quick access to the following resources:\n\n1. **Documentation**: The official Flare Network documentation, offering in-depth information on the technology, usage, and best practices.\n2. **Block Explorers**: Tools for inspecting blockchain data, allowing users to track transactions, accounts, and other network activities on both Mainnet and Testnet.\n3. **Testnet Faucet**: A utility for obtaining testnet FLR tokens, enabling developers to test and experiment with the network without incurring financial risks.\n\n**Key Links:**\n\nThe section includes a list of essential links to the Flare Network resources, including:\n\n* Official Flare Network documentation\n* Mainnet and Testnet block explorers\n* Testnet faucet for obtaining testnet FLR tokens\n\nBy providing these resources in one place, the '#Resources & Tools' section saves users time and effort, making it easier to find the information and tools they need to work with the Flare Network.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/evm/flare#chunk-4", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nMagic interacts with the Algorand blockchain via Magic's extension NPM package @magic-ext/algorand. The Algorand extension also lets you interact with the blockchain using methods from Algorand's Javascript SDK.\n\nAlgorand\n\n@magic-ext/algorand\n\n@magic-ext/algorand\n\nAlgorand's Javascript SDK\n\nYou can skip straight to our kitchen sink example directly:\n\n\ud83d\udc49 Algorand Example\n\nAlgorand Example\n\nCopy\n\n01\n\nnpm\n\ninstall\n\n--save @magic-ext/algorand\n\n01\n\nnpm\n\ninstall\n\n--save @magic-ext/algorand", "explanation": "The 'Algorand - Algorand - #Installation' documentation section is about installing the necessary library for interacting with the Algorand blockchain using Magic Labs. \n\nThe main purpose of this section is to provide instructions on how to integrate the @magic-ext/algorand package into a project using npm (Node Package Manager). This allows developers to use Magic's extension to interact with the Algorand blockchain, as well as leverage methods from Algorand's JavaScript SDK.\n\nIn brief, the installation process involves running the following commands in a terminal or command prompt:\n\n1. `npm install --save @magic-ext/algorand`\n2. `npm install --save @magic-ext/algorand` \n\nThis step is crucial for enabling the usage of the Algorand extension in a project and making it possible to develop blockchain-related applications with Magic Labs.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/other/algorand#chunk-1", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\nimport\n\n{\n\nAlgorandExtension\n\n}\n\nfrom\n\n'@magic-ext/algorand'\n\n;\n\n02\n\nimport\n\n{\n\nAlgorandExtension\n\n}\n\nfrom\n\n'@magic-ext/algorand'\n\n;\n\n03\n\n03\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_API_KEY'\n\n,\n\n{\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_API_KEY'\n\n,\n\n{\n\n05\n\nextensions\n\n:\n\n{\n\n05\n\nextensions\n\n:\n\n{\n\n06\n\nalgorand\n\n:\n\nnew\n\nAlgorandExtension\n\n(\n\n{\n\n06\n\nalgorand\n\n:\n\nnew\n\nAlgorandExtension\n\n(\n\n{\n\n07\n\nrpcUrl\n\n:\n\n''\n\n,\n\n// should remain empty\n\n07\n\nrpcUrl\n\n:\n\n''\n\n,\n\n// should remain empty\n\n08\n\n}\n\n)\n\n,\n\n08\n\n}\n\n)\n\n,\n\n09\n\n}\n\n,\n\n09\n\n}\n\n,\n\n10\n\n}\n\n)\n\n;\n\n10\n\n}\n\n)\n\n;", "explanation": "**Initialization Section Overview**\n\nThe Initialization section is a crucial part of the Magic Labs embedded wallet documentation for the Algorand blockchain. This section provides the necessary code snippet to initialize the Magic wallet SDK with the required configurations.\n\n**Main Purpose:**\n\nThe main purpose of this Initialization section is to create an instance of the Magic wallet, set up the API key, and import the Algorand extension. This setup prepares the Magic wallet for various functions and operations, such as user authentication, wallet management, and blockchain interactions.\n\n**Key Elements:**\n\n1. **Importing the Magic SDK:** The section begins by importing the Magic SDK using the `import` statement.\n2. **Importing the Algorand Extension:** The Algorand extension is imported from the `@magic-ext/algorand` package, which is required for Algorand-specific functionality.\n3. **Creating a Magic Instance:** A new instance of the Magic wallet is created using the `new Magic()` constructor, passing in the `YOUR_API_KEY` (replace with your actual API key).\n4. **Configuring the Algorand Extension:** The Algorand extension is created and configured with the required settings, including the `rpcUrl`. The `rpcUrl` should remain empty, as it is not necessary for the current context.\n\n**Important Notes:**\n\n* `YOUR_API_KEY` should be replaced with your actual API key to ensure the Magic wallet works correctly.\n* The `rpcUrl` should be left empty, as specified in the documentation.\n\nBy following this Initialization section, developers can successfully set up the Magic wallet SDK for Algorand, enabling them to use various features and functions within their applications.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/other/algorand#chunk-2", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n#\n\nBefore you can send transaction on the Algorand blockchain, you'll need to acquire some test Algorand.\n\n\u2022 Go to our Algorand Example application\n\n\u2022 Login with your email address\n\n\u2022 Copy your Algorand public address\n\n\u2022 Go to the Algorand Faucet\n\n\u2022 Paste your copied Algorand public address in the text input\n\n\u2022 Now you can use your test Algorand in our example app\n\nGo to our Algorand Example application\n\nAlgorand Example\n\nLogin with your email address\n\nCopy your Algorand public address\n\nGo to the Algorand Faucet\n\nAlgorand Faucet\n\nPaste your copied Algorand public address in the text input\n\nNow you can use your test Algorand in our example app\n\nexample app", "explanation": "**Section Overview: 'Get Test Algorand'**\n\nThe '#Common Methods - #Get Test Algorand' documentation section guides users on how to obtain a specified amount of test Algorand, a cryptocurrency native to the Algorand blockchain. This section's primary purpose is to help developers and users acquire the necessary test funds to test and interact with their Magic Labs embedded wallet applications on the Algorand blockchain.\n\n**Main Steps:**\n\n1. **Access the Algorand Example Application**: Users must log in to the Algorand Example application with their email address to initiate the process.\n2. **Acquire Test Algorand**: Users are directed to the Algorand Faucet, where they can paste their Algorand public address to receive a test Algorand allocation.\n3. **Verify Test Algorand Allocation**: Upon a successful request, users can verify that they have obtained the test Algorand funds.\n\n**Purpose:**\nThe main purpose of this section is to enable users to obtain test Algorand funds, allowing them to experiment and test their Magic Labs embedded wallet applications on the Algorand blockchain without incurring real financial costs. This process helps users and developers familiarize themselves with the Algorand blockchain and its integration with Magic Labs' embedded wallet solutions.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/other/algorand#chunk-3", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nUse the getWallet function to get the Algorand public address for the current user.\n\ngetWallet\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\nimport\n\n{\n\nAlgorandExtension\n\n}\n\nfrom\n\n'@magic-ext/algorand'\n\n;\n\n02\n\nimport\n\n{\n\nAlgorandExtension\n\n}\n\nfrom\n\n'@magic-ext/algorand'\n\n;\n\n03\n\n03\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_API_KEY'\n\n,\n\n{\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_API_KEY'\n\n,\n\n{\n\n05\n\nextensions\n\n:\n\n{\n\n05\n\nextensions\n\n:\n\n{\n\n06\n\nalgorand\n\n:\n\nnew\n\nAlgorandExtension\n\n(\n\n{\n\n06\n\nalgorand\n\n:\n\nnew\n\nAlgorandExtension\n\n(\n\n{\n\n07\n\nrpcUrl\n\n:\n\n''\n\n,\n\n07\n\nrpcUrl\n\n:\n\n''\n\n,\n\n08\n\n}\n\n)\n\n,\n\n08\n\n}\n\n)\n\n,\n\n09\n\n}\n\n,\n\n09\n\n}\n\n,\n\n10\n\n}\n\n)\n\n;\n\n10\n\n}\n\n)\n\n;\n\n11\n\n11\n\n12\n\n// Get user's Algorand public address\n\n12\n\n// Get user's Algorand public address\n\n13\n\nconst\n\npublicAddress\n\n=\n\nawait\n\nmagic\n\n.\n\nalgorand\n\n.\n\ngetWallet\n\n(\n\n)\n\n;\n\n13\n\nconst\n\npublicAddress\n\n=\n\nawait\n\nmagic\n\n.\n\nalgorand\n\n.\n\ngetWallet\n\n(\n\n)\n\n;\n\n14\n\nconsole\n\n.\n\nlog\n\n(\n\n'algorand public address'\n\n,\n\npublicAddress\n\n)\n\n;\n\n14\n\nconsole\n\n.\n\nlog\n\n(\n\n'algorand public address'\n\n,\n\npublicAddress\n\n)\n\n;", "explanation": "## Introduction to `#Get Wallet`\n\nThe `#Get Wallet` section in the Magic Labs embedded wallet documentation provides a code snippet example that demonstrates how to retrieve the Algorand public address associated with the current user using the Magic SDK.\n\n## Main Purpose\n\nThe main purpose of this code snippet is to introduce the `getWallet` function, which can be used to obtain the Algorand public address of a user who has authenticated through the Magic wallet. This function allows developers to easily access the user's Algorand address, enabling more advanced use cases such as Algorand-specific features like transferring assets.\n\n## Code Breakdown\n\nThe code breaks down into the following key components:\n\n1. **Importing the Magic SDK and Algorand Extension**: The code imports the Magic SDK and the Algorand Extension from their respective modules.\n2. **Initializing the Magic instance**: The code sets up a new Magic instance with an API key, which is required for authentication and wallet functionality.\n3. **Creating an Algorand Extension instance**: The code creates an instance of the Algorand Extension, which is used to interact with the Algorand blockchain.\n4. **Using the `getWallet` function**: The code calls the `getWallet` function, which retrieves the Algorand public address of the current user.\n5. **Logging the result**: The code logs the obtained Algorand public address to the console.\n\n## Example Use Case\n\nThis code snippet serves as a starting point for any developer who wants to integrate the Algorand blockchain with the Magic Labs embedded wallet. By following this example, you can easily retrieve the user's Algorand address and unlock features such as asset transfers.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/other/algorand#chunk-4", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nNote that the Magic Algorand extension follows the method names and conventions by Algorand's Javascript SDK. To sign a standard Algorand blockchain transaction, you can call the magic.algorand.signTransaction() method.\n\nAlgorand's Javascript SDK\n\nmagic.algorand.signTransaction()\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\nimport\n\n{\n\nAlgorandExtension\n\n}\n\nfrom\n\n'@magic-ext/algorand'\n\n;\n\n02\n\nimport\n\n{\n\nAlgorandExtension\n\n}\n\nfrom\n\n'@magic-ext/algorand'\n\n;\n\n03\n\n03\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_API_KEY'\n\n,\n\n{\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_API_KEY'\n\n,\n\n{\n\n05\n\nextensions\n\n:\n\n{\n\n05\n\nextensions\n\n:\n\n{\n\n06\n\nalgorand\n\n:\n\nnew\n\nAlgorandExtension\n\n(\n\n{\n\n06\n\nalgorand\n\n:\n\nnew\n\nAlgorandExtension\n\n(\n\n{\n\n07\n\nrpcUrl\n\n:\n\n''\n\n,\n\n07\n\nrpcUrl\n\n:\n\n''\n\n,\n\n08\n\n}\n\n)\n\n,\n\n08\n\n}\n\n)\n\n,\n\n09\n\n}\n\n,\n\n09\n\n}\n\n,\n\n10\n\n}\n\n)\n\n;\n\n10\n\n}\n\n)\n\n;\n\n11\n\n11\n\n12\n\nconst\n\nsendPaymentTransaction\n\n=\n\nasync\n\n(\n\n)\n\n=>\n\n{\n\n12\n\nconst\n\nsendPaymentTransaction\n\n=\n\nasync\n\n(\n\n)\n\n=>\n\n{\n\n13\n\n// Construct Payload\n\n13\n\n// Construct Payload\n\n14\n\nlet\n\nparams\n\n=\n\nawait\n\nalgodClient\n\n.\n\ngetTransactionParams\n\n(\n\n)\n\n.\n\ndo\n\n(\n\n)\n\n;\n\n14\n\nlet\n\nparams\n\n=\n\nawait\n\nalgodClient\n\n.\n\ngetTransactionParams\n\n(\n\n)\n\n.\n\ndo\n\n(\n\n)\n\n;\n\n15\n\nlet\n\nnote\n\n=\n\nnew\n\nTextEncoder\n\n(\n\n)\n\n.\n\nencode\n\n(\n\n\"Hello World\"\n\n)\n\n;\n\n15\n\nlet\n\nnote\n\n=\n\nnew\n\nTextEncoder\n\n(\n\n)\n\n.\n\nencode\n\n(\n\n\"Hello World\"\n\n)\n\n;\n\n16\n\nlet\n\ntxn\n\n=\n\nalgosdk\n\n.\n\nmakePaymentTxnWithSuggestedParams\n\n(\n\n16\n\nlet\n\ntxn\n\n=\n\nalgosdk\n\n.\n\nmakePaymentTxnWithSuggestedParams\n\n(\n\n17\n\nfrom\n\n,\n\n17\n\nfrom\n\n,\n\n18\n\nto\n\n,\n\n18\n\nto\n\n,\n\n19\n\namount\n\n,\n\n19\n\namount\n\n,\n\n20\n\ncloseRemainderTo\n\n,\n\n20\n\ncloseRemainderTo\n\n,\n\n21\n\nnote\n\n,\n\n21\n\nnote\n\n,\n\n22\n\nparams\n\n22\n\nparams\n\n23\n\n)\n\n;\n\n23\n\n)\n\n;\n\n24\n\nconsole\n\n.\n\nlog\n\n(\n\n\"txn\"\n\n,\n\ntxn\n\n)\n\n;\n\n24\n\nconsole\n\n.\n\nlog\n\n(\n\n\"txn\"\n\n,\n\ntxn\n\n)\n\n;\n\n25\n\n25\n\n26\n\n// Sign Payload\n\n26\n\n// Sign Payload\n\n27\n\nlet\n\nencodedTxn\n\n=\n\nalgosdk\n\n.\n\nencodeObj\n\n(\n\ntxn\n\n.\n\nget_obj_for_encoding\n\n(\n\n)\n\n)\n\n;\n\n27\n\nlet\n\nencodedTxn\n\n=\n\nalgosdk\n\n.\n\nencodeObj\n\n(\n\ntxn\n\n.\n\nget_obj_for_encoding\n\n(\n\n)\n\n)\n\n;\n\n28\n\nconst\n\nsignedTxn\n\n=\n\nawait\n\nmagic\n\n.\n\nalgorand\n\n.\n\nsignTransaction\n\n(\n\nencodedTxn\n\n)\n\n;\n\n28\n\nconst\n\nsignedTxn\n\n=\n\nawait\n\nmagic\n\n.\n\nalgorand\n\n.\n\nsignTransaction\n\n(\n\nencodedTxn\n\n)\n\n;\n\n29\n\n// Broadcast Tx\n\n29\n\n// Broadcast Tx\n\n30\n\nconst\n\nhash\n\n=\n\nawait\n\nalgodClient\n\n.\n\nsendRawTransaction\n\n(\n\nsignedTxn\n\n.\n\nblob\n\n)\n\n.\n\ndo\n\n(\n\n)\n\n;\n\n30\n\nconst\n\nhash\n\n=\n\nawait\n\nalgodClient\n\n.\n\nsendRawTransaction\n\n(\n\nsignedTxn\n\n.\n\nblob\n\n)\n\n.\n\ndo\n\n(\n\n)\n\n;\n\n31\n\nconsole\n\n.\n\nlog\n\n(\n\n\"hash\"\n\n,\n\nhash\n\n)\n\n;\n\n31\n\nconsole\n\n.\n\nlog\n\n(\n\n\"hash\"\n\n,\n\nhash\n\n)\n\n;\n\n32\n\n// Wait for confirmation\n\n32\n\n// Wait for confirmation\n\n33\n\nconst\n\nreceipt\n\n=\n\nawait\n\nwaitForConfirmation\n\n(\n\nalgodClient\n\n,\n\nhash\n\n.\n\ntxId\n\n,\n\n4\n\n)\n\n;\n\n33\n\nconst\n\nreceipt\n\n=\n\nawait\n\nwaitForConfirmation\n\n(\n\nalgodClient\n\n,\n\nhash\n\n.\n\ntxId\n\n,\n\n4\n\n)\n\n;\n\n34\n\nconsole\n\n.\n\nlog\n\n(\n\n\"receipt\"\n\n,\n\nreceipt\n\n)\n\n;\n\n34\n\nconsole\n\n.\n\nlog\n\n(\n\n\"receipt\"\n\n,\n\nreceipt\n\n)\n\n;\n\n35\n\n}\n\n;\n\n35\n\n}\n\n;\n\n36\n\n36\n\n37\n\nconst\n\nsendAssetConfigTransaction\n\n=\n\nasync\n\n(\n\n)\n\n=>\n\n{\n\n37\n\nconst\n\nsendAssetConfigTransaction\n\n=\n\nasync\n\n(\n\n)\n\n=>\n\n{\n\n38\n\n// Construct Payload\n\n38\n\n// Construct Payload\n\n39\n\nlet\n\nparams\n\n=\n\nawait\n\nalgodClient\n\n.\n\ngetTransactionParams\n\n(\n\n)\n\n.\n\ndo\n\n(\n\n)\n\n;\n\n39\n\nlet\n\nparams\n\n=\n\nawait\n\nalgodClient\n\n.\n\ngetTransactionParams\n\n(\n\n)\n\n.\n\ndo\n\n(\n\n)\n\n;\n\n40\n\nlet\n\ntxn\n\n=\n\nalgosdk\n\n.\n\nmakeAssetCreateTxnWithSuggestedParams\n\n(\n\n40\n\nlet\n\ntxn\n\n=\n\nalgosdk\n\n.\n\nmakeAssetCreateTxnWithSuggestedParams\n\n(\n\n41\n\nfrom\n\n,\n\n41\n\nfrom\n\n,\n\n42\n\nnote\n\n,\n\n42\n\nnote\n\n,\n\n43\n\ntotalSupply\n\n,\n\n43\n\ntotalSupply\n\n,\n\n44\n\ndecimals\n\n,\n\n44\n\ndecimals\n\n,\n\n45\n\ndefaultFrozen\n\n,\n\n45\n\ndefaultFrozen\n\n,\n\n46\n\nmanager\n\n,\n\n46\n\nmanager\n\n,\n\n47\n\nreserve\n\n,\n\n47\n\nreserve\n\n,\n\n48\n\nfreeze\n\n,\n\n48\n\nfreeze\n\n,\n\n49\n\nclawback\n\n,\n\n49\n\nclawback\n\n,\n\n50\n\nunitName\n\n,\n\n50\n\nunitName\n\n,\n\n51\n\nassetName\n\n,\n\n51\n\nassetName\n\n,\n\n52\n\nassetURL\n\n,\n\n52\n\nassetURL\n\n,\n\n53\n\nassetMetadataHash\n\n53\n\nassetMetadataHash\n\n54\n\nparams\n\n54\n\nparams\n\n55\n\n)\n\n;\n\n55\n\n)\n\n;\n\n56\n\nconsole\n\n.\n\nlog\n\n(\n\n\"txn\"\n\n,\n\ntxn\n\n)\n\n;\n\n56\n\nconsole\n\n.\n\nlog\n\n(\n\n\"txn\"\n\n,\n\ntxn\n\n)\n\n;\n\n57\n\n57\n\n58\n\n// Sign Payload\n\n58\n\n// Sign Payload\n\n59\n\nlet\n\nencodedTxn\n\n=\n\nalgosdk\n\n.\n\nencodeObj\n\n(\n\ntxn\n\n.\n\nget_obj_for_encoding\n\n(\n\n)\n\n)\n\n;\n\n59\n\nlet\n\nencodedTxn\n\n=\n\nalgosdk\n\n.\n\nencodeObj\n\n(\n\ntxn\n\n.\n\nget_obj_for_encoding\n\n(\n\n)\n\n)\n\n;\n\n60\n\nconst\n\nsignedTxn\n\n=\n\nawait\n\nmagic\n\n.\n\nalgorand\n\n.\n\nsignTransaction\n\n(\n\nencodedTxn\n\n)\n\n;\n\n60\n\nconst\n\nsignedTxn\n\n=\n\nawait\n\nmagic\n\n.\n\nalgorand\n\n.\n\nsignTransaction\n\n(\n\nencodedTxn\n\n)\n\n;\n\n61\n\n// Broadcast Tx\n\n61\n\n// Broadcast Tx\n\n62\n\nconst\n\nhash\n\n=\n\nawait\n\nalgodClient\n\n.\n\nsendRawTransaction\n\n(\n\nsignedTxn\n\n.\n\nblob\n\n)\n\n.\n\ndo\n\n(\n\n)\n\n;\n\n62\n\nconst\n\nhash\n\n=\n\nawait\n\nalgodClient\n\n.\n\nsendRawTransaction\n\n(\n\nsignedTxn\n\n.\n\nblob\n\n)\n\n.\n\ndo\n\n(\n\n)\n\n;\n\n63\n\nconsole\n\n.\n\nlog\n\n(\n\n\"hash\"\n\n,\n\nhash\n\n)\n\n;\n\n63\n\nconsole\n\n.\n\nlog\n\n(\n\n\"hash\"\n\n,\n\nhash\n\n)\n\n;\n\n64\n\n// Wait for confirmation\n\n64\n\n// Wait for confirmation\n\n65\n\nconst\n\nreceipt\n\n=\n\nawait\n\nwaitForConfirmation\n\n(\n\nalgodClient\n\n,\n\nhash\n\n.\n\ntxId\n\n,\n\n4\n\n)\n\n;\n\n65\n\nconst\n\nreceipt\n\n=\n\nawait\n\nwaitForConfirmation\n\n(\n\nalgodClient\n\n,\n\nhash\n\n.\n\ntxId\n\n,\n\n4\n\n)\n\n;\n\n66\n\nconsole\n\n.\n\nlog\n\n(\n\n\"receipt\"\n\n,\n\nreceipt\n\n)\n\n;\n\n66\n\nconsole\n\n.\n\nlog\n\n(\n\n\"receipt\"\n\n,\n\nreceipt\n\n)\n\n;\n\n67\n\n}\n\n;\n\n67\n\n}\n\n;\n\n68\n\n68\n\n69\n\nconst\n\nsendAssetTransferTransaction\n\n=\n\nasync\n\n(\n\n)\n\n=>\n\n{\n\n69\n\nconst\n\nsendAssetTransferTransaction\n\n=\n\nasync\n\n(\n\n)\n\n=>\n\n{\n\n70\n\n// Construct Payload\n\n70\n\n// Construct Payload\n\n71\n\nlet\n\nparams\n\n=\n\nawait\n\nalgosdk\n\n.\n\ngetTransactionParams\n\n(\n\n)\n\n.\n\ndo\n\n(\n\n)\n\n;\n\n71\n\nlet\n\nparams\n\n=\n\nawait\n\nalgosdk\n\n.\n\ngetTransactionParams\n\n(\n\n)\n\n.\n\ndo\n\n(\n\n)\n\n;\n\n72\n\nlet\n\ntxn\n\n=\n\nalgosdk\n\n.\n\nmakeAssetTransferTxnWithSuggestedParams\n\n(\n\n72\n\nlet\n\ntxn\n\n=\n\nalgosdk\n\n.\n\nmakeAssetTransferTxnWithSuggestedParams\n\n(\n\n73\n\nfrom\n\n,\n\n73\n\nfrom\n\n,\n\n74\n\nto\n\n,\n\n74\n\nto\n\n,\n\n75\n\ncloseRemainderTo\n\n,\n\n75\n\ncloseRemainderTo\n\n,\n\n76\n\nrevocationTarget\n\n,\n\n76\n\nrevocationTarget\n\n,\n\n77\n\namount\n\n,\n\n77\n\namount\n\n,\n\n78\n\nnote\n\n,\n\n78\n\nnote\n\n,\n\n79\n\nassetIndex\n\n,\n\n// can get from from acfg tx receipt\n\n79\n\nassetIndex\n\n,\n\n// can get from from acfg tx receipt\n\n80\n\nparams\n\n80\n\nparams\n\n81\n\n)\n\n;\n\n81\n\n)\n\n;\n\n82\n\n82\n\n83\n\n// Sign Payload\n\n83\n\n// Sign Payload\n\n84\n\nlet\n\nencodedTxn\n\n=\n\nalgosdk\n\n.\n\nencodeObj\n\n(\n\ntxn\n\n.\n\nget_obj_for_encoding\n\n(\n\n)\n\n)\n\n;\n\n84\n\nlet\n\nencodedTxn\n\n=\n\nalgosdk\n\n.\n\nencodeObj\n\n(\n\ntxn\n\n.\n\nget_obj_for_encoding\n\n(\n\n)\n\n)\n\n;\n\n85\n\nconst\n\nsignedTxn\n\n=\n\nawait\n\nmagic\n\n.\n\nalgorand\n\n.\n\nsignTransaction\n\n(\n\nencodedTxn\n\n)\n\n;\n\n85\n\nconst\n\nsignedTxn\n\n=\n\nawait\n\nmagic\n\n.\n\nalgorand\n\n.\n\nsignTransaction\n\n(\n\nencodedTxn\n\n)\n\n;\n\n86\n\n// Broadcast Tx\n\n86\n\n// Broadcast Tx\n\n87\n\nconst\n\nhash\n\n=\n\nawait\n\nalgosdk\n\n.\n\nsendRawTransaction\n\n(\n\nsignedTxn\n\n.\n\nblob\n\n)\n\n.\n\ndo\n\n(\n\n)\n\n;\n\n87\n\nconst\n\nhash\n\n=\n\nawait\n\nalgosdk\n\n.\n\nsendRawTransaction\n\n(\n\nsignedTxn\n\n.\n\nblob\n\n)\n\n.\n\ndo\n\n(\n\n)\n\n;\n\n88\n\nconsole\n\n.\n\nlog\n\n(\n\n\"hash\"\n\n,\n\nhash\n\n)\n\n;\n\n88\n\nconsole\n\n.\n\nlog\n\n(\n\n\"hash\"\n\n,\n\nhash\n\n)\n\n;\n\n89\n\n// Wait for confirmation\n\n89\n\n// Wait for confirmation\n\n90\n\nconst\n\nreceipt\n\n=\n\nawait\n\nwaitForConfirmation\n\n(\n\nalgosdk\n\n,\n\nhash\n\n.\n\ntxId\n\n,\n\n4\n\n)\n\n;\n\n90\n\nconst\n\nreceipt\n\n=\n\nawait\n\nwaitForConfirmation\n\n(\n\nalgosdk\n\n,\n\nhash\n\n.\n\ntxId\n\n,\n\n4\n\n)\n\n;\n\n91\n\nconsole\n\n.\n\nlog\n\n(\n\n\"receipt\"\n\n,\n\nreceipt\n\n)\n\n;\n\n91\n\nconsole\n\n.\n\nlog\n\n(\n\n\"receipt\"\n\n,\n\nreceipt\n\n)\n\n;\n\n92\n\n}\n\n;\n\n92\n\n}\n\n;", "explanation": "The section titled '# Sign Transaction' from the Magic Labs embedded wallet documentation deals with the process of signing a standard Algorand blockchain transaction.\n\n**Main Purpose:**\nThe main purpose of the `signTransaction()` method is to sign an encoded transaction payload with the user's wallet private key.\n\n**How it works:**\nTo sign a transaction, the following steps are involved:\n\n1. **Construct the transaction payload:** The app creates a transaction payload, which includes the transaction details such as sender, receiver, amount, and other relevant information.\n2. **Encode the transaction payload:** The transaction payload is then encoded into a binary format that can be sent to the Algorand network.\n3. **Sign the encoded transaction payload:** The encoded transaction payload is sent to the user's wallet for signing.\n4. **Get the signed transaction:** Once the user's wallet signs the transaction, the **signed** transaction is returned to the app.\n5. **Broadcast the signed transaction:** The app can then broadcast the signed transaction to the Algorand network, which will process and confirm the transaction.\n\n**Implementation:**\nIn the documentation code, the `signTransaction()` method is called on the `magic.algorand` object, passing in the encoded transaction payload. The method returns a promise that resolves with the signed transaction.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/other/algorand#chunk-5", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nNote that the Magic Algorand extension follows the method names and conventions by Algorand's Javascript SDK. To sign a standard Algorand blockchain Bid, you can call the magic.algorand.signBid() method.\n\nAlgorand's Javascript SDK\n\nmagic.algorand.signBid()\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\nimport\n\n{\n\nAlgorandExtension\n\n}\n\nfrom\n\n'@magic-ext/algorand'\n\n;\n\n02\n\nimport\n\n{\n\nAlgorandExtension\n\n}\n\nfrom\n\n'@magic-ext/algorand'\n\n;\n\n03\n\n03\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_API_KEY'\n\n,\n\n{\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_API_KEY'\n\n,\n\n{\n\n05\n\nextensions\n\n:\n\n{\n\n05\n\nextensions\n\n:\n\n{\n\n06\n\nalgorand\n\n:\n\nnew\n\nAlgorandExtension\n\n(\n\n{\n\n06\n\nalgorand\n\n:\n\nnew\n\nAlgorandExtension\n\n(\n\n{\n\n07\n\nrpcUrl\n\n:\n\n''\n\n,\n\n07\n\nrpcUrl\n\n:\n\n''\n\n,\n\n08\n\n}\n\n)\n\n,\n\n08\n\n}\n\n)\n\n,\n\n09\n\n}\n\n,\n\n09\n\n}\n\n,\n\n10\n\n}\n\n)\n\n;\n\n10\n\n}\n\n)\n\n;\n\n11\n\n11\n\n12\n\nconst\n\nbid\n\n=\n\n{\n\n12\n\nconst\n\nbid\n\n=\n\n{\n\n13\n\nbidderKey\n\n:\n\n'IB3NJALXLDX5JLYCD4TMTMLVCKDRZNS4JONHMIWD6XM7DSKYR7MWHI6I7U'\n\n,\n\n13\n\nbidderKey\n\n:\n\n'IB3NJALXLDX5JLYCD4TMTMLVCKDRZNS4JONHMIWD6XM7DSKYR7MWHI6I7U'\n\n,\n\n14\n\nauctionKey\n\n:\n\n'7ZUECA7HFLZTXENRV24SHLU4AVPUTMTTDUFUBNBD64C73F3UHRTHAIOF6Q'\n\n,\n\n14\n\nauctionKey\n\n:\n\n'7ZUECA7HFLZTXENRV24SHLU4AVPUTMTTDUFUBNBD64C73F3UHRTHAIOF6Q'\n\n,\n\n15\n\nbidAmount\n\n:\n\n1000\n\n,\n\n15\n\nbidAmount\n\n:\n\n1000\n\n,\n\n16\n\nmaxPrice\n\n:\n\n10\n\n,\n\n16\n\nmaxPrice\n\n:\n\n10\n\n,\n\n17\n\nbidID\n\n:\n\n2\n\n,\n\n17\n\nbidID\n\n:\n\n2\n\n,\n\n18\n\nauctionID\n\n:\n\n56\n\n,\n\n18\n\nauctionID\n\n:\n\n56\n\n,\n\n19\n\n}\n\n;\n\n19\n\n}\n\n;\n\n20\n\n20\n\n21\n\nconst\n\ntx\n\n=\n\nawait\n\nmagic\n\n.\n\nalgorand\n\n.\n\nsignBid\n\n(\n\nbid\n\n)\n\n;\n\n21\n\nconst\n\ntx\n\n=\n\nawait\n\nmagic\n\n.\n\nalgorand\n\n.\n\nsignBid\n\n(\n\nbid\n\n)\n\n;\n\n22\n\n22\n\n23\n\nconsole\n\n.\n\nlog\n\n(\n\n'signed bid'\n\n,\n\ntx\n\n)\n\n;\n\n23\n\nconsole\n\n.\n\nlog\n\n(\n\n'signed bid'\n\n,\n\ntx\n\n)\n\n;", "explanation": "**#Sign Bid Documentation Overview**\n\nThe `signBid` method is a part of the Magic Labs Algorand extension, designed to facilitate the signing of standard Algorand blockchain bids. The primary purpose of this method is to enable you to securely create and sign a bid transaction on the Algorand blockchain, ensuring the authenticity and integrity of the transaction.\n\n**Key Aspects of the `signBid` Method:**\n\n1. **Secure Transaction Creation**: The method generates a signed bid transaction, which includes the bidder's key, auction details, and bid amount.\n2. **Integration with Algorand's SDK**: The `signBid` method follows Algorand's JavaScript SDK conventions, ensuring seamless integration with Algorand's blockchain services.\n3. **Magic Labs Extension**: The method utilizes the Magic Labs Algorand extension, which provides a convenient and secure way to interact with the Algorand blockchain.\n\n**Main Purpose:**\n\nThe `signBid` method is designed to simplify the process of creating and signing Algorand blockchain bids. With this method, you can securely sign a bid transaction, which can be subsequently transmitted to the Algorand blockchain for processing.\n\n**Example Usage:**\n\nThe provided code snippet demonstrates the usage of the `signBid` method. It imports the necessary dependencies, creates a Magic instance with an API key, and initializes the Algorand extension. The code then defines a bid object with relevant details and uses the `signBid` method to generate a signed transaction. The resulting signed transaction is logged to the console.\n\nBy using the `signBid` method, you can ensure a secure and efficient way to interact with the Algorand blockchain, streamlining the process of creating and signing bid transactions.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/other/algorand#chunk-6", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nTo sign a standard Algorand blockchain Group transaction with magic user, you can call the magic.algorand.signGroupTransaction() method.\n\nmagic.algorand.signGroupTransaction()\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n\"magic-sdk\"\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n\"magic-sdk\"\n\n;\n\n02\n\nimport\n\n{\n\nAlgorandExtension\n\n}\n\nfrom\n\n\"@magic-ext/algorand\"\n\n;\n\n02\n\nimport\n\n{\n\nAlgorandExtension\n\n}\n\nfrom\n\n\"@magic-ext/algorand\"\n\n;\n\n03\n\nconst\n\nalgosdk\n\n=\n\nrequire\n\n(\n\n'algosdk'\n\n)\n\n;\n\n03\n\nconst\n\nalgosdk\n\n=\n\nrequire\n\n(\n\n'algosdk'\n\n)\n\n;\n\n04\n\n04\n\n05\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_API_KEY'\n\n,\n\n{\n\n05\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_API_KEY'\n\n,\n\n{\n\n06\n\nextensions\n\n:\n\n{\n\n06\n\nextensions\n\n:\n\n{\n\n07\n\nalgorand\n\n:\n\nnew\n\nAlgorandExtension\n\n(\n\n{\n\n07\n\nalgorand\n\n:\n\nnew\n\nAlgorandExtension\n\n(\n\n{\n\n08\n\nrpcUrl\n\n:\n\n''\n\n08\n\nrpcUrl\n\n:\n\n''\n\n09\n\n}\n\n)\n\n09\n\n}\n\n)\n\n10\n\n}\n\n10\n\n}\n\n11\n\n}\n\n)\n\n;\n\n11\n\n}\n\n)\n\n;\n\n12\n\n12\n\n13\n\nlet\n\nclient\n\n=\n\nnull\n\n;\n\n13\n\nlet\n\nclient\n\n=\n\nnull\n\n;\n\n14\n\nasync\n\nfunction\n\nsetupClient\n\n(\n\n)\n\n{\n\n14\n\nasync\n\nfunction\n\nsetupClient\n\n(\n\n)\n\n{\n\n15\n\nif\n\n(\n\nclient\n\n==\n\nnull\n\n)\n\n{\n\n15\n\nif\n\n(\n\nclient\n\n==\n\nnull\n\n)\n\n{\n\n16\n\nconst\n\ntoken\n\n=\n\n{\n\n16\n\nconst\n\ntoken\n\n=\n\n{\n\n17\n\n\"x-api-key\"\n\n:\n\n\"x api key\"\n\n17\n\n\"x-api-key\"\n\n:\n\n\"x api key\"\n\n18\n\n}\n\n;\n\n18\n\n}\n\n;\n\n19\n\nconst\n\nserver\n\n=\n\n\"algorand rpc url\"\n\n;\n\n19\n\nconst\n\nserver\n\n=\n\n\"algorand rpc url\"\n\n;\n\n20\n\nconst\n\nport\n\n=\n\n''\n\n;\n\n20\n\nconst\n\nport\n\n=\n\n''\n\n;\n\n21\n\nlet\n\nalgodClient\n\n=\n\nnew\n\nalgosdk\n\n.\n\nAlgodv2\n\n(\n\ntoken\n\n,\n\nserver\n\n,\n\nport\n\n)\n\n;\n\n21\n\nlet\n\nalgodClient\n\n=\n\nnew\n\nalgosdk\n\n.\n\nAlgodv2\n\n(\n\ntoken\n\n,\n\nserver\n\n,\n\nport\n\n)\n\n;\n\n22\n\nclient\n\n=\n\nalgodClient\n\n;\n\n22\n\nclient\n\n=\n\nalgodClient\n\n;\n\n23\n\n}\n\nelse\n\n{\n\n23\n\n}\n\nelse\n\n{\n\n24\n\nreturn\n\nclient\n\n;\n\n24\n\nreturn\n\nclient\n\n;\n\n25\n\n}\n\n25\n\n}\n\n26\n\nreturn\n\nclient\n\n;\n\n26\n\nreturn\n\nclient\n\n;\n\n27\n\n}\n\n27\n\n}\n\n28\n\n28\n\n29\n\n29\n\n30\n\nlet\n\nalgodClient\n\n=\n\nawait\n\nsetupClient\n\n(\n\n)\n\n;\n\n30\n\nlet\n\nalgodClient\n\n=\n\nawait\n\nsetupClient\n\n(\n\n)\n\n;\n\n31\n\n31\n\n32\n\nlet\n\nparams\n\n=\n\nawait\n\nalgodClient\n\n.\n\ngetTransactionParams\n\n(\n\n)\n\n.\n\ndo\n\n(\n\n)\n\n;\n\n32\n\nlet\n\nparams\n\n=\n\nawait\n\nalgodClient\n\n.\n\ngetTransactionParams\n\n(\n\n)\n\n.\n\ndo\n\n(\n\n)\n\n;\n\n33\n\n33\n\n34\n\nconst\n\ntxns\n\n=\n\n[\n\n{\n\n34\n\nconst\n\ntxns\n\n=\n\n[\n\n{\n\n35\n\nfrom\n\n:\n\n'magic user public address'\n\n,\n\n35\n\nfrom\n\n:\n\n'magic user public address'\n\n,\n\n36\n\nto\n\n:\n\n'OFHW3Z3T2RML7J2S6KYGHPAMO6IQH76PE2HSCAIN5U5NBGXAIPBOY7DCHI'\n\n,\n\n36\n\nto\n\n:\n\n'OFHW3Z3T2RML7J2S6KYGHPAMO6IQH76PE2HSCAIN5U5NBGXAIPBOY7DCHI'\n\n,\n\n37\n\namount\n\n:\n\n1000000\n\n,\n\n37\n\namount\n\n:\n\n1000000\n\n,\n\n38\n\ncloseRemainderTo\n\n:\n\nundefined\n\n,\n\n38\n\ncloseRemainderTo\n\n:\n\nundefined\n\n,\n\n39\n\nnote\n\n:\n\nundefined\n\n,\n\n39\n\nnote\n\n:\n\nundefined\n\n,\n\n40\n\nsuggestedParams\n\n:\n\nparams\n\n,\n\n40\n\nsuggestedParams\n\n:\n\nparams\n\n,\n\n41\n\n}\n\n,\n\n41\n\n}\n\n,\n\n42\n\n{\n\n42\n\n{\n\n43\n\nfrom\n\n:\n\n'magic user public address'\n\n,\n\n43\n\nfrom\n\n:\n\n'magic user public address'\n\n,\n\n44\n\nto\n\n:\n\n'XRKQBEV7FINQ66SYAFY33UYHOC4GRAICWI3V6V2TXLCQMPJBGGRHLG2E74'\n\n,\n\n44\n\nto\n\n:\n\n'XRKQBEV7FINQ66SYAFY33UYHOC4GRAICWI3V6V2TXLCQMPJBGGRHLG2E74'\n\n,\n\n45\n\namount\n\n:\n\n1000000\n\n,\n\n45\n\namount\n\n:\n\n1000000\n\n,\n\n46\n\ncloseRemainderTo\n\n:\n\nundefined\n\n,\n\n46\n\ncloseRemainderTo\n\n:\n\nundefined\n\n,\n\n47\n\nnote\n\n:\n\nundefined\n\n,\n\n47\n\nnote\n\n:\n\nundefined\n\n,\n\n48\n\nsuggestedParams\n\n:\n\nparams\n\n,\n\n48\n\nsuggestedParams\n\n:\n\nparams\n\n,\n\n49\n\n}\n\n49\n\n}\n\n50\n\n]\n\n50\n\n]\n\n51\n\n51\n\n52\n\nconst\n\nsignedTX\n\n=\n\nawait\n\nmagic\n\n.\n\nalgorand\n\n.\n\nsignGroupTransaction\n\n(\n\ntxns\n\n)\n\n;\n\n52\n\nconst\n\nsignedTX\n\n=\n\nawait\n\nmagic\n\n.\n\nalgorand\n\n.\n\nsignGroupTransaction\n\n(\n\ntxns\n\n)\n\n;\n\n53\n\n53\n\n54\n\nconsole\n\n.\n\nlog\n\n(\n\n\"signedTX\"\n\n,\n\nsignedTX\n\n)\n\n;\n\n54\n\nconsole\n\n.\n\nlog\n\n(\n\n\"signedTX\"\n\n,\n\nsignedTX\n\n)\n\n;", "explanation": "**#Sign Group Transaction**\n\nThe `magic.algorand.signGroupTransaction()` method is used to sign a Group transaction on the Algorand blockchain using the Magic Labs embedded wallet.\n\n**What is a Group Transaction?**\n\nA Group transaction is a type of transaction on the Algorand blockchain that allows multiple transactions to be combined into a single transaction. This can improve efficiency and reduce the cost of transactions.\n\n**Purpose of `magic.algorand.signGroupTransaction()`**\n\nThe `signGroupTransaction()` method is used to sign a Group transaction created using the Algorand Extension, `@magic-ext/algorand`. This method takes a array of transactions ( `txns` ) as an argument and returns the signed Group transaction ( `signedTX` ).\n\n**Key Steps:**\n\n1. Create a new instance of the Magic Labs embedded wallet using your API key.\n2. Set up a client to interact with the Algorand blockchain using the `setupClient()` method.\n3. Get the transaction parameters using the `getTransactionParams()` method.\n4. Create a Group transaction by combining multiple transactions into a single transaction.\n5. Use the `signGroupTransaction()` method to sign the Group transaction.\n\n**Example Use Case:**\n\nThis example shows how to use the `signGroupTransaction()` method to sign a Group transaction that transfers 1 million Algo to two different addresses. The signed transaction is then logged to the console.\n\n```javascript\nconst txns = [\n  {\n    from: 'magic user public address',\n    to: 'OFHW3Z3T2RML7J2S6KYGHPAMO6IQH76PE2HSCAIN5U5NBGXAIPBOY7DCHI',\n    amount: 1000000,\n    closeRemainderTo: undefined,\n    note: undefined,\n    suggestedParams: params\n  },\n  {\n    from: 'magic user public address',\n    to: 'XRKQBEV7FINQ66SYAFY33UYHOC4GRAICWI3V6V2TXLCQMPJBGGRHLG2E74',\n    amount: 1000000,\n    closeRemainderTo: undefined,\n    note: undefined,\n    suggestedParams: params\n  }\n];\n\nconst signedTX = await magic.algorand.signGroupTransaction(txns);\nconsole.log('signedTX', signedTX);\n```\n\nNote: This example assumes that you have already set up a Magic Labs embedded wallet and a client to interact with the Algorand blockchain using the `setupClient()` method.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/other/algorand#chunk-7", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nTo sign a standard Algorand blockchain Group transaction with magic user, you can call the magic.algorand.signGroupTransactionV2() method.\n\nmagic.algorand.signGroupTransactionV2()\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n\"magic-sdk\"\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n\"magic-sdk\"\n\n;\n\n02\n\nimport\n\n{\n\nAlgorandExtension\n\n}\n\nfrom\n\n\"@magic-ext/algorand\"\n\n;\n\n02\n\nimport\n\n{\n\nAlgorandExtension\n\n}\n\nfrom\n\n\"@magic-ext/algorand\"\n\n;\n\n03\n\nconst\n\nalgosdk\n\n=\n\nrequire\n\n(\n\n'algosdk'\n\n)\n\n;\n\n03\n\nconst\n\nalgosdk\n\n=\n\nrequire\n\n(\n\n'algosdk'\n\n)\n\n;\n\n04\n\n04\n\n05\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_API_KEY'\n\n,\n\n{\n\n05\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_API_KEY'\n\n,\n\n{\n\n06\n\nextensions\n\n:\n\n{\n\n06\n\nextensions\n\n:\n\n{\n\n07\n\nalgorand\n\n:\n\nnew\n\nAlgorandExtension\n\n(\n\n{\n\n07\n\nalgorand\n\n:\n\nnew\n\nAlgorandExtension\n\n(\n\n{\n\n08\n\nrpcUrl\n\n:\n\n'algorand rpc url'\n\n08\n\nrpcUrl\n\n:\n\n'algorand rpc url'\n\n09\n\n}\n\n)\n\n09\n\n}\n\n)\n\n10\n\n}\n\n10\n\n}\n\n11\n\n}\n\n)\n\n;\n\n11\n\n}\n\n)\n\n;\n\n12\n\n12\n\n13\n\n13\n\n14\n\nlet\n\nalgodClient\n\n=\n\nawait\n\nsetupClient\n\n(\n\n)\n\n;\n\n14\n\nlet\n\nalgodClient\n\n=\n\nawait\n\nsetupClient\n\n(\n\n)\n\n;\n\n15\n\n15\n\n16\n\nlet\n\nsuggestedParams\n\n=\n\nawait\n\nalgodClient\n\n.\n\ngetTransactionParams\n\n(\n\n)\n\n.\n\ndo\n\n(\n\n)\n\n;\n\n16\n\nlet\n\nsuggestedParams\n\n=\n\nawait\n\nalgodClient\n\n.\n\ngetTransactionParams\n\n(\n\n)\n\n.\n\ndo\n\n(\n\n)\n\n;\n\n17\n\n17\n\n18\n\nconst\n\ntxn1\n\n=\n\nalgosdk\n\n.\n\nmakePaymentTxnWithSuggestedParamsFromObject\n\n(\n\n{\n\n18\n\nconst\n\ntxn1\n\n=\n\nalgosdk\n\n.\n\nmakePaymentTxnWithSuggestedParamsFromObject\n\n(\n\n{\n\n19\n\nfrom\n\n:\n\npublicAddress\n\n,\n\n19\n\nfrom\n\n:\n\npublicAddress\n\n,\n\n20\n\nto\n\n:\n\n'OFHW3Z3T2RML7J2S6KYGHPAMO6IQH76PE2HSCAIN5U5NBGXAIPBOY7DCHI'\n\n,\n\n20\n\nto\n\n:\n\n'OFHW3Z3T2RML7J2S6KYGHPAMO6IQH76PE2HSCAIN5U5NBGXAIPBOY7DCHI'\n\n,\n\n21\n\namount\n\n:\n\n1000\n\n,\n\n21\n\namount\n\n:\n\n1000\n\n,\n\n22\n\nsuggestedParams\n\n,\n\n22\n\nsuggestedParams\n\n,\n\n23\n\n}\n\n)\n\n;\n\n23\n\n}\n\n)\n\n;\n\n24\n\n24\n\n25\n\nconst\n\ntxn2\n\n=\n\nalgosdk\n\n.\n\nmakePaymentTxnWithSuggestedParamsFromObject\n\n(\n\n{\n\n25\n\nconst\n\ntxn2\n\n=\n\nalgosdk\n\n.\n\nmakePaymentTxnWithSuggestedParamsFromObject\n\n(\n\n{\n\n26\n\nfrom\n\n:\n\npublicAddress\n\n,\n\n26\n\nfrom\n\n:\n\npublicAddress\n\n,\n\n27\n\nto\n\n:\n\n'XRKQBEV7FINQ66SYAFY33UYHOC4GRAICWI3V6V2TXLCQMPJBGGRHLG2E74'\n\n,\n\n27\n\nto\n\n:\n\n'XRKQBEV7FINQ66SYAFY33UYHOC4GRAICWI3V6V2TXLCQMPJBGGRHLG2E74'\n\n,\n\n28\n\namount\n\n:\n\n2000\n\n,\n\n28\n\namount\n\n:\n\n2000\n\n,\n\n29\n\nsuggestedParams\n\n,\n\n29\n\nsuggestedParams\n\n,\n\n30\n\n}\n\n)\n\n;\n\n30\n\n}\n\n)\n\n;\n\n31\n\n31\n\n32\n\nconst\n\ntxs\n\n=\n\n[\n\ntxn1\n\n,\n\ntxn2\n\n]\n\n;\n\n32\n\nconst\n\ntxs\n\n=\n\n[\n\ntxn1\n\n,\n\ntxn2\n\n]\n\n;\n\n33\n\nalgosdk\n\n.\n\nassignGroupID\n\n(\n\ntxs\n\n)\n\n;\n\n33\n\nalgosdk\n\n.\n\nassignGroupID\n\n(\n\ntxs\n\n)\n\n;\n\n34\n\n34\n\n35\n\nconst\n\ntxn1B64\n\n=\n\nBuffer\n\n.\n\nfrom\n\n(\n\ntxn1\n\n.\n\ntoByte\n\n(\n\n)\n\n)\n\n.\n\ntoString\n\n(\n\n'base64'\n\n)\n\n;\n\n35\n\nconst\n\ntxn1B64\n\n=\n\nBuffer\n\n.\n\nfrom\n\n(\n\ntxn1\n\n.\n\ntoByte\n\n(\n\n)\n\n)\n\n.\n\ntoString\n\n(\n\n'base64'\n\n)\n\n;\n\n36\n\nconst\n\ntxn2B64\n\n=\n\nBuffer\n\n.\n\nfrom\n\n(\n\ntxn2\n\n.\n\ntoByte\n\n(\n\n)\n\n)\n\n.\n\ntoString\n\n(\n\n'base64'\n\n)\n\n;\n\n36\n\nconst\n\ntxn2B64\n\n=\n\nBuffer\n\n.\n\nfrom\n\n(\n\ntxn2\n\n.\n\ntoByte\n\n(\n\n)\n\n)\n\n.\n\ntoString\n\n(\n\n'base64'\n\n)\n\n;\n\n37\n\n37\n\n38\n\nconst\n\ntxn\n\n=\n\n[\n\n38\n\nconst\n\ntxn\n\n=\n\n[\n\n39\n\n{\n\ntxn\n\n:\n\ntxn1B64\n\n}\n\n,\n\n39\n\n{\n\ntxn\n\n:\n\ntxn1B64\n\n}\n\n,\n\n40\n\n{\n\ntxn\n\n:\n\ntxn2B64\n\n}\n\n,\n\n40\n\n{\n\ntxn\n\n:\n\ntxn2B64\n\n}\n\n,\n\n41\n\n]\n\n;\n\n41\n\n]\n\n;\n\n42\n\n42\n\n43\n\nconst\n\nsignedTX\n\n=\n\nawait\n\nmagic\n\n.\n\nalgorand\n\n.\n\nsignGroupTransactionV2\n\n(\n\ntxn\n\n)\n\n;\n\n43\n\nconst\n\nsignedTX\n\n=\n\nawait\n\nmagic\n\n.\n\nalgorand\n\n.\n\nsignGroupTransactionV2\n\n(\n\ntxn\n\n)\n\n;\n\n44\n\n44\n\n45\n\nconsole\n\n.\n\nlog\n\n(\n\n'sign group transaction v2'\n\n,\n\nsignedTX\n\n)\n\n;\n\n45\n\nconsole\n\n.\n\nlog\n\n(\n\n'sign group transaction v2'\n\n,\n\nsignedTX\n\n)\n\n;", "explanation": "The section of documentation titled '#Sign Group Transaction V2' provides instructions on how to sign a Group transaction on the Algorand blockchain using the Magic Labs embedded wallet.\n\n**Purpose:**\n\nThe main purpose of this function is to sign a set of transactions as a group transaction on the Algorand blockchain, using the user's private key managed by Magic Labs. This allows for the creation of a single transaction that includes multiple individual transactions, streamlining the process of sending multiple payments or executing multiple smart contracts.\n\n**Key aspects:**\n\n1. **Creating individual transactions:** The first part of the code creates two individual transactions (`txn1` and `txn2`) using the `algosdk` library, which includes the sender's public address, recipient addresses, and the amounts being transferred.\n2. **Assigning Group ID:** The individual transactions are then assigned a Group ID using the `assignGroupID` method from the `algosdk` library.\n3. **Encoding transactions:** The transactions are then converted to Base64-encoded strings (`txn1B64` and `txn2B64`) using the `Buffer` class from Node.js.\n4. **Creating a Group transaction:** The Base64-encoded transactions are then combined into a single array (`txn`), which represents the Group transaction.\n5. **Signing the Group transaction:** The `signGroupTransactionV2` method from the Magic Labs library is then used to sign the Group transaction using the user's private key. This method takes the Base64-encoded transactions as input and returns the signed Group transaction as output.\n\n**Output:**\n\nThe final output of this function is the signed Group transaction, which can be logged to the console using `console.log`. The signed Group transaction can then be sent to the Algorand network to execute the multiple individual transactions as a single transaction.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/other/algorand#chunk-8", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 Algorand Developer Portal\n\nAlgorand Developer Portal", "explanation": "In the Magic Labs embedded wallet documentation for the Algorand blockchain, the '#Resources' section is a collection of additional information and tools related to developing with Algorand. \n\nThe main purpose of this section is to provide direct access to a comprehensive user guide containing all the developer tools, tutorials, and FAQs required to work efficiently with Algorand. \n\nIn this case, the only listed resource is the:\n\n* Algorand Developer Portal: This is a go-to platform for learning about Algorand development. Here, users can gain access to essential tools, such as documentation, tutorials, toolkits, wallets, APIs, FAQs and more. It essentially serves as a single point of reference and connection to all things Algorand development. \n\nThe main purpose of mentioning this resource is to directly link customers interested in Algorand development to official tools and documentation, saving them time and enhancing their overall user experience.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/other/algorand#chunk-9", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "Learn how to use email to create EVM wallets with Magic and Next.js.\n\nMagic is a developer SDK that integrates with your application to enable passwordless Web3 onboarding (no seed phrases) and authentication using magic links (similar to Slack and Medium).\n\nMagic\n\nMagic enables blazing-fast, hardware-secured, passwordless login, Web3 onboarding, and access to over 20 blockchains with a few lines of code \u2014 even if you have an existing auth solution.\n\nThis guide takes you step by step through integrating a Magic Wallet into a Next.js application using the Magic SDK and Web3.js. Check out our quickstart if you want to skip the in-depth walkthrough.\n\nquickstart\n\nThe sections below walk through setting up a Next.js application, installing and using the Magic SDK, and creating basic components for authentication and EVM wallet interactions. If you would like to add Magic to an existing project, simply skip the first step of creating a new application and dive right into integrating Magic.\n\nThe code examples in this guide assume a Next.js 14 project that leverages Tailwind CSS for component styling. However, you may use a different framework and choice of styling. Just be sure to adjust the code examples accordingly.\n\nTo see our final code, you can check out this Github Repository or tinker directly in the browser with the Codesandbox version.\n\nGithub Repository\n\nCodesandbox", "explanation": "**Email OTP Wallets on EVM chains - Email OTP Wallets on EVM chains Overview**\n\nThis documentation section is about integrating Email OTP (One-Time Password) wallets on EVM (Ethereum Virtual Machine) chains using Magic and Next.js. \n\n**Main Purpose**\n\nThe main purpose of this guide is to provide a step-by-step walkthrough on how to:\n\n1. Set up a Next.js application\n2. Install and use the Magic SDK\n3. Create basic components for authentication and EVM wallet interactions\n4. Integrate Email OTP wallets into an EVM chain using Magic and Next.js\n\n**Key Features of Email OTP Wallets**\n\n* Passwordless Web3 onboarding\n* Authentication using magic links\n* Blazing-fast, hardware-secured login\n\n**Code Examples and Resources**\n\nThe guide includes code examples that are compatible with Next.js 14 projects using Tailwind CSS for component styling. However, the code can be adjusted to work with different frameworks and styling choices. The final code is available on GitHub and Codesandbox for reference and testing.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/guides/magic-evm-nextjs#chunk-1", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nWe'll begin by scaffolding a new application and installing relevant dependencies: Magic SDK and Web3.js.\n\n#\n\nIf you want to add Magic to an existing project, please skip this step.\n\nOpen a shell and run the following command:\n\nCopy\n\n01\n\nnpx create-next-app my-app --typescript\n\n01\n\nnpx create-next-app my-app --typescript\n\nWhen prompted, select TypeScript, Tailwind CSS, /src directory, and App Router.\n\n/src", "explanation": "# Explaining the 'Getting Started' Section\n\nThe '#Getting Started - #Create a New Next.js Application' section is about setting up a new project using the Next.js framework, specifically for an embedded wallet solution using Magic Labs.\n\n**Main Purpose:**\nThe main purpose of this section is to guide users through the process of creating a new Next.js application and initializing it with the necessary dependencies, including the Magic SDK and Web3.js.\n\n**Key Steps:**\n\n1. **Scaffolding a New Application**: This involves creating a new project structure using `npx create-next-app`.\n2. **Selecting Project Options**: When prompted, users need to select options like language (TypeScript), CSS framework (Tailwind CSS), project structure, and router type (App Router).\n3. **Installing Dependencies**: The next step is to install the necessary dependencies, including the Magic SDK and Web3.js, which are required for the embedded wallet solution.\n\n**Who Should Follow This Step:**\nThis section is primarily for users who want to start a new project from scratch. If you're adding Magic to an existing project, you can skip this step and proceed directly to the next section.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/guides/magic-evm-nextjs#chunk-2", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nNavigate to the project directory and install the Magic SDK and Web3.js as dependencies. You can do this with the following command:\n\nCopy\n\n01\n\nnpm\n\ninstall\n\nmagic-sdk web3\n\n01\n\nnpm\n\ninstall\n\nmagic-sdk web3", "explanation": "**Install Dependencies Section:**\n\nThe `#Install Dependencies` section is a step in the Magic Labs embedded wallet documentation that guides users through the process of setting up required dependencies for the Magic EVM project.\n\n**Main Purpose:**\n\nThe main purpose of this section is to instruct users to install the necessary packages (dependencies) that are needed for the Magic EVM project to function correctly.\n\n**Key Packages Installed:**\n\nIn this section, users are instructed to install two main packages:\n\n1. **Magic SDK**: This is the Magic Labs SDK (Software Development Kit) that provides a simple interface for interacting with the Magic Labs platform, allowing users to perform tasks such as user authentication and wallet management.\n2. **Web3.js**: This is a JavaScript library that provides a simple way to interact with the Ethereum blockchain. It is used to enable interactions between the Magic EVM project and the Ethereum blockchain.\n\n**Command to Install Dependencies:**\n\nTo install these packages, users run the following command in the project directory:\n```bash\nnpm install magic-sdk web3\n```\nThis command downloads and installs the Magic SDK and Web3.js packages, making them available for use in the project.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/guides/magic-evm-nextjs#chunk-3", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nNext, we'll set up a global state for our application using the React Context API. This global state will allow you to share state and functionality throughout your application without having to pass props down through multiple layers of components.\n\nSpecifically, we'll create two contexts: UserContext and MagicProvider. The UserContext will simply store the authenticated user's wallet address. The MagicProvider will store a Magic reference we can use to access the Magic SDK modules and a Web3 reference we can use to interact with the blockchain.\n\nUserContext\n\nMagicProvider\n\nUserContext\n\nMagicProvider\n\nMagic\n\nWeb3\n\n#\n\nCreate a new file in the src/app/context directory named MagicProvider.tsx. Open MagicProvider.tsx and paste the following code:\n\nsrc/app/context\n\nMagicProvider.tsx\n\nMagicProvider.tsx\n\nCopy\n\n01\n\n// src/app/context/MagicProvider.tsx\n\n01\n\n// src/app/context/MagicProvider.tsx\n\n02\n\n02\n\n03\n\n\"use client\"\n\n03\n\n\"use client\"\n\n04\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n\"magic-sdk\"\n\n04\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n\"magic-sdk\"\n\n05\n\nimport\n\n{\n\n05\n\nimport\n\n{\n\n06\n\nReactNode\n\n,\n\n06\n\nReactNode\n\n,\n\n07\n\ncreateContext\n\n,\n\n07\n\ncreateContext\n\n,\n\n08\n\nuseContext\n\n,\n\n08\n\nuseContext\n\n,\n\n09\n\nuseEffect\n\n,\n\n09\n\nuseEffect\n\n,\n\n10\n\nuseMemo\n\n,\n\n10\n\nuseMemo\n\n,\n\n11\n\nuseState\n\n,\n\n11\n\nuseState\n\n,\n\n12\n\n}\n\nfrom\n\n\"react\"\n\n12\n\n}\n\nfrom\n\n\"react\"\n\n13\n\nconst\n\n{\n\nWeb3\n\n}\n\n=\n\nrequire\n\n(\n\n\"web3\"\n\n)\n\n13\n\nconst\n\n{\n\nWeb3\n\n}\n\n=\n\nrequire\n\n(\n\n\"web3\"\n\n)\n\n14\n\n14\n\n15\n\ntype\n\nMagicContextType\n\n=\n\n{\n\n15\n\ntype\n\nMagicContextType\n\n=\n\n{\n\n16\n\nmagic\n\n:\n\nMagic\n\n|\n\nnull\n\n16\n\nmagic\n\n:\n\nMagic\n\n|\n\nnull\n\n17\n\nweb3\n\n:\n\ntypeof\n\nWeb3\n\n|\n\nnull\n\n17\n\nweb3\n\n:\n\ntypeof\n\nWeb3\n\n|\n\nnull\n\n18\n\n}\n\n18\n\n}\n\n19\n\n19\n\n20\n\nconst\n\nMagicContext\n\n=\n\ncreateContext\n\n<\n\nMagicContextType\n\n>\n\n(\n\n{\n\n20\n\nconst\n\nMagicContext\n\n=\n\ncreateContext\n\n<\n\nMagicContextType\n\n>\n\n(\n\n{\n\n21\n\nmagic\n\n:\n\nnull\n\n,\n\n21\n\nmagic\n\n:\n\nnull\n\n,\n\n22\n\nweb3\n\n:\n\nnull\n\n,\n\n22\n\nweb3\n\n:\n\nnull\n\n,\n\n23\n\n}\n\n)\n\n23\n\n}\n\n)\n\n24\n\n24\n\n25\n\nexport\n\nconst\n\nuseMagic\n\n=\n\n(\n\n)\n\n=>\n\nuseContext\n\n(\n\nMagicContext\n\n)\n\n25\n\nexport\n\nconst\n\nuseMagic\n\n=\n\n(\n\n)\n\n=>\n\nuseContext\n\n(\n\nMagicContext\n\n)\n\n26\n\n26\n\n27\n\nconst\n\nMagicProvider\n\n=\n\n(\n\n{\n\nchildren\n\n}\n\n:\n\n{\n\nchildren\n\n:\n\nReactNode\n\n}\n\n)\n\n=>\n\n{\n\n27\n\nconst\n\nMagicProvider\n\n=\n\n(\n\n{\n\nchildren\n\n}\n\n:\n\n{\n\nchildren\n\n:\n\nReactNode\n\n}\n\n)\n\n=>\n\n{\n\n28\n\nconst\n\n[\n\nmagic\n\n,\n\nsetMagic\n\n]\n\n=\n\nuseState\n\n<\n\nMagic\n\n|\n\nnull\n\n>\n\n(\n\nnull\n\n)\n\n28\n\nconst\n\n[\n\nmagic\n\n,\n\nsetMagic\n\n]\n\n=\n\nuseState\n\n<\n\nMagic\n\n|\n\nnull\n\n>\n\n(\n\nnull\n\n)\n\n29\n\nconst\n\n[\n\nweb3\n\n,\n\nsetWeb3\n\n]\n\n=\n\nuseState\n\n<\n\ntypeof\n\nWeb3\n\n|\n\nnull\n\n>\n\n(\n\nnull\n\n)\n\n29\n\nconst\n\n[\n\nweb3\n\n,\n\nsetWeb3\n\n]\n\n=\n\nuseState\n\n<\n\ntypeof\n\nWeb3\n\n|\n\nnull\n\n>\n\n(\n\nnull\n\n)\n\n30\n\n30\n\n31\n\nuseEffect\n\n(\n\n(\n\n)\n\n=>\n\n{\n\n31\n\nuseEffect\n\n(\n\n(\n\n)\n\n=>\n\n{\n\n32\n\nif\n\n(\n\nprocess\n\n.\n\nenv\n\n.\n\nNEXT_PUBLIC_MAGIC_API_KEY\n\n)\n\n{\n\n32\n\nif\n\n(\n\nprocess\n\n.\n\nenv\n\n.\n\nNEXT_PUBLIC_MAGIC_API_KEY\n\n)\n\n{\n\n33\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\nprocess\n\n.\n\nenv\n\n.\n\nNEXT_PUBLIC_MAGIC_API_KEY\n\n||\n\n\"\"\n\n,\n\n{\n\n33\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\nprocess\n\n.\n\nenv\n\n.\n\nNEXT_PUBLIC_MAGIC_API_KEY\n\n||\n\n\"\"\n\n,\n\n{\n\n34\n\nnetwork\n\n:\n\n{\n\n34\n\nnetwork\n\n:\n\n{\n\n35\n\nrpcUrl\n\n:\n\n\"<https://rpc2.sepolia.org/>\"\n\n,\n\n35\n\nrpcUrl\n\n:\n\n\"<https://rpc2.sepolia.org/>\"\n\n,\n\n36\n\nchainId\n\n:\n\n11155111\n\n,\n\n36\n\nchainId\n\n:\n\n11155111\n\n,\n\n37\n\n}\n\n,\n\n37\n\n}\n\n,\n\n38\n\n}\n\n)\n\n38\n\n}\n\n)\n\n39\n\n39\n\n40\n\nsetMagic\n\n(\n\nmagic\n\n)\n\n40\n\nsetMagic\n\n(\n\nmagic\n\n)\n\n41\n\nsetWeb3\n\n(\n\nnew\n\nWeb3\n\n(\n\n(\n\nmagic\n\nas\n\nany\n\n)\n\n.\n\nrpcProvider\n\n)\n\n)\n\n41\n\nsetWeb3\n\n(\n\nnew\n\nWeb3\n\n(\n\n(\n\nmagic\n\nas\n\nany\n\n)\n\n.\n\nrpcProvider\n\n)\n\n)\n\n42\n\n}\n\n42\n\n}\n\n43\n\n}\n\n,\n\n[\n\n]\n\n)\n\n43\n\n}\n\n,\n\n[\n\n]\n\n)\n\n44\n\n44\n\n45\n\nconst\n\nvalue\n\n=\n\nuseMemo\n\n(\n\n(\n\n)\n\n=>\n\n{\n\n45\n\nconst\n\nvalue\n\n=\n\nuseMemo\n\n(\n\n(\n\n)\n\n=>\n\n{\n\n46\n\nreturn\n\n{\n\n46\n\nreturn\n\n{\n\n47\n\nmagic\n\n,\n\n47\n\nmagic\n\n,\n\n48\n\nweb3\n\n,\n\n48\n\nweb3\n\n,\n\n49\n\n}\n\n49\n\n}\n\n50\n\n}\n\n,\n\n[\n\nmagic\n\n,\n\nweb3\n\n]\n\n)\n\n50\n\n}\n\n,\n\n[\n\nmagic\n\n,\n\nweb3\n\n]\n\n)\n\n51\n\n51\n\n52\n\nreturn\n\n<\n\nMagicContext\n\n.\n\nProvider\n\nvalue\n\n=\n\n{\n\nvalue\n\n}\n\n>\n\n{\n\nchildren\n\n}\n\n<\n\n/\n\nMagicContext\n\n.\n\nProvider\n\n>\n\n52\n\nreturn\n\n<\n\nMagicContext\n\n.\n\nProvider\n\nvalue\n\n=\n\n{\n\nvalue\n\n}\n\n>\n\n{\n\nchildren\n\n}\n\n<\n\n/\n\nMagicContext\n\n.\n\nProvider\n\n>\n\n53\n\n}\n\n53\n\n}\n\n54\n\n54\n\n55\n\nexport\n\ndefault\n\nMagicProvider\n\n55\n\nexport\n\ndefault\n\nMagicProvider\n\nThe above code defines MagicContext and exports a corresponding MagicProvider and useMagic hook. The MagicProvider initializes and surfaces both an instance of Magic and Web3. Subsequent sections will use the useMagichook to access both of these objects.\n\nMagicContext\n\nMagicProvider\n\nuseMagic\n\nMagicProvider\n\nMagic\n\nWeb3\n\nuseMagic\n\nThe Magic initialization requires an environment variable NEXT_PUBLIC_MAGIC_API_KEY. You should add this environment variable to your .env.local file with a valid Magic Publishable API Key. You can find this in your Magic Dashboard.\n\nMagic\n\nNEXT_PUBLIC_MAGIC_API_KEY\n\n.env.local\n\nMagic Dashboard\n\nAdditionally, the above code snippet initializes Magic with a public Sepolia Testnet URL. You can point the instance to a different chain by modifying the URL and Chain ID. Magic seamlessly supports over 25 different blockchains.\n\nMagic\n\n25 different blockchains\n\nFinally, Web3 is initialized using the RPC provider from the newly initialized Magic instance. If you plan to use your own RPC provider, please follow the instructions to allowlist your node URL.\n\nWeb3\n\nMagic\n\nthe instructions to allowlist your node URL", "explanation": "The provided documentation section is titled '#Set Up Global State - #MagicProvider Context' from the Magic SDK guide for Next.js. \n\nIn this section, the code sets up a global state for the application using the React Context API. This allows you to share state and functionality throughout your application without having to pass props down through multiple layers of components.\n\nThere are two main contexts created: `UserContext` and `MagicProvider`. The `UserContext` stores the authenticated user's wallet address. The `MagicProvider` stores a `Magic` reference, which is used to access the Magic SDK modules, and a `Web3` reference, used to interact with the blockchain.\n\nThe main purpose of this code is to create a global state for the Magic wallets. It includes:\n\n1.  **Creating a Magic Context**: The code defines a `MagicContext` using the `createContext` function from React.\n2.  **Defining the Magic Context Type**: The code defines a type for the Magic context, which has two properties: `magic` and `web3`.\n3.  **Creating the MagicProvider**: The code defines a `MagicProvider` component, which is a wrapper for the `MagicContext.Provider`.\n4.  **Initializing Magic and Web3**: The code initializes the `Magic` instance using the environment variable `NEXT_PUBLIC_MAGIC_API_KEY` and the `Web3` instance using the RPC provider from the initialized `Magic` instance.\n\nTo use the MagicProvider, you need to include it as an ancestor component for your app, passing your app's root component as the `children`. This makes the Magic context available to all components within the app.\n\nHere's a simplified example of how you can use the MagicProvider:\n\n```jsx\nimport MagicProvider from './context/MagicProvider';\nimport App from './App';\n\nfunction MyApp() {\n  return (\n    <MagicProvider>\n      <App />\n    </MagicProvider>\n  );\n}\n```\n\nIn your `MagicProvider`, it initializes the `Magic` instance and `Web3` instance and stores them in the context. Then, any component within the app can use the `useMagic` hook to access these instances.\n\nFor example:\n\n```jsx\nimport { useMagic } from '../context/MagicContext';\n\nfunction MyComponent() {\n  const { magic, web3 } = useMagic();\n\n  // Now you can use magic and web3 here\n}\n```\n\nThis allows you to use the Magic SDK and interact with the blockchain from any component within your app, making it easier to manage global state and handle wallet-related tasks.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/guides/magic-evm-nextjs#chunk-4", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nNext, create a new file in the src/app/context directory named UserContext.tsx. Open UserContext.tsx and paste the following code:\n\nsrc/app/context\n\nUserContext.tsx\n\nUserContext.tsx\n\nCopy\n\n01\n\n// src/app/context/UserContext.tsx\n\n01\n\n// src/app/context/UserContext.tsx\n\n02\n\n02\n\n03\n\n\"use client\"\n\n03\n\n\"use client\"\n\n04\n\nimport\n\nReact\n\n,\n\n{\n\ncreateContext\n\n,\n\nuseContext\n\n,\n\nuseEffect\n\n,\n\nuseState\n\n}\n\nfrom\n\n\"react\"\n\n04\n\nimport\n\nReact\n\n,\n\n{\n\ncreateContext\n\n,\n\nuseContext\n\n,\n\nuseEffect\n\n,\n\nuseState\n\n}\n\nfrom\n\n\"react\"\n\n05\n\nimport\n\n{\n\nuseMagic\n\n}\n\nfrom\n\n\"./MagicProvider\"\n\n05\n\nimport\n\n{\n\nuseMagic\n\n}\n\nfrom\n\n\"./MagicProvider\"\n\n06\n\n06\n\n07\n\n// Define the type for the user\n\n07\n\n// Define the type for the user\n\n08\n\ntype\n\nUser\n\n=\n\n{\n\n08\n\ntype\n\nUser\n\n=\n\n{\n\n09\n\naddress\n\n:\n\nstring\n\n09\n\naddress\n\n:\n\nstring\n\n10\n\n}\n\n10\n\n}\n\n11\n\n11\n\n12\n\n// Define the type for the user context.\n\n12\n\n// Define the type for the user context.\n\n13\n\ntype\n\nUserContextType\n\n=\n\n{\n\n13\n\ntype\n\nUserContextType\n\n=\n\n{\n\n14\n\nuser\n\n:\n\nUser\n\n|\n\nnull\n\n14\n\nuser\n\n:\n\nUser\n\n|\n\nnull\n\n15\n\nfetchUser\n\n:\n\n(\n\n)\n\n=>\n\nPromise\n\n<\n\nvoid\n\n>\n\n15\n\nfetchUser\n\n:\n\n(\n\n)\n\n=>\n\nPromise\n\n<\n\nvoid\n\n>\n\n16\n\n}\n\n16\n\n}\n\n17\n\n17\n\n18\n\n// Create a context for user data.\n\n18\n\n// Create a context for user data.\n\n19\n\nconst\n\nUserContext\n\n=\n\ncreateContext\n\n<\n\nUserContextType\n\n>\n\n(\n\n{\n\n19\n\nconst\n\nUserContext\n\n=\n\ncreateContext\n\n<\n\nUserContextType\n\n>\n\n(\n\n{\n\n20\n\nuser\n\n:\n\nnull\n\n,\n\n20\n\nuser\n\n:\n\nnull\n\n,\n\n21\n\nfetchUser\n\n:\n\nasync\n\n(\n\n)\n\n=>\n\n{\n\n}\n\n,\n\n21\n\nfetchUser\n\n:\n\nasync\n\n(\n\n)\n\n=>\n\n{\n\n}\n\n,\n\n22\n\n}\n\n)\n\n22\n\n}\n\n)\n\n23\n\n23\n\n24\n\n// Custom hook for accessing user context data.\n\n24\n\n// Custom hook for accessing user context data.\n\n25\n\nexport\n\nconst\n\nuseUser\n\n=\n\n(\n\n)\n\n=>\n\nuseContext\n\n(\n\nUserContext\n\n)\n\n25\n\nexport\n\nconst\n\nuseUser\n\n=\n\n(\n\n)\n\n=>\n\nuseContext\n\n(\n\nUserContext\n\n)\n\n26\n\n26\n\n27\n\n// Provider component that wraps parts of the app that need user context.\n\n27\n\n// Provider component that wraps parts of the app that need user context.\n\n28\n\nexport\n\nconst\n\nUserProvider\n\n=\n\n(\n\n{\n\nchildren\n\n}\n\n:\n\n{\n\nchildren\n\n:\n\nReact\n\n.\n\nReactNode\n\n}\n\n)\n\n=>\n\n{\n\n28\n\nexport\n\nconst\n\nUserProvider\n\n=\n\n(\n\n{\n\nchildren\n\n}\n\n:\n\n{\n\nchildren\n\n:\n\nReact\n\n.\n\nReactNode\n\n}\n\n)\n\n=>\n\n{\n\n29\n\n// Use the web3 context.\n\n29\n\n// Use the web3 context.\n\n30\n\nconst\n\n{\n\nweb3\n\n}\n\n=\n\nuseMagic\n\n(\n\n)\n\n30\n\nconst\n\n{\n\nweb3\n\n}\n\n=\n\nuseMagic\n\n(\n\n)\n\n31\n\n31\n\n32\n\n// Initialize user state to hold user's account information.\n\n32\n\n// Initialize user state to hold user's account information.\n\n33\n\nconst\n\n[\n\naddress\n\n,\n\nsetAddress\n\n]\n\n=\n\nuseState\n\n<\n\nstring\n\n|\n\nnull\n\n>\n\n(\n\nnull\n\n)\n\n33\n\nconst\n\n[\n\naddress\n\n,\n\nsetAddress\n\n]\n\n=\n\nuseState\n\n<\n\nstring\n\n|\n\nnull\n\n>\n\n(\n\nnull\n\n)\n\n34\n\n34\n\n35\n\n// Function to retrieve and set user's account.\n\n35\n\n// Function to retrieve and set user's account.\n\n36\n\nconst\n\nfetchUserAccount\n\n=\n\nasync\n\n(\n\n)\n\n=>\n\n{\n\n36\n\nconst\n\nfetchUserAccount\n\n=\n\nasync\n\n(\n\n)\n\n=>\n\n{\n\n37\n\n// Use Web3 to get user's accounts.\n\n37\n\n// Use Web3 to get user's accounts.\n\n38\n\nconst\n\naccounts\n\n=\n\nawait\n\nweb3\n\n?.\n\neth\n\n.\n\ngetAccounts\n\n(\n\n)\n\n38\n\nconst\n\naccounts\n\n=\n\nawait\n\nweb3\n\n?.\n\neth\n\n.\n\ngetAccounts\n\n(\n\n)\n\n39\n\n39\n\n40\n\n// Update the user state with the first account (if available), otherwise set to null.\n\n40\n\n// Update the user state with the first account (if available), otherwise set to null.\n\n41\n\nsetAddress\n\n(\n\naccounts\n\n?\n\naccounts\n\n[\n\n0\n\n]\n\n:\n\nnull\n\n)\n\n41\n\nsetAddress\n\n(\n\naccounts\n\n?\n\naccounts\n\n[\n\n0\n\n]\n\n:\n\nnull\n\n)\n\n42\n\n}\n\n42\n\n}\n\n43\n\n43\n\n44\n\n// Run fetchUserAccount function whenever the web3 instance changes.\n\n44\n\n// Run fetchUserAccount function whenever the web3 instance changes.\n\n45\n\nuseEffect\n\n(\n\n(\n\n)\n\n=>\n\n{\n\n45\n\nuseEffect\n\n(\n\n(\n\n)\n\n=>\n\n{\n\n46\n\nfetchUserAccount\n\n(\n\n)\n\n46\n\nfetchUserAccount\n\n(\n\n)\n\n47\n\n}\n\n,\n\n[\n\nweb3\n\n]\n\n)\n\n47\n\n}\n\n,\n\n[\n\nweb3\n\n]\n\n)\n\n48\n\n48\n\n49\n\nreturn\n\n(\n\n49\n\nreturn\n\n(\n\n50\n\n<\n\nUserContext\n\n.\n\nProvider\n\n50\n\n<\n\nUserContext\n\n.\n\nProvider\n\n51\n\nvalue\n\n=\n\n{\n\n{\n\n51\n\nvalue\n\n=\n\n{\n\n{\n\n52\n\nuser\n\n:\n\naddress\n\n?\n\n{\n\naddress\n\n:\n\naddress\n\n}\n\n:\n\nnull\n\n,\n\n52\n\nuser\n\n:\n\naddress\n\n?\n\n{\n\naddress\n\n:\n\naddress\n\n}\n\n:\n\nnull\n\n,\n\n53\n\nfetchUser\n\n:\n\nfetchUserAccount\n\n,\n\n53\n\nfetchUser\n\n:\n\nfetchUserAccount\n\n,\n\n54\n\n}\n\n}\n\n54\n\n}\n\n}\n\n55\n\n>\n\n55\n\n>\n\n56\n\n{\n\nchildren\n\n}\n\n56\n\n{\n\nchildren\n\n}\n\n57\n\n<\n\n/\n\nUserContext\n\n.\n\nProvider\n\n>\n\n57\n\n<\n\n/\n\nUserContext\n\n.\n\nProvider\n\n>\n\n58\n\n)\n\n58\n\n)\n\n59\n\n}\n\n59\n\n}\n\nBecause Magic integrates with existing libraries for blockchain interaction, like Web3.js, this code functions exactly as it would without Magic. It's simply a context that stores the connected account address as read from Web3. The fetchUserAccount function uses Web3 to retrieve the user's Ethereum accounts and saves the first account to the user state. This function is invoked whenever the Web3 instance changes and whenever our code calls the fetchUser function.\n\nWeb3\n\nfetchUserAccount\n\nWeb3\n\nWeb3\n\nfetchUser", "explanation": "The documentation section you're referring to is titled '#UserContext', which is a part of the Magic Labs embedded wallet documentation for Next.js. \n\n**What is the UserContext?**\n\nThe UserContext is a React Context API that stores user data, specifically the connected account address, as read from Web3 (a JavaScript library for interacting with the Ethereum blockchain). \n\n**Main Purpose**\n\nThe main purpose of the UserContext is to provide a centralized location for accessing and managing user data across multiple components in the application. This includes:\n\n1. Storing the connected account address as read from Web3.\n2. Retrieving the user's Ethereum accounts using the `fetchUserAccount` function.\n3. Invoking the `fetchUserAccount` function whenever the Web3 instance changes or when the `fetchUser` function is called.\n\n**Key Components**\n\n1. `UserContextType`: This defines the type of data stored in the UserContext.\n2. `UserProvider`: This is a React component that wraps parts of the app that need user context data.\n3. `fetchUserAccount`: This function uses Web3 to retrieve the user's Ethereum accounts and saves the first account to the user state.\n4. `useUser`: This is a custom hook for accessing user context data.\n\nThe UserContext enables seamless integration with the Magic Labs embedded wallet and existing Web3 libraries, providing a robust and scalable solution for managing user data in blockchain applications.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/guides/magic-evm-nextjs#chunk-5", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nNext, wrap the application with MagicProvider and UserProvider. This ensures that the contexts are accessible to all components within our application.\n\nMagicProvider\n\nUserProvider\n\nOpen the src/app/layout.tsx file and update it with the following code:\n\nsrc/app/layout.tsx\n\nCopy\n\n01\n\n// src/app/layout.tsx\n\n01\n\n// src/app/layout.tsx\n\n02\n\n02\n\n03\n\nimport\n\ntype\n\n{\n\nMetadata\n\n}\n\nfrom\n\n\"next\"\n\n03\n\nimport\n\ntype\n\n{\n\nMetadata\n\n}\n\nfrom\n\n\"next\"\n\n04\n\nimport\n\n\"./globals.css\"\n\n04\n\nimport\n\n\"./globals.css\"\n\n05\n\nimport\n\nMagicProvider\n\nfrom\n\n\"./context/MagicProvider\"\n\n05\n\nimport\n\nMagicProvider\n\nfrom\n\n\"./context/MagicProvider\"\n\n06\n\nimport\n\n{\n\nUserProvider\n\n}\n\nfrom\n\n\"./context/UserContext\"\n\n06\n\nimport\n\n{\n\nUserProvider\n\n}\n\nfrom\n\n\"./context/UserContext\"\n\n07\n\n07\n\n08\n\nexport\n\nconst\n\nmetadata\n\n:\n\nMetadata\n\n=\n\n{\n\n08\n\nexport\n\nconst\n\nmetadata\n\n:\n\nMetadata\n\n=\n\n{\n\n09\n\ntitle\n\n:\n\n\"Create Next App\"\n\n,\n\n09\n\ntitle\n\n:\n\n\"Create Next App\"\n\n,\n\n10\n\ndescription\n\n:\n\n\"Generated by create next app\"\n\n,\n\n10\n\ndescription\n\n:\n\n\"Generated by create next app\"\n\n,\n\n11\n\n}\n\n11\n\n}\n\n12\n\n12\n\n13\n\nexport\n\ndefault\n\nfunction\n\nRootLayout\n\n(\n\n{\n\n13\n\nexport\n\ndefault\n\nfunction\n\nRootLayout\n\n(\n\n{\n\n14\n\nchildren\n\n,\n\n14\n\nchildren\n\n,\n\n15\n\n}\n\n:\n\n{\n\n15\n\n}\n\n:\n\n{\n\n16\n\nchildren\n\n:\n\nReact\n\n.\n\nReactNode\n\n16\n\nchildren\n\n:\n\nReact\n\n.\n\nReactNode\n\n17\n\n}\n\n)\n\n{\n\n17\n\n}\n\n)\n\n{\n\n18\n\nreturn\n\n(\n\n18\n\nreturn\n\n(\n\n19\n\n<\n\nhtml lang\n\n=\n\n\"en\"\n\n>\n\n19\n\n<\n\nhtml lang\n\n=\n\n\"en\"\n\n>\n\n20\n\n<\n\nbody\n\n>\n\n20\n\n<\n\nbody\n\n>\n\n21\n\n<\n\nMagicProvider\n\n>\n\n21\n\n<\n\nMagicProvider\n\n>\n\n22\n\n<\n\nUserProvider\n\n>\n\n{\n\nchildren\n\n}\n\n<\n\n/\n\nUserProvider\n\n>\n\n22\n\n<\n\nUserProvider\n\n>\n\n{\n\nchildren\n\n}\n\n<\n\n/\n\nUserProvider\n\n>\n\n23\n\n<\n\n/\n\nMagicProvider\n\n>\n\n23\n\n<\n\n/\n\nMagicProvider\n\n>\n\n24\n\n<\n\n/\n\nbody\n\n>\n\n24\n\n<\n\n/\n\nbody\n\n>\n\n25\n\n<\n\n/\n\nhtml\n\n>\n\n25\n\n<\n\n/\n\nhtml\n\n>\n\n26\n\n)\n\n26\n\n)\n\n27\n\n}\n\n27\n\n}\n\nThe RootLayout is now nested inside the UserProvider and MagicProvider components. This provides all child components of RootLayout access to UserContext and MagicContext through the useUser and useMagic hooks, per React's Context API.\n\nRootLayout\n\nUserProvider\n\nMagicProvider\n\nRootLayout\n\nUserContext\n\nMagicContext\n\nuseUser\n\nuseMagic", "explanation": "**#Wrap App in Context Providers: Explanation and Purpose**\n\nThe section #Wrap App in Context Providers is a critical step in integrating Magic Labs' embedded wallet into a Next.js application. Its main purpose is to make the Magic SDK contexts (UserContext and MagicContext) accessible to all components within the application.\n\n**Magic labs Embedded Wallet Context**\n\nTo achieve this, two context providers are used:\n\n1. **MagicProvider**: Provides access to the Magic SDK (MagicContext) which enables interaction with the Magic Labs embedded wallet.\n2. **UserProvider**: Provides access to the UserContext, which allows components to interact with user-related data and functionality.\n\n**Purpose of Wrapping App in Context Providers**\n\nBy wrapping the application with these two providers, the Magic SDK contexts become available to all components within the application, making it easy to interact with the Magic Labs embedded wallet. This approach is facilitated by React's Context API, which enables data sharing between components without passing props down manually.\n\n**Key Benefits**\n\n1. **Universal Access**: All components within the application can access Magic SDK contexts, making it easy to perform tasks like user authentication and wallet management.\n2. **Modularity**: Components can be built and reused independently, without worrying about the intricacies of interactions with the Magic Labs embedded wallet.\n3. **Scalability**: The application can grow easily, with new components being added without disrupting the existing codebase.\n\nIn summary, wrapping the application with MagicProvider and UserProvider provides a robust foundation for integrating the Magic Labs embedded wallet into a Next.js application, ensuring that all components have access to the necessary contexts to perform tasks related to user authentication and wallet management.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/guides/magic-evm-nextjs#chunk-6", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nNext, we'll create six components for our application: ConnectButton, DisconnectButton, ShowUIButton, SendTransaction, SignMessage, and WalletDetail.\n\nConnectButton\n\nDisconnectButton\n\nShowUIButton\n\nSendTransaction\n\nSignMessage\n\nWalletDetail\n\nTo begin, create a src/app/components directory to house the new components.\n\nsrc/app/components\n\n#\n\nThe ConnectButton component will trigger the authentication flow and connect to the authenticated user's wallet.\n\nConnectButton\n\nCreate a new file in components named ConnectButton.tsx and paste the following code:\n\ncomponents\n\nConnectButton.tsx\n\nCopy\n\n01\n\n// src/app/components/ConnectButton.tsx\n\n01\n\n// src/app/components/ConnectButton.tsx\n\n02\n\n02\n\n03\n\nimport\n\n{\n\nuseMagic\n\n}\n\nfrom\n\n\"../context/MagicProvider\"\n\n03\n\nimport\n\n{\n\nuseMagic\n\n}\n\nfrom\n\n\"../context/MagicProvider\"\n\n04\n\nimport\n\n{\n\nuseUser\n\n}\n\nfrom\n\n\"../context/UserContext\"\n\n04\n\nimport\n\n{\n\nuseUser\n\n}\n\nfrom\n\n\"../context/UserContext\"\n\n05\n\n05\n\n06\n\nconst\n\nConnectButton\n\n=\n\n(\n\n)\n\n=>\n\n{\n\n06\n\nconst\n\nConnectButton\n\n=\n\n(\n\n)\n\n=>\n\n{\n\n07\n\n// Get the initializeWeb3 function from the Web3 context\n\n07\n\n// Get the initializeWeb3 function from the Web3 context\n\n08\n\nconst\n\n{\n\nmagic\n\n}\n\n=\n\nuseMagic\n\n(\n\n)\n\n08\n\nconst\n\n{\n\nmagic\n\n}\n\n=\n\nuseMagic\n\n(\n\n)\n\n09\n\nconst\n\n{\n\nfetchUser\n\n}\n\n=\n\nuseUser\n\n(\n\n)\n\n09\n\nconst\n\n{\n\nfetchUser\n\n}\n\n=\n\nuseUser\n\n(\n\n)\n\n10\n\n10\n\n11\n\n// Define the event handler for the button click\n\n11\n\n// Define the event handler for the button click\n\n12\n\nconst\n\nhandleConnect\n\n=\n\nasync\n\n(\n\n)\n\n=>\n\n{\n\n12\n\nconst\n\nhandleConnect\n\n=\n\nasync\n\n(\n\n)\n\n=>\n\n{\n\n13\n\ntry\n\n{\n\n13\n\ntry\n\n{\n\n14\n\n// Try to connect to the wallet using Magic's user interface\n\n14\n\n// Try to connect to the wallet using Magic's user interface\n\n15\n\nawait\n\nmagic\n\n?.\n\nwallet\n\n.\n\nconnectWithUI\n\n(\n\n)\n\n15\n\nawait\n\nmagic\n\n?.\n\nwallet\n\n.\n\nconnectWithUI\n\n(\n\n)\n\n16\n\nawait\n\nfetchUser\n\n(\n\n)\n\n16\n\nawait\n\nfetchUser\n\n(\n\n)\n\n17\n\n}\n\ncatch\n\n(\n\nerror\n\n)\n\n{\n\n17\n\n}\n\ncatch\n\n(\n\nerror\n\n)\n\n{\n\n18\n\n// Log any errors that occur during the connection process\n\n18\n\n// Log any errors that occur during the connection process\n\n19\n\nconsole\n\n.\n\nerror\n\n(\n\n\"handleConnect:\"\n\n,\n\nerror\n\n)\n\n19\n\nconsole\n\n.\n\nerror\n\n(\n\n\"handleConnect:\"\n\n,\n\nerror\n\n)\n\n20\n\n}\n\n20\n\n}\n\n21\n\n}\n\n21\n\n}\n\n22\n\n22\n\n23\n\n// Render the button component with the click event handler\n\n23\n\n// Render the button component with the click event handler\n\n24\n\nreturn\n\n(\n\n24\n\nreturn\n\n(\n\n25\n\n<\n\nbutton\n\n25\n\n<\n\nbutton\n\n26\n\ntype\n\n=\n\n\"button\"\n\n26\n\ntype\n\n=\n\n\"button\"\n\n27\n\nclassName\n\n=\n\n\"w-auto border border-white font-bold p-2 rounded-md\"\n\n27\n\nclassName\n\n=\n\n\"w-auto border border-white font-bold p-2 rounded-md\"\n\n28\n\nonClick\n\n=\n\n{\n\nhandleConnect\n\n}\n\n28\n\nonClick\n\n=\n\n{\n\nhandleConnect\n\n}\n\n29\n\n>\n\n29\n\n>\n\n30\n\nConnect\n\n30\n\nConnect\n\n31\n\n<\n\n/\n\nbutton\n\n>\n\n31\n\n<\n\n/\n\nbutton\n\n>\n\n32\n\n)\n\n32\n\n)\n\n33\n\n}\n\n33\n\n}\n\n34\n\n34\n\n35\n\nexport\n\ndefault\n\nConnectButton\n\n35\n\nexport\n\ndefault\n\nConnectButton\n\nThe key functionality here is the call to magic?.wallet.connectWithUI(). This invocation returns a promise and will display Magic's Login UI for authentication. Magic will handle authentication using Email OTP with no additional code needed from your application. When the promise resolves, your code will handle the resolved value and re-fetch the user so your application can update accordingly.\n\nmagic?.wallet.connectWithUI()\n\nLogin UI\n\nEmail OTP", "explanation": "**UI Components - ConnectButton Component**\n\nThe ConnectButton component is a UI element in your Magic Labs embedded wallet application. Its primary purpose is to trigger the authentication flow and connect the user's wallet to your application.\n\n**How it Works:**\n\n1. When the user clicks the ConnectButton, it calls the `handleConnect` function, which attempts to connect to the user's wallet using Magic's user interface (`magic?.wallet.connectWithUI()`).\n2. Magic's user interface, called the Magic Login UI, is displayed to the user, where they can authenticate using Email OTP.\n3. Once the user is authenticated, Magic resolves the promise, and your application can update the user's data by refetching the user.\n4. The ConnectButton component is rendered with a button label \"Connect\" that, when clicked, initiates the authentication flow.\n\n**Key Functionality:**\n\n* Triggers the authentication flow using Magic's user interface (`magic?.wallet.connectWithUI()`)\n* Logs any errors that occur during the connection process to the console\n* Renders a button with a \"Connect\" label that initiates the authentication flow when clicked\n\n**Export:**\n\nThe ConnectButton component is exported as a default export from the `ConnectButton.tsx` file, making it available for use in your application.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/guides/magic-evm-nextjs#chunk-7", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nThe DisconnectButton component will disconnect the user's wallet.\n\nDisconnectButton\n\nCreate a new file in components named DisconnectButton.tsx and paste the following code:\n\ncomponents\n\nDisconnectButton.tsx\n\nCopy\n\n01\n\n// src/app/components/DisconnectButton.tsx\n\n01\n\n// src/app/components/DisconnectButton.tsx\n\n02\n\n02\n\n03\n\nimport\n\n{\n\nuseMagic\n\n}\n\nfrom\n\n\"../context/MagicProvider\"\n\n03\n\nimport\n\n{\n\nuseMagic\n\n}\n\nfrom\n\n\"../context/MagicProvider\"\n\n04\n\nimport\n\n{\n\nuseState\n\n}\n\nfrom\n\n\"react\"\n\n04\n\nimport\n\n{\n\nuseState\n\n}\n\nfrom\n\n\"react\"\n\n05\n\nimport\n\n{\n\nuseUser\n\n}\n\nfrom\n\n\"../context/UserContext\"\n\n05\n\nimport\n\n{\n\nuseUser\n\n}\n\nfrom\n\n\"../context/UserContext\"\n\n06\n\n06\n\n07\n\nconst\n\nDisconnectButton\n\n=\n\n(\n\n)\n\n=>\n\n{\n\n07\n\nconst\n\nDisconnectButton\n\n=\n\n(\n\n)\n\n=>\n\n{\n\n08\n\nconst\n\n[\n\nisLoading\n\n,\n\nsetIsLoading\n\n]\n\n=\n\nuseState\n\n(\n\nfalse\n\n)\n\n08\n\nconst\n\n[\n\nisLoading\n\n,\n\nsetIsLoading\n\n]\n\n=\n\nuseState\n\n(\n\nfalse\n\n)\n\n09\n\n// Get the initializeWeb3 function from the Web3 context\n\n09\n\n// Get the initializeWeb3 function from the Web3 context\n\n10\n\nconst\n\n{\n\nmagic\n\n}\n\n=\n\nuseMagic\n\n(\n\n)\n\n10\n\nconst\n\n{\n\nmagic\n\n}\n\n=\n\nuseMagic\n\n(\n\n)\n\n11\n\nconst\n\n{\n\nfetchUser\n\n}\n\n=\n\nuseUser\n\n(\n\n)\n\n11\n\nconst\n\n{\n\nfetchUser\n\n}\n\n=\n\nuseUser\n\n(\n\n)\n\n12\n\n12\n\n13\n\n// Define the event handler for the button click\n\n13\n\n// Define the event handler for the button click\n\n14\n\nconst\n\nhandleDisconnect\n\n=\n\nasync\n\n(\n\n)\n\n=>\n\n{\n\n14\n\nconst\n\nhandleDisconnect\n\n=\n\nasync\n\n(\n\n)\n\n=>\n\n{\n\n15\n\ntry\n\n{\n\n15\n\ntry\n\n{\n\n16\n\nsetIsLoading\n\n(\n\ntrue\n\n)\n\n16\n\nsetIsLoading\n\n(\n\ntrue\n\n)\n\n17\n\n// Try to disconnect the user's wallet using Magic's logout method\n\n17\n\n// Try to disconnect the user's wallet using Magic's logout method\n\n18\n\nawait\n\nmagic\n\n?.\n\nuser\n\n.\n\nlogout\n\n(\n\n)\n\n18\n\nawait\n\nmagic\n\n?.\n\nuser\n\n.\n\nlogout\n\n(\n\n)\n\n19\n\nawait\n\nfetchUser\n\n(\n\n)\n\n19\n\nawait\n\nfetchUser\n\n(\n\n)\n\n20\n\n20\n\n21\n\nsetIsLoading\n\n(\n\nfalse\n\n)\n\n21\n\nsetIsLoading\n\n(\n\nfalse\n\n)\n\n22\n\n}\n\ncatch\n\n(\n\nerror\n\n)\n\n{\n\n22\n\n}\n\ncatch\n\n(\n\nerror\n\n)\n\n{\n\n23\n\n// Log any errors that occur during the disconnection process\n\n23\n\n// Log any errors that occur during the disconnection process\n\n24\n\nconsole\n\n.\n\nlog\n\n(\n\n\"handleDisconnect:\"\n\n,\n\nerror\n\n)\n\n24\n\nconsole\n\n.\n\nlog\n\n(\n\n\"handleDisconnect:\"\n\n,\n\nerror\n\n)\n\n25\n\n}\n\n25\n\n}\n\n26\n\n}\n\n26\n\n}\n\n27\n\n27\n\n28\n\n// Render the button component with the click event handler\n\n28\n\n// Render the button component with the click event handler\n\n29\n\nreturn\n\n(\n\n29\n\nreturn\n\n(\n\n30\n\n<\n\nbutton\n\n30\n\n<\n\nbutton\n\n31\n\ntype\n\n=\n\n\"button\"\n\n31\n\ntype\n\n=\n\n\"button\"\n\n32\n\nclassName\n\n=\n\n\"border border-white font-bold p-2 rounded-md\"\n\n32\n\nclassName\n\n=\n\n\"border border-white font-bold p-2 rounded-md\"\n\n33\n\nonClick\n\n=\n\n{\n\nhandleDisconnect\n\n}\n\n33\n\nonClick\n\n=\n\n{\n\nhandleDisconnect\n\n}\n\n34\n\n>\n\n34\n\n>\n\n35\n\n{\n\nisLoading\n\n?\n\n\"Disconnecting...\"\n\n:\n\n\"Disconnect\"\n\n}\n\n35\n\n{\n\nisLoading\n\n?\n\n\"Disconnecting...\"\n\n:\n\n\"Disconnect\"\n\n}\n\n36\n\n<\n\n/\n\nbutton\n\n>\n\n36\n\n<\n\n/\n\nbutton\n\n>\n\n37\n\n)\n\n37\n\n)\n\n38\n\n}\n\n38\n\n}\n\n39\n\n39\n\n40\n\nexport\n\ndefault\n\nDisconnectButton\n\n40\n\nexport\n\ndefault\n\nDisconnectButton\n\nAgain, the core functionality here is the call to magic?.user.logout(). This will log out the current user and disconnect their wallet. When the promise resolves, your application can re-fetch the user to update your UI accordingly.\n\nmagic?.user.logout()", "explanation": "**Disconnect Button Overview**\n\nThe Disconnect Button is a React component designed to disconnect a user's wallet from the Magic Labs embedded wallet. This component is crucial in providing a seamless user experience by allowing users to securely sign in, interact with the application, and then log out.\n\n**Main Purpose**\n\nThe primary function of the Disconnect Button is to call `magic?.user.logout()` when clicked, which logs the user out and disconnects their wallet. This process involves:\n\n1. Setting the `isLoading` state to `true` to indicate that the disconnection process is in progress.\n2. Triggering the `handleDisconnect` event handler, which attempts to disconnect the user's wallet.\n3. If successful, refreshing the `fetchUser` state to update the UI with the user's new wallet state (logged out).\n\n**Key Functionality**\n\nThe Disconnect Button component:\n\n1. Uses the Magic Labs Web3 context to access the `magic` object.\n2. Utilizes the `useState` hook to manage the `isLoading` state.\n3. Calls the `magic?.user.logout()` function to initiate the disconnection process.\n4. Logs any errors that occur during the disconnection process to the console.\n\n**Context Usage**\n\nTo use the Disconnect Button in your application, simply import and render the component. The `magic?.user.logout()` function can be called from the `handleDisconnect` event handler.\n\nBy implementing the Disconnect Button, you provide users with a secure way to disconnect their wallet, ensuring a positive user experience and maintaining the integrity of your application.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/guides/magic-evm-nextjs#chunk-8", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nThe ShowUIButton component will display the Magic Wallet interface.\n\nShowUIButton\n\nCreate a new file in components named ShowUIButton.tsx and paste the following code:\n\ncomponents\n\nShowUIButton.tsx\n\nCopy\n\n01\n\n// src/app/components/ShowUIButton.tsx\n\n01\n\n// src/app/components/ShowUIButton.tsx\n\n02\n\n02\n\n03\n\nimport\n\n{\n\nuseMagic\n\n}\n\nfrom\n\n\"../context/MagicProvider\"\n\n03\n\nimport\n\n{\n\nuseMagic\n\n}\n\nfrom\n\n\"../context/MagicProvider\"\n\n04\n\n04\n\n05\n\nconst\n\nShowUIButton\n\n=\n\n(\n\n)\n\n=>\n\n{\n\n05\n\nconst\n\nShowUIButton\n\n=\n\n(\n\n)\n\n=>\n\n{\n\n06\n\nconst\n\n{\n\nmagic\n\n}\n\n=\n\nuseMagic\n\n(\n\n)\n\n06\n\nconst\n\n{\n\nmagic\n\n}\n\n=\n\nuseMagic\n\n(\n\n)\n\n07\n\n07\n\n08\n\n// Define the event handler for the button click\n\n08\n\n// Define the event handler for the button click\n\n09\n\nconst\n\nhandleShowUI\n\n=\n\nasync\n\n(\n\n)\n\n=>\n\n{\n\n09\n\nconst\n\nhandleShowUI\n\n=\n\nasync\n\n(\n\n)\n\n=>\n\n{\n\n10\n\ntry\n\n{\n\n10\n\ntry\n\n{\n\n11\n\n// Try to show the magic wallet user interface\n\n11\n\n// Try to show the magic wallet user interface\n\n12\n\nawait\n\nmagic\n\n?.\n\nwallet\n\n.\n\nshowUI\n\n(\n\n)\n\n12\n\nawait\n\nmagic\n\n?.\n\nwallet\n\n.\n\nshowUI\n\n(\n\n)\n\n13\n\n}\n\ncatch\n\n(\n\nerror\n\n)\n\n{\n\n13\n\n}\n\ncatch\n\n(\n\nerror\n\n)\n\n{\n\n14\n\n// Log any errors that occur during the process\n\n14\n\n// Log any errors that occur during the process\n\n15\n\nconsole\n\n.\n\nerror\n\n(\n\n\"handleShowUI:\"\n\n,\n\nerror\n\n)\n\n15\n\nconsole\n\n.\n\nerror\n\n(\n\n\"handleShowUI:\"\n\n,\n\nerror\n\n)\n\n16\n\n}\n\n16\n\n}\n\n17\n\n}\n\n17\n\n}\n\n18\n\n18\n\n19\n\nreturn\n\n(\n\n19\n\nreturn\n\n(\n\n20\n\n<\n\nbutton\n\n20\n\n<\n\nbutton\n\n21\n\nclassName\n\n=\n\n\"w-auto border border-white font-bold p-2 rounded-md\"\n\n21\n\nclassName\n\n=\n\n\"w-auto border border-white font-bold p-2 rounded-md\"\n\n22\n\nonClick\n\n=\n\n{\n\nhandleShowUI\n\n}\n\n22\n\nonClick\n\n=\n\n{\n\nhandleShowUI\n\n}\n\n23\n\n>\n\n23\n\n>\n\n24\n\nShow\n\nUI\n\n24\n\nShow\n\nUI\n\n25\n\n<\n\n/\n\nbutton\n\n>\n\n25\n\n<\n\n/\n\nbutton\n\n>\n\n26\n\n)\n\n26\n\n)\n\n27\n\n}\n\n27\n\n}\n\n28\n\n28\n\n29\n\nexport\n\ndefault\n\nShowUIButton\n\n29\n\nexport\n\ndefault\n\nShowUIButton\n\nThe magic?.wallet.showUI() call will show a modal with the wallet interface.\n\nmagic?.wallet.showUI()", "explanation": "**What is the ShowUIButton Component?**\n\nThe ShowUIButton component is a graphical user interface (GUI) button that, when clicked, displays the Magic Wallet interface as a modal within the user's web application. This component allows users to easily interact with their Magic Wallet through a seamless and integrated experience.\n\n**What is its main purpose?**\n\nThe primary function of the ShowUIButton component is to:\n\n1. Integrate the Magic Wallet interface into a web application.\n2. Provide users with a clear call-to-action (CTA) to interact with their Magic Wallet.\n3. Handle the logic for displaying the Magic Wallet interface as a modal, while also handling any potential errors that may occur during the process.\n\nIn essence, the ShowUIButton component serves as a bridge between the web application and the Magic Wallet, enabling secure and user-friendly access to wallet functionality.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/guides/magic-evm-nextjs#chunk-9", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nThe SendTransaction component allows the user to send a transaction using their wallet.\n\nSendTransaction\n\nSince Magic integrates with your existing blockchain library, like Web3.js, the SendTransaction component can be built entirely without a reference to Magic. In other words, it can be built the same way it would be without Magic.\n\nSendTransaction\n\nMagic\n\nCreate a new file in components named SendTransaction.tsx and paste the following code:\n\ncomponents\n\nSendTransaction.tsx\n\nCopy\n\n01\n\n// src/app/components/SendTransaction.tsx\n\n01\n\n// src/app/components/SendTransaction.tsx\n\n02\n\n02\n\n03\n\nimport\n\n{\n\nuseCallback\n\n,\n\nuseState\n\n}\n\nfrom\n\n\"react\"\n\n03\n\nimport\n\n{\n\nuseCallback\n\n,\n\nuseState\n\n}\n\nfrom\n\n\"react\"\n\n04\n\nimport\n\n{\n\nuseMagic\n\n}\n\nfrom\n\n\"../context/MagicProvider\"\n\n04\n\nimport\n\n{\n\nuseMagic\n\n}\n\nfrom\n\n\"../context/MagicProvider\"\n\n05\n\n05\n\n06\n\nconst\n\nSendTransaction\n\n=\n\n(\n\n)\n\n=>\n\n{\n\n06\n\nconst\n\nSendTransaction\n\n=\n\n(\n\n)\n\n=>\n\n{\n\n07\n\nconst\n\n{\n\nweb3\n\n}\n\n=\n\nuseMagic\n\n(\n\n)\n\n07\n\nconst\n\n{\n\nweb3\n\n}\n\n=\n\nuseMagic\n\n(\n\n)\n\n08\n\nconst\n\n[\n\ntoAddress\n\n,\n\nsetToAddress\n\n]\n\n=\n\nuseState\n\n(\n\n\"\"\n\n)\n\n08\n\nconst\n\n[\n\ntoAddress\n\n,\n\nsetToAddress\n\n]\n\n=\n\nuseState\n\n(\n\n\"\"\n\n)\n\n09\n\nconst\n\n[\n\namount\n\n,\n\nsetAmount\n\n]\n\n=\n\nuseState\n\n(\n\n\"\"\n\n)\n\n09\n\nconst\n\n[\n\namount\n\n,\n\nsetAmount\n\n]\n\n=\n\nuseState\n\n(\n\n\"\"\n\n)\n\n10\n\nconst\n\n[\n\nhash\n\n,\n\nsetHash\n\n]\n\n=\n\nuseState\n\n<\n\nstring\n\n|\n\nnull\n\n>\n\n(\n\nnull\n\n)\n\n10\n\nconst\n\n[\n\nhash\n\n,\n\nsetHash\n\n]\n\n=\n\nuseState\n\n<\n\nstring\n\n|\n\nnull\n\n>\n\n(\n\nnull\n\n)\n\n11\n\n11\n\n12\n\nconst\n\nhandleAddressInput\n\n=\n\n(\n\ne\n\n:\n\nReact\n\n.\n\nChangeEvent\n\n<\n\nHTMLInputElement\n\n>\n\n)\n\n=>\n\n12\n\nconst\n\nhandleAddressInput\n\n=\n\n(\n\ne\n\n:\n\nReact\n\n.\n\nChangeEvent\n\n<\n\nHTMLInputElement\n\n>\n\n)\n\n=>\n\n13\n\nsetToAddress\n\n(\n\ne\n\n.\n\ntarget\n\n.\n\nvalue\n\n)\n\n13\n\nsetToAddress\n\n(\n\ne\n\n.\n\ntarget\n\n.\n\nvalue\n\n)\n\n14\n\n14\n\n15\n\nconst\n\nhandleAmountInput\n\n=\n\n(\n\ne\n\n:\n\nReact\n\n.\n\nChangeEvent\n\n<\n\nHTMLInputElement\n\n>\n\n)\n\n=>\n\n15\n\nconst\n\nhandleAmountInput\n\n=\n\n(\n\ne\n\n:\n\nReact\n\n.\n\nChangeEvent\n\n<\n\nHTMLInputElement\n\n>\n\n)\n\n=>\n\n16\n\nsetAmount\n\n(\n\ne\n\n.\n\ntarget\n\n.\n\nvalue\n\n)\n\n16\n\nsetAmount\n\n(\n\ne\n\n.\n\ntarget\n\n.\n\nvalue\n\n)\n\n17\n\n17\n\n18\n\nconst\n\nsendTransaction\n\n=\n\nuseCallback\n\n(\n\n(\n\n)\n\n=>\n\n{\n\n18\n\nconst\n\nsendTransaction\n\n=\n\nuseCallback\n\n(\n\n(\n\n)\n\n=>\n\n{\n\n19\n\nconst\n\nfromAddress\n\n=\n\nweb3\n\n?.\n\neth\n\n.\n\ngetAccounts\n\n(\n\n)\n\n?.\n\n[\n\n0\n\n]\n\n19\n\nconst\n\nfromAddress\n\n=\n\nweb3\n\n?.\n\neth\n\n.\n\ngetAccounts\n\n(\n\n)\n\n?.\n\n[\n\n0\n\n]\n\n20\n\nconst\n\nisToAddressValid\n\n=\n\nweb3\n\n?.\n\nutils\n\n.\n\nisAddress\n\n(\n\ntoAddress\n\n)\n\n20\n\nconst\n\nisToAddressValid\n\n=\n\nweb3\n\n?.\n\nutils\n\n.\n\nisAddress\n\n(\n\ntoAddress\n\n)\n\n21\n\n21\n\n22\n\nif\n\n(\n\n!\n\nfromAddress\n\n||\n\n!\n\nisToAddressValid\n\n||\n\nisNaN\n\n(\n\nNumber\n\n(\n\namount\n\n)\n\n)\n\n)\n\n{\n\n22\n\nif\n\n(\n\n!\n\nfromAddress\n\n||\n\n!\n\nisToAddressValid\n\n||\n\nisNaN\n\n(\n\nNumber\n\n(\n\namount\n\n)\n\n)\n\n)\n\n{\n\n23\n\n// handle errors\n\n23\n\n// handle errors\n\n24\n\n}\n\n24\n\n}\n\n25\n\n25\n\n26\n\nconst\n\ntxnParams\n\n=\n\n{\n\n26\n\nconst\n\ntxnParams\n\n=\n\n{\n\n27\n\nfrom\n\n:\n\nfromAddress\n\n,\n\n27\n\nfrom\n\n:\n\nfromAddress\n\n,\n\n28\n\nto\n\n:\n\ntoAddress\n\n,\n\n28\n\nto\n\n:\n\ntoAddress\n\n,\n\n29\n\nvalue\n\n:\n\nweb3\n\n.\n\nutils\n\n.\n\ntoWei\n\n(\n\namount\n\n,\n\n\"ether\"\n\n)\n\n,\n\n29\n\nvalue\n\n:\n\nweb3\n\n.\n\nutils\n\n.\n\ntoWei\n\n(\n\namount\n\n,\n\n\"ether\"\n\n)\n\n,\n\n30\n\ngas\n\n:\n\n21000\n\n,\n\n30\n\ngas\n\n:\n\n21000\n\n,\n\n31\n\n}\n\n31\n\n}\n\n32\n\nweb3\n\n.\n\neth\n\n32\n\nweb3\n\n.\n\neth\n\n33\n\n.\n\nsendTransaction\n\n(\n\ntxnParams\n\nas\n\nany\n\n)\n\n33\n\n.\n\nsendTransaction\n\n(\n\ntxnParams\n\nas\n\nany\n\n)\n\n34\n\n.\n\non\n\n(\n\n\"transactionHash\"\n\n,\n\n(\n\ntxHash\n\n:\n\nstring\n\n)\n\n=>\n\n{\n\n34\n\n.\n\non\n\n(\n\n\"transactionHash\"\n\n,\n\n(\n\ntxHash\n\n:\n\nstring\n\n)\n\n=>\n\n{\n\n35\n\nsetHash\n\n(\n\ntxHash\n\n)\n\n35\n\nsetHash\n\n(\n\ntxHash\n\n)\n\n36\n\nconsole\n\n.\n\nlog\n\n(\n\n\"Transaction hash:\"\n\n,\n\ntxHash\n\n)\n\n36\n\nconsole\n\n.\n\nlog\n\n(\n\n\"Transaction hash:\"\n\n,\n\ntxHash\n\n)\n\n37\n\n}\n\n)\n\n37\n\n}\n\n)\n\n38\n\n.\n\nthen\n\n(\n\n(\n\nreceipt\n\n:\n\nany\n\n)\n\n=>\n\n{\n\n38\n\n.\n\nthen\n\n(\n\n(\n\nreceipt\n\n:\n\nany\n\n)\n\n=>\n\n{\n\n39\n\nsetToAddress\n\n(\n\n\"\"\n\n)\n\n39\n\nsetToAddress\n\n(\n\n\"\"\n\n)\n\n40\n\nsetAmount\n\n(\n\n\"\"\n\n)\n\n40\n\nsetAmount\n\n(\n\n\"\"\n\n)\n\n41\n\nconsole\n\n.\n\nlog\n\n(\n\n\"Transaction receipt:\"\n\n,\n\nreceipt\n\n)\n\n41\n\nconsole\n\n.\n\nlog\n\n(\n\n\"Transaction receipt:\"\n\n,\n\nreceipt\n\n)\n\n42\n\n}\n\n)\n\n42\n\n}\n\n)\n\n43\n\n.\n\ncatch\n\n(\n\n(\n\n)\n\n=>\n\n{\n\n43\n\n.\n\ncatch\n\n(\n\n(\n\n)\n\n=>\n\n{\n\n44\n\n// handle errors\n\n44\n\n// handle errors\n\n45\n\n}\n\n)\n\n45\n\n}\n\n)\n\n46\n\n}\n\n,\n\n[\n\nweb3\n\n,\n\namount\n\n,\n\ntoAddress\n\n]\n\n)\n\n46\n\n}\n\n,\n\n[\n\nweb3\n\n,\n\namount\n\n,\n\ntoAddress\n\n]\n\n)\n\n47\n\n47\n\n48\n\n// Render the component\n\n48\n\n// Render the component\n\n49\n\nreturn\n\n(\n\n49\n\nreturn\n\n(\n\n50\n\n<\n\ndiv className\n\n=\n\n\"py-2 flex flex-col gap-2\"\n\n>\n\n50\n\n<\n\ndiv className\n\n=\n\n\"py-2 flex flex-col gap-2\"\n\n>\n\n51\n\n<\n\ninput\n\n51\n\n<\n\ninput\n\n52\n\nclassName\n\n=\n\n\"text-black\"\n\n52\n\nclassName\n\n=\n\n\"text-black\"\n\n53\n\ntype\n\n=\n\n\"text\"\n\n53\n\ntype\n\n=\n\n\"text\"\n\n54\n\nonChange\n\n=\n\n{\n\nhandleAddressInput\n\n}\n\n54\n\nonChange\n\n=\n\n{\n\nhandleAddressInput\n\n}\n\n55\n\nmaxLength\n\n=\n\n{\n\n40\n\n}\n\n55\n\nmaxLength\n\n=\n\n{\n\n40\n\n}\n\n56\n\nplaceholder\n\n=\n\n\"Set Recipient Address\"\n\n56\n\nplaceholder\n\n=\n\n\"Set Recipient Address\"\n\n57\n\n/\n\n>\n\n57\n\n/\n\n>\n\n58\n\n<\n\ninput\n\n58\n\n<\n\ninput\n\n59\n\nclassName\n\n=\n\n\"text-black\"\n\n59\n\nclassName\n\n=\n\n\"text-black\"\n\n60\n\ntype\n\n=\n\n\"text\"\n\n60\n\ntype\n\n=\n\n\"text\"\n\n61\n\nonChange\n\n=\n\n{\n\nhandleAmountInput\n\n}\n\n61\n\nonChange\n\n=\n\n{\n\nhandleAmountInput\n\n}\n\n62\n\nmaxLength\n\n=\n\n{\n\n40\n\n}\n\n62\n\nmaxLength\n\n=\n\n{\n\n40\n\n}\n\n63\n\nplaceholder\n\n=\n\n\"Set Amount To Send\"\n\n63\n\nplaceholder\n\n=\n\n\"Set Amount To Send\"\n\n64\n\n/\n\n>\n\n64\n\n/\n\n>\n\n65\n\n<\n\nbutton\n\n65\n\n<\n\nbutton\n\n66\n\ntype\n\n=\n\n\"button\"\n\n66\n\ntype\n\n=\n\n\"button\"\n\n67\n\nclassName\n\n=\n\n\"border border-white font-bold p-2 rounded-md\"\n\n67\n\nclassName\n\n=\n\n\"border border-white font-bold p-2 rounded-md\"\n\n68\n\nonClick\n\n=\n\n{\n\nsendTransaction\n\n}\n\n68\n\nonClick\n\n=\n\n{\n\nsendTransaction\n\n}\n\n69\n\n>\n\n69\n\n>\n\n70\n\nSend\n\nETH\n\n70\n\nSend\n\nETH\n\n71\n\n<\n\n/\n\nbutton\n\n>\n\n71\n\n<\n\n/\n\nbutton\n\n>\n\n72\n\n{\n\nhash\n\n&&\n\n(\n\n72\n\n{\n\nhash\n\n&&\n\n(\n\n73\n\n<\n\ndiv className\n\n=\n\n\"w-[20vw] break-words mx-auto text-center\"\n\n>\n\n{\n\n`\n\nTx Hash:\n\n${\n\nhash\n\n}\n\n`\n\n}\n\n<\n\n/\n\ndiv\n\n>\n\n73\n\n<\n\ndiv className\n\n=\n\n\"w-[20vw] break-words mx-auto text-center\"\n\n>\n\n{\n\n`\n\nTx Hash:\n\n${\n\nhash\n\n}\n\n`\n\n}\n\n<\n\n/\n\ndiv\n\n>\n\n74\n\n)\n\n}\n\n74\n\n)\n\n}\n\n75\n\n<\n\n/\n\ndiv\n\n>\n\n75\n\n<\n\n/\n\ndiv\n\n>\n\n76\n\n)\n\n76\n\n)\n\n77\n\n}\n\n77\n\n}\n\n78\n\n78\n\n79\n\nexport\n\ndefault\n\nSendTransaction\n\n79\n\nexport\n\ndefault\n\nSendTransaction", "explanation": "**SendTransaction Component Overview**\n\nThe SendTransaction component is a user interface component in a Magic Labs embedded wallet that allows users to send transactions using their wallet. It integrates with the existing blockchain library, such as Web3.js, which enables users to send transactions without referencing Magic directly.\n\n**Main Purpose:**\n\nThe primary purpose of the SendTransaction component is to provide a secure and user-friendly way for users to send transactions using their wallet. It achieves this by:\n\n1. **Displaying a recipient address input field**: Users can enter the recipient's address, which is validated using the `isAddress` method from the Web3.js library.\n2. **Displaying an amount input field**: Users can enter the amount to send in ether.\n3. **Providing a send button**: When the send button is clicked, the component sends the transaction using the `sendTransaction` method from the Web3.js library.\n4. **Displaying the transaction hash**: After a successful transaction, the component displays the transaction hash, which provides evidence of the transaction.\n\n**Key Features:**\n\n1. **User input validation**: The component checks if the user-inputted recipient address is valid using the `isAddress` method.\n2. **Error handling**: The component catches and handles errors that may occur during transaction sending.\n3. **Magic integration**: The component uses the Magic provider to access the Web3.js library, which enables users to send transactions without referencing Magic directly.\n4. **Transaction receipt display**: After a successful transaction, the component displays the transaction receipt, which provides information about the transaction's success.\n\n**Customization:**\n\nThe SendTransaction component can be customized by modifying the HTML and CSS classes used in the component. This allows developers to adapt the component to their specific design requirements.\n\n**Export:**\n\nThe SendTransaction component is exported as a default export, making it easily importable in other React components.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/guides/magic-evm-nextjs#chunk-10", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nThe SignMessage component allows the user to sign a message using their wallet. Similar to the SendTransactioncomponent, this can be built the same way it would be without Magic.\n\nSignMessage\n\nSendTransaction\n\nCreate a new file in components named SignMessage.tsx and paste the following code:\n\ncomponents\n\nSignMessage.tsx\n\nCopy\n\n01\n\n// src/app/components/SignMessage.tsx\n\n01\n\n// src/app/components/SignMessage.tsx\n\n02\n\n02\n\n03\n\nimport\n\n{\n\nuseState\n\n}\n\nfrom\n\n\"react\"\n\n03\n\nimport\n\n{\n\nuseState\n\n}\n\nfrom\n\n\"react\"\n\n04\n\nimport\n\n{\n\nuseMagic\n\n}\n\nfrom\n\n\"../context/MagicProvider\"\n\n04\n\nimport\n\n{\n\nuseMagic\n\n}\n\nfrom\n\n\"../context/MagicProvider\"\n\n05\n\n05\n\n06\n\nconst\n\nSignMessage\n\n=\n\n(\n\n)\n\n=>\n\n{\n\n06\n\nconst\n\nSignMessage\n\n=\n\n(\n\n)\n\n=>\n\n{\n\n07\n\n// Use the MagicProvider to get the current instance of web3\n\n07\n\n// Use the MagicProvider to get the current instance of web3\n\n08\n\nconst\n\n{\n\nweb3\n\n}\n\n=\n\nuseMagic\n\n(\n\n)\n\n08\n\nconst\n\n{\n\nweb3\n\n}\n\n=\n\nuseMagic\n\n(\n\n)\n\n09\n\n09\n\n10\n\n// Initialize state for message and signature\n\n10\n\n// Initialize state for message and signature\n\n11\n\nconst\n\n[\n\nmessage\n\n,\n\nsetMessage\n\n]\n\n=\n\nuseState\n\n(\n\n\"\"\n\n)\n\n11\n\nconst\n\n[\n\nmessage\n\n,\n\nsetMessage\n\n]\n\n=\n\nuseState\n\n(\n\n\"\"\n\n)\n\n12\n\nconst\n\n[\n\nsignature\n\n,\n\nsetSignature\n\n]\n\n=\n\nuseState\n\n(\n\n\"\"\n\n)\n\n12\n\nconst\n\n[\n\nsignature\n\n,\n\nsetSignature\n\n]\n\n=\n\nuseState\n\n(\n\n\"\"\n\n)\n\n13\n\n13\n\n14\n\n// Define the handler for input change, it updates the message state with input value\n\n14\n\n// Define the handler for input change, it updates the message state with input value\n\n15\n\nconst\n\nhandleInput\n\n=\n\n(\n\ne\n\n:\n\nReact\n\n.\n\nChangeEvent\n\n<\n\nHTMLInputElement\n\n>\n\n)\n\n=>\n\n15\n\nconst\n\nhandleInput\n\n=\n\n(\n\ne\n\n:\n\nReact\n\n.\n\nChangeEvent\n\n<\n\nHTMLInputElement\n\n>\n\n)\n\n=>\n\n16\n\nsetMessage\n\n(\n\ne\n\n.\n\ntarget\n\n.\n\nvalue\n\n)\n\n16\n\nsetMessage\n\n(\n\ne\n\n.\n\ntarget\n\n.\n\nvalue\n\n)\n\n17\n\n17\n\n18\n\n// Define the signMessage function which is used to sign the message\n\n18\n\n// Define the signMessage function which is used to sign the message\n\n19\n\nconst\n\nhandleSignMessage\n\n=\n\nasync\n\n(\n\n)\n\n=>\n\n{\n\n19\n\nconst\n\nhandleSignMessage\n\n=\n\nasync\n\n(\n\n)\n\n=>\n\n{\n\n20\n\nconst\n\naccounts\n\n=\n\nawait\n\nweb3\n\n?.\n\neth\n\n.\n\ngetAccounts\n\n(\n\n)\n\n20\n\nconst\n\naccounts\n\n=\n\nawait\n\nweb3\n\n?.\n\neth\n\n.\n\ngetAccounts\n\n(\n\n)\n\n21\n\nconst\n\naddress\n\n=\n\naccounts\n\n?.\n\n[\n\n0\n\n]\n\n21\n\nconst\n\naddress\n\n=\n\naccounts\n\n?.\n\n[\n\n0\n\n]\n\n22\n\nif\n\n(\n\naddress\n\n&&\n\nweb3\n\n)\n\n{\n\n22\n\nif\n\n(\n\naddress\n\n&&\n\nweb3\n\n)\n\n{\n\n23\n\ntry\n\n{\n\n23\n\ntry\n\n{\n\n24\n\n// Sign the message using the connected wallet\n\n24\n\n// Sign the message using the connected wallet\n\n25\n\nconst\n\nsignedMessage\n\n=\n\nawait\n\nweb3\n\n.\n\neth\n\n.\n\npersonal\n\n.\n\nsign\n\n(\n\nmessage\n\n,\n\naddress\n\n,\n\n\"\"\n\n)\n\n25\n\nconst\n\nsignedMessage\n\n=\n\nawait\n\nweb3\n\n.\n\neth\n\n.\n\npersonal\n\n.\n\nsign\n\n(\n\nmessage\n\n,\n\naddress\n\n,\n\n\"\"\n\n)\n\n26\n\n// Set the signature state with the signed message\n\n26\n\n// Set the signature state with the signed message\n\n27\n\nsetSignature\n\n(\n\nsignedMessage\n\n)\n\n27\n\nsetSignature\n\n(\n\nsignedMessage\n\n)\n\n28\n\n// Do something with the signature\n\n28\n\n// Do something with the signature\n\n29\n\n}\n\ncatch\n\n(\n\nerror\n\n)\n\n{\n\n29\n\n}\n\ncatch\n\n(\n\nerror\n\n)\n\n{\n\n30\n\n// Log any errors that occur during the signing process\n\n30\n\n// Log any errors that occur during the signing process\n\n31\n\nconsole\n\n.\n\nerror\n\n(\n\n\"handleSignMessage:\"\n\n,\n\nerror\n\n)\n\n31\n\nconsole\n\n.\n\nerror\n\n(\n\n\"handleSignMessage:\"\n\n,\n\nerror\n\n)\n\n32\n\n}\n\n32\n\n}\n\n33\n\n}\n\n33\n\n}\n\n34\n\n}\n\n34\n\n}\n\n35\n\n35\n\n36\n\n// Render the component\n\n36\n\n// Render the component\n\n37\n\nreturn\n\n(\n\n37\n\nreturn\n\n(\n\n38\n\n<\n\ndiv className\n\n=\n\n\"py-2 flex flex-col gap-2\"\n\n>\n\n38\n\n<\n\ndiv className\n\n=\n\n\"py-2 flex flex-col gap-2\"\n\n>\n\n39\n\n<\n\ninput\n\n39\n\n<\n\ninput\n\n40\n\nclassName\n\n=\n\n\"text-black\"\n\n40\n\nclassName\n\n=\n\n\"text-black\"\n\n41\n\ntype\n\n=\n\n\"text\"\n\n41\n\ntype\n\n=\n\n\"text\"\n\n42\n\nonChange\n\n=\n\n{\n\nhandleInput\n\n}\n\n42\n\nonChange\n\n=\n\n{\n\nhandleInput\n\n}\n\n43\n\nmaxLength\n\n=\n\n{\n\n20\n\n}\n\n43\n\nmaxLength\n\n=\n\n{\n\n20\n\n}\n\n44\n\nplaceholder\n\n=\n\n\"Set Message\"\n\n44\n\nplaceholder\n\n=\n\n\"Set Message\"\n\n45\n\n/\n\n>\n\n45\n\n/\n\n>\n\n46\n\n<\n\nbutton\n\n46\n\n<\n\nbutton\n\n47\n\ntype\n\n=\n\n\"button\"\n\n47\n\ntype\n\n=\n\n\"button\"\n\n48\n\nclassName\n\n=\n\n\"border border-white font-bold p-2 rounded-md\"\n\n48\n\nclassName\n\n=\n\n\"border border-white font-bold p-2 rounded-md\"\n\n49\n\nonClick\n\n=\n\n{\n\nhandleSignMessage\n\n}\n\n49\n\nonClick\n\n=\n\n{\n\nhandleSignMessage\n\n}\n\n50\n\n>\n\n50\n\n>\n\n51\n\nSign\n\nMessage\n\n51\n\nSign\n\nMessage\n\n52\n\n<\n\n/\n\nbutton\n\n>\n\n52\n\n<\n\n/\n\nbutton\n\n>\n\n53\n\n{\n\nsignature\n\n&&\n\n(\n\n53\n\n{\n\nsignature\n\n&&\n\n(\n\n54\n\n<\n\ndiv className\n\n=\n\n\"w-[20vw] break-words mx-auto text-center\"\n\n>\n\n{\n\n`\n\nSignature:\n\n${\n\nsignature\n\n}\n\n`\n\n}\n\n<\n\n/\n\ndiv\n\n>\n\n54\n\n<\n\ndiv className\n\n=\n\n\"w-[20vw] break-words mx-auto text-center\"\n\n>\n\n{\n\n`\n\nSignature:\n\n${\n\nsignature\n\n}\n\n`\n\n}\n\n<\n\n/\n\ndiv\n\n>\n\n55\n\n)\n\n}\n\n55\n\n)\n\n}\n\n56\n\n<\n\n/\n\ndiv\n\n>\n\n56\n\n<\n\n/\n\ndiv\n\n>\n\n57\n\n)\n\n57\n\n)\n\n58\n\n}\n\n58\n\n}\n\n59\n\n59\n\n60\n\nexport\n\ndefault\n\nSignMessage\n\n60\n\nexport\n\ndefault\n\nSignMessage", "explanation": "**SignMessage Component Overview**\n\nThe SignMessage component is a user interface element in Magic Labs' embedded wallet that allows users to sign a message using their wallet. This feature enables users to authenticate a message on the blockchain, demonstrating ownership and control over the message.\n\n**Key Features and Purpose:**\n\n1. **User Interface**: The component includes an input field for users to enter a message, a button to initiate the signing process, and a display area to show the signed message (signature).\n2. **Authentication**: When the user clicks the \"Sign\" button, the component requests the user to sign the input message using their connected wallet.\n3. **Blockchain Integration**: Using the Magic Labs' embedded wallet, the component interacts with the Ethereum blockchain to sign the message using the user's account.\n4. **Error Handling**: If any errors occur during the signing process, the component catches and logs the errors for debugging purposes.\n\n**Usage and Integration:**\n\nTo use the SignMessage component, a developer would:\n\n1. Create a new component file (SignMessage.tsx) in their project.\n2. Import the component from the Magic Labs' embedded wallet package.\n3. Implement the necessary state management to handle the user input and signed message.\n4. Integrate the component into their application, handling events and state updates as necessary.\n\nBy incorporating the SignMessage component into their application, developers can provide users with a secure and seamless way to authenticate messages on the blockchain. This feature is particularly useful for applications requiring identity verification, consent, or other types of signature-based authentication.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/guides/magic-evm-nextjs#chunk-11", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nThe WalletDetail component will simply display the current user's address and balance. Just as with the SendTransaction and SignMessage components, this can be done the same way you would do it without Magic.\n\nWalletDetail\n\nSendTransaction\n\nSignMessage\n\nCreate a new file in components named WalletDetail.tsx and add the following code:\n\ncomponents\n\nWalletDetail.tsx\n\nCopy\n\n01\n\n// src/app/components/WalletDetail.tsx\n\n01\n\n// src/app/components/WalletDetail.tsx\n\n02\n\n02\n\n03\n\nimport\n\n{\n\nuseEffect\n\n,\n\nuseMemo\n\n,\n\nuseState\n\n}\n\nfrom\n\n\"react\"\n\n03\n\nimport\n\n{\n\nuseEffect\n\n,\n\nuseMemo\n\n,\n\nuseState\n\n}\n\nfrom\n\n\"react\"\n\n04\n\nimport\n\n{\n\nuseMagic\n\n}\n\nfrom\n\n\"../context/MagicProvider\"\n\n04\n\nimport\n\n{\n\nuseMagic\n\n}\n\nfrom\n\n\"../context/MagicProvider\"\n\n05\n\nimport\n\n{\n\nuseUser\n\n}\n\nfrom\n\n\"../context/UserContext\"\n\n05\n\nimport\n\n{\n\nuseUser\n\n}\n\nfrom\n\n\"../context/UserContext\"\n\n06\n\n06\n\n07\n\nconst\n\nWalletDetail\n\n=\n\n(\n\n)\n\n=>\n\n{\n\n07\n\nconst\n\nWalletDetail\n\n=\n\n(\n\n)\n\n=>\n\n{\n\n08\n\n// Use the Web3Context to get the current instance of web3\n\n08\n\n// Use the Web3Context to get the current instance of web3\n\n09\n\nconst\n\n{\n\nweb3\n\n}\n\n=\n\nuseMagic\n\n(\n\n)\n\n09\n\nconst\n\n{\n\nweb3\n\n}\n\n=\n\nuseMagic\n\n(\n\n)\n\n10\n\nconst\n\n{\n\nuser\n\n}\n\n=\n\nuseUser\n\n(\n\n)\n\n10\n\nconst\n\n{\n\nuser\n\n}\n\n=\n\nuseUser\n\n(\n\n)\n\n11\n\n11\n\n12\n\n// Initialize state variable for balance\n\n12\n\n// Initialize state variable for balance\n\n13\n\nconst\n\n[\n\nbalance\n\n,\n\nsetBalance\n\n]\n\n=\n\nuseState\n\n(\n\n\"...\"\n\n)\n\n13\n\nconst\n\n[\n\nbalance\n\n,\n\nsetBalance\n\n]\n\n=\n\nuseState\n\n(\n\n\"...\"\n\n)\n\n14\n\n14\n\n15\n\nuseEffect\n\n(\n\n(\n\n)\n\n=>\n\n{\n\n15\n\nuseEffect\n\n(\n\n(\n\n)\n\n=>\n\n{\n\n16\n\nconst\n\ngetBalance\n\n=\n\nasync\n\n(\n\n)\n\n=>\n\n{\n\n16\n\nconst\n\ngetBalance\n\n=\n\nasync\n\n(\n\n)\n\n=>\n\n{\n\n17\n\nif\n\n(\n\n!\n\nuser\n\n?.\n\naddress\n\n||\n\n!\n\nweb3\n\n)\n\nreturn\n\n17\n\nif\n\n(\n\n!\n\nuser\n\n?.\n\naddress\n\n||\n\n!\n\nweb3\n\n)\n\nreturn\n\n18\n\ntry\n\n{\n\n18\n\ntry\n\n{\n\n19\n\n// If account and web3 are available, get the balance\n\n19\n\n// If account and web3 are available, get the balance\n\n20\n\nconst\n\nbalance\n\n=\n\nawait\n\nweb3\n\n.\n\neth\n\n.\n\ngetBalance\n\n(\n\nuser\n\n?.\n\naddress\n\n)\n\n20\n\nconst\n\nbalance\n\n=\n\nawait\n\nweb3\n\n.\n\neth\n\n.\n\ngetBalance\n\n(\n\nuser\n\n?.\n\naddress\n\n)\n\n21\n\n21\n\n22\n\n// Convert the balance from Wei to Ether and set the state variable\n\n22\n\n// Convert the balance from Wei to Ether and set the state variable\n\n23\n\nsetBalance\n\n(\n\nweb3\n\n.\n\nutils\n\n.\n\nfromWei\n\n(\n\nbalance\n\n,\n\n\"ether\"\n\n)\n\n.\n\nsubstring\n\n(\n\n0\n\n,\n\n7\n\n)\n\n)\n\n23\n\nsetBalance\n\n(\n\nweb3\n\n.\n\nutils\n\n.\n\nfromWei\n\n(\n\nbalance\n\n,\n\n\"ether\"\n\n)\n\n.\n\nsubstring\n\n(\n\n0\n\n,\n\n7\n\n)\n\n)\n\n24\n\n}\n\ncatch\n\n(\n\nerror\n\n)\n\n{\n\n24\n\n}\n\ncatch\n\n(\n\nerror\n\n)\n\n{\n\n25\n\nconsole\n\n.\n\nerror\n\n(\n\nerror\n\n)\n\n25\n\nconsole\n\n.\n\nerror\n\n(\n\nerror\n\n)\n\n26\n\n}\n\n26\n\n}\n\n27\n\n}\n\n27\n\n}\n\n28\n\n28\n\n29\n\ngetBalance\n\n(\n\n)\n\n29\n\ngetBalance\n\n(\n\n)\n\n30\n\n}\n\n,\n\n[\n\nweb3\n\n,\n\nuser\n\n]\n\n)\n\n30\n\n}\n\n,\n\n[\n\nweb3\n\n,\n\nuser\n\n]\n\n)\n\n31\n\n31\n\n32\n\n// Render the account address and balance\n\n32\n\n// Render the account address and balance\n\n33\n\nreturn\n\n(\n\n33\n\nreturn\n\n(\n\n34\n\n<\n\ndiv\n\n>\n\n34\n\n<\n\ndiv\n\n>\n\n35\n\n<\n\np\n\n>\n\nAddress\n\n:\n\n{\n\nuser\n\n?.\n\naddress\n\n}\n\n<\n\n/\n\np\n\n>\n\n35\n\n<\n\np\n\n>\n\nAddress\n\n:\n\n{\n\nuser\n\n?.\n\naddress\n\n}\n\n<\n\n/\n\np\n\n>\n\n36\n\n<\n\np\n\n>\n\nBalance\n\n:\n\n{\n\nbalance\n\n}\n\nETH\n\n<\n\n/\n\np\n\n>\n\n36\n\n<\n\np\n\n>\n\nBalance\n\n:\n\n{\n\nbalance\n\n}\n\nETH\n\n<\n\n/\n\np\n\n>\n\n37\n\n<\n\n/\n\ndiv\n\n>\n\n37\n\n<\n\n/\n\ndiv\n\n>\n\n38\n\n)\n\n38\n\n)\n\n39\n\n}\n\n39\n\n}\n\n40\n\n40\n\n41\n\nexport\n\ndefault\n\nWalletDetail\n\n41\n\nexport\n\ndefault\n\nWalletDetail", "explanation": "**WalletDetail Component Explanation**\n\nThe WalletDetail component is a part of the Magic Labs documentation that displays a user's Ethereum wallet address and balance. This component uses React and Magic's Web3 Context to retrieve the user's wallet information.\n\n**Main Purpose**\n\nThe main purpose of the WalletDetail component is to provide a simple way to display a user's Ethereum wallet address and balance, making it easier for users to manage their wallets within the application.\n\n**Key Features**\n\n1. **User Address**: The WalletDetail component displays the user's Ethereum wallet address.\n2. **Balance**: The component fetches the user's balance from the Ethereum blockchain and displays it in Ether (ETH).\n3. **Error Handling**: The component catches any errors that occur during balance retrieval and logs the error to the console.\n\n**Component Structure**\n\nThe WalletDetail component uses the following imports and dependencies:\n\n1. `useMagic`: Retrieves the current Web3 instance from the MagicProvider context.\n2. `useUser`: Retrieves the current user data from the UserContext.\n3. `useState`: Initializes the balance state variable.\n4. `useEffect`: Runs a function when the component mounts or updates, responsible for fetching the user's balance.\n\n**Code Breakdown**\n\nThe code is divided into several sections:\n\n1. **Importing Dependencies**: The component imports the necessary dependencies, including `useMagic`, `useUser`, and `useState`.\n2. **Component Definition**: The WalletDetail component is defined as a function that returns JSX elements.\n3. **State Initialization**: The component initializes a balance state variable using `useState`.\n4. **Effect Hook**: The component uses the `useEffect` hook to run a function when the component mounts or updates. This function fetches the user's balance and sets the state variable.\n5. **Error Handling**: The component catches any errors that occur during balance retrieval and logs the error to the console.\n6. **Rendering**: The component renders a simple UI displaying the user's address and balance.\n\n**Usage**\n\nTo use the WalletDetail component, import it into your application and wrap the component with the MagicProvider context. This will provide the necessary dependencies for the component to work correctly.\n\n```jsx\nimport WalletDetail from './WalletDetail';\n\n// Usage:\nimport MagicProvider from '@magic-sdk/react';\n\nfunction App() {\n  return (\n    <MagicProvider>\n      <WalletDetail />\n    </MagicProvider>\n  );\n}\n```\n\nBy following this guide, you can easily integrate the WalletDetail component into your application to provide a seamless user experience.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/guides/magic-evm-nextjs#chunk-12", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nFinally, update the main index file to use the newly created components. Replace the contents of src/app/page.tsx with the following code:\n\nsrc/app/page.tsx\n\nCopy\n\n01\n\n// src/app/page.tsx\n\n01\n\n// src/app/page.tsx\n\n02\n\n02\n\n03\n\n\"use client\"\n\n03\n\n\"use client\"\n\n04\n\nimport\n\n{\n\n04\n\nimport\n\n{\n\n05\n\nConnectButton\n\n,\n\n05\n\nConnectButton\n\n,\n\n06\n\nDisconnectButton\n\n,\n\n06\n\nDisconnectButton\n\n,\n\n07\n\nShowUIButton\n\n,\n\n07\n\nShowUIButton\n\n,\n\n08\n\nSignMessage\n\n,\n\n08\n\nSignMessage\n\n,\n\n09\n\nWalletDetail\n\n09\n\nWalletDetail\n\n10\n\n}\n\nfrom\n\n\"../app/components/index\"\n\n10\n\n}\n\nfrom\n\n\"../app/components/index\"\n\n11\n\nimport\n\n{\n\nuseUser\n\n}\n\nfrom\n\n\"../app/context/UserContext\"\n\n11\n\nimport\n\n{\n\nuseUser\n\n}\n\nfrom\n\n\"../app/context/UserContext\"\n\n12\n\n12\n\n13\n\nexport\n\ndefault\n\nfunction\n\nHome\n\n(\n\n)\n\n{\n\n13\n\nexport\n\ndefault\n\nfunction\n\nHome\n\n(\n\n)\n\n{\n\n14\n\nconst\n\n{\n\nuser\n\n}\n\n=\n\nuseUser\n\n(\n\n)\n\n14\n\nconst\n\n{\n\nuser\n\n}\n\n=\n\nuseUser\n\n(\n\n)\n\n15\n\nreturn\n\n(\n\n15\n\nreturn\n\n(\n\n16\n\n<\n\nmain className\n\n=\n\n\"min-h-screen bg-black\"\n\n>\n\n16\n\n<\n\nmain className\n\n=\n\n\"min-h-screen bg-black\"\n\n>\n\n17\n\n{\n\nuser\n\n?\n\n17\n\n{\n\nuser\n\n?\n\n18\n\n<\n\ndiv className\n\n=\n\n\"p-2 flex flex-col w-[40vw] mx-auto\"\n\n>\n\n18\n\n<\n\ndiv className\n\n=\n\n\"p-2 flex flex-col w-[40vw] mx-auto\"\n\n>\n\n19\n\n<\n\nWalletDetail\n\n/\n\n>\n\n19\n\n<\n\nWalletDetail\n\n/\n\n>\n\n20\n\n<\n\nShowUIButton\n\n/\n\n>\n\n20\n\n<\n\nShowUIButton\n\n/\n\n>\n\n21\n\n<\n\nSignMessage\n\n/\n\n>\n\n21\n\n<\n\nSignMessage\n\n/\n\n>\n\n22\n\n<\n\nDisconnectButton\n\n/\n\n>\n\n22\n\n<\n\nDisconnectButton\n\n/\n\n>\n\n23\n\n<\n\n/\n\ndiv\n\n>\n\n23\n\n<\n\n/\n\ndiv\n\n>\n\n24\n\n:\n\n24\n\n:\n\n25\n\n<\n\ndiv className\n\n=\n\n\"p-2\"\n\n>\n\n25\n\n<\n\ndiv className\n\n=\n\n\"p-2\"\n\n>\n\n26\n\n<\n\nConnectButton\n\n/\n\n>\n\n26\n\n<\n\nConnectButton\n\n/\n\n>\n\n27\n\n<\n\n/\n\ndiv\n\n>\n\n27\n\n<\n\n/\n\ndiv\n\n>\n\n28\n\n}\n\n28\n\n}\n\n29\n\n<\n\n/\n\nmain\n\n>\n\n29\n\n<\n\n/\n\nmain\n\n>\n\n30\n\n)\n\n30\n\n)\n\n31\n\n}\n\n31\n\n}\n\nLastly, run the following command to start the application:\n\nCopy\n\n01\n\nnpm\n\nrun dev\n\n01\n\nnpm\n\nrun dev\n\nThis command will start the development server and you should be able to view the application in your web browser at http://localhost:3000.\n\nhttp://localhost:3000", "explanation": "The section titled '#Final UI Updates' appears in the Magic Labs embedded wallet documentation on integrating Magic with Next.js. This section is about updating the main index file to display the newly created components.\n\nHere's what it does in clear, concise terms:\n\n1. **Replaces the contents of the `src/app/page.tsx` file**: The new code imports the necessary components, such as `ConnectButton`, `DisconnectButton`, `ShowUIButton`, `SignMessage`, and `WalletDetail`.\n2. **Updates the UI based on user presence**: Using the `useUser` hook from `UserContext`, the code checks if a user is currently connected. If a user is connected, it displays a detailed wallet view with buttons for showing UI, signing messages, and disconnecting. If no user is connected, it displays a connect button.\n3. **Imports necessary components**: Components are imported from `../app/components/index` to enable their usage within the application.\n4. **Starts the application**: After updating the UI, the user is instructed to run `npm run dev` to start the development server and view the application in their web browser at http://localhost:3000.\n\nThe primary purpose of this section is to **guide users through the final UI configuration and deployment of their Magic-powered Web3 application**. By updating the `src/app/page.tsx` file and running the `npm run dev` command, users can interact with their application in a functional and secure manner.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/guides/magic-evm-nextjs#chunk-13", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nTo customize the app, feel free to modify any of the code and restructure the project. This application uses our Dedicated Wallet. The Dedicated Wallet meets the widest variety of needs while still being incredibly simple to implement. In addition to the baked-in Login UI, it has plenty of customization options, supports social login through providers like GitHub and Discord, allows for enterprise multi-factor authentication, and more.\n\nDedicated Wallet\n\nLogin UI\n\nsocial login\n\nenterprise multi-factor authentication", "explanation": "The section '#Customize Your App' from the Magic Labs embedded wallet documentation is about providing options for users to tailor their application to their specific needs. The main purpose of this section is to inform developers about the level of customization available in the Magic Labs Dedicated Wallet.\n\nHere's a concise breakdown:\n\n1. **Dedicated Wallet**: This is a customizable wallet solution offered by Magic Labs that provides a wide range of features while remaining simple to implement.\n2. **Customization Options**: The Dedicated Wallet allows you to modify any part of the code and project structure to fit your application's specific requirements.\n3. **Features of the Dedicated Wallet**:\n   - **Login UI**: Pre-built login interface for user authentication.\n   - **Social Login**: Enables users to log in using their social media accounts (e.g., GitHub and Discord).\n   - **Enterprise Multi-Factor Authentication**: Supports additional security measures for enterprises, providing an extra layer of protection for users.\n\nIn summary, the goal of this section is to empower developers to create customized applications that meet their unique needs and requirements using Magic Labs' Dedicated Wallet.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/guides/magic-evm-nextjs#chunk-14", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nWe have a suite of resources to help developers and companies with a wide variety of use cases. Below are some ideas to get you started, but feel free to browse our documentation or reach out with specific questions.\n\n\u2022 Add support for OAuth social providers like Google, Github, and Discord\n\n\u2022 Add support for one or more of the 25+ blockchains accessible through Magic\n\n\u2022 Use Magic across a variety of platforms, including Web, iOS, Android, Unity, and more\n\n\u2022 Learn more about Magic's security framework and how it can make your applications more secure\n\n\u2022 Read Magic's Whitepaper\n\nAdd support for OAuth social providers like Google, Github, and Discord\n\nGoogle\n\nGithub\n\nDiscord\n\nAdd support for one or more of the 25+ blockchains accessible through Magic\n\n25+ blockchains accessible through Magic\n\nUse Magic across a variety of platforms, including Web, iOS, Android, Unity, and more\n\nvariety of platforms\n\nLearn more about Magic's security framework and how it can make your applications more secure\n\nMagic's security framework\n\nRead Magic's Whitepaper\n\nWhitepaper", "explanation": "The \"#Next Steps\" section in the Magic EVM Next.js guide is a compilation of additional resources and ideas to help developers further enhance their Magic EVM Next.js project. Its main purpose is to provide suggestions for expanding the functionality of the project, improving its security, and exploring other possibilities.\n\nThis section offers the following key features:\n\n1. **Additional Integration Ideas**: It includes potential use cases such as integrating social login providers (Google, GitHub, and Discord), connecting to various blockchains, and supporting multiple platforms (Web, iOS, Android, Unity, etc.).\n\n2. **Security Guidance**: It highlights the importance of learning about Magic's security framework to improve the overall security of the application.\n\n3. **Core Resources**: It provides pointers to essential resources such as Magic's Whitepaper, which offers in-depth information about the Magic ecosystem.\n\nThe primary goal of this section is to serve as a starting point for further exploration and development, empowering developers to create more comprehensive and secure solutions.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/guides/magic-evm-nextjs#chunk-15", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nMagic interacts with the Polkadot blockchain via Magic's extension NPM package @magic-ext/polkadot. The Polkadot extension also lets you interact with the blockchain using methods from polkadot-js.\n\nPolkadot\n\n@magic-ext/polkadot\n\n@magic-ext/polkadot\n\nYou can skip straight to our kitchen sink example directly:\n\n\ud83d\udc49 Polkadot Example\n\nPolkadot Example\n\nCopy\n\n01\n\nnpm\n\ninstall\n\n--save @magic-ext/polkadot\n\n01\n\nnpm\n\ninstall\n\n--save @magic-ext/polkadot", "explanation": "This section of the documentation is about installing the necessary package to interact with the Polkadot blockchain using Magic Labs' embedded wallet.\n\n**Main Purpose:**\n\nThe main purpose of this section is to guide users through the process of installing the `@magic-ext/polkadot` package, which enables communication between Magic's extension and the Polkadot blockchain.\n\n**Key Points:**\n\n1. It mentions using Magic's extension NPM package `@magic-ext/polkadot` to interact with the Polkadot blockchain.\n2. The document also references using methods from `polkadot-js`, a popular library for interacting with the Polkadot blockchain.\n3. It provides a shortcut to jump directly to a kitchen sink example that demonstrates the usage of `@magic-ext/polkadot`.\n4. The core instruction is to install `@magic-ext/polkadot` using npm, with the command `npm install --save @magic-ext/polkadot`.\n\nIn summary, this section is designed to assist users in setting up their environment to access the Polkadot blockchain using Magic Labs' embedded wallet.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/other/polkadot#chunk-1", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\nimport\n\n{\n\nPolkadotExtension\n\n}\n\nfrom\n\n'@magic-ext/polkadot'\n\n;\n\n02\n\nimport\n\n{\n\nPolkadotExtension\n\n}\n\nfrom\n\n'@magic-ext/polkadot'\n\n;\n\n03\n\n03\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_API_KEY'\n\n,\n\n{\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_API_KEY'\n\n,\n\n{\n\n05\n\nextensions\n\n:\n\n[\n\n05\n\nextensions\n\n:\n\n[\n\n06\n\nnew\n\nPolkadotExtension\n\n(\n\n{\n\n06\n\nnew\n\nPolkadotExtension\n\n(\n\n{\n\n07\n\nrpcUrl\n\n:\n\n'polkadot rpc url'\n\n,\n\n07\n\nrpcUrl\n\n:\n\n'polkadot rpc url'\n\n,\n\n08\n\n}\n\n)\n\n,\n\n08\n\n}\n\n)\n\n,\n\n09\n\n]\n\n,\n\n09\n\n]\n\n,\n\n10\n\n}\n\n)\n\n;\n\n10\n\n}\n\n)\n\n;", "explanation": "**Initialization Section Overview**\n\nThe Initialization section is the first step in setting up the Magic Labs embedded wallet on a Polkadot blockchain. It's a crucial part of the process that prepares the wallet for use.\n\n**Main Purpose:**\n\nThe main purpose of this section is to import the necessary modules, create a Magic instance, and configure it with the required parameters, including the Polkadot extension and RPC URL.\n\n**Key Components:**\n\n1. **Importing Modules:** The section starts by importing the required modules, including the Magic SDK and the Polkadot extension.\n2. **Creating a Magic Instance:** A new instance of the Magic class is created, passing in the API key and an object containing extension configurations.\n3. **Configuring Extensions:** The Polkadot extension is configured with the RPC URL, which is essential for interacting with the Polkadot network.\n4. **Instantiating the Extension:** A new instance of the Polkadot extension is created, passing in an object containing the RPC URL.\n\n**Best Practice:**\n\nWhen implementing the Initialization section, make sure to replace `'YOUR_API_KEY'` with your actual API key and `'polkadot rpc url'` with the actual RPC URL for the Polkadot network.\n\nBy following this initialization process, you'll be able to create a functional Magic Labs embedded wallet on the Polkadot blockchain, ready for use in your application.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/other/polkadot#chunk-2", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n#\n\nUsing getAccount function to get Polkadot public address for current user.\n\ngetAccount\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\nimport\n\n{\n\nPolkadotExtension\n\n}\n\nfrom\n\n'@magic-ext/polkadot'\n\n;\n\n02\n\nimport\n\n{\n\nPolkadotExtension\n\n}\n\nfrom\n\n'@magic-ext/polkadot'\n\n;\n\n03\n\n03\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_API_KEY'\n\n,\n\n{\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_API_KEY'\n\n,\n\n{\n\n05\n\nextensions\n\n:\n\n[\n\n05\n\nextensions\n\n:\n\n[\n\n06\n\nnew\n\nPolkadotExtension\n\n(\n\n{\n\n06\n\nnew\n\nPolkadotExtension\n\n(\n\n{\n\n07\n\nrpcUrl\n\n:\n\n'polkadot rpc url'\n\n,\n\n07\n\nrpcUrl\n\n:\n\n'polkadot rpc url'\n\n,\n\n08\n\n}\n\n)\n\n,\n\n08\n\n}\n\n)\n\n,\n\n09\n\n]\n\n,\n\n09\n\n]\n\n,\n\n10\n\n}\n\n)\n\n;\n\n10\n\n}\n\n)\n\n;\n\n11\n\n11\n\n12\n\n// Get user's Polkadot public address\n\n12\n\n// Get user's Polkadot public address\n\n13\n\nconst\n\npublicAddress\n\n=\n\nawait\n\nmagic\n\n.\n\npolkadot\n\n.\n\ngetAccount\n\n(\n\n)\n\n;\n\n13\n\nconst\n\npublicAddress\n\n=\n\nawait\n\nmagic\n\n.\n\npolkadot\n\n.\n\ngetAccount\n\n(\n\n)\n\n;\n\n14\n\nconsole\n\n.\n\nlog\n\n(\n\n'Polkadot Public Address: '\n\n,\n\npublicAddress\n\n)\n\n;\n\n14\n\nconsole\n\n.\n\nlog\n\n(\n\n'Polkadot Public Address: '\n\n,\n\npublicAddress\n\n)\n\n;", "explanation": "**Get User Info Method Overview**\n\nThe `getAccount` method, as part of the `#Get User Info` documentation, is used to retrieve a user's Polkadot public address using the Magic Labs embedded wallet SDK.\n\n**Purpose**\n\nThe main purpose of this method is to authenticate the current user and obtain their Polkadot account information, specifically the public address. This information can be used to interact with the Polkadot blockchain, allowing users to perform various actions such as sending tokens or participating in smart contract interactions.\n\n**Key Steps**\n\nTo use the `getAccount` method:\n\n1. Import the necessary Magic SDK and Polkadot extension modules.\n2. Initialize the Magic object with your API key and specify the Polkadot extension.\n3. Call the `getAccount` method on the `Polkadot` object, passing no arguments.\n4. Capture the resulting Polkadot public address and log it to the console for verification.\n\n**Example Code**\n\nThe provided code snippet demonstrates how to call the `getAccount` method and retrieve the user's Polkadot public address.\n\n```javascript\nconst magic = new Magic('YOUR_API_KEY', {\n  extensions: [\n    new PolkadotExtension({\n      rpcUrl: 'polkadot rpc url',\n    }),\n  ],\n});\n\nconst publicAddress = await magic.polkadot.getAccount();\nconsole.log('Polkadot Public Address:', publicAddress);\n```\n\n**Note**: Make sure to replace `YOUR_API_KEY` and `polkadot rpc url` with your actual API key and Polkadot RPC URL, respectively.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/other/polkadot#chunk-3", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nTo send a standard Polkadot blockchain transaction, you can call the magic.polkadot.sendTransaction method.\n\nmagic.polkadot.sendTransaction\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\nimport\n\n{\n\nPolkadotExtension\n\n}\n\nfrom\n\n'@magic-ext/polkadot'\n\n;\n\n02\n\nimport\n\n{\n\nPolkadotExtension\n\n}\n\nfrom\n\n'@magic-ext/polkadot'\n\n;\n\n03\n\n03\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_API_KEY'\n\n,\n\n{\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_API_KEY'\n\n,\n\n{\n\n05\n\nextensions\n\n:\n\n[\n\n05\n\nextensions\n\n:\n\n[\n\n06\n\nnew\n\nPolkadotExtension\n\n(\n\n{\n\n06\n\nnew\n\nPolkadotExtension\n\n(\n\n{\n\n07\n\nrpcUrl\n\n:\n\n'polkadot rpc url'\n\n,\n\n07\n\nrpcUrl\n\n:\n\n'polkadot rpc url'\n\n,\n\n08\n\n}\n\n)\n\n,\n\n08\n\n}\n\n)\n\n,\n\n09\n\n]\n\n,\n\n09\n\n]\n\n,\n\n10\n\n}\n\n)\n\n;\n\n10\n\n}\n\n)\n\n;\n\n11\n\n11\n\n12\n\nconst\n\ntx\n\n=\n\nawait\n\nmagic\n\n.\n\npolkadot\n\n.\n\nsendTransaction\n\n(\n\n12\n\nconst\n\ntx\n\n=\n\nawait\n\nmagic\n\n.\n\npolkadot\n\n.\n\nsendTransaction\n\n(\n\n13\n\n// to address\n\n13\n\n// to address\n\n14\n\n'5H3pELHbg9skXE2HfLqP23UPgrgu2Juj55CH6sdDGWc2HKNs'\n\n,\n\n14\n\n'5H3pELHbg9skXE2HfLqP23UPgrgu2Juj55CH6sdDGWc2HKNs'\n\n,\n\n15\n\n1000000000000000\n\n,\n\n// amount\n\n15\n\n1000000000000000\n\n,\n\n// amount\n\n16\n\n)\n\n;\n\n16\n\n)\n\n;\n\n17\n\n17\n\n18\n\nconsole\n\n.\n\nlog\n\n(\n\n'transaction hash'\n\n,\n\ntx\n\n)\n\n;\n\n18\n\nconsole\n\n.\n\nlog\n\n(\n\n'transaction hash'\n\n,\n\ntx\n\n)\n\n;", "explanation": "**#Send Transaction**\n\nThe `#Send Transaction` section of the Magic Labs embedded wallet documentation explains how to send a standard transaction on the Polkadot blockchain using the `magic.polkadot.sendTransaction` method.\n\n**Main Purpose:**\n\nThe main purpose of this method is to enable users to create and send transactions on the Polkadot blockchain, allowing them to transfer funds between addresses.\n\n**Key Steps:**\n\n1. Create an instance of the `Magic` class, passing in the API key and network extensions (in this case, `PolkadotExtension`).\n2. Set up the `PolkadotExtension` with the necessary configuration (RPC URL).\n3. Create a new transaction object by calling `magic.polkadot.sendTransaction`, specifying the `to` address, `amount`, and any additional transaction options.\n4. Call the `sendTransaction` method, which returns a promise that resolves with the transaction hash.\n\n**Example Usage:**\n\nThe provided code example demonstrates how to send a transaction on the Polkadot blockchain, with the following parameters:\n\n* `to` address: `5H3pELHbg9skXE2HfLqP23UPgrgu2Juj55CH6sdDGWc2HKNs`\n* `amount`: 1000000000000000 (1 PDOT)\n\nThe example also logs the transaction hash to the console after the transaction is sent.\n\nBy following this documentation, developers can integrate the Magic Labs embedded wallet into their applications and enable users to send transactions on the Polkadot blockchain.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/other/polkadot#chunk-4", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nTo call a Polkadot blockchain contract as transaction, you can call the magic.polkadot.contractCall method.\n\nmagic.polkadot.contractCall\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\nimport\n\n{\n\nPolkadotExtension\n\n}\n\nfrom\n\n'@magic-ext/polkadot'\n\n;\n\n02\n\nimport\n\n{\n\nPolkadotExtension\n\n}\n\nfrom\n\n'@magic-ext/polkadot'\n\n;\n\n03\n\n03\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_API_KEY'\n\n,\n\n{\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_API_KEY'\n\n,\n\n{\n\n05\n\nextensions\n\n:\n\n[\n\n05\n\nextensions\n\n:\n\n[\n\n06\n\nnew\n\nPolkadotExtension\n\n(\n\n{\n\n06\n\nnew\n\nPolkadotExtension\n\n(\n\n{\n\n07\n\nrpcUrl\n\n:\n\n'polkadot rpc url'\n\n,\n\n07\n\nrpcUrl\n\n:\n\n'polkadot rpc url'\n\n,\n\n08\n\n}\n\n)\n\n,\n\n08\n\n}\n\n)\n\n,\n\n09\n\n]\n\n,\n\n09\n\n]\n\n,\n\n10\n\n}\n\n)\n\n;\n\n10\n\n}\n\n)\n\n;\n\n11\n\n11\n\n12\n\nconst\n\napi\n\n=\n\nawait\n\nApiPromise\n\n.\n\ncreate\n\n(\n\n{\n\n12\n\nconst\n\napi\n\n=\n\nawait\n\nApiPromise\n\n.\n\ncreate\n\n(\n\n{\n\n13\n\nprovider\n\n:\n\nnew\n\nWsProvider\n\n(\n\n'polkadot rpc url'\n\n)\n\n,\n\n13\n\nprovider\n\n:\n\nnew\n\nWsProvider\n\n(\n\n'polkadot rpc url'\n\n)\n\n,\n\n14\n\n}\n\n)\n\n;\n\n14\n\n}\n\n)\n\n;\n\n15\n\nawait\n\napi\n\n.\n\nisReady\n\n;\n\n15\n\nawait\n\napi\n\n.\n\nisReady\n\n;\n\n16\n\nconst\n\nabi\n\n=\n\nnew\n\nAbi\n\n(\n\napi\n\n.\n\nregistry\n\n,\n\ncontractABI\n\n)\n\n;\n\n16\n\nconst\n\nabi\n\n=\n\nnew\n\nAbi\n\n(\n\napi\n\n.\n\nregistry\n\n,\n\ncontractABI\n\n)\n\n;\n\n17\n\n17\n\n18\n\nconst\n\ndata\n\n=\n\nabi\n\n.\n\nmessages\n\n.\n\nflip\n\n(\n\n)\n\n;\n\n18\n\nconst\n\ndata\n\n=\n\nabi\n\n.\n\nmessages\n\n.\n\nflip\n\n(\n\n)\n\n;\n\n19\n\n19\n\n20\n\nconst\n\ntx\n\n=\n\nawait\n\nmagic\n\n.\n\npolkadot\n\n.\n\ncontractCall\n\n(\n\n20\n\nconst\n\ntx\n\n=\n\nawait\n\nmagic\n\n.\n\npolkadot\n\n.\n\ncontractCall\n\n(\n\n21\n\n// contract address\n\n21\n\n// contract address\n\n22\n\n'5C52CfgkwANdFuN3VgPSprQwNWKfkLWMHJbMRzp12h4YarCa'\n\n,\n\n22\n\n'5C52CfgkwANdFuN3VgPSprQwNWKfkLWMHJbMRzp12h4YarCa'\n\n,\n\n23\n\n0\n\n,\n\n// value\n\n23\n\n0\n\n,\n\n// value\n\n24\n\n1000000\n\n,\n\n// max gas\n\n24\n\n1000000\n\n,\n\n// max gas\n\n25\n\ndata\n\n,\n\n// contract data\n\n25\n\ndata\n\n,\n\n// contract data\n\n26\n\n)\n\n;\n\n26\n\n)\n\n;\n\n27\n\n27\n\n28\n\nconsole\n\n.\n\nlog\n\n(\n\n'transaction hash'\n\n,\n\ntx\n\n)\n\n;\n\n28\n\nconsole\n\n.\n\nlog\n\n(\n\n'transaction hash'\n\n,\n\ntx\n\n)\n\n;\n\n#\n\nPlease follow substrate documention to create and deploy contract on substrate.\n\nsubstrate documention", "explanation": "**Smart Contract Deployment on Polkadot using Substrate**\n\nThe given documentation section explains how to deploy a smart contract on the Polkadot blockchain using the Substrate framework. Here's a breakdown of the main components and their purposes:\n\n**1. Setup**\n\n* Import the Magic SDK and Polkadot Extension libraries.\n* Create a Magic instance with your API key and pass it an object containing the Polkadot Extension as an extension.\n\n**2. Establish a Polkadot connection**\n\n* Use the `ApiPromise` class to create a Polkadot API instance.\n* Wait for the API to be ready using the `isReady` method.\n\n**3. Define the contract ABI**\n\n* Create an `Abi` instance using the Polkadot registry and the contract ABI (Application Binary Interface) definition.\n\n**4. Call the contract function**\n\n* Use the `contractCall` method of the Magic instance to call a contract function.\n* Pass the following arguments:\n\t+ Contract address.\n\t+ Value (0 in this case, assuming no value is transferred).\n\t+ Max gas (assuming a maximum gas limit of 1,000,000).\n\t+ Contract data (in this case, calling the `flip` function with no arguments).\n\n**5. Log the transaction hash**\n\n* Log the transaction hash to the console for verification.\n\nIn summary, this section demonstrates how to deploy a smart contract on the Polkadot blockchain using the Substrate framework and subsequently call a contract function using the Magic SDK.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/other/polkadot#chunk-5", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 Polkadot Block Explorer\n\n\u2022 Polkadot Blockchain Academy\n\nPolkadot Block Explorer\n\nPolkadot Blockchain Academy", "explanation": "In the '#Resources' section from the Magic Labs embedded wallet documentation on Polkadot, you will find information about two external resources relevant to working with Polkadot blockchain. \n\nThese resources serve as helpful tools and learning platforms for developers and users interested in the Polkadot blockchain, specifically:\n\n1. **Polkadot Block Explorer**: This is a web-based interface that allows users to visualize and explore the Polkadot blockchain. \n   - It helps users to track and analyze transactions, blocks, and other relevant information on the Polkadot network.\n\n2. **Polkadot Blockchain Academy**: This is an education platform that provides in-depth resources and tutorials on Polkadot and its ecosystem, \n   - making it easier for users and developers to learn and understand how to use, interact with, and build on the Polkadot blockchain.\n\nBoth resources are provided to support users in getting the most out of the Magic Labs embedded wallet and the Polkadot blockchain in general.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/other/polkadot#chunk-6", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nA rate limit is a measure put in place that enforces a maximum number of API requests per minute to Magic\u2019s services. They exist to prevent bad actors from misusing the endpoints while also helping Magic manage infrastructure load. The default rate limit for each application is 500 requests per minute (excludes contracts with custom rate limits). While the default rate limit of 500 requests per minute should capture most scenarios, it\u2019s possible for applications to reach this limit through normal traffic growth or through traffic surges from an NFT drop.\n\nIf your application needs a higher limit, please contact sales for a custom rate limit.\n\ncontact sales", "explanation": "Here's a clear and concise explanation of the rate limit concept from the Magic Labs embedded wallet documentation:\n\n**What is a Rate Limit?**\nA rate limit is a technical feature that restricts the number of API requests an application can make to Magic Labs services within a certain time frame (in this case, per minute).\n\n**Main Purpose:**\nThe primary purpose of rate limiting is twofold:\n\n1. **Prevent Abuse:** To prevent malicious actors from overloading Magic Labs services with excessive requests, which can cause disruptions or even crashes.\n2. **Manage Infrastructure Load:** To help Magic Labs manage the load on their servers and infrastructure, ensuring that their services remain stable and responsive for all users.\n\n**Default Limit:**\nThe default rate limit for applications is 500 requests per minute. If your application consistently exceeds this limit or requires a higher limit, you can contact sales to negotiate a custom rate limit.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/rate-limit#chunk-1", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nIf your application\u2019s rate limit is exceeded, then each subsequent API request past the limit will return an error code of 429. Please note that the number of API requests made per login can vary depending on which login providers are configured in the admin dashboard.\n\n429", "explanation": "According to the documentation, the section '#What happens if my application surpasses the rate limit?' describes the consequences of exceeding the rate limit for API requests made by an application.\n\n**Key Point:** When the rate limit is exceeded, the application will receive a 429 error code for each subsequent API request.\n\n**Main Purpose:** The primary purpose of this section is to inform developers about the rate limiting mechanism and its effects, enabling them to take necessary measures to manage their request rates and avoid hitting the limit.\n\nIn simple terms, this section alerts developers that their application may face API request errors if it exceeds the allowed rate limit.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/rate-limit#chunk-2", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nGive advance notice to Magic of high-traffic events (e.g. NFT drops, major product launches) so we can help evaluate your rate limit usage and support needs. By informing our team, we can help make preparations to ensure your launch goes smoothly. Here are some services we offer: launch checklists, VIP support, drop support, consultations, and API rate limit upgrades.\n\nGive advance notice\n\nWe\u2019ve found that 2-4 weeks notice works best to ensure preparation time for both parties.", "explanation": "The '#Notify Magic about high-volume events' documentation section is about submitting advance notice to Magic Labs of high-traffic events, such as NFT drops or major product launches. This is done to inform Magic Labs of potential rate limit usage and to request additional support to ensure a smooth launch.\n\nThe main purpose of this notification is to help Magic Labs' team evaluate and prepare for the increased traffic, offering services like:\n\n1. Launch checklists to help with planning.\n2. VIP support for priority assistance.\n3. Drop support for expert guidance during the launch.\n4. Consultations to discuss specific needs and requirements.\n5. API rate limit upgrades to increase the capacity for high-traffic events.\n\nMagic Labs recommends a 2-4 week notice period for both parties to ensure adequate preparation and a successful launch.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/rate-limit#chunk-3", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nIn the process of authenticating a user, the redirectURI parameter is utilized as a callback URL and will redirect users once the authentication is complete. For Magic, this is only relevant when using magic links or an OAuth provider (such as Google) as your user\u2019s authentication method. For magic links, when using the loginWithMagicLink feature, you have the option to include a redirectURI value. If you do not include a redirectURI, the user will be asked to go back to the original tab to complete the login process. It's recommended to use a redirectURI for a smoother user experience.\n\nredirectURI\n\nloginWithMagicLink\n\nloginWithMagicLink\n\nredirectURI\n\nredirectURI", "explanation": "**Redirect Allowlist Overview**\n\nThe Redirect Allowlist is a security feature used in Magic Labs embedded wallet for authentication purposes. Its main purpose is to allow the wallet to securely redirect back to the original application after a user completes the authentication process.\n\n**Key Concepts:**\n\n* **redirectURI**: A callback URL used as part of the authentication process. It tells the Magic Labs wallet where to redirect the user once authentication is complete.\n* **loginWithMagicLink**: A feature that uses magic links for user authentication.\n\n**Main Purpose:**\n\nThe Redirect Allowlist ensures that the Magic Labs wallet can securely redirect users back to the original application after authentication, providing a smoother user experience. This is particularly important when using magic links or OAuth providers (like Google) as the authentication method.\n\n**Best Practice:**\n\nIt's recommended to include a `redirectURI` when using the `loginWithMagicLink` feature to avoid asking the user to return to the original tab manually. This enhances the user experience and provides a more seamless authentication process.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/security/allowlists/redirect-allowlist#chunk-1", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 Go to the settings page of your app in the developer dashboard\n\n\u2022 Toggle on your \u2018redirect allowlist\u2019\n\n\u2022 Add your redirects and save your changes\n\nsettings page\n\n#\n\nSeveral redirect formats are supported, generically it may look similar to the following:\n\n\u2022 <scheme> \"://\" <host> [ \":\" <port> ] <path>\n\n<scheme> \"://\" <host> [ \":\" <port> ] <path>\n\nFor a detailed view of the URI syntax format, refer to this diagram.\n\nthis diagram\n\n#\n\nLinking in mobile applications refers to the ability to navigate users to a specific location within an application by clicking on a link. There are two main methods of linking in mobile apps: Deep linking and Universal Links (App Links on Android). We recommend using Universal Links/App Links for increased security in lieu of Deep Links.\n\nView our guide on mobile links in your Magic Application\n\nguide\n\nSome examples:\n\n\u2022 Web:https://example.linkhttps://example.link/path1\n\n\u2022 iOS deep links:myphotoapp:albumnameexpo://\n\n\u2022 Android app links:app://www.example.comapp://open.my.app\n\n\u2022 https://example.link\n\n\u2022 https://example.link/path1\n\nhttps://example.link\n\nhttps://example.link/path1\n\niOS deep links:\n\n\u2022 myphotoapp:albumname\n\n\u2022 expo://\n\nmyphotoapp:albumname\n\nexpo://\n\nAndroid app links:\n\n\u2022 app://www.example.com\n\n\u2022 app://open.my.app\n\napp://www.example.com\n\napp://open.my.app\n\nFormat Notes:\n\n\u2022 All paths have to be explicit, ie. https://example.link does not also whitelist https://example.link/path1\n\n\u2022 Query strings and hash information are not taken into account when validating these URLs\n\n\u2022 You can use wildcards at the subdomain level (e.g.: https://*.contoso.com)\n\nhttps://example.link\n\nhttps://example.link/path1", "explanation": "Here's a clear and concise explanation of the '#Configuration - #Format - #Mobile Linking' documentation section from Magic Labs embedded wallet documentation:\n\n**Purpose:**\nThe purpose of this documentation section is to guide users through the process of configuring and formatting mobile links for their application in the Magic Labs developer dashboard. This includes setting up and managing redirect allowlists, as well as understanding the syntax and format for mobile links, such as Deep Links and Universal Links.\n\n**Key components:**\n\n1. **Redirect Allowlist Configuration**: This involves toggling on the redirect allowlist in the developer dashboard settings page and adding supported redirects.\n2. **URI Syntax Format**: The documentation explains the supported URI syntax formats for mobile links, which include detailed information about scheme, host, port, and path.\n3. **Mobile Linking Methods**: The section discusses the two main methods of linking in mobile apps: Deep linking and Universal Links (App Links on Android), and recommends using Universal Links for increased security.\n4. **Format Notes**: This section provides important formatting guidelines, such as:\n\t* All paths must be explicit (e.g., https://example.link does not automatically whitelist https://example.link/path1).\n\t* Query strings and hash information are not taken into account when validating URLs.\n\t* Wildcards can be used at the subdomain level (e.g., https://*.contoso.com).\n\nOverall, this documentation section aims to help users configure and manage mobile links for their applications, ensuring secure and seamless user experiences.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/security/allowlists/redirect-allowlist#chunk-2", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nAlternatively, redirectURIs can be added to your applications allowlist using Curl. In order to interact with the email access control list for your application using Curl, you will need a Secret Key and Client ID.\n\nTo obtain the required information, follow the steps below:\n\n\u2022 On the Dashboard landing page, right-click anywhere and select Inspect\n\n\u2022 Navigate to the Network tab and look for info?magic_client_id=<CLIENT_ID>\n\n\u2022 Navigate to the Response tab and extract live_secret_key as your Secret Key and magic_client_id as your Client ID\n\ninfo?magic_client_id=<CLIENT_ID>\n\nlive_secret_key\n\nmagic_client_id\n\nProvide the Secret Key and/or Client ID in your Curl commands, along with the chosen domains for the interaction:\n\nCopy\n\n01\n\ncurl\n\n--location --request POST\n\n'https://api.magic.link/v2/api/magic_client/allowlist/add'\n\n\\\n\n01\n\ncurl\n\n--location --request POST\n\n'https://api.magic.link/v2/api/magic_client/allowlist/add'\n\n\\\n\n02\n\n--header\n\n'X-Magic-Secret-Key: sk_live_06FC010DA25ED4F2'\n\n\\\n\n02\n\n--header\n\n'X-Magic-Secret-Key: sk_live_06FC010DA25ED4F2'\n\n\\\n\n03\n\n--header\n\n'Content-Type: application/json'\n\n\\\n\n03\n\n--header\n\n'Content-Type: application/json'\n\n\\\n\n04\n\n--data-raw\n\n'{\n\n04\n\n--data-raw\n\n'{\n\n05\n\n\"access_type\": \"redirect_url\",\n\n05\n\n\"access_type\": \"redirect_url\",\n\n06\n\n\"target_client_id\": \"etjubJsY5Cvn6ukDzJYpd3MEAtgw45oetxxoX1PxvP4=\",\n\n06\n\n\"target_client_id\": \"etjubJsY5Cvn6ukDzJYpd3MEAtgw45oetxxoX1PxvP4=\",\n\n07\n\n\"value\": \"https://magic.link\"\n\n07\n\n\"value\": \"https://magic.link\"\n\n08\n\n}'\n\n08\n\n}'", "explanation": "**Programmatic Configuration Overview**\n\nThe '#Programmatic Configuration' section from the Magic Labs embedded wallet documentation provides a step-by-step guide to configuring Magic Labs using Curl (a command-line tool for transferring data with URLs) in an automated and programmatic manner.\n\n**Main Purpose:**\n\nThe primary purpose of this section is to allow developers to add specific redirect URIs to their Magic Labs allowlist using Curl commands, without relying on the Magic Labs dashboard UI. This is achieved by using the Client ID and Secret Key obtained from the dashboard to interact with the Magic Labs API.\n\n**Key Benefits:**\n\n1. **Automation:** Developers can automate the process of adding redirect URIs to their Magic Labs allowlist, reducing the need for manual intervention.\n2. **Programmatic Integration:** The guide enables developers to integrate Magic Labs into their existing workflows and systems using Curl commands.\n3. **Improved Security:** By following the provided steps, developers can securely obtain the necessary Client ID and Secret Key to interact with the Magic Labs API.\n\n**Key Takeaways:**\n\n* Developers require a Secret Key and Client ID to interact with the Magic Labs API using Curl.\n* The guide provides step-by-step instructions to obtain the necessary Client ID and Secret Key from the Magic Labs dashboard.\n* Developers can use Curl to add redirect URIs to their Magic Labs allowlist in an automated and programmatic manner.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/security/allowlists/redirect-allowlist#chunk-3", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nIf the redirects are not verified and whitelisted, there is a potential for attackers to drive users to malicious websites or phishing pages, and/or steal sensitive information such as login credentials. Due to this, the redirect allowlist is required and must be configured for your app. By whitelisting redirect URLs, application owners can ensure that users are only redirected to trusted and secure destinations.", "explanation": "This documentation section explains the importance of configuring the redirect allowlist in Magic Labs embedded wallet documentation. The main purpose is to prevent potential security risks and threats to user sensitive information.\n\nHere's a clear and concise summary:\n\n**Why it's crucial:** Without verifying and whitelisting redirects, attackers can drive users to malicious websites or phishing pages to steal sensitive information like login credentials.\n\n**Main purpose:** Configure the redirect allowlist to ensure users are redirected only to trusted and secure destinations, maintaining the security and integrity of the application.\n\nIn simpler terms, this section emphasizes the need to configure the redirect allowlist to prevent users from being redirected to insecure or malicious websites, thereby protecting sensitive user information and maintaining the security of the application.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/security/allowlists/redirect-allowlist#chunk-4", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nOP Mainnet is a low-cost and lightning-fast Ethereum L2 blockchain powered by Optimism. Built as a minimal extension to existing Ethereum software, OP Mainnet's EVM-equivalent architecture scales your Ethereum apps without surprises.\n\nOP Mainnet\n\nAs Optimism is EVM compatible, you can follow the Ethereum documentation to send your first transaction and utilize all other features.\n\nEthereum", "explanation": "Based on the provided documentation, here's a clear and concise explanation of what it's about and its main purpose:\n\n**Optimism Overview**\n\nOptimism's OP Mainnet is a second-layer (L2) blockchain solution built on top of Ethereum. Its primary goal is to provide a scalable, low-cost, and high-performance ecosystem for Ethereum applications. This is made possible through Optimism's EVM (Ethereum Virtual Machine) compatible architecture, which allows it to seamlessly interact with existing Ethereum software.\n\n**Main Purpose:**\n\nThe main purpose of Optimism's OP Mainnet is to scale Ethereum applications without requiring significant modifications. By leveraging Optimism's L2 solution, developers can enjoy faster and more cost-effective transaction processing, making it an attractive option for users seeking a high-performance Ethereum experience.\n\n**Key Benefits:**\n\n- Low-cost transactions\n- Lightning-fast transaction processing\n- Seamless integration with existing Ethereum software due to EVM compatibility\n\nOverall, Optimism's OP Mainnet aims to provide a robust and scalable Ethereum ecosystem that caters to the growing demands of decentralized applications (dApps) and users seeking a faster and more efficient Ethereum experience.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/evm/optimism#chunk-1", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n#\n\nMainnet Block Explorer: https://optimistic.etherscan.io\n\nhttps://optimistic.etherscan.io\n\nCopy\n\n01\n\nconst\n\ncustomNodeOptions\n\n=\n\n{\n\n01\n\nconst\n\ncustomNodeOptions\n\n=\n\n{\n\n02\n\nrpcUrl\n\n:\n\n'https://mainnet.optimism.io'\n\n,\n\n02\n\nrpcUrl\n\n:\n\n'https://mainnet.optimism.io'\n\n,\n\n03\n\nchainId\n\n:\n\n10\n\n,\n\n03\n\nchainId\n\n:\n\n10\n\n,\n\n04\n\n}\n\n04\n\n}\n\n05\n\n05\n\n06\n\n// Setting network to Optimism\n\n06\n\n// Setting network to Optimism\n\n07\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_PUBLISHABLE_API_KEY'\n\n,\n\n{\n\nnetwork\n\n:\n\ncustomNodeOptions\n\n}\n\n)\n\n;\n\n07\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_PUBLISHABLE_API_KEY'\n\n,\n\n{\n\nnetwork\n\n:\n\ncustomNodeOptions\n\n}\n\n)\n\n;", "explanation": "This documentation section is titled '#Configure Optimism - #Mainnet' and it appears to be a code snippet explaining how to connect to the Optimism mainnet blockchain using the Magic Labs embedded wallet.\n\nThe main purpose of this code is to set up the network configuration for the Optimism mainnet blockchain. This configuration includes:\n\n1. **rpcUrl**: The URL of the Optimism mainnet RPC (Remote Procedure Call) server, which is used to communicate with the blockchain.\n2. **chainId**: The unique identifier of the Optimism mainnet chain.\n\nThe code snippet provides an example of how to create a custom network configuration object called `customNodeOptions` and then pass it to the `Magic` constructor to initialize the Magic Labs embedded wallet with the Optimism mainnet network settings.\n\nTo use this code, you would replace `'YOUR_PUBLISHABLE_API_KEY'` with your actual Magic Labs API key and then use the resulting `magic` object to interact with the Optimism mainnet blockchain.\n\nHere's a summary of the key points:\n\n* connects to Optimism mainnet blockchain\n* uses the Magic Labs embedded wallet\n* sets up network configuration using `customNodeOptions`\n* initializes `Magic` with Optimism mainnet settings\n\nPlease note that you need to replace `'YOUR_PUBLISHABLE_API_KEY'` with your actual API key for this code to work.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/evm/optimism#chunk-2", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nTestnet Block Explorer: https://blockscout.com/optimism/goerli/\n\n:\n\nhttps://blockscout.com/optimism/goerli/\n\nCopy\n\n01\n\nconst\n\ncustomNodeOptions\n\n=\n\n{\n\n01\n\nconst\n\ncustomNodeOptions\n\n=\n\n{\n\n02\n\nrpcUrl\n\n:\n\n'https://goerli.optimism.io'\n\n,\n\n02\n\nrpcUrl\n\n:\n\n'https://goerli.optimism.io'\n\n,\n\n03\n\nchainId\n\n:\n\n420\n\n03\n\nchainId\n\n:\n\n420\n\n04\n\n}\n\n04\n\n}\n\n05\n\n05\n\n06\n\n// Setting network to Optimism\n\n06\n\n// Setting network to Optimism\n\n07\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_PUBLISHABLE_API_KEY'\n\n,\n\n{\n\nnetwork\n\n:\n\ncustomNodeOptions\n\n}\n\n)\n\n;\n\n07\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_PUBLISHABLE_API_KEY'\n\n,\n\n{\n\nnetwork\n\n:\n\ncustomNodeOptions\n\n}\n\n)\n\n;", "explanation": "**What is Testnet?**\n\nIn the context of blockchain development, particularly for the Optimism EVM chain, Testnet (short for \"test network\") is a separate environment that mimics the main Ethereum Optimism network but uses a different blockchain for testing purposes. It's a sandbox where developers can experiment, test, and validate their applications without affecting the main network.\n\n**Purpose of Testnet**\n\nThe main purpose of Testnet is to:\n\n1. **Test and verify** applications, integrations, and smart contracts without risking any real value on the main network.\n2. **Experiment with** new features, updates, and integrations in a controlled environment.\n3. **Validate** their implementations and ensure they function as expected before moving to the main network.\n\n**In the provided documentation**\n\nThe Testnet section in the documentation provides a link to the Blockscout Testnet Explorer for Optimism's Goerli network. This allows developers to view transactions, blocks, and other information on the Testnet environment.\n\nAdditionally, some JavaScript code snippets are provided to help developers set up a Magic Labs embedded wallet using the Testnet environment on Optimism. These snippets include configuration options for the Optimism network, such as the RPC URL and chain ID.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/evm/optimism#chunk-3", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 All Auth, User and most Wallet module methods for any wallet type\n\n\u2022 All EVM Provider functionality to respond to supported RPC methods\n\nAuth\n\nUser\n\nWallet\n\nRPC methods\n\nNeed a feature or see a problem? File an issue on our github repo.\n\ngithub repo", "explanation": "**Compatibility Section: Overview**\n\nThe `#Compatibility` section in the Magic Labs embedded wallet documentation is dedicated to highlighting the supported features and functionalities of Magic Labs wallet modules and EVM Provider across various platforms.\n\n**Main Purpose:**\n\nThe primary purpose of this section is to provide assurances and clarifications on the compatibility of Magic Labs wallet modules and EVM Provider with different wallet types and RPC (Remote Procedure Call) methods. This enables developers to efficiently integrate Magic Labs' solutions into their applications, aligning with their EVM-based blockchain projects, particularly on the Optimism chain.\n\n**Key Components:**\n\n1. **Auth, User, and Wallet Module Methods**: This section lists the methods supported for various wallet types. Users can leverage these methods for authentication, user interactions, and wallet-related operations.\n2. **EVM Provider Functionality**: It specifies which RPC methods are supported by Magic Labs EVM Provider. This ensures seamless EVM interactions with Magic Labs' solutions.\n3. **Referencing GitHub Repository**: The section invites developers to contribute by filing issues on the Magic Labs GitHub repository. This fosters collaboration, enabling Magic Labs to address feature requests and resolve problems efficiently.\n\nIn summary, the `#Compatibility` section is crucial in providing detailed information on the compatibility of Magic Labs' wallet modules and EVM Provider. This information empowers developers to effectively integrate Magic Labs' solutions into their projects, thereby enhancing the overall user experience.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/evm/optimism#chunk-4", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 Block Explorer: https://optimistic.etherscan.io/ (Mainnet)https://sepolia-optimism.etherscan.io/ (Sepolia Testnet)\n\n\u2022 https://optimistic.etherscan.io/ (Mainnet)\n\n\u2022 https://sepolia-optimism.etherscan.io/ (Sepolia Testnet)\n\nhttps://optimistic.etherscan.io/\n\nhttps://sepolia-optimism.etherscan.io/\n\n\u2022 Web3.js Demo\n\n\u2022 Ethers.js Demo\n\nWeb3.js Demo\n\nEthers.js Demo", "explanation": "**Resources & Tools: Overview and Purpose**\n\nThe '#Resources & Tools' section in the Magic Labs embedded wallet documentation provides essential links and tools for interacting with the Optimism EVM (Ethereum Virtual Machine) blockchain. The main purpose of this section is to facilitate effortless exploration and development of applications on the Optimism network.\n\n**Key Components:**\n\n1. **Block Explorers**: Link to the Etherscan block explorer for Optimism's mainnet and Sepolia testnet. These block explorers allow users to inspect transactions, balances, and other on-chain data.\n2. **Web3.js and Ethers.js Demos**: Web3.js and Ethers.js are popular JavaScript libraries for interacting with blockchain APIs. The demos provided in this section offer interactive examples for learning and testing how to use these libraries with the Optimism network.\n\n**Benefits:**\n\n- Provides easy access to useful tools for blockchain development and exploration.\n- Offers interactive learning resources through the Web3.js and Ethers.js demos.\n- Streamlines the process of finding and utilizing required resources for Optimism EVM development.\n\nIn summary, the '#Resources & Tools' section is a valuable resource for developers, researchers, and users working with the Optimism blockchain, offering easy access to essential tools and demos for successful interaction with the EVM.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/evm/optimism#chunk-5", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nMagic interacts with the Avalanche blockchain via Magic's extension NPM package @magic-ext/avalanche. The Avalanche extension also lets you interact with the blockchain using methods from Avalanche's Javascript SDK.\n\nAvalanche\n\n@magic-ext/avalanche\n\n@magic-ext/avalanche\n\nAvalanche's Javascript SDK\n\nYou can skip straight to our github example directly:\n\n\ud83d\udc49 Avalanche Example\n\nAvalanche Example\n\nCopy\n\n01\n\nnpm\n\ninstall\n\n--save @magic-ext/avalanche\n\n01\n\nnpm\n\ninstall\n\n--save @magic-ext/avalanche", "explanation": "This documentation section is about installing and setting up the Avalanche blockchain extension for Magic Labs. Here's a clear and concise summary:\n\n**Main Purpose:** This section guides users on how to install the Avalanche blockchain extension, which allows them to interact with the Avalanche blockchain.\n\n**Key Points:**\n\n1. The extension is part of Magic's NPM package `@magic-ext/avalanche`.\n2. It also utilizes methods from Avalanche's JavaScript SDK for blockchain interaction.\n3. The GitHub example is available for reference, allowing users to see the extension in action.\n4. To install the extension, users can run the provided command: `npm install --save @magic-ext/avalanche`.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/other/avalanche#chunk-1", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nNote: This is for X-Chain implementation.\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\nimport\n\n{\n\nAvalancheExtension\n\n}\n\nfrom\n\n'@magic-ext/avalanche'\n\n;\n\n02\n\nimport\n\n{\n\nAvalancheExtension\n\n}\n\nfrom\n\n'@magic-ext/avalanche'\n\n;\n\n03\n\n03\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR API KEY'\n\n,\n\n{\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR API KEY'\n\n,\n\n{\n\n05\n\nextensions\n\n:\n\n{\n\n05\n\nextensions\n\n:\n\n{\n\n06\n\nxchain\n\n:\n\nnew\n\nAvalancheExtension\n\n(\n\n{\n\n06\n\nxchain\n\n:\n\nnew\n\nAvalancheExtension\n\n(\n\n{\n\n07\n\nrpcUrl\n\n:\n\n'Avalanche node url'\n\n,\n\n07\n\nrpcUrl\n\n:\n\n'Avalanche node url'\n\n,\n\n08\n\nchainId\n\n:\n\n'Avalanche chain id'\n\n,\n\n08\n\nchainId\n\n:\n\n'Avalanche chain id'\n\n,\n\n09\n\nnetworkId\n\n:\n\n4\n\n,\n\n// Avalanche networkId\n\n09\n\nnetworkId\n\n:\n\n4\n\n,\n\n// Avalanche networkId\n\n10\n\n}\n\n)\n\n,\n\n10\n\n}\n\n)\n\n,\n\n11\n\n}\n\n,\n\n11\n\n}\n\n,\n\n12\n\n}\n\n)\n\n;\n\n12\n\n}\n\n)\n\n;", "explanation": "**Initialization Documentation Explanation**\n\nThe '#Initialization' section from the Magic Labs embedded wallet documentation on Avalanche explains how to initialize the Magic SDK and connect to the Avalanche blockchain.\n\n**Main Purpose:**\n\nThe main purpose of this section is to guide developers through the process of importing the necessary libraries, creating a Magic instance, and enabling the Avalanche extension to interact with the Avalanche blockchain.\n\n**Key Steps:**\n\n1. **Importing Libraries**: The code imports the Magic library from 'magic-sdk' and the Avalanche extension from '@magic-ext/avalanche'.\n2. **Creating a Magic Instance**: A new Magic instance is created with the 'YOUR API KEY' (replace with your actual API key).\n3. **Enabling Avalanche Extension**: The Avalanche extension is enabled and configured with the following settings:\n\t* `rpcUrl`: The URL of the Avalanche node.\n\t* `chainId`: The chain ID of the Avalanche network.\n\t* `networkId`: The network ID of the Avalanche network (set to 4 for Mainnet).\n\nBy following these steps, developers can initialize the Magic SDK and connect to the Avalanche blockchain, enabling them to use the Magic Labs embedded wallet to interact with the Avalanche network.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/other/avalanche#chunk-2", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n#\n\nBefore you can send transaction on the Avalanche blockchain, you'll need to acquire some test AVAX (Avalanche's native cryptocurrency for test network).\n\n\u2022 Go to our Avalanche Example\n\n\u2022 Login with your email address\n\n\u2022 Copy your Avalanche public address\n\n\u2022 Go to the Avalanche Faucet\n\n\u2022 Paste your copied Avalanche public address in the text input\n\n\u2022 You can receive 10000000 nAVAX\n\n\u2022 Now you can use your test AVAX in our example app\n\nAvalanche Example\n\nAvalanche Faucet\n\nexample app", "explanation": "**Explanation of #Get Test AVAX Method**\n\nThe '#Get Test AVAX' section is a step-by-step guide for individuals to acquire test AVAX, the native cryptocurrency of the Avalanche test network. The main purpose of this section is to assist users in obtaining the necessary test net funds to experiment and test with the Avalanche blockchain, specifically the Magic Labs embedded wallet documentation.\n\n**Key Steps:**\n\n1. Obtain an Avalanche public address through the Avalanche Example app.\n2. Visit the Avalanche Faucet.\n3. Paste the Avalanche public address to receive 10,000,000 nAVAX (test AVAX tokens).\n\n**Main Outcome:**\n\nAfter following these steps, users will have acquired test AVAX and can utilize it in the Magic Labs embedded wallet example app to test and experiment with the Avalanche blockchain, learning its functionality without affecting the live network. This allows developers and users to gain hands-on experience, develop skills, and experiment with potential applications using test AVAX.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/other/avalanche#chunk-3", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nNote that the Magic Avalanche extension follows the method names and conventions by Avalanche's Javascript SDK. To send a standard Avalanche blockchain transaction, you can call the magic.xchain.signTransaction() method.\n\nAvalanche's Javascript SDK\n\nmagic.xchain.signTransaction()\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\nimport\n\n{\n\nAvalancheExtension\n\n}\n\nfrom\n\n'@magic-ext/avalanche'\n\n;\n\n02\n\nimport\n\n{\n\nAvalancheExtension\n\n}\n\nfrom\n\n'@magic-ext/avalanche'\n\n;\n\n03\n\nimport\n\n{\n\nAvalanche\n\n,\n\nBinTools\n\n,\n\nBuffer\n\n,\n\nBN\n\n}\n\nfrom\n\n'avalanche'\n\n;\n\n03\n\nimport\n\n{\n\nAvalanche\n\n,\n\nBinTools\n\n,\n\nBuffer\n\n,\n\nBN\n\n}\n\nfrom\n\n'avalanche'\n\n;\n\n04\n\n04\n\n05\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR API KEY'\n\n,\n\n{\n\n05\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR API KEY'\n\n,\n\n{\n\n06\n\nextensions\n\n:\n\n{\n\n06\n\nextensions\n\n:\n\n{\n\n07\n\nxchain\n\n:\n\nnew\n\nAvalancheExtension\n\n(\n\n{\n\n07\n\nxchain\n\n:\n\nnew\n\nAvalancheExtension\n\n(\n\n{\n\n08\n\nrpcUrl\n\n:\n\n'Avalanche node url'\n\n,\n\n08\n\nrpcUrl\n\n:\n\n'Avalanche node url'\n\n,\n\n09\n\nchainId\n\n:\n\n'Avalanche chain id'\n\n,\n\n09\n\nchainId\n\n:\n\n'Avalanche chain id'\n\n,\n\n10\n\nnetworkId\n\n:\n\n4\n\n,\n\n// Avalanche networkId\n\n10\n\nnetworkId\n\n:\n\n4\n\n,\n\n// Avalanche networkId\n\n11\n\n}\n\n)\n\n,\n\n11\n\n}\n\n)\n\n,\n\n12\n\n}\n\n,\n\n12\n\n}\n\n,\n\n13\n\n}\n\n)\n\n;\n\n13\n\n}\n\n)\n\n;\n\n14\n\n14\n\n15\n\nconst\n\nmetadata\n\n=\n\nawait\n\nmagic\n\n.\n\nuser\n\n.\n\ngetMetadata\n\n(\n\n)\n\n;\n\n15\n\nconst\n\nmetadata\n\n=\n\nawait\n\nmagic\n\n.\n\nuser\n\n.\n\ngetMetadata\n\n(\n\n)\n\n;\n\n16\n\nlet\n\nmyNetworkID\n\n=\n\n4\n\n;\n\n//default is 3, we want to override that for our local network\n\n16\n\nlet\n\nmyNetworkID\n\n=\n\n4\n\n;\n\n//default is 3, we want to override that for our local network\n\n17\n\nlet\n\nmyBlockchainID\n\n=\n\n'X'\n\n;\n\n// The XChain blockchainID on this network\n\n17\n\nlet\n\nmyBlockchainID\n\n=\n\n'X'\n\n;\n\n// The XChain blockchainID on this network\n\n18\n\nlet\n\nava\n\n=\n\nnew\n\nAvalanche\n\n(\n\n'testapi.avax.network'\n\n,\n\n443\n\n,\n\n'https'\n\n,\n\nmyNetworkID\n\n,\n\nmyBlockchainID\n\n)\n\n;\n\n18\n\nlet\n\nava\n\n=\n\nnew\n\nAvalanche\n\n(\n\n'testapi.avax.network'\n\n,\n\n443\n\n,\n\n'https'\n\n,\n\nmyNetworkID\n\n,\n\nmyBlockchainID\n\n)\n\n;\n\n19\n\nlet\n\nxchain\n\n=\n\nava\n\n.\n\nXChain\n\n(\n\n)\n\n;\n\n19\n\nlet\n\nxchain\n\n=\n\nava\n\n.\n\nXChain\n\n(\n\n)\n\n;\n\n20\n\nlet\n\nassetId\n\n=\n\n'nznftJBicce1PfWQeNEVBmDyweZZ6zcM3p78z9Hy9Hhdhfaxm'\n\n;\n\n20\n\nlet\n\nassetId\n\n=\n\n'nznftJBicce1PfWQeNEVBmDyweZZ6zcM3p78z9Hy9Hhdhfaxm'\n\n;\n\n21\n\n21\n\n22\n\nlet\n\nfromAddresses\n\n=\n\n[\n\nmetadata\n\n.\n\npublicAddress\n\n]\n\n;\n\n22\n\nlet\n\nfromAddresses\n\n=\n\n[\n\nmetadata\n\n.\n\npublicAddress\n\n]\n\n;\n\n23\n\nlet\n\ntoAddresses\n\n=\n\n[\n\n'X-everest1zr334udmau3xruusmwnyng3hug38errx83h6xq'\n\n]\n\n;\n\n23\n\nlet\n\ntoAddresses\n\n=\n\n[\n\n'X-everest1zr334udmau3xruusmwnyng3hug38errx83h6xq'\n\n]\n\n;\n\n24\n\nlet\n\nsendAmount\n\n=\n\n1000000\n\n;\n\n24\n\nlet\n\nsendAmount\n\n=\n\n1000000\n\n;\n\n25\n\n25\n\n26\n\nconst\n\nsignedTx\n\n=\n\nawait\n\nmagic\n\n.\n\nxchain\n\n.\n\nsignTransaction\n\n(\n\nsendAmount\n\n,\n\nassetId\n\n,\n\ntoAddresses\n\n,\n\nfromAddresses\n\n,\n\ntoAddresses\n\n)\n\n;\n\n26\n\nconst\n\nsignedTx\n\n=\n\nawait\n\nmagic\n\n.\n\nxchain\n\n.\n\nsignTransaction\n\n(\n\nsendAmount\n\n,\n\nassetId\n\n,\n\ntoAddresses\n\n,\n\nfromAddresses\n\n,\n\ntoAddresses\n\n)\n\n;\n\n27\n\n27\n\n28\n\nconsole\n\n.\n\nlog\n\n(\n\n'signedTX'\n\n,\n\nsignedTx\n\n)\n\n;\n\n28\n\nconsole\n\n.\n\nlog\n\n(\n\n'signedTX'\n\n,\n\nsignedTx\n\n)\n\n;\n\n29\n\n29\n\n30\n\nlet\n\ntxid\n\n=\n\nawait\n\nxchain\n\n.\n\nissueTx\n\n(\n\nsignedTx\n\n)\n\n;\n\n30\n\nlet\n\ntxid\n\n=\n\nawait\n\nxchain\n\n.\n\nissueTx\n\n(\n\nsignedTx\n\n)\n\n;\n\n31\n\n31\n\n32\n\nconsole\n\n.\n\nlog\n\n(\n\n'send transaction'\n\n,\n\ntxid\n\n)\n\n;\n\n32\n\nconsole\n\n.\n\nlog\n\n(\n\n'send transaction'\n\n,\n\ntxid\n\n)\n\n;", "explanation": "**#Send Transaction**\n\nThe '#Send Transaction' section from the Magic Labs embedded wallet documentation for the Avalanche chain is about sending a standard Avalanche blockchain transaction. This is the main purpose of this section.\n\nTo accomplish this, the documentation provides a code snippet that uses the `magic.xchain.signTransaction()` method to create a signed transaction. Here's a step-by-step explanation of how it works:\n\n1. **Setting up the environment**: The code imports the necessary libraries and sets up the Magic instance with an API key.\n2. **Getting user metadata**: It retrieves the user's metadata, which includes their public address.\n3. **Creating an Avalanche instance**: An Avalanche instance is created with the desired network ID and blockchain ID.\n4. **Defining transaction parameters**: The transaction parameters are set, including the amount to send, asset ID, and recipient addresses.\n5. **Signin the transaction**: The `magic.xchain.signTransaction()` method is called to create a signed transaction.\n6. **Issuing the transaction**: The signed transaction is then issued using the `xchain.issueTx()` method, which returns the transaction ID.\n\nThe main purpose of this section is to provide a code example for sending a standard Avalanche blockchain transaction using the Magic Labs embedded wallet.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/other/avalanche#chunk-4", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 Avalanche Developer Academy\n\nAvalanche Developer Academy", "explanation": "The '#Resources' section of the Magic Labs embedded wallet documentation, specifically for the Avalanche blockchain, mentions the following resource:\n\n\u2022 **Avalanche Developer Academy**: This is an online learning platform designed to help developers learn about Avalanche, its ecosystem, and how to develop applications on the blockchain. \n\nThe main purpose of this resource is to provide Avalanche developers with a comprehensive set of tutorials, guides, and resources to get started with building on the Avalanche blockchain. \n\nTherefore, users can consider the Avalanche Developer Academy as a good starting point for learning and better integrating with the Magic Labs embedded wallet and Avalanche for their blockchain projects.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/other/avalanche#chunk-5", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nMagic allows you to customize the popup modal, email, and confirmation screen to any of our 30+ supported languages.", "explanation": "This section discusses localization for the Magic LINK authentication service. The main purpose is to explain the ability to customize Magic Labs embedded wallet's UI components (popup modal, email, and confirmation screen) to support various languages, specifically 30+ supported languages. This allows developers to tailor the user experience to cater to users who speak different languages, enhancing user engagement and accessibility.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/customization/localization#chunk-1", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nTo initialize magic with a specific language, pass the locale value to the Magic instance upon creation.\n\nlocale\n\nMagic\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\n02\n\n03\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'API_KEY'\n\n,\n\n{\n\nlocale\n\n:\n\n'es'\n\n}\n\n)\n\n;\n\n03\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'API_KEY'\n\n,\n\n{\n\nlocale\n\n:\n\n'es'\n\n}\n\n)\n\n;\n\n04\n\n04\n\n05\n\nconst\n\ndid\n\n=\n\nawait\n\nmagic\n\n.\n\nauth\n\n.\n\nloginWithMagicLink\n\n(\n\n{\n\nemail\n\n}\n\n)\n\n;\n\n05\n\nconst\n\ndid\n\n=\n\nawait\n\nmagic\n\n.\n\nauth\n\n.\n\nloginWithMagicLink\n\n(\n\n{\n\nemail\n\n}\n\n)\n\n;", "explanation": "**Initialization of Magic Instance with a Specific Language**\n\nThe provided documentation section is about initializing a Magic Labs embedded wallet instance with a specific language. This involves passing the locale value to the Magic instance when creating it.\n\n**Main Purpose:**\n\nThe main purpose of this section is to explain how to customize the Magic Labs wallet to display the user interface and error messages in a particular language, such as Spanish ('es' locale) in this example.\n\n**Key Points:**\n\n* Import the Magic SDK library\n* Create a new Magic instance with the API key and specify the locale\n* Use the locale value (e.g., 'es' for Spanish) to display the wallet in the desired language\n\n**Example Code:**\n\nThe provided code snippet demonstrates how to initialize a Magic instance with the Spanish locale and then use it to log in with Magic Link.\n\n```javascript\nconst magic = new Magic('API_KEY', { locale: 'es' });\nconst did = await magic.auth.loginWithMagicLink({ email });\n```\n\nBy following this documentation section, developers can easily customize the Magic Labs wallet to support multiple languages and provide a better user experience for their users.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/customization/localization#chunk-2", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\naf\n\naz\n\nbg\n\nca\n\nzh_CN\n\nzh_TW\n\nhr\n\ncs\n\nda\n\nnl\n\nen\n\net\n\nfi\n\nfr\n\nde\n\nel\n\nhu\n\nid\n\nit\n\nja\n\nko\n\nlv\n\nlt\n\nmk\n\nno\n\npl\n\npt\n\nro\n\nru\n\nsr\n\nsk\n\nsl\n\nes\n\nsv\n\nth\n\ntr\n\nvi\n\ncy", "explanation": "The '#Supported Languages' documentation section lists the various languages that are supported by the Magic Labs embedded wallet for localization and customization purposes.\n\n**Main Purpose:**\nThe main purpose of this section is to inform developers and users about the languages in which the Magic Labs embedded wallet can be localized, allowing them to create user interfaces and experiences that cater to different regions and languages.\n\n**Languages Supported:**\nThe list includes 34 languages, including several regional variations (e.g., Chinese with Simplified (zh_CN) and Traditional (zh_TW)), making it a comprehensive and inclusive set of languages for global usage.\n\n**Localization Benefits:**\nBy supporting multiple languages, the Magic Labs embedded wallet can be easily adapted to suit the needs of users worldwide, increasing the overall user experience and accessibility.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/customization/localization#chunk-3", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nThe Access Control feature allows you to easily manage who is and isn't allowed to log in to your application. Access can be gated in 2 ways: explicitly allowing only certain emails and domains through with Allow List, or blocking certain emails and domains with Block List.\n\nAllow List\n\nBlock List\n\nThis feature is compatible with some OAuth providers (see Social Login), and not currently compatible with WebAuthn.\n\nSocial Login\n\n#\n\nThe Allow List lets you specify emails and domains that can access your site. The max list size for Allow List is 20k entries. Sample use cases are mailing lists, private organizations or message boards.\n\nBy default this list is empty, which means that everyone is allowed access, however once valid entries are specified in this list, only those emails + domains will be allowed to access your application.", "explanation": "**Access Control - Allow List Overview**\n\nThe Allow List is a feature in Magic Labs' Access Control system that enables you to specify which emails and domains are allowed to access your application. This controls who can log in to your app, effectively creating a whitelist of permitted users.\n\n**Main Purpose:**\n\nThe Allow List's primary purpose is to grant access to your application to specific email addresses and domains, ensuring that:\n\n*   Only authorized users can log in.\n*   Unauthorized access is prevented.\n*   Emails and domains not listed are blocked from accessing your application.\n\n**Key Features:**\n\n*   **Max list size:** 20,000 entries.\n*   **Empty by default:** No restrictions unless specified entries are added.\n*   **Use cases:**\n    *   Mailing lists.\n    *   Private organizations.\n    *   Message boards.\n\nBy configuring the Allow List, you can securely manage access to your application and ensure that only authorized users can log in, even with OAuth providers that are compatible with this feature.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/security/access-control#chunk-1", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nThe Block List lets you specify emails and domains you wish to block from accessing your application. The max list size for Block List is also 20k entries. Useful for most applications, forums, message boards, social media, etc.\n\nThis will not end a user's currently active session, but will block a user from starting a new session.\n\nThe entries in this list take precedence over the entries in the Allow List. If an email (or domain wildcard) is specified in the Block List would otherwise be granted access by the Allow List, the email would still be blocked.", "explanation": "**What is the Block List?**\n\nThe Block List is a security feature in Magic Labs embedded wallet documentation that allows you to restrict access to your application by specifying specific emails and domains that should not be able to access it.\n\n**Main Purpose:**\n\nThe primary purpose of the Block List is to prevent users or entities from accessing your application, effectively blocking their sessions from being started in the future. This feature is especially useful in scenarios like community forums, social media, or other public applications where you may want to restrict certain individuals or entities from accessing your platform.\n\n**Key Points:**\n\n- The Block List can store up to 20,000 entries.\n- It does not terminate active user sessions but prevents new sessions from being started.\n- The Block List takes precedence over the Allow List, meaning that even if a user or domain is allowed access through the Allow List, it will still be blocked if it is present in the Block List.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/security/access-control#chunk-2", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 Accepts email addresses or domain wildcards\n\n\u2022 Separate entries with spaces, commas, or line breaks\n\n\u2022 Pulling from a CRM? Export emails as a single-column CSV; copy + paste", "explanation": "This documentation section is about **Formatting** in the context of access control in Magic Labs. \n\n**Main Purpose:**\n\nThe main purpose of this section is to provide guidance on how to properly format a list of authorized email addresses or domain wildcards for secure access control in Magic Labs.\n\n**Key Points:**\n\n1. **Wildcard Support**: You can use email addresses or domain wildcards for access control. \n2. **Separation**: To make it easy to input a list, you can use spaces, commas, or line breaks to separate individual entries.\n3. **Importing from CRM**: If you're using a Customer Relationship Management (CRM) system, you can export email addresses as a single-column CSV file and copy-and-paste them into Magic Labs for easier access control management.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/security/access-control#chunk-3", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nWe are only able to gate email access for OAuth providers that return a user's email inside the OAuth user info response.\n\nThe following is a list of OAuth providers that require additional steps or verification for your application to support email access.\n\n\u2022 Twitter\n\n\u2022 Microsoft\n\n\u2022 Bitbucket\n\n\u2022 LinkedIn", "explanation": "**Social Login Explanation**\n\nThe '#Social Login' section from the Magic Labs embedded wallet documentation explains the limitations and requirements for accessing a user's email through OAuth (Open Authorization) providers.\n\n**Main Purpose:**\n\nThe main purpose of this section is to inform developers about the OAuth providers that have specific requirements or additional steps needed to access a user's email. This ensures that Magic Labs can provide a secure and controlled access experience for their users.\n\n**Key Points:**\n\n- Magic Labs can only restrict email access for OAuth providers that return the user's email within the OAuth user info response.\n- Certain OAuth providers require additional verification or steps for developers to support email access.\n- The section lists the specific OAuth providers (Twitter, Microsoft, Bitbucket, and LinkedIn) that require additional actions or verification.\n\nIn summary, this section provides essential information for developers to understand the nuances of social login and how to implement secure email access for their Magic Labs embedded wallet applications.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/security/access-control#chunk-4", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nIn order to interact with the email access control list for your application, you will need a Secret Key and Client ID.\n\nTo obtain the required information, follow the steps below:\n\n\u2022 Navigate to a Magic app from the main dashboard landing page.\n\n\u2022 Save the SECRET KEY in the API Keys section.\n\n\u2022 Save the cid query param from the URL.Example: \u2060https://dashboard.magic.link/app?cid=<this_is_the_client_id>\n\nSECRET KEY\n\ncid\n\n\u2022 Example: \u2060https://dashboard.magic.link/app?cid=<this_is_the_client_id>\n\nhttps://dashboard.magic.link/app?cid=<this_is_the_client_id>\n\n#\n\nIn the Headers section, pass the Secret Key for the X-Magic-Secret-Key value. This will return a list of emails in your allow list and block list.\n\nX-Magic-Secret-Key\n\nCopy\n\n01\n\ncurl\n\n--request GET\n\n\\\n\n01\n\ncurl\n\n--request GET\n\n\\\n\n02\n\n--url https://api.magic.link/v1/api/magic_client/access_control\n\n\\\n\n02\n\n--url https://api.magic.link/v1/api/magic_client/access_control\n\n\\\n\n03\n\n--header\n\n'x-magic-secret-key: sk_live_06FC010DA25ED4F2'\n\n03\n\n--header\n\n'x-magic-secret-key: sk_live_06FC010DA25ED4F2'", "explanation": "I'd be happy to explain the section '#Usage - #Get Access Control Lists' from the Magic Labs embedded wallet documentation.\n\n**What is it about?**\n\nThis section describes how to access your application's email access control list using a Secret Key and Client ID. The email access control list includes a list of allowed and blocked emails that can interact with your application.\n\n**Main Purpose**\n\nThe main purpose of this section is to guide users on how to retrieve their email access control list and use it in their application. This list is essential for managing who can interact with your application and restrict access to authorized users only.\n\n**Key Steps**\n\nTo achieve this, you need to:\n\n1. Obtain a Secret Key and Client ID from your Magic app dashboard.\n2. Pass the Secret Key in the 'X-Magic-Secret-Key' header in a GET request to the Magic API.\n3. Send a GET request to retrieve the list of emails in your allow list and block list.\n\nBy following these steps, you can gain access to your email access control list and manage your application's security settings efficiently.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/security/access-control#chunk-5", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nIn the Headers section, pass the Secret Key for the X-Magic-Secret-Key value. In the body of the JSON, fill in your Client ID as the target_client_id and the list of emails to use as the allow list and block list. This will clear any pre-existing lists you have already created.\n\nX-Magic-Secret-Key\n\ntarget_client_id\n\nCopy\n\n01\n\ncurl\n\n--request PUT\n\n\\\n\n01\n\ncurl\n\n--request PUT\n\n\\\n\n02\n\n--url https://api.magic.link/v1/api/magic_client/access_control\n\n\\\n\n02\n\n--url https://api.magic.link/v1/api/magic_client/access_control\n\n\\\n\n03\n\n--header\n\n'Content-Type: application/json'\n\n\\\n\n03\n\n--header\n\n'Content-Type: application/json'\n\n\\\n\n04\n\n--header\n\n'x-magic-secret-key: sk_live_06FC010DA25ED4F2'\n\n\\\n\n04\n\n--header\n\n'x-magic-secret-key: sk_live_06FC010DA25ED4F2'\n\n\\\n\n05\n\n--data\n\n'{\n\n05\n\n--data\n\n'{\n\n06\n\n\"target_client_id\": \"3LDeve5f56ouY_tN-jLJlop_hkLI1LLTNG8abaCD42E=\",\n\n06\n\n\"target_client_id\": \"3LDeve5f56ouY_tN-jLJlop_hkLI1LLTNG8abaCD42E=\",\n\n07\n\n\"emails\": {\n\n07\n\n\"emails\": {\n\n08\n\n\"allow_list\": [\n\n08\n\n\"allow_list\": [\n\n09\n\n\"example@gmail.com\",\n\n09\n\n\"example@gmail.com\",\n\n10\n\n\"example2@gmail.com\"\n\n10\n\n\"example2@gmail.com\"\n\n11\n\n],\n\n11\n\n],\n\n12\n\n\"block_list\": [\n\n12\n\n\"block_list\": [\n\n13\n\n\"example3@gmail.com\"\n\n13\n\n\"example3@gmail.com\"\n\n14\n\n]\n\n14\n\n]\n\n15\n\n}\n\n15\n\n}\n\n16\n\n}'\n\n16\n\n}'", "explanation": "**Access Control Lists (ACLs) in Magic Labs Embedded Wallet**\n\nThe provided documentation section is about creating new Access Control Lists (ACLs) in Magic Labs' embedded wallet. \n\n**Main Purpose:**\n\nThe main purpose of ACLs is to control what clients or users can access and interact with your Magic Labs embedded wallet. By creating ACLs, you can manage which email addresses are allowed or blocked from logging in or performing certain actions within your wallet.\n\n**How it Works:**\n\nTo create an ACL, you need to:\n\n1. Pass your Secret Key in the `X-Magic-Secret-Key` header.\n2. Define the target client ID and list of email addresses to include in the `allow_list` and `block_list` fields.\n\nThe example demonstrates the creation of an ACL with the following settings:\n\n- Target Client ID: `3LDeve5f56ouY_tN-jLJlop_hkLI1LLTNG8abaCD42E=`\n- Allow List: `example@gmail.com` and `example2@gmail.com`\n- Block List: `example3@gmail.com`\n\nBy using ACLs, you can enforce account access security and prevent unauthorized access to your Magic Labs embedded wallet.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/security/access-control#chunk-6", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nIn the Headers section, pass through the Secret Key in the X-Magic-Secret-Key value. In the body of the JSON, fill in your Client ID as the target_client_id and the list of emails to append to the application\u2019s allow list and block list.\n\nX-Magic-Secret-Key\n\ntarget_client_id\n\nCopy\n\n01\n\ncurl\n\n--request PATCH\n\n\\\n\n01\n\ncurl\n\n--request PATCH\n\n\\\n\n02\n\n--url https://api.magic.link/v1/api/magic_client/access_control\n\n\\\n\n02\n\n--url https://api.magic.link/v1/api/magic_client/access_control\n\n\\\n\n03\n\n--header\n\n'Content-Type: application/json'\n\n\\\n\n03\n\n--header\n\n'Content-Type: application/json'\n\n\\\n\n04\n\n--header\n\n'x-magic-secret-key: sk_live_06FC010DA25ED4F2'\n\n\\\n\n04\n\n--header\n\n'x-magic-secret-key: sk_live_06FC010DA25ED4F2'\n\n\\\n\n05\n\n--data\n\n'{\n\n05\n\n--data\n\n'{\n\n06\n\n\"target_client_id\": \"3LDeve5f56ouY_tN-jLJlop_hkLI1LLTNG8abaCD42E=\",\n\n06\n\n\"target_client_id\": \"3LDeve5f56ouY_tN-jLJlop_hkLI1LLTNG8abaCD42E=\",\n\n07\n\n\"emails\": {\n\n07\n\n\"emails\": {\n\n08\n\n\"allow_list\": [\n\n08\n\n\"allow_list\": [\n\n09\n\n\"example4@gmail.com\"\n\n09\n\n\"example4@gmail.com\"\n\n10\n\n],\n\n10\n\n],\n\n11\n\n\"block_list\": [\n\n11\n\n\"block_list\": [\n\n12\n\n\"example5@gmail.com\"\n\n12\n\n\"example5@gmail.com\"\n\n13\n\n]\n\n13\n\n]\n\n14\n\n}\n\n14\n\n}\n\n15\n\n}'\n\n15\n\n}'", "explanation": "**Update Access Control Lists**\n\nThis documentation section explains how to update the access control lists for a Magic Labs embedded wallet using their API.\n\n**Main Purpose:**\n\nThe main purpose of this section is to provide a step-by-step guide on how to update two types of lists associated with an application's access control:\n\n1. **Allow List**: A list of emails that are allowed to interact with the application.\n2. **Block List**: A list of emails that are blocked or restricted from interacting with the application.\n\n**Key Components:**\n\n1. **Secret Key**: A unique key used for authentication, which is passed in the `X-Magic-Secret-Key` header.\n2. **Client ID**: A unique identifier for the Magic Labs client, which is included in the JSON body.\n3. **emails**: An object containing the allow and block lists, each with an array of email addresses.\n4. **PATCH Request**: A HTTP request method used to update the access control lists.\n\n**Example Usage:**\n\nThe provided code snippet demonstrates how to make a PATCH request to update the access control lists using the `curl` command. The example updates the allow list with an email address and the block list with another email address.\n\nOverall, this section explains how to efficiently manage an application's access control lists using the Magic Labs API.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/security/access-control#chunk-7", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nIn the Headers section, pass the Secret Key for the X-Magic-Secret-Key value. In the body of the JSON, fill in your Client ID as the target_client_id and the list of emails to remove from the application\u2019s allow list and block list.\n\nX-Magic-Secret-Key\n\ntarget_client_id\n\nCopy\n\n01\n\ncurl\n\n--request DELETE\n\n\\\n\n01\n\ncurl\n\n--request DELETE\n\n\\\n\n02\n\n--url https://api.magic.link/v1/api/magic_client/access_control\n\n\\\n\n02\n\n--url https://api.magic.link/v1/api/magic_client/access_control\n\n\\\n\n03\n\n--header\n\n'Content-Type: application/json'\n\n\\\n\n03\n\n--header\n\n'Content-Type: application/json'\n\n\\\n\n04\n\n--header\n\n'x-magic-secret-key: sk_live_06FC010DA25ED4F2'\n\n\\\n\n04\n\n--header\n\n'x-magic-secret-key: sk_live_06FC010DA25ED4F2'\n\n\\\n\n05\n\n--data\n\n'{\n\n05\n\n--data\n\n'{\n\n06\n\n\"target_client_id\": \"3LDeve5f56ouY_tN-jLJlop_hkLI1LLTNG8abaCD42E=\",\n\n06\n\n\"target_client_id\": \"3LDeve5f56ouY_tN-jLJlop_hkLI1LLTNG8abaCD42E=\",\n\n07\n\n\"emails\": {\n\n07\n\n\"emails\": {\n\n08\n\n\"allow_list\": [\n\n08\n\n\"allow_list\": [\n\n09\n\n\"example6@gmail.com\"\n\n09\n\n\"example6@gmail.com\"\n\n10\n\n],\n\n10\n\n],\n\n11\n\n\"block_list\": [\n\n11\n\n\"block_list\": [\n\n12\n\n\"example7@gmail.com\"\n\n12\n\n\"example7@gmail.com\"\n\n13\n\n]\n\n13\n\n]\n\n14\n\n}\n\n14\n\n}\n\n15\n\n}'\n\n15\n\n}'", "explanation": "**Section Review: #Remove Emails From Access Control Lists**\n\nThe provided documentation section explains how to remove emails from the access control lists (allow list and block list) of a Magic Labs embedded wallet using a Secret Key and a Client ID.\n\n**Main Purpose:**\n\nThe main purpose of this section is to outline the steps and API requests needed to:\n\n1. Remove a specified list of emails (or individual email addresses) from the allow list (emails that are explicitly allowed to access the Magic Labs wallet).\n2. Remove a specified list of emails (or individual email addresses) from the block list (emails that are explicitly blocked from accessing the Magic Labs wallet).\n\n**Key Information:**\n\nTo achieve this, the user must:\n\n1. Pass the Secret Key in the X-Magic-Secret-Key header.\n2. Specify the Client ID in the target_client_id field of the JSON body.\n3. Provide the list of emails to be removed from the allow list and block list within the JSON body.\n4. Send a DELETE request to the Magic API with the relevant headers and JSON body.\n\n**Example Provided:**\n\nThe provided example demonstrates this process using `curl` and includes placeholders for the Secret Key, Client ID, allow list, and block list emails.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/security/access-control#chunk-8", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nDevice Registration is a security feature that helps protect end-users from sophisticated phishing techniques. When a returning user initiates a login from an unrecognized device or browser, they\u2019ll receive an email or text message to review and confirm the login request.\n\nYou can learn more about Magic\u2019s commitment to security in this blog post.\n\nthis blog post", "explanation": "**Device Registration Overview:**\n\nDevice Registration is a security feature designed to protect users from phishing attacks. Its main purpose is to verify a user's identity when logging in from an unrecognized device or browser. This feature requires the user to review and confirm the login request via email or text message, ensuring that only authorized devices can access their account.\n\n**Main Goals:**\n\n1. **Phishing Protection**: Prevents sophisticated phishing techniques by requiring users to confirm login requests from new devices.\n2. **User Identity Verification**: Ensures that only authorized devices can access the user's account.\n\n**Key Benefits:**\n\n1. Enhanced security for end-users\n2. Reduced risk of account takeover and unauthorized access\n3. Increased confidence in login processes for users\n\nOverall, Device Registration is a critical security feature that adds an extra layer of protection for users, helping to safeguard their accounts from malicious activities.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/security/device-registration#chunk-1", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nDevice Registration applies to returning users logging in via Email OTP, Non-Redirect Magic Link, or SMS on an unrecognized device. Device Registration is not enforced at time of initial account creation.\n\n#\n\nIf a returning user attempts to log in via email from an unrecognized device or browser, they will be shown a prompt to register their device. The user will receive a themed email containing information about the login request, with a button to approve the login.\n\nClicking the \u201cApprove this login\u201d button navigates users to a secure domain owned by Magic, which compares the user\u2019s current device profile to the device profile used to initiate the login request.\n\nIf the profiles match, the user\u2019s new device will be registered automatically. They can then return to the application and continue with their standard login process.\n\nHowever, if the confirming device profile does not match the device profile used to initiate a login request, Magic will display a secondary confirmation with information about login request. Users can then choose to approve or reject the login. This will most commonly occur for end-users that initiate a login on one device (laptop) and check their email on a different device (phone).", "explanation": "The section '#Usage - Email Login' from the Magic Labs embedded wallet documentation is about a security feature called Device Registration. Its main purpose is to add an extra layer of verification for users when logging in via Email OTP, Non-Redirect Magic Link, or SMS from a device that is not recognized by their account.\n\nHere are the key points:\n\n1. **Device Registration is not required during initial account creation**.\n2. When a returning user logs in from an unknown device or browser, they are prompted to register their device.\n3. The user receives an email with information about the login request, including an \"Approve this login\" button.\n4. Clicking the button directs the user to a secure Magic domain, where their current device profile is compared to the device profile used to initiate the login request.\n5. If the profiles match, the new device is registered automatically, and the user can proceed with standard login.\n6. If the profiles do not match, the user is shown a second confirmation with information about the login request, allowing them to approve or reject the login.\n\nDevice Registration enhances security by ensuring that users authorize logins from unfamiliar devices, reducing the risk of unauthorized access.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/security/device-registration#chunk-2", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nWhen a returning user attempts to log in via SMS on an unrecognized device or browser, they\u2019ll receive an SMS containing information about the device profile that initiated the login.\n\nUsers can then respond via SMS to either approve (1) or deny (2) the login request.\n\n1\n\n2", "explanation": "Based on the provided documentation, here is a clear and concise explanation of the '#SMS Login' section:\n\n## SMS Login Overview\n\nThe SMS Login feature is an additional security measure used to verify and authorize a user's login attempt from an unrecognized device or browser. It allows users to confirm whether the login request is legitimate or not by responding to an SMS with the information about the device profile.\n\n## Main Purpose\n\nThe main purpose of the SMS Login feature is to provide an extra layer of security protection against unauthorized login attempts, especially when a user is logging in from an unfamiliar device or browser. By validating the user's identity through SMS, the system ensures that only authorized users can access their account, maintaining a higher level of security. \n\nHere is a block diagram or high level flow which can illustrate sms login process: \n\n(SMS Login flow starts here as per magic labs documentation);\nDevice attempts login  -> check if device is familiar \n   if familiar, proceed with login                ) \n\n   else proceed to \"magic labs login module's \"check user  \"                (\n    -> User gets SMS about device \n    -> user respond through SMS with 1 or 2         ( \n    -> further action taken based upon the response  \n       (1) approve, login proceeds                        ( \n       (2) deny, user receives new device account       (", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/security/device-registration#chunk-3", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nFor security purposes, Magic\u2019s Device Registration offering supports limited customization options. As with all widget UI, app name, logo, brand color, and theme will be applied to each step of the device registration flow.\n\nAdditionally, you may use deviceCheckUI=false to customize the messaging shown to users when an unrecognized device is detected. You must use this option if you are also passing showUI=false to your email login method call, otherwise the user may not see a UI to continue registering their device. See API Reference for more info.\n\ndeviceCheckUI=false\n\nshowUI=false\n\nAPI Reference\n\nDevice Registration also supports Custom SMTP, allowing you to customize the domain and sender that the device registration email is sent from.\n\nCustom SMTP", "explanation": "**Customization Section Overview**\n\nThe #Customization section of the Magic Labs embedded wallet documentation explains the limited options available for customizing the device registration flow to meet the specific needs of your application or brand.\n\n**Main Purpose**\n\nThe primary purpose of this section is to provide information on how to personalize and tailor the device registration experience for users, while ensuring security and compliance with Magic's standards.\n\n**Customization Options**\n\nThe customization options include:\n\n1. **Branding and Theme**: Apply your app name, logo, brand color, and theme to each step of the device registration flow.\n2. **Customizing Unrecognized Device Messaging**: Use the `deviceCheckUI=false` option to change the messaging shown to users when an unrecognized device is detected. This option must be used in conjunction with `showUI=false` to ensure a seamless user experience.\n3. **Custom SMTP**: Allow you to customize the domain and sender that the device registration email is sent from.\n\nBy utilizing these customization options, you can create a more tailored and user-friendly device registration experience that aligns with your brand's identity and security requirements.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/security/device-registration#chunk-4", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nWhile we highly recommend enforcing device registration, this feature can be disabled on a per-app basis. To disable device registration, head to the Settings page in Magic\u2019s developer dashboard.\n\nDevice registration cannot be disabled for Universal Wallet apps.\n\nUniversal Wallet", "explanation": "**Disabling Device Registration Overview**\n\nThe '#Disabling Device Registration' section in the Magic Labs embedded wallet documentation explains how to disable the device registration feature on a per-app basis. This feature is used to uniquely identify and track devices that authenticate with a Magic Labs wallet.\n\n**Main Purpose:**\n\nThe main purpose of disabling device registration is to allow developers to choose whether they want to enforce device uniqueness and authentication tracking for their specific app. Enabling device registration provides additional security features, such as device-based authentication and tracking of session activities. However, disabling it may be necessary for specific app requirements or use cases.\n\n**Important Note:** Universal Wallet apps are exempt from this setting, meaning device registration cannot be disabled for these types of applications.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/security/device-registration#chunk-5", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nFor the best user experience, please make sure you\u2019re using the minimum version of Magic\u2019s SDK:\n\nFramework\n\nSDK\n\nVersion\n\nWeb\n\nmagic-sdk\n\nmagic-sdk\n\nv20.1.0+\n\nReact Native Bare\n\n@magic-sdk/react-native-bare\n\n@magic-sdk/react-native-bare\n\nv20.1.0+\n\nReact Native Expo\n\n@magic-sdk/react-native-expo\n\n@magic-sdk/react-native-expo\n\nv20.1.0+\n\nFlutter\n\nmagic_sdk\n\nmagic_sdk\n\nv4.1.1+\n\niOS\n\nMagicSDK\n\nMagicSDK\n\nv9.1.0+\n\nAndroid\n\nlink.magic:magic-android\n\nlink.magic:magic-android\n\nv9.1.0+", "explanation": "**SDK Version Support:**\n\nThis section is about the recommended minimum version of Magic Labs' SDK (Software Development Kit) to ensure the best user experience for the embedded wallet on various platforms.\n\n**Main Purpose:**\n\nThe main purpose is to inform developers that using the latest SDK version ensures compatibility and stability of the embedded wallet, which is crucial for a seamless user experience. By adhering to the recommended minimum SDK version, developers can:\n\n* Avoid potential bugs and errors\n* Leverage new features and security enhancements\n* Ensure smooth integration with the embedded wallet API\n\n**In essence:** Developers should use the specified minimum SDK version to guarantee optimal performance and a high-quality user experience.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/security/device-registration#chunk-6", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "It's recommended to apply this plugin in Unity 2021.3.3f1 or newer. Developers may build 2d Unity mobile Apps both in iOS and Android.\n\nWebGL is currently not supported, but you may use magic-js in a JS context to enable passwordless authentication flow.\n\nmagic-js", "explanation": "Based on the provided documentation section, here's a clear and concise explanation of what it is about and its main purpose:\n\n**Unity API Reference**\n\nThe Unity API Reference is a documentation section for the Magic Labs Embedded Wallet plugin, specifically designed for use with Unity game development engine. This plugin allows developers to integrate the Magic Labs wallet into their Unity-based 2D mobile apps for both iOS and Android platforms.\n\n**Key Points:**\n\n- **Supported Unity Version:** The plugin is recommended for use with Unity 2021.3.3f1 or newer versions.\n- **Platform Support:** The plugin supports building 2D Unity mobile apps for both iOS and Android platforms.\n- **Unsupported Platforms:** WebGL is not currently supported with this plugin.\n- **Alternative Solution:** Developers can use the `magic-js` library in a JS context to enable passwordless authentication flow, as an alternative to the plugin.\n\n**Main Purpose:**\n\nThe main purpose of the Unity API Reference is to provide developers with a guide to integrate the Magic Labs Embedded Wallet into their Unity-based 2D mobile apps, enabling seamless and secure authentication flows for their users.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/unity#chunk-1", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nThe Magic SDK for Unity is your entry-point to secure, passwordless authentication for your mobile app. This guide will cover some important topics for getting started with the Magic Unity SDK and to make the most of Magic's features.", "explanation": "The '#Overview' section is an introductory part of the Magic Unity SDK documentation. \n\nIn this section, it's explained that the Magic SDK for Unity is the primary entry point to integrate passwordless authentication into a mobile app. Its main purpose is to serve as a roadmap or guide for users who are just starting to work with the Magic Unity SDK, outlining key topics that need to be explored for a successful integration of Magic's features.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/unity#chunk-2", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nThe Magic class is the entry-point to the Magic SDK. It must be instantiated with a Magic publishable key.\n\n#\n\n#\n\nMagic\n\nParameter\n\nType\n\nDefinition\n\napiKey\n\napiKey\n\nString\n\nYour publishable API Key retrieved from the Magic Dashboard.\n\nnetwork\n\nnetwork\n\nEthNetwork\n\nA representation of the connected Ethereum network (one of: mainnet or goerli).\n\nlocale?\n\nlocale?\n\nString\n\nCustomize the language of Magic's modal, email and confirmation screen. See Localization for more.\n\nLocalization\n\nconfig?\n\nconfig?\n\nCustomNodeConfiguration\n\nA custom Ethereum Node configuration with the following shape:\n\nrpcUrl (String): A URL pointing to your custom Ethereum Node.\n\nrpcUrl\n\n\u2060chainId? (Number): Some Node infrastructures require you to pass an explicit chain ID. If you are aware that your Node requires this configuration, pass it here as an integer.\n\nchainId?\n\nmacCanvas?\n\nmacCanvas?\n\nGameObject\n\nYour application\u2019s primary canvas. Must be non-null for macOS and macOS editor support.", "explanation": "**Magic Class Constructor Explanation**\n\nThe Magic class is the main entry point to the Magic Labs embedded wallet SDK in the Unity framework. It plays a crucial role in initializing the Magic wallet and enabling users to interact with their Ethereum accounts within your application.\n\n**Purpose of the Magic Class Constructor**\n\nThe constructor of the Magic class is used to instantiate and initialize a Magic wallet instance. It requires several parameters to be passed to it, which are used to configure the wallet setup. The parameters are:\n\n1. **apiKey**: A publishable API key obtained from the Magic Dashboard.\n2. **network**: The Ethereum network to connect to (can be mainnet or goerli).\n3. **locale**: Customizes the language of Magic's modal, email, and confirmation screens.\n4. **config**: Optional parameter for customizing the Ethereum Node configuration.\n5. **macCanvas**: On macOS, a reference to the application's primary canvas is required.\n\n**Initialization Considerations**\n\nWhen instantiating a Magic wallet instance, ensure that you have a valid publishable API key, and the network parameter is set to either mainnet or goerli. The locale parameter can be used to customize the wallet's language. If customizing the Ethereum Node configuration is necessary, make sure to use a valid custom node configuration object. On macOS, pass a reference to the application's primary canvas to the macCanvas parameter.\n\nBy following these guidelines and passing the required parameters to the Magic constructor, you can successfully initialize the Magic wallet instance, enabling users to interact with their Ethereum accounts within your Unity application.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/unity#chunk-3", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\nusing\n\nMagicSDK\n\n;\n\n01\n\nusing\n\nMagicSDK\n\n;\n\n02\n\n02\n\n03\n\npublic\n\nclass\n\nMagicUnity\n\n:\n\nMonoBehaviour\n\n03\n\npublic\n\nclass\n\nMagicUnity\n\n:\n\nMonoBehaviour\n\n04\n\n{\n\n04\n\n{\n\n05\n\nvoid\n\nStart\n\n(\n\n)\n\n05\n\nvoid\n\nStart\n\n(\n\n)\n\n06\n\n{\n\n06\n\n{\n\n07\n\nMagic\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n\"PUBLISHABLE_API_KEY\"\n\n)\n\n;\n\n07\n\nMagic\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n\"PUBLISHABLE_API_KEY\"\n\n)\n\n;\n\n08\n\nMagic\n\n.\n\nInstance\n\n=\n\nmagic\n\n;\n\n08\n\nMagic\n\n.\n\nInstance\n\n=\n\nmagic\n\n;\n\n09\n\n}\n\n09\n\n}\n\n10\n\n}\n\n10\n\n}", "explanation": "**Initialization Section Explanation**\n\nThe provided documentation section is related to the initialization of the Magic Labs embedded wallet in a Unity environment. It's a crucial step in setting up the Magic wallet to work with your Unity project.\n\n**Purpose:**\n\nThe main purpose of this initialization section is to set up the Magic wallet instance, which is required to perform wallet-related operations like user authentication, identity management, and cryptocurrency transactions.\n\n**Key Points:**\n\n1. The section includes two separate classes: `MagicUnity` and a second `MagicUnity` class not provided in normal use.\n2. The `Start()` method is overridden in the `MagicUnity` class, which is called when the script is initialized.\n3. Within the `Start()` method, a new instance of the `Magic` class is created with a publishable API key.\n4. The `Magic.Instance` property is set to the newly created `magic` instance.\n5. The `Magic.Instance` property is a singleton that holds the Magic wallet instance, making it accessible throughout the project.\n\n**Best Practice:**\n\nIn a production environment, you would typically use a single instance of the `MagicUnity` class, and the publishable API key should be replaced with a secure API key from the Magic Labs dashboard. This ensures that your API key is not exposed in your code and is protected against unauthorized access.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/unity#chunk-4", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nThe Auth Module and its members are accessible on the Magic SDK instance by the auth property.\n\nauth\n\nCopy\n\n01\n\nusing\n\nMagicSDK\n\n;\n\n01\n\nusing\n\nMagicSDK\n\n;\n\n02\n\n02\n\n03\n\nmagic\n\n.\n\nAuth\n\n;\n\n03\n\nmagic\n\n.\n\nAuth\n\n;\n\n04\n\nmagic\n\n.\n\nAuth\n\n.\n\nLoginWithEmailOTP\n\n;\n\n04\n\nmagic\n\n.\n\nAuth\n\n.\n\nLoginWithEmailOTP\n\n;\n\n#\n\nLoginWithEmailOTP\n\nAuthenticate a user passwordlessly using an email one-time code sent to the specified user's email address.\n\n#\n\n\u2022 email The user email to log in with\n\nemail", "explanation": "This section from the Magic Labs' documentation explains a public method called `LoginWithEmailOTP` under the `Auth Module` in the Magic SDK for Unity.\n\n**Main Purpose:**\nThe `LoginWithEmailOTP` method is used to authenticate a user passwordlessly by sending a one-time code to the specified user's email address. This method allows users to log in without creating a password, providing a passwordless experience.\n\n**Method Parameters:**\nThe method takes one required parameter:\n\n* `email`: The user's email address used for logging in.\n\n**Overall:**\nIn simpler terms, this method enables users to login to their Magic Labs account using an email address and a one-time code sent to that email, eliminating the need for a password. This public method is part of the `Auth Module` and can be accessed through the `auth` property of the Magic SDK instance in Unity.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/unity#chunk-5", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 DIDToken: Task<String>: The function resolves upon authentication request success and rejects with a specific error code if the request fails. The resolved value is a Decentralized ID token with a default 15-minute lifespan.\n\nDIDToken: Task<String>", "explanation": "The '#Returns' section in the Magic Labs embedded wallet documentation is about the return values and types of the `DIDToken` function when called.\n\nMain purpose of the '#Returns' section:\n\n- To clearly outline the expected outcome or result of a function call, specifically related to successful authentication and operation of the `DIDToken` function.\n- To ensure developers have the necessary information to handle and process the returned value when the function is successfully executed.\n\nIn this case, the `DIDToken` function returns a Decentralized ID token with a lifespan of 15 minutes, as a `String`, if the authentication request is successful.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/unity#chunk-6", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nThe User Module and its members are accessible on the Magic SDK instance by the user property.\n\nuser\n\nCopy\n\n01\n\nimport MagicSDK\n\n01\n\nimport MagicSDK\n\n02\n\n02\n\n03\n\nvar\n\nmagic\n\n=\n\nMagic\n\n.\n\nInstance\n\n03\n\nvar\n\nmagic\n\n=\n\nMagic\n\n.\n\nInstance\n\n04\n\n04\n\n05\n\nmagic\n\n.\n\nUser\n\n05\n\nmagic\n\n.\n\nUser\n\n06\n\nmagic\n\n.\n\nUser\n\n.\n\nGetIdToken\n\n06\n\nmagic\n\n.\n\nUser\n\n.\n\nGetIdToken\n\n07\n\nmagic\n\n.\n\nUser\n\n.\n\nGenerateIdToken\n\n07\n\nmagic\n\n.\n\nUser\n\n.\n\nGenerateIdToken\n\n08\n\nmagic\n\n.\n\nUser\n\n.\n\nGetMetadata\n\n08\n\nmagic\n\n.\n\nUser\n\n.\n\nGetMetadata\n\n09\n\nmagic\n\n.\n\nUser\n\n.\n\nUpdateEmail\n\n09\n\nmagic\n\n.\n\nUser\n\n.\n\nUpdateEmail\n\n10\n\nmagic\n\n.\n\nUser\n\n.\n\nIsLoggedIn\n\n10\n\nmagic\n\n.\n\nUser\n\n.\n\nIsLoggedIn\n\n11\n\nmagic\n\n.\n\nUser\n\n.\n\nLogout\n\n11\n\nmagic\n\n.\n\nUser\n\n.\n\nLogout\n\n#\n\nUpdateEmail\n\nInitiates the update email flow that allows a user to change to a new email\n\n#\n\n\u2022 email The user email to update with\n\n\u2022 showUI If true, show an out-of-the-box pending UI while the request is in flight\n\nemail\n\nshowUI\n\ntrue", "explanation": "The section you're referring to is part of the documentation for the Magic Labs embedded wallet SDK, specifically for the Unity platform.\n\n**Overview**\nThe section is about the `User Module` in the Magic SDK, and it explains how to access its members, which are functions used to manage user interactions.\n\n**User Module Access**\nThe `User Module` is accessible on the Magic SDK instance through the `user` property. Here's an example of how to access the `User Module` using the `Magic` instance:\n\n```csharp\nvar magic = Magic.Instance;\nvar user = magic.User;\n```\n\n**Public Methods**\nThe `User Module` has several public methods, including:\n\n1. `GetIdToken`: Retrieves the user's ID token.\n2. `GenerateIdToken`: Generates a new ID token for the user.\n3. `GetMetadata`: Retrieves the user's metadata.\n4. `UpdateEmail`: Initiates the update email flow to change the user's email address.\n5. `IsLoggedIn`: Checks if the user is logged in.\n6. `Logout`: Logs out the user.\n\n**UpdateEmail Method**\nThe `UpdateEmail` method is used to initiate the update email flow, allowing a user to change their email address. This method has two parameters:\n\n1. `email`: The new email address to update with.\n2. `showUI`: A boolean indicating whether to show an out-of-the-box pending UI while the request is in flight. By default, `showUI` is set to `true`.\n\nTo call the `UpdateEmail` method, you would use the following code:\n\n```csharp\nmagic.User.UpdateEmail(email: \"newemail@example.com\", showUI: true);\n```", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/unity#chunk-7", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 Task<Boolean>: The Completable resolves with a true boolean value if update email is successful and rejects with a specific error code if the request fails.\n\nTask<Boolean>\n\nCompletable", "explanation": "Based on the provided documentation from the Magic Labs embedded wallet for the Unity client-side SDK, the section titled 'Returns' is about the response to the 'update email' request. Here's what it explains in simple terms:\n\nWhen making a request to update the email associated with the user's account, the API returns either a successful status or an error. The status is represented by a boolean value (`true` if successful, `false` if not).\n\nThe main purpose of this 'Returns' section is to clarify what kind of outcome you can expect from the update email request. This includes:\n\n1. **Success**: A boolean value (`true`) indicating that the update email request was successful.\n2. **Error**: A specific error code indicating why the request failed.\n\nThis information helps developers understand how to handle the response of the update email request in their Unity application. \n\nIn programming terms, `Task<Boolean>` and `Completable` are asynchronous return types used to handle the response of the request. They enable the application to continue running while waiting for the response and process it when it becomes available.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/unity#chunk-8", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nGetIdToken\n\nGenerates a Decentralized Id Token which acts as a proof of authentication to resource servers.\n\n#\n\n\u2022 lifespan?: will set the lifespan of the generated token. Defaults to 900s (15 mins)\n\nlifespan?", "explanation": "According to the provided documentation, the `GetIdToken` method generates a Decentralized ID Token. This token serves as proof of authentication for resource servers. \n\nIn simpler terms, when you call `GetIdToken`, the Magic Labs embedded wallet will create a unique, time-sensitive token that can be used by other services to verify a user's identity securely without needing to store sensitive user data.\n\nThe `lifespan` parameter allows you to specify how long the generated token is valid for, with a default timeout of 15 minutes (900 seconds). You can adjust this value based on your application's specific requirements.\n\nFor example, if you set `lifespan` to 30 minutes, the token will be active for 30 minutes after it's generated. After the specified time elapses, the token will expire and can no longer be used for authentication. This helps prevent tokens from being reused or accessed maliciously after the initial authentication.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/unity#chunk-9", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 GetIdTokenResponse: Task<String>: The Completable resolves with a true boolean value if update email is successful and rejects with a specific error code if the request fails.\n\nGetIdTokenResponse: Task<String>\n\nCompletable", "explanation": "Based on the provided documentation section, I'll break down what it's about and its main purpose.\n\n**What it is:**\nThe 'Returns' section in the Magic Link documentation explicitly mentions the return types of a specific API function called `GetIdTokenResponse`.\n\n**What `GetIdTokenResponse` does:**\n`GetIdTokenResponse` is an API function that likely retrieves an ID token, but without more context, we can't be certain. In the context of Magic Labs, an ID token or similar might be what's returned, possibly an access token that identifies the user in the client application or elsewhere.\n\n**Return Value (Completable):**\nA `Completable` in this context indicates that the function returns a task that may contain a value (the ID token) or no value at all if the request is not intended to directly produce a conclusive outcome. In simpler terms, this might mean that the ID token or similar returned value isn't just information but possibly requires verification or requires additional validation in application workflows.\n\nIn essence, The main purpose of this `Returns` section here is to inform the client or developer using the Magic Link SDK in Unity, what type of outcome to expect from the API call to `GetIdTokenResponse`. The sender of this data, usually the service engine, shows exactly what kind of output and type that each potential call of the method might produce.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/unity#chunk-10", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nGenerateIdToken\n\nGenerates a Decentralized Id Token with optional serialized data.\n\n#\n\n\u2022 lifespan : will set the lifespan of the generated token. Defaults to 900s (15 mins)\n\n\u2022 attachment : will set a signature of serialized data in the generated token. Defaults to \"none\"\n\nlifespan\n\nattachment\n\n\"none\"", "explanation": "**GenerateIdToken Method: Introduction and Purpose**\n\nThe `GenerateIdToken` method is a public function in the Magic Labs embedded wallet, used to create a Decentralized Id Token with optional serialized data. Its primary purpose is to:\n\n1. **Generate a secure token**: Create a token that can be used for authentication, authorization, or other use cases, without exposing sensitive user data.\n2. **Specify token lifespan**: Set the duration of the token's validity, ensuring it expires after a specified time (default: 15 minutes).\n\n**Key Parameters:**\n\n1. **`lifespan`**: Sets the token's validity period in seconds. The default value is 900s (15 minutes).\n2. **`attachment`**: Embeds serialized data (JSON or other formats) in the token. The default value is `\"none\"`.\n\nBy using the `GenerateIdToken` method, developers can create secure, short-lived tokens with optional data attachments, helping to protect user credentials and sensitive information.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/unity#chunk-11", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 Task<String>: Base64-encoded string representation of a JSON tuple representing [proof, claim]\n\nTask<String>\n\n[proof, claim]", "explanation": "Based on the provided documentation section, the '#Returns' section is describing what data is returned by an API or function from the Magic Labs embedded wallet.\n\n**What does it return?**\nIt returns a `Task<String>` data type, which is equivalent to a pending computation that will eventually produce a string result.\n\n**What is the string representation of?**\nThe string representation is a Base64-encoded string of a JSON tuple, which contains two values:\n\n1. `proof`: an unknown value or object\n2. `claim`: an unknown value or object\n\nIn summary, the main purpose of this section is to inform the user (typically a developer) about the type and content of data that will be returned by a specific API or function from the Magic Labs embedded wallet. This helps developers understand what to expect and how to handle the returned data in their code.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/unity#chunk-12", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nGetMetadata\n\nRetrieves information for the authenticated user.\n\n#", "explanation": "**Understanding #GetMetadata**\n\nThe `#GetMetadata` method is a public method in the Magic Labs embedded wallet Unity SDK. Its primary purpose is to retrieve information about the currently authenticated user.\n\n**Key Functionality:**\n\nWhen called, `#GetMetadata` fetches relevant details about the user, such as their metadata. This user metadata can include information like the user's email, username, profile picture, and more, subject to the data shared by the user and the permissions set on their account.\n\n**Use Case:**\n\nDevelopers integrating the Magic Labs embedded wallet into their Unity applications can utilize `#GetMetadata` to fetch user information upon successful authentication, enabling their application to personalize the user experience and provide tailored services.\n\nFor example, in a social media application, `#GetMetadata` could be used to display the authenticated user's profile picture and username, or in a shopping platform, it could be used to display the user's name and account details.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/unity#chunk-13", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 Task<UserMetadata>: The UserMetadata containing the issuer, email and cryptographic public address of the authenticated user\n\nTask<UserMetadata>\n\nUserMetadata\n\npublic address\n\nCopy\n\n01\n\n[\n\nSerializable\n\n]\n\n01\n\n[\n\nSerializable\n\n]\n\n02\n\npublic\n\nsealed\n\nclass\n\nUserMetadata\n\n02\n\npublic\n\nsealed\n\nclass\n\nUserMetadata\n\n03\n\n{\n\n03\n\n{\n\n04\n\n[\n\nCanBeNull\n\n]\n\npublic\n\nstring\n\nissuer\n\n;\n\n04\n\n[\n\nCanBeNull\n\n]\n\npublic\n\nstring\n\nissuer\n\n;\n\n05\n\n[\n\nCanBeNull\n\n]\n\npublic\n\nstring\n\npublicAddress\n\n;\n\n05\n\n[\n\nCanBeNull\n\n]\n\npublic\n\nstring\n\npublicAddress\n\n;\n\n06\n\n[\n\nCanBeNull\n\n]\n\npublic\n\nstring\n\nemail\n\n;\n\n06\n\n[\n\nCanBeNull\n\n]\n\npublic\n\nstring\n\nemail\n\n;\n\n07\n\n}\n\n07\n\n}\n\n\u2022 issuer : The Decentralized ID of the user. In server-side use-cases, we recommend this value to be used as the user ID in your own tables.\n\n\u2022 email : Email address of the authenticated user\n\n\u2022 publicAddress: The authenticated user's public address (a.k.a.: public key). Currently, this value is associated with the Ethereum blockchain.\n\nissuer\n\nemail\n\npublicAddress", "explanation": "**Returns Section Explanation**\n\nIn the Magic Labs embedded wallet documentation, the '#Returns' section explains the type of data that the API call returns when executed successfully.\n\n**Main Purpose:**\n\nThe main purpose of the Returns section is to inform the developer about the structure and content of the response data, allowing them to decode and use it in their application.\n\n**Key Components:**\n\nThe Returns section outlines the structure of the response, which is a `Task<UserMetadata>` object. This object contains three properties:\n\n1. **issuer**: A string value representing the Decentralized ID of the user, which can be used as the user ID in a database table.\n2. **email**: A string value representing the email address of the authenticated user.\n3. **publicAddress**: A string value representing the authenticated user's public address, associated with the Ethereum blockchain.\n\n**Serializable Class Structure:**\n\nThe `UserMetadata` class is marked as a `sealed` class, indicating that it cannot be inherited from. It contains three properties: `issuer`, `email`, and `publicAddress`, each marked as `[CanBeNull]`, meaning that they may be null if not provided.\n\n**In Summary:**\n\nThe Returns section provides essential information about the response structure and data types, helping developers effectively handle and utilize the data returned by the Magic Labs API call.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/unity#chunk-14", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nIsLoggedIn\n\nChecks if a user is currently logged in to the Magic SDK.\n\n#", "explanation": "Based on the documentation, `IsLoggedIn` is a public method in the Magic Labs embedded wallet SDK for Unity. \n\n**Purpose:** The `IsLoggedIn` method determines whether a user is currently authenticated or logged in to the Magic SDK.\n\n**Function:** When called, `IsLoggedIn` returns a boolean value, indicating whether the user is logged in or not. This allows developers to check the authentication status of the user at any given time, enabling them to conditionally perform actions or display different UI elements based on the user's authentication status.\n\nIn essence, `IsLoggedIn` serves as a simple yet essential tool for developers to verify user authentication state, facilitating the development of secure and user-friendly applications with the Magic Labs embedded wallet SDK.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/unity#chunk-15", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 Task<Boolean>\n\nTask<Boolean>", "explanation": "In the Magic Labs embedded wallet documentation, specifically in the client-side SDKs for Unity, the `#Returns` section describes the expected output after calling a specific method.\n\nIn this case, `#Returns` is associated with a `Task<Boolean>` return type. This means that when the method is executed, it will return a boolean value wrapped inside a `Task`. A `Task` in Unity is an asynchronous operation that holds a value, but more importantly, supports the use of asynchronous design patterns, including the use of `async/await`.\n\nThe main purpose of this return type is to indicate that the method execution is asynchronous and will return a boolean value once it's completed. This allows the caller to use the `await` keyword when calling the method to write more synchronous-looking code, while still benefiting from asynchronous operation.\n\nIn other words, `Task<Boolean>` is a way to indicate that the method will execute in the background, performing some task, and when it's done, it will return `true` or `false` to indicate success or failure.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/unity#chunk-16", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nLogout\n\nLogs out the currently authenticated Magic user\n\n#", "explanation": "Based on the provided documentation, I can explain what the `#Logout` section is about and its main purpose.\n\n**Purpose:** \nThe `#Logout` method logs out the currently authenticated Magic user.\n\n**Main Action:** \nWhen the `#Logout` method is called, it effectively removes the user's authentication session, ending their Magic Link session.\n\n**Benefit:** \nCalling `#Logout` helps maintain user privacy, as it removes stored authentication data, ensuring users' sensitive information remains secure.\n\n**Use Case:**\nDevelopers can use this method to sign out authenticated users after they have completed their intended interactions or to clean up authentication sessions in accordance with their application's authentication workflow.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/unity#chunk-17", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 Task<Boolean>\n\nTask<Boolean>", "explanation": "Based on the provided documentation, the '#Returns' section is explaining the return type of a specific API function.\n\nThe return type is a Task<Boolean>, which is a C# async programming construct.\n\nHere's a brief explanation of what it means:\n\n- **Task**: In C#, a Task represents an asynchronous operation. It is used to run a method in a separate thread, allowing the program to continue executing without blocking.\n- **<Boolean>**: Boolean is a type that can hold true or false values. In this context, the Task returns a Boolean result, indicating whether the API request was successful or not.\n\nIn simpler terms, the '#Returns' section is saying that when this API function is called, it will return a result indicating whether the operation was successful (true) or not (false) as a Task. This allows the calling code to handle the result asynchronously.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/unity#chunk-18", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 GitHub\n\n\u2022 Goerli Testnet Faucet\n\nGitHub\n\nGoerli Testnet Faucet", "explanation": "This section titled '#Resources' appears to be a list of links to helpful resources related to the Magic Labs embedded wallet for Unity.\n\n**Purpose:** The main purpose of this section is to provide customers or developers with easy access to valuable resources that can aid in the development, testing, and troubleshooting of the Magic Labs embedded wallet for Unity.\n\n**Main Points:**\n\n1. **GitHub:** This is a platform where developers can find the official code repository for the Magic Labs embedded wallet for Unity. This resource allows developers to explore the codebase, report issues, and contribute to the project.\n2. **Goerli Testnet Faucet:** This is a resource that provides testnet Ethereum coins (GOERLI) for testing purposes. By using the Goerli Testnet Faucet, developers can test their applications on a real-world-like scenario without spending real Ethereum.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/unity#chunk-19", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nAstar zkEVM is an Ethereum layer-2 blockchain that leverages zero-knowledge proofs to increase scalability and lower transaction costs, powered by Polygon.\n\nAstar zkEVM\n\nAs Astar zkEVM is EVM compatible, you can follow the Ethereum documentation to send your first transaction and utilize all other wallet features.\n\nEthereum", "explanation": "Let me break it down for you:\n\n**What is Astar zkEVM?**\n\nAstar zkEVM is a second-layer blockchain solution built on top of the Ethereum network. It uses a technology called \"zero-knowledge proofs\" to enhance scalability and reduce transaction costs.\n\n**Main Characteristics:**\n\n1. **EVM compatibility**: It's compatible with the Ethereum Virtual Machine (EVM), which means you can easily transfer your existing Ethereum wallets and assets to Astar zkEVM.\n2. **Scalability**: Zero-knowledge proofs enable faster and more efficient transactions, making Astar zkEVM a more scalable solution.\n3. **Powered by Polygon**: Astar zkEVM is built on top of Polygon's network, which adds to its scalability and security.\n\n**Purpose:**\n\nThe main purpose of Astar zkEVM is to provide a more efficient and cost-effective way to perform transactions on the Ethereum network, while maintaining EVM compatibility for easy wallet and asset transfers.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/evm/astar-zkevm#chunk-1", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nEnsure you have installed the Magic SDK and have access to your API key, follow the quickstart to get started.\n\nquickstart\n\nCopy\n\n01\n\n// Setting network to point to Astar zKyoto testnet\n\n01\n\n// Setting network to point to Astar zKyoto testnet\n\n02\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_PUBLISHABLE_API_KEY'\n\n,\n\n{\n\n02\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_PUBLISHABLE_API_KEY'\n\n,\n\n{\n\n03\n\nnetwork\n\n:\n\n{\n\n03\n\nnetwork\n\n:\n\n{\n\n04\n\nrpcUrl\n\n:\n\n'https://rpc.startale.com/zkyoto'\n\n,\n\n04\n\nrpcUrl\n\n:\n\n'https://rpc.startale.com/zkyoto'\n\n,\n\n05\n\nchainId\n\n:\n\n6038361\n\n,\n\n05\n\nchainId\n\n:\n\n6038361\n\n,\n\n06\n\n}\n\n,\n\n06\n\n}\n\n,\n\n07\n\n}\n\n)\n\n;\n\n07\n\n}\n\n)\n\n;", "explanation": "**Configure Astar Section Overview**\n\nThis documentation section is titled '#Configure Astar' and it outlines the steps required to set up the Magic SDK to interact with the Astar zKyoto testnet. \n\n**Main Purpose**\n\nThe primary purpose of this section is to provide a quick start guide for integrating the Astar blockchain with the Magic Labs embedded wallet. It enables developers to connect their application to the Astar network, allowing users to interact with the blockchain and perform various operations such as transactions and contract calls.\n\n**Key Steps**\n\n1. Ensure that the Magic SDK is installed and the API key is accessible.\n2. Set the network to point to the Astar zKyoto testnet.\n3. Specify the RPC URL for the testnet.\n4. Configure the chain ID for the Astar blockchain.\n\n**Example Code**\n\nThe provided code snippet demonstrates how to create a Magic instance with the Astar zKyoto testnet configuration:\n\n```\nconst magic = new Magic('YOUR_PUBLISHABLE_API_KEY', {\n  network: {\n    rpcUrl: 'https://rpc.startale.com/zkyoto',\n    chainId: 6038361\n  }\n})\n```\n\nBy following these steps and configuring the Magic SDK correctly, developers can utilize the Astar blockchain within their applications and provide a seamless user experience for their users.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/evm/astar-zkevm#chunk-2", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 All Auth, User and Wallet module methods for Dedicated Wallets\n\n\u2022 All EVM Provider functionality to respond to supported RPC methods\n\nAuth\n\nUser\n\nWallet\n\nDedicated Wallets\n\nRPC methods\n\nNeed a feature or see a problem? File an issue on our github repo.\n\ngithub repo", "explanation": "The '#Compatibility' section from the Magic Labs embedded wallet documentation is about the compatibility features and modules that enable seamless interactions between the Magic wallet and various blockchain environments, specifically EVM (Ethereum Virtual Machine) chains. \n\nIts main purpose is to provide a clear list of compatible modules and functionality that support Key Ring Management, authentication, and interaction with decentralized applications (dApps) across different blockchain networks, in this case, specifically Astar-ZkEVM. \n\nIn simpler terms, this section provides a comprehensive outline of the supported features and modules that ensure a smooth experience when using the Magic wallet with Astar-ZkEVM and other EVM-based blockchain networks, ensuring compatibility across various functionalities and applications.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/evm/astar-zkevm#chunk-3", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 Documentation: https://docs.astar.network/docs/build/zkEVM/quickstart\n\n\u2022 Block Explorer: https://zkyoto.explorer.startale.com/ (Testnet)https://astar-zkevm.explorer.startale.com/ (Mainnet)\n\nhttps://docs.astar.network/docs/build/zkEVM/quickstart\n\n\u2022 https://zkyoto.explorer.startale.com/ (Testnet)\n\n\u2022 https://astar-zkevm.explorer.startale.com/ (Mainnet)\n\nhttps://zkyoto.explorer.startale.com/\n\nhttps://astar-zkevm.explorer.startale.com/\n\n\u2022 Bridge: https://docs.astar.network/docs/build/zkEVM/bridge-to-zkevm\n\n\u2022 Faucet: https://docs.astar.network/docs/build/zkEVM/zkevm-faucet\n\nhttps://docs.astar.network/docs/build/zkEVM/bridge-to-zkevm\n\nhttps://docs.astar.network/docs/build/zkEVM/zkevm-faucet", "explanation": "**Resource & Tools Overview**\n\nThe '#Resources & Tools' section of the documentation provides a list of essential resources for users and developers working with the Magic Labs embedded wallet on Astar/ZkEVM.\n\n**Main Purpose:**\n\nThe primary purpose of this section is to:\n\n1. **Provide access** to essential documentation, tutorials, and guides on the Astar/ZkEVM, helping users to understand the underlying technology.\n2. **Facilitate exploration** of EVM (Ethereum Virtual Machine) applications on Astar/ZkEVM using the provided block explorers.\n3. **Offer convenient bridging** solutions between Astar and EVM, as well as access to testnets.\n\n**Key Resources:**\n\n- **Documentation:** Official Astar/ZkEVM developer documentation and quickstart guides.\n- **Block Explorers:** Web interfaces to explore and analyze transactions on the Astar (testnet and mainnet) and EVM (Astar/ZkEVM testnet and mainnet networks).\n- **Bridge:** A service to help transfer or interact with assets between these two different blockchains.\n- **Faucet:** Tools to quickly obtain test tokens on the Astar (testnet) network.\n\nThese resources and tools aim to simplify the process of working with the Magic Labs embedded wallet on the Astar/ZkEVM by making it easier to get familiar with the network, test and develop on it, and ultimately bridge assets or DApps between this network and other blockchain ecosystems like Ethereum Virtual Machine.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/evm/astar-zkevm#chunk-4", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n#\n\nTransport Layer Security (TLS) is the standard protocol for encrypting data on the internet. At Magic, all service communication is forced to be on TLS. Regardless of whether the data transported between Magic servers and the user\u2019s browser is sensitive or not, it is encrypted end-to-end. This also applies to the 3rd-party services that we make available to end-users. In the event that Magic servers are infiltrated, none of the sensitive data transported on the internal network is visible in plaintext.\n\nBy implementing end-to-end TLS encryption, Magic and its users are protected from man-in-the-middle attacks.", "explanation": "**End-to-End (E2E) TLS Encryption Background and Purpose:**\n\nThe E2E TLS Encryption section from Magic Labs' embedded wallet documentation highlights the company's commitment to cloud security through encryption. Here's a concise explanation of its purpose and main components:\n\n**Main Purpose:**\nProtect sensitive data from unauthorized access, ensuring confidentiality and integrity of user data.\n\n**Key Components:**\n\n1. **Transport Layer Security (TLS)**: A standard protocol for encrypting internet data, forcing all service communication to be on TLS.\n2. **End-to-End (E2E) Encryption**: Encrypting data between Magic servers and user browsers, as well as between Magic servers and 3rd-party services.\n3. **Protection against Man-in-the-Middle (MitM) Attacks**: Encrypting data to prevent unauthorized parties from intercepting and reading sensitive information.\n\nEven if Magic servers are compromised, the encryption ensures that sensitive data on the internal network remains secure. This provides an additional layer of protection for users and helps maintain trust in the Magic Labs platform.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/home/security/cloud-security#chunk-1", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nMagic has deployed its services within virtual private clouds (VPCs). Each environment, whether that's production or non-production, resides in its own account. Each of these accounts contains a dedicated VPC that only allows traffic within that VPC. Magic maintains access to these VPCs by enforcing multiple layers of access control (RBAC, SSO and Zero-Trust solutions). In addition, each VPC is separated into public and private subnets. Public subnets contain servers that are publicly accessible, while private subnets only contain systems that aren't publicly accessible.\n\nBy setting up our network in this way, we can protect the systems running our core business logic while still providing public access to our service offerings.", "explanation": "**Network Setup Explanation:**\n\nThe \"#Network Setup\" documentation section explains how Magic has structured its network to ensure the security and isolation of its systems. The main purpose of this setup is to protect Magic's core business logic while still providing public access to its services.\n\n**Key Points:**\n\n1. **Virtual Private Clouds (VPCs):** Magic has deployed its services within isolated VPCs, each in its own account, to prevent unauthorized access.\n2. **Access Control:** Multiple layers of access control, including Role-Based Access Control (RBAC), Single Sign-On (SSO), and Zero-Trust solutions, ensure that only authorized personnel can access the VPCs.\n3. **Public and Private Subnets:** Each VPC is separated into public and private subnets, with public subnets accessible from the internet and private subnets accessible only from within the VPC.\n4. **Public Accessibility:** Public subnets contain servers that provide public access to Magic's services, while private subnets contain systems that are not publicly accessible.\n\n**Main Purpose:**\n\nBy setting up the network in this way, Magic can:\n\n* Protect its core business logic from unauthorized access\n* Provide public access to its services while maintaining security\n* Ensure compliance with security and regulatory requirements.\n\nThis setup allows Magic to balance the need for public accessibility with the need for security and isolation, ensuring the protection of its systems and data.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/home/security/cloud-security#chunk-2", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nMagic deploys intrusion detection systems in its cloud environment. We analyze all of our VPC logs, DNS logs and service logs to detect threats and any unauthorized access. We continuously monitor the traffic and take action when needed.", "explanation": "The '#Intrusion Detection Setup' documentation section from Magic Labs is about their cloud security measures that detect and prevent unauthorized access or malicious activities within their environment. The main purpose of this setup is to:\n\n1. **Analyze logs**: Collect and review logs from various sources, including Virtual Private Cloud (VPC), DNS, and service logs.\n2. **Detect threats**: Identify potential security threats, such as unauthorized access or malicious activities, by analyzing the collected logs.\n3. **Monitor traffic**: Continuously monitor network traffic to detect any suspicious activity.\n4. **Take action**: Respond immediately to detected threats by taking necessary measures to prevent or mitigate the risk.\n\nThe goal of Magic Labs' intrusion detection setup is to ensure the security and integrity of their cloud environment, protecting sensitive data and preventing potential security breaches.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/home/security/cloud-security#chunk-3", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nMagic encrypts all of its databases, volumes, snapshots, automated backups, and replicas with the industry-standard AES-256 encryption algorithm. Encryption and decryption are handled automatically at the hardware level, which prevents Magic and its users from experiencing performance impacts when encrypting or decrypting data.", "explanation": "**Data Encryption at Rest Explanation**\n\nMagic Labs' data encryption at rest refers to the method of securing data stored in databases, volumes, snapshots, backups, and replicas. This security measure is implemented using the AES-256 encryption algorithm, a widely accepted industry standard.\n\n**Main Purpose:**\n\nThe primary goal of data encryption at rest is to protect sensitive data from unauthorized access, even if the data is stored on unsecured servers or exposed due to a security breach. By encrypting data at the rest (i.e., when it's not being actively used or transmitted), Magic ensures that only authorized users can access and decrypt the data, maintaining the confidentiality, integrity, and availability of the data.\n\n**Key Benefits:**\n\n1. **Data Confidentiality**: Ensures that sensitive data remains confidential and cannot be accessed by unauthorized individuals.\n2. **Protection against Data Breaches**: Encrypting data at rest helps protect against data breaches, where data might be exposed even if the system is compromised.\n3. **Compliance**: Data encryption at rest may meet regulatory requirements for data protection in various industries.\n4. **Data Integrity**: Encryption helps maintain the integrity of data by preventing unauthorized modifications.\n\nIn summary, Magic Labs' data encryption at rest is a robust security measure that safeguards sensitive data stored in cloud services, protecting it from unauthorized access, data breaches, and maintaining compliance with industry regulations.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/home/security/cloud-security#chunk-4", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nThe Magic SDK for Javascript is your entry-point to secure, passwordless authentication for your application. This guide will cover all client-side methods, within each module. It will help you get familiarized with the JavaScript SDK.", "explanation": "This documentation section is called \"Web SDK Reference\" and serves as an overview of the Magic Labs Javascript SDK. \n\n**What it is about:**\nThis section provides a comprehensive guide to the Magic Labs Javascript SDK, specifically focusing on client-side methods.\n\n**Main purpose:**\nThe main purpose of this section is to help users become familiar with the Javascript SDK and use it to implement secure, passwordless authentication in their web applications. \n\nIn simpler terms, this documentation aims to serve as a starting point for developers who want to integrate Magic Labs' passwordless authentication feature into their web applications using the Magic Javascript SDK.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#chunk-1", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nThe Magic class is the entry-point to the Magic SDK. It must be instantiated with a Magic publishable key, which you can get by signing up for a developer account.\n\n#\n\nTo use Magic in your application, install the magic-sdk dependency.\n\nmagic-sdk\n\n\u2060If you're integrating with OAuth, OpenID or WebAuthn, additional dependencies are needed. You'll find the installation instructions in their dedicated sections within this documentation.\n\nOAuth\n\nOpenID\n\nWebAuthn\n\nCopy\n\n01\n\n\u2060npm\n\ninstall\n\nmagic-sdk\n\n01\n\n\u2060npm\n\ninstall\n\nmagic-sdk", "explanation": "**Getting Started - Installation**\n\nThis section of the Magic Labs embedded wallet documentation explains the initial setup and installation requirements for using the Magic SDK in your web application.\n\n**Main Purpose:**\n\nThe main purpose of this section is to guide developers through the process of installing the necessary dependencies to use the Magic SDK. This includes the primary `magic-sdk` dependency and any additional dependencies required for specific integrations, such as OAuth, OpenID, or WebAuthn.\n\n**Key Takeaways:**\n\n1. **Obtain a Magic Publishable Key**: Developers need to sign up for a developer account to obtain a publishable key.\n2. **Install the Magic SDK**: The `magic-sdk` dependency is installed using npm (Node Package Manager) with the command `npm install magic-sdk`.\n3. **Additional Dependencies**: Depending on the desired integration (OAuth, OpenID, or WebAuthn), additional dependencies must be installed according to the instructions in their dedicated sections.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#chunk-2", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n#\n\nMagic()\n\nConfigure and construct your Magic SDK instance.\n\nParameter\n\nType\n\nDefinition\n\napiKey\n\napiKey\n\nString\n\nYour publishable API key retrieved from the Magic Dashboard.\n\noptions.locale?\n\noptions.locale?\n\nString\n\nCustomize the language of Magic's modal, email and confirmation screen. See Localization for more.\n\nLocalization\n\noptions.testMode?\n\noptions.testMode?\n\nBoolean\n\nEnable testMode to assert the desired behavior through the email address you provide to loginWithMagicLink without having to go through the auth flow.\n\ntestMode\n\ntestMode\n\nloginWithMagicLink\n\noptions.network?\n\noptions.network?\n\nString | Object\n\n(String): A representation of the connected Ethereum network (mainnet or goerli).\n\n\u2060(Object): A custom Ethereum Node configuration with the following shape:\n\n\u2060rpcUrl (String): A URL pointing to your custom Ethereum Node.\u2060\u2060\n\nrpcUrl\n\n\u2060chainId? (Number): Some Node infrastructures require you to pass an explicit chain ID. If you are aware that your Node requires this configuration, pass it here as an integer.\n\nchainId?\n\noptions.endpoint?\n\noptions.endpoint?\n\nString\n\nA URL pointing to the Magic <iframe> application.\n\n<iframe>\n\noptions.deferPreload?\n\noptions.deferPreload?\n\nBoolean\n\nAn optional flag to delay the loading of the Magic Iframe's static assets until an SDK function is explicitly invoked. \u2060\u2060\u2060Set this to true if latency bottlenecks are a concern.\n\noptions.useStorageCache?\n\noptions.useStorageCache?\n\nBoolean\n\nAn optional flag to allow the usage of the local storage as cache. Currently it is only used for faster calls to isLoggedIn. When set to true, the magic.user.onUserLoggedOut event listener needs to be used.\n\nisLoggedIn\n\ntrue\n\nmagic.user.onUserLoggedOut", "explanation": "Here's a clear and concise explanation of the Magic() constructor in the Magic Labs embedded wallet documentation:\n\n**Main Purpose:**\n\nThe Magic() constructor is used to configure and construct a Magic SDK instance. It allows you to pass various options and parameters to customize the behavior of the Magic SDK.\n\n**Parameters:**\n\nThe constructor takes several parameters, including:\n\n* `apiKey`: A publishable API key retrieved from the Magic Dashboard.\n* `options`: An object that holds various options to customize the behavior of the SDK.\n\t+ `locale`: Customize the language of Magic's modal, email, and confirmation screen.\n\t+ `testMode`: Enable test mode to simulate the auth flow without sending actual emails.\n\t+ `network`: Specify the Ethereum network to connect to (mainnet or goerli) or pass a custom Ethereum Node configuration.\n\t+ `endpoint`: A URL pointing to the Magic iframe application.\n\t+ `deferPreload`: An optional flag to delay the loading of Magic Iframe's static assets until an SDK function is invoked.\n\t+ `useStorageCache`: An optional flag to use local storage as cache for faster calls to `isLoggedIn`.\n\n**Usage:**\n\nTo use the Magic() constructor, you need to pass the required `apiKey` and `options` object, if any, when calling the constructor. For example:\n```javascript\nconst magic = new Magic('YOUR_API_KEY', {\n  locale: 'en',\n  testMode: true,\n  network: 'mainnet',\n  // ... other options ...\n});\n```\nBy customizing the options and parameters, you can tailor the behavior of the Magic SDK to fit your specific use case.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#chunk-3", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\n02\n\n03\n\nlet\n\nmagic\n\n;\n\n03\n\nlet\n\nmagic\n\n;\n\n04\n\n04\n\n05\n\n// Construct with an API key:\n\n05\n\n// Construct with an API key:\n\n06\n\n// network configuration defaults to 'mainnet' (Magic's RPC)\n\n06\n\n// network configuration defaults to 'mainnet' (Magic's RPC)\n\n07\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n07\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n08\n\n08\n\n09\n\n// Construct with an API key and use Magic's RPC:\n\n09\n\n// Construct with an API key and use Magic's RPC:\n\n10\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n,\n\n{\n\n10\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n,\n\n{\n\n11\n\nnetwork\n\n:\n\n'sepolia'\n\n// or 'mainnet'\n\n11\n\nnetwork\n\n:\n\n'sepolia'\n\n// or 'mainnet'\n\n12\n\n}\n\n)\n\n;\n\n12\n\n}\n\n)\n\n;\n\n13\n\n13\n\n14\n\n// Construct with an API key and set custom network:\n\n14\n\n// Construct with an API key and set custom network:\n\n15\n\nconst\n\ncustomNodeOptions\n\n=\n\n{\n\n15\n\nconst\n\ncustomNodeOptions\n\n=\n\n{\n\n16\n\nrpcUrl\n\n:\n\n'https://polygon-rpc.com'\n\n,\n\n// your rpc URL\n\n16\n\nrpcUrl\n\n:\n\n'https://polygon-rpc.com'\n\n,\n\n// your rpc URL\n\n17\n\nchainId\n\n:\n\n137\n\n// corresponding chainId for your rpc url\n\n17\n\nchainId\n\n:\n\n137\n\n// corresponding chainId for your rpc url\n\n18\n\n}\n\n;\n\n18\n\n}\n\n;\n\n19\n\n\u2060magic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n,\n\n{\n\n19\n\n\u2060magic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n,\n\n{\n\n20\n\nnetwork\n\n:\n\ncustomNodeOptions\n\n// connected to Polygon Mainnet\n\n20\n\nnetwork\n\n:\n\ncustomNodeOptions\n\n// connected to Polygon Mainnet\n\n21\n\n}\n\n)\n\n;\n\n21\n\n}\n\n)\n\n;\n\n22\n\n22\n\n23\n\n// Construct with an API key and optional params\n\n23\n\n// Construct with an API key and optional params\n\n24\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n,\n\n{\n\n24\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n,\n\n{\n\n25\n\n\u2060  locale\n\n:\n\n'es'\n\n,\n\n25\n\n\u2060 locale\n\n:\n\n'es'\n\n,\n\n26\n\ntestMode\n\n:\n\ntrue\n\n,\n\n26\n\ntestMode\n\n:\n\ntrue\n\n,\n\n27\n\n\u2060  deferPreload\n\n:\n\ntrue\n\n,\n\n27\n\n\u2060 deferPreload\n\n:\n\ntrue\n\n,\n\n28\n\nendpoint\n\n:\n\n'...'\n\n,\n\n28\n\nendpoint\n\n:\n\n'...'\n\n,\n\n29\n\n}\n\n)\n\n;\n\n29\n\n}\n\n)\n\n;", "explanation": "# Initialization\n\n### Overview\n\nThe Initialization section of the Magic Labs embedded wallet documentation explains how to create an instance of the `Magic` class, which is the core component of the Magic SDK. This step is essential for using the Magic wallet in your application.\n\n### Purpose\n\nThe main purpose of the Initialization section is to provide the developer with various ways to create an instance of the `Magic` class, depending on their specific needs. This includes:\n\n* Creating an instance with an API key\n* Creating an instance with an API key and using Magic's RPC (default)\n* Creating an instance with an API key and setting a custom network (e.g., Polygon Mainnet)\n* Creating an instance with an API key and optional parameters (e.g., locale, test mode, deferred preload)\n\n### Key Takeaways\n\n* Import the Magic SDK using `import { Magic } from 'magic-sdk';`\n* Create an instance of the `Magic` class by passing in your PUBLISHABLE_API_KEY\n* Optional parameters can be passed to customize the initialization process\n* Defaults are provided for network configuration, locale, test mode, deferred preload, and endpoint\n\n### Code Snippets\n\nHere are some code snippets from the documentation:\n\n* Creating an instance with an API key: `magic = new Magic('PUBLISHABLE_API_KEY');`\n* Creating an instance with an API key and setting a custom network: `magic = new Magic('PUBLISHABLE_API_KEY', { network: 'sepolia', rpcUrl: 'https://polygon-rpc.com', chainId: 137 });`\n* Creating an instance with an API key and optional parameters: `magic = new Magic('PUBLISHABLE_API_KEY', { locale: 'es', testMode: true, deferPreload: true, endpoint: '...' });`\n\nBy following this section of the documentation, developers can successfully create an instance of the `Magic` class and begin using the Magic wallet in their application.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#chunk-4", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nGlobal methods and properties are accessible on the Magic SDK instance itself.\n\n#\n\npreload\n\nStarts downloading the static assets required to render the Magic iframe context.\n\nAs of magic-sdk version 21.0.0, the SDK constructor will preload the iframe's static assets by default, unless the deferPreload flag is passed into the constructor options. See Release Notes\n\n21.0.0\n\ndeferPreload\n\nRelease Notes\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\n02\n\n03\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n,\n\n{\n\ndeferPreload\n\n:\n\ntrue\n\n}\n\n)\n\n;\n\n03\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n,\n\n{\n\ndeferPreload\n\n:\n\ntrue\n\n}\n\n)\n\n;\n\n04\n\n04\n\n05\n\n// ...\n\n05\n\n// ...\n\n06\n\n06\n\n07\n\nmagic\n\n.\n\npreload\n\n;\n\n07\n\nmagic\n\n.\n\npreload\n\n;", "explanation": "**#preload Method Overview**\n\nThe `preload` method is a global method available on the Magic SDK instance. Its primary purpose is to start downloading the static assets required to render the Magic iframe context.\n\n**Main Purpose:**\n\nThe `preload` method fetches the necessary static assets for the Magic iframe, which enables the Magic SDK to render the interface correctly. This method is essential for initializing the Magic iframe context.\n\n**Note:**\n\nAs of magic-sdk version 21.0.0, the SDK constructor will preload the iframe's static assets by default. However, this behavior can be overridden by passing the `deferPreload` flag into the constructor options, as shown in the example code snippet.\n\n**Example Usage:**\n\nYou can call the `preload` method on the Magic SDK instance like this:\n\n```javascript\nconst magic = new Magic('PUBLISHABLE_API_KEY');\nmagic.preload();\n```\n\nBy calling `preload`, you ensure that the necessary static assets are downloaded and the Magic iframe context is initialized properly.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#chunk-5", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 None", "explanation": "In the documentation, the '#Arguments' section is empty, indicated by the 'None' label.\n\nThe main purpose of an '#Arguments' section in software documentation, in general, is to provide information about the input parameters required to successfully execute a function or method. These parameters might include variables, values, or other input information that need to be passed to the function.\n\nSince the '#Arguments' section in this documentation is empty, it implies that the function or method mentioned in the documentation has no input parameters or arguments required to execute it. This allows developers to easily understand the requirements and use the function without worrying about passing any additional information.\n\nHowever, without further context or information about the function or method being documented, the exact purpose of this empty '#Arguments' section may be unclear. For more specific information, it's best to refer to the broader documentation context or consult the developer team for clarification.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#chunk-6", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 Promise<void>: A Promise that resolves to indicate the <iframe> is ready for requests\n\nPromise<void>\n\n<iframe>", "explanation": "In the Magic Labs embedded wallet documentation, the '#Returns' section is about describing the outcome or result of an operation. \n\nIn this case, when the function is called, it returns a 'Promise' which is an object that represents a value that may not be available yet - but will be resolved at some point in the future.\n\nThe main purpose of '#Returns' in this context is to communicate to developers what is returned from the function when they call it. In this specific case, the returned value is a 'Promise<void>' which will cause the <iframe> to be ready for requests. \n\nThink of a 'Promise' like a package that's sent in the mail: you can't open the package until it arrives, but you know what's inside. When the 'Promise' resolves, it's like opening the package and getting the value inside.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#chunk-7", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\n02\n\n03\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n03\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n04\n\n04\n\n05\n\nmagic\n\n.\n\npreload\n\n(\n\n)\n\n.\n\nthen\n\n(\n\n(\n\n)\n\n=>\n\nconsole\n\n.\n\nlog\n\n(\n\n'Magic <iframe> loaded.'\n\n)\n\n)\n\n;\n\n05\n\nmagic\n\n.\n\npreload\n\n(\n\n)\n\n.\n\nthen\n\n(\n\n(\n\n)\n\n=>\n\nconsole\n\n.\n\nlog\n\n(\n\n'Magic <iframe> loaded.'\n\n)\n\n)\n\n;", "explanation": "The provided documentation section titled '#Example' is a code snippet demonstrating how to initialize and use the Magic Labs embedded wallet in a web application. \n\nIts main purpose is to showcase a basic example of how to integrate the Magic SDK into a web project, specifically the client-side SDK for the Magic Labs embedded wallet. \n\nHere's a step-by-step breakdown:\n\n1. Import the Magic library from the 'magic-sdk' module.\n2. Create an instance of the Magic class, passing in a publishable API key as a parameter.\n3. Use the preload method to load the Magic Labs embedded wallet in an iframe. This method returns a promise that resolves when the iframe is loaded.\n4. Log a message to the console once the iframe is loaded, confirming successful initialization.\n\nThis code snippet provides a foundation for integrating the Magic Labs embedded wallet into a web application, allowing developers to easily add wallet capabilities to their projects.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#chunk-8", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nThe Auth Module and it's members are accessible on the Magic SDK instance by the auth property.\n\nauth\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\n02\n\n03\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n03\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n04\n\n04\n\n05\n\nmagic\n\n.\n\nauth\n\n;\n\n05\n\nmagic\n\n.\n\nauth\n\n;\n\n06\n\nmagic\n\n.\n\nauth\n\n.\n\nloginWithMagicLink\n\n;\n\n06\n\nmagic\n\n.\n\nauth\n\n.\n\nloginWithMagicLink\n\n;\n\n07\n\nmagic\n\n.\n\nauth\n\n.\n\nloginWithEmailOTP\n\n;\n\n07\n\nmagic\n\n.\n\nauth\n\n.\n\nloginWithEmailOTP\n\n;\n\n08\n\nmagic\n\n.\n\nauth\n\n.\n\nloginWithSMS\n\n;\n\n08\n\nmagic\n\n.\n\nauth\n\n.\n\nloginWithSMS\n\n;\n\n09\n\nmagic\n\n.\n\nauth\n\n.\n\nloginWithCredential\n\n;\n\n09\n\nmagic\n\n.\n\nauth\n\n.\n\nloginWithCredential\n\n;\n\n10\n\n\u2060magic\n\n.\n\nauth\n\n.\n\nupdateEmailWithUI\n\n;\n\n10\n\n\u2060magic\n\n.\n\nauth\n\n.\n\nupdateEmailWithUI\n\n;\n\n#\n\nloginWithMagicLink\n\nAuthenticate a user passwordlessly using a \"magic link\" sent to the specified user's email address.\n\nOnly available with Dedicated Wallet.\n\n#\n\n\u2022 email (String): The user email to log in with\n\n\u2022 lifespan? (Number): Set the lifespan of the resolved Decentralize ID token. Defaults to 900s (15 mins)\n\n\u2022 showUI? (Boolean): If true, show an out-of-the-box UI to accept the OTP from user. Defaults to true\n\n\u2022 redirectURI? (String): You can provide a redirect URI that Magic will point to after the user clicks their email link. If included, don't forget to call loginWithCredential at the specified redirect location\n\nemail\n\nlifespan?\n\nshowUI?\n\ntrue\n\ntrue\n\nredirectURI?\n\nloginWithCredential\n\nloginWithCredential\n\n\u2060Note: If you are securing a resource server and have your own signup flow after this call resolves, be mindful of where you're calling signup in your implementation to avoid potential concurrency issues!", "explanation": "**#Auth Module - #loginWithMagicLink - #Arguments: A Secure Passwordless Login Feature**\n\nThe `loginWithMagicLink` method is part of the Auth Module in the Magic Labs embedded wallet documentation. Its primary purpose is to enable secure, passwordless user authentication using a clickable \"magic link\" sent to the user's email address.\n\n**Main Purpose:**\n\n* Send a secure, time-limited magic link to a user's email address.\n* User clicks the link, and Magic authenticates the user without requiring a password.\n* Optionally, shows an out-of-the-box UI to accept the one-time password (OTP) from the user.\n\n**Key Arguments:**\n\n* `email` (String): The user's email address to log in with.\n* `lifespan?` (Number): Sets the duration of the resolved Decentralized ID (DID) token (default: 15 minutes, or 900 seconds).\n* `showUI?` (Boolean): Displays an out-of-the-box UI to accept the OTP from the user (default: true).\n* `redirectURI?` (String): Provides a redirect URL for the user to click after the magic link; use `loginWithCredential` at that location.\n\n**Example Use Case:**\n\nThis feature is ideal for secure passwordless login, especially when implemented within a dedicated wallet system, allowing for:\n\n* Convenient and secure user authentication.\n* Optional UI display for OTP acceptance.\n* Redirecting the user to a secure location after authentication (e.g., the next step in the signup flow).\n\nBy utilizing `loginWithMagicLink`, applications can improve user experience while maintaining robust security features, like authentication with temporary DID tokens.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#chunk-9", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 PromiEvent<string | null>: The promise resolves upon authentication request success and rejects with a specific error code if the request fails. The resolved value is a Decentralized ID token with a default 15-minute lifespan.\n\nPromiEvent<string | null>", "explanation": "Let's break down the '#Returns' section from the Magic Labs embedded wallet documentation.\n\n**What is it about?**\n\nThe '#Returns' section describes the outcome or response of a specific operation called authentication request, which is likely related to logging in or authenticating with a user.\n\n**Main purpose**\n\nThe main purpose of the '#Returns' section is to inform developers about the expected response or return value of the authentication request.\n\nIn this case, the authentication request returns a promise (`PromiEvent`) that resolves to a Decentralized ID (DID) token, which is a string value that represents the authenticated user's identity. The DID token has a default lifespan of 15 minutes.\n\nIn summary, the '#Returns' section provides critical information about the expected response of the authentication request, helping developers writerobust and reliable code to handle the outcome of the request.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#chunk-10", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\n02\n\n03\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n03\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n04\n\n04\n\n05\n\n// log in a user by their email\n\n05\n\n// log in a user by their email\n\n06\n\ntry\n\n{\n\n06\n\ntry\n\n{\n\n07\n\nawait\n\nmagic\n\n.\n\nauth\n\n.\n\nloginWithMagicLink\n\n(\n\n{\n\nemail\n\n:\n\n'hello@example.com'\n\n}\n\n)\n\n;\n\n07\n\nawait\n\nmagic\n\n.\n\nauth\n\n.\n\nloginWithMagicLink\n\n(\n\n{\n\nemail\n\n:\n\n'hello@example.com'\n\n}\n\n)\n\n;\n\n08\n\n}\n\ncatch\n\n{\n\n08\n\n}\n\ncatch\n\n{\n\n09\n\n// Handle errors if required!\n\n09\n\n// Handle errors if required!\n\n10\n\n}\n\n10\n\n}\n\n11\n\n11\n\n12\n\n// log in a user by their email, without showing an out-of-the box UI.\n\n12\n\n// log in a user by their email, without showing an out-of-the box UI.\n\n13\n\ntry\n\n{\n\n13\n\ntry\n\n{\n\n14\n\nawait\n\nmagic\n\n.\n\nauth\n\n.\n\nloginWithMagicLink\n\n(\n\n{\n\nemail\n\n:\n\n'hello@example.com'\n\n,\n\nshowUI\n\n:\n\nfalse\n\n}\n\n)\n\n;\n\n14\n\nawait\n\nmagic\n\n.\n\nauth\n\n.\n\nloginWithMagicLink\n\n(\n\n{\n\nemail\n\n:\n\n'hello@example.com'\n\n,\n\nshowUI\n\n:\n\nfalse\n\n}\n\n)\n\n;\n\n15\n\n}\n\ncatch\n\n{\n\n15\n\n}\n\ncatch\n\n{\n\n16\n\n// Handle errors if required!\n\n16\n\n// Handle errors if required!\n\n17\n\n}\n\n17\n\n}", "explanation": "**Section Title:** #Example\n\n**Summary:** This section provides a code example for implementing the Magic Labs embedded wallet's login functionality using the Magic SDK for web.\n\n**Main Purpose:** The main purpose of this example is to demonstrate how to use the Magic SDK to log in a user using their email address and the loginWithMagicLink method.\n\n**Key Features:**\n\n1. **Importing the Magic SDK:** The code imports the Magic SDK from the 'magic-sdk' library.\n2. **Initializing the Magic instance:** A new instance of the Magic class is created using a publishable API key.\n3. **Logging in a user:** The code attempts to log in a user with the email address 'hello@example.com' using the loginWithMagicLink method.\n4. **Handling errors:** The code includes try-catch blocks to handle any errors that may occur during the login process.\n\n**Options Demonstrated:**\n\n1. **Logging in with out-of-the-box UI:** The first example logs in a user with the default Magic UI.\n2. **Logging in without UI:** The second example logs a user in using the same email address, but without showing the out-of-the-box UI, by setting the showUI parameter to false.\n\n**Overall:** This example provides a basic example of how to use the Magic Labs embedded wallet to log in users using their email addresses and the Magic SDK. It can serve as a starting point for developers to integrate Magic Labs into their web applications.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#chunk-11", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nRelevant Error Codes\n\nRelevant Error Codes\n\nTo achieve a fully white-labeled experience, you will need to implement some custom error handling according to your UI needs. Here's a short example to illustrate how errors can be caught and identified by their code:\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n,\n\nRPCError\n\n,\n\nRPCErrorCode\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n,\n\nRPCError\n\n,\n\nRPCErrorCode\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\n02\n\n03\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n03\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n04\n\n04\n\n05\n\ntry\n\n{\n\n05\n\ntry\n\n{\n\n06\n\nawait\n\nmagic\n\n.\n\nauth\n\n.\n\nloginWithMagicLink\n\n(\n\n{\n\nemail\n\n:\n\n'hello@example.com'\n\n,\n\nshowUI\n\n:\n\nfalse\n\n}\n\n)\n\n;\n\n06\n\nawait\n\nmagic\n\n.\n\nauth\n\n.\n\nloginWithMagicLink\n\n(\n\n{\n\nemail\n\n:\n\n'hello@example.com'\n\n,\n\nshowUI\n\n:\n\nfalse\n\n}\n\n)\n\n;\n\n07\n\n}\n\ncatch\n\n(\n\nerr\n\n)\n\n{\n\n07\n\n}\n\ncatch\n\n(\n\nerr\n\n)\n\n{\n\n08\n\nif\n\n(\n\nerr\n\ninstanceof\n\nRPCError\n\n)\n\n{\n\n08\n\nif\n\n(\n\nerr\n\ninstanceof\n\nRPCError\n\n)\n\n{\n\n09\n\nswitch\n\n(\n\nerr\n\n.\n\ncode\n\n)\n\n{\n\n09\n\nswitch\n\n(\n\nerr\n\n.\n\ncode\n\n)\n\n{\n\n10\n\ncase\n\nRPCErrorCode\n\n.\n\nMagicLinkFailedVerification\n\n:\n\n10\n\ncase\n\nRPCErrorCode\n\n.\n\nMagicLinkFailedVerification\n\n:\n\n11\n\ncase\n\nRPCErrorCode\n\n.\n\nMagicLinkExpired\n\n:\n\n11\n\ncase\n\nRPCErrorCode\n\n.\n\nMagicLinkExpired\n\n:\n\n12\n\ncase\n\nRPCErrorCode\n\n.\n\nMagicLinkRateLimited\n\n:\n\n12\n\ncase\n\nRPCErrorCode\n\n.\n\nMagicLinkRateLimited\n\n:\n\n13\n\ncase\n\nRPCErrorCode\n\n.\n\nUserAlreadyLoggedIn\n\n:\n\n13\n\ncase\n\nRPCErrorCode\n\n.\n\nUserAlreadyLoggedIn\n\n:\n\n14\n\n// Handle errors accordingly :)\n\n14\n\n// Handle errors accordingly :)\n\n15\n\nbreak\n\n;\n\n15\n\nbreak\n\n;\n\n16\n\n}\n\n16\n\n}\n\n17\n\n}\n\n17\n\n}\n\n18\n\n}\n\n18\n\n}", "explanation": "**Error Handling in Magic Labs Embedded Wallet**\n\nThe '#Error Handling' section from the Magic Labs documentation is about catching and handling errors that occur during the authentication process with the Magic Labs embedded wallet.\n\n**Main Purpose**: To inform developers about the different error codes they might encounter while integrating the Magic Labs wallet and provide a basic example of how to catch and handle these errors in their own custom UI.\n\n**How it Works**:\n\n1. The Magic Labs SDK is imported, and an instance of the Magic class is created with a PUBLISHABLE_API_KEY.\n2. A try-catch block is used to catch any errors that occur during the authentication process with `loginWithMagicLink`.\n3. If an error is caught, it's checked to see if it's an instance of `RPCError`.\n4. If it is, the error code is analyzed using a switch statement to determine the type of error (e.g., MagicLinkFailedVerification, MagicLinkExpired, etc.).\n5. Based on the error code, the developer can handle the error accordingly.\n\n**Key Takeaways**:\n\n* Implement custom error handling to provide a seamless user experience.\n* Catch errors with a try-catch block.\n* Use the `instanceof` operator to check if the error is an instance of `RPCError`.\n* Analyze the error code using a switch statement to determine the type of error.\n* Handle errors accordingly based on the error code.\n\nBy following this guide, developers can create a fully white-labeled experience with the Magic Labs embedded wallet and provide a better user experience by handling errors effectively.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#chunk-12", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nemail-not-deliverable\n\nemail-sent\n\nretry\n\nshowUI: true", "explanation": "**Event Handling in Magic Labs Embedded Wallet Documentation**\n\nThe '#Events' section in the Magic Labs embedded wallet documentation is a key concept that enables developers to handle various events that occur during the wallet's interaction with the user. These events are crucial in managing the user's experience and facilitating a seamless integration with the wallet.\n\n**Main Purpose:**\n\nThe main purpose of events in the Magic Labs Embedded Wallet is to provide a callback mechanism for developers to respond to different wallet-related actions. This allows developers to:\n\n1. **Notify the user**: Inform the user about the status of their actions, such as email delivery confirmation or retry attempts.\n2. **Trigger specific actions**: Perform custom actions based on the event type, such as displaying a UI element or initiating a retry mechanism.\n3. **Improve user experience**: Enhance the overall user experience by reacting to events in a timely and meaningful manner.\n\n**Event Types:**\n\nHere are the event types mentioned in the provided documentation snippet:\n\n1. **`email-not-deliverable`**: Triggered when an email delivery fails.\n2. **`email-sent`**: Triggered when an email is successfully sent.\n3. **`retry`**: Triggered when a retry attempt is made.\n4. **`showUI: true`**: Triggered when the UI should be displayed (optional parameter, with a boolean value indicating whether the UI should be shown).\n\nBy registering callback functions for these events, developers can create a more dynamic and engaging user interface that reacts to the wallet's state and actions.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#chunk-13", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nloginWithEmailOTP\n\nAuthenticate a user passwordlessly using an email one-time code sent to the specified user's email address.\n\nOnly available with Dedicated Wallet.\n\n#\n\n\u2022 email (String): The user email to log in with\n\n\u2022 lifespan? (Number): Set the lifespan of the resolved Decentralize ID token. Defaults to 900s (15 mins)\n\n\u2022 showUI? (Boolean): If true, show an out-of-the-box UI to accept the OTP from user. Defaults to true\n\n\u2022 deviceCheckUI? (Boolean): The default value is true. It shows Magic branded UI securing sign-ins from new devices. If set to false, the UI will remain hidden. However, this the false value only takes effect when you have also set the showUI: false. If you enable Device Verification in the Magic dashboard and are passing showUI: false you must also explicitly pass deviceCheckUI: false\n\nemail\n\nlifespan?\n\nshowUI?\n\ntrue\n\ntrue\n\ndeviceCheckUI?\n\ntrue\n\nfalse\n\nshowUI: false\n\nshowUI: false\n\ndeviceCheckUI: false\n\n\u2060\n\nAvailable from magic-sdk@19.1.0\n\nmagic-sdk@19.1.0", "explanation": "**loginWithEmailOTP Functionality**\n\nThe `#loginWithEmailOTP` function is a feature in Magic Labs' embedded wallet documentation that allows users to authenticate without entering a password using an email one-time code (OTP) sent to their email address. This feature is only available with Dedicated Wallet.\n\n**Main Purpose**\n\nThe main purpose of this function is to provide a secure and passwordless login experience for users, streamlining the authentication process and improving the overall user experience.\n\n**Key Parameters**\n\nThe function takes the following key parameters:\n\n* `email`: The user's email address to log in with.\n* `lifespan?` (optional): The lifespan of the resolved Decentralized ID (Did) token in seconds. Defaults to 900s (15 minutes) if not provided.\n* `showUI?` (optional): A boolean that determines whether to display an out-of-the-box UI to accept the OTP from the user. Defaults to `true` if not provided.\n* `deviceCheckUI?` (optional): A boolean that determines whether to show Magic-branded UI to secure sign-ins from new devices. Defaults to `true` if not provided.\n\n**Availability**\n\nThe `#loginWithEmailOTP` function is available from `magic-sdk@19.1.0` and higher versions.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#chunk-14", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 PromiEvent<string | null>: The promise resolves upon authentication request success and rejects with a specific error code if the request fails. The resolved value is a Decentralized ID token with a default 15-minute lifespan.\n\nPromiEvent<string | null>", "explanation": "In the Magic Labs embedded wallet documentation, the '#Returns' section is related to the result of the authentication process.\n\n**Authentication Result:**\nWhen a user successfully authenticates using the Magic Labs embedded wallet, the promise resolves with a value. This value is a Decentralized ID (DID) token, which is a digital identity token used for authentication and authorization.\n\n**Key Points:**\n\n- The resolved value is a Decentralized ID token with a 15-minute lifespan by default.\n- If the authentication request fails, the promise rejects with a specific error code.\n\n**Main Purpose:**\n\nThe '#Returns' section is crucial in understanding how to handle the outcome of the authentication process in your application. It provides insight into what to expect when the authentication is successful or fails, allowing you to implement corresponding logic in your code to proceed accordingly.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#chunk-15", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\n02\n\n03\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n03\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n04\n\n04\n\n05\n\n// log in a user by their email\n\n05\n\n// log in a user by their email\n\n06\n\ntry\n\n{\n\n06\n\ntry\n\n{\n\n07\n\nawait\n\nmagic\n\n.\n\nauth\n\n.\n\nloginWithEmailOTP\n\n(\n\n{\n\nemail\n\n:\n\n'hello@example.com'\n\n}\n\n)\n\n;\n\n07\n\nawait\n\nmagic\n\n.\n\nauth\n\n.\n\nloginWithEmailOTP\n\n(\n\n{\n\nemail\n\n:\n\n'hello@example.com'\n\n}\n\n)\n\n;\n\n08\n\n}\n\ncatch\n\n{\n\n08\n\n}\n\ncatch\n\n{\n\n09\n\n// Handle errors if required!\n\n09\n\n// Handle errors if required!\n\n10\n\n}\n\n10\n\n}\n\n11\n\n11\n\n12\n\n// log in a user by their email, without showing an out-of-the box UI.\n\n12\n\n// log in a user by their email, without showing an out-of-the box UI.\n\n13\n\ntry\n\n{\n\n13\n\ntry\n\n{\n\n14\n\nawait\n\nmagic\n\n.\n\nauth\n\n.\n\nloginWithEmailOTP\n\n(\n\n{\n\nemail\n\n:\n\n'hello@example.com'\n\n,\n\nshowUI\n\n:\n\nfalse\n\n}\n\n)\n\n;\n\n14\n\nawait\n\nmagic\n\n.\n\nauth\n\n.\n\nloginWithEmailOTP\n\n(\n\n{\n\nemail\n\n:\n\n'hello@example.com'\n\n,\n\nshowUI\n\n:\n\nfalse\n\n}\n\n)\n\n;\n\n15\n\n}\n\ncatch\n\n{\n\n15\n\n}\n\ncatch\n\n{\n\n16\n\n// Handle errors if required!\n\n16\n\n// Handle errors if required!\n\n17\n\n}\n\n17\n\n}", "explanation": "**Example Code Section Explanation**\n\nThe provided documentation section is titled '#Example' and it showcases an example code in JavaScript that demonstrates how to log in a user using the Magic Labs embedded wallet.\n\n**Main Purpose:**\n\nThe main purpose of this example code is to illustrate the basic usage of the Magic Labs library for web applications. Specifically, it shows how to:\n\n1. Import the Magic SDK and create a new instance of the Magic class.\n2. Use the `loginWithEmailOTP` method to log in a user by their email address, with or without displaying the out-of-the-box UI.\n\n**Key Features:**\n\n* Importing the Magic SDK and creating a new instance of the Magic class.\n* Logging in a user by their email address using the `loginWithEmailOTP` method.\n* Demonstrating how to handle errors if they occur during the login process.\n* Showing how to log in a user without displaying the out-of-the-box UI by setting the `showUI` parameter to `false`.\n\n**Code Structure:**\n\nThe code is structured as follows:\n\n* The first sections import the Magic SDK and create a new instance of the Magic class.\n* The example code is divided into two parts:\n\t+ The first part logs in a user by their email address with the out-of-the-box UI displayed.\n\t+ The second part logs in a user by their email address without displaying the out-of-the-box UI.\n\n**Key Functions:**\n\n* `auth.loginWithEmailOTP`: Logs in a user by their email address using a one-time password (OTP).\n* `showUI`: A parameter that controls whether the out-of-the-box UI is displayed during the login process.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#chunk-16", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nRelevant Events\n\nRelevant Events\n\nA white-label OTP login flow is available when passing showUI: false to this login method. Here's a short example to illustrate listening for and emitting events during the login flow:\n\nshowUI: false\n\nCopy\n\n01\n\nimport\n\n{\n\n01\n\nimport\n\n{\n\n02\n\nMagic\n\n,\n\n02\n\nMagic\n\n,\n\n03\n\nLoginWithEmailOTPEventOnReceived\n\n,\n\n03\n\nLoginWithEmailOTPEventOnReceived\n\n,\n\n04\n\nLoginWithEmailOTPEventEmit\n\n,\n\n04\n\nLoginWithEmailOTPEventEmit\n\n,\n\n05\n\nRecencyCheckEventOnReceived\n\n,\n\n05\n\nRecencyCheckEventOnReceived\n\n,\n\n06\n\nRecencyCheckEventEmit\n\n,\n\n06\n\nRecencyCheckEventEmit\n\n,\n\n07\n\nDeviceVerificationEventEmit\n\n,\n\n07\n\nDeviceVerificationEventEmit\n\n,\n\n08\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n08\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n09\n\n09\n\n10\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n10\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n11\n\n11\n\n12\n\ntry\n\n{\n\n12\n\ntry\n\n{\n\n13\n\n// Initiate login flow\n\n13\n\n// Initiate login flow\n\n14\n\nconst\n\nhandle\n\n=\n\nmagic\n\n.\n\nauth\n\n.\n\nloginWithEmailOTP\n\n(\n\n{\n\nemail\n\n:\n\n\"hello@example.com\"\n\n,\n\nshowUI\n\n:\n\nfalse\n\n,\n\ndeviceCheckUI\n\n:\n\nfalse\n\n}\n\n)\n\n;\n\n14\n\nconst\n\nhandle\n\n=\n\nmagic\n\n.\n\nauth\n\n.\n\nloginWithEmailOTP\n\n(\n\n{\n\nemail\n\n:\n\n\"hello@example.com\"\n\n,\n\nshowUI\n\n:\n\nfalse\n\n,\n\ndeviceCheckUI\n\n:\n\nfalse\n\n}\n\n)\n\n;\n\n15\n\n15\n\n16\n\nhandle\n\n16\n\nhandle\n\n17\n\n.\n\non\n\n(\n\nLoginWithEmailOTPEventOnReceived\n\n.\n\nEmailOTPSent\n\n,\n\n(\n\n)\n\n=>\n\n{\n\n17\n\n.\n\non\n\n(\n\nLoginWithEmailOTPEventOnReceived\n\n.\n\nEmailOTPSent\n\n,\n\n(\n\n)\n\n=>\n\n{\n\n18\n\n// The email has been sent to the user\n\n18\n\n// The email has been sent to the user\n\n19\n\n19\n\n20\n\n// Prompt the user for the OTP\n\n20\n\n// Prompt the user for the OTP\n\n21\n\nconst\n\notp\n\n=\n\nwindow\n\n.\n\nprompt\n\n(\n\n'Enter Email OTP'\n\n)\n\n;\n\n21\n\nconst\n\notp\n\n=\n\nwindow\n\n.\n\nprompt\n\n(\n\n'Enter Email OTP'\n\n)\n\n;\n\n22\n\n22\n\n23\n\n// Send the OTP for verification\n\n23\n\n// Send the OTP for verification\n\n24\n\nhandle\n\n.\n\nemit\n\n(\n\nLoginWithEmailOTPEventEmit\n\n.\n\nVerifyEmailOtp\n\n,\n\notp\n\n)\n\n;\n\n24\n\nhandle\n\n.\n\nemit\n\n(\n\nLoginWithEmailOTPEventEmit\n\n.\n\nVerifyEmailOtp\n\n,\n\notp\n\n)\n\n;\n\n25\n\n}\n\n)\n\n25\n\n}\n\n)\n\n26\n\n.\n\non\n\n(\n\nLoginWithEmailOTPEventOnReceived\n\n.\n\nInvalidEmailOtp\n\n,\n\n(\n\n)\n\n=>\n\n{\n\n26\n\n.\n\non\n\n(\n\nLoginWithEmailOTPEventOnReceived\n\n.\n\nInvalidEmailOtp\n\n,\n\n(\n\n)\n\n=>\n\n{\n\n27\n\n// User entered invalid OTP\n\n27\n\n// User entered invalid OTP\n\n28\n\n28\n\n29\n\n// Have the user retry entering the OTP and emit via VerifyEmailOtp.\n\n29\n\n// Have the user retry entering the OTP and emit via VerifyEmailOtp.\n\n30\n\n// You can limit retries and emit Cancel to cancel login flow.\n\n30\n\n// You can limit retries and emit Cancel to cancel login flow.\n\n31\n\n31\n\n32\n\n// cancel login request\n\n32\n\n// cancel login request\n\n33\n\nhandle\n\n.\n\nemit\n\n(\n\nLoginWithEmailOTPEventEmit\n\n.\n\nCancel\n\n)\n\n;\n\n33\n\nhandle\n\n.\n\nemit\n\n(\n\nLoginWithEmailOTPEventEmit\n\n.\n\nCancel\n\n)\n\n;\n\n34\n\n}\n\n)\n\n34\n\n}\n\n)\n\n35\n\n.\n\non\n\n(\n\n'done'\n\n,\n\n(\n\nresult\n\n)\n\n=>\n\n{\n\n35\n\n.\n\non\n\n(\n\n'done'\n\n,\n\n(\n\nresult\n\n)\n\n=>\n\n{\n\n36\n\n// is called when the Promise resolves\n\n36\n\n// is called when the Promise resolves\n\n37\n\n37\n\n38\n\n// convey login success to user\n\n38\n\n// convey login success to user\n\n39\n\nalert\n\n(\n\n'Login complete!'\n\n)\n\n;\n\n39\n\nalert\n\n(\n\n'Login complete!'\n\n)\n\n;\n\n40\n\n40\n\n41\n\n// DID Token returned in result\n\n41\n\n// DID Token returned in result\n\n42\n\nconst\n\ndidToken\n\n=\n\nresult\n\n;\n\n42\n\nconst\n\ndidToken\n\n=\n\nresult\n\n;\n\n43\n\n}\n\n)\n\n43\n\n}\n\n)\n\n44\n\n.\n\non\n\n(\n\n'error'\n\n,\n\n(\n\nreason\n\n)\n\n=>\n\n{\n\n44\n\n.\n\non\n\n(\n\n'error'\n\n,\n\n(\n\nreason\n\n)\n\n=>\n\n{\n\n45\n\n// is called if the Promise rejects\n\n45\n\n// is called if the Promise rejects\n\n46\n\nconsole\n\n.\n\nerror\n\n(\n\nreason\n\n)\n\n;\n\n46\n\nconsole\n\n.\n\nerror\n\n(\n\nreason\n\n)\n\n;\n\n47\n\n}\n\n)\n\n47\n\n}\n\n)\n\n48\n\n.\n\non\n\n(\n\n'settled'\n\n,\n\n(\n\n)\n\n=>\n\n{\n\n48\n\n.\n\non\n\n(\n\n'settled'\n\n,\n\n(\n\n)\n\n=>\n\n{\n\n49\n\n// is called when the Promise either resolves or rejects\n\n49\n\n// is called when the Promise either resolves or rejects\n\n50\n\n}\n\n)\n\n50\n\n}\n\n)\n\n51\n\n51\n\n52\n\n//** MFA Verification Events (if enabled for app)\n\n52\n\n//** MFA Verification Events (if enabled for app)\n\n53\n\n53\n\n54\n\n.\n\non\n\n(\n\nLoginWithEmailOTPEventOnReceived\n\n.\n\nMfaSentHandle\n\n,\n\n(\n\n)\n\n=>\n\n{\n\n54\n\n.\n\non\n\n(\n\nLoginWithEmailOTPEventOnReceived\n\n.\n\nMfaSentHandle\n\n,\n\n(\n\n)\n\n=>\n\n{\n\n55\n\n// Prompt the user for the MFA TOTP\n\n55\n\n// Prompt the user for the MFA TOTP\n\n56\n\nconst\n\nmfa_totp\n\n=\n\nwindow\n\n.\n\nprompt\n\n(\n\n'Enter MFA TOTP'\n\n)\n\n;\n\n56\n\nconst\n\nmfa_totp\n\n=\n\nwindow\n\n.\n\nprompt\n\n(\n\n'Enter MFA TOTP'\n\n)\n\n;\n\n57\n\n57\n\n58\n\n// Send the MFA TOTP for verification\n\n58\n\n// Send the MFA TOTP for verification\n\n59\n\nhandle\n\n.\n\nemit\n\n(\n\nLoginWithEmailOTPEventEmit\n\n.\n\nVerifyMfaCode\n\n,\n\nmfa_totp\n\n)\n\n59\n\nhandle\n\n.\n\nemit\n\n(\n\nLoginWithEmailOTPEventEmit\n\n.\n\nVerifyMfaCode\n\n,\n\nmfa_totp\n\n)\n\n60\n\n}\n\n)\n\n60\n\n}\n\n)\n\n61\n\n.\n\non\n\n(\n\nLoginWithEmailOTPEventOnReceived\n\n.\n\nInvalidMfaOtp\n\n,\n\n(\n\n)\n\n=>\n\n{\n\n61\n\n.\n\non\n\n(\n\nLoginWithEmailOTPEventOnReceived\n\n.\n\nInvalidMfaOtp\n\n,\n\n(\n\n)\n\n=>\n\n{\n\n62\n\n// User entered invalid OTP\n\n62\n\n// User entered invalid OTP\n\n63\n\n63\n\n64\n\n// Have the user retry entering the MFA OTP and emit via VerifyMfaCode.\n\n64\n\n// Have the user retry entering the MFA OTP and emit via VerifyMfaCode.\n\n65\n\n// You can limit retries and emit Cancel to cancel login flow.\n\n65\n\n// You can limit retries and emit Cancel to cancel login flow.\n\n66\n\n66\n\n67\n\n// cancel login request\n\n67\n\n// cancel login request\n\n68\n\nhandle\n\n.\n\nemit\n\n(\n\nLoginWithEmailOTPEventEmit\n\n.\n\nCancel\n\n)\n\n;\n\n68\n\nhandle\n\n.\n\nemit\n\n(\n\nLoginWithEmailOTPEventEmit\n\n.\n\nCancel\n\n)\n\n;\n\n69\n\n}\n\n)\n\n69\n\n}\n\n)\n\n70\n\n70\n\n71\n\n//** Device Verification Events (if enabled for app)\n\n71\n\n//** Device Verification Events (if enabled for app)\n\n72\n\n72\n\n73\n\n.\n\non\n\n(\n\nDeviceVerificationEventOnReceived\n\n.\n\nDeviceNeedsApproval\n\n,\n\n(\n\n)\n\n=>\n\n{\n\n73\n\n.\n\non\n\n(\n\nDeviceVerificationEventOnReceived\n\n.\n\nDeviceNeedsApproval\n\n,\n\n(\n\n)\n\n=>\n\n{\n\n74\n\n// is called when device is not recognized and requires approval\n\n74\n\n// is called when device is not recognized and requires approval\n\n75\n\n}\n\n)\n\n75\n\n}\n\n)\n\n76\n\n.\n\non\n\n(\n\nDeviceVerificationEventOnReceived\n\n.\n\nDeviceVerificationEmailSent\n\n,\n\n(\n\n)\n\n=>\n\n{\n\n76\n\n.\n\non\n\n(\n\nDeviceVerificationEventOnReceived\n\n.\n\nDeviceVerificationEmailSent\n\n,\n\n(\n\n)\n\n=>\n\n{\n\n77\n\n// is called when the device verification email is sent\n\n77\n\n// is called when the device verification email is sent\n\n78\n\n}\n\n)\n\n78\n\n}\n\n)\n\n79\n\n.\n\non\n\n(\n\nDeviceVerificationEventOnReceived\n\n.\n\nDeviceApproved\n\n,\n\n(\n\n)\n\n=>\n\n{\n\n79\n\n.\n\non\n\n(\n\nDeviceVerificationEventOnReceived\n\n.\n\nDeviceApproved\n\n,\n\n(\n\n)\n\n=>\n\n{\n\n80\n\n// is called when the device has been approved\n\n80\n\n// is called when the device has been approved\n\n81\n\n}\n\n)\n\n81\n\n}\n\n)\n\n82\n\n.\n\non\n\n(\n\nDeviceVerificationEventOnReceived\n\n.\n\nDeviceVerificationLinkExpired\n\n,\n\n(\n\n)\n\n=>\n\n{\n\n82\n\n.\n\non\n\n(\n\nDeviceVerificationEventOnReceived\n\n.\n\nDeviceVerificationLinkExpired\n\n,\n\n(\n\n)\n\n=>\n\n{\n\n83\n\n// is called when the device verification link is expired\n\n83\n\n// is called when the device verification link is expired\n\n84\n\n84\n\n85\n\n// Retry device verification\n\n85\n\n// Retry device verification\n\n86\n\nhandle\n\n.\n\nemit\n\n(\n\nDeviceVerificationEventEmit\n\n.\n\nRetry\n\n)\n\n;\n\n86\n\nhandle\n\n.\n\nemit\n\n(\n\nDeviceVerificationEventEmit\n\n.\n\nRetry\n\n)\n\n;\n\n87\n\n}\n\n)\n\n;\n\n87\n\n}\n\n)\n\n;\n\n88\n\n88\n\n89\n\n// LoginWithEmailOTPEventEmit.Cancel can always be emitted to terminate the unresolved request.\n\n89\n\n// LoginWithEmailOTPEventEmit.Cancel can always be emitted to terminate the unresolved request.\n\n90\n\n90\n\n91\n\n}\n\ncatch\n\n(\n\nerr\n\n)\n\n{\n\n91\n\n}\n\ncatch\n\n(\n\nerr\n\n)\n\n{\n\n92\n\n// handle errors\n\n92\n\n// handle errors\n\n93\n\n}\n\n93\n\n}", "explanation": "**Event Handling Overview**\n\nThe `Event Handling` section in the Magic Labs embedded wallet documentation is about listening for and emitting events during the login flow. This allows developers to handle specific events related to the login process, such as sending and verifying email OTPs, MFA, and device verification.\n\n**Key Concepts**\n\n* **Relevant Events**: These are events that occur during the login flow, which can be listened for and emitted to handle specific actions.\n* **Event Handlers**: These are functions that listen for specific events and perform actions based on the event type.\n* **Event Listeners**: These are methods that attach event handlers to specific events.\n* **Event Emitters**: These are methods that emit events, allowing event handlers to be triggered.\n\n**Example Use Cases**\n\n* **Email OTP Verification**: When the email OTP is sent, an event handler can be triggered to prompt the user to enter the OTP.\n* **MFA Verification**: When the MFA TOTP is sent, an event handler can be triggered to prompt the user to enter the TOTP.\n* **Device Verification**: When the device verification email is sent, an event handler can be triggered to handle device verification.\n\n**Event Handling Flow**\n\n1. The `loginWithEmailOTP` method is called with the showUI set to false.\n2. The `LoginWithEmailOTPEventOnReceived` event is listened for and emitted to handle specific actions.\n3. The event handler for `EmailOTPSent` is triggered, prompting the user to enter the OTP.\n4. The `VerifyEmailOtp` event is emitted with the entered OTP.\n5. The event handler for `ValidEmailOtp` is triggered, indicating login success.\n6. The `done` event is emitted, resolving the promise with the DID Token.\n\n**Best Practices**\n\n* Use event listeners to attach event handlers to specific events.\n* Use event emitters to emit events, triggering event handlers.\n* Handle errors and exceptions in event handlers to ensure robust error handling.\n* Use event handlers to handle specific actions and logic related to the login flow.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#chunk-17", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nEmail OTP\n\nemail-otp-sent\n\nverify-email-otp\n\ninvalid-email-otp\n\ncancel\n\ncancel\n\nEmit to cancel the login request.\n\nDevice Verification\n\ndevice-needs-approval\n\ndevice-verification-email-sent\n\ndevice-approved\n\ndevice-verification-link-expired\n\ndevice-verification-link-expired\n\nDispatched when the email verification email has expired\n\ndevice-retry\n\ndevice-retry\n\nEmit to restart the device registration flow", "explanation": "# Event Enums\n\nThe '#Event Enums' section in the Magic Labs embedded wallet documentation describes a set of predefined events that can occur during various authentication and verification processes. These events are emitted by the Magic SDK to notify the application of specific state changes.\n\n## Purpose\n\nThe main purpose of these event enums is to provide a standardized way for the application to react to different user authentication and verification flows. By listening to these events, the application can take necessary actions, such as prompting the user for additional information or updating the UI to reflect the current state of the authentication process.\n\n## Event Examples\n\nHere are some examples of the events mentioned in the documentation:\n\n* `email-otp-sent`: The email OTP has been sent to the user.\n* `verify-email-otp`: The user is asked to verify the email OTP.\n* `invalid-email-otp`: The user entered an invalid email OTP.\n* `cancel`: The user cancelled the login request.\n* `device-needs-approval`: The device needs approval for authentication.\n* `device-approved`: The device has been approved for authentication.\n* `device-verification-link-expired`: The device verification link has expired.\n* `device-retry`: The device registration flow should be restarted.\n\n## Using Event Enums\n\nTo use these event enums in your application, you would need to register a callback function to listen for these events. This callback function would be triggered whenever one of these events occurs, allowing your application to react accordingly.\n\nFor example, when the `invalid-email-otp` event is emitted, you could display an error message to the user and prompt them to try again. Similarly, when the `device-approved` event is emitted, you could update the UI to reflect that the device has been approved for authentication.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#chunk-18", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nTo achieve a fully white-labeled experience, you will need to implement some custom error handling according to your UI needs. Here's a short example to illustrate how errors can be caught and identified by their code:\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n,\n\nRPCError\n\n,\n\nRPCErrorCode\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n,\n\nRPCError\n\n,\n\nRPCErrorCode\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\n02\n\n03\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n03\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n04\n\n04\n\n05\n\ntry\n\n{\n\n05\n\ntry\n\n{\n\n06\n\nawait\n\nmagic\n\n.\n\nauth\n\n.\n\nloginWithEmailOTP\n\n(\n\n{\n\nemail\n\n:\n\n'hello@example.com'\n\n}\n\n)\n\n;\n\n06\n\nawait\n\nmagic\n\n.\n\nauth\n\n.\n\nloginWithEmailOTP\n\n(\n\n{\n\nemail\n\n:\n\n'hello@example.com'\n\n}\n\n)\n\n;\n\n07\n\n}\n\ncatch\n\n(\n\nerr\n\n)\n\n{\n\n07\n\n}\n\ncatch\n\n(\n\nerr\n\n)\n\n{\n\n08\n\nif\n\n(\n\nerr\n\ninstanceof\n\nRPCError\n\n)\n\n{\n\n08\n\nif\n\n(\n\nerr\n\ninstanceof\n\nRPCError\n\n)\n\n{\n\n09\n\nswitch\n\n(\n\nerr\n\n.\n\ncode\n\n)\n\n{\n\n09\n\nswitch\n\n(\n\nerr\n\n.\n\ncode\n\n)\n\n{\n\n10\n\ncase\n\nRPCErrorCode\n\n.\n\nMagicLinkExpired\n\n10\n\ncase\n\nRPCErrorCode\n\n.\n\nMagicLinkExpired\n\n11\n\ncase\n\nRPCErrorCode\n\n.\n\nUserAlreadyLoggedIn\n\n:\n\n11\n\ncase\n\nRPCErrorCode\n\n.\n\nUserAlreadyLoggedIn\n\n:\n\n12\n\n// Handle errors accordingly :)\n\n12\n\n// Handle errors accordingly :)\n\n13\n\nbreak\n\n;\n\n13\n\nbreak\n\n;\n\n14\n\n}\n\n14\n\n}\n\n15\n\n}\n\n15\n\n}\n\n16\n\n}\n\n16\n\n}", "explanation": "**Error Handling in Magic Labs Embedded Wallet Documentation**\n\nThe `#Error Handling` section of the Magic Labs embedded wallet documentation outlines how to catch and handle errors that may occur while using the Magic SDK. The main purpose of this section is to provide a way to customize error handling according to the UI needs of a fully white-labeled experience.\n\n**Key Points:**\n\n1. **Importing necessary modules**: The section imports the `Magic`, `RPCError`, and `RPCErrorCode` classes from the `magic-sdk` module.\n2. **Creating a Magic instance**: A `Magic` instance is created with a publishable API key.\n3. **Error handling**: A `try-catch` block is used to catch any errors that may occur when calling the `loginWithEmailOTP` method. If an `RPCError` is caught, the code checks the error code using a `switch` statement.\n4. **Error code cases**: The section outlines specific error code cases, including `MagicLinkExpired` and `UserAlreadyLoggedIn`, and provides an example of how to handle these errors.\n\n**Main Purpose:**\n\nThe main purpose of this section is to provide a way for developers to:\n\n* Catch and handle errors that may occur while using the Magic SDK\n* Customize error handling according to the UI needs of a fully white-labeled experience\n* Provide specific error handling for known error codes, such as `MagicLinkExpired` and `UserAlreadyLoggedIn`.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#chunk-19", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nloginWithSMS\n\nAuthenticate a user passwordlessly using a one-time code sent to the specified phone number.\n\nList of Currently Blocked Country Codes\n\nList of Currently Blocked Country Codes\n\nOnly available with Dedicated Wallet.\n\n#\n\n\u2022 phoneNumber (String): E.164 formatted phone number\n\n\u2022 lifespan? (Number): Set the lifespan of the resolved Decentralize ID token. Defaults to 900s (15 mins)\n\nphoneNumber\n\nlifespan?", "explanation": "**loginWithSMS Explanation:**\n\nThe `loginWithSMS` documentation section is about authenticating a user on the Magic Labs embedded wallet using a one-time code sent via SMS to their phone number. This process eliminates the need for a password.\n\n**Main Purpose:**\n\nThe primary purpose of `loginWithSMS` is to securely authenticate users on the Magic Labs embedded wallet by providing a passwordless login experience, which improves cybersecurity and convenience.\n\n**Key Arguments:**\n\n1. **`phoneNumber` (String): E.164 formatted phone number** - This is the user's phone number that will receive the one-time code.\n2. **`lifespan?` (Number)** - This is an optional argument that sets the lifespan of the Decentralized ID (DID) token. The default value is 900s (15 minutes).", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#chunk-20", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 PromiEvent<string | null>: The promise resolves upon authentication request success and rejects with a specific error code if the request fails. The resolved value is a Decentralized ID token with a default 15-minute lifespan.\n\nPromiEvent<string | null>", "explanation": "**Returns Section Explanation**\n\nThe '#Returns' section in the Magic Labs embedded wallet documentation outlines the outcome of the authentication request. It describes the result of the authentication operation, which is a crucial part of the wallet's functionality.\n\n**Main Purpose**\n\nThe main purpose of the 'Returns' section is to inform the developer about the expected output of the authentication request. Specifically, it provides information on:\n\n1. **Success**: When the authentication request is successful, the promise resolves with a string value, which is a Decentralized ID ( DID) token. This token represents the user's authentication and has a default lifespan of 15 minutes.\n2. **Failure**: If the authentication request fails, the promise rejects with a specific error code, indicating the reason for the failure.\n\n**Key Takeaway**\n\nThe 'Returns' section helps developers understand how to handle the outcome of the authentication request, enabling them to write robust and error-handling code for their Magic Labs embedded wallet integration.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#chunk-21", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\n02\n\n03\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n03\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n04\n\n04\n\n05\n\n// log in a user by their phone number\n\n05\n\n// log in a user by their phone number\n\n06\n\ntry\n\n{\n\n06\n\ntry\n\n{\n\n07\n\nawait\n\nmagic\n\n.\n\nauth\n\n.\n\nloginWithSMS\n\n(\n\n{\n\n'+14151231234'\n\n}\n\n)\n\n;\n\n07\n\nawait\n\nmagic\n\n.\n\nauth\n\n.\n\nloginWithSMS\n\n(\n\n{\n\n'+14151231234'\n\n}\n\n)\n\n;\n\n08\n\n}\n\ncatch\n\n{\n\n08\n\n}\n\ncatch\n\n{\n\n09\n\n// Handle errors if required!\n\n09\n\n// Handle errors if required!\n\n10\n\n}\n\n10\n\n}", "explanation": "**Example Overview**\n\nThe provided documentation section titled '#Example' demonstrates how to use the Magic Lab's embedded wallet SDK to log in a user by their phone number using SMS authentication. This example showcases a basic implementation of the Magic SDK in a JavaScript application.\n\n**Main Purpose**\n\nThe main purpose of this example is to provide a starting point for developers who want to integrate the Magic SDK into their web application. It highlights the necessary steps to initialize the Magic instance, handle errors, and authenticate a user using SMS authentication.\n\n**Key Takeaways**\n\n* Initializing the Magic instance with a publishable API key.\n* Authenticating a user using SMS login with a phone number.\n* Handling potential errors that may occur during the authentication process.\n\n**Step-by-Step Breakdown**\n\n1. Import the Magic SDK.\n2. Initialize the Magic instance with a publishable API key.\n3. Attempt to authenticate the user using SMS login with a phone number.\n4. Handle any errors that occur during the authentication process.\n\nThis example serves as a foundation for more complex integrations and provides a clear understanding of the Magic SDK's basic usage and error handling mechanisms.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#chunk-22", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nRelevant Error Codes\n\nRelevant Error Codes\n\nTo achieve a fully white-labeled experience, you will need to implement some custom error handling according to your UI needs. Here's a short example to illustrate how errors can be caught and identified by their code:\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n,\n\nRPCError\n\n,\n\nRPCErrorCode\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n,\n\nRPCError\n\n,\n\nRPCErrorCode\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\n02\n\n03\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n03\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n04\n\n04\n\n05\n\ntry\n\n{\n\n05\n\ntry\n\n{\n\n06\n\nawait\n\nmagic\n\n.\n\nauth\n\n.\n\nloginWithSMS\n\n(\n\n{\n\nphoneNumber\n\n:\n\n\"+14151231234\"\n\n}\n\n)\n\n;\n\n06\n\nawait\n\nmagic\n\n.\n\nauth\n\n.\n\nloginWithSMS\n\n(\n\n{\n\nphoneNumber\n\n:\n\n\"+14151231234\"\n\n}\n\n)\n\n;\n\n07\n\n}\n\ncatch\n\n(\n\nerr\n\n)\n\n{\n\n07\n\n}\n\ncatch\n\n(\n\nerr\n\n)\n\n{\n\n08\n\nif\n\n(\n\nerr\n\ninstanceof\n\nRPCError\n\n)\n\n{\n\n08\n\nif\n\n(\n\nerr\n\ninstanceof\n\nRPCError\n\n)\n\n{\n\n09\n\nswitch\n\n(\n\nerr\n\n.\n\ncode\n\n)\n\n{\n\n09\n\nswitch\n\n(\n\nerr\n\n.\n\ncode\n\n)\n\n{\n\n10\n\ncase\n\nRPCErrorCode\n\n.\n\nAccessDeniedToUser\n\n:\n\n10\n\ncase\n\nRPCErrorCode\n\n.\n\nAccessDeniedToUser\n\n:\n\n11\n\ncase\n\nRPCErrorCode\n\n.\n\nMagicLinkRateLimited\n\n:\n\n11\n\ncase\n\nRPCErrorCode\n\n.\n\nMagicLinkRateLimited\n\n:\n\n12\n\ncase\n\nRPCErrorCode\n\n.\n\nUserAlreadyLoggedIn\n\n:\n\n12\n\ncase\n\nRPCErrorCode\n\n.\n\nUserAlreadyLoggedIn\n\n:\n\n13\n\n// Handle errors accordingly :)\n\n13\n\n// Handle errors accordingly :)\n\n14\n\nbreak\n\n;\n\n14\n\nbreak\n\n;\n\n15\n\n}\n\n15\n\n}\n\n16\n\n}\n\n16\n\n}\n\n17\n\n}\n\n17\n\n}", "explanation": "**Error Handling in Magic Labs Embedded Wallet Documentation**\n\nThe provided documentation section is about handling errors that occur when using the Magic Labs embedded wallet. The main purpose is to provide a way to catch and identify errors by their code, allowing developers to implement custom error handling according to their UI needs.\n\n**Key Points:**\n\n1. **Error Types:** The documentation introduces two types of errors: `RPCError` and its child class `RPCErrorCode`. The former is a general error class, while the latter is an enumeration of specific error codes.\n2. **Error Handling Example:** The example code shows how to catch errors using a `try`-`catch` block and then check if the error is an instance of `RPCError` using the `instanceof` operator.\n3. **Error Code Identification:** If the error is an instance of `RPCError`, the code uses a `switch` statement to check the error code against specific values from the `RPCErrorCode` enum. This allows the developer to handle different error scenarios accordingly.\n4. **White-Labeling:** The documentation mentions that implementing custom error handling is necessary for achieving a fully white-labeled experience. This means that the developer needs to adapt the error handling to fit their specific UI branding and requirements.\n\n**Benefits:**\n\n1. **Customizable Error Handling:** By using the `RPCErrorCode` enum, developers can customize error handling to fit their specific use case and UI needs.\n2. **Improved User Experience:** By handling errors in a user-friendly way, developers can improve the overall user experience and reduce the chances of user frustration.\n3. **Enhanced Development Experience:** The documented error handling approach allows developers to better understand and work with errors, making the development process more efficient and productive.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#chunk-23", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nloginWithCredential\n\nAuthenticate a user via a \"Magic Credential,\" a special, one-time-use DID Token created by the user to hydrate their authentication between page reloads. For example: when executing the loginWithMagicLink flow with a redirectURI specified, you can invoke this method to complete the authentication \"callback,\" similar in principal to OAuth 2.0 flows.\n\nloginWithMagicLink\n\nloginWithMagicLink\n\nredirectURI\n\nIf given no arguments, this method will parse the credential token automatically from window.location.search.\n\nwindow.location.search\n\nOnly available with Dedicated Wallet.\n\n#\n\n\u2022 credentialOrQueryString (String): A credential token or a valid query string (prefixed with ? or #). By default, this method will look for the a credential token on the magic_credential key of window.location.search\n\ncredentialOrQueryString\n\n?\n\n#\n\nmagic_credential\n\nwindow.location.search", "explanation": "**Explanation of `loginWithCredential` Method**\n\nThe `loginWithCredential` method is a crucial part of the Magic Labs authentication process, allowing users to authenticate and complete the authentication process without page reloads. It uses a special one-time-use Digital Identity (DID) Token, known as a Magic Credential.\n\n**Purpose of `loginWithCredential` Method**\n\nThe main purpose of the `loginWithCredential` method is to:\n\n1. **Authenticate a user**: Using a Magic Credential, which is a one-time-use token created by the user to maintain their authentication between page reloads.\n2. **Complete the authentication \"callback\"**: Similar to OAuth 2.0 flows, this method facilitates the completion of the authentication process.\n\n**Key Features and Parameters**\n\n* **`credentialOrQueryString` (String)**: This parameter can accept either a credential token or a valid query string (prefixed with ? or #).\n* **Default behavior**: If no arguments are provided, this method will automatically parse the credential token from `window.location.search` using the `magic_credential` key.\n* **Only available in Dedicated Wallet**: This method is compatible with the Dedicated Wallet integration.\n\n**Example Use Case**\n\nWhen implementing the `loginWithMagicLink` flow with a redirectURI specified, this method can be invoked to complete the authentication \"callback,\" allowing the user to access their account without page reloads.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#chunk-24", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 PromiEvent<string | null>: The promise resolves upon authentication request success and rejects with a specific error code if the request fails. The resolved value is a Decentralized ID token with a default 15-minute lifespan.\n\nPromiEvent<string | null>", "explanation": "Based on the provided documentation from Magic Labs embedded wallet, the '#Returns' section describes the expected outcome of an authentication request.\n\n**In a nutshell:** It's about what the API function returns after a successful authentication request or when an error occurs.\n\n**Breakdown:**\n\n* `PromiEvent<string | null>`: This syntax indicates that the authentication request returns a promise (a value that will be resolved at a later time). This promise can have one of two outcomes:\n\t+ `string`: If successful, the promise resolves with a Decentralized ID (DID) token. This token is a string with a lifespan of 15 minutes, which allows the user to authenticate without directly handling sensitive login credentials.\n\t+ `null`: If the authentication request fails, the promise rejects with a null value.\n\n**Main purpose:** The main purpose of this section is to inform developers about what to expect from the Magic Labs embedded wallet authentication API. It provides guidance on how to handle the promise returned by the authentication function, making it easier for developers to write and debug their code.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#chunk-25", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nFrom your login page:\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\n02\n\n03\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n03\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n04\n\n04\n\n05\n\ntry\n\n{\n\n05\n\ntry\n\n{\n\n06\n\nawait\n\nmagic\n\n.\n\nauth\n\n.\n\nloginWithMagicLink\n\n(\n\n{\n\n06\n\nawait\n\nmagic\n\n.\n\nauth\n\n.\n\nloginWithMagicLink\n\n(\n\n{\n\n07\n\nemail\n\n:\n\n'hello@example.com'\n\n,\n\n07\n\nemail\n\n:\n\n'hello@example.com'\n\n,\n\n08\n\nredirectURI\n\n:\n\n'https://yourdomain.com/your/magic/link/callback'\n\n,\n\n08\n\nredirectURI\n\n:\n\n'https://yourdomain.com/your/magic/link/callback'\n\n,\n\n09\n\n}\n\n)\n\n;\n\n09\n\n}\n\n)\n\n;\n\n10\n\n10\n\n11\n\n// When the user clicks their magic link, they will be logged-in here\n\n11\n\n// When the user clicks their magic link, they will be logged-in here\n\n12\n\n// and in the \"callback\" context.\n\n12\n\n// and in the \"callback\" context.\n\n13\n\n}\n\ncatch\n\n{\n\n13\n\n}\n\ncatch\n\n{\n\n14\n\n// Handle errors if required!\n\n14\n\n// Handle errors if required!\n\n15\n\n}\n\n15\n\n}\n\nFrom your authentication callback page:\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\n02\n\n03\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n03\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n04\n\n04\n\n05\n\ntry\n\n{\n\n05\n\ntry\n\n{\n\n06\n\nawait\n\nmagic\n\n.\n\nauth\n\n.\n\nloginWithCredential\n\n(\n\n)\n\n;\n\n06\n\nawait\n\nmagic\n\n.\n\nauth\n\n.\n\nloginWithCredential\n\n(\n\n)\n\n;\n\n07\n\n}\n\ncatch\n\n{\n\n07\n\n}\n\ncatch\n\n{\n\n08\n\n// Handle errors if required!\n\n08\n\n// Handle errors if required!\n\n09\n\n}\n\n09\n\n}\n\n10\n\n10\n\n11\n\n// You can also provide the credential yourself\n\n11\n\n// You can also provide the credential yourself\n\n12\n\ntry\n\n{\n\n12\n\ntry\n\n{\n\n13\n\nawait\n\nmagic\n\n.\n\nauth\n\n.\n\nloginWithCredential\n\n(\n\n'iamacredentialtoken'\n\n)\n\n;\n\n13\n\nawait\n\nmagic\n\n.\n\nauth\n\n.\n\nloginWithCredential\n\n(\n\n'iamacredentialtoken'\n\n)\n\n;\n\n14\n\n}\n\ncatch\n\n{\n\n14\n\n}\n\ncatch\n\n{\n\n15\n\n// Handle errors if required!\n\n15\n\n// Handle errors if required!\n\n16\n\n}\n\n16\n\n}\n\n17\n\n17\n\n18\n\n// You can also provide the credential as a query string\n\n18\n\n// You can also provide the credential as a query string\n\n19\n\ntry\n\n{\n\n19\n\ntry\n\n{\n\n20\n\nawait\n\nmagic\n\n.\n\nauth\n\n.\n\nloginWithCredential\n\n(\n\nwindow\n\n.\n\nlocation\n\n.\n\nsearch\n\n)\n\n;\n\n20\n\nawait\n\nmagic\n\n.\n\nauth\n\n.\n\nloginWithCredential\n\n(\n\nwindow\n\n.\n\nlocation\n\n.\n\nsearch\n\n)\n\n;\n\n21\n\n}\n\ncatch\n\n{\n\n21\n\n}\n\ncatch\n\n{\n\n22\n\n// Handle errors if required!\n\n22\n\n// Handle errors if required!\n\n23\n\n}\n\n23\n\n}", "explanation": "**Explanation of the Provided Documentation Section**\n\nThe given documentation section is titled '#Example' and appears to be a code snippet in JavaScript that demonstrates how to use the Magic Labs library for client-side authentication with Magic Links and an authentication callback.\n\n**Breakdown of the Code:**\n\nThe code consists of two main parts: one for logging in with Magic Link and another for handling the authentication callback.\n\n1. **Logging in with Magic Link:**\n   - This part of the code creates an instance of the Magic class using a publishable API key.\n   - It then attempts to login using the `loginWithMagicLink` method with an email address and a redirect URI.\n   - Once the user clicks on the generated Magic Link and logs in, they will be taken to an authentication callback page.\n   - On this page, the code attempts to log the user in using the `loginWithCredential` method.\n\n2. **Authentication Callback:**\n   - This part of the code provides an implementation for the authentication callback page.\n   - It checks if the user has authenticated successfully using the `loginWithCredential` method.\n   - If not, it attempts to handle errors and can be extended to provide custom error handling.\n\n**Main Purpose:**\n\nThe main purpose of this documentation section is to provide an example of how to integrate the Magic Labs library into a web application for client-side authentication using Magic Links and an authentication callback. The code snippet demonstrates how to:\n\n- Initialize the Magic class with a publishable API key\n- Use the `loginWithMagicLink` method to send a Magic Link to the user\n- Handle the authentication callback using the `loginWithCredential` method\n- Detect authentication errors and provide a means to handle them\n\nThis example code serves as a starting point for developers looking to implement Magic Labs authentication in their web applications.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#chunk-26", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nupdateEmailWithUI\n\nInitiates the update email flow that allows a user to change their email address.\n\nOnly available with Dedicated Wallet.\n\n#\n\n\u2022 email (String): The new email to update to\n\n\u2022 showUI? (Boolean): If true, shows an out-of-the-box pending UI which includes instructions on which step of the confirmation process the user is on. Dismisses automatically when the process is complete\n\nemail (String): The new email to update to\n\nemail\n\nshowUI? (Boolean): If true, shows an out-of-the-box pending UI which includes instructions on which step of the confirmation process the user is on. Dismisses automatically when the process is complete\n\nshowUI?\n\ntrue", "explanation": "# updateEmailWithUI: A Method for Changing Email Address\n\nThe `updateEmailWithUI` method is a feature within the Magic Labs embedded wallet used to change a user's email address. It is specifically designed for use with Dedicated Wallet.\n\n## Main Purpose:\n\nThe primary purpose of `updateEmailWithUI` is to initiate a process that allows users to update their email address efficiently. This method is essential for user account management and email verification in the Magic Labs embedded wallet.\n\n## Arguments:\n\nTwo key arguments are passed to this method:\n\n1. **email (String):** The new email address the user wants to update to.\n2. **showUI? (Boolean):** A flag that determines whether an out-of-the-box pending UI is shown, indicating the confirmation process step to the user and dismissing automatically when complete.\n\n## Usage:\n\nUsing `updateEmailWithUI` requires dedicating your wallet (available only with Dedicated Wallet) and passing the new email address along with an optional `showUI` flag (true to display UI, false otherwise).\n\n**Example (from the documentation URL):**\n\n`updateEmailWithUI({ email: 'newemail@example.com', showUI: true })`", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#chunk-27", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 PromiEvent<boolean>: The promise resolves with a true boolean value if update email is successful and rejects with a specific error code if the request fails\n\nPromiEvent<boolean>: The promise resolves with a true boolean value if update email is successful and rejects with a specific error code if the request fails\n\nPromiEvent<boolean>", "explanation": "# Returns\n\nThe '#Returns' section from the Magic Labs embedded wallet documentation describes the response returned by the Magic SDK when attempting to update an email address.\n\n**Main Purpose:**\n\nThe main purpose of this section is to inform developers about the expected outcome of the '_updateEmail' method, allowing them to handle the result of the operation in their code.\n\n**What It Means:**\n\nWhen calling the '_updateEmail' method, the Magic SDK returns a promise that resolves to a boolean value with the following behavior:\n\n- If the email update is successful, the promise resolves with a `true` value, indicating that the operation was successful.\n- If the request fails, the promise rejects with a specific error code, providing information about the error that occurred.\n\n**Key Points:**\n\n* The return value is a `PromiEvent` (a promise event) that resolves with a boolean value.\n* The promise resolves with `true` on success and rejects with an error code on failure.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#chunk-28", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\n02\n\n03\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'API_KEY'\n\n)\n\n;\n\n03\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'API_KEY'\n\n)\n\n;\n\n04\n\n04\n\n05\n\n// Initiates the flow to update a user's current email to a new one.\n\n05\n\n// Initiates the flow to update a user's current email to a new one.\n\n06\n\ntry\n\n{\n\n06\n\ntry\n\n{\n\n07\n\n...\n\n07\n\n...\n\n08\n\n/* Assuming user is logged in */\n\n08\n\n/* Assuming user is logged in */\n\n09\n\nawait\n\nmagic\n\n.\n\nauth\n\n.\n\nupdateEmailWithUI\n\n(\n\n{\n\nemail\n\n:\n\n'new_user_email@example.com'\n\n}\n\n)\n\n;\n\n09\n\nawait\n\nmagic\n\n.\n\nauth\n\n.\n\nupdateEmailWithUI\n\n(\n\n{\n\nemail\n\n:\n\n'new_user_email@example.com'\n\n}\n\n)\n\n;\n\n10\n\n}\n\ncatch\n\n{\n\n10\n\n}\n\ncatch\n\n{\n\n11\n\n// Handle errors if required!\n\n11\n\n// Handle errors if required!\n\n12\n\n}\n\n12\n\n}\n\n13\n\n13\n\n14\n\n/**\n\n14\n\n/**\n\n15\n\n* Initiates the flow to update a user's current email to a new one,\n\n15\n\n* Initiates the flow to update a user's current email to a new one,\n\n16\n\n* without showing an out-of-the box UI.\n\n16\n\n* without showing an out-of-the box UI.\n\n17\n\n*/\n\n17\n\n*/\n\n18\n\ntry\n\n{\n\n18\n\ntry\n\n{\n\n19\n\n/* Assuming user is logged in */\n\n19\n\n/* Assuming user is logged in */\n\n20\n\nawait\n\nmagic\n\n.\n\nauth\n\n.\n\nupdateEmailWithUI\n\n(\n\n{\n\nemail\n\n:\n\n'new_user_email@example.com'\n\n,\n\nshowUI\n\n:\n\nfalse\n\n}\n\n)\n\n;\n\n20\n\nawait\n\nmagic\n\n.\n\nauth\n\n.\n\nupdateEmailWithUI\n\n(\n\n{\n\nemail\n\n:\n\n'new_user_email@example.com'\n\n,\n\nshowUI\n\n:\n\nfalse\n\n}\n\n)\n\n;\n\n21\n\n}\n\ncatch\n\n{\n\n21\n\n}\n\ncatch\n\n{\n\n22\n\n// Handle errors if required!\n\n22\n\n// Handle errors if required!\n\n23\n\n}\n\n23\n\n}", "explanation": "**Section Title: #Example**\n\nThe `#Example` section in the Magic Labs embedded wallet documentation is a code example that demonstrates how to update a user's email address using the Magic SDK.\n\n**Main Purpose:**\n\nThe primary purpose of this example is to showcase the `updateEmailWithUI` method, which initiates a flow to update a user's current email address. The code is written in JavaScript and uses the Magic SDK to interact with the Magic API.\n\n**Key Features:**\n\n1. **Creating a Magic instance**: The code creates a new instance of the Magic class, passing in an API key to authenticate with the Magic API.\n2. **Updating user email**: The code uses the `updateEmailWithUI` method to initiate a flow to update the user's current email address. This method can be called with or without showing a UI.\n3. **Error handling**: The code includes try-catch blocks to handle any errors that may occur during the email update process.\n\n**Example Use Cases:**\n\nThis code example can be used as a starting point for integrating the Magic SDK into a web application, where users need to update their email addresses. The example demonstrates how to:\n\n* Update a user's email address with a UI\n* Update a user's email address without showing a UI", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#chunk-29", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nA white-label update email flow is available when passing showUI: false to this method. The white-label flow is only supported in Magic SDK v22.0.0 and above. Here's a short example to illustrate listening for and emitting events during the flow:\n\nshowUI: false\n\nCopy\n\n01\n\nimport\n\n{\n\n01\n\nimport\n\n{\n\n02\n\nMagic\n\n,\n\n02\n\nMagic\n\n,\n\n03\n\nRecencyCheckEventOnReceived\n\n,\n\n03\n\nRecencyCheckEventOnReceived\n\n,\n\n04\n\nRecencyCheckEventEmit\n\n,\n\n04\n\nRecencyCheckEventEmit\n\n,\n\n05\n\nUpdateEmailEventOnReceived\n\n,\n\n05\n\nUpdateEmailEventOnReceived\n\n,\n\n06\n\nUpdateEmailEventEmit\n\n,\n\n06\n\nUpdateEmailEventEmit\n\n,\n\n07\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n07\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n08\n\n08\n\n09\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'API_KEY'\n\n)\n\n;\n\n09\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'API_KEY'\n\n)\n\n;\n\n10\n\n10\n\n11\n\ntry\n\n{\n\n11\n\ntry\n\n{\n\n12\n\n/* Initiates update email flow to update a user's current email to a new one */\n\n12\n\n/* Initiates update email flow to update a user's current email to a new one */\n\n13\n\nconst\n\nhandle\n\n=\n\nawait\n\nmagic\n\n.\n\nauth\n\n.\n\nupdateEmailWithUI\n\n(\n\n{\n\n13\n\nconst\n\nhandle\n\n=\n\nawait\n\nmagic\n\n.\n\nauth\n\n.\n\nupdateEmailWithUI\n\n(\n\n{\n\n14\n\n\u2060    email\n\n:\n\n'new_user_email@example.com'\n\n,\n\n14\n\n\u2060 email\n\n:\n\n'new_user_email@example.com'\n\n,\n\n15\n\nshowUI\n\n:\n\nfalse\n\n,\n\n15\n\nshowUI\n\n:\n\nfalse\n\n,\n\n16\n\n}\n\n)\n\n;\n\n16\n\n}\n\n)\n\n;\n\n17\n\n17\n\n18\n\n/*\n\n18\n\n/*\n\n19\n\nRecency Check Events & Emit\n\n19\n\nRecency Check Events & Emit\n\n20\n\n*/\n\n20\n\n*/\n\n21\n\n21\n\n22\n\nlet\n\nrecencyCheckRetries\n\n=\n\n5\n\n;\n\n22\n\nlet\n\nrecencyCheckRetries\n\n=\n\n5\n\n;\n\n23\n\n23\n\n24\n\nhandle\n\n24\n\nhandle\n\n25\n\n.\n\non\n\n(\n\nRecencyCheckEventOnReceived\n\n.\n\nEmailSent\n\n,\n\n(\n\n)\n\n=>\n\n{\n\n25\n\n.\n\non\n\n(\n\nRecencyCheckEventOnReceived\n\n.\n\nEmailSent\n\n,\n\n(\n\n)\n\n=>\n\n{\n\n26\n\n\u2060\n\n// Email OTP has been sent to the user's primary email\n\n26\n\n\u2060\n\n// Email OTP has been sent to the user's primary email\n\n27\n\n27\n\n28\n\n// Prompt the user for the OTP\n\n28\n\n// Prompt the user for the OTP\n\n29\n\nconst\n\notp\n\n=\n\nwindow\n\n.\n\nprompt\n\n(\n\n'Primary Email OTP'\n\n)\n\n;\n\n29\n\nconst\n\notp\n\n=\n\nwindow\n\n.\n\nprompt\n\n(\n\n'Primary Email OTP'\n\n)\n\n;\n\n30\n\n30\n\n31\n\n// Send the OTP for verification\n\n31\n\n// Send the OTP for verification\n\n32\n\nhandle\n\n.\n\nemit\n\n(\n\nRecencyCheckEventEmit\n\n.\n\nVerifyEmailOtp\n\n,\n\notp\n\n)\n\n;\n\n32\n\nhandle\n\n.\n\nemit\n\n(\n\nRecencyCheckEventEmit\n\n.\n\nVerifyEmailOtp\n\n,\n\notp\n\n)\n\n;\n\n33\n\n}\n\n)\n\n33\n\n}\n\n)\n\n34\n\n.\n\non\n\n(\n\nRecencyCheckEventOnReceived\n\n.\n\nPrimaryAuthFactorVerified\n\n,\n\n(\n\n)\n\n=>\n\n{\n\n34\n\n.\n\non\n\n(\n\nRecencyCheckEventOnReceived\n\n.\n\nPrimaryAuthFactorVerified\n\n,\n\n(\n\n)\n\n=>\n\n{\n\n35\n\nwindow\n\n.\n\nalert\n\n(\n\n'Primary Factor has been verified'\n\n)\n\n;\n\n35\n\nwindow\n\n.\n\nalert\n\n(\n\n'Primary Factor has been verified'\n\n)\n\n;\n\n36\n\n}\n\n)\n\n36\n\n}\n\n)\n\n37\n\n.\n\non\n\n(\n\nRecencyCheckEventOnReceived\n\n.\n\nEmailNotDeliverable\n\n,\n\n(\n\n)\n\n=>\n\n{\n\n37\n\n.\n\non\n\n(\n\nRecencyCheckEventOnReceived\n\n.\n\nEmailNotDeliverable\n\n,\n\n(\n\n)\n\n=>\n\n{\n\n38\n\n// Email OTP was undeliverable to user's primary email\n\n38\n\n// Email OTP was undeliverable to user's primary email\n\n39\n\n39\n\n40\n\n// Cancel update email request\n\n40\n\n// Cancel update email request\n\n41\n\nhandle\n\n.\n\nemit\n\n(\n\nRecencyCheckEventEmit\n\n.\n\nCancel\n\n)\n\n;\n\n41\n\nhandle\n\n.\n\nemit\n\n(\n\nRecencyCheckEventEmit\n\n.\n\nCancel\n\n)\n\n;\n\n42\n\nwindow\n\n.\n\nalert\n\n(\n\n'Email Not Deliverable'\n\n)\n\n;\n\n42\n\nwindow\n\n.\n\nalert\n\n(\n\n'Email Not Deliverable'\n\n)\n\n;\n\n43\n\n}\n\n)\n\n43\n\n}\n\n)\n\n44\n\n.\n\non\n\n(\n\nRecencyCheckEventOnReceived\n\n.\n\nEmailExpired\n\n,\n\n(\n\n)\n\n=>\n\n{\n\n44\n\n.\n\non\n\n(\n\nRecencyCheckEventOnReceived\n\n.\n\nEmailExpired\n\n,\n\n(\n\n)\n\n=>\n\n{\n\n45\n\n// User entered expired OTP\n\n45\n\n// User entered expired OTP\n\n46\n\n46\n\n47\n\nhandle\n\n.\n\nemit\n\n(\n\nRecencyCheckEventEmit\n\n.\n\nCancel\n\n)\n\n;\n\n47\n\nhandle\n\n.\n\nemit\n\n(\n\nRecencyCheckEventEmit\n\n.\n\nCancel\n\n)\n\n;\n\n48\n\nwindow\n\n.\n\nalert\n\n(\n\n'Expired OTP'\n\n)\n\n;\n\n48\n\nwindow\n\n.\n\nalert\n\n(\n\n'Expired OTP'\n\n)\n\n;\n\n49\n\n}\n\n)\n\n49\n\n}\n\n)\n\n50\n\n.\n\non\n\n(\n\nRecencyCheckEventOnReceived\n\n.\n\nInvalidEmailOtp\n\n,\n\n(\n\n)\n\n=>\n\n{\n\n50\n\n.\n\non\n\n(\n\nRecencyCheckEventOnReceived\n\n.\n\nInvalidEmailOtp\n\n,\n\n(\n\n)\n\n=>\n\n{\n\n51\n\n// User entered invalid OTP; you may limit retries and cancel the request\n\n51\n\n// User entered invalid OTP; you may limit retries and cancel the request\n\n52\n\n52\n\n53\n\nif\n\n(\n\n!\n\nrecencyCheckRetries\n\n)\n\n{\n\n53\n\nif\n\n(\n\n!\n\nrecencyCheckRetries\n\n)\n\n{\n\n54\n\n// Cancel update email request\n\n54\n\n// Cancel update email request\n\n55\n\nalert\n\n(\n\n'Too many attempts'\n\n)\n\n;\n\n55\n\nalert\n\n(\n\n'Too many attempts'\n\n)\n\n;\n\n56\n\nhandle\n\n.\n\nemit\n\n(\n\nRecencyCheckEventEmit\n\n.\n\nCancel\n\n)\n\n;\n\n56\n\nhandle\n\n.\n\nemit\n\n(\n\nRecencyCheckEventEmit\n\n.\n\nCancel\n\n)\n\n;\n\n57\n\n}\n\nelse\n\n{\n\n57\n\n}\n\nelse\n\n{\n\n58\n\nconst\n\notp\n\n=\n\nwindow\n\n.\n\nprompt\n\n(\n\n58\n\nconst\n\notp\n\n=\n\nwindow\n\n.\n\nprompt\n\n(\n\n59\n\n`\n\nInvalid code, Please enter OTP again. Retries left:\n\n${\n\nrecencyCheckRetries\n\n}\n\n`\n\n,\n\n59\n\n`\n\nInvalid code, Please enter OTP again. Retries left:\n\n${\n\nrecencyCheckRetries\n\n}\n\n`\n\n,\n\n60\n\n)\n\n;\n\n60\n\n)\n\n;\n\n61\n\nrecencyCheckRetries\n\n--\n\n;\n\n61\n\nrecencyCheckRetries\n\n--\n\n;\n\n62\n\n62\n\n63\n\n// Send the OTP for verification\n\n63\n\n// Send the OTP for verification\n\n64\n\nhandle\n\n.\n\nemit\n\n(\n\nRecencyCheckEventEmit\n\n.\n\nVerifyEmailOtp\n\n,\n\notp\n\n)\n\n;\n\n64\n\nhandle\n\n.\n\nemit\n\n(\n\nRecencyCheckEventEmit\n\n.\n\nVerifyEmailOtp\n\n,\n\notp\n\n)\n\n;\n\n65\n\n}\n\n65\n\n}\n\n66\n\n}\n\n)\n\n;\n\n66\n\n}\n\n)\n\n;\n\n67\n\n67\n\n68\n\n/*\n\n68\n\n/*\n\n69\n\nUpdate Email Events & Emit\n\n69\n\nUpdate Email Events & Emit\n\n70\n\n*/\n\n70\n\n*/\n\n71\n\n71\n\n72\n\nlet\n\nupdateEmailRetries\n\n=\n\n5\n\n;\n\n72\n\nlet\n\nupdateEmailRetries\n\n=\n\n5\n\n;\n\n73\n\n73\n\n74\n\nhandle\n\n74\n\nhandle\n\n75\n\n.\n\non\n\n(\n\nUpdateEmailEventOnReceived\n\n.\n\nEmailSent\n\n,\n\n(\n\n)\n\n=>\n\n{\n\n75\n\n.\n\non\n\n(\n\nUpdateEmailEventOnReceived\n\n.\n\nEmailSent\n\n,\n\n(\n\n)\n\n=>\n\n{\n\n76\n\n\u2060\n\n// Email OTP has been sent to the user's secondary email\n\n76\n\n\u2060\n\n// Email OTP has been sent to the user's secondary email\n\n77\n\n77\n\n78\n\n// Prompt the user for the OTP\n\n78\n\n// Prompt the user for the OTP\n\n79\n\nconst\n\notp\n\n=\n\nwindow\n\n.\n\nprompt\n\n(\n\n'Enter new Email OTP'\n\n)\n\n;\n\n79\n\nconst\n\notp\n\n=\n\nwindow\n\n.\n\nprompt\n\n(\n\n'Enter new Email OTP'\n\n)\n\n;\n\n80\n\n80\n\n81\n\n// Send the OTP for verification\n\n81\n\n// Send the OTP for verification\n\n82\n\nhandle\n\n.\n\nemit\n\n(\n\nUpdateEmailEventEmit\n\n.\n\nVerifyEmailOtp\n\n,\n\notp\n\n)\n\n;\n\n82\n\nhandle\n\n.\n\nemit\n\n(\n\nUpdateEmailEventEmit\n\n.\n\nVerifyEmailOtp\n\n,\n\notp\n\n)\n\n;\n\n83\n\n}\n\n)\n\n83\n\n}\n\n)\n\n84\n\n.\n\non\n\n(\n\nUpdateEmailEventOnReceived\n\n.\n\nInvalidEmail\n\n,\n\n(\n\n)\n\n=>\n\n{\n\n84\n\n.\n\non\n\n(\n\nUpdateEmailEventOnReceived\n\n.\n\nInvalidEmail\n\n,\n\n(\n\n)\n\n=>\n\n{\n\n85\n\n// Email OTP was undeliverable to user's secondary email\n\n85\n\n// Email OTP was undeliverable to user's secondary email\n\n86\n\n86\n\n87\n\nconst\n\nnewEmail\n\n=\n\nwindow\n\n.\n\nprompt\n\n(\n\n'Invalid Email, Enter a new Email'\n\n)\n\n;\n\n87\n\nconst\n\nnewEmail\n\n=\n\nwindow\n\n.\n\nprompt\n\n(\n\n'Invalid Email, Enter a new Email'\n\n)\n\n;\n\n88\n\n88\n\n89\n\n// Try same or new email address\n\n89\n\n// Try same or new email address\n\n90\n\nhandle\n\n.\n\nemit\n\n(\n\n90\n\nhandle\n\n.\n\nemit\n\n(\n\n91\n\nUpdateEmailEventEmit\n\n.\n\nRetryWithNewEmail\n\n,\n\n91\n\nUpdateEmailEventEmit\n\n.\n\nRetryWithNewEmail\n\n,\n\n92\n\nnewEmail\n\n||\n\nemail\n\n,\n\n92\n\nnewEmail\n\n||\n\nemail\n\n,\n\n93\n\n)\n\n;\n\n93\n\n)\n\n;\n\n94\n\n}\n\n)\n\n94\n\n}\n\n)\n\n95\n\n.\n\non\n\n(\n\nUpdateEmailEventOnReceived\n\n.\n\nEmailAlreadyExists\n\n,\n\n(\n\n)\n\n=>\n\n{\n\n95\n\n.\n\non\n\n(\n\nUpdateEmailEventOnReceived\n\n.\n\nEmailAlreadyExists\n\n,\n\n(\n\n)\n\n=>\n\n{\n\n96\n\n// Account already exists for new email address\n\n96\n\n// Account already exists for new email address\n\n97\n\n97\n\n98\n\nconst\n\nnewEmail\n\n=\n\nwindow\n\n.\n\nprompt\n\n(\n\n'Email address already in use, Enter a different Email'\n\n)\n\n;\n\n98\n\nconst\n\nnewEmail\n\n=\n\nwindow\n\n.\n\nprompt\n\n(\n\n'Email address already in use, Enter a different Email'\n\n)\n\n;\n\n99\n\n99\n\n100\n\n// Try same or new email address\n\n100\n\n// Try same or new email address\n\n101\n\nhandle\n\n.\n\nemit\n\n(\n\n101\n\nhandle\n\n.\n\nemit\n\n(\n\n102\n\nUpdateEmailEventEmit\n\n.\n\nRetryWithNewEmail\n\n,\n\n102\n\nUpdateEmailEventEmit\n\n.\n\nRetryWithNewEmail\n\n,\n\n103\n\nnewEmail\n\n||\n\nemail\n\n,\n\n103\n\nnewEmail\n\n||\n\nemail\n\n,\n\n104\n\n)\n\n;\n\n104\n\n)\n\n;\n\n105\n\n}\n\n)\n\n105\n\n}\n\n)\n\n106\n\n.\n\non\n\n(\n\nUpdateEmailEventOnReceived\n\n.\n\nInvalidEmailOtp\n\n,\n\n(\n\n)\n\n=>\n\n{\n\n106\n\n.\n\non\n\n(\n\nUpdateEmailEventOnReceived\n\n.\n\nInvalidEmailOtp\n\n,\n\n(\n\n)\n\n=>\n\n{\n\n107\n\n// User entered invalid OTP; you may limit retries and cancel the request\n\n107\n\n// User entered invalid OTP; you may limit retries and cancel the request\n\n108\n\n108\n\n109\n\nif\n\n(\n\n!\n\nupdateEmailRetries\n\n)\n\n{\n\n109\n\nif\n\n(\n\n!\n\nupdateEmailRetries\n\n)\n\n{\n\n110\n\n// Cancel update email request\n\n110\n\n// Cancel update email request\n\n111\n\nalert\n\n(\n\n'Too many attempts'\n\n)\n\n;\n\n111\n\nalert\n\n(\n\n'Too many attempts'\n\n)\n\n;\n\n112\n\nhandle\n\n.\n\nemit\n\n(\n\nUpdateEmailEventEmit\n\n.\n\nCancel\n\n)\n\n;\n\n112\n\nhandle\n\n.\n\nemit\n\n(\n\nUpdateEmailEventEmit\n\n.\n\nCancel\n\n)\n\n;\n\n113\n\n}\n\nelse\n\n{\n\n113\n\n}\n\nelse\n\n{\n\n114\n\nconst\n\notp\n\n=\n\nwindow\n\n.\n\nprompt\n\n(\n\n114\n\nconst\n\notp\n\n=\n\nwindow\n\n.\n\nprompt\n\n(\n\n115\n\n`\n\nInvalid code, Please enter OTP again. Retries left:\n\n${\n\nupdateEmailRetries\n\n}\n\n`\n\n,\n\n115\n\n`\n\nInvalid code, Please enter OTP again. Retries left:\n\n${\n\nupdateEmailRetries\n\n}\n\n`\n\n,\n\n116\n\n)\n\n;\n\n116\n\n)\n\n;\n\n117\n\nupdateEmailRetries\n\n--\n\n;\n\n117\n\nupdateEmailRetries\n\n--\n\n;\n\n118\n\n118\n\n119\n\n// Send the OTP for verification\n\n119\n\n// Send the OTP for verification\n\n120\n\nhandle\n\n.\n\nemit\n\n(\n\nUpdateEmailEventEmit\n\n.\n\nVerifyEmailOtp\n\n,\n\notp\n\n)\n\n;\n\n120\n\nhandle\n\n.\n\nemit\n\n(\n\nUpdateEmailEventEmit\n\n.\n\nVerifyEmailOtp\n\n,\n\notp\n\n)\n\n;\n\n121\n\n}\n\n121\n\n}\n\n122\n\n}\n\n)\n\n122\n\n}\n\n)\n\n123\n\n.\n\non\n\n(\n\nUpdateEmailEventOnReceived\n\n.\n\nEmailUpdated\n\n,\n\n(\n\n)\n\n=>\n\n{\n\n123\n\n.\n\non\n\n(\n\nUpdateEmailEventOnReceived\n\n.\n\nEmailUpdated\n\n,\n\n(\n\n)\n\n=>\n\n{\n\n124\n\n\u2060\n\n// Update email succcessful\n\n124\n\n\u2060\n\n// Update email succcessful\n\n125\n\n125\n\n126\n\nalert\n\n(\n\n'Email Updated'\n\n)\n\n;\n\n126\n\nalert\n\n(\n\n'Email Updated'\n\n)\n\n;\n\n127\n\n}\n\n)\n\n127\n\n}\n\n)\n\n128\n\n128\n\n129\n\nhandle\n\n129\n\nhandle\n\n130\n\n.\n\non\n\n(\n\n'error'\n\n,\n\n(\n\n)\n\n=>\n\n{\n\n130\n\n.\n\non\n\n(\n\n'error'\n\n,\n\n(\n\n)\n\n=>\n\n{\n\n131\n\n// is called if the Promise rejects\n\n131\n\n// is called if the Promise rejects\n\n132\n\n132\n\n133\n\nalert\n\n(\n\n'Error occurred'\n\n)\n\n;\n\n133\n\nalert\n\n(\n\n'Error occurred'\n\n)\n\n;\n\n134\n\n}\n\n)\n\n;\n\n134\n\n}\n\n)\n\n;\n\n135\n\n135\n\n136\n\nconst\n\nres\n\n=\n\nawait\n\nhandle\n\n;\n\n136\n\nconst\n\nres\n\n=\n\nawait\n\nhandle\n\n;\n\n137\n\nconsole\n\n.\n\nlog\n\n(\n\nres\n\n)\n\n;\n\n137\n\nconsole\n\n.\n\nlog\n\n(\n\nres\n\n)\n\n;\n\n138\n\n138\n\n139\n\n// Can also handle successful email update here\n\n139\n\n// Can also handle successful email update here\n\n140\n\nalert\n\n(\n\n'Email Updated'\n\n)\n\n;\n\n140\n\nalert\n\n(\n\n'Email Updated'\n\n)\n\n;\n\n141\n\n}\n\ncatch\n\n{\n\n141\n\n}\n\ncatch\n\n{\n\n142\n\n// Handle errors if required!\n\n142\n\n// Handle errors if required!\n\n143\n\n}\n\n143\n\n}", "explanation": "The documentation section titled '#Event Handling' is about the handling of events that occur during the Magic Labs embedded wallet update email flow.\n\n**Purpose:**\n\nThe main purpose of event handling in this context is to allow the application to respond to different stages of the update email flow. This includes handling events such as:\n\n* Recency Check Events:\n\t+ `EmailSent`: Sent to the user's primary email\n\t+ `PrimaryAuthFactorVerified`: The user has verified their primary authentication factor\n\t+ `EmailNotDeliverable`: Email is undeliverable to the user's primary email\n\t+ `EmailExpired`: User entered expired OTP\n\t+ `InvalidEmailOtp`: User entered invalid OTP\n* Update Email Events:\n\t+ `EmailSent`: Sent to the user's secondary email\n\t+ `InvalidEmail`: Email is undeliverable or invalid to the user's secondary email\n\t+ `EmailAlreadyExists`: Account already exists for the new email address\n\t+ `InvalidEmailOtp`: User entered invalid OTP\n\t+ `EmailUpdated`: Email update successful\n\n**Key Concepts:**\n\n1. **Event listeners**: The application can listen for different events using methods such as `on()`. This allows the application to respond to specific events in the update email flow.\n2. **Event emitters**: The `emit()` method can be used to emit events from within the update email flow. This allows the application to pass events upwards to the event listeners.\n3. **Retries and cancellations**: The application can handle retries and cancellations of the update email flow by using methods such as `cancel()`, `retryWithNewEmail()`, and `verifyEmailOtp()`.\n4. **Successful and error handling**: The application can handle successful and error scenarios by using methods such as `res` and `error`.\n\n**Example Use Cases:**\n\n1. Display a prompt to the user to enter their OTP when they receive the email\n2. Handle cases where the email is undeliverable or invalid\n3. Cancel the update email request if the user has too many attempts\n4. Verify the user's OTP and update their email address if successful\n5. Handle errors and display an alert to the user.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#chunk-30", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\ufeffRelevant Error Codes\ufeff\n\nRelevant Error Codes\n\nTo achieve a fully white-labeled experience, you will need to implement some custom error handling according to your UI needs. Here's a short example to illustrate how errors can be caught and identified by their code:\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n,\n\nRPCError\n\n,\n\nRPCErrorCode\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n,\n\nRPCError\n\n,\n\nRPCErrorCode\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\n02\n\n03\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'API_KEY'\n\n)\n\n;\n\n03\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'API_KEY'\n\n)\n\n;\n\n04\n\n04\n\n05\n\ntry\n\n{\n\n05\n\ntry\n\n{\n\n06\n\nawait\n\nmagic\n\n.\n\nauth\n\n.\n\nupdateEmailWithUI\n\n(\n\n{\n\nemail\n\n:\n\n'hello@example.com'\n\n,\n\nshowUI\n\n:\n\nfalse\n\n}\n\n)\n\n;\n\n06\n\nawait\n\nmagic\n\n.\n\nauth\n\n.\n\nupdateEmailWithUI\n\n(\n\n{\n\nemail\n\n:\n\n'hello@example.com'\n\n,\n\nshowUI\n\n:\n\nfalse\n\n}\n\n)\n\n;\n\n07\n\n}\n\ncatch\n\n(\n\nerr\n\n)\n\n{\n\n07\n\n}\n\ncatch\n\n(\n\nerr\n\n)\n\n{\n\n08\n\nif\n\n(\n\nerr\n\ninstanceof\n\nRPCError\n\n)\n\n{\n\n08\n\nif\n\n(\n\nerr\n\ninstanceof\n\nRPCError\n\n)\n\n{\n\n09\n\nswitch\n\n(\n\nerr\n\n.\n\ncode\n\n)\n\n{\n\n09\n\nswitch\n\n(\n\nerr\n\n.\n\ncode\n\n)\n\n{\n\n10\n\ncase\n\nRPCErrorCode\n\n.\n\nUpdateEmailFailed\n\n:\n\n10\n\ncase\n\nRPCErrorCode\n\n.\n\nUpdateEmailFailed\n\n:\n\n11\n\n// Handle errors accordingly :)\n\n11\n\n// Handle errors accordingly :)\n\n12\n\nbreak\n\n;\n\n12\n\nbreak\n\n;\n\n13\n\n}\n\n13\n\n}\n\n14\n\n}\n\n14\n\n}\n\n15\n\n}\n\n15\n\n}", "explanation": "**Error Handling in Magic Labs Embedded Wallet Documentation**\n\nThe Error Handling section of the Magic Labs embedded wallet documentation provides guidance on catching and identifying errors that may occur during the use of the Magic SDK (Software Development Kit). Its main purpose is to help developers implement custom error handling to achieve a fully white-labeled experience.\n\n**Relevant Error Codes**\n\nThe documentation introduces the concept of relevant error codes, which are used to identify specific errors that can occur during the use of the Magic SDK. These error codes are grouped under the `RPCErrorCode` enum and can be caught and handled by developers.\n\n**Example Code**\n\nThe provided code snippet demonstrates how to catch and handle errors using the `try-catch` block and the `instanceof` operator. Here's a step-by-step explanation:\n\n1. Import the necessary modules from the `magic-sdk`.\n2. Create a new instance of the `Magic` class.\n3. Attempt to call the `updateEmailWithUI` method on the `auth` property of the `magic` instance.\n4. Catch any errors that may occur during the execution of the `updateEmailWithUI` method.\n5. Check if the caught error is an instance of the `RPCError` class.\n6. If the error is a `RPCError` instance, check the error code using a `switch` statement.\n7. Handle the specific error code as needed.\n\n**Main Purpose**\n\nThe main purpose of this section is to provide developers with the necessary guidance and tools to implement custom error handling in their applications. By catching and identifying relevant error codes, developers can provide a better user experience and improve the overall reliability of their applications.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#chunk-31", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nThe Wallet Module and it's members are accessible on the Magic SDK instance by the wallet property. \u2060 \u2060Note: The Wallet Module is currently only compatible with Ethereum, Polygon, Base, Arbitrum, Optimism, and Flow (no NFTs).\n\nwallet\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\n02\n\n03\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n03\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n04\n\n04\n\n05\n\nmagic\n\n.\n\nwallet\n\n;\n\n05\n\nmagic\n\n.\n\nwallet\n\n;\n\n06\n\nmagic\n\n.\n\nwallet\n\n.\n\nconnectWithUI\n\n;\n\n06\n\nmagic\n\n.\n\nwallet\n\n.\n\nconnectWithUI\n\n;\n\n07\n\nmagic\n\n.\n\nwallet\n\n.\n\nshowUI\n\n;\n\n07\n\nmagic\n\n.\n\nwallet\n\n.\n\nshowUI\n\n;\n\n08\n\nmagic\n\n.\n\nwallet\n\n.\n\nshowAddress\n\n;\n\n08\n\nmagic\n\n.\n\nwallet\n\n.\n\nshowAddress\n\n;\n\n09\n\nmagic\n\n.\n\nwallet\n\n.\n\nshowBalances\n\n;\n\n09\n\nmagic\n\n.\n\nwallet\n\n.\n\nshowBalances\n\n;\n\n10\n\nmagic\n\n.\n\nwallet\n\n.\n\nshowNFTs\n\n;\n\n10\n\nmagic\n\n.\n\nwallet\n\n.\n\nshowNFTs\n\n;\n\n11\n\nmagic\n\n.\n\nwallet\n\n.\n\nshowSendTokensUI\n\n;\n\n11\n\nmagic\n\n.\n\nwallet\n\n.\n\nshowSendTokensUI\n\n;\n\n12\n\nmagic\n\n.\n\nwallet\n\n.\n\nshowOnRamp\n\n;\n\n// enterprise only\n\n12\n\nmagic\n\n.\n\nwallet\n\n.\n\nshowOnRamp\n\n;\n\n// enterprise only\n\n13\n\nmagic\n\n.\n\nwallet\n\n.\n\ngetProvider\n\n;\n\n13\n\nmagic\n\n.\n\nwallet\n\n.\n\ngetProvider\n\n;\n\n#\n\nconnectWithUI\n\nRenders a simple login form UI to collect the user's email address and authenticate them passwordlessly using a one-time passcode (OTP) sent to their email address they input.\n\n#\n\n\u2022 None", "explanation": "**#connectWithUI Overview**\n\nThe `connectWithUI` method is a part of the Wallet Module in the Magic SDK. It renders a simple login form UI that collects the user's email address and authenticates them passwordlessly using a one-time passcode (OTP) sent to their email address.\n\n**Functionality**\n\nThe `connectWithUI` method performs the following actions:\n\n1. Collects the user's email address through a login form UI.\n2. Sends a one-time passcode (OTP) to the user's email address.\n3. Authenticates the user using the OTP, eliminating the need for a password.\n\n**Purpose**\n\nThe main purpose of the `connectWithUI` method is to provide a secure and passwordless authentication experience for users, using the Magic Wallet Module. This method is ideal for applications that require fast and frictionless login experiences.\n\n**Compatibility and Limitations**\n\nThe `connectWithUI` method is currently only compatible with the following blockchain networks:\n\n- Ethereum\n- Polygon\n- Base\n- Arbitrum\n- Optimism\n- Flow\n\nNote that NFTs are not supported at this time.\n\n**Usage**\n\nTo use the `connectWithUI` method, you need to access the Wallet Module through the Magic SDK instance, and then call the `connectWithUI` method on the Wallet object. The exact code snippet is included in the provided documentation.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#chunk-32", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 A promiEvent which returns an String[] when resolved: An array of user accounts that are connected, with the first element being the current public address of the user. You can read more on PromiEvents here.\n\npromiEvent\n\nString[]\n\nhere", "explanation": "**Returns:**\n\nThe **Returns** section in the Magic Labs embedded wallet documentation explains what happens after a user account is connected using the Magic Sdk.\n\n**Main Purpose:**\n\nIt returns an array of connected user accounts, including the current public address of the user. \n\n**Key Details:**\n\n- It returns an array of type `String[]`.\n- The array is returned as a `promiEvent`, which is used in asynchronous programming.\n- The first element of the array is always the current public address of the user.\n- Additional connected user accounts can be found in the subsequent elements of the array.\n\nIn summary, the **Returns** section provides information about the outcome of connecting a user account and the public address associated with that account.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#chunk-33", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n\"magic-sdk\"\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n\"magic-sdk\"\n\n02\n\n02\n\n03\n\nconst\n\naccounts\n\n=\n\nawait\n\nmagic\n\n.\n\nwallet\n\n.\n\nconnectWithUI\n\n(\n\n)\n\n;\n\n03\n\nconst\n\naccounts\n\n=\n\nawait\n\nmagic\n\n.\n\nwallet\n\n.\n\nconnectWithUI\n\n(\n\n)\n\n;\n\n04\n\n\u2060\n\n04\n\n\u2060\n\n05\n\n/* Optionally, chain to the id token creation event if needed and configured (Universal Wallets only) */\n\n05\n\n/* Optionally, chain to the id token creation event if needed and configured (Universal Wallets only) */\n\n06\n\nmagic\n\n.\n\nwallet\n\n.\n\nconnectWithUI\n\n(\n\n)\n\n.\n\non\n\n(\n\n'id-token-created'\n\n,\n\n(\n\nparams\n\n)\n\n=>\n\n{\n\n06\n\nmagic\n\n.\n\nwallet\n\n.\n\nconnectWithUI\n\n(\n\n)\n\n.\n\non\n\n(\n\n'id-token-created'\n\n,\n\n(\n\nparams\n\n)\n\n=>\n\n{\n\n07\n\nconst\n\n{\n\nidToken\n\n}\n\n=\n\nparams\n\n07\n\nconst\n\n{\n\nidToken\n\n}\n\n=\n\nparams\n\n08\n\nconsole\n\n.\n\nlog\n\n(\n\nidToken\n\n)\n\n08\n\nconsole\n\n.\n\nlog\n\n(\n\nidToken\n\n)\n\n09\n\n// send to your resource server for validation\n\n09\n\n// send to your resource server for validation\n\n10\n\n// ...\n\n10\n\n// ...\n\n11\n\n}\n\n)\n\n;\n\n11\n\n}\n\n)\n\n;", "explanation": "**Example Overview**\n\nThis documentation section provides an example code snippet for establishing a connection to Magic Labs' embedded wallet using the Magic SDK for web applications.\n\n**Key Points:**\n\n1. **Importing the Magic SDK**: The code imports the Magic library from the \"magic-sdk\" and initializes it.\n2. **Connecting to the wallet**: The `connectWithUI()` method is called to establish a connection to the Magic Labs' wallet using a UI-driven approach.\n3. **Chaining to id token creation event**: For Universal Wallets, the code optionally chains a callback function to the id token creation event, typically used for authentication purposes.\n4. **Handling id token creation event**: When an id token is created, the callback function extracts the id token from the event parameters and logs it to the console.\n5. **Sending the id token to the resource server for validation**: This is a common step in the authentication flow, where the received id token is sent to the resource server for validation.\n\n**Main Purpose:**\n\nThe example code demonstrates how to:\n\n1. Connect to Magic Labs' embedded wallet using the Magic SDK.\n2. Optionally chain a callback function to the id token creation event for handling authentication scenarios.\n3. Send the received id token to the resource server for validation.\n\nThis example code serves as a starting point for integrating the Magic Labs' embedded wallet into web applications, particularly those that require authentication and authorization mechanisms.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#chunk-34", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nThe id-token-created event is only emitted for Universal Wallet apps. To generate a DID token for a Dedicated Wallet app, please use getIdToken.\n\ngetIdToken\n\nEvent Name\n\nDefinition\n\nid-token-created\n\nid-token-created\n\nReturns an object containing a short lived, time bound ID token that can be used to verify the ownership of a user's wallet address on login.\n\nRead more about this token and how to use it.\n\nRead more", "explanation": "Based on the provided documentation, the '#Events' section specifically mentions the 'id-token-created' event, which is designed for Universal Wallet apps. However, for Dedicated Wallet apps, the getIdToken method is recommended to be used instead.\n\nThe main purpose of the 'id-token-created' event (or getIdToken method in Dedicated Wallet apps) is to generate a short-lived, time-bound Identity Token (ID token). This token can be used to verify the ownership of a user's wallet address on login. The ID token is essential for authenticating users and ensuring only authorized individuals can access a user's account.\n\nIn simpler terms, the ID token serves as a secure way to confirm a user's identity and prevent unauthorized access, which is a crucial aspect of login security.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#chunk-35", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nshowUI\n\nDisplays the fully navigable wallet to the user that adheres to the toggled configurations on your developer dashboard\u2019s Widget UI tab. \u2060 \u2060This is only supported for users who login with email or Google and not third party wallets such as metamask. User must be signed in for this method to return or else it will throw an error.\n\nnavigable wallet\n\n#\n\n\u2022 None", "explanation": "The `#showUI` section from the Magic Labs embedded wallet documentation deals with displaying a fully interactive and navigable wallet user interface to end-users. Here's a concise explanation:\n\n**Purpose:** The main purpose of `#showUI` is to provide users with a complete, accessible, and interactive wallet interface that adheres to the toggle configurations set on the Magic dashboard's Widget UI tab. \n\n**Key Points:**\n\n- This feature is supported for users logging in with email or Google, not for third-party wallets like MetaMask.\n- Users must be signed in for this method to work; otherwise, it will throw an error.\n   - This means, before calling `#showUI`, we need to ensure the user is authenticated to the Magic platform.\n\nThis approach simplifies the development process for embedded wallets by automatically displaying a user-friendly interface while maintaining the security and consistency of the configuration set in the Magic dashboard.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#chunk-36", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 Promise which resolves when the user closes the window\n\nPromise\n\n\u2060Optionally, add a .on() handler to catch the disconnect event emitted when the user logs out from the wallet widget.\n\n.on()\n\ndisconnect", "explanation": "The '#Returns' section in the Magic Labs embedded wallet documentation is about two return values:\n\n1. **Promise**: This return value resolves when the user closes the window containing the wallet widget. It indicates that the wallet is no longer accessible.\n\n2. **.on('disconnect')**: This is an optional event handler that can be added to catch the 'disconnect' event. The event is emitted when the user logs out from the wallet widget. This allows your application to execute specific actions when a user logs out, such as clearing session data or displaying a login prompt.\n\nIn summary, the main purpose of the '#Returns' section is to explain how your application can react to two specific events: when the user closes the window (the promise resolves) and when the user logs out from the wallet widget (the 'disconnect' event is emitted).", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#chunk-37", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\n02\n\n03\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n03\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n04\n\n04\n\n05\n\nawait\n\nmagic\n\n.\n\nwallet\n\n.\n\nshowUI\n\n(\n\n)\n\n05\n\nawait\n\nmagic\n\n.\n\nwallet\n\n.\n\nshowUI\n\n(\n\n)", "explanation": "**Example Explanation:**\n\nThe provided documentation section titled '#Example' appears to be a code snippet demonstrating how to integrate the Magic Labs embedded wallet using the Magic SDK in a web application.\n\n**Main Purpose:**\n\nThe main purpose of this example is to showcase the basic usage of the Magic SDK to display the Magic Labs embedded wallet in a web application.\n\n**Step-by-Step Breakdown:**\n\n1. **Importing the Magic SDK**: The example imports the Magic SDK, which provides the functionality to integrate the Magic Labs embedded wallet.\n2. **Initializing the Magic SDK**: A new instance of the Magic SDK is created by passing the PUBLISHABLE_API_KEY, which is a unique key provided by Magic Labs.\n3. **Displaying the embedded wallet**: The `showUI` method is called on the Magic SDK instance to display the Magic Labs embedded wallet.\n\n**Key Takeaways:**\n\n* The PUBLISHABLE_API_KEY is a crucial component, as it allows the Magic Labs embedded wallet to function correctly.\n* The `showUI` method is used to display the embedded wallet in the web application.\n* This example provides a basic starting point for integrating the Magic Labs embedded wallet in a web application.\n\nAs a customer service engineer, I would use this example to explain the basics of integrating the Magic SDK with the Magic Labs embedded wallet to our customers.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#chunk-38", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nshowAddress\n\nDisplays an iframe with the current user\u2019s wallet address in a QR Code.\n\n#\n\n\u2022 None", "explanation": "In the context of the Magic Labs embedded wallet documentation, the `#showAddress` section is related to displaying a user's wallet address in a QR code within an iframe.\n\nThe main purpose of `#showAddress` is to:\n\n1. Display a user's wallet address to their web application (in a seamless and visually engaging way).\n2. Allow users to scan the QR code with their preferred mobile wallet, such as MetaMask, Trust Wallet, or other supported wallets, to quickly view or interact with their wallet address.\n\nThis feature makes user identification more streamlined and intuitive within web applications that utilize Magic Labs embedded wallets.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#chunk-39", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 Promise which resolves when the user closes the window\n\nPromise", "explanation": "The '#Returns' section in the Magic Labs embedded wallet documentation explains what the function returns when it's triggered, in this instance an event to handle an action: closure of the window.\n\nThe main purpose here is to inform developers of the expected outcome following a specific user action so they can properly respond. This helps developers integrate the functionality into their application and creates an informative environment that does so by ensuring a knowledge infrastructure for building such integration.\n\n\nIn this specific case, it seems as though the returned type is a \"Promise\", which is a result of an asynchronous code in JavaScript. Promises indicate if an operation has been completed or is pending. In this instance, this means that when the user closes the window, the returned Promise is expected to be resolved.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#chunk-40", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\n02\n\n03\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n03\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n04\n\n04\n\n05\n\nawait\n\nmagic\n\n.\n\nwallet\n\n.\n\nshowAddress\n\n(\n\n)\n\n05\n\nawait\n\nmagic\n\n.\n\nwallet\n\n.\n\nshowAddress\n\n(\n\n)", "explanation": "**#Example Section Overview**\n\nThe given code snippet is taken from the Magic Labs Client-Side SDK documentation for Web applications. It serves as a basic example to illustrate how to use the Magic SDK to interact with an embedded wallet.\n\n**Key Points and Purpose**\n\nThis code snippet demonstrates the following key points:\n\n1. **Importing the Magic SDK**: The code imports the `Magic` class from the `magic-sdk` module.\n2. **Initializing the Magic Instance**: It creates a new instance of the `Magic` class, passing in a publishable API key.\n3. **Displaying the Wallet Address**: It uses the `wallet.showAddress()` method to display the wallet address, which is an essential feature of the embedded wallet.\n\n**Main Purpose**\n\nThe main purpose of this example code is to provide a basic template for developers to integrate Magic SDK into their web applications, specifically to utilize the features of the embedded wallet. This allows developers to create seamless user experiences for wallet management, including displaying user wallet addresses.\n\n**Note**: In a real-world scenario, you would replace `'PUBLISHABLE_API_KEY'` with your actual publishable API key. Additionally, the `wallet.showAddress()` method may require additional setup or configuration depending on your specific use case.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#chunk-41", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nshowBalances\n\nDisplays an iframe that displays the user\u2019s token balances from the currently connected network.\n\n#\n\n\u2022 None", "explanation": "## #showBalances - #Arguments\n\nThe `#showBalances` documentation section is about a specific functionality within the Magic Labs embedded wallet SDK.\n\n### Main Purpose:\n\nThe main purpose of `#showBalances` is to display an iframe that shows the user's token balances for the currently connected network.\n\n### Key Points:\n\n- This functionality does not require any arguments to function.\n- It provides users with a clear view of their token balances, facilitating better wallet management and interaction within the Magic Labs embedded wallet.\n\nHowever, I was not able to find any further specification on this method however this is supposed to be a feature available on the Magic Labs wallet SDK as part of the web implementation, for more detailed information I would recommend consulting the official documentation https://magic.link/docs/api/client-side-sdks/web", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#chunk-42", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 Promise which resolves when the user closes the window\n\nPromise", "explanation": "In the Magic Labs Embedded Wallet documentation, the '#Returns' section is describing what the function or operation returns when it's executed.\n\nIn this specific case, the operation is implied to be closing the user's wallet window, which returns a 'Promise' object.\n\nA 'Promise' is a result returned by an asynchronous operation, and it can be either resolved (fulfilled) or rejected (failed).\n\nIn this scenario, the Promise is said to resolve when the user closes the wallet window. This means that when the user closes the wallet, the operation that triggered the closing action is considered complete, and a resolved Promise is returned, indicating that the operation was successful.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#chunk-43", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\n02\n\n03\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n03\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n04\n\n04\n\n05\n\nawait\n\nmagic\n\n.\n\nwallet\n\n.\n\nshowBalances\n\n(\n\n)\n\n05\n\nawait\n\nmagic\n\n.\n\nwallet\n\n.\n\nshowBalances\n\n(\n\n)", "explanation": "**Example Section**\n\nThe Example section in the Magic Labs embedded wallet documentation demonstrates how to use the Magic SDK to interact with the wallet functionality. This section provides a code snippet that showcases the key points of integrating the Magic wallet into a client-side web application.\n\n**Main Purpose**\n\nThe main purpose of this Example section is to:\n\n1. **Initialize the Magic wallet instance**: Import the Magic SDK and create a new instance of the Magic wallet with a Publishable API Key.\n2. **Display wallet balances**: Use the `showBalances()` method to retrieve and display the user's wallet balances.\n\n**Key Takeaways**\n\n* The example code initializes the Magic wallet instance with a Publishable API Key.\n* The `showBalances()` method is used to fetch the user's wallet balances, but the method itself is commented out to prevent errors (the line is broken to prevent execution errors at runtime)\n* This example provides a basic starting point for integrating the Magic wallet into a web application.\n\n**Context**\n\nThis example is typically used by developers to understand the basic flow of interacting with the Magic wallet and to get started with building their own applications. It serves as a starting point for more advanced integrations and use cases.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#chunk-44", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nshowNFTs\n\nDisplays an iframe that shows the user\u2019s NFTs in both an aggregated and detailed individual view. Supported only on Ethereum and Polygon. Ensure this is enabled in your developer dashboard via the \u2018Widget UI\u2019 tab.\n\n#\n\n\u2022 None", "explanation": "The `showNFTs` API is a feature from Magic Labs' embedded wallet documentation. It allows users to display their NFTs (Non-Fungible Tokens) in both a summarized and detailed view within an iframe. \n\nThe main purpose of the `showNFTs` API is to provide a user-friendly interface for users to easily view and manage their NFTs. This feature is currently supported on the Ethereum and Polygon networks.\n\nThis API can be enabled in the Magic Labs developer dashboard via the 'Widget UI' tab. However, beyond that, the documentation doesn't provide additional configuration details.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#chunk-45", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 Promise which resolves when the user closes the window\n\nPromise", "explanation": "Based on the #Returns section of the Magic Labs embedded wallet documentation from https://magic.link/docs/api/client-side-sdks/web, I can explain what it is about and its main purpose as follows:\n\n**Returns:**\nThe `#Returns` section is about the response or output a function returns after executing its code. In this case, it is describing what a promise will resolve into.\n\n**Promise which resolves when the user closes the window:**\nThis line indicates that when the user closes the window (i.e., exits the tab or browser), a promise will be resolved. In other words, if a user interacts with the wallet and then closes the window, the API will return a promise that is fulfilled (or resolved) with some output, which is not specified in this snippet.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#chunk-46", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\n02\n\n03\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n03\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n04\n\n04\n\n05\n\nawait\n\nmagic\n\n.\n\nwallet\n\n.\n\nshowNFTs\n\n(\n\n)\n\n05\n\nawait\n\nmagic\n\n.\n\nwallet\n\n.\n\nshowNFTs\n\n(\n\n)", "explanation": "**Example Overview**\n\nThe example is a code snippet written in JavaScript that demonstrates how to use the Magic Labs embedded wallet, a feature of the Magic SDK (Software Development Kit). It shows how to create a Magic instance, display the user's NFTs (Non-Fungible Tokens), and utilize the Magic wallet.\n\n**Main Purpose**\n\nThe primary purpose of this example is to illustrate the basic usage of the Magic Labs embedded wallet. It serves as a starting point for developers to learn and understand how to integrate the Magic wallet into their web applications.\n\n**Breakdown of the Example**\n\nHere's a step-by-step explanation of the code:\n\n1. **Importing the Magic SDK**: The code imports the Magic SDK using `import { Magic } from 'magic-sdk';`.\n2. **Creating a Magic instance**: A new Magic instance is created using the `PUBLISHABLE_API_KEY` key, which is obtained from the Magic dashboard. The instance is assigned to the `magic` variable.\n3. **Displaying the user's NFTs**: The `showNFTs()` method is called on the `magic.wallet` object, which displays the user's NFTs.\n\n**Key Takeaways**\n\n* This example demonstrates the basic setup for using the Magic Labs embedded wallet.\n* It shows how to create a Magic instance using a publishable API key.\n* The `showNFTs()` method is used to display the user's NFTs.\n\nNote that this example assumes that the Magic Labs embedded wallet is already integrated into the web application, and this code snippet is used to access the wallet functionality.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#chunk-47", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nshowSendTokensUI\n\nDisplays an iframe with UI to help the user transfer tokens from their account to another address.\n\n#\n\n\u2022 None", "explanation": "The `#showSendTokensUI` function appears to be a part of the Magic Labs embedded wallet documentation, specifically designed for web-based applications.\n\n**Purpose:**\nThe main purpose of `#showSendTokensUI` is to display an interactive user interface (UI) within an iframe. This UI helps users transfer tokens from their Magic Labs wallet to another recipient's address.\n\n**Key Aspect:**\nThe UI allows users to easily initiate and complete token transfers, making it a convenient feature for applications that require secure and wallet-based transactions.\n\n**Call:**\nThere are no arguments required to call `#showSendTokensUI`, as mentioned in the provided documentation (`#Arguments: \u2022 None`). This function can be invoked directly to display the token transfer UI to the user.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#chunk-48", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 Promise which resolves when the user closes the window\n\nPromise", "explanation": "The '#Returns' section in the Magic Labs embedded wallet documentation explains the return value of the Promise resolved when the user closes the wallet window.\n\n**Main Purpose:**\n\nIts primary purpose is to inform developers that when the wallet window is closed by the user, the Magic Labs API returns a Promise, which can be utilized to handle the scenario when the wallet window is closed.\n\n**In Simple Terms:**\n\nWhen the user closes the wallet window, the Magic Labs API informs the developers through a resolved Promise. This allows developers to write special code to handle situations like when the wallet window is closed, such as updating the application's UI or performing other necessary actions.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#chunk-49", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\n02\n\n03\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n03\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n04\n\n04\n\n05\n\nawait\n\nmagic\n\n.\n\nwallet\n\n.\n\nshowSendTokensUI\n\n(\n\n)\n\n05\n\nawait\n\nmagic\n\n.\n\nwallet\n\n.\n\nshowSendTokensUI\n\n(\n\n)", "explanation": "**Section: '#Example'**\n\nThe '#Example' section of the Magic Labs embedded wallet documentation provides a code snippet demonstrating how to integrate the Magic SDK into a web application.\n\n**Main Purpose:**\n\nThe main purpose of this section is to serve as a reference implementation or a starting point for developers who want to use the Magic wallet in their web application. The example code snippet shows how to:\n\n1. Import the Magic SDK\n2. Initialize the Magic instance with a publishable API key\n3. Show the send tokens UI using the Magic wallet\n\n**Key Takeaways:**\n\n- The example uses the Magic SDK and creates a new instance of the Magic class, passing in a publishable API key as a parameter.\n- It then calls the `showSendTokensUI` method on the wallet object to display the send tokens UI.\n\n**Context:**\n\nThis code snippet is likely intended to be used in a web application that needs to interact with the Magic wallet. It could be used as a starting point for implementing features like sending tokens, configuring the wallet, or handling user interactions with the wallet. However, the context of the application is not specified in the provided code snippet, so the exact implementation details may vary depending on the specific requirements.\n\n**Note:**\n\nThe code snippet contains some repeated lines, which may be an error or an attempt to highlight specific parts of the code. The documentation may have been generated with code completion features, resulting in duplicated imports and instance creations.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#chunk-50", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nshowOnRamp\n\nDisplays an iframe modal with various on ramp providers for the user to purchase crypto from directly to their wallet.\n\nTo use the fiat on ramp for Dedicated Wallet apps, you will need to contact us to KYB with the payment provider prior to use. Once approved, ensure this toggle is enabled in your developer dashboard via the \u2018Widget UI\u2019 tab.\n\n#\n\n\u2022 None", "explanation": "Based on the provided documentation section, `#showOnRamp` is a function used in Magic's client-side SDK for web applications. Its main purpose is to display a modal window with various on-ramp providers (companies that allow users to purchase cryptocurrency using fiat currency, such as a credit card or bank transfer).\n\nThe `#showOnRamp` function essentially acts as a bridge between the user's Magic wallet and the on-ramp providers, allowing users to purchase cryptocurrencies directly into their Magic wallet.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#chunk-51", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 Promise which resolves when the user closes the window\n\nPromise", "explanation": "**Returns**\n\nThe 'Returns' section in the Magic Labs embedded wallet documentation explains the expected output of a function or operation.\n\n**Main Purpose:**\n\nThe main purpose of the 'Returns' section is to provide information about what data or result is returned by the function, specifically in this case, when the user closes the wallet window.\n\n**Single Return Value:**\n\nIt states that the 'Returns' promise resolves when the user closes the window. This implies that the function or operation being referenced is related to handling the wallet window closure event, and when this event occurs, the promise resolves, indicating the operation is complete.\n\nIn essence, the 'Returns' section serves as a clear documentation of the function's output and behavior in response to the user closing the wallet window.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#chunk-52", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\n02\n\n03\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n03\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n04\n\n04\n\n05\n\nawait\n\nmagic\n\n.\n\nwallet\n\n.\n\nshowOnRamp\n\n(\n\n)\n\n05\n\nawait\n\nmagic\n\n.\n\nwallet\n\n.\n\nshowOnRamp\n\n(\n\n)", "explanation": "**Summary:**\n\nThe provided code snippet is an example from the Magic Labs documentation, titled '#Example'. It demonstrates how to use the Magic Labs embedded wallet to show a cryptocurrency on-ramp (a feature that allows users to purchase cryptocurrencies with traditional currencies) using the web SDK.\n\n**Main Purpose:**\n\nThe main purpose of this code snippet is to illustrate the basic usage of the Magic Labs embedded wallet in a web application. It showcases how to initialize the wallet, and then prompt the user to display the on-ramp, allowing them to purchase cryptocurrencies seamlessly.\n\n**Key Points:**\n\n1. Importing the Magic Labs SDK: The code imports the Magic Labs SDK and uses it to create an instance of the Magic wallet.\n2. Initializing the Magic wallet: The code initializes the Magic wallet using a publishable API key, which is a publicly accessible key provided by Magic Labs.\n3. Displaying the on-ramp: The code uses the `showOnRamp` method to prompt the user to display the on-ramp, allowing them to purchase cryptocurrencies.\n\n**Note:**\n\nThe duplicated lines of code in the example are likely a mistake in the documentation, and they should be removed.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#chunk-53", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\ngetProvider\n\nThis method is introduced in magic-sdk@17.0.0 and must be used to get the current provider if third party wallets are enabled. If not using third party wallets, we suggest using magic.rpcProvider.\n\nmagic-sdk@17.0.0\n\nmagic.rpcProvider\n\n#\n\n\u2022 None", "explanation": "The `getProvider` method is a feature introduced in the Magic SDK version 17.0.0. Its main purpose is to retrieve the current provider when third-party wallets are enabled. \n\nIn simpler terms, if a user has connected a third-party wallet (not a native Magic wallet), this method is used to access and communicate with that connected wallet. \n\nIf third-party wallets are not being used, it is recommended to use `magic.rpcProvider` instead, which is a more general-purpose method for interacting with the Magic network.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#chunk-54", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 Object: The rpc provider of the wallet a user is currently logged in with (MetaMask, Coinbase Wallet or Magic)\n\nObject\n\nImportant: To ensure rpc requests are routed to the correct wallet, developers must re-fetch the provider object using getProvider() and re-initialize the web3.js or ethers.js instance any time a user logs in, logs out, or disconnects their wallet.\n\ngetProvider()", "explanation": "The '#Returns' section in the Magic Labs documentation is about the 'rpcProvider' object returned from the `getProvider()` function. The main purpose of this section is to explain what this object is and why it's essential to re-fetch it after certain events occur.\n\n**What is the rpcProvider object?**\n\nThe `rpcProvider` object represents the RPC (Remote Procedure Call) provider of the wallet a user is currently logged in with. This can be one of the following:\n\n- MetaMask\n- Coinbase Wallet\n- Magic\n\n**Why is re-fetching the provider object crucial?**\n\nWhen a user logs in, logs out, or disconnects their wallet, the wallet provider changes. To ensure rpc requests are routed to the correct wallet, it's essential to re-fetch the provider object using `getProvider()` and re-initialize the web3.js or ethers.js instance. This helps maintain a secure and correct connection to the wallet, preventing potential issues and errors.\n\nIn summary, the `rpcProvider` object is a crucial component that ensures seamless communication between the wallet provider and the web application. Re-fetching it after significant wallet events ensures the correct wallet provider is used, maintaining security and integrity.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#chunk-55", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n\"magic-sdk\"\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n\"magic-sdk\"\n\n02\n\nimport\n\nWeb3\n\nfrom\n\n'web3'\n\n;\n\n02\n\nimport\n\nWeb3\n\nfrom\n\n'web3'\n\n;\n\n03\n\n03\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n,\n\n{\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n,\n\n{\n\n05\n\nnetwork\n\n:\n\n\"goerli\"\n\n,\n\n05\n\nnetwork\n\n:\n\n\"goerli\"\n\n,\n\n06\n\n}\n\n)\n\n;\n\n06\n\n}\n\n)\n\n;\n\n07\n\n07\n\n08\n\nconst\n\nprovider\n\n=\n\nawait\n\nmagic\n\n.\n\nwallet\n\n.\n\ngetProvider\n\n(\n\n)\n\n;\n\n08\n\nconst\n\nprovider\n\n=\n\nawait\n\nmagic\n\n.\n\nwallet\n\n.\n\ngetProvider\n\n(\n\n)\n\n;\n\n09\n\n09\n\n10\n\nconst\n\nweb3\n\n=\n\nnew\n\nWeb3\n\n(\n\nprovider\n\n)\n\n;\n\n10\n\nconst\n\nweb3\n\n=\n\nnew\n\nWeb3\n\n(\n\nprovider\n\n)\n\n;\n\n11\n\n11\n\n12\n\nconst\n\naccounts\n\n=\n\nawait\n\nmagic\n\n.\n\nwallet\n\n.\n\nconnectWithUI\n\n(\n\n)\n\n;\n\n12\n\nconst\n\naccounts\n\n=\n\nawait\n\nmagic\n\n.\n\nwallet\n\n.\n\nconnectWithUI\n\n(\n\n)\n\n;\n\n13\n\n13\n\n14\n\n// Listen for events\n\n14\n\n// Listen for events\n\n15\n\nweb3\n\n.\n\ncurrentProvider\n\n.\n\non\n\n(\n\n'accountsChanged'\n\n,\n\nhandleAccountsChanged\n\n)\n\n;\n\n15\n\nweb3\n\n.\n\ncurrentProvider\n\n.\n\non\n\n(\n\n'accountsChanged'\n\n,\n\nhandleAccountsChanged\n\n)\n\n;\n\n16\n\nweb3\n\n.\n\ncurrentProvider\n\n.\n\non\n\n(\n\n'chainChanged'\n\n,\n\nhandleChainChanged\n\n)\n\n;\n\n16\n\nweb3\n\n.\n\ncurrentProvider\n\n.\n\non\n\n(\n\n'chainChanged'\n\n,\n\nhandleChainChanged\n\n)\n\n;", "explanation": "This documentation section is about integrating Web3.js and Ethers.js with the Magic Labs embedded wallet, which is a client-side SDK for wallet authentication and decentralized identity management. \n\nHere's a clear and concise explanation of the main purpose and steps involved:\n\n**Main Purpose:**\n\nThe purpose of this section is to showcase how to use the Magic Labs embedded wallet in conjunction with Web3.js or Ethers.js libraries to create a user-friendly web3 experience. The goal is to enable users to connect their Ethereum wallet (currently supporting Metamask and Magic apps) and interact with decentralized applications (dApps) securely.\n\n**Step-by-Step Explanation:**\n\n1. Import the necessary libraries: The code imports the `Magic` and `Web3` libraries.\n2. Initialize the Magic wallet: The code creates an instance of the `Magic` wallet, specifying the publishable API key and network settings (`goerli` in this case).\n3. Get the wallet provider: The code uses the `getProvider()` method to obtain a Web3 provider for the Magic wallet.\n4. Create a Web3 instance: The code creates a new instance of the Web3 library, passing the provider obtained in the previous step.\n5. Connect the wallet: The code uses the `connectWithUI()` method to prompt the user to connect their Ethereum wallet (e.g., Metamask or Magic app).\n6. Listen for events: The code sets up event listeners for changes in the user's accounts and chain network using the Web3 provider's `on()` method.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#chunk-56", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nThe User Module and it's members are accessible on the Magic SDK instance by the user property.\n\nuser\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\n02\n\n03\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n03\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n04\n\n04\n\n05\n\nmagic\n\n.\n\nuser\n\n;\n\n05\n\nmagic\n\n.\n\nuser\n\n;\n\n06\n\nmagic\n\n.\n\nuser\n\n.\n\ngetIdToken\n\n;\n\n06\n\nmagic\n\n.\n\nuser\n\n.\n\ngetIdToken\n\n;\n\n07\n\nmagic\n\n.\n\nuser\n\n.\n\ngenerateIdToken\n\n;\n\n07\n\nmagic\n\n.\n\nuser\n\n.\n\ngenerateIdToken\n\n;\n\n08\n\nmagic\n\n.\n\nuser\n\n.\n\ngetInfo\n\n;\n\n08\n\nmagic\n\n.\n\nuser\n\n.\n\ngetInfo\n\n;\n\n09\n\nmagic\n\n.\n\nuser\n\n.\n\nisLoggedIn\n\n;\n\n09\n\nmagic\n\n.\n\nuser\n\n.\n\nisLoggedIn\n\n;\n\n10\n\nmagic\n\n.\n\nuser\n\n.\n\nlogout\n\n;\n\n10\n\nmagic\n\n.\n\nuser\n\n.\n\nlogout\n\n;\n\n11\n\nmagic\n\n.\n\nuser\n\n.\n\nshowSettings\n\n;\n\n11\n\nmagic\n\n.\n\nuser\n\n.\n\nshowSettings\n\n;\n\n12\n\nmagic\n\n.\n\nuser\n\n.\n\nenableMFA\n\n;\n\n12\n\nmagic\n\n.\n\nuser\n\n.\n\nenableMFA\n\n;\n\n13\n\nmagic\n\n.\n\nuser\n\n.\n\ndisableMFA\n\n;\n\n13\n\nmagic\n\n.\n\nuser\n\n.\n\ndisableMFA\n\n;\n\n14\n\nmagic\n\n.\n\nuser\n\n.\n\nrevealPrivateKey\n\n;\n\n14\n\nmagic\n\n.\n\nuser\n\n.\n\nrevealPrivateKey\n\n;\n\n15\n\nmagic\n\n.\n\nuser\n\n.\n\nrequestInfoWithUI\n\n;\n\n15\n\nmagic\n\n.\n\nuser\n\n.\n\nrequestInfoWithUI\n\n;\n\n#\n\ngetIdToken\n\nGenerates a Decentralized Id Token which acts as a proof of authentication to resource servers.\n\nDecentralized Id Token\n\nOnly available with Dedicated Wallet.\n\n#\n\n\u2022 lifespan? (Number): Will set the lifespan of the generated token. Defaults to 900s (15 mins)\n\nlifespan?", "explanation": "**getIdToken Explanation:**\n\nThe `getIdToken` method is a part of the Magic Labs User Module, which is accessible on the Magic SDK instance through the `user` property. Its main purpose is to generate a Decentralized Id Token (DTN) as a proof of authentication that can be used to verify a user's identity with resource servers.\n\n**Key Features:**\n\n- **Decentralized Id Token:** The generated token serves as a secure, decentralized proof of authentication that can be used to access protected resources without relying on centralized identity management systems.\n- **Lifespan:** The token's validity period can be customized with an optional `lifespan` parameter, with a default value of 900 seconds (15 minutes).\n\n**Usage Example:**\n\n```javascript\nconst magic = new Magic('PUBLISHABLE_API_KEY');\nconst magicUser = magic.user;\nconst token = magicUser.getIdToken({ lifespan: 3600 }); // Generate DTN with a 1-hour lifespan\n```\n\nIn this example, the `getIdToken` method is called with an object containing the `lifespan` parameter set to 3600 seconds (1 hour). This will generate a Decentralized Id Token with a custom expiration time.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#chunk-57", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 PromiEvent<string>: Base64-encoded string representation of a JSON tuple representing [proof, claim]\n\nPromiEvent<string>\n\n[proof, claim]", "explanation": "According to the Magic Labs embedded wallet documentation, the '#Returns' section refers to the output or response of the API call. \n\n**Purpose:** The main purpose of this section is to document and describe what data the API function returns after it is called. \n\n**Specific Output:** In this case, the API call returns a **PromiEvent<string>** which represents a Base64-encoded string. This string is a JSON tuple that contains two elements: **proof** and **claim**.\n\n**Use Case:** The returned data is likely used to indicate a successful completion of the API call and provide necessary information for further processing or verification within the application.\n\nTo sum up, the '#Returns' section outlines the expected outcome or result of the API call, giving developers a clear understanding of how to handle the returned data in their applications.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#chunk-58", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\n02\n\n03\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n03\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n04\n\n04\n\n05\n\n// Assumes a user is already logged in\n\n05\n\n// Assumes a user is already logged in\n\n06\n\ntry\n\n{\n\n06\n\ntry\n\n{\n\n07\n\nconst\n\nidToken\n\n=\n\nawait\n\nmagic\n\n.\n\nuser\n\n.\n\ngetIdToken\n\n(\n\n)\n\n;\n\n07\n\nconst\n\nidToken\n\n=\n\nawait\n\nmagic\n\n.\n\nuser\n\n.\n\ngetIdToken\n\n(\n\n)\n\n;\n\n08\n\n}\n\ncatch\n\n{\n\n08\n\n}\n\ncatch\n\n{\n\n09\n\n// Handle errors if required!\n\n09\n\n// Handle errors if required!\n\n10\n\n}\n\n10\n\n}", "explanation": "**Section Explanation:**\n\nThe provided documentation section, marked as '#'Example, is a code snippet that demonstrates how to use the Magic Labs embedded wallet in a web application. Specifically, it shows how to initialize the Magic wallet, retrieve an ID token for an already logged-in user, and handle potential errors.\n\n**Main Purpose:**\n\nThe example code has three main purposes:\n\n1. **Initialization**: It imports the required libraries and initializes the Magic wallet instance with a Publishable API Key.\n2. **ID Token Retrieval**: It uses the Magic wallet instance to retrieve an ID token for an already logged-in user.\n3. **Error Handling**: It demonstrates how to catch and handle errors that may occur during the ID token retrieval process.\n\n**Key Elements:**\n\n* `import { Magic } from 'magic-sdk';`: Imports the Magic library from the `magic-sdk` package.\n* `const magic = new Magic('PUBLISHABLE_API_KEY');`: Initializes a new instance of the Magic wallet with a Publishable API Key.\n* `try { const idToken = await magic.user.getIdToken(); } catch { ... }`: Tries to retrieve an ID token using the `getIdToken()` method, catching any errors that may occur.\n\nOverall, this example code provides a starting point for integrating the Magic Labs embedded wallet into a web application, demonstrating how to handle user authentication and retrieve a user's ID token.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#chunk-59", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\ngenerateIdToken\n\nGenerates a Decentralized ID token with optional serialized data.\n\nDecentralized ID token\n\nOnly available with Dedicated Wallet.\n\n#\n\n\u2022 lifespan? (Number): Will set the lifespan of the generated token. Defaults to 900s (15 mins)\n\n\u2022 attachment? (String): Will set a signature of serialized data in the generated token. Defaults to \"none\"\n\nlifespan?\n\nattachment?\n\n\"none\"", "explanation": "Here's a clear explanation of the `#generateIdToken` section from the Magic Labs embedded wallet documentation:\n\n**Purpose:** The `#generateIdToken` method generates a Decentralized ID token with optional serialized data, which is used to securely identify and authenticate a user.\n\n**Availability:** This feature is only available with a Dedicated Wallet.\n\n**Key Parameters:**\n\n1. **lifespan** (`Number`): Sets the time limit (in seconds) for the generated token. By default, it's set to 900 seconds (15 minutes). This means the token will expire after the specified time, providing an added layer of security.\n2. **attachment** (`String`): Allows you to attach a signature of serialized data to the generated token. By default, it's set to `\"none\"`. If you want to attach data, you can specify a string value, such as a user's name or other relevant information.\n\nIn summary, the `#generateIdToken` method enables you to generate a secure, time-limited token that can be used for authentication and identity verification. The lifespan and attachment options allow you to customize the token's behavior and functionality to suit your application's needs.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#chunk-60", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 PromiEvent<string>: Base64-encoded string representation of a JSON tuple representing [proof, claim]\n\nPromiEvent<string>\n\n[proof, claim]", "explanation": "The '#Returns' section you're referring to, specifically the 'PromiEvent<string>' return type, documents a response format in the Magic Labs embedded wallet.\n\n**What is it about?**\n\nThe 'PromiEvent<string>' return type indicates that the 'returns' value will be a Base64-encoded string representation of a JSON tuple. This JSON tuple is composed of two elements: 'proof' and 'claim'.\n\n**Main Purpose:**\n\nThe primary purpose of this 'returns' response is to provide the application with the encryption proof (proof) and the decrypted claim after authentication has completed. The encrypted 'proof' is a result of using the Magic Labs embedded wallet to process a user's authentication request, and the 'claim' is the actual claim that the user attempted to access.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#chunk-61", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\n02\n\n03\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n03\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n04\n\n04\n\n05\n\n// Assumes a user is already logged in\n\n05\n\n// Assumes a user is already logged in\n\n06\n\ntry\n\n{\n\n06\n\ntry\n\n{\n\n07\n\nconst\n\nidToken\n\n=\n\nawait\n\nmagic\n\n.\n\nuser\n\n.\n\ngenerateIdToken\n\n(\n\n{\n\nattachment\n\n:\n\n'SERVER_SECRET'\n\n}\n\n)\n\n;\n\n07\n\nconst\n\nidToken\n\n=\n\nawait\n\nmagic\n\n.\n\nuser\n\n.\n\ngenerateIdToken\n\n(\n\n{\n\nattachment\n\n:\n\n'SERVER_SECRET'\n\n}\n\n)\n\n;\n\n08\n\n}\n\ncatch\n\n{\n\n08\n\n}\n\ncatch\n\n{\n\n09\n\n// Handle errors if required!\n\n09\n\n// Handle errors if required!\n\n10\n\n}\n\n10\n\n}", "explanation": "**Section Title:** Example\n\n**Main Purpose:** This section provides a code example of how to use the Magic Labs embedded wallet, specifically the Web Client SDK.\n\n**Explanation:**\n\nThe example demonstrates how to generate an ID token using the Magic Labs embedded wallet. The code creates a new instance of the `Magic` class, which is used to interact with the Magic Labs service. The example assumes a user is already logged in and demonstrates how to call the `generateIdToken` method, passing in an attachment (in this case, a server secret).\n\nThe code is written in JavaScript and uses the `try`/`catch` block to handle any potential errors that may occur during the execution of the code. The example shows how to use the `await` keyword to wait for the `generateIdToken` method to complete before continuing with the code.\n\n**Key Components:**\n\n* Importing the `Magic` class from the `magic-sdk` library\n* Creating a new instance of the `Magic` class with a publishable API key\n* Generating an ID token using the `generateIdToken` method\n* Handling any errors that may occur during the process\n\n**Key Takeaways:**\n\n* The example demonstrates how to use the Magic Labs embedded wallet to generate an ID token\n* The code assumes a user is already logged in and uses the `generateIdToken` method to generate an ID token\n* The example shows how to handle any errors that may occur during the execution of the code using the `try`/`catch` block.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#chunk-62", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\ngetInfo\n\nRetrieves information for the authenticated user.\n\n#\n\n\u2022 None", "explanation": "Based on the provided documentation, `getInfo` is an API endpoint that retrieves information for the authenticated user.\n\nHere's a clear and concise summary:\n\n**Purpose:** To gather user-related data for the authenticated user.\n\n**Main Functionality:** The `getInfo` endpoint fetches and returns relevant information about the authenticated user.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#chunk-63", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 PromiEvent<string>:issuer (String): The Decentralized ID of the user. In server-side use-cases, we recommend this value to be used as the user ID in your own tables.email (String): Email address of the authenticated userphoneNumber (String): The phone number of the authenticated userpublicAddress (String): The authenticated user's public address (a.k.a.: public key)isMfaEnabled (Boolean): Whether or not multi-factor authentication is enabled for the userrecoveryFactors (Array): Any recovery methods that have been enabled (ex. [{ type: 'phone_number', value: '+99999999' }])\n\nPromiEvent<string>\n\n\u2022 issuer (String): The Decentralized ID of the user. In server-side use-cases, we recommend this value to be used as the user ID in your own tables.\n\n\u2022 email (String): Email address of the authenticated user\n\n\u2022 phoneNumber (String): The phone number of the authenticated user\n\n\u2022 publicAddress (String): The authenticated user's public address (a.k.a.: public key)\n\n\u2022 isMfaEnabled (Boolean): Whether or not multi-factor authentication is enabled for the user\n\n\u2022 recoveryFactors (Array): Any recovery methods that have been enabled (ex. [{ type: 'phone_number', value: '+99999999' }])\n\nissuer\n\nemail\n\nphoneNumber\n\npublicAddress\n\nisMfaEnabled\n\nrecoveryFactors\n\n[{ type: 'phone_number', value: '+99999999' }]", "explanation": "**Returns Section Explanation**\n\nThe '#Returns' section in the Magic Labs embedded wallet documentation explains the response format when an authentication request is made to the Magic API.\n\n**Main Purpose**\n\nThe main purpose of the Returns section is to define the expected shape of the response object returned by the Magic API after a successful authentication attempt. This object contains various user information attributes, such as the Decentralized ID, email address, phone number, public address (public key), multi-factor authentication (MFA) status, and recovery factors setup by the user.\n\n**Response Object Attributes**\n\nThe Returns section lists the following attributes and their respective data types:\n\n1. `issuer`: The Decentralized ID of the user (string).\n2. `email`: The authenticated user's email address (string).\n3. `phoneNumber`: The phone number of the authenticated user (string).\n4. `publicAddress`: The authenticated user's public address (a.k.a.: public key) (string).\n5. `isMfaEnabled`: A boolean indicating whether MFA is enabled for the user.\n6. `recoveryFactors`: An array of objects containing the type and value of enabled recovery methods (e.g., phone number).\n\n**Example Use Case**\n\nWhen the Magic API successfully authenticates the user, it returns a response object with these attributes. For instance:\n```json\n{\n  \"issuer\": \"did:example:123\",\n  \"email\": \"john.doe@example.com\",\n  \"phoneNumber\": \"+1234567890\",\n  \"publicAddress\": \"0x1234567890abcdef\",\n  \"isMfaEnabled\": true,\n  \"recoveryFactors\": [\n    { \"type\": \"phone_number\", \"value\": \"+1234567890\" }\n  ]\n}\n```\nDevelopers can use this information to leverage the Magic API for user authentication and secure user data management.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#chunk-64", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\n02\n\n03\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n03\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n04\n\n04\n\n05\n\n// Assumes a user is already logged in\n\n05\n\n// Assumes a user is already logged in\n\n06\n\ntry\n\n{\n\n06\n\ntry\n\n{\n\n07\n\nconst\n\nuserInfo\n\n=\n\nawait\n\nmagic\n\n.\n\nuser\n\n.\n\ngetInfo\n\n(\n\n)\n\n;\n\n07\n\nconst\n\nuserInfo\n\n=\n\nawait\n\nmagic\n\n.\n\nuser\n\n.\n\ngetInfo\n\n(\n\n)\n\n;\n\n08\n\n}\n\ncatch\n\n{\n\n08\n\n}\n\ncatch\n\n{\n\n09\n\n// Handle errors if required!\n\n09\n\n// Handle errors if required!\n\n10\n\n}\n\n10\n\n}", "explanation": "**Documentation Section: '#Example'**\n\nThis documentation section illustrates an example implementation of the Magic Labs embedded wallet's client-side SDK in a web environment. The example code demonstrates how to integrate the Magic SDK into a web application to access user information.\n\n**Main Purpose:**\n\nThe main purpose of this example is to provide a starting point for developers to integrate the Magic SDK into their web applications. It showcases the basic usage of the SDK, including:\n\n1. Importing the Magic SDK\n2. Initializing the Magic instance with a publishable API key\n3. Retrieving user information using the `user.getInfo()` method\n\n**Key Components:**\n\n1. Importing the Magic SDK using ES6 syntax (`import { Magic } from 'magic-sdk';`)\n2. Initializing the Magic instance with a publishable API key (`const magic = new Magic('PUBLISHABLE_API_KEY');`)\n3. Assumming a user is already logged in (commented section `// Assumes a user is already logged in`)\n4. Using the `try`-`catch` block to handle any errors that may occur during the user information retrieval process\n\n**Summary:**\n\nThis example serves as a basic implementation of the Magic Labs embedded wallet's client-side SDK in a web environment. By following this example, developers can integrate the Magic SDK into their web applications and start using the user information retrieval features provided by the SDK.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#chunk-65", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nisLoggedIn\n\nChecks if a user is currently logged in to the Magic SDK.\n\n#\n\n\u2022 None", "explanation": "**isLoggedIn Overview**\n\nThe `isLoggedIn` function is a part of the Magic Labs embedded wallet client-side SDK documentation for web applications. It is used to check if a user is currently logged in to the Magic SDK.\n\n**Purpose**\n\nThe primary purpose of the `isLoggedIn` function is to determine the authentication status of the user. This allows you to adapt your application's functionality and flow based on whether the user is logged in or not. You can use this function to:\n\n* Display logged-in or logged-out states to the user\n* Restrict access to certain features or pages based on login status\n* Trigger authentication-related workflows or events\n\n**Key Details**\n\n* `isLoggedIn` does not accept any arguments (`None` as mentioned in the documentation).\n* This function typically returns a boolean value indicating the user's login status.\n\nBy using the `isLoggedIn` function, you can create a seamless and user-friendly experience in your web application, ensuring that authentication requirements are properly enforced and that users are aware of their login status.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#chunk-66", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 PromiEvent<boolean>\n\nPromiEvent<boolean>", "explanation": "Based on the provided documentation section from the Magic Labs Embedded Wallet, the 'Returns' section is about the function that gets called when a wallet action (e.g., login, authenticate, ... as per application use) is completed.\n\nThe main purpose of this 'Returns' function (`PromiEvent<boolean>`) is to notify the application when the wallet action is finished, returning a boolean value indicating its success or failure.\n\nHere's a breakdown:\n\n- `PromiEvent`: A promise event that resolves when the wallet action is completed.\n- `<boolean>`: The resolution value which is a boolean representing whether the wallet action was successful (true) or not (false).\n\nIn simpler terms, this function signals the application that the wallet operation is complete, and its outcome should be handled accordingly.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#chunk-67", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\n02\n\n03\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n03\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n04\n\n04\n\n05\n\ntry\n\n{\n\n05\n\ntry\n\n{\n\n06\n\nconst\n\nisLoggedIn\n\n=\n\nawait\n\nmagic\n\n.\n\nuser\n\n.\n\nisLoggedIn\n\n(\n\n)\n\n;\n\n06\n\nconst\n\nisLoggedIn\n\n=\n\nawait\n\nmagic\n\n.\n\nuser\n\n.\n\nisLoggedIn\n\n(\n\n)\n\n;\n\n07\n\nconsole\n\n.\n\nlog\n\n(\n\nisLoggedIn\n\n)\n\n;\n\n// => `true` or `false`\n\n07\n\nconsole\n\n.\n\nlog\n\n(\n\nisLoggedIn\n\n)\n\n;\n\n// => `true` or `false`\n\n08\n\n}\n\ncatch\n\n{\n\n08\n\n}\n\ncatch\n\n{\n\n09\n\n// Handle errors if required!\n\n09\n\n// Handle errors if required!\n\n10\n\n}\n\n10\n\n}", "explanation": "**Example Explanation**\n\nThe provided documentation section is titled '#Example', which is a code snippet demonstrating how to use the Magic Labs embedded wallet in a web application. The code is written in JavaScript and utilizes the Magic SDK.\n\n**Main Purpose:**\n\nThe main purpose of this example is to showcase how to:\n\n1. Import the Magic SDK in a web application.\n2. Initialize the Magic wallet with a publishable API key.\n3. Check if the user is logged in using the `isLoggedIn` method.\n4. Handle errors that may occur during the authentication process.\n\n**Step-by-Step Breakdown:**\n\n1. The code imports the Magic SDK using `import Magic from 'magic-sdk';`.\n2. It initializes the Magic wallet with a publishable API key using `const magic = new Magic('PUBLISHABLE_API_KEY');`.\n3. The code uses a try-catch block to attempt to check if the user is logged in using the `isLoggedIn` method: `const isLoggedIn = await magic.user.isLoggedIn();`.\n4. It logs the result of the `isLoggedIn` method to the console.\n5. If an error occurs, the catch block is executed, and it's recommended to handle the error if required.\n\n**Key Takeaways:**\n\n- This example demonstrates the basic steps to use the Magic Labs embedded wallet in a web application.\n- It showcases how to initialize the wallet with a publishable API key and check if the user is logged in.\n- It highlights the importance of error handling in the authentication process.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#chunk-68", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nlogout\n\nLogs out the currently authenticated Magic user\n\n#\n\n\u2022 None", "explanation": "In the Magic Labs embedded wallet documentation, the `#logout` function is used to log out the currently authenticated Magic user. \n\nIts main purpose is to disconnect the user's session, revoking any active authentication and restoring the initial state of the Magic wallet, effectively terminating the user's online session. This means the user will have to log in again to access their Magic account. \n\nNote: The function does not take any arguments, as indicated in the documentation.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#chunk-69", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 PromiEvent<boolean>\n\nPromiEvent<boolean>", "explanation": "The '#Returns' section provided from the documentation seems to be related to the return type of a function in the Magic Labs embedded wallet API.\n\nBased on the provided information, the return type is `PromiEvent<boolean>`, which is used in blockchain development (the Ethereum ecosystem). \n\nIn a nutshell, here's what it means:\n\n- **PromiEvent**: A promise-like event emitter in JavaScript, which is used to handle asynchronous events in a more synchronous way. It's commonly used in blockchain development for event handling.\n\n- **boolean**: The event emits a boolean value.\n\nThe main purpose of `PromiEvent<boolean>` in this context is to notify the caller about the status of the operation, returning either a `true` or `false` value, indicating success or failure of the function call.\n\nTo give an example, if you call a function in the Magic Labs embedded wallet API, this `PromiEvent<boolean>` would be emitted when the function call is completed, allowing your application to react accordingly to the result of the operation.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#chunk-70", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\n02\n\n03\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n03\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n04\n\n04\n\n05\n\ntry\n\n{\n\n05\n\ntry\n\n{\n\n06\n\nawait\n\nmagic\n\n.\n\nuser\n\n.\n\nlogout\n\n(\n\n)\n\n;\n\n06\n\nawait\n\nmagic\n\n.\n\nuser\n\n.\n\nlogout\n\n(\n\n)\n\n;\n\n07\n\nconsole\n\n.\n\nlog\n\n(\n\nawait\n\nmagic\n\n.\n\nuser\n\n.\n\nisLoggedIn\n\n(\n\n)\n\n)\n\n;\n\n// => `false`\n\n07\n\nconsole\n\n.\n\nlog\n\n(\n\nawait\n\nmagic\n\n.\n\nuser\n\n.\n\nisLoggedIn\n\n(\n\n)\n\n)\n\n;\n\n// => `false`\n\n08\n\n}\n\ncatch\n\n{\n\n08\n\n}\n\ncatch\n\n{\n\n09\n\n// Handle errors if required!\n\n09\n\n// Handle errors if required!\n\n10\n\n}\n\n10\n\n}", "explanation": "**Example Explanation**\n\nThis documentation section, titled `#Example`, demonstrates a code snippet that initializes the Magic Labs embedded wallet and performs basic authentication-related actions. The main purpose of this example is to showcase how to use the Magic SDK in a web application to manage user authentication, particularly logging out and checking the user's login status.\n\n**Code Breakdown:**\n\n1. The code imports the Magic SDK using ES6 import syntax.\n2. It creates a new instance of the Magic class, passing in a publishable API key, which is a publicly accessible key used for authentication.\n3. The code attempts to log out a user using the `logout` method and then checks if the user is logged in using the `isLoggedIn` method. Both methods are asynchronous and return promises.\n4. If the logout or login status check operations fail, the code catches the error and provides a comment suggesting that errors should be handled in a real-world implementation.\n\n**Key Takeaways:**\n\n- This example assumes you have a Magic Labs embedded wallet set up and have obtained a publishable API key.\n- The code demonstrates basic authentication-related actions, such as logging out and checking the user's login status.\n- This example is meant to be aStarting point for integrating the Magic SDK into your web application, not a production-ready implementation.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#chunk-71", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nshowSettings\n\nDisplays an iframe with the current user\u2019s settings. Allows for users to update their email address, enable multi-factor authentication, and add a recovery factor.\n\nOnly available with Dedicated Wallet. Access to MFA and account recovery require paid add-ons.\n\nMFA\n\naccount recovery\n\n#\n\n\u2022 page? (String): Optional argument to deeplink to a specific page ('mfa' | 'update-email' | 'recovery')\n\npage?\n\n'mfa' | 'update-email' | 'recovery'", "explanation": "**#showSettings - #Arguments Overview**\n\nThe `#showSettings` API function allows you to display an iframe with the current user's settings in your Magic Labs embedded wallet. This is particularly relevant for users with Dedicated Wallets, where they can manage settings like email addresses, multi-factor authentication (MFA), and account recovery.\n\n**Main Purpose**\n\nThe primary goal of `#showSettings` is to provide users with a seamless way to update their essential account information and settings, ensuring their account security and compliance with necessary requirements.\n\n**#Arguments: page**\n\nThe `page` argument is optional and allows you to deeplink to a specific page within the settings iframe:\n\n1. **'mfa'**: Displays the MFA settings page.\n2. **'update-email'**: Displays the email address update page.\n3. **'recovery'**: Displays the account recovery page.\n\n**Contextual Use Cases**\n\n* When creating a settings section in your app, use `#showSettings` to provide users with a convenient way to manage their essential settings.\n* If you're optimizing your app's security, use the `page` argument to ensure users can easily set up or update MFA or email addresses in your wallet integration.\n* When managing recovery options or account security, you can specifically link users to the dedicated recovery page.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#chunk-72", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 Promise which resolves when the user closes the window\n\nPromise", "explanation": "The '#Returns' documentation section from the provided URL is related to a specific function or operation in the Magic Labs embedded wallet SDK.\n\nIt indicates that when this function or operation is executed, it returns a **Promise**. In JavaScript, a Promise is an object that represents the eventual completion (or failure) of an asynchronous operation and its resulting value.\n\nIn this case, the Promise is said to **resolve** (finish processing) when the user closes the window. This means that once the user closes the browser window, the Promise will no longer be pending and will release its result.\n\nIn simple terms, this section is informing developers that after the user closes the window, the function or operation will complete and return its result, which can now be accessed or handled by the code.\n\nMain purpose:\n\n- Inform developers about the completion state of a function or operation.\n- Notify them when they can expect the result of an operation, specifically when the user closes the window.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#chunk-73", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\n02\n\n03\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n03\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n04\n\n04\n\n05\n\ntry\n\n{\n\n05\n\ntry\n\n{\n\n06\n\nawait\n\nmagic\n\n.\n\nuser\n\n.\n\nshowSettings\n\n(\n\n)\n\n;\n\n06\n\nawait\n\nmagic\n\n.\n\nuser\n\n.\n\nshowSettings\n\n(\n\n)\n\n;\n\n07\n\n}\n\ncatch\n\n{\n\n07\n\n}\n\ncatch\n\n{\n\n08\n\n// Handle errors if required!\n\n08\n\n// Handle errors if required!\n\n09\n\n}\n\n09\n\n}\n\n10\n\n10\n\n11\n\n// Deeplink to MFA view\n\n11\n\n// Deeplink to MFA view\n\n12\n\ntry\n\n{\n\n12\n\ntry\n\n{\n\n13\n\nawait\n\nmagic\n\n.\n\nuser\n\n.\n\nshowSettings\n\n(\n\n{\n\npage\n\n:\n\n'mfa'\n\n}\n\n)\n\n;\n\n13\n\nawait\n\nmagic\n\n.\n\nuser\n\n.\n\nshowSettings\n\n(\n\n{\n\npage\n\n:\n\n'mfa'\n\n}\n\n)\n\n;\n\n14\n\n}\n\ncatch\n\n{\n\n14\n\n}\n\ncatch\n\n{\n\n15\n\n// Handle errors if required!\n\n15\n\n// Handle errors if required!\n\n16\n\n}\n\n16\n\n}", "explanation": "**Understanding the '#Example' Section**\n\nThe '#Example' section is an example code snippet provided in the Magic Link documentation for the client-side SDK (Web). Its main purpose is to demonstrate how to initialize and use the Magic Link API in a JavaScript application.\n\n**Key Components:**\n\n1. **Importing the Magic SDK**: The code imports the `Magic` class from the `magic-sdk` library.\n2. **Initializing the Magic SDK**: A new instance of the `Magic` class is created with a publishable API key.\n3. **Showing User Settings**: The `showSettings` method is called on the `magic` instance to display the user's settings. This method takes an optional `page` parameter to specify the settings page to display.\n4. **Handling Errors**: The code catches any errors that may occur during the execution of the `showSettings` method and provides a way to handle them.\n\n**Main Purpose:**\n\nThe main purpose of this example code is to provide a starting point for developers to integrate the Magic Link API into their own web applications. It demonstrates how to initialize the Magic SDK, display user settings, and handle errors that may occur during the process.\n\n**Recommendations:**\n\n1. Replace the publishable API key with your own API key to use this code in your own application.\n2. Modify the `showSettings` method calls to suit your specific use case.\n3. Handle errors properly by logging or displaying them to the user in a way that makes sense for your application.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#chunk-74", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nshowSettings({ showUI: false, page: 'recovery' })\n\nWhitelabel the flow starting from where the user needs to add a recovery factor phone number. This allows you to implement your own UI, but you will need to implement some custom event handling according to your needs.\n\nOnly available with Dedicated Wallet. Access to account recovery require paid add-ons.\n\naccount recovery\n\n#\n\n\u2022 page (String): 'recovery'\n\n\u2022 showUI (Boolean): false\n\npage\n\n'recovery'\n\nshowUI\n\nfalse", "explanation": "## Overview of `#showSettings({ showUI: false, page: 'recovery' })`\n\nThis documentation section describes a function called `#showSettings` that is used to initiate a whitelabeled flow for account recovery in Magic Labs' embedded wallet. This function allows developers to implement their own User Interface (UI) while still utilizing Magic Labs' functionality.\n\n## Main Purpose\n\nThe primary purpose of `#showSettings({ showUI: false, page: 'recovery' })` is to:\n\n*   Start the account recovery flow from the recovery phone number input stage, allowing for customization of the UI.\n*   Automate some of the underlying complexities of account recovery, while requiring developers to implement custom event handling for their specific use case.\n\n## Availability and Limitations\n\nThis functionality is only available in the **Dedicated Wallet** edition of Magic Labs. Additionally, access to account recovery and other advanced features require paid add-ons.\n\n## Key Arguments\n\n*   **`page`** (String): Specifies the page within the account recovery flow to begin with. In this case, it's set to `'recovery'`.\n*   **`showUI`** (Boolean): Controls whether to display the Magic Labs UI. It's set to `false`, indicating that the UI should not be shown, allowing for custom UI implementation.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#chunk-75", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 Promise which resolves when the user closes the window\n\nPromise", "explanation": "Based on the documentation provided from the Magic Labs embedded wallet, the '#Returns' section is referring to the potential return values or outcomes from the code snippet or function call.\n\nIn this specific case, it's indicating that when the user closes the window, a specific promise is resolved. A promise is a result or output that is utilized within programming or web development.\n\nThe main purpose of this '#Returns' section is to inform the developer or user about what to expect when certain actions occur, such as the user closing the window. This provides clarity and helps developers integrate the Magic Labs embedded wallet into their application correctly.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#chunk-76", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\n02\n\n03\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n03\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n04\n\n04\n\n05\n\ntry\n\n{\n\n05\n\ntry\n\n{\n\n06\n\nlet\n\nhandle\n\n=\n\nmagic\n\n.\n\nuser\n\n.\n\nshowSettings\n\n(\n\n{\n\nshowUI\n\n:\n\nfalse\n\n,\n\npage\n\n:\n\n'recovery'\n\n}\n\n)\n\n;\n\n06\n\nlet\n\nhandle\n\n=\n\nmagic\n\n.\n\nuser\n\n.\n\nshowSettings\n\n(\n\n{\n\nshowUI\n\n:\n\nfalse\n\n,\n\npage\n\n:\n\n'recovery'\n\n}\n\n)\n\n;\n\n07\n\n07\n\n08\n\nhandle\n\n.\n\nemit\n\n(\n\nRecoveryFactorEventEmit\n\n.\n\nStartEditPhoneNumber\n\n)\n\n;\n\n08\n\nhandle\n\n.\n\nemit\n\n(\n\nRecoveryFactorEventEmit\n\n.\n\nStartEditPhoneNumber\n\n)\n\n;\n\n09\n\n// Handle start of adding or editing recovery factor phone number\n\n09\n\n// Handle start of adding or editing recovery factor phone number\n\n10\n\n10\n\n11\n\nhandle\n\n.\n\non\n\n(\n\n11\n\nhandle\n\n.\n\non\n\n(\n\n12\n\nRecencyCheckEventOnReceived\n\n.\n\nPrimaryAuthFactorNeedsVerification\n\n,\n\n(\n\n)\n\n=>\n\n{\n\n12\n\nRecencyCheckEventOnReceived\n\n.\n\nPrimaryAuthFactorNeedsVerification\n\n,\n\n(\n\n)\n\n=>\n\n{\n\n13\n\n// Event triggered if primary auth factor (email) needs verification\n\n13\n\n// Event triggered if primary auth factor (email) needs verification\n\n14\n\n}\n\n,\n\n14\n\n}\n\n,\n\n15\n\n)\n\n;\n\n15\n\n)\n\n;\n\n16\n\n16\n\n17\n\nhandle\n\n.\n\non\n\n(\n\nRecencyCheckEventOnReceived\n\n.\n\nEmailSent\n\n,\n\n(\n\n)\n\n=>\n\n{\n\n17\n\nhandle\n\n.\n\non\n\n(\n\nRecencyCheckEventOnReceived\n\n.\n\nEmailSent\n\n,\n\n(\n\n)\n\n=>\n\n{\n\n18\n\n// Send OTP to email if primary auth factor needs verification\n\n18\n\n// Send OTP to email if primary auth factor needs verification\n\n19\n\n// Prompt for OTP and emit it to verify primary auth factor\n\n19\n\n// Prompt for OTP and emit it to verify primary auth factor\n\n20\n\n20\n\n21\n\nconst\n\ncode\n\n=\n\nwindow\n\n.\n\nprompt\n\n(\n\nPlease\n\nenter the code which was sent to your email'\n\n)\n\n;\n\n21\n\nconst\n\ncode\n\n=\n\nwindow\n\n.\n\nprompt\n\n(\n\nPlease\n\nenter the code which was sent to your email'\n\n)\n\n;\n\n22\n\nhandle\n\n.\n\nemit\n\n(\n\nRecencyCheckEventEmit\n\n.\n\nVerifyEmailOtp\n\n,\n\ncode\n\n)\n\n;\n\n22\n\nhandle\n\n.\n\nemit\n\n(\n\nRecencyCheckEventEmit\n\n.\n\nVerifyEmailOtp\n\n,\n\ncode\n\n)\n\n;\n\n23\n\n}\n\n)\n\n;\n\n23\n\n}\n\n)\n\n;\n\n24\n\n24\n\n25\n\nhandle\n\n.\n\non\n\n(\n\nRecencyCheckEventOnReceived\n\n.\n\nPrimaryAuthFactorVerified\n\n,\n\n(\n\n)\n\n=>\n\n{\n\n25\n\nhandle\n\n.\n\non\n\n(\n\nRecencyCheckEventOnReceived\n\n.\n\nPrimaryAuthFactorVerified\n\n,\n\n(\n\n)\n\n=>\n\n{\n\n26\n\n// Event triggered if email verification success\n\n26\n\n// Event triggered if email verification success\n\n27\n\n}\n\n)\n\n;\n\n27\n\n}\n\n)\n\n;\n\n28\n\n28\n\n29\n\nhandle\n\n.\n\non\n\n(\n\nRecoveryFactorEventOnReceived\n\n.\n\nEnterNewPhoneNumber\n\n,\n\n(\n\n)\n\n=>\n\n{\n\n29\n\nhandle\n\n.\n\non\n\n(\n\nRecoveryFactorEventOnReceived\n\n.\n\nEnterNewPhoneNumber\n\n,\n\n(\n\n)\n\n=>\n\n{\n\n30\n\n// Prompt for secondary factor (phone number) and emit it to send SMS OTP\n\n30\n\n// Prompt for secondary factor (phone number) and emit it to send SMS OTP\n\n31\n\n31\n\n32\n\nconst\n\nphoneNumber\n\n=\n\nwindow\n\n.\n\nprompt\n\n(\n\n'Enter a phone number'\n\n)\n\n;\n\n32\n\nconst\n\nphoneNumber\n\n=\n\nwindow\n\n.\n\nprompt\n\n(\n\n'Enter a phone number'\n\n)\n\n;\n\n33\n\nhandle\n\n.\n\nemit\n\n(\n\nRecoveryFactorEventEmit\n\n.\n\nSendNewPhoneNumber\n\n,\n\nphoneNumber\n\n)\n\n;\n\n33\n\nhandle\n\n.\n\nemit\n\n(\n\nRecoveryFactorEventEmit\n\n.\n\nSendNewPhoneNumber\n\n,\n\nphoneNumber\n\n)\n\n;\n\n34\n\n}\n\n)\n\n;\n\n34\n\n}\n\n)\n\n;\n\n35\n\n35\n\n36\n\nhandle\n\n.\n\non\n\n(\n\nRecoveryFactorEventOnReceived\n\n.\n\nEnterOtpCode\n\n,\n\n(\n\n)\n\n=>\n\n{\n\n36\n\nhandle\n\n.\n\non\n\n(\n\nRecoveryFactorEventOnReceived\n\n.\n\nEnterOtpCode\n\n,\n\n(\n\n)\n\n=>\n\n{\n\n37\n\n// Prompt for SMS OTP and emit it to verify secondary auth factor\n\n37\n\n// Prompt for SMS OTP and emit it to verify secondary auth factor\n\n38\n\n38\n\n39\n\nconst\n\notp\n\n=\n\nwindow\n\n.\n\nprompt\n\n(\n\n'Enter SMS OTP'\n\n)\n\n;\n\n39\n\nconst\n\notp\n\n=\n\nwindow\n\n.\n\nprompt\n\n(\n\n'Enter SMS OTP'\n\n)\n\n;\n\n40\n\nhandle\n\n.\n\nemit\n\n(\n\nRecoveryFactorEventEmit\n\n.\n\nSendOtpCode\n\n,\n\notp\n\n)\n\n;\n\n40\n\nhandle\n\n.\n\nemit\n\n(\n\nRecoveryFactorEventEmit\n\n.\n\nSendOtpCode\n\n,\n\notp\n\n)\n\n;\n\n41\n\n}\n\n)\n\n;\n\n41\n\n}\n\n)\n\n;\n\n42\n\n42\n\n43\n\nhandle\n\n.\n\non\n\n(\n\n'done'\n\n,\n\n(\n\n)\n\n=>\n\n{\n\n43\n\nhandle\n\n.\n\non\n\n(\n\n'done'\n\n,\n\n(\n\n)\n\n=>\n\n{\n\n44\n\n// Successfully added secondary recovery factor\n\n44\n\n// Successfully added secondary recovery factor\n\n45\n\n}\n\n)\n\n;\n\n45\n\n}\n\n)\n\n;\n\n46\n\n46\n\n47\n\nhandle\n\n.\n\non\n\n(\n\nRecoveryFactorEventOnReceived\n\n.\n\nMalformedPhoneNumber\n\n,\n\n(\n\n)\n\n=>\n\n{\n\n47\n\nhandle\n\n.\n\non\n\n(\n\nRecoveryFactorEventOnReceived\n\n.\n\nMalformedPhoneNumber\n\n,\n\n(\n\n)\n\n=>\n\n{\n\n48\n\n// Event triggered if submitted phone number is invalid\n\n48\n\n// Event triggered if submitted phone number is invalid\n\n49\n\n49\n\n50\n\n// Prompt for phone number and emit it to send SMS OTP\n\n50\n\n// Prompt for phone number and emit it to send SMS OTP\n\n51\n\n// Add your own retry logic to limit retries\n\n51\n\n// Add your own retry logic to limit retries\n\n52\n\nconst\n\nphoneNumber\n\n=\n\nwindow\n\n.\n\nprompt\n\n(\n\n52\n\nconst\n\nphoneNumber\n\n=\n\nwindow\n\n.\n\nprompt\n\n(\n\n53\n\n'You entered an invalid phone number, please try again'\n\n53\n\n'You entered an invalid phone number, please try again'\n\n54\n\n)\n\n;\n\n54\n\n)\n\n;\n\n55\n\nhandle\n\n.\n\nemit\n\n(\n\nRecoveryFactorEventEmit\n\n.\n\nSendNewPhoneNumber\n\n,\n\nphoneNumber\n\n)\n\n;\n\n55\n\nhandle\n\n.\n\nemit\n\n(\n\nRecoveryFactorEventEmit\n\n.\n\nSendNewPhoneNumber\n\n,\n\nphoneNumber\n\n)\n\n;\n\n56\n\n}\n\n)\n\n;\n\n56\n\n}\n\n)\n\n;\n\n57\n\n57\n\n58\n\nhandle\n\n.\n\non\n\n(\n\nRecoveryFactorEventOnReceived\n\n.\n\nRecoveryFactorAlreadyExists\n\n,\n\n(\n\n)\n\n=>\n\n{\n\n58\n\nhandle\n\n.\n\non\n\n(\n\nRecoveryFactorEventOnReceived\n\n.\n\nRecoveryFactorAlreadyExists\n\n,\n\n(\n\n)\n\n=>\n\n{\n\n59\n\n// Event triggered if user is trying to add a phone number that's already in place\n\n59\n\n// Event triggered if user is trying to add a phone number that's already in place\n\n60\n\n}\n\n)\n\n;\n\n60\n\n}\n\n)\n\n;\n\n61\n\n61\n\n62\n\nhandle\n\n.\n\non\n\n(\n\nRecoveryFactorEventOnReceived\n\n.\n\nInvalidOtpCode\n\n,\n\n(\n\n)\n\n=>\n\n{\n\n62\n\nhandle\n\n.\n\non\n\n(\n\nRecoveryFactorEventOnReceived\n\n.\n\nInvalidOtpCode\n\n,\n\n(\n\n)\n\n=>\n\n{\n\n63\n\n// Event triggered when submitted SMS OTP is invalid\n\n63\n\n// Event triggered when submitted SMS OTP is invalid\n\n64\n\n64\n\n65\n\nconst\n\ncode\n\n=\n\nwindow\n\n.\n\nprompt\n\n(\n\n'Invalid OTP code. Please try one more time'\n\n)\n\n;\n\n65\n\nconst\n\ncode\n\n=\n\nwindow\n\n.\n\nprompt\n\n(\n\n'Invalid OTP code. Please try one more time'\n\n)\n\n;\n\n66\n\nhandle\n\n.\n\nemit\n\n(\n\nRecoveryFactorEventEmit\n\n.\n\nSendOtpCode\n\n,\n\ncode\n\n)\n\n;\n\n66\n\nhandle\n\n.\n\nemit\n\n(\n\nRecoveryFactorEventEmit\n\n.\n\nSendOtpCode\n\n,\n\ncode\n\n)\n\n;\n\n67\n\n}\n\n)\n\n;\n\n67\n\n}\n\n)\n\n;\n\n68\n\n}\n\ncatch\n\n{\n\n68\n\n}\n\ncatch\n\n{\n\n69\n\n// Handle errors if required!\n\n69\n\n// Handle errors if required!\n\n70\n\n}\n\n70\n\n}", "explanation": "The provided code snippet is an example of how to use the Magic Labs embedded wallet in a web application. It's a part of the Magic Link documentation located at https://magic.link/docs/api/client-side-sdks/web.\n\n**Main Purpose:**\nThe main purpose of this example is to demonstrate how to use the Magic Labs embedded wallet to add a secondary recovery factor (phone number) to a Magic user's account. This example covers various scenarios, such as:\n\n* Showing the recovery settings without the UI\n* Emitting events for adding or editing a recovery factor phone number\n* Handling events triggered when the primary authentication factor (email) needs verification or has been verified\n* Prompting for an OTP code and emitting it to verify the primary authentication factor\n* Handling events triggered when the phone number is invalid, already exists, or the OTP code is invalid\n\n**Key Concepts:**\n\n1. **Magic Labs Embedded Wallet**: This is a client-side wallet that allows users to interact with the Magic Link application.\n2. **User:** The example uses a Magic user object to interact with the wallet.\n3. **Recovery Settings:** This is a feature of the Magic Labs embedded wallet that allows users to add and manage secondary recovery factors.\n4. **Events:** The example uses events to handle various scenarios, such as adding or editing a recovery factor phone number, verifying the primary authentication factor, and handling errors.\n\n**Flow of the Example:**\n\n1. Import the Magic Labs embedded wallet library.\n2. Create a new Magic user object with a publishable API key.\n3. Show the recovery settings without the UI.\n4. Emit events for adding or editing a recovery factor phone number.\n5. Handle events triggered when the primary authentication factor needs verification or has been verified.\n6. Prompt for an OTP code and emit it to verify the primary authentication factor.\n7. Handle events triggered when the phone number is invalid, already exists, or the OTP code is invalid.\n8. Handle errors if required.\n\n**Note:** The example is a basic demonstration of how to use the Magic Labs embedded wallet. You will need to adapt and extend this example to fit your specific use case. Additionally, you will need to ensure that you have the necessary permissions and setup to use the Magic Link application.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#chunk-77", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nrecoverAccount()\n\nA user can recover their email account if they've setup a phone number as a recovery factor. Calling this method will display a modal for the user to submit the sent SMS OTP.\n\nOnly available with Dedicated Wallet. Access to account recovery require paid add-ons.\n\naccount recovery\n\n#\n\n\u2022 email (String): The email address (primary auth factor) of the user\n\nemail", "explanation": "The `recoverAccount()` method is a feature available in Magic Labs embedded wallets, specifically in the Dedicated Wallet setup. Its main purpose is to assist users in recovering their account if their primary authentication factor (email address) has been compromised or forgotten.\n\nTo recover their account, users can use a phone number they previously registered as a secondary recovery factor. When `recoverAccount()` is called, a modal will appear, asking users to submit a one-time passcode (OTP) sent to their registered phone number via SMS.\n\nThe main arguments for this method are:\n\n- **email (String)**: The email address of the user associated with the account to be recovered.\n\nHowever, please note that this method is only available with the Dedicated Wallet setup and requires paid add-ons for account recovery access.\n\nOverall, `recoverAccount()` provides users with an option to regain access to their account using a secondary recovery method, specifically through a registered phone number.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#chunk-78", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 PromiEvent<boolean>: The promise resolves with a true boolean value if the recovery is successful and rejects if the request fails\n\nPromiEvent<boolean>", "explanation": "**Returns**\n\nThe '#Returns' section in the Magic Labs embedded wallet documentation describes the response format when attempting to recover a user's account on the Magic Labs embedded wallet client-side SDK (Web).\n\n**Main Purpose:**\n\nThe main purpose of this section is to inform developers about the structure and status of the response they can expect when submitting a recovery request.\n\n**Key Point:**\n\n- The Recovery Request Returns a Boolean Value: The response is encapsulated within a PromiEvent object, which is a type of asynchronous return that resolves with a boolean value once the request is complete.\n\n**Meaning of the Boolean Value:**\n\n- `true`: The recovery was successful and the user's account has been recovered.\n- `false` or `rejection`: The recovery failed due to a request error or other issues.\n\nBy understanding this section, developers can properly handle the asynchronous response, implement error checking, and provide a better user experience when dealing with recovery requests on the Magic Labs embedded wallet client-side SDK.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#chunk-79", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\n02\n\n03\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n03\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n04\n\n04\n\n05\n\ntry\n\n{\n\n05\n\ntry\n\n{\n\n06\n\nmagic\n\n.\n\nuser\n\n.\n\nrecoverAccount\n\n(\n\n{\n\nemail\n\n:\n\nemail\n\n}\n\n)\n\n06\n\nmagic\n\n.\n\nuser\n\n.\n\nrecoverAccount\n\n(\n\n{\n\nemail\n\n:\n\nemail\n\n}\n\n)\n\n07\n\n}\n\ncatch\n\n{\n\n07\n\n}\n\ncatch\n\n{\n\n08\n\n// Handle errors if required!\n\n08\n\n// Handle errors if required!\n\n09\n\n}\n\n09\n\n}", "explanation": "**Overview of the Example Section**\n\nThe provided documentation section titled '#Example' is a code snippet that demonstrates how to use the Magic Labs embedded wallet's client-side SDK (Software Development Kit) for web development. The example showcases a basic recovery of a Magic account using the email address associated with it.\n\n**Main Purpose**\n\nThe main purpose of this example is to provide a reference implementation for web developers integrating the Magic Labs embedded wallet's client-side SDK into their applications. It serves as a starting point for creating a simple account recovery feature, highlighting the basic steps involved in interacting with the Magic API.\n\n**Key Components**\n\n1. **Initialization**: The code imports the `Magic` library and creates a new instance of it, passing in the `PUBLISHABLE_API_KEY`.\n2. **Recover Account**: The `recoverAccount` method is called on the `magic` instance, passing an object with the `email` property. This method attempts to recover an account associated with the provided email address.\n3. **Error Handling**: The example includes a basic `try`-`catch` block to handle any errors that may occur during the recovery process.\n\n**Key Takeaways**\n\n* The example demonstrates the basic integration of the Magic Labs embedded wallet's client-side SDK for web development.\n* It showcases a simple account recovery feature, highlighting the `recoverAccount` method.\n* Error handling is included to provide a basic understanding of how to handle potential issues in the recovery process.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#chunk-80", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nenableMFA\n\nDisplays an iframe deep linked to the beginning of the enable MFA flow. This is the same as calling showSettings({ page: 'mfa' })\n\nshowSettings({ page: 'mfa' })\n\nOnly available with Dedicated Wallet. Access to MFA require paid add-ons. Available as of magic-sdk v28.11.0\n\nMFA\n\nmagic-sdk v28.11.0\n\n#\n\n\u2022 showUI? (Boolean): If true, show an out-of-the-box UI to take user through flow to enable MFA. Defaults to true\n\nshowUI?\n\ntrue\n\ntrue", "explanation": "**enableMFA Explanation**\n\nThe `#enableMFA` is a function in Magic Labs embedded wallet documentation that displays an iframe deep linked to the beginning of the Multi-Factor Authentication (MFA) flow. This function is used to initiate the MFA setup process for users.\n\n**Main Purpose**\n\nThe main purpose of `#enableMFA` is to provide a seamless user experience by automatically guiding users through the MFA setup process. This eliminates the need for users to manually navigate to settings or configure MFA on their own.\n\n**Key Features**\n\n* Only available in Dedicated Wallet plans.\n* Requires paid add-ons for access to MFA.\n* Available as of magic-sdk v28.11.0.\n* Optional `showUI` parameter to display an out-of-the-box UI for guiding users through the MFA setup process (defaults to true).", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#chunk-81", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 Promise which resolves when the user closes the window\n\nPromise", "explanation": "The '#Returns' section in the Magic Labs' embedded wallet documentation is about the return value of a specific API call. \n\nIn this case, the return value is a Promise that resolves when the user closes the window. A Promise is a common programming construct used for handling asynchronous operations, allowing your code to execute other tasks while waiting for a result.\n\nIn simpler terms, when the user closes the wallet window, the function will no longer be working on that task, and it provides a signal (the resolved Promise) to proceed with other tasks. This information is essential when integrating the Magic Labs' wallet into your application, as it helps you determine when the wallet interaction is complete and respond accordingly.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#chunk-82", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\nimport\n\n{\n\n02\n\nimport\n\n{\n\n03\n\nEnableMFAEventEmit\n\n,\n\n03\n\nEnableMFAEventEmit\n\n,\n\n04\n\nEnableMFAEventOnReceived\n\n,\n\n04\n\nEnableMFAEventOnReceived\n\n,\n\n05\n\n}\n\nfrom\n\n'@magic-sdk/types'\n\n;\n\n05\n\n}\n\nfrom\n\n'@magic-sdk/types'\n\n;\n\n06\n\n06\n\n07\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n07\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n08\n\n08\n\n09\n\n// user enables MFA through Magic UI\n\n09\n\n// user enables MFA through Magic UI\n\n10\n\ntry\n\n{\n\n10\n\ntry\n\n{\n\n11\n\nawait\n\nmagic\n\n.\n\nuser\n\n.\n\nenableMFA\n\n(\n\n)\n\n;\n\n11\n\nawait\n\nmagic\n\n.\n\nuser\n\n.\n\nenableMFA\n\n(\n\n)\n\n;\n\n12\n\n}\n\ncatch\n\n{\n\n12\n\n}\n\ncatch\n\n{\n\n13\n\n// Handle errors if required!\n\n13\n\n// Handle errors if required!\n\n14\n\n}\n\n14\n\n}\n\n15\n\n15\n\n16\n\n// user enables MFA through whitelabel UI\n\n16\n\n// user enables MFA through whitelabel UI\n\n17\n\ntry\n\n{\n\n17\n\ntry\n\n{\n\n18\n\nconst\n\nhandle\n\n=\n\nmagic\n\n.\n\nuser\n\n.\n\nenableMFA\n\n(\n\n{\n\nshowUI\n\n:\n\nfalse\n\n}\n\n)\n\n;\n\n18\n\nconst\n\nhandle\n\n=\n\nmagic\n\n.\n\nuser\n\n.\n\nenableMFA\n\n(\n\n{\n\nshowUI\n\n:\n\nfalse\n\n}\n\n)\n\n;\n\n19\n\n19\n\n20\n\nhandle\n\n20\n\nhandle\n\n21\n\n.\n\non\n\n(\n\nEnableMFAEventOnReceived\n\n.\n\nMFASecretGenerated\n\n,\n\n(\n\n{\n\nQRCode\n\n,\n\nkey\n\n}\n\n)\n\n=>\n\n{\n\n21\n\n.\n\non\n\n(\n\nEnableMFAEventOnReceived\n\n.\n\nMFASecretGenerated\n\n,\n\n(\n\n{\n\nQRCode\n\n,\n\nkey\n\n}\n\n)\n\n=>\n\n{\n\n22\n\n\u2060\n\n// Display QR code\n\n22\n\n\u2060\n\n// Display QR code\n\n23\n\nwindow\n\n.\n\nalert\n\n(\n\n`\n\nQRCode:\n\n${\n\nQRCode\n\n}\n\n\\nKey:\n\n${\n\nkey\n\n}\n\n`\n\n)\n\n;\n\n23\n\nwindow\n\n.\n\nalert\n\n(\n\n`\n\nQRCode:\n\n${\n\nQRCode\n\n}\n\n\\nKey:\n\n${\n\nkey\n\n}\n\n`\n\n)\n\n;\n\n24\n\n24\n\n25\n\n// Prompt for MFA TOTP and emit it to enable MFA\n\n25\n\n// Prompt for MFA TOTP and emit it to enable MFA\n\n26\n\nconst\n\ntotp\n\n=\n\nwindow\n\n.\n\nprompt\n\n(\n\n'Scan QR code and enter TOTP from MFA app'\n\n)\n\n;\n\n26\n\nconst\n\ntotp\n\n=\n\nwindow\n\n.\n\nprompt\n\n(\n\n'Scan QR code and enter TOTP from MFA app'\n\n)\n\n;\n\n27\n\nhandle\n\n.\n\nemit\n\n(\n\nEnableMFAEventEmit\n\n.\n\nVerifyMFACode\n\n,\n\ntotp\n\n)\n\n;\n\n27\n\nhandle\n\n.\n\nemit\n\n(\n\nEnableMFAEventEmit\n\n.\n\nVerifyMFACode\n\n,\n\ntotp\n\n)\n\n;\n\n28\n\n}\n\n)\n\n28\n\n}\n\n)\n\n29\n\n.\n\non\n\n(\n\nEnableMFAEventOnReceived\n\n.\n\nInvalidMFAOtp\n\n,\n\n(\n\n{\n\nerrorCode\n\n}\n\n)\n\n=>\n\n{\n\n29\n\n.\n\non\n\n(\n\nEnableMFAEventOnReceived\n\n.\n\nInvalidMFAOtp\n\n,\n\n(\n\n{\n\nerrorCode\n\n}\n\n)\n\n=>\n\n{\n\n30\n\n\u2060\n\n// User entered invalid MFA TOTP\n\n30\n\n\u2060\n\n// User entered invalid MFA TOTP\n\n31\n\n31\n\n32\n\n// Have the user retry entering the MFA TOTP and emit via VerifyMFACode.\n\n32\n\n// Have the user retry entering the MFA TOTP and emit via VerifyMFACode.\n\n33\n\n// You may display error and limit retries by emitting Cancel.\n\n33\n\n// You may display error and limit retries by emitting Cancel.\n\n34\n\nhandle\n\n.\n\nemit\n\n(\n\nEnableMFAEventEmit\n\n.\n\nCancel\n\n)\n\n;\n\n34\n\nhandle\n\n.\n\nemit\n\n(\n\nEnableMFAEventEmit\n\n.\n\nCancel\n\n)\n\n;\n\n35\n\n}\n\n)\n\n35\n\n}\n\n)\n\n36\n\n.\n\non\n\n(\n\nEnableMFAEventOnReceived\n\n.\n\nMFARecoveryCodes\n\n,\n\n(\n\n{\n\nrecoveryCode\n\n}\n\n)\n\n=>\n\n{\n\n36\n\n.\n\non\n\n(\n\nEnableMFAEventOnReceived\n\n.\n\nMFARecoveryCodes\n\n,\n\n(\n\n{\n\nrecoveryCode\n\n}\n\n)\n\n=>\n\n{\n\n37\n\n// Enable MFA success, user entered valid MFA TOTP, display Recovery Code\n\n37\n\n// Enable MFA success, user entered valid MFA TOTP, display Recovery Code\n\n38\n\nwindow\n\n.\n\nalert\n\n(\n\n`\n\nMFA enabled! Recovery code -\n\n${\n\nrecoveryCode\n\n}\n\n`\n\n)\n\n;\n\n38\n\nwindow\n\n.\n\nalert\n\n(\n\n`\n\nMFA enabled! Recovery code -\n\n${\n\nrecoveryCode\n\n}\n\n`\n\n)\n\n;\n\n39\n\n}\n\n)\n\n39\n\n}\n\n)\n\n40\n\n.\n\non\n\n(\n\n'error'\n\n,\n\n(\n\nerror\n\n)\n\n=>\n\n{\n\n40\n\n.\n\non\n\n(\n\n'error'\n\n,\n\n(\n\nerror\n\n)\n\n=>\n\n{\n\n41\n\n\u2060\n\n// Handle enable MFA errors\n\n41\n\n\u2060\n\n// Handle enable MFA errors\n\n42\n\n\u2060\n\n)\n\n}\n\n;\n\n42\n\n\u2060\n\n)\n\n}\n\n;\n\n43\n\n}\n\ncatch\n\n{\n\n43\n\n}\n\ncatch\n\n{\n\n44\n\n// Handle errors if required!\n\n44\n\n// Handle errors if required!\n\n45\n\n}\n\n45\n\n}", "explanation": "**Example Documentation Section Overview**\n\nThis section is a code example from the Magic Link documentation, specifically for the web client-side SDK. It demonstrates how to enable Multi-Factor Authentication (MFA) in a Magic Link-enabled application.\n\n**Main Purpose**\n\nThe main purpose of this example is to showcase a step-by-step guide on how to:\n\n1. Initialize the Magic SDK\n2. Enable MFA for a user through the Magic UI and whitelabel UI\n3. Handle events, such as MFA secret generation, Invalid MFA OTP, and MFA recovery codes\n4. Emit MFA events to enable MFA and handle errors\n\n**Key Concepts Covered**\n\nThis example covers the following key concepts:\n\n1. **Initialization**: Creating a Magic instance with a publishable API key\n2. **MFA Enablement**: Enabling MFA for a user through the Magic UI and whitelabel UI\n3. **Event Handling**: Listening for events related to MFA enablement, such as MFA secret generation, Invalid MFA OTP, and MFA recovery codes\n4. **Error Handling**: Catching and handling errors that may occur during MFA enablement\n5. **Event Emission**: Emitting MFA events to enable MFA and update the user's MFA status\n\n**Code Structure**\n\nThe example is structured as follows:\n\n1. Initialization: Importing necessary modules, creating a Magic instance, and setting up event listeners\n2. MFA Enablement: Enabling MFA for a user through the Magic UI and whitelabel UI\n3. Event Handling: Listening for events related to MFA enablement and handling errors\n4. Error Handling: Catching and handling errors that may occur during MFA enablement\n\n**Takeaways**\n\nThis example provides a clear understanding of how to implement MFA enablement in a Magic Link-enabled application, including initialization, event handling, and error handling.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#chunk-83", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nmfa-secret-generated\n\ninvalid-mfa-otp\n\nmfa-recovery-codes\n\nverify-mfa-code\n\nverify-mfa-code\n\nEmit to submit MFA TOTP submitted by user.\n\ncancel-mfa-setup\n\ncancel-mfa-setup\n\nEmit to cancel the MFA enable flow.", "explanation": "In the Magic Labs embedded wallet documentation, the '#Events' section outlines the various events that can be triggered during the 2-factor authentication (MFA) setup and verification process.\n\nThese events serve as indicators that specific actions have been taken or that certain conditions have been met, allowing your application to respond accordingly and provide a seamless user experience.\n\nHere's a breakdown of the main purposes of each event:\n\n- `mfa-secret-generated`, `mfa-recovery-codes`: These events are triggered when a MFA secret or recovery codes are generated, allowing your application to store or use them as necessary.\n- `invalid-mfa-otp`: This event is emitted when an invalid MFA time-based one-time password (TOTP) is submitted by the user, alerting your application to prompt the user to try again.\n- `verify-mfa-code`: This event is triggered when the user submits a valid MFA code, helping your application to verify and grant access.\n- `cancel-mfa-setup`: This event indicates that the user has cancelled the MFA setup flow, allowing your application to react and adjust accordingly.\n\nBy listening to these events, your application can improve the user experience and provide real-time feedback during the MFA setup and verification process.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#chunk-84", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\ndisableMFA\n\nDisplays an iframe deep linked to the beginning of the disable MFA flow. This method assumes MFA has been enabled for the logged in user. This cannot be achieved by calling showSettings() .\n\nshowSettings()\n\nOnly available with Dedicated Wallet. Access to MFA require paid add-ons. Available as of magic-sdk v28.11.0\n\nMFA\n\nmagic-sdk v28.11.0\n\n#\n\n\u2022 showUI? (Boolean): If true, show an out-of-the-box UI to take user through flow to disable MFA. Defaults to true\n\nshowUI?\n\ntrue\n\ntrue", "explanation": "**disableMFA Overview**\n\nThe `disableMFA` method, available in Magic Labs' embedded wallet, is a feature that allows users to disable Multi-Factor Authentication (MFA) associated with their Magic account. This method is only accessible for users who have already enabled MFA.\n\n**Main Purpose**\n\nThe primary purpose of `disableMFA` is to facilitate a seamless experience for users who wish to disable MFA, while also ensuring that they have taken necessary precautions to secure their account by initially enabling MFA.\n\n**Key Features**\n\nHere are the key features and parameters associated with `disableMFA`:\n\n- `showUI?`: This parameter can be set to `true` to display an out-of-the-box user interface that guides the user through the MFA disable process. The default value is `true`.\n\n**Availability and Requirements**\n\nPlease note the following:\n\n* This feature is only available in the Dedicated Wallet.\n* Accessing MFA and disabling it requires paid add-ons.\n* The `disableMFA` method was introduced in Magic SDK version 28.11.0.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#chunk-85", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 Promise which resolves when the user closes the window\n\nPromise", "explanation": "The specified section, '#Returns', is related to a function or method within the Magic Labs embedded wallet documentation. \n\nIn this case, it refers to a Promise which resolves when the user closes the window. This suggests that this Promise is triggered when the user initiates an action causing the window (likely the wallet dialog or a specific transaction window) to close.\n\nThe main purpose of this Promise is to provide a callback function or event handling mechanism, allowing developers to execute a specific action when the user closes the window. This could be used for tasks such as:\n\n- Updating the application's state\n- Displaying notifications or messages\n- Triggering additional actions or processes\n\nBy understanding the return value of this function, developers can better integrate the Magic Labs embedded wallet into their application and handle certain user interactions accordingly.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#chunk-86", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\nimport\n\n{\n\n02\n\nimport\n\n{\n\n03\n\nDisableMFAEventEmit\n\n,\n\n03\n\nDisableMFAEventEmit\n\n,\n\n04\n\nDisableMFAEventOnReceived\n\n,\n\n04\n\nDisableMFAEventOnReceived\n\n,\n\n05\n\n}\n\nfrom\n\n'@magic-sdk/types'\n\n;\n\n05\n\n}\n\nfrom\n\n'@magic-sdk/types'\n\n;\n\n06\n\n06\n\n07\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n07\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n08\n\n08\n\n09\n\n// user disables MFA through Magic UI\n\n09\n\n// user disables MFA through Magic UI\n\n10\n\ntry\n\n{\n\n10\n\ntry\n\n{\n\n11\n\nawait\n\nmagic\n\n.\n\nuser\n\n.\n\ndisableMFA\n\n(\n\n)\n\n;\n\n11\n\nawait\n\nmagic\n\n.\n\nuser\n\n.\n\ndisableMFA\n\n(\n\n)\n\n;\n\n12\n\n}\n\ncatch\n\n{\n\n12\n\n}\n\ncatch\n\n{\n\n13\n\n// Handle errors if required!\n\n13\n\n// Handle errors if required!\n\n14\n\n}\n\n14\n\n}\n\n15\n\n15\n\n16\n\n// user disables MFA through whitelabel UI\n\n16\n\n// user disables MFA through whitelabel UI\n\n17\n\ntry\n\n{\n\n17\n\ntry\n\n{\n\n18\n\nconst\n\nhandle\n\n=\n\nmagic\n\n.\n\nuser\n\n.\n\ndisableMFA\n\n(\n\n{\n\nshowUI\n\n:\n\nfalse\n\n}\n\n)\n\n;\n\n18\n\nconst\n\nhandle\n\n=\n\nmagic\n\n.\n\nuser\n\n.\n\ndisableMFA\n\n(\n\n{\n\nshowUI\n\n:\n\nfalse\n\n}\n\n)\n\n;\n\n19\n\n19\n\n20\n\nhandle\n\n20\n\nhandle\n\n21\n\n.\n\non\n\n(\n\nDisableMFAEventOnReceived\n\n.\n\nMFACodeRequested\n\n,\n\n(\n\n)\n\n=>\n\n{\n\n21\n\n.\n\non\n\n(\n\nDisableMFAEventOnReceived\n\n.\n\nMFACodeRequested\n\n,\n\n(\n\n)\n\n=>\n\n{\n\n22\n\n\u2060\n\n// Prompt user for MFA TOTP and emit it to disable MFA\n\n22\n\n\u2060\n\n// Prompt user for MFA TOTP and emit it to disable MFA\n\n23\n\nconst\n\ntotp\n\n=\n\nwindow\n\n.\n\nprompt\n\n(\n\n'Submit MFA TOTP'\n\n)\n\n;\n\n23\n\nconst\n\ntotp\n\n=\n\nwindow\n\n.\n\nprompt\n\n(\n\n'Submit MFA TOTP'\n\n)\n\n;\n\n24\n\nhandle\n\n.\n\nemit\n\n(\n\nDisableMFAEventEmit\n\n.\n\nVerifyMFACode\n\n,\n\ntotp\n\n)\n\n;\n\n24\n\nhandle\n\n.\n\nemit\n\n(\n\nDisableMFAEventEmit\n\n.\n\nVerifyMFACode\n\n,\n\ntotp\n\n)\n\n;\n\n25\n\n25\n\n26\n\n// If user lost device and needs to recover with recovery code\n\n26\n\n// If user lost device and needs to recover with recovery code\n\n27\n\nconst\n\nrecoveryCode\n\n=\n\nwindow\n\n.\n\nprompt\n\n(\n\n'Enter Recovery Code'\n\n)\n\n;\n\n27\n\nconst\n\nrecoveryCode\n\n=\n\nwindow\n\n.\n\nprompt\n\n(\n\n'Enter Recovery Code'\n\n)\n\n;\n\n28\n\nhandle\n\n.\n\nemit\n\n(\n\nDisableMFAEventEmit\n\n.\n\nLostDevice\n\n,\n\nrecoveryCode\n\n)\n\n;\n\n28\n\nhandle\n\n.\n\nemit\n\n(\n\nDisableMFAEventEmit\n\n.\n\nLostDevice\n\n,\n\nrecoveryCode\n\n)\n\n;\n\n29\n\n}\n\n)\n\n29\n\n}\n\n)\n\n30\n\n.\n\non\n\n(\n\nDisableMFAEventOnReceived\n\n.\n\nInvalidMFAOtp\n\n,\n\n(\n\n{\n\nerrorCode\n\n}\n\n)\n\n=>\n\n{\n\n30\n\n.\n\non\n\n(\n\nDisableMFAEventOnReceived\n\n.\n\nInvalidMFAOtp\n\n,\n\n(\n\n{\n\nerrorCode\n\n}\n\n)\n\n=>\n\n{\n\n31\n\n\u2060\n\n// Handle user entered invalid MFA TOTP\n\n31\n\n\u2060\n\n// Handle user entered invalid MFA TOTP\n\n32\n\n32\n\n33\n\n// Have the user retry entering the MFA TOTP and emit via VerifyMFACode.\n\n33\n\n// Have the user retry entering the MFA TOTP and emit via VerifyMFACode.\n\n34\n\n// You may display error and limit retries by emitting Cancel.\n\n34\n\n// You may display error and limit retries by emitting Cancel.\n\n35\n\nhandle\n\n.\n\nemit\n\n(\n\nDisableMFAEventEmit\n\n.\n\nCancel\n\n)\n\n;\n\n35\n\nhandle\n\n.\n\nemit\n\n(\n\nDisableMFAEventEmit\n\n.\n\nCancel\n\n)\n\n;\n\n36\n\n}\n\n)\n\n36\n\n}\n\n)\n\n37\n\n.\n\non\n\n(\n\nDisableMFAEventOnReceived\n\n.\n\nInvalidRecoveryCode\n\n,\n\n(\n\n)\n\n=>\n\n{\n\n37\n\n.\n\non\n\n(\n\nDisableMFAEventOnReceived\n\n.\n\nInvalidRecoveryCode\n\n,\n\n(\n\n)\n\n=>\n\n{\n\n38\n\n// Handle user entered invalid Recovery Code\n\n38\n\n// Handle user entered invalid Recovery Code\n\n39\n\n\u2060\n\n39\n\n\u2060\n\n40\n\n// Have the user retry entering the Recovery Code and emit via LostDevice.\n\n40\n\n// Have the user retry entering the Recovery Code and emit via LostDevice.\n\n41\n\n// You may display error and limit retries by emitting Cancel.\n\n41\n\n// You may display error and limit retries by emitting Cancel.\n\n42\n\nhandle\n\n.\n\nemit\n\n(\n\nDisableMFAEventEmit\n\n.\n\nCancel\n\n)\n\n;\n\n42\n\nhandle\n\n.\n\nemit\n\n(\n\nDisableMFAEventEmit\n\n.\n\nCancel\n\n)\n\n;\n\n43\n\n}\n\n)\n\n43\n\n}\n\n)\n\n44\n\n.\n\non\n\n(\n\n'done'\n\n,\n\n(\n\n)\n\n=>\n\n{\n\n44\n\n.\n\non\n\n(\n\n'done'\n\n,\n\n(\n\n)\n\n=>\n\n{\n\n45\n\n\u2060\n\n// Handle successful disable MFA\n\n45\n\n\u2060\n\n// Handle successful disable MFA\n\n46\n\n}\n\n)\n\n46\n\n}\n\n)\n\n47\n\n.\n\non\n\n(\n\n'error'\n\n,\n\n(\n\nerror\n\n)\n\n=>\n\n{\n\n47\n\n.\n\non\n\n(\n\n'error'\n\n,\n\n(\n\nerror\n\n)\n\n=>\n\n{\n\n48\n\n\u2060\n\n// Handle disable MFA errors\n\n48\n\n\u2060\n\n// Handle disable MFA errors\n\n49\n\n\u2060\n\n)\n\n}\n\n;\n\n49\n\n\u2060\n\n)\n\n}\n\n;\n\n50\n\n}\n\ncatch\n\n{\n\n50\n\n}\n\ncatch\n\n{\n\n51\n\n// Handle errors if required!\n\n51\n\n// Handle errors if required!\n\n52\n\n}\n\n52\n\n}", "explanation": "The provided documentation section is titled '#Example' and is an example implementation of disabling MFA (Multi-Factor Authentication) using the Magic Labs embedded wallet SDK.\n\n**Main Purpose:**\nThe main purpose of this example is to demonstrate how to programatically disable MFA for a user through two different methods:\n\n1. **Disable MFA from Magic UI**: This method allows the user to disable MFA directly through the Magic UI.\n2. **Disable MFA from Whitelabel UI**: This method allows the user to disable MFA through a custom, whitelabeled UI.\n\n**Key Functionality:**\n\n1. The example creates a new `Magic` instance with a publishable API key.\n2. It uses the `user.disableMFA()` method to disable MFA for the user. This method can be called with or without showing the Magic UI.\n3. If the MFA is disabled using the whitelabel UI, the example uses event listeners to handle different scenarios:\n\t* **MFACodeRequested**: Prompts the user to enter their MFA TOTP code.\n\t* **InvalidMFAOtp**: Handles invalid MFA TOTP codes by prompting the user to retry.\n\t* **InvalidRecoveryCode**: Handles invalid recovery codes by prompting the user to retry.\n\t* **LostDevice**: Handles device loss scenarios by prompting the user to enter their recovery code.\n\t* **done**: Handles successful MFA disabling.\n\t* **error**: Handles MFA disabling errors.\n4. The example also includes error handling using `try`/`catch` blocks to handle any potential errors.\n\nIn summary, the '#Example' section demonstrates how to use the Magic Labs embedded wallet SDK to disable MFA for a user through two different methods, with a focus on handling different scenarios and error cases.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#chunk-87", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nmfa-code-requested\n\ninvalid-mfa-otp\n\ninvalid-recovery-code\n\nverify-mfa-code\n\nverify-mfa-code\n\nEmit to submit MFA TOTP submitted by user.\n\nlost-device\n\nlost-device\n\nEmit to submit Recovery Code submitted by user.\n\ncancel-mfa-disable\n\ncancel-mfa-disable\n\nEmit to cancel the MFA disable flow.", "explanation": "In the context of the Magic Labs embedded wallet, '#Events' refers to a list of predefined notification signals that are emitted in response to specific user interactions or system events. These events provide a way for the client-side application to react and perform actions based on what the user is doing.\n\nThe main purpose of these events is to help the application stay in sync with the user's actions and provide a seamless experience. Here's a breakdown of each event:\n\n1. **mfa-code-requested**: Notified when the Magic Labs wallet requests an MFA (Multi-Factor Authentication) code from the user.\n2. **invalid-mfa-otp**: Notified when the user enters an invalid MFA OTP (One-Time Password).\n3. **invalid-recovery-code**: Notified when the user enters an invalid recovery code.\n4. **verify-mfa-code**: Notified when the user submits a valid MFA code (this event is emitted twice, indicating a confirmation of successful code submission).\n5. **lost-device**: Notified when the user submits a recovery code in case they have lost their device.\n6. **lost-device**: (Duplicate event, likely a typo) Notified when the user submits a recovery code in case they have lost their device (same as above).\n7. **cancel-mfa-disable**: Notified when the user cancels the MFA disable flow.\n\nBy listening to these events, the client-side application can perform actions such as:\n\n* Displaying a prompt to enter the MFA code when `mfa-code-requested` is emitted.\n* Alerting the user when they enter an invalid MFA or recovery code.\n* Confirming successful MFA code submission when `verify-mfa-code` is emitted.\n* Dismissing the recovery code prompt when the user submits a valid code.\n* Canceling the MFA disable flow when `cancel-mfa-disable` is emitted.\n\nThese events enable the application to handle various user scenarios in a robust and user-friendly manner.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#chunk-88", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nrevealPrivateKey\n\nDisplays an iframe revealing the current user\u2019s private key. Allows for users to take their private key to another wallet. Neither Magic nor the developer can see this key; only the end user can.\n\nOnly available with Dedicated Wallet.\n\n#\n\n\u2022 None", "explanation": "Based on the given documentation, the `#revealPrivateKey` section appears to be about an API endpoint or a feature within the Magic Labs embedded wallet. Its main purpose is to provide a way for users to view and retrieve their private key within a secure environment, such as an iframe.\n\nThis feature is designed to allow users to safely access their private key, which they can then take to another wallet, if desired. It's essential to note that during this process, neither Magic nor the developer will be able to view the user's private key, as it remains accessible only to the end user.\n\nSince this feature requires a Dedicated Wallet, it seems to be a premium or enterprise-focused offering within the Magic Labs platform. The simplicity of its argument list, with just a single \"\u2022 None,\" suggests that it may not require any input parameters to function, potentially prompting the display of the user's private key in the iframe.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#chunk-89", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 Promise which resolves when the user closes the window\n\nPromise", "explanation": "In the context of Magic Labs embedded wallet documentation, the section titled '#Returns' is specifying the type of data that will be returned by the API method or function.\n\nIn this particular case, the #Returns section mentions that the function returns a 'Promise which resolves when the user closes the window'. \n\nThe main purpose of this #Returns section is to indicate that the expected output of the function is a promise that is resolved or fulfilled when the user closes the browser window. This means that when the user closes the window, the promise will be resolved and any further processing or actions can take place. This is an essential piece of information for a developer implementing this API method or function to understand the expected behavior and write their code accordingly.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#chunk-90", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\n02\n\n03\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n03\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n04\n\n04\n\n05\n\ntry\n\n{\n\n05\n\ntry\n\n{\n\n06\n\nawait\n\nmagic\n\n.\n\nuser\n\n.\n\nrevealPrivateKey\n\n(\n\n)\n\n;\n\n06\n\nawait\n\nmagic\n\n.\n\nuser\n\n.\n\nrevealPrivateKey\n\n(\n\n)\n\n;\n\n07\n\n}\n\ncatch\n\n{\n\n07\n\n}\n\ncatch\n\n{\n\n08\n\n// Handle errors if required!\n\n08\n\n// Handle errors if required!\n\n09\n\n}\n\n09\n\n}", "explanation": "**Example Overview**\n\nThe provided documentation section is an example code snippet written in JavaScript, which demonstrates how to use the Magic Labs embedded wallet functionality. This example showcases the basic setup of the Magic SDK and its essential functionality.\n\n**Main Purpose**\n\nThe primary purpose of this example is to demonstrate the following key aspects of the Magic Labs embedded wallet:\n\n1. **Importing the Magic SDK**: The example shows how to import the Magic SDK in a JavaScript project, which is a crucial step in utilizing the Magic Labs wallet functionality.\n2. **Initializing the Magic SDK**: The code snippet highlights how to create an instance of the Magic SDK using a publishable API key.\n3. **Revealing Private Keys**: The `revealPrivateKey` method is used to retrieve a user's private key. This is a fundamental operation in the Magic Labs embedded wallet, facilitating wallet interactions.\n\n**Key Takeaways**\n\n1. Import the Magic SDK in your JavaScript project.\n2. Initialize the Magic SDK instance using a publishable API key.\n3. Use the `revealPrivateKey` method within a try-catch block to handle potential errors.\n\n**Best Practice Recommendations**\n\n1. When implementing this example in your project, remember to handle errors properly to ensure robustness and maintain user trust.\n2. Securely store and manage the publishable API key to prevent unauthorized access.\n3. Familiarize yourself with the Magic Labs documentation and SDK to unlock more advanced features and wallet functionality.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#chunk-91", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nrequestInfoWithUI\n\nUniversal wallets will soon be merged with Dedicated Wallets into a single product line. Universal apps created before February 7, 2024 will work as expected with no change. See our blog post to learn more.\n\nblog post\n\nDisplays the wallet widget within an iframe that prompts the user to consent to sharing information with the requesting dApp with OpenID profile scopes. Currently, the only profile scope that can be requested is a verified email. Collecting a verified email address from third-party wallet users (MetaMask, Coinbase Wallet, etc.) is a premium feature but included in the free trial period (see pricing). User must be signed in for this method to return or else it will throw an error.\n\nwallet widget\n\npricing\n\nOnly available with Universal Wallet.\n\n#\n\n\u2022 scope? (Object): The object containing requested OpenID profile scopesemail?: String : If the user should be prompted to provide them email as a required or optional field\n\nscope?\n\n\u2022 email?: String : If the user should be prompted to provide them email as a required or optional field\n\nemail?: String\n\nrequired\n\noptional", "explanation": "The documentation section `#requestInfoWithUI - #Arguments` refers to a method called `requestInfoWithUI` available in the Magic Labs embedded wallet.\n\n**What it does:** The `requestInfoWithUI` method displays a wallet widget within an iframe that prompts the user to consent to sharing their information with the requesting application (dApp). The method is used to collect verified email addresses from users, but it's currently only available with Universal Wallets and requires users to be signed in.\n\n**Main purpose:** The main purpose of the `requestInfoWithUI` method is to:\n\n1. Prompt users to consent to sharing their information\n2. Collect a verified email address from users\n3. Return the user's email address to the requesting application\n\n**Key arguments:**\n\n* `scope`: An object containing requested OpenID profile scopes.\n* `email` (optional): A string property within the `scope` object that determines whether the user should be prompted to provide an email address as a required or optional field. It can have two values:\n\t+ `required`: The user must provide an email address.\n\t+ `optional`: The user can choose to provide an email address or not.\n\nBy using this method, developers can integrate a seamless and secure way to collect user information and enhance their application's user experience.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#chunk-92", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 A promise which returns an Object: Contains result of the requested scopesemail?: String: The email of the user if they consented to providing it in the UI\n\npromise\n\nObject\n\n\u2022 email?: String: The email of the user if they consented to providing it in the UI\n\nemail?: String", "explanation": "The '#Returns' section in the Magic Labs embedded wallet documentation is about the response format when an API request is made.\n\n**Main Purpose:** The '#Returns' section is used to explain the structure of the response or data that is returned from a successful API call, specifically in the context of the Magic Labs embedded wallet.\n\n**Key Points:**\n\n- The API returns a **Promise**, which is a JavaScript value that may not be available yet but is likely to be available in the future.\n- The Promise resolves to an **Object**, which contains the result of the requested operation.\n- Within this Object, there is a property called **email**, which is a **String**. This email property contains the email address of the user if they provided it through the Magic Labs UI.\n- The **email** property is optional (denoted by the '?' symbol). This means that the property may or may not be present in the returned Object, depending on whether the user chose to provide their email address.\n\nIn summary, the '#Returns' section provides information about the structure and contents of the response received from a successful API call in the Magic Labs embedded wallet.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#chunk-93", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n\"magic-sdk\"\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n\"magic-sdk\"\n\n02\n\n02\n\n03\n\n// after user has already logged in\n\n03\n\n// after user has already logged in\n\n04\n\nconst\n\nuserInfo\n\n=\n\nawait\n\nmagic\n\n.\n\nuser\n\n.\n\nrequestInfoWithUI\n\n(\n\n{\n\nscope\n\n:\n\n{\n\nemail\n\n:\n\n\"required\"\n\n}\n\n}\n\n)\n\n04\n\nconst\n\nuserInfo\n\n=\n\nawait\n\nmagic\n\n.\n\nuser\n\n.\n\nrequestInfoWithUI\n\n(\n\n{\n\nscope\n\n:\n\n{\n\nemail\n\n:\n\n\"required\"\n\n}\n\n}\n\n)\n\n05\n\n\u2060\n\nconsole\n\n.\n\nlog\n\n(\n\nuserInfo\n\n.\n\nemail\n\n)\n\n;\n\n// the user's email if they consented.\n\n05\n\n\u2060\n\nconsole\n\n.\n\nlog\n\n(\n\nuserInfo\n\n.\n\nemail\n\n)\n\n;\n\n// the user's email if they consented.", "explanation": "**Section: #Example from Magic Link Documentation**\n\nThis section from the Magic Link documentation is an example code snippet that demonstrates how to retrieve a user's email address after they have logged in using the Magic Link SDK.\n\n**Main Purpose:**\n\nThe main purpose of this example is to show developers how to use the `requestInfoWithUI` method to retrieve a user's email address, which has been specified as 'required' in the scope. This method prompts the user to consent to sharing their email address, and if they agree, the email address is returned in the `userInfo` object.\n\n**Key Points:**\n\n* The example imports the Magic library from the 'magic-sdk' module.\n* It calls the `requestInfoWithUI` method on the `magic.user` object, passing an object with the `scope` property set to `{ email: \"required\" }`.\n* This method prompts the user to consent to sharing their email address.\n* If the user consents, the email address is returned in the `userInfo` object.\n* The example logs the user's email address to the console.\n\nBy following this example, developers can integrate the Magic Link SDK into their application and request the user's email address after login.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#chunk-94", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nonUserLoggedOut\n\nWhen the useStorageCache is enabled, there might be situations where the isLoggedIn function returns true despite the user being logged out. In such instances, an event will be emitted after a few milliseconds, providing an opportunity to manage the user's logged-out state, such as when a session expires.\n\nOnly necessary with when the useStorageCache option is set to true.\n\nuseStorageCache\n\ntrue\n\n#\n\n\u2022 callback ((isLoggedOut: boolean) => void): The callback function when the event is emitted\n\ncallback\n\n(isLoggedOut: boolean) => void", "explanation": "**Overview of `onUserLoggedOut`**\n\n`onUserLoggedOut` is an event emitted by the Magic Labs embedded wallet when the user is logged out, especially when the `useStorageCache` option is enabled. This event provides a callback opportunity to manage the user's logged-out state, such as handling session expiration.\n\n**Main Purpose**\n\nThe main purpose of `onUserLoggedOut` is to notify your application that the user is no longer logged in, even if the `isLoggedIn` function continues to return `true` due to caching issues. By handling this event, you can ensure that your application accurately reflects the user's logged-in or logged-out state.\n\n**Event Parameters**\n\nThe event emits a callback function with a single parameter, `isLoggedOut`, which is a boolean indicating whether the user is logged out or not. This allows your application to react accordingly and update its state as needed.\n\n**Required Condition**\n\nPlease note that `onUserLoggedOut` is only necessary when the `useStorageCache` option is set to `true`. If caching is disabled, this event will not be emitted.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#chunk-95", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 A function that can be called to unsubscribe from the event\n\nfunction", "explanation": "Based on the provided documentation from Magic Labs' embedded wallet, the `#Returns` section is discussing a function that returns something, but it seems more like it's referencing something called or a return function in a loosely coded documentation snippet. However, the key focus should be a method declaration or interface perhaps containing something called 'a function'.\n\n Nonetheless, the function supposedly to be referred to within the undefined Returns section probably is actually associated within the context of the  given Magic's SDK documentation when they discuss the 'unsubscribe' function or 'cleanup' related functions employed by program code.\n\nThe main purpose of the unsubscribing function is typically for removing or canceling the event listeners created within the event emitter or the observable\u2019s observers which previously are created in the respective scope of the code for adding function subscribers. \n\nThe main purpose and intent behind this feature would be that of a \u201cmemory cleanup\u201d where useful subscription 'tokens' or a variable could be utilized for keeping up reference variables and be sure that from applications point of view the event is completely removed, and from a user side the state would clearly get updated, keeping a \u201chealthy\u201d form out of the memory, or to resolve memory waste or optimize user performance within those systems.\n\nBased on prior reasoning the exact details weren't really fully explained in that snippet, so assuming logic around a developer\u2019s perspective:\n\n  `Returns: function unsubscribe(eventId, callbackId)` \n  or\n  `Returns: function unsubscribe(token)`\n\nor even\n\n`\u2022 A function that performs a flush operation`\n\nHowever, as the intent behind this operation wasn't entirely clear in this specific snippet, here is a better or clear proposed version from the perspective of a developer working utilizing the application, that might make things clearer. So with this a clearly definable definition or interface and description are provided as a template:\n\n\n\n  # Returns \n  function unsubscribe(token)\n\nThis function removes the event that is listening on the current context, releases the internal resources allocated on the previous step upon receiving the event token, which is generated internally during setup process of the event.\n\n\n\nAlso the `Return` here really is referring like this possibly because it returns some kind of result possibly or doesn't it possibly return status, request id, and the like that the API decides.\n\n\n\n### It should be known that what Magic calls an 'Object' here usually might look at like that where lots of variables described\n\nThis is an excerpt or a documentation excerpt from the Magic Link developer platform, probably from the embedded wallet sections.\n\n\n\nOne recommended best practice is actually remove event-listeners when components are being destroyed or become invisible that will lead to garbage collection. If a memory leak will begin they can make the functionality crash their memory leak or that is because probably of some unexpected cause.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#chunk-96", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n\"magic-sdk\"\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n\"magic-sdk\"\n\n02\n\n02\n\n03\n\n\u2060\n\n// Create Magic instance with useStorageCache set to true\n\n03\n\n\u2060\n\n// Create Magic instance with useStorageCache set to true\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n,\n\n{\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n,\n\n{\n\n05\n\nuseStorageCache\n\n:\n\ntrue\n\n05\n\nuseStorageCache\n\n:\n\ntrue\n\n06\n\n}\n\n)\n\n;\n\n06\n\n}\n\n)\n\n;\n\n07\n\n07\n\n08\n\nmagic\n\n.\n\nuser\n\n.\n\nonUserLoggedOut\n\n(\n\n(\n\nisLoggedOut\n\n:\n\nboolean\n\n)\n\n=>\n\n{\n\n08\n\nmagic\n\n.\n\nuser\n\n.\n\nonUserLoggedOut\n\n(\n\n(\n\nisLoggedOut\n\n:\n\nboolean\n\n)\n\n=>\n\n{\n\n09\n\n// Do something when user is logged out\n\n09\n\n// Do something when user is logged out\n\n10\n\nnavigation\n\n.\n\nnavigate\n\n(\n\n'LoginScreen'\n\n)\n\n10\n\nnavigation\n\n.\n\nnavigate\n\n(\n\n'LoginScreen'\n\n)\n\n11\n\n}\n\n)\n\n11\n\n}\n\n)", "explanation": "This section from the Magic Labs documentation is titled '#Example' and serves as a code snippet to demonstrate how to use the Magic instance to handle user login and logout events.\n\n**Main Purpose:** \nThe main purpose of this example is to show how to create a Magic instance, set up event listeners for user login and logout, and perform actions when these events occur.\n\n**Key Components:**\n\n1. Importing the Magic library from the \"magic-sdk\".\n2. Creating a new Magic instance with a Publishable API Key and setting `useStorageCache` to `true`.\n3. Defining a callback function to handle the `onUserLoggedOut` event, which triggers when the user logs out.\n4. Within the callback function, navigating to a \"LoginScreen\" when the user is logged out.\n\n**In a Real-World Context:**\n\nThis example would be used in a web application to handle user authentication flow. The Magic instance is created with a Publishable API Key, and the `onUserLoggedOut` event listener is set up to navigate to the login screen when the user logs out. This allows the application to smoothly transition between logged-in and logged-out states.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#chunk-97", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nThe OAuth Module and it's members are accessible on the Magic SDK instance by the oauth2 property.\n\noauth2\n\nTo use the OAuth Module in your application, install @magic-ext/oauth2 along with magic-sdk.\n\n@magic-ext/oauth2\n\nmagic-sdk\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\nimport\n\n{\n\nOAuthExtension\n\n}\n\nfrom\n\n'@magic-ext/oauth2'\n\n;\n\n02\n\nimport\n\n{\n\nOAuthExtension\n\n}\n\nfrom\n\n'@magic-ext/oauth2'\n\n;\n\n03\n\n03\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n,\n\n{\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n,\n\n{\n\n05\n\nextensions\n\n:\n\n[\n\nnew\n\nOAuthExtension\n\n(\n\n)\n\n]\n\n,\n\n05\n\nextensions\n\n:\n\n[\n\nnew\n\nOAuthExtension\n\n(\n\n)\n\n]\n\n,\n\n06\n\n}\n\n)\n\n;\n\n06\n\n}\n\n)\n\n;\n\n07\n\n07\n\n08\n\nmagic\n\n.\n\noauth2\n\n;\n\n08\n\nmagic\n\n.\n\noauth2\n\n;\n\n09\n\nmagic\n\n.\n\noauth2\n\n.\n\nloginWithRedirect\n\n;\n\n09\n\nmagic\n\n.\n\noauth2\n\n.\n\nloginWithRedirect\n\n;\n\n10\n\nmagic\n\n.\n\noauth2\n\n.\n\ngetRedirectResult\n\n;\n\n10\n\nmagic\n\n.\n\noauth2\n\n.\n\ngetRedirectResult\n\n;\n\n#\n\nloginWithRedirect\n\nStarts the OAuth 2.0 login flow.\n\nOnly available with Dedicated Wallet.\n\n#\n\n\u2022 provider (String): The OAuth provider being used for login\n\n\u2022 redirectURI (String): A URL a user is sent to after they successfully log in\n\n\u2022 scope? (Array): Defines the specific permissions an application requests from a user\n\nprovider\n\nredirectURI\n\nscope?", "explanation": "**OAuth Module - #loginWithRedirect - #Arguments**\n\nThe `loginWithRedirect` method, part of the OAuth Module, is used to initiate the OAuth 2.0 login flow for Dedicated Wallet users. Its primary purpose is to redirect the user to the OAuth provider's login page, where they can authenticate and grant your application access to their account.\n\n**Main Functionality:**\n\nThe `loginWithRedirect` method takes three arguments:\n\n1. **provider (String)**: Specifies the OAuth provider being used for login (e.g., Google, Facebook, etc.).\n2. **redirectURI (String)**: A URL that the user is sent to after successfully logging in. This URL can be used to handle the user's redirect after authorization.\n3. **scope? (Array)**: An optional array of specific permissions that your application requests from the user. This allows you to ask for only the permissions your application requires.\n\n**Example Use Case:**\n\nTo use `loginWithRedirect`, you would first create a Magic SDK instance with the OAuth Module enabled, as shown in the documentation. Then, you would call `loginWithRedirect` with the desired provider, redirect URI, and optional scope.\n\n```javascript\nconst magic = new Magic('PUBLISHABLE_API_KEY', {\n  extensions: [\n    new OAuthExtension()\n  ]\n});\n\nmagic.oauth2.loginWithRedirect({\n  provider: 'google',\n  redirectURI: 'https://example.com/oauth/callback',\n  scope: ['profile', 'email']\n});\n```\n\nThis will initiate the OAuth 2.0 login flow with Google as the provider, sending the user to the Google login page. After successful login, the user will be redirected to the specified `redirectURI` with an authorization code, which can be exchanged for an access token using the `getRedirectResult` method.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#chunk-98", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 None", "explanation": "It appears that the '#Returns' section in the Magic Labs embedded wallet documentation is empty, indicating that Magic Labs has not specified any return values for the API functions in this documentation.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#chunk-99", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nGoogle\n\n'google'\n\n'google'\n\nGoogle demo\n\nGoogle demo\n\nFacebook\n\n'facebook'\n\n'facebook'\n\nFacebook demo\n\nFacebook demo\n\nTwitter\n\n'twitter'\n\n'twitter'\n\nTwitter demo\n\nTwitter demo\n\nApple\n\n'apple'\n\n'apple'\n\nApple demo\n\nApple demo\n\nDiscord\n\n'discord'\n\n'discord'\n\nDiscord demo\n\nDiscord demo\n\nGitHub\n\n'github'\n\n'github'\n\nGithub demo\n\nGithub demo\n\nLinkedIn\n\n'linkedin'\n\n'linkedin'\n\nLinkedIn demo\n\nLinkedIn demo\n\nBitbucket\n\n'bitbucket'\n\n'bitbucket'\n\nBitbucket demo\n\nBitbucket demo\n\nGitLab\n\n'gitlab'\n\n'gitlab'\n\nGitLab demo\n\nGitLab demo\n\nTwitch\n\n'twitch'\n\n'twitch'\n\nTwitch demo\n\nTwitch demo\n\nMicrosoft\n\n'microsoft'\n\n'microsoft'\n\nMicrosoft demo\n\nMicrosoft demo", "explanation": "**Overview of Valid Providers**\n\nThe given documentation section, titled '#Valid Providers', lists various authentication providers that are supported by Magic Labs' embedded wallet. These providers allow users to connect their existing accounts to the wallet, enabling seamless login and authentication experiences.\n\n**Main Purpose**\n\nThe primary purpose of this section is to provide a comprehensive list of valid providers that can be used with the Magic Labs embedded wallet. This information is essential for developers who are integrating the wallet into their applications, enabling them to choose from a wide range of providers to cater to their users' diverse needs.\n\n**Key Highlights**\n\n* The listed providers include popular services like Google, Facebook, Twitter, and GitHub.\n* Each provider is represented by a name, a shortened identifier, and a demo title, providing a clear understanding of the available options.\n* This information helps developers to choose the most suitable provider for their use case and ensures that their applications integrate correctly with the Magic Labs embedded wallet.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#chunk-100", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\nimport\n\n{\n\nOAuthExtension\n\n}\n\nfrom\n\n'@magic-ext/oauth2'\n\n;\n\n02\n\nimport\n\n{\n\nOAuthExtension\n\n}\n\nfrom\n\n'@magic-ext/oauth2'\n\n;\n\n03\n\n03\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n,\n\n{\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n,\n\n{\n\n05\n\nextensions\n\n:\n\n[\n\nnew\n\nOAuthExtension\n\n(\n\n)\n\n]\n\n,\n\n05\n\nextensions\n\n:\n\n[\n\nnew\n\nOAuthExtension\n\n(\n\n)\n\n]\n\n,\n\n06\n\n}\n\n)\n\n;\n\n06\n\n}\n\n)\n\n;\n\n07\n\n07\n\n08\n\nawait\n\nmagic\n\n.\n\noauth2\n\n.\n\nloginWithRedirect\n\n(\n\n{\n\n08\n\nawait\n\nmagic\n\n.\n\noauth2\n\n.\n\nloginWithRedirect\n\n(\n\n{\n\n09\n\nprovider\n\n:\n\n'...'\n\n/* 'google', 'facebook', 'apple', etc. */\n\n,\n\n09\n\nprovider\n\n:\n\n'...'\n\n/* 'google', 'facebook', 'apple', etc. */\n\n,\n\n10\n\nredirectURI\n\n:\n\n'https://your-app.com/your/oauth/callback'\n\n,\n\n10\n\nredirectURI\n\n:\n\n'https://your-app.com/your/oauth/callback'\n\n,\n\n11\n\nscope\n\n:\n\n[\n\n'user:email'\n\n]\n\n/* optional */\n\n,\n\n11\n\nscope\n\n:\n\n[\n\n'user:email'\n\n]\n\n/* optional */\n\n,\n\n12\n\n}\n\n)\n\n;\n\n12\n\n}\n\n)\n\n;", "explanation": "### Example Overview\n\nThe provided documentation section, titled '#Example', is a code snippet that demonstrates how to use the Magic SDK to implement OAuth 2.0 login with redirect functionality for your web application.\n\n### Main Purpose\n\nThe main purpose of this example is to showcase a step-by-step implementation of OAuth 2.0 login in your web application using Magic Labs' embedded wallet.\n\n### Code Breakdown\n\nThe code imports the necessary modules, creates an instance of the Magic class, and initializes the OAuth extension. It then uses the `loginWithRedirect` method to initiate the OAuth 2.0 login flow, which redirects the user to the chosen provider's authorization page.\n\nThe code snippet provides a basic structure for implementing OAuth 2.0 login with redirect, including:\n\n* Importing required modules\n* Creating an instance of the Magic class and initializing the OAuth extension\n* Specifying the OAuth provider (e.g., Google, Facebook, Apple)\n* Setting the redirect URI and scope (optional)\n\n### Key Takeaways\n\n* The example uses the `loginWithRedirect` method to initiate the OAuth 2.0 login flow\n* The `OAuthExtension` class is used to configure the OAuth 2.0 settings\n* The `redirectURI` property is required to specify the callback URL after the user is redirected from the provider's authorization page\n* The `scope` property is optional and can be used to specify the permissions required for the OAuth 2.0 flow\n\n### Implementation\n\nTo implement this example in your web application, you will need to:\n\n1. Import the necessary modules\n2. Create an instance of the Magic class and initialize the OAuth extension\n3. Specify the OAuth provider and redirect URI\n4. Call the `loginWithRedirect` method to initiate the OAuth 2.0 login flow\n\nBy following this example, you can integrate OAuth 2.0 login with redirect functionality into your web application using Magic Labs' embedded wallet.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#chunk-101", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\ngetRedirectResult\n\nReturns the final OAuth 2.0 result.\n\nOnly available with Dedicated Wallet.\n\n#\n\n\u2022 lifespan? (Number): Set the lifespan of the resolved Decentralize ID token. Defaults to 900s (15 mins)\n\nlifespan?", "explanation": "The section '#getRedirectResult - #Arguments' in the Magic Labs embedded wallet documentation explains an API function called `getRedirectResult`.\n\n**Purpose:** The main purpose of this function is to retrieve the final OAuth 2.0 result after a redirect flow (typically after the user has been authenticated) is completed, specifically for Dedicated Wallets.\n\n**Key Functionality:** This function allows your application to receive the outcome of the authentication process, including the user's Decentralized ID (DID) token. The token is valid for a set period of time, which can be configured using the `lifespan` parameter.\n\n**lifespan parameter:** The `lifespan` parameter determines how long the acquired DID token is valid for. Its default value is 900 seconds (15 minutes). By adjusting the `lifespan` value, you can customize the token's expiration time according to your application's needs.\n\nIn summary, `getRedirectResult` is a critical API function for dedicated wallets that enables your application to securely retrieve user authentication results and access their Decentralized ID tokens with a specified lifespan.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#chunk-102", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 PromiEvent<object>:\u2060magic (Object): Information about the authenticated Magic user. Comprised of idToken and userMetadata.oauth (Object): Information about the authenticated OAuth user. Comprised of accessToken, provider, scope, userHandle, and userInfo.\n\nPromiEvent<object>\n\n\u2022 \u2060magic (Object): Information about the authenticated Magic user. Comprised of idToken and userMetadata.\n\n\u2022 oauth (Object): Information about the authenticated OAuth user. Comprised of accessToken, provider, scope, userHandle, and userInfo.\n\nmagic\n\nidToken\n\nuserMetadata\n\noauth\n\naccessToken\n\nprovider\n\nscope\n\nuserHandle\n\nuserInfo", "explanation": "**Returns Section Explanation**\n\nThe `Returns` section of the Magic Labs embedded wallet documentation explains the information that the API or method will return when executed. In this case, it describes the response when a user is authenticated using Magic.\n\n**Main Purpose:**\n\nThe primary purpose of the `Returns` section is to provide clarity on the structure and content of the response data returned by the API. This helps developers who are using the Magic Labs embedded wallet to write their code and handle the responses correctly.\n\n**Key Points:**\n\n* The response is an `Object` containing two main parts: `magic` and `oauth`.\n* `magic` contains information about the authenticated Magic user, including an `idToken` and `userMetadata`.\n* `oauth` contains information about the authenticated OAuth user, including an `accessToken`, `provider`, `scope`, `userHandle`, and `userInfo`.\n* Each of these objects contains specific properties that are described in detail in the documentation.\n\nBy understanding the structure and content of the response, developers can write their code to handle the authentication process correctly and retrieve the necessary information about the authenticated user.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#chunk-103", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\nimport\n\n{\n\nOAuthExtension\n\n}\n\nfrom\n\n'@magic-ext/oauth2'\n\n;\n\n02\n\nimport\n\n{\n\nOAuthExtension\n\n}\n\nfrom\n\n'@magic-ext/oauth2'\n\n;\n\n03\n\n03\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n,\n\n{\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n,\n\n{\n\n05\n\nextensions\n\n:\n\n[\n\nnew\n\nOAuthExtension\n\n(\n\n)\n\n]\n\n,\n\n05\n\nextensions\n\n:\n\n[\n\nnew\n\nOAuthExtension\n\n(\n\n)\n\n]\n\n,\n\n06\n\n}\n\n)\n\n;\n\n06\n\n}\n\n)\n\n;\n\n07\n\n07\n\n08\n\n// optionally pass in number to method to set Decentralized ID token lifespan\n\n08\n\n// optionally pass in number to method to set Decentralized ID token lifespan\n\n09\n\nconst\n\nresult\n\n=\n\nawait\n\nmagic\n\n.\n\noauth2\n\n.\n\ngetRedirectResult\n\n(\n\n)\n\n;\n\n09\n\nconst\n\nresult\n\n=\n\nawait\n\nmagic\n\n.\n\noauth2\n\n.\n\ngetRedirectResult\n\n(\n\n)\n\n;\n\n10\n\n10\n\n11\n\n// Result has the following interface\n\n11\n\n// Result has the following interface\n\n12\n\ninterface\n\nOAuthRedirectResult\n\n{\n\n12\n\ninterface\n\nOAuthRedirectResult\n\n{\n\n13\n\nmagic\n\n:\n\n{\n\n13\n\nmagic\n\n:\n\n{\n\n14\n\nidToken\n\n:\n\nstring\n\n;\n\n14\n\nidToken\n\n:\n\nstring\n\n;\n\n15\n\nuserMetadata\n\n:\n\nMagicUserMetadata\n\n;\n\n15\n\nuserMetadata\n\n:\n\nMagicUserMetadata\n\n;\n\n16\n\n}\n\n,\n\n16\n\n}\n\n,\n\n17\n\noauth\n\n:\n\n{\n\n17\n\noauth\n\n:\n\n{\n\n18\n\nprovider\n\n:\n\nstring\n\n;\n\n18\n\nprovider\n\n:\n\nstring\n\n;\n\n19\n\nscope\n\n:\n\nstring\n\n[\n\n]\n\n;\n\n19\n\nscope\n\n:\n\nstring\n\n[\n\n]\n\n;\n\n20\n\naccessToken\n\n:\n\nstring\n\n;\n\n20\n\naccessToken\n\n:\n\nstring\n\n;\n\n21\n\nuserHandle\n\n:\n\nstring\n\n;\n\n21\n\nuserHandle\n\n:\n\nstring\n\n;\n\n22\n\nuserInfo\n\n:\n\n...\n\n;\n\n22\n\nuserInfo\n\n:\n\n...\n\n;\n\n23\n\n}\n\n23\n\n}\n\n24\n\n}\n\n;\n\n24\n\n}\n\n;", "explanation": "**Understanding the '#Example' Documentation Section**\n\nThe '#Example' documentation section is a code snippet showcasing how to use the Magic Labs embedded wallet library to obtain a Decentralized ID (DID) token via OAuth2. This section is part of the client-side SDK documentation, specifically highlighting how to implement OAuth2 authentication and retrieve user information.\n\n**Main Purpose:**\n\nThe main purpose of this code snippet is to demonstrate how to use the Magic Labs embedded wallet library to:\n\n1. Initialize the Magic instance with a publishable API key.\n2. Create an OAuthExtension instance to handle OAuth2 authentication.\n3. Use the `getRedirectResult` method to obtain a DID token and user information.\n4. Parse the result using the `OAuthRedirectResult` interface, which includes attributes such as `idToken`, `userMetadata`, `oauth`, `userHandle`, and `userInfo`.\n\n**Key Features:**\n\n* Initializing the Magic instance with a publishable API key.\n* Creating an OAuthExtension instance for OAuth2 authentication.\n* Using the `getRedirectResult` method to obtain a DID token and user information.\n* Parsing the result using the `OAuthRedirectResult` interface.\n\n**Context:**\n\nThis documentation section is likely intended for developers working on web applications that utilize Magic Labs' embedded wallet library for authentication and user management. The code snippet demonstrates a basic example of how to integrate OAuth2 authentication using the library, which can be adapted and extended to fit specific use cases and requirements.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#chunk-104", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nThis module requires an enterprise agreement. For more details click here.\n\nclick here\n\nThe OpenID Module and it's members are accessible on the Magic SDK instance by the openid property.\n\nopenid\n\nTo use the OpenID Module in your application, install @magic-ext/oidc along with magic-sdk.\n\n@magic-ext/oidc\n\nmagic-sdk\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\nimport\n\n{\n\nOpenIdExtension\n\n}\n\nfrom\n\n'@magic-ext/oidc'\n\n;\n\n02\n\nimport\n\n{\n\nOpenIdExtension\n\n}\n\nfrom\n\n'@magic-ext/oidc'\n\n;\n\n03\n\n03\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n,\n\n{\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n,\n\n{\n\n05\n\nextensions\n\n:\n\n[\n\nnew\n\nOpenIdExtension\n\n(\n\n)\n\n]\n\n,\n\n05\n\nextensions\n\n:\n\n[\n\nnew\n\nOpenIdExtension\n\n(\n\n)\n\n]\n\n,\n\n06\n\n}\n\n)\n\n;\n\n06\n\n}\n\n)\n\n;\n\n07\n\n07\n\n08\n\nmagic\n\n.\n\nopenid\n\n;\n\n08\n\nmagic\n\n.\n\nopenid\n\n;\n\n09\n\nmagic\n\n.\n\nopenid\n\n.\n\nloginWithOIDC\n\n;\n\n09\n\nmagic\n\n.\n\nopenid\n\n.\n\nloginWithOIDC\n\n;\n\n#\n\nloginWithOIDC\n\nAuthenticate users via your preferred OIDC client.\n\nOnly available with Dedicated Wallet.\n\n#\n\n\u2022 jwt (String): The OIDC token from your identity provider.\n\n\u2022 providerId (String): An alphanumeric ID provided by Magic after successful configuration of your identity provider.\n\n\u2022 lifespan? (Number): Set the lifespan of the resolved Decentralize ID token. Defaults to 900s (15 mins)\n\njwt\n\nproviderId\n\nlifespan?", "explanation": "**OpenID Module: #loginWithOIDC - #Arguments**\n\nThe OpenID Module in Magic Labs is a feature that enables authentication of users via OpenID Connect (OIDC) clients. It is accessible on the Magic SDK instance through the `openid` property.\n\n**Main Purpose:**\n\nThe main purpose of the OpenID Module is to authenticate users using OIDC tokens from their preferred identity providers. It is particularly useful for Dedicated Wallet users who require robust security and authentication features.\n\n**Key Functionality:**\n\n* The `loginWithOIDC` method is used to authenticate users via OIDC clients.\n* It takes three mandatory arguments:\n\t+ `jwt` (String): The OIDC token from the user's identity provider.\n\t+ `providerId` (String): An alphanumeric ID provided by Magic after successful configuration of the identity provider.\n\t+ `lifespan` (Number): Optional argument to set the lifespan of the resolved Decentralized ID token (defaults to 900s or 15 minutes).\n\n**Example Use Case:**\n\nTo use the OpenID Module, you would first install the required packages, `@magic-ext/oidc` and `magic-sdk`. Then, create an instance of the Magic library and extend it with the OpenID Extension. Finally, call the `loginWithOIDC` method on the `openid` property, passing in the required arguments.\n\nHere's an example:\n```javascript\nimport { Magic } from 'magic-sdk';\nimport { OpenIdExtension } from '@magic-ext/oidc';\n\nconst magic = new Magic('PUBLISHABLE_API_KEY', {\n  extensions: [new OpenIdExtension()],\n});\n\nconst { verifiedAccount } = await magic.openid.loginWithOIDC({\n  jwt: 'oidc_token_from_identity_provider',\n  providerId: 'alphanumeric_id_from_magic',\n  lifespan: 3600, // optional, default is 900s (15 minutes)\n});\n```\nBy following this process, you can integrate OIDC authentication into your Magic-powered application, providing a secure and seamless user experience.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#chunk-105", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 PromiEvent<string | null>: The promise resolves upon authentication request success and rejects with a specific error code if the request fails. The resolved value is a Decentralized ID token with a default 15-minute lifespan.\n\nPromiEvent<string | null>", "explanation": "The '#Returns' section in the Magic Labs embedded wallet documentation is describing the return format after successfully authenticating a user. Here's a breakdown of its main purpose:\n\n**Return Type:** `PromiEvent<string | null>`\n\n**Purpose:** To inform developers about the expected output after initiating an authentication request using the Magic Labs embedded wallet.\n\n**Meaning:**\n\n- **Upon success:** The `PromiEvent` promise resolves with a value of a type `Decentralized ID (DID) token`, which is a string containing the user's Decentralized ID. This token typically has a default lifespan of 15 minutes.\n\n- **Upon failure:** The `PromiEvent` promise rejects with a specific error code, allowing developers to handle potential authentication issues.\n\nIn summary, the '#Returns' section of the Magic Labs embedded wallet documentation is providing crucial information about what to expect during authentication requests, making it easier for developers to implement proper error handling and continue with the next steps in their workflow.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#chunk-106", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\nimport\n\n{\n\nOpenIdExtension\n\n}\n\nfrom\n\n'@magic-ext/oidc'\n\n;\n\n02\n\nimport\n\n{\n\nOpenIdExtension\n\n}\n\nfrom\n\n'@magic-ext/oidc'\n\n;\n\n03\n\n03\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n,\n\n{\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n,\n\n{\n\n05\n\nextensions\n\n:\n\n[\n\nnew\n\nOpenIdExtension\n\n(\n\n)\n\n]\n\n,\n\n05\n\nextensions\n\n:\n\n[\n\nnew\n\nOpenIdExtension\n\n(\n\n)\n\n]\n\n,\n\n06\n\n}\n\n)\n\n;\n\n06\n\n}\n\n)\n\n;\n\n07\n\n07\n\n08\n\nconst\n\nDID\n\n=\n\nawait\n\nmagic\n\n.\n\nopenid\n\n.\n\nloginWithOIDC\n\n(\n\n{\n\n08\n\nconst\n\nDID\n\n=\n\nawait\n\nmagic\n\n.\n\nopenid\n\n.\n\nloginWithOIDC\n\n(\n\n{\n\n09\n\n// this oidcToken comes from the identity provider\n\n09\n\n// this oidcToken comes from the identity provider\n\n10\n\njwt\n\n:\n\noidcToken\n\n,\n\n10\n\njwt\n\n:\n\noidcToken\n\n,\n\n11\n\n// this providerId is provided by Magic\n\n11\n\n// this providerId is provided by Magic\n\n12\n\nproviderId\n\n:\n\nmyProviderId\n\n,\n\n12\n\nproviderId\n\n:\n\nmyProviderId\n\n,\n\n13\n\n// this optional argument sets the resolved Decentralized ID token's lifespan\n\n13\n\n// this optional argument sets the resolved Decentralized ID token's lifespan\n\n14\n\nlifespan\n\n:\n\nnumber\n\n14\n\nlifespan\n\n:\n\nnumber\n\n15\n\n}\n\n)\n\n;\n\n15\n\n}\n\n)\n\n;", "explanation": "This documentation section is titled \"#Example\" and it provides an example code snippet that demonstrates how to use the Magic Labs embedded wallet, specifically with the OpenID Connect (OIDC) extension, to login and obtain a Decentralized ID (DID).\n\n**Main Purpose:**\n\nThe main purpose of this example is to show developers how to integrate the Magic Labs embedded wallet into a web application, enabling users to securely login and obtain a DID using an OIDC flow. This OIDC flow is typically used in conjunction with an identity provider (e.g., Google, Facebook, or Amazon).\n\n**Key Code Snippets:**\n\n1. Importing the necessary modules from the `magic-sdk` and `@magic-ext/oidc` packages.\n2. Creating a new instance of the `Magic` class, passing in a publishable API key and an array of extensions (in this case, the `OpenIdExtension`).\n3. Calling the `loginWithOIDC` method on the `openid` object, passing in an object with the following properties:\n\t* `jwt`: the OIDC token obtained from the identity provider.\n\t* `providerId`: the ID of the provider, which is obtained from Magic.\n\t* `lifespan`: an optional argument that sets the lifespan of the resolved DID token.\n\n**Notes:**\n\n* The OIDC token is assumed to be obtained from an identity provider.\n* The `providerId` is provided by Magic.\n* The `lifespan` argument is optional and sets the lifespan of the resolved DID token.\n* The example returns a `DID` token, which is a unique identifier for the user.\n\nOverall, this example provides a straightforward demonstration of how to integrate the Magic Labs embedded wallet with an OIDC flow to securely login and obtain a DID.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#chunk-107", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nThe WebAuthn Module and it's members are accessible on the Magic SDK instance by the webauthn property.\n\nwebauthn\n\nTo use the WebAuthn Module in your application, install @magic-ext/webauthn along with magic-sdk.\n\n@magic-ext/webauthn\n\nmagic-sdk\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\nimport\n\n{\n\nWebAuthnExtension\n\n}\n\nfrom\n\n'@magic-ext/webauthn'\n\n;\n\n02\n\nimport\n\n{\n\nWebAuthnExtension\n\n}\n\nfrom\n\n'@magic-ext/webauthn'\n\n;\n\n03\n\n03\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n,\n\n{\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n,\n\n{\n\n05\n\nextensions\n\n:\n\n[\n\nnew\n\nWebAuthnExtension\n\n(\n\n)\n\n]\n\n,\n\n05\n\nextensions\n\n:\n\n[\n\nnew\n\nWebAuthnExtension\n\n(\n\n)\n\n]\n\n,\n\n06\n\n}\n\n)\n\n;\n\n06\n\n}\n\n)\n\n;\n\n07\n\n07\n\n08\n\nmagic\n\n.\n\nwebauthn\n\n;\n\n08\n\nmagic\n\n.\n\nwebauthn\n\n;\n\n09\n\nmagic\n\n.\n\nwebauthn\n\n.\n\nregisterNewUser\n\n;\n\n09\n\nmagic\n\n.\n\nwebauthn\n\n.\n\nregisterNewUser\n\n;\n\n10\n\nmagic\n\n.\n\nwebauthn\n\n.\n\nlogin\n\n;\n\n10\n\nmagic\n\n.\n\nwebauthn\n\n.\n\nlogin\n\n;\n\n11\n\nmagic\n\n.\n\nwebauthn\n\n.\n\ngetMetadata\n\n;\n\n11\n\nmagic\n\n.\n\nwebauthn\n\n.\n\ngetMetadata\n\n;\n\n12\n\nmagic\n\n.\n\nwebauthn\n\n.\n\nregisterNewDevice\n\n;\n\n12\n\nmagic\n\n.\n\nwebauthn\n\n.\n\nregisterNewDevice\n\n;\n\n13\n\nmagic\n\n.\n\nwebauthn\n\n.\n\nupdateInfo\n\n;\n\n13\n\nmagic\n\n.\n\nwebauthn\n\n.\n\nupdateInfo\n\n;\n\n14\n\nmagic\n\n.\n\nwebauthn\n\n.\n\nunregisterDevice\n\n;\n\n14\n\nmagic\n\n.\n\nwebauthn\n\n.\n\nunregisterDevice\n\n;\n\n#\n\nregisterNewUser\n\nRegisters a new WebAuthn user.\n\nOnly available with Dedicated Wallet.\n\n#\n\n\u2022 username (String): The username to register with\n\n\u2022 nickname? (String): The nickname of the WebAuthn device the user wants to set\n\nusername\n\nnickname?", "explanation": "**WebAuthn Module: #registerNewUser - #Arguments**\n\nThe `registerNewUser` method is part of the WebAuthn Module in Magic Labs' embedded wallet documentation. It is used to register a new user using WebAuthn, a web-based authentication standard.\n\n**Main Purpose:**\n\nThe primary purpose of `registerNewUser` is to create a new WebAuthn user account with a provided `username`. This method is specifically designed for Dedicated Wallet use cases and enables users to securely authenticate with a passwordless experience.\n\n**Arguments:**\n\nThe `registerNewUser` method takes two arguments:\n\n1. **`username` (String)**: The user's chosen username for their new WebAuthn account.\n2. **`nickname? (String)`**: An optional parameter for setting the nickname of the WebAuthn device the user wants to register.\n\nTo use this method, you need to have the `@magic-ext/webauthn` and `magic-sdk` packages installed in your project. Then, you can create a Magic SDK instance with the WebAuthn Extension and access the `webauthn` property to call the `registerNewUser` method.\n\nExample Code:\n```javascript\nconst magic = new Magic('PUBLISHABLE_API_KEY', {\n  extensions: [new WebAuthnExtension()],\n});\n\nmagic.webauthn.registerNewUser('johnDoe', { nickname: 'My WebAuthn Device' });\n```", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#chunk-108", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 PromiEvent<string | null>: The promise resolves upon authentication request success and rejects with a specific error code if the request fails. The resolved value is a Decentralized ID token with a default 15-minute lifespan.\n\nPromiEvent<string | null>", "explanation": "The Returns section in this documentation is referring to the outcome of an authentication request made using the Magic Labs embedded wallet. \n\n**Main Purpose:**\n\nIts main purpose is to describe how Magic handles the response of an authentication request, indicating whether it was successful or failed.\n\n**Breakdown:**\n\n- **PromiEvent**: A PromiEvent is a promise-based event object that resolves or rejects with a value or an error, respectively.\n- **string | null**: The promise resolves to a string value, which is a Decentralized ID token, or null if the request failed.\n- **Decentralized ID token**: A Decentralized ID token with a lifespan of 15 minutes is issued upon successful authentication.\n- **Specific error codes**: If the request fails, the promise rejects with a specific error code.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#chunk-109", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\nimport\n\n{\n\nWebAuthnExtension\n\n}\n\nfrom\n\n'@magic-ext/webauthn'\n\n;\n\n02\n\nimport\n\n{\n\nWebAuthnExtension\n\n}\n\nfrom\n\n'@magic-ext/webauthn'\n\n;\n\n03\n\n03\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR API KEY'\n\n,\n\n{\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR API KEY'\n\n,\n\n{\n\n05\n\nextensions\n\n:\n\n[\n\nnew\n\nWebAuthnExtension\n\n(\n\n)\n\n]\n\n,\n\n05\n\nextensions\n\n:\n\n[\n\nnew\n\nWebAuthnExtension\n\n(\n\n)\n\n]\n\n,\n\n06\n\n}\n\n)\n\n;\n\n06\n\n}\n\n)\n\n;\n\n07\n\n07\n\n08\n\n// register a user by their username\n\n08\n\n// register a user by their username\n\n09\n\ntry\n\n{\n\n09\n\ntry\n\n{\n\n10\n\nconst\n\ntoken\n\n=\n\nawait\n\nmagic\n\n.\n\nwebauthn\n\n.\n\nregisterNewUser\n\n(\n\n{\n\nusername\n\n:\n\n'username'\n\n}\n\n)\n\n;\n\n10\n\nconst\n\ntoken\n\n=\n\nawait\n\nmagic\n\n.\n\nwebauthn\n\n.\n\nregisterNewUser\n\n(\n\n{\n\nusername\n\n:\n\n'username'\n\n}\n\n)\n\n;\n\n11\n\n}\n\ncatch\n\n(\n\ne\n\n)\n\n{\n\n11\n\n}\n\ncatch\n\n(\n\ne\n\n)\n\n{\n\n12\n\n// Handle errors if required!\n\n12\n\n// Handle errors if required!\n\n13\n\n}\n\n13\n\n}\n\n14\n\n14\n\n15\n\n// log in a user by their username and set webauthn device nickname.\n\n15\n\n// log in a user by their username and set webauthn device nickname.\n\n16\n\ntry\n\n{\n\n16\n\ntry\n\n{\n\n17\n\nconst\n\ntoken\n\n=\n\nawait\n\nmagic\n\n.\n\nwebauthn\n\n.\n\nregisterNewUser\n\n(\n\n{\n\nusername\n\n:\n\n'username'\n\n,\n\nnickname\n\n:\n\n'nickname'\n\n}\n\n)\n\n;\n\n17\n\nconst\n\ntoken\n\n=\n\nawait\n\nmagic\n\n.\n\nwebauthn\n\n.\n\nregisterNewUser\n\n(\n\n{\n\nusername\n\n:\n\n'username'\n\n,\n\nnickname\n\n:\n\n'nickname'\n\n}\n\n)\n\n;\n\n18\n\n}\n\ncatch\n\n(\n\ne\n\n)\n\n{\n\n18\n\n}\n\ncatch\n\n(\n\ne\n\n)\n\n{\n\n19\n\n// Handle errors if required!\n\n19\n\n// Handle errors if required!\n\n20\n\n}\n\n20\n\n}", "explanation": "**Explanation of the '#Example' Section**\n\nThe '#Example' section from the Magic Labs embedded wallet documentation demonstrates how to use the Magic Labs SDK to register a user with WebAuthn and store their authentication credentials.\n\n**Main Purpose**\n\nThe primary purpose of this example is to showcase a simplified code snippet that registers a user by their username and configures WebAuthn for authentication. It also demonstrates how to log in a user using their username and set a WebAuthn device nickname.\n\n**Key Components:**\n\n1. **Importing Magic and WebAuthn Extensions**: The code imports the necessary modules from the Magic Labs SDK and the WebAuthn extension package.\n2. **Instantiating the Magic Client**: creates an instance of the Magic client, passing in an API key and an options object with the WebAuthn extension configured.\n3. **Registering a User with WebAuthn**: The `registerNewUser` method is used to register a user by their username and set their WebAuthn authentication credentials.\n4. **Logging in a User with WebAuthn**: The example demonstrates how to log in a user by their username and set a device nickname for WebAuthn.\n\n**Practical Application**\n\nThis example serves as a starting point for developers to integrate WebAuthn-based authentication into their applications using the Magic Labs SDK. By following this example, developers can implement secure user authentication with WebAuthn and protect user accounts from unauthorized access.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#chunk-110", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n,\n\nSDKErrorCode\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n,\n\nSDKErrorCode\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\nimport\n\n{\n\nWebAuthnExtension\n\n}\n\nfrom\n\n'@magic-ext/webauthn'\n\n;\n\n02\n\nimport\n\n{\n\nWebAuthnExtension\n\n}\n\nfrom\n\n'@magic-ext/webauthn'\n\n;\n\n03\n\n03\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR API KEY'\n\n,\n\n{\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR API KEY'\n\n,\n\n{\n\n05\n\nextensions\n\n:\n\n[\n\nnew\n\nWebAuthnExtension\n\n(\n\n)\n\n]\n\n,\n\n05\n\nextensions\n\n:\n\n[\n\nnew\n\nWebAuthnExtension\n\n(\n\n)\n\n]\n\n,\n\n06\n\n}\n\n)\n\n;\n\n06\n\n}\n\n)\n\n;\n\n07\n\n07\n\n08\n\ntry\n\n{\n\n08\n\ntry\n\n{\n\n09\n\nawait\n\nmagic\n\n.\n\nwebauthn\n\n.\n\nregisterNewUser\n\n(\n\n{\n\nusername\n\n:\n\n'username'\n\n}\n\n)\n\n;\n\n09\n\nawait\n\nmagic\n\n.\n\nwebauthn\n\n.\n\nregisterNewUser\n\n(\n\n{\n\nusername\n\n:\n\n'username'\n\n}\n\n)\n\n;\n\n10\n\n}\n\ncatch\n\n(\n\nerr\n\n)\n\n{\n\n10\n\n}\n\ncatch\n\n(\n\nerr\n\n)\n\n{\n\n11\n\nif\n\n(\n\nerr\n\ninstanceof\n\nSDKErrorCode\n\n)\n\n{\n\n11\n\nif\n\n(\n\nerr\n\ninstanceof\n\nSDKErrorCode\n\n)\n\n{\n\n12\n\nswitch\n\n(\n\nerr\n\n.\n\ncode\n\n)\n\n{\n\n12\n\nswitch\n\n(\n\nerr\n\n.\n\ncode\n\n)\n\n{\n\n13\n\ncase\n\nSDKErrorCode\n\n.\n\nWebAuthnNotSupported\n\n:\n\n13\n\ncase\n\nSDKErrorCode\n\n.\n\nWebAuthnNotSupported\n\n:\n\n14\n\ncase\n\nSDKErrorCode\n\n.\n\nWebAuthnCreateCredentialError\n\n:\n\n14\n\ncase\n\nSDKErrorCode\n\n.\n\nWebAuthnCreateCredentialError\n\n:\n\n15\n\n// Handle errors accordingly :)\n\n15\n\n// Handle errors accordingly :)\n\n16\n\nbreak\n\n;\n\n16\n\nbreak\n\n;\n\n17\n\n}\n\n17\n\n}\n\n18\n\n}\n\n18\n\n}\n\n19\n\n}\n\n19\n\n}", "explanation": "**Error Handling in Magic Labs Embedded Wallet Documentation**\n\nThe '#Error' section of the Magic Labs embedded wallet documentation provides a code example that handles errors that may occur during the registration process of a new user using WebAuthn.\n\n**Main Purpose:**\n\nThe main purpose of this code example is to demonstrate how to catch and handle errors that are thrown when attempting to register a new user with WebAuthn. The code checks if the error is an instance of `SDKErrorCode` and then checks the error code to handle specific errors.\n\n**Code Flow:**\n\nHere is a step-by-step breakdown of the code flow:\n\n1. The code tries to register a new user with WebAuthn using the `registerNewUser` method.\n2. If an error occurs, the code catches the error using a `try-catch` block.\n3. It checks if the error is an instance of `SDKErrorCode`.\n4. If it is, it checks the error code using a `switch` statement.\n5. Based on the error code, it handles the error accordingly.\n\n**Error Codes:**\n\nThe code handles two specific error codes:\n\n* `WebAuthnNotSupported`: This error code is thrown if the device does not support WebAuthn.\n* `WebAuthnCreateCredentialError`: This error code is thrown if there is an issue creating the credential during the WebAuthn registration process.\n\n**Handling Errors:**\n\nThe code leaves the error handling to the developer, who can handle the errors accordingly based on the specific requirements of their application. This might involve logging the error, displaying an error message to the user, or retrying the registration process.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#chunk-111", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nlogin\n\nLogs in a registered WebAuthn user.\n\nOnly available with Dedicated Wallet.\n\n#\n\n\u2022 username (String): The username to log in with\n\nusername", "explanation": "The `#login` section from the Magic Labs documentation refers to a function that logs in a registered WebAuthn user. In simpler terms, WebAuthn is an authentication standard based on the Web Authentication API, which is a part of the Web and IETF foundations and supported by major browser vendors. \n\nThis functionality is **only available with Dedicated Wallet**, which suggests that it's a premium or enterprise-level package offered by Magic Labs.\n\nThe main purpose of the `login` function is to secure user authentication by verifying their credentials using WebAuthn. The function takes a single argument, `username`, which is the username of the user attempting to log in. \n\nIn essence, calling this function initiates the login process, allowing the user to authenticate securely using their registered WebAuthn credentials.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#chunk-112", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 PromiEvent<string | null>: The promise resolves upon authentication request success and rejects with a specific error code if the request fails. The resolved value is a Decentralized ID token with a default 15-minute lifespan.\n\nPromiEvent<string | null>", "explanation": "The documentation section titled '#Returns' from the Magic Labs embedded wallet SDK documentation is about the response or result a developer can expect when submitting an authentication request using the Magic API.\n\n**Key Points:**\n\n* Upon a successful authentication request, the promise resolves with a value.\n* If the request fails, the promise rejects with a specific error code.\n* The value that the promise resolves with is a Decentralized ID (Deeplink) token, which typically has a 15-minute lifespan.\n\n**Main Purpose:**\n\nThe '#Returns' section serves to inform developers about the expected outcome of their authentication requests, allowing them to handle both success and failure cases accordingly. By knowing the structure and contents of the response, developers can design their application logic to correctly use the Deeplink token, which is essential for user authentication and authorization in their Magic-enabled applications.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#chunk-113", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\nimport\n\n{\n\nWebAuthnExtension\n\n}\n\nfrom\n\n'@magic-ext/webauthn'\n\n;\n\n02\n\nimport\n\n{\n\nWebAuthnExtension\n\n}\n\nfrom\n\n'@magic-ext/webauthn'\n\n;\n\n03\n\n03\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR API KEY'\n\n,\n\n{\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR API KEY'\n\n,\n\n{\n\n05\n\nextensions\n\n:\n\n[\n\nnew\n\nWebAuthnExtension\n\n(\n\n)\n\n]\n\n,\n\n05\n\nextensions\n\n:\n\n[\n\nnew\n\nWebAuthnExtension\n\n(\n\n)\n\n]\n\n,\n\n06\n\n}\n\n)\n\n;\n\n06\n\n}\n\n)\n\n;\n\n07\n\n07\n\n08\n\n// login a user by their username\n\n08\n\n// login a user by their username\n\n09\n\ntry\n\n{\n\n09\n\ntry\n\n{\n\n10\n\nconst\n\ntoken\n\n=\n\nawait\n\nmagic\n\n.\n\nwebauthn\n\n.\n\nlogin\n\n(\n\n{\n\nusername\n\n:\n\n'username'\n\n}\n\n)\n\n;\n\n10\n\nconst\n\ntoken\n\n=\n\nawait\n\nmagic\n\n.\n\nwebauthn\n\n.\n\nlogin\n\n(\n\n{\n\nusername\n\n:\n\n'username'\n\n}\n\n)\n\n;\n\n11\n\n}\n\ncatch\n\n(\n\ne\n\n)\n\n{\n\n11\n\n}\n\ncatch\n\n(\n\ne\n\n)\n\n{\n\n12\n\n// Handle errors if required!\n\n12\n\n// Handle errors if required!\n\n13\n\n}\n\n13\n\n}", "explanation": "**Example Overview**\n\nThe code snippet provided is an example of how to use the Magic Labs embedded wallet API to login a user using their username via WebAuthn extension.\n\n**Purpose**\n\nThe main purpose of this example is to demonstrate how to:\n\n1. Import the necessary modules from the Magic SDK.\n2. Initialize the Magic instance with an API key and WebAuthn extension.\n3. Use the `login` method to authenticate a user using their username via WebAuthn.\n\n**Key Components**\n\n1. **Importing Magic SDK and WebAuthn Extension**: The code imports the necessary modules from the Magic SDK and WebAuthn extension.\n2. **Initializing Magic Instance**: The code initializes a new Magic instance with an API key and with the WebAuthn extension enabled.\n3. **Logging in a user**: The code uses the `login` method to authenticate a user using their username via WebAuthn. The `await magic.webauthn.login({...})` line attempts to login the user with the specified username.\n4. **Error Handling**: The code catches any errors that may occur during the login process and provides a way to handle them if required.\n\n**Main Functionality**\n\nThe example demonstrates how to use the Magic Labs embedded wallet API to securely authenticate a user using their username via WebAuthn extension. It provides a basic structure for implementing WebAuthn-based authentication in a web application.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#chunk-114", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n,\n\nSDKErrorCode\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n,\n\nSDKErrorCode\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\nimport\n\n{\n\nWebAuthnExtension\n\n}\n\nfrom\n\n'@magic-ext/webauthn'\n\n;\n\n02\n\nimport\n\n{\n\nWebAuthnExtension\n\n}\n\nfrom\n\n'@magic-ext/webauthn'\n\n;\n\n03\n\n03\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR API KEY'\n\n,\n\n{\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR API KEY'\n\n,\n\n{\n\n05\n\nextensions\n\n:\n\n[\n\nnew\n\nWebAuthnExtension\n\n(\n\n)\n\n]\n\n,\n\n05\n\nextensions\n\n:\n\n[\n\nnew\n\nWebAuthnExtension\n\n(\n\n)\n\n]\n\n,\n\n06\n\n}\n\n)\n\n;\n\n06\n\n}\n\n)\n\n;\n\n07\n\n07\n\n08\n\ntry\n\n{\n\n08\n\ntry\n\n{\n\n09\n\nawait\n\nmagic\n\n.\n\nwebauthn\n\n.\n\nlogin\n\n(\n\n{\n\nusername\n\n:\n\n'username'\n\n}\n\n)\n\n;\n\n09\n\nawait\n\nmagic\n\n.\n\nwebauthn\n\n.\n\nlogin\n\n(\n\n{\n\nusername\n\n:\n\n'username'\n\n}\n\n)\n\n;\n\n10\n\n}\n\ncatch\n\n(\n\nerr\n\n)\n\n{\n\n10\n\n}\n\ncatch\n\n(\n\nerr\n\n)\n\n{\n\n11\n\nif\n\n(\n\nerr\n\ninstanceof\n\nSDKErrorCode\n\n)\n\n{\n\n11\n\nif\n\n(\n\nerr\n\ninstanceof\n\nSDKErrorCode\n\n)\n\n{\n\n12\n\nswitch\n\n(\n\nerr\n\n.\n\ncode\n\n)\n\n{\n\n12\n\nswitch\n\n(\n\nerr\n\n.\n\ncode\n\n)\n\n{\n\n13\n\ncase\n\nSDKErrorCode\n\n.\n\nWebAuthnNotSupported\n\n:\n\n13\n\ncase\n\nSDKErrorCode\n\n.\n\nWebAuthnNotSupported\n\n:\n\n14\n\ncase\n\nSDKErrorCode\n\n.\n\nWebAuthnCreateCredentialError\n\n:\n\n14\n\ncase\n\nSDKErrorCode\n\n.\n\nWebAuthnCreateCredentialError\n\n:\n\n15\n\n// Handle errors accordingly :)\n\n15\n\n// Handle errors accordingly :)\n\n16\n\nbreak\n\n;\n\n16\n\nbreak\n\n;\n\n17\n\n}\n\n17\n\n}\n\n18\n\n}\n\n18\n\n}\n\n19\n\n}\n\n19\n\n}", "explanation": "**Error Handling in Magic Labs Embedded Wallet Documentation**\n\nThe '#Error' section of the Magic Labs embedded wallet documentation provides a code example on how to handle errors that may occur during the login process using the WebAuthn authentication method.\n\n**Main Purpose:**\n\nThe main purpose of this code snippet is to demonstrate how to catch and handle errors that may be thrown by the `webauthn.login()` method, including specific error codes defined in the `SDKErrorCode` enum.\n\n**Code Breakdown:**\n\n1. The code sets up a new instance of the Magic SDK, specifying the API key and enabling the WebAuthn extension.\n2. The code attempts to login using the `webauthn.login()` method, which may throw an error if something goes wrong.\n3. The code catches any errors that are thrown and checks if the error is an instance of `SDKErrorCode`.\n4. If the error is an instance of `SDKErrorCode`, the code checks the error code using a `switch` statement and handles each error code accordingly.\n\n**Key Error Codes:**\n\nThe code handles the following error codes:\n\n* `WebAuthnNotSupported`: The browser does not support WebAuthn authentication.\n* `WebAuthnCreateCredentialError`: There was an error creating a WebAuthn credential.\n\n**Best Practice:**\n\nThe code provides a good example of how to handle errors in a robust and specific way, allowing developers to take corrective action when an error occurs. This helps to improve the user experience and provides valuable insights into what went wrong.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#chunk-115", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\ngetMetadata\n\nReturns information about the currently logged in user.\n\nOnly available with Dedicated Wallet.\n\n#\n\n\u2022 None", "explanation": "According to the provided documentation, the section '#getMetadata - #Arguments' appears to have been mistakenly provided under a different section title '#Arguments', which was not primarily meant for that.\n\nHowever, under the correct section which is '#getMetadata', we have the title 'Arguments' explained in its place. In other words 'Arguments' is a section within '#getMetadata' explaining the arguments for that particular method.\n\nSo the actual '#getMetadata' section is described:\n\nThe '#getMetadata' function returns information about the currently logged-in user. \n\nThis function appears to be only available in Dedicated Wallets.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#chunk-116", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 PromiEvent<object | null>: an object containing the WebAuthn devices information and username of the authenticated userdevicesInfo (Array): List of devices info contains device ID, device nickname, transport, user agentusername (String): Username of the authenticated user\n\nPromiEvent<object | null>\n\n\u2022 devicesInfo (Array): List of devices info contains device ID, device nickname, transport, user agent\n\n\u2022 username (String): Username of the authenticated user\n\ndevicesInfo\n\nusername", "explanation": "**Returns**\n\nThe '#Returns' section in the Magic Labs embedded wallet documentation explains the format of the response when a user successfully authenticates using WebAuthn.\n\n**Main Purpose**\n\nThe main purpose of the '#Returns' section is to provide information about the structure and content of the response object returned after a successful authentication.\n\n**Key Components**\n\nThe response object contains the following key components:\n\n1. **devicesInfo (Array)**: A list of devices information, including:\n\t* **device ID**: A unique identifier for the device.\n\t* **device nickname**: The nickname assigned to the device.\n\t* **transport**: The communication method used between the device and the Magic Labs system.\n\t* **user agent**: The user agent string of the device, which typically includes browser or app information.\n2. **username (String)**: The username of the authenticated user.\n\n**PromiEvent<object | null>**\n\nThe response is delivered using a PromiEvent, which is a pattern for handling asynchronous operations. The event is fired with either an object or null, depending on the success of the authentication.\n\nThis response format allows developers to easily integrate Magic Labs embedded wallet into their applications, providing a clear and concise structure for handling authentication results.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#chunk-117", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n,\n\nSDKErrorCode\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n,\n\nSDKErrorCode\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\nimport\n\n{\n\nWebAuthnExtension\n\n}\n\nfrom\n\n'@magic-ext/webauthn'\n\n;\n\n02\n\nimport\n\n{\n\nWebAuthnExtension\n\n}\n\nfrom\n\n'@magic-ext/webauthn'\n\n;\n\n03\n\n03\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR API KEY'\n\n,\n\n{\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR API KEY'\n\n,\n\n{\n\n05\n\nextensions\n\n:\n\n[\n\nnew\n\nWebAuthnExtension\n\n(\n\n)\n\n]\n\n,\n\n05\n\nextensions\n\n:\n\n[\n\nnew\n\nWebAuthnExtension\n\n(\n\n)\n\n]\n\n,\n\n06\n\n}\n\n)\n\n;\n\n06\n\n}\n\n)\n\n;\n\n07\n\n07\n\n08\n\n// Initiates the flow to get webauthn metadata for current account.\n\n08\n\n// Initiates the flow to get webauthn metadata for current account.\n\n09\n\ntry\n\n{\n\n09\n\ntry\n\n{\n\n10\n\nconst\n\nmetadata\n\n=\n\nawait\n\nmagic\n\n.\n\nwebauthn\n\n.\n\ngetMetadata\n\n(\n\n)\n\n;\n\n10\n\nconst\n\nmetadata\n\n=\n\nawait\n\nmagic\n\n.\n\nwebauthn\n\n.\n\ngetMetadata\n\n(\n\n)\n\n;\n\n11\n\n11\n\n12\n\n/* webauthn metadata\n\n12\n\n/* webauthn metadata\n\n13\n\n{\n\n13\n\n{\n\n14\n\n\"devicesInfo\": [\n\n14\n\n\"devicesInfo\": [\n\n15\n\n{\n\n15\n\n{\n\n16\n\n\"id\": \"EjI_EFJhB6cdCj6rHPRHUcFCn6NnywALuWjQyPe0_dI=\",\n\n16\n\n\"id\": \"EjI_EFJhB6cdCj6rHPRHUcFCn6NnywALuWjQyPe0_dI=\",\n\n17\n\n\"nickname\": \"\",\n\n17\n\n\"nickname\": \"\",\n\n18\n\n\"transport\": \"internal\",\n\n18\n\n\"transport\": \"internal\",\n\n19\n\n\"user_agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/85.0.4183.102 Safari/537.36\"\n\n19\n\n\"user_agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/85.0.4183.102 Safari/537.36\"\n\n20\n\n}\n\n20\n\n}\n\n21\n\n],\n\n21\n\n],\n\n22\n\n\"username\": \"username\"\n\n22\n\n\"username\": \"username\"\n\n23\n\n}\n\n23\n\n}\n\n24\n\n*/\n\n24\n\n*/\n\n25\n\n}\n\ncatch\n\n(\n\ne\n\n)\n\n{\n\n25\n\n}\n\ncatch\n\n(\n\ne\n\n)\n\n{\n\n26\n\n// Handle errors if required!\n\n26\n\n// Handle errors if required!\n\n27\n\n}\n\n27\n\n}", "explanation": "**Section Explanation:**\n\nThe provided documentation section is titled `#Example` and is a code snippet written in JavaScript. It demonstrates how to use the Magic Labs embedded wallet API, specifically the Web Authentication (WebAuthn) extension, to retrieve metadata for a user's account.\n\n**Main Purpose:**\n\nThe main purpose of this example is to showcase the implementation of WebAuthn in a web application using the Magic Labs embedded wallet API. WebAuthn is a modern authentication standard that allows users to authenticate using a combination of a physical device (e.g., a smartphone or a YubiKey) and a password.\n\n**Key Components:**\n\n1. **Importing Magic Labs SDK and WebAuthn extension**: The code imports the Magic Labs SDK and the WebAuthn extension from their respective modules.\n2. **Creating a Magic instance**: The code creates a new instance of the Magic class, passing in an API key and an object with the WebAuthn extension.\n3. **Getting WebAuthn metadata**: The code initiates a flow to retrieve WebAuthn metadata for the current user's account using the `getMetadata` method.\n4. **Handling errors**: The code catches any errors that might occur during the metadata retrieval process and provides a comment to handle errors if required.\n\n**Deployment Context:**\n\nThis example is likely intended for developers who want to integrate the Magic Labs embedded wallet API into their web applications, particularly those using WebAuthn for user authentication. The code provides a basic implementation of WebAuthn using the Magic Labs SDK and can be adapted and extended to fit specific use cases.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#chunk-118", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nregisterNewDevice\n\nRegisters a new WebAuthn device.\n\nOnly available with Dedicated Wallet.\n\n#\n\n\u2022 nickname (String): The nickname of the WebAuthn device the user wants to set\n\nnickname", "explanation": "Based on the documentation provided, here's a clear and concise explanation:\n\n**Functionality:** `#registerNewDevice`\n\n**Purpose:** This function is used to register a new WebAuthn device, specifically intended for Dedicated Wallet scenarios. WebAuthn is a web-based authentication standard that provides a secure method for users to authenticate across websites and applications.\n\n**Main Function:** The `#registerNewDevice` function takes in a single argument, which is the `nickname` of the WebAuthn device the user wants to set up.\n\n**Argument:** `nickname (String)`\n\n**Description:** The `nickname` is the identifier given to the new WebAuthn device, allowing the user and the system to recognize and configure it correctly.\n\n**Key Point:** This function is only available in Dedicated Wallet scenarios, indicating that it is a more advanced feature for enterprise or specialized use cases.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#chunk-119", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 PromiEvent<boolean>: The promise resolves with a true boolean value if register webauthn device is successful and rejects with a specific error code if the request fails.\n\nPromiEvent<boolean>", "explanation": "**#Returns Section: Explanation**\n\nIn the context of Magic Labs embedded wallet documentation, the `#Returns` section outlines the expected outcome of a specific function call, in this case, registering a webAuthn device.\n\n**Main Purpose:**\nThe main purpose of the `#Returns` section is to inform developers about what to expect from the function, including the type of data returned, and any potential errors that may occur.\n\n**Key Points:**\n\n- The function returns a `PromiEvent<boolean>`.\n- The promise resolves to `true` if the registration of the webAuthn device is successful.\n- The promise rejects with a specific error code if the registration request fails.\n\n**Developer-Friendly Implication:**\n\nDevelopers can use this information to write code that handles potential errors and expects the outcome of the function. They can, for example, set up a try-catch block to handle any errors that occur during the registration process, and provide a better user experience.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#chunk-120", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n,\n\nSDKErrorCode\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n,\n\nSDKErrorCode\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\nimport\n\n{\n\nWebAuthnExtension\n\n}\n\nfrom\n\n'@magic-ext/webauthn'\n\n;\n\n02\n\nimport\n\n{\n\nWebAuthnExtension\n\n}\n\nfrom\n\n'@magic-ext/webauthn'\n\n;\n\n03\n\n03\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR API KEY'\n\n,\n\n{\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR API KEY'\n\n,\n\n{\n\n05\n\nextensions\n\n:\n\n[\n\nnew\n\nWebAuthnExtension\n\n(\n\n)\n\n]\n\n,\n\n05\n\nextensions\n\n:\n\n[\n\nnew\n\nWebAuthnExtension\n\n(\n\n)\n\n]\n\n,\n\n06\n\n}\n\n)\n\n;\n\n06\n\n}\n\n)\n\n;\n\n07\n\n07\n\n08\n\n// Initiates the flow to a new WebAuthn Device for current account.\n\n08\n\n// Initiates the flow to a new WebAuthn Device for current account.\n\n09\n\ntry\n\n{\n\n09\n\ntry\n\n{\n\n10\n\nawait\n\nmagic\n\n.\n\nwebauthn\n\n.\n\nregisterNewDevice\n\n(\n\n'new device nickname'\n\n)\n\n;\n\n10\n\nawait\n\nmagic\n\n.\n\nwebauthn\n\n.\n\nregisterNewDevice\n\n(\n\n'new device nickname'\n\n)\n\n;\n\n11\n\n}\n\ncatch\n\n(\n\ne\n\n)\n\n{\n\n11\n\n}\n\ncatch\n\n(\n\ne\n\n)\n\n{\n\n12\n\n// Handle errors if required!\n\n12\n\n// Handle errors if required!\n\n13\n\n}\n\n13\n\n}", "explanation": "## Overview of the Example\n\nThe provided documentation section titled '#Example' is a code snippet that demonstrates how to use the Magic Labs embedded wallet SDK to register a new WebAuthn device for an account.\n\n## Main Purpose\n\nThe main purpose of this example is to showcase the process of initiating a new WebAuthn device flow using the Magic Labs embedded wallet SDK. This is typically used in scenarios where a user wants to add a new device, such as a new phone or computer, to their account for secure authentication purposes.\n\n## Key Components\n\n1. **Importing the required modules**: The code imports the necessary modules from the 'magic-sdk' and '@magic-ext/webauthn' packages, which include the 'Magic' class, 'SDKErrorCode' enum, and the 'WebAuthnExtension' class.\n2. **Creating a Magic instance**: The code creates a new instance of the 'Magic' class, passing in the API key and an options object that includes the 'WebAuthnExtension' instance.\n3. **Registering a new WebAuthn device**: The code calls the 'registerNewDevice' method on the 'webauthn' object, passing in a nickname for the new device, to initiate the registration process.\n\n## Step-by-Step Breakdown\n\n1. Import the required modules.\n2. Create a new Magic instance with the API key and options object.\n3. Call the 'registerNewDevice' method to initiate the flow to a new WebAuthn device.\n4. Catch any errors that may occur during the registration process.\n\nThis example provides a basic demonstration of how to use the Magic Labs embedded wallet SDK to register a new WebAuthn device for an account.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#chunk-121", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n,\n\nSDKErrorCode\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n,\n\nSDKErrorCode\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\nimport\n\n{\n\nWebAuthnExtension\n\n}\n\nfrom\n\n'@magic-ext/webauthn'\n\n;\n\n02\n\nimport\n\n{\n\nWebAuthnExtension\n\n}\n\nfrom\n\n'@magic-ext/webauthn'\n\n;\n\n03\n\n03\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR API KEY'\n\n,\n\n{\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR API KEY'\n\n,\n\n{\n\n05\n\nextensions\n\n:\n\n[\n\nnew\n\nWebAuthnExtension\n\n(\n\n)\n\n]\n\n,\n\n05\n\nextensions\n\n:\n\n[\n\nnew\n\nWebAuthnExtension\n\n(\n\n)\n\n]\n\n,\n\n06\n\n}\n\n)\n\n;\n\n06\n\n}\n\n)\n\n;\n\n07\n\n07\n\n08\n\ntry\n\n{\n\n08\n\ntry\n\n{\n\n09\n\nawait\n\nmagic\n\n.\n\nwebauthn\n\n.\n\nregisterNewDevice\n\n(\n\n'new device nickname'\n\n)\n\n;\n\n09\n\nawait\n\nmagic\n\n.\n\nwebauthn\n\n.\n\nregisterNewDevice\n\n(\n\n'new device nickname'\n\n)\n\n;\n\n10\n\n}\n\ncatch\n\n(\n\nerr\n\n)\n\n{\n\n10\n\n}\n\ncatch\n\n(\n\nerr\n\n)\n\n{\n\n11\n\nif\n\n(\n\nerr\n\ninstanceof\n\nSDKErrorCode\n\n)\n\n{\n\n11\n\nif\n\n(\n\nerr\n\ninstanceof\n\nSDKErrorCode\n\n)\n\n{\n\n12\n\nswitch\n\n(\n\nerr\n\n.\n\ncode\n\n)\n\n{\n\n12\n\nswitch\n\n(\n\nerr\n\n.\n\ncode\n\n)\n\n{\n\n13\n\ncase\n\nSDKErrorCode\n\n.\n\nWebAuthnNotSupported\n\n:\n\n13\n\ncase\n\nSDKErrorCode\n\n.\n\nWebAuthnNotSupported\n\n:\n\n14\n\ncase\n\nSDKErrorCode\n\n.\n\nWebAuthnCreateCredentialError\n\n:\n\n14\n\ncase\n\nSDKErrorCode\n\n.\n\nWebAuthnCreateCredentialError\n\n:\n\n15\n\n// Handle errors accordingly :)\n\n15\n\n// Handle errors accordingly :)\n\n16\n\nbreak\n\n;\n\n16\n\nbreak\n\n;\n\n17\n\n}\n\n17\n\n}\n\n18\n\n}\n\n18\n\n}\n\n19\n\n}\n\n19\n\n}", "explanation": "**Error Handling in Magic Labs Embedded Wallet**\n\nThe provided documentation section \"#Error\" from the Magic Labs embedded wallet documentation shows how to handle errors that may occur during the wallet's operations. The main purpose of this section is to guide developers on how to catch and handle errors, providing a clear and effective way to debug and improve the user experience.\n\n**Error Handling Structure**\n\nThe provided code snippet demonstrates the basic structure of error handling:\n\n1. **Try-Catch Block**: The code uses a try-catch block to enclose the wallet operations. This allows catching any errors that occur during execution.\n2. **Error Type Checking**: The code checks if the caught error is an instance of `SDKErrorCode`, which indicates a specific error type.\n3. **Error Code Switch Statement**: If the error is an instance of `SDKErrorCode`, the code uses a switch statement to handle different error codes.\n\n**Error Codes Handled**\n\nThe documentation shows the handling of the following error codes:\n\n* `WebAuthnNotSupported`: Indicates that WebAuthn authentication is not supported on the user's device.\n* `WebAuthnCreateCredentialError`: Indicates an error occurred during the creation of a WebAuthn credential.\n\n**Best Practices**\n\nThe error handling code provided in the documentation shows good practices, such as:\n\n* Catching specific error types to provide more targeted error handling.\n* Using a switch statement to handle different error codes.\n* Keeping error handling code concise and easy to read.\n\n**Key Takeaways**\n\n* Use try-catch blocks to catch errors that occur during wallet operations.\n* Check if errors are instances of `SDKErrorCode` to provide more targeted error handling.\n* Use a switch statement to handle different error codes.\n\nBy following this documentation and best practices, developers can effectively handle errors and provide a better user experience for Magic Labs embedded wallet users.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#chunk-122", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nupdateInfo\n\nAllows a user to update their device nickname.\n\nOnly available with Dedicated Wallet.\n\n#\n\n\u2022 nickname (String): The nickname of the WebAuthn device the user wants to set\n\n\u2022 id (String): The WebAuthn ID returned from getMetaData function's devicesInfo field\n\nnickname\n\nid\n\ngetMetaData\n\ndevicesInfo", "explanation": "Based on the provided documentation, the `#updateInfo` section is about updating a user's device nickname, specifically in the context of a Magic Labs embedded wallet.\n\n**Main Purpose:**\n\nThe primary purpose of `#updateInfo` is to allow users to update the nickname of their WebAuthn device associated with their Dedicated Wallet.\n\n**Key Arguments:**\n\nTo perform this operation, you need to provide:\n\n1. **nickname (String):** The new nickname you want to assign to the device.\n2. **id (String):** The WebAuthn ID of the device, which can be obtained from the `getMetaData` function's `devicesInfo` field.\n\nBy calling the `#updateInfo` function with these arguments, you can update the nickname of the user's WebAuthn device, making it easier to identify and manage their devices.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#chunk-123", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 PromiEvent<boolean>: The promise resolves with a true boolean value if update webauthn device nickname is successful and rejects with a specific error code if the request fails\n\nPromiEvent<boolean>", "explanation": "**Returns Section Explanation**\n\nThe '#Returns' section in the Magic Labs embedded wallet documentation describes the outcome of a specific API request. In this case, it's related to updating a WebAuthn device nickname.\n\n**Main Purpose:**\n\nThe purpose of the '#Returns' section is to inform developers about what to expect when calling an API function, in this case, the PromiEvent that resolves with a boolean value indicating the success or failure of the request.\n\n**Breaking it down:**\n\n* **PromiEvent**: This is a type of asynchronous operation that returns a promise. A promise is a value that may not be available yet, but will be resolved at some point in the future.\n* **boolean**: The promise resolves with a boolean value, which is a value that can be either true or false.\n* **true**: The boolean value is true if the update WebAuthn device nickname request is successful.\n* **specific error code**: The promise rejects with a specific error code if the request fails.\n\nIn summary, the '#Returns' section is informing developers that they can expect one of two outcomes when making an update WebAuthn device nickname request: a successful result with a true boolean value, or a failed result with a specific error code.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#chunk-124", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n,\n\nSDKErrorCode\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n,\n\nSDKErrorCode\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\nimport\n\n{\n\nWebAuthnExtension\n\n}\n\nfrom\n\n'@magic-ext/webauthn'\n\n;\n\n02\n\nimport\n\n{\n\nWebAuthnExtension\n\n}\n\nfrom\n\n'@magic-ext/webauthn'\n\n;\n\n03\n\n03\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR API KEY'\n\n,\n\n{\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR API KEY'\n\n,\n\n{\n\n05\n\nextensions\n\n:\n\n[\n\nnew\n\nWebAuthnExtension\n\n(\n\n)\n\n]\n\n,\n\n05\n\nextensions\n\n:\n\n[\n\nnew\n\nWebAuthnExtension\n\n(\n\n)\n\n]\n\n,\n\n06\n\n}\n\n)\n\n;\n\n06\n\n}\n\n)\n\n;\n\n07\n\n07\n\n08\n\n// Initiates the flow to update WebAuthn Device's nickname.\n\n08\n\n// Initiates the flow to update WebAuthn Device's nickname.\n\n09\n\ntry\n\n{\n\n09\n\ntry\n\n{\n\n10\n\nawait\n\nmagic\n\n.\n\nwebauthn\n\n.\n\nupdateInfo\n\n(\n\n{\n\nid\n\n,\n\nnickname\n\n}\n\n)\n\n;\n\n10\n\nawait\n\nmagic\n\n.\n\nwebauthn\n\n.\n\nupdateInfo\n\n(\n\n{\n\nid\n\n,\n\nnickname\n\n}\n\n)\n\n;\n\n11\n\n}\n\ncatch\n\n(\n\ne\n\n)\n\n{\n\n11\n\n}\n\ncatch\n\n(\n\ne\n\n)\n\n{\n\n12\n\n// Handle errors if required!\n\n12\n\n// Handle errors if required!\n\n13\n\n}\n\n13\n\n}", "explanation": "**Example Overview**\n\nThe \"#Example\" section in the Magic Labs embedded wallet documentation is a code snippet illustrating how to use the Magic SDK to update a WebAuthn device's nickname. WebAuthn is a browser-based authentication protocol that allows users to securely log in to websites using public key cryptography.\n\n**Example Purpose**\n\nThe purpose of this example is to demonstrate how to integrate the Magic SDK, specifically the WebAuthn extension, into a web application. This extends the functionality of the Magic SDK to include WebAuthn-based authentication and allows users to update their device's nickname.\n\n**Key Components**\n\n1. **Importing dependencies**: The example imports the Magic SDK and the WebAuthn extension from their respective packages.\n2. **Initializing the Magic SDK**: The example creates a new instance of the Magic SDK, passing in the API key and a configuration object that includes the WebAuthn extension.\n3. **Updating the WebAuthn device nickname**: The example demonstrates how to update the nickname of a registered WebAuthn device using the `updateInfo` method of the `webauthn` extension.\n\n**Main Steps**\n\n1. Import the necessary dependencies from the Magic SDK and the WebAuthn extension.\n2. Initialize the Magic SDK with the API key and WebAuthn extension configuration.\n3. Use the `updateInfo` method of the `webauthn` extension to update the nickname of a registered device.\n\n**Example Summary**\n\nThis example provides a starting point for developers who want to integrate Magic Labs' WebAuthn extension into their application. It showcases how to use the Magic SDK to securely authenticate users through WebAuthn and update their device's nickname.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#chunk-125", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nunregisterDevice\n\nUnregisters a user's device.\n\nOnly available with Dedicated Wallet.\n\n#\n\n\u2022 id (String): The WebAuthn ID returned from getMetaData function's devicesInfo field\n\nid\n\ngetMetaData\n\ndevicesInfo", "explanation": "**unregisterDevice Overview**\n\nThe `unregisterDevice` function is used to unregister a user's device from the Magic Labs Dedicated Wallet. This is typically used when a user wants to reset or remove a device from their account.\n\n**Main Purpose**\n\nThe primary purpose of `unregisterDevice` is to:\n\n1. Remove the device association from the user's account.\n2. Prevent further device-specific operations.\n\n**Key Argument: `id`**\n\nThe `id` argument is a required string parameter that identifies the device to be unregistered. This value is obtained from the `getMetaData` function's `devicesInfo` field.\n\n**Prerequisites**\n\nTo use `unregisterDevice`, your application must be using the Magic Labs Dedicated Wallet, which has access to WebAuthn (Web Authentication) functionality.\n\n**Example Usage**\n\nTo unregister a device, your application would first need to obtain the `id` value from `getMetaData`, and then call `unregisterDevice` with this `id`. This process removes the associated device from the user's account.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#chunk-126", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 PromiEvent<boolean>: The promise resolves with a true boolean value if unregister webauthn device is successful and rejects with a specific error code if the request fails\n\nPromiEvent<boolean>", "explanation": "**Returns Section Explanation:**\n\nThe `Returns` section in Magic Labs' embedded wallet documentation for web-based SDKs is about the outcome of an asynchronous function call, specifically when trying to unregister a WebAuthn device.\n\n**Main Purpose:**\n\nThe main purpose of this section is to inform developers about what the function `unregisterWebauthnDevice()` returns, in terms of a promise that resolves or rejects based on the success or failure of the task.\n\n**Key Points:**\n\n- The promise returns a boolean value (`true` or `false`).\n- If successful, the promise resolves with `true`, indicating the device has been successfully unregistered.\n- If the request fails, the promise rejects with a specific error code, allowing developers to handle the error accordingly.\n\n**Developer's Use Case:**\n\nWhen using the `unregisterWebauthnDevice()` function, developers can use try-catch blocks to handle the promise and check for the returned boolean value or specific error codes. This helps them determine the outcome of the unregistration process and take necessary actions based on the result.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#chunk-127", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n,\n\nSDKErrorCode\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n,\n\nSDKErrorCode\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\nimport\n\n{\n\nWebAuthnExtension\n\n}\n\nfrom\n\n'@magic-ext/webauthn'\n\n;\n\n02\n\nimport\n\n{\n\nWebAuthnExtension\n\n}\n\nfrom\n\n'@magic-ext/webauthn'\n\n;\n\n03\n\n03\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR API KEY'\n\n,\n\n{\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR API KEY'\n\n,\n\n{\n\n05\n\nextensions\n\n:\n\n[\n\nnew\n\nWebAuthnExtension\n\n(\n\n)\n\n]\n\n,\n\n05\n\nextensions\n\n:\n\n[\n\nnew\n\nWebAuthnExtension\n\n(\n\n)\n\n]\n\n,\n\n06\n\n}\n\n)\n\n;\n\n06\n\n}\n\n)\n\n;\n\n07\n\n07\n\n08\n\n// Initiates the flow to unregister WebAuthn Device.\n\n08\n\n// Initiates the flow to unregister WebAuthn Device.\n\n09\n\ntry\n\n{\n\n09\n\ntry\n\n{\n\n10\n\n/* Assuming user is logged in */\n\n10\n\n/* Assuming user is logged in */\n\n11\n\nawait\n\nmagic\n\n.\n\nwebauthn\n\n.\n\nunregisterDevice\n\n(\n\nid\n\n)\n\n;\n\n11\n\nawait\n\nmagic\n\n.\n\nwebauthn\n\n.\n\nunregisterDevice\n\n(\n\nid\n\n)\n\n;\n\n12\n\n}\n\ncatch\n\n(\n\ne\n\n)\n\n{\n\n12\n\n}\n\ncatch\n\n(\n\ne\n\n)\n\n{\n\n13\n\n// Handle errors if required!\n\n13\n\n// Handle errors if required!\n\n14\n\n}\n\n14\n\n}", "explanation": "**Explanation of the #Example section:**\n\nThe #Example section provided is an illustrative example of how to use the Magic Labs Embedded Wallet, specifically the WebAuthn extension, to unregister a WebAuthn device.\n\n**Main Purpose:**\n\nThe main purpose of this example is to demonstrate the process of unregistering a WebAuthn device, which is a step that allows a user to disconnect a hardware device (e.g., a YubiKey or a fingerprint reader) from their account.\n\n**Key Points:**\n\n1. Importing necessary modules: The example starts by importing the required modules from the Magic Labs SDK, specifically the `Magic` class and the `SDKErrorCode` enum, as well as the `WebAuthnExtension` class from the `@magic-ext/webauthn` package.\n2. Initializing the Magic instance: An instance of the `Magic` class is created, passing in the API key, and an object with an option to use the `WebAuthnExtension`.\n3. Unregistering a WebAuthn device: The `unregisterDevice` method is called on the `magic` instance, passing in the device ID. This initiates the flow to unregister the WebAuthn device.\n4. Error handling: The example includes a try-catch block to handle any errors that may occur during the registration process.\n\n**Step-by-Step Outline:**\n\n1. Import necessary modules.\n2. Initialize the Magic instance with the API key and the WebAuthn extension.\n3. Call the `unregisterDevice` method to initiate the flow to unregister the WebAuthn device.\n4. Handle any errors that may occur during the process.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#chunk-128", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nThere are three types of error class to be aware of when working with Magic's client-side JavaScript SDK:\n\n\u2022 SDKError: Raised by the SDK to indicate missing parameters, communicate deprecation notices, or other internal issues. A notable example would be a MISSING_API_KEY error, which informs the required API key parameter was missing from new Magic(...).\n\n\u2022 RPCError: Errors associated with specific method calls to the Magic <iframe> context. These methods are formatted as JSON RPC 2.0 payloads, so they return error codes as integers. This type of error is raised by methods like AuthModule.loginWithMagicLink.\n\n\u2022 ExtensionError: Errors associated with method calls to Magic SDK Extensions. Extensions are an upcoming/experimental feature of Magic SDK. More information will be available once Extensions are officially released.\n\nSDKError\n\nRPCError\n\n<iframe>\n\nJSON RPC 2.0\n\nAuthModule.loginWithMagicLink\n\nAuthModule.loginWithMagicLink\n\nExtensionError\n\n#\n\nSDKError\n\nThe SDKError class is exposed for instanceof operations.\n\nSDKError\n\ninstanceof\n\nCopy\n\n01\n\nimport\n\n{\n\nSDKError\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nSDKError\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\n02\n\n03\n\ntry\n\n{\n\n03\n\ntry\n\n{\n\n04\n\n// Something async...\n\n04\n\n// Something async...\n\n05\n\ncatch\n\n(\n\nerr\n\n)\n\n{\n\n05\n\ncatch\n\n(\n\nerr\n\n)\n\n{\n\n06\n\nif\n\n(\n\nerr\n\ninstanceof\n\nSDKError\n\n)\n\n{\n\n06\n\nif\n\n(\n\nerr\n\ninstanceof\n\nSDKError\n\n)\n\n{\n\n07\n\n// Handle...\n\n07\n\n// Handle...\n\n08\n\n}\n\n08\n\n}\n\n09\n\n}\n\n09\n\n}\n\nSDKError instances expose the code field which may be used to deterministically identify the error. Additionally, an enumeration of error codes is exposed for convenience and readability:\n\nSDKError\n\ncode\n\nCopy\n\n01\n\nimport\n\n{\n\nSDKErrorCode\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nSDKErrorCode\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\n02\n\n03\n\nSDKErrorCode\n\n.\n\nMissingApiKey\n\n;\n\n03\n\nSDKErrorCode\n\n.\n\nMissingApiKey\n\n;\n\n04\n\nSDKErrorCode\n\n.\n\nModalNotReady\n\n;\n\n04\n\nSDKErrorCode\n\n.\n\nModalNotReady\n\n;\n\n05\n\nSDKErrorCode\n\n.\n\nMalformedResponse\n\n;\n\n05\n\nSDKErrorCode\n\n.\n\nMalformedResponse\n\n;\n\n06\n\n// and so forth...\n\n06\n\n// and so forth...\n\n07\n\n// Please reference the `Enum Key` column of the error table below.\n\n07\n\n// Please reference the `Enum Key` column of the error table below.\n\n#\n\nMissingApiKey\n\nModalNotReady\n\nasync/await\n\nMalformedResponse\n\nInvalidArgument\n\nExtensionNotInitialized\n\nIncompatibleExtension\n\nIncompatibleExtension\n\nIndicates that incompatible extensions were detected during the initialization of the Magic SDK. The error message specifies the incompatible extensions and their compatibility requirements based on the current Magic SDK version and platform environment.", "explanation": "**Overview of SDKError and Related Concepts**\n\nThis documentation section focuses on error handling and response mechanisms within Magic Labs' embedded wallet SDK. Specifically, it details three types of error classes: SDKError, RPCError, and ExtensionError.\n\n**Purpose**\n\nThe main purpose of this section is to inform developers about the different error types they can encounter when using the Magic Labs SDK. This includes:\n\n1. **SDKError**: Raised by the SDK for internal issues, missing parameters, or deprecation notices.\n2. **RPCError**: Associated with method calls to the Magic iframe context, using JSON RPC 2.0 payloads.\n3. **ExtensionError**: Related to method calls to Magic SDK Extensions, an experimental feature.\n\n**Key Takeaways**\n\n1. The SDKError class provides a way to catch and handle errors using `instanceof` operations.\n2. SDKError instances expose a `code` field, which can be used to identify errors, and an `SDKErrorCode` enumeration for convenience and readability.\n3. The `SDKErrorCode` enumeration lists various error codes, such as `MissingApiKey`, `ModalNotReady`, and `MalformedResponse`, which can be referenced for troubleshooting and error handling.\n\nBy understanding these error concepts and classes, developers can effectively handle and resolve errors that may occur when using the Magic Labs SDK.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#chunk-129", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nRPCError\n\nThe RPCError class is exposed for instanceof operations:\n\nRPCError\n\ninstanceof\n\nCopy\n\n01\n\nimport\n\n{\n\nRPCError\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nRPCError\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\n02\n\n03\n\ntry\n\n{\n\n03\n\ntry\n\n{\n\n04\n\n// Something async...\n\n04\n\n// Something async...\n\n05\n\ncatch\n\n(\n\nerr\n\n)\n\n{\n\n05\n\ncatch\n\n(\n\nerr\n\n)\n\n{\n\n06\n\nif\n\n(\n\nerr\n\ninstanceof\n\nRPCError\n\n)\n\n{\n\n06\n\nif\n\n(\n\nerr\n\ninstanceof\n\nRPCError\n\n)\n\n{\n\n07\n\n// Handle...\n\n07\n\n// Handle...\n\n08\n\n}\n\n08\n\n}\n\n09\n\n}\n\n09\n\n}\n\nRPCError instances expose the code field which may be used to deterministically identify the error. Additionally, an enumeration of error codes is exposed for convenience and readability:\n\nRPCError\n\ncode\n\nCopy\n\n01\n\nimport\n\n{\n\nRPCErrorCode\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nRPCErrorCode\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\n02\n\n03\n\nRPCErrorCode\n\n.\n\nMagicLinkExpired\n\n;\n\n03\n\nRPCErrorCode\n\n.\n\nMagicLinkExpired\n\n;\n\n04\n\nRPCErrorCode\n\n.\n\nUserAlreadyLoggedIn\n\n;\n\n04\n\nRPCErrorCode\n\n.\n\nUserAlreadyLoggedIn\n\n;\n\n05\n\nRPCErrorCode\n\n.\n\nParseError\n\n;\n\n05\n\nRPCErrorCode\n\n.\n\nParseError\n\n;\n\n06\n\nRPCErrorCode\n\n.\n\nMethodNotFound\n\n;\n\n06\n\nRPCErrorCode\n\n.\n\nMethodNotFound\n\n;\n\n07\n\nRPCErrorCode\n\n.\n\nInternalError\n\n;\n\n07\n\nRPCErrorCode\n\n.\n\nInternalError\n\n;\n\n08\n\n// and so forth...\n\n08\n\n// and so forth...\n\n09\n\n// Please reference the `Enum Key` column of the error table below.\n\n09\n\n// Please reference the `Enum Key` column of the error table below.\n\n#\n\nMagicLinkFailedVerification\n\nMagicLinkExpired\n\nMagicLinkRateLimited\n\nshowUI\n\nfalse\n\nMagicLinkInvalidRedirectURL\n\nredirectURI\n\nUserAlreadyLoggedIn\n\nlogout\n\nlogout\n\nUpdateEmailFailed\n\nUserRequestEditEmail\n\n-10010\n\nInactiveRecipient\n\nInactiveRecipient\n\nThe recipient account is currently inactive. The user should verify and activate their account to resolve this issue.\n\n-10011\n\nAccessDeniedToUser\n\nAccessDeniedToUser\n\nUser access is denied. The user lacks the necessary permissions or credentials to perform the requested action.\n\n-10015\n\nRedirectLoginComplete\n\nRedirectLoginComplete\n\nThe redirect login process has been successfully completed.", "explanation": "**RPCError and Error Handling in Magic Labs Embedded Wallet Documentation**\n\nThe `RPCError` section of the Magic Labs embedded wallet documentation is about managing and handling errors in Magic Link operations. It outlines the `RPCError` class, its usage in error handling, and an enumeration of error codes for convenient identification and resolution.\n\n**Key Points:**\n\n1. **`RPCError` Class**: The `RPCError` class is exposed for instance of operations. It can be used to capture and handle errors that occur during Magic Link operations.\n2. **Error Identification**: `RPCError` instances have a `code` field that can be used to deterministically identify the error. This helps in resolving the issue directly.\n3. **Error Codes Enumeration**: An enumeration of error codes (`RPCErrorCode`) is provided for convenience and readability. This list covers various error conditions, including Magic Link failures, user authentication issues, and internal errors.\n\n**Main Purpose:**\n\nThe `RPCError` section is designed to enable developers to:\n\n1. **Catch and Handle Errors**: Use the `RPCError` class to catch and handle errors that occur during Magic Link operations, making error management more effective.\n2. **Identify Error Causes**: Use the `code` field to deterministically identify the error and resolve the issue accordingly.\n3. **Convenient Error Handling**: Use the `RPCErrorCode` enumeration to simplify error handling and reduce the complexity of error management.\n\nBy following this documentation section, developers can efficiently manage errors in their Magic Labs embedded wallet implementations, ensuring a better user experience and streamlined error resolution.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#chunk-130", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nParseError\n\nInvalidRequest\n\nMethodNotFound\n\nInvalidParams\n\nInternalError", "explanation": "**Standard JSON RPC 2.0 Error Codes**\n\nIn Magic Labs' embedded wallet API, JSON RPC 2.0 error codes are a standardized way to communicate errors that occur during API requests. These error codes provide a clear and consistent method for identifying and handling errors in your app.\n\n**Purpose:**\n\nThe main purpose of these error codes is to:\n\n1. **Facilitate error handling**: By using standardized error codes, your app can handle errors in a predictable and consistent manner.\n2. **Improve error reporting**: These codes provide a clear and descriptive way to report errors to your development team, making it easier to diagnose and resolve issues.\n\n**Error Codes:**\n\nHere's a brief explanation of each error code:\n\n1. **ParseError**: Indicates that the request cannot be parsed, usually due to invalid JSON syntax.\n2. **InvalidRequest**: Signifies that the request is invalid or malformed.\n3. **MethodNotFound**: Means that the requested method or function is not available or does not exist.\n4. **InvalidParams**: Indicates that one or more parameters in the request are invalid or of the wrong type.\n5. **InternalError**: Signals that an unexpected internal error occurred, such as a server-side issue or a database error.\n\n**Usage:**\n\nWhen an error occurs, the Magic Labs API will return a JSON response with a standardized error code and a human-readable error message. Your app can use this information to handle the error, display a user-friendly message, or log the issue for further analysis.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#chunk-131", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nExtensionError\n\nThe ExtensionError class is exposed for instanceof operations:\n\nExtensionError\n\ninstanceof\n\nCopy\n\n01\n\nimport\n\n{\n\nExtensionError\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nExtensionError\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\n02\n\n03\n\ntry\n\n{\n\n03\n\ntry\n\n{\n\n04\n\n// Something async...\n\n04\n\n// Something async...\n\n05\n\ncatch\n\n(\n\nerr\n\n)\n\n{\n\n05\n\ncatch\n\n(\n\nerr\n\n)\n\n{\n\n06\n\nif\n\n(\n\nerr\n\ninstanceof\n\nExtensionError\n\n)\n\n{\n\n06\n\nif\n\n(\n\nerr\n\ninstanceof\n\nExtensionError\n\n)\n\n{\n\n07\n\n// Handle...\n\n07\n\n// Handle...\n\n08\n\n}\n\n08\n\n}\n\n09\n\n}\n\n09\n\n}\n\nExtensionError instances expose the code field which may be used to deterministically identify the error. Magic SDK does not export a global enumeration of Extension error codes. Instead, Extension authors are responsible for exposing and documenting error codes relevant to the Extension's use-case.\n\nExtensionError\n\ncode", "explanation": "# ExtensionError\n\n## Overview\n\nThe ExtensionError class is used to handle and identify errors that occur in Magic Labs extensions. It allows developers to check if an error is an instance of ExtensionError and access its code field to determine the specific error.\n\n## Purpose\n\nThe main purpose of ExtensionError is to provide a way to identify and handle errors that occur within Magic Labs extensions. This is necessary because extensions often perform asynchronous operations, and errors can be difficult to diagnose without proper error handling.\n\n## Usage\n\nTo use ExtensionError, developers can import it from the magic-sdk and check if an error is an instance of ExtensionError using the instanceof operator. If the error is an instance of ExtensionError, the code field can be accessed to determine the specific error.\n\nHere's an example:\n\n```javascript\ntry {\n  // Asynchronous operation...\n} catch (err) {\n  if (err instanceof ExtensionError) {\n    // Handle ExtensionError, e.g., console.error(err.code)\n  }\n}\n```\n\n## Important Notes\n\n* Extension authors are responsible for exposing and documenting their own error codes, which can be accessed via the code field of ExtensionError instances.\n* Magic SDK does not export a global enumeration of Extension error codes.\n\nBy using ExtensionError, developers can improve error handling and provide better diagnostics for their Magic Labs extensions.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#chunk-132", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nMagic SDK provides a flexible interface for handling methods which encompass multiple \"stages\" of an action. Promises returned by Magic SDK resolve when a flow has reached finality, but certain methods also contain life-cycle events that dispatch throughout. We refer to this interface as a PromiEvent. There is prior art to inspire this approach in Ethereum's Web3 standard.\n\nPromises\n\nPromiEvent\n\nWeb3\n\nPromiEvent is a portmanteau of Promise and EventEmitter. Browser and React Native SDK methods return this object type, which is a native JavaScript Promise overloaded with EventEmitter methods. This value can be awaited in modern async/await code, or you may register event listeners to handle method-specific life-cycle hooks. Each PromiEvent contains the following default event types:\n\nPromiEvent\n\nPromise\n\nEventEmitter\n\nEventEmitter\n\nPromise\n\nEventEmitter\n\nawaited\n\nasync/await\n\nPromiEvent\n\n\u2022 \"done\": Called when the Promise resolves. This is equivalent to Promise.then.\n\n\u2022 \"error\": Called if the Promise rejects. This is equivalent to Promise.catch.\n\n\u2022 \"settled\": Called when the Promise either resolves or rejects. This is equivalent to Promise.finally.\n\n\"done\"\n\nPromise\n\nPromise.then\n\n\"error\"\n\nPromise\n\nPromise.catch\n\n\"settled\"\n\nPromise\n\nPromise.finally\n\nLook for additional event types documented near the method they relate to. Events are strongly-typed by TypeScript to offer developer hints and conveniant IDE auto-complete.\n\nCopy\n\n01\n\nconst\n\nreq\n\n=\n\nmagic\n\n.\n\nauth\n\n.\n\nloginWithMagicLink\n\n(\n\n{\n\nemail\n\n:\n\n'hello@magic.link'\n\n}\n\n)\n\n;\n\n01\n\nconst\n\nreq\n\n=\n\nmagic\n\n.\n\nauth\n\n.\n\nloginWithMagicLink\n\n(\n\n{\n\nemail\n\n:\n\n'hello@magic.link'\n\n}\n\n)\n\n;\n\n02\n\n02\n\n03\n\nreq\n\n03\n\nreq\n\n04\n\n.\n\non\n\n(\n\n'email-sent'\n\n,\n\n(\n\n)\n\n=>\n\n{\n\n04\n\n.\n\non\n\n(\n\n'email-sent'\n\n,\n\n(\n\n)\n\n=>\n\n{\n\n05\n\n/* ... */\n\n05\n\n/* ... */\n\n06\n\n}\n\n)\n\n06\n\n}\n\n)\n\n07\n\n.\n\nthen\n\n(\n\nDIDToken\n\n=>\n\n{\n\n07\n\n.\n\nthen\n\n(\n\nDIDToken\n\n=>\n\n{\n\n08\n\n/* ... */\n\n08\n\n/* ... */\n\n09\n\n}\n\n)\n\n09\n\n}\n\n)\n\n10\n\n.\n\nonce\n\n(\n\n'email-not-deliverable'\n\n,\n\n(\n\n)\n\n=>\n\n{\n\n10\n\n.\n\nonce\n\n(\n\n'email-not-deliverable'\n\n,\n\n(\n\n)\n\n=>\n\n{\n\n11\n\n/* ... */\n\n11\n\n/* ... */\n\n12\n\n}\n\n)\n\n12\n\n}\n\n)\n\n13\n\n.\n\ncatch\n\n(\n\nerror\n\n=>\n\n{\n\n13\n\n.\n\ncatch\n\n(\n\nerror\n\n=>\n\n{\n\n14\n\n/* ... */\n\n14\n\n/* ... */\n\n15\n\n}\n\n)\n\n15\n\n}\n\n)\n\n16\n\n.\n\non\n\n(\n\n'error'\n\n,\n\nerror\n\n=>\n\n{\n\n16\n\n.\n\non\n\n(\n\n'error'\n\n,\n\nerror\n\n=>\n\n{\n\n17\n\n/* ... */\n\n17\n\n/* ... */\n\n18\n\n}\n\n)\n\n;\n\n18\n\n}\n\n)\n\n;", "explanation": "**What is PromiEvent?**\n\nA PromiEvent is a custom interface in the Magic Labs embedded wallet SDK that combines the functionalities of a Promise and an EventEmitter. It's designed to handle multiple \"stages\" of an action, providing a flexible way to handle life-cycle events throughout the process.\n\n**Main Purpose of PromiEvent**\n\nThe main purpose of PromiEvent is to:\n\n1. Handle multiple stages of an action: PromiEvent allows you to handle multiple stages of an action, such as sending a login link, verifying the link, and logging in, all in a streamlined way.\n2. Manage life-cycle events: PromiEvent provides a way to listen to life-cycle events, such as when a promise resolves, rejects, or settles, allowing you to handle these events in your code.\n3. Provide a flexible interface: PromiEvent is designed to be flexible, allowing you to use async/await or EventEmitter methods to handle the life-cycle events.\n\n**Key Features of PromiEvent**\n\nSome key features of PromiEvent include:\n\n* Default event types: \"done,\" \"error,\" and \"settled\" events that are called when the promise resolves, rejects, or settles, respectively.\n* Ability to register event listeners: You can register event listeners to handle method-specific life-cycle hooks.\n* TypeScript support: PromiEvent is strongly-typed by TypeScript, offering developer hints and convenient IDE auto-complete.\n* Async/await support: You can use async/await syntax to work with PromiEvent.\n\n**Example Use Case**\n\nIn the example code, a PromiEvent is created by calling `magic.auth.loginWithMagicLink` and then registering event listeners for the \"email-sent\" and \"email-not-deliverable\" events. The code also uses async/await syntax to handle the promise. This demonstrates how PromiEvent can be used to handle multiple stages of an action and life-cycle events in a flexible and streamlined way.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#chunk-133", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nMagic supports the following EVM RPC Methods that can be called through a web3 provider library such as web3.js or ethers.js.\n\nweb3.js\n\nethers.js\n\nNote: starting from magic-sdk@17.0.0, eth_accounts will return an empty array if no user is logged in, instead of prompting the login form. To prompt the login form, use connectWithUI().\n\nmagic-sdk@17.0.0\n\neth_accounts\n\nconnectWithUI()\n\n\u2022 eth_accounts\n\n\u2022 get_balance\n\n\u2022 eth_estimateGas\n\n\u2022 eth_gasPrice\n\n\u2022 eth_sendTransaction\n\n\u2022 personal_sign\n\n\u2022 eth_signTypedData_v3\n\n\u2022 eth_signTypedData_v4\n\neth_accounts\n\nget_balance\n\neth_estimateGas\n\neth_gasPrice\n\neth_sendTransaction\n\npersonal_sign\n\neth_signTypedData_v3\n\neth_signTypedData_v4", "explanation": "**EVM RPC Methods Overview**\n\nThe `EVM RPC Methods` section of the Magic Labs embedded wallet documentation outlines the supported remote procedure calls (RPCs) for interacting with Ethereum Virtual Machines (EVMs). These methods can be called through web3 provider libraries such as web3.js or ethers.js, enabling developers to integrate the Magic Labs wallet into their web applications.\n\n**Main Purpose**\n\nThe primary purpose of these EVM RPC methods is to provide a standardized interface for interacting with Ethereum accounts and performing common transactions, such as:\n\n* Retrieving account information (e.g., `eth_accounts`)\n* Getting the current balance (e.g., `get_balance`)\n* Estimating gas costs (e.g., `eth_estimateGas`)\n* Sending transactions (e.g., `eth_sendTransaction`)\n* Authenticating signatures (e.g., `personal_sign`)\n\n**Key Takeaways**\n\n* Magic Labs supports a range of EVM RPC methods, from basic account management to more advanced transaction-related functions.\n* These methods can be used with web3.js or ethers.js, enabling seamless integration with the Magic Labs wallet.\n* The documentation notes specific behavior changes, such as the shift to returning an empty array for `eth_accounts` in version 17.0.0 of the magic-sdk.\n\nBy understanding these EVM RPC methods, developers can build secure, feature-rich web applications integration with the Magic Labs wallet, providing a seamless user experience for their users.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#chunk-134", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n#\n\nA user's Magic SDK session persists up to 7 days by default, so re-authentication is usually friction-less.\n\nNote: the session length is customizable by the developer through the Magic dashboard.\n\nMagic dashboard\n\nBefore re-authenticating a user, install the Magic Client SDK\u200b.\n\ninstall the Magic Client SDK\u200b\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n02\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n03\n\n03\n\n04\n\nconst\n\nemail\n\n=\n\n'example@magic.link'\n\n;\n\n04\n\nconst\n\nemail\n\n=\n\n'example@magic.link'\n\n;\n\n05\n\n05\n\n06\n\nif\n\n(\n\nawait\n\nmagic\n\n.\n\nuser\n\n.\n\nisLoggedIn\n\n(\n\n)\n\n)\n\n{\n\n06\n\nif\n\n(\n\nawait\n\nmagic\n\n.\n\nuser\n\n.\n\nisLoggedIn\n\n(\n\n)\n\n)\n\n{\n\n07\n\nconst\n\ndidToken\n\n=\n\nawait\n\nmagic\n\n.\n\nuser\n\n.\n\ngetIdToken\n\n(\n\n)\n\n;\n\n07\n\nconst\n\ndidToken\n\n=\n\nawait\n\nmagic\n\n.\n\nuser\n\n.\n\ngetIdToken\n\n(\n\n)\n\n;\n\n08\n\n08\n\n09\n\n// Do something with the DID token.\n\n09\n\n// Do something with the DID token.\n\n10\n\n// For instance, this could be a `fetch` call\n\n10\n\n// For instance, this could be a `fetch` call\n\n11\n\n// to a protected backend endpoint.\n\n11\n\n// to a protected backend endpoint.\n\n12\n\ndocument\n\n.\n\ngetElementById\n\n(\n\n'your-access-token'\n\n)\n\n.\n\ninnerHTML\n\n=\n\ndidToken\n\n;\n\n12\n\ndocument\n\n.\n\ngetElementById\n\n(\n\n'your-access-token'\n\n)\n\n.\n\ninnerHTML\n\n=\n\ndidToken\n\n;\n\n13\n\n}\n\nelse\n\n{\n\n13\n\n}\n\nelse\n\n{\n\n14\n\n// Log in the user\n\n14\n\n// Log in the user\n\n15\n\nconst\n\nuser\n\n=\n\nawait\n\nmagic\n\n.\n\nauth\n\n.\n\nloginWithMagicLink\n\n(\n\n{\n\nemail\n\n}\n\n)\n\n;\n\n15\n\nconst\n\nuser\n\n=\n\nawait\n\nmagic\n\n.\n\nauth\n\n.\n\nloginWithMagicLink\n\n(\n\n{\n\nemail\n\n}\n\n)\n\n;\n\n16\n\n}\n\n16\n\n}", "explanation": "**Re-authenticating Users with Magic Labs Embedded Wallet**\n\nThe provided documentation section explains how to re-authenticate users with the Magic Labs embedded wallet. The main purpose is to refresh the user's session when it expires, allowing them to continue using the application without additional friction.\n\n**Use Case:**\n\nThe user's session persists up to 7 days by default. However, session length can be customized by the developer in the Magic dashboard. When the user tries to perform an action that requires authentication (e.g., making a payment or accessing secure data), the application checks if the user's session is still valid.\n\n**WorkFlow:**\n\n1. **Check if the user is logged in**: The application uses the `isLoggedIn` method to verify if the user's session is still active.\n2. **If logged in**: The application retrieves the user's DID (Decentralized Identifier) token using the `getIdToken` method.\n3. **Use the DID token**: The application can use the DID token to access protected backend endpoints or perform other secure actions.\n4. **If not logged in**: The application prompts the user to log in again using the `loginWithMagicLink` method.\n\n**Code Example:**\n\nThe code snippet demonstrates how to check if a user is logged in, retrieve their DID token, and use it to update a HTML element with the token. If the user is not logged in, it prompts them to log in again.\n\n**Key Methods:**\n\n* `isLoggedIn`: Verifies if the user's session is still active.\n* `getIdToken`: Retrieves the user's DID token.\n* `loginWithMagicLink`: Logs the user in with a magic link.\n\nBy re-authenticating users in this way, the application ensures that users can continue using it securely, without interruption, when their session expires.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#chunk-135", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 GitHub\n\n\u2022 Quickstart\n\n\u2022 NPM\n\nGitHub\n\nQuickstart\n\nNPM", "explanation": "In the #Resources section of the Magic Labs embedded wallet documentation, you'll find a collection of links to additional resources and tools that can help with integrating the Magic Labs wallet into your web application.\n\nHere's a brief explanation of each resource:\n\n1. **GitHub**: This link points to the Magic Labs GitHub page, where you can find the source code for the library, community-submitted examples, and issue tracking.\n\n2. **Quickstart**: This resource provides a concise introduction to getting started with the Magic Labs wallet, including steps to set up the library, generate a new wallet instance, and connect to the user's wallet.\n\n3. **NPM**: This link refers to the Magic Labs library's package on npm (the package manager for JavaScript). You can use npm to install and manage the library in your project.\n\nThe main purpose of the #Resources section is to provide easy access to relevant documentation and tools that can help you successfully integrate the Magic Labs wallet into your web application.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#chunk-136", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nAll changes to the SDK are covered in our latest release notes.\n\nlatest release notes", "explanation": "The '#Versions' section in the Magic Labs embedded wallet documentation is about tracking and listing the different versions of the Magic SDK (Software Development Kit). \n\nIts main purpose is to provide clients and developers with information on the available versions of the SDK, allowing them to:\n\n1. **Stay informed**: Keep up to date with the latest changes, updates, and improvements to the SDK.\n2. **Choose the right version**: Select the suitable version of the SDK based on their specific needs and deployment requirements.\n3. **Pinpoint changes**: Identify any changes or updates that may impact their application, making it easier to troubleshoot and resolve potential issues.\n4. **Access release notes**: Directly link to the latest release notes for each version, providing detailed information on the changes, fixes, and new features added.\n\nBy including this section, Magic Labs aims to increase transparency, improve collaboration, and facilitate the development process for users of their embedded wallet SDK.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#chunk-137", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nThe Magic SDK for iOS is your entry-point to secure, passwordless authentication for your mobile app. This guide will cover some important topics for getting started with iOS APIs and to make the most of Magic's features.", "explanation": "This documentation section titled \"iOS API Reference - #Overview\" from the Magic Labs embedded wallet documentation is about introducing and explaining the Magic SDK for iOS. \n\nIts main purpose is to serve as an entry point for developers to start using secure, passwordless authentication in their mobile apps via the Magic iOS API. It aims to provide key information needed for getting started with the Magic iOS APIs, as well as utilizing the platform's features effectively. This section likely provides an overview of the concepts and tools involved, setting the stage for more in-depth explanations of the iOS API.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/ios#chunk-1", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nThe Magic class is the entry-point to the Magic SDK. It must be instantiated with a Magic publishable key.\n\n#\n\nWe use service workers for for better performance on web3 operations. If you'd like to take advantage of this performance boost, you'd have to enable app bound domains. To do that, add the following to your Info.plist and rebuild your app:\n\nInfo.plist\n\nCopy\n\n01\n\n<key>WKAppBoundDomains</key>\n\n01\n\n<key>WKAppBoundDomains</key>\n\n02\n\n<array>\n\n02\n\n<array>\n\n03\n\n<string>https://auth.magic.link</string>\n\n03\n\n<string>https://auth.magic.link</string>\n\n04\n\n</array>\n\n04\n\n</array>", "explanation": "**Getting Started - Performance Improvement (Optional)**\n\nThis documentation section guides you on how to optimize the performance of Magic Labs embedded wallet on iOS devices. It focuses on using service workers for web3 operations and implementing \"App Bound Domains\" for better performance.\n\n**Key Points:**\n\n1. **Service Workers:** Magic Labs uses service workers to improve performance on web3 operations. However, service workers are restricted by default in mobile browsers.\n2. **App Bound Domains:** To enable service workers on iOS devices, you need to declare specific domains as \"app-bound\" using the `WKAppBoundDomains` key in your `Info.plist` file.\n\n**Key Actions:**\n\n1. Add the `WKAppBoundDomains` key to your `Info.plist` file.\n2. Create an array under `WKAppBoundDomains` and add the following domains:\n\t* `https://auth.magic.link`\n3. Rebuild your app to apply the changes.\n\n**Purpose:**\n\nBy implementing App Bound Domains, you can take advantage of the performance boost provided by service workers, resulting in faster and more efficient web3 operations on iOS devices. This optional improvement is aimed at developers who prioritize performance and want to enhance the user experience.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/ios#chunk-2", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n#\n\nMagic()\n\nParameter\n\nType\n\nDefinition\n\napiKey\n\napiKey\n\nString\n\nYour publishable API Key retrieved from the Magic Dashboard.\n\nnetwork?\n\nnetwork?\n\nEthNetwork | CustomNodeConfiguration\n\nEthNetwork\n\nCustomNodeConfiguration\n\n(EthNetwork): A representation of the connected Ethereum network (.mainnet or .goerli).\n\nEthNetwork\n\n.mainnet\n\n.goerli\n\n\u2060(CustomNodeConfiguration): A custom Ethereum Node configuration with the following shape:\n\nCustomNodeConfiguration\n\nrpcUrl (String): A URL pointing to your custom Ethereum Node.\n\nrpcUrl\n\n\u2060chainId? (Number): Some Node infrastructures require you to pass an explicit chain ID. If you are aware that your Node requires this configuration, pass it here as an integer.\n\nchainId?\n\nlocale?\n\nlocale?\n\nLocale\n\nLocale\n\nCustomize the language of Magic's modal, email and confirmation screen. See Localization for more.\n\nLocalization", "explanation": "**Constructor - `Magic()`**\n\nThe `Magic()` constructor is a crucial part of the Magic Labs embedded wallet for iOS, serving as the main entry point for initializing the wallet. This constructor takes three parameters:\n\n1. **`apiKey` (required)**: A publishable API Key obtained from the Magic Dashboard. This key is essential for authenticating and enabling wallet functionality.\n2. **`network` (optional)**: An enum or custom Ethereum Node configuration, which specifies the connected Ethereum network or a custom Node configuration.\n\t* `EthNetwork`: Supports two networks, `.mainnet` and `.goerli`, representing the main Ethereum network and the Goerli testnet, respectively.\n\t* `CustomNodeConfiguration`: Allows you to pass a custom Ethereum Node configuration, including an RPC URL and an optional chain ID.\n3. **`locale` (optional)**: A `Locale` object, enabling you to customize the language of Magic's modal, email, and confirmation screens.\n\n**Purpose**\n\nThe `Magic()` constructor is responsible for:\n\n1. Initializing the Magic Labs wallet with your API key, ensuring secure and authenticated interactions with the Magic ecosystem.\n2. Configuring the connected Ethereum network or custom Node configuration, facilitating seamless interactions between the wallet and the Ethereum blockchain.\n3. Providing an option to customize the language settings for Magic's UI elements, ensuring a user-friendly experience across different regions and languages.\n\nBy properly initializing the `Magic()` constructor, you can set up a robust and customizable Magic Labs embedded wallet for your iOS application.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/ios#chunk-3", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nIn AppDelegate\n\nAppDelegate\n\nCopy\n\n01\n\nimport\n\nMagicSDK\n\n01\n\nimport\n\nMagicSDK\n\n02\n\nimport\n\nUIKit\n\n02\n\nimport\n\nUIKit\n\n03\n\n03\n\n04\n\n@UIApplicationMain\n\n04\n\n@UIApplicationMain\n\n05\n\nfunc\n\napplication\n\n(\n\n_\n\napplication\n\n:\n\nUIApplication\n\n,\n\ndidFinishLaunchingWithOptions launchOptions\n\n:\n\n[\n\nUIApplication\n\n.\n\nLaunchOptionsKey\n\n:\n\nAny\n\n]\n\n?\n\n)\n\n->\n\nBool\n\n{\n\n05\n\nfunc\n\napplication\n\n(\n\n_\n\napplication\n\n:\n\nUIApplication\n\n,\n\ndidFinishLaunchingWithOptions launchOptions\n\n:\n\n[\n\nUIApplication\n\n.\n\nLaunchOptionsKey\n\n:\n\nAny\n\n]\n\n?\n\n)\n\n->\n\nBool\n\n{\n\n06\n\n06\n\n07\n\n// assign the newly created Magic instance to shared property\n\n07\n\n// assign the newly created Magic instance to shared property\n\n08\n\n// Test key defaults to \"goerli\", live key defaults to \"mainnet\"\n\n08\n\n// Test key defaults to \"goerli\", live key defaults to \"mainnet\"\n\n09\n\nMagic\n\n.\n\nshared\n\n=\n\nMagic\n\n(\n\napiKey\n\n:\n\n\"PUBLISHABLE_API_KEY\"\n\n)\n\n09\n\nMagic\n\n.\n\nshared\n\n=\n\nMagic\n\n(\n\napiKey\n\n:\n\n\"PUBLISHABLE_API_KEY\"\n\n)\n\n10\n\n// Construct with an API key and options:\n\n10\n\n// Construct with an API key and options:\n\n11\n\nMagic\n\n.\n\nshared\n\n=\n\nMagic\n\n(\n\napiKey\n\n:\n\n\"PUBLISHABLE_API_KEY\"\n\n,\n\nethNetwork\n\n:\n\n.\n\ngoerli\n\n)\n\n11\n\nMagic\n\n.\n\nshared\n\n=\n\nMagic\n\n(\n\napiKey\n\n:\n\n\"PUBLISHABLE_API_KEY\"\n\n,\n\nethNetwork\n\n:\n\n.\n\ngoerli\n\n)\n\n12\n\n// Construct with an API key and custom node options:\n\n12\n\n// Construct with an API key and custom node options:\n\n13\n\nlet\n\ncustomNode\n\n=\n\nCustomNodeConfiguration\n\n(\n\nrpcUrl\n\n:\n\n\"https://polgyon-rpc.com\"\n\n,\n\nchainId\n\n:\n\n137\n\n)\n\n13\n\nlet\n\ncustomNode\n\n=\n\nCustomNodeConfiguration\n\n(\n\nrpcUrl\n\n:\n\n\"https://polgyon-rpc.com\"\n\n,\n\nchainId\n\n:\n\n137\n\n)\n\n14\n\nMagic\n\n.\n\nshared\n\n=\n\nMagic\n\n(\n\napiKey\n\n:\n\n\"PUBLISHABLE_API_KEY\"\n\n,\n\ncustomNode\n\n:\n\ncustomNode\n\n)\n\n14\n\nMagic\n\n.\n\nshared\n\n=\n\nMagic\n\n(\n\napiKey\n\n:\n\n\"PUBLISHABLE_API_KEY\"\n\n,\n\ncustomNode\n\n:\n\ncustomNode\n\n)\n\n15\n\n// Construct with an API key and custom locale\n\n15\n\n// Construct with an API key and custom locale\n\n16\n\nMagic\n\n.\n\nshared\n\n=\n\nMagic\n\n(\n\napiKey\n\n:\n\n\"PUBLISHABLE_API_KEY\"\n\n,\n\nlocale\n\n:\n\n\"es\"\n\n)\n\n16\n\nMagic\n\n.\n\nshared\n\n=\n\nMagic\n\n(\n\napiKey\n\n:\n\n\"PUBLISHABLE_API_KEY\"\n\n,\n\nlocale\n\n:\n\n\"es\"\n\n)\n\n17\n\n17\n\n18\n\nreturn\n\ntrue\n\n18\n\nreturn\n\ntrue\n\n19\n\n}\n\n19\n\n}", "explanation": "**Initialization Section Explanation:**\n\nThe Initialization section of the Magic Labs embedded wallet documentation shows how to properly set up the Magic SDK in an iOS application. It provides examples of how to create a Magic instance in the application's `AppDelegate` file.\n\n**Main Purpose:**\n\nThe main purpose of this section is to demonstrate how to initialize the Magic SDK in the application, making it ready for use. It provides examples of how to:\n\n* Create a Magic instance with a default API key\n* Create a Magic instance with a custom Ethereum network (e.g., Goerli)\n* Create a Magic instance with custom node options (e.g., using a custom RPC URL and chain ID)\n* Create a Magic instance with a custom locale\n\n**What's Important:**\n\n* The `PUBLISHABLE_API_KEY` placeholder should be replaced with the actual Magic API key.\n* The `Magic.shared` property is used to access the shared Magic instance.\n* The examples use different initialization options to demonstrate various use cases.\n\n**Example Use Case:**\n\nIn an iOS application, you would typically put this code in the `AppDelegate` file to set up the Magic SDK. When the application launches, this code initializes the Magic instance with the desired options, making it ready for use in the application.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/ios#chunk-4", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nThe Auth Module and its members are accessible on the Magic SDK instance by the auth property.\n\nauth\n\nCopy\n\n01\n\nimport\n\nMagicSDK\n\n01\n\nimport\n\nMagicSDK\n\n02\n\n02\n\n03\n\nlet\n\nmagic\n\n=\n\nMagic\n\n.\n\nshared\n\n03\n\nlet\n\nmagic\n\n=\n\nMagic\n\n.\n\nshared\n\n04\n\n04\n\n05\n\nmagic\n\n.\n\nauth\n\n;\n\n05\n\nmagic\n\n.\n\nauth\n\n;\n\n06\n\nmagic\n\n.\n\nauth\n\n.\n\nloginWithSMS\n\n;\n\n06\n\nmagic\n\n.\n\nauth\n\n.\n\nloginWithSMS\n\n;\n\n07\n\nmagic\n\n.\n\nauth\n\n.\n\nloginWithEmailOTP\n\n;\n\n07\n\nmagic\n\n.\n\nauth\n\n.\n\nloginWithEmailOTP\n\n;\n\n#\n\nloginWithSMS\n\nAuthenticate a user passwordlessly using a one-time code sent to the specified phone number.\n\nList of Currently Blocked Country Codes\n\nList of Currently Blocked Country Codes\n\n#\n\n\u2022 configuration (LoginWithSMSConfiguration):phoneNumber (string): The user phone number to log in withshowUI (boolean): If true, show an out-of-the-box pending UI while the request is in flight\n\nconfiguration\n\n\u2022 phoneNumber (string): The user phone number to log in with\n\n\u2022 showUI (boolean): If true, show an out-of-the-box pending UI while the request is in flight\n\nphoneNumber\n\nshowUI\n\ntrue", "explanation": "**Auth Module: #loginWithSMS - #Arguments**\n\nThe *#loginWithSMS* method is a part of the Auth Module in the Magic Labs embedded wallet documentation. Its primary purpose is to authenticate a user passwordlessly using a one-time code sent to their specified phone number.\n\n**Key Functionality:**\n\nThis method allows users to log in without entering a password. Instead, they receive a one-time code sent to their phone number, which they can input to verify their identity.\n\n**Main Components:**\n\n1. **Configuration (LoginWithSMSConfiguration):**\n   - This is an object that holds the necessary parameters for the login process.\n2. **Phone Number (string):**\n   - This is the user's phone number to which the one-time code will be sent.\n3. **Show UI (boolean):**\n   - This parameter determines whether to display an out-of-the-box pending UI while the request is in flight.\n\n**Usage:**\n\nTo use the *#loginWithSMS* method, you need to:\n\n1. Import the Magic SDK.\n2. Create a Magic SDK instance.\n3. Access the Auth Module on the SDK instance.\n4. Call the *#loginWithSMS* method, providing the necessary configuration parameters.\n\nBy using the *#loginWithSMS* method, you can efficiently authenticate users without relying on traditional password-based authentication methods.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/ios#chunk-5", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 Promise<string | null>: The promise resolves upon authentication request success and rejects with a specific error code if the request fails. The resolved value is a Decentralized ID token with a default 15-minute lifespan.\n\nPromise<string | null>", "explanation": "The '#Returns' section from the Magic Labs embedded wallet documentation is related to the authentication request functionality.\n\nThis section specifies the type of value returned when the authentication request is processed successfully or fails.\n\nHere's a breakdown of what it means:\n\n- **Promise**: A promise is a result object that represents the eventual value after an asynchronous operation completes. In this case, it's used to handle the authentication request outcome.\n\n- **string | null**: This specifies the type of data that is expected to be resolved when the promise is fulfilled. It can be either a string (which represents the Decentralized ID token) or null (if the authentication request fails).\n\n- **Decentralized ID token with a default 15-minute lifespan**: If the authentication request is successful, a Decentralized ID (DID) token is returned, which has a time limit of 15 minutes. This means that the token is only valid for 15 minutes, after which it will need to be re-authenticated.\n\nThe main purpose of this '#Returns' section is to inform developers about the expected output of the authentication request, helping them understand how to handle successful and failed authentication outcomes in their application code.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/ios#chunk-6", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\nimport\n\nMagicSDK\n\n01\n\nimport\n\nMagicSDK\n\n02\n\n02\n\n03\n\nclass\n\nLoginViewController\n\n:\n\nUIViewController\n\n{\n\n03\n\nclass\n\nLoginViewController\n\n:\n\nUIViewController\n\n{\n\n04\n\n04\n\n05\n\n@IBOutlet\n\nweak\n\nvar\n\nphoneNumberInput\n\n:\n\nUITextField\n\n!\n\n05\n\n@IBOutlet\n\nweak\n\nvar\n\nphoneNumberInput\n\n:\n\nUITextField\n\n!\n\n06\n\nlet\n\nmagic\n\n=\n\nMagic\n\n.\n\nshared\n\n06\n\nlet\n\nmagic\n\n=\n\nMagic\n\n.\n\nshared\n\n07\n\n07\n\n08\n\n@IBAction\n\nfunc\n\nlogin\n\n(\n\n)\n\n{\n\n08\n\n@IBAction\n\nfunc\n\nlogin\n\n(\n\n)\n\n{\n\n09\n\nguard\n\nlet\n\nmagic\n\n=\n\nmagic\n\nelse\n\n{\n\nreturn\n\n}\n\n09\n\nguard\n\nlet\n\nmagic\n\n=\n\nmagic\n\nelse\n\n{\n\nreturn\n\n}\n\n10\n\nguard\n\nlet\n\nphoneNumber\n\n=\n\nself\n\n.\n\nphoneNumberInput\n\n.\n\ntext\n\nelse\n\n{\n\nreturn\n\n}\n\n10\n\nguard\n\nlet\n\nphoneNumber\n\n=\n\nself\n\n.\n\nphoneNumberInput\n\n.\n\ntext\n\nelse\n\n{\n\nreturn\n\n}\n\n11\n\n11\n\n12\n\nlet\n\nconfiguration\n\n=\n\nLoginWithSMSConfiguration\n\n(\n\nphoneNumber\n\n:\n\nphoneNumber\n\n,\n\nshowUI\n\n:\n\ntrue\n\n)\n\n12\n\nlet\n\nconfiguration\n\n=\n\nLoginWithSMSConfiguration\n\n(\n\nphoneNumber\n\n:\n\nphoneNumber\n\n,\n\nshowUI\n\n:\n\ntrue\n\n)\n\n13\n\n13\n\n14\n\nmagic\n\n.\n\nauth\n\n.\n\nloginWithSMS\n\n(\n\nconfiguration\n\n,\n\nresponse\n\n:\n\n{\n\nresponse\n\nin\n\n14\n\nmagic\n\n.\n\nauth\n\n.\n\nloginWithSMS\n\n(\n\nconfiguration\n\n,\n\nresponse\n\n:\n\n{\n\nresponse\n\nin\n\n15\n\nguard\n\nlet\n\ntoken\n\n=\n\nresponse\n\n.\n\nresult\n\n15\n\nguard\n\nlet\n\ntoken\n\n=\n\nresponse\n\n.\n\nresult\n\n16\n\nelse\n\n{\n\nreturn\n\nprint\n\n(\n\n\"Error:\"\n\n,\n\nresponse\n\n.\n\nerror\n\n.\n\ndebugDescription\n\n)\n\n}\n\n16\n\nelse\n\n{\n\nreturn\n\nprint\n\n(\n\n\"Error:\"\n\n,\n\nresponse\n\n.\n\nerror\n\n.\n\ndebugDescription\n\n)\n\n}\n\n17\n\nprint\n\n(\n\n\"Result\"\n\n,\n\ntoken\n\n)\n\n17\n\nprint\n\n(\n\n\"Result\"\n\n,\n\ntoken\n\n)\n\n18\n\n}\n\n)\n\n18\n\n}\n\n)\n\n19\n\n}\n\n19\n\n}\n\n20\n\n}\n\n20\n\n}", "explanation": "**Understanding the Example: Closure**\n\nThe provided code snippet is an example of how to use the Magic Labs embedded wallet in an iOS application. Specifically, it demonstrates how to handle the login process using the `.loginWithSMS` method.\n\n**Main Purpose:**\n\nThe main purpose of this example is to show how to set up a login process with SMS verification using the Magic Labs embedded wallet. The code provides a clear and step-by-step guide on how to:\n\n1. Initialize the Magic Labs SDK\n2. Set up a login screen with an input field for the phone number\n3. Use the `.loginWithSMS` method to initiate the login process\n4. Handle the response from the API, including successful login and error cases\n\n**Key Points:**\n\n* The code uses a `LoginViewController` class to handle the login process\n* The `login` method is an action handler that initiates the login process\n* The `.loginWithSMS` method is used to send a login request to the Magic Labs API\n* The response from the API is handled in a closure, where the `result` property contains the authentication token if the login is successful\n\n**Benefits:**\n\nThis example provides a clear and concise guide on how to use the Magic Labs embedded wallet for login authentication. By following this example, developers can easily integrate the Magic Labs wallet into their iOS application and provide a secure and user-friendly login experience.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/ios#chunk-7", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "Copy\n\n01\n\nimport\n\nMagicSDK\n\n01\n\nimport\n\nMagicSDK\n\n02\n\n02\n\n03\n\nclass\n\nLoginViewController\n\n:\n\nUIViewController\n\n{\n\n03\n\nclass\n\nLoginViewController\n\n:\n\nUIViewController\n\n{\n\n04\n\n04\n\n05\n\n@IBOutlet\n\nweak\n\nvar\n\nphoneNumberInput\n\n:\n\nUITextField\n\n!\n\n05\n\n@IBOutlet\n\nweak\n\nvar\n\nphoneNumberInput\n\n:\n\nUITextField\n\n!\n\n06\n\nlet\n\nmagic\n\n=\n\nMagic\n\n.\n\nshared\n\n06\n\nlet\n\nmagic\n\n=\n\nMagic\n\n.\n\nshared\n\n07\n\n07\n\n08\n\n@IBAction\n\nfunc\n\nlogin\n\n(\n\n)\n\n{\n\n08\n\n@IBAction\n\nfunc\n\nlogin\n\n(\n\n)\n\n{\n\n09\n\nguard\n\nlet\n\nmagic\n\n=\n\nmagic\n\nelse\n\n{\n\nreturn\n\n}\n\n09\n\nguard\n\nlet\n\nmagic\n\n=\n\nmagic\n\nelse\n\n{\n\nreturn\n\n}\n\n10\n\n10\n\n11\n\nlet\n\nconfiguration\n\n=\n\nLoginWithSMSConfiguration\n\n(\n\nphoneNumber\n\n:\n\nphoneNumber\n\n)\n\n11\n\nlet\n\nconfiguration\n\n=\n\nLoginWithSMSConfiguration\n\n(\n\nphoneNumber\n\n:\n\nphoneNumber\n\n)\n\n12\n\n12\n\n13\n\nmagic\n\n.\n\nauth\n\n.\n\nloginWithSMS\n\n(\n\nconfiguration\n\n)\n\n.\n\ndone\n\n(\n\n{\n\nresult\n\nin\n\n13\n\nmagic\n\n.\n\nauth\n\n.\n\nloginWithSMS\n\n(\n\nconfiguration\n\n)\n\n.\n\ndone\n\n(\n\n{\n\nresult\n\nin\n\n14\n\nprint\n\n(\n\nresult\n\n)\n\n// DIDToken\n\n14\n\nprint\n\n(\n\nresult\n\n)\n\n// DIDToken\n\n15\n\n}\n\n)\n\n.\n\ncatch\n\n(\n\n{\n\n15\n\n}\n\n)\n\n.\n\ncatch\n\n(\n\n{\n\n16\n\nprint\n\n(\n\nerror\n\n)\n\n// handle Error\n\n16\n\nprint\n\n(\n\nerror\n\n)\n\n// handle Error\n\n17\n\n}\n\n)\n\n17\n\n}\n\n)\n\n18\n\n}\n\n18\n\n}\n\n19\n\n}\n\n19\n\n}", "explanation": "The section titled 'Promise' in the Magic Labs embedded wallet documentation is about handling asynchronous operations, especially those related to Magic authentication and wallet interactions.\n\n**What is it about?**\n\nIn the provided Swift code snippet, it seems there is a part of documentation which is mentioning the promise it appears when the return typed was not shown in the above context.\n\n**Understanding the Problem with the code example**\n\nHowever the provided documentation code context made to provide an issue understanding this concept better the promise inside did get pass this from server to user.\n\n**Given a promise, what is its main purpose?**\n\nIn the context of Magic Labs embedded wallet documentation, a promise is used to handle asynchronous operations, allowing the app to perform tasks without blocking the main thread.\n\n**Main purpose of a promise:**\n\n- A promise is an object that represents the eventual completion (or failure) of an asynchronous operation, usually used to handle tasks that involve API calls, database queries, or other network requests.\n- When a promise is created, it is in a pending state, and when the asynchronous operation completes, the promise either resolves to a value (successful result) or rejects with an error (unsuccessful result).\n- Promises help manage asynchronous code by providing a way to handle outcomes without using nested callback functions or recursion.\n\n**How does it help in async programming?**\n\nIn the context of Magic Labs embedded wallet, promises help handle asynchronous tasks related to user authentication and wallet interactions, ensuring that the app does not freeze or crash while waiting for these operations to complete.\n\n**Key characteristics of a promise:**\n\n- **Pending state**: A promise starts as pending until the asynchronous operation completes.\n- **Resolution or rejection**: Once the asynchronous operation completes, the promise is either resolved to a value (successful result) or rejected with an error (unsuccessful result).\n- **Callback handling**: When creating a promise, you can provide a callback function to handle the outcome (resolution or rejection).\n\n**Example of promise handling in the code:**\n\n```swift\nmagic.auth.loginWithSMS(configuration).done(\n    { result in \n        // Successful result handling\n    }\n).catch(\n    { error in \n        // Error handling\n    }\n)\n```\n\nIn this code snippet, when calling `loginWithSMS`, we create a promise by using the `done` and `catch` methods to handle the asynchronous outcome. If the operation is successful, the `done` block will execute with the result; otherwise, the `catch` block will handle any errors.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/ios#chunk-8", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nloginWithEmailOTP\n\nAuthenticate a user passwordlessly using an email one-time code sent to the specified user's email address.\n\n#\n\n\u2022 configuration (LoginWithEmailOTPConfiguration):email (string): The user email to log in with\n\nconfiguration\n\n\u2022 email (string): The user email to log in with\n\nemail", "explanation": "Based on the provided documentation, here's a clear and concise explanation of the `#loginWithEmailOTP` feature and its main purpose:\n\n**Description:** The `#loginWithEmailOTP` feature allows users to authenticate without using a password. Instead, it sends a one-time code to the user's specified email address for verification.\n\n**Main Purpose:** The primary purpose of `#loginWithEmailOTP` is to provide users with a passwordless login experience using an email-based one-time code verification.\n\n**Key Components:**\n\n1. `User Email`: The email address of the user attempting to log in.\n2. `One-time Code`: A verification code sent to the user's email address, which they must enter to complete the login process.\n\n**How it Works:**\n\n1. The user selects the \"Login with Email OTP\" option.\n2. The `#loginWithEmailOTP` feature sends a one-time code to the user's specified email address.\n3. The user enters the verification code received via email.\n4. If correct, the user is authenticated and logged in to their account.\n\nThis feature enhances user security and simplicity by eliminating the need for a password, relying on the verification code sent via email instead.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/ios#chunk-9", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 Promise<string | null>: The promise resolves upon authentication request success and rejects with a specific error code if the request fails. The resolved value is a Decentralized ID token with a default 15-minute lifespan.\n\nPromise<string | null>", "explanation": "**Returns Section Explanation**\n\nIn the context of the Magic Labs embedded wallet documentation for the iOS SDK, the '#Returns' section is about describing the response format when making an authentication request.\n\n**Main Purpose:**\n\nThe primary purpose of this section is to inform developers about the structure of the response they can expect from the `magicAuth()` method, which makes an authentication request for a Decentralized ID token.\n\n**Key Takeaways:**\n\n- The `magicAuth()` method returns a promise that resolves with a string value upon successful authentication.\n- The resolved value is a Decentralized ID token, which is a standardized identifier that contains user information.\n- If the authentication request fails, the promise rejects with a specific error code.\n- The Decentralized ID token has a default lifespan of 15 minutes, meaning you need to make a new authentication request after 15 minutes to obtain a new token.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/ios#chunk-10", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\nimport\n\nMagicSDK\n\n01\n\nimport\n\nMagicSDK\n\n02\n\n02\n\n03\n\nclass\n\nLoginViewController\n\n:\n\nUIViewController\n\n{\n\n03\n\nclass\n\nLoginViewController\n\n:\n\nUIViewController\n\n{\n\n04\n\n04\n\n05\n\n@IBOutlet\n\nweak\n\nvar\n\nemailInput\n\n:\n\nUITextField\n\n!\n\n05\n\n@IBOutlet\n\nweak\n\nvar\n\nemailInput\n\n:\n\nUITextField\n\n!\n\n06\n\nlet\n\nmagic\n\n=\n\nMagic\n\n.\n\nshared\n\n06\n\nlet\n\nmagic\n\n=\n\nMagic\n\n.\n\nshared\n\n07\n\n07\n\n08\n\n@IBAction\n\nfunc\n\nlogin\n\n(\n\n)\n\n{\n\n08\n\n@IBAction\n\nfunc\n\nlogin\n\n(\n\n)\n\n{\n\n09\n\nguard\n\nlet\n\nmagic\n\n=\n\nmagic\n\nelse\n\n{\n\nreturn\n\n}\n\n09\n\nguard\n\nlet\n\nmagic\n\n=\n\nmagic\n\nelse\n\n{\n\nreturn\n\n}\n\n10\n\nguard\n\nlet\n\nemail\n\n=\n\nself\n\n.\n\nemailInput\n\n.\n\ntext\n\nelse\n\n{\n\nreturn\n\n}\n\n10\n\nguard\n\nlet\n\nemail\n\n=\n\nself\n\n.\n\nemailInput\n\n.\n\ntext\n\nelse\n\n{\n\nreturn\n\n}\n\n11\n\n11\n\n12\n\nlet\n\nconfiguration\n\n=\n\nLoginWithEmailOTPConfiguration\n\n(\n\nemail\n\n:\n\nemail\n\n)\n\n12\n\nlet\n\nconfiguration\n\n=\n\nLoginWithEmailOTPConfiguration\n\n(\n\nemail\n\n:\n\nemail\n\n)\n\n13\n\n13\n\n14\n\nmagic\n\n.\n\nauth\n\n.\n\nloginWithEmailOTP\n\n(\n\nconfiguration\n\n,\n\nresponse\n\n:\n\n{\n\nresponse\n\nin\n\n14\n\nmagic\n\n.\n\nauth\n\n.\n\nloginWithEmailOTP\n\n(\n\nconfiguration\n\n,\n\nresponse\n\n:\n\n{\n\nresponse\n\nin\n\n15\n\nguard\n\nlet\n\ntoken\n\n=\n\nresponse\n\n.\n\nresult\n\n15\n\nguard\n\nlet\n\ntoken\n\n=\n\nresponse\n\n.\n\nresult\n\n16\n\nelse\n\n{\n\nreturn\n\nprint\n\n(\n\n\"Error:\"\n\n,\n\nresponse\n\n.\n\nerror\n\n.\n\ndebugDescription\n\n)\n\n}\n\n16\n\nelse\n\n{\n\nreturn\n\nprint\n\n(\n\n\"Error:\"\n\n,\n\nresponse\n\n.\n\nerror\n\n.\n\ndebugDescription\n\n)\n\n}\n\n17\n\nprint\n\n(\n\n\"Result\"\n\n,\n\ntoken\n\n)\n\n17\n\nprint\n\n(\n\n\"Result\"\n\n,\n\ntoken\n\n)\n\n18\n\n}\n\n)\n\n18\n\n}\n\n)\n\n19\n\n}\n\n19\n\n}\n\n20\n\n}\n\n20\n\n}", "explanation": "**Explanation of the '#Example - Closure' Documentation**\n\nThe given documentation section is a code example in Swift for integrating the Magic Labs embedded wallet into an iOS application. This example demonstrates how to use the Magic SDK to perform a login with email and OTP authentication using a closure.\n\n**Main Purpose:**\n\nThe main purpose of this code is to illustrate the basic steps involved in integrating the Magic Labs embedded wallet into an iOS application, including:\n\n1. Importing the Magic SDK\n2. Creating a login view controller with email input\n3. Handling the login button press\n4. Authenticating the user using email and OTP\n5. Handling the authentication response using a closure\n\n**Key Components:**\n\n1. `LoginViewController`: This is the view controller responsible for handling the login process.\n2. `Magic.shared`: This is the shared instance of the Magic SDK, used to perform authentication.\n3. `loginWithEmailOTP(configuration:response:)`: This is the method used to authenticate the user using email and OTP.\n4. `LoginWithEmailOTPConfiguration`: This is the configuration object used to set up the authentication process.\n5. `response(in:)`: This is the closure used to handle the authentication response.\n\n**Example Use Case:**\n\nThis example can be used as a starting point for implementing the Magic Labs embedded wallet in an iOS application. It demonstrates how to perform basic authentication using email and OTP, and how to handle the authentication response using a closure.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/ios#chunk-11", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "Copy\n\n01\n\nimport\n\nMagicSDK\n\n01\n\nimport\n\nMagicSDK\n\n02\n\n02\n\n03\n\nclass\n\nLoginViewController\n\n:\n\nUIViewController\n\n{\n\n03\n\nclass\n\nLoginViewController\n\n:\n\nUIViewController\n\n{\n\n04\n\n04\n\n05\n\n@IBOutlet\n\nweak\n\nvar\n\nemailInput\n\n:\n\nUITextField\n\n!\n\n05\n\n@IBOutlet\n\nweak\n\nvar\n\nemailInput\n\n:\n\nUITextField\n\n!\n\n06\n\nlet\n\nmagic\n\n=\n\nMagic\n\n.\n\nshared\n\n06\n\nlet\n\nmagic\n\n=\n\nMagic\n\n.\n\nshared\n\n07\n\n07\n\n08\n\n@IBAction\n\nfunc\n\nlogin\n\n(\n\n)\n\n{\n\n08\n\n@IBAction\n\nfunc\n\nlogin\n\n(\n\n)\n\n{\n\n09\n\nguard\n\nlet\n\nmagic\n\n=\n\nmagic\n\nelse\n\n{\n\nreturn\n\n}\n\n09\n\nguard\n\nlet\n\nmagic\n\n=\n\nmagic\n\nelse\n\n{\n\nreturn\n\n}\n\n10\n\n10\n\n11\n\nlet\n\nconfiguration\n\n=\n\nLoginWithEmailOTPConfiguration\n\n(\n\nemail\n\n:\n\nself\n\n.\n\nemailInput\n\n.\n\ntext\n\n!\n\n)\n\n11\n\nlet\n\nconfiguration\n\n=\n\nLoginWithEmailOTPConfiguration\n\n(\n\nemail\n\n:\n\nself\n\n.\n\nemailInput\n\n.\n\ntext\n\n!\n\n)\n\n12\n\n12\n\n13\n\nmagic\n\n.\n\nauth\n\n.\n\nloginWithEmailOTP\n\n(\n\nconfiguration\n\n)\n\n.\n\ndone\n\n(\n\n{\n\nresult\n\nin\n\n13\n\nmagic\n\n.\n\nauth\n\n.\n\nloginWithEmailOTP\n\n(\n\nconfiguration\n\n)\n\n.\n\ndone\n\n(\n\n{\n\nresult\n\nin\n\n14\n\nprint\n\n(\n\nresult\n\n)\n\n// DIDToken\n\n14\n\nprint\n\n(\n\nresult\n\n)\n\n// DIDToken\n\n15\n\n}\n\n)\n\n.\n\ncatch\n\n(\n\n{\n\n15\n\n}\n\n)\n\n.\n\ncatch\n\n(\n\n{\n\n16\n\nprint\n\n(\n\nerror\n\n)\n\n// handle Error\n\n16\n\nprint\n\n(\n\nerror\n\n)\n\n// handle Error\n\n17\n\n}\n\n)\n\n17\n\n}\n\n)\n\n18\n\n}\n\n18\n\n}\n\n19\n\n}\n\n19\n\n}", "explanation": "**Understanding the Promise Concept in Magic Labs Embedded Wallet Documentation**\n\nThe provided documentation section focuses on the `Promise` aspect of the Magic Labs embedded wallet SDK for iOS. A **Promise** is a fundamental concept in programming that represents an operation that hasn't completed yet, but will produce a value at some point in the future.\n\n**Purpose of Promise in Magic Labs Embedded Wallet**\n\nIn the context of the Magic Labs embedded wallet SDK, a Promise is used to handle asynchronous operations, such as authenticating a user or sending a transaction. When a user initiates an action like logging in, the Magic SDK returns a Promise that represents the outcome of the operation.\n\n**Key Features of Promise in Magic Labs Embedded Wallet**\n\n1. **Asynchronous Operation**: A Promise allows the operation to be performed in the background, without blocking the main thread.\n2. **Event-driven Programming**: The callback function passed to the Promise is executed when the operation is complete, allowing for event-driven programming.\n3. **Error Handling**: The `.catch` block in the code snippet demonstrates how to handle errors that may occur during the operation.\n\n**Importance of Promise in Magic Labs Embedded Wallet**\n\nThe Promise concept enables the Magic Labs embedded wallet SDK to handle complex and time-consuming operations, such as authentication and transactions, in an efficient and non-blocking manner. This allows developers to write more robust and scalable code that can handle various use cases and user interactions.\n\nIn summary, the Promise concept in Magic Labs embedded wallet documentation is essential for handling asynchronous operations, enabling event-driven programming, and facilitating error handling in the SDK.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/ios#chunk-12", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nThe Wallet Module and its members are accessible on the Magic SDK instance by the wallet property.\n\nwallet\n\nCopy\n\n01\n\nimport\n\nMagicSDK\n\n01\n\nimport\n\nMagicSDK\n\n02\n\n02\n\n03\n\nlet\n\nmagic\n\n=\n\nMagic\n\n.\n\nshared\n\n03\n\nlet\n\nmagic\n\n=\n\nMagic\n\n.\n\nshared\n\n04\n\n04\n\n05\n\nmagic\n\n.\n\nwallet\n\n05\n\nmagic\n\n.\n\nwallet\n\n06\n\nmagic\n\n.\n\nwallet\n\n.\n\nconnectWithUI\n\n06\n\nmagic\n\n.\n\nwallet\n\n.\n\nconnectWithUI\n\n07\n\nmagic\n\n.\n\nwallet\n\n.\n\nshowUI\n\n07\n\nmagic\n\n.\n\nwallet\n\n.\n\nshowUI\n\n08\n\nmagic\n\n.\n\nwallet\n\n.\n\nrequestUserInfoWithUI\n\n08\n\nmagic\n\n.\n\nwallet\n\n.\n\nrequestUserInfoWithUI\n\n#\n\nconnectWithUI\n\nRenders a simple login form UI to collect the user's email address and authenticate them passwordlessly using a one-time passcode (OTP) sent to their email address they input.\n\n#\n\n\u2022 None", "explanation": "## #Wallet Module - #connectWithUI - #Arguments\n\n**Overview:**\nThe `connectWithUI` method is a part of the Wallet Module in Magic Labs' embedded wallet, which allows for passwordless authentication. It renders a simple login form UI where users can input their email address to receive a one-time passcode (OTP) sent to the provided email address. This method enables authentication without the need for passwords.\n\n**Main Purpose:**\nThe primary purpose of `connectWithUI` is to facilitate a seamless user experience by collecting the user's email address and sending a one-time passcode (OTP) to authenticate them passwordlessly.\n\n**Key Characteristics:**\n\n- **Simple Login Form UI:** The method renders a basic login form that requests the user's email address.\n- **One-Time Passcode (OTP) Authentication:** After the user enters their email address, Magic Labs sends a one-time passcode to the provided email address, which is used for authentication.\n- **Passwordless Authentication:** The `connectWithUI` method allows for authentication without the need for passwords.\n\n**Key Benefits:**\n- **Seamless User Experience:** The method provides a smooth and intuitive authentication process.\n- **Enhanced Security:** Passwordless authentication reduces the risk of password-related vulnerabilities.\n\nIn summary, the `connectWithUI` method is a crucial component of Magic Labs' Wallet Module that offers a secure and user-friendly experience for passwordless authentication.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/ios#chunk-13", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 A promiEvent which returns an String[] when resolved: An array of user accounts that are connected, with the first element being the current public address of the user. You can read more on PromiEvents here.\n\npromiEvent\n\nString[]\n\nhere", "explanation": "This documentation section is about the `#Returns` method of a function in the Magic Labs embedded wallet iOS SDK.\n\n**What it does:**\n\nWhen called, it returns a promise that is resolved with an array of strings. This array contains the public addresses of all connected user accounts, with the first element being the current public address of the user.\n\n**Main Purpose:**\n\nThe main purpose of this method is to provide an easy way to retrieve the connected user accounts and their corresponding public addresses. This can be useful for applications that need to authenticate users or require access to their wallet information.\n\n**Key points to note:**\n\n- The method returns a promise, which means it is an asynchronous operation.\n- The promise is resolved with an array of strings, where each string represents a public address.\n- The first element of the array is the current public address of the user.\n- The method is described as a `promiEvent`, which is a type of promise from the Ethereum library that provides methods for working with asynchronous operations.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/ios#chunk-14", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\nimport\n\nMagicSDK\n\n01\n\nimport\n\nMagicSDK\n\n02\n\n02\n\n03\n\nclass\n\nMagicViewController\n\n:\n\nUIViewController\n\n{\n\n03\n\nclass\n\nMagicViewController\n\n:\n\nUIViewController\n\n{\n\n04\n\n04\n\n05\n\nlet\n\nmagic\n\n=\n\nMagic\n\n.\n\nshared\n\n05\n\nlet\n\nmagic\n\n=\n\nMagic\n\n.\n\nshared\n\n06\n\n06\n\n07\n\nfunc\n\nlogout\n\n(\n\n)\n\n{\n\n07\n\nfunc\n\nlogout\n\n(\n\n)\n\n{\n\n08\n\nguard\n\nlet\n\nmagic\n\n=\n\nmagic\n\nelse\n\n{\n\nreturn\n\n}\n\n08\n\nguard\n\nlet\n\nmagic\n\n=\n\nmagic\n\nelse\n\n{\n\nreturn\n\n}\n\n09\n\n09\n\n10\n\n// Assuming user is logged in\n\n10\n\n// Assuming user is logged in\n\n11\n\nmagic\n\n.\n\nwallet\n\n.\n\nconnectWithUI\n\n(\n\nresponse\n\n:\n\n{\n\nresponse\n\nin\n\n11\n\nmagic\n\n.\n\nwallet\n\n.\n\nconnectWithUI\n\n(\n\nresponse\n\n:\n\n{\n\nresponse\n\nin\n\n12\n\nguard\n\nlet\n\nresult\n\n=\n\nresponse\n\n.\n\nresult\n\n12\n\nguard\n\nlet\n\nresult\n\n=\n\nresponse\n\n.\n\nresult\n\n13\n\nelse\n\n{\n\nreturn\n\nprint\n\n(\n\n\"Error:\"\n\n,\n\nresponse\n\n.\n\nerror\n\n.\n\ndebugDescription\n\n)\n\n}\n\n13\n\nelse\n\n{\n\nreturn\n\nprint\n\n(\n\n\"Error:\"\n\n,\n\nresponse\n\n.\n\nerror\n\n.\n\ndebugDescription\n\n)\n\n}\n\n14\n\nprint\n\n(\n\n\"Result\"\n\n,\n\nresult\n\n)\n\n14\n\nprint\n\n(\n\n\"Result\"\n\n,\n\nresult\n\n)\n\n15\n\n}\n\n)\n\n15\n\n}\n\n)\n\n16\n\n}\n\n16\n\n}\n\n17\n\n}\n\n17\n\n}", "explanation": "**#Example Documentation Section Overview:**\n\nThe provided documentation section is titled '#Example' and appears to be an implementation example using the Magic Labs embedded wallet SDK for iOS. This example is written in Swift programming language and demonstrates how to perform basic login and logout functionality.\n\n**Main Purpose:**\n\nThe main purpose of this section is to provide a code example that showcases how to use the Magic Labs embedded wallet SDK for iOS to connect, disconnect, and handle login and logout scenarios. This section is intended for developers who want to integrate the Magic Labs embedded wallet SDK into their own iOS applications.\n\n**Key Features Demonstrated:**\n\n1.  **Login/Logout Functionality:** The example code demonstrates how to initiate a login or logout process, including handling errors that may occur during these events.\n2.  **Connecting to the Wallet:** The `connectWithUI` method is called to establish a connection between the application and the user's wallet.\n3.  **Error Handling:** The code shows how to handle potential errors that may occur during the login or logout process, printing error messages for debugging purposes.\n4.  **Result Handling:** The example code also demonstrates how to handle successful results from the `connectWithUI` method, printing the outcome to the console.\n\nThis #Example section serves as a starting point for developers to incorporate the Magic Labs embedded wallet SDK into their iOS applications, ensuring a smooth and secure user experience.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/ios#chunk-15", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nshowUI\n\nDisplays the fully navigable wallet to the user that adheres to the toggled configurations on your developer dashboard\u2019s Widget UI tab. \u2060 \u2060This is only supported for users who login with email or Google and not third party wallets such as metamask. User must be signed in for this method to return or else it will throw an error.\n\nnavigable wallet\n\n#\n\n\u2022 None", "explanation": "**Section Summary: `#showUI - #Arguments`**\n\nThe `#showUI - #Arguments` section in the Magic Labs embedded wallet documentation explains the `showUI` method. This method displays a fully navigable wallet UI to the user, with customizable configurations set on the developer dashboard's Widget UI tab.\n\n**Main Purpose:**\n\nThe main purpose of the `showUI` method is to provide a convenient and user-friendly way for users to interact with their Magic wallet on the device, while adhering to the custom settings defined on the developer dashboard.\n\n**Key Points:**\n\n* Supported only for users who log in with email or Google, not third-party wallets like MetaMask.\n* User must be signed in for the method to return; otherwise, it will throw an error.\n* The method returns a fully navigable wallet UI that is customizable via the developer dashboard's Widget UI tab.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/ios#chunk-16", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 Promise which resolves when the user closes the window\n\nPromise", "explanation": "In the context of Magic Labs' embedded wallet documentation for iOS, the '#Returns' section describes what the function or method in question returns.\n\nIn this specific case, the section indicates that the function or method returns:\n\n**A Promise which resolves when the user closes the window**\n\nMain purpose:\nThe main purpose of this return value is to notify other parts of the code when the user closes the embedded wallet window. This resolved promise can then be used to trigger certain actions, manage state changes, or perform other relevant tasks in response to the wallet window closure.\n\nBy understanding what to expect as a return value, developers can write more robust and event-driven code, making it easier to maintain and integrate the Magic Labs embedded wallet into their application.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/ios#chunk-17", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\nimport\n\nMagicSDK\n\n01\n\nimport\n\nMagicSDK\n\n02\n\n02\n\n03\n\nclass\n\nMagicViewController\n\n:\n\nUIViewController\n\n{\n\n03\n\nclass\n\nMagicViewController\n\n:\n\nUIViewController\n\n{\n\n04\n\n04\n\n05\n\nlet\n\nmagic\n\n=\n\nMagic\n\n.\n\nshared\n\n05\n\nlet\n\nmagic\n\n=\n\nMagic\n\n.\n\nshared\n\n06\n\n06\n\n07\n\nfunc\n\nlogout\n\n(\n\n)\n\n{\n\n07\n\nfunc\n\nlogout\n\n(\n\n)\n\n{\n\n08\n\nguard\n\nlet\n\nmagic\n\n=\n\nmagic\n\nelse\n\n{\n\nreturn\n\n}\n\n08\n\nguard\n\nlet\n\nmagic\n\n=\n\nmagic\n\nelse\n\n{\n\nreturn\n\n}\n\n09\n\n09\n\n10\n\n// Assuming user is logged in\n\n10\n\n// Assuming user is logged in\n\n11\n\nmagic\n\n.\n\nwallet\n\n.\n\nshowUI\n\n(\n\nresponse\n\n:\n\n{\n\nresponse\n\nin\n\n11\n\nmagic\n\n.\n\nwallet\n\n.\n\nshowUI\n\n(\n\nresponse\n\n:\n\n{\n\nresponse\n\nin\n\n12\n\nguard\n\nlet\n\nresult\n\n=\n\nresponse\n\n.\n\nresult\n\n12\n\nguard\n\nlet\n\nresult\n\n=\n\nresponse\n\n.\n\nresult\n\n13\n\nelse\n\n{\n\nreturn\n\nprint\n\n(\n\n\"Error:\"\n\n,\n\nresponse\n\n.\n\nerror\n\n.\n\ndebugDescription\n\n)\n\n}\n\n13\n\nelse\n\n{\n\nreturn\n\nprint\n\n(\n\n\"Error:\"\n\n,\n\nresponse\n\n.\n\nerror\n\n.\n\ndebugDescription\n\n)\n\n}\n\n14\n\nprint\n\n(\n\n\"Result\"\n\n,\n\nresult\n\n)\n\n14\n\nprint\n\n(\n\n\"Result\"\n\n,\n\nresult\n\n)\n\n15\n\n}\n\n)\n\n15\n\n}\n\n)\n\n16\n\n}\n\n16\n\n}\n\n17\n\n}\n\n17\n\n}", "explanation": "**Example Overview**\n\nThe provided documentation snippet is an example code for implementing the Magic Labs embedded wallet in an iOS application using the Magic SDK. The example demonstrates how to create a `MagicViewController` class that handles user login and wallet interaction.\n\n**Main Purpose**\n\nThe main purpose of this example is to showcase how to:\n\n1. Initialize the Magic SDK instance.\n2. Handle user login and logout functionalities.\n3. Display the Magic Labs embedded wallet UI.\n4. Handle wallet UI responses and errors.\n\n**Key Functions and Features**\n\n1. `MagicViewController` class: A custom `UIViewController` subclass that manages Magic Labs embedded wallet functionality.\n2. `magic = Magic.shared`: Initializes the Magic SDK instance.\n3. `wallet.showUI(response:)`: Displays the Magic Labs embedded wallet UI and handles responses.\n4. `logout()`: Logs out the user and resets the Magic SDK instance.\n\n**Code Structure**\n\nThe example code consists of a `MagicViewController` class with two instances of the same code, which is likely a naming conflict. The code can be condensed into a single instance to improve readability and maintainability. The key functions and features are implemented within the `logout()` and `wallet.showUI(response:)` methods.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/ios#chunk-18", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nrequestUserInfoWithUI\n\nDisplays the wallet widget within an iframe that prompts the user to consent to sharing information with the requesting dApp with OpenID profile scopes. Currently, the only profile scope that can be requested is a verified email. Collecting a verified email address from third-party wallet users (MetaMask, Coinbase Wallet, etc.) is a premium feature but included in the free trial period (see pricing). User must be signed in for this method to return or else it will throw an error.\n\npricing\n\n#\n\n\u2022 configuration (RequestUserInfoWithUIConfiguration):email (str): The user email to log in with\n\nconfiguration\n\n\u2022 email (str): The user email to log in with\n\nemail", "explanation": "**#RequestUserInfoWithUI - Displaying the Wallet Widget for User Consent**\n\nThe `#requestUserInfoWithUI` method displays a wallet widget within an iframe that prompts the user to consent to sharing their information with the requesting decentralized application (dApp). This includes the option to share a verified email address. \n\n**Main Purpose:**\nThe main purpose of `#requestUserInfoWithUI` is to facilitate user consent for their information to be shared with a dApp. It's a crucial step to integrate user authentication and verification within a decentralized application.\n\n**Key Points:**\n\n1. **Consent Prompting**: The method prompts users to consent to sharing their information, which includes a verified email address.\n2. **User Inheritance**: Users must be signed in for this method to return data; otherwise, it will throw an error.\n3. **Premium Feature**: Collecting a verified email from third-party wallets (like MetaMask or Coinbase Wallet) is a premium feature but included in the free trial period.\n4. **Customization**: Configuration settings (such as the email to log in with) are available to customize the user experience.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/ios#chunk-19", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 Promise which resolves when the user closes the window\n\nPromise", "explanation": "Based on the provided documentation, the '#Returns' section in the iOS SDK documentation is informing developers about the return value of the function.\n\nIn this case, the function is expected to return a **Promise** that resolves when the user closes the **Magic Labs wallet window**.\n\nIn simpler terms, when a user closes the Magic Labs wallet window (which is integrated into the iOS app), the function will return a promise that has been resolved. This means the function's execution is complete and it has been successfully closed.\n\nThe main purpose of this documentation section is to **inform developers about the outcome of the function** and what they can expect from it, which is a resolved promise when the user closes the wallet window.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/ios#chunk-20", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\nimport\n\nMagicSDK\n\n01\n\nimport\n\nMagicSDK\n\n02\n\n02\n\n03\n\nclass\n\nMagicViewController\n\n:\n\nUIViewController\n\n{\n\n03\n\nclass\n\nMagicViewController\n\n:\n\nUIViewController\n\n{\n\n04\n\n04\n\n05\n\nlet\n\nmagic\n\n=\n\nMagic\n\n.\n\nshared\n\n05\n\nlet\n\nmagic\n\n=\n\nMagic\n\n.\n\nshared\n\n06\n\n06\n\n07\n\nfunc\n\nlogout\n\n(\n\n)\n\n{\n\n07\n\nfunc\n\nlogout\n\n(\n\n)\n\n{\n\n08\n\nguard\n\nlet\n\nmagic\n\n=\n\nmagic\n\nelse\n\n{\n\nreturn\n\n}\n\n08\n\nguard\n\nlet\n\nmagic\n\n=\n\nmagic\n\nelse\n\n{\n\nreturn\n\n}\n\n09\n\n09\n\n10\n\n// Assuming user is logged in\n\n10\n\n// Assuming user is logged in\n\n11\n\nlet\n\nconfig\n\n=\n\nRequestUserInfoWithUIConfiguration\n\n(\n\nscope\n\n=\n\nWalletUserInfoScope\n\n(\n\nemail\n\n=\n\n\"user_email@example.com\"\n\n)\n\n)\n\n11\n\nlet\n\nconfig\n\n=\n\nRequestUserInfoWithUIConfiguration\n\n(\n\nscope\n\n=\n\nWalletUserInfoScope\n\n(\n\nemail\n\n=\n\n\"user_email@example.com\"\n\n)\n\n)\n\n12\n\n12\n\n13\n\nmagic\n\n.\n\nwallet\n\n.\n\nrequestUserInfoWithUI\n\n(\n\nconfiguration\n\n,\n\nresponse\n\n:\n\n{\n\nresponse\n\nin\n\n13\n\nmagic\n\n.\n\nwallet\n\n.\n\nrequestUserInfoWithUI\n\n(\n\nconfiguration\n\n,\n\nresponse\n\n:\n\n{\n\nresponse\n\nin\n\n14\n\nguard\n\nlet\n\nresult\n\n=\n\nresponse\n\n.\n\nresult\n\n14\n\nguard\n\nlet\n\nresult\n\n=\n\nresponse\n\n.\n\nresult\n\n15\n\nelse\n\n{\n\nreturn\n\nprint\n\n(\n\n\"Error:\"\n\n,\n\nresponse\n\n.\n\nerror\n\n.\n\ndebugDescription\n\n)\n\n}\n\n15\n\nelse\n\n{\n\nreturn\n\nprint\n\n(\n\n\"Error:\"\n\n,\n\nresponse\n\n.\n\nerror\n\n.\n\ndebugDescription\n\n)\n\n}\n\n16\n\nprint\n\n(\n\n\"Result\"\n\n,\n\nresult\n\n)\n\n16\n\nprint\n\n(\n\n\"Result\"\n\n,\n\nresult\n\n)\n\n17\n\n}\n\n)\n\n17\n\n}\n\n)\n\n18\n\n}\n\n18\n\n}\n\n19\n\n}\n\n19\n\n}", "explanation": "**Example Explanation and Main Purpose**\n\nThe documentation section is an example code snippet written in Swift, a programming language used for iOS app development. The code demonstrates how to use the Magic SDK to request user information with a UI configuration on the client-side, specifically in an iOS context.\n\n**Main Purpose:**\n\nThe purpose of this example is to showcase how a Magic SDK client can:\n\n1. Log out the user using the `logout()` function.\n2. Request user information using the `requestUserInfoWithUI()` function with a specified configuration, including email scope.\n3. Handle the response from the Magic server and print the result, including any potential errors.\n\n**Code Structure:**\n\nThe example code defines a `MagicViewController` class that inherits from `UIViewController`. It includes two main functions: `logout()` and `requestUserInfoWithUI()`. These functions demonstrate the basic usage of the Magic SDK's authentication and user information retrieval features.\n\n**Key Takeaways:**\n\nBy following this example, developers can integrate the Magic SDK into their iOS app to provide user authentication, including retrieving user information with specific scopes, such as email. This integration enables developers to build secure and decentralized authentication flows.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/ios#chunk-21", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nThe User Module and its members are accessible on the Magic SDK instance by the user property.\n\nuser\n\nCopy\n\n01\n\nimport\n\nMagicSDK\n\n01\n\nimport\n\nMagicSDK\n\n02\n\n02\n\n03\n\nlet\n\nmagic\n\n=\n\nMagic\n\n.\n\nshared\n\n03\n\nlet\n\nmagic\n\n=\n\nMagic\n\n.\n\nshared\n\n04\n\n04\n\n05\n\nmagic\n\n.\n\nuser\n\n05\n\nmagic\n\n.\n\nuser\n\n06\n\nmagic\n\n.\n\nuser\n\n.\n\nupdateEmail\n\n06\n\nmagic\n\n.\n\nuser\n\n.\n\nupdateEmail\n\n07\n\nmagic\n\n.\n\nuser\n\n.\n\ngetIdToken\n\n07\n\nmagic\n\n.\n\nuser\n\n.\n\ngetIdToken\n\n08\n\nmagic\n\n.\n\nuser\n\n.\n\ngenerateIdToken\n\n08\n\nmagic\n\n.\n\nuser\n\n.\n\ngenerateIdToken\n\n09\n\nmagic\n\n.\n\nuser\n\n.\n\ngetInfo\n\n09\n\nmagic\n\n.\n\nuser\n\n.\n\ngetInfo\n\n10\n\nmagic\n\n.\n\nuser\n\n.\n\nisLoggedIn\n\n10\n\nmagic\n\n.\n\nuser\n\n.\n\nisLoggedIn\n\n11\n\nmagic\n\n.\n\nuser\n\n.\n\nlogout\n\n11\n\nmagic\n\n.\n\nuser\n\n.\n\nlogout\n\n12\n\nmagic\n\n.\n\nuser\n\n.\n\nshowSettings\n\n12\n\nmagic\n\n.\n\nuser\n\n.\n\nshowSettings\n\n13\n\nmagic\n\n.\n\nuser\n\n.\n\nupdatePhoneNumber\n\n13\n\nmagic\n\n.\n\nuser\n\n.\n\nupdatePhoneNumber\n\n14\n\nmagic\n\n.\n\nuser\n\n.\n\nrecoverAccount\n\n14\n\nmagic\n\n.\n\nuser\n\n.\n\nrecoverAccount\n\n#\n\nupdateEmail\n\nInitiates the update email flow that allows a user to change to a new email.\n\n#\n\n\u2022 configuration (UpdateEmailConfiguration):email (string): The user email to update withshowUI (boolean): If true, show an out-of-the-box pending UI while the request is in flight\n\nconfiguration\n\n\u2022 email (string): The user email to update with\n\n\u2022 showUI (boolean): If true, show an out-of-the-box pending UI while the request is in flight\n\nemail\n\nshowUI\n\ntrue", "explanation": "**User Module - updateEmail - Arguments**\n\nThis documentation section explains the `updateEmail` method within the User Module of the Magic Labs embedded wallet.\n\n**Main Purpose:**\n\nThe main purpose of `updateEmail` is to initiate a flow that allows a user to change their email address.\n\n**How it Works:**\n\nTo update a user's email, the method takes in two arguments:\n\n1. **`email`** (string): The new email address to update with.\n2. **`showUI`** (boolean): An optional parameter that determines whether to display an out-of-the-box pending UI while the request is being processed. If set to `true`, the UI will be shown.\n\n**Example Usage:**\n\nTo update a user's email using the `updateEmail` method, you would call the method on the Magic SDK instance, passing in the new email address and the desired UI behavior:\n```swift\nlet magic = Magic.shared\nmagic.user.updateEmail(\n  configuration: UpdateEmailConfiguration(email: \"newemail@example.com\", showUI: true)\n)\n```\nIn this example, the user's email address will be updated to `newemail@example.com` and an out-of-the-box pending UI will be shown while the request is being processed.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/ios#chunk-22", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 Promise<Bool>: The promise resolves with a true boolean value if update email is successful and rejects with a specific error code if the request fails\n\nPromise<Bool>", "explanation": "Here's a clear and concise explanation of the '#Returns' documentation section from the provided link:\n\n**Returns Section Purpose:**\n\nThe '#Returns' section in the provided documentation explains the expected outcome of an API request.\n\n**What it contains:**\n\n* A promise whose resolution will be a boolean value.\n* If the update email request is successful, the promise resolves with a boolean value of `true`.\n* If the request fails, the promise rejects with a specific error code.\n\n**Key Takeaway:**\n\nThis section helps developers understand how to handle the outcome of a specific API request, providing them with a clear understanding of what to expect when calling the `update email` function.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/ios#chunk-23", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\nimport\n\nMagicSDK\n\n01\n\nimport\n\nMagicSDK\n\n02\n\n02\n\n03\n\nclass\n\nMagicViewController\n\n:\n\nUIViewController\n\n{\n\n03\n\nclass\n\nMagicViewController\n\n:\n\nUIViewController\n\n{\n\n04\n\n04\n\n05\n\nlet\n\nmagic\n\n=\n\nMagic\n\n.\n\nshared\n\n05\n\nlet\n\nmagic\n\n=\n\nMagic\n\n.\n\nshared\n\n06\n\n06\n\n07\n\n// Initiates the flow to update a user's current email to a new one.\n\n07\n\n// Initiates the flow to update a user's current email to a new one.\n\n08\n\nfunc\n\nupdateEmail\n\n(\n\n)\n\n{\n\n08\n\nfunc\n\nupdateEmail\n\n(\n\n)\n\n{\n\n09\n\n09\n\n10\n\nguard\n\nlet\n\nmagic\n\n=\n\nmagic\n\nelse\n\n{\n\nreturn\n\n}\n\n10\n\nguard\n\nlet\n\nmagic\n\n=\n\nmagic\n\nelse\n\n{\n\nreturn\n\n}\n\n11\n\n11\n\n12\n\n// Assuming user is logged in\n\n12\n\n// Assuming user is logged in\n\n13\n\nlet\n\nconfiguration\n\n=\n\nUpdateEmailConfiguration\n\n(\n\nemail\n\n:\n\n\"new_user_email@example.com\"\n\n,\n\nshowUI\n\n:\n\ntrue\n\n)\n\n13\n\nlet\n\nconfiguration\n\n=\n\nUpdateEmailConfiguration\n\n(\n\nemail\n\n:\n\n\"new_user_email@example.com\"\n\n,\n\nshowUI\n\n:\n\ntrue\n\n)\n\n14\n\nmagic\n\n.\n\nuser\n\n.\n\nupdateEmail\n\n(\n\nconfiguration\n\n,\n\nresponse\n\n:\n\n{\n\nresponse\n\nin\n\n14\n\nmagic\n\n.\n\nuser\n\n.\n\nupdateEmail\n\n(\n\nconfiguration\n\n,\n\nresponse\n\n:\n\n{\n\nresponse\n\nin\n\n15\n\nguard\n\nlet\n\nresult\n\n=\n\nresponse\n\n.\n\nresult\n\n15\n\nguard\n\nlet\n\nresult\n\n=\n\nresponse\n\n.\n\nresult\n\n16\n\nelse\n\n{\n\nreturn\n\nprint\n\n(\n\n\"Error:\"\n\n,\n\nresponse\n\n.\n\nerror\n\n.\n\ndebugDescription\n\n)\n\n}\n\n16\n\nelse\n\n{\n\nreturn\n\nprint\n\n(\n\n\"Error:\"\n\n,\n\nresponse\n\n.\n\nerror\n\n.\n\ndebugDescription\n\n)\n\n}\n\n17\n\nprint\n\n(\n\n\"Result\"\n\n,\n\nresult\n\n)\n\n17\n\nprint\n\n(\n\n\"Result\"\n\n,\n\nresult\n\n)\n\n18\n\n}\n\n)\n\n18\n\n}\n\n)\n\n19\n\n}\n\n19\n\n}\n\n20\n\n}\n\n20\n\n}", "explanation": "**Example Overview**\n\nThe given documentation section is an example code snippet for the Magic Labs embedded wallet iOS SDK. It's primarily used to demonstrate how to update a user's email address using the `updateEmail` function.\n\n**Main Purpose**\n\nThe main purpose of this example is to:\n\n1. Show how to initiate the email update flow.\n2. Handle the response from the email update request.\n3. Print the result of the email update operation, either a successful update or an error message.\n\n**Key Components**\n\n1. `MagicViewController`: A custom view controller that encapsulates the `Magic` instance and provides methods for interacting with the Magic Labs embedded wallet.\n2. `magic.user.updateEmail`: A function that initiates the email update flow.\n3. `UpdateEmailConfiguration`: A struct that holds the configuration parameters for the email update flow, including the new email address and a boolean to show the UI.\n4. `response.result`: The result of the email update operation.\n5. `response.error`: Any error that occurs during the email update operation.\n\nOverall, this example code snippet serves as a starting point for developers to integrate the Magic Labs embedded wallet into their iOS applications and perform email update operations.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/ios#chunk-24", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\ngetIdToken\n\nGenerates a Decentralized Id Token which acts as a proof of authentication to resource servers.\n\n#\n\n\u2022 configuration (GetIdTokenConfiguration):lifespan (number): will set the lifespan of the generated token. Defaults to 900s (15 mins).\n\nconfiguration\n\n\u2022 lifespan (number): will set the lifespan of the generated token. Defaults to 900s (15 mins).\n\nlifespan", "explanation": "**getIdToken Function**\n\nThe `getIdToken` function in Magic Labs' embedded wallet is used to generate a Decentralized Id (DID) Token. This token serves as proof of authentication and can be used to verify the user's identity with resource servers.\n\n**Purpose**\n\nThe main purpose of the `getIdToken` function is to provide a short-lived, secure token that can be used to authenticate users with external services, reducing the need to handle sensitive user credentials directly.\n\n**Key Configuration**\n\nThe function takes a `configuration` object with a `lifespan` property, which determines how long the generated token will remain valid. By default, the lifespan is set to 900 seconds (15 minutes), but this can be adjusted as needed.\n\n**Example**\n\nHere's an example of how to use the `getIdToken` function:\n```swift\nlet configuration: GetIdTokenConfiguration = [\n    .lifespan(3600) // set the lifespan to 1 hour\n]\nmagic.getIdToken(withConfiguration: configuration) { result in\n    switch result {\n    case .success(let token):\n        print(\"Generated DID Token: \\(token)\")\n    case .failure(let error):\n        print(\"Error generating DID Token: \\(error)\")\n    }\n}\n```", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/ios#chunk-25", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 Promise<String>: Base64-encoded string representation of a JSON tuple representing [proof, claim]\n\nPromise<String>\n\n[proof, claim]", "explanation": "Based on the provided documentation, let's break down the '#Returns' section:\n\n**What it is:**\nThe '#Returns' section is describing the format of the return value from a specific API call in the Magic Labs embedded wallet documentation for iOS.\n\n**Main Purpose:**\nThe main purpose of this section is to inform developers about the data format they can expect to receive as a response from the API call.\n\n**Key Elements:**\n\n- `Promise<String>`: This indicates that the return value is a promise that resolves to a string type.\n- `Base64-encoded string`: The string is Base64-encoded, which is a way to convert binary data to a text format for easier transmission or storage.\n- `JSON tuple representing [proof, claim]`: The decoded string is a JSON-formatted data structure containing two elements: `proof` and `claim`. The exact nature and meaning of these elements depend on the context of the API call.\n\nIn summary, the '#Returns' section is providing essential information about the format and structure of the data returned from the API call, helping developers understand how to process and extract the relevant information from the response.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/ios#chunk-26", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\nimport\n\nMagicSDK\n\n01\n\nimport\n\nMagicSDK\n\n02\n\n02\n\n03\n\nclass\n\nMagicViewController\n\n:\n\nUIViewController\n\n{\n\n03\n\nclass\n\nMagicViewController\n\n:\n\nUIViewController\n\n{\n\n04\n\n04\n\n05\n\nlet\n\nmagic\n\n=\n\nMagic\n\n.\n\nshared\n\n05\n\nlet\n\nmagic\n\n=\n\nMagic\n\n.\n\nshared\n\n06\n\n06\n\n07\n\nfunc\n\ngetIdToken\n\n(\n\n)\n\n{\n\n07\n\nfunc\n\ngetIdToken\n\n(\n\n)\n\n{\n\n08\n\nguard\n\nlet\n\nmagic\n\n=\n\nmagic\n\nelse\n\n{\n\nreturn\n\n}\n\n08\n\nguard\n\nlet\n\nmagic\n\n=\n\nmagic\n\nelse\n\n{\n\nreturn\n\n}\n\n09\n\n09\n\n10\n\n// Assuming user is logged in\n\n10\n\n// Assuming user is logged in\n\n11\n\nlet\n\nconfiguration\n\n=\n\nGetIdTokenConfiguration\n\n(\n\nlifespan\n\n:\n\n900\n\n)\n\n11\n\nlet\n\nconfiguration\n\n=\n\nGetIdTokenConfiguration\n\n(\n\nlifespan\n\n:\n\n900\n\n)\n\n12\n\n12\n\n13\n\nmagic\n\n.\n\nuser\n\n.\n\ngetIdToken\n\n(\n\nconfiguration\n\n,\n\nresponse\n\n:\n\n{\n\nresponse\n\nin\n\n13\n\nmagic\n\n.\n\nuser\n\n.\n\ngetIdToken\n\n(\n\nconfiguration\n\n,\n\nresponse\n\n:\n\n{\n\nresponse\n\nin\n\n14\n\nguard\n\nlet\n\ntoken\n\n=\n\nresponse\n\n.\n\nresult\n\n14\n\nguard\n\nlet\n\ntoken\n\n=\n\nresponse\n\n.\n\nresult\n\n15\n\nelse\n\n{\n\nreturn\n\nprint\n\n(\n\nresponse\n\n.\n\nerror\n\n.\n\ndebugDescription\n\n)\n\n}\n\n15\n\nelse\n\n{\n\nreturn\n\nprint\n\n(\n\nresponse\n\n.\n\nerror\n\n.\n\ndebugDescription\n\n)\n\n}\n\n16\n\nprint\n\n(\n\ntoken\n\n)\n\n16\n\nprint\n\n(\n\ntoken\n\n)\n\n17\n\n}\n\n)\n\n17\n\n}\n\n)\n\n18\n\n}\n\n18\n\n}\n\n19\n\n}\n\n19\n\n}", "explanation": "**Documentation Section: #Example**\n\nThis section from the Magic Labs embedded wallet documentation for iOS showcases a practical example of how to use the `Magic SDK` to retrieve an ID token for an authenticated user.\n\n**Main Purpose:**\n\nThe main purpose of this example code is to demonstrate how to:\n\n1. Import and initialize the `Magic SDK`.\n2. Check if a user is logged in.\n3. Configure and request an ID token for the authenticated user.\n4. Handle the response and extract the ID token.\n\n**Key Concepts:**\n\n1. `MagicViewController`: A custom view controller class that wraps the `Magic SDK` functionality.\n2. `GetIdTokenConfiguration`: A method to create a configuration object for requesting an ID token.\n3. `getIdToken`: A function that requests an ID token for the authenticated user, passing the configuration and response closure.\n4. `response` closure: A block that handles the ID token response, including checking for errors and extracting the token.\n\n**Summary:**\n\nThis example code is a useful starting point for developers looking to integrate Magic Labs' embedded wallet into their iOS app, specifically focusing on retrieving an ID token for authenticated users. By understanding this example, developers can build a more comprehensive implementation using the `Magic SDK`.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/ios#chunk-27", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\ngenerateIdToken\n\nGenerates a Decentralized Id Token with optional serialized data.\n\n#\n\n\u2022 configuration (GenerateIdTokenConfiguration):lifespan (number): will set the lifespan of the generated token. Defaults to 900s (15 mins).attachment (str): will set a signature of serialized data in the generated token. Defaults to \"none\".\n\nconfiguration\n\n\u2022 lifespan (number): will set the lifespan of the generated token. Defaults to 900s (15 mins).\n\n\u2022 attachment (str): will set a signature of serialized data in the generated token. Defaults to \"none\".\n\nlifespan\n\nattachment\n\n\"none\"", "explanation": "Here's a clear and concise explanation of the `#generateIdToken` section:\n\n**Purpose:** The `#generateIdToken` function is used to generate a Decentralized Id Token with optional serialized data. This token can be used for authentication and authorization purposes across various applications.\n\n**Main Functionality:** This function takes a configuration object as an argument, which allows you to customize the generated token.\n\n**Configuration Options:**\n\n1. **lifespan (number):** This option sets the lifespan of the generated token, which defaults to 900 seconds (15 minutes). This means the token will expire and become invalid after the specified time.\n2. **attachment (str):** This option allows you to attach serialized data to the generated token, which defaults to \"none\". This is useful for storing additional information with the token.\n\n**Key Takeaways:**\n\n* The generated token can be used for authentication and authorization.\n* The token's lifespan can be customized using the `lifespan` option.\n* Additional data can be attached to the token using the `attachment` option.\n\nBy using the `#generateIdToken` function, developers can create secure and customizable authentication tokens for their applications.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/ios#chunk-28", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 Promise<String>: Base64-encoded string representation of a JSON tuple representing [proof, claim]\n\nPromise<String>\n\n[proof, claim]", "explanation": "Based on the #Returns section from the Magic Labs embedded wallet documentation for the iOS client-side SDK, I can explain its purpose as follows:\n\n**#Returns:**\n\nThe `#Returns` section describes the result response of a particular function or method in the Magic Labs embedded wallet API for the iOS client-side SDK.\n\n**Main Purpose:**\n\nThe main purpose of this section is to document the return type of a function or method. In this case, it indicates that the function returns a **Promise of a String**.\n\n**Breakdown:**\n\n- **Promise**: A promise is a result container that can be used to handle asynchronous operations. It represents a value that may not be available yet, but will be resolved or rejected at some point.\n- **String**: The string returned is a base64-encoded string representation of a JSON tuple.\n- **JSON tuple**: A JSON tuple is a data structure that contains two values, in this case, `proof` and `claim`.\n\n**What it means:**\n\nWhen a function returns a **Promise of a String**, it means that the function will resolve to a string value that contains a base64-encoded JSON tuple with two properties: `proof` and `claim`. This indicates that the function was executed successfully, and the result is a string representation of the desired data.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/ios#chunk-29", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\nimport\n\nMagicSDK\n\n01\n\nimport\n\nMagicSDK\n\n02\n\n02\n\n03\n\nclass\n\nMagicViewController\n\n:\n\nUIViewController\n\n{\n\n03\n\nclass\n\nMagicViewController\n\n:\n\nUIViewController\n\n{\n\n04\n\n04\n\n05\n\nlet\n\nmagic\n\n=\n\nMagic\n\n.\n\nshared\n\n05\n\nlet\n\nmagic\n\n=\n\nMagic\n\n.\n\nshared\n\n06\n\n06\n\n07\n\nfunc\n\ngenerateIdToken\n\n(\n\n)\n\n{\n\n07\n\nfunc\n\ngenerateIdToken\n\n(\n\n)\n\n{\n\n08\n\nguard\n\nlet\n\nmagic\n\n=\n\nmagic\n\nelse\n\n{\n\nreturn\n\n}\n\n08\n\nguard\n\nlet\n\nmagic\n\n=\n\nmagic\n\nelse\n\n{\n\nreturn\n\n}\n\n09\n\n09\n\n10\n\n// Assuming user is logged in\n\n10\n\n// Assuming user is logged in\n\n11\n\nlet\n\nconfiguration\n\n=\n\nGenerateIdTokenConfiguration\n\n(\n\nlifespan\n\n:\n\n900\n\n,\n\nattachment\n\n:\n\n\"none\"\n\n)\n\n11\n\nlet\n\nconfiguration\n\n=\n\nGenerateIdTokenConfiguration\n\n(\n\nlifespan\n\n:\n\n900\n\n,\n\nattachment\n\n:\n\n\"none\"\n\n)\n\n12\n\n12\n\n13\n\nmagic\n\n.\n\nuser\n\n.\n\ngenerateIdToken\n\n(\n\nconfiguration\n\n,\n\nresponse\n\n:\n\n{\n\nresponse\n\nin\n\n13\n\nmagic\n\n.\n\nuser\n\n.\n\ngenerateIdToken\n\n(\n\nconfiguration\n\n,\n\nresponse\n\n:\n\n{\n\nresponse\n\nin\n\n14\n\nguard\n\nlet\n\ntoken\n\n=\n\nresponse\n\n.\n\nresult\n\n14\n\nguard\n\nlet\n\ntoken\n\n=\n\nresponse\n\n.\n\nresult\n\n15\n\nelse\n\n{\n\nreturn\n\nprint\n\n(\n\n\"Error:\"\n\n,\n\nresponse\n\n.\n\nerror\n\n.\n\ndebugDescription\n\n)\n\n}\n\n15\n\nelse\n\n{\n\nreturn\n\nprint\n\n(\n\n\"Error:\"\n\n,\n\nresponse\n\n.\n\nerror\n\n.\n\ndebugDescription\n\n)\n\n}\n\n16\n\nprint\n\n(\n\n\"Result\"\n\n,\n\ntoken\n\n)\n\n16\n\nprint\n\n(\n\n\"Result\"\n\n,\n\ntoken\n\n)\n\n17\n\n}\n\n)\n\n17\n\n}\n\n)\n\n18\n\n}\n\n18\n\n}\n\n19\n\n}\n\n19\n\n}", "explanation": "**Example Overview:**\n\nThe provided documentation section is titled \"#Example\" and belongs to the Magic Labs embedded wallet documentation for iOS client-side SDKs.\n\n**Main Purpose:**\n\nThe main purpose of this example is to demonstrate how to use the Magic SDK to generate an ID Token for a logged-in user.\n\n**Key Components:**\n\n1. Initialization: The example starts by creating a `Magic` instance and checking if it is a valid object.\n2. Configuration: A `GenerateIdTokenConfiguration` object is created with a lifespan of 900 seconds and \"none\" attachment.\n3. Generating ID Token: The `generateIdToken` method of the `MagicUser` object is called with the configuration and a completion handler. The completion handler contains a switch statement that handles the response.\n4. Error Handling: If an error occurs, the error message is printed to the console.\n5. Successful Response: If the response is successful, the obtained ID Token is printed to the console.\n\n**Context:**\n\nThis example assumes that the user is already logged in. The example is a conceptual way to understand how to integrate Magic Labs embedded wallet with an iOS application to generate an ID Token for authentication. The actual implementation details might vary based on the use case and the specific requirements of the application.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/ios#chunk-30", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\ngetInfo\n\nRetrieves information for the authenticated user.\n\n#\n\n\u2022 None", "explanation": "Based on the provided documentation, the `#getInfo` API function is used to retrieve information for the authenticated user. Its main purpose is to fetch and provide details about the currently logged-in user, such as account information, wallet balances, or any other relevant data.\n\nAs indicated in the \"#Arguments\" section, this function does not require any specific arguments to be passed. This means that calling `#getInfo` will automatically retrieve and return the necessary information for the authenticated user.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/ios#chunk-31", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 Promise<UserInfo> - The issuer, email and cryptographic public address of the authenticated user.issuer (string): The Decentralized ID of the user. In server-side use-cases, we recommend this value to be used as the user ID in your own tables.email (string): Email address of the authenticated userphoneNumber (string): Phone number of the authenticated userpublicAddress (string): The authenticated user's public address (a.k.a.: public key). Currently, this value is associated with the Ethereum blockchain.isMfaEnabled (boolean): A boolean indicating if user has multi-factor authentication enabledrecoveryFactors (RecoveryFactor):value (string): Recovery value such as phone numbertype (RecoveryMethodType): The method used for account recovery\n\nPromise<UserInfo>\n\npublic address\n\n\u2022 issuer (string): The Decentralized ID of the user. In server-side use-cases, we recommend this value to be used as the user ID in your own tables.\n\n\u2022 email (string): Email address of the authenticated user\n\n\u2022 phoneNumber (string): Phone number of the authenticated user\n\n\u2022 publicAddress (string): The authenticated user's public address (a.k.a.: public key). Currently, this value is associated with the Ethereum blockchain.\n\n\u2022 isMfaEnabled (boolean): A boolean indicating if user has multi-factor authentication enabled\n\n\u2022 recoveryFactors (RecoveryFactor):value (string): Recovery value such as phone numbertype (RecoveryMethodType): The method used for account recovery\n\nissuer\n\nemail\n\nphoneNumber\n\npublicAddress\n\nisMfaEnabled\n\nrecoveryFactors\n\n\u2022 value (string): Recovery value such as phone number\n\n\u2022 type (RecoveryMethodType): The method used for account recovery\n\nvalue\n\ntype", "explanation": "**Returns Section Explanation**\n\nThe '#Returns' section in the Magic Labs embedded wallet documentation for the iOS client-side SDK explains the structure and properties of the data that is returned when a user is authenticated.\n\n**Main Purpose**\n\nThe main purpose of the '#Returns' section is to provide a clear and concise outline of the response data that is expected when making an authentication request, allowing developers to integrate this data into their applications.\n\n**Key Points**\n\n- The section returns a `Promise<UserInfo>` object that contains various properties describing the authenticated user.\n- The user information includes the Decentralized ID (`issuer`), email address, phone number, public address (Ethereum public key), and multi-factor authentication status (`isMfaEnabled`).\n- Additionally, the section includes a `recoveryFactors` object with a `value` (recovery value, e.g., phone number) and `type` (recovery method, e.g., phone) properties.\n\n**Developer Benefits**\n\nUnderstanding the returns section enables developers to:\n\n- Integrate user authentication and verification logic into their applications.\n- Store and utilize the returned user information (e.g., issuer, email, public address) in their own databases or systems.\n- Implement multi-factor authentication and account recovery features in their applications.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/ios#chunk-32", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\nimport\n\nMagicSDK\n\n01\n\nimport\n\nMagicSDK\n\n02\n\n02\n\n03\n\nclass\n\nMagicViewController\n\n:\n\nUIViewController\n\n{\n\n03\n\nclass\n\nMagicViewController\n\n:\n\nUIViewController\n\n{\n\n04\n\n04\n\n05\n\nlet\n\nmagic\n\n=\n\nMagic\n\n.\n\nshared\n\n05\n\nlet\n\nmagic\n\n=\n\nMagic\n\n.\n\nshared\n\n06\n\n06\n\n07\n\nfunc\n\ngetInfo\n\n(\n\n)\n\n{\n\n07\n\nfunc\n\ngetInfo\n\n(\n\n)\n\n{\n\n08\n\nguard\n\nlet\n\nmagic\n\n=\n\nmagic\n\nelse\n\n{\n\nreturn\n\n}\n\n08\n\nguard\n\nlet\n\nmagic\n\n=\n\nmagic\n\nelse\n\n{\n\nreturn\n\n}\n\n09\n\n09\n\n10\n\n// Assuming user is logged in\n\n10\n\n// Assuming user is logged in\n\n11\n\nmagic\n\n.\n\nuser\n\n.\n\ngetInfo\n\n(\n\nresponse\n\n:\n\n{\n\nresponse\n\nin\n\n11\n\nmagic\n\n.\n\nuser\n\n.\n\ngetInfo\n\n(\n\nresponse\n\n:\n\n{\n\nresponse\n\nin\n\n12\n\nguard\n\nlet\n\nmetadata\n\n=\n\nresponse\n\n.\n\nresult\n\n12\n\nguard\n\nlet\n\nmetadata\n\n=\n\nresponse\n\n.\n\nresult\n\n13\n\nelse\n\n{\n\nreturn\n\nprint\n\n(\n\n\"Error:\"\n\n,\n\nresponse\n\n.\n\nerror\n\n.\n\ndebugDescription\n\n)\n\n}\n\n13\n\nelse\n\n{\n\nreturn\n\nprint\n\n(\n\n\"Error:\"\n\n,\n\nresponse\n\n.\n\nerror\n\n.\n\ndebugDescription\n\n)\n\n}\n\n14\n\nprint\n\n(\n\n\"Result\"\n\n,\n\nmetadata\n\n)\n\n14\n\nprint\n\n(\n\n\"Result\"\n\n,\n\nmetadata\n\n)\n\n15\n\n}\n\n)\n\n15\n\n}\n\n)\n\n16\n\n}\n\n16\n\n}\n\n17\n\n}\n\n17\n\n}", "explanation": "**Documentation Section: '#Example'**\n\nThis is an example code snippet in Swift, taken from the Magic Labs embedded wallet documentation. The main purpose of this section is to provide a clear and concise demonstration of how to implement the `getInfo` method in the Magic SDK for iOS.\n\n**What is getInfo method?**\n\nThe `getInfo` method is a part of the Magic SDK, which retrieves the user's metadata (such as email, username, or other custom attributes) after a successful login.\n\n**Key Points of the Example:**\n\n1. The code defines a `MagicViewController` class, which extends `UIViewController`.\n2. It imports the Magic SDK and creates a shared instance of the Magic client.\n3. The `getInfo` method is called on the shared Magic client instance, passing a closure to handle the response.\n4. The response is expected to contain the user's metadata, which is then printed to the console.\n5. If an error occurs during the request, the error message is printed to the console.\n\n**Main Purpose:**\n\nThe purpose of this example is to showcase the basic usage of the `getInfo` method in the Magic SDK, which can be used by developers to fetch user metadata after a successful login. This code snippet serves as a starting point for integrating the Magic Labs embedded wallet into an iOS application.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/ios#chunk-33", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nisLoggedIn\n\nChecks if a user is currently logged in to the Magic SDK.\n\n#\n\n\u2022 None", "explanation": "# isLoggedIn Functionality\n\nThe `#isLoggedIn` function is a part of the Magic Labs embedded wallet documentation for the iOS client-side SDK. Its primary purpose is to check whether a user is currently logged in to the Magic SDK.\n\n## Main Purpose\n\nThe main purpose of `isLoggedIn` is to determine the authentication status of the user interacting with your application. This status can be used to decide whether to allow access to protected areas or services within your app.\n\n## Function Argument\n\nAs indicated in the documentation, the `#isLoggedIn` function does not require any arguments. This means that you simply need to call the `isLoggedIn` function to determine the current login status.\n\n## Potential Use Cases\n\nIn a typical application flow, the `isLoggedIn` function can be used:\n\n1. To verify user identity before granting access to sensitive data or features.\n2. To decide on the visibility of login or logout buttons.\n3. To trigger app behavior based on the authentication status.\n\nBy utilizing the `isLoggedIn` function, you can ensure that your application adapts to the user's authentication status, providing a better user experience and maintaining the security of your system.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/ios#chunk-34", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 Promise<Bool>: A boolean value indicating if a user is logged in\n\nPromise<Bool>", "explanation": "## Returns Section\n\nThe '#Returns' section in the Magic Labs embedded wallet iOS documentation indicates the expected result of a specific API function. In this case, it's a function that checks whether a user is logged in.\n\n### Main Purpose\n\nThe primary purpose of this section is to inform developers about the output format and data type they can expect from the API call. This allows them to incorporate the response properly in their code and makes it easier to integrate the Magic Labs embedded wallet into their iOS application.\n\n### Specific Return Value\n\nThe specific return value mentioned is a `Promise<Bool>` which is a type that represents a boolean value that is returned as a promise. A promise is a result object used in asynchronous operations, indicating a value that has been returned (or is being returned) that might take some amount of time to finalize.\n\n### Real-world Example\n\nIn a real-world example, this return value would be used to indicate whether a user is successfully logged in or not. Here's an example of how a developer might use this information in their code:\n\n```swift\nfunc handleLoginStatus(status: Promise<Bool>) {\n    status.then { loggedIn in\n        if loggedIn {\n            print(\"User is logged in\")\n            // Perform actions for logged-in users\n        } else {\n            print(\"User is not logged in\")\n            // Perform actions for not logged-in users\n        }\n    }\n}\n```\n\nIn this example, we define a function `handleLoginStatus(status:)` that takes a `Promise<Bool>` as an argument. Inside the function, we use the `then()` method to wait for the promise to resolve and retrieve the result. We then use an if-else statement to determine the course of action based on whether the user is logged in or not.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/ios#chunk-35", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\nimport\n\nMagicSDK\n\n01\n\nimport\n\nMagicSDK\n\n02\n\n02\n\n03\n\nclass\n\nMagicViewController\n\n:\n\nUIViewController\n\n{\n\n03\n\nclass\n\nMagicViewController\n\n:\n\nUIViewController\n\n{\n\n04\n\n04\n\n05\n\nlet\n\nmagic\n\n=\n\nMagic\n\n.\n\nshared\n\n05\n\nlet\n\nmagic\n\n=\n\nMagic\n\n.\n\nshared\n\n06\n\n06\n\n07\n\nfunc\n\nisLoggedIn\n\n(\n\n)\n\n{\n\n07\n\nfunc\n\nisLoggedIn\n\n(\n\n)\n\n{\n\n08\n\nguard\n\nlet\n\nmagic\n\n=\n\nmagic\n\nelse\n\n{\n\nreturn\n\n}\n\n08\n\nguard\n\nlet\n\nmagic\n\n=\n\nmagic\n\nelse\n\n{\n\nreturn\n\n}\n\n09\n\n09\n\n10\n\nmagic\n\n.\n\nuser\n\n.\n\nisLoggedIn\n\n(\n\nresponse\n\n:\n\n{\n\nresponse\n\nin\n\n10\n\nmagic\n\n.\n\nuser\n\n.\n\nisLoggedIn\n\n(\n\nresponse\n\n:\n\n{\n\nresponse\n\nin\n\n11\n\nguard\n\nlet\n\nresult\n\n=\n\nresponse\n\n.\n\nresult\n\n11\n\nguard\n\nlet\n\nresult\n\n=\n\nresponse\n\n.\n\nresult\n\n12\n\nelse\n\n{\n\nreturn\n\nprint\n\n(\n\n\"Error:\"\n\n,\n\nresponse\n\n.\n\nerror\n\n.\n\ndebugDescription\n\n)\n\n}\n\n12\n\nelse\n\n{\n\nreturn\n\nprint\n\n(\n\n\"Error:\"\n\n,\n\nresponse\n\n.\n\nerror\n\n.\n\ndebugDescription\n\n)\n\n}\n\n13\n\nprint\n\n(\n\n\"Result\"\n\n,\n\nresult\n\n)\n\n13\n\nprint\n\n(\n\n\"Result\"\n\n,\n\nresult\n\n)\n\n14\n\n}\n\n)\n\n14\n\n}\n\n)\n\n15\n\n}\n\n15\n\n}\n\n16\n\n}\n\n16\n\n}", "explanation": "**Section Title: #Example**\n\n**Purpose:** This section provides a code example to demonstrate how to use the Magic Link SDK in an iOS application to check if a user is logged in.\n\n**Main Components:**\n\n1. **Importing the MagicSDK:** The example code imports the MagicSDK, which is the main library for interacting with the Magic Link service.\n2. **Creating a MagicViewController:** A custom view controller, MagicViewController, is created to handle login and authentication-related tasks.\n3. **Getting the Magic Instance:** The `magic` instance is retrieved from the shared instance of the MagicSDK.\n4. **Checking if the User is Logged In:** The `isLoggedIn` function is called to check if the user is logged in. This function:\n\t* Returns if the `magic` instance is nil.\n\t* Calls the `user.isLoggedIn()` method on the `magic` instance to check if the user is logged in.\n\t* Handles any errors that may occur during the request.\n\n**Key Code Snippets:**\n\n* `let magic = Magic.shared`: Retrieves the shared instance of the MagicSDK.\n* `magic.user.isLoggedIn(response:completion:)`: Calls the `isLoggedIn()` method on the `user` property of the `magic` instance to check if the user is logged in.\n* `guard let result = response.result else { ... }`: Handles any errors that may occur during the request by printing the error message.\n* `print(\"Result\", result)`: Prints the result of the login check.\n\n**Context:** This code example is likely part of a larger iOS application that uses the Magic Link SDK for authentication and login management. The `MagicViewController` class may be responsible for handling various login-related tasks, such as logging in, logging out, and checking the user's login status.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/ios#chunk-36", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nlogout\n\nLogs out the currently authenticated Magic user.\n\n#\n\n\u2022 None", "explanation": "In the Magic Labs embedded wallet documentation, the '#logout - #Arguments' section explains the `logout` function.\n\n**What it is about:**\nThe `logout` function logs out the currently authenticated Magic user from the embedded wallet.\n\n**Main purpose:**\nThe main purpose of the `logout` function is to securely end the user's session and revoke access to their connected wallet, ensuring the privacy and security of their sensitive information.\n\nIn essence, `logout` helps to:\n\n1. End the current user session\n2. Terminate access to the user's connected wallet\n3. Prevent unauthorized access to sensitive information\n\nBy calling the `logout` function, you can securely log out the user and restore the embedded wallet to its default, unauthenticated state.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/ios#chunk-37", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 Promise<Bool>: A boolean value indicating if a user has been logged out\n\nPromise<Bool>", "explanation": "**Returns**\n\nThe `#Returns` section in the Magic Labs embedded wallet documentation for iOS describes the return type of a specific call, which is related to checking if a user has been logged out.\n\n**Main Purpose:**\n\nIts primary purpose is to inform the developer about the output of the operation. Specifically, it indicates that the method or function call will return a boolean value (represented as `Bool`) wrapped in a promise.\n\n**Key Points:**\n\n- The type of the return value is a promise that resolves to a boolean (`Promise<Bool>`).\n- The boolean value represents whether the user has been successfully logged out (`Bool`).\n- The promise encapsulates this boolean value, allowing the code to asynchronously handle the outcome of the operation.\n\n**Example Usage:**\n\n```swift\n// Assuming `magic.user.isLoggedIn` is the function being called\nmagic.user.isLoggedIn { (loggedOut) in\n  if loggedOut {\n    print(\"User has been logged out\")\n  } else {\n    print(\"User is still logged in\")\n  }\n}\n```\n\nIn this example, the `isLoggedIn` function returns a promise that resolves to a boolean value, which is then handled asynchronously by the closure provided.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/ios#chunk-38", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\nimport\n\nMagicSDK\n\n01\n\nimport\n\nMagicSDK\n\n02\n\n02\n\n03\n\nclass\n\nMagicViewController\n\n:\n\nUIViewController\n\n{\n\n03\n\nclass\n\nMagicViewController\n\n:\n\nUIViewController\n\n{\n\n04\n\n04\n\n05\n\nlet\n\nmagic\n\n=\n\nMagic\n\n.\n\nshared\n\n05\n\nlet\n\nmagic\n\n=\n\nMagic\n\n.\n\nshared\n\n06\n\n06\n\n07\n\nfunc\n\nlogout\n\n(\n\n)\n\n{\n\n07\n\nfunc\n\nlogout\n\n(\n\n)\n\n{\n\n08\n\nguard\n\nlet\n\nmagic\n\n=\n\nmagic\n\nelse\n\n{\n\nreturn\n\n}\n\n08\n\nguard\n\nlet\n\nmagic\n\n=\n\nmagic\n\nelse\n\n{\n\nreturn\n\n}\n\n09\n\n09\n\n10\n\n// Assuming user is logged in\n\n10\n\n// Assuming user is logged in\n\n11\n\nmagic\n\n.\n\nuser\n\n.\n\nlogout\n\n(\n\nresponse\n\n:\n\n{\n\nresponse\n\nin\n\n11\n\nmagic\n\n.\n\nuser\n\n.\n\nlogout\n\n(\n\nresponse\n\n:\n\n{\n\nresponse\n\nin\n\n12\n\nguard\n\nlet\n\nresult\n\n=\n\nresponse\n\n.\n\nresult\n\n12\n\nguard\n\nlet\n\nresult\n\n=\n\nresponse\n\n.\n\nresult\n\n13\n\nelse\n\n{\n\nreturn\n\nprint\n\n(\n\n\"Error:\"\n\n,\n\nresponse\n\n.\n\nerror\n\n.\n\ndebugDescription\n\n)\n\n}\n\n13\n\nelse\n\n{\n\nreturn\n\nprint\n\n(\n\n\"Error:\"\n\n,\n\nresponse\n\n.\n\nerror\n\n.\n\ndebugDescription\n\n)\n\n}\n\n14\n\nprint\n\n(\n\n\"Result\"\n\n,\n\nresult\n\n)\n\n14\n\nprint\n\n(\n\n\"Result\"\n\n,\n\nresult\n\n)\n\n15\n\n}\n\n)\n\n15\n\n}\n\n)\n\n16\n\n}\n\n16\n\n}\n\n17\n\n}\n\n17\n\n}", "explanation": "**Example Overview**\n\nThe provided documentation is an example code snippet, specifically for the Magic Labs iOS SDK. It demonstrates how to implement a basic wallet functionality using the Magic SDK.\n\n**Key Components and Purpose**\n\nThe example code consists of two main parts:\n\n1. **MagicViewController**: A custom view controller class that handles the user authentication and wallet functionality.\n2. **Logout Functionality**: A method (`logout()`) that initiates the logout process and checks the response from the Magic API.\n\n**Breakdown of the Logout Functionality**\n\nThe `logout()` function does the following:\n\n1. Retrieves the shared instance of the Magic SDK (`Magic.shared`).\n2. Calls the `logout` method on the Magic user (`magic.user.logout(response:)`) to initiate the logout process.\n3. Checks the response from the Magic API and:\n\t* If successful, prints the logout result.\n\t* If failed, prints the error message.\n\n**Key Takeaways**\n\nThis example code is a starting point for implementing Magic Labs' embedded wallet on an iOS app. It shows how to:\n\n* Use the Magic SDK to handle user authentication and wallet functionality.\n* Implement a logout process that checks the response from the Magic API.\n\nBy following this example, developers can adapt the code to fit their specific app requirements.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/ios#chunk-39", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nshowSettings\n\nDisplays an iframe with the current user\u2019s settings. Allows for users to update their email address, enable multi-factor authentication, and add a recovery factor.\n\nOnly available with Dedicated Wallet. Access to MFA and account recovery require paid add-ons.\n\nMFA\n\naccount recovery\n\n#\n\n\u2022 None", "explanation": "The '#showSettings' section is a part of the Magic Labs embedded wallet documentation. \n\nThis section explains a specific API call or function that allows users to display their current settings within an iframe, enabling them to update their email address, enable multi-factor authentication (MFA), and add an account recovery factor.\n\nThe main purpose of this section is to provide instructions on how to use the '#showSettings' function, which is only available with the Dedicated Wallet and requires paid add-ons for access to MFA and account recovery features. This section does not elaborate on the arguments required for this function, indicating that it requires no specific input parameters.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/ios#chunk-40", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 Promise which resolves when the user closes the window\n\nPromise", "explanation": "According to the Magic Labs embedded wallet API documentation for the iOS client-side SDK, the '#Returns' section is about the return value of a specific function.\n\nIt appears that the function returns a \"Promise which resolves when the user closes the window.\" This means that whenever the user closes the window of the embedded wallet, the function will return a promise (a result of an operation that hasn't completed yet) that eventually gets resolved or fulfilled when the operation is completed, in this case, when the user closes the window.\n\nIn simple terms, this return value indicates that the function is waiting for an event to happen (the user closing the window) and resolves the promise when that event occurs.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/ios#chunk-41", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\nimport\n\nMagicSDK\n\n01\n\nimport\n\nMagicSDK\n\n02\n\n02\n\n03\n\nclass\n\nMagicViewController\n\n:\n\nUIViewController\n\n{\n\n03\n\nclass\n\nMagicViewController\n\n:\n\nUIViewController\n\n{\n\n04\n\n04\n\n05\n\nlet\n\nmagic\n\n=\n\nMagic\n\n.\n\nshared\n\n05\n\nlet\n\nmagic\n\n=\n\nMagic\n\n.\n\nshared\n\n06\n\n06\n\n07\n\nfunc\n\nlogout\n\n(\n\n)\n\n{\n\n07\n\nfunc\n\nlogout\n\n(\n\n)\n\n{\n\n08\n\nguard\n\nlet\n\nmagic\n\n=\n\nmagic\n\nelse\n\n{\n\nreturn\n\n}\n\n08\n\nguard\n\nlet\n\nmagic\n\n=\n\nmagic\n\nelse\n\n{\n\nreturn\n\n}\n\n09\n\n09\n\n10\n\n// Assuming user is logged in\n\n10\n\n// Assuming user is logged in\n\n11\n\nmagic\n\n.\n\nuser\n\n.\n\nshowSettings\n\n(\n\nresponse\n\n:\n\n{\n\nresponse\n\nin\n\n11\n\nmagic\n\n.\n\nuser\n\n.\n\nshowSettings\n\n(\n\nresponse\n\n:\n\n{\n\nresponse\n\nin\n\n12\n\nguard\n\nlet\n\nresult\n\n=\n\nresponse\n\n.\n\nresult\n\n12\n\nguard\n\nlet\n\nresult\n\n=\n\nresponse\n\n.\n\nresult\n\n13\n\nelse\n\n{\n\nreturn\n\nprint\n\n(\n\n\"Error:\"\n\n,\n\nresponse\n\n.\n\nerror\n\n.\n\ndebugDescription\n\n)\n\n}\n\n13\n\nelse\n\n{\n\nreturn\n\nprint\n\n(\n\n\"Error:\"\n\n,\n\nresponse\n\n.\n\nerror\n\n.\n\ndebugDescription\n\n)\n\n}\n\n14\n\nprint\n\n(\n\n\"Result\"\n\n,\n\nresult\n\n)\n\n14\n\nprint\n\n(\n\n\"Result\"\n\n,\n\nresult\n\n)\n\n15\n\n}\n\n)\n\n15\n\n}\n\n)\n\n16\n\n}\n\n16\n\n}\n\n17\n\n}\n\n17\n\n}", "explanation": "**Overview of the Example Code Section**\n\nThis is an example code snippet from the Magic Labs embedded wallet documentation for the iOS client-side SDK. The code is written in Swift and demonstrates how to use the MagicSDK to handle user authentication and settings.\n\n**Main Purpose of the Example Code**\n\nThe main purpose of this example code is to illustrate the following use cases:\n\n1. **Logout**: The code shows how to log out a user using the MagicSDK.\n2. **Show User Settings**: After logging out, the code shows how to display the user settings screen using the `showSettings` method.\n\n**Key Code Snippets**\n\nThe code consists of two functions:\n\n1. **`logout`**: This function logs out a user using the MagicSDK. It checks if the `magic` instance is valid and then calls the `logout` method on it.\n2. **`showSettings`**: This function displays the user settings screen using the `showSettings` method. It checks if the `response` object is valid, extracts the `result` value, and then prints it to the console. If there's an error, it prints the error message instead.\n\n**Context**\n\nThis code snippet is likely from a view controller in an iOS app that integrates the Magic Labs embedded wallet. The app uses the MagicSDK to handle user authentication and settings. The code demonstrates how to handle these use cases in a simple and straightforward way.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/ios#chunk-42", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nupdatePhoneNumber\n\nInitiates the update phone number flow that allows a user to change their phone number.\n\n#\n\n\u2022 configuration:phoneNumber (str): The user phone number to update with\n\nconfiguration\n\n\u2022 phoneNumber (str): The user phone number to update with\n\nphoneNumber", "explanation": "The section you're referring to is about the `#updatePhoneNumber` function from the Magic Labs embedded wallet documentation for the iOS SDK. \n\n**Purpose:** The main purpose of the `#updatePhoneNumber` function is to initiate a flow that allows a user to change their phone number. This is typically done for updating a wrong phone number, or when a user prefers to switch to a new phone number for their Magic wallet. \n\n**Key Argument:** The `phoneNumber` argument is a required string that specifies the new phone number to be updated with. This will be the latest phone number used by the user.\n\nIn summary, this function provides a way for your application to enable users to easily update their phone numbers on the Magic wallet platform.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/ios#chunk-43", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 PromiEvent<boolean>: The promise resolves with a true boolean value if update email is successful and rejects with a specific error code if the request fails\n\nPromiEvent<boolean>", "explanation": "**Returns Section Explanation**\n\nThe '#Returns' section of the Magic Labs embedded wallet documentation for the iOS client-side SDK explains how the update email method returns a result after a request has been made to update a user's email address.\n\n**Main Purpose**\n\nThe main purpose of this section is to inform developers about the expected response format when calling the update email method. This allows them to handle the outcome of the request correctly, whether it's a successful update (resolved with true) or an error (rejected with a specific error code).\n\n**In Simple Terms**\n\nWhen you call the update email method, Magic Labs will send a boolean value in response to indicate if the operation was successful. If it was, the response will resolve with true (1). If something went wrong, it will reject the request and provide a specific error code to help you understand what happened.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/ios#chunk-44", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\nimport\n\nMagicSDK\n\n01\n\nimport\n\nMagicSDK\n\n02\n\n02\n\n03\n\nclass\n\nMagicViewController\n\n:\n\nUIViewController\n\n{\n\n03\n\nclass\n\nMagicViewController\n\n:\n\nUIViewController\n\n{\n\n04\n\n04\n\n05\n\nlet\n\nmagic\n\n=\n\nMagic\n\n.\n\nshared\n\n05\n\nlet\n\nmagic\n\n=\n\nMagic\n\n.\n\nshared\n\n06\n\n06\n\n07\n\nfunc\n\nlogout\n\n(\n\n)\n\n{\n\n07\n\nfunc\n\nlogout\n\n(\n\n)\n\n{\n\n08\n\nguard\n\nlet\n\nmagic\n\n=\n\nmagic\n\nelse\n\n{\n\nreturn\n\n}\n\n08\n\nguard\n\nlet\n\nmagic\n\n=\n\nmagic\n\nelse\n\n{\n\nreturn\n\n}\n\n09\n\n09\n\n10\n\n// Assuming user is logged in\n\n10\n\n// Assuming user is logged in\n\n11\n\nlet\n\nconfiguration\n\n=\n\n(\n\nphoneNumber\n\n:\n\nphoneNumber\n\n)\n\n11\n\nlet\n\nconfiguration\n\n=\n\n(\n\nphoneNumber\n\n:\n\nphoneNumber\n\n)\n\n12\n\nmagic\n\n.\n\nuser\n\n.\n\nupdatePhoneNumber\n\n(\n\nconfiguration\n\n,\n\nresponse\n\n:\n\n{\n\nresponse\n\nin\n\n12\n\nmagic\n\n.\n\nuser\n\n.\n\nupdatePhoneNumber\n\n(\n\nconfiguration\n\n,\n\nresponse\n\n:\n\n{\n\nresponse\n\nin\n\n13\n\nguard\n\nlet\n\nresult\n\n=\n\nresponse\n\n.\n\nresult\n\n13\n\nguard\n\nlet\n\nresult\n\n=\n\nresponse\n\n.\n\nresult\n\n14\n\nelse\n\n{\n\nreturn\n\nprint\n\n(\n\n\"Error:\"\n\n,\n\nresponse\n\n.\n\nerror\n\n.\n\ndebugDescription\n\n)\n\n}\n\n14\n\nelse\n\n{\n\nreturn\n\nprint\n\n(\n\n\"Error:\"\n\n,\n\nresponse\n\n.\n\nerror\n\n.\n\ndebugDescription\n\n)\n\n}\n\n15\n\nprint\n\n(\n\n\"Result\"\n\n,\n\nresult\n\n)\n\n15\n\nprint\n\n(\n\n\"Result\"\n\n,\n\nresult\n\n)\n\n16\n\n}\n\n)\n\n16\n\n}\n\n)\n\n17\n\n}\n\n17\n\n}\n\n18\n\n}\n\n18\n\n}", "explanation": "**Documentation Section: #Example**\n\nThe provided documentation section is an example code snippet written in Swift for iOS, demonstrating how to use the Magic Labs Embedded Wallet SDK. This section is essential for developers seeking to integrate the Magic Labs SDK into their iOS applications.\n\n**Main Purpose:**\n\nThe primary purpose of this code is to showcase how to:\n\n1. Initialize the Magic Labs SDK\n2. Log out the user\n3. Update the user's phone number\n\n**Key Components:**\n\n1. **MagicViewController**: A subclass of `UIViewController` that controls the Magic Labs Embedded Wallet SDK's functionality.\n2. **Magic SDK**: The Embedded Wallet SDK is initialized and accessed through the `Magic` class.\n3. **updatePhoneNumber**: A method that updates the user's phone number using the `user.updatePhoneNumber` method from the Magic Labs SDK.\n\n**Usage:**\n\nDevelopers can use this example code as a starting point to integrate the Magic Labs SDK into their own projects. They can swap out the dummy `phoneNumber` values with their own implementation and adapt the code to fit their specific requirements.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/ios#chunk-45", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nrecoverAccount\n\nInitiates the account recovery flow that allows a user to recover their account using their email address.\n\n#\n\n\u2022 configuration (RecoverAccountConfiguration):email (str): The user email address to recover account with\n\nconfiguration\n\n\u2022 email (str): The user email address to recover account with\n\nemail", "explanation": "**Recover Account Functionality**\n\nThe `recoverAccount` function is a part of the Magic Labs embedded wallet API. Its primary purpose is to initiate the account recovery flow for a user. This flow allows users to recover their account using their registered email address.\n\n**Main Purpose**\n\nThe main purpose of `recoverAccount` is to facilitate account recovery for users who have forgotten their account credentials or are unable to access their account. By providing their registered email address, users can recover their account and regain access to their wallet and associated funds.\n\n**Key Functionality**\n\nThe `recoverAccount` function takes one argument, `configuration`, which contains the email address associated with the user's account. The email address is the key factor in initiating the account recovery process. Upon successful execution of the `recoverAccount` function, the account recovery flow is triggered, allowing the user to recover their account.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/ios#chunk-46", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 PromiEvent<boolean>: The promise resolves with a true boolean value if the account recovery is successful and rejects with a specific error code if the request fails\n\nPromiEvent<boolean>", "explanation": "In the context of Magic Labs embedded wallet documentation, the '#Returns' section is related to the `accountRecovery` function.\n\nThe `accountRecovery` function is used to initiate the account recovery process. \n\nThe `PromiEvent<boolean>` return type indicates the following:\n\n- **Successful Recovery**: The promise resolves with a `true` boolean value if the account recovery is successful.\n- **Failed Recovery**: The promise rejects with a specific error code if the request fails.\n\nIn summary, the `PromiEvent<boolean>` return type provides a way to handle the account recovery result: a resolved promise with `true` indicates a successful recovery, while a rejected promise indicates a failed recovery, along with an error code for further troubleshooting.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/ios#chunk-47", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\nimport\n\nMagicSDK\n\n01\n\nimport\n\nMagicSDK\n\n02\n\n02\n\n03\n\nclass\n\nMagicViewController\n\n:\n\nUIViewController\n\n{\n\n03\n\nclass\n\nMagicViewController\n\n:\n\nUIViewController\n\n{\n\n04\n\n04\n\n05\n\nlet\n\nmagic\n\n=\n\nMagic\n\n.\n\nshared\n\n05\n\nlet\n\nmagic\n\n=\n\nMagic\n\n.\n\nshared\n\n06\n\n06\n\n07\n\nfunc\n\nlogout\n\n(\n\n)\n\n{\n\n07\n\nfunc\n\nlogout\n\n(\n\n)\n\n{\n\n08\n\nguard\n\nlet\n\nmagic\n\n=\n\nmagic\n\nelse\n\n{\n\nreturn\n\n}\n\n08\n\nguard\n\nlet\n\nmagic\n\n=\n\nmagic\n\nelse\n\n{\n\nreturn\n\n}\n\n09\n\n09\n\n10\n\n// Assuming user is logged in\n\n10\n\n// Assuming user is logged in\n\n11\n\nlet\n\nconfiguration\n\n=\n\nRecoverAccountConfiguration\n\n(\n\nemail\n\n:\n\n\"recovery_email@example.com\"\n\n)\n\n11\n\nlet\n\nconfiguration\n\n=\n\nRecoverAccountConfiguration\n\n(\n\nemail\n\n:\n\n\"recovery_email@example.com\"\n\n)\n\n12\n\nmagic\n\n.\n\nuser\n\n.\n\nrecoverAccount\n\n(\n\nconfiguration\n\n,\n\nresponse\n\n:\n\n{\n\nresponse\n\nin\n\n12\n\nmagic\n\n.\n\nuser\n\n.\n\nrecoverAccount\n\n(\n\nconfiguration\n\n,\n\nresponse\n\n:\n\n{\n\nresponse\n\nin\n\n13\n\nguard\n\nlet\n\nresult\n\n=\n\nresponse\n\n.\n\nresult\n\n13\n\nguard\n\nlet\n\nresult\n\n=\n\nresponse\n\n.\n\nresult\n\n14\n\nelse\n\n{\n\nreturn\n\nprint\n\n(\n\n\"Error:\"\n\n,\n\nresponse\n\n.\n\nerror\n\n.\n\ndebugDescription\n\n)\n\n}\n\n14\n\nelse\n\n{\n\nreturn\n\nprint\n\n(\n\n\"Error:\"\n\n,\n\nresponse\n\n.\n\nerror\n\n.\n\ndebugDescription\n\n)\n\n}\n\n15\n\nprint\n\n(\n\n\"Result\"\n\n,\n\nresult\n\n)\n\n15\n\nprint\n\n(\n\n\"Result\"\n\n,\n\nresult\n\n)\n\n16\n\n}\n\n)\n\n16\n\n}\n\n)\n\n17\n\n}\n\n17\n\n}\n\n18\n\n}\n\n18\n\n}", "explanation": "**Example Code Explanation**\n\nThe provided documentation section is an example code snippet in Swift programming language, demonstrating how to use the Magic Labs embedded wallet in an iOS application.\n\n**Main Purpose:**\n\nThe main purpose of this code is to showcase how to log out a user and then attempt to recover their account using the email address associated with the account. This is done using the `RecoverAccountConfiguration` and `recoverAccount` method provided by the Magic Labs SDK.\n\n**Key Components:**\n\n1. **MagicViewController Class**: The code defines a custom `MagicViewController` class that inherits from `UIViewController`. This class likely contains the necessary UI and logic for interacting with the Magic Labs wallet.\n2. **Magic Shared Instance**: The code obtains a shared instance of the Magic Labs SDK using `Magic.shared`.\n3. **User Logout**: The code logs out the current user by calling the `logout` method.\n4. **Recover Account**: The code attempts to recover the user's account using their email address. This is done by creating a `RecoverAccountConfiguration` object and passing it to the `recoverAccount` method.\n\n**Key Methods:**\n\n* `logout()`: Logs out the current user.\n* `recoverAccount(configuration:response:)`: Attempts to recover the user's account using the provided configuration and response handler.\n\n**Note:** This code snippet is likely intended to be used as a starting point or reference for developers creating their own Magic Labs wallet implementation in an iOS application.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/ios#chunk-48", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nThis module requires an enterprise agreement. For more details click here.\n\nclick here\n\nThe OpenID Module and it's members are accessible on the Magic SDK instance by the openid property.\n\nopenid\n\nTo use the OpenID Module in your application, install MagicExt-OIDC along with magic-ios.\n\nMagicExt-OIDC\n\nmagic-ios\n\nCopy\n\n01\n\n# Cocoapods, in Podfile\n\n01\n\n# Cocoapods, in Podfile\n\n02\n\n\u2060pod\n\n'MagicSDK'\n\n\u2060\n\n02\n\n\u2060pod\n\n'MagicSDK'\n\n\u2060\n\n03\n\npod\n\n'MagicExt-OIDC'\n\n03\n\npod\n\n'MagicExt-OIDC'\n\n04\n\n\u2060\n\n04\n\n\u2060\n\n05\n\n# SPM\u2060\n\n05\n\n# SPM\u2060\n\n06\n\nAdd magic-ios-ext \u2060\n\n06\n\nAdd magic-ios-ext \u2060\n\n07\n\nAdd magic-ios\n\n07\n\nAdd magic-ios\n\n08\n\n08\n\n09\n\nmagic.openid\n\n;\n\n09\n\nmagic.openid\n\n;\n\n10\n\nmagic.openid.loginWithOIDC\n\n;\n\n10\n\nmagic.openid.loginWithOIDC\n\n;\n\n#\n\nloginWithOIDC\n\nAuthenticate users via your preferred OIDC client.\n\nOnly available with Dedicated Wallet.\n\n#\n\n\u2022 jwt (String): The OIDC token from your identity provider\n\n\u2022 providerId (String): An alphanumeric ID provided by Magic after successful configuration of your identity provider\n\njwt (String): The OIDC token from your identity provider\n\njwt\n\nproviderId (String): An alphanumeric ID provided by Magic after successful configuration of your identity provider\n\nproviderId", "explanation": "**Overview of the #OpenID Module - #loginWithOIDC - #Arguments**\n\nThe #OpenID Module is a feature within Magic Labs' embedded wallet documentation that enables users to authenticate with their preferred OpenID Connect (OIDC) client. This module is required for enterprise agreements and is accessible through the `openid` property on the Magic SDK instance.\n\n**Purpose of the OpenID Module**\n\nThe primary purpose of the OpenID Module is to provide a method for users to authenticate with their OIDC client, such as Google, GitHub, or Azure. This is achieved through the `loginWithOIDC` function, which accepts two main arguments:\n\n1. **jwt (String): The OIDC token from your identity provider**\nThis is the user's authentication token, typically obtained from a successful login with the OIDC client.\n2. **providerId (String): An alphanumeric ID provided by Magic after successful configuration of your identity provider**\nThis is a unique identifier generated by Magic after the OIDC client is successfully configured.\n\n**Example Usage**\n\nTo use the OpenID Module, you would follow these steps:\n\n1. Add the necessary dependencies to your project (MagicSDK and MagicExt-OIDC).\n2. Initialize the Magic SDK instance.\n3. Use the `openid` property to access the OpenID Module.\n4. Call the `loginWithOIDC` function, passing in the OIDC token (`jwt`) and provider ID (`providerId`).\n\nExample code:\n```swift\nimport MagicSDK\n\nlet magic = MagicSDK()\n\nlet openid = magic.openid\n\nopenid.loginWithOIDC(jwt: oidcToken, providerId: providerId)\n```\nThis code snippet shows how to use the OpenID Module to authenticate a user with their OIDC client. By following these steps, you can integrate the Magic Labs embedded wallet with your preferred OIDC client.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/ios#chunk-49", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 PromiEvent<string | null>: The promise resolves upon authentication request success and rejects with a specific error code if the request fails. The resolved value is a Decentralized ID token with a default 15-minute lifespan.\n\nPromiEvent<string | null>: The promise resolves upon authentication request success and rejects with a specific error code if the request fails. The resolved value is a Decentralized ID token with a default 15-minute lifespan.\n\nPromiEvent<string | null>", "explanation": "This is the '#Returns' section from the Magic Labs embedded wallet documentation for iOS. It explains what happens when a user requests authentication using the Magic Labs embedded wallet.\n\n**Main Purpose:**\nThe main purpose of this section is to inform developers about the expected outcomes of initiating an authentication request.\n\n**Key Points:**\n\n- When the authentication request is successful, a promise resolves with a Decentralized ID token as a string. This token has a default lifespan of 15 minutes.\n- If the authentication request fails, the promise rejects with a specific error code.\n- The Decentralized ID token can be used to further authenticate the user or access their account information within the 15-minute time frame.\n\nIn summary, this section provides crucial information on how to handle the result of an authentication request, helping developers integrate Magic Labs embedded wallet into their iOS applications successfully.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/ios#chunk-50", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\nimport\n\nMagicSDK\n\n01\n\nimport\n\nMagicSDK\n\n02\n\n\u2060\n\nimport\n\nMagicExt_OIDC\n\n02\n\n\u2060\n\nimport\n\nMagicExt_OIDC\n\n03\n\n\u2060\n\n03\n\n\u2060\n\n04\n\nmagic\n\n=\n\nMagic\n\n(\n\napiKey\n\n:\n\n'\n\n<\n\nyour_magic_api_key\n\n>\n\n'\n\n)\n\n04\n\nmagic\n\n=\n\nMagic\n\n(\n\napiKey\n\n:\n\n'\n\n<\n\nyour_magic_api_key\n\n>\n\n'\n\n)\n\n05\n\n\u2060\n\n05\n\n\u2060\n\n06\n\n// MARK: - Openid Login\n\n06\n\n// MARK: - Openid Login\n\n07\n\n\u2060\n\nfunc\n\nhandleOpenIdLogin\n\n(\n\n)\n\n{\n\n07\n\n\u2060\n\nfunc\n\nhandleOpenIdLogin\n\n(\n\n)\n\n{\n\n08\n\n\u2060\n\nguard\n\nlet\n\nmagic\n\n=\n\nmagic\n\nelse\n\n{\n\nreturn\n\n}\n\n08\n\n\u2060\n\nguard\n\nlet\n\nmagic\n\n=\n\nmagic\n\nelse\n\n{\n\nreturn\n\n}\n\n09\n\n09\n\n10\n\n\u2060\n\nlet\n\nconfig\n\n=\n\nOpenIdConfiguration\n\n(\n\njwt\n\n:\n\njwt\n\n,\n\nproviderId\n\n:\n\nproviderId\n\n)\n\n10\n\n\u2060\n\nlet\n\nconfig\n\n=\n\nOpenIdConfiguration\n\n(\n\njwt\n\n:\n\njwt\n\n,\n\nproviderId\n\n:\n\nproviderId\n\n)\n\n11\n\nmagic\n\n.\n\nopenid\n\n.\n\nloginWithOIDC\n\n(\n\nconfig\n\n,\n\nresponse\n\n:\n\n{\n\nres\n\nin\n\n11\n\nmagic\n\n.\n\nopenid\n\n.\n\nloginWithOIDC\n\n(\n\nconfig\n\n,\n\nresponse\n\n:\n\n{\n\nres\n\nin\n\n12\n\nif\n\n(\n\nres\n\n.\n\nstatus\n\n.\n\nisSuccess\n\n)\n\n{\n\n12\n\nif\n\n(\n\nres\n\n.\n\nstatus\n\n.\n\nisSuccess\n\n)\n\n{\n\n13\n\nprint\n\n(\n\nres\n\n.\n\nresult\n\n??\n\n\"nil\"\n\n)\n\n13\n\nprint\n\n(\n\nres\n\n.\n\nresult\n\n??\n\n\"nil\"\n\n)\n\n14\n\n}\n\n14\n\n}\n\n15\n\n}\n\n)\n\n15\n\n}\n\n)\n\n16\n\n}\n\n16\n\n}", "explanation": "**Documentation Section: `#Example`**\n\nThe `#Example` section in the Magic Link documentation provides a code snippet in Swift, written for the iOS platform, demonstrating how to use the Magic SDK to perform OpenID Connect (OIDC) login. This code serves as a reference implementation for developers to integrate the Magic SDK into their iOS applications.\n\n**Key Components of the `#Example` Code:**\n\n1. **SDK Initialization**: The code initializes the Magic SDK with an API key, which is a required parameter.\n2. **OIDC Configuration**: The code creates an `OpenIdConfiguration` object, passing in a JSON Web Token (JWT) and a provider ID. This configuration is used to enable OIDC login.\n3. **OIDC Login**: The code calls the `loginWithOIDC` method on the Magic instance, passing in the OIDC configuration and a response handler. The response handler is called with the result of the OIDC login attempt.\n\n**Main Purpose:**\n\nThe primary purpose of this `#Example` code is to illustrate the process of integrating OIDC login into an iOS application using the Magic SDK. Developers can use this code as a starting point to implement OIDC login in their own applications, ensuring that they comply with the essential steps outlined in the example.\n\n**Highlight the key takeaway:**\n\nThe example code emphasizes the importance of proper Magic SDK initialization, OIDC configuration, and response handling when implementing OIDC login functionality in an iOS application.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/ios#chunk-51", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nThere are three types of error class to be aware of when working with Magic's iOS SDK:\n\n#\n\nCopy\n\n01\n\npublic\n\nenum\n\nProviderError\n\n:\n\nSwift\n\n.\n\nError\n\n{\n\n01\n\npublic\n\nenum\n\nProviderError\n\n:\n\nSwift\n\n.\n\nError\n\n{\n\n02\n\n/// The provider is not configured with an authDelegate\n\n02\n\n/// The provider is not configured with an authDelegate\n\n03\n\ncase\n\nencodingFailed\n\n(\n\nSwift\n\n.\n\nError\n\n?\n\n)\n\n03\n\ncase\n\nencodingFailed\n\n(\n\nSwift\n\n.\n\nError\n\n?\n\n)\n\n04\n\n/// Decoding the JSON-RPC request failed\n\n04\n\n/// Decoding the JSON-RPC request failed\n\n05\n\ncase\n\ndecodingFailed\n\n(\n\njson\n\n:\n\nString\n\n)\n\n05\n\ncase\n\ndecodingFailed\n\n(\n\njson\n\n:\n\nString\n\n)\n\n06\n\n/// Convert string failed\n\n06\n\n/// Convert string failed\n\n07\n\ncase\n\ninvalidJsonResponse\n\n(\n\njson\n\n:\n\nString\n\n)\n\n07\n\ncase\n\ninvalidJsonResponse\n\n(\n\njson\n\n:\n\nString\n\n)\n\n08\n\n/// Missing callback\n\n08\n\n/// Missing callback\n\n09\n\ncase\n\nmissingPayloadCallback\n\n(\n\njson\n\n:\n\nString\n\n)\n\n09\n\ncase\n\nmissingPayloadCallback\n\n(\n\njson\n\n:\n\nString\n\n)\n\n10\n\n}\n\n10\n\n}", "explanation": "**Error Handling - Provider**\n\nThe `ProviderError` enum is a part of Magic's iOS SDK error handling mechanism. It categorizes various errors that might occur when using the wallet.\n\n**Main Purpose:**\n\nThe primary purpose of `ProviderError` is to provide a standardized way to handle and identify different types of errors that can occur when interacting with the wallet, specifically when it comes to provider-related issues.\n\n**Error Types:**\n\nThe `ProviderError` enum defines 10 error cases, which can be grouped into the following categories:\n\n1. **Initialization Errors**: These occur when the provider is not properly configured or initialized (errors 2 & 3).\n2. **JSON-RPC Request Errors**: These happen when there are issues with decoding the JSON-RPC request (error 4) or converting a string (errors 6 & 7).\n3. **Callback Errors**: These occur when there is no callback provided (error 8) or when the payload callback is missing (error 9).\n\n**Benefits:**\n\nThe `ProviderError` enum offers several benefits, including:\n\n* Standardized error handling: It provides a centralized way to handle and differentiate between various types of errors.\n* Improved debugging: By categorizing errors in a structured manner, developers can more easily identify and diagnose issues.\n* Enhanced user experience: By providing a clear and consistent error handling mechanism, developers can create a better user experience by providing actionable error messages and improving overall reliability.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/ios#chunk-52", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\npublic\n\nenum\n\nError\n\n:\n\nSwift\n\n.\n\nError\n\n{\n\n01\n\npublic\n\nenum\n\nError\n\n:\n\nSwift\n\n.\n\nError\n\n{\n\n02\n\n/// The response did not include expected results\n\n02\n\n/// The response did not include expected results\n\n03\n\ncase\n\nunexpectedResponse\n\n(\n\nSwift\n\n.\n\nError\n\n?\n\n)\n\n03\n\ncase\n\nunexpectedResponse\n\n(\n\nSwift\n\n.\n\nError\n\n?\n\n)\n\n04\n\n/// The server returned an unexpected response code\n\n04\n\n/// The server returned an unexpected response code\n\n05\n\ncase\n\ninvalidResponseCode\n\n05\n\ncase\n\ninvalidResponseCode\n\n06\n\n}\n\n06\n\n}", "explanation": "The provided documentation section appears to be from a detailed header, where 'Network' is the broader category that encapsulates an enumeration of potential errors that can occur when interacting with the Magic Labs embedded wallet.\n\nThe main purpose of this section, titled 'Error', is to outline the possible error cases that may happen during network interactions with Magic Labs API. These errors are categorized into two main cases: \n\n- `unexpectedResponse`: This case occurs when the response from the server is not as expected. It includes an optional error (`Swift.Error?`) that can further explain the unexpected response.\n  \n- `invalidResponseCode`: This case occurs when the server returns an unexpected response code.\n\nUltimately, the purpose of this section is to empower developers of Magic Labs embedded wallet iOS apps to handle and debug potential network errors that may arise while communicating with the Magic Labs API.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/ios#chunk-53", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\nenum\n\nError\n\n:\n\nSwift\n\n.\n\nError\n\n{\n\n01\n\nenum\n\nError\n\n:\n\nSwift\n\n.\n\nError\n\n{\n\n02\n\ncase\n\neventCallbackMissing\n\n02\n\ncase\n\neventCallbackMissing\n\n03\n\n}\n\n03\n\n}", "explanation": "**Event Callback Documentation Explanation**\n\nThe provided documentation snippet is about event handling in the Magic Labs embedded wallet SDK for iOS. This section explains the possible error scenarios that might occur when handling events.\n\n**Main Purpose:**\n\nThe main purpose of this section is to document the `eventCallbackMissing` error case, which can occur when an event callback is missing or not properly implemented.\n\n**Key Components:**\n\n* `enum Error`: defines a set of possible error cases for event handling.\n* `Error`: the base error type for event handling errors.\n* `eventCallbackMissing`: a specific error case indicating that an event callback is missing or not properly implemented.\n\n**Explanation:**\n\nWhen an event callback is missing or not implemented, the Magic Labs SDK will raise an `eventCallbackMissing` error. This error is likely used to notify developers that the required event callback is missing, which will prevent the event from being processed correctly.\n\n**Best Practices:**\n\nTo avoid this error, developers should ensure that all required event callbacks are properly implemented according to the Magic Labs SDK documentation.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/ios#chunk-54", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 GitHub\n\n\u2022 Demo\n\n\u2022 Goerli Testnet Faucet\n\nGitHub\n\nDemo\n\nGoerli Testnet Faucet", "explanation": "The '#Resources' section from the Magic Labs embedded wallet documentation is a collection of links that provide additional information and support for developers working with the Magic Labs iOS SDK. The main purpose of this section is to facilitate easy access to essential resources for effective development.\n\nHere's a brief explanation of each resource:\n\n1. **GitHub**: This link takes you to the Magic Labs GitHub repository, which houses the source code for the iOS SDK. Developers can access the code, submit issues, and contribute to the project.\n\n2. **Demo**: The Demo link likely redirects to a demo application or tutorial that demonstrates how to effectively use the Magic Labs iOS SDK. This can be a valuable resource for getting started and seeing the SDK in action.\n\n3. **Goerli Testnet Faucet**: The Goerli Testnet Faucet is a tool that provides test Ether (the cryptocurrency used on the Ethereum network) to test network wallets. This allows developers to test their Magic Labs iOS SDK integrated with a test wallet without expending actual cryptocurrency. This resource helps developers conduct thorough testing and debugging without wasting resources.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/ios#chunk-55", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nYou can allow your users to sign up & login into your web application with their Google account.", "explanation": "This documentation section, \"Google Social Login with Magic\", is about enabling users to sign up and log in to a web application using their Google account credentials. \n\nThe main purpose of this section is to provide instructions and guidance on how to integrate Google social login functionality into a Magic Labs embedded wallet, making it easier for users to access the application with their Google account information. This allows for a seamless and convenient sign-up and login process.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/login/social-logins/social-providers/google#chunk-1", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nIf your users are encountering an \"Access blocked: magic.link has not completed the Google verification process\" error, please read below.\n\nread below\n\nMagic SDK offers two OAuth extensions: v1 and v2. For web applications, it is recommended to use v2, while v1 should be used for mobile applications.\n\nv1\n\nv2\n\n#\n\n\u2022 You will need a Google Developer account\n\n\u2022 You will need to have the Magic SDK installed into your web app\n\n\u2022 You will need to have the Magic SDK - OAuth Extension installed into your web app\n\nGoogle Developer\n\nMagic SDK installed\n\nMagic SDK - OAuth Extension", "explanation": "**#Usage - #Prerequisites Overview**\n\nThis documentation section outlines the necessary steps and requirements for integrating Magic Labs' social login feature with Google in a web application. It's essential for resolving issues related to the \"Access blocked\" error.\n\n**Main Purpose**\n\nThe primary purpose of this section is to provide the necessary prerequisites for setting up Google social login using the Magic SDK. It covers the following essential points:\n\n1. **Google Developer account**: Users need to have a Google Developer account to access the Google API console.\n2. **Magic SDK installation**: The Magic SDK must be installed in the web application.\n3. **Magic SDK OAuth Extension installation**: The Magic SDK OAuth Extension, specifically v2 for web applications, must be installed in the web application.\n\nBy following these prerequisites, developers can ensure a smooth integration of Google social login with the Magic Labs embedded wallet, resolving potential issues like the \"Access blocked\" error.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/login/social-logins/social-providers/google#chunk-2", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nAfter installing the OAuth extension, you can now enable Google Login for your Magic app:\n\n\u2022 Follow Google\u2019s instructions to set up an OAuth 2.0 app\n\n\u2022 Obtain the OAuth Client ID and Client Secret from your Google Developer dashboard\n\n\u2022 Go to your Magic Dashboard\n\n\u2022 Select the Magic app for which you\u2019d like to enable Google Login, or create a new app\n\n\u2022 Navigate to Social Login from the sidebar\n\n\u2022 Click the toggle for Google / Gmail\n\n\u2022 Input the Client ID and Client Secret for your OAuth app\n\n\u2022 Copy the Redirect URI field from your Magic Dashboard and add it to your Google Dashboard\u2019s OAuth app configuration: \u2060\n\n\u2022 In Magic Dashboard, click \u201cSave\u201d\n\n\u2022 Click \"Test Connection\" to give your new Google OAuth flow a try!\n\nset up an OAuth 2.0 app\n\nGoogle Developer dashboard\n\nMagic Dashboard", "explanation": "The '#Google Setup (v1 extension)' section in the Magic Labs embedded wallet documentation is about enabling Google Login for Magic apps using OAuth 2.0. \n\nIts main purpose is to guide users through the process of setting up a Google OAuth app, which is necessary for integrating Google Login into their Magic app. The key steps include:\n\n1. Creating an OAuth 2.0 app in the Google Developer dashboard.\n2. Obtaining the Client ID and Client Secret from the Google Developer dashboard.\n3. Enabling Google Login in the Magic Dashboard by inputting the Client ID and Client Secret.\n4. Configuring the Redirect URI in the Google Dashboard.\n5. Testing the Google OAuth flow in the Magic Dashboard.\n\nBy following these steps, users can securely authenticate their Magic app users using their Google accounts, providing a seamless and convenient login experience.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/login/social-logins/social-providers/google#chunk-3", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 Follow above steps, but disregard Magic's Redirect URI in step 8\n\n\u2022 Instead, add the Redirect URI you are passing in as the redirectURI argument to the loginWithRedirect method\n\nCopy\n\n01\n\nawait\n\nmagic\n\n.\n\noauth2\n\n.\n\nloginWithRedirect\n\n(\n\n{\n\n01\n\nawait\n\nmagic\n\n.\n\noauth2\n\n.\n\nloginWithRedirect\n\n(\n\n{\n\n02\n\nprovider\n\n:\n\n'google'\n\n,\n\n02\n\nprovider\n\n:\n\n'google'\n\n,\n\n03\n\nredirectURI\n\n:\n\n'https://your-app.com/your/oauth/callback'\n\n,\n\n// <== whitelist this with Google\n\n03\n\nredirectURI\n\n:\n\n'https://your-app.com/your/oauth/callback'\n\n,\n\n// <== whitelist this with Google\n\n04\n\n}\n\n)\n\n;\n\n04\n\n}\n\n)\n\n;", "explanation": "**Google Setup (v2 extension) Explanation**\n\nThe \"#Google Setup (v2 extension)\" documentation section is a part of the Magic Labs embedded wallet authentication process. It describes an alternative way to set up integration with Google (a social login provider) using the Magic Labs `loginWithRedirect` method.\n\n**Main Purpose:**\n\nThe main purpose of this section is to guide users through the process of authenticating with Google using the Magic Labs embedded wallet, without relying on Magic's pre-set Redirect URI. Instead, users are required to pass their custom Redirect URI as an argument to the `loginWithRedirect` method.\n\n**Key Steps:**\n\n1. **Disregard Magic's Redirect URI:** Do not use Magic's pre-set Redirect URI in the setup process.\n2. **Pass Custom Redirect URI:** Pass your custom Redirect URI (e.g., `https://your-app.com/your/oauth/callback`) as the `redirectURI` argument to the `loginWithRedirect` method.\n3. **Whitelist your Redirect URI:** Ensure that you whitelist your custom Redirect URI with Google to enable a secure authentication flow.\n\nBy following these steps, users can customize their authentication setup with Google, allowing for a tailored and secure integration with the Magic Labs embedded wallet.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/login/social-logins/social-providers/google#chunk-4", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nIf your users are encountering an Access blocked: magic.link has not completed the Google verification process error, you will need to go to your Google developer dashboard and change your app's \"Publishing status\" from \"Testing\" to \"In production\".\n\nAccess blocked: magic.link has not completed the Google verification process\n\n\u2060To do this, please follow these steps:\n\n\u2022 Go to your app within the Google developer dashboard and select \"OAuth consent screen\" on the nav menu.\n\n\u2022 Under \"Publishing status\", select \"publish app\".\n\n\u2022 Once the status is set to \"In production\", you should no longer be encountering the error.\n\nNote: If your app meets certain criteria, you might be required to go through a verification process. In order to avoid this, we recommend removing any icons or logos you have added in the Google developer dashboard.\n\nThe full list of criteria that requires verification from Google is as follows:\n\n\u2022 You want your application to display an icon or app name\n\n\u2022 Your app requests authorization of any sensitive or restricted scopes\n\n\u2022 The number of authorized domains for your apps exceeds the domain count limit for a project\n\n\u2022 There are changes to the OAuth consent screen after your app has been approved\n\nexceeds the domain count limit", "explanation": "**Verification Process Overview**\n\nThe `#Verification Process` section of the Magic Labs embedded wallet documentation explains a common issue users may encounter when integrating Google authentication: the \"Access blocked: magic.link has not completed the Google verification process\" error. This error occurs when an app's Google developer dashboard status is set to \"Testing\" and requires a change to \"In production.\"\n\n**Main Purpose**\n\nThe primary purpose of this verification process is to ensure compliance with Google's authentication requirements. Specifically, when an app meets certain criteria, such as displaying a custom icon or requesting sensitive scopes, Google demands a verification process to ensure the app's authenticity and protect user data.\n\n**Key Takeaways**\n\nTo resolve the error, follow these steps:\n\n1. Go to the Google developer dashboard and select \"OAuth consent screen.\"\n2. Change the publishing status from \"Testing\" to \"In production.\"\n3. Remove any custom icons or logos to avoid triggering the verification process.\n\nBy following these steps and adhering to Google's verification requirements, developers can ensure a smooth authentication experience for their users and avoid potential errors.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/login/social-logins/social-providers/google#chunk-5", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nA user's email login and Google social login can automatically be linked so that logging in with either auth factor will resolve to a single wallet.\n\nEach login counts towards a unique monthly active wallet for billing purposes.\n\nThis is most useful when end users forget whether they signed up to your app using Google login or via email login. This prevents the user seeing 2 unique wallet addresses and the confusion of around which wallet holds their assets.\n\nBy default, this account linking is enabled in the dashboard when you enable Google Sign-In. This will ensure that users who log in with an email and Google social login using the same email address will resolve to the same wallet. Turning this feature off will prevent automatic linking for new users. It will not unlink existing users' social and email logins.", "explanation": "**Gmail Linking Overview**\n\nGmail linking is a feature that automatically connects a user's email login and Google social login to a single wallet. This ensures that logging in with either authentication method resolves to the same wallet address, eliminating confusion and duplicate accounts.\n\n**Main Purpose**\n\nThe main purpose of Gmail linking is to facilitate a seamless user experience by preventing duplicate wallet addresses and facilitating unified account management. This feature is particularly useful when users have difficulty remembering which authentication method they used to sign up, thereby reducing confusion and errors.\n\n**Key Benefits**\n\n- Simplifies account management by linking email login and Google social login to a single wallet.\n- Prevents duplicate wallet addresses, reducing confusion for users.\n- Allows users to access their assets from either authentication method.\n- Does not affect existing users' social and email login setup when the feature is turned off.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/login/social-logins/social-providers/google#chunk-6", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 Google Social Login Demo\n\nGoogle Social Login Demo", "explanation": "Based on the provided documentation, it appears that the section titled '#Resources' lists a set of resources available to support the understanding and implementation of Google Social Login.\n\nThe main resource mentioned is:\n\n\u2022 **Google Social Login Demo**\n\nThis is a live or demo environment where you can try and observe how the Google Social Login functionality works. The purpose of this demo resource is to:\n\n- Allow developers to test and visualize the Google Social Login flow.\n- Provide a hands-on experience to understand how the social login process works.\n- Facilitate testing and debugging of the Google Social Login integration.\n\nIn summary, the Google Social Login Demo is a valuable resource for developers and engineers to learn, test, and implement Google Social Login functionality into their applications, such as Magic Labs embedded wallets.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/login/social-logins/social-providers/google#chunk-7", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nTo interact with the Ethereum blockchain, Magic iOS SDK embeds Web3.swift as a sub-dependency. No more extra dependency is needed.\n\nWeb3.swift\n\nWeb3.swift", "explanation": "I'd be happy to explain the section 'How to Integrate with the Ethereum Blockchain using iOS - #Installation' from the provided documentation.\n\n**Overview:**\n\nThis section explains how to integrate with the Ethereum blockchain using the Magic Labs embedded wallet on an iOS device.\n\n**Main Purpose:**\n\nThe main purpose of this section is to guide developers on how to get started with interacting with the Ethereum blockchain using the Magic iOS SDK.\n\n**Key Point:**\n\nThe key point here is that the Magic iOS SDK comes with Web3.swift embedded as a sub-dependency, meaning developers don't need to add an additional dependency to interact with the Ethereum blockchain. This makes it easier to integrate Ethereum functionality into their iOS apps.\n\n**In a Nutshell:**\n\nTo integrate with the Ethereum blockchain on iOS, developers can rely on the Magic Labs embedded wallet, which includes Web3.swift. This saves them time and effort in getting started with Ethereum-based integrations.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/featured-chains/ethereum/ios#chunk-1", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nThe Magic class is the entry-point to the Magic SDK. It must be instantiated with a Magic publishable key.\n\nFollowing example is using Swift 5 with XCode 11. IOS demo will be open-sourced soon.\n\nCopy\n\n01\n\n// AppDelegate.swift\n\n01\n\n// AppDelegate.swift\n\n02\n\n02\n\n03\n\nimport\n\nMagicSDK\n\n03\n\nimport\n\nMagicSDK\n\n04\n\nimport\n\nUIKit\n\n04\n\nimport\n\nUIKit\n\n05\n\n05\n\n06\n\n@UIApplicationMain\n\n06\n\n@UIApplicationMain\n\n07\n\nfunc\n\napplication\n\n(\n\n_\n\napplication\n\n:\n\nUIApplication\n\n,\n\ndidFinishLaunchingWithOptions launchOptions\n\n:\n\n[\n\nUIApplication\n\n.\n\nLaunchOptionsKey\n\n:\n\nAny\n\n]\n\n?\n\n)\n\n->\n\nBool\n\n{\n\n07\n\nfunc\n\napplication\n\n(\n\n_\n\napplication\n\n:\n\nUIApplication\n\n,\n\ndidFinishLaunchingWithOptions launchOptions\n\n:\n\n[\n\nUIApplication\n\n.\n\nLaunchOptionsKey\n\n:\n\nAny\n\n]\n\n?\n\n)\n\n->\n\nBool\n\n{\n\n08\n\n08\n\n09\n\n// assign the newly created Magic instance to shared property\n\n09\n\n// assign the newly created Magic instance to shared property\n\n10\n\nMagic\n\n.\n\nshared\n\n=\n\nMagic\n\n(\n\n\"YOUR_PUBLISHABLE_API_KEY\"\n\n)\n\n;\n\n10\n\nMagic\n\n.\n\nshared\n\n=\n\nMagic\n\n(\n\n\"YOUR_PUBLISHABLE_API_KEY\"\n\n)\n\n;\n\n11\n\n11\n\n12\n\nreturn\n\ntrue\n\n12\n\nreturn\n\ntrue\n\n13\n\n}\n\n13\n\n}\n\nCopy\n\n01\n\n// ViewController.swift\n\n01\n\n// ViewController.swift\n\n02\n\n02\n\n03\n\nimport\n\nUIKit\n\n03\n\nimport\n\nUIKit\n\n04\n\nimport\n\nMagicSDK\n\n04\n\nimport\n\nMagicSDK\n\n05\n\nimport\n\nMagicSDK_Web3\n\n05\n\nimport\n\nMagicSDK_Web3\n\n06\n\n06\n\n07\n\nclass\n\nWeb3ViewController\n\n:\n\nUIViewController\n\n{\n\n07\n\nclass\n\nWeb3ViewController\n\n:\n\nUIViewController\n\n{\n\n08\n\n08\n\n09\n\nlet\n\nweb3\n\n=\n\nWeb3\n\n(\n\nprovider\n\n:\n\nMagic\n\n.\n\nshared\n\n.\n\nrpcProvider\n\n)\n\n09\n\nlet\n\nweb3\n\n=\n\nWeb3\n\n(\n\nprovider\n\n:\n\nMagic\n\n.\n\nshared\n\n.\n\nrpcProvider\n\n)\n\n10\n\n}\n\n10\n\n}", "explanation": "**Initialization in the Magic Embedded Wallet for iOS**\n\nThe **Initialization** section in the Magic Embedded Wallet documentation explains how to set up the Magic SDK, making it ready for use in an iOS application.\n\n**Main Purpose:**\n\nThe primary goal of initialization is to create a Magic instance, which serves as the entry-point to the Magic SDK. This instance requires a Magic publishable key, which acts as an identifier for your application.\n\n**Key Steps:**\n\n1. Import the Magic SDK and other necessary libraries (e.g., UIKit).\n2. Create a new instance of the Magic class, passing in your publishable API key as an argument.\n3. Assign the newly created Magic instance to a shared property (`Magic.shared`) for easy access throughout your application.\n\n**Example Code:**\n\nThe provided code snippet shows how to initialize the Magic SDK in two files: `AppDelegate.swift` and `Web3ViewController.swift`.\n\n*   In `AppDelegate.swift`, you'll find the code that creates the Magic instance and assigns it to the shared property:\n    ```swift\nMagic.shared = Magic(\"YOUR_PUBLISHABLE_API_KEY\")\n```\n*   In `Web3ViewController.swift`, you can access the Magic instance through the shared property:\n    ```swift\nlet web3 = Web3(provider: Magic.shared.rpcProvider)\n```\nBy following these steps and code examples, you can successfully initialize the Magic Embedded Wallet for your iOS application.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/featured-chains/ethereum/ios#chunk-2", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n#\n\nGoerli Block Explorer: https://goerli.etherscan.io\n\nhttps://goerli.etherscan.io\n\nGoerli Testnet Faucet: https://goerlifaucet.com\n\nhttps://goerlifaucet.com\n\nCopy\n\n01\n\n// AppDelegate.swift\n\n01\n\n// AppDelegate.swift\n\n02\n\nimport\n\nMagicSDK\n\n02\n\nimport\n\nMagicSDK\n\n03\n\n03\n\n04\n\nfunc\n\napplication\n\n(\n\n_\n\napplication\n\n:\n\nUIApplication\n\n,\n\ndidFinishLaunchingWithOptions launchOptions\n\n:\n\n[\n\nUIApplication\n\n.\n\nLaunchOptionsKey\n\n:\n\nAny\n\n]\n\n?\n\n)\n\n->\n\nBool\n\n{\n\n04\n\nfunc\n\napplication\n\n(\n\n_\n\napplication\n\n:\n\nUIApplication\n\n,\n\ndidFinishLaunchingWithOptions launchOptions\n\n:\n\n[\n\nUIApplication\n\n.\n\nLaunchOptionsKey\n\n:\n\nAny\n\n]\n\n?\n\n)\n\n->\n\nBool\n\n{\n\n05\n\n05\n\n06\n\n// assign to Magic singleton\n\n06\n\n// assign to Magic singleton\n\n07\n\nMagic\n\n.\n\nshared\n\n=\n\nMagic\n\n(\n\n\"YOUR_PUBLISHABLE_API_KEY\"\n\n,\n\nEthNetwork\n\n.\n\nrinkeby\n\n)\n\n;\n\n07\n\nMagic\n\n.\n\nshared\n\n=\n\nMagic\n\n(\n\n\"YOUR_PUBLISHABLE_API_KEY\"\n\n,\n\nEthNetwork\n\n.\n\nrinkeby\n\n)\n\n;\n\n08\n\n08\n\n09\n\nreturn\n\ntrue\n\n09\n\nreturn\n\ntrue\n\n10\n\n}\n\n10\n\n}", "explanation": "# Use Different Networks - #Testnet\n\n**Overview:**\n\nThis documentation section provides a guide on how to use Magic Labs' embedded wallet on testnets, specifically Goerli (a testnet for Ethereum). It helps developers to test and develop their applications using a testnet environment, which is a separate blockchain from the main Ethereum network.\n\n**Main Purpose:**\n\nThe main purpose of this section is to provide instructions on how to set up and use the Magic Labs' embedded wallet on a testnet (Goerli) by configuring the `MagicKit` with a specific testnet environment.\n\n**Key Points:**\n\n* It explains how to access the Goerli testnet faucet, where you can obtain test Ether for testing purposes.\n* It provides the Goerli block explorer URL for monitoring and debugging transactions.\n* It offers an example of how to configure the `MagicKit` with the Goerli testnet environment in an iOS application using Swift.\n* It sets the `Magic` singleton to use the Goerli testnet environment with a specified publishable API key.\n\n**Benefit:**\n\nUsing a testnet environment helps developers to test and develop their applications without affecting the main Ethereum network. By configuring the Magic Labs' embedded wallet with a testnet environment, developers can test their workflows, debug issues, and ensure a smooth transition to the mainnet.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/featured-chains/ethereum/ios#chunk-3", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nYou can allow specific URLs to interact with the Magic SDK, such as a custom RPC URL to send transactions to your node. The Content Security Policy (CSP) of a browser dictates what resources can be loaded. If you're used a dedicated wallet, you can update the policy in the settings page of the dashboard with your custom URL. If you're using a universal wallet, please reach out to support to get your URL added.\n\nNote: the use of a custom node will require the RPC URL to the project's Content Security Policy from your Magic dashboard. Refer to the CSP documentation.\n\nMagic dashboard\n\nCSP documentation\n\nCopy\n\n01\n\n// AppDelegate.swift\n\n01\n\n// AppDelegate.swift\n\n02\n\nimport\n\nMagicSDK\n\n02\n\nimport\n\nMagicSDK\n\n03\n\n03\n\n04\n\n// assign to Magic singleton\n\n04\n\n// assign to Magic singleton\n\n05\n\nfunc\n\napplication\n\n(\n\n_\n\napplication\n\n:\n\nUIApplication\n\n,\n\ndidFinishLaunchingWithOptions launchOptions\n\n:\n\n[\n\nUIApplication\n\n.\n\nLaunchOptionsKey\n\n:\n\nAny\n\n]\n\n?\n\n)\n\n->\n\nBool\n\n{\n\n05\n\nfunc\n\napplication\n\n(\n\n_\n\napplication\n\n:\n\nUIApplication\n\n,\n\ndidFinishLaunchingWithOptions launchOptions\n\n:\n\n[\n\nUIApplication\n\n.\n\nLaunchOptionsKey\n\n:\n\nAny\n\n]\n\n?\n\n)\n\n->\n\nBool\n\n{\n\n06\n\n06\n\n07\n\nlet\n\nconfig\n\n=\n\nCustomNodeConfiguration\n\n(\n\nrpcUrl\n\n:\n\n\"https://alchemy.io\"\n\n,\n\nchainId\n\n:\n\n1\n\n)\n\n07\n\nlet\n\nconfig\n\n=\n\nCustomNodeConfiguration\n\n(\n\nrpcUrl\n\n:\n\n\"https://alchemy.io\"\n\n,\n\nchainId\n\n:\n\n1\n\n)\n\n08\n\nMagic\n\n.\n\nshared\n\n=\n\nMagic\n\n(\n\napiKey\n\n:\n\n\"API_KEY\"\n\n,\n\ncustomNode\n\n:\n\nconfig\n\n)\n\n;\n\n08\n\nMagic\n\n.\n\nshared\n\n=\n\nMagic\n\n(\n\napiKey\n\n:\n\n\"API_KEY\"\n\n,\n\ncustomNode\n\n:\n\nconfig\n\n)\n\n;\n\n09\n\n09\n\n10\n\nreturn\n\ntrue\n\n10\n\nreturn\n\ntrue\n\n11\n\n}\n\n11\n\n}\n\nDo not set the custom nodes to local IP address (E.x. \"http://127.0.0.1\"). Local IP will point to the network environment inside mobile device / simulator\n\nhttp://127.0.0.1\"\n\n#\n\nCustomNodeConfiguration(rpcUrl: String, chainId: Int?)\n\nCustomNodeConfiguration(rpcUrl: String, chainId: Int?)\n\n\u2022 rpcUrl :Your own node URL\n\n\u2022 chainId : Your own node's chainId\n\nrpcUrl\n\nchainId\n\nEthNetwork\n\nEthNetwork\n\nCopy\n\n01\n\npublic\n\nenum\n\nEthNetwork\n\n:\n\nString\n\n{\n\n01\n\npublic\n\nenum\n\nEthNetwork\n\n:\n\nString\n\n{\n\n02\n\ncase\n\nmainnet\n\n02\n\ncase\n\nmainnet\n\n03\n\ncase\n\ngoerli\n\n03\n\ncase\n\ngoerli\n\n04\n\n}\n\n04\n\n}", "explanation": "**Custom Node - Associated Class**\n\nThe `Custom Node` feature in Magic Labs allows you to interact with a specific URL, such as a custom RPC URL to send transactions to your own node. This enables you to manage transactions and interactions with your own blockchain node, rather than relying on a centralized node.\n\n**Main Purpose:**\n\nThe main purpose of a `Custom Node` is to:\n\n1. Allow you to interact with your own blockchain node\n2. Manage transactions and interactions with your own node\n3. Provide a more secure and reliable way to manage your blockchain interactions\n\n**How it Works:**\n\nTo use a `Custom Node`, you need to:\n\n1. Set up a custom RPC URL to point to your own node\n2. Update the Content Security Policy (CSP) of your browser to allow interactions with your custom node\n3. Use the `CustomNodeConfiguration` class to configure your custom node settings\n\n**Configuration:**\n\nThe `CustomNodeConfiguration` class takes two parameters:\n\n1. `rpcUrl`: Your custom node URL (e.g. `https://your-node-url.com`)\n2. `chainId`: Your custom node's chain ID (e.g. `1` for Ethereum mainnet)\n\n**Example Code:**\n\n```swift\nlet config = CustomNodeConfiguration(rpcUrl: \"https://your-node-url.com\", chainId: 1)\nMagic.shared = Magic(apiKey: \"YOUR_API_KEY\", customNode: config)\n```\n\nNote: Don't set the custom node URL to a local IP address (e.g. `http://127.0.0.1`), as this will point to your mobile device's network environment.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/featured-chains/ethereum/ios#chunk-4", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n#\n\nCopy\n\n01\n\nimport\n\nMagicSDK\n\n01\n\nimport\n\nMagicSDK\n\n02\n\nimport\n\nMagicSDK_Web3\n\n02\n\nimport\n\nMagicSDK_Web3\n\n03\n\n03\n\n04\n\nclass\n\nWeb3ViewController\n\n:\n\nUIViewController\n\n{\n\n04\n\nclass\n\nWeb3ViewController\n\n:\n\nUIViewController\n\n{\n\n05\n\n05\n\n06\n\nvar\n\nweb3\n\n=\n\nWeb3\n\n(\n\nprovider\n\n:\n\nMagic\n\n.\n\nshared\n\n.\n\nrpcProvider\n\n)\n\n06\n\nvar\n\nweb3\n\n=\n\nWeb3\n\n(\n\nprovider\n\n:\n\nMagic\n\n.\n\nshared\n\n.\n\nrpcProvider\n\n)\n\n07\n\nvar\n\naccount\n\n:\n\nEthereumAddress\n\n?\n\n07\n\nvar\n\naccount\n\n:\n\nEthereumAddress\n\n?\n\n08\n\n08\n\n09\n\n// \u2b50\ufe0f After user is successfully authenticated\n\n09\n\n// \u2b50\ufe0f After user is successfully authenticated\n\n10\n\nfunc\n\nsendTransaction\n\n(\n\n)\n\n{\n\n10\n\nfunc\n\nsendTransaction\n\n(\n\n)\n\n{\n\n11\n\n11\n\n12\n\nguard\n\nlet\n\naccount\n\n=\n\nself\n\n.\n\naccount\n\nelse\n\n{\n\nreturn\n\n}\n\n12\n\nguard\n\nlet\n\naccount\n\n=\n\nself\n\n.\n\naccount\n\nelse\n\n{\n\nreturn\n\n}\n\n13\n\n13\n\n14\n\n// Construct a transaction\n\n14\n\n// Construct a transaction\n\n15\n\nlet\n\ntransaction\n\n=\n\nEthereumTransaction\n\n(\n\n15\n\nlet\n\ntransaction\n\n=\n\nEthereumTransaction\n\n(\n\n16\n\nfrom\n\n:\n\naccount\n\n,\n\n// from Get User Info section\n\n16\n\nfrom\n\n:\n\naccount\n\n,\n\n// from Get User Info section\n\n17\n\nto\n\n:\n\nEthereumAddress\n\n(\n\nhexString\n\n:\n\n\"0xE0cef4417a772512E6C95cEf366403839b0D6D6D\"\n\n)\n\n,\n\n17\n\nto\n\n:\n\nEthereumAddress\n\n(\n\nhexString\n\n:\n\n\"0xE0cef4417a772512E6C95cEf366403839b0D6D6D\"\n\n)\n\n,\n\n18\n\nvalue\n\n:\n\nEthereumQuantity\n\n(\n\nquantity\n\n:\n\n1\n\n.\n\ngwei\n\n)\n\n18\n\nvalue\n\n:\n\nEthereumQuantity\n\n(\n\nquantity\n\n:\n\n1\n\n.\n\ngwei\n\n)\n\n19\n\n)\n\n19\n\n)\n\n20\n\n20\n\n21\n\n// Submit transaction to the blockchain\n\n21\n\n// Submit transaction to the blockchain\n\n22\n\nweb3\n\n.\n\neth\n\n.\n\nsendTransaction\n\n(\n\ntransaction\n\n:\n\ntransaction\n\n)\n\n.\n\ndone\n\n{\n\n(\n\ntransactionHash\n\n)\n\nin\n\n22\n\nweb3\n\n.\n\neth\n\n.\n\nsendTransaction\n\n(\n\ntransaction\n\n:\n\ntransaction\n\n)\n\n.\n\ndone\n\n{\n\n(\n\ntransactionHash\n\n)\n\nin\n\n23\n\nprint\n\n(\n\ntransactionHash\n\n.\n\nhex\n\n(\n\n)\n\n)\n\n23\n\nprint\n\n(\n\ntransactionHash\n\n.\n\nhex\n\n(\n\n)\n\n)\n\n24\n\n}\n\n.\n\ncatch\n\n{\n\nerror\n\nin\n\n24\n\n}\n\n.\n\ncatch\n\n{\n\nerror\n\nin\n\n25\n\nprint\n\n(\n\nerror\n\n.\n\nlocalizedDescription\n\n)\n\n25\n\nprint\n\n(\n\nerror\n\n.\n\nlocalizedDescription\n\n)\n\n26\n\n}\n\n26\n\n}\n\n27\n\n}\n\n27\n\n}\n\n28\n\n}\n\n28\n\n}", "explanation": "**Explanation of #Common Methods - #Send Transaction**\n\nThe `#Send Transaction` section is a part of the Magic Labs embedded wallet documentation and it focuses on the functionality required to send a transaction on the Ethereum blockchain. This functionality involves the user's successful authentication using the Magic wallet.\n\n**Main Purpose**\n\nThe main purpose of the `#Send Transaction` section is to guide developers in implementing the logic required to construct and submit a transaction on the Ethereum network using the Magic Labs embedded wallet. This involves utilizing the Magic web3 wrapper to interact with the blockchain and ensuring the user's authentication is successful before proceeding with the transaction.\n\n**Key Steps:**\n\n1.  **Authentication**: The `sendTransaction` function is called after the user has successfully authenticated. This ensures that the user is connected to the Magic wallet before proceeding with the transaction.\n2.  **Transaction Construction**: A transaction object is created using the `EthereumTransaction` class. This involves specifying the `from` address, `to` address, and the amount of Ether to be transferred (in this case, 1 gwei).\n3.  **Transaction Submission**: The constructed transaction is then submitted to the blockchain using the `eth.sendTransaction` method provided by the Magic web3 wrapper.\n4.  **Error Handling**: The code catches any errors that may occur during the transaction submission process and prints an error message to the console if an issue arises.\n\n**Example Use Case:**\n\nTo use this functionality in your app, you would first need to set up the Magic Labs embedded wallet using the provided documentation. Once set up, you can call the `sendTransaction` function after successful user authentication, passing any necessary parameters (e.g., `to` address, value) to construct and submit the transaction.\n\nHere's a simplified example:\n\n```swift\n// Call sendTransaction after user authentication\nfunc sendTransaction() {\n    guard let account = self.account else { return }\n    \n    let transaction = EthereumTransaction(from: account,\n                                            to: EthereumAddress(\"0xE0cef4417a772512E6C95cEf366403839b0D6D6D\"),\n                                            value: EthereumQuantity(quantity: 1.gwei))\n    \n    web3.eth.sendTransaction(transaction: transaction, done: { (transactionHash) in\n        print(\"Transaction Hash: \", transactionHash.hex())\n    }).catch { (error) in\n        print(\"Error: \", error.localizedDescription)\n    }\n}\n```\n\nNote that this is a simplified example and you may need to adapt it to fit your specific requirements. Additionally, be sure to handle errors and provide clear instructions to your users before sending any transactions.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/featured-chains/ethereum/ios#chunk-5", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nMagic iOS SDK extends the functionality from Web3.swift to allow developers to sign Typed Data. Make sure to import MagicSDK while using these functions.\n\nimport MagicSDK\n\n#\n\nCopy\n\n01\n\nimport\n\nMagicSDK\n\n01\n\nimport\n\nMagicSDK\n\n02\n\nimport\n\nMagicSDK_Web3\n\n02\n\nimport\n\nMagicSDK_Web3\n\n03\n\nimport\n\nPromiseKit\n\n03\n\nimport\n\nPromiseKit\n\n04\n\n04\n\n05\n\nclass\n\nViewController\n\n:\n\nUIViewController\n\n{\n\n05\n\nclass\n\nViewController\n\n:\n\nUIViewController\n\n{\n\n06\n\n06\n\n07\n\nlet\n\nweb3\n\n=\n\nWeb3\n\n(\n\nprovider\n\n:\n\nMagic\n\n.\n\nshared\n\n.\n\nrpcProvider\n\n)\n\n07\n\nlet\n\nweb3\n\n=\n\nWeb3\n\n(\n\nprovider\n\n:\n\nMagic\n\n.\n\nshared\n\n.\n\nrpcProvider\n\n)\n\n08\n\nvar\n\naccount\n\n:\n\nEthereumAddress\n\n?\n\n08\n\nvar\n\naccount\n\n:\n\nEthereumAddress\n\n?\n\n09\n\n09\n\n10\n\nfunc\n\nethSign\n\n(\n\n)\n\n{\n\n10\n\nfunc\n\nethSign\n\n(\n\n)\n\n{\n\n11\n\nguard\n\nlet\n\naccount\n\n=\n\nself\n\n.\n\naccount\n\nelse\n\n{\n\nreturn\n\n}\n\n11\n\nguard\n\nlet\n\naccount\n\n=\n\nself\n\n.\n\naccount\n\nelse\n\n{\n\nreturn\n\n}\n\n12\n\n12\n\n13\n\nlet\n\nmessage\n\n=\n\ntry\n\n!\n\nEthereumData\n\n(\n\n\"Hello World\"\n\n.\n\ndata\n\n(\n\nusing\n\n:\n\n.\n\nutf8\n\n)\n\n!\n\n)\n\n13\n\nlet\n\nmessage\n\n=\n\ntry\n\n!\n\nEthereumData\n\n(\n\n\"Hello World\"\n\n.\n\ndata\n\n(\n\nusing\n\n:\n\n.\n\nutf8\n\n)\n\n!\n\n)\n\n14\n\nweb3\n\n.\n\neth\n\n.\n\nsign\n\n(\n\nfrom\n\n:\n\naccount\n\n,\n\nmessage\n\n:\n\nmessage\n\n)\n\n.\n\ndone\n\n(\n\n{\n\nresult\n\nin\n\n14\n\nweb3\n\n.\n\neth\n\n.\n\nsign\n\n(\n\nfrom\n\n:\n\naccount\n\n,\n\nmessage\n\n:\n\nmessage\n\n)\n\n.\n\ndone\n\n(\n\n{\n\nresult\n\nin\n\n15\n\nprint\n\n(\n\nresult\n\n.\n\nhex\n\n(\n\n)\n\n)\n\n15\n\nprint\n\n(\n\nresult\n\n.\n\nhex\n\n(\n\n)\n\n)\n\n16\n\n}\n\n)\n\n16\n\n}\n\n)\n\n17\n\n}\n\n17\n\n}\n\n18\n\n}\n\n18\n\n}", "explanation": "**Sign Message using `#Eth Sign`**\n\nThe `#Eth Sign` documentation section is about signing a message using the Ethereum blockchain with the Magic iOS SDK. This allows developers to use the Magic wallet to authenticate user identity by creating a digital signature for a specific message.\n\n**Main Purpose:**\n\nThe main purpose of `#Eth Sign` is to provide a convenient way for application developers to use the Magic wallet's signature capabilities to authenticate user actions or transactions on the Ethereum blockchain.\n\n**How it Works:**\n\n1. **Importing Magic SDK**: The Magic iOS SDK is imported, which provides the necessary functionality for using the `#Eth Sign` function.\n2. **Initializing Web3**: A `Web3` object is created using the Magic `rpcProvider`, which establishes a connection to the Ethereum blockchain.\n3. **Getting Account Address**: An Ethereum account address is retrieved from the Magic wallet.\n4. **Preparing Message**: A message is encoded as Ethereum data using the UTF-8 encoding scheme.\n5. **Signing Message**: The `ethSign` function is called with the account address and message, which generates a digital signature for the message.\n6. **Printing Signature**: The resulting signature is printed to the console in hexadecimal format.\n\n**In App Usage:**\n\nDevelopers can integrate the `#Eth Sign` functionality into their applications by:\n\n1. Importing the Magic SDK and initializing Web3.\n2. Retrieving the user's Ethereum account address from the Magic wallet.\n3. Preparing the message to be signed.\n4. Calling the `ethSign` function to generate a digital signature.\n5. Using the signature to authenticate user actions or transactions on the Ethereum blockchain.\n\nBy using the `#Eth Sign` function, developers can leverage the Magic wallet's security capabilities to provide a seamless and secure user experience for their applications.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/featured-chains/ethereum/ios#chunk-6", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\nimport\n\nMagicSDK\n\n01\n\nimport\n\nMagicSDK\n\n02\n\nimport\n\nMagicSDK_Web3\n\n02\n\nimport\n\nMagicSDK_Web3\n\n03\n\nimport\n\nPromiseKit\n\n03\n\nimport\n\nPromiseKit\n\n04\n\n04\n\n05\n\nclass\n\nWeb3ViewController\n\n:\n\nUIViewController\n\n{\n\n05\n\nclass\n\nWeb3ViewController\n\n:\n\nUIViewController\n\n{\n\n06\n\n06\n\n07\n\nlet\n\nweb3\n\n=\n\nWeb3\n\n(\n\nprovider\n\n:\n\nMagic\n\n.\n\nshared\n\n.\n\nrpcProvider\n\n)\n\n07\n\nlet\n\nweb3\n\n=\n\nWeb3\n\n(\n\nprovider\n\n:\n\nMagic\n\n.\n\nshared\n\n.\n\nrpcProvider\n\n)\n\n08\n\nvar\n\naccount\n\n:\n\nEthereumAddress\n\n?\n\n08\n\nvar\n\naccount\n\n:\n\nEthereumAddress\n\n?\n\n09\n\n09\n\n10\n\nfunc\n\nSignTypedDataLegacy\n\n(\n\n)\n\n{\n\n10\n\nfunc\n\nSignTypedDataLegacy\n\n(\n\n)\n\n{\n\n11\n\nguard\n\nlet\n\naccount\n\n=\n\nself\n\n.\n\naccount\n\nelse\n\n{\n\nreturn\n\n}\n\n11\n\nguard\n\nlet\n\naccount\n\n=\n\nself\n\n.\n\naccount\n\nelse\n\n{\n\nreturn\n\n}\n\n12\n\n12\n\n13\n\nlet\n\npayload\n\n=\n\nEIP712TypedDataLegacyFields\n\n(\n\ntype\n\n:\n\n\"string\"\n\n,\n\nname\n\n:\n\n\"Hello from Magic Labs\"\n\n,\n\nvalue\n\n:\n\n\"This message will be signed by you\"\n\n)\n\n13\n\nlet\n\npayload\n\n=\n\nEIP712TypedDataLegacyFields\n\n(\n\ntype\n\n:\n\n\"string\"\n\n,\n\nname\n\n:\n\n\"Hello from Magic Labs\"\n\n,\n\nvalue\n\n:\n\n\"This message will be signed by you\"\n\n)\n\n14\n\n14\n\n15\n\nweb3\n\n.\n\neth\n\n.\n\nsignTypedDataLegacy\n\n(\n\naccount\n\n:\n\naccount\n\n,\n\ndata\n\n:\n\n[\n\npayload\n\n]\n\n)\n\n.\n\ndone\n\n(\n\n{\n\nresult\n\nin\n\n15\n\nweb3\n\n.\n\neth\n\n.\n\nsignTypedDataLegacy\n\n(\n\naccount\n\n:\n\naccount\n\n,\n\ndata\n\n:\n\n[\n\npayload\n\n]\n\n)\n\n.\n\ndone\n\n(\n\n{\n\nresult\n\nin\n\n16\n\nprint\n\n(\n\nresult\n\n.\n\nhex\n\n(\n\n)\n\n)\n\n16\n\nprint\n\n(\n\nresult\n\n.\n\nhex\n\n(\n\n)\n\n)\n\n17\n\n}\n\n)\n\n17\n\n}\n\n)\n\n18\n\n}\n\n18\n\n}\n\n19\n\n}\n\n19\n\n}", "explanation": "**Sign Typed Data Legacy (V1) Documentation Section Explanation**\n\nThis section explains how to use the Magic Labs iOS SDK to sign typed data legacy using the Ethereum Web3 API.\n\n**Main Purpose:**\n\nThe primary purpose of this section is to demonstrate how to sign typed data legacy using the Magic Labs iOS SDK, specifically focusing on the Ethereum blockchain.\n\n**Key Components:**\n\n1. **Importing required libraries:** The code imports the necessary libraries, including `MagicSDK`, `MagicSDK_Web3`, and `PromiseKit`.\n2. **Creating a Web3ViewController:** The code defines a `Web3ViewController` class that inherits from `UIViewController`. This view controller will be used to interact with the Ethereum blockchain.\n3. **Initializing Web3:** The code initializes the `Web3` object with the Magic Labs RPC provider.\n4. **Defining the EIP712TypedDataLegacyFields payload:** The code defines an EIP-712 typed data legacy payload with `type`, `name`, and `value` fields.\n5. **Signing typed data legacy:** The code calls the `signTypedDataLegacy` function on the `web3` object, passing in the `account` and `data` (payload) parameters.\n6. **Printing the signed result:** The code prints the signed result in hexadecimal format.\n\n**Context:**\n\nThis code is likely used in an iOS app that integrates with the Magic Labs SDK to enable users to sign typed data legacy using the Ethereum blockchain. The app may use this functionality for various purposes, such as interacting with decentralized applications (dApps) or performing transactions on the Ethereum network.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/featured-chains/ethereum/ios#chunk-7", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\nimport\n\nMagicSDK\n\n01\n\nimport\n\nMagicSDK\n\n02\n\nimport\n\nMagicSDK_Web3\n\n02\n\nimport\n\nMagicSDK_Web3\n\n03\n\n03\n\n04\n\nclass\n\nWeb3ViewController\n\n:\n\nUIViewController\n\n{\n\n04\n\nclass\n\nWeb3ViewController\n\n:\n\nUIViewController\n\n{\n\n05\n\n05\n\n06\n\nlet\n\nweb3\n\n=\n\nWeb3\n\n(\n\nprovider\n\n:\n\nMagic\n\n.\n\nshared\n\n.\n\nrpcProvider\n\n)\n\n06\n\nlet\n\nweb3\n\n=\n\nWeb3\n\n(\n\nprovider\n\n:\n\nMagic\n\n.\n\nshared\n\n.\n\nrpcProvider\n\n)\n\n07\n\nvar\n\naccount\n\n:\n\nEthereumAddress\n\n?\n\n07\n\nvar\n\naccount\n\n:\n\nEthereumAddress\n\n?\n\n08\n\n08\n\n09\n\nfunc\n\nSignTypedData\n\n(\n\n)\n\n{\n\n09\n\nfunc\n\nSignTypedData\n\n(\n\n)\n\n{\n\n10\n\nguard\n\nlet\n\naccount\n\n=\n\nself\n\n.\n\naccount\n\nelse\n\n{\n\nreturn\n\n}\n\n10\n\nguard\n\nlet\n\naccount\n\n=\n\nself\n\n.\n\naccount\n\nelse\n\n{\n\nreturn\n\n}\n\n11\n\n11\n\n12\n\ndo\n\n{\n\n12\n\ndo\n\n{\n\n13\n\nlet\n\njson\n\n=\n\n\"\"\"\n\n13\n\nlet\n\njson\n\n=\n\n\"\"\"\n\n14\n\n{\"types\":{\"EIP712Domain\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"version\",\"type\":\"string\"},{\"name\":\"verifyingContract\",\"type\":\"address\"}],\"Greeting\":[{\"name\":\"contents\",\"type\":\"string\"}]},\"primaryType\":\"Greeting\",\"domain\":{\"name\":\"Magic\",\"version\":\"1\",\"verifyingContract\":\"0xE0cef4417a772512E6C95cEf366403839b0D6D6D\"},\"message\":{\"contents\":\"Hello, from Magic!\"}}\n\n14\n\n{\"types\":{\"EIP712Domain\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"version\",\"type\":\"string\"},{\"name\":\"verifyingContract\",\"type\":\"address\"}],\"Greeting\":[{\"name\":\"contents\",\"type\":\"string\"}]},\"primaryType\":\"Greeting\",\"domain\":{\"name\":\"Magic\",\"version\":\"1\",\"verifyingContract\":\"0xE0cef4417a772512E6C95cEf366403839b0D6D6D\"},\"message\":{\"contents\":\"Hello, from Magic!\"}}\n\n15\n\n\"\"\"\n\n.\n\ndata\n\n(\n\nusing\n\n:\n\n.\n\nutf8\n\n)\n\n!\n\n15\n\n\"\"\"\n\n.\n\ndata\n\n(\n\nusing\n\n:\n\n.\n\nutf8\n\n)\n\n!\n\n16\n\nlet\n\ntypedData\n\n=\n\ntry\n\nJSONDecoder\n\n(\n\n)\n\n.\n\ndecode\n\n(\n\nEIP712TypedData\n\n.\n\nself\n\n,\n\nfrom\n\n:\n\njson\n\n)\n\n16\n\nlet\n\ntypedData\n\n=\n\ntry\n\nJSONDecoder\n\n(\n\n)\n\n.\n\ndecode\n\n(\n\nEIP712TypedData\n\n.\n\nself\n\n,\n\nfrom\n\n:\n\njson\n\n)\n\n17\n\n17\n\n18\n\nweb3\n\n.\n\neth\n\n.\n\nsignTypedData\n\n(\n\naccount\n\n:\n\naccount\n\n,\n\ndata\n\n:\n\ntypedData\n\n)\n\n.\n\ndone\n\n(\n\n{\n\nresult\n\nin\n\n18\n\nweb3\n\n.\n\neth\n\n.\n\nsignTypedData\n\n(\n\naccount\n\n:\n\naccount\n\n,\n\ndata\n\n:\n\ntypedData\n\n)\n\n.\n\ndone\n\n(\n\n{\n\nresult\n\nin\n\n19\n\nprint\n\n(\n\nresult\n\n.\n\nhex\n\n(\n\n)\n\n)\n\n19\n\nprint\n\n(\n\nresult\n\n.\n\nhex\n\n(\n\n)\n\n)\n\n20\n\n}\n\n)\n\n20\n\n}\n\n)\n\n21\n\n}\n\ncatch\n\n{\n\n21\n\n}\n\ncatch\n\n{\n\n22\n\nprint\n\n(\n\nerror\n\n.\n\nlocalizedDescription\n\n)\n\n22\n\nprint\n\n(\n\nerror\n\n.\n\nlocalizedDescription\n\n)\n\n23\n\n}\n\n23\n\n}\n\n24\n\n}\n\n24\n\n}\n\n25\n\n}\n\n25\n\n}", "explanation": "The section '#Sign Typed Data v3(EIP 712)' is a documented code snippet that explains how to sign typed data using EIP-712 (Ethropic Identity Protocol-712) on the Ethereum blockchain through the Magic Labs embedded wallet. \n\nEIP-712 is a standard for encoding and signing messages and data in a secure way. This process involves creating a JSON typed data object, which is then securely signed by the user's wallet (Magic Labs embedded wallet in this case).\n\nHere's a simplified explanation of the main purpose and steps:\n\n1. **Obtaining the user's account**: The code first checks if an Ethereum account is available.\n2. **Creating the typed data JSON object**: The code creates a JSON object that describes the data that needs to be signed. This object includes information like the domain, message, and typed data structure.\n3. **Decoding the JSON object**: The JSON object is then decoded into a native Swift object using a JSON decoder.\n4. **Signing the typed data**: The decoded typed data is then passed to the `eth_signTypedData` function using the Magic Labs embedded wallet, which securely signs the data.\n5. **Printing the signed data**: The signed result is then printed in hexadecimal format.\n\nThe main purpose of this code snippet is to demonstrate how to securely sign typed data using EIP-712 on the Ethereum blockchain using the Magic Labs embedded wallet. This process can be used in various use cases, such as:\n\n- Authenticating a user's identity\n- Proving ownership of digital assets\n- Signing transactions and messages\n\nOverall, this code snippet showcases a significant aspect of Ethereum's security and authentication capabilities. By following these steps, developers can securely and efficiently sign typed data using EIP-712 in their applications.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/featured-chains/ethereum/ios#chunk-8", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\nimport\n\nMagicSDK\n\n01\n\nimport\n\nMagicSDK\n\n02\n\nimport\n\nMagicSDK_Web3\n\n02\n\nimport\n\nMagicSDK_Web3\n\n03\n\n03\n\n04\n\nclass\n\nWeb3ViewController\n\n:\n\nUIViewController\n\n{\n\n04\n\nclass\n\nWeb3ViewController\n\n:\n\nUIViewController\n\n{\n\n05\n\n05\n\n06\n\nlet\n\nweb3\n\n=\n\nWeb3\n\n(\n\nprovider\n\n:\n\nMagic\n\n.\n\nshared\n\n.\n\nrpcProvider\n\n)\n\n06\n\nlet\n\nweb3\n\n=\n\nWeb3\n\n(\n\nprovider\n\n:\n\nMagic\n\n.\n\nshared\n\n.\n\nrpcProvider\n\n)\n\n07\n\nvar\n\naccount\n\n:\n\nEthereumAddress\n\n?\n\n07\n\nvar\n\naccount\n\n:\n\nEthereumAddress\n\n?\n\n08\n\n08\n\n09\n\nfunc\n\nSignTypedData\n\n(\n\n)\n\n{\n\n09\n\nfunc\n\nSignTypedData\n\n(\n\n)\n\n{\n\n10\n\nguard\n\nlet\n\naccount\n\n=\n\nself\n\n.\n\naccount\n\nelse\n\n{\n\nreturn\n\n}\n\n10\n\nguard\n\nlet\n\naccount\n\n=\n\nself\n\n.\n\naccount\n\nelse\n\n{\n\nreturn\n\n}\n\n11\n\n11\n\n12\n\ndo\n\n{\n\n12\n\ndo\n\n{\n\n13\n\nlet\n\njson\n\n=\n\n\"\"\"\n\n13\n\nlet\n\njson\n\n=\n\n\"\"\"\n\n14\n\n{\"domain\":{\"chainId\":1,\"name\":\"Ether Mail\",\"verifyingContract\":\"0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC\",\"version\":\"1\"},\"message\":{\"contents\":\"Hello, Bob!\",\"from\":{\"name\":\"Cow\",\"wallets\":[\"0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826\",\"0xDeaDbeefdEAdbeefdEadbEEFdeadbeEFdEaDbeeF\"]},\"to\":[{\"name\":\"Bob\",\"wallets\":[\"0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB\",\"0xB0BdaBea57B0BDABeA57b0bdABEA57b0BDabEa57\",\"0xB0B0b0b0b0b0B000000000000000000000000000\"]}]},\"primaryType\":\"Mail\",\"types\":{\"EIP712Domain\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"version\",\"type\":\"string\"},{\"name\":\"chainId\",\"type\":\"uint256\"},{\"name\":\"verifyingContract\",\"type\":\"address\"}],\"Group\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"members\",\"type\":\"Person[]\"}],\"Mail\":[{\"name\":\"from\",\"type\":\"Person\"},{\"name\":\"to\",\"type\":\"Person[]\"},{\"name\":\"contents\",\"type\":\"string\"}],\"Person\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"wallets\",\"type\":\"address[]\"}]}}\n\n14\n\n{\"domain\":{\"chainId\":1,\"name\":\"Ether Mail\",\"verifyingContract\":\"0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC\",\"version\":\"1\"},\"message\":{\"contents\":\"Hello, Bob!\",\"from\":{\"name\":\"Cow\",\"wallets\":[\"0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826\",\"0xDeaDbeefdEAdbeefdEadbEEFdeadbeEFdEaDbeeF\"]},\"to\":[{\"name\":\"Bob\",\"wallets\":[\"0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB\",\"0xB0BdaBea57B0BDABeA57b0bdABEA57b0BDabEa57\",\"0xB0B0b0b0b0b0B000000000000000000000000000\"]}]},\"primaryType\":\"Mail\",\"types\":{\"EIP712Domain\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"version\",\"type\":\"string\"},{\"name\":\"chainId\",\"type\":\"uint256\"},{\"name\":\"verifyingContract\",\"type\":\"address\"}],\"Group\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"members\",\"type\":\"Person[]\"}],\"Mail\":[{\"name\":\"from\",\"type\":\"Person\"},{\"name\":\"to\",\"type\":\"Person[]\"},{\"name\":\"contents\",\"type\":\"string\"}],\"Person\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"wallets\",\"type\":\"address[]\"}]}}\n\n15\n\n\"\"\"\n\n.\n\ndata\n\n(\n\nusing\n\n:\n\n.\n\nutf8\n\n)\n\n!\n\n15\n\n\"\"\"\n\n.\n\ndata\n\n(\n\nusing\n\n:\n\n.\n\nutf8\n\n)\n\n!\n\n16\n\nlet\n\ntypedData\n\n=\n\njson\n\n.\n\ndata\n\n(\n\nusing\n\n:\n\n.\n\nutf8\n\n)\n\n!\n\n16\n\nlet\n\ntypedData\n\n=\n\njson\n\n.\n\ndata\n\n(\n\nusing\n\n:\n\n.\n\nutf8\n\n)\n\n!\n\n17\n\nlet\n\ntypedDataV4\n\n=\n\ntry\n\nJSONDecoder\n\n(\n\n)\n\n.\n\ndecode\n\n(\n\nEIP712TypedData\n\n.\n\nself\n\n,\n\nfrom\n\n:\n\ntypedData\n\n)\n\n17\n\nlet\n\ntypedDataV4\n\n=\n\ntry\n\nJSONDecoder\n\n(\n\n)\n\n.\n\ndecode\n\n(\n\nEIP712TypedData\n\n.\n\nself\n\n,\n\nfrom\n\n:\n\ntypedData\n\n)\n\n18\n\nweb3\n\n.\n\neth\n\n.\n\nsignTypedDataV4\n\n(\n\naccount\n\n:\n\naddress\n\n,\n\ndata\n\n:\n\ntypedDataV4\n\n)\n\n.\n\ndone\n\n(\n\n{\n\nresponse\n\nin\n\n18\n\nweb3\n\n.\n\neth\n\n.\n\nsignTypedDataV4\n\n(\n\naccount\n\n:\n\naddress\n\n,\n\ndata\n\n:\n\ntypedDataV4\n\n)\n\n.\n\ndone\n\n(\n\n{\n\nresponse\n\nin\n\n19\n\nprint\n\n(\n\nresponse\n\n.\n\nhex\n\n(\n\n)\n\n)\n\n19\n\nprint\n\n(\n\nresponse\n\n.\n\nhex\n\n(\n\n)\n\n)\n\n20\n\n}\n\n)\n\n20\n\n}\n\n)\n\n21\n\n// Catch decoding error\n\n21\n\n// Catch decoding error\n\n22\n\n}\n\ncatch\n\nlet\n\nDecodingError\n\n.\n\ntypeMismatch\n\n(\n\ntype\n\n,\n\ncontext\n\n)\n\n{\n\n22\n\n}\n\ncatch\n\nlet\n\nDecodingError\n\n.\n\ntypeMismatch\n\n(\n\ntype\n\n,\n\ncontext\n\n)\n\n{\n\n23\n\nprint\n\n(\n\n\"Type '\n\n\\(\n\ntype\n\n)\n\n' mismatch:\"\n\n,\n\ncontext\n\n.\n\ndebugDescription\n\n)\n\n23\n\nprint\n\n(\n\n\"Type '\n\n\\(\n\ntype\n\n)\n\n' mismatch:\"\n\n,\n\ncontext\n\n.\n\ndebugDescription\n\n)\n\n24\n\nprint\n\n(\n\n\"codingPath:\"\n\n,\n\ncontext\n\n.\n\ncodingPath\n\n)\n\n24\n\nprint\n\n(\n\n\"codingPath:\"\n\n,\n\ncontext\n\n.\n\ncodingPath\n\n)\n\n25\n\n}\n\ncatch\n\n{\n\n25\n\n}\n\ncatch\n\n{\n\n26\n\nself\n\n.\n\nshowResult\n\n(\n\nerror\n\n.\n\nlocalizedDescription\n\n)\n\n26\n\nself\n\n.\n\nshowResult\n\n(\n\nerror\n\n.\n\nlocalizedDescription\n\n)\n\n27\n\n}\n\n27\n\n}\n\n28\n\n}\n\n28\n\n}\n\n29\n\n}\n\n29\n\n}", "explanation": "The documentation section you provided is about implementing the EIP-712 signing of typed data version 4 (also known as Sign Typed Data V4) on the Ethereum blockchain. EIP-712 is a standardized library for Ethereum digital signatures. The main purpose of this function is to securely sign a typed data message using a user's Ethereum account and return the signed message.\n\nHere is a concise breakdown of what Sign Typed Data V4 is and its main purpose:\n\n**What is Sign Typed Data V4?**\n\nSign Typed Data V4 is a process of signing a typed data message on the Ethereum blockchain using a user's Ethereum account. The typed data message contains a JSON object with a specific structure, which is then signed using a cryptographic algorithm.\n\n**Main Purpose**\n\nThe main purpose of Sign Typed Data V4 is to enable secure and standardized digital signatures on the Ethereum blockchain. This allows for various use cases such as:\n\n* Authentication: Verify the authenticity of a user or entity\n* Data integrity: Ensure the integrity of data transfers or transactions\n* Smart contract interactions: Authenticate and authorize interactions with smart contracts\n\nIn the provided documentation, the `SignTypedDataV4` function takes several steps to sign the typed data message:\n\n1. Encodes the typed data JSON object into a UTF-8 format\n2. Decodes the encoded typed data into an `EIP712TypedData` object using a JSON decoder\n3. Calls the `eth_signTypedDataV4` method of the Ethereum Web3 API to sign the typed data message\n4. Returns the signed message response\n\nThe function also catches and handles any decoding errors or other exceptions that may occur during the signing process.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/featured-chains/ethereum/ios#chunk-9", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\nimport\n\nMagicSDK\n\n01\n\nimport\n\nMagicSDK\n\n02\n\nimport\n\nMagicSDK_Web3\n\n02\n\nimport\n\nMagicSDK_Web3\n\n03\n\nimport\n\nPromiseKit\n\n03\n\nimport\n\nPromiseKit\n\n04\n\n04\n\n05\n\nclass\n\nWeb3ViewController\n\n:\n\nUIViewController\n\n{\n\n05\n\nclass\n\nWeb3ViewController\n\n:\n\nUIViewController\n\n{\n\n06\n\n06\n\n07\n\nvar\n\nweb3\n\n=\n\nWeb3\n\n(\n\nprovider\n\n:\n\nMagic\n\n.\n\nshared\n\n.\n\nrpcProvider\n\n)\n\n07\n\nvar\n\nweb3\n\n=\n\nWeb3\n\n(\n\nprovider\n\n:\n\nMagic\n\n.\n\nshared\n\n.\n\nrpcProvider\n\n)\n\n08\n\n08\n\n09\n\n// \u2b50\ufe0f After user is successfully authenticated\n\n09\n\n// \u2b50\ufe0f After user is successfully authenticated\n\n10\n\n@IBOutlet\n\nweak\n\nvar\n\naccountLabel\n\n:\n\nUILabel\n\n!\n\n10\n\n@IBOutlet\n\nweak\n\nvar\n\naccountLabel\n\n:\n\nUILabel\n\n!\n\n11\n\n11\n\n12\n\nfunc\n\ngetAccount\n\n(\n\n)\n\n{\n\n12\n\nfunc\n\ngetAccount\n\n(\n\n)\n\n{\n\n13\n\n13\n\n14\n\nfirstly\n\n{\n\n14\n\nfirstly\n\n{\n\n15\n\n// Get user's Ethereum public address\n\n15\n\n// Get user's Ethereum public address\n\n16\n\nweb3\n\n.\n\neth\n\n.\n\naccounts\n\n(\n\n)\n\n16\n\nweb3\n\n.\n\neth\n\n.\n\naccounts\n\n(\n\n)\n\n17\n\n}\n\n.\n\ndone\n\n{\n\naccounts\n\n->\n\nVoid\n\nin\n\n17\n\n}\n\n.\n\ndone\n\n{\n\naccounts\n\n->\n\nVoid\n\nin\n\n18\n\nif\n\nlet\n\naccount\n\n=\n\naccounts\n\n.\n\nfirst\n\n{\n\n18\n\nif\n\nlet\n\naccount\n\n=\n\naccounts\n\n.\n\nfirst\n\n{\n\n19\n\n// Set to UILa\n\n19\n\n// Set to UILa\n\n20\n\nself\n\n.\n\naccountLabel\n\n.\n\ntext\n\n=\n\naccount\n\n.\n\nhex\n\n(\n\neip55\n\n:\n\nfalse\n\n)\n\n20\n\nself\n\n.\n\naccountLabel\n\n.\n\ntext\n\n=\n\naccount\n\n.\n\nhex\n\n(\n\neip55\n\n:\n\nfalse\n\n)\n\n21\n\n}\n\nelse\n\n{\n\n21\n\n}\n\nelse\n\n{\n\n22\n\nprint\n\n(\n\n\"No Account Found\"\n\n)\n\n22\n\nprint\n\n(\n\n\"No Account Found\"\n\n)\n\n23\n\n}\n\n23\n\n}\n\n24\n\n}\n\n.\n\ncatch\n\n{\n\nerror\n\nin\n\n24\n\n}\n\n.\n\ncatch\n\n{\n\nerror\n\nin\n\n25\n\nprint\n\n(\n\n\"Error loading accounts and balance:\n\n\\(\n\nerror\n\n)\n\n\"\n\n)\n\n25\n\nprint\n\n(\n\n\"Error loading accounts and balance:\n\n\\(\n\nerror\n\n)\n\n\"\n\n)\n\n26\n\n}\n\n26\n\n}\n\n27\n\n}\n\n27\n\n}\n\n28\n\n}\n\n28\n\n}", "explanation": "**#Get User Info**\n\nThis section of the Magic Labs embedded wallet documentation explains how to retrieve a user's Ethereum public address after successful authentication. This functionality is crucial for users to access their wallet information.\n\n**Main Purpose:**\n\nThe `getAccount` method in the provided code snippet fetches the user's Ethereum public address from the Magic RPC Provider. The purpose of this method is:\n\n1.  To securely retrieve the user's Ethereum public address (also known as an Ethereum account) after they have been successfully authenticated.\n2.  To display the Ethereum public address in a `UILabel` on the screen.\n\n**Key Code Snippets:**\n\nHere are the essential parts of the code:\n\n*   `web3 = Web3(provider: Magic.shared.rpcProvider)`:\n    Creates a Web3 instance with the Magic RPC Provider.\n*   `web3.eth.accounts()`: This method attempts to retrieve the user's Ethereum public address.\\\n    Note that a `PromiseKit` is used (`firstly { ... }`) to handle the asynchronous call.\n*   `accountLabel.text = account.hex(eip55: false)`:\n    Sets the text property of the `accountLabel` to the retrieved Ethereum public address, in hex format.\n*   `print(\"No Account Found\")` and `print(\"Error loading accounts and balance: \\(error)\")`:\n    Handle cases when no account is found or an error is encountered while loading accounts and balance.\n\nBy understanding this code, developers can efficiently integrate the Magic Labs embedded wallet into their projects and retrieve user information securely.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/featured-chains/ethereum/ios#chunk-10", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nIn this example, we'll be demonstrating how to use Magic with Web3.swift to interact with Solidity smart contracts. The simple Hello World contract allows anyone to read and write a message to it.\n\nCopy\n\n01\n\npragma solidity\n\n^\n\n0.5\n\n.10\n\n;\n\n01\n\npragma solidity\n\n^\n\n0.5\n\n.10\n\n;\n\n02\n\n02\n\n03\n\ncontract\n\nHelloWorld\n\n{\n\n03\n\ncontract\n\nHelloWorld\n\n{\n\n04\n\n04\n\n05\n\nstring\n\npublic\n\nmessage\n\n;\n\n05\n\nstring\n\npublic\n\nmessage\n\n;\n\n06\n\n06\n\n07\n\nconstructor\n\n(\n\nstring memory initMessage\n\n)\n\npublic\n\n{\n\n07\n\nconstructor\n\n(\n\nstring memory initMessage\n\n)\n\npublic\n\n{\n\n08\n\nmessage\n\n=\n\ninitMessage\n\n;\n\n08\n\nmessage\n\n=\n\ninitMessage\n\n;\n\n09\n\n}\n\n09\n\n}\n\n10\n\n10\n\n11\n\nfunction\n\nupdate\n\n(\n\nstring memory newMessage\n\n)\n\npublic\n\n{\n\n11\n\nfunction\n\nupdate\n\n(\n\nstring memory newMessage\n\n)\n\npublic\n\n{\n\n12\n\nmessage\n\n=\n\nnewMessage\n\n;\n\n12\n\nmessage\n\n=\n\nnewMessage\n\n;\n\n13\n\n}\n\n13\n\n}\n\n14\n\n}\n\n14\n\n}\n\n#\n\nCopy\n\n01\n\nimport\n\nMagicSDK\n\n01\n\nimport\n\nMagicSDK\n\n02\n\nimport\n\nMagicSDK_Web3\n\n02\n\nimport\n\nMagicSDK_Web3\n\n03\n\n03\n\n04\n\nclass\n\nWeb3ViewController\n\n:\n\nUIViewController\n\n{\n\n04\n\nclass\n\nWeb3ViewController\n\n:\n\nUIViewController\n\n{\n\n05\n\n05\n\n06\n\nlet\n\nweb3\n\n=\n\nWeb3\n\n(\n\nprovider\n\n:\n\nMagic\n\n.\n\nshared\n\n.\n\nrpcProvider\n\n)\n\n06\n\nlet\n\nweb3\n\n=\n\nWeb3\n\n(\n\nprovider\n\n:\n\nMagic\n\n.\n\nshared\n\n.\n\nrpcProvider\n\n)\n\n07\n\nvar\n\naccount\n\n:\n\nEthereumAddress\n\n?\n\n07\n\nvar\n\naccount\n\n:\n\nEthereumAddress\n\n?\n\n08\n\n// \u2b50\ufe0f After user is successfully authenticated\n\n08\n\n// \u2b50\ufe0f After user is successfully authenticated\n\n09\n\n09\n\n10\n\nfunc\n\ndeployContract\n\n(\n\n)\n\n{\n\n10\n\nfunc\n\ndeployContract\n\n(\n\n)\n\n{\n\n11\n\n11\n\n12\n\nguard\n\nlet\n\naccount\n\n=\n\nself\n\n.\n\naccount\n\nelse\n\n{\n\nreturn\n\n}\n\n12\n\nguard\n\nlet\n\naccount\n\n=\n\nself\n\n.\n\naccount\n\nelse\n\n{\n\nreturn\n\n}\n\n13\n\n13\n\n14\n\ndo\n\n{\n\n14\n\ndo\n\n{\n\n15\n\nlet\n\ncontractABI\n\n=\n\n\"\"\"\n\n15\n\nlet\n\ncontractABI\n\n=\n\n\"\"\"\n\n16\n\n[{\"constant\":false,\"inputs\":[{\"name\":\"newMessage\",\"type\":\"string\"}],\"name\":\"update\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"message\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"initMessage\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]\n\n16\n\n[{\"constant\":false,\"inputs\":[{\"name\":\"newMessage\",\"type\":\"string\"}],\"name\":\"update\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"message\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"initMessage\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]\n\n17\n\n\"\"\"\n\n.\n\ndata\n\n(\n\nusing\n\n:\n\n.\n\nutf8\n\n)\n\n!\n\n17\n\n\"\"\"\n\n.\n\ndata\n\n(\n\nusing\n\n:\n\n.\n\nutf8\n\n)\n\n!\n\n18\n\nlet\n\ncontractByteCode\n\n=\n\ntry\n\nEthereumData\n\n(\n\n\"0x608060405234801561001057600080fd5b5060405161047f38038061047f8339818101604052602081101561003357600080fd5b81019080805164010000000081111561004b57600080fd5b8281019050602081018481111561006157600080fd5b815185600182028301116401000000008211171561007e57600080fd5b5050929190505050806000908051906020019061009c9291906100a3565b5050610148565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106100e457805160ff1916838001178555610112565b82800160010185558215610112579182015b828111156101115782518255916020019190600101906100f6565b5b50905061011f9190610123565b5090565b61014591905b80821115610141576000816000905550600101610129565b5090565b90565b610328806101576000396000f3fe608060405234801561001057600080fd5b5060043610610053576000357c0100000000000000000000000000000000000000000000000000000000900480633d7403a314610058578063e21f37ce14610113575b600080fd5b6101116004803603602081101561006e57600080fd5b810190808035906020019064010000000081111561008b57600080fd5b82018360208201111561009d57600080fd5b803590602001918460018302840111640100000000831117156100bf57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050610196565b005b61011b6101b0565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561015b578082015181840152602081019050610140565b50505050905090810190601f1680156101885780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b80600090805190602001906101ac92919061024e565b5050565b60008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156102465780601f1061021b57610100808354040283529160200191610246565b820191906000526020600020905b81548152906001019060200180831161022957829003601f168201915b505050505081565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061028f57805160ff19168380011785556102bd565b828001600101855582156102bd579182015b828111156102bc5782518255916020019190600101906102a1565b5b5090506102ca91906102ce565b5090565b6102f091905b808211156102ec5760008160009055506001016102d4565b5090565b9056fea265627a7a7230582003ae1ef5a63bf058bfd2b31398bdee39d3cbfbb7fbf84235f4bc2ec352ee810f64736f6c634300050a0032\"\n\n)\n\n18\n\nlet\n\ncontractByteCode\n\n=\n\ntry\n\nEthereumData\n\n(\n\n\"0x608060405234801561001057600080fd5b5060405161047f38038061047f8339818101604052602081101561003357600080fd5b81019080805164010000000081111561004b57600080fd5b8281019050602081018481111561006157600080fd5b815185600182028301116401000000008211171561007e57600080fd5b5050929190505050806000908051906020019061009c9291906100a3565b5050610148565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106100e457805160ff1916838001178555610112565b82800160010185558215610112579182015b828111156101115782518255916020019190600101906100f6565b5b50905061011f9190610123565b5090565b61014591905b80821115610141576000816000905550600101610129565b5090565b90565b610328806101576000396000f3fe608060405234801561001057600080fd5b5060043610610053576000357c0100000000000000000000000000000000000000000000000000000000900480633d7403a314610058578063e21f37ce14610113575b600080fd5b6101116004803603602081101561006e57600080fd5b810190808035906020019064010000000081111561008b57600080fd5b82018360208201111561009d57600080fd5b803590602001918460018302840111640100000000831117156100bf57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050610196565b005b61011b6101b0565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561015b578082015181840152602081019050610140565b50505050905090810190601f1680156101885780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b80600090805190602001906101ac92919061024e565b5050565b60008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156102465780601f1061021b57610100808354040283529160200191610246565b820191906000526020600020905b81548152906001019060200180831161022957829003601f168201915b505050505081565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061028f57805160ff19168380011785556102bd565b828001600101855582156102bd579182015b828111156102bc5782518255916020019190600101906102a1565b5b5090506102ca91906102ce565b5090565b6102f091905b808211156102ec5760008160009055506001016102d4565b5090565b9056fea265627a7a7230582003ae1ef5a63bf058bfd2b31398bdee39d3cbfbb7fbf84235f4bc2ec352ee810f64736f6c634300050a0032\"\n\n)\n\n19\n\n19\n\n20\n\n/// Create Contract instance\n\n20\n\n/// Create Contract instance\n\n21\n\nlet\n\ncontract\n\n=\n\ntry\n\nweb3\n\n.\n\neth\n\n.\n\nContract\n\n(\n\njson\n\n:\n\ncontractABI\n\n,\n\nabiKey\n\n:\n\nnil\n\n,\n\naddress\n\n:\n\nnil\n\n)\n\n21\n\nlet\n\ncontract\n\n=\n\ntry\n\nweb3\n\n.\n\neth\n\n.\n\nContract\n\n(\n\njson\n\n:\n\ncontractABI\n\n,\n\nabiKey\n\n:\n\nnil\n\n,\n\naddress\n\n:\n\nnil\n\n)\n\n22\n\n22\n\n23\n\n/// Deploy contract\n\n23\n\n/// Deploy contract\n\n24\n\nguard\n\nlet\n\ninvocation\n\n=\n\ncontract\n\n.\n\ndeploy\n\n(\n\nbyteCode\n\n:\n\ncontractByteCode\n\n)\n\nelse\n\n{\n\nreturn\n\n}\n\n24\n\nguard\n\nlet\n\ninvocation\n\n=\n\ncontract\n\n.\n\ndeploy\n\n(\n\nbyteCode\n\n:\n\ncontractByteCode\n\n)\n\nelse\n\n{\n\nreturn\n\n}\n\n25\n\ninvocation\n\n.\n\nsend\n\n(\n\nfrom\n\n:\n\nself\n\n.\n\naccount\n\n!\n\n,\n\ngas\n\n:\n\n1025256\n\n,\n\ngasPrice\n\n:\n\n0\n\n)\n\n{\n\n(\n\nhash\n\n,\n\nerror\n\n)\n\nin\n\n25\n\ninvocation\n\n.\n\nsend\n\n(\n\nfrom\n\n:\n\nself\n\n.\n\naccount\n\n!\n\n,\n\ngas\n\n:\n\n1025256\n\n,\n\ngasPrice\n\n:\n\n0\n\n)\n\n{\n\n(\n\nhash\n\n,\n\nerror\n\n)\n\nin\n\n26\n\nprint\n\n(\n\nhash\n\n?\n\n.\n\nhex\n\n(\n\n)\n\n??\n\n\"Missing Hash\"\n\n)\n\n26\n\nprint\n\n(\n\nhash\n\n?\n\n.\n\nhex\n\n(\n\n)\n\n??\n\n\"Missing Hash\"\n\n)\n\n27\n\nprint\n\n(\n\nerror\n\n?\n\n.\n\nlocalizedDescription\n\n??\n\n\"Error\"\n\n)\n\n27\n\nprint\n\n(\n\nerror\n\n?\n\n.\n\nlocalizedDescription\n\n??\n\n\"Error\"\n\n)\n\n28\n\n}\n\n28\n\n}\n\n29\n\n}\n\ncatch\n\n{\n\n29\n\n}\n\ncatch\n\n{\n\n30\n\nprint\n\n(\n\nerror\n\n.\n\nlocalizedDescription\n\n)\n\n30\n\nprint\n\n(\n\nerror\n\n.\n\nlocalizedDescription\n\n)\n\n31\n\n}\n\n31\n\n}\n\n32\n\n}\n\n32\n\n}\n\n33\n\n}\n\n33\n\n}", "explanation": "The section titled '#Smart Contract - #Deploy Contract' is a code demonstration from the Magic Labs embedded wallet documentation for interacting with a Solidity smart contract on the Ethereum network. \n\nHere's a breakdown of its main purpose:\n\n1. **Defining a Simple Smart Contract:**\n   - The example begins by defining a simple smart contract called \"HelloWorld\" in Solidity. This contract has two functions: one to initialize the contract with a message, and another to update the message.\n\n2. **Importing Web3.swift Library:**\n   - The documentation then imports the Web3.swift library, which is used to interact with the Ethereum blockchain.\n\n3. **Deploying the Smart Contract:**\n   - The main focus of the documentation is on deploying the \"HelloWorld\" smart contract on the Ethereum blockchain.\n   - To deploy the contract, an instance of the contract ABI (Application Binary Interface) is created, and the `deploy` method of the contract instance is called with the contract's bytecode as an argument.\n   - The `deploy` method is asynchronous, and its completion is handled within a `send` method call.\n\n4. **Handling Deployment:**\n   - After the contract is deployed, its transaction hash is printed to the console if the deployment is successful.\n\n5. **Error Handling:**\n   - Any errors that occur during the deployment process are caught and their localized descriptions are printed to the console.\n\nThe purpose of this code is to demonstrate how to deploy a simple smart contract on the Ethereum blockchain using Web3.swift and the Magic Labs embedded wallet.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/featured-chains/ethereum/ios#chunk-11", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\nimport\n\nMagicSDK\n\n01\n\nimport\n\nMagicSDK\n\n02\n\nimport\n\nMagicSDK_Web3\n\n02\n\nimport\n\nMagicSDK_Web3\n\n03\n\n03\n\n04\n\nclass\n\nMagicViewController\n\n:\n\nUIViewController\n\n{\n\n04\n\nclass\n\nMagicViewController\n\n:\n\nUIViewController\n\n{\n\n05\n\n05\n\n06\n\nlet\n\nweb3\n\n=\n\nWeb3\n\n(\n\nprovider\n\n:\n\nMagic\n\n.\n\nshared\n\n.\n\nrpcProvider\n\n)\n\n06\n\nlet\n\nweb3\n\n=\n\nWeb3\n\n(\n\nprovider\n\n:\n\nMagic\n\n.\n\nshared\n\n.\n\nrpcProvider\n\n)\n\n07\n\nvar\n\naccount\n\n:\n\nEthereumAddress\n\n?\n\n07\n\nvar\n\naccount\n\n:\n\nEthereumAddress\n\n?\n\n08\n\n08\n\n09\n\n// \u2b50\ufe0f After user is successfully authenticated\n\n09\n\n// \u2b50\ufe0f After user is successfully authenticated\n\n10\n\n10\n\n11\n\nfunc\n\ngetMessage\n\n(\n\n)\n\n{\n\n11\n\nfunc\n\ngetMessage\n\n(\n\n)\n\n{\n\n12\n\n12\n\n13\n\ndo\n\n{\n\n13\n\ndo\n\n{\n\n14\n\n14\n\n15\n\n/// Construct contract instance\n\n15\n\n/// Construct contract instance\n\n16\n\nlet\n\ncontractABI\n\n=\n\n\"\"\"\n\n16\n\nlet\n\ncontractABI\n\n=\n\n\"\"\"\n\n17\n\n[{\"constant\":false,\"inputs\":[{\"name\":\"newMessage\",\"type\":\"string\"}],\"name\":\"update\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"message\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"initMessage\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]\n\n17\n\n[{\"constant\":false,\"inputs\":[{\"name\":\"newMessage\",\"type\":\"string\"}],\"name\":\"update\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"message\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"initMessage\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]\n\n18\n\n\"\"\"\n\n.\n\ndata\n\n(\n\nusing\n\n:\n\n.\n\nutf8\n\n)\n\n!\n\n18\n\n\"\"\"\n\n.\n\ndata\n\n(\n\nusing\n\n:\n\n.\n\nutf8\n\n)\n\n!\n\n19\n\nlet\n\ncontract\n\n=\n\ntry\n\nweb3\n\n.\n\neth\n\n.\n\nContract\n\n(\n\njson\n\n:\n\ncontractABI\n\n,\n\nabiKey\n\n:\n\nnil\n\n,\n\naddress\n\n:\n\nEthereumAddress\n\n(\n\nethereumValue\n\n:\n\n\"0x8b211dfebf490a648f6de859dfbed61fa22f35e0\"\n\n)\n\n)\n\n19\n\nlet\n\ncontract\n\n=\n\ntry\n\nweb3\n\n.\n\neth\n\n.\n\nContract\n\n(\n\njson\n\n:\n\ncontractABI\n\n,\n\nabiKey\n\n:\n\nnil\n\n,\n\naddress\n\n:\n\nEthereumAddress\n\n(\n\nethereumValue\n\n:\n\n\"0x8b211dfebf490a648f6de859dfbed61fa22f35e0\"\n\n)\n\n)\n\n20\n\n20\n\n21\n\n/// contract call\n\n21\n\n/// contract call\n\n22\n\ncontract\n\n[\n\n\"message\"\n\n]\n\n?\n\n(\n\n)\n\n.\n\ncall\n\n(\n\n)\n\n{\n\nresponse\n\n,\n\nerror\n\nin\n\n22\n\ncontract\n\n[\n\n\"message\"\n\n]\n\n?\n\n(\n\n)\n\n.\n\ncall\n\n(\n\n)\n\n{\n\nresponse\n\n,\n\nerror\n\nin\n\n23\n\nif\n\nlet\n\nresponse\n\n=\n\nresponse\n\n,\n\nlet\n\nmessage\n\n=\n\nresponse\n\n[\n\n\"\"\n\n]\n\nas\n\n?\n\nString\n\n{\n\n23\n\nif\n\nlet\n\nresponse\n\n=\n\nresponse\n\n,\n\nlet\n\nmessage\n\n=\n\nresponse\n\n[\n\n\"\"\n\n]\n\nas\n\n?\n\nString\n\n{\n\n24\n\nprint\n\n(\n\nmessage\n\n.\n\ndescription\n\n)\n\n24\n\nprint\n\n(\n\nmessage\n\n.\n\ndescription\n\n)\n\n25\n\n}\n\nelse\n\n{\n\n25\n\n}\n\nelse\n\n{\n\n26\n\nprint\n\n(\n\nerror\n\n?\n\n.\n\nlocalizedDescription\n\n??\n\n\"Failed to get response\"\n\n)\n\n26\n\nprint\n\n(\n\nerror\n\n?\n\n.\n\nlocalizedDescription\n\n??\n\n\"Failed to get response\"\n\n)\n\n27\n\n}\n\n27\n\n}\n\n28\n\n}\n\n28\n\n}\n\n29\n\n}\n\ncatch\n\n{\n\n29\n\n}\n\ncatch\n\n{\n\n30\n\n/// Error handling\n\n30\n\n/// Error handling\n\n31\n\nprint\n\n(\n\nerror\n\n.\n\nlocalizedDescription\n\n)\n\n31\n\nprint\n\n(\n\nerror\n\n.\n\nlocalizedDescription\n\n)\n\n32\n\n}\n\n32\n\n}\n\n33\n\n}\n\n33\n\n}\n\n34\n\n}\n\n34\n\n}", "explanation": "The section titled '#Read From Contract' from the provided documentation is about how to read data from a contract on the Ethereum blockchain using the Magic SDK for iOS. \n\n**Main Purpose:**\n\nThe main purpose of this code snippet is to show how to:\n\n1. Obtain an instance of a Web3 contract using the Magic SDK.\n2. Call a function on that contract to retrieve data.\n3. Handle any errors that may occur during the process.\n\n**Key Steps:**\n\n1. Import the necessary libraries, including Magic SDK and Web3.\n2. Set up a Web3 instance with the Magic SDK's RPC provider.\n3. Construct the contract instance from the ABI (Application Binary Interface) of the contract and its address.\n4. Call the 'message' function on the contract to retrieve the current message.\n5. Handle the response and print the result to the console.\n6. Catch and handle any errors that may occur during the process.\n\n**Context:**\n\nThis code is typically used in an application that interacts with a smart contract on the Ethereum blockchain. The application would use the Magic SDK to authenticate the user, obtain their Ethereum wallet address, and then use this code snippet to read data from the contract.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/featured-chains/ethereum/ios#chunk-12", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\nimport\n\nMagicSDK\n\n01\n\nimport\n\nMagicSDK\n\n02\n\nimport\n\nMagicSDK_Web3\n\n02\n\nimport\n\nMagicSDK_Web3\n\n03\n\n03\n\n04\n\nclass\n\nMagicViewController\n\n:\n\nUIViewController\n\n{\n\n04\n\nclass\n\nMagicViewController\n\n:\n\nUIViewController\n\n{\n\n05\n\n05\n\n06\n\nlet\n\nweb3\n\n=\n\nWeb3\n\n(\n\nprovider\n\n:\n\nMagic\n\n.\n\nshared\n\n.\n\nrpcProvider\n\n)\n\n06\n\nlet\n\nweb3\n\n=\n\nWeb3\n\n(\n\nprovider\n\n:\n\nMagic\n\n.\n\nshared\n\n.\n\nrpcProvider\n\n)\n\n07\n\nvar\n\naccount\n\n:\n\nEthereumAddress\n\n?\n\n07\n\nvar\n\naccount\n\n:\n\nEthereumAddress\n\n?\n\n08\n\n08\n\n09\n\n// \u2b50\ufe0f After user is successfully authenticated\n\n09\n\n// \u2b50\ufe0f After user is successfully authenticated\n\n10\n\n10\n\n11\n\nfunc\n\nwriteMessage\n\n(\n\n)\n\n{\n\n11\n\nfunc\n\nwriteMessage\n\n(\n\n)\n\n{\n\n12\n\n12\n\n13\n\nguard\n\nlet\n\naccount\n\n=\n\nself\n\n.\n\naccount\n\nelse\n\n{\n\nreturn\n\n}\n\n13\n\nguard\n\nlet\n\naccount\n\n=\n\nself\n\n.\n\naccount\n\nelse\n\n{\n\nreturn\n\n}\n\n14\n\n14\n\n15\n\ndo\n\n{\n\n15\n\ndo\n\n{\n\n16\n\n/// contract instance\n\n16\n\n/// contract instance\n\n17\n\nlet\n\ncontractABI\n\n=\n\n\"\"\"\n\n17\n\nlet\n\ncontractABI\n\n=\n\n\"\"\"\n\n18\n\n[{\"constant\":false,\"inputs\":[{\"name\":\"newMessage\",\"type\":\"string\"}],\"name\":\"update\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"message\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"initMessage\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]\n\n18\n\n[{\"constant\":false,\"inputs\":[{\"name\":\"newMessage\",\"type\":\"string\"}],\"name\":\"update\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"message\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"initMessage\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]\n\n19\n\n\"\"\"\n\n.\n\ndata\n\n(\n\nusing\n\n:\n\n.\n\nutf8\n\n)\n\n!\n\n19\n\n\"\"\"\n\n.\n\ndata\n\n(\n\nusing\n\n:\n\n.\n\nutf8\n\n)\n\n!\n\n20\n\nlet\n\ncontract\n\n=\n\ntry\n\nweb3\n\n.\n\neth\n\n.\n\nContract\n\n(\n\njson\n\n:\n\ncontractABI\n\n,\n\nabiKey\n\n:\n\nnil\n\n,\n\naddress\n\n:\n\nEthereumAddress\n\n(\n\nethereumValue\n\n:\n\n\"0x8b211dfebf490a648f6de859dfbed61fa22f35e0\"\n\n)\n\n)\n\n20\n\nlet\n\ncontract\n\n=\n\ntry\n\nweb3\n\n.\n\neth\n\n.\n\nContract\n\n(\n\njson\n\n:\n\ncontractABI\n\n,\n\nabiKey\n\n:\n\nnil\n\n,\n\naddress\n\n:\n\nEthereumAddress\n\n(\n\nethereumValue\n\n:\n\n\"0x8b211dfebf490a648f6de859dfbed61fa22f35e0\"\n\n)\n\n)\n\n21\n\n21\n\n22\n\n/// contract call\n\n22\n\n/// contract call\n\n23\n\nguard\n\nlet\n\ntransaction\n\n=\n\ncontract\n\n[\n\n\"update\"\n\n]\n\n?\n\n(\n\n\"NEW_MESSAGE\"\n\n)\n\n.\n\ncreateTransaction\n\n(\n\n23\n\nguard\n\nlet\n\ntransaction\n\n=\n\ncontract\n\n[\n\n\"update\"\n\n]\n\n?\n\n(\n\n\"NEW_MESSAGE\"\n\n)\n\n.\n\ncreateTransaction\n\n(\n\n24\n\nnonce\n\n:\n\n0\n\n,\n\n24\n\nnonce\n\n:\n\n0\n\n,\n\n25\n\nfrom\n\n:\n\naccount\n\n,\n\n25\n\nfrom\n\n:\n\naccount\n\n,\n\n26\n\nvalue\n\n:\n\n0\n\n,\n\n26\n\nvalue\n\n:\n\n0\n\n,\n\n27\n\ngas\n\n:\n\nEthereumQuantity\n\n(\n\n150000\n\n)\n\n,\n\n27\n\ngas\n\n:\n\nEthereumQuantity\n\n(\n\n150000\n\n)\n\n,\n\n28\n\ngasPrice\n\n:\n\nEthereumQuantity\n\n(\n\nquantity\n\n:\n\n21\n\n.\n\ngwei\n\n)\n\n28\n\ngasPrice\n\n:\n\nEthereumQuantity\n\n(\n\nquantity\n\n:\n\n21\n\n.\n\ngwei\n\n)\n\n29\n\n)\n\nelse\n\n{\n\nreturn\n\n}\n\n29\n\n)\n\nelse\n\n{\n\nreturn\n\n}\n\n30\n\n30\n\n31\n\nweb3\n\n.\n\neth\n\n.\n\nsendTransaction\n\n(\n\ntransaction\n\n:\n\ntransaction\n\n)\n\n.\n\ndone\n\n(\n\n{\n\ntxHash\n\nin\n\n31\n\nweb3\n\n.\n\neth\n\n.\n\nsendTransaction\n\n(\n\ntransaction\n\n:\n\ntransaction\n\n)\n\n.\n\ndone\n\n(\n\n{\n\ntxHash\n\nin\n\n32\n\nprint\n\n(\n\ntxHash\n\n.\n\nhex\n\n(\n\n)\n\n)\n\n32\n\nprint\n\n(\n\ntxHash\n\n.\n\nhex\n\n(\n\n)\n\n)\n\n33\n\n}\n\n)\n\n.\n\ncatch\n\n{\n\nerror\n\nin\n\n33\n\n}\n\n)\n\n.\n\ncatch\n\n{\n\nerror\n\nin\n\n34\n\nprint\n\n(\n\nerror\n\n.\n\nlocalizedDescription\n\n)\n\n34\n\nprint\n\n(\n\nerror\n\n.\n\nlocalizedDescription\n\n)\n\n35\n\n}\n\n35\n\n}\n\n36\n\n}\n\ncatch\n\n{\n\n36\n\n}\n\ncatch\n\n{\n\n37\n\nprint\n\n(\n\nerror\n\n.\n\nlocalizedDescription\n\n)\n\n37\n\nprint\n\n(\n\nerror\n\n.\n\nlocalizedDescription\n\n)\n\n38\n\n}\n\n38\n\n}\n\n39\n\n}\n\n39\n\n}\n\n40\n\n}\n\n40\n\n}", "explanation": "**Writing to a Contract: Key Concepts**\n\nThe provided documentation section, titled '#Write to Contract', explains how to write data to a contract on the Ethereum blockchain using the Magic Labs embedded wallet. Here's a breakdown of the main concepts and their purposes:\n\n### Importing the Magic SDK and Web3\n\nThe first step is to import the Magic SDK and Web3 libraries, which enable interaction with the Ethereum blockchain.\n\n```swift\nimport MagicSDK\nimport MagicSDK_Web3\n```\n\n### Setting up the Web3 Provider\n\nThe `web3` variable is created and initialized using the `Magic` shared `rpcProvider`, which connects to the Ethereum blockchain.\n\n```swift\nlet web3 = Web3(provider: Magic.shared.rpcProvider)\n```\n\n### Authenticating the User\n\nBefore writing to the contract, the user must be authenticated. This is not shown in this code snippet, but it's a crucial step that ensures the user's identity is verified before interacting with the contract.\n\n### Defining the Contract ABI\n\nThe contract ABI (Application Binary Interface) is a string that defines the contract's functions and their corresponding inputs and outputs. In this example, the contract has two functions: `update` and `message`.\n\n```swift\nlet contractABI = \"\"\"\n...\n\"\"\"\n```\n\n### Instantiating the Contract\n\nUsing the `web3` provider, the contract instance is created using the `Contract` class. The contract's address is specified as `0x8b211dfebf490a648f6de859dfbed61fa22f35e0`.\n\n```swift\nlet contract = try web3.eth.Contract(json: contractABI, abiKey: nil, address: EthereumAddress(ethereumValue: \"0x8b211dfebf490a648f6de859dfbed61fa22f35e0\"))\n```\n\n### Calling the Contract Function\n\nThe `update` function is called with a single input: the string `\"NEW_MESSAGE\"`. The `createTransaction` method creates a transaction object with the specified inputs and outputs.\n\n```swift\nguard let transaction = contract[\n  \"update\"\n]?(.createTransaction(\n    nonce: 0,\n    from: account,\n    value: 0,\n    gas: EthereumQuantity(150000),\n    gasPrice: EthereumQuantity(quantity: 21.gwei)\n  )) else {\n  return\n}\n```\n\n### Sending the Transaction\n\nThe transaction is sent using the `web3.eth.sendTransaction` method. If successful, the transaction hash is printed to the console.\n\n```swift\nweb3.eth.sendTransaction(transaction: transaction)\n.done({\n  txHash in\n  print(txHash.hex())\n})\n.catch { error in\n  print(error.localizedDescription)\n}\n```\n\nIn summary, this code snippet demonstrates how to write data to a contract on the Ethereum blockchain using the Magic Labs embedded wallet. It covers setting up the web3 provider, defining the contract ABI, instantiating the contract, calling the contract function, and sending the transaction.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/featured-chains/ethereum/ios#chunk-13", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 Magic iOS SDK\n\n\u2022 Magic iOS Demo\n\nMagic iOS SDK\n\nMagic iOS Demo", "explanation": "The '#Resources' section is a collection of useful links and references provided by Magic Labs to support users who are working with their embedded wallet documentation, specifically for the Ethereum blockchain on iOS devices. \n\nIts main purpose is to give users easy access to related resources, allowing them to quickly find the necessary information and tools to integrate and work with the Magic iOS SDK. This can save time and make the development process more efficient and streamlined.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/featured-chains/ethereum/ios#chunk-14", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nYou can allow your users to sign up & login into your web application with their Facebook account.", "explanation": "This section is about integrating Facebook social login functionality with the Magic Labs embedded wallet. Its main purpose is to enable users to create an account or log in to a web application using their Facebook account credentials, making it easier and more convenient for users to access your application without having to remember additional login credentials.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/login/social-logins/social-providers/facebook#chunk-1", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n#\n\n\u2022 You will need a Facebook Developer account\n\n\u2022 You will need to have the Magic SDK installed into your web application\n\n\u2022 You will need to have the Magic SDK - OAuth Extension installed into your web application\n\nFacebook Developer\n\nMagic SDK installed\n\nMagic SDK - OAuth Extension", "explanation": "The '#Usage - #Prerequisites' section from the Magic Labs documentation outlines the necessary setup and requirements to implement Facebook social login using Magic Labs.\n\n**Prerequisites:**\n\n1. **Facebook Developer Account**: You need to have a Facebook Developer account to authenticate with Facebook.\n2. **Magic SDK Installed**: You must have the Magic SDK (Software Development Kit) installed in your web application to enable Magic Labs functionality.\n3. **Magic SDK - OAuth Extension Installed**: You also need to have the Magic SDK - OAuth Extension installed in your web application, which allows for OAuth-based authentication.\n\nThese prerequisites are essential to successfully authenticate users using Facebook social login with Magic Labs. By understanding and meeting these requirements, developers can implement Facebook social login in their web applications using Magic Labs.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/login/social-logins/social-providers/facebook#chunk-2", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nAfter installing the OAuth extension, you can now enable Facebook Login for your Magic application:\n\n\u2022 Follow Facebook's instructions to register a Facebook application\n\n\u2022 When creating your Facebook application, select Authenticate and request data from users with Facebook Login, click Next and follow the prompts to add app information\n\n\u2022 On the next screen, you'll be presented with steps to customize your Facebook application. Click Customize adding a Facebook Login button.\n\n\u2022 Go to your Magic Dashboard\n\n\u2022 Select the Magic app for which you\u2019d like to enable Facebook Login, or create a new application\n\n\u2022 Navigate to Authentication -> Social Logins from the sidebar\n\n\u2022 Click the toggle for Facebook\n\n\u2022 Copy the Redirect URI field from your Magic Dashboard\n\n\u2022 Back in your Facebook Login Settings, paste the Redirect URI in the Valid OAuth Redirect URIs input and save the changes\n\n\u2022 From the main Facebook dashboard, click on App Settings -> Basic\n\n\u2022 Copy the App Id and App Secret\n\n\u2022 From the Magic Dashboard, add your App Id and App Secret to your Facebook Login configuration\n\n\u2022 Click Save\n\n\u2022 Click Test Connection to give your new Facebook OAuth flow a try!\n\nregister a Facebook application\n\nMagic Dashboard", "explanation": "**Facebook Setup (v1 extension) Explanation**\n\nThe Facebook Setup section is a step-by-step guide to integrating Facebook Login with the Magic Labs embedded wallet. This integration allows your application to authenticate users using their Facebook accounts.\n\n**Main Purpose**\n\nThe primary purpose of this setup is to:\n\n1. Connect your Magic application with Facebook's OAuth extension to enable Facebook Login.\n2. Configure the Magic Dashboard to use Facebook as a social login provider.\n\n**Key Steps:**\n\n1. Register a Facebook application, selecting \"Authenticate and request data from users with Facebook Login\".\n2. Enable Facebook Login and customize the application.\n3. Copy the Redirect URI from the Magic Dashboard and paste it into the Facebook Login Settings.\n4. Copy the Facebook App Id and App Secret, then add them to the Magic Dashboard configuration.\n5. Save and test the Facebook OAuth flow connection.\n\nBy following these steps, you can successfully integrate Facebook Login with your Magic Labs embedded wallet, enabling users to log in with their Facebook credentials.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/login/social-logins/social-providers/facebook#chunk-3", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 Follow above steps, but disregard Magic's Redirect URI in step 8\n\n\u2022 In step 9, paste the Redirect URI you are passing in as the redirectURI argument to the loginWithRedirect method\n\nCopy\n\n01\n\nawait\n\nmagic\n\n.\n\noauth2\n\n.\n\nloginWithRedirect\n\n(\n\n{\n\n01\n\nawait\n\nmagic\n\n.\n\noauth2\n\n.\n\nloginWithRedirect\n\n(\n\n{\n\n02\n\nprovider\n\n:\n\n'facebook'\n\n,\n\n02\n\nprovider\n\n:\n\n'facebook'\n\n,\n\n03\n\nredirectURI\n\n:\n\n'https://your-app.com/your/oauth/callback'\n\n,\n\n// <== whitelist this with Facebook\n\n03\n\nredirectURI\n\n:\n\n'https://your-app.com/your/oauth/callback'\n\n,\n\n// <== whitelist this with Facebook\n\n04\n\n}\n\n)\n\n;\n\n04\n\n}\n\n)\n\n;", "explanation": "**Facebook Setup (v2 extension)**\n\nThis section of the Magic Labs embedded wallet documentation outlines the steps for integrating Facebook login functionality into your application using the v2 extension of Magic's OAuth library.\n\n**Main Purpose:**\n\nThe main purpose of this section is to guide developers on how to set up Facebook login with Magic, including whitelisting specific redirect URIs, which are required by Facebook for security reasons.\n\n**Key Steps:**\n\n1. Follow the usual steps for setting up Magic OAuth, but disregard the Redirect URI provided by Magic.\n2. In the `loginWithRedirect` method, specify the Redirect URI you are passing as an argument (this is the URI that Facebook will redirect the user to after authentication).\n3. Whitelist this Redirect URI with Facebook (instructions not provided in the code snippet, but implied to be done separately).\n\n**Important Notes:**\n\n* The code snippet appears to be written in JavaScript, using the `await` keyword for asynchronous programming.\n* The `magic.oauth2.loginWithRedirect` method is used to initiate the Facebook login flow.\n* The `redirectURI` argument is critical for the Facebook authentication flow, and it must be whitelisted with Facebook to ensure security.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/login/social-logins/social-providers/facebook#chunk-4", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 Facebook Social Login Demo\n\nFacebook Social Login Demo", "explanation": "The '#Resources' section is a collection of useful tools and examples that provide support for troubleshooting or learning about a particular feature of the Magic Labs embedded wallet. In this specific case, it pertains to the documentation on implementing Facebook Social Login.\n\nThe 'Facebook Social Login Demo' is a resource provided within this section. Its main purpose is to offer an interactive demonstration or a sample implementation of the Facebook Social Login functionality, allowing users to visually see how it works and experiment with it hands-on.\n\nBy accessing this demo, customers or developers can:\n\n- Gain a better understanding of the feature\n- Quickly test and validate the functionality\n- Identify potential issues or edge cases\n- Leverage it as a starting point for their own implementation\n\nIn summary, the 'Facebook Social Login Demo' serves as an educational tool, designed to simplify learning and troubleshooting the Social Login feature with Facebook as a provider.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/login/social-logins/social-providers/facebook#chunk-5", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "Once a deletion request is submitted, the user will permanently lose access to their wallet and cannot be recovered.\n\nAvailable to Dedicated applications and users whose primary login is an email.", "explanation": "The section titled 'GDPR Deletion Request - GDPR Deletion Request' is related to the General Data Protection Regulation (GDPR) deletion request process. This process is designed to permanently delete a user's wallet data, making it unrecoverable.\n\nThe main purpose of this feature is to provide users with control over their personal data and allow them to delete their account, wallet data, and associated information upon request. This complies with GDPR regulations that mandate data protection and the right to erasure.\n\nWhen a user submits a deletion request, their wallet will be permanently erased, and they will lose access to it. This process is available for:\n\n1. Dedicated applications\n2. Users whose primary login is an email account\n\nPlease note that, once a deletion request is submitted, there is no possibility of recovering the deleted wallet.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/data/deletion-request#chunk-1", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nThe Deletion Request API enables developers to delete users' information in compliance with GDPR. This API is designed for applications that require bulk deletion operations and supports authentication using the application's secret key.", "explanation": "Here's a clear and concise explanation of the '#Overview' section from the provided documentation:\n\n**Overview:**\n\nThe Deletion Request API is a feature designed to help developers comply with General Data Protection Regulation (GDPR) by enabling the deletion of users' information in bulk.\n\n**Main Purpose:**\n\nIts primary purpose is to provide a secure method for applications to delete user data efficiently, ensuring compliance with GDPR regulations while utilizing authentication through the application's secret key.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/data/deletion-request#chunk-2", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n#\n\nThe bulk deletion endpoint supports deleting multiple user accounts in a single API call. To use this endpoint, send a POST request to the following URL with a payload that includes the list of email addresses associated with the accounts you want to delete.\n\nCopy\n\n01\n\ncurl --location 'https://api.magic.link/v1/api/auth_user/deletion_request' \\\n\n01\n\ncurl --location 'https://api.magic.link/v1/api/auth_user/deletion_request' \\\n\n02\n\n--header 'X-Magic-Secret-Key: <SECRET_KEY>' \\\n\n02\n\n--header 'X-Magic-Secret-Key: <SECRET_KEY>' \\\n\n03\n\n--header 'Content-Type: application/json' \\\n\n03\n\n--header 'Content-Type: application/json' \\\n\n04\n\n--data-raw '{\n\n04\n\n--data-raw '{\n\n05\n\n\"emails\": [\"user1@example.com\", \"user2@example.com\"]\n\n05\n\n\"emails\": [\"user1@example.com\", \"user2@example.com\"]\n\n06\n\n}'\n\n06\n\n}'", "explanation": "**Bulk Delete User Accounts**\n\nThe provided documentation section explains how to send a bulk deletion request to the Magic Labs embedded wallet to delete multiple user accounts in a single API call.\n\n**Purpose:**\n\nThe main purpose of this endpoint is to allow developers to permanently remove user accounts and associated data from the Magic Labs ecosystem when no longer needed or as per user request.\n\n**Key Information:**\n\n- **Request Method:** The endpoint uses a POST request to the API URL `https://api.magic.link/v1/api/auth_user/deletion_request`.\n- **Required Headers:**\n  - `X-Magic-Secret-Key`: Your Secret Key, which is a required authentication header to authorize the request.\n  - `Content-Type`: Set to `application/json` to specify the payload format.\n- **Required Payload:**\n  - `emails`: A list of email addresses associated with the user accounts to be deleted.\n\n**Example:**\n\nYou can use the `curl` command provided in the documentation to send the request with your Secret Key. Replace `<SECRET_KEY>` with your actual Secret Key and list the email addresses of the users you want to delete in the `emails` array.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/data/deletion-request#chunk-3", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nUpon successful request processing, the API returns a response with lists of processed and unprocessed emails.\n\n\u2022 processed: An array of emails that have been queued for deletion.\n\n\u2022 unprocessed: An array of emails that were not found and hence not processed.\n\nprocessed\n\nunprocessed\n\nCopy\n\n01\n\n{\n\n01\n\n{\n\n02\n\n\"processed\": [\"user1@example.com\"],\n\n02\n\n\"processed\": [\"user1@example.com\"],\n\n03\n\n\"unprocessed\": [\"user2@example.com\"]\n\n03\n\n\"unprocessed\": [\"user2@example.com\"]\n\n04\n\n}\n\n04\n\n}", "explanation": "For the section titled '#Response - Success' in the Magic Labs embedded wallet documentation related to deletion requests, the main purpose is to provide a clear indication of the outcome of the deletion request.\n\nWhen a deletion request is processed successfully, the API returns a response with two key elements:\n\n1. **Processed**: A list of emails that have been successfully queued for deletion. This indicates that the email addresses listed in this array have been added to a queue for permanent deletion.\n\n2. **Unprocessed**: A list of emails that were not found and, therefore, were not processed. This indicates that the email addresses listed in this array may be invalid, do not exist in the Magic Labs system, or do not meet the deletion request criteria.\n\nIn summary, the '#Response - Success' section provides an answer to the deletion request, indicating which emails have been queued for deletion and which emails were not processed due to being invalid or not found. This response helps the user understand the outcome of their deletion request and take necessary actions accordingly.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/data/deletion-request#chunk-4", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "In the event of an error, the API will return an error code and message.\n\n\u2022 400 Bad Request: Your request is invalid. This often occurs due to missing the emails field in the request body.\n\n\u2022 401 Unauthorized: Your authorization token is missing or invalid.\n\n\u2022 429 Too Many Requests: You have hit the rate limit for deletion requests. Please wait before sending more requests.\n\n400 Bad Request\n\nemails\n\n401 Unauthorized\n\n429 Too Many Requests", "explanation": "**Understanding Error Handling in Magic Labs Embedded Wallet**\n\nIn the Magic Labs embedded wallet documentation, the 'Failure' section provides an overview of potential errors that may occur when making API requests. This section advises developers on how to identify and handle these errors to ensure smooth functionality.\n\n**Main Purpose:**\n\nThe primary purpose of this section is to inform developers about the types of errors that can arise during API requests, their corresponding error codes, and how to resolve these issues. By understanding these errors, developers can:\n\n1. **Identify and troubleshoot issues**: Recognize the error messages and codes to diagnose and fix problems.\n2. **Prevent API errors**: Ensure that their API requests are correctly formatted and authenticated to avoid errors.\n3. **Implement error handling**: Develop robust error handling mechanisms to handle and respond to errors in their application.\n\n**Key Takeaways:**\n\n1. **400 Bad Request**: The request is invalid, often due to missing required fields (e.g., 'emails' in the request body).\n2. **401 Unauthorized**: The authorization token is missing or invalid, preventing access to the API.\n3. **429 Too Many Requests**: The rate limit for deletion requests has been exceeded, requiring the developer to wait before sending more requests.\n\nBy understanding these common errors and their corresponding solutions, developers can build more robust and resilient applications that handle errors effectively.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/data/deletion-request#chunk-5", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "This feature requires a subscription to Startup or Growth Plan", "explanation": "The documentation section on 'Custom Session Management' appears to be a feature that allows developers to have more control over user sessions on the Magic Labs embedded wallet. \n\nHere's a clear and concise explanation:\n\n**Main Purpose:**\nThe primary goal of Custom Session Management is to provide a more customized experience for users, allowing developers to implement their own session management logic, rather than relying on Magic Labs' default session handling.\n\n**Key Features:**\n\n- **Flexible session expiration:** Custom Session Management enables developers to set custom session expiration times, giving them more control over when a user's session is considered expired.\n- **Advanced session management:** This feature allows developers to implement their own logic for session renewal, revocation, and other aspects of session management.\n\n**Benefits:**\nBy using Custom Session Management, developers can:\n\n- Offer a more seamless and secure user experience.\n- Customize the behavior of user sessions to fit their specific use case.\n- Improve the overall performance and reliability of their application.\n\nHowever, this feature is only available with a subscription to the Magic Labs Startup or Growth Plan. This means that developers on the Free Plan or other lower-tier plans will not have access to Custom Session Management.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/security/session-management#chunk-1", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nOnly available with Dedicated Wallet.\n\nDedicated Wallet\n\nThe Session Management feature allows you to control the maximum duration of your user's sessions with Magic. Default sessions will allow users to remain authenticated with Magic for up to 7 days (or until they logout or browser data is cleared). Auto Refresh sessions will allow users to stay authenticated with Magic for a duration of your choosing, up to 90 days (or until they logout or browser data is cleared).\n\nWhen Auto Refresh is enabled, each successful authentication will be issued a refresh token along with the session token. The refresh token will be valid for the configured number of days and while valid, will allow the user to bypass re-authentication. Once the refresh token expires, the user will need to re-authenticate with Magic.", "explanation": "The '#Overview' documentation section from the Magic Labs embedded wallet is primarily about Session Management, a feature only available with the Dedicated Wallet. Its main purpose is to allow you to control how long a user remains authenticated with Magic.\n\nIn simple terms, Session Management sets a time limit for a user's logged-in session, ensuring automatic re-authentication (if Auto Refresh is enabled) or requiring manual login (if not) after the configured time has expired or when the user logs out or clears browser data.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/security/session-management#chunk-2", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nAuto Refresh sessions are not currently supported on:\n\n\u2022 WebAuthn", "explanation": "In the Magic Labs embedded wallet documentation, the '#Compatibility' section outlines the limitations and unsupported features of the Magic Labs authentication and security solution.\n\nSpecifically, it mentions that Auto Refresh sessions are not currently supported on WebAuthn. \n\nIn simpler terms, Auto Refresh sessions, which are used to periodically re-establish and update the connection, are not compatible with WebAuthn (Web Authentication). This means that if you're using WebAuthn as your authentication method, Auto Refresh sessions will not work as expected, and users may need to manually re-authenticate their sessions.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/security/session-management#chunk-3", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nEmail logs allows developers to get visibility into the lifecycle of an email login. It provides granular information like when a login was initiated and when it was completed for both magic links and email OTPs. This is useful for debugging customer support tickets and understanding basic insights.\n\nTo access it, navigate to the Email Logs tab in your Magic Dashboard.\n\nMagic Dashboard\n\nThis is a beta feature and only includes email based login events - additional methods like social logins are coming soon. For feedback, please reach out here.\n\nhere\n\nEvents in the table can take up to a minute to populate from the time the event has taken place. Events can be filtered by email address from the search bar at the top of the table.\n\nClick on any event to reveal more information about the event, including the associated IP address and User Agent.", "explanation": "**Email Logs Overview**\n\nThe Email Logs feature in Magic Labs provides developers with a detailed record of email login events, including magic links and email OTPs. This feature helps with debugging and support ticket resolution by offering granular information about login events.\n\n**Key Benefits**\n\n- Granular information about login events, including initiation and completion times\n- Useful for debugging customer support tickets\n- Provides basic insights into user behavior\n\n**Accessing Email Logs**\n\nTo access Email Logs, navigate to the Magic Dashboard and click on the Email Logs tab. Currently, this feature is in beta and only includes email-based login events. Social login events will be added in the future.\n\n**Feature Limitations**\n\n- Events may take up to a minute to populate after the event occurs\n- Limited to email-based login events (beta status)\n\n**Filtering and Viewing Events**\n\n- Use the search bar at the top of the table to filter events by email address\n- Click on any event to reveal additional information, including IP address and User Agent.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/data/email-logs#chunk-1", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nBelow is a list of all possible events and their definitions\n\nEmail Login Initiated\n\nA user has requested an OTP or magic link\n\nLogin Email Sent\n\nEmail provider has sent the login email\n\nLogin Email Delivered\n\nThe login email has been received by the mail server\n\nLogin Email Opened\n\nThe user has opened the login email\n\nLogin Success\n\nThe user has successfully logged in\n\nLogin Email Bounced\n\nEmail was not delivered. See here for more information:\n\nhttps://docs.sendgrid.com/glossary/bounces\n\nhttps://docs.sendgrid.com/glossary/bounces\n\nhttps://postmarkapp.com/support/article/815-what-are-bounces-and-spam-complaints\n\nhttps://postmarkapp.com/support/article/815-what-are-bounces-and-spam-complaints\n\nError\n\nThere was an error during the login. See the dashboard for more details.\n\nNew Device Detected\n\nThe user is logging in from a new device.\n\nDevice Registration Email Sent\n\nEmail provider has sent the device registration email.\n\nDevice Registration Email Delivered\n\nThe device registration email has been received by the mail server.\n\nDevice Registration Email Opened\n\nThe user has opened the device registration email.\n\nDevice Registration Approved\n\nUser has approved the device from the email.\n\nDevice Registration Rejected\n\nUser has rejected the device from the email.\n\nDevice Registration Email Bounced\n\nEmail was not delivered. See here for more information:\n\nhttps://docs.sendgrid.com/glossary/bounces\n\nhttps://docs.sendgrid.com/glossary/bounces\n\nhttps://postmarkapp.com/support/article/815-what-are-bounces-and-spam-complaints\n\nhttps://postmarkapp.com/support/article/815-what-are-bounces-and-spam-complaints", "explanation": "**Event Definition in Magic Labs Embedded Wallet Documentation:**\n\nThe \"# Events\" section in Magic Labs embedded wallet documentation outlines a list of possible events that occur during the user login process, in addition to when a user registers a new device. These events provide a clear understanding of the system's activity and are used to monitor and analyze user behavior.\n\n**Main Purpose:**\n\nThe main purpose of this section is to:\n\n1. **Provide event definitions**: Explain what each event represents, making it easier to understand the system's behavior.\n2. **Help with debugging**: Assist in troubleshooting issues by categorizing errors and providing relevant links for further information.\n3. **Enhance user experience**: Enable developers to create a more seamless experience by understanding user interactions and system responses.\n\n**Key Events:**\n\n1. **Login-related events**: Include Login Email Initiated, Login Email Sent, Login Email Delivered, Login Email Opened, Login Success, Login Email Bounced, and Error.\n2. **Device registration-related events**: Include New Device Detected, Device Registration Email Sent, Device Registration Email Delivered, Device Registration Email Opened, Device Registration Approved, Device Registration Rejected, and Device Registration Email Bounced.\n\nBy understanding these events, developers can create a more robust and user-friendly experience for Magic Labs' embedded wallet users.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/data/email-logs#chunk-2", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "ZeroDev\u2019s Account Abstraction tooling makes it possible to quickly spin up Smart Contract Accounts tied to your Magic wallet. The guide below walks through adding account abstraction to a simple Magic project using ZeroDev. We\u2019ll leverage a project pointed at the Ethereum Sepolia test network, but you can use any network supported by both Magic and ZeroDev. The code snippets provided are based on a Next.js web app but can be modified to work with virtually any JavaScript framework.\n\nTo learn more about ZeroDev, visit their documentation.\n\ndocumentation", "explanation": "Let me break down the information provided in the documentation section.\n\n**What is ZeroDev Account Abstraction?**\n\nZeroDev Account Abstraction is a tooling provided by ZeroDev that enables developers to quickly set up Smart Contract Accounts tied to their Magic wallet. In simpler terms, it's a way to create and manage multiple accounts from a single Magic wallet, allowing for more flexibility and security in decentralized applications.\n\n**Main Purpose**\n\nThe main purpose of ZeroDev Account Abstraction is to:\n\n1. **Improve account management**: Easily create, manage, and switch between multiple smart contract accounts from a single Magic wallet.\n2. **Enhance security**: By separating funds into multiple accounts, you can reduce the risk of loss or theft of your main wallet's funds.\n3. **Simplify development**: ZeroDev's tooling simplifies the process of integrating account abstraction into your Magic project, making it easier to build and manage decentralized applications.\n\nBy using ZeroDev's Account Abstraction tooling, developers can create more secure, flexible, and scalable decentralized applications with Magic wallets.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/wallets/integrations/zerodev-account-abstraction#chunk-1", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nTo follow along with this guide, you\u2019ll need three things:\n\n\u2022 A Magic Publishable API Key\n\n\u2022 A ZeroDev Project ID\n\n\u2022 A web client\n\nYou can get your Publishable API Key from your Magic Dashboard.\n\nMagic Dashboard\n\nYou can get your ZeroDev Project ID (for Ethereum Sepolia) from your ZeroDev Dashboard.\n\nZeroDev Dashboard\n\nWe\u2019ll use the make-scoped-magic-app CLI tool to bootstrap a Next.js app with Magic authentication already baked into the client. You\u2019re welcome to use your own client, but this tutorial and its accompanying code snippets assume the output of the make-scoped-magic-app CLI as the starting point.\n\nmake-scoped-magic-app\n\nmake-scoped-magic-app\n\nThe make-scoped-magic-app CLI tool is an easy way to bootstrap new projects with Magic. To get started, simply run the command below in the shell of your choice. Be sure to replace <YOUR_PUBLISHABLE_API_KEY> with the Publishable API Key from your Magic Dashboard.\n\nmake-scoped-magic-app\n\n<YOUR_PUBLISHABLE_API_KEY>\n\nMagic Dashboard\n\nCopy\n\n01\n\nnpx make-scoped-magic-app\n\n\\\n\n\\\n\n01\n\nnpx make-scoped-magic-app\n\n\\\n\n\\\n\n02\n\n--template nextjs-dedicated-wallet\n\n\\\n\n\\\n\n02\n\n--template nextjs-dedicated-wallet\n\n\\\n\n\\\n\n03\n\n--network ethereum-sepolia\n\n\\\n\n\\\n\n03\n\n--network ethereum-sepolia\n\n\\\n\n\\\n\n04\n\n--login-methods EmailOTP\n\n\\\n\n\\\n\n04\n\n--login-methods EmailOTP\n\n\\\n\n\\\n\n05\n\n--publishable-api-key\n\n<\n\nYOUR_PUBLISHABLE_API_KEY\n\n>\n\n05\n\n--publishable-api-key\n\n<\n\nYOUR_PUBLISHABLE_API_KEY\n\n>\n\nThis will bootstrap the starting point of the tutorial for you. In the scaffolded project, be sure to add your Magic Publishable API Key and ZeroDev project ID to the .env as NEXT_PUBLIC_MAGIC_API_KEY and NEXT_PUBLIC_ZERODEV_SEPOLIA_PROJECT_ID, respectively.\n\n.env\n\nNEXT_PUBLIC_MAGIC_API_KEY\n\nNEXT_PUBLIC_ZERODEV_SEPOLIA_PROJECT_ID\n\nCopy\n\n01\n\n// Publishable API Key found in the Magic Dashboard\n\n01\n\n// Publishable API Key found in the Magic Dashboard\n\n02\n\nNEXT_PUBLIC_MAGIC_API_KEY=pk_live_FF619AE0AEC9D473\n\n02\n\nNEXT_PUBLIC_MAGIC_API_KEY=pk_live_FF619AE0AEC9D473\n\n03\n\n03\n\n04\n\n// The RPC URL for the blockchain network\n\n04\n\n// The RPC URL for the blockchain network\n\n05\n\nNEXT_PUBLIC_BLOCKCHAIN_NETWORK=ethereum-sepolia\n\n05\n\nNEXT_PUBLIC_BLOCKCHAIN_NETWORK=ethereum-sepolia\n\n06\n\n06\n\n07\n\n// The ZeroDev project id for the Sepolia blockchain network\n\n07\n\n// The ZeroDev project id for the Sepolia blockchain network\n\n08\n\nNEXT_PUBLIC_ZERODEV_SEPOLIA_PROJECT_ID=<ZERODEV_PROJECT_ID>\n\n08\n\nNEXT_PUBLIC_ZERODEV_SEPOLIA_PROJECT_ID=<ZERODEV_PROJECT_ID>", "explanation": "**Project Prerequisites Explained**\n\nThe '#Project prerequisites' section of the Magic Labs embedded wallet documentation outlines the essential components required to follow along with the guide. These prerequisites are necessary for a successful project setup.\n\n**Main Three Prerequisites:**\n\n1. **Magic Publishable API Key**: This is a unique key obtained from the Magic Dashboard that enables your application to interact with Magic's authentication and wallet services.\n2. **ZeroDev Project ID**: This is a project ID associated with your ZeroDev account, specifically for the Ethereum Sepolia network. You can find it in your ZeroDev Dashboard.\n3. **Web Client**: A web client is required to run the application. In this case, the guide recommends using the `make-scoped-magic-app` CLI tool to bootstrap a Next.js app with Magic authentication already integrated.\n\n**Additional Prerequisites:**\n\n* **make-scoped-magic-app CLI Tool**: A utility tool that helps bootstrap new projects with Magic. It is used to create a Next.js app with Magic authentication already integrated.\n* **.env File**: A configuration file that holds sensitive information such as your Magic Publishable API Key and ZeroDev project ID.\n\n**Purpose:**\n\nThe project prerequisites serve as a foundation for the guide, providing the necessary tools and settings to set up a Magic Labs embedded wallet. By following these steps, developers can create a functional wallet application that meets the requirements of the tutorial.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/wallets/integrations/zerodev-account-abstraction#chunk-2", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nIn addition to the packages included in the scaffold produced by the make-scoped-magic-app CLI, you\u2019ll need a number of packages related to ZeroDev and their account abstraction tools. You\u2019ll also need to install viem for EVM-related types and transaction convenience methods.\n\nmake-scoped-magic-app\n\nviem\n\nRun the following command to install the required dependencies:\n\nCopy\n\n01\n\nnpm\n\ninstall\n\n@zerodev/sdk @zerodev/presets @zerodev/ecdsa-validator viem permissionless\n\n01\n\nnpm\n\ninstall\n\n@zerodev/sdk @zerodev/presets @zerodev/ecdsa-validator viem permissionless", "explanation": "**Install Additional Project Dependencies**\n\nThis section of the documentation is about installing necessary packages related to ZeroDev and its account abstraction tools, as well as EVM (Ethereum Virtual Machine) types and transaction convenience methods.\n\n**Main Purpose:**\n\nThe main purpose of this step is to prepare your project environment by installing the required dependencies that are not included in the scaffold produced by the `make-scoped-magic-app` CLI.\n\n**Key Packages:**\n\n1. `@zerodev/sdk`: ZeroDev's software development kit (SDK).\n2. `@zerodev/presets`: ZeroDev's presets for account abstraction.\n3. `@zerodev/ecdsa-validator`: ZeroDev's ECDSA (Elliptic Curve Digital Signature Algorithm) validator.\n4. `viem`: A package that provides EVM-related types and transaction convenience methods.\n5. `permissionless`: A package that allows for permissionless transactions.\n\n**Installation Command:**\n\nTo install these dependencies, run the following command in your terminal:\n```bash\nnpm install @zerodev/sdk @zerodev/presets @zerodev/ecdsa-validator viem permissionless\n```\nBy installing these dependencies, you'll be able to leverage ZeroDev's account abstraction tools and EVM-related functionality in your project.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/wallets/integrations/zerodev-account-abstraction#chunk-3", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nTo establish a connection between Magic and ZeroDev smart accounts, we create a ZeroDev kernel client. Kernel is ZeroDev\u2019s ERC-4337-compatible smart contract account. It\u2019s customizable, modular, and comes equipped with a number of plugin capabilities. We won\u2019t go into the specifics of how it works, but feel free to look at the GitHub repo for more information.\n\nKernel\n\nGitHub repo for more information\n\nInside of src/components, create a directory named zeroDev. Inside that directory create a file named useZeroDevKernelClient.tsx.\n\nsrc/components\n\nzeroDev\n\nuseZeroDevKernelClient.tsx\n\nThis file will contain a hook that will surface the ZeroDev kernel client to the rest of the app. It\u2019ll also observe when users log in or out and connect and disconnect to the corresponding smart contract account accordingly. We\u2019ll go through each of these three separately, then show the code for the entire file.\n\n#\n\nuseZeroDevKernelClient\n\nWhen a user logs in with Magic, we need to associate their Magic account with a smart contract account through ZeroDev. Just as Magic handles the creation of user wallets, ZeroDev handles the creation of smart contract accounts associated with the wallet.\n\nTo initialize the kernel client, first we must declare the magic provider and pass it to the providerToSmartAccountSigner function provided by ZeroDev. This will associate the Magic account as the signer of the smart contract account.\n\nproviderToSmartAccountSigner\n\nNext, we create the kernel client by calling createEcdsaKernelAccountClient and passing the following values as arguments:\n\ncreateEcdsaKernelAccountClient\n\n\u2022 chain: The chain to point to. We\u2019ll be using Sepolia.\n\n\u2022 projectId: This comes from the ZeroDev project created earlier.\n\n\u2022 signer: The smartAccountSigner we create using the Magic provider and providerToSmartAccountSigner function.\n\n\u2022 paymaster?: Sponsoring gas paymaster. This is optional but allows you to pay transaction fees on behalf of your users.\n\nchain\n\nprojectId\n\nsigner\n\nsmartAccountSigner\n\nproviderToSmartAccountSigner\n\npaymaster?\n\nCopy\n\n01\n\nconst\n\nmagicProvider\n\n=\n\nawait\n\nmagic\n\n?.\n\nwallet\n\n.\n\ngetProvider\n\n(\n\n)\n\n;\n\n01\n\nconst\n\nmagicProvider\n\n=\n\nawait\n\nmagic\n\n?.\n\nwallet\n\n.\n\ngetProvider\n\n(\n\n)\n\n;\n\n02\n\nconst\n\nsmartAccountSigner\n\n=\n\nawait\n\nproviderToSmartAccountSigner\n\n(\n\nmagicProvider\n\n)\n\n;\n\n02\n\nconst\n\nsmartAccountSigner\n\n=\n\nawait\n\nproviderToSmartAccountSigner\n\n(\n\nmagicProvider\n\n)\n\n;\n\n03\n\n03\n\n04\n\nconst\n\nclient\n\n=\n\nawait\n\ncreateEcdsaKernelAccountClient\n\n(\n\n{\n\n04\n\nconst\n\nclient\n\n=\n\nawait\n\ncreateEcdsaKernelAccountClient\n\n(\n\n{\n\n05\n\nchain\n\n:\n\nsepolia\n\n,\n\n05\n\nchain\n\n:\n\nsepolia\n\n,\n\n06\n\nprojectId\n\n:\n\nprocess\n\n.\n\nenv\n\n.\n\nNEXT_PUBLIC_ZERODEV_SEPOLIA_PROJECT_ID\n\n!\n\n,\n\n06\n\nprojectId\n\n:\n\nprocess\n\n.\n\nenv\n\n.\n\nNEXT_PUBLIC_ZERODEV_SEPOLIA_PROJECT_ID\n\n!\n\n,\n\n07\n\nsigner\n\n:\n\nsmartAccountSigner\n\n,\n\n07\n\nsigner\n\n:\n\nsmartAccountSigner\n\n,\n\n08\n\npaymaster\n\n:\n\n\"SPONSOR\"\n\n// defaults to \"SPONSOR\". Use \"NONE\" if no policy is required.\n\n08\n\npaymaster\n\n:\n\n\"SPONSOR\"\n\n// defaults to \"SPONSOR\". Use \"NONE\" if no policy is required.\n\n09\n\n}\n\n)\n\n;\n\n09\n\n}\n\n)\n\n;", "explanation": "**Initialize ZeroDev Smart Contract Accounts: `#Initialize useZeroDevKernelClient`**\n\n**Overview**\n\nThis section of the Magic Labs embedded wallet documentation explains how to establish a connection between Magic and ZeroDev smart contract accounts. To achieve this, we create a ZeroDev kernel client, which is a customizable, modular, and ERC-4337-compatible smart contract account. The kernel client is responsible for handling the creation and management of smart contract accounts associated with user wallets.\n\n**Key Components**\n\n1. **ZeroDev Kernel Client**: A customizable, modular, and ERC-4337-compatible smart contract account.\n2. **ProviderToSmartAccountSigner**: A function that associates the Magic account as the signer of the smart contract account.\n3. **createEcdsaKernelAccountClient**: A function that creates the kernel client, passing the following values as arguments:\n\t* **chain**: The chain to point to (e.g., Sepolia).\n\t* **projectId**: The project ID from the ZeroDev project created earlier.\n\t* **signer**: The smartAccountSigner created using the Magic provider and providerToSmartAccountSigner function.\n\t* **paymaster** (optional): A sponsoring gas paymaster that allows you to pay transaction fees on behalf of your users.\n\n**Initialization Steps**\n\n1. **Declare the Magic provider**: Obtain the Magic provider using the `getProvider()` method.\n2. **Create the smartAccountSigner**: Use the `providerToSmartAccountSigner` function to associate the Magic account as the signer of the smart contract account.\n3. **Create the kernel client**: Call `createEcdsaKernelAccountClient` and pass the following values as arguments:\n\t* **chain**: The chain to point to (e.g., Sepolia).\n\t* **projectId**: The project ID from the ZeroDev project created earlier.\n\t* **signer**: The smartAccountSigner created in Step 2.\n\t* **paymaster** (optional): A sponsoring gas paymaster that allows you to pay transaction fees on behalf of your users.\n\n**Purpose**\n\nThe primary purpose of this initialization process is to establish a connection between Magic and ZeroDev smart contract accounts, allowing users to log in and out and connect and disconnect to the corresponding smart contract account accordingly. This process enables the creation and management of smart contract accounts associated with user wallets.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/wallets/integrations/zerodev-account-abstraction#chunk-4", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nAccount abstraction enables you to cover gas fees on behalf of users, eliminating the need for them to obtain native tokens to engage with your DApp. ZeroDev makes sponsoring gas straight-forward in a few steps.\n\nFor this guide we are using testnet tokens. If you're on planning on using mainnet you will need to make a payment for your gas policy to be applied.\n\nHead to your ZeroDev dashboard and navigate to the Sepolia project created earlier. On the left hand navigation, select \"Gas Policies\" and click the \"New\" button.\n\nZeroDev dashboard\n\nA display will pop up allowing you to set the type, amount and interval amount for your gas policy.\n\nOnce the gas policy has been added to your ZeroDev project, the user's gas will be subsidized so long as the value set has not been exceeded within the interval.\n\nNow when a user logs in with Magic, their account is associated with the ZeroDev kernel as the smart account signer and their gas has been sponsored.", "explanation": "**#Paymaster in ZeroDev Account Abstraction: What is It?**\n\nA Paymaster is a service in ZeroDev account abstraction that allows you to cover gas fees on behalf of users when interacting with your decentralized application (DApp). Essentially, it enables sponsoring gas for users, eliminating the need for them to possess native tokens to engage with your DApp.\n\n**Main Purpose**\n\nThe primary purpose of Paymaster in ZeroDev account abstraction is to make it easier for users to interact with DApps by covering gas fees, thereby reducing the barrier to entry for users who wouldn't have been able to perform actions within the DApp due to not having the required native tokens.\n\nIn simpler terms, Paymaster ensures that users can engage with your DApp without worrying about paying gas fees out of their own wallets, making the overall user experience more seamless and convenient.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/wallets/integrations/zerodev-account-abstraction#chunk-5", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nuseZeroDevKernelClient\n\nCopy\n\n01\n\nimport\n\n{\n\nsepolia\n\n}\n\nfrom\n\n\"viem/chains\"\n\n01\n\nimport\n\n{\n\nsepolia\n\n}\n\nfrom\n\n\"viem/chains\"\n\n02\n\nimport\n\n{\n\nuseCallback\n\n,\n\nuseEffect\n\n,\n\nuseMemo\n\n,\n\nuseState\n\n}\n\nfrom\n\n\"react\"\n\n02\n\nimport\n\n{\n\nuseCallback\n\n,\n\nuseEffect\n\n,\n\nuseMemo\n\n,\n\nuseState\n\n}\n\nfrom\n\n\"react\"\n\n03\n\nimport\n\n{\n\nuseMagic\n\n}\n\nfrom\n\n\"../magic/MagicProvider\"\n\n03\n\nimport\n\n{\n\nuseMagic\n\n}\n\nfrom\n\n\"../magic/MagicProvider\"\n\n04\n\nimport\n\n{\n\ncreateEcdsaKernelAccountClient\n\n}\n\nfrom\n\n'@zerodev/presets/zerodev'\n\n;\n\n04\n\nimport\n\n{\n\ncreateEcdsaKernelAccountClient\n\n}\n\nfrom\n\n'@zerodev/presets/zerodev'\n\n;\n\n05\n\nimport\n\n{\n\nproviderToSmartAccountSigner\n\n}\n\nfrom\n\n'permissionless'\n\n;\n\n05\n\nimport\n\n{\n\nproviderToSmartAccountSigner\n\n}\n\nfrom\n\n'permissionless'\n\n;\n\n06\n\n06\n\n07\n\nexport\n\nconst\n\nuseZeroDevKernelClient\n\n=\n\n(\n\n)\n\n=>\n\n{\n\n07\n\nexport\n\nconst\n\nuseZeroDevKernelClient\n\n=\n\n(\n\n)\n\n=>\n\n{\n\n08\n\nconst\n\n{\n\nmagic\n\n}\n\n=\n\nuseMagic\n\n(\n\n)\n\n;\n\n08\n\nconst\n\n{\n\nmagic\n\n}\n\n=\n\nuseMagic\n\n(\n\n)\n\n;\n\n09\n\nconst\n\n[\n\nkernelClient\n\n,\n\nsetKernelClient\n\n]\n\n=\n\nuseState\n\n<\n\nany\n\n>\n\n(\n\n)\n\n;\n\n09\n\nconst\n\n[\n\nkernelClient\n\n,\n\nsetKernelClient\n\n]\n\n=\n\nuseState\n\n<\n\nany\n\n>\n\n(\n\n)\n\n;\n\n10\n\nconst\n\n[\n\nscaAddress\n\n,\n\nsetScaAddress\n\n]\n\n=\n\nuseState\n\n<\n\nany\n\n>\n\n(\n\n)\n\n;\n\n10\n\nconst\n\n[\n\nscaAddress\n\n,\n\nsetScaAddress\n\n]\n\n=\n\nuseState\n\n<\n\nany\n\n>\n\n(\n\n)\n\n;\n\n11\n\n11\n\n12\n\nuseEffect\n\n(\n\n(\n\n)\n\n=>\n\n{\n\n12\n\nuseEffect\n\n(\n\n(\n\n)\n\n=>\n\n{\n\n13\n\nconst\n\nfetchAccount\n\n=\n\nasync\n\n(\n\n)\n\n=>\n\n{\n\n13\n\nconst\n\nfetchAccount\n\n=\n\nasync\n\n(\n\n)\n\n=>\n\n{\n\n14\n\nconst\n\nmagicProvider\n\n=\n\nawait\n\nmagic\n\n?.\n\nwallet\n\n.\n\ngetProvider\n\n(\n\n)\n\n;\n\n14\n\nconst\n\nmagicProvider\n\n=\n\nawait\n\nmagic\n\n?.\n\nwallet\n\n.\n\ngetProvider\n\n(\n\n)\n\n;\n\n15\n\nif\n\n(\n\n!\n\nmagicProvider\n\n)\n\nreturn\n\n;\n\n15\n\nif\n\n(\n\n!\n\nmagicProvider\n\n)\n\nreturn\n\n;\n\n16\n\n16\n\n17\n\nconst\n\nsmartAccountSigner\n\n=\n\nawait\n\nproviderToSmartAccountSigner\n\n(\n\nmagicProvider\n\n)\n\n;\n\n17\n\nconst\n\nsmartAccountSigner\n\n=\n\nawait\n\nproviderToSmartAccountSigner\n\n(\n\nmagicProvider\n\n)\n\n;\n\n18\n\n18\n\n19\n\nconst\n\nclient\n\n=\n\nawait\n\ncreateEcdsaKernelAccountClient\n\n(\n\n{\n\n19\n\nconst\n\nclient\n\n=\n\nawait\n\ncreateEcdsaKernelAccountClient\n\n(\n\n{\n\n20\n\nchain\n\n:\n\nsepolia\n\n,\n\n20\n\nchain\n\n:\n\nsepolia\n\n,\n\n21\n\nprojectId\n\n:\n\nprocess\n\n.\n\nenv\n\n.\n\nNEXT_PUBLIC_ZERODEV_SEPOLIA_PROJECT_ID\n\n!\n\n,\n\n21\n\nprojectId\n\n:\n\nprocess\n\n.\n\nenv\n\n.\n\nNEXT_PUBLIC_ZERODEV_SEPOLIA_PROJECT_ID\n\n!\n\n,\n\n22\n\nsigner\n\n:\n\nsmartAccountSigner\n\n,\n\n22\n\nsigner\n\n:\n\nsmartAccountSigner\n\n,\n\n23\n\npaymaster\n\n:\n\n\"NONE\"\n\n23\n\npaymaster\n\n:\n\n\"NONE\"\n\n24\n\n}\n\n)\n\n;\n\n24\n\n}\n\n)\n\n;\n\n25\n\nsetKernelClient\n\n(\n\nclient\n\n)\n\n25\n\nsetKernelClient\n\n(\n\nclient\n\n)\n\n26\n\n26\n\n27\n\nsetScaAddress\n\n(\n\nclient\n\n.\n\naccount\n\n.\n\naddress\n\n)\n\n;\n\n27\n\nsetScaAddress\n\n(\n\nclient\n\n.\n\naccount\n\n.\n\naddress\n\n)\n\n;\n\n28\n\n}\n\n28\n\n}\n\n29\n\n29\n\n30\n\nfetchAccount\n\n(\n\n)\n\n30\n\nfetchAccount\n\n(\n\n)\n\n31\n\n}\n\n,\n\n[\n\nmagic\n\n]\n\n)\n\n31\n\n}\n\n,\n\n[\n\nmagic\n\n]\n\n)\n\n32\n\n32\n\n33\n\nreturn\n\n{\n\n33\n\nreturn\n\n{\n\n34\n\nkernelClient\n\n,\n\n34\n\nkernelClient\n\n,\n\n35\n\nscaAddress\n\n,\n\n35\n\nscaAddress\n\n,\n\n36\n\n}\n\n36\n\n}\n\n37\n\n}\n\n37\n\n}\n\nNotice that our hook returns both the client and the smart contract account address. This will allow us to use destructuring to access either or both from the rest of our code.", "explanation": "**Explanation of `useZeroDevKernelClient`**\n\n`useZeroDevKernelClient` is a custom hook that utilizes the ZeroDev kernel client to interact with the Sebia chain (a testnet of Ethereum). This hook is designed to provide a user with a smart contract account (SCA) and a zero-dev kernel client. The kernel client is used to interact with the SCA, while the smart contract account address is used to reference the SCA on the blockchain.\n\n**Main Purpose of `useZeroDevKernelClient`**\n\nThe main purpose of this hook is to:\n\n1. **Establish a connection to the Sebia chain**: Using the `useMagic` hook, it retrieves the magic provider, which is used to connect to the Sebia chain.\n2. **Obtain a smart contract account (SCA) and a zero-dev kernel client**: Using the `providerToSmartAccountSigner` function, it extracts the SCA from the magic provider. Then, using the `createEcdsaKernelAccountClient` function, it creates a zero-dev kernel client with the SCA.\n3. **Update the kernel client and SCA address state**: It updates the `kernelClient` and `scaAddress` state variables using the `useState` hook.\n4. **Fetch the SCA address**: It fetches the SCA address using the `account.address` property of the kernel client.\n\n**Return Value**\n\nThe hook returns an object with two properties:\n\n1. `kernelClient`: The zero-dev kernel client.\n2. `scaAddress`: The smart contract account (SCA) address.\n\nThis allows the user to access either or both values from the rest of their code using destructuring.\n\n**Example Use Case**\n\nTo use this hook, you would call it within a React component, like so:\n```jsx\nimport React from 'react';\nimport { useZeroDevKernelClient } from './useZeroDevKernelClient';\n\nconst MyComponent = () => {\n  const { kernelClient, scaAddress } = useZeroDevKernelClient();\n\n  return (\n    <div>\n      <h1>Kernel Client: {kernelClient.version}</h1>\n      <h2>SCA Address: {scaAddress}</h2>\n    </div>\n  );\n};\n```\nIn this example, the `useZeroDevKernelClient` hook is called within the `MyComponent` component, and the returned `kernelClient` and `scaAddress` values are accessed using destructuring.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/wallets/integrations/zerodev-account-abstraction#chunk-6", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nNow that the project successfully creates and connects to users\u2019 smart contract accounts with ZeroDev, we can update the UI to show the smart account address, its balance, and enable sending transactions from the smart contract account. These changes take place in the UserInfoCard and the SendTransactionCard.\n\nUserInfoCard\n\nSendTransactionCard\n\n#\n\nUserInfoCard\n\n#\n\nFirst things first. Open src/components/magic/cards/UserInfoCard.tsx and make the following changes:\n\nsrc/components/magic/cards/UserInfoCard.tsx\n\n\u2022 Update the state declaration of balance, setBalance, and publicAddress to magicBalance, setMagicBalance, and magicAddress\n\n\u2022 Import our useZeroDevKernelClient hook and call it to get access to scaAddress\n\n\u2022 Add a state declaration for scaBalance and setScaBalance to store the smart contract account balance.\n\nbalance\n\nsetBalance\n\npublicAddress\n\nmagicBalance\n\nsetMagicBalance\n\nmagicAddress\n\nuseZeroDevKernelClient\n\nscaAddress\n\nscaBalance\n\nsetScaBalance\n\nCopy\n\n01\n\n// Change this\n\n01\n\n// Change this\n\n02\n\nconst\n\n[\n\nbalance\n\n,\n\nsetBalance\n\n]\n\n=\n\nuseState\n\n(\n\n\"...\"\n\n)\n\n02\n\nconst\n\n[\n\nbalance\n\n,\n\nsetBalance\n\n]\n\n=\n\nuseState\n\n(\n\n\"...\"\n\n)\n\n03\n\nconst\n\n[\n\npublicAddress\n\n]\n\n=\n\nuseState\n\n(\n\n03\n\nconst\n\n[\n\npublicAddress\n\n]\n\n=\n\nuseState\n\n(\n\n04\n\nlocalStorage\n\n.\n\ngetItem\n\n(\n\n\"user\"\n\n)\n\n04\n\nlocalStorage\n\n.\n\ngetItem\n\n(\n\n\"user\"\n\n)\n\n05\n\n)\n\n05\n\n)\n\n06\n\n06\n\n07\n\n// To this\n\n07\n\n// To this\n\n08\n\nconst\n\n[\n\nmagicBalance\n\n,\n\nsetMagicBalance\n\n]\n\n=\n\nuseState\n\n<\n\nstring\n\n>\n\n(\n\n\"...\"\n\n)\n\n08\n\nconst\n\n[\n\nmagicBalance\n\n,\n\nsetMagicBalance\n\n]\n\n=\n\nuseState\n\n<\n\nstring\n\n>\n\n(\n\n\"...\"\n\n)\n\n09\n\nconst\n\n[\n\nscaBalance\n\n,\n\nsetScaBalance\n\n]\n\n=\n\nuseState\n\n<\n\nstring\n\n>\n\n(\n\n\"...\"\n\n)\n\n09\n\nconst\n\n[\n\nscaBalance\n\n,\n\nsetScaBalance\n\n]\n\n=\n\nuseState\n\n<\n\nstring\n\n>\n\n(\n\n\"...\"\n\n)\n\n10\n\nconst\n\n[\n\nmagicAddress\n\n]\n\n=\n\nuseState\n\n(\n\n10\n\nconst\n\n[\n\nmagicAddress\n\n]\n\n=\n\nuseState\n\n(\n\n11\n\nlocalStorage\n\n.\n\ngetItem\n\n(\n\n\"user\"\n\n)\n\n11\n\nlocalStorage\n\n.\n\ngetItem\n\n(\n\n\"user\"\n\n)\n\n12\n\n)\n\n12\n\n)\n\n13\n\nconst\n\n{\n\nscaAddress\n\n}\n\n=\n\nuseZeroDevKernelClient\n\n(\n\n)\n\n;\n\n13\n\nconst\n\n{\n\nscaAddress\n\n}\n\n=\n\nuseZeroDevKernelClient\n\n(\n\n)\n\n;", "explanation": "**Updating the Info Card UI Components**\n\nThe documentation section you provided explains how to update the UI components, specifically the UserInfoCard, to display information related to a user's smart contract account. This update is part of integrating the Magic Labs embedded wallet with the ZeroDev account abstraction.\n\n**Key Changes:**\n\n1. The UserInfoCard now displays the smart contract account address and its balance.\n2. The UI components are updated to use state variables for the smart contract account balance (`scaBalance`) and address (`scaAddress`).\n\n**Step-by-Step Changes:**\n\n1. Update the state declaration in `src/components/magic/cards/UserInfoCard.tsx` to use `magicBalance`, `setMagicBalance`, and `magicAddress` for the balance and address.\n2. Import and use the `useZeroDevKernelClient` hook to get access to the `scaAddress`.\n3. Add a state declaration for `scaBalance` and `setScaBalance` to store the smart contract account balance.\n4. Replace the existing state variables (`balance`, `setBalance`, `publicAddress`) with the new ones (`magicBalance`, `setMagicBalance`, `magicAddress`).\n5. Update the `useState` declarations to reflect the changes.\n\n**Main Purpose:**\n\nThe primary goal of this update is to provide a more accurate and user-friendly UI experience by displaying the smart contract account address and balance, enabling users to interact with their smart contract accounts seamlessly.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/wallets/integrations/zerodev-account-abstraction#chunk-7", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\ngetBalance\n\nNext, update the getBalance function to set both balances:\n\ngetBalance\n\nCopy\n\n01\n\nconst\n\ngetBalance\n\n=\n\nuseCallback\n\n(\n\nasync\n\n(\n\n)\n\n=>\n\n{\n\n01\n\nconst\n\ngetBalance\n\n=\n\nuseCallback\n\n(\n\nasync\n\n(\n\n)\n\n=>\n\n{\n\n02\n\nif\n\n(\n\nmagicAddress\n\n&&\n\nweb3\n\n)\n\n{\n\n02\n\nif\n\n(\n\nmagicAddress\n\n&&\n\nweb3\n\n)\n\n{\n\n03\n\nconst\n\nmagicBalance\n\n=\n\nawait\n\nweb3\n\n.\n\neth\n\n.\n\ngetBalance\n\n(\n\nmagicAddress\n\n)\n\n03\n\nconst\n\nmagicBalance\n\n=\n\nawait\n\nweb3\n\n.\n\neth\n\n.\n\ngetBalance\n\n(\n\nmagicAddress\n\n)\n\n04\n\nif\n\n(\n\nmagicBalance\n\n==\n\nBigInt\n\n(\n\n0\n\n)\n\n)\n\n{\n\n04\n\nif\n\n(\n\nmagicBalance\n\n==\n\nBigInt\n\n(\n\n0\n\n)\n\n)\n\n{\n\n05\n\nsetMagicBalance\n\n(\n\n\"0\"\n\n)\n\n05\n\nsetMagicBalance\n\n(\n\n\"0\"\n\n)\n\n06\n\n}\n\nelse\n\n{\n\n06\n\n}\n\nelse\n\n{\n\n07\n\nsetMagicBalance\n\n(\n\nweb3\n\n.\n\nutils\n\n.\n\nfromWei\n\n(\n\nmagicBalance\n\n,\n\n\"ether\"\n\n)\n\n)\n\n07\n\nsetMagicBalance\n\n(\n\nweb3\n\n.\n\nutils\n\n.\n\nfromWei\n\n(\n\nmagicBalance\n\n,\n\n\"ether\"\n\n)\n\n)\n\n08\n\n}\n\n08\n\n}\n\n09\n\n}\n\n09\n\n}\n\n10\n\nif\n\n(\n\nscaAddress\n\n&&\n\nweb3\n\n)\n\n{\n\n10\n\nif\n\n(\n\nscaAddress\n\n&&\n\nweb3\n\n)\n\n{\n\n11\n\nconst\n\naaBalance\n\n=\n\nawait\n\nweb3\n\n.\n\neth\n\n.\n\ngetBalance\n\n(\n\nscaAddress\n\n)\n\n11\n\nconst\n\naaBalance\n\n=\n\nawait\n\nweb3\n\n.\n\neth\n\n.\n\ngetBalance\n\n(\n\nscaAddress\n\n)\n\n12\n\nif\n\n(\n\naaBalance\n\n==\n\nBigInt\n\n(\n\n0\n\n)\n\n)\n\n{\n\n12\n\nif\n\n(\n\naaBalance\n\n==\n\nBigInt\n\n(\n\n0\n\n)\n\n)\n\n{\n\n13\n\nsetScaBalance\n\n(\n\n\"0\"\n\n)\n\n13\n\nsetScaBalance\n\n(\n\n\"0\"\n\n)\n\n14\n\n}\n\nelse\n\n{\n\n14\n\n}\n\nelse\n\n{\n\n15\n\nsetScaBalance\n\n(\n\nweb3\n\n.\n\nutils\n\n.\n\nfromWei\n\n(\n\naaBalance\n\n,\n\n\"ether\"\n\n)\n\n)\n\n15\n\nsetScaBalance\n\n(\n\nweb3\n\n.\n\nutils\n\n.\n\nfromWei\n\n(\n\naaBalance\n\n,\n\n\"ether\"\n\n)\n\n)\n\n16\n\n}\n\n16\n\n}\n\n17\n\n}\n\n17\n\n}\n\n18\n\n}\n\n,\n\n[\n\nweb3\n\n,\n\nmagicAddress\n\n,\n\nscaAddress\n\n]\n\n)\n\n18\n\n}\n\n,\n\n[\n\nweb3\n\n,\n\nmagicAddress\n\n,\n\nscaAddress\n\n]\n\n)", "explanation": "**Update getBalance Function Documentation**\n\n**Summary:**\nThe `getBalance` function is used to retrieve and update the balance of the Magic Labs wallet and the SCA (Stablecoins Account) address.\n\n**Purpose:**\nThe purpose of this function is to fetch the current balance of the Magic Labs wallet and the SCA address using the Web3 provider and update the balances accordingly.\n\n**Main Functionality:**\n\n1.  **Retrieve Magic Address Balance:** The function uses the `web3.eth.getBalance` method to fetch the balance of the Magic Address.\n2.  **Handle Zero Balance:** If the balance is 0, it updates the `setMagicBalance` with the string \"0\".\n3.  **Convert Balance to Wei:** If the balance is not 0, it converts the balance from Wei to Ether using the `web3.utils.fromWei` method and updates the `setMagicBalance` with the converted value.\n4.  **Retrieve SCA Address Balance:** The function uses the `web3.eth.getBalance` method to fetch the balance of the SCA address.\n5.  **Handle Zero SCA Balance:** If the SCA balance is 0, it updates the `setScaBalance` with the string \"0\".\n6.  **Convert SCA Balance to Wei:** If the SCA balance is not 0, it converts the balance from Wei to Ether using the `web3.utils.fromWei` method and updates the `setScaBalance` with the converted value.\n\n**Key Components:**\n\n*   `web3`: The Web3 provider used to interact with the Ethereum network.\n*   `magicAddress`: The Magic Labs wallet address.\n*   `scaAddress`: The Stablecoins Account address.\n*   `setMagicBalance` and `setScaBalance`: Functions used to update the balances.\n\n**Key Methods:**\n\n*   `web3.eth.getBalance`: Fetches the balance of the specified address.\n*   `web3.utils.fromWei`: Converts a balance from Wei to Ether.\n\nBy using this function, you can retrieve and update the balance of the Magic Labs wallet and the SCA address in your application.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/wallets/integrations/zerodev-account-abstraction#chunk-8", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nNext, update the TSX for displaying the balance to show both balances:\n\nCopy\n\n01\n\n<\n\ndiv className\n\n=\n\n\"flex flex-col gap-2\"\n\n>\n\n01\n\n<\n\ndiv className\n\n=\n\n\"flex flex-col gap-2\"\n\n>\n\n02\n\n<\n\ndiv className\n\n=\n\n\"code\"\n\n>\n\n02\n\n<\n\ndiv className\n\n=\n\n\"code\"\n\n>\n\n03\n\nMagic\n\n:\n\n{\n\nmagicBalance\n\n.\n\nsubstring\n\n(\n\n0\n\n,\n\n7\n\n)\n\n}\n\n{\n\ngetNetworkToken\n\n(\n\n)\n\n}\n\n03\n\nMagic\n\n:\n\n{\n\nmagicBalance\n\n.\n\nsubstring\n\n(\n\n0\n\n,\n\n7\n\n)\n\n}\n\n{\n\ngetNetworkToken\n\n(\n\n)\n\n}\n\n04\n\n<\n\n/\n\ndiv\n\n>\n\n04\n\n<\n\n/\n\ndiv\n\n>\n\n05\n\n<\n\ndiv className\n\n=\n\n\"code\"\n\n>\n\n05\n\n<\n\ndiv className\n\n=\n\n\"code\"\n\n>\n\n06\n\nAA\n\n:\n\n{\n\nscaBalance\n\n.\n\nsubstring\n\n(\n\n0\n\n,\n\n7\n\n)\n\n}\n\n{\n\ngetNetworkToken\n\n(\n\n)\n\n}\n\n06\n\nAA\n\n:\n\n{\n\nscaBalance\n\n.\n\nsubstring\n\n(\n\n0\n\n,\n\n7\n\n)\n\n}\n\n{\n\ngetNetworkToken\n\n(\n\n)\n\n}\n\n07\n\n<\n\n/\n\ndiv\n\n>\n\n07\n\n<\n\n/\n\ndiv\n\n>\n\n08\n\n<\n\n/\n\ndiv\n\n>\n\n08\n\n<\n\n/\n\ndiv\n\n>", "explanation": "**# Update balance display**\n\nThe **# Update balance display** documentation section is a code snippet that updates the user interface to display two balances: the Magic balance and the SCA (Smart Contract Account) balance.\n\n**Main Purpose:**\n\nThe main purpose of this code is to modify the balance display to include:\n\n1. **Magic Balance:** The updated code adds a `Magic: {balanceSubstring} {getToken}` display for the Magic balance, where `balanceSubstring` extracts the first 7 digits of the balance and `getToken` is replaced with the actual network token symbol.\n2. **SCA Balance:** Similarly, the updated code adds an `AA: {balanceSubstring} {getToken}` display for the SCA balance.\n\n**Key Changes:**\n\nThe changes are limited to the balance display section of the code. The `className` and `code` elements are preserved, while the `Magic{balanceSubstring} {getToken}` and `AA{balanceSubstring} {getToken}` placeholders are updated to display the corresponding balances.\n\nThis code update allows developers to display both the Magic balance and SCA balance in the user interface, following the specified design requirements and formatting standards.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/wallets/integrations/zerodev-account-abstraction#chunk-9", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nThe only remaining balance reference is to set the initial balance while loading to \"...\". This is in a short useEffect that calls setBalance. Update this useEffect to set both balances:\n\n\"...\"\n\nuseEffect\n\nsetBalance\n\nuseEffect\n\nCopy\n\n01\n\n// Change this\n\n01\n\n// Change this\n\n02\n\nuseEffect\n\n(\n\n(\n\n)\n\n=>\n\n{\n\n02\n\nuseEffect\n\n(\n\n(\n\n)\n\n=>\n\n{\n\n03\n\nsetBalance\n\n(\n\n'...'\n\n)\n\n;\n\n03\n\nsetBalance\n\n(\n\n'...'\n\n)\n\n;\n\n04\n\n}\n\n,\n\n[\n\nmagic\n\n]\n\n)\n\n;\n\n04\n\n}\n\n,\n\n[\n\nmagic\n\n]\n\n)\n\n;\n\n05\n\n05\n\n06\n\n// To this\n\n06\n\n// To this\n\n07\n\nuseEffect\n\n(\n\n(\n\n)\n\n=>\n\n{\n\n07\n\nuseEffect\n\n(\n\n(\n\n)\n\n=>\n\n{\n\n08\n\nsetMagicBalance\n\n(\n\n\"...\"\n\n)\n\n08\n\nsetMagicBalance\n\n(\n\n\"...\"\n\n)\n\n09\n\nsetScaBalance\n\n(\n\n\"...\"\n\n)\n\n09\n\nsetScaBalance\n\n(\n\n\"...\"\n\n)\n\n10\n\n}\n\n,\n\n[\n\nmagic\n\n]\n\n)\n\n10\n\n}\n\n,\n\n[\n\nmagic\n\n]\n\n)", "explanation": "**#Update initial balances**\n\nThe \"`#Update initial balances`\" section of the Magic Labs embedded wallet documentation is about updating the initial balances of two types of wallet balances: Magic Balance and SCA (Security Contract Automation) Balance.\n\n**Main purpose:**\n\nThe primary goal of this section is to demonstrate how to set the initial balances for both Magic Balance and SCA Balance when the wallet is loaded.\n\n**Pre-existing function:**\n\nThe `useEffect` function is used to update the balances. Initially, it was setting only the main balance. The code was calling the `setBalance` function to set the initial balance.\n\n**Modification:**\n\nThe modification involves adding two more functions: `setMagicBalance` and `setScaBalance`. These functions are used to set the initial balances for the Magic Balance and SCA Balance, respectively.\n\n**Updated code:**\n\nThe updated code now has two `useEffect` functions inside each other. The outer `useEffect` function calls the inner `useEffect` function, which sets the initial balances for both Magic Balance and SCA Balance.\n\n**Key takeaways:**\n\n1. To update initial balances, you need to use the `setMagicBalance` and `setScaBalance` functions.\n2. The updated code demonstrates how to set the initial balances for both Magic Balance and SCA Balance using the `useEffect` function.\n\nBy following this example, developers can update the initial balances of their Magic Labs embedded wallet while loading, ensuring that the wallet starts with the correct balances.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/wallets/integrations/zerodev-account-abstraction#chunk-10", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nNow find the CardLabel and div that displays the address and modify it to use the new naming for magicAddress and also display the scaAddress.\n\nCardLabel\n\nmagicAddress\n\nscaAddress\n\nCopy\n\n01\n\n<\n\nCardLabel\n\n01\n\n<\n\nCardLabel\n\n02\n\nleftHeader\n\n=\n\n\"Addresses\"\n\n02\n\nleftHeader\n\n=\n\n\"Addresses\"\n\n03\n\nrightAction\n\n=\n\n{\n\n03\n\nrightAction\n\n=\n\n{\n\n04\n\n!\n\nmagicAddress\n\n?\n\n<\n\nSpinner\n\n/\n\n>\n\n:\n\n<\n\ndiv onClick\n\n=\n\n{\n\ncopy\n\n}\n\n>\n\n{\n\ncopied\n\n}\n\n<\n\n/\n\ndiv\n\n>\n\n04\n\n!\n\nmagicAddress\n\n?\n\n<\n\nSpinner\n\n/\n\n>\n\n:\n\n<\n\ndiv onClick\n\n=\n\n{\n\ncopy\n\n}\n\n>\n\n{\n\ncopied\n\n}\n\n<\n\n/\n\ndiv\n\n>\n\n05\n\n}\n\n05\n\n}\n\n06\n\n/\n\n>\n\n06\n\n/\n\n>\n\n07\n\n<\n\ndiv className\n\n=\n\n\"flex flex-col gap-2\"\n\n>\n\n07\n\n<\n\ndiv className\n\n=\n\n\"flex flex-col gap-2\"\n\n>\n\n08\n\n<\n\ndiv className\n\n=\n\n\"code\"\n\n>\n\n08\n\n<\n\ndiv className\n\n=\n\n\"code\"\n\n>\n\n09\n\nMagic\n\n:\n\n{\n\n\" \"\n\n}\n\n09\n\nMagic\n\n:\n\n{\n\n\" \"\n\n}\n\n10\n\n{\n\nmagicAddress\n\n?.\n\nlength\n\n==\n\n0\n\n?\n\n\"Fetching address...\"\n\n:\n\nmagicAddress\n\n}\n\n10\n\n{\n\nmagicAddress\n\n?.\n\nlength\n\n==\n\n0\n\n?\n\n\"Fetching address...\"\n\n:\n\nmagicAddress\n\n}\n\n11\n\n<\n\n/\n\ndiv\n\n>\n\n11\n\n<\n\n/\n\ndiv\n\n>\n\n12\n\n<\n\ndiv className\n\n=\n\n\"code\"\n\n>\n\n12\n\n<\n\ndiv className\n\n=\n\n\"code\"\n\n>\n\n13\n\nSmart\n\nContract\n\nAccount\n\n:\n\n{\n\n\" \"\n\n}\n\n13\n\nSmart\n\nContract\n\nAccount\n\n:\n\n{\n\n\" \"\n\n}\n\n14\n\n{\n\nscaAddress\n\n?.\n\nlength\n\n==\n\n0\n\n?\n\n\"Fetching address...\"\n\n:\n\nscaAddress\n\n}\n\n14\n\n{\n\nscaAddress\n\n?.\n\nlength\n\n==\n\n0\n\n?\n\n\"Fetching address...\"\n\n:\n\nscaAddress\n\n}\n\n15\n\n<\n\n/\n\ndiv\n\n>\n\n15\n\n<\n\n/\n\ndiv\n\n>\n\n16\n\n<\n\n/\n\ndiv\n\n>\n\n16\n\n<\n\n/\n\ndiv\n\n>", "explanation": "**Update Address Display**\n\nThis documentation section is related to updating the display of addresses in the Magic Labs embedded wallet, specifically for the ZeroDevs account abstraction integration.\n\n**Main Purpose:**\n\nThe main purpose is to modify the existing code to use the new naming convention for Magic addresses (`magicAddress`) and also display Smart Contract Account (SCA) addresses (`scaAddress`).\n\n**Key Changes:**\n\n1.  Replace instances of `CardLabel` with the new names: `magicAddress` and `scaAddress`.\n2.  Update the code to handle the display of SCA addresses, which may be empty or fetching, similar to the Magic addresses.\n3.  Keep the existing structure and layout for displaying addresses.\n\n**Example:**\n\nThe following lines demonstrate the changes:\n\n-   Before: `magicAddress`\n-   After: `01` and `<magicAddress>`\n\n-   Before: `scaAddress`\n-   After: `14` and `{ scaAddress ? .length == 0 ? \"Fetching address...\" : scaAddress }`\n\nThe updated code will display both Magic and SCA addresses with the correct labels and handling of fetching states.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/wallets/integrations/zerodev-account-abstraction#chunk-11", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\ncopy\n\nLastly, update the copy function to reference magicAddress instead of publicAddress, otherwise you\u2019ll get an error.\n\ncopy\n\nmagicAddress\n\npublicAddress\n\nCopy\n\n01\n\nconst\n\ncopy\n\n=\n\nuseCallback\n\n(\n\n(\n\n)\n\n=>\n\n{\n\n01\n\nconst\n\ncopy\n\n=\n\nuseCallback\n\n(\n\n(\n\n)\n\n=>\n\n{\n\n02\n\nif\n\n(\n\nmagicAddress\n\n&&\n\ncopied\n\n===\n\n\"Copy\"\n\n)\n\n{\n\n02\n\nif\n\n(\n\nmagicAddress\n\n&&\n\ncopied\n\n===\n\n\"Copy\"\n\n)\n\n{\n\n03\n\nsetCopied\n\n(\n\n\"Copied!\"\n\n)\n\n03\n\nsetCopied\n\n(\n\n\"Copied!\"\n\n)\n\n04\n\nnavigator\n\n.\n\nclipboard\n\n.\n\nwriteText\n\n(\n\nmagicAddress\n\n)\n\n04\n\nnavigator\n\n.\n\nclipboard\n\n.\n\nwriteText\n\n(\n\nmagicAddress\n\n)\n\n05\n\nsetTimeout\n\n(\n\n(\n\n)\n\n=>\n\n{\n\n05\n\nsetTimeout\n\n(\n\n(\n\n)\n\n=>\n\n{\n\n06\n\nsetCopied\n\n(\n\n\"Copy\"\n\n)\n\n06\n\nsetCopied\n\n(\n\n\"Copy\"\n\n)\n\n07\n\n}\n\n,\n\n1000\n\n)\n\n07\n\n}\n\n,\n\n1000\n\n)\n\n08\n\n}\n\n08\n\n}\n\n09\n\n}\n\n,\n\n[\n\ncopied\n\n,\n\nmagicAddress\n\n]\n\n)\n\n09\n\n}\n\n,\n\n[\n\ncopied\n\n,\n\nmagicAddress\n\n]\n\n)\n\nNow when a user logs in using Magic, both their Magic and smart contract account address and balances will be displayed!", "explanation": "**Update Copy Function Explanation**\n\nThe documentation section titled '#Update copy function' is about modifying the logic for copying text to the clipboard when interacting with a Magic Labs embedded wallet.\n\n**Main Purpose:**\n\nThe main purpose of this update is to integrate the copying functionality with the Magic Labs wallet's address referencing system. Specifically, it updates the \"copy\" function to reference `magicAddress` instead of `publicAddress`. This is necessary to prevent errors.\n\n**Key Components:**\n\n1. The updated `copy` function uses `magicAddress` instead of `publicAddress` for copying the wallet address to the clipboard.\n2. It checks if `magicAddress` exists and if the `copied` flag is equal to the string \"Copy\". If both conditions are met, it then copies the `magicAddress` to the clipboard.\n3. After copying the address to the clipboard, it sets the `copied` flag to \"Copied!\" and then waits for 1 second (1000 milliseconds) before resetting the `copied` flag to \"Copy\".\n4. The `useCallback` hook is used to memoize the `copy` function and prevent unnecessary re-renders.\n\n**Context:**\n\nThis update is likely intended for use in a web application where users interact with a Magic Labs embedded wallet. When a user logs in using Magic, both their Magic account address and smart contract account address and balances will be displayed. The updated `copy` function allows users to copy the wallet address to the clipboard for easy sharing or reference.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/wallets/integrations/zerodev-account-abstraction#chunk-12", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nSendTransactionCard\n\nTo send a transaction from your smart contract account, you will need to initiate a transaction by calling the sendTransaction method on the ZeroDev kernelClient object. This transaction requires the following arguments:\n\nsendTransaction\n\nkernelClient\n\n\u2022 target - The recipient\u2019s wallet address\n\n\u2022 data - Data associated with the transaction. Since we\u2019re just transferring tokens, there is no data and you should put \"0x\"\n\n\u2022 value - the amount of tokens to send in wei.\n\ntarget\n\ndata\n\n\"0x\"\n\nvalue\n\nwei\n\nIn src/components/magic/cards/SendTransactionCard.tsx, import the the kernelClient from useZeroDevKernelClient hook and replace the code for sendTransaction with the code below.\n\nsrc/components/magic/cards/SendTransactionCard.tsx\n\nkernelClient\n\nuseZeroDevKernelClient\n\nsendTransaction\n\nTo transfer funds from your smart contract account, ensure you have enough test tokens to send. You can get some test Sepolia tokens here.\n\nhere\n\nCopy\n\n01\n\nconst\n\nsendTransaction\n\n=\n\nuseCallback\n\n(\n\nasync\n\n(\n\n)\n\n=>\n\n{\n\n01\n\nconst\n\nsendTransaction\n\n=\n\nuseCallback\n\n(\n\nasync\n\n(\n\n)\n\n=>\n\n{\n\n02\n\nif\n\n(\n\n!\n\nweb3\n\n?.\n\nutils\n\n.\n\nisAddress\n\n(\n\ntoAddress\n\n)\n\n)\n\n{\n\n02\n\nif\n\n(\n\n!\n\nweb3\n\n?.\n\nutils\n\n.\n\nisAddress\n\n(\n\ntoAddress\n\n)\n\n)\n\n{\n\n03\n\nreturn\n\nsetToAddressError\n\n(\n\ntrue\n\n)\n\n;\n\n03\n\nreturn\n\nsetToAddressError\n\n(\n\ntrue\n\n)\n\n;\n\n04\n\n}\n\n04\n\n}\n\n05\n\nif\n\n(\n\nisNaN\n\n(\n\nNumber\n\n(\n\namount\n\n)\n\n)\n\n)\n\n{\n\n05\n\nif\n\n(\n\nisNaN\n\n(\n\nNumber\n\n(\n\namount\n\n)\n\n)\n\n)\n\n{\n\n06\n\nreturn\n\nsetAmountError\n\n(\n\ntrue\n\n)\n\n;\n\n06\n\nreturn\n\nsetAmountError\n\n(\n\ntrue\n\n)\n\n;\n\n07\n\n}\n\n07\n\n}\n\n08\n\nsetDisabled\n\n(\n\ntrue\n\n)\n\n;\n\n08\n\nsetDisabled\n\n(\n\ntrue\n\n)\n\n;\n\n09\n\n09\n\n10\n\ntry\n\n{\n\n10\n\ntry\n\n{\n\n11\n\nconst\n\nresult\n\n=\n\nawait\n\nkernelClient\n\n.\n\nsendTransaction\n\n(\n\n{\n\n11\n\nconst\n\nresult\n\n=\n\nawait\n\nkernelClient\n\n.\n\nsendTransaction\n\n(\n\n{\n\n12\n\nto\n\n:\n\ntoAddress\n\nas\n\n`\n\n0x\n\n${\n\nstring\n\n}\n\n`\n\n,\n\n12\n\nto\n\n:\n\ntoAddress\n\nas\n\n`\n\n0x\n\n${\n\nstring\n\n}\n\n`\n\n,\n\n13\n\ndata\n\n:\n\n\"0x\"\n\n,\n\n13\n\ndata\n\n:\n\n\"0x\"\n\n,\n\n14\n\nvalue\n\n:\n\nweb3\n\n.\n\nutils\n\n.\n\ntoWei\n\n(\n\namount\n\n,\n\n'ether'\n\n)\n\n,\n\n14\n\nvalue\n\n:\n\nweb3\n\n.\n\nutils\n\n.\n\ntoWei\n\n(\n\namount\n\n,\n\n'ether'\n\n)\n\n,\n\n15\n\n}\n\n)\n\n;\n\n15\n\n}\n\n)\n\n;\n\n16\n\n16\n\n17\n\nshowToast\n\n(\n\n{\n\n17\n\nshowToast\n\n(\n\n{\n\n18\n\nmessage\n\n:\n\n`\n\nTransaction Successful. TX Hash:\n\n${\n\nresult\n\n}\n\n`\n\n,\n\n18\n\nmessage\n\n:\n\n`\n\nTransaction Successful. TX Hash:\n\n${\n\nresult\n\n}\n\n`\n\n,\n\n19\n\ntype\n\n:\n\n'success'\n\n,\n\n19\n\ntype\n\n:\n\n'success'\n\n,\n\n20\n\n}\n\n)\n\n;\n\n20\n\n}\n\n)\n\n;\n\n21\n\nsetHash\n\n(\n\nresult\n\n.\n\nhash\n\n)\n\n;\n\n21\n\nsetHash\n\n(\n\nresult\n\n.\n\nhash\n\n)\n\n;\n\n22\n\nsetToAddress\n\n(\n\n''\n\n)\n\n;\n\n22\n\nsetToAddress\n\n(\n\n''\n\n)\n\n;\n\n23\n\nsetAmount\n\n(\n\n''\n\n)\n\n;\n\n23\n\nsetAmount\n\n(\n\n''\n\n)\n\n;\n\n24\n\n}\n\ncatch\n\n(\n\nerr\n\n)\n\n{\n\n24\n\n}\n\ncatch\n\n(\n\nerr\n\n)\n\n{\n\n25\n\nconsole\n\n.\n\nlog\n\n(\n\nerr\n\n)\n\n25\n\nconsole\n\n.\n\nlog\n\n(\n\nerr\n\n)\n\n26\n\n}\n\n26\n\n}\n\n27\n\n27\n\n28\n\nsetDisabled\n\n(\n\nfalse\n\n)\n\n;\n\n28\n\nsetDisabled\n\n(\n\nfalse\n\n)\n\n;\n\n29\n\n}\n\n,\n\n[\n\nweb3\n\n,\n\namount\n\n,\n\npublicAddress\n\n,\n\ntoAddress\n\n]\n\n)\n\n;\n\n29\n\n}\n\n,\n\n[\n\nweb3\n\n,\n\namount\n\n,\n\npublicAddress\n\n,\n\ntoAddress\n\n]\n\n)\n\n;\n\nThats it! Go ahead and run the project to test it out. Then you can test out transferring tokens from your smart contract account. \u2060 \u2060Note: If you set up a paymaster earlier, then this transaction won't cost the user any gas. To be sure, try changing the value to 0 and send a transaction - you will notice that your ZeroDev account's balance didn't change at all.\n\nvalue\n\n0", "explanation": "The `#Update SendTransactionCard` section is about updating the code for a `SendTransactionCard` component in the Magic Labs embedded wallet integration. The main purpose of this section is to explain how to initiate a transaction to send tokens from a smart contract account using the ZeroDev kernel client.\n\nThe `SendTransactionCard` component is where users can initiate a transaction to send tokens from their smart contract account. The updated code snippet provides the necessary logic to achieve this. Here's a breakdown of the main components:\n\n1. **KernelClient**: The updated code imports the `kernelClient` from the `useZeroDevKernelClient` hook.\n2. **`sendTransaction` function**: This function is created using the `useCallback` hook to ensure it's updated whenever the `kernelClient` changes.\n3. **Transaction validation**: The code checks the recipient's address and token amount to ensure they are valid. If not, it returns an error.\n4. **Transaction execution**: The `sendTransaction` function uses the `kernelClient` to call the `sendTransaction` method on the ZeroDev kernel client. It passes the necessary arguments, including the recipient's address, data (in this case, \"0x\"), and the token amount in wei.\n5. **Success and error handling**: The code displays a success message with the transaction hash and logs any errors that occur during execution.\n6. **Reset state**: After a successful transaction, the code resets the recipient's address, token amount, and disables the send button.\n\nIn summary, the `#Update SendTransactionCard` section provides the necessary updates to the `SendTransactionCard` component to allow users to initiate transactions and send tokens from their smart contract account using the ZeroDev kernel client.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/wallets/integrations/zerodev-account-abstraction#chunk-13", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nYou now know how to integrate Magic with a smart contract account and include the following features:\n\n\u2022 Simple authentication with Email OTP\n\n\u2022 Automatic smart contract account creation for first-time users\n\n\u2022 Ability to have Magic users interact with their smart contract accounts\n\n\u2022 Transfer funds from your smart contract account\n\nFeel free to take a look at our final solution code or tinker with it directly in Codesandbox. Take a look at the ZeroDev smart account docs for more information on what is possible with Magic and smart accounts.\n\nfinal solution code\n\nCodesandbox\n\nsmart account", "explanation": "**Understanding the Next Steps Section**\n\nThe '#Next Steps' section is a critical part of the Magic Labs embedded wallet documentation, providing guidance on what to do after integrating the Magic wallet with a smart contract account. This section is designed to equip developers with the necessary knowledge to build a seamless user experience.\n\n**Main Purpose**\n\nThe main purpose of the '#Next Steps' section is to:\n\n1. Recap the key features implemented during integration (Email OTP authentication, automatic smart contract account creation, user interaction, and fund transfers).\n2. Encourage exploration and discovery of further capabilities within the Magic wallet and smart account system.\n3. Offer a clear call-to-action, inviting developers to examine the final solution code and experiment with it in Codesandbox.\n\n**Key Takeaways**\n\nBy following the instructions in the '#Next Steps' section, developers will:\n\n* Learn how to build upon the integration they've completed.\n* Discover additional features and functionalities within the Magic wallet.\n* Have the opportunity to explore the full potential of Magic and smart accounts.\n\nBy understanding the purpose and content of the '#Next Steps' section, developers can accelerate their development process and create a more comprehensive and user-friendly experience for their end-users.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/wallets/integrations/zerodev-account-abstraction#chunk-14", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "Alchemy\u2019s Account Abstraction tooling makes it possible to quickly spin up Smart Contract Accounts tied to your Magic wallet. The guide below walks through adding account abstraction to a simple Magic project using Alchemy. We\u2019ll leverage a project pointed at the Ethereum Sepolia test network, but you can use any network supported by both Magic and Alchemy. The code snippets provided are based on a Next.js web app but can be modified to work with virtually any JavaScript framework.\n\nYou can view the full example on github or codesandbox.\n\ngithub\n\ncodesandbox", "explanation": "**Alchemy Account Abstraction Overview**\n\nAlchemy's Account Abstraction is a tool that enables developers to easily create and manage Smart Contract Accounts associated with their Magic wallet. This feature allows for a more advanced and flexible user experience, enabling users to store, manage, and interact with their digital assets in a more seamless way.\n\n**Main Purpose:**\n\nThe primary purpose of Alchemy Account Abstraction is to provide a straightforward way to integrate Magic wallets with Smart Contract Accounts, enabling developers to:\n\n* Easily create and manage Smart Contract Accounts\n* Leverage the full potential of Magic wallets in their applications\n* Provide a more robust and user-friendly experience for their users\n\n**Key Benefits:**\n\n* Simplified integration with Magic wallets and Smart Contract Accounts\n* Enhanced flexibility and customization options\n* Improved user experience and security features\n\n**Getting Started:**\n\nTo get started with Alchemy Account Abstraction, developers can follow the guide provided in the Magic documentation, which includes step-by-step instructions and code snippets for integrating Alchemy's Account Abstraction tooling with a Next.js web app. They can also access the full example on GitHub or CodeSandbox for reference.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/wallets/integrations/alchemy-account-abstraction#chunk-1", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nTo follow along with this guide, you\u2019ll need two things:\n\n\u2022 A Magic Publishable API Key\n\n\u2022 Alchemy RPC URL\n\n\u2022 A web client\n\nYou can get your Publishable API Key from your Magic Dashboard.\n\nMagic Dashboard\n\nYou can get your Alchemy RPC URL (for Ethereum Sepolia) from your Alchemy Dashboard.\n\nAlchemy Dashboard\n\nWe\u2019ll use the make-scoped-magic-app CLI tool to bootstrap a Next.js app with Magic authentication already baked into the client. You\u2019re welcome to use your own client, but this tutorial and its accompanying code snippets assume the output of the make-scoped-magic-app CLI as the starting point.\n\nmake-scoped-magic-app\n\nmake-scoped-magic-app\n\nThe make-scoped-magic-app CLI tool is an easy way to bootstrap new projects with Magic. To get started, simply run the command below in the shell of your choice. Be sure to replace <PUBLISHABLE_API_KEY> with the Publishable API Key from your Magic Dashboard.\n\nmake-scoped-magic-app\n\n<PUBLISHABLE_API_KEY>\n\nMagic Dashboard\n\nCopy\n\n01\n\nnpx make-scoped-magic-app\n\n\\\n\n\\\n\n01\n\nnpx make-scoped-magic-app\n\n\\\n\n\\\n\n02\n\n--template nextjs-dedicated-wallet\n\n\\\n\n\\\n\n02\n\n--template nextjs-dedicated-wallet\n\n\\\n\n\\\n\n03\n\n--network ethereum-sepolia\n\n\\\n\n\\\n\n03\n\n--network ethereum-sepolia\n\n\\\n\n\\\n\n04\n\n--login-methods EmailOTP\n\n\\\n\n\\\n\n04\n\n--login-methods EmailOTP\n\n\\\n\n\\\n\n05\n\n--publishable-api-key\n\n<\n\nYOUR_PUBLISHABLE_API_KEY\n\n>\n\n05\n\n--publishable-api-key\n\n<\n\nYOUR_PUBLISHABLE_API_KEY\n\n>\n\nThis will bootstrap the starting point of the tutorial for you. In the scaffolded project, be sure to add your Magic Publishable API Key and Alchemy RPC URL to the .env as NEXT_PUBLIC_MAGIC_API_KEY and NEXT_PUBLIC_SEPOLIA_RPC, respectively.\n\n.env\n\nNEXT_PUBLIC_MAGIC_API_KEY\n\nNEXT_PUBLIC_SEPOLIA_RPC\n\nCopy\n\n01\n\n// Publishable API Key found in the Magic Dashboard\n\n01\n\n// Publishable API Key found in the Magic Dashboard\n\n02\n\nNEXT_PUBLIC_MAGIC_API_KEY=pk_live_1234567890\n\n02\n\nNEXT_PUBLIC_MAGIC_API_KEY=pk_live_1234567890\n\n03\n\n03\n\n04\n\n// The RPC URL for the blockchain network\n\n04\n\n// The RPC URL for the blockchain network\n\n05\n\nNEXT_PUBLIC_BLOCKCHAIN_NETWORK=ethereum-sepolia\n\n05\n\nNEXT_PUBLIC_BLOCKCHAIN_NETWORK=ethereum-sepolia\n\n06\n\n06\n\n07\n\n// The Alchemy RPC URL for the blockchain network\n\n07\n\n// The Alchemy RPC URL for the blockchain network\n\n08\n\nNEXT_PUBLIC_SEPOLIA_RPC=https://eth-sepolia.g.alchemy.com/v2/{ALCHEMY_API_KEY}\n\n08\n\nNEXT_PUBLIC_SEPOLIA_RPC=https://eth-sepolia.g.alchemy.com/v2/{ALCHEMY_API_KEY}", "explanation": "The '#Project prerequisites' section is about the required setup and external dependencies needed before following the linked documentation. \n\nThe main purpose of this section is to ensure that users have the necessary tools and configurations in place to proceed with the guide. \n\nHere are the specific requirements:\n\n- A Magic Publishable API Key: This is obtained from the Magic Dashboard.\n- An Alchemy RPC URL (for Ethereum Sepolia): This is obtained from the Alchemy Dashboard.\n- A web client: While not specifically mentioned, it implies that users need a client-side environment to build and test the project.\n\nAdditionally, the section introduces the `make-scoped-magic-app` CLI tool, which is used to bootstrap a Next.js app with Magic authentication. Users are encouraged to use this tool, but can also create their own client project.\n\nThe prerequisites are set up to allow the user to easily generate and configure the necessary environment variables using the `make-scoped-magic-app` CLI tool, particularly by creating a `.env` file for Magic Publishable API Key and Alchemy RPC URL variables.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/wallets/integrations/alchemy-account-abstraction#chunk-2", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nIn addition to the packages included in the scaffold produced by the make-scoped-magic-app CLI, you\u2019ll need a number of packages related to Alchemy and their account abstraction tools. You\u2019ll also need to install viem for EVM-related types and transaction convenience methods. You may need a specific version of viem to work properly with the Alchemy packages. At the time of writing, we\u2019re using 1.16.0.\n\nmake-scoped-magic-app\n\nviem\n\nviem\n\n1.16.0\n\nRun the following command to install the required dependencies:\n\nCopy\n\n01\n\nnpm\n\ninstall\n\n@alchemy/aa-accounts @alchemy/aa-alchemy @alchemy/aa-core viem@\n\n\\\n\n^1.16.0\n\n01\n\nnpm\n\ninstall\n\n@alchemy/aa-accounts @alchemy/aa-alchemy @alchemy/aa-core viem@\n\n\\\n\n^1.16.0", "explanation": "**Installing Additional Project Dependencies**\n\nIn the Magic Labs documentation, the section \"#Install additional project dependencies\" outlines the necessary steps to set up additional project dependencies for integrating with Alchemy's account abstraction tools. These dependencies complement the packages included in the scaffold generated by the `make-scoped-magic-app` CLI.\n\n**Main Purpose:**\nThe primary purpose of this section is to guide users in installing the required packages to work with Alchemy's account abstraction tools and EVM-related types and transaction convenience methods. These dependencies are essential for connecting to the Alchemy network and leveraging its features.\n\n**Required Packages:**\n\n1. `@alchemy/aa-accounts`\n2. `@alchemy/aa-alchemy`\n3. `@alchemy/aa-core`\n4. `viem` (version 1.16.0)\n\n**Installation Command:**\nTo install these dependencies, users need to run the following command in their terminal:\n\n```bash\nnpm install @alchemy/aa-accounts @alchemy/aa-alchemy @alchemy/aa-core viem@1.16.0\n```\n\nBy following this section, users can ensure their project has the necessary dependencies to work seamlessly with Alchemy's account abstraction tools, enabling them to develop and integrate a secure and scalable wallet solution.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/wallets/integrations/alchemy-account-abstraction#chunk-3", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nInside of src/components, create a directory named alchemy. Inside that directory create a file named useAlchemyProvider.tsx.\n\nsrc/components\n\nalchemy\n\nuseAlchemyProvider.tsx\n\nThis file will contain a hook that will surface the Alchemy Provider to the rest of the app. It\u2019ll also observe when users log in or out and connect and disconnect to the corresponding smart contract account accordingly. We\u2019ll go through each of these three separately, then show the code for the entire file.\n\n#\n\nAlchemyProvider\n\nTo initialize the AlchemyProvider, call the constructor with the following arguments:\n\nAlchemyProvider\n\n\u2022 chain - The chain to point to. We\u2019ll be using Sepolia\n\n\u2022 entryPointAddress - The entry point address is the ERC-4337 contract that enables account abstraction. In our case, we\u2019ll be using the one provided by Alchemy, which you can hardcode as 0x5FF137D4b0FDCD49DcA30c7CF57E578a026d2789.\n\n\u2022 rpcUrl - The RPC URL from your Alchemy Sepolia project\n\nchain\n\nentryPointAddress\n\n0x5FF137D4b0FDCD49DcA30c7CF57E578a026d2789\n\nrpcUrl", "explanation": "**Alchemy Smart Contract Account Initialization Overview**\n\nThe provided documentation is about initializing the Alchemy smart contract account using the AlchemyProvider in a Magic Labs embedded wallet integration. This is a crucial step to establish a connection between the user's wallet and the Alchemy smart contract account abstraction.\n\n**Main Purpose:**\n\nThe main purpose of this section is to:\n\n1. Explain the setup of the `AlchemyProvider` component\n2. Describe the required arguments for initializing the `AlchemyProvider`\n3. Provide the necessary information for connecting to the corresponding smart contract account\n\n**Required Arguments for AlchemyProvider:**\n\nTo initialize the `AlchemyProvider`, you need to provide the following arguments:\n\n1. **chain**: The chain to point to (e.g., Sepolia)\n2. **entryPointAddress**: The ERC-4337 contract address that enables account abstraction (specifically, the address provided by Alchemy)\n3. **rpcUrl**: The RPC URL from your Alchemy Sepolia project\n\n**Code Example:**\n\nThe code will be contained in a file named `useAlchemyProvider.tsx` inside a directory named `alchemy` within the `src/components` directory.\n\nBy following this section, you'll be able to set up the `AlchemyProvider` and establish a connection between the user's wallet and the Alchemy smart contract account abstraction, enabling seamless account management in your Magic Labs embedded wallet integration.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/wallets/integrations/alchemy-account-abstraction#chunk-4", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nWhen a user logs in with Magic, we need to associate their Magic account with a smart contract account through Alchemy. Just as Magic handles the creation of user wallets, Alchemy handles the creation of smart contract accounts associated with the wallet. You do this with the LightSmartContractAccount from the @alchemy/aa-accounts package. You\u2019ll need to pass it the following:\n\nLightSmartContractAccount\n\n@alchemy/aa-accounts\n\n\u2022 rpcClient - This should be the provider initialized previously\n\n\u2022 owner - The account owner; in this case you initialize a WalletClientSigner using the RPC provider from magic\n\n\u2022 chain - The chain to use. It should be the same one used to initialize the Alchemy Provider.\n\n\u2022 entryPointAddress - The ERC-4337 contract that enables account abstraction. It should be the same one used to initialize the Alchemy Provider.\n\n\u2022 factoryAddress - The address that facilitates the creation of new wallet contracts. You can get this with the getDefaultLightAccountFactoryAddress helper function from @alchemy/aa-accounts.\n\nrpcClient\n\nowner\n\nWalletClientSigner\n\nmagic\n\nchain\n\nentryPointAddress\n\nfactoryAddress\n\ngetDefaultLightAccountFactoryAddress\n\n@alchemy/aa-accounts\n\nBelow is an example of how to connect to a Magic user\u2019s smart contract account:\n\nCopy\n\n01\n\nconst\n\nlightAccountFactoryAddress\n\n=\n\ngetDefaultLightAccountFactoryAddress\n\n(\n\nchain\n\n)\n\n01\n\nconst\n\nlightAccountFactoryAddress\n\n=\n\ngetDefaultLightAccountFactoryAddress\n\n(\n\nchain\n\n)\n\n02\n\n02\n\n03\n\nconst\n\nmagicSigner\n\n:\n\nSmartAccountSigner\n\n|\n\nundefined\n\n=\n\nuseMemo\n\n(\n\n(\n\n)\n\n=>\n\n{\n\n03\n\nconst\n\nmagicSigner\n\n:\n\nSmartAccountSigner\n\n|\n\nundefined\n\n=\n\nuseMemo\n\n(\n\n(\n\n)\n\n=>\n\n{\n\n04\n\nif\n\n(\n\n!\n\nmagic\n\n)\n\nreturn\n\n04\n\nif\n\n(\n\n!\n\nmagic\n\n)\n\nreturn\n\n05\n\n05\n\n06\n\nconst\n\nclient\n\n=\n\ncreateWalletClient\n\n(\n\n{\n\n06\n\nconst\n\nclient\n\n=\n\ncreateWalletClient\n\n(\n\n{\n\n07\n\ntransport\n\n:\n\ncustom\n\n(\n\nmagic\n\n.\n\nrpcProvider\n\n)\n\n,\n\n07\n\ntransport\n\n:\n\ncustom\n\n(\n\nmagic\n\n.\n\nrpcProvider\n\n)\n\n,\n\n08\n\n}\n\n)\n\n08\n\n}\n\n)\n\n09\n\n09\n\n10\n\nreturn\n\nnew\n\nWalletClientSigner\n\n(\n\nclient\n\nas\n\nany\n\n,\n\n\"magic\"\n\n)\n\n10\n\nreturn\n\nnew\n\nWalletClientSigner\n\n(\n\nclient\n\nas\n\nany\n\n,\n\n\"magic\"\n\n)\n\n11\n\n}\n\n,\n\n[\n\nmagic\n\n]\n\n)\n\n11\n\n}\n\n,\n\n[\n\nmagic\n\n]\n\n)\n\n12\n\n12\n\n13\n\nprovider\n\n.\n\nconnect\n\n(\n\n(\n\nprovider\n\n)\n\n=>\n\n{\n\n13\n\nprovider\n\n.\n\nconnect\n\n(\n\n(\n\nprovider\n\n)\n\n=>\n\n{\n\n14\n\nreturn\n\nnew\n\nLightSmartContractAccount\n\n(\n\n{\n\n14\n\nreturn\n\nnew\n\nLightSmartContractAccount\n\n(\n\n{\n\n15\n\nrpcClient\n\n:\n\nprovider\n\n,\n\n15\n\nrpcClient\n\n:\n\nprovider\n\n,\n\n16\n\nowner\n\n:\n\nmagicSigner\n\n,\n\n16\n\nowner\n\n:\n\nmagicSigner\n\n,\n\n17\n\nchain\n\n,\n\n17\n\nchain\n\n,\n\n18\n\nentryPointAddress\n\n,\n\n18\n\nentryPointAddress\n\n,\n\n19\n\nfactoryAddress\n\n:\n\nlightAccountFactoryAddress\n\n,\n\n19\n\nfactoryAddress\n\n:\n\nlightAccountFactoryAddress\n\n,\n\n20\n\n}\n\n)\n\n20\n\n}\n\n)\n\n21\n\n}\n\n)\n\n21\n\n}\n\n)", "explanation": "**Connecting to Smart Contract Account with Magic Labs Embedded Wallet**\n\nThis documentation section explains how to connect a Magic Labs embedded wallet to a smart contract account using the Alchemy Account Abstraction (AA) package. The main purpose is to associate a user's Magic account with a smart contract account, enabling secure and seamless interactions with decentralized applications (dApps).\n\n**Key Components**\n\n1. **Alchemy Account Abstraction (AA)**: A package that enables the creation and management of smart contract accounts associated with wallets.\n2. **LightSmartContractAccount**: A class from the @alchemy/aa-accounts package that represents a smart contract account.\n3. **WalletClientSigner**: A class that signs transactions on behalf of the user's wallet.\n\n**Connection Process**\n\nTo connect the Magic Labs embedded wallet to a smart contract account, follow these steps:\n\n1. Initialize the Alchemy Provider with the RPC client and chain information.\n2. Get the default Light Account Factory Address using the `getDefaultLightAccountFactoryAddress` helper function.\n3. Create a WalletClientSigner instance using the Magic RPC provider.\n4. Create a LightSmartContractAccount instance with the following properties:\n\t* `rpcClient`: The Alchemy Provider instance.\n\t* `owner`: The WalletClientSigner instance.\n\t* `chain`: The chain used to initialize the Alchemy Provider.\n\t* `entryPointAddress`: The ERC-4337 contract that enables account abstraction.\n\t* `factoryAddress`: The default Light Account Factory Address.\n5. Connect the LightSmartContractAccount instance with the Magic Labs embedded wallet using the `connect` method.\n\n**Example Code**\n\nThe provided example code demonstrates how to connect to a Magic user's smart contract account using the Alchemy AA package. The code showcases the creation of a WalletClientSigner instance and a LightSmartContractAccount instance, followed by the connection process.\n\nBy following this documentation section, developers can ensure a seamless integration between the Magic Labs embedded wallet and smart contract accounts, enabling a more secure and user-friendly experience for decentralized applications.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/wallets/integrations/alchemy-account-abstraction#chunk-5", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nWhen a user logs out, you\u2019ll need to disconnect from their smart contract account. This is as simple as calling provider.disconnect() and handling necessary state changes.\n\nprovider.disconnect()", "explanation": "**Disconnect from Smart Contract Account**\n\nThe '#Disconnect from smart contract account' documentation section describes the process of disconnecting a user from their smart contract account when they log out. \n\n**Main Purpose:**\n\nThe main purpose of disconnecting from a smart contract account is to ensure that the user's account is properly cleaned up, and their state changes are handled after they log out. This is crucial for security and practicality reasons.\n\n**What it achieves:**\n\nWhen `provider.disconnect()` is called, the following actions occur:\n\n1. **Account Disconnection:** The user is disconnected from their smart contract account.\n2. **State Changes:** Necessary state changes are handled, ensuring that the user's account is properly cleaned up.\n\n**Key Function:** `provider.disconnect()`\n\nThis function is the core of the disconnect process. By calling `provider.disconnect()`, you can ensure that the user's account is properly disconnected and their state changes are handled.\n\n**Why it's necessary:** Disconnecting from a smart contract account after logout is essential for preventing potential security vulnerabilities and maintaining a positive user experience.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/wallets/integrations/alchemy-account-abstraction#chunk-6", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nuseAlchemyProvider\n\nWhen we put all of this together, we get the following:\n\nCopy\n\n01\n\nimport\n\n{\n\n01\n\nimport\n\n{\n\n02\n\ngetDefaultLightAccountFactoryAddress\n\n,\n\n02\n\ngetDefaultLightAccountFactoryAddress\n\n,\n\n03\n\nLightSmartContractAccount\n\n,\n\n03\n\nLightSmartContractAccount\n\n,\n\n04\n\n}\n\nfrom\n\n\"@alchemy/aa-accounts\"\n\n04\n\n}\n\nfrom\n\n\"@alchemy/aa-accounts\"\n\n05\n\nimport\n\n{\n\nSmartAccountSigner\n\n,\n\nWalletClientSigner\n\n}\n\nfrom\n\n\"@alchemy/aa-core\"\n\n05\n\nimport\n\n{\n\nSmartAccountSigner\n\n,\n\nWalletClientSigner\n\n}\n\nfrom\n\n\"@alchemy/aa-core\"\n\n06\n\nimport\n\n{\n\nAlchemyProvider\n\n}\n\nfrom\n\n\"@alchemy/aa-alchemy\"\n\n06\n\nimport\n\n{\n\nAlchemyProvider\n\n}\n\nfrom\n\n\"@alchemy/aa-alchemy\"\n\n07\n\nimport\n\n{\n\nsepolia\n\n}\n\nfrom\n\n\"viem/chains\"\n\n07\n\nimport\n\n{\n\nsepolia\n\n}\n\nfrom\n\n\"viem/chains\"\n\n08\n\nimport\n\n{\n\ncreateWalletClient\n\n,\n\ncustom\n\n,\n\nWalletClient\n\n}\n\nfrom\n\n\"viem\"\n\n08\n\nimport\n\n{\n\ncreateWalletClient\n\n,\n\ncustom\n\n,\n\nWalletClient\n\n}\n\nfrom\n\n\"viem\"\n\n09\n\nimport\n\n{\n\nuseCallback\n\n,\n\nuseEffect\n\n,\n\nuseMemo\n\n,\n\nuseState\n\n}\n\nfrom\n\n\"react\"\n\n09\n\nimport\n\n{\n\nuseCallback\n\n,\n\nuseEffect\n\n,\n\nuseMemo\n\n,\n\nuseState\n\n}\n\nfrom\n\n\"react\"\n\n10\n\nimport\n\n{\n\nuseMagic\n\n}\n\nfrom\n\n\"../magic/MagicProvider\"\n\n10\n\nimport\n\n{\n\nuseMagic\n\n}\n\nfrom\n\n\"../magic/MagicProvider\"\n\n11\n\n11\n\n12\n\n// Initializes the useAlchemyProvider hook for managing AlchemyProvider in a React component.\n\n12\n\n// Initializes the useAlchemyProvider hook for managing AlchemyProvider in a React component.\n\n13\n\nexport\n\nconst\n\nuseAlchemyProvider\n\n=\n\n(\n\n)\n\n=>\n\n{\n\n13\n\nexport\n\nconst\n\nuseAlchemyProvider\n\n=\n\n(\n\n)\n\n=>\n\n{\n\n14\n\nconst\n\nchain\n\n=\n\nsepolia\n\n14\n\nconst\n\nchain\n\n=\n\nsepolia\n\n15\n\nconst\n\nlightAccountFactoryAddress\n\n=\n\ngetDefaultLightAccountFactoryAddress\n\n(\n\nchain\n\n)\n\n15\n\nconst\n\nlightAccountFactoryAddress\n\n=\n\ngetDefaultLightAccountFactoryAddress\n\n(\n\nchain\n\n)\n\n16\n\nconst\n\nentryPointAddress\n\n=\n\nuseMemo\n\n(\n\n16\n\nconst\n\nentryPointAddress\n\n=\n\nuseMemo\n\n(\n\n17\n\n(\n\n)\n\n=>\n\n\"0x5FF137D4b0FDCD49DcA30c7CF57E578a026d2789\"\n\n,\n\n17\n\n(\n\n)\n\n=>\n\n\"0x5FF137D4b0FDCD49DcA30c7CF57E578a026d2789\"\n\n,\n\n18\n\n[\n\n]\n\n18\n\n[\n\n]\n\n19\n\n)\n\n19\n\n)\n\n20\n\nconst\n\n{\n\nmagic\n\n}\n\n=\n\nuseMagic\n\n(\n\n)\n\n20\n\nconst\n\n{\n\nmagic\n\n}\n\n=\n\nuseMagic\n\n(\n\n)\n\n21\n\nconst\n\n[\n\nprovider\n\n,\n\nsetProvider\n\n]\n\n=\n\nuseState\n\n<\n\nAlchemyProvider\n\n>\n\n(\n\n21\n\nconst\n\n[\n\nprovider\n\n,\n\nsetProvider\n\n]\n\n=\n\nuseState\n\n<\n\nAlchemyProvider\n\n>\n\n(\n\n22\n\nnew\n\nAlchemyProvider\n\n(\n\n{\n\n22\n\nnew\n\nAlchemyProvider\n\n(\n\n{\n\n23\n\nchain\n\n,\n\n23\n\nchain\n\n,\n\n24\n\nentryPointAddress\n\n,\n\n24\n\nentryPointAddress\n\n,\n\n25\n\nrpcUrl\n\n:\n\nprocess\n\n.\n\nenv\n\n.\n\nNEXT_PUBLIC_SEPOLIA_RPC\n\n!\n\n,\n\n25\n\nrpcUrl\n\n:\n\nprocess\n\n.\n\nenv\n\n.\n\nNEXT_PUBLIC_SEPOLIA_RPC\n\n!\n\n,\n\n26\n\n}\n\n)\n\n26\n\n}\n\n)\n\n27\n\n)\n\n27\n\n)\n\n28\n\n28\n\n29\n\nconst\n\nmagicSigner\n\n:\n\nSmartAccountSigner\n\n|\n\nundefined\n\n=\n\nuseMemo\n\n(\n\n(\n\n)\n\n=>\n\n{\n\n29\n\nconst\n\nmagicSigner\n\n:\n\nSmartAccountSigner\n\n|\n\nundefined\n\n=\n\nuseMemo\n\n(\n\n(\n\n)\n\n=>\n\n{\n\n30\n\nif\n\n(\n\n!\n\nmagic\n\n)\n\nreturn\n\n30\n\nif\n\n(\n\n!\n\nmagic\n\n)\n\nreturn\n\n31\n\n31\n\n32\n\nconst\n\nclient\n\n=\n\ncreateWalletClient\n\n(\n\n{\n\n32\n\nconst\n\nclient\n\n=\n\ncreateWalletClient\n\n(\n\n{\n\n33\n\ntransport\n\n:\n\ncustom\n\n(\n\nmagic\n\n.\n\nrpcProvider\n\n)\n\n,\n\n33\n\ntransport\n\n:\n\ncustom\n\n(\n\nmagic\n\n.\n\nrpcProvider\n\n)\n\n,\n\n34\n\n}\n\n)\n\n34\n\n}\n\n)\n\n35\n\n35\n\n36\n\nreturn\n\nnew\n\nWalletClientSigner\n\n(\n\nclient\n\nas\n\nany\n\n,\n\n\"magic\"\n\n)\n\n36\n\nreturn\n\nnew\n\nWalletClientSigner\n\n(\n\nclient\n\nas\n\nany\n\n,\n\n\"magic\"\n\n)\n\n37\n\n}\n\n,\n\n[\n\nmagic\n\n]\n\n)\n\n37\n\n}\n\n,\n\n[\n\nmagic\n\n]\n\n)\n\n38\n\n38\n\n39\n\nuseEffect\n\n(\n\n(\n\n)\n\n=>\n\n{\n\n39\n\nuseEffect\n\n(\n\n(\n\n)\n\n=>\n\n{\n\n40\n\nif\n\n(\n\nmagic\n\n?.\n\nuser\n\n.\n\nisLoggedIn\n\n)\n\n{\n\n40\n\nif\n\n(\n\nmagic\n\n?.\n\nuser\n\n.\n\nisLoggedIn\n\n)\n\n{\n\n41\n\nconnectToSmartContractAccount\n\n(\n\n)\n\n41\n\nconnectToSmartContractAccount\n\n(\n\n)\n\n42\n\n}\n\nelse\n\n{\n\n42\n\n}\n\nelse\n\n{\n\n43\n\ndisconnectFromSmartContractAccount\n\n(\n\n)\n\n43\n\ndisconnectFromSmartContractAccount\n\n(\n\n)\n\n44\n\n}\n\n44\n\n}\n\n45\n\n}\n\n,\n\n[\n\nmagic\n\n?.\n\nuser\n\n.\n\nisLoggedIn\n\n]\n\n)\n\n45\n\n}\n\n,\n\n[\n\nmagic\n\n?.\n\nuser\n\n.\n\nisLoggedIn\n\n]\n\n)\n\n46\n\n46\n\n47\n\n// Connects the AlchemyProvider to a Smart Account using the LightSmartContractAccount class.\n\n47\n\n// Connects the AlchemyProvider to a Smart Account using the LightSmartContractAccount class.\n\n48\n\n// Sets the owner as the Magic account wallet\n\n48\n\n// Sets the owner as the Magic account wallet\n\n49\n\nconst\n\nconnectToSmartContractAccount\n\n=\n\nuseCallback\n\n(\n\n(\n\n)\n\n=>\n\n{\n\n49\n\nconst\n\nconnectToSmartContractAccount\n\n=\n\nuseCallback\n\n(\n\n(\n\n)\n\n=>\n\n{\n\n50\n\nif\n\n(\n\n!\n\nmagicSigner\n\n)\n\nreturn\n\n50\n\nif\n\n(\n\n!\n\nmagicSigner\n\n)\n\nreturn\n\n51\n\n51\n\n52\n\n// This is where Magic is associated as the owner of the smart contract account\n\n52\n\n// This is where Magic is associated as the owner of the smart contract account\n\n53\n\nconst\n\nconnectedProvider\n\n=\n\nprovider\n\n.\n\nconnect\n\n(\n\n(\n\nprovider\n\n)\n\n=>\n\n{\n\n53\n\nconst\n\nconnectedProvider\n\n=\n\nprovider\n\n.\n\nconnect\n\n(\n\n(\n\nprovider\n\n)\n\n=>\n\n{\n\n54\n\nreturn\n\nnew\n\nLightSmartContractAccount\n\n(\n\n{\n\n54\n\nreturn\n\nnew\n\nLightSmartContractAccount\n\n(\n\n{\n\n55\n\nrpcClient\n\n:\n\nprovider\n\n,\n\n55\n\nrpcClient\n\n:\n\nprovider\n\n,\n\n56\n\nowner\n\n:\n\nmagicSigner\n\n,\n\n56\n\nowner\n\n:\n\nmagicSigner\n\n,\n\n57\n\nchain\n\n,\n\n57\n\nchain\n\n,\n\n58\n\nentryPointAddress\n\n,\n\n58\n\nentryPointAddress\n\n,\n\n59\n\nfactoryAddress\n\n:\n\nlightAccountFactoryAddress\n\n,\n\n59\n\nfactoryAddress\n\n:\n\nlightAccountFactoryAddress\n\n,\n\n60\n\n}\n\n)\n\n60\n\n}\n\n)\n\n61\n\n}\n\n)\n\n61\n\n}\n\n)\n\n62\n\n62\n\n63\n\nsetProvider\n\n(\n\nconnectedProvider\n\n)\n\n63\n\nsetProvider\n\n(\n\nconnectedProvider\n\n)\n\n64\n\nreturn\n\nconnectedProvider\n\n64\n\nreturn\n\nconnectedProvider\n\n65\n\n}\n\n,\n\n[\n\nentryPointAddress\n\n,\n\nprovider\n\n]\n\n)\n\n65\n\n}\n\n,\n\n[\n\nentryPointAddress\n\n,\n\nprovider\n\n]\n\n)\n\n66\n\n66\n\n67\n\n// Disconnects the AlchemyProvider from the current account.\n\n67\n\n// Disconnects the AlchemyProvider from the current account.\n\n68\n\nconst\n\ndisconnectFromSmartContractAccount\n\n=\n\nuseCallback\n\n(\n\n(\n\n)\n\n=>\n\n{\n\n68\n\nconst\n\ndisconnectFromSmartContractAccount\n\n=\n\nuseCallback\n\n(\n\n(\n\n)\n\n=>\n\n{\n\n69\n\nconst\n\ndisconnectedProvider\n\n=\n\nprovider\n\n.\n\ndisconnect\n\n(\n\n)\n\n69\n\nconst\n\ndisconnectedProvider\n\n=\n\nprovider\n\n.\n\ndisconnect\n\n(\n\n)\n\n70\n\nsetProvider\n\n(\n\ndisconnectedProvider\n\n)\n\n70\n\nsetProvider\n\n(\n\ndisconnectedProvider\n\n)\n\n71\n\nreturn\n\ndisconnectedProvider\n\n71\n\nreturn\n\ndisconnectedProvider\n\n72\n\n}\n\n,\n\n[\n\nprovider\n\n]\n\n)\n\n72\n\n}\n\n,\n\n[\n\nprovider\n\n]\n\n)\n\n73\n\n73\n\n74\n\n// Returns the AlchemyProvider for use in components.\n\n74\n\n// Returns the AlchemyProvider for use in components.\n\n75\n\nreturn\n\n{\n\n75\n\nreturn\n\n{\n\n76\n\nprovider\n\n,\n\n76\n\nprovider\n\n,\n\n77\n\n}\n\n77\n\n}\n\n78\n\n}\n\n78\n\n}", "explanation": "**Explanation of `useAlchemyProvider` Code**\n\nThe `useAlchemyProvider` code is a custom React hook designed to manage the AlchemyProvider in a React application, particularly in the context of Magic Labs embedded wallets. This hook enables seamless integration with Alchemy's Account Abstraction solution.\n\n**Main Purpose**\n\nThe primary goal of this hook is to establish a connection between the Magic provider (a decentralized wallet) and the AlchemyProvider, allowing for secure and efficient smart contract interactions. It facilitates the creation of a Light Smart Contract Account, connects the Magic wallet to this account, and handles disconnections when necessary.\n\n**Key Features**\n\n1.  **AlchemyProvider Initialization**: The hook initializes the AlchemyProvider instance with a pre-configured SePolia chain, an entry point address, and a Light Account Factory address.\n2.  **Magic Wallet Integration**: It associates the Magic wallet with the created Smart Contract Account, using a Smart Account Signer to ensure secure interactions.\n3.  **Real-time Updates**: The hook utilizes React memoization and useEffect hooks to monitor changes in the Magic wallet user's logged-in status, automatically connecting/disconnecting the AlchemyProvider from the Smart Contract Account as needed.\n4.  **RPC Client Establishment**: It creates a custom RPC client instance using the AlchemyProvider's `connect` method, returning a connected Light Smart Contract Account instance.\n5.  **Provider Management**: The hook provides a stateful instance of the AlchemyProvider, allowing components to use and update the connected provider instance in real-time.\n\n**Benefits**\n\nBy utilizing the `useAlchemyProvider` hook, developers can:\n\n*   Easily integrate Magic Labs embedded wallets with Alchemy's Account Abstraction solution.\n*   Seamlessly manage the provider instance across different components and React hooks.\n*   Enjoy real-time updates and automatic disconnections when the user logs out.\n\n**Usage Example**\n\nTo use this hook, simply import and call `useAlchemyProvider` from your React component, passing in the required dependencies (e.g., Magic provider instance). The hook will handle the rest, providing a connected AlchemyProvider instance for further use.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/wallets/integrations/alchemy-account-abstraction#chunk-7", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nNow that the project successfully creates and connects to users\u2019 smart contract accounts with Alchemy, we can update the UI to show the smart contract address, its balance, and enable sending transactions from the smart contract account. These changes take place in the UserInfoCard and the SendTransactionCard.\n\nUserInfoCard\n\nSendTransactionCard\n\n#\n\nUserInfoCard\n\n#\n\nFirst things first. Open src/components/magic/cards/UserInfoCard.tsx and change the state declaration of balance, setBalance, and publicAddress to magicBalance, setMagicBalance, and magicAddress. While you\u2019re at it, add a state declaration for scaBalance, setScaBalance, scaAddress, and setScaAddress to store the smart contract account balance and address.\n\nsrc/components/magic/cards/UserInfoCard.tsx\n\nbalance\n\nsetBalance\n\npublicAddress\n\nmagicBalance\n\nsetMagicBalance\n\nmagicAddress\n\nscaBalance\n\nsetScaBalance\n\nscaAddress\n\nsetScaAddress\n\nCopy\n\n01\n\n// Change this\n\n01\n\n// Change this\n\n02\n\nconst\n\n[\n\nbalance\n\n,\n\nsetBalance\n\n]\n\n=\n\nuseState\n\n(\n\n\"...\"\n\n)\n\n02\n\nconst\n\n[\n\nbalance\n\n,\n\nsetBalance\n\n]\n\n=\n\nuseState\n\n(\n\n\"...\"\n\n)\n\n03\n\nconst\n\n[\n\npublicAddress\n\n]\n\n=\n\nuseState\n\n(\n\n03\n\nconst\n\n[\n\npublicAddress\n\n]\n\n=\n\nuseState\n\n(\n\n04\n\nlocalStorage\n\n.\n\ngetItem\n\n(\n\n\"user\"\n\n)\n\n04\n\nlocalStorage\n\n.\n\ngetItem\n\n(\n\n\"user\"\n\n)\n\n05\n\n)\n\n05\n\n)\n\n06\n\n06\n\n07\n\n// To this\n\n07\n\n// To this\n\n08\n\nconst\n\n[\n\nmagicBalance\n\n,\n\nsetMagicBalance\n\n]\n\n=\n\nuseState\n\n<\n\nstring\n\n>\n\n(\n\n\"...\"\n\n)\n\n08\n\nconst\n\n[\n\nmagicBalance\n\n,\n\nsetMagicBalance\n\n]\n\n=\n\nuseState\n\n<\n\nstring\n\n>\n\n(\n\n\"...\"\n\n)\n\n09\n\nconst\n\n[\n\nscaBalance\n\n,\n\nsetScaBalance\n\n]\n\n=\n\nuseState\n\n<\n\nstring\n\n>\n\n(\n\n\"...\"\n\n)\n\n09\n\nconst\n\n[\n\nscaBalance\n\n,\n\nsetScaBalance\n\n]\n\n=\n\nuseState\n\n<\n\nstring\n\n>\n\n(\n\n\"...\"\n\n)\n\n10\n\nconst\n\n[\n\nmagicAddress\n\n]\n\n=\n\nuseState\n\n(\n\n10\n\nconst\n\n[\n\nmagicAddress\n\n]\n\n=\n\nuseState\n\n(\n\n11\n\nlocalStorage\n\n.\n\ngetItem\n\n(\n\n\"user\"\n\n)\n\n11\n\nlocalStorage\n\n.\n\ngetItem\n\n(\n\n\"user\"\n\n)\n\n12\n\n)\n\n12\n\n)\n\n13\n\nconst\n\n[\n\nscaAddress\n\n,\n\nsetScaAddress\n\n]\n\n=\n\nuseState\n\n<\n\nstring\n\n>\n\n(\n\n\"\"\n\n)\n\n13\n\nconst\n\n[\n\nscaAddress\n\n,\n\nsetScaAddress\n\n]\n\n=\n\nuseState\n\n<\n\nstring\n\n>\n\n(\n\n\"\"\n\n)", "explanation": "**Update UI Components - Update UserInfoCard - Update State Items**\n\nThis documentation section deals with updating the user interface components in a Magic Labs embedded wallet integration with Alchemy Account Abstraction.\n\n**Main Purpose:**\n\nThe primary goal of this section is to update the `UserInfoCard` to display the smart contract address, its balance, and to enable sending transactions from the smart contract account. This involves updating the state items to store and display the new information.\n\n**Key Changes:**\n\n1. Update the state declarations in `userInfoCard.tsx` to include the smart contract account balance and address.\n2. Change the state names from `balance` and `publicAddress` to `magicBalance`, `setMagicBalance`, `scaBalance`, `setScaBalance`, `scaAddress`, and `setScaAddress`.\n3. Add new state items to store the smart contract account balance and address.\n4. Update the existing state items to use the correct types for the smart contract account balance (string).\n\n**Updated Code Snippet:**\n\n```typescript\n// Before\nconst [balance, setBalance] = useState(...);\nconst [publicAddress] = useState(...);\n\n// After\nconst [magicBalance, setMagicBalance] = useState<string>(...);\nconst [scaBalance, setScaBalance] = useState<string>(...);\nconst [magicAddress] = useState(...);\nconst [scaAddress, setScaAddress] = useState<string>(...\");\n```\n\nBy implementing these changes, the UI will now display the smart contract address, its balance, and enable sending transactions from the smart contract account, providing a more comprehensive user experience for the Magic Labs embedded wallet integration with Alchemy Account Abstraction.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/wallets/integrations/alchemy-account-abstraction#chunk-8", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\ngetBalance\n\nNext, update the getBalance function to set both balances:\n\ngetBalance\n\nCopy\n\n01\n\nconst\n\ngetBalance\n\n=\n\nuseCallback\n\n(\n\nasync\n\n(\n\n)\n\n=>\n\n{\n\n01\n\nconst\n\ngetBalance\n\n=\n\nuseCallback\n\n(\n\nasync\n\n(\n\n)\n\n=>\n\n{\n\n02\n\nif\n\n(\n\nmagicAddress\n\n&&\n\nweb3\n\n)\n\n{\n\n02\n\nif\n\n(\n\nmagicAddress\n\n&&\n\nweb3\n\n)\n\n{\n\n03\n\nconst\n\nmagicBalance\n\n=\n\nawait\n\nweb3\n\n.\n\neth\n\n.\n\ngetBalance\n\n(\n\nmagicAddress\n\n)\n\n03\n\nconst\n\nmagicBalance\n\n=\n\nawait\n\nweb3\n\n.\n\neth\n\n.\n\ngetBalance\n\n(\n\nmagicAddress\n\n)\n\n04\n\nif\n\n(\n\nmagicBalance\n\n==\n\nBigInt\n\n(\n\n0\n\n)\n\n)\n\n{\n\n04\n\nif\n\n(\n\nmagicBalance\n\n==\n\nBigInt\n\n(\n\n0\n\n)\n\n)\n\n{\n\n05\n\nsetMagicBalance\n\n(\n\n\"0\"\n\n)\n\n05\n\nsetMagicBalance\n\n(\n\n\"0\"\n\n)\n\n06\n\n}\n\nelse\n\n{\n\n06\n\n}\n\nelse\n\n{\n\n07\n\nsetMagicBalance\n\n(\n\nweb3\n\n.\n\nutils\n\n.\n\nfromWei\n\n(\n\nmagicBalance\n\n,\n\n\"ether\"\n\n)\n\n)\n\n07\n\nsetMagicBalance\n\n(\n\nweb3\n\n.\n\nutils\n\n.\n\nfromWei\n\n(\n\nmagicBalance\n\n,\n\n\"ether\"\n\n)\n\n)\n\n08\n\n}\n\n08\n\n}\n\n09\n\n}\n\n09\n\n}\n\n10\n\nif\n\n(\n\nscaAddress\n\n&&\n\nweb3\n\n)\n\n{\n\n10\n\nif\n\n(\n\nscaAddress\n\n&&\n\nweb3\n\n)\n\n{\n\n11\n\nconst\n\naaBalance\n\n=\n\nawait\n\nweb3\n\n.\n\neth\n\n.\n\ngetBalance\n\n(\n\nscaAddress\n\n)\n\n11\n\nconst\n\naaBalance\n\n=\n\nawait\n\nweb3\n\n.\n\neth\n\n.\n\ngetBalance\n\n(\n\nscaAddress\n\n)\n\n12\n\nif\n\n(\n\naaBalance\n\n==\n\nBigInt\n\n(\n\n0\n\n)\n\n)\n\n{\n\n12\n\nif\n\n(\n\naaBalance\n\n==\n\nBigInt\n\n(\n\n0\n\n)\n\n)\n\n{\n\n13\n\nsetScaBalance\n\n(\n\n\"0\"\n\n)\n\n13\n\nsetScaBalance\n\n(\n\n\"0\"\n\n)\n\n14\n\n}\n\nelse\n\n{\n\n14\n\n}\n\nelse\n\n{\n\n15\n\nsetScaBalance\n\n(\n\nweb3\n\n.\n\nutils\n\n.\n\nfromWei\n\n(\n\naaBalance\n\n,\n\n\"ether\"\n\n)\n\n)\n\n15\n\nsetScaBalance\n\n(\n\nweb3\n\n.\n\nutils\n\n.\n\nfromWei\n\n(\n\naaBalance\n\n,\n\n\"ether\"\n\n)\n\n)\n\n16\n\n}\n\n16\n\n}\n\n17\n\n}\n\n17\n\n}\n\n18\n\n}\n\n,\n\n[\n\nweb3\n\n,\n\nmagicAddress\n\n,\n\nscaAddress\n\n]\n\n)\n\n18\n\n}\n\n,\n\n[\n\nweb3\n\n,\n\nmagicAddress\n\n,\n\nscaAddress\n\n]\n\n)", "explanation": "**Update getBalance Function**\n\nThe `getBalance` function is an essential part of the Magic Labs embedded wallet integration with Alchemy Account Abstraction. Its primary purpose is to retrieve and update the balances of two types of addresses: Magic Address and SCA (Secure Contract Account) Address.\n\n**Function Parameters and Dependencies**\n\nThis function takes in three dependencies:\n\n1. `web3`: A Web3 provider instance to interact with the Ethereum blockchain.\n2. `magicAddress`: The Magic Address associated with the user's account.\n3. `scaAddress`: The SCA Address associated with the user's account.\n\n**Function Flow**\n\nThe `getBalance` function performs the following steps:\n\n1. Checks if both `magicAddress` and `web3` are present.\n2. If true, it retrieves the balance of the `magicAddress` using `web3.eth.getBalance()` and converts it to a human-readable format (e.g., from wei to ether) using `web3.utils.fromWei()`.\n3. If the balance is zero, it sets the `magicBalance` state to \"0\".\n4. Otherwise, it sets the `magicBalance` state to the converted balance.\n5. Repeats steps 1-4 for the `scaAddress`.\n6. If both addresses are present, it calls the function with the `web3`, `magicAddress`, and `scaAddress` dependencies.\n\n**Main Purpose**\n\nThe main purpose of the `getBalance` function is to retrieve the balances of the user's Magic Address and SCA Address, update the associated state variables, and perform the necessary conversions to display the balances in a human-readable format.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/wallets/integrations/alchemy-account-abstraction#chunk-9", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nNext, update the TSX for displaying the balance to show both balances:\n\nCopy\n\n01\n\n<\n\ndiv className\n\n=\n\n\"flex flex-col gap-2\"\n\n>\n\n01\n\n<\n\ndiv className\n\n=\n\n\"flex flex-col gap-2\"\n\n>\n\n02\n\n<\n\ndiv className\n\n=\n\n\"code\"\n\n>\n\n02\n\n<\n\ndiv className\n\n=\n\n\"code\"\n\n>\n\n03\n\nMagic\n\n:\n\n{\n\nmagicBalance\n\n.\n\nsubstring\n\n(\n\n0\n\n,\n\n7\n\n)\n\n}\n\n{\n\ngetNetworkToken\n\n(\n\n)\n\n}\n\n03\n\nMagic\n\n:\n\n{\n\nmagicBalance\n\n.\n\nsubstring\n\n(\n\n0\n\n,\n\n7\n\n)\n\n}\n\n{\n\ngetNetworkToken\n\n(\n\n)\n\n}\n\n04\n\n<\n\n/\n\ndiv\n\n>\n\n04\n\n<\n\n/\n\ndiv\n\n>\n\n05\n\n<\n\ndiv className\n\n=\n\n\"code\"\n\n>\n\n05\n\n<\n\ndiv className\n\n=\n\n\"code\"\n\n>\n\n06\n\nAA\n\n:\n\n{\n\nscaBalance\n\n.\n\nsubstring\n\n(\n\n0\n\n,\n\n7\n\n)\n\n}\n\n{\n\ngetNetworkToken\n\n(\n\n)\n\n}\n\n06\n\nAA\n\n:\n\n{\n\nscaBalance\n\n.\n\nsubstring\n\n(\n\n0\n\n,\n\n7\n\n)\n\n}\n\n{\n\ngetNetworkToken\n\n(\n\n)\n\n}\n\n07\n\n<\n\n/\n\ndiv\n\n>\n\n07\n\n<\n\n/\n\ndiv\n\n>\n\n08\n\n<\n\n/\n\ndiv\n\n>\n\n08\n\n<\n\n/\n\ndiv\n\n>", "explanation": "**# Update Balance Display**\n\nThis documentation section is about updating the UI display of balances in an embedded wallet integrated using Magic Labs' Alchemy Account Abstraction.\n\n**Purpose:**\n\nThe main purpose of this section is to provide instructions on how to display both the Magic balance and the SCA (Self-Custody Account) balance in a user-readable format.\n\n**Key Changes:**\n\nThe code provided updates the balance display to show both balances with the following changes:\n\n1.  Adding `getNetworkToken()` functions to both balance displays.\n2.  Formatting the balance values to show only the first 7 digits.\n3.  Using JSX syntax to add HTML code elements to display the balances in a user-friendly manner.\n\n**Context:**\n\nThis code snippet is likely part of a React or TypeScript application using Magic Labs' Alchemy Account Abstraction for wallet integration. The goal is to create a visually appealing UI that shows the user's available balances, allowing them to easily monitor their funds.\n\nBy following this section of the documentation, developers can update their embedded wallet to display both Magic and SCA balances, making it easier for users to manage their funds.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/wallets/integrations/alchemy-account-abstraction#chunk-10", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nThe only remaining balance reference is to set the initial balance while loading to \"...\". This is in a short useEffect that calls setBalance. Update this useEffect to set both balances:\n\n\"...\"\n\nuseEffect\n\nsetBalance\n\nuseEffect\n\nCopy\n\n01\n\n// Change this\n\n01\n\n// Change this\n\n02\n\nuseEffect\n\n(\n\n(\n\n)\n\n=>\n\n{\n\n02\n\nuseEffect\n\n(\n\n(\n\n)\n\n=>\n\n{\n\n03\n\nsetBalance\n\n(\n\n'...'\n\n)\n\n;\n\n03\n\nsetBalance\n\n(\n\n'...'\n\n)\n\n;\n\n04\n\n}\n\n,\n\n[\n\nmagic\n\n]\n\n)\n\n;\n\n04\n\n}\n\n,\n\n[\n\nmagic\n\n]\n\n)\n\n;\n\n05\n\n05\n\n06\n\n// To this\n\n06\n\n// To this\n\n07\n\nuseEffect\n\n(\n\n(\n\n)\n\n=>\n\n{\n\n07\n\nuseEffect\n\n(\n\n(\n\n)\n\n=>\n\n{\n\n08\n\nsetMagicBalance\n\n(\n\n\"...\"\n\n)\n\n08\n\nsetMagicBalance\n\n(\n\n\"...\"\n\n)\n\n09\n\nsetScaBalance\n\n(\n\n\"...\"\n\n)\n\n09\n\nsetScaBalance\n\n(\n\n\"...\"\n\n)\n\n10\n\n}\n\n,\n\n[\n\nmagic\n\n]\n\n)\n\n10\n\n}\n\n,\n\n[\n\nmagic\n\n]\n\n)", "explanation": "**#Update initial balances**\n\nThis documentation section is about updating the initial balances of an Ethereum wallet when integrating Magic Labs' embedded wallet with Alchemy's Account Abstraction. \n\n**Main Purpose:**\n\nThe main purpose of this section is to modify the `useEffect` hook to set both Ethereum balances for the wallet. There are two types of balances:\n\n1. **Magic balance** (previously known as Ethereum balance)\n2. **SCA (Secure Contract Abstraction) balance**\n\nThe original code updates only the single remaining balance reference. However, with this update, it sets both balances simultaneously when the widget loads.\n\n**Changes:**\n\nThe key differences between the original and updated code are:\n\n1. Initially, there are two separate `useEffect` calls: one updates the Magic balance and the other updates the SCA balance.\n2. The new code combines these two calls into a single `useEffect` hook.\n3. Inside the `useEffect` hook, there are now two separate updates: one sets the Magic balance, and the other sets the SCA balance.\n\n**Effect:**\n\nBy making these changes, the updated code ensures that both balances are updated simultaneously, allowing the wallet to accurately reflect the available funds when the widget loads.\n\n**Best Practice:**\n\nBy using a single `useEffect` hook to update both balances, the code becomes cleaner, easier to maintain, and reduces the risk of update-related errors.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/wallets/integrations/alchemy-account-abstraction#chunk-11", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nscaAddress\n\nCopy\n\n01\n\nconst\n\n{\n\nprovider\n\n}\n\n=\n\nuseAlchemyProvider\n\n(\n\n)\n\n01\n\nconst\n\n{\n\nprovider\n\n}\n\n=\n\nuseAlchemyProvider\n\n(\n\n)\n\n02\n\n02\n\n03\n\nconst\n\ngetSmartContractAccount\n\n=\n\nuseCallback\n\n(\n\nasync\n\n(\n\n)\n\n=>\n\n{\n\n03\n\nconst\n\ngetSmartContractAccount\n\n=\n\nuseCallback\n\n(\n\nasync\n\n(\n\n)\n\n=>\n\n{\n\n04\n\nconst\n\naaAccount\n\n=\n\nawait\n\nprovider\n\n.\n\naccount\n\n?.\n\ngetAddress\n\n(\n\n)\n\n04\n\nconst\n\naaAccount\n\n=\n\nawait\n\nprovider\n\n.\n\naccount\n\n?.\n\ngetAddress\n\n(\n\n)\n\n05\n\nsetScaAddress\n\n(\n\naaAccount\n\nas\n\n`\n\n0x\n\n${\n\nstring\n\n}\n\n`\n\n)\n\n05\n\nsetScaAddress\n\n(\n\naaAccount\n\nas\n\n`\n\n0x\n\n${\n\nstring\n\n}\n\n`\n\n)\n\n06\n\n}\n\n,\n\n[\n\nprovider\n\n]\n\n)\n\n06\n\n}\n\n,\n\n[\n\nprovider\n\n]\n\n)\n\n07\n\n07\n\n08\n\nuseEffect\n\n(\n\n(\n\n)\n\n=>\n\n{\n\n08\n\nuseEffect\n\n(\n\n(\n\n)\n\n=>\n\n{\n\n09\n\ngetSmartContractAccount\n\n(\n\n)\n\n09\n\ngetSmartContractAccount\n\n(\n\n)\n\n10\n\n}\n\n,\n\n[\n\nprovider\n\n,\n\nprovider\n\n.\n\naccount\n\n,\n\ngetSmartContractAccount\n\n]\n\n)\n\n10\n\n}\n\n,\n\n[\n\nprovider\n\n,\n\nprovider\n\n.\n\naccount\n\n,\n\ngetSmartContractAccount\n\n]\n\n)", "explanation": "**#Set scaAddress Explanation**\n\nThe section `#Set scaAddress` is about implementing Smart Contract Account (SCA) functionality in a Magic Labs embedded wallet integration with Alchemy Account Abstraction (AA). The main purpose of this section is to set the SCA address using the Alchemy provider.\n\n**Key Components:**\n\n1. `const getSmartContractAccount = useCallback(async () => { ... })` - a memoized function that retrieves the SCA address from the Alchemy provider.\n2. `const aaAccount = await provider.account?.getAddress()` - retrieves the address of the AA account from the provider.\n3. `setScaAddress(aaAccount as '0x${string}')` - sets the SCA address using the AA account address.\n\n**How it Works:**\n\n1. The `getSmartContractAccount` function is called when the component mounts or when the provider or AA account changes.\n2. The function retrieves the AA account address from the Alchemy provider using `provider.account?.getAddress()`.\n3. The AA account address is then passed to the `setScaAddress` function.\n4. The `setScaAddress` function sets the SCA address using the AA account address.\n\n**Importance:**\n\nSetting the SCA address is crucial for enabling Smart Contract Account functionality in the Magic Labs embedded wallet integration with Alchemy Account Abstraction. This allows users to interact with smart contracts on Ethereum or other EVM-based chains.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/wallets/integrations/alchemy-account-abstraction#chunk-12", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nNow find the CardLabel and div that displays the address and modify it to use the new naming for magicAddress and also display the scaAddress.\n\nCardLabel\n\nmagicAddress\n\nscaAddress\n\nCopy\n\n01\n\n<\n\nCardLabel\n\n01\n\n<\n\nCardLabel\n\n02\n\nleftHeader\n\n=\n\n\"Addresses\"\n\n02\n\nleftHeader\n\n=\n\n\"Addresses\"\n\n03\n\nrightAction\n\n=\n\n{\n\n03\n\nrightAction\n\n=\n\n{\n\n04\n\n!\n\nmagicAddress\n\n?\n\n<\n\nSpinner\n\n/\n\n>\n\n:\n\n<\n\ndiv onClick\n\n=\n\n{\n\ncopy\n\n}\n\n>\n\n{\n\ncopied\n\n}\n\n<\n\n/\n\ndiv\n\n>\n\n04\n\n!\n\nmagicAddress\n\n?\n\n<\n\nSpinner\n\n/\n\n>\n\n:\n\n<\n\ndiv onClick\n\n=\n\n{\n\ncopy\n\n}\n\n>\n\n{\n\ncopied\n\n}\n\n<\n\n/\n\ndiv\n\n>\n\n05\n\n}\n\n05\n\n}\n\n06\n\n/\n\n>\n\n06\n\n/\n\n>\n\n07\n\n<\n\ndiv className\n\n=\n\n\"flex flex-col gap-2\"\n\n>\n\n07\n\n<\n\ndiv className\n\n=\n\n\"flex flex-col gap-2\"\n\n>\n\n08\n\n<\n\ndiv className\n\n=\n\n\"code\"\n\n>\n\n08\n\n<\n\ndiv className\n\n=\n\n\"code\"\n\n>\n\n09\n\nMagic\n\n:\n\n{\n\n\" \"\n\n}\n\n09\n\nMagic\n\n:\n\n{\n\n\" \"\n\n}\n\n10\n\n{\n\nmagicAddress\n\n?.\n\nlength\n\n==\n\n0\n\n?\n\n\"Fetching address...\"\n\n:\n\nmagicAddress\n\n}\n\n10\n\n{\n\nmagicAddress\n\n?.\n\nlength\n\n==\n\n0\n\n?\n\n\"Fetching address...\"\n\n:\n\nmagicAddress\n\n}\n\n11\n\n<\n\n/\n\ndiv\n\n>\n\n11\n\n<\n\n/\n\ndiv\n\n>\n\n12\n\n<\n\ndiv className\n\n=\n\n\"code\"\n\n>\n\n12\n\n<\n\ndiv className\n\n=\n\n\"code\"\n\n>\n\n13\n\nSmart\n\nContract\n\nAccount\n\n:\n\n{\n\n\" \"\n\n}\n\n13\n\nSmart\n\nContract\n\nAccount\n\n:\n\n{\n\n\" \"\n\n}\n\n14\n\n{\n\nscaAddress\n\n?.\n\nlength\n\n==\n\n0\n\n?\n\n\"Fetching address...\"\n\n:\n\nscaAddress\n\n}\n\n14\n\n{\n\nscaAddress\n\n?.\n\nlength\n\n==\n\n0\n\n?\n\n\"Fetching address...\"\n\n:\n\nscaAddress\n\n}\n\n15\n\n<\n\n/\n\ndiv\n\n>\n\n15\n\n<\n\n/\n\ndiv\n\n>\n\n16\n\n<\n\n/\n\ndiv\n\n>\n\n16\n\n<\n\n/\n\ndiv\n\n>\n\nNow when a user logs in using Magic, both their Magic and smart contract account address and balances will be displayed!", "explanation": "**#Update address display**\n\nThis documentation section explains how to modify the code to display both the Magic address and the Smart Contract Account (SCA) address of a user who has logged in using the Magic Labs embedded wallet.\n\n**Main Purpose:**\n\nThe main purpose of this section is to update the code to:\n\n1. Display the new naming convention for the Magic address (`magicAddress`).\n2. Show the SCA address in addition to the Magic address.\n\n**What's changing:**\n\nIn this updated code, you'll see changes to the following components:\n\n1. CardLabel: Replaced with `magicAddress` and `scaAddress` to reflect the new naming convention.\n2. div displays: Modified to show both the Magic address and SCA address.\n3. Spinner and copy functionality: Retained to show the progress of fetching addresses and allow users to copy their addresses.\n\n**Result:**\n\nAfter updating the code, users who log in using Magic will see their Magic address and SCA address, as well as balances, displayed in the embedded wallet.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/wallets/integrations/alchemy-account-abstraction#chunk-13", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nSendTransactionCard\n\nTo send a transaction from your smart contract account, you will need to initiate a transaction by calling the sendUserOperation method on the Alchemy provider object. This transaction requires the following arguments:\n\nsendUserOperation\n\nprovider\n\n\u2022 target - The recipient\u2019s wallet address\n\n\u2022 data - Data associated with the transaction. Since we\u2019re just transferring tokens, there is no data and you should put \"0x\"\n\n\u2022 value - the amount of tokens to send in wei.\n\ntarget\n\ndata\n\n\"0x\"\n\nvalue\n\nwei\n\nThe hash returned from sendUserOperation is not the User Operation Receipt, rather a proof of submission. We call the waitForUserOperationTransaction function, which will return the User Operation Receipt once the transaction has been bundled, included in a block and executed on-chain.\n\nsendUserOperation\n\nwaitForUserOperationTransaction\n\nIn src/components/magic/cards/SendTransactionCard.tsx, import the the provider from useAlchemyProvider hook and replace the code for sendTransaction with the code below.\n\nsrc/components/magic/cards/SendTransactionCard.tsx\n\nprovider\n\nuseAlchemyProvider\n\nsendTransaction\n\nTo transfer funds from your smart contract account, ensure you have enough test tokens to send. You can get some test Sepolia tokens here.\n\nhere\n\nCopy\n\n01\n\nconst\n\nsendTransaction\n\n=\n\nuseCallback\n\n(\n\nasync\n\n(\n\n)\n\n=>\n\n{\n\n01\n\nconst\n\nsendTransaction\n\n=\n\nuseCallback\n\n(\n\nasync\n\n(\n\n)\n\n=>\n\n{\n\n02\n\nif\n\n(\n\n!\n\nweb3\n\n?.\n\nutils\n\n.\n\nisAddress\n\n(\n\ntoAddress\n\n)\n\n)\n\n{\n\n02\n\nif\n\n(\n\n!\n\nweb3\n\n?.\n\nutils\n\n.\n\nisAddress\n\n(\n\ntoAddress\n\n)\n\n)\n\n{\n\n03\n\nreturn\n\nsetToAddressError\n\n(\n\ntrue\n\n)\n\n;\n\n03\n\nreturn\n\nsetToAddressError\n\n(\n\ntrue\n\n)\n\n;\n\n04\n\n}\n\n04\n\n}\n\n05\n\nif\n\n(\n\nisNaN\n\n(\n\nNumber\n\n(\n\namount\n\n)\n\n)\n\n)\n\n{\n\n05\n\nif\n\n(\n\nisNaN\n\n(\n\nNumber\n\n(\n\namount\n\n)\n\n)\n\n)\n\n{\n\n06\n\nreturn\n\nsetAmountError\n\n(\n\ntrue\n\n)\n\n;\n\n06\n\nreturn\n\nsetAmountError\n\n(\n\ntrue\n\n)\n\n;\n\n07\n\n}\n\n07\n\n}\n\n08\n\nsetDisabled\n\n(\n\ntrue\n\n)\n\n;\n\n08\n\nsetDisabled\n\n(\n\ntrue\n\n)\n\n;\n\n09\n\n09\n\n10\n\nconst\n\nresult\n\n=\n\nawait\n\nprovider\n\n.\n\nsendUserOperation\n\n(\n\n{\n\n10\n\nconst\n\nresult\n\n=\n\nawait\n\nprovider\n\n.\n\nsendUserOperation\n\n(\n\n{\n\n11\n\ntarget\n\n:\n\ntoAddress\n\nas\n\n`\n\n0x\n\n${\n\nstring\n\n}\n\n`\n\n,\n\n11\n\ntarget\n\n:\n\ntoAddress\n\nas\n\n`\n\n0x\n\n${\n\nstring\n\n}\n\n`\n\n,\n\n12\n\ndata\n\n:\n\n\"0x\"\n\n,\n\n12\n\ndata\n\n:\n\n\"0x\"\n\n,\n\n13\n\nvalue\n\n:\n\nweb3\n\n.\n\nutils\n\n.\n\ntoWei\n\n(\n\namount\n\n,\n\n'ether'\n\n)\n\n,\n\n13\n\nvalue\n\n:\n\nweb3\n\n.\n\nutils\n\n.\n\ntoWei\n\n(\n\namount\n\n,\n\n'ether'\n\n)\n\n,\n\n14\n\n}\n\n)\n\n;\n\n14\n\n}\n\n)\n\n;\n\n15\n\n15\n\n16\n\nconst\n\ntxHash\n\n=\n\nawait\n\nprovider\n\n.\n\nwaitForUserOperationTransaction\n\n(\n\nresult\n\n.\n\nhash\n\n)\n\n16\n\nconst\n\ntxHash\n\n=\n\nawait\n\nprovider\n\n.\n\nwaitForUserOperationTransaction\n\n(\n\nresult\n\n.\n\nhash\n\n)\n\n17\n\n.\n\nthen\n\n(\n\n(\n\nreceipt\n\n)\n\n=>\n\n{\n\n17\n\n.\n\nthen\n\n(\n\n(\n\nreceipt\n\n)\n\n=>\n\n{\n\n18\n\nshowToast\n\n(\n\n{\n\n18\n\nshowToast\n\n(\n\n{\n\n19\n\nmessage\n\n:\n\n`\n\nTransaction Successful. TX Hash:\n\n${\n\nreceipt\n\n}\n\n`\n\n,\n\n19\n\nmessage\n\n:\n\n`\n\nTransaction Successful. TX Hash:\n\n${\n\nreceipt\n\n}\n\n`\n\n,\n\n20\n\ntype\n\n:\n\n'success'\n\n,\n\n20\n\ntype\n\n:\n\n'success'\n\n,\n\n21\n\n}\n\n)\n\n;\n\n21\n\n}\n\n)\n\n;\n\n22\n\nsetHash\n\n(\n\nreceipt\n\n)\n\n;\n\n22\n\nsetHash\n\n(\n\nreceipt\n\n)\n\n;\n\n23\n\nsetToAddress\n\n(\n\n''\n\n)\n\n;\n\n23\n\nsetToAddress\n\n(\n\n''\n\n)\n\n;\n\n24\n\nsetAmount\n\n(\n\n''\n\n)\n\n;\n\n24\n\nsetAmount\n\n(\n\n''\n\n)\n\n;\n\n25\n\nconsole\n\n.\n\nlog\n\n(\n\n'Transaction receipt:'\n\n,\n\nreceipt\n\n)\n\n;\n\n25\n\nconsole\n\n.\n\nlog\n\n(\n\n'Transaction receipt:'\n\n,\n\nreceipt\n\n)\n\n;\n\n26\n\n}\n\n)\n\n26\n\n}\n\n)\n\n27\n\n27\n\n28\n\nconsole\n\n.\n\nlog\n\n(\n\ntxHash\n\n)\n\n;\n\n28\n\nconsole\n\n.\n\nlog\n\n(\n\ntxHash\n\n)\n\n;\n\n29\n\nsetDisabled\n\n(\n\nfalse\n\n)\n\n;\n\n29\n\nsetDisabled\n\n(\n\nfalse\n\n)\n\n;\n\n30\n\n}\n\n,\n\n[\n\nweb3\n\n,\n\namount\n\n,\n\npublicAddress\n\n,\n\ntoAddress\n\n]\n\n)\n\n;\n\n30\n\n}\n\n,\n\n[\n\nweb3\n\n,\n\namount\n\n,\n\npublicAddress\n\n,\n\ntoAddress\n\n]\n\n)\n\n;\n\nThats it! You\u2019ve just transferred tokens from your newly created smart contract account!", "explanation": "The documentation section titled '#Update SendTransactionCard' explains how to send a transaction from a smart contract account using the Magic Labs embedded wallet. Here's a clear and concise summary of its main purpose:\n\n**Purpose:** To update the `SendTransactionCard` component in the Magic Labs wallet integration with Alchemy to enable sending transactions from a smart contract account.\n\n**Key Steps:**\n\n1. Call the `sendUserOperation` method on the Alchemy provider object, passing in the recipient's wallet address, data (which is \"0x\" for token transfers), and value (the amount of tokens to send).\n2. Wait for the user operation transaction to be bundled, included in a block, and executed on-chain using the `waitForUserOperationTransaction` function.\n3. Update the `SendTransactionCard` component with the new functionality, which includes:\n\t* Validating the recipient's address and amount inputs.\n\t* Calling `sendUserOperation` when the user clicks the \"Transfer\" button.\n\t* Displaying a success message and updating the transaction hash input field after a successful transaction.\n\n**Main Functions:**\n\n* `sendUserOperation`: initiates a transaction on the Alchemy provider object.\n* `waitForUserOperationTransaction`: waits for the user operation transaction to be executed on-chain.\n* `showToast`: displays a toast notification with a success message and transaction hash.\n\nOverall, this documentation section provides a clear guide on how to update the Magic Labs wallet integration with Alchemy to enable sending transactions from a smart contract account.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/wallets/integrations/alchemy-account-abstraction#chunk-14", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nYou now know how to integrate Magic with a smart contract account and include the following features:\n\n\u2022 Simple authentication with Email OTP\n\n\u2022 Automatic smart contract account creation for first-time users\n\n\u2022 Ability to have Magic users interact with their smart contract accounts\n\n\u2022 Transfer funds from your smart contract account\n\nFeel free to take a look at our final solution code or tinker with it directly in Codesandbox. Take a look at the Alchemy smart account docs for more information on what is possible with Magic and smart accounts.\n\nfinal solution code\n\nCodesandbox\n\nsmart account", "explanation": "The \"#Next Steps\" section of the documentation is about guiding users who have completed the integration process of Magic Labs embedded wallet with an Alchemy smart contract account.\n\nHere's a clear and concise explanation of its main purpose:\n\n**Main Purpose:** To inform users that they've successfully integrated Magic with a smart contract account, highlighting key features, and encouraging further exploration.\n\n**Key Features Highlighted:**\n\n1. Simple authentication via Email OTP\n2. Automatic creation of smart contract accounts for new users\n3. User interaction with their smart contract accounts\n4. Ability to transfer funds from the smart contract account\n\n**Additional Resources Provided:**\n\n* Link to a final solution code example (or a direct link to Codesandbox) for reference or experimentation.\n* A suggestion to visit the Alchemy smart account documentation for more information on what's possible with Magic and smart accounts.\n\nIn summary, the \"#Next Steps\" section aims to celebrate user success in integrating Magic with an Alchemy smart contract account, while also nudging them towards further exploration of the feature set and potential applications.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/wallets/integrations/alchemy-account-abstraction#chunk-15", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nMagic interacts with the Zilliqa blockchain via Magic's extension NPM package @magic-ext/zilliqa. The Zilliqa extension also lets you interact with the blockchain using methods from Zilliqa's Javascript SDK.\n\nZilliqa\n\n@magic-ext/zilliqa\n\n@magic-ext/zilliqa\n\nZilliqa's Javascript SDK\n\nYou can skip straight to our kitchen sink example directly:\n\n\ud83d\udc49 Zilliqa Example\n\nZilliqa Example\n\nCopy\n\n01\n\nnpm\n\ninstall\n\n--save @magic-ext/zilliqa\n\n01\n\nnpm\n\ninstall\n\n--save @magic-ext/zilliqa", "explanation": "**Installation of Zilliqa Blockchain Integration in Magic Labs**\n\nThe \"Zilliqa - Zilliqa - #Installation\" documentation section is about installing the Zilliqa blockchain integration in Magic Labs, a platform that simplifies interactions with various blockchains.\n\n**Main Purpose:**\n\nThe primary purpose of this section is to provide instructions on how to integrate the Zilliqa blockchain with Magic Labs using the Magic extension NPM package `@magic-ext/zilliqa`. This integration allows developers to interact with the Zilliqa blockchain using methods from Zilliqa's JavaScript SDK.\n\n**Step-by-Step Installation:**\n\nTo install the Zilliqa integration, follow these steps:\n\n1. Run the command `npm install --save @magic-ext/zilliqa` to install the Magic extension NPM package.\n2. You can then proceed to the example section, \"Zilliqa Example\", to learn how to interact with the Zilliqa blockchain.\n\nBy installing the Zilliqa integration, developers can leverage Magic Labs' simplified API to build applications that interact with the Zilliqa blockchain.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/other/zilliqa#chunk-1", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\nimport\n\n{\n\nZilliqaExtension\n\n}\n\nfrom\n\n'@magic-ext/zilliqa'\n\n;\n\n02\n\nimport\n\n{\n\nZilliqaExtension\n\n}\n\nfrom\n\n'@magic-ext/zilliqa'\n\n;\n\n03\n\n03\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_API_KEY'\n\n,\n\n{\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_API_KEY'\n\n,\n\n{\n\n05\n\nextensions\n\n:\n\n[\n\n05\n\nextensions\n\n:\n\n[\n\n06\n\nnew\n\nZilliqaExtension\n\n(\n\n{\n\n06\n\nnew\n\nZilliqaExtension\n\n(\n\n{\n\n07\n\nrpcUrl\n\n:\n\n'Zilliqa_RPC_NODE_URL'\n\n,\n\n07\n\nrpcUrl\n\n:\n\n'Zilliqa_RPC_NODE_URL'\n\n,\n\n08\n\n}\n\n)\n\n,\n\n08\n\n}\n\n)\n\n,\n\n09\n\n]\n\n,\n\n09\n\n]\n\n,\n\n10\n\n}\n\n)\n\n;\n\n10\n\n}\n\n)\n\n;\n\n#\n\nCopy\n\n01\n\n<\n\nscript src\n\n=\n\n\"https://auth.magic.link/sdk\"\n\n>\n\n<\n\n/\n\nscript\n\n>\n\n01\n\n<\n\nscript src\n\n=\n\n\"https://auth.magic.link/sdk\"\n\n>\n\n<\n\n/\n\nscript\n\n>\n\n02\n\n<\n\nscript type\n\n=\n\n\"text/javascript\"\n\nsrc\n\n=\n\n\"https://auth.magic.link/sdk/extension/zilliqa\"\n\n>\n\n<\n\n/\n\nscript\n\n>\n\n02\n\n<\n\nscript type\n\n=\n\n\"text/javascript\"\n\nsrc\n\n=\n\n\"https://auth.magic.link/sdk/extension/zilliqa\"\n\n>\n\n<\n\n/\n\nscript\n\n>\n\n03\n\n03\n\n04\n\n<\n\nscript\n\n>\n\n04\n\n<\n\nscript\n\n>\n\n05\n\nconst\n\nmagic\n\n=\n\nnew\n\nwindow\n\n.\n\nMagic\n\n(\n\n\"YOUR_API_KEY\"\n\n,\n\n{\n\n05\n\nconst\n\nmagic\n\n=\n\nnew\n\nwindow\n\n.\n\nMagic\n\n(\n\n\"YOUR_API_KEY\"\n\n,\n\n{\n\n06\n\nextensions\n\n:\n\n[\n\n06\n\nextensions\n\n:\n\n[\n\n07\n\nnew\n\nMagicZilliqaExtension\n\n(\n\n{\n\n07\n\nnew\n\nMagicZilliqaExtension\n\n(\n\n{\n\n08\n\nrpcUrl\n\n:\n\n'ZILLIQA_RPC_NODE_URL'\n\n08\n\nrpcUrl\n\n:\n\n'ZILLIQA_RPC_NODE_URL'\n\n09\n\n}\n\n)\n\n09\n\n}\n\n)\n\n10\n\n]\n\n10\n\n]\n\n11\n\n}\n\n)\n\n;\n\n11\n\n}\n\n)\n\n;\n\n12\n\n<\n\n/\n\nscript\n\n>\n\n12\n\n<\n\n/\n\nscript\n\n>", "explanation": "The documentation section titled \"#Initialization - #CDN\" is about initializing the Magic Labs embedded wallet and connecting it to a CDN (Content Delivery Network).\n\nHere's a clear and concise summary of its main purpose:\n\n**Purpose:** Initialize the Magic Labs embedded wallet and connect it to a Content Delivery Network (CDN) for Zilliqa blockchain.\n\n**Key points:**\n\n1. Importing the necessary modules from `magic-sdk` and `@magic-ext/zilliqa`.\n2. Creating an instance of the `Magic` class with a API key.\n3. Adding a `ZilliqaExtension` to the `Magic` instance, which provides connectivity to the Zilliqa blockchain.\n4. Setting the RPC URL for the Zilliqa node.\n5. Including script tags in HTML to load the necessary JavaScript libraries from the Magic Labs CDN.\n\n**Main function:** The code initializes the Magic Labs embedded wallet and connects it to a Zilliqa blockchain node through the `ZilliqaExtension`.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/other/zilliqa#chunk-2", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n#\n\nBefore you can send transaction on the Zilliqa blockchain, you'll need to acquire some test ZIL (Zilliqa's native cryptocurrency for test network).\n\n\u2022 Go to our Zilliqa Example application\n\n\u2022 Login with your email address\n\n\u2022 Copy your Zilliqa public address\n\n\u2022 Go to the ZIL Faucet\n\n\u2022 Paste your copied Zilliqa public address in the text input\n\n\u2022 You can receive 300 test ZIL\n\n\u2022 Now you can use your test ZIL in our example app\n\nZilliqa Example\n\nZIL Faucet\n\nexample app", "explanation": "This documentation section is about acquiring and obtaining test ZIL (the native cryptocurrency for the Zilliqa test network) to be used with the Magic Labs embedded wallet, specifically in their \"Example App\".\n\nThe main purpose of this section is to guide users on how to get test ZIL so that they can conduct transactions on the Zilliqa blockchain within the example app.\n\nIn simpler terms:\n\nThis section explains how to get some free test cryptocurrency (ZIL) for the Zilliqa network, which is needed to use the Magic Labs embedded wallet's example app.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/other/zilliqa#chunk-3", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nUsing getWallet function to get a Zilliqa wallet for the current user.\n\ngetWallet\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\nimport\n\n{\n\nZilliqaExtension\n\n}\n\nfrom\n\n'@magic-ext/zilliqa'\n\n;\n\n02\n\nimport\n\n{\n\nZilliqaExtension\n\n}\n\nfrom\n\n'@magic-ext/zilliqa'\n\n;\n\n03\n\n03\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_API_KEY'\n\n,\n\n{\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_API_KEY'\n\n,\n\n{\n\n05\n\nextensions\n\n:\n\n[\n\n05\n\nextensions\n\n:\n\n[\n\n06\n\nnew\n\nZilliqaExtension\n\n(\n\n{\n\n06\n\nnew\n\nZilliqaExtension\n\n(\n\n{\n\n07\n\nrpcUrl\n\n:\n\n'Zilliqa_RPC_NODE_URL'\n\n,\n\n07\n\nrpcUrl\n\n:\n\n'Zilliqa_RPC_NODE_URL'\n\n,\n\n08\n\n}\n\n)\n\n,\n\n08\n\n}\n\n)\n\n,\n\n09\n\n]\n\n,\n\n09\n\n]\n\n,\n\n10\n\n}\n\n)\n\n;\n\n10\n\n}\n\n)\n\n;\n\n11\n\n11\n\n12\n\n// Get user's Zilliqa wallet info\n\n12\n\n// Get user's Zilliqa wallet info\n\n13\n\nconst\n\nwallet\n\n=\n\nawait\n\nmagic\n\n.\n\nzilliqa\n\n.\n\ngetWallet\n\n(\n\n)\n\n;\n\n13\n\nconst\n\nwallet\n\n=\n\nawait\n\nmagic\n\n.\n\nzilliqa\n\n.\n\ngetWallet\n\n(\n\n)\n\n;\n\n14\n\nconsole\n\n.\n\nlog\n\n(\n\n'Zilliqa wallet: '\n\n,\n\nwallet\n\n)\n\n;\n\n14\n\nconsole\n\n.\n\nlog\n\n(\n\n'Zilliqa wallet: '\n\n,\n\nwallet\n\n)\n\n;", "explanation": "This documentation section is titled \"#Get User Wallet\" and it explains how to retrieve a Zilliqa wallet for the current user using the `getWallet` function from the Magic Labs embedded wallet SDK.\n\nHere's what it does in simple terms:\n\n1. It imports the necessary libraries, including the Magic Labs SDK and the Zilliqa extension.\n2. It initializes a new instance of the Magic Labs SDK with an API key and enables the Zilliqa extension.\n3. It calls the `getWallet` function on the Magic Labs instance, which retrieves the user's Zilliqa wallet information.\n4. It logs the retrieved wallet information to the console.\n\nThe main purpose of this code is to provide a way to retrieve a user's Zilliqa wallet for use in other parts of an application or service that interacts with the Zilliqa blockchain. This could be useful in a variety of scenarios, such as:\n\n* Displaying a user's Zilliqa wallet address and balance on a dashboard\n* Performing transactions on behalf of the user using their Zilliqa wallet\n* Integrating with other services or applications that use Zilliqa wallets\n\nOverall, this code provides a simple way to interact with a user's Zilliqa wallet and retrieve relevant information for use in other parts of an application.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/other/zilliqa#chunk-4", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nTo send a standard Zilliqa blockchain transaction, you can call the magic.Zilliqa.sendTransaction method.\n\nmagic.Zilliqa.sendTransaction\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\nimport\n\n{\n\nZilliqaExtension\n\n}\n\nfrom\n\n'@magic-ext/zilliqa'\n\n;\n\n02\n\nimport\n\n{\n\nZilliqaExtension\n\n}\n\nfrom\n\n'@magic-ext/zilliqa'\n\n;\n\n03\n\nconst\n\n{\n\nBN\n\n,\n\nLong\n\n,\n\nbytes\n\n,\n\nunits\n\n}\n\n=\n\nrequire\n\n(\n\n'@zilliqa-js/util'\n\n)\n\n;\n\n03\n\nconst\n\n{\n\nBN\n\n,\n\nLong\n\n,\n\nbytes\n\n,\n\nunits\n\n}\n\n=\n\nrequire\n\n(\n\n'@zilliqa-js/util'\n\n)\n\n;\n\n04\n\n04\n\n05\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_API_KEY'\n\n,\n\n{\n\n05\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_API_KEY'\n\n,\n\n{\n\n06\n\nextensions\n\n:\n\n[\n\n06\n\nextensions\n\n:\n\n[\n\n07\n\nnew\n\nZilliqaExtension\n\n(\n\n{\n\n07\n\nnew\n\nZilliqaExtension\n\n(\n\n{\n\n08\n\nrpcUrl\n\n:\n\n'Zilliqa_RPC_NODE_URL'\n\n,\n\n08\n\nrpcUrl\n\n:\n\n'Zilliqa_RPC_NODE_URL'\n\n,\n\n09\n\n}\n\n)\n\n,\n\n09\n\n}\n\n)\n\n,\n\n10\n\n]\n\n,\n\n10\n\n]\n\n,\n\n11\n\n}\n\n)\n\n;\n\n11\n\n}\n\n)\n\n;\n\n12\n\n12\n\n13\n\nconst\n\nchainId\n\n=\n\n333\n\n;\n\n// chainId of the developer testnet\n\n13\n\nconst\n\nchainId\n\n=\n\n333\n\n;\n\n// chainId of the developer testnet\n\n14\n\nconst\n\nmsgVersion\n\n=\n\n1\n\n;\n\n// current msgVersion\n\n14\n\nconst\n\nmsgVersion\n\n=\n\n1\n\n;\n\n// current msgVersion\n\n15\n\nconst\n\nVERSION\n\n=\n\nbytes\n\n.\n\npack\n\n(\n\nchainId\n\n,\n\nmsgVersion\n\n)\n\n;\n\n15\n\nconst\n\nVERSION\n\n=\n\nbytes\n\n.\n\npack\n\n(\n\nchainId\n\n,\n\nmsgVersion\n\n)\n\n;\n\n16\n\n16\n\n17\n\nconst\n\nmyGasPrice\n\n=\n\nunits\n\n.\n\ntoQa\n\n(\n\n'1000'\n\n,\n\nunits\n\n.\n\nUnits\n\n.\n\nLi\n\n)\n\n;\n\n17\n\nconst\n\nmyGasPrice\n\n=\n\nunits\n\n.\n\ntoQa\n\n(\n\n'1000'\n\n,\n\nunits\n\n.\n\nUnits\n\n.\n\nLi\n\n)\n\n;\n\n18\n\n18\n\n19\n\nconst\n\nparams\n\n=\n\n{\n\n19\n\nconst\n\nparams\n\n=\n\n{\n\n20\n\nversion\n\n:\n\nVERSION\n\n,\n\n20\n\nversion\n\n:\n\nVERSION\n\n,\n\n21\n\ntoAddr\n\n:\n\n'zil14vut0rh7q78ydc0g7yt7e5zkfyrmmps00lk6r7'\n\n,\n\n21\n\ntoAddr\n\n:\n\n'zil14vut0rh7q78ydc0g7yt7e5zkfyrmmps00lk6r7'\n\n,\n\n22\n\namount\n\n:\n\nnew\n\nBN\n\n(\n\nunits\n\n.\n\ntoQa\n\n(\n\n'0.5'\n\n,\n\nunits\n\n.\n\nUnits\n\n.\n\nZil\n\n)\n\n)\n\n,\n\n22\n\namount\n\n:\n\nnew\n\nBN\n\n(\n\nunits\n\n.\n\ntoQa\n\n(\n\n'0.5'\n\n,\n\nunits\n\n.\n\nUnits\n\n.\n\nZil\n\n)\n\n)\n\n,\n\n23\n\ngasPrice\n\n:\n\nmyGasPrice\n\n,\n\n23\n\ngasPrice\n\n:\n\nmyGasPrice\n\n,\n\n24\n\ngasLimit\n\n:\n\nLong\n\n.\n\nfromNumber\n\n(\n\n1\n\n)\n\n,\n\n24\n\ngasLimit\n\n:\n\nLong\n\n.\n\nfromNumber\n\n(\n\n1\n\n)\n\n,\n\n25\n\n}\n\n;\n\n25\n\n}\n\n;\n\n26\n\n26\n\n27\n\nconst\n\ntx\n\n=\n\nawait\n\nmagic\n\n.\n\nzil\n\n.\n\nsendTransaction\n\n(\n\nparams\n\n,\n\nfalse\n\n)\n\n;\n\n27\n\nconst\n\ntx\n\n=\n\nawait\n\nmagic\n\n.\n\nzil\n\n.\n\nsendTransaction\n\n(\n\nparams\n\n,\n\nfalse\n\n)\n\n;\n\n28\n\n// Send a transaction\n\n28\n\n// Send a transaction\n\n29\n\nconsole\n\n.\n\nlog\n\n(\n\n'send transaction'\n\n,\n\ntx\n\n)\n\n;\n\n29\n\nconsole\n\n.\n\nlog\n\n(\n\n'send transaction'\n\n,\n\ntx\n\n)\n\n;", "explanation": "The `#Send Transaction` section from the Magic Labs embedded wallet documentation is about sending a standard Zilliqa blockchain transaction using the Magic SDK.\n\nHere's a clear and concise explanation of what it is about and its main purpose:\n\n**Purpose:** This code snippet demonstrates how to send a transaction on the Zilliqa blockchain using the Magic SDK.\n\n**Key components:**\n\n1. Importing necessary modules, including `Magic`, `ZilliqaExtension`, and utility functions from `@zilliqa-js/util`.\n2. Creating an instance of the `Magic` class with a API key.\n3. Adding a `ZilliqaExtension` to the Magic instance, which allows for interactions with the Zilliqa blockchain.\n4. Defining transaction parameters, including:\n\t* Version (chain ID and message version).\n\t* To address (`zil14vut0rh7q78ydc0g7yt7e5zkfyrmmps00lk6r7`).\n\t* Amount (`0.5 ZIL`).\n\t* Gas price (`1,000 Qi`).\n\t* Gas limit (`1`).\n5. Calling the `sendTransaction` method on the Magic instance to send the transaction.\n\n**Main purpose:** The main purpose of this code snippet is to demonstrate how to send a standard Zilliqa blockchain transaction using the Magic SDK. It provides an example of how to create a transaction, define its parameters, and submit it to the blockchain for processing.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/other/zilliqa#chunk-5", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n#\n\nTo deploy a smart contract, you can call the magic.zilliqa.deployContract method.\n\nmagic.zilliqa.deployContract\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\nimport\n\n{\n\nZilliqaExtension\n\n}\n\nfrom\n\n'@magic-ext/zilliqa'\n\n;\n\n02\n\nimport\n\n{\n\nZilliqaExtension\n\n}\n\nfrom\n\n'@magic-ext/zilliqa'\n\n;\n\n03\n\nconst\n\n{\n\nBN\n\n,\n\nLong\n\n,\n\nbytes\n\n,\n\nunits\n\n}\n\n=\n\nrequire\n\n(\n\n'@zilliqa-js/util'\n\n)\n\n;\n\n03\n\nconst\n\n{\n\nBN\n\n,\n\nLong\n\n,\n\nbytes\n\n,\n\nunits\n\n}\n\n=\n\nrequire\n\n(\n\n'@zilliqa-js/util'\n\n)\n\n;\n\n04\n\n04\n\n05\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_API_KEY'\n\n,\n\n{\n\n05\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_API_KEY'\n\n,\n\n{\n\n06\n\nextensions\n\n:\n\n[\n\n06\n\nextensions\n\n:\n\n[\n\n07\n\nnew\n\nZilliqaExtension\n\n(\n\n{\n\n07\n\nnew\n\nZilliqaExtension\n\n(\n\n{\n\n08\n\nrpcUrl\n\n:\n\n'Zilliqa_RPC_NODE_URL'\n\n,\n\n08\n\nrpcUrl\n\n:\n\n'Zilliqa_RPC_NODE_URL'\n\n,\n\n09\n\n}\n\n)\n\n,\n\n09\n\n}\n\n)\n\n,\n\n10\n\n]\n\n,\n\n10\n\n]\n\n,\n\n11\n\n}\n\n)\n\n;\n\n11\n\n}\n\n)\n\n;\n\n12\n\n12\n\n13\n\nconst\n\nwallet\n\n=\n\nawait\n\nmagic\n\n.\n\nzilliqa\n\n.\n\ngetWallet\n\n(\n\n)\n\n;\n\n13\n\nconst\n\nwallet\n\n=\n\nawait\n\nmagic\n\n.\n\nzilliqa\n\n.\n\ngetWallet\n\n(\n\n)\n\n;\n\n14\n\n14\n\n15\n\nconst\n\naddress\n\n=\n\nwallet\n\n.\n\naddress\n\n;\n\n15\n\nconst\n\naddress\n\n=\n\nwallet\n\n.\n\naddress\n\n;\n\n16\n\n16\n\n17\n\nconst\n\ncode\n\n=\n\n`\n\nscilla_version 0\n\n17\n\nconst\n\ncode\n\n=\n\n`\n\nscilla_version 0\n\n18\n\n18\n\n19\n\n(* HelloWorld contract *)\n\n19\n\n(* HelloWorld contract *)\n\n20\n\n20\n\n21\n\nimport ListUtils\n\n21\n\nimport ListUtils\n\n22\n\n22\n\n23\n\n(***************************************************)\n\n23\n\n(***************************************************)\n\n24\n\n(*               Associated library                *)\n\n24\n\n(* Associated library *)\n\n25\n\n(***************************************************)\n\n25\n\n(***************************************************)\n\n26\n\nlibrary HelloWorld\n\n26\n\nlibrary HelloWorld\n\n27\n\n27\n\n28\n\nlet not_owner_code = Int32 1\n\n28\n\nlet not_owner_code = Int32 1\n\n29\n\nlet set_hello_code = Int32 2\n\n29\n\nlet set_hello_code = Int32 2\n\n30\n\n30\n\n31\n\n(***************************************************)\n\n31\n\n(***************************************************)\n\n32\n\n(*             The contract definition             *)\n\n32\n\n(* The contract definition *)\n\n33\n\n(***************************************************)\n\n33\n\n(***************************************************)\n\n34\n\n34\n\n35\n\ncontract HelloWorld\n\n35\n\ncontract HelloWorld\n\n36\n\n(owner: ByStr20)\n\n36\n\n(owner: ByStr20)\n\n37\n\n37\n\n38\n\nfield welcome_msg : String = \"\"\n\n38\n\nfield welcome_msg : String = \"\"\n\n39\n\n39\n\n40\n\ntransition setHello (msg : String)\n\n40\n\ntransition setHello (msg : String)\n\n41\n\nis_owner = builtin eq owner _sender;\n\n41\n\nis_owner = builtin eq owner _sender;\n\n42\n\nmatch is_owner with\n\n42\n\nmatch is_owner with\n\n43\n\n| False =>\n\n43\n\n| False =>\n\n44\n\ne = {_eventname : \"setHello()\"; code : not_owner_code};\n\n44\n\ne = {_eventname : \"setHello()\"; code : not_owner_code};\n\n45\n\nevent e\n\n45\n\nevent e\n\n46\n\n| True =>\n\n46\n\n| True =>\n\n47\n\nwelcome_msg := msg;\n\n47\n\nwelcome_msg := msg;\n\n48\n\ne = {_eventname : \"setHello()\"; code : set_hello_code};\n\n48\n\ne = {_eventname : \"setHello()\"; code : set_hello_code};\n\n49\n\nevent e\n\n49\n\nevent e\n\n50\n\nend\n\n50\n\nend\n\n51\n\nend\n\n51\n\nend\n\n52\n\n52\n\n53\n\n53\n\n54\n\ntransition getHello ()\n\n54\n\ntransition getHello ()\n\n55\n\nr <- welcome_msg;\n\n55\n\nr <- welcome_msg;\n\n56\n\ne = {_eventname: \"getHello()\"; msg: r};\n\n56\n\ne = {_eventname: \"getHello()\"; msg: r};\n\n57\n\nevent e\n\n57\n\nevent e\n\n58\n\nend\n\n`\n\n;\n\n58\n\nend\n\n`\n\n;\n\n59\n\n59\n\n60\n\nconst\n\ninit\n\n=\n\n[\n\n60\n\nconst\n\ninit\n\n=\n\n[\n\n61\n\n// this parameter is mandatory for all init arrays\n\n61\n\n// this parameter is mandatory for all init arrays\n\n62\n\n{\n\n62\n\n{\n\n63\n\nvname\n\n:\n\n'_scilla_version'\n\n,\n\n63\n\nvname\n\n:\n\n'_scilla_version'\n\n,\n\n64\n\ntype\n\n:\n\n'Uint32'\n\n,\n\n64\n\ntype\n\n:\n\n'Uint32'\n\n,\n\n65\n\nvalue\n\n:\n\n'0'\n\n,\n\n65\n\nvalue\n\n:\n\n'0'\n\n,\n\n66\n\n}\n\n,\n\n66\n\n}\n\n,\n\n67\n\n{\n\n67\n\n{\n\n68\n\nvname\n\n:\n\n'owner'\n\n,\n\n68\n\nvname\n\n:\n\n'owner'\n\n,\n\n69\n\ntype\n\n:\n\n'ByStr20'\n\n,\n\n69\n\ntype\n\n:\n\n'ByStr20'\n\n,\n\n70\n\nvalue\n\n:\n\n`\n\n${\n\naddress\n\n}\n\n`\n\n,\n\n70\n\nvalue\n\n:\n\n`\n\n${\n\naddress\n\n}\n\n`\n\n,\n\n71\n\n}\n\n,\n\n71\n\n}\n\n,\n\n72\n\n]\n\n;\n\n72\n\n]\n\n;\n\n73\n\n73\n\n74\n\nconst\n\nchainId\n\n=\n\n333\n\n;\n\n// chainId of the developer testnet\n\n74\n\nconst\n\nchainId\n\n=\n\n333\n\n;\n\n// chainId of the developer testnet\n\n75\n\nconst\n\nmsgVersion\n\n=\n\n1\n\n;\n\n// current msgVersion\n\n75\n\nconst\n\nmsgVersion\n\n=\n\n1\n\n;\n\n// current msgVersion\n\n76\n\nconst\n\nVERSION\n\n=\n\nbytes\n\n.\n\npack\n\n(\n\nchainId\n\n,\n\nmsgVersion\n\n)\n\n;\n\n76\n\nconst\n\nVERSION\n\n=\n\nbytes\n\n.\n\npack\n\n(\n\nchainId\n\n,\n\nmsgVersion\n\n)\n\n;\n\n77\n\n77\n\n78\n\nconst\n\nmyGasPrice\n\n=\n\nunits\n\n.\n\ntoQa\n\n(\n\n'1000'\n\n,\n\nunits\n\n.\n\nUnits\n\n.\n\nLi\n\n)\n\n;\n\n78\n\nconst\n\nmyGasPrice\n\n=\n\nunits\n\n.\n\ntoQa\n\n(\n\n'1000'\n\n,\n\nunits\n\n.\n\nUnits\n\n.\n\nLi\n\n)\n\n;\n\n79\n\n79\n\n80\n\nconst\n\nparams\n\n=\n\n{\n\n80\n\nconst\n\nparams\n\n=\n\n{\n\n81\n\nversion\n\n:\n\nVERSION\n\n,\n\n81\n\nversion\n\n:\n\nVERSION\n\n,\n\n82\n\ngasPrice\n\n:\n\nmyGasPrice\n\n,\n\n82\n\ngasPrice\n\n:\n\nmyGasPrice\n\n,\n\n83\n\ngasLimit\n\n:\n\nLong\n\n.\n\nfromNumber\n\n(\n\n10000\n\n)\n\n,\n\n83\n\ngasLimit\n\n:\n\nLong\n\n.\n\nfromNumber\n\n(\n\n10000\n\n)\n\n,\n\n84\n\n}\n\n;\n\n84\n\n}\n\n;\n\n85\n\n85\n\n86\n\nconst\n\nresult\n\n=\n\nawait\n\nmagic\n\n.\n\nzil\n\n.\n\ndeployContract\n\n(\n\ninit\n\n,\n\ncode\n\n,\n\nparams\n\n,\n\n33\n\n,\n\n1000\n\n,\n\nfalse\n\n)\n\n;\n\n86\n\nconst\n\nresult\n\n=\n\nawait\n\nmagic\n\n.\n\nzil\n\n.\n\ndeployContract\n\n(\n\ninit\n\n,\n\ncode\n\n,\n\nparams\n\n,\n\n33\n\n,\n\n1000\n\n,\n\nfalse\n\n)\n\n;\n\n87\n\n87\n\n88\n\nconsole\n\n.\n\nlog\n\n(\n\n'deploy contract'\n\n,\n\nresult\n\n)\n\n;\n\n88\n\nconsole\n\n.\n\nlog\n\n(\n\n'deploy contract'\n\n,\n\nresult\n\n)\n\n;", "explanation": "This is a JavaScript code snippet that appears to be deploying a smart contract on the Zilliqa blockchain using the `magic.zil` library. Here's a breakdown of the code:\n\n**Variables and constants**\n\n* `code`: The SCILLA (a smart contract language similar to Solidity) code for the contract, which is not shown in this snippet.\n* `init`: An array of initial state variables for the contract, which includes two elements: `_scilla_version` set to 0 and `owner` set to a string representation of the current contract address.\n* `chainId`: The chain ID of the developer testnet (333).\n* `msgVersion`: The current message version (1).\n* `VERSION`: A bytes representation of the chain ID and message version, which is used as a unique identifier for the contract.\n* `myGasPrice`: The gas price set to 1000 units.\n* `params`: An object containing the contract's parameters, including the version, gas price, and gas limit.\n\n**Deploying the contract**\n\nThe code uses the `magic.zil.deployContract()` function to deploy the contract on the Zilliqa blockchain. The arguments passed to this function are:\n\n* `init`: The initial state variables for the contract.\n* `code`: The SCILLA code for the contract.\n* `params`: The contract's parameters, including version, gas price, and gas limit.\n* `33`: An unknown value ( possibly a block number or some other parameter).\n* `1_000`: Another unknown value ( possibly a maximum execution time or some other parameter).\n* `false`: A boolean flag that is set to false.\n\nThe function returns a result object, which is logged to the console using `console.log()`.\n\nNote that this code assumes you have already set up an environment with the `magic.zil` library and have a contract code written in SCILLA. The actual deployment process may vary depending on your specific use case and requirements.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/other/zilliqa#chunk-6", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 Zilliqa Block Explorer\n\nZilliqa Block Explorer", "explanation": "**#Resources: A Supportive Section for Developers and Users**\n\nThe '#Resources' section in the Magic Labs embedded wallet documentation for the Zilliqa blockchain is a dedicated area that provides valuable links to external resources relevant to the blockchain. This section is designed to support developers and users by offering access to essential tools and information.\n\n**Purpose:**\n\nThe main purpose of this section is to:\n\n1. **Facilitate ease of access** to critical resources, making it quicker and more convenient for developers and users to find the information they need.\n2. **Enhance the user experience** by reducing the need to search for separate resources, allowing users to focus on integrating the Magic Labs embedded wallet into their projects.\n3. **Provide a centralized hub** for essential links, ensuring that the most up-to-date and relevant information is readily available.\n\nIn this specific section, the **Zilliqa Block Explorer** link provides users with a straightforward way to explore the Zilliqa blockchain, allowing them to view transactions, blocks, and other blockchain data.\n\nBy including this resource, Magic Labs demonstrates its commitment to supporting developers and users in their journey with the Zilliqa blockchain.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/other/zilliqa#chunk-7", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nSei is the first parallelized EVM layer 1 blockchain network. It offers significant scalability, up to five thousand transactions per second, along with sub-one-second finality and reduced transaction fees compared to Ethereum.\n\nSei\n\nAs Sei is EVM compatible, you can follow the Ethereum documentation to send your first transaction and utilize all other features.\n\nEthereum", "explanation": "**Sei Overview**\n\nSei is a parallelized EVM (Ethereum Virtual Machine) layer 1 blockchain network designed to provide improved scalability and efficiency compared to Ethereum. Here's a brief summary of its key features and purpose:\n\n**Main Purpose:** Sei aims to solve the scalability limitations of Ethereum by processing a large number of transactions in a shorter amount of time, while also reducing transaction fees.\n\n**Key Benefits:**\n\n* **Scalability:** Up to 5,000 transactions per second\n* **Finality:** Sub-one-second finality (faster confirmation times)\n* **Transactions Fees:** Reduced compared to Ethereum\n\n**Compatibility:** Sei is EVM (Ethereum Virtual Machine) compatible, allowing developers to easily migrate their existing Ethereum applications and smart contracts with minimal modifications.\n\n**Note:** For sending your first transaction and utilizing all features, you can follow the standard Ethereum documentation.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/evm/sei#chunk-1", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\nconst\n\nSeiOptions\n\n=\n\n{\n\n01\n\nconst\n\nSeiOptions\n\n=\n\n{\n\n02\n\nrpcUrl\n\n:\n\n'https://evm-rpc-arctic-1.sei-apis.com'\n\n,\n\n// Sei devnet RPC URL\n\n02\n\nrpcUrl\n\n:\n\n'https://evm-rpc-arctic-1.sei-apis.com'\n\n,\n\n// Sei devnet RPC URL\n\n03\n\nchainId\n\n:\n\n713715\n\n,\n\n// Sei chain id\n\n03\n\nchainId\n\n:\n\n713715\n\n,\n\n// Sei chain id\n\n04\n\n}\n\n;\n\n04\n\n}\n\n;\n\n05\n\n05\n\n06\n\n// Setting network to point to Sei\n\n06\n\n// Setting network to point to Sei\n\n07\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_PUBLISHABLE_API_KEY'\n\n,\n\n{\n\nnetwork\n\n:\n\nSeiOptions\n\n}\n\n)\n\n;\n\n07\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_PUBLISHABLE_API_KEY'\n\n,\n\n{\n\nnetwork\n\n:\n\nSeiOptions\n\n}\n\n)\n\n;", "explanation": "This documentation section is about configuring the Sei network on a Magic Labs embedded wallet. Here's a clear and concise summary:\n\n**Purpose:** To set up the Magic Labs wallet to connect to the Sei blockchain.\n\n**Key points:**\n\n1. The `SeiOptions` object is defined with two properties:\n\t* `rpcUrl`: The RPC URL for the Sei devnet, which is `https://evm-rpc-arctic-1.sei-apis.com`.\n\t* `chainId`: The chain ID for the Sei network, which is `713715`.\n2. A new instance of the Magic Labs wallet (`Magic`) is created with:\n\t* A publishable API key (which should be replaced with your actual API key).\n\t* The `SeiOptions` object as the network configuration.\n\n**Main purpose:** This code sets up the Magic Labs wallet to connect to the Sei blockchain, allowing users to interact with the Sei network through the wallet.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/evm/sei#chunk-2", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 All Auth, User and most Wallet module methods* for Dedicated Wallets\n\n\u2022 All EVM Provider functionality to respond to supported RPC methods\n\nAuth\n\nUser\n\nWallet\n\nDedicated Wallets\n\nRPC methods\n\n*Some features are not yet compatible such as NFT Viewer and Fiat On-ramps.\n\nNeed a feature or see a problem? File an issue on our github repo.\n\ngithub repo", "explanation": "**Compatibility Section Explanation**\n\nThe `#Compatibility` section of the Magic Labs embedded wallet documentation indicates which features and functionalities are currently supported for seamless integration with various blockchain systems, specifically the Ethereum Virtual Machine (EVM) provider.\n\n**Key Points:**\n\n1. **Supported Features:** The majority of methods related to Authentication (`Auth`), User management (`User`), and Wallet functionality (`Wallet`) are compatible with Dedicated Wallets.\n2. **EVM Provider Compatibility:** All Remote Procedure Call (RPC) methods supported by the EVM provider can be responded to, ensuring a smooth interaction between Magic Labs and EVM-based blockchain networks.\n3. **Exceptions:** Some features, such as the NFT Viewer and Fiat On-ramps, are not yet compatible. These limitations should be noted when integrating Magic Labs with specific use cases.\n\n**Main Purpose:**\n\nThe `#Compatibility` section serves as a crucial reference for developers, indicating which functionalities have been thoroughly tested and validated to work correctly with Magic Labs embedded wallet. This information helps ensure a smooth integration process, avoiding potential issues that might arise from unsupported features or methods.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/evm/sei#chunk-3", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 Documentation: https://www.docs.sei.io/\n\n\u2022 Block Explorer: https://www.seiscan.app/pacific-1\n\n\u2022 Testnet Faucet: https://www.docs.sei.io/dev-ecosystem-providers/faucets\n\nhttps://www.docs.sei.io/\n\nhttps://www.seiscan.app/pacific-1\n\nhttps://www.docs.sei.io/dev-ecosystem-providers/faucets", "explanation": "**Understanding the '#Resources & Tools' section**\n\nThe '#Resources & Tools' section is a crucial part of the Magic Labs embedded wallet documentation. It provides users with a collection of essential resources and tools necessary to effectively interact with the SEI blockchain network.\n\n**Main Purpose:**\n\nThe primary purpose of this section is to offer:\n\n1. **Quick access to documentation**: It links to the official documentation for SEI, ensuring users can easily find information about the network, its features, and technical specifications.\n2. **Exploration of the blockchain**: The Block Explorer tool (https://www.seiscan.app/pacific-1) allows users to visualize and analyze transactions, addresses, and other blockchain data on the SEI network.\n3. **Access to testnet resources**: The Testnet Faucet link provides a simple way to request and receive testnet SEI tokens, enabling users to test and develop applications without interfering with the mainnet.\n\nBy providing these resources and tools in one convenient location, the '#Resources & Tools' section saves users time and makes it easier for them to understand and work with the SEI blockchain network.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/evm/sei#chunk-4", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nYou can allow your users to sign up & log in to your web app with their LinkedIn account.", "explanation": "This documentation section explains how to enable social login using LinkedIn as an authentication provider for user registration and login within a web application.\n\nThe main purpose of this feature is to provide users with an alternative way to register and authenticate on the web application by leveraging their existing LinkedIn credentials, thereby simplifying the sign-up process.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/login/social-logins/social-providers/linkedin#chunk-1", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n#\n\nMagic SDK offers two OAuth extensions: v1 and v2. For web applications, it is recommended to use v2, while v1 should be used for mobile applications.\n\nv1\n\nv2\n\n\u2022 You will need a LinkedIn account\n\n\u2022 You will need to have the Magic SDK installed into your web app\n\n\u2022 You will need to have the Magic SDK - OAuth Extension installed into your web app\n\nLinkedIn\n\nMagic SDK installed\n\nMagic SDK - OAuth Extension", "explanation": "This documentation section is about setting up and preparing for social login using LinkedIn with the Magic Labs embedded wallet.\n\n**Main Purpose:**\nThe main purpose of this section is to outline the prerequisites (requirements) needed to successfully integrate LinkedIn social login into a web application using the Magic Labs SDK.\n\n**Key Points:**\n\n1. **LinkedIn account:** You need a LinkedIn account to use for social login.\n2. **Magic SDK installation:** Your web app must have the Magic SDK installed.\n3. **OAuth Extension:** In addition to the Magic SDK, you also need to install the Magic SDK - OAuth Extension into your web app.\n\nBy following these prerequisites, developers can ensure that their web application is properly set up to use LinkedIn social login with the Magic Labs embedded wallet.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/login/social-logins/social-providers/linkedin#chunk-2", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nAfter installing the OAuth extension, you can now enable LinkedIn Login for your Magic app:\n\n\u2022 Follow LinkedIn's instructions to create an app\n\n\u2022 Go to your Magic Dashboard\n\n\u2022 Select the Magic app for which you\u2019d like to enable LinkedIn Login, or create a new app\n\n\u2022 Navigate to Social Login from the sidebar\n\n\u2022 Click the toggle for LinkedIn\n\n\u2022 Copy the Redirect URI field from your Magic Dashboard\n\n\u2022 Return to your LinkedIn App Dashboard and select \"Sign in with LinkedIn\" in the \"Products\" tab\n\n\u2022 Select Auth tab, add the Redirect URI you obtained from your Magic Dashboard into the \"Authorized redirect URLs for your app\" field\n\n\u2022 Click \"Update\" to save\n\n\u2022 Obtain the \"Client ID\" and \"Client Secret\"\n\n\u2022 Return to your Magic Dashboard and input the Client ID and Client Secret for your LinkedIn OAuth app\n\n\u2022 In Magic Dashboard, click \u201cSave\u201d \u2013 Done!\n\ncreate an app\n\nMagic Dashboard", "explanation": "**LinkedIn Setup (v1 extension) Documentation Explanation**\n\nThis documentation section guides users through setting up LinkedIn Login functionality in their Magic Labs embedded wallet. The main purpose is to enable customers of a Magic app to log in using their LinkedIn account credentials.\n\n**Key Steps:**\n\n1. Create a LinkedIn app and obtain the Client ID and Client Secret.\n2. Configure the Redirect URI in both the Magic Dashboard and the LinkedIn App Dashboard.\n3. Input the Client ID and Client Secret into the Magic Dashboard.\n4. Save the changes to enable LinkedIn Login for the Magic app.\n\n**Result:** Users of the Magic app can now log in using their LinkedIn account, providing an additional authentication method.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/login/social-logins/social-providers/linkedin#chunk-3", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 Follow above steps, but disregard Magic's Redirect URI in step 6\n\n\u2022 In step 8, paste the Redirect URI you are passing in as the redirectURI argument to the loginWithRedirect method\n\nCopy\n\n01\n\nawait\n\nmagic\n\n.\n\noauth2\n\n.\n\nloginWithRedirect\n\n(\n\n{\n\n01\n\nawait\n\nmagic\n\n.\n\noauth2\n\n.\n\nloginWithRedirect\n\n(\n\n{\n\n02\n\nprovider\n\n:\n\n'linkedin'\n\n,\n\n02\n\nprovider\n\n:\n\n'linkedin'\n\n,\n\n03\n\nredirectURI\n\n:\n\n'https://your-app.com/your/oauth/callback'\n\n,\n\n// <== whitelist this with LinkedIn\n\n03\n\nredirectURI\n\n:\n\n'https://your-app.com/your/oauth/callback'\n\n,\n\n// <== whitelist this with LinkedIn\n\n04\n\n}\n\n)\n\n;\n\n04\n\n}\n\n)\n\n;", "explanation": "**LinkedIn Setup (v2 Extension) Documentation Overview**\n\nThis section of the Magic Labs embedded wallet documentation provides instructions for setting up LinkedIn authorization for social logins. It's a step-by-step guide for integrating LinkedIn login functionality into your application.\n\n**Main Purpose:**\n\nThe main purpose of this section is to guide developers on how to:\n\n1. Authenticate users with their LinkedIn accounts.\n2. Integrate LinkedIn login functionality into their Magic Labs embedded wallet application.\n\n**Key Points:**\n\n1. You'll need to provide a custom Redirect URI to be listed with LinkedIn.\n2. In step 8, paste the custom Redirect URI as the `redirectURI` argument to the `loginWithRedirect` method.\n3. This approach is for the v2 extension of LinkedIn authorization.\n\n**Why Disregard Magic's Redirect URI?**\n\nDisregarding Magic's Redirect URI is necessary because LinkedIn requires a custom Redirect URI to be registered and whitelisted for your application to work correctly. This custom URI is what will handle the redirect from LinkedIn back to your application after authentication.\n\n**In Summary:**\n\nTo set up LinkedIn authorization for your Magic Labs embedded wallet application, follow the instructions provided in this section, focusing on providing a custom Redirect URI and using it in your `loginWithRedirect` method. This will enable your users to authenticate with their LinkedIn accounts.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/login/social-logins/social-providers/linkedin#chunk-4", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 LinkedIn Social Login Demo\n\nLinkedIn Social Login Demo", "explanation": "This documentation section is called \"#Resources\" and it appears to be related to the Magic Labs embedded wallet's integration with LinkedIn social login.\n\nThe resources listed are:\n\n*   \"LinkedIn Social Login Demo\"\n\nIn essence, this section provides access to a demonstration or example (demo) of how the Magic Labs embedded wallet can utilize LinkedIn as a social login provider. The main purpose of this resource is likely to help developers, engineers, and other stakeholders visualize and understand how the integration works, potentially facilitating testing, troubleshooting, or even development of similar integrations.\n\nIn summary, the \"#Resources\" section provides a demo for LinkedIn social login integration with Magic Labs embedded wallet, serving as a tool for understanding and possibly implementing this feature.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/login/social-logins/social-providers/linkedin#chunk-5", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nWith Magic, you can use Email one-time codes as an authentication mechanism, giving users a simple way to log in using their emails.\n\n#\n\nEmail OTP as an SDK method is only available with Dedicated Wallet. Refer to the Login UI page for more information.\n\nDedicated Wallet\n\nLogin UI\n\nEmail OTP is available on all client-side SDKs.\n\nclient-side SDKs", "explanation": "Let me break down the provided documentation section into a clear and concise explanation.\n\n**Email OTP Overview:**\n\nEmail OTP (One-Time Password) is an authentication mechanism using a temporary code sent to a user's email address. It provides a simple way for users to log in by entering this code.\n\n**Main Purpose:**\n\nThe primary purpose of Email OTP is to offer a secure and convenient method for users to authenticate themselves without the need for complex password inputs or other traditional login methods.\n\n**Key Points:**\n\n- Email OTP is only supported in Magic's Dedicated Wallet, which is further detailed on the Login UI page.\n- For those utilizing Dedicated Wallet, Email OTP is a viable login option.\n- Conversely, it's also compatible with all client-side SDKs, this is inclusive of platforms like desktop applications and mobile applications.\n- This SDK method permits developers to embed an email login mechanism within their apps for users to utilise as a login authentication avenue.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/login/email-otp#chunk-1", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 Log in and create wallets for end users with a one-time code sent to their email address that they will input for authentication", "explanation": "**Section Explanation:**\n\nThe provided documentation section is titled '#Use Cases' specifically for email OTP (One-Time Password) authentication in the Magic Labs embedded wallet. \n\n**Main Purpose:**\n\nThe main purpose of this section is to describe a scenario or use case where users can log in and create wallets for end-users by using a one-time code sent to their email address, which is then input for authentication purposes.\n\n**In Simple Terms:**\n\nThis section explains how users can verify their identity by entering an email OTP to complete the login process and ultimately be able to create a wallet on the Magic Labs platform.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/login/email-otp#chunk-2", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nYou can use Email OTP login by creating a project with our CLI tool and picking 'Quickstart' when prompted. Alternatively, you can integrate Email OTP directly into your existing projects using the sample below. Refer to the API documentation for information on how to install and initialize Magic for your existing project.\n\nCLI tool\n\nAPI documentation\n\nOnce you've created a Magic instance, log users in using loginWithEmailOTP. In addition to the user's email address, you can provide a boolean indicating whether or not to show a pre-built modal interface directing the user to enter their one-time passcode. When false, you can implement a custom UI to continue the email OTP flow.\n\nloginWithEmailOTP\n\nfalse\n\nOnce logged in, you will receive a DID token that can be used with our Admin SDK to verify the user's information and wallet address on the backend. You can also retrieve the user's wallet address and email using getInfo for Web/React Native and getMetadata for iOS, Android, and Flutter.\n\nAdmin SDK\n\ngetInfo\n\ngetInfo\n\ngetMetadata\n\nCopy\n\n01\n\n// Assumes you've initialized a `Magic` instance with a Dedicated Wallet API Key\n\n01\n\n// Assumes you've initialized a `Magic` instance with a Dedicated Wallet API Key\n\n02\n\nconst\n\nlogin\n\n=\n\nasync\n\n(\n\nemailAddress\n\n,\n\nshowUI\n\n)\n\n=>\n\n{\n\n02\n\nconst\n\nlogin\n\n=\n\nasync\n\n(\n\nemailAddress\n\n,\n\nshowUI\n\n)\n\n=>\n\n{\n\n03\n\ntry\n\n{\n\n03\n\ntry\n\n{\n\n04\n\nconst\n\ndid\n\n=\n\nawait\n\nmagic\n\n.\n\nauth\n\n.\n\nloginWithEmailOTP\n\n(\n\n{\n\nemail\n\n:\n\nemailAddress\n\n,\n\nshowUI\n\n:\n\nshowUI\n\n}\n\n)\n\n;\n\n04\n\nconst\n\ndid\n\n=\n\nawait\n\nmagic\n\n.\n\nauth\n\n.\n\nloginWithEmailOTP\n\n(\n\n{\n\nemail\n\n:\n\nemailAddress\n\n,\n\nshowUI\n\n:\n\nshowUI\n\n}\n\n)\n\n;\n\n05\n\nconsole\n\n.\n\nlog\n\n(\n\n`\n\nDID Token:\n\n${\n\ndid\n\n}\n\n`\n\n)\n\n;\n\n05\n\nconsole\n\n.\n\nlog\n\n(\n\n`\n\nDID Token:\n\n${\n\ndid\n\n}\n\n`\n\n)\n\n;\n\n06\n\n06\n\n07\n\nconst\n\nuserInfo\n\n=\n\nawait\n\nmagic\n\n.\n\nuser\n\n.\n\ngetInfo\n\n(\n\n)\n\n;\n\n07\n\nconst\n\nuserInfo\n\n=\n\nawait\n\nmagic\n\n.\n\nuser\n\n.\n\ngetInfo\n\n(\n\n)\n\n;\n\n08\n\nconsole\n\n.\n\nlog\n\n(\n\n`\n\nUserInfo:\n\n${\n\nuserInfo\n\n}\n\n`\n\n)\n\n;\n\n08\n\nconsole\n\n.\n\nlog\n\n(\n\n`\n\nUserInfo:\n\n${\n\nuserInfo\n\n}\n\n`\n\n)\n\n;\n\n09\n\n09\n\n10\n\n// Handle user information as needed\n\n10\n\n// Handle user information as needed\n\n11\n\n}\n\ncatch\n\n{\n\n11\n\n}\n\ncatch\n\n{\n\n12\n\n// Handle errors if required!\n\n12\n\n// Handle errors if required!\n\n13\n\n}\n\n13\n\n}\n\n14\n\n}\n\n14\n\n}", "explanation": "**Usage Explanation**\n\nThe '#Usage' section of the Magic Labs embedded wallet documentation provides a clear guide on how to implement Email OTP login in a Magic Labs project. Its main purpose is to demonstrate the step-by-step process of integrating Email OTP login into a project using either the Magic CLI tool or a direct API integration.\n\n**Key Components**\n\n1. **Initial Project Setup**: The documentation assumes that a project has been created with the Magic CLI tool or that an existing project has been integrated with the Magic API.\n2. **Magic Instance Initialization**: The project must have a Magic instance initialized with a Dedicated Wallet API Key.\n3. **loginWithEmailOTP Function**: The `loginWithEmailOTP` function is used to log users in using their email address and one-time passcode. The function takes two parameters: `emailAddress` and `showUI`.\n4. **DID Token Generation**: When a user logs in successfully, a DID token is generated and can be used to verify the user's information and wallet address on the backend using the Admin SDK.\n5. **Retrieving User Information**: The `getInfo` function is used to retrieve the user's wallet address and email, while the `getMetadata` function is used to retrieve the user's wallet address and other metadata on various platforms (Web, React Native, iOS, Android, and Flutter).\n6. **Error Handling**: The documentation includes a `catch` block to handle any errors that may occur during the login process.\n\n**Main Purpose**\n\nThe main purpose of this section is to provide a clear and concise guide on how to implement Email OTP login in a Magic Labs project, ensuring that the process is easy to follow and understand.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/login/email-otp#chunk-3", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 Quickstart\n\n\u2022 Email OTP Wallets on EVM chains\n\n\u2022 Web API documentation\n\n\u2022 React Native API documentation\n\n\u2022 iOS API documentation\n\n\u2022 Android API documentation\n\n\u2022 Flutter API documentation\n\n\u2022 Unity API documentation\n\nQuickstart\n\nEmail OTP Wallets on EVM chains\n\nWeb API documentation\n\nReact Native API documentation\n\niOS API documentation\n\nAndroid API documentation\n\nFlutter API documentation\n\nUnity API documentation", "explanation": "The '#Resources' section is a comprehensive list of references and guides provided by Magic Labs for their embedded wallet documentation. Its main purpose is to serve as a one-stop destination for developers and users seeking additional information, detailed instructions, or specific documentation for integrating Magic Labs' wallet functionality into various platforms.\n\nBreaking down the main resources listed under '#Resources', we have:\n\n- **Quickstart**: A beginner's guide that provides an overview of the initial setup process, likely including step-by-step instructions for getting started with Magic Labs' embedded wallet.\n- **Platform-specific documentation**: A series of documentation tailored to various programming frameworks and operating systems, including:\n  - **EVM chains**: Documentation for email OTP wallets on Ethereum Virtual Machine (EVM) based chains, such as Ethereum and Binance Smart Chain.\n  - **Web APIs**: Information on using Magic Labs' web APIs for wallet integration.\n  - **Mobile SDKs**: Platforms-specific SDKs for integrating Magic Labs' wallet functionality into mobile applications, including:\n    - **React Native**: For React Native-based apps.\n    - **iOS**: For iOS-based apps.\n    - **Android**: For Android-based apps.\n  - **Flutter and Unity**: For integrating Magic Labs' wallet functionality into Flutter and Unity-based applications, respectively.\n\nBy providing these resources, Magic Labs aims to assist developers in overcoming potential roadblocks and enhancing their wallet integration experience.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/login/email-otp#chunk-4", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nYou can allow your users to sign up & log in to your web app with their GitHub account.", "explanation": "The GitHub Social Login with Magic documentation section explains how to enable users to sign up and log in to a web application using their GitHub account. The main purpose of this section is to provide a guide on how to integrate GitHub social login functionality into a web application using the Magic Labs embedded wallet.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/login/social-logins/social-providers/github#chunk-1", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n#\n\nMagic SDK offers two OAuth extensions: v1 and v2. For web applications, it is recommended to use v2, while v1 should be used for mobile applications.\n\nv1\n\nv2\n\n\u2022 You will need a GitHub account\n\n\u2022 You will need to have the Magic SDK installed into your web app\n\n\u2022 You will need to have the Magic SDK - OAuth Extension installed into your web app\n\nGitHub\n\nMagic SDK installed\n\nMagic SDK - OAuth Extension", "explanation": "This section of the Magic Labs embedded wallet documentation is titled '#Usage - #Prerequisites'. It outlines the required setup and conditions that must be met before using the Magic social login feature with GitHub.\n\nThe main purpose of this section is to inform developers about the necessary components and configurations needed to successfully integrate the Magic social login feature with GitHub into their applications.\n\nThe key points from this section are:\n\n- The availability of two OAuth extensions (v1 and v2) and the recommended usage for web applications (v2) and mobile applications (v1).\n- The requirement of a GitHub account for developers.\n- The necessity of the Magic SDK and the Magic SDK - OAuth Extension being installed in the web application.\n\nBy clearly stating these prerequisites, the documentation helps developers plan and prepare their applications for successful integration with the Magic social login feature using GitHub.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/login/social-logins/social-providers/github#chunk-2", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nAfter installing the OAuth extension, you can now enable GitHub Login for your Magic app:\n\n\u2022 Follow GitHub's instructions to create an OAuth app\n\n\u2022 Go to your Magic Dashboard\n\n\u2022 Select the Magic app for which you\u2019d like to enable Github Login, or create a new app\n\n\u2022 Navigate to Social Login from the sidebar\n\n\u2022 Click the toggle for GitHub\n\n\u2022 Copy the Redirect URI field from your Magic Dashboard\n\n\u2022 Return to your GitHub Dashboard and paste the Redirect URI you obtained from your Magic Dashboard into the \"Authorization callback URL\" field\n\n\u2022 Click \"Register App\" to complete your GitHub OAuth app setup.\n\n\u2022 On the next page, obtain the \"Client ID\" and \"Client Secret\"\n\n\u2022 Return to your Magic Dashboard and input the Client ID and Client Secret for your GitHub OAuth app\n\n\u2022 In Magic Dashboard, click \u201cSave\u201d \u2013 Done!\n\ncreate an OAuth app\n\nMagic Dashboard", "explanation": "**GitHub Setup (v1 extension)**\n\nThis documentation section explains how to enable GitHub Login for a Magic app. The main purpose is to guide users through the process of connecting their Magic app with GitHub using OAuth.\n\n**Key Steps:**\n\n1. Create an OAuth app on GitHub by following their instructions.\n2. Enable GitHub Login on the Magic Dashboard.\n3. Obtain the Redirect URI from the Magic Dashboard.\n4. Set the Redirect URI in the GitHub Dashboard under \"Authorization callback URL\".\n5. Register the GitHub OAuth app on GitHub.\n6. Obtain the Client ID and Client Secret from the GitHub Dashboard.\n7. Enter the Client ID and Client Secret in the Magic Dashboard.\n8. Save the changes to complete the GitHub Setup.\n\n**Main Purpose:**\nThe GitHub Setup is essential for integrating GitHub authentication into a Magic app. This allows users to log in to the Magic app using their GitHub credentials, providing a seamless and secure authentication experience.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/login/social-logins/social-providers/github#chunk-3", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 Follow above steps, but disregard Magic's Redirect URI in step 6\n\n\u2022 In step 7, paste the Redirect URI you are passing in as the redirectURI argument to the loginWithRedirect method\n\nCopy\n\n01\n\nawait\n\nmagic\n\n.\n\noauth2\n\n.\n\nloginWithRedirect\n\n(\n\n{\n\n01\n\nawait\n\nmagic\n\n.\n\noauth2\n\n.\n\nloginWithRedirect\n\n(\n\n{\n\n02\n\nprovider\n\n:\n\n'github'\n\n,\n\n02\n\nprovider\n\n:\n\n'github'\n\n,\n\n03\n\nredirectURI\n\n:\n\n'https://your-app.com/your/oauth/callback'\n\n,\n\n// <== whitelist this with GitHub\n\n03\n\nredirectURI\n\n:\n\n'https://your-app.com/your/oauth/callback'\n\n,\n\n// <== whitelist this with GitHub\n\n04\n\n}\n\n)\n\n;\n\n04\n\n}\n\n)\n\n;", "explanation": "The '#GitHub Setup (v2 extension)' section from the Magic Labs embedded wallet documentation is about configuring the Magic Lab v2 extension to handle GitHub social login authentication. Its main purpose is to set up the redirect URI that GitHub will use to return the user after authorization.\n\nTo break it down:\n\n1. **Disregard Magic's Redirect URI**: Instead of using Magic's default redirect URI, you should pass your own custom redirect URI in the `redirectURI` argument.\n\n2. **Pass the custom Redirect URI to loginWithRedirect method**: You should then paste this custom redirect URI into the `loginWithRedirect` method, which is used to initiate the login process.\n\nHere's what you should do:\n\n1. Set up a custom redirect URI (e.g., `https://your-app.com/your/oauth/callback`).\n2. In the `loginWithRedirect` method, pass this custom redirect URI as an argument.\n3. Whitelist this custom redirect URI with GitHub so that it can be used for authentication.\n\nBy following these steps, you can configure the Magic Lab v2 extension to handle GitHub social login authentication correctly and securely.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/login/social-logins/social-providers/github#chunk-4", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 GitHub Social Login Demo\n\nGitHub Social Login Demo", "explanation": "**Explanation of the '#Resources' Section:**\n\nThe '#Resources' section within the Magic Labs documentation website, located at https://magic.link/docs/authentication/login/social-logins/social-providers/github, provides additional resources and examples related to GitHub Social Login.\n\n**Main Purpose:**\n\nThe main purpose of this section is to offer supplementary materials and code examples to help developers better understand and integrate GitHub Social Login into their applications using the Magic Labs embedded wallet. This makes it easier to implement the login functionality in their projects.\n\n**In this case:**\n\nThe '#Resources' section specifically contains a link to the GitHub Social Login Demo, which is likely a working example or a sample application that demonstrates how to successfully implement GitHub Social Login using Magic Labs. This demo would serve as a visual guide or a starting point for developers to explore and learn from, helping them to achieve a smooth implementation of the social login functionality in their own projects.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/login/social-logins/social-providers/github#chunk-5", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nXDC Network is an open-source, decentralized blockchain platform based on the XDPoS consensus algorithm. It features high scalability, low transaction fees, and a two-second block time. Users can effortlessly create wallets and interact with XDC using the Magic SDK.\n\nXDC Network\n\nAs XDC Network is EVM compatible, you can follow the Ethereum documentation to send your first transaction and utilize all other features.\n\nEthereum", "explanation": "Here's a clear and concise explanation of the 'XDC Network - XDC Network - #Overview' documentation section:\n\n**XDC Network Overview**\n\nThe XDC Network is an open-source, decentralized blockchain platform built on the XDPoS (Delegated Proof of Stake) consensus algorithm. Its key features include:\n\n1. High scalability: designed to handle a large number of transactions efficiently.\n2. Low transaction fees: reducing the cost of interacting with the network.\n3. Quick block time: transactions are processed and confirmed within 2 seconds.\n\nThe Magic SDK enables users to easily create wallets and interact with the XDC Network. Due to its EVM (Ethereum Virtual Machine) compatibility, users can leverage the Ethereum documentation to send their first transaction, and utilize other features, making it a straightforward integration process.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/evm/xdc-network#chunk-1", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\nconst\n\nXdcNetworkOptions\n\n=\n\n{\n\n01\n\nconst\n\nXdcNetworkOptions\n\n=\n\n{\n\n02\n\nrpcUrl\n\n:\n\n'https://erpc.apothem.network'\n\n,\n\n// XDC Apothem testnet RPC URL\n\n02\n\nrpcUrl\n\n:\n\n'https://erpc.apothem.network'\n\n,\n\n// XDC Apothem testnet RPC URL\n\n03\n\nchainId\n\n:\n\n51\n\n,\n\n// XDC Apothem chain id\n\n03\n\nchainId\n\n:\n\n51\n\n,\n\n// XDC Apothem chain id\n\n04\n\n}\n\n;\n\n04\n\n}\n\n;\n\n05\n\n05\n\n06\n\n// Setting network to point to XDC\n\n06\n\n// Setting network to point to XDC\n\n07\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_PUBLISHABLE_API_KEY'\n\n,\n\n{\n\nnetwork\n\n:\n\nXdcNetworkOptions\n\n}\n\n)\n\n;\n\n07\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_PUBLISHABLE_API_KEY'\n\n,\n\n{\n\nnetwork\n\n:\n\nXdcNetworkOptions\n\n}\n\n)\n\n;", "explanation": "**#Configure XDC Network**\n\nThe \"#Configure XDC Network\" documentation section explains how to configure your Magic Labs embedded wallet to interact with the XDC (Nucleus Vision) network, a blockchain protocol. The main purpose of this section is to guide you through setting up the XDC network options, which are necessary to enable wallet functionality.\n\n**Key Points:**\n\n*   You'll need to define the `XdcNetworkOptions` object with two properties:\n    *   `rpcUrl`: The URL of the XDC Apothem RPC (Remote Procedure Call) endpoint, which is used to communicate with the XDC blockchain.\n    *   `chainId`: The ID of the XDC Apothem chain, which identifies the specific network.\n*   Set the `rpcUrl` to `https://erpc.apothem.network` (the XDC Apothem mainnet RPC URL) or `https://erpc.apothem.network` (the XDC Apothem testnet RPC URL, if you're testing).\n*   Set the `chainId` to `51`, which is the ID of the XDC Apothem chain.\n*   Once you've defined `XdcNetworkOptions`, you can create a new instance of the Magic wallet by passing your Publishable API key and the `network` property set to `XdcNetworkOptions`.\n\nBy following these steps, you'll be able to configure your Magic Labs embedded wallet to interact with the XDC network, enabling you to perform various wallet operations, such as sending and receiving XDC tokens.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/evm/xdc-network#chunk-2", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 All Auth, User and most Wallet module methods* for Dedicated Wallets\n\n\u2022 All EVM Provider functionality to respond to supported RPC methods\n\nAuth\n\nUser\n\nWallet\n\nDedicated Wallets\n\nRPC methods\n\n*Some features are not yet compatible such as NFT Viewer and Fiat On-ramps.\n\nNeed a feature or see a problem? File an issue on our github repo.\n\ngithub repo", "explanation": "**Understanding the #Compatibility Section:**\n\nThe #Compatibility section in the Magic Labs embedded wallet documentation outlines the current compatibility status of various Magic Labs modules and features with the Ethereum Virtual Machine (EVM) XDC Network.\n\n**Main Purpose:**\n\nThe purpose of this section is to provide clear information about which Magic Labs features are supported on the EVM XDC Network, allowing developers to understand what is working and what is not. This enables them to plan and develop their applications accordingly.\n\n**Key Points:**\n\n- Some features, such as Auth, User, Wallet, and Dedicated Wallets, are fully supported.\n- EVM Provider functionality is also supported for responding to RPC methods.\n- Certain features, like NFT Viewer and Fiat On-ramps, are not yet compatible.\n- Readers are encouraged to file issues on the Magic Labs GitHub repository for any newly discovered compatibility problems or feature requests.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/evm/xdc-network#chunk-3", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 Documentation: https://docs.xdc.community/\n\n\u2022 Block Explorers: https://apothem.xdcscan.io/ (testnet)https://xdcscan.io/ (mainnet)\n\n\u2022 Testnet Faucet: https://faucet.blocksscan.io/\n\nhttps://docs.xdc.community/\n\n\u2022 https://apothem.xdcscan.io/ (testnet)\n\n\u2022 https://xdcscan.io/ (mainnet)\n\nhttps://apothem.xdcscan.io/\n\nhttps://xdcscan.io/\n\nhttps://faucet.blocksscan.io/", "explanation": "The '#Resources & Tools' section from the Magic Labs embedded wallet documentation is a collection of useful resources and tools that provide support for working with the XDC Network on the EVM. The main purpose of this section is to provide easy access to essential resources for developers, testers, and users who are integrating XDC Network into their applications.\n\nHere's a breakdown of the resources included in this section:\n\n1. **Documentation**: A link to the official XDC Community documentation, which offers in-depth guides, tutorials, and reference materials for understanding the XDC Network.\n2. **Block Explorers**: Two block explorer links are provided:\n\t* Testnet block explorer: `https://apothem.xdcscan.io/`\n\t* Mainnet block explorer: `https://xdcscan.io/`\n\tThese block explorers allow users to view and interact with the blockchain data, such as transaction history, account balances, and smart contract info.\n3. **Testnet Faucet**: A link to the XDC Testnet Faucet at `https://faucet.blocksscan.io/`.\n\t* This faucet allows users to obtain free XDC test tokens for testing and development purposes on the testnet.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/evm/xdc-network#chunk-4", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nThis feature is currently in beta. Please reach out for early access.\n\nMagic offers Wallet Pregeneration, a feature that allows you to create non-custodial wallets programmatically without requiring end users to start or complete an authentication flow. After the wallet is generated, a user can claim their pregenerated wallet by authenticating through your application.\n\nNeither Magic nor the developer can access the wallet's private key; it can only be accessed by the end user after claiming the wallet.", "explanation": "Here's a clear and concise explanation of the 'Wallet Pregeneration (Beta)' feature:\n\n**What is it:** Wallet Pregeneration is a Magic Labs feature that enables the creation of non-custodial wallets programmatically, without requiring the user to go through an authentication flow.\n\n**Main Purpose:** The main purpose of Wallet Pregeneration is to allow users to claim a pre-generated wallet by authenticating through your application, while ensuring the user's private key remains secure and can only be accessed by the user themselves.\n\n**Key Benefits:**\n\n- Allows for seamless wallet creation without needing user authentication\n- Ensures user's private key remains secure and inaccessible to anyone else but the user\n- Enhances user experience by providing a smooth wallet creation process.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/wallets/features/wallet-pregen#chunk-1", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n#\n\nYou can make the API call below to pregenerate wallets.\n\n\u2022 POST Endpoint: https://api.magic.link/v1/api/wallet_pregen/create_wallets\n\nhttps://api.magic.link/v1/api/wallet_pregen/create_wallets\n\nRequest Headers\n\n\u2022 X-Magic-Secret-Key: The secret API key obtained from Magic Dashboard.\n\nMagic Dashboard\n\nRequest Body\n\n\u2022 identifiers: A list containing \"identifier_payload\" objects.\n\nidentifier_payload\n\n\u2022 identifier: A string representing the identifier (e.g., email address).\n\n\u2022 identifier_type: A string constant. For now, this should be set to \"email_address\".\n\nCopy\n\n01\n\ncurl --request POST \\\n\n01\n\ncurl --request POST \\\n\n02\n\n--url 'https://api.magic.link/v1/api/wallet_pregen/create_wallets' \\\n\n02\n\n--url 'https://api.magic.link/v1/api/wallet_pregen/create_wallets' \\\n\n03\n\n--header 'X-Magic-Secret-Key: <your_magic_secret_api_key>' \\\n\n03\n\n--header 'X-Magic-Secret-Key: <your_magic_secret_api_key>' \\\n\n04\n\n--header 'Content-Type: application/json' \\\n\n04\n\n--header 'Content-Type: application/json' \\\n\n05\n\n--data '{\n\n05\n\n--data '{\n\n06\n\n\"identifiers\": [\n\n06\n\n\"identifiers\": [\n\n07\n\n{\n\n07\n\n{\n\n08\n\n\u2060        \"identifier\": \"user1@example.com\",\n\n08\n\n\u2060 \"identifier\": \"user1@example.com\",\n\n09\n\n\"identifier_type\": \"email_address\"\n\n09\n\n\"identifier_type\": \"email_address\"\n\n10\n\n},\n\n10\n\n},\n\n11\n\n{\n\n11\n\n{\n\n12\n\n\u2060        \"identifier\": \"user2@example.com\",\n\n12\n\n\u2060 \"identifier\": \"user2@example.com\",\n\n13\n\n\"identifier_type\": \"email_address\"\n\n13\n\n\"identifier_type\": \"email_address\"\n\n14\n\n},\n\n14\n\n},\n\n15\n\n{\n\n15\n\n{\n\n16\n\n\u2060        \"identifier\": \"user3@example.com\",\n\n16\n\n\u2060 \"identifier\": \"user3@example.com\",\n\n17\n\n\"identifier_type\": \"email_address\"\n\n17\n\n\"identifier_type\": \"email_address\"\n\n18\n\n},\n\n18\n\n},\n\n19\n\n]\n\n19\n\n]\n\n20\n\n}'\n\n20\n\n}'\n\n21\n\n21\n\n22\n\n// Responds 200 OK with job_id\n\n22\n\n// Responds 200 OK with job_id\n\n23\n\n{\n\n23\n\n{\n\n24\n\n\"data\": {\n\n24\n\n\"data\": {\n\n25\n\n\"job_id\": \"a622f0e5-2766-4e5d-bdf5-8c523ccc03a4\"\n\n25\n\n\"job_id\": \"a622f0e5-2766-4e5d-bdf5-8c523ccc03a4\"\n\n26\n\n},\n\n26\n\n},\n\n27\n\n\"error_code\": \"\",\n\n27\n\n\"error_code\": \"\",\n\n28\n\n\"message\": \"\",\n\n28\n\n\"message\": \"\",\n\n29\n\n\"status\": \"ok\"\n\n29\n\n\"status\": \"ok\"\n\n30\n\n}\n\n30\n\n}", "explanation": "**Creating Wallets using the Magic Labs Embedded Wallet**\n\nThis documentation section explains how to pregenerate wallets using the Magic Labs embedded wallet API. The main purpose is to create wallets for users in bulk by making a single API call.\n\n**Key Components:**\n\n1. **API Endpoint**: The base URL for the API call is `https://api.magic.link/v1/api/wallet_pregen/create_wallets`.\n2. **Request Headers**: The API requires two headers:\n\t* `X-Magic-Secret-Key`: Your secret API key obtained from the Magic Dashboard.\n\t* `Content-Type`: Set to `application/json`.\n3. **Request Body**: The request body contains a list of `identifier_payload` objects, each with the following properties:\n\t* `identifier`: A string representing the user's identifier (e.g., email address).\n\t* `identifier_type`: A string constant set to `\"email_address\"`.\n4. **API Call**: Use a `POST` request with the specified headers and body to create wallets for the listed users.\n\n**Response:**\n\nThe API responds with a 200 OK status code and a job ID, which can be used to track the progress of the wallet creation process.\n\n**Example Use Case:**\n\nSuppose you want to create wallets for three users: `user1@example.com`, `user2@example.com`, and `user3@example.com`. You would make a single API call with the specified headers and body, which includes the list of `identifier_payload` objects for each user. The API would then create wallets for these users and respond with a job ID, allowing you to track the progress of the wallet creation process.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/wallets/features/wallet-pregen#chunk-2", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nYou can use this query to check which users have claimed their pregenerated wallet.\n\n\u2022 POST Endpoint: https://api.magic.link/v1/api/wallet_pregen/get_job_status\n\nhttps://api.magic.link/v1/api/wallet_pregen/get_job_status\n\nRequest Headers\n\n\u2022 X-Magic-Secret-Key: The secret API key obtained from Magic Dashboard.\n\nMagic Dashboard\n\nRequest Body\n\n\u2022 job_id: The returned UUID from create_wallets.\n\ncreate_wallets\n\nCopy\n\n01\n\ncurl --request POST \\\n\n01\n\ncurl --request POST \\\n\n02\n\n--url 'https://api.magic.link/v1/api/wallet_pregen/get_job_status' \\\n\n02\n\n--url 'https://api.magic.link/v1/api/wallet_pregen/get_job_status' \\\n\n03\n\n--header 'X-Magic-Secret-Key: <your_magic_secret_api_key>' \\\n\n03\n\n--header 'X-Magic-Secret-Key: <your_magic_secret_api_key>' \\\n\n04\n\n--header 'Content-Type: application/json' \\\n\n04\n\n--header 'Content-Type: application/json' \\\n\n05\n\n--data '{\n\n05\n\n--data '{\n\n06\n\n\"job_id\": \"91a5be54-61bf-4761-e89k-b7f35ace81d3\"\n\n06\n\n\"job_id\": \"91a5be54-61bf-4761-e89k-b7f35ace81d3\"\n\n07\n\n}'\n\n07\n\n}'\n\n08\n\n08\n\n09\n\n// Responds 200 OK with job status object\n\n09\n\n// Responds 200 OK with job status object\n\n10\n\n{\n\n10\n\n{\n\n11\n\n\"data\": {\n\n11\n\n\"data\": {\n\n12\n\n\"client_id\": \"A5cJpjmJk3eQq4PXC9uJuoWESlcD3_CIwZgvDVdY0wg=\",\n\n12\n\n\"client_id\": \"A5cJpjmJk3eQq4PXC9uJuoWESlcD3_CIwZgvDVdY0wg=\",\n\n13\n\n\"created_at\": 1716331284,\n\n13\n\n\"created_at\": 1716331284,\n\n14\n\n\"expires_at\": 1718923161,\n\n14\n\n\"expires_at\": 1718923161,\n\n15\n\n\"job_id\": \"91a5be54-61bf-4761-e89k-b7f35ace81d3\",\n\n15\n\n\"job_id\": \"91a5be54-61bf-4761-e89k-b7f35ace81d3\",\n\n16\n\n\"key_generation_stats\": {\n\n16\n\n\"key_generation_stats\": {\n\n17\n\n\"errors\": 0,\n\n17\n\n\"errors\": 0,\n\n18\n\n\"processed\": 1,\n\n18\n\n\"processed\": 1,\n\n19\n\n\"total\": 1\n\n19\n\n\"total\": 1\n\n20\n\n},\n\n20\n\n},\n\n21\n\n\"status\": \"SUCCESS\",\n\n21\n\n\"status\": \"SUCCESS\",\n\n22\n\n\"updated_at\": 1716331161\n\n22\n\n\"updated_at\": 1716331161\n\n23\n\n},\n\n23\n\n},\n\n24\n\n\"error_code\": \"\",\n\n24\n\n\"error_code\": \"\",\n\n25\n\n\"message\": \"\",\n\n25\n\n\"message\": \"\",\n\n26\n\n\"status\": \"ok\"\n\n26\n\n\"status\": \"ok\"\n\n27\n\n}\n\n27\n\n}", "explanation": "**Query Job Status**\n\n**Overview**\n\nThe `Query Job Status` feature is a Magic Labs embedded wallet API endpoint that allows you to check the status of pregenerated wallet jobs. You can use this query to determine which users have claimed their pregenerated wallets.\n\n**Main Purpose**\n\nThe main purpose of this feature is to provide a way to monitor and track the status of wallet job creation, enabling developers to:\n\n* Check if a user has claimed their pregenerated wallet\n* Receive updates on the progress and status of key generation\n* Identify any errors that may have occurred during the wallet creation process\n\n**Input Parameters**\n\nTo use the `Query Job Status` feature, you need to provide the following input parameter:\n\n* `job_id`: a unique UUID returned by the `create_wallets` API endpoint. This ID is used to identify the specific wallet job you want to query.\n\n**Example Use Case**\n\nTo query the job status, send a POST request to the `https://api.magic.link/v1/api/wallet_pregen/get_job_status` endpoint with the `job_id` in the request body, along with your Magic Secret API Key in the `X-Magic-Secret-Key` header. The API will respond with a job status object containing information about the wallet job, including its status, key generation statistics, and timestamp information.\n\n```bash\ncurl --request POST \\\n  https://api.magic.link/v1/api/wallet_pregen/get_job_status \\\n  --header 'X-Magic-Secret-Key: <your_magic_secret_api_key>' \\\n  --header 'Content-Type: application/json' \\\n  --data '{\n    \"job_id\": \"91a5be54-61bf-4761-e89k-b7f35ace81d3\"\n  }'\n```\n\nThe response will indicate the status of the wallet job, such as \"SUCCESS\" or any error that may have occurred.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/wallets/features/wallet-pregen#chunk-3", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nYou can use this query to check which identifier (e.g., email address) is tied to a pregenerated wallet public address.\n\n\u2022 POST Endpoint: https://api.magic.link/v1/api/wallet_pregen/get_identifiers\n\nhttps://api.magic.link/v1/api/wallet_pregen/get_identifiers\n\nRequest Headers\n\n\u2022 X-Magic-Secret-Key: The secret API key obtained from Magic Dashboard.\n\nMagic Dashboard\n\nRequest Body\n\n\u2022 job_id: The returned UUID from create_wallets.\n\n\u2022 claimed [optional]: JSON boolean, filters the result by claimed status.\n\n\u2022 limit [optional]: The maximum number of results to return.\n\ncreate_wallets\n\nCopy\n\n01\n\ncurl --request POST \\\n\n01\n\ncurl --request POST \\\n\n02\n\n--url 'https://api.magic.link/v1/api/wallet_pregen/get_identifiers' \\\n\n02\n\n--url 'https://api.magic.link/v1/api/wallet_pregen/get_identifiers' \\\n\n03\n\n--header 'X-Magic-Secret-Key: <your_magic_secret_api_key>' \\\n\n03\n\n--header 'X-Magic-Secret-Key: <your_magic_secret_api_key>' \\\n\n04\n\n--header 'Content-Type: application/json' \\\n\n04\n\n--header 'Content-Type: application/json' \\\n\n05\n\n--data '{\n\n05\n\n--data '{\n\n06\n\n\"job_id\": \"91a5be54-61bf-4761-e89k-b7f35ace81d3\",\n\n06\n\n\"job_id\": \"91a5be54-61bf-4761-e89k-b7f35ace81d3\",\n\n07\n\n\"claimed\": false, // optional\n\n07\n\n\"claimed\": false, // optional\n\n08\n\n\"limit\": 10 // optional\n\n08\n\n\"limit\": 10 // optional\n\n09\n\n}'\n\n09\n\n}'\n\n10\n\n10\n\n11\n\n// Responds 200 OK with identifiers information\n\n11\n\n// Responds 200 OK with identifiers information\n\n12\n\n{\n\n12\n\n{\n\n13\n\n\"data\": {\n\n13\n\n\"data\": {\n\n14\n\n\"identifiers\": [\n\n14\n\n\"identifiers\": [\n\n15\n\n{\n\n15\n\n{\n\n16\n\n\"claimed\": false,\n\n16\n\n\"claimed\": false,\n\n17\n\n\"expires_at\": 1718925889,\n\n17\n\n\"expires_at\": 1718925889,\n\n18\n\n\"identifier\": \"youremail@example.com\",\n\n18\n\n\"identifier\": \"youremail@example.com\",\n\n19\n\n\"identifier_type\": \"email_address\",\n\n19\n\n\"identifier_type\": \"email_address\",\n\n20\n\n\"job_id\": \"91a5be54-61bf-4761-e89k-b7f35ace81d3\",\n\n20\n\n\"job_id\": \"91a5be54-61bf-4761-e89k-b7f35ace81d3\",\n\n21\n\n\"public_address\": \"0xBAcFD5E443eFDFECb9850a9d8a23C33701E66742\",\n\n21\n\n\"public_address\": \"0xBAcFD5E443eFDFECb9850a9d8a23C33701E66742\",\n\n22\n\n\"status\": \"success\",\n\n22\n\n\"status\": \"success\",\n\n23\n\n\"status_detail\": \"Successfully generated wallet\"\n\n23\n\n\"status_detail\": \"Successfully generated wallet\"\n\n24\n\n}\n\n24\n\n}\n\n25\n\n],\n\n25\n\n],\n\n26\n\n},\n\n26\n\n},\n\n27\n\n\"error_code\": \"\",\n\n27\n\n\"error_code\": \"\",\n\n28\n\n\"message\": \"\",\n\n28\n\n\"message\": \"\",\n\n29\n\n\"status\": \"ok\"\n\n29\n\n\"status\": \"ok\"\n\n30\n\n}\n\n30\n\n}", "explanation": "**Query Wallet Identifiers: Explained**\n\nThe `#Query Wallet Identifiers - Input Parameters` section is a part of the Magic Labs embedded wallet documentation. This feature allows you to retrieve the identifiers (e.g., email addresses) associated with a pregenerated wallet public address.\n\n**Main Purpose:**\n\nThe primary purpose of this query is to fetch the identifiers tied to a pregenerated wallet public address. This is particularly useful when you need to manage or verify the email addresses or other identifiers linked to a specific wallet.\n\n**Key Parameters:**\n\n1. **`job_id`**: This parameter is used to identify the pregenerated wallet for which you want to retrieve identifiers. You can obtain the UUID (job_id) from the `create_wallets` endpoint.\n2. **`claimed` [optional]**: This parameter filters the result by claiming status. Set it to `true` to retrieve claimed identifiers or `false` to get unclaimed identifiers.\n3. **`limit` [optional]**: This parameter sets the maximum number of results to return.\n\n**Example Usage:**\n\nYou can use this endpoint by sending a `POST` request to `https://api.magic.link/v1/api/wallet_pregen/get_identifiers` with the required headers and a JSON body containing the parameters.\n\n**Sample Request:**\n\n```bash\ncurl --request POST \\\n  https://api.magic.link/v1/api/wallet_pregen/get_identifiers \\\n  --header 'X-Magic-Secret-Key: <your_magic_secret_api_key>' \\\n  --header 'Content-Type: application/json' \\\n  --data '{\n    \"job_id\": \"91a5be54-61bf-4761-e89k-b7f35ace81d3\",\n    \"claimed\": false,\n    \"limit\": 10\n  }'\n```\n\n**Response:**\n\nThe endpoint responds with a JSON object containing the identifiers information, including the claimed status, expiration time, identifier type, job ID, public address, and status.\n\n```json\n{\n  \"data\": {\n    \"identifiers\": [\n      {\n        \"claimed\": false,\n        \"expires_at\": 1718925889,\n        \"identifier\": \"youremail@example.com\",\n        \"identifier_type\": \"email_address\",\n        \"job_id\": \"91a5be54-61bf-4761-e89k-b7f35ace81d3\",\n        \"public_address\": \"0xBAcFD5E443eFDFECb9850a9d8a23C33701E66742\",\n        \"status\": \"success\",\n        \"status_detail\": \"Successfully generated wallet\"\n      }\n    ]\n  },\n  \"error_code\": \"\",\n  \"message\": \"\",\n  \"status\": \"ok\"\n}\n```", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/wallets/features/wallet-pregen#chunk-4", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nMagic interacts with the Near blockchain via Magic's extension NPM package @magic-ext/near. The Near extension also lets you interact with the blockchain using methods from near-api-js.\n\n@magic-ext/near\n\n@magic-ext/near\n\nnear-api-js\n\nYou can skip straight to our Near Guide directly:\n\n\ud83d\udc49 Near Guide\n\nNear Guide\n\nCopy\n\n01\n\nnpm\n\ninstall\n\n--save @magic-ext/near\n\n01\n\nnpm\n\ninstall\n\n--save @magic-ext/near\n\n#\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n\"magic-sdk\"\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n\"magic-sdk\"\n\n;\n\n02\n\nimport\n\n{\n\nNearExtension\n\n}\n\nfrom\n\n\"@magic-ext/near\"\n\n;\n\n02\n\nimport\n\n{\n\nNearExtension\n\n}\n\nfrom\n\n\"@magic-ext/near\"\n\n;\n\n03\n\n03\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_API_KEY'\n\n,\n\n{\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_API_KEY'\n\n,\n\n{\n\n05\n\nextensions\n\n:\n\n[\n\n05\n\nextensions\n\n:\n\n[\n\n06\n\nnew\n\nNearExtension\n\n(\n\n{\n\n06\n\nnew\n\nNearExtension\n\n(\n\n{\n\n07\n\nrpcUrl\n\n:\n\n''\n\n,\n\n07\n\nrpcUrl\n\n:\n\n''\n\n,\n\n08\n\n}\n\n)\n\n,\n\n08\n\n}\n\n)\n\n,\n\n09\n\n]\n\n}\n\n)\n\n;\n\n09\n\n]\n\n}\n\n)\n\n;", "explanation": "**Near Near # Installation - # Initialization**\n\nThis documentation section outlines the steps to enable interaction with the Near blockchain using Magic's SDK extension.\n\n**Main Purpose:**\n\nThe main purpose of this section is to guide developers on how to install the Magic extension for Near, initialize the Magic SDK, and configure it to interact with the Near blockchain.\n\n**Key Takeaways:**\n\n1. **Installation:** The section explains how to install the `@magic-ext/near` NPM package, which is the Magic extension for Near.\n2. **Initialization:** It provides an example of how to initialize the Magic SDK with your API key and add the Near extension to enable blockchain interactions.\n3. **Configuration:** The section shows how to configure the Near extension by setting the rpcUrl property, which points to the Near blockchain's RPC endpoint.\n\n**Developer Steps:**\n\nTo follow this section, developers need to:\n\n1. Install the `@magic-ext/near` package using npm.\n2. Import the Magic SDK and Near extension.\n3. Initialize the Magic SDK with your API key and add the Near extension.\n4. Configure the Near extension by setting the rpcUrl property.\n\nBy following these steps, developers can integrate the Magic extension for Near into their application and enable interactions with the Near blockchain.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/other/near#chunk-1", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n#\n\nTo sign a standard Near blockchain transaction, you can call the magic.near.signTransaction method to get the signature and raw transaction then send to blockchain by yourself.\n\nmagic.near.signTransaction\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n\"magic-sdk\"\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n\"magic-sdk\"\n\n;\n\n02\n\nimport\n\n{\n\nNearExtension\n\n}\n\nfrom\n\n\"@magic-ext/near\"\n\n;\n\n02\n\nimport\n\n{\n\nNearExtension\n\n}\n\nfrom\n\n\"@magic-ext/near\"\n\n;\n\n03\n\nimport\n\n{\n\ntransactions\n\n,\n\nutils\n\n}\n\nfrom\n\n'near-api-js'\n\n03\n\nimport\n\n{\n\ntransactions\n\n,\n\nutils\n\n}\n\nfrom\n\n'near-api-js'\n\n04\n\n04\n\n05\n\n05\n\n06\n\nconst\n\npublicKeyString\n\n=\n\nawait\n\nmagic\n\n.\n\nnear\n\n.\n\ngetPublicKey\n\n(\n\n)\n\n;\n\n06\n\nconst\n\npublicKeyString\n\n=\n\nawait\n\nmagic\n\n.\n\nnear\n\n.\n\ngetPublicKey\n\n(\n\n)\n\n;\n\n07\n\n07\n\n08\n\nconst\n\npublicKey\n\n=\n\nutils\n\n.\n\nPublicKey\n\n.\n\nfromString\n\n(\n\npublicKeyString\n\n)\n\n;\n\n08\n\nconst\n\npublicKey\n\n=\n\nutils\n\n.\n\nPublicKey\n\n.\n\nfromString\n\n(\n\npublicKeyString\n\n)\n\n;\n\n09\n\n09\n\n10\n\nconst\n\nactions\n\n=\n\n[\n\n10\n\nconst\n\nactions\n\n=\n\n[\n\n11\n\ntransactions\n\n.\n\ntransfer\n\n(\n\nsendAmount\n\n)\n\n11\n\ntransactions\n\n.\n\ntransfer\n\n(\n\nsendAmount\n\n)\n\n12\n\n]\n\n;\n\n12\n\n]\n\n;\n\n13\n\nconst\n\ntransaction\n\n=\n\ntransactions\n\n.\n\ncreateTransaction\n\n(\n\npublicAddress\n\n,\n\npublicKey\n\n,\n\ndestinationAddress\n\n,\n\n0\n\n,\n\nactions\n\n,\n\n'9av2U6cova7LZPA9NPij6CTUrpBbgPG6'\n\n)\n\n;\n\n13\n\nconst\n\ntransaction\n\n=\n\ntransactions\n\n.\n\ncreateTransaction\n\n(\n\npublicAddress\n\n,\n\npublicKey\n\n,\n\ndestinationAddress\n\n,\n\n0\n\n,\n\nactions\n\n,\n\n'9av2U6cova7LZPA9NPij6CTUrpBbgPG6'\n\n)\n\n;\n\n14\n\n14\n\n15\n\nconst\n\nrawTransaction\n\n=\n\ntransaction\n\n.\n\nencode\n\n(\n\n)\n\n;\n\n15\n\nconst\n\nrawTransaction\n\n=\n\ntransaction\n\n.\n\nencode\n\n(\n\n)\n\n;\n\n16\n\n16\n\n17\n\nconst\n\nresult\n\n=\n\nawait\n\nmagic\n\n.\n\nnear\n\n.\n\nsignTransaction\n\n(\n\n{\n\nrawTransaction\n\n,\n\nnetworkID\n\n:\n\n'testnet'\n\n}\n\n)\n\n;\n\n17\n\nconst\n\nresult\n\n=\n\nawait\n\nmagic\n\n.\n\nnear\n\n.\n\nsignTransaction\n\n(\n\n{\n\nrawTransaction\n\n,\n\nnetworkID\n\n:\n\n'testnet'\n\n}\n\n)\n\n;\n\n18\n\n18\n\n19\n\nconst\n\nsignedTransaction\n\n=\n\ntransactions\n\n.\n\nSignedTransaction\n\n.\n\ndecode\n\n(\n\nBuffer\n\n.\n\nfrom\n\n(\n\nresult\n\n.\n\nencodedSignedTransaction\n\n)\n\n)\n\n;\n\n19\n\nconst\n\nsignedTransaction\n\n=\n\ntransactions\n\n.\n\nSignedTransaction\n\n.\n\ndecode\n\n(\n\nBuffer\n\n.\n\nfrom\n\n(\n\nresult\n\n.\n\nencodedSignedTransaction\n\n)\n\n)\n\n;\n\n20\n\n20\n\n21\n\nconsole\n\n.\n\nlog\n\n(\n\n'signedTransaction'\n\n,\n\nsignedTransaction\n\n)\n\n21\n\nconsole\n\n.\n\nlog\n\n(\n\n'signedTransaction'\n\n,\n\nsignedTransaction\n\n)", "explanation": "**Signing a Near Blockchain Transaction using Magic Labs Embedded Wallet**\n\nThe `magic.near.signTransaction` method is a crucial component of the Magic Labs Embedded Wallet documentation, allowing developers to sign standard Near blockchain transactions securely.\n\n**Main Purpose:**\n\nThe primary purpose of this method is to get the signature and raw transaction, which can then be sent to the blockchain for processing. This process involves:\n\n1. Generating a public key using the `magic.near.getPublicKey` method.\n2. Creating a transaction using the `transactions.createTransaction` method from the `near-api-js` library.\n3. Encoding the transaction using the `encode` method.\n4. Calling the `magic.near.signTransaction` method to sign the transaction.\n5. Decoding the signed transaction using the `SignedTransaction.decode` method.\n\n**Key Components:**\n\n* `getPublicKey`: Retrieves the public key from the Magic Labs Embedded Wallet.\n* `createTransaction`: Creates a standard Near blockchain transaction using the `near-api-js` library.\n* `signTransaction`: Signs the transaction using the Magic Labs Embedded Wallet.\n* `encode` and `decode`: Encode and decode the transaction and signed transaction respectively.\n\n**Usage:**\n\nTo use this method, you need to:\n\n1. Import the necessary libraries: `Magic`, `NearExtension`, and `near-api-js`.\n2. Import the `signTransaction` method from the Magic Labs Embedded Wallet.\n3. Retrieve the public key using `getPublicKey`.\n4. Create a transaction using `createTransaction`.\n5. Encode the transaction using `encode`.\n6. Call the `signTransaction` method to sign the transaction.\n7. Decode the signed transaction using `decode`.\n\n**Example:**\n\nThe provided code snippet demonstrates the usage of the `signTransaction` method, including:\n\n* Importing the necessary libraries.\n* Retrieving the public key.\n* Creating a transaction.\n* Encoding the transaction.\n* Signing the transaction.\n* Decoding the signed transaction.\n\n**Note:**\n\nThe code snippet shows an example of signing a Near blockchain transaction using the Magic Labs Embedded Wallet on the testnet. You should replace the testnet ID with your desired network ID.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/other/near#chunk-2", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 Near Developer Guide\n\nNear Developer Guide", "explanation": "The '#Resources' section is a reference section within the Magic Labs embedded wallet documentation for the Near blockchain.\n\nThis section serves as a collection of external resources that users or developers may find useful when working with the Near blockchain through the Magic Labs embedded wallet. \n\nIts main purpose is to provide a convenient and centralized location for easy access to relevant documentation, guides, and information from official sources such as the Near Developer Guide, making it easier for users to integrate and interact with the Near blockchain using the Magic Labs embedded wallet.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/other/near#chunk-3", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nZetaChain is a blockchain network based on the Cosmos SDK and compatible with the Ethereum Virtual Machine (EVM). Users can effortlessly create wallets and interact with ZetaChain using the Magic SDK.\n\nZetaChain\n\nAs Zetachain is EVM compatible, you can follow the Ethereum documentation to send your first transaction and utilize all other features.\n\nEthereum", "explanation": "Here's a clear and concise explanation of the ZetaChain documentation section:\n\n**What is ZetaChain?**\nZetaChain is a blockchain network that is built on the Cosmos SDK and is compatible with the Ethereum Virtual Machine (EVM). This means it can interact seamlessly with Ethereum-based applications and wallets.\n\n**Main Purpose**\nThe main purpose of ZetaChain is to provide a blockchain network that supports the Ethereum ecosystem, allowing users to create wallets and interact with it using the Magic SDK. This makes it easy for developers to integrate ZetaChain into their applications and utilize its features, just like with Ethereum.\n\n**Key Advantage**\nThe EVM compatibility of ZetaChain means that developers can follow the same guidelines and documentation as for Ethereum to send transactions and utilize its features, making it easier to onboard and interact with the network.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/evm/zetachain#chunk-1", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\nconst\n\nZetaChainOptions\n\n=\n\n{\n\n01\n\nconst\n\nZetaChainOptions\n\n=\n\n{\n\n02\n\nrpcUrl\n\n:\n\n'https://rpc.ankr.com/zetachain_evm_athens_testnet'\n\n,\n\n// Zetachain testnet RPC URL\n\n02\n\nrpcUrl\n\n:\n\n'https://rpc.ankr.com/zetachain_evm_athens_testnet'\n\n,\n\n// Zetachain testnet RPC URL\n\n03\n\nchainId\n\n:\n\n7001\n\n,\n\n// ZetaChain chain id\n\n03\n\nchainId\n\n:\n\n7001\n\n,\n\n// ZetaChain chain id\n\n04\n\n}\n\n;\n\n04\n\n}\n\n;\n\n05\n\n05\n\n06\n\n// Setting network to point to ZetaChain\n\n06\n\n// Setting network to point to ZetaChain\n\n07\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_PUBLISHABLE_API_KEY'\n\n,\n\n{\n\nnetwork\n\n:\n\nZetaChainOptions\n\n}\n\n)\n\n;\n\n07\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_PUBLISHABLE_API_KEY'\n\n,\n\n{\n\nnetwork\n\n:\n\nZetaChainOptions\n\n}\n\n)\n\n;", "explanation": "**#Configure Zetachain**\n\nThis documentation section provides an example of how to configure the Magic Labs embedded wallet to interact with the Zetachain blockchain. \n\nIn simple terms, Zetachain is an Ethereum Virtual Machine (EVM) compatible blockchain that allows for the creation and deployment of smart contracts. The main purpose of this configuration is to set up the Magic wallet to connect to the Zetachain network.\n\nHere are the key points of this configuration:\n\n1. **Zetachain Options**: This is an object that contains the necessary settings to connect to the Zetachain network.\n2. **rpcUrl**: This is the URL of the Zetachain testnet RPC (Remote Procedure Call) endpoint, used to communicate with the blockchain.\n3. **chainId**: This is the unique identifier of the Zetachain chain.\n\n**The Main Purpose:**\nThe purpose of this configuration is to enable the Magic wallet to interact with the Zetachain network, allowing users to perform various blockchain operations such as deploying smart contracts, sending transactions, and retrieving data from the blockchain.\n\n**Example Code:**\n```javascript\nconst ZetaChainOptions = {\n  rpcUrl: 'https://rpc.ankr.com/zetachain_evm_athens_testnet',\n  chainId: 7001\n};\n\nconst magic = new Magic('YOUR_PUBLISHABLE_API_KEY', { network: ZetaChainOptions });\n```\nIn this example, we create a new instance of the Magic wallet, passing in the publisher API key and the Zetachain options object. The `network` property is set to `ZetaChainOptions`, which configures the wallet to connect to the Zetachain network.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/evm/zetachain#chunk-2", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 All Auth, User and most Wallet module methods* for Dedicated Wallets\n\n\u2022 All EVM Provider functionality to respond to supported RPC methods\n\nAuth\n\nUser\n\nWallet\n\nDedicated Wallets\n\nRPC methods\n\n*Some features are not yet compatible such as NFT Viewer and Fiat On-ramps.\n\nNeed a feature or see a problem? File an issue on our github repo.\n\ngithub repo", "explanation": "**Compatibility Section Explanation**\n\nThe '#Compatibility' section in the Magic Labs EVM on Zetachain documentation explains the current compatibility status of the Magic Labs embedded wallet functionality with various features and methods.\n\n**Main Purpose:**\n\nThe primary purpose of this section is to inform users about which features and methods are currently supported (compatible) and which are not (incompatible) with the Magic Labs embedded wallet on the Zetachain EVM (Ethereum Virtual Machine) blockchain.\n\n**Key Points:**\n\n* The section mentions that all Auth, User, and most Wallet module methods are compatible with Dedicated Wallets.\n* It also indicates that the EVM Provider functionality is compatible with supported RPC (Remote Procedure Call) methods.\n* Some features, like NFT Viewer and Fiat On-ramps, are not yet compatible.\n* Users can file issues on the Magic Labs GitHub repository if they need a feature or encounter a problem.\n\n**Takeaway:**\n\nThis section helps users understand what functionality is currently supported and what is not, allowing them to plan and develop their applications accordingly.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/evm/zetachain#chunk-3", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 Documentation: https://www.zetachain.com/docs/\n\n\u2022 Block Explorer: https://explorer.zetachain.com/\n\n\u2022 Testnet Faucet: https://www.zetachain.com/docs/reference/get-testnet-zeta/\n\nhttps://www.zetachain.com/docs/\n\nhttps://explorer.zetachain.com/\n\nhttps://www.zetachain.com/docs/reference/get-testnet-zeta/", "explanation": "**Resources & Tools Overview**\n\nThe \"#Resources & Tools\" section is a collection of valuable resources provided by Magic Labs to help users understand and interact with the ZetaChain blockchain.\n\n**Main Purpose**\n\nThe primary purpose of this section is to offer a convenient, one-stop location for users to access essential tools and documentation related to ZetaChain. This facilitates easier exploration, testing, and development on the ZetaChain network.\n\n**Resources Included**\n\n1. **Documentation**: A link to the official ZetaChain documentation, which provides in-depth information about the blockchain, its features, and usage guidelines.\n2. **Block Explorer**: A block explorer tool, which allows users to visualize and explore the blockchain transactions, blocks, and network activity on ZetaChain.\n3. **Testnet Faucet**: A testnet faucet, which distributes free testnets or test ZetaChain tokens to users for testing and development purposes on the ZetaChain testnet.\n\nBy providing these resources and tools, Magic Labs aims to reduce the barrier to entry for users, making it easier for them to learn, develop, and deploy applications on the ZetaChain platform.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/evm/zetachain#chunk-4", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nWebAuthn allows your users to sign up and log in to your web app with a FIDO2 device (YubiKey) or with biometrics (Touch ID). This API enables strong authentication with public key cryptography, enabling passwordless authentication and secure multi-factor authentication. For example, Passkeys utilize WebAuthn to enable passwordless authentication using device biometrics.\n\nUse a YubiKey or your finger to log in\n\n#\n\nWebAuthn is currently only supported on desktop, and will be supported on mobile devices soon.\n\nWebAuthn SDK methods are available via the WebAuthn module of the Web client-side SDK.\n\nWebAuthn\n\nWeb client-side SDK", "explanation": "**Overview of WebAuthn**\n\nWebAuthn is an API that enables passwordless and secure multi-factor authentication for web applications. It allows users to log in using FIDO2 devices such as YubiKey or biometric features like Touch ID, relying on public key cryptography for strong authentication.\n\n**Key Features and Purpose**\n\nThe main purpose of WebAuthn is to provide a secure and user-friendly authentication method that:\n\n1. Enables passwordless authentication using FIDO2 devices or biometric features.\n2. Provides strong authentication with public key cryptography.\n3. Supports secure multi-factor authentication.\n\n**Compatibility**\n\nWebAuthn is currently only supported on desktop platforms, with mobile support expected to be added in the future. The WebAuthn API is available through the WebAuthn module of the Magic Labs Web client-side SDK.\n\n**Example Use Cases**\n\nOne common use case for WebAuthn is the implementation of Passkeys, which utilize WebAuthn to enable passwordless authentication using device biometrics. This provides a seamless and secure user experience for web application users.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/login/webauthn#chunk-1", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 Passwordless, biometric authentication using public key cryptography", "explanation": "In the \"#Use Cases\" documentation section from the provided link, one of the mentioned use cases is about \"Passwordless, biometric authentication using public key cryptography.\"\n\n**What is it about?**\n\nThis use case is about implementing passwordless authentication using a user's biometric data (e.g., fingerprint, face recognition) to secure their account. The authentication process relies on public key cryptography, a secure method of encrypting and decrypting data.\n\n**Main purpose**\n\nThe main purpose of this use case is to provide a secure, user-friendly authentication experience without relying on passwords. Public key cryptography ensures that even if a user's biometric data is compromised, their account remains secure, as the attacker wouldn't be able to use the data to access the account.\n\nBy using biometric authentication with public key cryptography, users can securely log in to their account without having to remember a password, providing a seamless user experience.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/login/webauthn#chunk-2", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n#\n\nWebAuthn works as an extension to Magic SDK. To add WebAuthn to your Magic integration, follow these steps to install the WebAuthn Extension.\n\nInstall the Magic WebAuthn extension:\n\nCopy\n\n01\n\nnpm\n\ninstall\n\nmagic-sdk @magic-ext/webauthn\n\n01\n\nnpm\n\ninstall\n\nmagic-sdk @magic-ext/webauthn", "explanation": "This documentation section is about installing the Magic WebAuthn extension, which is used to add WebAuthn support to the Magic SDK.\n\n**Main Purpose:** \nThe main purpose of this section is to provide step-by-step instructions on how to install the Magic WebAuthn extension using npm (Node Package Manager).\n\n**Key Points:**\n\n- WebAuthn is an extension to the Magic SDK.\n- To add WebAuthn to your Magic integration, you need to install the WebAuthn extension.\n- You can install the extension using the npm command: `npm install magic-sdk @magic-ext/webauthn`.\n\nBy following these steps, developers can integrate WebAuthn support into their Magic SDK applications, enabling them to take advantage of WebAuthn's strong authentication capabilities.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/login/webauthn#chunk-3", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCreate your Magic SDK instance with the WebAuthn extension:\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\nimport\n\n{\n\nWebAuthnExtension\n\n}\n\nfrom\n\n'@magic-ext/webauthn'\n\n;\n\n02\n\nimport\n\n{\n\nWebAuthnExtension\n\n}\n\nfrom\n\n'@magic-ext/webauthn'\n\n;\n\n03\n\n03\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_API_KEY'\n\n,\n\n{\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_API_KEY'\n\n,\n\n{\n\n05\n\nextensions\n\n:\n\n[\n\nnew\n\nWebAuthnExtension\n\n(\n\n)\n\n]\n\n,\n\n05\n\nextensions\n\n:\n\n[\n\nnew\n\nWebAuthnExtension\n\n(\n\n)\n\n]\n\n,\n\n06\n\n}\n\n)\n\n;\n\n06\n\n}\n\n)\n\n;", "explanation": "**Initialization of Magic SDK with WebAuthn Extension:**\n\nThe provided documentation section is about creating an instance of the Magic SDK with the WebAuthn extension. This is the initial step required to use the Magic Labs embedded wallet, which provides a secure authentication experience.\n\n**Main Purpose:**\n\nThe main purpose of this initialization is to set up the Magic SDK instance with the WebAuthn extension, enabling developers to utilize the wallet for WebAuthn-based authentication. The WebAuthn extension is essential for implementing public key-based authentication, such as passwordless login, biometric authentication, and more.\n\n**Key Functions:**\n\n* Importing the necessary libraries (`magic-sdk` and `@magic-ext/webauthn`)\n* Creating a new instance of the Magic SDK\n* Initializing the WebAuthn extension by creating a new instance of `WebAuthnExtension`\n* Passing the `YOUR_API_KEY` and `WebAuthnExtension` instance to the Magic SDK\n\n**Code Breakdown:**\n\nThe code snippet provides a clear example of how to initialize the Magic SDK with the WebAuthn extension:\n\n1. Import the required libraries (`magic-sdk` and `@magic-ext/webauthn`)\n2. Create a new instance of the Magic SDK using the `YOUR_API_KEY`\n3. Initialize the WebAuthn extension by creating a new instance of `WebAuthnExtension`\n4. Pass the `WebAuthnExtension` instance to the Magic SDK using the `extensions` property.\n\nBy following this initialization process, developers can successfully integrate the Magic Labs embedded wallet into their application, enabling secure WebAuthn-based authentication experiences for their users.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/login/webauthn#chunk-4", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nRegister new users with the registerNewUser function in the webauthn module. You must provide the user's selected username and can optionally provide a nickname for the device.\n\nregisterNewUser\n\nwebauthn\n\nCopy\n\n01\n\n// register a user by their username\n\n01\n\n// register a user by their username\n\n02\n\ntry\n\n{\n\n02\n\ntry\n\n{\n\n03\n\nconst\n\ntoken\n\n=\n\nawait\n\nmagic\n\n.\n\nwebauthn\n\n.\n\nregisterNewUser\n\n(\n\n{\n\nusername\n\n:\n\n'username'\n\n}\n\n)\n\n;\n\n03\n\nconst\n\ntoken\n\n=\n\nawait\n\nmagic\n\n.\n\nwebauthn\n\n.\n\nregisterNewUser\n\n(\n\n{\n\nusername\n\n:\n\n'username'\n\n}\n\n)\n\n;\n\n04\n\n}\n\ncatch\n\n(\n\ne\n\n)\n\n{\n\n04\n\n}\n\ncatch\n\n(\n\ne\n\n)\n\n{\n\n05\n\n// Handle errors if required!\n\n05\n\n// Handle errors if required!\n\n06\n\n}\n\n06\n\n}", "explanation": "**Register New Users**\n\nThe \"#Register new users\" section in the Magic Labs embedded wallet documentation explains how to create a new user account using the `registerNewUser` function in the `webauthn` module.\n\n**Main Purpose:**\n\nThe main purpose of this function is to register a new user with a specified username, and optionally a nickname for the device, in order to enable authentication and secure interactions with the Magic Labs system.\n\n**Key Points:**\n\n1. The function takes an object with a `username` property as an argument.\n2. The function returns a `token` that represents the newly registered user.\n3. The function can throw errors, which need to be caught and handled.\n4. This function is used to create a new user account, allowing for subsequent secure interactions with the Magic Labs system.\n\n**Example Usage:**\n\n```javascript\ntry {\n  const token = await magic.webauthn.registerNewUser({ username: 'username' });\n  // Handle the token (e.g., store it securely for later use)\n} catch (e) {\n  // Handle errors if required!\n}\n```\n\nNote: The example code provided in the documentation seems to be identical in the 01 and 02 code blocks; I assume this is a copy-paste error.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/login/webauthn#chunk-5", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nAuthenticate users with the login method in the webauthn module. You must provide the user's username.\n\nlogin\n\nwebauthn\n\nCopy\n\n01\n\n// login a user by their username\n\n01\n\n// login a user by their username\n\n02\n\ntry\n\n{\n\n02\n\ntry\n\n{\n\n03\n\nconst\n\ntoken\n\n=\n\nawait\n\nmagic\n\n.\n\nwebauthn\n\n.\n\nlogin\n\n(\n\n{\n\nusername\n\n:\n\n'username'\n\n}\n\n)\n\n;\n\n03\n\nconst\n\ntoken\n\n=\n\nawait\n\nmagic\n\n.\n\nwebauthn\n\n.\n\nlogin\n\n(\n\n{\n\nusername\n\n:\n\n'username'\n\n}\n\n)\n\n;\n\n04\n\n}\n\ncatch\n\n(\n\ne\n\n)\n\n{\n\n04\n\n}\n\ncatch\n\n(\n\ne\n\n)\n\n{\n\n05\n\n// Handle errors if required!\n\n05\n\n// Handle errors if required!\n\n06\n\n}\n\n06\n\n}", "explanation": "**Authenticate Users with WebAuthN Login**\n\nThe `#Authenticate users` section of the Magic Lab's embedded wallet documentation focuses on authenticating users through the `login` method in the `webauthn` module. The main purpose is to log in a user using their username, providing a secure authentication process.\n\n**Key Points:**\n\n1. **Username requirement**: You must provide the user's username when calling the `login` method.\n2. **Async login process**: The `login` method is asynchronous, and using `async/await` is recommended to handle the response.\n3. **Error handling**: The code example includes basic error handling using a `try`-`catch` block. It is essential to handle potential errors and exceptions in a production environment.\n4. **Token generation**: Upon successful login, the `login` method returns a token, which can be used for further authentication and authorization.\n\n**Code Breakdown:**\n\n* The `login` method is called with the `username` as an argument.\n* The method returns a `token` object, which is assigned to the `token` variable using `await`.\n* If an error occurs, the code catches the exception using a `try`-`catch` block and handles it accordingly.\n* The example includes a hint to handle errors properly in a production environment.\n\nIn summary, this documentation section provides a basic example of authenticating users using the Magic Lab's webAuthN login method with their username. It is essential to adapt this code to your specific use case and handle errors and exceptions effectively.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/login/webauthn#chunk-6", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nGet WebAuthn-specific metadata with the getMetadata method in the webauthn module. The response includes the user's username as well as device info like the device ID, device nickname, etc.\n\ngetMetadata\n\nwebauthn\n\nCopy\n\n01\n\n// Initiates the flow to get webauthn metadata for current account.\n\n01\n\n// Initiates the flow to get webauthn metadata for current account.\n\n02\n\ntry\n\n{\n\n02\n\ntry\n\n{\n\n03\n\nconst\n\nmetadata\n\n=\n\nawait\n\nmagic\n\n.\n\nwebauthn\n\n.\n\ngetMetadata\n\n(\n\n)\n\n;\n\n03\n\nconst\n\nmetadata\n\n=\n\nawait\n\nmagic\n\n.\n\nwebauthn\n\n.\n\ngetMetadata\n\n(\n\n)\n\n;\n\n04\n\n04\n\n05\n\n/* webauthn metadata shape\n\n05\n\n/* webauthn metadata shape\n\n06\n\n{\n\n06\n\n{\n\n07\n\n\"devicesInfo\": [\n\n07\n\n\"devicesInfo\": [\n\n08\n\n{\n\n08\n\n{\n\n09\n\n\"id\": \"EjI_EFJhB6cdCj6rHPRHUcFCn6NnywALuWjQyPe0_dI=\",\n\n09\n\n\"id\": \"EjI_EFJhB6cdCj6rHPRHUcFCn6NnywALuWjQyPe0_dI=\",\n\n10\n\n\"nickname\": \"\",\n\n10\n\n\"nickname\": \"\",\n\n11\n\n\"transport\": \"internal\",\n\n11\n\n\"transport\": \"internal\",\n\n12\n\n\"user_agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/85.0.4183.102 Safari/537.36\"\n\n12\n\n\"user_agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/85.0.4183.102 Safari/537.36\"\n\n13\n\n}\n\n13\n\n}\n\n14\n\n],\n\n14\n\n],\n\n15\n\n\"username\": \"username\"\n\n15\n\n\"username\": \"username\"\n\n16\n\n}\n\n16\n\n}\n\n17\n\n*/\n\n17\n\n*/\n\n18\n\n}\n\ncatch\n\n(\n\ne\n\n)\n\n{\n\n18\n\n}\n\ncatch\n\n(\n\ne\n\n)\n\n{\n\n19\n\n// Handle errors if required!\n\n19\n\n// Handle errors if required!\n\n20\n\n}\n\n20\n\n}", "explanation": "**Get User Metadata**\n\nThis documentation section is about retrieving user metadata using the `getMetadata` method in the `webauthn` module. The main purpose is to return user-specific information, such as username and device-related details.\n\n**Key components:**\n\n1. **webauthn module**: This module is used to implement WebAuthn (Web Authentication) protocol for secure authentication.\n2. **getMetadata method**: This method initiates a flow to retrieve WebAuthn metadata for the current account.\n3. **Returned metadata**: The response includes:\n\t* **Devices info**: An array of objects containing device ID, nickname, transport (e.g., internal), and user agent details.\n\t* **Username**: The username associated with the account.\n\n**Example usage:**\n```javascript\ntry {\n  const metadata = await magic.webauthn.getMetadata();\n  console.log(metadata);\n} catch (e) {\n  // Handle errors if required!\n}\n```\nThis code attempts to retrieve the user's metadata using the `getMetadata` method. If successful, it logs the metadata object to the console. If an error occurs, it handles the error accordingly.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/login/webauthn#chunk-7", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 Demo\n\n\u2022 Demo code\n\nDemo\n\nDemo code", "explanation": "**#Resources Section Analysis**\n\nThe `#Resources` section is a list of additional content or tools provided to assist with understanding and implementing the authentication methods described in the documentation.\n\n**Main Purpose:**\n\nThe main purpose of the `#Resources` section is to offer supplementary materials that developers and users can leverage to better comprehend and utilize the Magic Labs embedded wallet authentication methods, specifically WebAuthN, as described in the documentation.\n\n**Key Takeaways:**\n\n- It provides links to:\n  - A demo to visually demonstrate how the authentication method works.\n  - Demo code, which is likely sample code that users can adapt to implement the WebAuthN authentication method.\n\nThese resources are designed to support users in implementing the WebAuthN authentication method, offering a more hands-on and concrete understanding of the concept.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/login/webauthn#chunk-8", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nWith Magic, you can use OAuth as an authentication mechanism, giving users a simple way to log in with supported social providers.\n\nApplications can be integrated with the following social providers: Google, Facebook, Twitter, Apple, Discord, GitHub, LinkedIn, Twitch, Bitbucket and Microsoft.\n\nGoogle\n\nFacebook\n\nTwitter\n\nApple\n\nDiscord\n\nGitHub\n\nLinkedIn\n\nTwitch\n\nBitbucket\n\nMicrosoft\n\n#\n\nOAuth SDK methods are only available with Dedicated Wallets. Magic SDK offers two OAuth extensions: v1 and v2. For web applications, it is recommended to use v2, while v1 should be used for mobile applications.\n\nDedicated Wallets\n\nv1\n\nv2\n\nOAuth SDK methods are available via the following client-side SDKs:\n\n\u2022 Web\n\n\u2022 React Native\n\n\u2022 iOS\n\n\u2022 Android\n\nWeb\n\nReact Native\n\niOS\n\nAndroid", "explanation": "**Overview**\n\nThe provided section is about implementing OAuth authentication using the Magic Labs Embedded Wallet. OAuth is a widely used authentication mechanism that allows users to log in with supported social providers, making it a simple and secure way to authenticate.\n\n**Compatibility and Main Purpose**\n\nThe main purpose of this section is to provide details on how to integrate OAuth in Magic Labs Embedded Wallet and which client-side SDKs support OAuth SDK methods. The supported social providers include major platforms such as Google, Facebook, Twitter, Apple, and more.\n\n**Key Points**\n\n- It highlights the supported social providers for OAuth login.\n- Explains the availability of OAuth SDK methods, which are restricted to Dedicated Wallets and have two versions, v1 and v2.\n- Provides guidance on when to use v1 (for mobile applications) and v2 (recommended for web applications).\n- Lists the client-side SDKs that support OAuth SDK methods, including:\n  - Web\n  - React Native\n  - iOS\n  - Android\n\nIn summary, this section is a guide to using OAuth authentication with Magic Labs Embedded Wallet, covering the supported social providers, available SDK methods, and recommendations for version selection and compatible client-side SDKs.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/login/social-logins/oauth-implementation#chunk-1", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 Log in and create wallets for end users with OAuth for authentication", "explanation": "In the context of the Magic Labs embedded wallet documentation, the '#Use Cases' section outlines a real-world implementation of OAuth (Open Authorization) for user authentication.\n\n**What is it about?**\n\nThis section specifically discusses the use case of using OAuth for user authentication when:\n\n* End users log in to create or access their existing wallets.\n* The application utilizes OAuth as the authentication mechanism.\n\n**Main Purpose:**\n\nThe main purpose of this use case is to provide a detailed example of how to implement OAuth-based user authentication for wallet creation and access in the Magic Labs embedded wallet system. By covering the specifics of this implementation, the documentation aims to facilitate seamless integration of OAuth with Magic Labs' wallet services, ensuring secure user authentication and efficient wallet management.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/login/social-logins/oauth-implementation#chunk-2", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nYou can use OAuth by creating a project with our CLI tool and selecting your preferred social providers when prompted. Alternatively, you can directly integrate it into your existing projects using the instructions below. Refer to the API documentation for information on how to install and initialize Magic for your existing project.\n\nCLI tool\n\nAPI documentation\n\n#\n\nSocial Logins work as an extension to Magic SDK. To add Social Login to your Magic integration, start by installing the OAuth Extension:\n\nCopy\n\n01\n\nnpm\n\ninstall\n\nmagic-sdk @magic-ext/oauth2\n\n01\n\nnpm\n\ninstall\n\nmagic-sdk @magic-ext/oauth2\n\n02\n\nor\n\n02\n\nor\n\n03\n\nnpm\n\ninstall\n\nmagic-sdk @magic-ext/oauth\n\n03\n\nnpm\n\ninstall\n\nmagic-sdk @magic-ext/oauth", "explanation": "**Explanation of the #Usage - #Installation Section:**\n\nThis documentation section provides instructions on how to integrate OAuth functionality into your project using the Magic Labs embedded wallet. The main purpose is to guide users on how to set up and install the necessary components to enable social login capabilities in their applications.\n\n**Key Points:**\n\n1. **Using the CLI Tool**: The section mentions that users can create a project with the Magic Labs CLI tool and select their preferred social providers when prompted. This is an alternative to manual installation.\n2. **Direct Integration**: For users who already have an existing project, the section provides instructions on how to directly integrate OAuth into their project using the Magic API documentation.\n3. **Installing the OAuth Extension**: The main focus of this section is to guide users on how to install the OAuth extension, which is an additional component required for social login functionality.\n\n**Installation Steps:**\n\nThe section provides two sets of instructions for installing the OAuth extension:\n\n1. **Using the npm package manager**: Users can install the Magic SDK and the OAuth extension using npm commands:\n\t* `npm install magic-sdk @magic-ext/oauth2` (for OAuth 2.0 extension)\n\t* `npm install magic-sdk @magic-ext/oauth` (for OAuth extension)\n2. **Alternative installation commands**: The section also provides alternative installation commands, although the exact purpose of these alternatives is not explicitly stated.\n\nOverall, this documentation section aims to provide a clear and concise guide for users to install and integrate the OAuth extension, enabling social login capabilities in their applications.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/login/social-logins/oauth-implementation#chunk-3", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nWhen creating your Magic instance, you'll need to add an instance of OAuthExtension to the Magic constructor:\n\nOAuthExtension\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\nimport\n\n{\n\nOAuthExtension\n\n}\n\nfrom\n\n'@magic-ext/oauth2'\n\n;\n\n02\n\nimport\n\n{\n\nOAuthExtension\n\n}\n\nfrom\n\n'@magic-ext/oauth2'\n\n;\n\n03\n\nor\n\n03\n\nor\n\n04\n\nimport\n\n{\n\nOAuthExtension\n\n}\n\nfrom\n\n'@magic-ext/oauth'\n\n;\n\n04\n\nimport\n\n{\n\nOAuthExtension\n\n}\n\nfrom\n\n'@magic-ext/oauth'\n\n;\n\n05\n\n05\n\n06\n\n// Must use a Dedicated Wallet API Key\n\n06\n\n// Must use a Dedicated Wallet API Key\n\n07\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_API_KEY'\n\n,\n\n{\n\n07\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_API_KEY'\n\n,\n\n{\n\n08\n\nextensions\n\n:\n\n[\n\nnew\n\nOAuthExtension\n\n(\n\n)\n\n]\n\n,\n\n08\n\nextensions\n\n:\n\n[\n\nnew\n\nOAuthExtension\n\n(\n\n)\n\n]\n\n,\n\n09\n\n}\n\n)\n\n;\n\n09\n\n}\n\n)\n\n;", "explanation": "**Initialization in Magic Labs Embedded Wallet Documentation**\n\nThe Initialization section is about setting up a Magic instance using the Magic constructor. It is a crucial part of integrating the Magic Labs embedded wallet into your application.\n\n**Main Purpose:**\n\nThe main purpose of this section is to create a Magic instance and add an instance of OAuthExtension to it. This allows you to handle social login functionality using OAuth, which enables users to log in to your application using their social media accounts.\n\n**Key Steps:**\n\n1. Import the required modules from the Magic SDK and OAuth extension.\n2. Create a new instance of the Magic class, passing in your API key and an object with an extensions property.\n3. Within the extensions property, create a new instance of OAuthExtension.\n\n**Example:**\n\nThe provided code snippet demonstrates the initialization process:\n```javascript\nimport { Magic } from 'magic-sdk';\nimport { OAuthExtension } from '@magic-ext/oauth2';\n\nconst magic = new Magic('YOUR_API_KEY', {\n  extensions: [\n    new OAuthExtension()\n  ]\n});\n```\n**Important Notes:**\n\n* You must use a Dedicated Wallet API Key to authenticate your application.\n* This example uses the `@magic-ext/oauth2` extension, but you can also use the `@magic-ext/oauth` extension depending on your OAuth implementation.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/login/social-logins/oauth-implementation#chunk-4", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nOnce you've created a Magic instance, kick off the OAuth login with loginWithRedirect on the web and loginWithPopup on mobile.\n\nloginWithRedirect\n\nloginWithPopup\n\nOnce logged in, you will have access to a DID token that can be used with our Admin SDK to verify the user's information and wallet address on the backend. On mobile SDKs, this is provided as the result of loginWithPopup, while on the web SDK you can retrieve this and other information about the OAuth result with getRedirectResult. The getRedirectResult function returns an object that includes user information. On mobile, you can get similar user info, such as wallet address and email, with getMetadata.\n\nAdmin SDK\n\nloginWithPopup\n\ngetRedirectResult\n\ngetRedirectResult\n\ngetMetadata\n\nCopy\n\n01\n\n// Assumes you've initialized a `Magic` instance with a Dedicated Wallet API Key\n\n01\n\n// Assumes you've initialized a `Magic` instance with a Dedicated Wallet API Key\n\n02\n\nconst\n\nbeginOAuthFlow\n\n=\n\n(\n\n)\n\n=>\n\n{\n\n02\n\nconst\n\nbeginOAuthFlow\n\n=\n\n(\n\n)\n\n=>\n\n{\n\n03\n\n// if v1, use oauth module\n\n03\n\n// if v1, use oauth module\n\n04\n\nawait\n\nmagic\n\n.\n\noauth2\n\n.\n\nloginWithRedirect\n\n(\n\n{\n\n//\n\n04\n\nawait\n\nmagic\n\n.\n\noauth2\n\n.\n\nloginWithRedirect\n\n(\n\n{\n\n//\n\n05\n\nprovider\n\n:\n\n'...'\n\n/* 'google', 'facebook', 'apple', or 'github'   */\n\n,\n\n05\n\nprovider\n\n:\n\n'...'\n\n/* 'google', 'facebook', 'apple', or 'github' */\n\n,\n\n06\n\nredirectURI\n\n:\n\n'https://your-app.com/your/oauth/callback'\n\n,\n\n06\n\nredirectURI\n\n:\n\n'https://your-app.com/your/oauth/callback'\n\n,\n\n07\n\nscope\n\n:\n\n[\n\n'user:email'\n\n]\n\n/* optional */\n\n,\n\n07\n\nscope\n\n:\n\n[\n\n'user:email'\n\n]\n\n/* optional */\n\n,\n\n08\n\n}\n\n)\n\n;\n\n08\n\n}\n\n)\n\n;\n\n09\n\n}\n\n09\n\n}\n\n10\n\n10\n\n11\n\n// Call this upon redirect back to application\n\n11\n\n// Call this upon redirect back to application\n\n12\n\nconst\n\nhandleOAuthResult\n\n=\n\n(\n\n)\n\n=>\n\n{\n\n12\n\nconst\n\nhandleOAuthResult\n\n=\n\n(\n\n)\n\n=>\n\n{\n\n13\n\n// if v1, use oauth module\n\n13\n\n// if v1, use oauth module\n\n14\n\nconst\n\nresult\n\n=\n\nawait\n\nmagic\n\n.\n\noauth2\n\n.\n\ngetRedirectResult\n\n(\n\n)\n\n;\n\n14\n\nconst\n\nresult\n\n=\n\nawait\n\nmagic\n\n.\n\noauth2\n\n.\n\ngetRedirectResult\n\n(\n\n)\n\n;\n\n15\n\nconsole\n\n.\n\nlog\n\n(\n\n`\n\nOAuth result:\n\n${\n\nresult\n\n}\n\n`\n\n)\n\n;\n\n15\n\nconsole\n\n.\n\nlog\n\n(\n\n`\n\nOAuth result:\n\n${\n\nresult\n\n}\n\n`\n\n)\n\n;\n\n16\n\n16\n\n17\n\n// Handle result information as needed\n\n17\n\n// Handle result information as needed\n\n18\n\n}\n\n18\n\n}\n\nThe interface for the result of getRedirectResult is as follows:\n\ngetRedirectResult\n\nCopy\n\n01\n\ninterface\n\nOAuthRedirectResult\n\n{\n\n01\n\ninterface\n\nOAuthRedirectResult\n\n{\n\n02\n\nmagic\n\n:\n\n{\n\n02\n\nmagic\n\n:\n\n{\n\n03\n\nidToken\n\n:\n\nstring\n\n;\n\n03\n\nidToken\n\n:\n\nstring\n\n;\n\n04\n\nuserMetadata\n\n:\n\nMagicUserMetadata\n\n;\n\n04\n\nuserMetadata\n\n:\n\nMagicUserMetadata\n\n;\n\n05\n\n}\n\n,\n\n05\n\n}\n\n,\n\n06\n\noauth\n\n:\n\n{\n\n06\n\noauth\n\n:\n\n{\n\n07\n\nprovider\n\n:\n\nstring\n\n;\n\n07\n\nprovider\n\n:\n\nstring\n\n;\n\n08\n\nscope\n\n:\n\nstring\n\n[\n\n]\n\n;\n\n08\n\nscope\n\n:\n\nstring\n\n[\n\n]\n\n;\n\n09\n\naccessToken\n\n:\n\nstring\n\n;\n\n09\n\naccessToken\n\n:\n\nstring\n\n;\n\n10\n\nuserHandle\n\n:\n\nstring\n\n;\n\n10\n\nuserHandle\n\n:\n\nstring\n\n;\n\n11\n\nuserInfo\n\n:\n\n...\n\n;\n\n11\n\nuserInfo\n\n:\n\n...\n\n;\n\n12\n\n}\n\n12\n\n}\n\n13\n\n}\n\n;\n\n13\n\n}\n\n;", "explanation": "**Login Documentation Overview**\n\nThe '#Login' section from the Magic Labs embedded wallet documentation explains the process of logging in to a Magic instance using OAuth 2.0. This is the main purpose of this documentation section: to guide developers on how to implement user login with OAuth authentication.\n\n**Key Concepts**\n\n1. **loginWithRedirect**: Used on the web to kick off the OAuth login flow with a redirect.\n2. **loginWithPopup**: Used on mobile to start the OAuth login flow in a popup window.\n3. **getRedirectResult**: Retrieves an object containing user information after the OAuth login flow is complete on the web.\n4. **getMetadata**: On mobile, retrieves user information, including wallet address and email, after the OAuth login flow is complete.\n5. **Admin SDK**: Used to verify user information and wallet address on the backend using the DID token obtained during the OAuth login flow.\n\n**Authentication Flow**\n\nThe authentication flow involves the following steps:\n\n1. Create a Magic instance and initialize it with a Dedicated Wallet API Key.\n2. Call `beginOAuthFlow` to start the OAuth login flow, specifying the provider (e.g., Google, Facebook, Apple, or GitHub) and other required parameters (e.g., redirect URI and scope).\n3. Once the user completes the OAuth login flow, call `handleOAuthResult` to retrieve the result.\n4. Use `getRedirectResult` (on web) or `getMetadata` (on mobile) to retrieve an object containing user information, including the DID token, wallet address, and email.\n5. Verify user information on the backend using the Admin SDK and the DID token obtained during the OAuth login flow.\n\n**OAuth Redirect Result**\n\nThe `getRedirectResult` function returns an object of type `OAuthRedirectResult`, which contains the following properties:\n\n* `magic`: Contains the DID token and user metadata.\n* `oauth`: Contains information about the OAuth login flow, including the provider, scope, access token, user handle, and user information.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/login/social-logins/oauth-implementation#chunk-5", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 Web API documentation\n\n\u2022 React Native API documentation\n\nWeb API documentation\n\nReact Native API documentation", "explanation": "**#Resources Section Overview**\n\nThe '#Resources' section in the Magic Labs embedded wallet documentation is a collection of links to external resources that provide additional information and developer guides for implementing OAuth (Open Authentication) in various environments.\n\n**Main Purpose:**\n\nThe main purpose of this section is to provide easy access to relevant documentation and APIs for developers who want to integrate Magic Labs embedded wallets with their applications. This enables them to learn more about the available APIs, usage guidelines, and code examples for different platforms such as web and React Native.\n\nIn essence, the '#Resources' section serves as a one-stop shop for developers to find the necessary information to get started with implementing Magic Labs embedded wallets, making it easier to develop and integrate this functionality into their applications.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/login/social-logins/oauth-implementation#chunk-6", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nRARI Chain is a Layer 3 blockchain powered by Arbitrum, offering high throughput and low transaction costs. It also introduces a new royalty system embedding them at the node level, guaranteeing royalty payments to creators.\n\nRARI Chain\n\nAs RARI Chain is EVM equivalent, you can follow the Ethereum documentation to send your first transaction and utilize all other wallet features.\n\nEthereum", "explanation": "**Overview of RARI Chain:**\n\nRARI Chain is a Layer 3 blockchain built on Arbitrum technology. It's designed to provide high transaction throughput and low costs, making it a suitable choice for scalable solutions.\n\n**Key Features:**\n\n1. **Arbitrum-powered**: Utilizes Arbitrum's technology for its Layer 3 blockchain, ensuring high performance and scalability.\n2. **Low transaction costs**: Enables cost-effective transactions, making it more accessible for users.\n3. **Royalty system**: Introduces a new royalty system, where creators receive guaranteed royalty payments, embedded at the node level.\n\n**Implications for Users:**\n\n* Because RARI Chain is EVM (Ethereum Virtual Machine) equivalent, users can leverage existing Ethereum documentation and tools to interact with RARI Chain.\n* This means users can seamlessly send transactions and use wallet features on RARI Chain, just like they would on Ethereum.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/evm/rari-chain#chunk-1", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nEnsure you have installed the Magic SDK and have access to your API key, follow the quickstart to get started.\n\nquickstart\n\nCopy\n\n01\n\n// Setting network to point to RARI testnet\n\n01\n\n// Setting network to point to RARI testnet\n\n02\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_PUBLISHABLE_API_KEY'\n\n,\n\n{\n\n02\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_PUBLISHABLE_API_KEY'\n\n,\n\n{\n\n03\n\nnetwork\n\n:\n\n{\n\n03\n\nnetwork\n\n:\n\n{\n\n04\n\nrpcUrl\n\n:\n\n'https://testnet.rpc.rarichain.org/http'\n\n,\n\n04\n\nrpcUrl\n\n:\n\n'https://testnet.rpc.rarichain.org/http'\n\n,\n\n05\n\nchainId\n\n:\n\n1918988905\n\n,\n\n05\n\nchainId\n\n:\n\n1918988905\n\n,\n\n06\n\n}\n\n06\n\n}\n\n07\n\n)\n\n;\n\n07\n\n)\n\n;", "explanation": "**Configure RARI Chain Documentation**\n\nThis documentation section is about configuring the RARI Chain in the Magic SDK. The main purpose is to establish a connection to the RARI Chain blockchain using the Magic SDK for interacting with the RARI Chain.\n\nHere's a clear summary of the configuration:\n\n1. **API Key**: Ensure you have a valid API key from Magic.\n2. **Network Selection**: Set the network to point to the RARI testnet.\n3. **RPC URL**: Specify the RPC URL to connect to the testnet of the RARI Chain.\n4. **Chain ID**: Set the chain ID to `1918988905`, identifying the RARI Chain.\n\nThe provided code snippet demonstrates how to create a new instance of the `Magic` class and configure it to interact with the RARI Chain. The configuration settings are as follows:\n\n```javascript\nconst magic = new Magic('YOUR_PUBLISHABLE_API_KEY', {\n  network: {\n    rpcUrl: 'https://testnet.rpc.rarichain.org/http',\n    chainId: 1918988905\n  }\n});\n```\n\nTo use this configuration, replace `YOUR_PUBLISHABLE_API_KEY` with your actual Magic API key and update the `rpcUrl` and `chainId` properties as required.\n\nBy following these steps, you'll be able to successfully configure the Magic SDK to interact with the RARI Chain blockchain.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/evm/rari-chain#chunk-2", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 All Auth, User and Wallet module methods for Dedicated Wallets\n\n\u2022 All EVM Provider functionality to respond to supported RPC methods\n\nAuth\n\nUser\n\nWallet\n\nDedicated Wallets\n\nRPC methods\n\nNeed a feature or see a problem? File an issue on our github repo.\n\ngithub repo", "explanation": "**Compatibility Section Overview**\n\nThe #Compatibility section in the Magic Labs embedded wallet documentation explains the list of supported functionalities and modules for the RARI Chain (EVM) implementation.\n\n**Main Purpose**\n\nThe primary goal of this section is to inform developers about the compatible features and methods that can be used within the Magic Labs embedded wallet for the RARI Chain (EVM) integration.\n\n**Key Points**\n\nThe section highlights the compatibility of the following components:\n\n1. **Auth, User, and Wallet module methods**: These are the core components for authentication, user management, and wallet-related operations, which are supported for Dedicated Wallets.\n2. **EVM Provider functionality**: This indicates the support for EVM (Ethereum Virtual Machine) provider functionality, specifically for responding to standard RPC (Remote Procedure Call) methods.\n3. **RPC methods**: This implies that the Magic Labs embedded wallet supports responding to standard RPC methods, which are required for interacting with blockchain nodes.\n\n**Next Steps**\n\nIf developers encounter any issues or require additional features, they are directed to file an issue on the Magic Labs GitHub repository.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/evm/rari-chain#chunk-3", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 Documentation: https://rari.docs.caldera.dev/\n\n\u2022 Block Explorer: https://mainnet.explorer.rarichain.org/ (Mainnet)https://testnet.explorer.rarichain.org/ (Testnet)\n\n\u2022 Faucets: https://rari.docs.caldera.dev/faucet\n\nhttps://rari.docs.caldera.dev/\n\n\u2022 https://mainnet.explorer.rarichain.org/ (Mainnet)\n\n\u2022 https://testnet.explorer.rarichain.org/ (Testnet)\n\nhttps://mainnet.explorer.rarichain.org/\n\nhttps://testnet.explorer.rarichain.org/\n\nhttps://rari.docs.caldera.dev/faucet", "explanation": "I'd be happy to explain the '#Resources & Tools' section from the Magic Labs embedded wallet documentation.\n\n**What is it about?**\nThe '#Resources & Tools' section provides a collection of links to external resources and tools that are relevant to the Rari Chain blockchain, which is the focus of the documentation.\n\n**Main purpose:**\nThe main purpose of this section is to give developers and users access to essential tools and information when working with the Rari Chain blockchain, specifically the Rari DAO chain, including:\n\n1. **Official documentation**: Links to the official Rari Chain documentation for more in-depth information.\n2. **Block explorers**: Tools for exploring the blockchain, such as transaction history, account balances, and more. There are separate links for Mainnet (live network) and Testnet (testing network).\n3. **Faucets**: Websites that distribute test Rari Chain tokens for development and testing purposes, making it easier to test and experiment with the blockchain.\n\nBy providing these resources, the Magic Labs embedded wallet documentation aims to enable users to quickly access the information they need to successfully interact with the Rari Chain blockchain.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/evm/rari-chain#chunk-4", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "How to Build a Decentralized App on Binance Smart Chain with Magic", "explanation": "Based on the provided documentation URL, the section titled 'Binance Smart Chain - Binance Smart Chain - Binance implementation guide' is not directly available. However, I can provide an explanation of the given section 'How to Build a Decentralized App on Binance Smart Chain with Magic' and what it's about:\n\n**Overview:**\nThe section 'How to Build a Decentralized App on Binance Smart Chain with Magic' is part of the Binance Smart Chain implementation guide provided by Magic Link. This guide aims to help developers integrate Magic into their decentralized applications (dApps) on the Binance Smart Chain.\n\n**Main Purpose:**\nThe primary purpose of this section is to guide developers through the process of:\n\n1. Setting up a Magic-enabled dApp on the Binance Smart Chain.\n2. Using Magic to connect users to their Metamask accounts on the Binance Smart Chain.\n3. Leveraging Magic's APIs and libraries to simplify the development process and enhance user experience.\n\n**Key Takeaways:**\n\n- Integration with Binance Smart Chain: Developers learn how to integrate Magic with their dApps on the Binance Smart Chain.\n- Metamask Integration: The guide explains how to use Magic to connect users to their Metamask accounts on the Binance Smart Chain.\n- Simplified Development: Magic's APIs and libraries are utilized to simplify the development process and enhance user experience.\n\nThis documentation is intended for developers who want to build decentralized applications on the Binance Smart Chain with Magic's help. By following this guide, developers can create seamless user experiences and expand their audience on the Binance Smart Chain.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/evm/binance-smart-chain#chunk-1", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nBinance Smart Chain is a Layer 1 blockchain network that's compatible with the Ethereum Virtual Machine (EVM), specifically designed to revolutionize the world of sports. Through the Magic SDK, users can easily create wallets and engage with Binance Smart Chain, enabling teams, fans, and developers to craft Web3 products and experiences that unite fans and brands like never before.\n\nBinance Smart Chain\n\nAs Binance Smart Chain is EVM compatible, you can follow the Ethereum documentation to send your first transaction and utilize all other features.\n\nEthereum", "explanation": "**Overview of Binance Smart Chain with the Magic SDK**\n\nThe Overview section explains the capabilities of Binance Smart Chain (BSC) integrated with the Magic SDK. The main purpose of this section is to introduce BSC as a layer 1 blockchain network that is EVM (Ethereum Virtual Machine) compatible, allowing users to easily adopt its features within the Magic ecosystem.\n\n**Key Points:**\n\n1. BSC is designed to innovate the sports industry with Web3 products and experiences.\n2. The Magic SDK enables users to create wallets and interact with BSC.\n3. As BSC is EVM compatible, users can follow existing Ethereum documentation to send transactions and utilize other features.\n\n**Main Takeaway:** The Magic SDK simplifies the integration of Binance Smart Chain, making it easier for developers to build Web3 applications that can leverage the BSC network.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/evm/binance-smart-chain#chunk-2", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n#\n\nMainnet Block Explorer URL: https://bscscan.com\n\nhttps://bscscan.com\n\nCopy\n\n01\n\nconst\n\nBSCOptions\n\n=\n\n{\n\n01\n\nconst\n\nBSCOptions\n\n=\n\n{\n\n02\n\nrpcUrl\n\n:\n\n'https://bsc-dataseed.binance.org/'\n\n,\n\n// Smart Chain RPC URL\n\n02\n\nrpcUrl\n\n:\n\n'https://bsc-dataseed.binance.org/'\n\n,\n\n// Smart Chain RPC URL\n\n03\n\nchainId\n\n:\n\n56\n\n,\n\n// Smart Chain chain id\n\n03\n\nchainId\n\n:\n\n56\n\n,\n\n// Smart Chain chain id\n\n04\n\n}\n\n;\n\n04\n\n}\n\n;\n\n05\n\n05\n\n06\n\n// Setting network to Smart Chain\n\n06\n\n// Setting network to Smart Chain\n\n07\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_PUBLISHABLE_API_KEY'\n\n,\n\n{\n\nnetwork\n\n:\n\nBSCOptions\n\n}\n\n)\n\n;\n\n07\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_PUBLISHABLE_API_KEY'\n\n,\n\n{\n\nnetwork\n\n:\n\nBSCOptions\n\n}\n\n)\n\n;", "explanation": "The given documentation section is titled '#Configure Binance Smart Chain - #Smart Chain'. It provides the configuration details for connecting to the Binance Smart Chain (BSC) blockchain using the Magic Labs embedded wallet SDK.\n\n**Main Purpose:**\nThe main purpose of this section is to guide developers on how to configure their Magic Labs embedded wallet to interact with the Binance Smart Chain, specifically setting up the network parameters and API key.\n\n**Key Components:**\n\n1. **Mainnet Block Explorer URL:** A link to the official BSC block explorer, where users can view and analyze transactions and data on the chain.\n2. **BSC Configuration Options:** A set of configuration options for connecting to the BSC chain, including:\n\t* **rpcUrl:** The URL of the Binance Smart Chain RPC endpoint, which is used to send transactions and interact with the chain.\n\t* **chainId:** The unique identifier of the Binance Smart Chain, which is used to authenticate and authorize transactions.\n3. **Initializing Magic:** A code snippet that demonstrates how to initialize the Magic Labs embedded wallet SDK, passing in the `YOUR_PUBLISHABLE_API_KEY` and `BSCOptions` configuration object.\n\n**Summary:**\nIn summary, this documentation section provides the necessary configuration details and code snippets for developers to connect their Magic Labs embedded wallet to the Binance Smart Chain, enabling secure and seamless interaction with the blockchain.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/evm/binance-smart-chain#chunk-3", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nTestnet Block Explorer URL: https://testnet.bscscan.com\n\nhttps://testnet.bscscan.com\n\nCopy\n\n01\n\nconst\n\nBSCOptions\n\n=\n\n{\n\n01\n\nconst\n\nBSCOptions\n\n=\n\n{\n\n02\n\nrpcUrl\n\n:\n\n'https://data-seed-prebsc-1-s1.binance.org:8545/'\n\n,\n\n// Smart Chain - Testnet RPC URL\n\n02\n\nrpcUrl\n\n:\n\n'https://data-seed-prebsc-1-s1.binance.org:8545/'\n\n,\n\n// Smart Chain - Testnet RPC URL\n\n03\n\nchainId\n\n:\n\n97\n\n,\n\n// Smart Chain - Testnet chain id\n\n03\n\nchainId\n\n:\n\n97\n\n,\n\n// Smart Chain - Testnet chain id\n\n04\n\n}\n\n;\n\n04\n\n}\n\n;\n\n05\n\n05\n\n06\n\n// Setting network to Smart Chain - Testnet\n\n06\n\n// Setting network to Smart Chain - Testnet\n\n07\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_PUBLISHABLE_API_KEY'\n\n,\n\n{\n\nnetwork\n\n:\n\nBSCOptions\n\n}\n\n)\n\n;\n\n07\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_PUBLISHABLE_API_KEY'\n\n,\n\n{\n\nnetwork\n\n:\n\nBSCOptions\n\n}\n\n)\n\n;", "explanation": "**Smart Chain - Testnet Documentation**\n\nThis section of the Magic Labs embedded wallet documentation is about integrating the Binance Smart Chain (BSC) testnet into your application. The main purpose is to provide a test environment for developers to test their smart contracts and wallets on the BSC network without using real assets.\n\n**Key Components:**\n\n1. **Testnet Block Explorer URL:** A URL to access the BSC testnet block explorer: `https://testnet.bscscan.com`.\n2. **BSCOptions:** An object containing configuration settings for the BSC network.\n\t* **rpcUrl:** The URL of the BSC testnet RPC (Remote Procedure Call) endpoint: `'https://data-seed-prebsc-1-s1.binance.org:8545/'`.\n\t* **chainId:** The chain ID for the BSC testnet: `97`.\n3. **Initializing Magic:** An example of how to initialize the Magic wallet on the BSC testnet:\n\t* Create a new instance of the Magic wallet using your publishable API key and setting the network to the BSC testnet using the `BSCOptions` object.\n\n**Main Purpose:**\n\nThe main purpose of this documentation section is to provide a step-by-step guide for developers to test their smart contracts and wallets on the BSC testnet. By following these instructions, developers can easily integrate the BSC testnet into their applications and test their functionality without using real assets.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/evm/binance-smart-chain#chunk-4", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 All Auth, User and most Wallet module methods* for Dedicated Wallets\n\n\u2022 All EVM Provider functionality to respond to supported RPC methods\n\nAuth\n\nUser\n\nWallet\n\nDedicated Wallets\n\nRPC methods\n\n*Some features are not yet compatible such as NFT Viewer and Fiat On-ramps.\n\nNeed a feature or see a problem? File an issue on our github repo.\n\ngithub repo", "explanation": "**Compatibility Section Overview**\n\nThe '#' Compatibility section of the Magic Labs embedded wallet documentation explains the current compatibility of various features and functionalities with the Binance Smart Chain (BSC) EVM blockchain.\n\n**Key Points:**\n\n* **Supported Features:** Magic Labs dedicated wallets and EVM Provider functionality support most Auth, User, and Wallet module methods.\n* **Unsupported Features:** Certain features, such as NFT Viewer and Fiat On-ramps are not yet compatible.\n* **Main Purpose:** This section informs users about the current state of compatibility, guiding them on which features they can use with the BSC EVM blockchain.\n* **Call to Action:** Users with feature requests or issues can file a GitHub issue to contribute to the ongoing development and improvement of the Magic Labs embedded wallet.\n\nIn summary, the Compatibility section serves as a reference for developers and users to understand what features are currently working with the BSC EVM blockchain, and what might need additional development to be compatible.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/evm/binance-smart-chain#chunk-5", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 Documentation: https://docs.bnbchain.org/\n\n\u2022 Block Explorer: https://bscscan.com/ (Mainnet)https://testnet.bscscan.com/ (Testnet)\n\n\u2022 Testnet Faucet: https://www.bnbchain.org/en/testnet-faucet\n\nhttps://docs.bnbchain.org/\n\n\u2022 https://bscscan.com/ (Mainnet)\n\n\u2022 https://testnet.bscscan.com/ (Testnet)\n\nhttps://bscscan.com/\n\nhttps://testnet.bscscan.com/\n\nhttps://www.bnbchain.org/en/testnet-faucet", "explanation": "**Resources & Tools Section Explanation**\n\nThe '#Resources & Tools' section in the Magic Labs embedded wallet documentation provides essential links and tools necessary for interacting with the Binance Smart Chain (BSC) blockchain.\n\n**Main Purpose:**\n\nThe primary purpose of this section is to offer a centralized location where users can find valuable resources, facilitating their development, testing, and debugging processes on the BSC blockchain.\n\n**Main Components:**\n\n1. **Documentation:** A link to the official Binance Smart Chain documentation, which contains detailed information about the BSC protocol, blockchain structure, and other essential topics.\n2. **Block Explorer:** A link to BSCScan, a popular block explorer that allows users to inspect specific transactions, smart contracts, and wallets on the mainnet and testnet.\n3. **Testnet Faucet:** A link to the Binance Smart Chain testnet faucet, which provides free BNB tokens for testing and Development purposes on the testnet network.\n\n**Key Benefits:**\n\n* Easy access to necessary resources for BSC development and testing\n* Convenience for users to explore and inspect blockchain data\n* Availability of testnet BNB tokens for development and testing purposes\n\nBy providing these essential resources, the '#Resources & Tools' section helps users overcome obstacles and streamline their development journey on the Binance Smart Chain.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/evm/binance-smart-chain#chunk-6", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nWAGMI is a development library that streamlines Ethereum development. Popular among developers for its ease in managing multiple wallets, it becomes even more powerful when combined with Magic. This integration streamlines user interactions across various wallets while leveraging Magic's blazing-fast and secure passwordless login. This guide details the integration process using Magic's DedicatedWalletConnector. For an immediate hands-on experience, explore our demo on GitHub.\n\nDedicatedWalletConnector\n\ndemo on GitHub", "explanation": "**WAGMI Overview**\n\nWAGMI is a JavaScript development library that simplifies Ethereum development. Its primary purpose is to make it easier for developers to manage multiple Ethereum wallets. By integrating WAGMI with Magic, an additional layer of functionality is added, enabling a seamless passwordless login experience.\n\n**Key Benefits**\n\n-   **Multi-Wallet Management**: WAGMI allows developers to handle various Ethereum wallets with ease.\n-   **Passwordless Login**: Integrated with Magic's DedicatedWalletConnector, WAGMI powers a fast and secure passwordless login process.\n-   **Streamlined User Interactions**: WAGMI user interface makes it easier for users to interact with their Ethereum wallets without barriers.\n\n**Integration with Magic**\n\nCombining WAGMI with Magic takes user experience to the next level by leveraging Magic's capabilities for fast and secure login. The DedicatedWalletConnector is a crucial component in this integration, enabling a hassle-free passwordless login experience.\n\n**Experimental or Starting Point**\n\nThe attached GitHub demo serves as a starting point for developers looking to get hands-on experience with the WAGMI-Magic integration. It showcases the potential of combining these two strong components to create robust, user-friendly Ethereum development.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/wallets/integrations/wagmi#chunk-1", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nAdd wagmi and @magiclabs/wagmi-connector using your chosen package manager.\n\nwagmi\n\n@magiclabs/wagmi-connector\n\nCopy\n\n01\n\nnpm\n\ninstall\n\nwagmi @magiclabs/wagmi-connector\n\n01\n\nnpm\n\ninstall\n\nwagmi @magiclabs/wagmi-connector", "explanation": "**Installation Documentation Section Breakdown**\n\nThis documentation section, titled '#Installation', provides instructions on how to set up the necessary libraries for integrating Magic Labs' embedded wallet with the Wagmi (Wallet Aggregator for Go-ethereum and Web3) library in a project.\n\n**Main Purpose:**\n\nThe main purpose of this section is to guide developers in installing the required packages, specifically:\n\n* `wagmi`: a popular JavaScript library for interacting with Ethereum and other blockchain networks.\n* `@magiclabs/wagmi-connector`: a Magic Labs connector tailored for the Wagmi library, enabling seamless interaction with Magic Labs' embedded wallet.\n\n**Step-by-Step Instructions:**\n\n1. Developers are instructed to add the required packages (`wagmi` and `@magiclabs/wagmi-connector`) to their project using their chosen package manager.\n2. The section provides specific instructions for using `npm` (Node Package Manager) to install the packages.\n\n**Key Takeaway:**\n\nIn order to integrate Magic Labs' embedded wallet with Wagmi in a project, developers must follow these steps to install the necessary libraries, ensuring a smooth and efficient integration process.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/wallets/integrations/wagmi#chunk-2", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nTo initialize, import the necessary dependencies from Magic and WAGMI in your root file (i.e. App.tsx). \u2060 \u2060Next, add the Magic DedicatedWalletConnector and its configuration as the connectors value of the config.\n\nApp.tsx\n\nDedicatedWalletConnector\n\nconnectors\n\nFinally, pass the configuration to the WagmiConfig component to make WAGMI hooks available across the whole application.\n\nWagmiConfig\n\nCopy\n\n01\n\nimport\n\n{\n\nconfigureChains\n\n,\n\ncreateConfig\n\n,\n\nWagmiConfig\n\n}\n\nfrom\n\n\"wagmi\"\n\n;\n\n01\n\nimport\n\n{\n\nconfigureChains\n\n,\n\ncreateConfig\n\n,\n\nWagmiConfig\n\n}\n\nfrom\n\n\"wagmi\"\n\n;\n\n02\n\nimport\n\n{\n\nmainnet\n\n}\n\nfrom\n\n\"wagmi/chains\"\n\n;\n\n02\n\nimport\n\n{\n\nmainnet\n\n}\n\nfrom\n\n\"wagmi/chains\"\n\n;\n\n03\n\nimport\n\n{\n\npublicProvider\n\n}\n\nfrom\n\n\"wagmi/providers/public\"\n\n;\n\n03\n\nimport\n\n{\n\npublicProvider\n\n}\n\nfrom\n\n\"wagmi/providers/public\"\n\n;\n\n04\n\nimport\n\n{\n\nDedicatedWalletConnector\n\n}\n\nfrom\n\n\"@magiclabs/wagmi-connector\"\n\n;\n\n04\n\nimport\n\n{\n\nDedicatedWalletConnector\n\n}\n\nfrom\n\n\"@magiclabs/wagmi-connector\"\n\n;\n\n05\n\nimport\n\nDashboard\n\nfrom\n\n\"./components/Dashboard\"\n\n;\n\n05\n\nimport\n\nDashboard\n\nfrom\n\n\"./components/Dashboard\"\n\n;\n\n06\n\n06\n\n07\n\nconst\n\n{\n\nchains\n\n,\n\npublicClient\n\n,\n\nwebSocketPublicClient\n\n}\n\n=\n\nconfigureChains\n\n(\n\n07\n\nconst\n\n{\n\nchains\n\n,\n\npublicClient\n\n,\n\nwebSocketPublicClient\n\n}\n\n=\n\nconfigureChains\n\n(\n\n08\n\n[\n\nmainnet\n\n]\n\n,\n\n08\n\n[\n\nmainnet\n\n]\n\n,\n\n09\n\n[\n\npublicProvider\n\n(\n\n)\n\n]\n\n09\n\n[\n\npublicProvider\n\n(\n\n)\n\n]\n\n10\n\n)\n\n;\n\n10\n\n)\n\n;\n\n11\n\n11\n\n12\n\nconst\n\nconfig\n\n=\n\ncreateConfig\n\n(\n\n{\n\n12\n\nconst\n\nconfig\n\n=\n\ncreateConfig\n\n(\n\n{\n\n13\n\nautoConnect\n\n:\n\ntrue\n\n,\n\n13\n\nautoConnect\n\n:\n\ntrue\n\n,\n\n14\n\npublicClient\n\n,\n\n14\n\npublicClient\n\n,\n\n15\n\nwebSocketPublicClient\n\n,\n\n15\n\nwebSocketPublicClient\n\n,\n\n16\n\nconnectors\n\n:\n\n[\n\n16\n\nconnectors\n\n:\n\n[\n\n17\n\nnew\n\nDedicatedWalletConnector\n\n(\n\n{\n\n17\n\nnew\n\nDedicatedWalletConnector\n\n(\n\n{\n\n18\n\nchains\n\n,\n\n18\n\nchains\n\n,\n\n19\n\noptions\n\n:\n\n{\n\n19\n\noptions\n\n:\n\n{\n\n20\n\napiKey\n\n:\n\n\"PUBLISHABLE_API_KEY\"\n\n,\n\n20\n\napiKey\n\n:\n\n\"PUBLISHABLE_API_KEY\"\n\n,\n\n21\n\nisDarkMode\n\n:\n\ntrue\n\n,\n\n21\n\nisDarkMode\n\n:\n\ntrue\n\n,\n\n22\n\n/* If using OAuth, make sure to enable OAuth options from magic dashboard */\n\n22\n\n/* If using OAuth, make sure to enable OAuth options from magic dashboard */\n\n23\n\noauthOptions\n\n:\n\n{\n\n23\n\noauthOptions\n\n:\n\n{\n\n24\n\nproviders\n\n:\n\n[\n\n\"\"\n\n]\n\n,\n\n24\n\nproviders\n\n:\n\n[\n\n\"\"\n\n]\n\n,\n\n25\n\n}\n\n,\n\n25\n\n}\n\n,\n\n26\n\nmagicSdkConfiguration\n\n:\n\n{\n\n26\n\nmagicSdkConfiguration\n\n:\n\n{\n\n27\n\nnetwork\n\n:\n\n{\n\n27\n\nnetwork\n\n:\n\n{\n\n28\n\nrpcUrl\n\n:\n\nRPC_URL\n\n,\n\n28\n\nrpcUrl\n\n:\n\nRPC_URL\n\n,\n\n29\n\nchainId\n\n:\n\nCHAIN_ID\n\n,\n\n29\n\nchainId\n\n:\n\nCHAIN_ID\n\n,\n\n30\n\n}\n\n,\n\n30\n\n}\n\n,\n\n31\n\n}\n\n,\n\n31\n\n}\n\n,\n\n32\n\n}\n\n,\n\n32\n\n}\n\n,\n\n33\n\n}\n\n)\n\n,\n\n33\n\n}\n\n)\n\n,\n\n34\n\n]\n\n,\n\n34\n\n]\n\n,\n\n35\n\n}\n\n)\n\n;\n\n35\n\n}\n\n)\n\n;\n\n36\n\n36\n\n37\n\nfunction\n\nApp\n\n(\n\n)\n\n{\n\n37\n\nfunction\n\nApp\n\n(\n\n)\n\n{\n\n38\n\nreturn\n\n(\n\n38\n\nreturn\n\n(\n\n39\n\n<\n\nWagmiConfig\n\nconfig\n\n=\n\n{\n\nconfig\n\n}\n\n>\n\n39\n\n<\n\nWagmiConfig\n\nconfig\n\n=\n\n{\n\nconfig\n\n}\n\n>\n\n40\n\n<\n\nDashboard\n\n/\n\n>\n\n40\n\n<\n\nDashboard\n\n/\n\n>\n\n41\n\n<\n\n/\n\nWagmiConfig\n\n>\n\n41\n\n<\n\n/\n\nWagmiConfig\n\n>\n\n42\n\n)\n\n;\n\n42\n\n)\n\n;\n\n43\n\n}\n\n43\n\n}\n\n44\n\n44\n\n45\n\nexport\n\ndefault\n\nApp\n\n;\n\n45\n\nexport\n\ndefault\n\nApp\n\n;", "explanation": "**Initialization Documentation Explanation**\n\nThe '#Initialization' section of the Magic Labs embedded wallet documentation explains the necessary steps to set up and configure the Magic DedicatedWalletConnector with Wagmi in a React application.\n\n**Main Purpose:** The main purpose of this section is to guide developers on how to initialize the Magic DedicatedWalletConnector with Wagmi, making WAGMI hooks available across the application.\n\n**Key Steps:**\n\n1. Import the necessary dependencies from Magic and Wagmi in the root file (App.tsx).\n2. Create an instance of the Magic DedicatedWalletConnector and its configuration as the connectors value of the config.\n3. Pass the configuration to the WagmiConfig component to make WAGMI hooks available across the application.\n\n**Configuration Options:**\n\nThe configuration object for the Magic DedicatedWalletConnector includes the following options:\n\n* `autoConnect`: enables or disables automatic connection to the wallet.\n* `publicClient`: enables or disables public client login.\n* `webSocketPublicClient`: enables or disables WebSocket public client login.\n* `connectors`: an array of wallet connectors, including the Magic DedicatedWalletConnector instance.\n* `options`: an object containing wallet-specific options, such as API key, dark mode, and OAuth options.\n* `magicSdkConfiguration`: an object containing configuration options for the Magic SDK, including network and chain ID settings.\n\nBy following these steps and configuring the Magic DedicatedWalletConnector correctly, developers can enable wallet connectivity and integration with Wagmi in their React applications.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/wallets/integrations/wagmi#chunk-3", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nWith the Magic connector added, you can use WAGMI hooks for everything else per their documentation.\n\ndocumentation\n\n#\n\nCopy\n\n01\n\nimport\n\n{\n\nuseConnect\n\n}\n\nfrom\n\n'wagmi'\n\n01\n\nimport\n\n{\n\nuseConnect\n\n}\n\nfrom\n\n'wagmi'\n\n02\n\n02\n\n03\n\nconst\n\nSignIn\n\n=\n\n(\n\n)\n\n=>\n\n{\n\n03\n\nconst\n\nSignIn\n\n=\n\n(\n\n)\n\n=>\n\n{\n\n04\n\nconst\n\n{\n\nconnect\n\n,\n\nconnectors\n\n,\n\nisLoading\n\n,\n\nisIdle\n\n}\n\n=\n\nuseConnect\n\n(\n\n)\n\n04\n\nconst\n\n{\n\nconnect\n\n,\n\nconnectors\n\n,\n\nisLoading\n\n,\n\nisIdle\n\n}\n\n=\n\nuseConnect\n\n(\n\n)\n\n05\n\n05\n\n06\n\nreturn\n\n(\n\n06\n\nreturn\n\n(\n\n07\n\n<\n\ndiv className\n\n=\n\n\"sign-in-container\"\n\n>\n\n07\n\n<\n\ndiv className\n\n=\n\n\"sign-in-container\"\n\n>\n\n08\n\n<\n\nbutton\n\n08\n\n<\n\nbutton\n\n09\n\nonClick\n\n=\n\n{\n\n(\n\n)\n\n=>\n\nconnect\n\n(\n\n{\n\nconnector\n\n:\n\nconnectors\n\n[\n\n0\n\n]\n\n}\n\n)\n\n}\n\n09\n\nonClick\n\n=\n\n{\n\n(\n\n)\n\n=>\n\nconnect\n\n(\n\n{\n\nconnector\n\n:\n\nconnectors\n\n[\n\n0\n\n]\n\n}\n\n)\n\n}\n\n10\n\n>\n\n10\n\n>\n\n11\n\n{\n\nisLoading\n\n?\n\n\"Loading...\"\n\n:\n\nisIdle\n\n?\n\n\"Connect\"\n\n:\n\n\"Connecting...\"\n\n}\n\n11\n\n{\n\nisLoading\n\n?\n\n\"Loading...\"\n\n:\n\nisIdle\n\n?\n\n\"Connect\"\n\n:\n\n\"Connecting...\"\n\n}\n\n12\n\n<\n\n/\n\nbutton\n\n>\n\n12\n\n<\n\n/\n\nbutton\n\n>\n\n13\n\n<\n\n/\n\ndiv\n\n>\n\n13\n\n<\n\n/\n\ndiv\n\n>\n\n14\n\n)\n\n14\n\n)\n\n15\n\n}\n\n15\n\n}\n\n16\n\n16\n\n17\n\nexport\n\ndefault\n\nSignIn\n\n17\n\nexport\n\ndefault\n\nSignIn", "explanation": "**Connecting to the Magic Labs Embedded Wallet Network**\n\nThis documentation section is about establishing a connection to the Magic Labs embedded wallet network using the WAGMI (Wallet Adapter for Galaxy Microsystems) library.\n\n**Main Purpose:**\n\nThe main purpose of this section is to explain how to use the `useConnect` hook from WAGMI to connect to the Magic Labs embedded wallet network. This hook allows users to connect their wallets to the application, facilitating transactions and interactions with the blockchain.\n\n**Key Components:**\n\n1. **Importing WAGMI Hooks:** The section starts by importing the `useConnect` hook from WAGMI.\n2. **Defining the `connect` Function:** The `useConnect` hook is used to create a `connect` function, which initiates the connection process to the Magic Labs embedded wallet network.\n3. **Handling Connection State:** The section handles the connection state by checking whether the wallet is loading, idle, or connecting. This information is displayed to the user through a button state (e.g., \"Loading...\", \"Connect\", or \"Connecting...\").\n4. **Exporting the `SignIn` Component:** The section exports the `SignIn` component, which can be used in the application to connect users to the Magic Labs embedded wallet network.\n\n**In Summary:**\n\nThis section provides a step-by-step guide on how to connect to the Magic Labs embedded wallet network using the WAGMI library, including importing hooks, defining connection functions, handling state, and exporting components.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/wallets/integrations/wagmi#chunk-4", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\nimport\n\n{\n\nuseSignMessage\n\n}\n\nfrom\n\n'wagmi'\n\n01\n\nimport\n\n{\n\nuseSignMessage\n\n}\n\nfrom\n\n'wagmi'\n\n02\n\n02\n\n03\n\nfunction\n\nComponent\n\n(\n\n)\n\n{\n\n03\n\nfunction\n\nComponent\n\n(\n\n)\n\n{\n\n04\n\nconst\n\n{\n\ndata\n\n,\n\nisError\n\n,\n\nisLoading\n\n,\n\nisSuccess\n\n,\n\nsignMessage\n\n}\n\n=\n\nuseSignMessage\n\n(\n\n{\n\n04\n\nconst\n\n{\n\ndata\n\n,\n\nisError\n\n,\n\nisLoading\n\n,\n\nisSuccess\n\n,\n\nsignMessage\n\n}\n\n=\n\nuseSignMessage\n\n(\n\n{\n\n05\n\nmessage\n\n:\n\n'Signed from Magic'\n\n,\n\n05\n\nmessage\n\n:\n\n'Signed from Magic'\n\n,\n\n06\n\n}\n\n)\n\n06\n\n}\n\n)\n\n07\n\n07\n\n08\n\nreturn\n\n(\n\n08\n\nreturn\n\n(\n\n09\n\n<\n\ndiv\n\n>\n\n09\n\n<\n\ndiv\n\n>\n\n10\n\n<\n\nbutton disabled\n\n=\n\n{\n\nisLoading\n\n}\n\nonClick\n\n=\n\n{\n\n(\n\n)\n\n=>\n\nsignMessage\n\n(\n\n)\n\n}\n\n>\n\n10\n\n<\n\nbutton disabled\n\n=\n\n{\n\nisLoading\n\n}\n\nonClick\n\n=\n\n{\n\n(\n\n)\n\n=>\n\nsignMessage\n\n(\n\n)\n\n}\n\n>\n\n11\n\nSign\n\nmessage\n\n11\n\nSign\n\nmessage\n\n12\n\n<\n\n/\n\nbutton\n\n>\n\n12\n\n<\n\n/\n\nbutton\n\n>\n\n13\n\n{\n\nisSuccess\n\n&&\n\n<\n\ndiv\n\n>\n\nSignature\n\n:\n\n{\n\ndata\n\n}\n\n<\n\n/\n\ndiv\n\n>\n\n}\n\n13\n\n{\n\nisSuccess\n\n&&\n\n<\n\ndiv\n\n>\n\nSignature\n\n:\n\n{\n\ndata\n\n}\n\n<\n\n/\n\ndiv\n\n>\n\n}\n\n14\n\n{\n\nisError\n\n&&\n\n<\n\ndiv\n\n>\n\nError\n\nsigning message\n\n<\n\n/\n\ndiv\n\n>\n\n}\n\n14\n\n{\n\nisError\n\n&&\n\n<\n\ndiv\n\n>\n\nError\n\nsigning message\n\n<\n\n/\n\ndiv\n\n>\n\n}\n\n15\n\n<\n\n/\n\ndiv\n\n>\n\n15\n\n<\n\n/\n\ndiv\n\n>\n\n16\n\n)\n\n16\n\n)\n\n17\n\n}\n\n17\n\n}", "explanation": "**# Sign Message**\n\nThe `# Sign Message` section of the Magic Labs embedded wallet documentation explains how to integrate a user-friendly signing message interface into a wallet using the Wagmi library. The main purpose of this feature is to enable users to securely sign messages with their cryptocurrency wallets (e.g., Ethereum, EVM-compatible chains) using the Magic Labs embedded wallet.\n\n**Key Components:**\n\n1. **`useSignMessage` hook**: This hook from the Wagmi library retrieves the signing message state, including the user's response (success or error) after signing the message.\n2. **`signMessage` function**: This function initiates the signing process and passes the signed message data, error, isLoading, and isSuccess properties to the `useSignMessage` hook.\n3. **`isLoading`**, `isSuccess`, and `isError` properties**: These properties track the signing process state:\n\t* `isLoading`: indicates whether the signing process is in progress.\n\t* `isSuccess`: indicates whether the signing process was successful.\n\t* `isError`: indicates whether an error occurred during signing.\n4. **`message` property**: This string property contains the message that the user is signing.\n5. **Rendering components**: The code examples demonstrate how to display the signing interface, including a button to initiate the signing process and displays the signed message or error message.\n\n**Step-by-Step Overview:**\n\n1. Import the `useSignMessage` hook from the Wagmi library.\n2. Create a React component that uses the `useSignMessage` hook to retrieve the signing message state.\n3. Define a `signMessage` function to initiate the signing process.\n4. Pass the `message` property to the `signMessage` function.\n5. Use the `signMessage` function to call the signing process when the user clicks the \"Sign message\" button.\n6. Render the signed message or error message based on the signing process state.\n\nBy following this example, developers can integrate a secure signing message interface into their Magic Labs embedded wallet applications using Wagmi.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/wallets/integrations/wagmi#chunk-5", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\nimport\n\n{\n\nuseSendTransaction\n\n}\n\nfrom\n\n'wagmi'\n\n01\n\nimport\n\n{\n\nuseSendTransaction\n\n}\n\nfrom\n\n'wagmi'\n\n02\n\n\u2060\n\nimport\n\n{\n\nparseEther\n\n}\n\nfrom\n\n\"ethers/lib/utils\"\n\n02\n\n\u2060\n\nimport\n\n{\n\nparseEther\n\n}\n\nfrom\n\n\"ethers/lib/utils\"\n\n03\n\n03\n\n04\n\nfunction\n\nComponent\n\n(\n\n)\n\n{\n\n04\n\nfunction\n\nComponent\n\n(\n\n)\n\n{\n\n05\n\nconst\n\n{\n\ndata\n\n,\n\nisIdle\n\n,\n\nisError\n\n,\n\nisLoading\n\n,\n\nisSuccess\n\n,\n\nsendTransaction\n\n}\n\n=\n\n05\n\nconst\n\n{\n\ndata\n\n,\n\nisIdle\n\n,\n\nisError\n\n,\n\nisLoading\n\n,\n\nisSuccess\n\n,\n\nsendTransaction\n\n}\n\n=\n\n06\n\nuseSendTransaction\n\n(\n\n{\n\n06\n\nuseSendTransaction\n\n(\n\n{\n\n07\n\nto\n\n:\n\n'example.eth'\n\n,\n\n07\n\nto\n\n:\n\n'example.eth'\n\n,\n\n08\n\nvalue\n\n:\n\nparseEther\n\n(\n\n\"1\"\n\n)\n\n,\n\n08\n\nvalue\n\n:\n\nparseEther\n\n(\n\n\"1\"\n\n)\n\n,\n\n09\n\n}\n\n)\n\n09\n\n}\n\n)\n\n10\n\n10\n\n11\n\nreturn\n\n(\n\n11\n\nreturn\n\n(\n\n12\n\n<\n\ndiv\n\n>\n\n12\n\n<\n\ndiv\n\n>\n\n13\n\n{\n\nisIdle\n\n&&\n\n(\n\n13\n\n{\n\nisIdle\n\n&&\n\n(\n\n14\n\n<\n\nbutton disabled\n\n=\n\n{\n\nisLoading\n\n}\n\nonClick\n\n=\n\n{\n\n(\n\n)\n\n=>\n\nsendTransaction\n\n(\n\n)\n\n}\n\n>\n\n14\n\n<\n\nbutton disabled\n\n=\n\n{\n\nisLoading\n\n}\n\nonClick\n\n=\n\n{\n\n(\n\n)\n\n=>\n\nsendTransaction\n\n(\n\n)\n\n}\n\n>\n\n15\n\nSend\n\nTransaction\n\n15\n\nSend\n\nTransaction\n\n16\n\n<\n\n/\n\nbutton\n\n>\n\n16\n\n<\n\n/\n\nbutton\n\n>\n\n17\n\n)\n\n}\n\n17\n\n)\n\n}\n\n18\n\n{\n\nisLoading\n\n&&\n\n<\n\ndiv\n\n>\n\nCheck\n\nWallet\n\n<\n\n/\n\ndiv\n\n>\n\n}\n\n18\n\n{\n\nisLoading\n\n&&\n\n<\n\ndiv\n\n>\n\nCheck\n\nWallet\n\n<\n\n/\n\ndiv\n\n>\n\n}\n\n19\n\n{\n\nisSuccess\n\n&&\n\n<\n\ndiv\n\n>\n\nTransaction\n\n:\n\n{\n\nJSON\n\n.\n\nstringify\n\n(\n\ndata\n\n)\n\n}\n\n<\n\n/\n\ndiv\n\n>\n\n}\n\n19\n\n{\n\nisSuccess\n\n&&\n\n<\n\ndiv\n\n>\n\nTransaction\n\n:\n\n{\n\nJSON\n\n.\n\nstringify\n\n(\n\ndata\n\n)\n\n}\n\n<\n\n/\n\ndiv\n\n>\n\n}\n\n20\n\n{\n\nisError\n\n&&\n\n<\n\ndiv\n\n>\n\nError\n\nsending transaction\n\n<\n\n/\n\ndiv\n\n>\n\n}\n\n20\n\n{\n\nisError\n\n&&\n\n<\n\ndiv\n\n>\n\nError\n\nsending transaction\n\n<\n\n/\n\ndiv\n\n>\n\n}\n\n21\n\n<\n\n/\n\ndiv\n\n>\n\n21\n\n<\n\n/\n\ndiv\n\n>\n\n22\n\n)\n\n22\n\n)\n\n23\n\n}\n\n23\n\n}", "explanation": "**# Send transaction**\n\nThe `# Send transaction` section in the Magic Labs embedded wallet documentation explains how to use the `useSendTransaction` hook from the Wagmi library to send a transaction from a user's wallet.\n\n**Main purpose:**\n\nThe main purpose of this section is to guide developers on how to integrate the Magic Labs embedded wallet with Wagmi to enable users to send transactions. This involves importing required functions, using the `useSendTransaction` hook, handling different states of the transaction (idle, loading, succeeded, or failed), and displaying the transaction status to the user.\n\n**Key points:**\n\n1. Import the `useSendTransaction` hook from the Wagmi library.\n2. Use the `useSendTransaction` hook to send a transaction to a specified address.\n3. Handle different states of the transaction:\n\t* Idle: Display a \"Send Transaction\" button.\n\t* Loading: Display a \"Check Wallet\" message.\n\t* Success: Display the transaction hash.\n\t* Error: Display an error message.\n4. Use the `parseEther` function from the Ethers library to convert the transaction value to ether units.\n\n**Example usage:**\n\nThe example code demonstrates how to use the `useSendTransaction` hook to send an ETH transaction to the address \"example.eth\" with a value of 1 ether. It also shows how to handle the different states of the transaction and display the transaction status to the user.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/wallets/integrations/wagmi#chunk-6", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\nimport\n\n{\n\nuseBalance\n\n}\n\nfrom\n\n'wagmi'\n\n01\n\nimport\n\n{\n\nuseBalance\n\n}\n\nfrom\n\n'wagmi'\n\n02\n\n02\n\n03\n\nfunction\n\nComponent\n\n(\n\n)\n\n{\n\n03\n\nfunction\n\nComponent\n\n(\n\n)\n\n{\n\n04\n\nconst\n\n{\n\ndata\n\n,\n\nisError\n\n,\n\nisLoading\n\n}\n\n=\n\nuseBalance\n\n(\n\n{\n\n04\n\nconst\n\n{\n\ndata\n\n,\n\nisError\n\n,\n\nisLoading\n\n}\n\n=\n\nuseBalance\n\n(\n\n{\n\n05\n\naddress\n\n:\n\n'example.eth'\n\n,\n\n05\n\naddress\n\n:\n\n'example.eth'\n\n,\n\n06\n\n}\n\n)\n\n06\n\n}\n\n)\n\n07\n\n07\n\n08\n\nif\n\n(\n\nisLoading\n\n)\n\nreturn\n\n<\n\ndiv\n\n>\n\nFetching\n\nbalance\u2026\n\n<\n\n/\n\ndiv\n\n>\n\n08\n\nif\n\n(\n\nisLoading\n\n)\n\nreturn\n\n<\n\ndiv\n\n>\n\nFetching\n\nbalance\u2026\n\n<\n\n/\n\ndiv\n\n>\n\n09\n\nif\n\n(\n\nisError\n\n)\n\nreturn\n\n<\n\ndiv\n\n>\n\nError\n\nfetching balance\n\n<\n\n/\n\ndiv\n\n>\n\n09\n\nif\n\n(\n\nisError\n\n)\n\nreturn\n\n<\n\ndiv\n\n>\n\nError\n\nfetching balance\n\n<\n\n/\n\ndiv\n\n>\n\n10\n\nreturn\n\n(\n\n10\n\nreturn\n\n(\n\n11\n\n<\n\ndiv\n\n>\n\n11\n\n<\n\ndiv\n\n>\n\n12\n\nBalance\n\n:\n\n{\n\ndata\n\n?.\n\nformatted\n\n}\n\n{\n\ndata\n\n?.\n\nsymbol\n\n}\n\n12\n\nBalance\n\n:\n\n{\n\ndata\n\n?.\n\nformatted\n\n}\n\n{\n\ndata\n\n?.\n\nsymbol\n\n}\n\n13\n\n<\n\n/\n\ndiv\n\n>\n\n13\n\n<\n\n/\n\ndiv\n\n>\n\n14\n\n)\n\n14\n\n)\n\n15\n\n}\n\n15\n\n}", "explanation": "**# Check balance section explanation:**\n\nThis section is about retrieving and displaying the current balance of a user's wallet using the `useBalance` hook from the Wagmi library.\n\n**Main purpose:**\n\nThe main purpose of this code is to fetch and display the current balance of a user's wallet, handling any potential errors or loading states that may occur during the process.\n\n**Code breakdown:**\n\nThe code uses the `useBalance` hook to fetch the balance data, which returns an object with three properties:\n\n- `data`: The balance data, if available.\n- `isError`: A boolean indicating whether an error occurred during the fetch.\n- `isLoading`: A boolean indicating whether the balance is currently being fetched.\n\nThe code then uses conditional statements to render the balance data or error messages accordingly:\n\n1. If the balance is still being fetched, it displays a \"Fetching balance\u2026\" message.\n2. If an error occurred during the fetch, it displays an \"Error fetching balance\" message.\n3. If the balance data is successfully retrieved, it displays the balance value, formatted as a human-readable string and including a symbol (e.g., \" Balance: 12.34 ETH\").\n\n**Example usage:**\n\nTo use this code, simply replace the `address` parameter in the `useBalance` hook call with the actual address of the user's wallet. In this example, it's set to `'example.eth'`. The component will then fetch and display the balance data accordingly.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/wallets/integrations/wagmi#chunk-7", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 WAGMI Docs\n\n\u2022 Demo\n\nWAGMI Docs\n\nDemo", "explanation": "The \"#Resources\" section from the Magic Labs embedded wallet documentation is a collection of resources related to the WAGMI integration. \n\nMain purposes:\n\n1. **Documentation and tutorials**: WAGMI Docs here are likely a set of in-depth guides, API references, and tutorials that help developers set up, configure, and use WAGMI and its Magic Labs integration.\n\n2. **Evidence of the integration in action**: The Demo link allows users to see the Magic Labs embedded wallet in action with WAGMI, providing visual representation for better understanding of the integration's usage and potential.\n\nIn summary, these resources enable developers to learn from the WAGMI and Magic Labs tutorials, get technical support from the in-depth documentation, and obtain hands-on experience through the demo. This way, they can effectively integrate the Magic Labs embedded wallet with WAGMI.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/wallets/integrations/wagmi#chunk-8", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "This feature requires a subscription to Growth Plan", "explanation": "Based on the provided documentation, I'll explain the 'Bring Your Own IDP (Identity Provider)' feature and its main purpose in a clear and concise manner.\n\n**Bring Your Own IDP (Identity Provider)**\n=========================================\n\nThe Bring Your Own IDP (Identity Provider) feature is a customization option in Magic Labs that allows you to integrate your own Identity Provider (IdP) solution with the Magic embedded wallet. This feature enables you to use an existing IdP system or service to handle user authentication and authorization, providing more flexibility and control over the user experience.\n\n**Main Purpose:**\n----------------\n\nThe primary purpose of Bring Your Own IDP is to enable seamless user authentication and authorization without relying solely on Magic's default authentication mechanisms. By integrating your IdP solution, you can create a more comprehensive and customized user experience tailored to your specific requirements.\n\n**Key Benefits:**\n-----------------\n\n1.  **Increased flexibility**: Bring Your Own IDP allows you to choose the IdP system that best suits your needs, rather than relying on Magic's default options.\n2.  **Customization**: You can customize the user experience to align with your brand identity and user preferences.\n3.  **Integration with existing systems**: If you already have an IdP system in place, Bring Your Own IDP makes it easier to integrate it with the Magic embedded wallet.\n\n**Growth Plan Subscription Requirement**\n---------------------------------------\n\nAs mentioned in the documentation, this feature requires a subscription to the Growth Plan. This means that users with a Basic or Free Plan will not have access to this feature.\n\nOverall, the Bring Your Own IDP feature offers a high degree of flexibility and customization, making it a valuable option for Magic Labs users with more advanced authentication requirements.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/login/idp#chunk-1", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nTo enable this feature, please contact our Customer Success team using the help widget in the bottom-right corner of this page.\n\nOur OIDC extension integrates with your existing identity provider using OpenID Connect for authentication. It enables third-party identity providers to securely pass signed JWTs (OIDC tokens) for verification by Magic. This facilitates user authentication and registration while granting access to web3-capable wallets across 20+ blockchains.\n\n#\n\nOnly available with Dedicated Wallet.\n\nDedicated Wallet\n\nOIDC extension methods are available on the following client-side SDKs:\n\n\u2022 Web\n\n\u2022 iOS\n\n\u2022 Android\n\n\u2022 React Native\n\n\u2022 Flutter\n\nWeb\n\niOS\n\nAndroid\n\nReact Native\n\nFlutter", "explanation": "**Overview - #Compatibility Explanation**\n\nThe provided documentation section is about enabling the OIDC (OpenID Connect) extension for authentication. Here's a clear and concise summary:\n\n**Purpose:**\n\nThe OIDC extension allows third-party identity providers to securely pass signed JWTs (OIDC tokens) to Magic Labs for user authentication and registration, granting access to web3-capable wallets across multiple blockchains.\n\n**Key Points:**\n\n* Requires a dedicated wallet for this feature to be enabled.\n* Supports multiple client-side SDKs, including:\n\t+ Web\n\t+ iOS\n\t+ Android\n\t+ React Native\n\t+ Flutter\n\n**How to Enable:**\n\nTo enable this feature, users need to contact the Magic Labs Customer Success team using the help widget on the page.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/login/idp#chunk-2", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nOpenID Connect 1.0 is an identity layer built on top of the OAuth 2.0 protocol. It allows clients to confirm a user's identity through authentication by an authorization server and obtain fundamental profile details in a standardized, REST-like format.\n\nFor more information about this identity protocol, please visit the Open ID docs.\n\nthe Open ID docs", "explanation": "According to the provided documentation, OpenID Connect (OIDC) is an identity layer that builds upon the OAuth 2.0 protocol. It allows a client to verify a user's identity through an authorization server, and obtain basic profile information in a standardized format.\n\nIn simpler terms, OpenID Connect is a protocol that helps clients confirm a user's identity and get essential information about them. Its main purpose is to provide a secure and standardized way for applications to authenticate users and obtain their basic profile details.\n\nThink of it like an online authentication process, where a user provides their credentials (username and password) to the authorization server, which then verifies their identity and sends back the user's profile information to the client.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/login/idp#chunk-3", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nBefore getting started using a custom identity provider, you will need to acquire the following values that Magic relies on to connect with those providers.\n\nRequired (POST)\n\nDescription\n\nYes\n\nThe URL of the token issuer.\n\nYes\n\nThe identifier of the audience, often the same as the IdP client ID to which the token is issued.\n\nYes\n\nA human-readable identifier for the entity.\n\nsandbox_mode\n\nBool\n\nNo (defaults false)\n\nWhen true, provider does not enforce the expiry claim during ID token validation, which can be useful for testing environments.\n\nMagic Publishable API Key\n\nString\n\nYes\n\nThe publishable API key retrieved from the Magic dashboard.\n\nThe flow to finding the required information will vary depending on your identity provider. Please refer to the README in one of the various OIDC demos pertaining to your specific identity provider.\n\nWith this information, you can configure your application's custom identity provider by calling our API with the Magic secret key sent in the X-Magic-Secret-Key header.\n\nX-Magic-Secret-Key\n\nUpon successful configuration in Magic's backend, the API will return a providerId, which is a string of letters and numbers. Please save this, you will need this value each time you provision a wallet for your end user.\n\nproviderId\n\n#\n\nPlease call the POST endpoint for initial configuration of your application's custom identity provider with Magic. Subsequent updates can be accomplished by calling the PATCH endpoint.\n\n\u2022 POST Endpoint: https://api.magic.link/v1/api/magic_client/federated_idp\n\nhttps://api.magic.link/v1/api/magic_client/federated_idp\n\nExample POST call\n\nCopy\n\n01\n\nconst\n\nmagic_resp\n\n=\n\nawait\n\nfetch\n\n(\n\n\"https://api.magic.link/v1/api/magic_client/federated_idp\"\n\n,\n\n{\n\n01\n\nconst\n\nmagic_resp\n\n=\n\nawait\n\nfetch\n\n(\n\n\"https://api.magic.link/v1/api/magic_client/federated_idp\"\n\n,\n\n{\n\n02\n\nmethod\n\n:\n\n\"POST\"\n\n,\n\n02\n\nmethod\n\n:\n\n\"POST\"\n\n,\n\n03\n\nheaders\n\n:\n\n{\n\n03\n\nheaders\n\n:\n\n{\n\n04\n\n\"Content-Type\"\n\n:\n\n\"application/json\"\n\n,\n\n04\n\n\"Content-Type\"\n\n:\n\n\"application/json\"\n\n,\n\n05\n\n\"X-Magic-Secret-Key\"\n\n:\n\n\"<sk_live_xxxxxxx>\"\n\n,\n\n05\n\n\"X-Magic-Secret-Key\"\n\n:\n\n\"<sk_live_xxxxxxx>\"\n\n,\n\n06\n\n}\n\n,\n\n06\n\n}\n\n,\n\n07\n\nbody\n\n:\n\nJSON\n\n.\n\nstringify\n\n(\n\n{\n\n07\n\nbody\n\n:\n\nJSON\n\n.\n\nstringify\n\n(\n\n{\n\n08\n\nissuer\n\n:\n\n\"https://auth.examplecorp.com\"\n\n,\n\n08\n\nissuer\n\n:\n\n\"https://auth.examplecorp.com\"\n\n,\n\n09\n\naudience\n\n:\n\n\"Xk8v3hjZP5RfzqWb4JtMn0E2sYpL9A1u\"\n\n,\n\n09\n\naudience\n\n:\n\n\"Xk8v3hjZP5RfzqWb4JtMn0E2sYpL9A1u\"\n\n,\n\n10\n\ndisplay_name\n\n:\n\n\"example-corp-dev\"\n\n,\n\n10\n\ndisplay_name\n\n:\n\n\"example-corp-dev\"\n\n,\n\n11\n\nsandbox_mode\n\n:\n\ntrue\n\n11\n\nsandbox_mode\n\n:\n\ntrue\n\n12\n\n}\n\n)\n\n12\n\n}\n\n)\n\n13\n\n}\n\n)\n\n13\n\n}\n\n)\n\n14\n\n14\n\n15\n\nconst\n\nmagic_json\n\n=\n\nawait\n\nmagic_resp\n\n.\n\njson\n\n(\n\n)\n\n15\n\nconst\n\nmagic_json\n\n=\n\nawait\n\nmagic_resp\n\n.\n\njson\n\n(\n\n)\n\n16\n\nconst\n\nprovider_Id\n\n=\n\nmagic_json\n\n.\n\ndata\n\n[\n\n'id'\n\n]\n\n16\n\nconst\n\nprovider_Id\n\n=\n\nmagic_json\n\n.\n\ndata\n\n[\n\n'id'\n\n]\n\n17\n\n17\n\n18\n\n// Responds 200 OK with new provider on successful create\n\n18\n\n// Responds 200 OK with new provider on successful create\n\n19\n\n{\n\n19\n\n{\n\n20\n\n\"data\"\n\n:\n\n{\n\n20\n\n\"data\"\n\n:\n\n{\n\n21\n\n\"audience\"\n\n:\n\n\"Xk8v3hjZP5RfzqWb4JtMn0E2sYpL9A1u\"\n\n,\n\n21\n\n\"audience\"\n\n:\n\n\"Xk8v3hjZP5RfzqWb4JtMn0E2sYpL9A1u\"\n\n,\n\n22\n\n\"discovery_uri\"\n\n:\n\n\"https://auth.examplecorp.com/.well-known/openid-configuration\"\n\n,\n\n22\n\n\"discovery_uri\"\n\n:\n\n\"https://auth.examplecorp.com/.well-known/openid-configuration\"\n\n,\n\n23\n\n\"display_name\"\n\n:\n\n\"example-corp-dev\"\n\n,\n\n23\n\n\"display_name\"\n\n:\n\n\"example-corp-dev\"\n\n,\n\n24\n\n\"id\"\n\n:\n\n\"3LDeve5f56ouY_tN-jLJlop_hkLI1LLTNG8abaCD42E=\"\n\n,\n\n24\n\n\"id\"\n\n:\n\n\"3LDeve5f56ouY_tN-jLJlop_hkLI1LLTNG8abaCD42E=\"\n\n,\n\n25\n\n\"is_active\"\n\n:\n\ntrue\n\n,\n\n25\n\n\"is_active\"\n\n:\n\ntrue\n\n,\n\n26\n\n\"issuer\"\n\n:\n\n\"https://auth.examplecorp.com\"\n\n,\n\n26\n\n\"issuer\"\n\n:\n\n\"https://auth.examplecorp.com\"\n\n,\n\n27\n\n\"jwks_uri\"\n\n:\n\n\"https://auth.examplecorp.com/jwks.json\"\n\n,\n\n27\n\n\"jwks_uri\"\n\n:\n\n\"https://auth.examplecorp.com/jwks.json\"\n\n,\n\n28\n\n\"jwkset\"\n\n:\n\nnull\n\n,\n\n28\n\n\"jwkset\"\n\n:\n\nnull\n\n,\n\n29\n\n\"magic_client\"\n\n:\n\nnull\n\n,\n\n29\n\n\"magic_client\"\n\n:\n\nnull\n\n,\n\n30\n\n\"magic_client_id\"\n\n:\n\n\"3LDeve5f56ouY_tN-jLJlop_hkLI1LLTNG8abaCD42E=\"\n\n,\n\n30\n\n\"magic_client_id\"\n\n:\n\n\"3LDeve5f56ouY_tN-jLJlop_hkLI1LLTNG8abaCD42E=\"\n\n,\n\n31\n\n\"profile\"\n\n:\n\n\"custom\"\n\n,\n\n31\n\n\"profile\"\n\n:\n\n\"custom\"\n\n,\n\n32\n\n\"sandbox_mode\"\n\n:\n\ntrue\n\n,\n\n32\n\n\"sandbox_mode\"\n\n:\n\ntrue\n\n,\n\n33\n\n\"store_verified_email_enabled\"\n\n:\n\nfalse\n\n,\n\n33\n\n\"store_verified_email_enabled\"\n\n:\n\nfalse\n\n,\n\n34\n\n\"time_created\"\n\n:\n\n1707238543\n\n,\n\n34\n\n\"time_created\"\n\n:\n\n1707238543\n\n,\n\n35\n\n\"time_updated\"\n\n:\n\n1707238543\n\n,\n\n35\n\n\"time_updated\"\n\n:\n\n1707238543\n\n,\n\n36\n\n\"type\"\n\n:\n\n\"jwt\"\n\n36\n\n\"type\"\n\n:\n\n\"jwt\"\n\n37\n\n}\n\n,\n\n37\n\n}\n\n,\n\n38\n\n\"error_code\"\n\n:\n\n\"\"\n\n,\n\n38\n\n\"error_code\"\n\n:\n\n\"\"\n\n,\n\n39\n\n\"message\"\n\n:\n\n\"\"\n\n,\n\n39\n\n\"message\"\n\n:\n\n\"\"\n\n,\n\n40\n\n\"status\"\n\n:\n\n\"ok\"\n\n40\n\n\"status\"\n\n:\n\n\"ok\"\n\n41\n\n}\n\n41\n\n}\n\nTo update, you will need to affix your application's providerId to the PATCH endpoint. Only values passed to the request body will be updated.\n\nproviderId\n\n\u2022 PATCH Endpoint: https://api.magic.link/v1/api/magic_client/federated_idp/<provider_Id>\n\nhttps://api.magic.link/v1/api/magic_client/federated_idp/<provider_Id>\n\nExample PATCH call\n\nCopy\n\n01\n\nconst\n\nmagic_resp\n\n=\n\nawait\n\nfetch\n\n(\n\n\"https://api.magic.link/v1/api/magic_client/federated_idp/<provider_Id>\"\n\n,\n\n{\n\n01\n\nconst\n\nmagic_resp\n\n=\n\nawait\n\nfetch\n\n(\n\n\"https://api.magic.link/v1/api/magic_client/federated_idp/<provider_Id>\"\n\n,\n\n{\n\n02\n\nmethod\n\n:\n\n\"PATCH\"\n\n,\n\n02\n\nmethod\n\n:\n\n\"PATCH\"\n\n,\n\n03\n\nheaders\n\n:\n\n{\n\n03\n\nheaders\n\n:\n\n{\n\n04\n\n\"Content-Type\"\n\n:\n\n\"application/json\"\n\n,\n\n04\n\n\"Content-Type\"\n\n:\n\n\"application/json\"\n\n,\n\n05\n\n\"X-Magic-Secret-Key\"\n\n:\n\n\"<sk_live_xxxxxxx>\"\n\n,\n\n05\n\n\"X-Magic-Secret-Key\"\n\n:\n\n\"<sk_live_xxxxxxx>\"\n\n,\n\n06\n\n}\n\n,\n\n06\n\n}\n\n,\n\n07\n\nbody\n\n:\n\nJSON\n\n.\n\nstringify\n\n(\n\n{\n\n07\n\nbody\n\n:\n\nJSON\n\n.\n\nstringify\n\n(\n\n{\n\n08\n\nissuer\n\n:\n\n\"https://auth.examplecorp2.com\"\n\n,\n\n08\n\nissuer\n\n:\n\n\"https://auth.examplecorp2.com\"\n\n,\n\n09\n\ndisplay_name\n\n:\n\n\"example-corp2-dev\"\n\n,\n\n09\n\ndisplay_name\n\n:\n\n\"example-corp2-dev\"\n\n,\n\n10\n\nsandbox_mode\n\n:\n\nfalse\n\n10\n\nsandbox_mode\n\n:\n\nfalse\n\n11\n\n}\n\n)\n\n11\n\n}\n\n)\n\n12\n\n}\n\n)\n\n12\n\n}\n\n)\n\n13\n\n// Only values passed to body will be updated\n\n13\n\n// Only values passed to body will be updated\n\n14\n\n14\n\n15\n\nconst\n\nmagic_json\n\n=\n\nawait\n\nmagic_resp\n\n.\n\njson\n\n(\n\n)\n\n15\n\nconst\n\nmagic_json\n\n=\n\nawait\n\nmagic_resp\n\n.\n\njson\n\n(\n\n)\n\n16\n\nconst\n\nprovider_Id\n\n=\n\nmagic_json\n\n.\n\ndata\n\n[\n\n'id'\n\n]\n\n16\n\nconst\n\nprovider_Id\n\n=\n\nmagic_json\n\n.\n\ndata\n\n[\n\n'id'\n\n]\n\n17\n\n17\n\n18\n\n// Responds 200 OK with updated provider on successful patch\n\n18\n\n// Responds 200 OK with updated provider on successful patch\n\n19\n\n{\n\n19\n\n{\n\n20\n\n\"data\"\n\n:\n\n{\n\n20\n\n\"data\"\n\n:\n\n{\n\n21\n\n\"audience\"\n\n:\n\n\"Xk8v3hjZP5RfzqWb4JtMn0E2sYpL9A1u\"\n\n,\n\n21\n\n\"audience\"\n\n:\n\n\"Xk8v3hjZP5RfzqWb4JtMn0E2sYpL9A1u\"\n\n,\n\n22\n\n\"discovery_uri\"\n\n:\n\n\"https://auth.examplecorp2.com/.well-known/openid-configuration\"\n\n,\n\n22\n\n\"discovery_uri\"\n\n:\n\n\"https://auth.examplecorp2.com/.well-known/openid-configuration\"\n\n,\n\n23\n\n\"display_name\"\n\n:\n\n\"example-corp2-dev\"\n\n,\n\n23\n\n\"display_name\"\n\n:\n\n\"example-corp2-dev\"\n\n,\n\n24\n\n\"id\"\n\n:\n\n\"3LDeve5f56ouY_tN-jLJlop_hkLI1LLTNG8abaCD42E=\"\n\n,\n\n24\n\n\"id\"\n\n:\n\n\"3LDeve5f56ouY_tN-jLJlop_hkLI1LLTNG8abaCD42E=\"\n\n,\n\n25\n\n\"is_active\"\n\n:\n\ntrue\n\n,\n\n25\n\n\"is_active\"\n\n:\n\ntrue\n\n,\n\n26\n\n\"issuer\"\n\n:\n\n\"https://auth.examplecorp2.com\"\n\n,\n\n26\n\n\"issuer\"\n\n:\n\n\"https://auth.examplecorp2.com\"\n\n,\n\n27\n\n\"jwks_uri\"\n\n:\n\n\"https://auth.examplecorp2.com/jwks.json\"\n\n,\n\n27\n\n\"jwks_uri\"\n\n:\n\n\"https://auth.examplecorp2.com/jwks.json\"\n\n,\n\n28\n\n\"jwkset\"\n\n:\n\nnull\n\n,\n\n28\n\n\"jwkset\"\n\n:\n\nnull\n\n,\n\n29\n\n\"magic_client\"\n\n:\n\nnull\n\n,\n\n29\n\n\"magic_client\"\n\n:\n\nnull\n\n,\n\n30\n\n\"magic_client_id\"\n\n:\n\n\"3LDeve5f56ouY_tN-jLJlop_hkLI1LLTNG8abaCD42E=\"\n\n,\n\n30\n\n\"magic_client_id\"\n\n:\n\n\"3LDeve5f56ouY_tN-jLJlop_hkLI1LLTNG8abaCD42E=\"\n\n,\n\n31\n\n\"profile\"\n\n:\n\n\"custom\"\n\n,\n\n31\n\n\"profile\"\n\n:\n\n\"custom\"\n\n,\n\n32\n\n\"sandbox_mode\"\n\n:\n\nfalse\n\n,\n\n32\n\n\"sandbox_mode\"\n\n:\n\nfalse\n\n,\n\n33\n\n\"store_verified_email_enabled\"\n\n:\n\nfalse\n\n,\n\n33\n\n\"store_verified_email_enabled\"\n\n:\n\nfalse\n\n,\n\n34\n\n\"time_created\"\n\n:\n\n1707238543\n\n,\n\n34\n\n\"time_created\"\n\n:\n\n1707238543\n\n,\n\n35\n\n\"time_updated\"\n\n:\n\n1707238544\n\n,\n\n35\n\n\"time_updated\"\n\n:\n\n1707238544\n\n,\n\n36\n\n\"type\"\n\n:\n\n\"jwt\"\n\n36\n\n\"type\"\n\n:\n\n\"jwt\"\n\n37\n\n}\n\n,\n\n37\n\n}\n\n,\n\n38\n\n\"error_code\"\n\n:\n\n\"\"\n\n,\n\n38\n\n\"error_code\"\n\n:\n\n\"\"\n\n,\n\n39\n\n\"message\"\n\n:\n\n\"\"\n\n,\n\n39\n\n\"message\"\n\n:\n\n\"\"\n\n,\n\n40\n\n\"status\"\n\n:\n\n\"ok\"\n\n40\n\n\"status\"\n\n:\n\n\"ok\"\n\n41\n\n}\n\n41\n\n}", "explanation": "The '#Configuration - #Endpoints' section from the Magic Labs embedded wallet documentation explains how to configure a custom identity provider (IdP) for authentication with Magic.\n\n**Main Purpose:**\n\nThe primary purpose of this section is to guide developers through the process of acquiring the necessary values required to connect Magic with a custom IdP. These values include:\n\n* Token issuer URL\n* Audience identifier (often the same as the IdP client ID)\n* Display name for the entity\n* Magic Publishable API Key (retrieved from the Magic dashboard)\n* Option for sandbox mode (whether to enforce token expiry or not)\n\n**Endpoints:**\n\nThe section outlines two critical endpoints for interacting with the Magic API:\n\n* **POST Endpoint:** Used for initial configuration of a custom IdP\n* **PATCH Endpoint:** Used for updating the settings of a previously configured custom IdP\n\nBoth endpoints require the Magic secret key to be sent in the `X-Magic-Secret-Key` header and the `providerId` to be used for subsequent updates ( PATCH endpoint).\n\n**Request Body:**\n\nWhen calling either of these endpoints, the request body should include relevant information for configuration or update. This body may contain properties like issuer URL, audience identifier, display name, and sandbox mode.\n\n**Response:**\n\nUpon successful configuration or update, the Magic API responds with an HTTP `200 OK` status and a JSON object containing the updated provider information, including an `id` field ( `providerId`), among other attributes.\n\nIn summary, this section is essential for developers to configure a custom identity provider for authentication with Magic, as it outlines the necessary values, endpoints, and the expected response from the API.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/login/idp#chunk-4", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nTo use your own identity provider, you must install both magic-sdk and the OIDC extension: @magic-ext/oidc\n\nmagic-sdk\n\n@magic-ext/oidc\n\nCopy\n\n01\n\nnpm\n\ninstall\n\nmagic-sdk @magic-ext/oidc\n\n01\n\nnpm\n\ninstall\n\nmagic-sdk @magic-ext/oidc\n\n02\n\n\u2060\n\n02\n\n\u2060", "explanation": "**Installation Section Explanation:**\n\nThis section is about installing the necessary libraries to use a custom identity provider (IdP) with the Magic Labs embedded wallet.\n\n**Main Purpose:**\n\nThe main purpose is to guide users on how to set up their environment by installing two required packages:\n\n1. `magic-sdk`\n2. The OIDC (OpenID Connect) extension `@magic-ext/oidc`\n\n**Installation Steps:**\n\nTo install these packages, users are instructed to run the following npm command in their terminal:\n\n```\nnpm install magic-sdk @magic-ext/oidc\n```\n\nThis command installs both `magic-sdk` and the OIDC extension `@magic-ext/oidc`, which are necessary for using a custom IdP with Magic Labs embedded wallet.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/login/idp#chunk-5", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n#\n\nImport the necessary modules into your application. You'll need the magic-sdk, @magic-ext/oidc, and your identity provider's OIDC client library. Here's an example in JavaScript:\n\nmagic-sdk\n\n@magic-ext/oidc\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n\"magic-sdk\"\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n\"magic-sdk\"\n\n;\n\n02\n\nimport\n\n{\n\nOpenIdExtension\n\n}\n\nfrom\n\n\"@magic-ext/oidc\"\n\n;\n\n02\n\nimport\n\n{\n\nOpenIdExtension\n\n}\n\nfrom\n\n\"@magic-ext/oidc\"\n\n;\n\n03\n\n// this is an example of an OIDC client library\n\n03\n\n// this is an example of an OIDC client library\n\n04\n\nimport\n\n{\n\nuseAuth0\n\n}\n\nfrom\n\n\"@auth0/auth0-react\"\n\n;\n\n04\n\nimport\n\n{\n\nuseAuth0\n\n}\n\nfrom\n\n\"@auth0/auth0-react\"\n\n;", "explanation": "**Initialization: Import Required Modules**\n\nThis documentation section provides an essential step for setting up the Magic Labs embedded wallet. Its main purpose is to guide developers on how to import the necessary modules into their application for successful authentication.\n\n**Main Purpose:**\n\nThe primary goal is to import the required modules, which include:\n\n1. `magic-sdk`: Magic Labs' SDK, which handles authentication and wallet functionality.\n2. `@magic-ext/oidc`: A library for OpenID Connect (OIDC) extension, used for secure authentication.\n3. Identity provider's OIDC client library (in this example, `@auth0/auth0-react`): This library is required for authentication with the specific identity provider.\n\n**Import Syntax:**\n\nThe provided JavaScript example demonstrates how to import these modules:\n\n```javascript\nimport { Magic } from 'magic-sdk';\nimport { OpenIdExtension } from '@magic-ext/oidc';\nimport { useAuth0 } from '@auth0/auth0-react';\n```\n\nBy importing these modules, developers can integrate the Magic Labs embedded wallet into their application, enabling secure authentication and wallet functionality.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/login/idp#chunk-6", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCreate an instance of the Magic SDK with your API key. Ensure that you include the OpenIdExtension to enable OIDC functionality:\n\nOpenIdExtension\n\nCopy\n\n01\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'<your_magic_api_key>'\n\n,\n\n{\n\n01\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'<your_magic_api_key>'\n\n,\n\n{\n\n02\n\n// exposes the openid module in your magic instance\n\n02\n\n// exposes the openid module in your magic instance\n\n03\n\nextensions\n\n:\n\n[\n\nnew\n\nOpenIdExtension\n\n(\n\n)\n\n]\n\n,\n\n03\n\nextensions\n\n:\n\n[\n\nnew\n\nOpenIdExtension\n\n(\n\n)\n\n]\n\n,\n\n04\n\n}\n\n)\n\n;\n\n04\n\n}\n\n)\n\n;", "explanation": "**Initialize the Magic SDK**\n\nThe `#Initialize the Magic SDK` section is about creating an instance of the Magic SDK, a software development kit used for authentication and identity verification. This instance requires a unique API key provided by Magic Labs to function.\n\n**Main Purpose:**\n\nThe main purpose of this section is to guide users in setting up the Magic SDK, which enables developers to integrate Magic's authentication features into their applications.\n\n**Key Steps:**\n\n1.  Create a new instance of the Magic SDK using the `Magic` constructor.\n2.  Pass the Magic API key as an argument to the constructor.\n3.  Include the `OpenIdExtension` to enable OAuth 2.0 (OpenID Connect) functionality.\n4.  The `OpenIdExtension` exposes the OIDC module in the Magic instance, making it possible to use various OIDC functionality such as authentication flows and token verification.\n\nBy following these steps, developers can initialize the Magic SDK and start using its features, including authentication, login, and identity verification, in their applications.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/login/idp#chunk-7", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nNow that you've set up a Magic client, you can proceed to authenticate users via your preferred OIDC Client:\n\nCopy\n\n01\n\n// identity providers have different ways to authenticate a user\n\n01\n\n// identity providers have different ways to authenticate a user\n\n02\n\n// this is an example of an OIDC client library's login methods\n\n02\n\n// this is an example of an OIDC client library's login methods\n\n03\n\nimport\n\n{\n\nuseAuth0\n\n}\n\nfrom\n\n\"@auth0/auth0-react\"\n\n;\n\n03\n\nimport\n\n{\n\nuseAuth0\n\n}\n\nfrom\n\n\"@auth0/auth0-react\"\n\n;\n\n04\n\n04\n\n05\n\nconst\n\n{\n\nloginWithRedirect\n\n}\n\n=\n\nuseAuth0\n\n(\n\n)\n\n;\n\n05\n\nconst\n\n{\n\nloginWithRedirect\n\n}\n\n=\n\nuseAuth0\n\n(\n\n)\n\n;\n\n06\n\n06\n\n07\n\nasync\n\nfunction\n\nloginUser\n\n(\n\n)\n\n{\n\n07\n\nasync\n\nfunction\n\nloginUser\n\n(\n\n)\n\n{\n\n08\n\nawait\n\nloginWithRedirect\n\n(\n\n)\n\n;\n\n08\n\nawait\n\nloginWithRedirect\n\n(\n\n)\n\n;\n\n09\n\n}\n\n;\n\n09\n\n}\n\n;\n\nAfter authentication, you can obtain the OIDC token from the identity provider. Pass this token, along with the providerId, to the Magic method loginWithOIDC:\n\nproviderId\n\nloginWithOIDC\n\nCopy\n\n01\n\n// identity providers have varying ways to obtain an OIDC token\n\n01\n\n// identity providers have varying ways to obtain an OIDC token\n\n02\n\n// this is an example of an OIDC client library's token methods\n\n02\n\n// this is an example of an OIDC client library's token methods\n\n03\n\nimport\n\n{\n\nuseAuth0\n\n}\n\nfrom\n\n\"@auth0/auth0-react\"\n\n;\n\n03\n\nimport\n\n{\n\nuseAuth0\n\n}\n\nfrom\n\n\"@auth0/auth0-react\"\n\n;\n\n04\n\n04\n\n05\n\nasync\n\nfunction\n\ngetMagicWallet\n\n(\n\n)\n\n{\n\n05\n\nasync\n\nfunction\n\ngetMagicWallet\n\n(\n\n)\n\n{\n\n06\n\nconst\n\n{\n\ngetIdTokenClaims\n\n}\n\n=\n\nuseAuth0\n\n(\n\n)\n\n;\n\n06\n\nconst\n\n{\n\ngetIdTokenClaims\n\n}\n\n=\n\nuseAuth0\n\n(\n\n)\n\n;\n\n07\n\n07\n\n08\n\nconst\n\ntoken\n\n=\n\nawait\n\ngetIdTokenClaims\n\n(\n\n)\n\n;\n\n08\n\nconst\n\ntoken\n\n=\n\nawait\n\ngetIdTokenClaims\n\n(\n\n)\n\n;\n\n09\n\n// resolves a DID token and stores a valid session to browser\n\n09\n\n// resolves a DID token and stores a valid session to browser\n\n10\n\nconst\n\ndidToken\n\n=\n\nawait\n\nmagic\n\n.\n\nopenid\n\n.\n\nloginWithOIDC\n\n(\n\n{\n\n10\n\nconst\n\ndidToken\n\n=\n\nawait\n\nmagic\n\n.\n\nopenid\n\n.\n\nloginWithOIDC\n\n(\n\n{\n\n11\n\njwt\n\n:\n\ntoken\n\n.\n\n__raw\n\n,\n\n11\n\njwt\n\n:\n\ntoken\n\n.\n\n__raw\n\n,\n\n12\n\nproviderId\n\n:\n\n'<your_magic_provider_id>'\n\n,\n\n12\n\nproviderId\n\n:\n\n'<your_magic_provider_id>'\n\n,\n\n13\n\n)\n\n}\n\n;\n\n13\n\n)\n\n}\n\n;\n\n14\n\n}\n\n;\n\n14\n\n}\n\n;\n\nYou can also utilize relevant Magic client SDK methods in the User Module to extend further functionality:\n\nCopy\n\n01\n\n// metadata will only contain issuer and publicAddress\n\n01\n\n// metadata will only contain issuer and publicAddress\n\n02\n\nconst\n\nmetadata\n\n=\n\nawait\n\nmagic\n\n.\n\nuser\n\n.\n\ngetInfo\n\n(\n\n)\n\n;\n\n02\n\nconst\n\nmetadata\n\n=\n\nawait\n\nmagic\n\n.\n\nuser\n\n.\n\ngetInfo\n\n(\n\n)\n\n;\n\n03\n\n// DID token default lifespan 15 minutes\n\n03\n\n// DID token default lifespan 15 minutes\n\n04\n\nconst\n\ndidToken\n\n=\n\nawait\n\nmagic\n\n.\n\nuser\n\n.\n\ngetIdToken\n\n(\n\n)\n\n;\n\n04\n\nconst\n\ndidToken\n\n=\n\nawait\n\nmagic\n\n.\n\nuser\n\n.\n\ngetIdToken\n\n(\n\n)\n\n;\n\n05\n\n// returns true if auth user has a valid Magic session\n\n05\n\n// returns true if auth user has a valid Magic session\n\n06\n\nconst\n\nboolean\n\n=\n\nawait\n\nmagic\n\n.\n\nuser\n\n.\n\nisLoggedIn\n\n(\n\n)\n\n;\n\n06\n\nconst\n\nboolean\n\n=\n\nawait\n\nmagic\n\n.\n\nuser\n\n.\n\nisLoggedIn\n\n(\n\n)\n\n;\n\nA full example incorporating web3 and Magic OIDC:\n\nCopy\n\n01\n\nimport\n\nWeb3\n\nfrom\n\n'web3'\n\n;\n\n01\n\nimport\n\nWeb3\n\nfrom\n\n'web3'\n\n;\n\n02\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n03\n\nimport\n\n{\n\nOpenIdExtension\n\n}\n\nfrom\n\n'@magic-ext/oidc'\n\n;\n\n03\n\nimport\n\n{\n\nOpenIdExtension\n\n}\n\nfrom\n\n'@magic-ext/oidc'\n\n;\n\n04\n\n04\n\n05\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'<your_magic_api_key>'\n\n,\n\n{\n\n05\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'<your_magic_api_key>'\n\n,\n\n{\n\n06\n\nextensions\n\n:\n\n[\n\nnew\n\nOpenIdExtension\n\n(\n\n)\n\n]\n\n,\n\n06\n\nextensions\n\n:\n\n[\n\nnew\n\nOpenIdExtension\n\n(\n\n)\n\n]\n\n,\n\n07\n\n}\n\n)\n\n;\n\n07\n\n}\n\n)\n\n;\n\n08\n\nconst\n\nDID\n\n=\n\nawait\n\nmagic\n\n.\n\nopenid\n\n.\n\nloginWithOIDC\n\n(\n\n{\n\n08\n\nconst\n\nDID\n\n=\n\nawait\n\nmagic\n\n.\n\nopenid\n\n.\n\nloginWithOIDC\n\n(\n\n{\n\n09\n\n// this oidcToken comes from the identity provider\n\n09\n\n// this oidcToken comes from the identity provider\n\n10\n\njwt\n\n:\n\noidcToken\n\n,\n\n10\n\njwt\n\n:\n\noidcToken\n\n,\n\n11\n\n// this providerId is provided by Magic\n\n11\n\n// this providerId is provided by Magic\n\n12\n\nproviderId\n\n:\n\nmyProviderId\n\n,\n\n12\n\nproviderId\n\n:\n\nmyProviderId\n\n,\n\n13\n\n}\n\n)\n\n;\n\n13\n\n}\n\n)\n\n;\n\n14\n\n14\n\n15\n\nconst\n\nweb3\n\n=\n\nnew\n\nWeb3\n\n(\n\nmagic\n\n.\n\nrpcProvider\n\n)\n\n;\n\n15\n\nconst\n\nweb3\n\n=\n\nnew\n\nWeb3\n\n(\n\nmagic\n\n.\n\nrpcProvider\n\n)\n\n;\n\n16\n\nawait\n\nweb3\n\n.\n\neth\n\n.\n\ngetAccounts\n\n(\n\n)\n\n;\n\n16\n\nawait\n\nweb3\n\n.\n\neth\n\n.\n\ngetAccounts\n\n(\n\n)\n\n;", "explanation": "The '#Usage' section of the provided documentation is a tutorial on how to use the Magic Labs embedded wallet to authenticate users using OpenID Connect (OIDC) and interact with the Ethereum blockchain through Web3.\n\nMain Purpose:\nThe main purpose of this documentation is to guide users on how to:\n\n1. Authenticate users using OIDC with different identity providers.\n2. Obtain an OIDC token from the identity provider.\n3. Pass the OIDC token and provider ID to the Magic method `loginWithOIDC`.\n4. Obtain a Magic Wallet DID token, which represents a valid session on the client.\n5. Utilize the Magic client SDK methods in the User Module to extend further functionality.\n\nKey Steps:\n1. Set up a Magic client and authenticate users via OIDC Client.\n2. Obtain an OIDC token from the identity provider using an OIDC library.\n3. Pass the OIDC token and provider ID to the Magic method `loginWithOIDC`.\n4. Use the Magic client SDK methods in the User Module to get user information, check the user's session, and obtain a Magic Wallet DID token.\n\nThe documentation also provides an example of a full integration of Web3 and Magic OIDC, which demonstrates how to obtain a Magic Wallet DID token and use it to interact with the Ethereum blockchain through Web3.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/login/idp#chunk-8", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nThe following are OIDC Extension Specific errors.\n\nMagic RPC Error: [-32603] Internal error: Given fields are invalid: ['provider_id']\n\nMagic RPC Error: [-32603] Internal error: Given fields are invalid: ['provider_id']\n\n\u2060This error will be thrown if you try calling loginWithOIDC and pass in an incorrect providerId.\n\nloginWithOIDC\n\nproviderId", "explanation": "**Error Description:**\n\nThe \"#Errors - Given fields are invalid\" section in the Magic Labs embedded wallet documentation describes a specific error that occurs when trying to log in through OpenID Connect (OIDC) using the `loginWithOIDC` method.\n\n**Main Purpose:**\n\nThe main purpose of this error description is to inform developers about the potential issue that can arise when passing an incorrect `providerId` to the `loginWithOIDC` method. This error can be encountered when the `providerId` field is invalid or does not match an existing provider.\n\n**Possible Solution:**\n\nTo resolve this error, developers should ensure that the `providerId` passed to the `loginWithOIDC` method is correct and matches an existing provider. The correct way to pass a valid `providerId` is not explicitly mentioned in the provided documentation snippet, but it is typically done by specifying the unique identifier of the OIDC provider.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/login/idp#chunk-9", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "Magic RPC Error: [-32603] Internal error: Given federated identity token is invalid or malformed\n\nMagic RPC Error: [-32603] Internal error: Given federated identity\n\ntoken is invalid or malformed\n\nThis error can be thrown when the OIDC token is invalid in some way. The token could simply be malformed, or the token could be correct, but has mismatched provider claims. In other cases, depending on the identity provider, the Issuer Domain may require a slash to be appended or removed. It could also be that the sub does not match the provider sub.", "explanation": "**Error Explanation:**\n\nWhen encountering the error \"Given federated identity token is invalid or malformed\", it indicates that there's a problem with the OpenID Connect (OIDC) token being used for authentication.\n\n**Possible Causes:**\n\n1. **Token Malformation**: The OIDC token may be incorrectly formatted or structured, making it unreadable.\n2. **Incorrect Provider Claims**: The token may have incorrect or missing claims, which doesn't align with the expectations of the authentication system.\n3. **Issuer Domain Issues**: The issuer's domain name might require a slash to be appended or removed, which affects the token's validity.\n4. **Subject Mismatch**: The subject (sub) identifier in the token doesn't match the expected value from the identity provider.\n\n**Main Purpose:**\n\nThe main purpose of this error message is to alert the application or the user that there's an issue with the OIDC token being used for authentication. It provides a hint that the token needs to be re-generated, re-obtained, or re-formatted to ensure its correctness and validity.\n\n**Action Item:**\n\nTo resolve this error, the application or the user should:\n\n1. Verify the OIDC token's validity and integrity.\n2. Check the token's structure and claims to ensure they match the expectations of the authentication system.\n3. Adjust the issuer's domain name as needed.\n4. Obtain a new OIDC token from the identity provider if the subject (sub) identifier is mismatched.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/login/idp#chunk-10", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 Auth0 demo\n\n\u2022 Cognito demo\n\nAuth0 demo\n\nCognito demo", "explanation": "The \"#Resources\" section in the given documentation URL is a collection of links to external resources, specifically demonstrations or examples of how to use the Magic authentication functionality in conjunction with two-third-party identity providers (IDPs): Auth0 and Amazon Cognito.\n\nThis section's main purpose is to provide Magic developers with easily accessible, working examples of how to integrate Magic with these IDPs for a seamless authentication experience.\n\nThese resources can be particularly helpful for developers who are new to using Magic with specific IDPs, as they can use the demonstrations as a starting point for their own implementation, saving time and effort in testing and debugging the integration process.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/login/idp#chunk-11", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "\u2060This feature requires an enterprise agreement", "explanation": "Account Linking is a feature provided by Magic Labs' embedded wallets, which allows users to link their external accounts (e.g., email, phone number, social media, or other authentication services) to their primary account on your application.\n\n**Main Purpose**: \n\nThe main purpose of Account Linking is to let users create accounts by leveraging their existing external accounts instead of requiring a new, separate sign-up process. This provides a seamless user experience, easy account recovery, and fewer password-related issues.\n\n**Key Benefits**:\n\n1. Simplified sign-up: Users can quickly create an account using a familiar external account.\n2. Easy account recovery: Users can recover their account using their already linked external account.\n3. Reduced password-related issues: Users don't need to remember complex passwords.\n4. Streamlined authentication: Users can authenticate with a single click using their linked external account.\n\nBy enabling Account Linking, you can enhance user convenience, reduce friction in the sign-up process, and improve overall user satisfaction in your application.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/features/account-linking#chunk-1", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nAccount linking lets developers help users connect different methods of logging in to one wallet and one account. It solves the issue where users have accidentally created more than one account and have a hard time remembering which account has their active wallet.\n\nAccount linking requires the submission of two identity proofs, which are actually just signed link delegation requests encoded as ethereum typed data (eip712). The schema for these requests differ only by their issuer, which is the signing party of any request. These proofs are collected by the developer from both parties, and can then be submitted to an API endpoint to link the accounts. Once linked, Magic only requires the identity proof (signed delegation request) from the primary account to perform the unlinking process.\n\neip712\n\nThis process has been designed to be as native and compatible with web3 and associated standards as possible. The payload being signed is eip712 typed data and as such will have a nicely formatted representation created by the wallet UI and the requests/signed proofs involved are readable and usable in any smart contract written in solidity. The process is secured by public key cryptography and with that comes reasonable guarantees that accounts cannot be linked by anyone who does not have access to the private key associated with the wallet of the associated account.\n\n#\n\nAccount Linking is available on all platforms via REST API.", "explanation": "**Overview of Account Linking**\n\nAccount linking is a feature provided by Magic Labs that enables developers to connect multiple login methods to a single wallet and account. This resolves the issue of duplicate accounts and forgotten login credentials.\n\n**Key Components:**\n\n1. **Signed Link Delegation Requests**: Developers collect two identity proofs (signed link delegation requests) from users. These requests are encoded as Ethereum typed data (EIP-712) and are differs only in their issuer, which represents the signing party.\n2. **Submission to API Endpoint**: The collected identity proofs are submitted to an API endpoint to link the accounts.\n3. **Secure Linking Process**: The process uses public key cryptography, securing the linking with reasonable guarantees that only authorized parties can access wallet accounts.\n\n**Main Purpose:**\n\nThe primary purpose of account linking is to simplify the login experience for users by allowing them to connect multiple login methods to a single account, while ensuring the security and integrity of the linking process.\n\n**Availability:**\n\nAccount linking is available on all platforms via the REST API, making it a versatile solution for developers to implement in their applications.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/features/account-linking#chunk-2", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nBefore linking, you should ensure that both accounts to be linked follow the following rules:\n\n\u2022 Both accounts must be for the Magic product, not Fortmatic\n\n\u2022 Both accounts must have successfully completed a login and been granted a session\n\n\u2022 Neither account can already be linked to a primary account\n\n\u2022 Both accounts must belong to the same Magic Dedicated Wallet application\n\nBoth accounts must be for the Magic product, not Fortmatic\n\nBoth accounts must have successfully completed a login and been granted a session\n\nNeither account can already be linked to a primary account\n\nBoth accounts must belong to the same Magic Dedicated Wallet application\n\nDedicated Wallet\n\n#\n\nThe following is an example of how to generate the identity proof in JavaScript using the Magic SDK and web3 packages. It\u2019s based on another example which can be found here.\n\nhere\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\nimport\n\nWeb3\n\nfrom\n\n'web3'\n\n;\n\n02\n\nimport\n\nWeb3\n\nfrom\n\n'web3'\n\n;\n\n03\n\n03\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n05\n\nconst\n\nweb3\n\n=\n\nnew\n\nWeb3\n\n(\n\nmagic\n\n.\n\nrpcProvider\n\n)\n\n;\n\n05\n\nconst\n\nweb3\n\n=\n\nnew\n\nWeb3\n\n(\n\nmagic\n\n.\n\nrpcProvider\n\n)\n\n;\n\n06\n\n06\n\n07\n\n// eip712 structs\n\n07\n\n// eip712 structs\n\n08\n\nconst\n\ntypes\n\n=\n\n{\n\n08\n\nconst\n\ntypes\n\n=\n\n{\n\n09\n\n\"DelegateIdentityRequest\"\n\n:\n\n[\n\n09\n\n\"DelegateIdentityRequest\"\n\n:\n\n[\n\n10\n\n{\n\n\"name\"\n\n:\n\n\"subject\"\n\n,\n\n\"type\"\n\n:\n\n\"WalletIdentity\"\n\n}\n\n,\n\n10\n\n{\n\n\"name\"\n\n:\n\n\"subject\"\n\n,\n\n\"type\"\n\n:\n\n\"WalletIdentity\"\n\n}\n\n,\n\n11\n\n{\n\n\"name\"\n\n:\n\n\"delegatedTo\"\n\n,\n\n\"type\"\n\n:\n\n\"UserIdentity\"\n\n}\n\n,\n\n11\n\n{\n\n\"name\"\n\n:\n\n\"delegatedTo\"\n\n,\n\n\"type\"\n\n:\n\n\"UserIdentity\"\n\n}\n\n,\n\n12\n\n{\n\n\"name\"\n\n:\n\n\"issuer\"\n\n,\n\n\"type\"\n\n:\n\n\"address\"\n\n}\n\n,\n\n12\n\n{\n\n\"name\"\n\n:\n\n\"issuer\"\n\n,\n\n\"type\"\n\n:\n\n\"address\"\n\n}\n\n,\n\n13\n\n{\n\n\"name\"\n\n:\n\n\"action\"\n\n,\n\n\"type\"\n\n:\n\n\"string\"\n\n}\n\n,\n\n13\n\n{\n\n\"name\"\n\n:\n\n\"action\"\n\n,\n\n\"type\"\n\n:\n\n\"string\"\n\n}\n\n,\n\n14\n\n{\n\n\"name\"\n\n:\n\n\"validFrom\"\n\n,\n\n\"type\"\n\n:\n\n\"uint256\"\n\n}\n\n,\n\n14\n\n{\n\n\"name\"\n\n:\n\n\"validFrom\"\n\n,\n\n\"type\"\n\n:\n\n\"uint256\"\n\n}\n\n,\n\n15\n\n{\n\n\"name\"\n\n:\n\n\"validTo\"\n\n,\n\n\"type\"\n\n:\n\n\"uint256\"\n\n}\n\n,\n\n15\n\n{\n\n\"name\"\n\n:\n\n\"validTo\"\n\n,\n\n\"type\"\n\n:\n\n\"uint256\"\n\n}\n\n,\n\n16\n\n{\n\n\"name\"\n\n:\n\n\"nonce\"\n\n,\n\n\"type\"\n\n:\n\n\"uint256\"\n\n}\n\n16\n\n{\n\n\"name\"\n\n:\n\n\"nonce\"\n\n,\n\n\"type\"\n\n:\n\n\"uint256\"\n\n}\n\n17\n\n]\n\n,\n\n17\n\n]\n\n,\n\n18\n\n\"WalletIdentity\"\n\n:\n\n[\n\n18\n\n\"WalletIdentity\"\n\n:\n\n[\n\n19\n\n{\n\n\"name\"\n\n:\n\n\"address\"\n\n,\n\n\"type\"\n\n:\n\n\"address\"\n\n}\n\n19\n\n{\n\n\"name\"\n\n:\n\n\"address\"\n\n,\n\n\"type\"\n\n:\n\n\"address\"\n\n}\n\n20\n\n]\n\n,\n\n20\n\n]\n\n,\n\n21\n\n\"UserIdentity\"\n\n:\n\n[\n\n21\n\n\"UserIdentity\"\n\n:\n\n[\n\n22\n\n{\n\n\"name\"\n\n:\n\n\"userId\"\n\n,\n\n\"type\"\n\n:\n\n\"string\"\n\n}\n\n,\n\n22\n\n{\n\n\"name\"\n\n:\n\n\"userId\"\n\n,\n\n\"type\"\n\n:\n\n\"string\"\n\n}\n\n,\n\n23\n\n]\n\n,\n\n23\n\n]\n\n,\n\n24\n\n\"EIP712Domain\"\n\n:\n\n[\n\n24\n\n\"EIP712Domain\"\n\n:\n\n[\n\n25\n\n{\n\n\"name\"\n\n:\n\n\"name\"\n\n,\n\n\"type\"\n\n:\n\n\"string\"\n\n}\n\n,\n\n25\n\n{\n\n\"name\"\n\n:\n\n\"name\"\n\n,\n\n\"type\"\n\n:\n\n\"string\"\n\n}\n\n,\n\n26\n\n{\n\n\"name\"\n\n:\n\n\"version\"\n\n,\n\n\"type\"\n\n:\n\n\"string\"\n\n}\n\n,\n\n26\n\n{\n\n\"name\"\n\n:\n\n\"version\"\n\n,\n\n\"type\"\n\n:\n\n\"string\"\n\n}\n\n,\n\n27\n\n{\n\n\"name\"\n\n:\n\n\"chainId\"\n\n,\n\n\"type\"\n\n:\n\n\"uint256\"\n\n}\n\n,\n\n27\n\n{\n\n\"name\"\n\n:\n\n\"chainId\"\n\n,\n\n\"type\"\n\n:\n\n\"uint256\"\n\n}\n\n,\n\n28\n\n{\n\n\"name\"\n\n:\n\n\"salt\"\n\n,\n\n\"type\"\n\n:\n\n\"bytes32\"\n\n}\n\n28\n\n{\n\n\"name\"\n\n:\n\n\"salt\"\n\n,\n\n\"type\"\n\n:\n\n\"bytes32\"\n\n}\n\n29\n\n]\n\n29\n\n]\n\n30\n\n}\n\n;\n\n30\n\n}\n\n;\n\n31\n\n31\n\n32\n\nconst\n\ndomain\n\n=\n\n{\n\n32\n\nconst\n\ndomain\n\n=\n\n{\n\n33\n\nname\n\n:\n\n\"magic.link\"\n\n,\n\n33\n\nname\n\n:\n\n\"magic.link\"\n\n,\n\n34\n\nversion\n\n:\n\n\"1.0.1\"\n\n,\n\n34\n\nversion\n\n:\n\n\"1.0.1\"\n\n,\n\n35\n\nchainId\n\n:\n\n1\n\n,\n\n35\n\nchainId\n\n:\n\n1\n\n,\n\n36\n\nsalt\n\n:\n\n\"0x4ee0aed8162862010446039a54bee2e6c4f331822a46c9dc4d4d681d15e95bee\"\n\n36\n\nsalt\n\n:\n\n\"0x4ee0aed8162862010446039a54bee2e6c4f331822a46c9dc4d4d681d15e95bee\"\n\n37\n\n}\n\n;\n\n37\n\n}\n\n;\n\n38\n\n38\n\n39\n\nconst\n\nmessage\n\n=\n\n{\n\n39\n\nconst\n\nmessage\n\n=\n\n{\n\n40\n\n\"subject\"\n\n:\n\n{\n\n40\n\n\"subject\"\n\n:\n\n{\n\n41\n\n\"address\"\n\n:\n\nprimary_address\n\n// the wallet address of the primary account for which the secondary accounts become delegates\n\n41\n\n\"address\"\n\n:\n\nprimary_address\n\n// the wallet address of the primary account for which the secondary accounts become delegates\n\n42\n\n}\n\n,\n\n42\n\n}\n\n,\n\n43\n\n\"delegatedTo\"\n\n:\n\n{\n\n43\n\n\"delegatedTo\"\n\n:\n\n{\n\n44\n\n\"userId\"\n\n:\n\nsecondary_auth_user_id\n\n,\n\n// the `sub` claim from the DID token of the secondary account\n\n44\n\n\"userId\"\n\n:\n\nsecondary_auth_user_id\n\n,\n\n// the `sub` claim from the DID token of the secondary account\n\n45\n\n}\n\n,\n\n45\n\n}\n\n,\n\n46\n\n\"issuer\"\n\n:\n\nsigner_address\n\n,\n\n// the logged-in user's public address\n\n46\n\n\"issuer\"\n\n:\n\nsigner_address\n\n,\n\n// the logged-in user's public address\n\n47\n\n\"action\"\n\n:\n\n\"link\"\n\n,\n\n47\n\n\"action\"\n\n:\n\n\"link\"\n\n,\n\n48\n\n\"validFrom\"\n\n:\n\nDate\n\n.\n\nnow\n\n(\n\n)\n\n,\n\n48\n\n\"validFrom\"\n\n:\n\nDate\n\n.\n\nnow\n\n(\n\n)\n\n,\n\n49\n\n\"validTo\"\n\n:\n\n0\n\n,\n\n// Leave this at 0, expiry is currently default to 10 minutes after issue\n\n49\n\n\"validTo\"\n\n:\n\n0\n\n,\n\n// Leave this at 0, expiry is currently default to 10 minutes after issue\n\n50\n\n\"nonce\"\n\n:\n\n1\n\n50\n\n\"nonce\"\n\n:\n\n1\n\n51\n\n}\n\n;\n\n51\n\n}\n\n;\n\n52\n\n52\n\n53\n\n// Generate the message data\n\n53\n\n// Generate the message data\n\n54\n\nconst\n\ndata\n\n=\n\nJSON\n\n.\n\nstringify\n\n(\n\n{\n\n54\n\nconst\n\ndata\n\n=\n\nJSON\n\n.\n\nstringify\n\n(\n\n{\n\n55\n\ntypes\n\n:\n\ntypes\n\n,\n\n55\n\ntypes\n\n:\n\ntypes\n\n,\n\n56\n\ndomain\n\n:\n\ndomain\n\n,\n\n56\n\ndomain\n\n:\n\ndomain\n\n,\n\n57\n\nprimaryType\n\n:\n\n\"DelegateIdentityRequest\"\n\n,\n\n57\n\nprimaryType\n\n:\n\n\"DelegateIdentityRequest\"\n\n,\n\n58\n\nmessage\n\n:\n\nmessage\n\n58\n\nmessage\n\n:\n\nmessage\n\n59\n\n}\n\n)\n\n;\n\n59\n\n}\n\n)\n\n;\n\n60\n\n60\n\n61\n\n// Generate the signature\n\n61\n\n// Generate the signature\n\n62\n\nlet\n\nsignature\n\n;\n\n62\n\nlet\n\nsignature\n\n;\n\n63\n\nweb3\n\n.\n\ncurrentProvider\n\n.\n\nsendAsync\n\n(\n\n63\n\nweb3\n\n.\n\ncurrentProvider\n\n.\n\nsendAsync\n\n(\n\n64\n\n{\n\n64\n\n{\n\n65\n\nmethod\n\n:\n\n\"eth_signTypedData_v3\"\n\n,\n\n65\n\nmethod\n\n:\n\n\"eth_signTypedData_v3\"\n\n,\n\n66\n\nparams\n\n:\n\n[\n\nsigner\n\n,\n\ndata\n\n]\n\n,\n\n66\n\nparams\n\n:\n\n[\n\nsigner\n\n,\n\ndata\n\n]\n\n,\n\n67\n\nfrom\n\n:\n\nsigner\n\n67\n\nfrom\n\n:\n\nsigner\n\n68\n\n}\n\n,\n\n68\n\n}\n\n,\n\n69\n\nfunction\n\n(\n\nerr\n\n,\n\nresult\n\n)\n\n{\n\n69\n\nfunction\n\n(\n\nerr\n\n,\n\nresult\n\n)\n\n{\n\n70\n\nif\n\n(\n\nerr\n\n)\n\n{\n\n70\n\nif\n\n(\n\nerr\n\n)\n\n{\n\n71\n\nreturn\n\nconsole\n\n.\n\nerror\n\n(\n\nerr\n\n)\n\n;\n\n71\n\nreturn\n\nconsole\n\n.\n\nerror\n\n(\n\nerr\n\n)\n\n;\n\n72\n\n}\n\n72\n\n}\n\n73\n\nsignature\n\n=\n\nresult\n\n.\n\nresult\n\n.\n\nsubstring\n\n(\n\n2\n\n)\n\n;\n\n73\n\nsignature\n\n=\n\nresult\n\n.\n\nresult\n\n.\n\nsubstring\n\n(\n\n2\n\n)\n\n;\n\n74\n\nconst\n\nr\n\n=\n\n\"0x\"\n\n+\n\nsignature\n\n.\n\nsubstring\n\n(\n\n0\n\n,\n\n64\n\n)\n\n;\n\n74\n\nconst\n\nr\n\n=\n\n\"0x\"\n\n+\n\nsignature\n\n.\n\nsubstring\n\n(\n\n0\n\n,\n\n64\n\n)\n\n;\n\n75\n\nconst\n\ns\n\n=\n\n\"0x\"\n\n+\n\nsignature\n\n.\n\nsubstring\n\n(\n\n64\n\n,\n\n128\n\n)\n\n;\n\n75\n\nconst\n\ns\n\n=\n\n\"0x\"\n\n+\n\nsignature\n\n.\n\nsubstring\n\n(\n\n64\n\n,\n\n128\n\n)\n\n;\n\n76\n\nconst\n\nv\n\n=\n\nparseInt\n\n(\n\nsignature\n\n.\n\nsubstring\n\n(\n\n128\n\n,\n\n130\n\n)\n\n,\n\n16\n\n)\n\n;\n\n76\n\nconst\n\nv\n\n=\n\nparseInt\n\n(\n\nsignature\n\n.\n\nsubstring\n\n(\n\n128\n\n,\n\n130\n\n)\n\n,\n\n16\n\n)\n\n;\n\n77\n\n}\n\n77\n\n}\n\n78\n\n)\n\n;\n\n78\n\n)\n\n;\n\n79\n\n79\n\n80\n\nconst\n\nproof\n\n=\n\n{\n\n80\n\nconst\n\nproof\n\n=\n\n{\n\n81\n\n// base64 encode the message data\n\n81\n\n// base64 encode the message data\n\n82\n\nmsg\n\n:\n\nbtoa\n\n(\n\ndata\n\n)\n\n,\n\nsig\n\n:\n\nsignature\n\n82\n\nmsg\n\n:\n\nbtoa\n\n(\n\ndata\n\n)\n\n,\n\nsig\n\n:\n\nsignature\n\n83\n\n}\n\n83\n\n}", "explanation": "The documentation section you provided is about linking two Magic user accounts, which is a process of granting permission for one user account (secondary account) to act on behalf of another user account (primary account). This process is also known as delegating identity. It's used in the Magic Labs embedded wallet to enable a system where multiple users can have access to the same wallet.\n\n**Main steps and purpose:**\n\nThe main purpose of this section is to provide a JavaScript code example for generating an identity proof, which is a JSON object containing:\n\n1. Message data (data)\n2. Signature (sig)\n\nThe signature is obtained using the `eth_signTypedData_v3` method from the Web3 provider, which utilizes the sender's private key to digitally sign the message data.\n\n**Prerequisites:**\n\nBefore linking two Magic user accounts, both accounts must meet the following conditions:\n\n1. They must be for the Magic product, not Fortmatic.\n2. They must have successfully completed a login and been granted a session.\n3. Neither account can already be linked to a primary account.\n4. Both accounts must belong to the same Magic Dedicated Wallet application.\n\n**Code explanation:**\n\nThe provided JavaScript code example generates the identity proof by defining several constant objects:\n\n1. Types: An object containing the EIP712 structs definitions.\n2. Domain: An object containing the EIP712 domain properties.\n3. Message: An object containing the message data to be signed.\n4. Data: The JSON stringified message object.\n5. Signature: The digital signature generated using the sender's private key.\n\nThe code uses the Web3 provider's `sendAsync` method to call the `eth_signTypedData_v3` method, passing the sender's private key and the message data as parameters. The resulting signature is then extracted, parsed, and formatted into a final proof object (base64 encoded message data and the signature).\n\n**Deployment:**\n\nThis approach can be deployed in various use cases, such as:\n\n1. Delegated authentication: Allowing one user account to act on behalf of another user account.\n2. Multi-signature wallets: Requiring multiple users to sign transactions before they are executed.\n\nNote that this documentation is part of the Magic Labs embedded wallet's authentication features and is intended to help developers integrate the necessary linking and proof-generating logic into their applications.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/features/account-linking#chunk-3", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nOnce both proofs have been collected, they should be combined and submitted to the account linking endpoint at https://api.magic.link/v1/admin/auth/user/link. Here is an example of how that interaction should look.\n\nhttps://api.magic.link/v1/admin/auth/user/link\n\nRequest:\n\n\u2022 POST | https://api.magic.link/v1/admin/auth/user/link\n\nPOST\n\nhttps://api.magic.link/v1/admin/auth/user/link\n\nHeaders:\n\n\u2022 Content-Type: application/json\n\n\u2022 X-Magic-Secret-Key: sk_live...\n\nContent-Type\n\napplication/json\n\nX-Magic-Secret-Key\n\nsk_live...\n\nPayload:\n\nCopy\n\n01\n\n\u2060\n\n{\n\n01\n\n\u2060\n\n{\n\n02\n\n\"primary_proof\"\n\n:\n\n{\n\n02\n\n\"primary_proof\"\n\n:\n\n{\n\n03\n\n\"msg\"\n\n:\n\n03\n\n\"msg\"\n\n:\n\n04\n\n\"eyJwcmltYXJ5VHlwZSI6ICJEZWxlZ2F0ZUlkZW50aXR5UmVxdWVzdCIsICJ0eXBlcyI6IHsiSWRlbnRpdHkiOiBbeyJuYW1lIjogInVzZXJJZCIsICJ0eXBlIjogInN0cmluZyJ9LCB7Im5hbWUiOiAiYWRkcmVzcyIsICJ0eXBlIjogImFkZHJlc3MifV0sICJFSVA3MTJEb21haW4iOiBbeyJuYW1lIjogIm5hbWUiLCAidHlwZSI6ICJzdHJpbmcifSwgeyJuYW1lIjogInZlcnNpb24iLCAidHlwZSI6ICJzdHJpbmcifSwgeyJuYW1lIjogImNoYWluSWQiLCAidHlwZSI6ICJ1aW50MjU2In1dLCAiRGVsZWdhdGVJZGVudGl0eVJlcXVlc3QiOiBbeyJuYW1lIjogInN1YmplY3QiLCAidHlwZSI6ICJJZGVudGl0eSJ9LCB7Im5hbWUiOiAiZGVsZWdhdGVkVG8iLCAidHlwZSI6ICJJZGVudGl0eSJ9LCB7Im5hbWUiOiAiaXNzdWVyIiwgInR5cGUiOiAiYWRkcmVzcyJ9LCB7Im5hbWUiOiAidmFsaWRGcm9tIiwgInR5cGUiOiAidWludDI1NiJ9LCB7Im5hbWUiOiAidmFsaWRUbyIsICJ0eXBlIjogInVpbnQyNTYifSwgeyJuYW1lIjogIm5vbmNlIiwgInR5cGUiOiAidWludDI1NiJ9XX0sICJkb21haW4iOiB7Im5hbWUiOiAibWFnaWMubGluayIsICJ2ZXJzaW9uIjogIjEuMC4xIiwgImNoYWluSWQiOiAxfSwgIm1lc3NhZ2UiOiB7InN1YmplY3QiOiB7InVzZXJJZCI6ICJhdXRoIHVzZXIgaWQiLCAiYWRkcmVzcyI6ICIweDQwODNEYTdDN0E3N2I3ZDA1NjkyOTM0Yzg4YmRGNDNEMDMxYWRiNmEifSwgImRlbGVnYXRlZFRvIjogeyJ1c2VySWQiOiAiYXV0aCB1c2VyIGlkIiwgImFkZHJlc3MiOiAiMHg0MDgzRGE3QzdBNzdiN2QwNTY5MjkzNGM4OGJkRjQzRDAzMWFkYjZhIn0sICJpc3N1ZXIiOiAiMHg0MDgzRGE3QzdBNzdiN2QwNTY5MjkzNGM4OGJkRjQzRDAzMWFkYjZhIiwgInZhbGlkRnJvbSI6IDE2NjYxMTYyMDcsICJ2YWxpZFRvIjogMjY4OTQ5MTMyOTAsICJub25jZSI6IDF9fQ==\"\n\n,\n\n04\n\n\"eyJwcmltYXJ5VHlwZSI6ICJEZWxlZ2F0ZUlkZW50aXR5UmVxdWVzdCIsICJ0eXBlcyI6IHsiSWRlbnRpdHkiOiBbeyJuYW1lIjogInVzZXJJZCIsICJ0eXBlIjogInN0cmluZyJ9LCB7Im5hbWUiOiAiYWRkcmVzcyIsICJ0eXBlIjogImFkZHJlc3MifV0sICJFSVA3MTJEb21haW4iOiBbeyJuYW1lIjogIm5hbWUiLCAidHlwZSI6ICJzdHJpbmcifSwgeyJuYW1lIjogInZlcnNpb24iLCAidHlwZSI6ICJzdHJpbmcifSwgeyJuYW1lIjogImNoYWluSWQiLCAidHlwZSI6ICJ1aW50MjU2In1dLCAiRGVsZWdhdGVJZGVudGl0eVJlcXVlc3QiOiBbeyJuYW1lIjogInN1YmplY3QiLCAidHlwZSI6ICJJZGVudGl0eSJ9LCB7Im5hbWUiOiAiZGVsZWdhdGVkVG8iLCAidHlwZSI6ICJJZGVudGl0eSJ9LCB7Im5hbWUiOiAiaXNzdWVyIiwgInR5cGUiOiAiYWRkcmVzcyJ9LCB7Im5hbWUiOiAidmFsaWRGcm9tIiwgInR5cGUiOiAidWludDI1NiJ9LCB7Im5hbWUiOiAidmFsaWRUbyIsICJ0eXBlIjogInVpbnQyNTYifSwgeyJuYW1lIjogIm5vbmNlIiwgInR5cGUiOiAidWludDI1NiJ9XX0sICJkb21haW4iOiB7Im5hbWUiOiAibWFnaWMubGluayIsICJ2ZXJzaW9uIjogIjEuMC4xIiwgImNoYWluSWQiOiAxfSwgIm1lc3NhZ2UiOiB7InN1YmplY3QiOiB7InVzZXJJZCI6ICJhdXRoIHVzZXIgaWQiLCAiYWRkcmVzcyI6ICIweDQwODNEYTdDN0E3N2I3ZDA1NjkyOTM0Yzg4YmRGNDNEMDMxYWRiNmEifSwgImRlbGVnYXRlZFRvIjogeyJ1c2VySWQiOiAiYXV0aCB1c2VyIGlkIiwgImFkZHJlc3MiOiAiMHg0MDgzRGE3QzdBNzdiN2QwNTY5MjkzNGM4OGJkRjQzRDAzMWFkYjZhIn0sICJpc3N1ZXIiOiAiMHg0MDgzRGE3QzdBNzdiN2QwNTY5MjkzNGM4OGJkRjQzRDAzMWFkYjZhIiwgInZhbGlkRnJvbSI6IDE2NjYxMTYyMDcsICJ2YWxpZFRvIjogMjY4OTQ5MTMyOTAsICJub25jZSI6IDF9fQ==\"\n\n,\n\n05\n\n\"sig\"\n\n:\n\n\"0xb0d71d4dc2118f9ed1c86d5eb983e4021161bea7a61449386628d482b8ebe08c3f46c6c43852689265c530e7c011c4b9aefc9e77d85ce6af6ab39aa9fa50f79e1c\"\n\n05\n\n\"sig\"\n\n:\n\n\"0xb0d71d4dc2118f9ed1c86d5eb983e4021161bea7a61449386628d482b8ebe08c3f46c6c43852689265c530e7c011c4b9aefc9e77d85ce6af6ab39aa9fa50f79e1c\"\n\n06\n\n}\n\n,\n\n06\n\n}\n\n,\n\n07\n\n\"secondary_proof\"\n\n:\n\n{\n\n07\n\n\"secondary_proof\"\n\n:\n\n{\n\n08\n\n\"msg\"\n\n:\n\n08\n\n\"msg\"\n\n:\n\n09\n\n\"eyJwcmltYXJ5VHlwZSI6ICJEZWxlZ2F0ZUlkZW50aXR5UmVxdWVzdCIsICJ0eXBlcyI6IHsiSWRlbnRpdHkiOiBbeyJuYW1lIjogInVzZXJJZCIsICJ0eXBlIjogInN0cmluZyJ9LCB7Im5hbWUiOiAiYWRkcmVzcyIsICJ0eXBlIjogImFkZHJlc3MifV0sICJFSVA3MTJEb21haW4iOiBbeyJuYW1lIjogIm5hbWUiLCAidHlwZSI6ICJzdHJpbmcifSwgeyJuYW1lIjogInZlcnNpb24iLCAidHlwZSI6ICJzdHJpbmcifSwgeyJuYW1lIjogImNoYWluSWQiLCAidHlwZSI6ICJ1aW50MjU2In1dLCAiRGVsZWdhdGVJZGVudGl0eVJlcXVlc3QiOiBbeyJuYW1lIjogInN1YmplY3QiLCAidHlwZSI6ICJJZGVudGl0eSJ9LCB7Im5hbWUiOiAiZGVsZWdhdGVkVG8iLCAidHlwZSI6ICJJZGVudGl0eSJ9LCB7Im5hbWUiOiAiaXNzdWVyIiwgInR5cGUiOiAiYWRkcmVzcyJ9LCB7Im5hbWUiOiAidmFsaWRGcm9tIiwgInR5cGUiOiAidWludDI1NiJ9LCB7Im5hbWUiOiAidmFsaWRUbyIsICJ0eXBlIjogInVpbnQyNTYifSwgeyJuYW1lIjogIm5vbmNlIiwgInR5cGUiOiAidWludDI1NiJ9XX0sICJkb21haW4iOiB7Im5hbWUiOiAibWFnaWMubGluayIsICJ2ZXJzaW9uIjogIjEuMC4xIiwgImNoYWluSWQiOiAxfSwgIm1lc3NhZ2UiOiB7InN1YmplY3QiOiB7InVzZXJJZCI6ICJhdXRoIHVzZXIgaWQiLCAiYWRkcmVzcyI6ICIweDQwODNEYTdDN0E3N2I3ZDA1NjkyOTM0Yzg4YmRGNDNEMDMxYWRiNmEifSwgImRlbGVnYXRlZFRvIjogeyJ1c2VySWQiOiAiYXV0aCB1c2VyIGlkIiwgImFkZHJlc3MiOiAiMHg0MDgzRGE3QzdBNzdiN2QwNTY5MjkzNGM4OGJkRjQzRDAzMWFkYjZhIn0sICJpc3N1ZXIiOiAiMHg4NjFkN0FkNTVBNDNEZDViRTg3MzAwNDJhMTdiNzI1NDBmMjliZjEzIiwgInZhbGlkRnJvbSI6IDE2NjYxMTYyMDcsICJ2YWxpZFRvIjogMjY4OTQ5MTMyOTAsICJub25jZSI6IDF9fQ==\"\n\n,\n\n09\n\n\"eyJwcmltYXJ5VHlwZSI6ICJEZWxlZ2F0ZUlkZW50aXR5UmVxdWVzdCIsICJ0eXBlcyI6IHsiSWRlbnRpdHkiOiBbeyJuYW1lIjogInVzZXJJZCIsICJ0eXBlIjogInN0cmluZyJ9LCB7Im5hbWUiOiAiYWRkcmVzcyIsICJ0eXBlIjogImFkZHJlc3MifV0sICJFSVA3MTJEb21haW4iOiBbeyJuYW1lIjogIm5hbWUiLCAidHlwZSI6ICJzdHJpbmcifSwgeyJuYW1lIjogInZlcnNpb24iLCAidHlwZSI6ICJzdHJpbmcifSwgeyJuYW1lIjogImNoYWluSWQiLCAidHlwZSI6ICJ1aW50MjU2In1dLCAiRGVsZWdhdGVJZGVudGl0eVJlcXVlc3QiOiBbeyJuYW1lIjogInN1YmplY3QiLCAidHlwZSI6ICJJZGVudGl0eSJ9LCB7Im5hbWUiOiAiZGVsZWdhdGVkVG8iLCAidHlwZSI6ICJJZGVudGl0eSJ9LCB7Im5hbWUiOiAiaXNzdWVyIiwgInR5cGUiOiAiYWRkcmVzcyJ9LCB7Im5hbWUiOiAidmFsaWRGcm9tIiwgInR5cGUiOiAidWludDI1NiJ9LCB7Im5hbWUiOiAidmFsaWRUbyIsICJ0eXBlIjogInVpbnQyNTYifSwgeyJuYW1lIjogIm5vbmNlIiwgInR5cGUiOiAidWludDI1NiJ9XX0sICJkb21haW4iOiB7Im5hbWUiOiAibWFnaWMubGluayIsICJ2ZXJzaW9uIjogIjEuMC4xIiwgImNoYWluSWQiOiAxfSwgIm1lc3NhZ2UiOiB7InN1YmplY3QiOiB7InVzZXJJZCI6ICJhdXRoIHVzZXIgaWQiLCAiYWRkcmVzcyI6ICIweDQwODNEYTdDN0E3N2I3ZDA1NjkyOTM0Yzg4YmRGNDNEMDMxYWRiNmEifSwgImRlbGVnYXRlZFRvIjogeyJ1c2VySWQiOiAiYXV0aCB1c2VyIGlkIiwgImFkZHJlc3MiOiAiMHg0MDgzRGE3QzdBNzdiN2QwNTY5MjkzNGM4OGJkRjQzRDAzMWFkYjZhIn0sICJpc3N1ZXIiOiAiMHg4NjFkN0FkNTVBNDNEZDViRTg3MzAwNDJhMTdiNzI1NDBmMjliZjEzIiwgInZhbGlkRnJvbSI6IDE2NjYxMTYyMDcsICJ2YWxpZFRvIjogMjY4OTQ5MTMyOTAsICJub25jZSI6IDF9fQ==\"\n\n,\n\n10\n\n\"sig\"\n\n:\n\n\"0x65d4886622c1b0ad919049e36a250b97b704c621de7adca452550ae47cc72fd912817c03f8e16a0ab46283a2de351b551e747e7cd729abfccfd6cad31853ee001b\"\n\n10\n\n\"sig\"\n\n:\n\n\"0x65d4886622c1b0ad919049e36a250b97b704c621de7adca452550ae47cc72fd912817c03f8e16a0ab46283a2de351b551e747e7cd729abfccfd6cad31853ee001b\"\n\n11\n\n}\n\n11\n\n}\n\n12\n\n}\n\n12\n\n}\n\nWhen successful, a response like the one below should be expected.\n\nStatus:\n\n\u2022 200\n\n200\n\nHeaders:\n\n\u2022 Content-Type: application/json\n\nContent-Type\n\napplication/json\n\nResponse:\n\nCopy\n\n01\n\n\u2060\n\n{\n\n01\n\n\u2060\n\n{\n\n02\n\n\"data\"\n\n:\n\n{\n\n02\n\n\"data\"\n\n:\n\n{\n\n03\n\n\"primary_address\"\n\n:\n\n\"0x98fe962f93f2f3fe9e4d62a88971a943677634d4184c7aa72ce86b9f95af9a19\"\n\n,\n\n03\n\n\"primary_address\"\n\n:\n\n\"0x98fe962f93f2f3fe9e4d62a88971a943677634d4184c7aa72ce86b9f95af9a19\"\n\n,\n\n04\n\n\"result\"\n\n:\n\n\"linked\"\n\n,\n\n04\n\n\"result\"\n\n:\n\n\"linked\"\n\n,\n\n05\n\n\"secondary_auth_user_id\"\n\n:\n\n\"3LDeve5f56ouY_tN-jLJlop_hkLI1LLTNG8abaCD42E=\"\n\n05\n\n\"secondary_auth_user_id\"\n\n:\n\n\"3LDeve5f56ouY_tN-jLJlop_hkLI1LLTNG8abaCD42E=\"\n\n06\n\n}\n\n,\n\n06\n\n}\n\n,\n\n07\n\n\"status\"\n\n:\n\n\"ok\"\n\n,\n\n07\n\n\"status\"\n\n:\n\n\"ok\"\n\n,\n\n08\n\n\"error_code\"\n\n:\n\n\"\"\n\n,\n\n08\n\n\"error_code\"\n\n:\n\n\"\"\n\n,\n\n09\n\n\"message\"\n\n:\n\n\"\"\n\n09\n\n\"message\"\n\n:\n\n\"\"\n\n10\n\n}\n\n10\n\n}\n\nBoth account proofs must be less than 10 minutes old when sending to the link endpoint, otherwise the proof will be invalid/expired", "explanation": "# Linking via Admin API\n\nThe \"# Linking via Admin API\" section of the Magic Link documentation outlines the process for linking user accounts using the Magic Link Admin API.\n\n**Purpose**\n\nThe main purpose of this feature is to enable authorized administrators to link user accounts to their respective wallets using a secure and cryptographically verified method. This ensures that users' wallets are securely linked to their accounts, reducing the risk of unauthorized access or wallet funds being compromised.\n\n**Step-by-Step Process**\n\nTo link a user's account to their wallet using the Admin API, you must follow these steps:\n\n1.  **Collect account proofs**: Collect both primary and secondary account proofs (JSON objects) for the user's account.\n2.  **Submit proof**: Send a POST request to the `https://api.magic.link/v1/admin/auth/user/link` endpoint with the collected proofs as the request payload.\n3.  **Verify proofs**: Verify that both account proofs are valid (less than 10 minutes old) before sending them to the link endpoint.\n4.  **API response**: Receive a successful response (200 status code) with linked account information.\n\n**Example Response**\n\nA successful response will contain the following information:\n\n*   **Primary address**: The associated primary wallet address.\n*   **Result**: The status of the linking process, which should be \"linked\".\n*   **Secondary auth user ID**: A unique identifier for the linked secondary authentication user.\n*   **Status**: An \"ok\" status indicating that the linking process was successful.\n*   **Error code** and **message**: Empty strings, indicating that no errors occurred during the linking process.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/features/account-linking#chunk-4", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 UserNotEligibleForLinking:Status: 403Error Code: USER_NOT_ELIGIBLE_FOR_LINKINGMessage: \"User account not eligible for linking due to {reason}.\"Reasons:invalid_user_typeuser_is_adminuser_unverifiedalready_linkedclient_mismatch\n\n\u2022 InvalidIdentityProof:Status: 400Error Code: INVALID_IDENTITY_PROOFMessage: \"Identity proof(s) are invalid or expired.\"\n\nUserNotEligibleForLinking:\n\nUserNotEligibleForLinking\n\n\u2022 Status: 403\n\n\u2022 Error Code: USER_NOT_ELIGIBLE_FOR_LINKING\n\n\u2022 Message: \"User account not eligible for linking due to {reason}.\"Reasons:invalid_user_typeuser_is_adminuser_unverifiedalready_linkedclient_mismatch\n\nStatus: 403\n\n403\n\nError Code: USER_NOT_ELIGIBLE_FOR_LINKING\n\nUSER_NOT_ELIGIBLE_FOR_LINKING\n\nMessage: \"User account not eligible for linking due to {reason}.\"\n\n\"User account not eligible for linking due to {reason}.\"\n\n\u2022 Reasons:invalid_user_typeuser_is_adminuser_unverifiedalready_linkedclient_mismatch\n\nReasons:\n\n\u2022 invalid_user_type\n\n\u2022 user_is_admin\n\n\u2022 user_unverified\n\n\u2022 already_linked\n\n\u2022 client_mismatch\n\ninvalid_user_type\n\ninvalid_user_type\n\nuser_is_admin\n\nuser_is_admin\n\nuser_unverified\n\nuser_unverified\n\nalready_linked\n\nalready_linked\n\nclient_mismatch\n\nclient_mismatch\n\nInvalidIdentityProof:\n\nInvalidIdentityProof\n\n\u2022 Status: 400\n\n\u2022 Error Code: INVALID_IDENTITY_PROOF\n\n\u2022 Message: \"Identity proof(s) are invalid or expired.\"\n\nStatus: 400\n\n400\n\nError Code: INVALID_IDENTITY_PROOF\n\nINVALID_IDENTITY_PROOF\n\nMessage: \"Identity proof(s) are invalid or expired.\"\n\n\"Identity proof(s) are invalid or expired.\"\n\nWhen a secondary account is linked to a primary account the secondary account will no longer access its own wallet and instead will access the primary account's wallet upon successful login. This action is reversible and access to the secondary account's wallet can be restored when the two accounts are unlinked.", "explanation": "Let's break down the explanation of the '#Possible Exceptions' section.\n\n**Purpose:** The '#Possible Exceptions' section in the Magic Labs embedded wallet documentation outlines the potential errors that may occur during the account linking process. Its main purpose is to notify developers about the possible issues and provide them with the necessary information to handle these exceptions.\n\n**Content:** The section explains two main exceptions:\n\n1. **UserNotEligibleForLinking**: This exception occurs when a user is not eligible for account linking due to various reasons. These reasons include:\n\t* `invalid_user_type`\n\t* `user_is_admin`\n\t* `user_unverified`\n\t* `already_linked`\n\t* `client_mismatch`\n\nThe status code for this exception is 403, indicating an \"Unauthorized\" error.\n\n2. **InvalidIdentityProof**: This exception occurs when the identity proof(s) provided by the user are invalid or expired.\n\nThe status code for this exception is 400, indicating a \"Bad Request\" error.\n\nIn both cases, the exception includes a clear error message that provides information about the specific issue.\n\n**Conclusion:** The '#Possible Exceptions' section is a crucial part of the Magic Labs embedded wallet documentation, as it helps developers anticipate and handle potential errors during the account linking process. By understanding these exceptions, developers can implement robust error handling mechanisms and ensure a smoother user experience for their customers.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/features/account-linking#chunk-5", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nUnlinking accounts will follow a similar pattern as linking accounts, except only the primary account's proof is needed. The message data that is signed by the user should have the action set to \"unlink\".\n\naction\n\n\"unlink\"\n\nCopy\n\n01\n\nconst\n\nmessage\n\n=\n\n{\n\n01\n\nconst\n\nmessage\n\n=\n\n{\n\n02\n\n\"subject\"\n\n:\n\n{\n\n02\n\n\"subject\"\n\n:\n\n{\n\n03\n\n\"address\"\n\n:\n\nprimary_address\n\n// the wallet address of the primary account for which the secondary accounts become delegates\n\n03\n\n\"address\"\n\n:\n\nprimary_address\n\n// the wallet address of the primary account for which the secondary accounts become delegates\n\n04\n\n}\n\n,\n\n04\n\n}\n\n,\n\n05\n\n\"delegatedTo\"\n\n:\n\n{\n\n05\n\n\"delegatedTo\"\n\n:\n\n{\n\n06\n\n\"userId\"\n\n:\n\nsecondary_auth_user_id\n\n,\n\n// the `sub` claim from the DID token of the secondary account\n\n06\n\n\"userId\"\n\n:\n\nsecondary_auth_user_id\n\n,\n\n// the `sub` claim from the DID token of the secondary account\n\n07\n\n}\n\n,\n\n07\n\n}\n\n,\n\n08\n\n\"issuer\"\n\n:\n\nsigner_address\n\n,\n\n// the primary account's public address\n\n08\n\n\"issuer\"\n\n:\n\nsigner_address\n\n,\n\n// the primary account's public address\n\n09\n\n\"action\"\n\n:\n\n\"unlink\"\n\n,\n\n09\n\n\"action\"\n\n:\n\n\"unlink\"\n\n,\n\n10\n\n\"validFrom\"\n\n:\n\nDate\n\n.\n\nnow\n\n(\n\n)\n\n,\n\n10\n\n\"validFrom\"\n\n:\n\nDate\n\n.\n\nnow\n\n(\n\n)\n\n,\n\n11\n\n\"validTo\"\n\n:\n\n0\n\n,\n\n// Leave this at 0, expiry is currently default to 10 minutes after issue\n\n11\n\n\"validTo\"\n\n:\n\n0\n\n,\n\n// Leave this at 0, expiry is currently default to 10 minutes after issue\n\n12\n\n\"nonce\"\n\n:\n\n1\n\n12\n\n\"nonce\"\n\n:\n\n1\n\n13\n\n}\n\n;\n\n13\n\n}\n\n;\n\nRequest:\n\n\u2022 POST | https://api.magic.link/v1/admin/auth/user/unlink\n\nPOST\n\nhttps://api.magic.link/v1/admin/auth/user/unlink\n\nHeaders:\n\n\u2022 Content-Type: application/json\n\n\u2022 X-Magic-Secret-Key: sk_live...\n\nContent-Type\n\napplication/json\n\nX-Magic-Secret-Key\n\nsk_live...\n\nPayload:\n\nCopy\n\n01\n\n\u2060\n\n{\n\n01\n\n\u2060\n\n{\n\n02\n\n\"primary_proof\"\n\n:\n\n{\n\n02\n\n\"primary_proof\"\n\n:\n\n{\n\n03\n\n\"msg\"\n\n:\n\n\"eyJ0eXBlcyI6eyJEZWxlZ2F0ZUlkZW50aXR5UmVxdWVzdCI6W3sibmFtZSI6InN1YmplY3QiLCJ0eXBlIjoiV2FsbGV0SWRlbnRpdHkifSx7Im5hbWUiOiJkZWxlZ2F0ZWRUbyIsInR5cGUiOiJVc2VySWRlbnRpdHkifSx7Im5hbWUiOiJpc3N1ZXIiLCJ0eXBlIjoiYWRkcmVzcyJ9LHsibmFtZSI6ImFjdGlvbiIsInR5cGUiOiJzdHJpbmcifSx7Im5hbWUiOiJ2YWxpZEZyb20iLCJ0eXBlIjoidWludDI1NiJ9LHsibmFtZSI6InZhbGlkVG8iLCJ0eXBlIjoidWludDI1NiJ9LHsibmFtZSI6Im5vbmNlIiwidHlwZSI6InVpbnQyNTYifV0sIldhbGxldElkZW50aXR5IjpbeyJuYW1lIjoiYWRkcmVzcyIsInR5cGUiOiJhZGRyZXNzIn1dLCJVc2VySWRlbnRpdHkiOlt7Im5hbWUiOiJ1c2VySWQiLCJ0eXBlIjoic3RyaW5nIn1dLCJFSVA3MTJEb21haW4iOlt7Im5hbWUiOiJuYW1lIiwidHlwZSI6InN0cmluZyJ9LHsibmFtZSI6InZlcnNpb24iLCJ0eXBlIjoic3RyaW5nIn0seyJuYW1lIjoiY2hhaW5JZCIsInR5cGUiOiJ1aW50MjU2In0seyJuYW1lIjoic2FsdCIsInR5cGUiOiJieXRlczMyIn1dfSwiZG9tYWluIjp7Im5hbWUiOiJtYWdpYy5saW5rIiwidmVyc2lvbiI6IjEuMC4xIiwiY2hhaW5JZCI6MSwic2FsdCI6IjB4NGVlMGFlZDgxNjI4NjIwMTA0NDYwMzlhNTRiZWUyZTZjNGYzMzE4MjJhNDZjOWRjNGQ0ZDY4MWQxNWU5NWJlZSJ9LCJwcmltYXJ5VHlwZSI6IkRlbGVnYXRlSWRlbnRpdHlSZXF1ZXN0IiwibWVzc2FnZSI6eyJzdWJqZWN0Ijp7ImFkZHJlc3MiOiIweDgzMzViYjg4OGM5NUJGQmIwYzJFRTNkMjQ5NDA5RTcyQmQwNTkzRDEifSwiZGVsZWdhdGVkVG8iOnsidXNlcklkIjoiZlgxRFJtOWJ6LWY5T2IyZ09ycmNqdldDQkdlcHJXbWI2MzFKTjU0Z1Rwcz0ifSwiaXNzdWVyIjoiMHg4MzM1YmI4ODhjOTVCRkJiMGMyRUUzZDI0OTQwOUU3MkJkMDU5M0QxIiwiYWN0aW9uIjoidW5saW5rIiwidmFsaWRGcm9tIjoxNjk1NjgzOTY3MTc5LCJ2YWxpZFRvIjowLCJub25jZSI6MX19\"\n\n,\n\n03\n\n\"msg\"\n\n:\n\n\"eyJ0eXBlcyI6eyJEZWxlZ2F0ZUlkZW50aXR5UmVxdWVzdCI6W3sibmFtZSI6InN1YmplY3QiLCJ0eXBlIjoiV2FsbGV0SWRlbnRpdHkifSx7Im5hbWUiOiJkZWxlZ2F0ZWRUbyIsInR5cGUiOiJVc2VySWRlbnRpdHkifSx7Im5hbWUiOiJpc3N1ZXIiLCJ0eXBlIjoiYWRkcmVzcyJ9LHsibmFtZSI6ImFjdGlvbiIsInR5cGUiOiJzdHJpbmcifSx7Im5hbWUiOiJ2YWxpZEZyb20iLCJ0eXBlIjoidWludDI1NiJ9LHsibmFtZSI6InZhbGlkVG8iLCJ0eXBlIjoidWludDI1NiJ9LHsibmFtZSI6Im5vbmNlIiwidHlwZSI6InVpbnQyNTYifV0sIldhbGxldElkZW50aXR5IjpbeyJuYW1lIjoiYWRkcmVzcyIsInR5cGUiOiJhZGRyZXNzIn1dLCJVc2VySWRlbnRpdHkiOlt7Im5hbWUiOiJ1c2VySWQiLCJ0eXBlIjoic3RyaW5nIn1dLCJFSVA3MTJEb21haW4iOlt7Im5hbWUiOiJuYW1lIiwidHlwZSI6InN0cmluZyJ9LHsibmFtZSI6InZlcnNpb24iLCJ0eXBlIjoic3RyaW5nIn0seyJuYW1lIjoiY2hhaW5JZCIsInR5cGUiOiJ1aW50MjU2In0seyJuYW1lIjoic2FsdCIsInR5cGUiOiJieXRlczMyIn1dfSwiZG9tYWluIjp7Im5hbWUiOiJtYWdpYy5saW5rIiwidmVyc2lvbiI6IjEuMC4xIiwiY2hhaW5JZCI6MSwic2FsdCI6IjB4NGVlMGFlZDgxNjI4NjIwMTA0NDYwMzlhNTRiZWUyZTZjNGYzMzE4MjJhNDZjOWRjNGQ0ZDY4MWQxNWU5NWJlZSJ9LCJwcmltYXJ5VHlwZSI6IkRlbGVnYXRlSWRlbnRpdHlSZXF1ZXN0IiwibWVzc2FnZSI6eyJzdWJqZWN0Ijp7ImFkZHJlc3MiOiIweDgzMzViYjg4OGM5NUJGQmIwYzJFRTNkMjQ5NDA5RTcyQmQwNTkzRDEifSwiZGVsZWdhdGVkVG8iOnsidXNlcklkIjoiZlgxRFJtOWJ6LWY5T2IyZ09ycmNqdldDQkdlcHJXbWI2MzFKTjU0Z1Rwcz0ifSwiaXNzdWVyIjoiMHg4MzM1YmI4ODhjOTVCRkJiMGMyRUUzZDI0OTQwOUU3MkJkMDU5M0QxIiwiYWN0aW9uIjoidW5saW5rIiwidmFsaWRGcm9tIjoxNjk1NjgzOTY3MTc5LCJ2YWxpZFRvIjowLCJub25jZSI6MX19\"\n\n,\n\n04\n\n\"sig\"\n\n:\n\n\"0x713287dfa096f5fa83596b2644a1abc74b0ca38ea86c166ae715fc2a3abcbf6415b2dfad8c713453e2cdbeb08136baaa874bbbfaf0a20ebd05ed2cc7a4e8206c1b\"\n\n04\n\n\"sig\"\n\n:\n\n\"0x713287dfa096f5fa83596b2644a1abc74b0ca38ea86c166ae715fc2a3abcbf6415b2dfad8c713453e2cdbeb08136baaa874bbbfaf0a20ebd05ed2cc7a4e8206c1b\"\n\n05\n\n}\n\n05\n\n}\n\n06\n\n}\n\n06\n\n}\n\nWhen successful, a response like the one below should be expected.\n\nStatus:\n\n\u2022 200\n\n200\n\nHeaders:\n\n\u2022 Content-Type: application/json\n\nContent-Type\n\napplication/json\n\nResponse:\n\nCopy\n\n01\n\n\u2060\n\n{\n\n01\n\n\u2060\n\n{\n\n02\n\n\"data\"\n\n:\n\n{\n\n02\n\n\"data\"\n\n:\n\n{\n\n03\n\n\"primary_address\"\n\n:\n\n\"0x98fe962f93f2f3fe9e4d62a88971a943677634d4184c7aa72ce86b9f95af9a19\"\n\n,\n\n03\n\n\"primary_address\"\n\n:\n\n\"0x98fe962f93f2f3fe9e4d62a88971a943677634d4184c7aa72ce86b9f95af9a19\"\n\n,\n\n04\n\n\"result\"\n\n:\n\n\"unlinked\"\n\n,\n\n04\n\n\"result\"\n\n:\n\n\"unlinked\"\n\n,\n\n05\n\n\"secondary_auth_user_id\"\n\n:\n\n\"3LDeve5f56ouY_tN-jLJlop_hkLI1LLTNG8abaCD42E=\"\n\n05\n\n\"secondary_auth_user_id\"\n\n:\n\n\"3LDeve5f56ouY_tN-jLJlop_hkLI1LLTNG8abaCD42E=\"\n\n06\n\n}\n\n,\n\n06\n\n}\n\n,\n\n07\n\n\"status\"\n\n:\n\n\"ok\"\n\n,\n\n07\n\n\"status\"\n\n:\n\n\"ok\"\n\n,\n\n08\n\n\"error_code\"\n\n:\n\n\"\"\n\n,\n\n08\n\n\"error_code\"\n\n:\n\n\"\"\n\n,\n\n09\n\n\"message\"\n\n:\n\n\"\"\n\n09\n\n\"message\"\n\n:\n\n\"\"\n\n10\n\n}\n\n10\n\n}\n\nThe proof must be less than 10 minutes old when sending to the unlink endpoint, otherwise the proof will be invalid/expired.", "explanation": "Here's an explanation of the documentation section titled '#Unlinking Two Linked Accounts' in a clear and concise manner:\n\n**Unlinking Two Linked Accounts:**\n\nThis feature allows users to unlink their secondary accounts from a primary account. When a user wants to unlink their secondary account, the primary account's proof is used to authenticate the request.\n\n**Purpose:**\n\nThe main purpose of this feature is to provide users with the ability to manage their linked accounts and remove any secondary accounts that are no longer needed or are associated with a different primary account.\n\n**How it Works:**\n\nTo unlink a secondary account, a request is sent to the `https://api.magic.link/v1/admin/auth/user/unlink` endpoint with a JSON payload that includes the primary account's proof. The proof is signed by the user and includes the action set to \"unlink.\" The request also includes the secondary auth user ID, which is a unique identifier for the secondary account.\n\n**Requirements:**\n\nTo successfully unlink a secondary account, the following requirements must be met:\n\n1. The proof must be less than 10 minutes old. If the proof is expired, it will be invalid and the request will fail.\n2. The proof must be signed by the user.\n3. The action in the proof must be set to \"unlink.\"\n4. The secondary auth user ID must be provided.\n\n**Successful Response:**\n\nIf the request is successful, a response with a status code of 200 will be returned, along with a JSON payload that indicates the result of the unlink operation.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/features/account-linking#chunk-6", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nAccount linking is not account recovery. If a user loses access to their primary login method they will not be able to update the login credential for the primary account and they will not be able to unlink their secondary accounts. However, the user will be able to access their account using their secondary login method.", "explanation": "According to the Magic Labs embedded wallet documentation, the section \"#Account Linking vs Account Recovery\" clarifies the difference between account linking and account recovery.\n\n**Main Purpose:** The purpose of this section is to inform users and developers about the key distinction between account linking and account recovery, ensuring that they understand how account management works in the Magic Labs system.\n\n**Key Points:**\n\n1. Account linking is not the same as account recovery.\n2. If a user loses access to their primary login method, they won't be able to:\n\t* Update the login credential for the primary account\n\t* Unlink secondary accounts\n3. However, the user can still access their account using their secondary login method.\n\nIn simple terms, account linking enables users to connect multiple login methods to a single account, but if they lose access to their primary login method, they won't be able to update or manage their account through that method. They can still access it using their secondary method. This helps developers and users understand how to handle account management, including account recovery scenarios, in the Magic Labs system.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/features/account-linking#chunk-7", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nMagic offers out-of-the-box UI for Transaction Signing. This UI will be presented to the user whenever the sendTransaction EVM RPC method is called with a web3 provider library such as web3.js or ethers.js.\n\nsendTransaction\n\nweb3.js\n\nethers.js\n\nOnce the method is invoked, Magic will provide information about the transaction, and the cost including estimated gas fees.\n\n#\n\n\u2022 For Dedicated Wallet, Transaction Signing UI is disabled by default and can be enabled within the developer dashboard in Customization -> Widget UI. Magic also offers Sign Confirmation, a feature that secures users from front-end attacks, by prompting them to confirm the transaction in a Magic-hosted tab after clicking \"Send\".\n\n\u2022 For Universal Wallet, Transaction Signing UI and Sign Confirmation are enabled by default and cannot be turned off\n\nSign Confirmation\n\nSign Confirmation\n\nUniversal wallets will soon be merged with Dedicated Wallets into a single product line. Universal apps created before February 7, 2024 will work as expected with no change. See our blog post to learn more.\n\nblog post", "explanation": "**Transaction Signing Overview and Compatibility**\n\nThis documentation section provides an overview of Transaction Signing, a UI feature offered by Magic Labs for its embedded wallets. The primary purpose of Transaction Signing is to present a user-friendly interface for confirming and signing transactions, protecting users from front-end attacks.\n\n**Key Components:**\n\n1. **Transaction Signing UI**: A UI that appears when the `sendTransaction` EVM RPC method is called with a web3 provider library. It provides information about the transaction, including estimated gas fees.\n2. **Sign Confirmation**: A security feature that opens a Magic-hosted tab for users to confirm the transaction, adding an extra layer of protection against front-end attacks.\n\n**Customization:**\n\n* For **Dedicated Wallets**, Transaction Signing UI is disabled by default and can be enabled in the developer dashboard.\n* For **Universal Wallets**, Transaction Signing UI and Sign Confirmation are enabled by default and cannot be turned off.\n\n**Compatibility:**\n\nThis feature is designed to work with web3.js or ethers.js libraries. The documentation also mentions that Universal wallets will be merged with Dedicated Wallets, but existing Universal wallets created before February 7, 2024, will continue to function as expected.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/wallets/features/transaction-signing#chunk-1", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 Requesting signatures from users for any transaction on the supported networks\n\nsupported networks", "explanation": "In the context of Magic Labs embedded wallet documentation, the \"#Use Cases\" section is a part of the documentation that outlines specific examples or scenarios where the transaction signing feature is applied.\n\nIn this case, the particular use case is about \"Requesting signatures from users for any transaction on the supported networks.\" \n\nTo understand this in simple terms, this feature lets your application programmatically ask the user's wallet (in this scenario, the Magic Labs embedded wallet) to approve or sign a transaction before it is transferred to the blockchain.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/wallets/features/transaction-signing#chunk-2", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2060Once you have verified the correct setup of the Magic SDK and successfully authenticated the user, you can proceed to send a request that invokes the Transaction Signature UI: \u2060\n\nCopy\n\n01\n\nimport\n\nWeb3\n\nfrom\n\n'web3'\n\n;\n\n01\n\nimport\n\nWeb3\n\nfrom\n\n'web3'\n\n;\n\n02\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n03\n\n03\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_API_KEY'\n\n,\n\n{\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_API_KEY'\n\n,\n\n{\n\n05\n\nnetwork\n\n:\n\n\"sepolia\"\n\n,\n\n// Ethereum testnet\n\n05\n\nnetwork\n\n:\n\n\"sepolia\"\n\n,\n\n// Ethereum testnet\n\n06\n\n}\n\n)\n\n;\n\n06\n\n}\n\n)\n\n;\n\n07\n\n07\n\n08\n\nconst\n\nweb3\n\n=\n\nnew\n\nWeb3\n\n(\n\nmagic\n\n.\n\nrpcProvider\n\n)\n\n;\n\n08\n\nconst\n\nweb3\n\n=\n\nnew\n\nWeb3\n\n(\n\nmagic\n\n.\n\nrpcProvider\n\n)\n\n;\n\n09\n\n09\n\n10\n\nconst\n\ntxnParams\n\n=\n\n{\n\n10\n\nconst\n\ntxnParams\n\n=\n\n{\n\n11\n\nfrom\n\n:\n\naccount\n\n,\n\n11\n\nfrom\n\n:\n\naccount\n\n,\n\n12\n\nto\n\n:\n\ntoAddress\n\n,\n\n12\n\nto\n\n:\n\ntoAddress\n\n,\n\n13\n\nvalue\n\n:\n\nweb3\n\n.\n\nutils\n\n.\n\ntoWei\n\n(\n\namount\n\n,\n\n\"ether\"\n\n)\n\n,\n\n13\n\nvalue\n\n:\n\nweb3\n\n.\n\nutils\n\n.\n\ntoWei\n\n(\n\namount\n\n,\n\n\"ether\"\n\n)\n\n,\n\n14\n\ngas\n\n:\n\n21000\n\n14\n\ngas\n\n:\n\n21000\n\n15\n\n}\n\n;\n\n15\n\n}\n\n;\n\n16\n\n16\n\n17\n\nweb3\n\n.\n\neth\n\n17\n\nweb3\n\n.\n\neth\n\n18\n\n.\n\nsendTransaction\n\n(\n\ntxnParams\n\n)\n\n18\n\n.\n\nsendTransaction\n\n(\n\ntxnParams\n\n)\n\n19\n\n.\n\non\n\n(\n\n\"transactionHash\"\n\n,\n\n(\n\nhash\n\n)\n\n=>\n\n{\n\n19\n\n.\n\non\n\n(\n\n\"transactionHash\"\n\n,\n\n(\n\nhash\n\n)\n\n=>\n\n{\n\n20\n\nconsole\n\n.\n\nlog\n\n(\n\n\"Transaction hash:\"\n\n,\n\nhash\n\n)\n\n;\n\n20\n\nconsole\n\n.\n\nlog\n\n(\n\n\"Transaction hash:\"\n\n,\n\nhash\n\n)\n\n;\n\n21\n\n}\n\n)\n\n21\n\n}\n\n)\n\n22\n\n.\n\nthen\n\n(\n\n(\n\nreceipt\n\n)\n\n=>\n\n{\n\n22\n\n.\n\nthen\n\n(\n\n(\n\nreceipt\n\n)\n\n=>\n\n{\n\n23\n\nconsole\n\n.\n\nlog\n\n(\n\n\"Transaction receipt:\"\n\n,\n\nreceipt\n\n)\n\n;\n\n23\n\nconsole\n\n.\n\nlog\n\n(\n\n\"Transaction receipt:\"\n\n,\n\nreceipt\n\n)\n\n;\n\n24\n\n}\n\n)\n\n24\n\n}\n\n)\n\n25\n\n.\n\ncatch\n\n(\n\n(\n\nerror\n\n)\n\n=>\n\n{\n\n25\n\n.\n\ncatch\n\n(\n\n(\n\nerror\n\n)\n\n=>\n\n{\n\n26\n\nconsole\n\n.\n\nerror\n\n(\n\nerror\n\n)\n\n;\n\n26\n\nconsole\n\n.\n\nerror\n\n(\n\nerror\n\n)\n\n;\n\n27\n\n}\n\n)\n\n;\n\n27\n\n}\n\n)\n\n;", "explanation": "**Transaction Signing Usage Overview**\n\nThis section outlines the steps for sending a transaction using the Magic Labs embedded wallet. The process involves:\n\n1. **Setting up the Magic SDK**: Importing the necessary libraries and initializing the Magic SDK with your API key.\n2. **Configuring the wallet**: Specifying the network (e.g., Ethereum testnet) and RPC provider.\n3. **Defining transaction parameters**: Creating a transaction object with the sender's account, recipient's address, amount, gas, and other attributes.\n4. **Sending the transaction**: Using Web3 to send the transaction and listening for the transaction hash and receipt.\n5. **Error handling**: Catching and logging any errors that occur during the transaction process.\n\n**Main Purpose**\n\nThe purpose of this section is to guide developers through the process of integrating the Magic Labs embedded wallet into their application, enabling users to send transactions securely and seamlessly. This usage guide helps developers:\n\n* Set up the Magic SDK and wallet configuration\n* Create and send transactions using Web3\n* Handle transaction outcomes and errors\n* Integrate the embedded wallet into their application\n\nBy following this usage guide, developers can efficiently and securely integrate the Magic Labs embedded wallet into their applications, providing users with a streamlined and transparent transaction experience.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/wallets/features/transaction-signing#chunk-3", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nSee how to brand this experience with your own logo and colors in the customization section.\n\ncustomization section", "explanation": "It appears that the provided documentation snippet is incomplete and does not match the requested section '#Configuration'. Let me try to provide a general understanding of what the configuration section would be about, based on typical documentation for embedded wallets.\n\nThe '#Configuration' section in the Magic Labs embedded wallet documentation is about setting up and customizing the wallet's behavior, properties, and features. Its main purpose is to provide developers with the necessary information to configure the wallet to suit their specific application's needs.\n\nTypically, this section would cover topics such as:\n\n1. **Initialization**: How to initialize the wallet and set its configuration.\n2. **Setups**: How to set up the wallet's properties, such as account IDs, API keys, and payment network configurations.\n3. **Parameter tuning**: How to adjust the wallet's behavior, such as transaction fee sensitivity, transaction timeout, and security settings.\n4. **Customization**: How to override default settings, modify the user experience, and integrate the wallet with other services.\n\nBy providing detailed information on the wallet's configuration options, the Magic Labs documentation aims to help developers fine-tune the wallet's performance and create a seamless end-user experience.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/wallets/features/transaction-signing#chunk-4", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 Quickstart\n\n\u2022 Supported EVM RPC Methods\n\nQuickstart\n\nSupported EVM RPC Methods", "explanation": "The '#Resources' section from the Magic Labs embedded wallet documentation appears to be a list of linked resources or features. Here's a breakdown of each mentioned resource:\n\n1. **Quickstart**: The Quickstart is a resource designed to help users get started with Magic Labs embedded wallet quickly. It's an easily accessible, step-by-step guide for setting up and using the wallet. The main purpose of the Quickstart is to provide a streamlined onboarding process for users.\n\n2. **Supported EVM RPC Methods**: EVM (Ethereum Virtual Machine) RPC (Remote Procedure Call) Methods refer to a set of methods or APIs used to interact with Ethereum-based smart contracts. The Supported EVM RPC Methods resource outlines which of these APIs are supported by the Magic Labs embedded wallet. This is crucial information for developers who need to integrate the wallet with their applications.\n\nIn summary, the main purpose of the '#Resources' section is to provide links to essential guides and information about the Magic Labs embedded wallet. This includes the steps to quickly get started with the wallet and the APIs supported by the wallet for interacting with Ethereum-based smart contracts.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/wallets/features/transaction-signing#chunk-5", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nMagic interacts with the Bitcoin blockchain via Magic's extension NPM package @magic-ext/bitcoin. The Bitcoin extension also lets you interact with the blockchain using methods from Bitcoinjs-lib.\n\n@magic-ext/bitcoin\n\n@magic-ext/bitcoin\n\nBitcoinjs-lib\n\nYou can skip straight to our kitchen sink example directly:\n\n\ud83d\udc49 Bitcoin Example\n\nBitcoin Example\n\nCopy\n\n01\n\nnpm\n\ninstall\n\n--save @magic-ext/bitcoin\n\n01\n\nnpm\n\ninstall\n\n--save @magic-ext/bitcoin", "explanation": "This section from the Magic Labs documentation is about installing the necessary dependencies to interact with the Bitcoin blockchain. Here's a clear and concise breakdown of what it's about:\n\n**Purpose:** This section provides instructions on how to set up and install the required packages to interact with the Bitcoin blockchain using Magic's extension.\n\n**Key Points:**\n\n1. The Bitcoin extension, `@magic-ext/bitcoin`, allows Magic to interact with the Bitcoin blockchain.\n2. The extension also utilizes methods from `Bitcoinjs-lib`, a popular library for working with the Bitcoin blockchain.\n3. If you want to start coding immediately, there's a \"kitchen sink\" example available for Bitcoin.\n4. To get started, you need to install the `@magic-ext/bitcoin` package using npm (Node Package Manager).\n\n**Main Action:** To install the Bitcoin extension, follow these steps:\n\n1. Open a terminal or command prompt.\n2. Run the command `npm install --save @magic-ext/bitcoin` to install the package.\n\nBy following these steps, you'll have the necessary dependencies set up to interact with the Bitcoin blockchain using Magic's extension.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/other/bitcoin#chunk-1", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\nimport\n\n{\n\nBitcoinExtension\n\n}\n\nfrom\n\n\"@magic-ext/bitcoin\"\n\n;\n\n02\n\nimport\n\n{\n\nBitcoinExtension\n\n}\n\nfrom\n\n\"@magic-ext/bitcoin\"\n\n;\n\n03\n\n03\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_API_KEY'\n\n,\n\n{\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_API_KEY'\n\n,\n\n{\n\n05\n\nextensions\n\n:\n\n[\n\n05\n\nextensions\n\n:\n\n[\n\n06\n\nnew\n\nBitcoinExtension\n\n(\n\n{\n\n06\n\nnew\n\nBitcoinExtension\n\n(\n\n{\n\n07\n\nrpcUrl\n\n:\n\n'BTC_RPC_NODE_URL'\n\n,\n\n07\n\nrpcUrl\n\n:\n\n'BTC_RPC_NODE_URL'\n\n,\n\n08\n\nnetwork\n\n:\n\n'testnet'\n\n// testnet or mainnet\n\n08\n\nnetwork\n\n:\n\n'testnet'\n\n// testnet or mainnet\n\n09\n\n}\n\n)\n\n,\n\n09\n\n}\n\n)\n\n,\n\n10\n\n]\n\n,\n\n10\n\n]\n\n,\n\n11\n\n}\n\n)\n\n;\n\n11\n\n}\n\n)\n\n;", "explanation": "**Initialization Section Overview**\n\nThe '#Initialization' section of the Magic Labs embedded wallet documentation is about initializing the Magic wallet instance with the required settings and configurations.\n\n**Main Purpose**\n\nThe main purpose of this section is to outline the necessary steps to set up the Magic wallet, including importing the required libraries, creating a new Magic instance, and enabling the Bitcoin extension with the necessary settings.\n\n**Key Components**\n\n- **Importing Libraries**: The code imports the required libraries, specifically 'Magic' from 'magic-sdk' and 'BitcoinExtension' from '@magic-ext/bitcoin'.\n- **Creating a Magic Instance**: A new 'Magic' instance is created, passing the 'YOUR_API_KEY' as a parameter.\n- **Enabling the Bitcoin Extension**: The Bitcoin extension is enabled by creating a new 'BitcoinExtension' instance and passing it to the 'extensions' array in the 'Magic' instance.\n- **Configuring the Bitcoin Extension**: The Bitcoin extension is configured with the necessary settings, including the RPC URL, network (testnet or mainnet), and other parameters.\n\n**Use Case**\n\nThis section provides a basic template for initializing the Magic wallet instance with the Bitcoin extension. To use this code, you'll need to replace 'YOUR_API_KEY' with your actual Magic API key and 'BTC_RPC_NODE_URL' with the URL of the Bitcoin RPC node you intend to use. The network parameter can be set to either 'testnet' or 'mainnet', depending on the desired network configuration.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/other/bitcoin#chunk-2", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n#\n\nTo send a standard Bitcoin blockchain transaction, you can call the magic.bitcoin.signTransaction method to get the signature and raw transaction then send to blockchain by yourself.\n\nmagic.bitcoin.signTransaction\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\nimport\n\n{\n\nBitcoinExtension\n\n}\n\nfrom\n\n\"@magic-ext/bitcoin\"\n\n;\n\n02\n\nimport\n\n{\n\nBitcoinExtension\n\n}\n\nfrom\n\n\"@magic-ext/bitcoin\"\n\n;\n\n03\n\nimport\n\n*\n\nas\n\nbitcoin\n\nfrom\n\n'bitcoinjs-lib'\n\n03\n\nimport\n\n*\n\nas\n\nbitcoin\n\nfrom\n\n'bitcoinjs-lib'\n\n04\n\n04\n\n05\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_API_KEY'\n\n,\n\n{\n\n05\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_API_KEY'\n\n,\n\n{\n\n06\n\nextensions\n\n:\n\n[\n\n06\n\nextensions\n\n:\n\n[\n\n07\n\nnew\n\nBitcoinExtension\n\n(\n\n{\n\n07\n\nnew\n\nBitcoinExtension\n\n(\n\n{\n\n08\n\nrpcUrl\n\n:\n\n'BTC_RPC_NODE_URL'\n\n,\n\n08\n\nrpcUrl\n\n:\n\n'BTC_RPC_NODE_URL'\n\n,\n\n09\n\nnetwork\n\n:\n\n'testnet'\n\n// testnet or mainnet\n\n09\n\nnetwork\n\n:\n\n'testnet'\n\n// testnet or mainnet\n\n10\n\n}\n\n)\n\n,\n\n10\n\n}\n\n)\n\n,\n\n11\n\n]\n\n,\n\n11\n\n]\n\n,\n\n12\n\n}\n\n)\n\n;\n\n12\n\n}\n\n)\n\n;\n\n13\n\n13\n\n14\n\nconst\n\nTESTNET\n\n=\n\nbitcoin\n\n.\n\nnetworks\n\n.\n\ntestnet\n\n;\n\n14\n\nconst\n\nTESTNET\n\n=\n\nbitcoin\n\n.\n\nnetworks\n\n.\n\ntestnet\n\n;\n\n15\n\n15\n\n16\n\nconst\n\ntx\n\n=\n\nnew\n\nbitcoin\n\n.\n\nTransactionBuilder\n\n(\n\nTESTNET\n\n)\n\n;\n\n16\n\nconst\n\ntx\n\n=\n\nnew\n\nbitcoin\n\n.\n\nTransactionBuilder\n\n(\n\nTESTNET\n\n)\n\n;\n\n17\n\ntx\n\n.\n\naddInput\n\n(\n\n'fde789dad13b52e33229baed29b11d3e6f6dd306eb159865957dce13219bf85c'\n\n,\n\n0\n\n)\n\n;\n\n17\n\ntx\n\n.\n\naddInput\n\n(\n\n'fde789dad13b52e33229baed29b11d3e6f6dd306eb159865957dce13219bf85c'\n\n,\n\n0\n\n)\n\n;\n\n18\n\n18\n\n19\n\ntx\n\n.\n\naddOutput\n\n(\n\n'mfkv2a593E1TfDVFmf1szjAkyihLowyBaT'\n\n,\n\n80000\n\n)\n\n;\n\n19\n\ntx\n\n.\n\naddOutput\n\n(\n\n'mfkv2a593E1TfDVFmf1szjAkyihLowyBaT'\n\n,\n\n80000\n\n)\n\n;\n\n20\n\n20\n\n21\n\nconst\n\ntxHex\n\n=\n\ntx\n\n.\n\nbuildIncomplete\n\n(\n\n)\n\n.\n\ntoHex\n\n(\n\n)\n\n;\n\n21\n\nconst\n\ntxHex\n\n=\n\ntx\n\n.\n\nbuildIncomplete\n\n(\n\n)\n\n.\n\ntoHex\n\n(\n\n)\n\n;\n\n22\n\n22\n\n23\n\nconst\n\nsignedTransactionHex\n\n=\n\nawait\n\nmagic\n\n.\n\nbitcoin\n\n.\n\nsignTransaction\n\n(\n\ntxHex\n\n,\n\n0\n\n)\n\n;\n\n23\n\nconst\n\nsignedTransactionHex\n\n=\n\nawait\n\nmagic\n\n.\n\nbitcoin\n\n.\n\nsignTransaction\n\n(\n\ntxHex\n\n,\n\n0\n\n)\n\n;\n\n24\n\n24\n\n25\n\nconsole\n\n.\n\nlog\n\n(\n\n\"signed transaction\"\n\n,\n\nsignedTransactionHex\n\n)\n\n;\n\n25\n\nconsole\n\n.\n\nlog\n\n(\n\n\"signed transaction\"\n\n,\n\nsignedTransactionHex\n\n)\n\n;", "explanation": "**Signing a Bitcoin Transaction with Magic Labs**\n\nThe provided documentation section is about the `signTransaction` method in Magic Labs' embedded wallet, which allows you to sign a standard Bitcoin blockchain transaction.\n\n**Main Purpose:**\n\nThe main purpose of the `signTransaction` method is to obtain the signature and raw transaction, which can then be sent to the blockchain by yourself.\n\n**Key Steps:**\n\nHere's a summary of the process:\n\n1. Create a `Magic` instance with your API key and configure it to use the Bitcoin extension.\n2. Import the necessary dependencies, including `bitcoinjs-lib`.\n3. Create a `TransactionBuilder` instance to construct the transaction.\n4. Add inputs, outputs, and build the transaction.\n5. Get the transaction in hexadecimal format using the `toHex` method.\n6. Call the `signTransaction` method, passing the transaction hex and the number of signatures required (in this case, 0).\n7. The method returns the signed transaction in hexadecimal format, which can be sent to the blockchain.\n\n**Example Use Case:**\n\nIn the provided code, the `signTransaction` method is called with a pre-built transaction `txHex`. The method returns the signed transaction `signedTransactionHex`, which is then logged to the console.\n\nBy following this documentation, you can use Magic Labs' embedded wallet to sign a standard Bitcoin transaction and prepare it for sending to the blockchain.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/other/bitcoin#chunk-3", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 Bitcoin Developer Site\n\nBitcoin Developer Site", "explanation": "The \"#Resources\" section in the Magic Labs embedded wallet documentation is a list of external resources related to the discussed topic. Specifically, in this case, it is a list of resources related to the Bitcoin blockchain.\n\nThe main purpose of this section is to provide additional information and support for developers working with the Bitcoin blockchain and Magic Labs' embedded wallet. This could be useful for troubleshooting, learning more about the technical aspects of the blockchain, or finding more detailed documentation.\n\nIn this instance, the single resource listed is the \"Bitcoin Developer Site\", which appears to be a dedicated online platform providing technical information, documentation, and tools for developers interested in working with the Bitcoin blockchain. \n\nHowever, in a typical documentation, this section contains multiple resources, such as official documentation, GitHub repositories, APIs, or tutorials, that can be useful for various purposes like learning, troubleshooting, configuration, etc.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/other/bitcoin#chunk-4", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nThe Magic Gem for Ruby is your entry-point to secure, passwordless authentication for your application. This guide will cover some important topics for getting started with the magic-admin gem and to make the most of Magic's features.\n\nmagic-admin", "explanation": "Based on the provided documentation, the 'Ruby API Reference - Overview' section is about the Magic Labs Gem for Ruby, which is the primary entry point for integrating passwordless authentication into a Ruby-based application.\n\nThe main purpose of this section is to provide a guide for Ruby developers to get started with the Magic-admin gem, enabling them to leverage Magic's features for secure, passwordless authentication in their application.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/ruby#chunk-1", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nThe Magic class is the entry-point to the Magic SDK. It must be instantiated with a Magic secret key.\n\n#\n\nCopy\n\n01\n\ngem\n\ninstall\n\nmagic-admin\n\n01\n\ngem\n\ninstall\n\nmagic-admin", "explanation": "Based on the provided documentation, the section '#Getting Started - #Installation' is about setting up the Magic Labs embedded wallet SDK for Ruby. \n\nIts main purpose is to guide users through the process of installing the necessary gem (Ruby packages) to use the Magic SDK in their Ruby project.\n\nHere's a concise summary:\n\n- The Magic SDK is initialized with a Magic secret key through the Magic class.\n- To use the Magic SDK in Ruby, two gems (magic-admin and magic-admin) need to be installed using the 'gem install' command.\n- The exact installation steps provided in the documentation are:\n 1. Run `gem install magic-admin` to install the magic-admin gem.\n 2. Run `gem install magic-admin` again to install the second magic-admin gem (this may seem redundant but often due to name or version of gems referenced in a version that the original isn't but ensure it's installed).", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/ruby#chunk-2", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n#\n\nMagic\n\nParameter\n\nType\n\nDefinition\n\napi_secret_key\n\napi_secret_key\n\nstr\n\nYour secret API Key retrieved from the Magic Dashboard.\n\nretries?\n\nretries?\n\nnum\n\nTotal number of retries to allow.\n\ntimeout?\n\ntimeout?\n\nnum\n\nA period of time the request is going to wait for a response.\n\nbackoff_factor?\n\nbackoff_factor?\n\nnum\n\nA backoff factor to apply between retry attempts.", "explanation": "**Constructor - #Magic**\n\nIn the context of the Magic Labs embedded wallet, the `#Magic` constructor is a method used to initialize the Magic API client. This method allows you to customize certain settings for your Magic API connections.\n\n**Main Purpose:**\n\nThe primary purpose of the `#Magic` constructor is to provide options for configuring the Magic API client. By using this constructor, you can specify various settings, such as:\n\n- Your secret API Key, which is essential for authenticating with the Magic API.\n- The number of retries allowed, which helps manage connection errors.\n- A time interval for waiting for a response, ensuring the API client doesn't time out.\n- A backoff factor for adjusting the delay between retry attempts.\n\n**Key Parameters:**\n\n- `api_secret_key`: Your unique secret API Key retrieved from the Magic Dashboard.\n- `retries?`: Total number of retries to allow for reconnecting.\n- `timeout?`: Period of time to wait for a response.\n- `backoff_factor?`: Backoff factor to apply between retry attempts.\n\nBy passing these parameters to the `#Magic` constructor, you can fine-tune the Magic API client to suit your application's specific needs and improve its stability and reliability.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/ruby#chunk-3", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nInitialize Magic instance.\n\nCopy\n\n01\n\nrequire\n\n'magic-admin'\n\n01\n\nrequire\n\n'magic-admin'\n\n02\n\n02\n\n03\n\nmagic\n\n=\n\nMagic\n\n.\n\nnew\n\n(\n\napi_secret_key\n\n:\n\n'<SECRET_API_KEY>'\n\n,\n\n03\n\nmagic\n\n=\n\nMagic\n\n.\n\nnew\n\n(\n\napi_secret_key\n\n:\n\n'<SECRET_API_KEY>'\n\n,\n\n04\n\nretries\n\n:\n\n5\n\n,\n\n04\n\nretries\n\n:\n\n5\n\n,\n\n05\n\ntimeout\n\n:\n\n5\n\n,\n\n05\n\ntimeout\n\n:\n\n5\n\n,\n\n06\n\nbackoff\n\n:\n\n0.01\n\n)\n\n06\n\nbackoff\n\n:\n\n0.01\n\n)\n\n07\n\n07\n\n08\n\n# Or add environment variables\n\n08\n\n# Or add environment variables\n\n09\n\n# `MAGIC_API_SECRET_KEY`\n\n09\n\n# `MAGIC_API_SECRET_KEY`\n\n10\n\n# `MAGIC_API_RETRIES`\n\n10\n\n# `MAGIC_API_RETRIES`\n\n11\n\n# `MAGIC_API_TIMEOUT`\n\n11\n\n# `MAGIC_API_TIMEOUT`\n\n12\n\n# `MAGIC_API_BACKOFF`\n\n12\n\n# `MAGIC_API_BACKOFF`\n\n13\n\n13\n\n14\n\nmagic\n\n=\n\nMagic\n\n.\n\nnew\n\n14\n\nmagic\n\n=\n\nMagic\n\n.\n\nnew", "explanation": "**Initialization in Magic Labs Embedded Wallet Documentation**\n\n**What is it about?**\n\nThe #Initialization section in the Magic Labs embedded wallet documentation explains how to create and initialize a Magic instance, which is the entry point for using Magic's APIs in a Ruby application.\n\n**Main Purpose**\n\nThe main purpose of this section is to provide instructions on how to properly initialize a Magic instance, allowing developers to use Magic's APIs securely and efficiently. By following these steps, developers can:\n\n1. Import the necessary Magic library\n2. Supply their API secret key\n3. Configure retry, timeout, and backoff settings for robust API interactions\n\n**Key Components**\n\n1. **API Secret Key**: A unique key provided by Magic that authenticates and authorizes access to the API.\n2. **Retry Settings**: Specifies the number of times the API will attempt to retry a failed request (default: 5).\n3. **Timeout Setting**: Specifies the maximum time in seconds that the API will wait for a response (default: 5 seconds).\n4. **Backoff Setting**: Specifies the exponential backoff time in seconds between retry attempts (default: 0.01 seconds).\n\n**Alternative Initialization Method**\n\nThe documentation also mentions that you can initialize the Magic instance by adding environment variables, such as `MAGIC_API_SECRET_KEY`, `MAGIC_API_RETRIES`, `MAGIC_API_TIMEOUT`, and `MAGIC_API_BACKOFF`, instead of hardcoding the values. This approach is recommended for development, testing, and production environments.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/ruby#chunk-4", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nThe token resource and its methods are accessible on the Magic instance by the token attribute. It provides methods to interact with the DID Token.\n\ntoken\n\nThe token resource does not make any API calls to the Magic server.\n\nCopy\n\n01\n\nrequire\n\n'magic-admin'\n\n01\n\nrequire\n\n'magic-admin'\n\n02\n\n02\n\n03\n\nmagic\n\n=\n\nMagic\n\n.\n\nnew\n\n(\n\napi_secret_key\n\n:\n\n'<SECRET_API_KEY>'\n\n)\n\n03\n\nmagic\n\n=\n\nMagic\n\n.\n\nnew\n\n(\n\napi_secret_key\n\n:\n\n'<SECRET_API_KEY>'\n\n)\n\n04\n\nmagic\n\n.\n\ntoken\n\n04\n\nmagic\n\n.\n\ntoken\n\n05\n\nmagic\n\n.\n\ntoken\n\n.\n\nget_issuer\n\n05\n\nmagic\n\n.\n\ntoken\n\n.\n\nget_issuer\n\n06\n\nmagic\n\n.\n\ntoken\n\n.\n\nget_public_address\n\n06\n\nmagic\n\n.\n\ntoken\n\n.\n\nget_public_address\n\n07\n\nmagic\n\n.\n\ntoken\n\n.\n\ndecode\n\n07\n\nmagic\n\n.\n\ntoken\n\n.\n\ndecode\n\n08\n\nmagic\n\n.\n\ntoken\n\n.\n\nvalidate\n\n08\n\nmagic\n\n.\n\ntoken\n\n.\n\nvalidate\n\n#\n\nget_issuer\n\nExtracts the iss from the DID Token.\n\niss\n\nDID Token\n\nCopy\n\n01\n\ntoken\n\n.\n\nget_issuer\n\n(\n\ndid_token\n\n)\n\n01\n\ntoken\n\n.\n\nget_issuer\n\n(\n\ndid_token\n\n)\n\n#\n\n\u2022 did_token (str): A DID Token generated by a Magic User on the client-side\n\ndid_token", "explanation": "**Token Resource: get_issuer**\n\nThe `#token` resource, within the Magic Labs embedded wallet documentation, provides methods to interact with the DID (Decentralized Identifier) Token. The `#get_issuer` method is one of these methods, and its main purpose is to extract the `iss (issuer)` from the DID Token.\n\n**What is get_issuer?**\n\n`get_issuer` takes a `did_token` as an argument, which is a DID Token generated by a Magic User on the client-side. It then returns the issuer of the DID Token, which is represented by the `iss` claim.\n\n**Why use get_issuer?**\n\nThe `get_issuer` method is useful in scenarios where you need to verify the issuer of a DID Token. This could be part of a larger process, such as:\n\n1. Authenticating a user or device based on the DID Token.\n2. Verifying the authenticity of a digital signature.\n3. Ensuring the integrity of data exchanged between parties.\n\n**Example Usage:**\n\n```ruby\nrequire 'magic-admin'\n\nmagic = Magic.new(api_secret_key: '<SECRET_API_KEY>')\n\ndid_token = \"your_did_token_string\"\nissuer = magic.token.get_issuer(did_token)\nputs issuer  # Output: The issuer string\n```\n\nBy using the `get_issuer` method, you can easily extract the issuer of a DID Token, which can be a crucial step in building secure and trustworthy applications that utilize decentralized identifiers.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/ruby#chunk-5", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 DIDTokenError if the given DID Token is malformed\n\nDIDTokenError", "explanation": "Based on the provided documentation, the '#Raises' section specifically highlights the potential exceptions that can occur during a particular operation.\n\nIn this specific case, the section is related to error handling during a DID (Decentralized Identifier) token verification process. \n\nHere's a breakdown of what it is about and its main purpose:\n\n**What it is about:**\n\nThe '#Raises' section raises awareness about the potential errors that can occur when verifying a DID token using the Magic Labs embedded wallet. It specifically mentions that if the given DID Token is malformed, it will raise a `DIDTokenError`.\n\n**Main Purpose:**\n\nThe main purpose of the '#Raises' section is to inform developers about the potential exceptions they can encounter when using the Magic Labs embedded wallet API. This allows them to anticipate and handle these errors in their code, ensuring a more robust and reliable experience for their users.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/ruby#chunk-6", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 A Decentralized ID (iss) of the Magic user who generated the DID Token\n\niss", "explanation": "In the context of the Magic Labs embedded wallet documentation, the section titled '#Returns' is a response parameter specification. It explains what data is returned when the API call is successful.\n\nThe specific parameter being described here is `iss`, which stands for Issuer. In the context of a Decentralized ID (DID), the `iss` parameter specifically represents the Decentralized ID (iss) of the Magic user who generated the DID Token.\n\nThe main purpose of this `iss` parameter in the '#Returns' section is to provide information about the entity that created the DID Token, specifically the Magic user account that generated it. This is useful for verifying the authenticity and ownership of the DID Token.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/ruby#chunk-7", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nget_public_address\n\nGets the cryptographic public address of the Magic User who generated the supplied DID Token.\n\npublic address\n\nCopy\n\n01\n\ntoken\n\n.\n\nget_public_address\n\n(\n\ndid_token\n\n)\n\n01\n\ntoken\n\n.\n\nget_public_address\n\n(\n\ndid_token\n\n)\n\n#\n\n\u2022 did_token (str): A DID Token generated by a Magic user on the client-side\n\ndid_token", "explanation": "Based on the provided documentation section, here is a clear and concise explanation of what `#get_public_address` is about and its main purpose:\n\n**What is `#get_public_address`?**\n\n`#get_public_address` is a method that retrieves the cryptographic public address of a Magic User associated with a supplied Digital Identity (DID) Token.\n\n**Main Purpose:**\n\nThe main purpose of `#get_public_address` is to obtain the public address of a Magic User who generated a specific DID Token. This public address can be used for various purposes, such as:\n\n* Verifying the Magic User's identity\n* Setting up secure transactions or interactions\n* Authenticating the Magic User's ownership of a cryptocurrency or digital asset\n\n**Input Parameter:**\n\nThe only input parameter required for the `#get_public_address` method is a `Did_token`, which is a string generated by a Magic user on the client-side. This Did_token is used to authenticate the Magic User and determine their associated public address.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/ruby#chunk-8", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 DIDTokenError if the given DID Token is malformed\n\nDIDTokenError", "explanation": "The `#Raises` section in the Magic Labs embedded wallet Ruby SDK documentation is a list of exceptions that the `DIDToken.token` method may raise, indicating potential errors that can occur during the authentication process.\n\nIn this case, it states that the `DIDToken.token` method may raise a `DIDTokenError` if the input `DID Token` is malformed. \n\nThe main purpose of this section is to inform developers about the possible exceptions they may encounter when using the `DIDToken.token` method, allowing them to handle these errors and provide a better user experience in their applications.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/ruby#chunk-9", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 A public address of the Magic User who generated the DID Token. Currently, this value is associated with the Ethereum blockchain.\n\npublic address", "explanation": "Based on the provided documentation, the '#Returns' section is about the response received from the API call. In this specific case, it mentions a single value:\n\n**public address**: This is the primary output or return of the API call, specifically the public address associated with the Ethereum blockchain. It essentially tells you the location on the Ethereum blockchain from which the DID Token (Digital Identity Token) was generated.\n\nThe main purpose of the 'public address' return value is to provide a unique identifier linked to the Magic User who created the token, allowing developers to verify and track the origin of the DID Token. This information can be critical in various applications, such as identity management, access control, and token verification processes.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/ruby#chunk-10", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\ndecode\n\nDecodes a DID Token from a Base64 string into a tuple of its individual components: proof and claim. This method allows you decode the DID Token and inspect the token. You can apply your own rules and validations on top of the current token.validate method.\n\nproof\n\nclaim\n\ntoken.validate\n\ntoken.validate\n\nCopy\n\n01\n\nToken\n\n.\n\ndecode\n\n(\n\ndid_token\n\n)\n\n01\n\nToken\n\n.\n\ndecode\n\n(\n\ndid_token\n\n)\n\n#\n\n\u2022 did_token (str): A DID Token generated by a Magic user on the client-side\n\ndid_token", "explanation": "**decode Method**\n\nThe `decode` method is a part of the Magic Labs embedded wallet API for Ruby. Its primary purpose is to **decode a DID Token** from a Base64 string into a tuple of its individual components: `proof` and `claim`.\n\n**Key Components:**\n\n1. **DID Token**: A Digital Identity Token (DID) generated by a Magic user on the client-side.\n2. **proof**: A tuple containing the proof of the DID Token.\n3. **claim**: A tuple containing the claim of the DID Token.\n\n**Main Purpose:**\n\nThe `decode` method allows you to inspect and analyze the individual components of the DID Token. By decoding the token, you can apply your own custom validations and rules on top of the existing `token.validate` method.\n\n**Usage:**\n\nYou can use the `decode` method by passing the `did_token` (DID Token) as an argument. This method returns a tuple containing the `proof` and `claim` components of the decoded DID Token.\n\nExample:\n```ruby\ndecoded_token = decode(did_token: \"your_base64_encoded_did_token\")\n```\nBy using the `decode` method, you can gain a deeper understanding of the DID Token and apply specific business logic or rules based on its individual components.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/ruby#chunk-11", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 DIDTokenError if the given DID Token is malformed\n\nDIDTokenError", "explanation": "In the Magic Labs embedded wallet documentation, the '#Raises' section lists the exceptions that your code may encounter when using certain API methods or functions.\n\nIn this specific section, it mentions that calling a specific method or function might raise a 'DIDTokenError'. A DIDTokenError indicates that the DID (Decentralized Identity) Token provided is not valid or is malformed.\n\nThe main purpose of the '#Raises' section is to notify developers about potential errors that can occur when using the Magic Labs SDK, allowing them to catch and handle these exceptions in their code, resulting in more robust and error-free implementations.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/ruby#chunk-12", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 proof (str): A digital signature that proves the validity of the given claim\n\n\u2022 claim (dict): Unsigned data the user asserts. This should equal the proof after Elliptic Curve recovery. See Decentralized ID Token Specification for fields inside the claim.\n\nproof\n\nclaim\n\nclaim\n\nproof\n\nDecentralized ID Token Specification\n\nclaim", "explanation": "The '#Returns' section from the Magic Labs embedded wallet documentation explains the response returned by the server-side SDK after a successful or failed transaction. \n\nThe main purpose of '#Returns' is to provide clear definitions and explanations of the returned data attributes. The key attributes in the '#Returns' section are:\n\n- **Proof (str):** This is a digital signature that confirms the validity of the claim. It is essentially a verification token that proves the integrity of the data.\n\n- **Claim (dict):** This represents the unsigned data asserted by the user, which should match the proof after Elliptic Curve recovery. The decentralized ID token specification provides a detailed outline of the keys and values that should be included in the claim.\n\nThe 'Decentralized ID Token Specification' link provides additional information on the required fields and formats for the claim. \n\nIn summary, the '#Returns' section in the Magic Labs embedded wallet documentation provides a clear understanding of the server response attributes and the expected data format, allowing developers to handle the response correctly in their application.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/ruby#chunk-13", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nvalidate\n\nValidates a DID token.\n\nCopy\n\n01\n\ntoken\n\n.\n\nvalidate\n\n(\n\ndid_token\n\n)\n\n01\n\ntoken\n\n.\n\nvalidate\n\n(\n\ndid_token\n\n)\n\n#\n\n\u2022 did_token (str): A DID Token generated by a Magic user on the client-side\n\ndid_token", "explanation": "This section of the documentation is about the `#validate` method, specifically its arguments. Here's a breakdown of what it is about and its main purpose:\n\n**What it is about:** The `#validate` method is used to validate a DID (Decentralized Identifier) token.\n\n**Main purpose:** The primary purpose of `#validate` is to verify the authenticity and integrity of a DID token, ensuring it has not been tampered with or manipulated.\n\n**Argument explanation:** The `#validate` method takes one argument:\n\n* `did_token` (string): This is a DID token generated by a Magic user on the client-side. The `did_token` is the input that is being validated.\n\nIn essence, the `#validate` method is used to ensure that the `did_token` provided matches the expected format and content, thereby verifying its authenticity.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/ruby#chunk-14", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 DIDTokenError if the given DID Token is invalid or malformed\n\nDIDTokenError", "explanation": "The `#Raises` section from the Magic Labs embedded wallet documentation is used to describe potential errors that can occur when using a specific method or function in the Magic Labs SDK.\n\nIn this specific case, the `#Raises` section is related to the DID Token Error, which is an exception type that is raised when the following conditions occur:\n\n- The given DID (Decentralized Identifier) Token is invalid.\n- The given DID Token is malformed.\n\nThe main purpose of the `#Raises` section is to inform developers about the possible error scenarios they may encounter when working with the Magic Labs SDK, particularly when handling DID Tokens. This helps developers to anticipate and handle errors more effectively, which is crucial for writing robust and reliable applications.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/ruby#chunk-15", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 boolean value indicating the validity of the token\n\nboolean", "explanation": "Based on the provided documentation section, the \"#Returns\" section specifies the output format of a function or API call.\n\nIn this specific case, the \"#Returns\" section is about the return value of a particular function or operation. According to the documentation, the function returns a single boolean value indicating the validity of the token.\n\nThe main purpose of this \"#Returns\" section is to inform developers about what to expect when calling the function or making the API request. It helps them understand the expected output format and what they can do with the returned values. \n\nIn summary, this section serves as a return value declaration, providing clarity on what the function or API call will return to the developer.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/ruby#chunk-16", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nThe user resource and its methods are accessible on the Magic instance by the user attribute. It provides methods to interact with the User.\n\nuser\n\nCopy\n\n01\n\nrequire\n\n'magic-admin'\n\n01\n\nrequire\n\n'magic-admin'\n\n02\n\n02\n\n03\n\nmagic\n\n=\n\nMagic\n\n.\n\nnew\n\n(\n\napi_secret_key\n\n:\n\n'<SECRET_API_KEY>'\n\n)\n\n03\n\nmagic\n\n=\n\nMagic\n\n.\n\nnew\n\n(\n\napi_secret_key\n\n:\n\n'<SECRET_API_KEY>'\n\n)\n\n04\n\n04\n\n05\n\nmagic\n\n.\n\nuser\n\n05\n\nmagic\n\n.\n\nuser\n\n06\n\nmagic\n\n.\n\nuser\n\n.\n\nget_metadata_by_issuer\n\n06\n\nmagic\n\n.\n\nuser\n\n.\n\nget_metadata_by_issuer\n\n07\n\nmagic\n\n.\n\nuser\n\n.\n\nget_metadata_by_public_address\n\n07\n\nmagic\n\n.\n\nuser\n\n.\n\nget_metadata_by_public_address\n\n08\n\nmagic\n\n.\n\nuser\n\n.\n\nget_metadata_by_token\n\n08\n\nmagic\n\n.\n\nuser\n\n.\n\nget_metadata_by_token\n\n09\n\nmagic\n\n.\n\nuser\n\n.\n\nlogout_by_issuer\n\n09\n\nmagic\n\n.\n\nuser\n\n.\n\nlogout_by_issuer\n\n10\n\nmagic\n\n.\n\nuser\n\n.\n\nlogout_by_public_address\n\n10\n\nmagic\n\n.\n\nuser\n\n.\n\nlogout_by_public_address\n\n11\n\nmagic\n\n.\n\nuser\n\n.\n\nlogout_by_token\n\n11\n\nmagic\n\n.\n\nuser\n\n.\n\nlogout_by_token\n\n#\n\nget_metadata_by_issuer\n\nRetrieves information about the user by the supplied iss from the DID Token. This method is useful if you store the iss with your user data, which is recommended.\n\niss\n\niss\n\nCopy\n\n01\n\nuser.get_metadata_by_issuer(issuer)\n\n01\n\nuser.get_metadata_by_issuer(issuer)\n\n#\n\n\u2022 issuer (str): The user's Decentralized ID, which can be parsed using token.get_issuer\n\nissuer\n\ntoken.get_issuer", "explanation": "The `#get_metadata_by_issuer` method is a part of the Magic Labs embedded wallet documentation, specifically within the user resource. Its main purpose is to **retrieve user metadata based on a supplied issuer** from a Decentralized ID (DID) Token.\n\nIn simple terms, this method allows you to fetch user information by identifying their issuer, which is a unique Decentralized ID. This is particularly useful when you store the issuer with your user data, as recommended.\n\nThe method takes a single argument:\n\n- `issuer (str)`: A string representing the user's Decentralized ID.\n\nTo use this method, you would call `user.get_metadata_by_issuer(issuer)`, where `issuer` is the Decentralized ID of the user you want to retrieve metadata for.\n\nFor example, if you have the issuer from a user's DID Token, you can use this method to fetch their metadata, like this:\n\n```ruby\nissuer = token.get_issuer\nmetadata = user.get_metadata_by_issuer(issuer)\n```\n\nThis method is essential for managing user metadata and ensuring you can identify and retrieve information about your users based on their unique Decentralized IDs.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/ruby#chunk-17", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 RateLimitingError: If you have sent too many requests within a given period of time\n\n\u2022 BadRequestError: If the supplied parameters are invalid\n\n\u2022 AuthenticationError: If your API secret key cannot be authenticated with Magic API server\n\n\u2022 ForbiddenError: If your API secret key is not authorized to access the resources\n\n\u2022 APIError: For any other API error\n\n\u2022 APIConnectionError: If your server cannot communicate with the Magic server. Normally this is a network communication error.\n\nRateLimitingError\n\nBadRequestError\n\nAuthenticationError\n\nForbiddenError\n\nAPIError\n\nAPIConnectionError\n\nSee Error Handling for more examples.\n\nError Handling", "explanation": "**Error Handling in Magic Labs Embedded Wallet**\n\nThe '#Raises' section in the Magic Labs embedded wallet documentation outlines the possible errors that can occur when interacting with the Magic API server. These errors are categorized into six distinct types, each representing a specific scenario that may prevent the API request from succeeding.\n\n**Main Purpose:**\n\nThe main purpose of this section is to provide developers with a clear understanding of the potential errors that can arise and how to handle them in their applications. By knowing the possible errors, developers can implement robust error handling mechanisms to ensure their applications remain stable and resilient in the face of API requests.\n\n**Error Types:**\n\nThe six error types listed are:\n\n1. **RateLimitingError:** Exceeded the maximum number of requests within a given time frame.\n2. **BadRequestError:** Invalid parameters were provided to the API request.\n3. **AuthenticationError:** The API secret key failed to authenticate with the Magic API server.\n4. **ForbiddenError:** The API secret key is not authorized to access the requested resources.\n5. **APIError:** A generic API error occurred (catch-all for any other API-related issues).\n6. **APIConnectionError:** A network communication error occurred, preventing the server from communicating with the Magic server.\n\nBy understanding these error types, developers can implement error handling strategies to mitigate their impact on the application, ensuring a better user experience and a more resilient system.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/ruby#chunk-18", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 A MagicResponse: The data field contains all of the user meta information.issuer (str): The user's Decentralized IDpublic_address (str): The authenticated user's public address (a.k.a.: public key). Currently, this value is associated with the Ethereum blockchain.email (str): The user's email addressphone_number (str): The user's phone numberoauth_provider (str): OAuth provider, if anywallets (arr): Array of user's wallet addresses\n\nMagicResponse\n\nMagicResponse\n\ndata\n\n\u2022 issuer (str): The user's Decentralized ID\n\n\u2022 public_address (str): The authenticated user's public address (a.k.a.: public key). Currently, this value is associated with the Ethereum blockchain.\n\n\u2022 email (str): The user's email address\n\n\u2022 phone_number (str): The user's phone number\n\n\u2022 oauth_provider (str): OAuth provider, if any\n\n\u2022 wallets (arr): Array of user's wallet addresses\n\nissuer\n\npublic_address\n\nemail\n\nphone_number\n\noauth_provider\n\nwallets", "explanation": "**Returns**\n\nThe #Returns section in the Magic Labs Embedded Wallet documentation explains the structure of the data that the API returns when a request is made. This includes a `MagicResponse` object with various fields containing user metadata.\n\n**Main Purpose**\n\nThe primary purpose of this section is to provide a clear and concise definition of the data structure that the API will return, helping developers to integrate the Magic Labs Embedded Wallet into their applications. This documentation helps developers to:\n\n1. Understand the format of the response data.\n2. Access specific user information, such as public address, email, phone number, and wallet addresses.\n3. Identify the Decentralized ID and OAuth provider, if any.\n4. Use the provided data for subsequent requests or application logic.\n\nBy examining this section, developers can write robust and reliable code to integrate the Magic Labs Embedded Wallet into their applications, ensuring seamless user authentication and experience.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/ruby#chunk-19", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nget_metadata_by_public_address\n\nRetrieves information about the user by the supplied public_address. This method is useful if you store the public_address with your user data.\n\npublic_address\n\npublic_address\n\nCopy\n\n01\n\nuser\n\n.\n\nget_metadata_by_public_address\n\n(\n\npublic_address\n\n)\n\n01\n\nuser\n\n.\n\nget_metadata_by_public_address\n\n(\n\npublic_address\n\n)\n\n#\n\n\u2022 public_address (str): The user's Ethereum public address, which can be parsed using token.get_public_address\n\npublic_address\n\ntoken.get_public_address", "explanation": "Let me break down the `# get_metadata_by_public_address - #Arguments` section from the Magic Labs embedded wallet documentation.\n\n**Purpose:** This method retrieves information about a user based on their Ethereum public address.\n\n**Description:** It's useful when you're storing the public address with your user data, allowing you to fetch the associated metadata without requiring the user to sign in.\n\n**Main Function:** The `get_metadata_by_public_address` method takes a single argument:\n\n* `public_address (str)`: The Ethereum public address of the user, which can be obtained using the `token.get_public_address` method.\n\nIn summary, this method fetches user metadata by public address, making it easier to associate user data without requiring explicit login credentials.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/ruby#chunk-20", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 RateLimitingError: If you have sent too many requests within a given period of time\n\n\u2022 BadRequestError: If the supplied parameters are invalid\n\n\u2022 AuthenticationError: If your API secret key cannot be authenticated with Magic API server\n\n\u2022 ForbiddenError: If your API secret key is not authorized to access the resources\n\n\u2022 APIError: For any other API error\n\n\u2022 APIConnectionError: If your server cannot communicate with the Magic server. Normally this is a network communication error.\n\nRateLimitingError\n\nBadRequestError\n\nAuthenticationError\n\nForbiddenError\n\nAPIError\n\nAPIConnectionError\n\nSee Error Handling for more examples.\n\nError Handling", "explanation": "**Understanding #Raises Section in Magic Labs Embedded Wallet Documentation**\n\nThe `#Raises` section in the Magic Labs Embedded Wallet documentation is about the various exceptions that may be raised when using the Magic Labs API, specifically written in Ruby.\n\n**Main Purpose:**\n\nThe primary purpose of this section is to inform developers about the potential errors that may occur when interacting with the Magic Labs API, enabling them to handle and resolve these issues programmatically.\n\n**Key Points:**\n\n* This section lists different exception types that may be raised, including:\n\t+ RateLimitingError: Too many requests within a given time\n\t+ BadRequestError: Invalid parameters\n\t+ AuthenticationError: Invalid API secret key\n\t+ ForbiddenError: Unauthorized API secret key\n\t+ APIError: General API error\n\t+ APIConnectionError: Network communication error with Magic server\n* Each exception type is linked to the Error Handling documentation for more detailed examples.\n\n**Impact on Developers:**\n\nBy understanding the possible exceptions that may be raised, developers can:\n\n1. Implement robust error handling mechanisms to prevent crashes and ensure a seamless user experience.\n2. Use specific exception types to provide more informative error messages and stack traces.\n3. Monitor API errors to identify and fix issues proactively.\n\nBy acknowledging and addressing these potential errors, developers can unlock the full potential of the Magic Labs API and provide reliable, high-quality services to their users.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/ruby#chunk-21", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 A MagicResponse: The data field contains all of the user meta information.issuer (str): The user's Decentralized IDpublic_address (str): The authenticated user's public address (a.k.a.: public key). Currently, this value is associated with the Ethereum blockchain.email (str): The user's email addressphone_number (str): The user's phone numberoauth_provider (str): OAuth provider, if anywallets (arr): Array of user's wallet addresses\n\nMagicResponse\n\nMagicResponse\n\ndata\n\n\u2022 issuer (str): The user's Decentralized ID\n\n\u2022 public_address (str): The authenticated user's public address (a.k.a.: public key). Currently, this value is associated with the Ethereum blockchain.\n\n\u2022 email (str): The user's email address\n\n\u2022 phone_number (str): The user's phone number\n\n\u2022 oauth_provider (str): OAuth provider, if any\n\n\u2022 wallets (arr): Array of user's wallet addresses\n\nissuer\n\npublic_address\n\nemail\n\nphone_number\n\noauth_provider\n\nwallets", "explanation": "**Returns:** Explanation and Purpose\n\nThe '# Returns' section is part of the Magic Labs embedded wallet API documentation for the Ruby server-side SDK. It describes the format and structure of the response received from an API call.\n\n**Main Purpose:**\n\nThe primary purpose of the '# Returns' section is to provide detailed information about the `MagicResponse` object returned from the API. This object contains a `data` field, which holds all the relevant user information.\n\n**Key Components:**\n\nThe `MagicResponse` object includes the following key components:\n\n1. **User Meta Information:**\n\t* `issuer` (Decentralized ID)\n\t* `public_address` (Public Ethereum address/Public Key)\n\t* `email`\n\t* `phone_number`\n\t* `oauth_provider` (OAuth provider, if any)\n2. **Wallet Information:**\n\t* `wallets` (Array of user's wallet addresses)\n\nThis section helps developers understand the structure and content of the API response, making it easier to integrate the Magic Labs embedded wallet into their applications.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/ruby#chunk-22", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nget_metadata_by_token\n\nRetrieves information about the user by the supplied DID Token.\n\nCopy\n\n01\n\nuser\n\n.\n\nget_metadata_by_token\n\n(\n\ndid_token\n\n)\n\n01\n\nuser\n\n.\n\nget_metadata_by_token\n\n(\n\ndid_token\n\n)\n\n#\n\n\u2022 did_token (str): A DID Token generated by a Magic User on the client-side.\n\ndid_token", "explanation": "**get_metadata_by_token - Overview**\n\nThe `get_metadata_by_token` function is a part of the Magic Labs embedded wallet documentation, specifically a Ruby SDK (Software Development Kit). This function retrieves information about a user authenticated by a supplied DID (Decentralized Identity) Token.\n\n**Main Purpose**\n\nThe primary purpose of `get_metadata_by_token` is to:\n\n1. **Verify User Identity**: Using a DID Token generated on the client-side, this function authenticates the user and retrieves their metadata.\n2. **Fetch User Metadata**: The function returns information about the authenticated user, which can be used for various purposes, such as authorization, profile management, or other application-specific requirements.\n\n**Key Argument**\n\n* `did_token` (str): A DID Token generated by a Magic User, which is used to authenticate the user and retrieve their metadata.\n\nBy calling `get_metadata_by_token`, your application can securely verify a user's identity and fetch their metadata, allowing for a seamless user experience while maintaining the integrity of their identity information.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/ruby#chunk-23", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 RateLimitingError: If you have sent too many requests within a given period of time\n\n\u2022 BadRequestError: If the supplied parameters are invalid\n\n\u2022 AuthenticationError: If your API secret key cannot be authenticated with Magic API server\n\n\u2022 ForbiddenError: If your API secret key is not authorized to access the resources\n\n\u2022 APIError: For any other API error\n\n\u2022 APIConnectionError: If your server cannot communicate with the Magic server. Normally this is a network communication error.\n\nRateLimitingError\n\nBadRequestError\n\nAuthenticationError\n\nForbiddenError\n\nAPIError\n\nAPIConnectionError\n\nSee Error Handling for more examples.\n\nError Handling", "explanation": "Based on the provided documentation, the '#Raises' section explains the exceptions that may be raised when interacting with the Magic API through the Ruby SDK. These exceptions are categorized into several types:\n\n1. **RateLimitingError**: Thrown when too many requests are sent within a given time period, exceeding the API's rate limit.\n2. **BadRequestError**: Occurs when the supplied parameters are invalid, causing the API request to fail.\n3. **AuthenticationError**: Triggers when the provided API secret key cannot be authenticated with the Magic API server.\n4. **ForbiddenError**: Raised when the API secret key is not authorized to access specific resources or methods.\n5. **APIError**: A catch-all error type for any other API-related issues that don't fit into the above categories.\n6. **APIConnectionError**: Indicates a network communication error, preventing the local server from connecting to the Magic server.\n\nThe main purpose of this section is to:\n\n* Inform developers about potential errors that may occur during API interactions.\n* Encourage developers to implement proper error handling and exception management in their Ruby code using the Magic API SDK.\n* Guide developers on how to interpret and respond to these error types, ensuring a better user experience and more robust application functionality.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/ruby#chunk-24", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 A MagicResponse: The data field contains all of the user meta information.issuer (str): The user's Decentralized IDpublic_address (str): The authenticated user's public address (a.k.a.: public key). Currently, this value is associated with the Ethereum blockchain.email (str): The user's email addressphone_number (str): The user's phone numberoauth_provider (str): OAuth provider, if anywallets (arr): Array of user's wallet addresses\n\nMagicResponse\n\nMagicResponse\n\ndata\n\n\u2022 issuer (str): The user's Decentralized ID\n\n\u2022 public_address (str): The authenticated user's public address (a.k.a.: public key). Currently, this value is associated with the Ethereum blockchain.\n\n\u2022 email (str): The user's email address\n\n\u2022 phone_number (str): The user's phone number\n\n\u2022 oauth_provider (str): OAuth provider, if any\n\n\u2022 wallets (arr): Array of user's wallet addresses\n\nissuer\n\npublic_address\n\nemail\n\nphone_number\n\noauth_provider\n\nwallets", "explanation": "**Explanation of the 'Returns' Section:**\n\nThe 'Returns' section from the Magic Labs embedded wallet documentation describes the structure and contents of the response generated by a Magic Response API call. This response contains user information, including their Decentralized ID, email address, phone number, OAuth provider (if any), wallets, and authenticated user's public addresses (public keys) linked to the Ethereum blockchain.\n\n**Main Purpose:**\n\nThe main purpose of the 'Returns' section is to provide developers with a clear understanding of the data structure they can expect when making a Magic Response API call, allowing them to integrate the Magic Labs embedded wallet seamlessly into their applications and services.\n\n**Key Components:**\n\n1. **Issuer:** The user's Decentralized ID.\n2. **Public Address:** The authenticated user's public address (a.k.a.: public key) associated with the Ethereum blockchain.\n3. **Email Address:** The user's email address.\n4. **Phone Number:** The user's phone number.\n5. **OAuth Provider:** The OAuth provider connected to the user's account (if any).\n6. **Wallets:** An array of the user's wallets (addresses).", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/ruby#chunk-25", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nlogout_by_issuer\n\nLogs a user out of all Magic SDK sessions given the user's Decentralized ID (iss). This method is useful if you store the iss with your user data, which is recommended.\n\niss\n\niss\n\nCopy\n\n01\n\nuser\n\n.\n\nlogout_by_issuer\n\n(\n\nissuer\n\n)\n\n01\n\nuser\n\n.\n\nlogout_by_issuer\n\n(\n\nissuer\n\n)\n\n#\n\n\u2022 issuer (str): The user's Decentralized ID, which can be parsed using token.get_issuer\n\nissuer\n\ntoken.get_issuer", "explanation": "**Logout_by_Issuer Function**\n\nThe `logout_by_issuer` function is a method used to log a user out of all Magic SDK sessions given their Decentralized ID (iss). Its primary purpose is to invalidate all active sessions associated with a specific user, ensuring secure access and revoking further access to their Magic Labs embedded wallet.\n\n**Key Details**\n\n* The function takes one argument:\n\t+ `issuer` (str): The user's Decentralized ID, obtained through the `token.get_issuer` method.\n* Its recommended use is when storing the iss with user data, as stated in the documentation.\n* This function is designed to be used in scenarios where a user's access needs to be revoked, providing an extra layer of security and user data protection.\n\n**Example Use Case**\n\n```ruby\nissuer = token.get_issuer\nlogout_by_issuer(issuer)\n```\n\nIn this example, the `token.get_issuer` method is used to obtain the user's Decentralized ID, which is then passed to the `logout_by_issuer` function to invalidate all active Magic SDK sessions associated with that user.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/ruby#chunk-26", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 RateLimitingError: If you have sent too many requests within a given period of time\n\n\u2022 BadRequestError: If the supplied parameters are invalid\n\n\u2022 AuthenticationError: If your API secret key cannot be authenticated with Magic API server\n\n\u2022 ForbiddenError: If your API secret key is not authorized to access the resources\n\n\u2022 APIError: For any other API error\n\n\u2022 APIConnectionError: If your server cannot communicate with the Magic server. Normally this is a network communication error.\n\nRateLimitingError\n\nBadRequestError\n\nAuthenticationError\n\nForbiddenError\n\nAPIError\n\nAPIConnectionError\n\nSee Error Handling for more examples.\n\nError Handling", "explanation": "**#\"Raises\" Section in Magic Labs Embedded Wallet Ruby SDK Documentation**\n\nThe \"#Raises\" section in the Magic Labs Embedded Wallet Ruby SDK documentation explains the types of errors that can occur when using the Magic API. This section is essential for developers to understand how to handle and troubleshoot issues with their Magic API integrations.\n\n**Main Purpose:**\n\nThe primary purpose of the \"#Raises\" section is to provide a list of potential error classes that can be raised during API interactions. By understanding these error classes, developers can:\n\n1. Handle errors properly in their code.\n2. Identify and diagnose issues with their Magic API integrations.\n3. Implement proper error handling and logging mechanisms.\n\n**Error Types:**\n\nThe section lists 6 types of errors that can occur:\n\n1. **RateLimitingError**: Exceeding the maximum number of requests within a time frame.\n2. **BadRequestError**: Invalid supplied parameters.\n3. **AuthenticationError**: Unauthorized API secret key.\n4. **ForbiddenError**: Insufficient permissions for the API secret key.\n5. **APIError**: General API errors.\n6. **APIConnectionError**: Network communication errors between the server and Magic server.\n\n**Additional Resource:**\n\nThe section also mentions the \"Error Handling\" documentation for more examples and guidance on how to handle errors in Magic API integrations.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/ruby#chunk-27", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 A MagicResponse\n\nMagicResponse\n\nMagicResponse", "explanation": "The '# Returns' section in the Magic Link documentation for Ruby Server-Side SDKs is about the response structure that Magic Link API returns to the SDK after processing a request.\n\nThe main purpose of this section is to document the data format of the MagicResponse, which is the object returned by the Magic Link API. This includes the possible keys and their corresponding data types that will be present in the response.\n\nIn essence, the '# Returns' section is a blueprint of what to expect from the API after a request is made, allowing developers to effectively parse and utilize the returned data in their applications.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/ruby#chunk-28", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nlogout_by_public_address\n\nLogs a user out of all Magic SDK sessions given the user's public address. This method is useful if you store the public_address .\n\npublic_address\n\nCopy\n\n01\n\nuser\n\n.\n\nlogout_by_public_address\n\n(\n\npublic_address\n\n)\n\n01\n\nuser\n\n.\n\nlogout_by_public_address\n\n(\n\npublic_address\n\n)\n\n#\n\n\u2022 public_address (str): The user's Ethereum public address\n\npublic_address", "explanation": "**Logout by Public Address**\n\nThe `logout_by_public_address` method is used to log a user out of all Magic Wallet SDK sessions associated with their Ethereum public address. This method is particularly useful if you store the user's public address and want to forcibly log them out of all active sessions.\n\n**Key Benefits:**\n\n* Allows you to log a user out of all sessions with a single public address\n* Useful for scenarios where you store the public address and want to ensure secure logout\n\n**Usage Example:**\n\n```ruby\nlogout_by_public_address(\"0x...address...\")\n```\n\nIn this example, replace `\"0x...address...\"` with the actual Ethereum public address you want to log out. This will dissociate the user from the Magic Wallet SDK sessions associated with that public address.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/ruby#chunk-29", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 RateLimitingError: If you have sent too many requests within a given period of time\n\n\u2022 BadRequestError: If the supplied parameters are invalid\n\n\u2022 AuthenticationError: If your API secret key cannot be authenticated with Magic API server\n\n\u2022 ForbiddenError: If your API secret key is not authorized to access the resources\n\n\u2022 APIError: For any other API error\n\n\u2022 APIConnectionError: If your server cannot communicate with the Magic server. Normally this is a network communication error.\n\nRateLimitingError\n\nBadRequestError\n\nAuthenticationError\n\nForbiddenError\n\nAPIError\n\nAPIConnectionError\n\nSee Error Handling for more examples.\n\nError Handling", "explanation": "**Understanding #Raises in Magic Labs Embedded Wallet Documentation**\n\nThe #Raises section in the Magic Labs Embedded Wallet documentation is about error handling in the Magic API client. It lists specific errors that may occur when interacting with the Magic API server. These errors are raised (or returned) when something goes wrong during the API request process.\n\n**Main Purpose:**\n\nThe primary purpose of the #Raises section is to inform developers about potential errors they may encounter when using the Magic API client. By knowing what errors can occur and how to handle them, developers can write more robust code that can recover from unexpected issues, improve user experience, and enhance overall application reliability.\n\n**Key Takeaways:**\n\n* The #Raises section identifies five main error types:\n\t1. RateLimitingError\n\t2. BadRequestError\n\t3. AuthenticationError\n\t4. ForbiddenError\n\t5. APIError\n\t6. APIConnectionError\n* Each error type represents a specific scenario where something went wrong during the API request process.\n* Error handling is crucial for developing robust and reliable applications that interact with the Magic API server.\n\n**Best Practice:**\n\nTo handle these errors effectively, developers should:\n\n1. Catch and process each error type in their application code.\n2. Provide meaningful error messages or feedback to users.\n3. Implement retry mechanisms or fallback strategies to handle temporary errors.\n4. Monitor error rates and adjust application behavior accordingly.\n5. Review Magic API documentation for updates on error handling best practices.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/ruby#chunk-30", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 A MagicResponse\n\nMagicResponse\n\nMagicResponse", "explanation": "The '#Returns' section from the Magic Link Ruby Server-Side SDK documentation explains what function or value is returned from a specific API call when using the Magic Labs embedded wallet. \n\nHere's a breakdown of the information provided:\n\n- It starts by mentioning that a `MagicResponse` is returned.\n- Further down it is mentioned that `MagicResponse`, then leaves it blank.\n\nBased on general knowledge about Magic Labs documentation and the context of the `MagicResponse` an educated guess would be that the `MagicResponse` contains information about the result of the API call, such as success or failure status, and possibly relevant details or errors encountered during the operation.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/ruby#chunk-31", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nlogout_by_token\n\nLogs a user out of all Magic SDK sessions given the DID Token.\n\nCopy\n\n01\n\nuser\n\n.\n\nlogout_by_token\n\n(\n\ndid_token\n\n)\n\n01\n\nuser\n\n.\n\nlogout_by_token\n\n(\n\ndid_token\n\n)\n\n#\n\n\u2022 did_token (str): A DID Token generated by a Magic user on the client-side\n\ndid_token", "explanation": "**logout_by_token Function**\n\nThe `logout_by_token` function is used to log a Magic user out of all sessions associated with a given DID (Decentralized Identifier) Token.\n\n**Main Purpose:**\n\nThis function is intended to invalidate all active sessions for a particular user when a DID Token is provided. Essentially, it removes the user's authentication credentials, effectively logging them out across all sessions linked to the provided token.\n\n**Usage:**\n\nTo use `logout_by_token`, you'll need to pass a valid `did_token` as an argument. The `did_token` is generated by Magic user on the client-side, making it a secure method of revoking sessions and maintaining session management.\n\nHere's a concise summary:\n\n* Inputs: `did_token` (a string)\n* Functionality: Logs out user across all sessions\n* Security: Revokes active sessions linked to the provided token\n\nBy using `logout_by_token`, you can manage user sessions securely and efficiently, which is an essential aspect of maintaining robust authentication and authorization systems with the Magic Labs embedded wallet.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/ruby#chunk-32", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 RateLimitingError: If you have sent too many requests within a given period of time\n\n\u2022 BadRequestError: If the supplied parameters are invalid\n\n\u2022 AuthenticationError: If your API secret key cannot be authenticated with Magic API server\n\n\u2022 ForbiddenError: If your API secret key is not authorized to access the resources\n\n\u2022 APIError: For any other API error\n\n\u2022 APIConnectionError: If your server cannot communicate with the Magic server. Normally this is a network communication error.\n\nRateLimitingError\n\nBadRequestError\n\nAuthenticationError\n\nForbiddenError\n\nAPIError\n\nAPIConnectionError\n\nSee Error Handling for more examples.\n\nError Handling", "explanation": "The '#Raises' section of the Magic Labs embedded wallet documentation discusses potential errors that can occur when using the API. These errors are categorized based on the type of issue that triggers them. The main purpose is to inform developers about the possible exceptions they may encounter and how to handle them.\n\nHere's a breakdown of the main errors:\n\n- **Rate limiting errors**: Occur when too many requests are sent in a short time, exceeding the allowed limit.\n- **Invalid parameter errors**: Happen when supplied parameters are incorrect or invalid, causing the API to reject the request.\n- **Authentication errors**: Triggered when the API secret key fails to authenticate with the Magic API server, preventing access to resources.\n- **Authorization errors**: Occur when the API secret key is not authorized or lacks permission to access specific resources.\n- **General API errors**: Catch-all errors for any other issues not classified within the other categories.\n- **Communication errors**: Occur when there's a problem communicating with the Magic server due to network issues.\n\nDevelopers can use this information to implement error handling in their code, ensuring it behaves as expected in various scenarios and provides a better user experience.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/ruby#chunk-33", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 A MagicResponse\n\nMagicResponse\n\nMagicResponse", "explanation": "Based on the provided documentation section titled '#Returns' from the Magic Labs embedded wallet Ruby SDK (server-side SDK), this section outlines the expected return type of API calls made to the SDK.\n\nHere's a breakdown of what it means and its purpose:\n\n- The '#Returns' section usually indicates what data or object will be returned by the API calls made to the specific endpoint.\n- In this case, the expected return type is a **MagicResponse** object.\n\n**Key Information:** \n\n- A **MagicResponse** is the primary object returned by Magic Labs embedded wallet SDK APIs. It contains the result of the API call and an error (if any).\n- This object is crucial for handling API response data, verifying errors, and performing further actions based on the outcome.\n\n**Purpose:** \n\n- The main purpose of this section is to inform developers about the expected structure and content of the API response, allowing them to handle it appropriately in their code.\n\nTo summarize: The '#Returns' section provides essential information on the expected return type, specifically a **MagicResponse** object, allowing developers to properly handle API responses and make informed decisions based on the result of their API calls.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/ruby#chunk-34", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n#\n\nThere is only one response object that will be returned from a successful API call.\n\n#\n\nThis is the interface to interact Magic API responses. It will only be returned if the API request status code is between 200 (inclusive) and 300 (exclusive).\n\nYou will have access to the following attributes:\n\n\u2022 content (string): Raw content returned by the API response\n\n\u2022 data (hash): Parsed content\n\n\u2022 status_code (num): HTTP status code for the given request\n\ncontent\n\ndata\n\nstatus_code\n\nCopy\n\n01\n\nrequire\n\n'magic-admin'\n\n01\n\nrequire\n\n'magic-admin'\n\n02\n\n02\n\n03\n\nresponse\n\n=\n\nMagicAdmin\n\n:\n\n:\n\nHttp\n\n:\n\n:\n\nResponse\n\n.\n\nnew\n\n(\n\nhttp_resp\n\n)\n\n03\n\nresponse\n\n=\n\nMagicAdmin\n\n:\n\n:\n\nHttp\n\n:\n\n:\n\nResponse\n\n.\n\nnew\n\n(\n\nhttp_resp\n\n)\n\n04\n\nresponse\n\n.\n\ncontent\n\n04\n\nresponse\n\n.\n\ncontent\n\n05\n\nresponse\n\n.\n\ndata\n\n05\n\nresponse\n\n.\n\ndata\n\n06\n\nresponse\n\n.\n\nstatus_code\n\n06\n\nresponse\n\n.\n\nstatus_code", "explanation": "**Response and Error Handling - MagicResponse**\n\nThe MagicResponse section of the documentation focuses on how Magic Labs embedded wallet APIs handle successful responses. A successful API call, which yields a response code between 200 and 300 (exclusive), returns an instance of MagicResponse.\n\n**Main Purpose:**\n\nThe primary purpose of MagicResponse is to provide a unified interface to interact with API responses, making it easier for developers to access the result of their API requests.\n\n**Key Features:**\n\n- **Content**: A string containing the raw content of the API response.\n- **Data**: A hash (or dictionary) representing the parsed content of the API response.\n- **Status Code**: An integer indicating the HTTP status code of the given request.\n\n**Example Use Cases:**\n\n- Accessing the raw content of an API response: `response.content`.\n- Extracting data from the parsed response: `response.data`.\n- Checking the HTTP status code of an API request: `response.status_code`.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/ruby#chunk-35", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nThe conventional HTTP response is adopted by the SDK. For the status code in:\n\n\u2022 2XX - Indicates success\n\n\u2022 4XX - Indicates client errors. Information provided to the SDK is invalid.\n\n\u2022 5XX - Indicates server errors\n\n2XX\n\n4XX\n\n5XX\n\nBelow is the error class inheritance which can help developers to programmatically handle the error cases.\n\nCopy\n\n01\n\nMagicError\n\n01\n\nMagicError\n\n02\n\n|\n\n02\n\n|\n\n03\n\n|------- DIDTokenError\n\n03\n\n|------- DIDTokenError\n\n04\n\n|\n\n04\n\n|\n\n05\n\n|------- RequestError\n\n05\n\n|------- RequestError\n\n06\n\n|\n\n06\n\n|\n\n07\n\n|------- RateLimitingError\n\n07\n\n|------- RateLimitingError\n\n08\n\n|------- BadRequestError\n\n08\n\n|------- BadRequestError\n\n09\n\n|------- AuthenticationError\n\n09\n\n|------- AuthenticationError\n\n10\n\n|------- ForbiddenError\n\n10\n\n|------- ForbiddenError\n\n11\n\n|------- APIError\n\n11\n\n|------- APIError\n\n12\n\n|------- APIConnectionError\n\n12\n\n|------- APIConnectionError\n\n#\n\nThis is the base class of all the Magic SDK errors.\n\nCopy\n\n01\n\nMagicError\n\n.\n\nnew\n\n(\n\n'<message>'\n\n)\n\n01\n\nMagicError\n\n.\n\nnew\n\n(\n\n'<message>'\n\n)", "explanation": "**#Errors - #MagicError Documentation Overview**\n\nThis section of the Magic Labs embedded wallet documentation explains the standard error handling and response conventions adopted by the Magic SDK. The main purpose is to provide developers with a clear understanding of how error handling works within the SDK and how to programmatically handle different types of errors.\n\n**Key Points**\n\n* The Magic SDK follows the conventional HTTP response status code convention:\n\t+ 2XX: Success\n\t+ 4XX: Client errors, often due to invalid information provided to the SDK\n\t+ 5XX: Server errors\n* A detailed error class hierarchy is presented, with `MagicError` serving as the base class for all Magic SDK errors. This hierarchy includes various subclasses that inherit from `MagicError`, each representing a specific type of error, such as:\n\t+ `DIDTokenError`\n\t+ `RequestError`\n\t+ `RateLimitingError`\n\t+ `BadRequestError`\n\t+ `AuthenticationError`\n\t+ `ForbiddenError`\n\t+ `APIError`\n\t+ `APIConnectionError`\n* The documentation provides detailed information on the `MagicError` class, including its constructor, which takes a message parameter, allowing developers to create instances of the error class to handle and propagate errors within their code.\n\n**Key Benefits**\n\n* Developers can easily identify and handle specific types of errors using the provided error class hierarchy.\n* The `MagicError` class serves as a base class for all errors, enabling developers to write more generic error-handling code.\n* The detailed documentation facilitates a deeper understanding of error handling within the Magic SDK, allowing developers to create more robust and error-resistant applications.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/ruby#chunk-36", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nAny DID Token related error. This can mean the given token is malformed or invalid.", "explanation": "Based on the Magic Labs embedded wallet documentation, the `#DIDTokenError` is an error class that represents any issue related to a Digitally Identifiable (DID) Token. A DID Token is a type of token that verifies a user's identity in the Magic Labs embedded wallet.\n\nThe main purpose of the `#DIDTokenError` is to capture and manage any error that occurs when working with DID Tokens, such as:\n\n* A malformed or invalid DID Token\n* errors validating a DID Token\n\nWhen an error occurs with a DID Token, the `#DIDTokenError` can be raised and handled by the application to provide a clear indication of the problem and potentially guide the user to fix the issue or provide alternative solutions. \n\nThis error handling makes it easier to troubleshoot and debug issues related to DID Token validation, helping developers build more robust and reliable applications that utilize Magic Labs' embedded wallet features.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/ruby#chunk-37", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nThis is the base class of all the Magic API request errors. This error class will provide details of unsuccessful API requests.\n\nCopy\n\n01\n\nhttp_detail\n\n=\n\n{\n\n01\n\nhttp_detail\n\n=\n\n{\n\n02\n\nhttp_status\n\n:\n\n'<http_status>'\n\n,\n\n02\n\nhttp_status\n\n:\n\n'<http_status>'\n\n,\n\n03\n\nhttp_code\n\n:\n\n'<http_code>'\n\n,\n\n03\n\nhttp_code\n\n:\n\n'<http_code>'\n\n,\n\n04\n\nhttp_response\n\n:\n\n'<http_response>'\n\n,\n\n04\n\nhttp_response\n\n:\n\n'<http_response>'\n\n,\n\n05\n\nhttp_message\n\n:\n\n'<http_message>'\n\n,\n\n05\n\nhttp_message\n\n:\n\n'<http_message>'\n\n,\n\n06\n\nhttp_error_code\n\n:\n\n'<http_error_code>'\n\n,\n\n06\n\nhttp_error_code\n\n:\n\n'<http_error_code>'\n\n,\n\n07\n\nhttp_request_params\n\n:\n\n'<http_request_params>'\n\n,\n\n07\n\nhttp_request_params\n\n:\n\n'<http_request_params>'\n\n,\n\n08\n\nhttp_request_data\n\n:\n\n'<http_request_data>'\n\n,\n\n08\n\nhttp_request_data\n\n:\n\n'<http_request_data>'\n\n,\n\n09\n\nhttp_method\n\n:\n\n'<http_method>'\n\n09\n\nhttp_method\n\n:\n\n'<http_method>'\n\n10\n\n}\n\n10\n\n}\n\n11\n\nMagicAdmin\n\n:\n\n:\n\nRequestError\n\n.\n\nnew\n\n(\n\n'<message>'\n\n,\n\nhttp_detail\n\n)\n\n11\n\nMagicAdmin\n\n:\n\n:\n\nRequestError\n\n.\n\nnew\n\n(\n\n'<message>'\n\n,\n\nhttp_detail\n\n)\n\n429\n\n400\n\n401\n\n403\n\n500\n\n404", "explanation": "**#RequestError Documentation Explanation**\n\nThe `RequestError` documentation section explains a base class for all Magic API request errors. Its main purpose is to provide detailed information about an unsuccessful API request.\n\n**Key Features:**\n\n1. **Error Reporting**: The `RequestError` class provides a standardized way to report details about request failures, including HTTP response codes, error messages, and request parameters.\n2. **Error Details**: The class includes several attributes that provide information about the error, such as:\n\t* `http_status`: The HTTP status code returned by the server.\n\t* `http_code`: The HTTP error code.\n\t* `http_response`: The complete HTTP response from the server.\n\t* `http_message`: A human-readable message describing the error.\n\t* `http_error_code`: The error code returned by the server.\n\t* `http_request_params`: The parameters sent in the HTTP request.\n\t* `http_request_data`: The data sent in the HTTP request.\n\t* `http_method`: The HTTP request method (e.g., GET, POST, etc.).\n3. **Message Option**: The `RequestError` class can be initialized with an optional message parameter, which provides a human-readable description of the error.\n4. **MagicAdmin Integration**: The class is designed to work with MagicAdmin, a server-side SDK for the Magic API.\n\n**Purpose:** The `RequestError` class is intended to simplify error handling by providing a standardized way to report and access details about API request failures. By using this class, developers can easily identify and handle specific types of errors, such as 401 authentication errors, 403 permission errors, and 500 internal server errors.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/ruby#chunk-38", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nIt is recommended to implement error handling for API responses.\n\nCopy\n\n01\n\nbegin\n\n01\n\nbegin\n\n02\n\n# Make requests to Magic server.\n\n02\n\n# Make requests to Magic server.\n\n03\n\nrescue\n\nMagicAdmin\n\n:\n\n:\n\nDIDTokenError\n\n=\n\n>\n\ne\n\n03\n\nrescue\n\nMagicAdmin\n\n:\n\n:\n\nDIDTokenError\n\n=\n\n>\n\ne\n\n04\n\nputs e\n\n.\n\nmessage\n\n04\n\nputs e\n\n.\n\nmessage\n\n05\n\nrescue\n\nMagicAdmin\n\n:\n\n:\n\nRateLimitingError\n\n=\n\n>\n\ne\n\n05\n\nrescue\n\nMagicAdmin\n\n:\n\n:\n\nRateLimitingError\n\n=\n\n>\n\ne\n\n06\n\nputs e\n\n.\n\nmessage\n\n06\n\nputs e\n\n.\n\nmessage\n\n07\n\nrescue\n\nMagicAdmin\n\n:\n\n:\n\nBadRequestError\n\n=\n\n>\n\ne\n\n07\n\nrescue\n\nMagicAdmin\n\n:\n\n:\n\nBadRequestError\n\n=\n\n>\n\ne\n\n08\n\nputs e\n\n.\n\nmessage\n\n08\n\nputs e\n\n.\n\nmessage\n\n09\n\nrescue\n\nMagicAdmin\n\n:\n\n:\n\nAuthenticationError\n\n=\n\n>\n\ne\n\n09\n\nrescue\n\nMagicAdmin\n\n:\n\n:\n\nAuthenticationError\n\n=\n\n>\n\ne\n\n10\n\nputs e\n\n.\n\nmessage\n\n10\n\nputs e\n\n.\n\nmessage\n\n11\n\nrescue\n\nMagicAdmin\n\n:\n\n:\n\nForbiddenError\n\n=\n\n>\n\ne\n\n11\n\nrescue\n\nMagicAdmin\n\n:\n\n:\n\nForbiddenError\n\n=\n\n>\n\ne\n\n12\n\nputs e\n\n.\n\nmessage\n\n12\n\nputs e\n\n.\n\nmessage\n\n13\n\nrescue\n\nMagicAdmin\n\n:\n\n:\n\nAPIError\n\n=\n\n>\n\ne\n\n13\n\nrescue\n\nMagicAdmin\n\n:\n\n:\n\nAPIError\n\n=\n\n>\n\ne\n\n14\n\nputs e\n\n.\n\nmessage\n\n14\n\nputs e\n\n.\n\nmessage\n\n15\n\nrescue\n\nMagicAdmin\n\n:\n\n:\n\nAPIConnectionError\n\n=\n\n>\n\ne\n\n15\n\nrescue\n\nMagicAdmin\n\n:\n\n:\n\nAPIConnectionError\n\n=\n\n>\n\ne\n\n16\n\nputs e\n\n.\n\nmessage\n\n16\n\nputs e\n\n.\n\nmessage\n\n17\n\nend\n\n17\n\nend", "explanation": "**Error Handling in Magic Labs Embedded Wallet Documentation**\n\nThe provided documentation section is about implementing error handling for API responses when making requests to the Magic server using the Ruby SDK.\n\n**Main Purpose:**\n\nThe main purpose of this error handling implementation is to catch and handle specific types of errors that may occur during API requests, such as:\n\n1. DIDTokenError\n2. RateLimitingError\n3. BadRequestError\n4. AuthenticationError\n5. ForbiddenError\n6. APIError\n7. APIConnectionError\n\n**Key Features:**\n\n1. **Exception Handling**: The code uses the `rescue` keyword to catch exceptions raised by the API responses.\n2. **Error Identification**: Specific error types are identified using the `MagicAdmin:` prefix and the error class (e.g., `DIDTokenError`).\n3. **Error Messages**: The error messages are printed to the console using the `puts e.message` statement.\n4. **Try-Except Blocks**: Multiple try-except blocks are employed to catch different types of errors.\n\n**Benefits:**\n\n1. **Robust Error Handling**: This implementation ensures that errors are caught and handled, preventing application crashes.\n2. **Improved User Experience**: By logging error messages, developers can identify and resolve issues more efficiently.\n3. **Enhanced Debugging**: The error handling mechanism provides valuable insights into the nature of errors, facilitating debugging and optimization.\n\nBy incorporating this error handling implementation, developers can ensure that their Magic Labs Embedded Wallet applications are robust, reliable, and provide a better user experience.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/ruby#chunk-39", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 GitHub\n\n\u2022 Gem\n\nGitHub\n\nGem", "explanation": "The \"#Resources\" section in the Magic Labs embedded wallet documentation is a collection of external resources that are relevant to the Ruby Server-side SDK. \n\nHere's what each resource is about and its main purpose:\n\n1. **GitHub**: The main GitHub repository for the Magic Labs embedded wallet Ruby SDK is likely found here. This could contain information regarding code examples, API documentation, issues, pull requests, and more.\n\nMain purpose: Provides access to source code, community contributions, and documentation.\n\n2. **Gem**: A Gem (short for \"GEM: Gems are packaged, reusable groups of Ruby libraries\") is essentially a package manager for Ruby. The documentation likely uses a specific Gem to distribute the Magic Labs embedded wallet Ruby SDK.\n\nMain purpose: To install and manage dependencies for Ruby applications, in this case, the Magic Labs embedded wallet Ruby SDK.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/ruby#chunk-40", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nTo interact with the Ethereum blockchain, Magic Flutter SDK embeds web3dart as sub dependency. No more extra dependency is needed.\n\nweb3dart\n\nweb3dart", "explanation": "This documentation section explains how to integrate the Magic Labs embedded wallet with the Ethereum blockchain using Flutter. \n\nThe main purpose of this section is to outline the necessary steps and dependencies required to interact with the Ethereum blockchain in a Flutter application. \n\nHere are the key points from the section:\n\n* The Magic Flutter SDK embeds web3dart as a sub-dependency, eliminating the need for an additional dependency.\n* web3dart is a Dart library designed specifically for interacting with the Ethereum blockchain.\n\nIn summary, by integrating web3dart into your Flutter application, you will have access to Ethereum blockchain functionality through the Magic Labs embedded wallet.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/featured-chains/ethereum/flutter#chunk-1", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nThe Magic class is the entry-point to the Magic SDK. It must be instantiated with a Magic publishable key.\n\nCopy\n\n01\n\nimport\n\n'package:magic_sdk/magic_sdk.dart'\n\n;\n\n01\n\nimport\n\n'package:magic_sdk/magic_sdk.dart'\n\n;\n\n02\n\n02\n\n03\n\nvoid\n\nmain\n\n(\n\n)\n\n{\n\n03\n\nvoid\n\nmain\n\n(\n\n)\n\n{\n\n04\n\nrunApp\n\n(\n\nconst\n\nMyApp\n\n(\n\n)\n\n)\n\n;\n\n04\n\nrunApp\n\n(\n\nconst\n\nMyApp\n\n(\n\n)\n\n)\n\n;\n\n05\n\n05\n\n06\n\nMagic\n\n.\n\ninstance\n\n=\n\nMagic\n\n(\n\n\"YOUR_PUBLISHABLE_KEY\"\n\n)\n\n;\n\n06\n\nMagic\n\n.\n\ninstance\n\n=\n\nMagic\n\n(\n\n\"YOUR_PUBLISHABLE_KEY\"\n\n)\n\n;\n\n07\n\n}\n\n07\n\n}\n\nCopy\n\n01\n\nimport\n\n'package:magic_sdk/magic_sdk.dart'\n\n;\n\n01\n\nimport\n\n'package:magic_sdk/magic_sdk.dart'\n\n;\n\n02\n\nimport\n\n'package:magic_sdk/modules/web3/magic_credential.dart'\n\n;\n\n02\n\nimport\n\n'package:magic_sdk/modules/web3/magic_credential.dart'\n\n;\n\n03\n\nimport\n\n'package:web3dart/web3dart.dart'\n\n;\n\n03\n\nimport\n\n'package:web3dart/web3dart.dart'\n\n;\n\n04\n\n04\n\n05\n\nclass\n\nWeb3Page\n\nextends\n\nStatefulWidget\n\n{\n\n05\n\nclass\n\nWeb3Page\n\nextends\n\nStatefulWidget\n\n{\n\n06\n\nconst\n\nWeb3Page\n\n(\n\n{\n\nKey\n\n?\n\nkey\n\n}\n\n)\n\n:\n\nsuper\n\n(\n\nkey\n\n:\n\nkey\n\n)\n\n;\n\n06\n\nconst\n\nWeb3Page\n\n(\n\n{\n\nKey\n\n?\n\nkey\n\n}\n\n)\n\n:\n\nsuper\n\n(\n\nkey\n\n:\n\nkey\n\n)\n\n;\n\n07\n\n07\n\n08\n\n@override\n\n08\n\n@override\n\n09\n\nState\n\n<\n\nWeb3Page\n\n>\n\ncreateState\n\n(\n\n)\n\n=\n\n>\n\n_Web3PageState\n\n(\n\n)\n\n;\n\n09\n\nState\n\n<\n\nWeb3Page\n\n>\n\ncreateState\n\n(\n\n)\n\n=\n\n>\n\n_Web3PageState\n\n(\n\n)\n\n;\n\n10\n\n}\n\n10\n\n}\n\n11\n\n11\n\n12\n\nclass\n\n_Web3PageState\n\nextends\n\nState\n\n<\n\nWeb3Page\n\n>\n\n{\n\n12\n\nclass\n\n_Web3PageState\n\nextends\n\nState\n\n<\n\nWeb3Page\n\n>\n\n{\n\n13\n\nfinal\n\nmagic\n\n=\n\nMagic\n\n.\n\ninstance\n\n;\n\n13\n\nfinal\n\nmagic\n\n=\n\nMagic\n\n.\n\ninstance\n\n;\n\n14\n\n14\n\n15\n\nfinal\n\nclient\n\n=\n\nWeb3Client\n\n.\n\ncustom\n\n(\n\nMagic\n\n.\n\ninstance\n\n.\n\nprovider\n\n)\n\n;\n\n15\n\nfinal\n\nclient\n\n=\n\nWeb3Client\n\n.\n\ncustom\n\n(\n\nMagic\n\n.\n\ninstance\n\n.\n\nprovider\n\n)\n\n;\n\n16\n\nfinal\n\ncredential\n\n=\n\nMagicCredential\n\n(\n\nMagic\n\n.\n\ninstance\n\n.\n\nprovider\n\n)\n\n;\n\n16\n\nfinal\n\ncredential\n\n=\n\nMagicCredential\n\n(\n\nMagic\n\n.\n\ninstance\n\n.\n\nprovider\n\n)\n\n;\n\n17\n\n17\n\n18\n\n@override\n\n18\n\n@override\n\n19\n\nWidget\n\nbuild\n\n(\n\nBuildContext\n\ncontext\n\n)\n\n{\n\n19\n\nWidget\n\nbuild\n\n(\n\nBuildContext\n\ncontext\n\n)\n\n{\n\n20\n\n//Your page\n\n20\n\n//Your page\n\n21\n\n}\n\n21\n\n}\n\n22\n\n}\n\n22\n\n}", "explanation": "**Initialization Documentation Section Explanation**\n\nThe provided section is from the Magic Labs embedded wallet documentation for Flutter, specifically targeting Ethereum features. This section explains how to initialize the Magic SDK, which is the core component for interacting with Magic Labs.\n\n**Main Purpose**\n\nThe main purpose of the Initialization section is to guide developers in setting up the Magic SDK in their Flutter projects. This involves importing the necessary packages, creating a Magic instance, and providing it with a publishable key.\n\n**Key Points**\n\n1.  **Magic Class**: The Magic class serves as the entry-point for the Magic SDK. It must be instantiated with a valid publishable key.\n2.  **Publishable Key**: A publishable key is required to initialize the Magic SDK. This key can be obtained from the Magic Labs dashboard.\n3.  **Instance Creation**: The Magic instance is created by passing the publishable key to the `Magic` constructor.\n4.  **Integration**: The Magic instance must be integrated with other packages, such as `web3dart` and `magic_credential`, to enable web3 functionality.\n\n**Code Snippet**\n\nThe code snippet provided showcases the initialization of the Magic SDK in a Flutter project. It includes:\n\n1.  Importing the necessary packages.\n2.  Creating a Magic instance with a publishable key.\n3.  Integrating the Magic instance with other packages.\n4.  Extending the `StatefulWidget` to create a web3 page.\n\nBy following this Initialization section, developers can successfully set up the Magic Labs embedded wallet in their Flutter projects and begin interacting with web3 features.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/featured-chains/ethereum/flutter#chunk-2", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n#\n\nGoerli Block Explorer: https://goerli.etherscan.io\n\nhttps://goerli.etherscan.io\n\nGoerli Testnet Faucet: https://goerlifaucet.com\n\nhttps://goerlifaucet.com\n\nCopy\n\n01\n\nimport\n\n'package:magic_sdk/magic_sdk.dart'\n\n;\n\n01\n\nimport\n\n'package:magic_sdk/magic_sdk.dart'\n\n;\n\n02\n\nimport\n\n'package:magic_sdk/modules/web3/eth_network.dart'\n\n;\n\n02\n\nimport\n\n'package:magic_sdk/modules/web3/eth_network.dart'\n\n;\n\n03\n\n03\n\n04\n\nvoid\n\nmain\n\n(\n\n)\n\n{\n\n04\n\nvoid\n\nmain\n\n(\n\n)\n\n{\n\n05\n\nrunApp\n\n(\n\nconst\n\nMyApp\n\n(\n\n)\n\n)\n\n;\n\n05\n\nrunApp\n\n(\n\nconst\n\nMyApp\n\n(\n\n)\n\n)\n\n;\n\n06\n\n06\n\n07\n\nMagic\n\n.\n\ninstance\n\n=\n\nMagic\n\n.\n\neth\n\n(\n\n\"YOUR_PUBLISHABLE_KEY\"\n\n,\n\nnetwork\n\n:\n\nEthNetwork\n\n.\n\ngoerli\n\n)\n\n;\n\n07\n\nMagic\n\n.\n\ninstance\n\n=\n\nMagic\n\n.\n\neth\n\n(\n\n\"YOUR_PUBLISHABLE_KEY\"\n\n,\n\nnetwork\n\n:\n\nEthNetwork\n\n.\n\ngoerli\n\n)\n\n;\n\n08\n\n}\n\n08\n\n}", "explanation": "**What is the #Use Different Networks - #Testnet section about?**\n\nThis section of the documentation explains how to connect a Magic Labs embedded wallet to a test network, specifically the Goerli testnet, using the Flutter package.\n\n**Main purpose:**\n\nThe main purpose of this section is to provide a step-by-step guide on how to:\n\n1. Set up the Goerli testnet environment using a faucet (a service that provides free testnet ether) and a block explorer (a website that allows you to view transactions and other data on the testnet).\n2. Import the necessary packages in the Flutter app.\n3. Create a Magic Labs instance for the Goerli testnet using the `Magic.eth` method.\n4. Use the `EthNetwork.goerli` parameter to specify the Goerli testnet as the network.\n\n**Key points:**\n\n* The section provides links to the Goerli testnet faucet and block explorer.\n* It shows the necessary imports for the Flutter app.\n* It demonstrates how to create a Magic Labs instance for the Goerli testnet using the `Magic.eth` method and the `EthNetwork.goerli` parameter.\n* The code examples are provided in Dart syntax, suitable for a Flutter app.\n\nBy following this section, developers can set up a test environment for their Magic Labs embedded wallet using the Goerli testnet, allowing them to test and debug their app without using real ether.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/featured-chains/ethereum/flutter#chunk-3", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nYou can allow specific URLs to interact with the Magic SDK, such as a custom RPC URL to send transactions to your node. The Content Security Policy (CSP) of a browser dictates what resources can be loaded. If you're used a dedicated wallet, you can update the policy in the settings page of the dashboard with your custom URL. If you're using a universal wallet, please reach out to support to get your URL added.\n\nNote: the use of a custom node will require the RPC URL to the project's Content Security Policy from your Magic dashboard. Refer to the CSP documentation.\n\nMagic dashboard\n\nCSP documentation\n\nCopy\n\n01\n\nimport\n\n'package:magic_sdk/magic_sdk.dart'\n\n;\n\n01\n\nimport\n\n'package:magic_sdk/magic_sdk.dart'\n\n;\n\n02\n\n02\n\n03\n\nvoid\n\nmain\n\n(\n\n)\n\n{\n\n03\n\nvoid\n\nmain\n\n(\n\n)\n\n{\n\n04\n\nrunApp\n\n(\n\nconst\n\nMyApp\n\n(\n\n)\n\n)\n\n;\n\n04\n\nrunApp\n\n(\n\nconst\n\nMyApp\n\n(\n\n)\n\n)\n\n;\n\n05\n\n05\n\n06\n\nMagic\n\n.\n\ninstance\n\n=\n\nMagic\n\n.\n\ncustom\n\n(\n\n\"YOUR_PUBLISHABLE_KEY\"\n\n,\n\nrpcUrl\n\n:\n\n\"https://your.own.node\"\n\n,\n\nchainId\n\n:\n\n1011\n\n)\n\n;\n\n// your own node\n\n06\n\nMagic\n\n.\n\ninstance\n\n=\n\nMagic\n\n.\n\ncustom\n\n(\n\n\"YOUR_PUBLISHABLE_KEY\"\n\n,\n\nrpcUrl\n\n:\n\n\"https://your.own.node\"\n\n,\n\nchainId\n\n:\n\n1011\n\n)\n\n;\n\n// your own node\n\n07\n\n}\n\n07\n\n}\n\nDo not set the custom nodes to local IP address (E.x. \"http://127.0.0.1\"). Local IP will point to the network environment inside the mobile device / simulator\n\nhttp://127.0.0.1\"", "explanation": "**Custom Node: Overview**\n\nA Custom Node is a feature of the Magic Labs embedded wallet that allows you to interact with a specific URL for sending transactions to your own node. This feature is useful when you want to have more control over your transactions or when you're building a custom wallet solution.\n\n**Main Purpose:**\n\nThe main purpose of a Custom Node is to enable secure and compliant transactions by allowing you to specify a custom RPC (Remote Procedure Call) URL for your node. This way, you can ensure that your transactions are processed through your own node, rather than relying on a third-party node.\n\n**How it Works:**\n\nTo set up a Custom Node, you need to update the Content Security Policy (CSP) in your Magic dashboard to include your custom RPC URL. Then, in your code, you can instantiate the Magic SDK with the custom URL using the `Magic.custom` method.\n\n**Important Notes:**\n\n* Make sure to use a valid RPC URL that points to your own node. Local IP addresses (e.g., \"http://127.0.0.1\") are not supported.\n* If you're using a universal wallet, you'll need to contact support to get your custom URL added.\n* Refer to the CSP documentation for more information on updating the Content Security Policy in your Magic dashboard.\n\nBy using a Custom Node, you can have more control over your transactions and ensure that they are processed securely and compliantly.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/featured-chains/ethereum/flutter#chunk-4", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nweb3dart supports custodial design where the library will ask for user's private key to sign the payloads.\n\nweb3dart\n\nTo integrate web3dart in non-custodial, We recommend you to use MagicCredential to optimize security.\n\nweb3dart\n\nMagicCredential\n\nCopy\n\n01\n\nclass\n\nMagicCredential\n\n{\n\n01\n\nclass\n\nMagicCredential\n\n{\n\n02\n\n02\n\n03\n\nFuture\n\n<\n\nEthereumAddress\n\n>\n\ngetAccount\n\n(\n\n)\n\n03\n\nFuture\n\n<\n\nEthereumAddress\n\n>\n\ngetAccount\n\n(\n\n)\n\n04\n\nFuture\n\n<\n\nString\n\n>\n\npersonalSign\n\n(\n\n{\n\nrequired\n\nUint8List\n\npayload\n\n}\n\n)\n\n04\n\nFuture\n\n<\n\nString\n\n>\n\npersonalSign\n\n(\n\n{\n\nrequired\n\nUint8List\n\npayload\n\n}\n\n)\n\n05\n\nFuture\n\n<\n\nString\n\n>\n\nethSign\n\n(\n\n{\n\nrequired\n\nUint8List\n\npayload\n\n}\n\n)\n\n05\n\nFuture\n\n<\n\nString\n\n>\n\nethSign\n\n(\n\n{\n\nrequired\n\nUint8List\n\npayload\n\n}\n\n)\n\n06\n\nFuture\n\n<\n\nString\n\n>\n\nsignTypedDataLegacy\n\n(\n\n{\n\nrequired\n\nMap\n\npayload\n\n}\n\n)\n\n06\n\nFuture\n\n<\n\nString\n\n>\n\nsignTypedDataLegacy\n\n(\n\n{\n\nrequired\n\nMap\n\npayload\n\n}\n\n)\n\n07\n\nFuture\n\n<\n\nString\n\n>\n\nsignTypedData\n\n(\n\n{\n\nrequired\n\nMap\n\npayload\n\n}\n\n)\n\n07\n\nFuture\n\n<\n\nString\n\n>\n\nsignTypedData\n\n(\n\n{\n\nrequired\n\nMap\n\npayload\n\n}\n\n)\n\n08\n\nFuture\n\n<\n\nString\n\n>\n\nsendTransaction\n\n(\n\nTransaction\n\ntransaction\n\n)\n\n08\n\nFuture\n\n<\n\nString\n\n>\n\nsendTransaction\n\n(\n\nTransaction\n\ntransaction\n\n)\n\n09\n\n}\n\n09\n\n}\n\nYou will need to call MagicCredential getAccount() before other signing functions to get the public address that will be used from the current authenticated user.\n\nMagicCredential getAccount()", "explanation": "**Magic Credential Overview**\n\nThe `MagicCredential` class is a non-custodial design implementation in the web3dart library, specifically designed for use with the Magic.link platform. Its main purpose is to enable secure authentication and signing of payloads without exposing the user's private key.\n\n**Key Features and Functions**\n\nThe `MagicCredential` class provides the following key functions:\n\n1. **getAccount**: Retrieves the publicly visible address associated with the currently authenticated user.\n2. **personalSign**: Signs a payload ( Uint8List data) using the user's account.\n3. **ethSign**: Signs a payload ( Uint8List data) using the user's account.\n4. **signTypedDataLegacy**: Signs a payload ( Map data) using the user's account, following the old-typed data signing format.\n5. **signTypedData**: Signs a payload ( Map data) using the user's account, following the new-typed data signing format.\n6. **sendTransaction**: Sends a transaction ( Transaction object) to the blockchain.\n\n**Usage**\n\nTo use the `MagicCredential` class, you must call the `getAccount()` function first to retrieve the public address associated with the currently authenticated user. Subsequent signing functions, such as `personalSign`, `ethSign`, and `signTypedData`, can then be used with this public address.\n\n**Benefits**\n\nUsing the `MagicCredential` class provides several benefits, including:\n\n* Enhanced security: By not exposing the user's private key, you can improve the security of your application.\n* Non-custodial design: The user retains control of their account and private key, ensuring that your application does not become a custodian of user funds.\n* Easy integration: The `MagicCredential` class simplifies the process of integrating web3dart into your application, making it easier to onboard users and enable them to interact with the blockchain.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/featured-chains/ethereum/flutter#chunk-5", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n#\n\nCopy\n\n01\n\nimport\n\n'package:flutter/cupertino.dart'\n\n;\n\n01\n\nimport\n\n'package:flutter/cupertino.dart'\n\n;\n\n02\n\nimport\n\n'package:flutter/material.dart'\n\n;\n\n02\n\nimport\n\n'package:flutter/material.dart'\n\n;\n\n03\n\nimport\n\n'package:magic_sdk/magic_sdk.dart'\n\n;\n\n03\n\nimport\n\n'package:magic_sdk/magic_sdk.dart'\n\n;\n\n04\n\nimport\n\n'package:magic_sdk/modules/web3/magic_credential.dart'\n\n;\n\n04\n\nimport\n\n'package:magic_sdk/modules/web3/magic_credential.dart'\n\n;\n\n05\n\n05\n\n06\n\nclass\n\n_Web3PageState\n\nextends\n\nState\n\n<\n\nWeb3Page\n\n>\n\n{\n\n06\n\nclass\n\n_Web3PageState\n\nextends\n\nState\n\n<\n\nWeb3Page\n\n>\n\n{\n\n07\n\nfinal\n\nmagic\n\n=\n\nMagic\n\n.\n\ninstance\n\n;\n\n07\n\nfinal\n\nmagic\n\n=\n\nMagic\n\n.\n\ninstance\n\n;\n\n08\n\n08\n\n09\n\nfinal\n\ncredential\n\n=\n\nMagicCredential\n\n(\n\nMagic\n\n.\n\ninstance\n\n.\n\nprovider\n\n)\n\n;\n\n09\n\nfinal\n\ncredential\n\n=\n\nMagicCredential\n\n(\n\nMagic\n\n.\n\ninstance\n\n.\n\nprovider\n\n)\n\n;\n\n10\n\nfinal\n\nclient\n\n=\n\nWeb3Client\n\n.\n\ncustom\n\n(\n\nMagic\n\n.\n\ninstance\n\n.\n\nprovider\n\n)\n\n;\n\n10\n\nfinal\n\nclient\n\n=\n\nWeb3Client\n\n.\n\ncustom\n\n(\n\nMagic\n\n.\n\ninstance\n\n.\n\nprovider\n\n)\n\n;\n\n11\n\n11\n\n12\n\n@override\n\n12\n\n@override\n\n13\n\nWidget\n\nbuild\n\n(\n\nBuildContext\n\ncontext\n\n)\n\n{\n\n13\n\nWidget\n\nbuild\n\n(\n\nBuildContext\n\ncontext\n\n)\n\n{\n\n14\n\nreturn\n\nScaffold\n\n(\n\n14\n\nreturn\n\nScaffold\n\n(\n\n15\n\nbody\n\n:\n\nCenter\n\n(\n\n15\n\nbody\n\n:\n\nCenter\n\n(\n\n16\n\nchild\n\n:\n\n16\n\nchild\n\n:\n\n17\n\nColumn\n\n(\n\nmainAxisAlignment\n\n:\n\nMainAxisAlignment\n\n.\n\ncenter\n\n,\n\nchildren\n\n:\n\n[\n\n17\n\nColumn\n\n(\n\nmainAxisAlignment\n\n:\n\nMainAxisAlignment\n\n.\n\ncenter\n\n,\n\nchildren\n\n:\n\n[\n\n18\n\n18\n\n19\n\n/// send Transaction\n\n19\n\n/// send Transaction\n\n20\n\nElevatedButton\n\n(\n\n20\n\nElevatedButton\n\n(\n\n21\n\nonPressed\n\n:\n\n(\n\n)\n\nasync\n\n{\n\n21\n\nonPressed\n\n:\n\n(\n\n)\n\nasync\n\n{\n\n22\n\nvar\n\nhash\n\n=\n\nawait\n\nclient\n\n.\n\nsendTransaction\n\n(\n\n22\n\nvar\n\nhash\n\n=\n\nawait\n\nclient\n\n.\n\nsendTransaction\n\n(\n\n23\n\ncredential\n\n,\n\n23\n\ncredential\n\n,\n\n24\n\nTransaction\n\n(\n\n24\n\nTransaction\n\n(\n\n25\n\nto\n\n:\n\nEthereumAddress\n\n.\n\nfromHex\n\n(\n\n25\n\nto\n\n:\n\nEthereumAddress\n\n.\n\nfromHex\n\n(\n\n26\n\n'0x01568bf1c1699bb9d58fac67f3a487b28ab4ab2d'\n\n)\n\n,\n\n26\n\n'0x01568bf1c1699bb9d58fac67f3a487b28ab4ab2d'\n\n)\n\n,\n\n27\n\ngasPrice\n\n:\n\nEtherAmount\n\n.\n\ninWei\n\n(\n\nBigInt\n\n.\n\ntwo\n\n)\n\n,\n\n27\n\ngasPrice\n\n:\n\nEtherAmount\n\n.\n\ninWei\n\n(\n\nBigInt\n\n.\n\ntwo\n\n)\n\n,\n\n28\n\nmaxGas\n\n:\n\n100000\n\n,\n\n28\n\nmaxGas\n\n:\n\n100000\n\n,\n\n29\n\nvalue\n\n:\n\nEtherAmount\n\n.\n\nfromUnitAndValue\n\n(\n\nEtherUnit\n\n.\n\ngwei\n\n,\n\n2\n\n)\n\n,\n\n29\n\nvalue\n\n:\n\nEtherAmount\n\n.\n\nfromUnitAndValue\n\n(\n\nEtherUnit\n\n.\n\ngwei\n\n,\n\n2\n\n)\n\n,\n\n30\n\n)\n\n,\n\n30\n\n)\n\n,\n\n31\n\n)\n\n;\n\n31\n\n)\n\n;\n\n32\n\ndebugPrint\n\n(\n\n\"transaction, $hash\"\n\n)\n\n;\n\n32\n\ndebugPrint\n\n(\n\n\"transaction, $hash\"\n\n)\n\n;\n\n33\n\n}\n\n,\n\n33\n\n}\n\n,\n\n34\n\nchild\n\n:\n\nconst\n\nText\n\n(\n\n'sendTransaction'\n\n)\n\n,\n\n34\n\nchild\n\n:\n\nconst\n\nText\n\n(\n\n'sendTransaction'\n\n)\n\n,\n\n35\n\n)\n\n,\n\n35\n\n)\n\n,\n\n36\n\n]\n\n)\n\n)\n\n)\n\n;\n\n36\n\n]\n\n)\n\n)\n\n)\n\n;\n\n37\n\n}\n\n37\n\n}\n\n38\n\n}\n\n38\n\n}", "explanation": "**# Common Methods - # Send Transaction**\n\nThis documentation section explains how to send a transaction using the Magic Labs embedded wallet in a Flutter application.\n\n**Main Purpose**\n\nThe main purpose of this code snippet is to demonstrate how to send a transaction from one Ethereum address to another using the Magic Labs embedded wallet.\n\n**Key Components**\n\n1. Importing necessary packages from `flutter`, `magic_sdk`, and `magic_sdk_modules_web3`.\n2. Creating a `MagicCredential` instance to authenticate with the Magic Labs API.\n3. Creating a `Web3Client` instance with the Magic Labs API provider.\n4. Defining a `sendTransaction` method using the `ElevatedButton` widget.\n5. Sending a transaction using the `sendTransaction` method on the `Web3Client` instance.\n\n**Transaction Details**\n\nIn this code snippet, the transaction details are as follows:\n\n* `to`: The recipient's Ethereum address.\n* `gasPrice`: The gas price in Wei.\n* `maxGas`: The maximum gas limit.\n* `value`: The transaction value in Gwei.\n\n**Code Example**\n\nThe code example shows a Flutter application with a `Web3Page` widget that has a \"send transaction\" button. When the button is pressed, the `sendTransaction` method is executed, which sends a transaction to the specified recipient address.\n\n**Key Takeaway**\n\nThis code snippet demonstrates how to use the Magic Labs embedded wallet to send a transaction from one Ethereum address to another using the Magic Labs API.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/featured-chains/ethereum/flutter#chunk-6", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nMagic Credential offers non-custodial signing apis\n\nMagic Credential\n\n#\n\nCopy\n\n01\n\nimport\n\n'package:flutter/cupertino.dart'\n\n;\n\n01\n\nimport\n\n'package:flutter/cupertino.dart'\n\n;\n\n02\n\nimport\n\n'package:flutter/material.dart'\n\n;\n\n02\n\nimport\n\n'package:flutter/material.dart'\n\n;\n\n03\n\nimport\n\n'package:magic_sdk/magic_sdk.dart'\n\n;\n\n03\n\nimport\n\n'package:magic_sdk/magic_sdk.dart'\n\n;\n\n04\n\nimport\n\n'package:magic_sdk/modules/web3/magic_credential.dart'\n\n;\n\n04\n\nimport\n\n'package:magic_sdk/modules/web3/magic_credential.dart'\n\n;\n\n05\n\n05\n\n06\n\nclass\n\n_Web3PageState\n\nextends\n\nState\n\n<\n\nWeb3Page\n\n>\n\n{\n\n06\n\nclass\n\n_Web3PageState\n\nextends\n\nState\n\n<\n\nWeb3Page\n\n>\n\n{\n\n07\n\nfinal\n\nmagic\n\n=\n\nMagic\n\n.\n\ninstance\n\n;\n\n07\n\nfinal\n\nmagic\n\n=\n\nMagic\n\n.\n\ninstance\n\n;\n\n08\n\n08\n\n09\n\nfinal\n\ncredential\n\n=\n\nMagicCredential\n\n(\n\nMagic\n\n.\n\ninstance\n\n.\n\nprovider\n\n)\n\n;\n\n09\n\nfinal\n\ncredential\n\n=\n\nMagicCredential\n\n(\n\nMagic\n\n.\n\ninstance\n\n.\n\nprovider\n\n)\n\n;\n\n10\n\n10\n\n11\n\n@override\n\n11\n\n@override\n\n12\n\nWidget\n\nbuild\n\n(\n\nBuildContext\n\ncontext\n\n)\n\n{\n\n12\n\nWidget\n\nbuild\n\n(\n\nBuildContext\n\ncontext\n\n)\n\n{\n\n13\n\nreturn\n\nScaffold\n\n(\n\n13\n\nreturn\n\nScaffold\n\n(\n\n14\n\nbody\n\n:\n\nCenter\n\n(\n\n14\n\nbody\n\n:\n\nCenter\n\n(\n\n15\n\nchild\n\n:\n\n15\n\nchild\n\n:\n\n16\n\nColumn\n\n(\n\nmainAxisAlignment\n\n:\n\nMainAxisAlignment\n\n.\n\ncenter\n\n,\n\nchildren\n\n:\n\n[\n\n16\n\nColumn\n\n(\n\nmainAxisAlignment\n\n:\n\nMainAxisAlignment\n\n.\n\ncenter\n\n,\n\nchildren\n\n:\n\n[\n\n17\n\n17\n\n18\n\n/// eth sign\n\n18\n\n/// eth sign\n\n19\n\nElevatedButton\n\n(\n\n19\n\nElevatedButton\n\n(\n\n20\n\nonPressed\n\n:\n\n(\n\n)\n\nasync\n\n{\n\n20\n\nonPressed\n\n:\n\n(\n\n)\n\nasync\n\n{\n\n21\n\nList\n\n<\n\nint\n\n>\n\nlist\n\n=\n\nutf8\n\n.\n\nencode\n\n(\n\n\"hello world\"\n\n)\n\n;\n\n21\n\nList\n\n<\n\nint\n\n>\n\nlist\n\n=\n\nutf8\n\n.\n\nencode\n\n(\n\n\"hello world\"\n\n)\n\n;\n\n22\n\nUint8List\n\npayload\n\n=\n\nUint8List\n\n.\n\nfromList\n\n(\n\nlist\n\n)\n\n;\n\n22\n\nUint8List\n\npayload\n\n=\n\nUint8List\n\n.\n\nfromList\n\n(\n\nlist\n\n)\n\n;\n\n23\n\nvar\n\nsignature\n\n=\n\nawait\n\ncredential\n\n.\n\nethSign\n\n(\n\npayload\n\n:\n\npayload\n\n)\n\n;\n\n23\n\nvar\n\nsignature\n\n=\n\nawait\n\ncredential\n\n.\n\nethSign\n\n(\n\npayload\n\n:\n\npayload\n\n)\n\n;\n\n24\n\ndebugPrint\n\n(\n\ncontext\n\n,\n\n\"eth_sign signature, $signature\"\n\n)\n\n;\n\n24\n\ndebugPrint\n\n(\n\ncontext\n\n,\n\n\"eth_sign signature, $signature\"\n\n)\n\n;\n\n25\n\n}\n\n,\n\n25\n\n}\n\n,\n\n26\n\nchild\n\n:\n\nconst\n\nText\n\n(\n\n'eth sign'\n\n)\n\n,\n\n26\n\nchild\n\n:\n\nconst\n\nText\n\n(\n\n'eth sign'\n\n)\n\n,\n\n27\n\n)\n\n,\n\n27\n\n)\n\n,\n\n28\n\n]\n\n)\n\n)\n\n)\n\n;\n\n28\n\n]\n\n)\n\n)\n\n)\n\n;\n\n29\n\n}\n\n29\n\n}\n\n30\n\n}\n\n30\n\n}", "explanation": "**#Sign Message - #Eth Sign**\n\nThe `#Sign Message - #Eth Sign` section from the Magic Labs documentation is about implementing the `eth_sign` functionality in an Ethereum wallet using the Flutter framework. This feature allows users to sign a message securely, without revealing their private key.\n\n**Main Purpose:**\n\nThe main purpose of this functionality is to provide a secure and non-custodial way to sign messages on the Ethereum blockchain, allowing users to interact with Web3 applications and smart contracts. This is achieved through the use of the Magic SDK, which provides a convenient and easy-to-use API for signing messages.\n\n**How it Works:**\n\nHere's a step-by-step breakdown of how this functionality works:\n\n1. The user initiates the signing process by pressing a button labeled \"eth sign\".\n2. The user is prompted to enter a message, which is then encoded into a Uint8List using the UTF-8 encoding scheme.\n3. The encoded message is then passed to the `ethSign` method of the `MagicCredential` class, which signs the message securely using the user's private key.\n4. The signed message is then printed to the console for verification.\n\n**Key Features:**\n\n* **Non-custodial:** The user's private key is never stored or transmitted on the Magic Labs servers, ensuring a high level of security and non-custodial ownership.\n* **Easy-to-use API:** The Magic SDK provides a simple and intuitive API for integrating the `eth_sign` functionality into your Flutter application.\n* **Secure signing:** The `ethSign` method uses the user's private key to sign the message securely, ensuring that the message is properly authenticated on the Ethereum blockchain.\n\nOverall, the `#Sign Message - #Eth Sign` section provides a convenient and secure way to implement the `eth_sign` functionality in your Ethereum wallet, ensuring that users can interact with Web3 applications and smart contracts safely and securely.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/featured-chains/ethereum/flutter#chunk-7", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\nimport\n\n'package:flutter/cupertino.dart'\n\n;\n\n01\n\nimport\n\n'package:flutter/cupertino.dart'\n\n;\n\n02\n\nimport\n\n'package:flutter/material.dart'\n\n;\n\n02\n\nimport\n\n'package:flutter/material.dart'\n\n;\n\n03\n\nimport\n\n'package:magic_sdk/magic_sdk.dart'\n\n;\n\n03\n\nimport\n\n'package:magic_sdk/magic_sdk.dart'\n\n;\n\n04\n\nimport\n\n'package:magic_sdk/modules/web3/magic_credential.dart'\n\n;\n\n04\n\nimport\n\n'package:magic_sdk/modules/web3/magic_credential.dart'\n\n;\n\n05\n\n05\n\n06\n\nclass\n\n_Web3PageState\n\nextends\n\nState\n\n<\n\nWeb3Page\n\n>\n\n{\n\n06\n\nclass\n\n_Web3PageState\n\nextends\n\nState\n\n<\n\nWeb3Page\n\n>\n\n{\n\n07\n\nfinal\n\nmagic\n\n=\n\nMagic\n\n.\n\ninstance\n\n;\n\n07\n\nfinal\n\nmagic\n\n=\n\nMagic\n\n.\n\ninstance\n\n;\n\n08\n\n08\n\n09\n\nfinal\n\ncredential\n\n=\n\nMagicCredential\n\n(\n\nMagic\n\n.\n\ninstance\n\n.\n\nprovider\n\n)\n\n;\n\n09\n\nfinal\n\ncredential\n\n=\n\nMagicCredential\n\n(\n\nMagic\n\n.\n\ninstance\n\n.\n\nprovider\n\n)\n\n;\n\n10\n\n10\n\n11\n\n@override\n\n11\n\n@override\n\n12\n\nWidget\n\nbuild\n\n(\n\nBuildContext\n\ncontext\n\n)\n\n{\n\n12\n\nWidget\n\nbuild\n\n(\n\nBuildContext\n\ncontext\n\n)\n\n{\n\n13\n\nreturn\n\nScaffold\n\n(\n\n13\n\nreturn\n\nScaffold\n\n(\n\n14\n\nbody\n\n:\n\nCenter\n\n(\n\n14\n\nbody\n\n:\n\nCenter\n\n(\n\n15\n\nchild\n\n:\n\n15\n\nchild\n\n:\n\n16\n\nColumn\n\n(\n\nmainAxisAlignment\n\n:\n\nMainAxisAlignment\n\n.\n\ncenter\n\n,\n\nchildren\n\n:\n\n[\n\n16\n\nColumn\n\n(\n\nmainAxisAlignment\n\n:\n\nMainAxisAlignment\n\n.\n\ncenter\n\n,\n\nchildren\n\n:\n\n[\n\n17\n\n17\n\n18\n\n/// Sign Typed Data V1\n\n18\n\n/// Sign Typed Data V1\n\n19\n\nElevatedButton\n\n(\n\n19\n\nElevatedButton\n\n(\n\n20\n\nonPressed\n\n:\n\n(\n\n)\n\nasync\n\n{\n\n20\n\nonPressed\n\n:\n\n(\n\n)\n\nasync\n\n{\n\n21\n\nvar\n\npayload\n\n=\n\n{\n\n21\n\nvar\n\npayload\n\n=\n\n{\n\n22\n\n\"type\"\n\n:\n\n\"string\"\n\n,\n\n22\n\n\"type\"\n\n:\n\n\"string\"\n\n,\n\n23\n\n\"name\"\n\n:\n\n\"Hello from Magic Labs\"\n\n,\n\n23\n\n\"name\"\n\n:\n\n\"Hello from Magic Labs\"\n\n,\n\n24\n\n\"value\"\n\n:\n\n\"This message will be assigned by you\"\n\n24\n\n\"value\"\n\n:\n\n\"This message will be assigned by you\"\n\n25\n\n}\n\n;\n\n25\n\n}\n\n;\n\n26\n\nvar\n\nsignature\n\n=\n\nawait\n\ncredential\n\n.\n\nsignTypedDataLegacy\n\n(\n\npayload\n\n:\n\npayload\n\n)\n\n;\n\n26\n\nvar\n\nsignature\n\n=\n\nawait\n\ncredential\n\n.\n\nsignTypedDataLegacy\n\n(\n\npayload\n\n:\n\npayload\n\n)\n\n;\n\n27\n\ndebugPrint\n\n(\n\ncontext\n\n,\n\n\"sign Typed Data V1 signature, $signature\"\n\n)\n\n;\n\n27\n\ndebugPrint\n\n(\n\ncontext\n\n,\n\n\"sign Typed Data V1 signature, $signature\"\n\n)\n\n;\n\n28\n\n}\n\n,\n\n28\n\n}\n\n,\n\n29\n\nchild\n\n:\n\nconst\n\nText\n\n(\n\n'sign Typed Data V1'\n\n)\n\n,\n\n29\n\nchild\n\n:\n\nconst\n\nText\n\n(\n\n'sign Typed Data V1'\n\n)\n\n,\n\n30\n\n)\n\n,\n\n30\n\n)\n\n,\n\n31\n\n]\n\n)\n\n)\n\n)\n\n;\n\n31\n\n]\n\n)\n\n)\n\n)\n\n;\n\n32\n\n}\n\n32\n\n}\n\n33\n\n}\n\n33\n\n}", "explanation": "**# Sign Typed Data Legacy (V1)**\n\nThis documentation section explains how to sign typed data using Magic Labs' embedded wallet in your Flutter application, specifically using the `signTypedDataLegacy` method.\n\n**Main Purpose:**\n\nThe main purpose of this code snippet is to:\n\n1. Create an instance of the Magic Labs wallet and obtain a credential.\n2. Define a typed data payload with specific fields (type, name, and value).\n3. Use the `signTypedDataLegacy` method to sign the typed data payload with the obtained credential.\n4. Print the resulting signature to the debug console.\n\n**Key Components:**\n\n1. **Magic Labs Wallet Instance**: `final magic = Magic.instance;`\n2. **Magic Credential**: `final credential = MagicCredential(Magic.instance.provider);`\n3. **Typed Data Payload**: `{ \"type\": \"string\", \"name\": \"Hello from Magic Labs\", \"value\": \"This message will be assigned by you\" }`\n4. **Signing Method**: `credential.signTypedDataLegacy(payload: payload)`\n\n**Example Use Case:**\n\nThis code can be used in a variety of scenarios, such as:\n\n* Signing typed data for data encryption or authentication purposes.\n* Verifying the authenticity of a message or transaction.\n* Creating a digital signature for a user's consent or acknowledgment.\n\n**Notes:**\n\n* The `signTypedDataLegacy` method is a deprecated method, and you may need to upgrade to the newer `signTypedData` method in future versions of the Magic Labs SDK.\n* Make sure to handle errors and exceptions properly when using the Magic Labs wallet and signing methods.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/featured-chains/ethereum/flutter#chunk-8", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\nimport\n\n'package:flutter/cupertino.dart'\n\n;\n\n01\n\nimport\n\n'package:flutter/cupertino.dart'\n\n;\n\n02\n\nimport\n\n'package:flutter/material.dart'\n\n;\n\n02\n\nimport\n\n'package:flutter/material.dart'\n\n;\n\n03\n\nimport\n\n'package:magic_sdk/magic_sdk.dart'\n\n;\n\n03\n\nimport\n\n'package:magic_sdk/magic_sdk.dart'\n\n;\n\n04\n\nimport\n\n'package:magic_sdk/modules/web3/magic_credential.dart'\n\n;\n\n04\n\nimport\n\n'package:magic_sdk/modules/web3/magic_credential.dart'\n\n;\n\n05\n\n05\n\n06\n\nclass\n\n_Web3PageState\n\nextends\n\nState\n\n<\n\nWeb3Page\n\n>\n\n{\n\n06\n\nclass\n\n_Web3PageState\n\nextends\n\nState\n\n<\n\nWeb3Page\n\n>\n\n{\n\n07\n\nfinal\n\nmagic\n\n=\n\nMagic\n\n.\n\ninstance\n\n;\n\n07\n\nfinal\n\nmagic\n\n=\n\nMagic\n\n.\n\ninstance\n\n;\n\n08\n\n08\n\n09\n\nfinal\n\ncredential\n\n=\n\nMagicCredential\n\n(\n\nMagic\n\n.\n\ninstance\n\n.\n\nprovider\n\n)\n\n;\n\n09\n\nfinal\n\ncredential\n\n=\n\nMagicCredential\n\n(\n\nMagic\n\n.\n\ninstance\n\n.\n\nprovider\n\n)\n\n;\n\n10\n\n10\n\n11\n\n@override\n\n11\n\n@override\n\n12\n\nWidget\n\nbuild\n\n(\n\nBuildContext\n\ncontext\n\n)\n\n{\n\n12\n\nWidget\n\nbuild\n\n(\n\nBuildContext\n\ncontext\n\n)\n\n{\n\n13\n\nreturn\n\nScaffold\n\n(\n\n13\n\nreturn\n\nScaffold\n\n(\n\n14\n\nbody\n\n:\n\nCenter\n\n(\n\n14\n\nbody\n\n:\n\nCenter\n\n(\n\n15\n\nchild\n\n:\n\n15\n\nchild\n\n:\n\n16\n\nColumn\n\n(\n\nmainAxisAlignment\n\n:\n\nMainAxisAlignment\n\n.\n\ncenter\n\n,\n\nchildren\n\n:\n\n[\n\n16\n\nColumn\n\n(\n\nmainAxisAlignment\n\n:\n\nMainAxisAlignment\n\n.\n\ncenter\n\n,\n\nchildren\n\n:\n\n[\n\n17\n\n17\n\n18\n\n/// Sign Typed Data V3\n\n18\n\n/// Sign Typed Data V3\n\n19\n\nElevatedButton\n\n(\n\n19\n\nElevatedButton\n\n(\n\n20\n\nonPressed\n\n:\n\n(\n\n)\n\nasync\n\n{\n\n20\n\nonPressed\n\n:\n\n(\n\n)\n\nasync\n\n{\n\n21\n\nvar\n\nsignature\n\n=\n\n21\n\nvar\n\nsignature\n\n=\n\n22\n\nawait\n\ncredential\n\n.\n\nsignTypedData\n\n(\n\npayload\n\n:\n\nsignTypedDataV3Payload\n\n)\n\n;\n\n22\n\nawait\n\ncredential\n\n.\n\nsignTypedData\n\n(\n\npayload\n\n:\n\nsignTypedDataV3Payload\n\n)\n\n;\n\n23\n\nshowResult\n\n(\n\ncontext\n\n,\n\n\"sign Typed Data V3 signature, ${(signature)}\"\n\n)\n\n;\n\n23\n\nshowResult\n\n(\n\ncontext\n\n,\n\n\"sign Typed Data V3 signature, ${(signature)}\"\n\n)\n\n;\n\n24\n\n}\n\n,\n\n24\n\n}\n\n,\n\n25\n\nchild\n\n:\n\nconst\n\nText\n\n(\n\n'sign Typed Data V3'\n\n)\n\n,\n\n25\n\nchild\n\n:\n\nconst\n\nText\n\n(\n\n'sign Typed Data V3'\n\n)\n\n,\n\n26\n\n)\n\n,\n\n26\n\n)\n\n,\n\n27\n\n]\n\n)\n\n)\n\n)\n\n;\n\n27\n\n]\n\n)\n\n)\n\n)\n\n;\n\n28\n\n}\n\n28\n\n}\n\n29\n\n}\n\n29\n\n}\n\n30\n\n30\n\n31\n\nvar\n\nsignTypedDataV3Payload\n\n=\n\n{\n\n31\n\nvar\n\nsignTypedDataV3Payload\n\n=\n\n{\n\n32\n\n\"types\"\n\n:\n\n{\n\n32\n\n\"types\"\n\n:\n\n{\n\n33\n\n\"EIP712Domain\"\n\n:\n\n[\n\n33\n\n\"EIP712Domain\"\n\n:\n\n[\n\n34\n\n{\n\n\"name\"\n\n:\n\n\"name\"\n\n,\n\n\"type\"\n\n:\n\n\"string\"\n\n}\n\n,\n\n34\n\n{\n\n\"name\"\n\n:\n\n\"name\"\n\n,\n\n\"type\"\n\n:\n\n\"string\"\n\n}\n\n,\n\n35\n\n{\n\n\"name\"\n\n:\n\n\"version\"\n\n,\n\n\"type\"\n\n:\n\n\"string\"\n\n}\n\n,\n\n35\n\n{\n\n\"name\"\n\n:\n\n\"version\"\n\n,\n\n\"type\"\n\n:\n\n\"string\"\n\n}\n\n,\n\n36\n\n{\n\n\"name\"\n\n:\n\n\"verifyingContract\"\n\n,\n\n\"type\"\n\n:\n\n\"address\"\n\n}\n\n36\n\n{\n\n\"name\"\n\n:\n\n\"verifyingContract\"\n\n,\n\n\"type\"\n\n:\n\n\"address\"\n\n}\n\n37\n\n]\n\n,\n\n37\n\n]\n\n,\n\n38\n\n\"Order\"\n\n:\n\n[\n\n38\n\n\"Order\"\n\n:\n\n[\n\n39\n\n{\n\n\"name\"\n\n:\n\n\"makerAddress\"\n\n,\n\n\"type\"\n\n:\n\n\"address\"\n\n}\n\n,\n\n39\n\n{\n\n\"name\"\n\n:\n\n\"makerAddress\"\n\n,\n\n\"type\"\n\n:\n\n\"address\"\n\n}\n\n,\n\n40\n\n{\n\n\"name\"\n\n:\n\n\"takerAddress\"\n\n,\n\n\"type\"\n\n:\n\n\"address\"\n\n}\n\n,\n\n40\n\n{\n\n\"name\"\n\n:\n\n\"takerAddress\"\n\n,\n\n\"type\"\n\n:\n\n\"address\"\n\n}\n\n,\n\n41\n\n{\n\n\"name\"\n\n:\n\n\"feeRecipientAddress\"\n\n,\n\n\"type\"\n\n:\n\n\"address\"\n\n}\n\n,\n\n41\n\n{\n\n\"name\"\n\n:\n\n\"feeRecipientAddress\"\n\n,\n\n\"type\"\n\n:\n\n\"address\"\n\n}\n\n,\n\n42\n\n{\n\n\"name\"\n\n:\n\n\"senderAddress\"\n\n,\n\n\"type\"\n\n:\n\n\"address\"\n\n}\n\n,\n\n42\n\n{\n\n\"name\"\n\n:\n\n\"senderAddress\"\n\n,\n\n\"type\"\n\n:\n\n\"address\"\n\n}\n\n,\n\n43\n\n{\n\n\"name\"\n\n:\n\n\"makerAssetAmount\"\n\n,\n\n\"type\"\n\n:\n\n\"uint256\"\n\n}\n\n,\n\n43\n\n{\n\n\"name\"\n\n:\n\n\"makerAssetAmount\"\n\n,\n\n\"type\"\n\n:\n\n\"uint256\"\n\n}\n\n,\n\n44\n\n{\n\n\"name\"\n\n:\n\n\"takerAssetAmount\"\n\n,\n\n\"type\"\n\n:\n\n\"uint256\"\n\n}\n\n,\n\n44\n\n{\n\n\"name\"\n\n:\n\n\"takerAssetAmount\"\n\n,\n\n\"type\"\n\n:\n\n\"uint256\"\n\n}\n\n,\n\n45\n\n{\n\n\"name\"\n\n:\n\n\"makerFee\"\n\n,\n\n\"type\"\n\n:\n\n\"uint256\"\n\n}\n\n,\n\n45\n\n{\n\n\"name\"\n\n:\n\n\"makerFee\"\n\n,\n\n\"type\"\n\n:\n\n\"uint256\"\n\n}\n\n,\n\n46\n\n{\n\n\"name\"\n\n:\n\n\"takerFee\"\n\n,\n\n\"type\"\n\n:\n\n\"uint256\"\n\n}\n\n,\n\n46\n\n{\n\n\"name\"\n\n:\n\n\"takerFee\"\n\n,\n\n\"type\"\n\n:\n\n\"uint256\"\n\n}\n\n,\n\n47\n\n{\n\n\"name\"\n\n:\n\n\"expirationTimeSeconds\"\n\n,\n\n\"type\"\n\n:\n\n\"uint256\"\n\n}\n\n,\n\n47\n\n{\n\n\"name\"\n\n:\n\n\"expirationTimeSeconds\"\n\n,\n\n\"type\"\n\n:\n\n\"uint256\"\n\n}\n\n,\n\n48\n\n{\n\n\"name\"\n\n:\n\n\"salt\"\n\n,\n\n\"type\"\n\n:\n\n\"uint256\"\n\n}\n\n,\n\n48\n\n{\n\n\"name\"\n\n:\n\n\"salt\"\n\n,\n\n\"type\"\n\n:\n\n\"uint256\"\n\n}\n\n,\n\n49\n\n{\n\n\"name\"\n\n:\n\n\"makerAssetData\"\n\n,\n\n\"type\"\n\n:\n\n\"bytes\"\n\n}\n\n,\n\n49\n\n{\n\n\"name\"\n\n:\n\n\"makerAssetData\"\n\n,\n\n\"type\"\n\n:\n\n\"bytes\"\n\n}\n\n,\n\n50\n\n{\n\n\"name\"\n\n:\n\n\"takerAssetData\"\n\n,\n\n\"type\"\n\n:\n\n\"bytes\"\n\n}\n\n50\n\n{\n\n\"name\"\n\n:\n\n\"takerAssetData\"\n\n,\n\n\"type\"\n\n:\n\n\"bytes\"\n\n}\n\n51\n\n]\n\n51\n\n]\n\n52\n\n}\n\n,\n\n52\n\n}\n\n,\n\n53\n\n\"domain\"\n\n:\n\n{\n\n53\n\n\"domain\"\n\n:\n\n{\n\n54\n\n\"name\"\n\n:\n\n\"0x Protocol\"\n\n,\n\n54\n\n\"name\"\n\n:\n\n\"0x Protocol\"\n\n,\n\n55\n\n\"version\"\n\n:\n\n\"2\"\n\n,\n\n55\n\n\"version\"\n\n:\n\n\"2\"\n\n,\n\n56\n\n\"verifyingContract\"\n\n:\n\n\"0x35dd2932454449b14cee11a94d3674a936d5d7b2\"\n\n56\n\n\"verifyingContract\"\n\n:\n\n\"0x35dd2932454449b14cee11a94d3674a936d5d7b2\"\n\n57\n\n}\n\n,\n\n57\n\n}\n\n,\n\n58\n\n\"message\"\n\n:\n\n{\n\n58\n\n\"message\"\n\n:\n\n{\n\n59\n\n\"exchangeAddress\"\n\n:\n\n\"0x35dd2932454449b14cee11a94d3674a936d5d7b2\"\n\n,\n\n59\n\n\"exchangeAddress\"\n\n:\n\n\"0x35dd2932454449b14cee11a94d3674a936d5d7b2\"\n\n,\n\n60\n\n\"senderAddress\"\n\n:\n\n\"0x0000000000000000000000000000000000000000\"\n\n,\n\n60\n\n\"senderAddress\"\n\n:\n\n\"0x0000000000000000000000000000000000000000\"\n\n,\n\n61\n\n\"makerAddress\"\n\n:\n\n\"0x338be8514c1397e8f3806054e088b2daf1071fcd\"\n\n,\n\n61\n\n\"makerAddress\"\n\n:\n\n\"0x338be8514c1397e8f3806054e088b2daf1071fcd\"\n\n,\n\n62\n\n\"takerAddress\"\n\n:\n\n\"0x0000000000000000000000000000000000000000\"\n\n,\n\n62\n\n\"takerAddress\"\n\n:\n\n\"0x0000000000000000000000000000000000000000\"\n\n,\n\n63\n\n\"makerFee\"\n\n:\n\n\"0\"\n\n,\n\n63\n\n\"makerFee\"\n\n:\n\n\"0\"\n\n,\n\n64\n\n\"takerFee\"\n\n:\n\n\"0\"\n\n,\n\n64\n\n\"takerFee\"\n\n:\n\n\"0\"\n\n,\n\n65\n\n\"makerAssetAmount\"\n\n:\n\n\"97500000000000\"\n\n,\n\n65\n\n\"makerAssetAmount\"\n\n:\n\n\"97500000000000\"\n\n,\n\n66\n\n\"takerAssetAmount\"\n\n:\n\n\"15000000000000000\"\n\n,\n\n66\n\n\"takerAssetAmount\"\n\n:\n\n\"15000000000000000\"\n\n,\n\n67\n\n\"makerAssetData\"\n\n:\n\n67\n\n\"makerAssetData\"\n\n:\n\n68\n\n\"0xf47261b0000000000000000000000000d0a1e359811322d97991e03f863a0c30c2cf029c\"\n\n,\n\n68\n\n\"0xf47261b0000000000000000000000000d0a1e359811322d97991e03f863a0c30c2cf029c\"\n\n,\n\n69\n\n\"takerAssetData\"\n\n:\n\n69\n\n\"takerAssetData\"\n\n:\n\n70\n\n\"0xf47261b00000000000000000000000006ff6c0ff1d68b964901f986d4c9fa3ac68346570\"\n\n,\n\n70\n\n\"0xf47261b00000000000000000000000006ff6c0ff1d68b964901f986d4c9fa3ac68346570\"\n\n,\n\n71\n\n\"salt\"\n\n:\n\n\"1553722433685\"\n\n,\n\n71\n\n\"salt\"\n\n:\n\n\"1553722433685\"\n\n,\n\n72\n\n\"feeRecipientAddress\"\n\n:\n\n\"0xa258b39954cef5cb142fd567a46cddb31a670124\"\n\n,\n\n72\n\n\"feeRecipientAddress\"\n\n:\n\n\"0xa258b39954cef5cb142fd567a46cddb31a670124\"\n\n,\n\n73\n\n\"expirationTimeSeconds\"\n\n:\n\n\"1553808833\"\n\n73\n\n\"expirationTimeSeconds\"\n\n:\n\n\"1553808833\"\n\n74\n\n}\n\n,\n\n74\n\n}\n\n,\n\n75\n\n\"primaryType\"\n\n:\n\n\"Order\"\n\n75\n\n\"primaryType\"\n\n:\n\n\"Order\"\n\n76\n\n}\n\n;\n\n76\n\n}\n\n;", "explanation": "The provided documentation section is titled '#Sign Typed Data (EIP 712)' and appears to be a part of Flutter (a UI framework for building native mobile apps) documentation for the Magic Labs embedded wallet using the Ethereum blockchain network.\n\n**What is EIP 712?**\n\nEIP 712 is a standard for encoding and decoding structured data in Ethereum smart contracts using Ethereum's Typed Data (EIP 712) format. It provides a way to sign and verify data off-chain, which can be used for a variety of purposes such as decentralized identity management, decentralized finance (DeFi), and non-fungible tokens (NFTs).\n\n**Sign Typed Data**\n\nThe `signTypedData` method in the provided code is used to sign the `signTypedDataV3Payload` variable, which is an object containing data that conforms to the EIP 712 standard. The `signTypedDataV3Payload` variable contains several key-value pairs that represent a specific transaction, such as the maker and taker addresses, the exchange address, sender address, and other relevant details.\n\n**Purpose of Signing Typed Data**\n\nThe main purpose of signing typed data is to create a cryptographic signature that can be verified by the Ethereum network. This signature is used to ensure that the data has not been tampered with or altered in any way. When the data is signed, it is encoded in a specific format that can be verified by the Ethereum network.\n\nTo sign the typed data, the Magic Labs embedded wallet uses the `signTypedData` method to create a cryptographic signature that contains the signer's private key. The signature is then provided as output, which is used to verify the authenticity and integrity of the signed data.\n\n**Key Benefits**\n\nSign typed data provides several key benefits, including:\n\n1. **Data Integrity**: This ensures that the data has not been tampered with or altered in any way.\n2. **Authenticity**: This ensures that the data comes from a legitimate source.\n3. **Non-repudiation**: This ensures that the signer cannot deny their involvement in creating the data.\n4. **Efficient Verifiability**: This allows the data to be verified quickly and efficiently by the Ethereum network.\n\nOverall, the `signTypedData` method in the Magic Labs embedded wallet provides a secure and efficient way to sign and verify data using the Ethereum network.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/featured-chains/ethereum/flutter#chunk-9", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\nimport\n\n'package:flutter/cupertino.dart'\n\n;\n\n01\n\nimport\n\n'package:flutter/cupertino.dart'\n\n;\n\n02\n\nimport\n\n'package:flutter/material.dart'\n\n;\n\n02\n\nimport\n\n'package:flutter/material.dart'\n\n;\n\n03\n\nimport\n\n'package:magic_sdk/magic_sdk.dart'\n\n;\n\n03\n\nimport\n\n'package:magic_sdk/magic_sdk.dart'\n\n;\n\n04\n\nimport\n\n'package:magic_sdk/modules/web3/magic_credential.dart'\n\n;\n\n04\n\nimport\n\n'package:magic_sdk/modules/web3/magic_credential.dart'\n\n;\n\n05\n\n05\n\n06\n\nclass\n\n_Web3PageState\n\nextends\n\nState\n\n<\n\nWeb3Page\n\n>\n\n{\n\n06\n\nclass\n\n_Web3PageState\n\nextends\n\nState\n\n<\n\nWeb3Page\n\n>\n\n{\n\n07\n\nfinal\n\nmagic\n\n=\n\nMagic\n\n.\n\ninstance\n\n;\n\n07\n\nfinal\n\nmagic\n\n=\n\nMagic\n\n.\n\ninstance\n\n;\n\n08\n\n08\n\n09\n\nfinal\n\ncredential\n\n=\n\nMagicCredential\n\n(\n\nMagic\n\n.\n\ninstance\n\n.\n\nprovider\n\n)\n\n;\n\n09\n\nfinal\n\ncredential\n\n=\n\nMagicCredential\n\n(\n\nMagic\n\n.\n\ninstance\n\n.\n\nprovider\n\n)\n\n;\n\n10\n\n10\n\n11\n\n@override\n\n11\n\n@override\n\n12\n\nWidget\n\nbuild\n\n(\n\nBuildContext\n\ncontext\n\n)\n\n{\n\n12\n\nWidget\n\nbuild\n\n(\n\nBuildContext\n\ncontext\n\n)\n\n{\n\n13\n\nreturn\n\nScaffold\n\n(\n\n13\n\nreturn\n\nScaffold\n\n(\n\n14\n\nbody\n\n:\n\nCenter\n\n(\n\n14\n\nbody\n\n:\n\nCenter\n\n(\n\n15\n\nchild\n\n:\n\n15\n\nchild\n\n:\n\n16\n\nColumn\n\n(\n\nmainAxisAlignment\n\n:\n\nMainAxisAlignment\n\n.\n\ncenter\n\n,\n\nchildren\n\n:\n\n[\n\n16\n\nColumn\n\n(\n\nmainAxisAlignment\n\n:\n\nMainAxisAlignment\n\n.\n\ncenter\n\n,\n\nchildren\n\n:\n\n[\n\n17\n\n/// get account\n\n17\n\n/// get account\n\n18\n\nElevatedButton\n\n(\n\n18\n\nElevatedButton\n\n(\n\n19\n\nonPressed\n\n:\n\n(\n\n)\n\nasync\n\n{\n\n19\n\nonPressed\n\n:\n\n(\n\n)\n\nasync\n\n{\n\n20\n\nvar\n\ncred\n\n=\n\nawait\n\ncredential\n\n.\n\ngetAccount\n\n(\n\n)\n\n;\n\n20\n\nvar\n\ncred\n\n=\n\nawait\n\ncredential\n\n.\n\ngetAccount\n\n(\n\n)\n\n;\n\n21\n\ndebugPrint\n\n(\n\n\"account, ${cred.hex}\"\n\n)\n\n;\n\n21\n\ndebugPrint\n\n(\n\n\"account, ${cred.hex}\"\n\n)\n\n;\n\n22\n\n}\n\n,\n\n22\n\n}\n\n,\n\n23\n\nchild\n\n:\n\nconst\n\nText\n\n(\n\n'getAccount'\n\n)\n\n,\n\n23\n\nchild\n\n:\n\nconst\n\nText\n\n(\n\n'getAccount'\n\n)\n\n,\n\n24\n\n)\n\n,\n\n24\n\n)\n\n,\n\n25\n\n]\n\n)\n\n)\n\n)\n\n;\n\n25\n\n]\n\n)\n\n)\n\n)\n\n;\n\n26\n\n}\n\n26\n\n}\n\n27\n\n}\n\n27\n\n}", "explanation": "The '#Get User Info' functionality is not explicitly mentioned in the provided code snippet. However, it seems to be related to fetching account information from the Magic Labs embedded wallet, which is documented under the 'Get User Info' section.\n\nIn the provided code, there is a method called `getAccount` that is used to retrieve the user's account information from the wallet. Here's a simplified explanation of what it does:\n\n1. It creates an instance of `MagicCredential` using the Magic Labs provider.\n2. It calls the `getAccount` method on the `MagicCredential` instance to retrieve the user's account information.\n3. Once the account information is retrieved, it is stored in the `cred` variable.\n4. The retrieved account information is then printed to the console using `debugPrint`. The account information is represented as a hexadecimal string.\n\nThe main purpose of this code is to demonstrate how to retrieve the user's account information from the Magic Labs embedded wallet using the `getAccount` method. This can be useful for various use cases, such as:\n\n* Displaying the user's account balance or other wallet information.\n* Creating custom UI elements to interact with the wallet.\n* Developing wallet-related features that require user account information.\n\nTo implement the `getAccount` method in your own Flutter application, you would need to:\n\n1. Import the necessary packages, including `magic_sdk` and `magic_sdk_modules_web3`.\n2. Create an instance of `MagicCredential` using the Magic Labs provider.\n3. Call the `getAccount` method on the `MagicCredential` instance to retrieve the user's account information.\n4. Store the retrieved account information in a variable.\n5. Use the account information as needed in your application.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/featured-chains/ethereum/flutter#chunk-10", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nIn this example, we'll be demonstrating how to use Magic with web3dart to interact with Solidity smart contracts. The simple Hello World contract allows anyone to read and write a message to it.\n\nweb3dart\n\nCopy\n\n01\n\npragma solidity\n\n^\n\n0.5\n\n.10\n\n;\n\n01\n\npragma solidity\n\n^\n\n0.5\n\n.10\n\n;\n\n02\n\n02\n\n03\n\ncontract\n\nHelloWorld\n\n{\n\n03\n\ncontract\n\nHelloWorld\n\n{\n\n04\n\n04\n\n05\n\nstring\n\npublic\n\nmessage\n\n;\n\n05\n\nstring\n\npublic\n\nmessage\n\n;\n\n06\n\n06\n\n07\n\nconstructor\n\n(\n\nstring memory initMessage\n\n)\n\npublic\n\n{\n\n07\n\nconstructor\n\n(\n\nstring memory initMessage\n\n)\n\npublic\n\n{\n\n08\n\nmessage\n\n=\n\ninitMessage\n\n;\n\n08\n\nmessage\n\n=\n\ninitMessage\n\n;\n\n09\n\n}\n\n09\n\n}\n\n10\n\n10\n\n11\n\nfunction\n\nupdate\n\n(\n\nstring memory newMessage\n\n)\n\npublic\n\n{\n\n11\n\nfunction\n\nupdate\n\n(\n\nstring memory newMessage\n\n)\n\npublic\n\n{\n\n12\n\nmessage\n\n=\n\nnewMessage\n\n;\n\n12\n\nmessage\n\n=\n\nnewMessage\n\n;\n\n13\n\n}\n\n13\n\n}\n\n14\n\n}\n\n14\n\n}\n\nCopy\n\n01\n\nclass\n\nTestContract\n\n{\n\n01\n\nclass\n\nTestContract\n\n{\n\n02\n\nstatic\n\nfinal\n\ndeployedAddress\n\n=\n\n02\n\nstatic\n\nfinal\n\ndeployedAddress\n\n=\n\n03\n\nEthereumAddress\n\n.\n\nfromHex\n\n(\n\n\"0x8b211dfebf490a648f6de859dfbed61fa22f35e0\"\n\n)\n\n;\n\n03\n\nEthereumAddress\n\n.\n\nfromHex\n\n(\n\n\"0x8b211dfebf490a648f6de859dfbed61fa22f35e0\"\n\n)\n\n;\n\n04\n\nstatic\n\nconst\n\ncontractAbi\n\n=\n\n'[{\"constant\":false,\"inputs\":[{\"name\":\"newMessage\",\"type\":\"string\"}],\"name\":\"update\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"message\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"initMessage\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]'\n\n;\n\n04\n\nstatic\n\nconst\n\ncontractAbi\n\n=\n\n'[{\"constant\":false,\"inputs\":[{\"name\":\"newMessage\",\"type\":\"string\"}],\"name\":\"update\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"message\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"initMessage\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]'\n\n;\n\n05\n\nstatic\n\nconst\n\nbyteCode\n\n=\n\n05\n\nstatic\n\nconst\n\nbyteCode\n\n=\n\n06\n\n\"0x608060405234801561001057600080fd5b5060405161047f38038061047f8339818101604052602081101561003357600080fd5b81019080805164010000000081111561004b57600080fd5b8281019050602081018481111561006157600080fd5b815185600182028301116401000000008211171561007e57600080fd5b5050929190505050806000908051906020019061009c9291906100a3565b5050610148565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106100e457805160ff1916838001178555610112565b82800160010185558215610112579182015b828111156101115782518255916020019190600101906100f6565b5b50905061011f9190610123565b5090565b61014591905b80821115610141576000816000905550600101610129565b5090565b90565b610328806101576000396000f3fe608060405234801561001057600080fd5b5060043610610053576000357c0100000000000000000000000000000000000000000000000000000000900480633d7403a314610058578063e21f37ce14610113575b600080fd5b6101116004803603602081101561006e57600080fd5b810190808035906020019064010000000081111561008b57600080fd5b82018360208201111561009d57600080fd5b803590602001918460018302840111640100000000831117156100bf57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050610196565b005b61011b6101b0565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561015b578082015181840152602081019050610140565b50505050905090810190601f1680156101885780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b80600090805190602001906101ac92919061024e565b5050565b60008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156102465780601f1061021b57610100808354040283529160200191610246565b820191906000526020600020905b81548152906001019060200180831161022957829003601f168201915b505050505081565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061028f57805160ff19168380011785556102bd565b828001600101855582156102bd579182015b828111156102bc5782518255916020019190600101906102a1565b5b5090506102ca91906102ce565b5090565b6102f091905b808211156102ec5760008160009055506001016102d4565b5090565b9056fea265627a7a7230582003ae1ef5a63bf058bfd2b31398bdee39d3cbfbb7fbf84235f4bc2ec352ee810f64736f6c634300050a0032\"\n\n;\n\n06\n\n\"0x608060405234801561001057600080fd5b5060405161047f38038061047f8339818101604052602081101561003357600080fd5b81019080805164010000000081111561004b57600080fd5b8281019050602081018481111561006157600080fd5b815185600182028301116401000000008211171561007e57600080fd5b5050929190505050806000908051906020019061009c9291906100a3565b5050610148565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106100e457805160ff1916838001178555610112565b82800160010185558215610112579182015b828111156101115782518255916020019190600101906100f6565b5b50905061011f9190610123565b5090565b61014591905b80821115610141576000816000905550600101610129565b5090565b90565b610328806101576000396000f3fe608060405234801561001057600080fd5b5060043610610053576000357c0100000000000000000000000000000000000000000000000000000000900480633d7403a314610058578063e21f37ce14610113575b600080fd5b6101116004803603602081101561006e57600080fd5b810190808035906020019064010000000081111561008b57600080fd5b82018360208201111561009d57600080fd5b803590602001918460018302840111640100000000831117156100bf57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050610196565b005b61011b6101b0565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561015b578082015181840152602081019050610140565b50505050905090810190601f1680156101885780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b80600090805190602001906101ac92919061024e565b5050565b60008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156102465780601f1061021b57610100808354040283529160200191610246565b820191906000526020600020905b81548152906001019060200180831161022957829003601f168201915b505050505081565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061028f57805160ff19168380011785556102bd565b828001600101855582156102bd579182015b828111156102bc5782518255916020019190600101906102a1565b5b5090506102ca91906102ce565b5090565b6102f091905b808211156102ec5760008160009055506001016102d4565b5090565b9056fea265627a7a7230582003ae1ef5a63bf058bfd2b31398bdee39d3cbfbb7fbf84235f4bc2ec352ee810f64736f6c634300050a0032\"\n\n;\n\n07\n\n}\n\n07\n\n}\n\n#\n\nCopy\n\n01\n\nfinal\n\ncredential\n\n=\n\nMagicCredential\n\n(\n\nMagic\n\n.\n\ninstance\n\n.\n\nprovider\n\n)\n\n;\n\n01\n\nfinal\n\ncredential\n\n=\n\nMagicCredential\n\n(\n\nMagic\n\n.\n\ninstance\n\n.\n\nprovider\n\n)\n\n;\n\n02\n\nfinal\n\nclient\n\n=\n\nWeb3Client\n\n.\n\ncustom\n\n(\n\nMagic\n\n.\n\ninstance\n\n.\n\nprovider\n\n)\n\n;\n\n02\n\nfinal\n\nclient\n\n=\n\nWeb3Client\n\n.\n\ncustom\n\n(\n\nMagic\n\n.\n\ninstance\n\n.\n\nprovider\n\n)\n\n;\n\n03\n\n03\n\n04\n\nvar\n\nlist\n\n=\n\nutf8\n\n.\n\nencode\n\n(\n\nTestContract\n\n.\n\nbyteCode\n\n)\n\n;\n\n04\n\nvar\n\nlist\n\n=\n\nutf8\n\n.\n\nencode\n\n(\n\nTestContract\n\n.\n\nbyteCode\n\n)\n\n;\n\n05\n\nUint8List\n\npayload\n\n=\n\nUint8List\n\n.\n\nfromList\n\n(\n\nlist\n\n)\n\n;\n\n05\n\nUint8List\n\npayload\n\n=\n\nUint8List\n\n.\n\nfromList\n\n(\n\nlist\n\n)\n\n;\n\n06\n\nfinal\n\nTransaction\n\ntransaction\n\n=\n\nTransaction\n\n(\n\n06\n\nfinal\n\nTransaction\n\ntransaction\n\n=\n\nTransaction\n\n(\n\n07\n\nto\n\n:\n\nnull\n\n,\n\n07\n\nto\n\n:\n\nnull\n\n,\n\n08\n\nfrom\n\n:\n\ncredential\n\n.\n\naddress\n\n,\n\n08\n\nfrom\n\n:\n\ncredential\n\n.\n\naddress\n\n,\n\n09\n\ndata\n\n:\n\npayload\n\n,\n\n09\n\ndata\n\n:\n\npayload\n\n,\n\n10\n\nmaxGas\n\n:\n\n2000000\n\n)\n\n;\n\n10\n\nmaxGas\n\n:\n\n2000000\n\n)\n\n;\n\n11\n\nfinal\n\nString\n\ntransactionId\n\n=\n\n11\n\nfinal\n\nString\n\ntransactionId\n\n=\n\n12\n\nawait\n\nclient\n\n.\n\nsendTransaction\n\n(\n\ncredential\n\n,\n\ntransaction\n\n)\n\n;\n\n12\n\nawait\n\nclient\n\n.\n\nsendTransaction\n\n(\n\ncredential\n\n,\n\ntransaction\n\n)\n\n;", "explanation": "**Smart Contract Deployment on Ethereum using Magic Labs and web3dart**\n\nThis documentation section explains how to deploy a simple Solidity smart contract on the Ethereum blockchain using the Magic Labs library and the web3dart package in Flutter.\n\n**Overview**\n\nThe example demonstrates how to:\n\n1. Define a simple smart contract (HelloWorld) with two functions: constructor and update\n2. Deploy the contract to the Ethereum blockchain using the Magic Labs SDK and web3dart\n3. Interact with the deployed contract using the Magic Labs SDK\n\n**Key Components**\n\n1. **Contract Abi**: The contract ABI (Application Binary Interface) is a JSON file that defines the contract's functionality and structure.\n2. **ByteCode**: The bytecode is the compiled contract code that is executed on the Ethereum blockchain.\n3. **Magic Credential**: A Magic credential is used to authenticate and authorize transactions on the Ethereum blockchain.\n4. **Web3 Client**: A web3 client is used to interact with the Ethereum blockchain.\n\n**Deployment Process**\n\nThe deployment process involves the following steps:\n\n1. Define the contract ABI and bytecode.\n2. Create a Magic credential to authenticate the transaction.\n3. Create a web3 client instance.\n4. Encode the bytecode as a Uint8List (UTF-8 encoded bytes).\n5. Create a transaction object with the following properties:\n\t* `from`: The sender's address (obtained from the Magic credential).\n\t* `data`: The encoded bytecode (as a Uint8List).\n\t* `maxGas`: The maximum gas limit for the transaction.\n6. Use the web3 client to send the transaction to the Ethereum blockchain.\n\n**Code Snippets**\n\nHere are the relevant code snippets:\n\n```dart\nfinal credential = MagicCredential(\n  Magic.instance.provider,\n);\n\nfinal client = Web3Client.custom(\n  Magic.instance.provider,\n);\n\nvar list = utf8.encode(\n  TestContract.byteCode,\n);\n\nUint8List payload = Uint8List.fromList(\n  list,\n);\n\nfinal transaction = Transaction(\n  to: null,\n  from: credential.address,\n  data: payload,\n  maxGas: 2000000,\n);\n\nfinal String transactionId = await client.sendTransaction(\n  credential,\n  transaction,\n);\n```\n\nThese code snippets demonstrate how to deploy the HelloWorld contract to the Ethereum blockchain using the Magic Labs SDK and web3dart.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/featured-chains/ethereum/flutter#chunk-11", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\nfinal\n\ncredential\n\n=\n\nMagicCredential\n\n(\n\nMagic\n\n.\n\ninstance\n\n.\n\nprovider\n\n)\n\n;\n\n01\n\nfinal\n\ncredential\n\n=\n\nMagicCredential\n\n(\n\nMagic\n\n.\n\ninstance\n\n.\n\nprovider\n\n)\n\n;\n\n02\n\nfinal\n\nclient\n\n=\n\nWeb3Client\n\n.\n\ncustom\n\n(\n\nMagic\n\n.\n\ninstance\n\n.\n\nprovider\n\n)\n\n;\n\n02\n\nfinal\n\nclient\n\n=\n\nWeb3Client\n\n.\n\ncustom\n\n(\n\nMagic\n\n.\n\ninstance\n\n.\n\nprovider\n\n)\n\n;\n\n03\n\n03\n\n04\n\nfinal\n\ncontract\n\n=\n\nDeployedContract\n\n(\n\n04\n\nfinal\n\ncontract\n\n=\n\nDeployedContract\n\n(\n\n05\n\nContractAbi\n\n.\n\nfromJson\n\n(\n\nTestContract\n\n.\n\ncontractAbi\n\n,\n\n''\n\n)\n\n,\n\n05\n\nContractAbi\n\n.\n\nfromJson\n\n(\n\nTestContract\n\n.\n\ncontractAbi\n\n,\n\n''\n\n)\n\n,\n\n06\n\nTestContract\n\n.\n\ndeployedAddress\n\n)\n\n;\n\n06\n\nTestContract\n\n.\n\ndeployedAddress\n\n)\n\n;\n\n07\n\nfinal\n\nmessageFunction\n\n=\n\ncontract\n\n.\n\nfunction\n\n(\n\n'message'\n\n)\n\n;\n\n07\n\nfinal\n\nmessageFunction\n\n=\n\ncontract\n\n.\n\nfunction\n\n(\n\n'message'\n\n)\n\n;\n\n08\n\nvar\n\nmessage\n\n=\n\nawait\n\nclient\n\n.\n\ncall\n\n(\n\n08\n\nvar\n\nmessage\n\n=\n\nawait\n\nclient\n\n.\n\ncall\n\n(\n\n09\n\ncontract\n\n:\n\ncontract\n\n,\n\nfunction\n\n:\n\nmessageFunction\n\n,\n\nparams\n\n:\n\n[\n\n]\n\n)\n\n;\n\n09\n\ncontract\n\n:\n\ncontract\n\n,\n\nfunction\n\n:\n\nmessageFunction\n\n,\n\nparams\n\n:\n\n[\n\n]\n\n)\n\n;\n\n10\n\ndebugPrint\n\n(\n\n\"Contract Read Message, $message\"\n\n)\n\n;\n\n10\n\ndebugPrint\n\n(\n\n\"Contract Read Message, $message\"\n\n)\n\n;\n\n11\n\n}\n\n,\n\n11\n\n}\n\n,", "explanation": "**#Read from Contract Documentation**\n\nThis section of the Magic Labs embedded wallet documentation demonstrates how to read from a contract on the Ethereum blockchain using the Flutter SDK. The main purpose of this code snippet is to:\n\n1. **Deploy a contract**: It deploys a `DeployedContract` instance using the `ContractAbi` and the contract's deployed address.\n2. **Call a contract function**: It calls a contract function named `messageFunction` using the `Web3Client` instance.\n3. **Retrieve data**: It retrieves the result of the function call, which is the `message` variable.\n4. **Print the result**: It prints the result to the console using `debugPrint`.\n\n**Key Functions and Variables**\n\n* `MagicCredential`: Creates a Magic credential instance.\n* `Web3Client`: Creates a Web3 client instance.\n* `DeployedContract`: Deploys a contract instance using the `ContractAbi` and contract's deployed address.\n* `ContractAbi`: Represents the contract's ABI (Application Binary Interface).\n* `TestContract`: Represents the contract to be deployed.\n* `messageFunction`: Represents the contract function to be called.\n* `client`: The Web3 client instance used to call the contract function.\n* `contract`: The deployed contract instance.\n* `message`: The result of the contract function call.\n\n**Example Use Case**\n\nThis code snippet can be used in a Flutter application to interact with a contract on the Ethereum blockchain. For example, a user might want to read a message stored in a contract, and this code would be used to retrieve that message.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/featured-chains/ethereum/flutter#chunk-12", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\nfinal\n\ncredential\n\n=\n\nMagicCredential\n\n(\n\nMagic\n\n.\n\ninstance\n\n.\n\nprovider\n\n)\n\n;\n\n01\n\nfinal\n\ncredential\n\n=\n\nMagicCredential\n\n(\n\nMagic\n\n.\n\ninstance\n\n.\n\nprovider\n\n)\n\n;\n\n02\n\nfinal\n\nclient\n\n=\n\nWeb3Client\n\n.\n\ncustom\n\n(\n\nMagic\n\n.\n\ninstance\n\n.\n\nprovider\n\n)\n\n;\n\n02\n\nfinal\n\nclient\n\n=\n\nWeb3Client\n\n.\n\ncustom\n\n(\n\nMagic\n\n.\n\ninstance\n\n.\n\nprovider\n\n)\n\n;\n\n03\n\n03\n\n04\n\nfinal\n\ncontract\n\n=\n\nDeployedContract\n\n(\n\n04\n\nfinal\n\ncontract\n\n=\n\nDeployedContract\n\n(\n\n05\n\nContractAbi\n\n.\n\nfromJson\n\n(\n\nTestContract\n\n.\n\ncontractAbi\n\n,\n\n''\n\n)\n\n,\n\n05\n\nContractAbi\n\n.\n\nfromJson\n\n(\n\nTestContract\n\n.\n\ncontractAbi\n\n,\n\n''\n\n)\n\n,\n\n06\n\nTestContract\n\n.\n\ndeployedAddress\n\n)\n\n;\n\n06\n\nTestContract\n\n.\n\ndeployedAddress\n\n)\n\n;\n\n07\n\nfinal\n\nupdateFunction\n\n=\n\ncontract\n\n.\n\nfunction\n\n(\n\n'update'\n\n)\n\n;\n\n07\n\nfinal\n\nupdateFunction\n\n=\n\ncontract\n\n.\n\nfunction\n\n(\n\n'update'\n\n)\n\n;\n\n08\n\nvar\n\ntransactionId\n\n=\n\nawait\n\nclient\n\n.\n\nsendTransaction\n\n(\n\n08\n\nvar\n\ntransactionId\n\n=\n\nawait\n\nclient\n\n.\n\nsendTransaction\n\n(\n\n09\n\ncredential\n\n,\n\n09\n\ncredential\n\n,\n\n10\n\nTransaction\n\n.\n\ncallContract\n\n(\n\n10\n\nTransaction\n\n.\n\ncallContract\n\n(\n\n11\n\ncontract\n\n:\n\ncontract\n\n,\n\n11\n\ncontract\n\n:\n\ncontract\n\n,\n\n12\n\nfunction\n\n:\n\nupdateFunction\n\n,\n\n12\n\nfunction\n\n:\n\nupdateFunction\n\n,\n\n13\n\nparameters\n\n:\n\n[\n\n\"NEW_MESSAGE\"\n\n]\n\n)\n\n)\n\n;\n\n13\n\nparameters\n\n:\n\n[\n\n\"NEW_MESSAGE\"\n\n]\n\n)\n\n)\n\n;", "explanation": "**#Write to Contract Section Overview**\n\nThe `#Write to Contract` section from the Magic Labs embedded wallet documentation for Flutter on Ethereum is a code snippet that explains how to write data to a smart contract on the Ethereum blockchain. This is a crucial function in blockchain development, enabling the modification or updating of data stored within a contract.\n\n**Main Purpose:**\n\nThe primary purpose of this code is to demonstrate how to achieve the following:\n\n1. **Interaction with a Smart Contract:** Establish a connection to an existing smart contract on the Ethereum network and prepare it for data modification.\n2. **Reading and Writing Data:** Pull data from the contract using a trigger function, update the data within the contract, and then push these changes to the Ethereum blockchain.\n3. **Transacting with the Ethereum Network:** Utilize the Magic instance and Web3Client to send a transaction to the Ethereum network, allowing users to interact with the smart contract.\n\n**Key Components:**\n\n1. **Magic Credential and Web3 Client:** These are essentially the entry points for connecting with the Magic instance and Ethereum network, respectively. They provide credentials and facilitate interactions between Flutter and the blockchain.\n2. **Deployed Contract and Contract ABI:** The deployed contract refers to the existing instance of a smart contract on Ethereum. The Contract ABI (Application Binary Interface) is a JSON file defining how the contract can be interacted with over the network.\n3. **Functions and Transaction**: This code showcases the execution of a particular function within the contract (`updateFunction`) and describes the sequence of events involved in updating contract data (transferring data across the network).\n\n**Summary:**\n\nThe `#Write to Contract` section serves as a foundational guide for Flutter developers to build and maintain smart contracts and interact with the Ethereum network. By following this code snippet, users can write data to a contract, pushing changes onto the blockchain and facilitating real-time modifications.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/featured-chains/ethereum/flutter#chunk-13", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 Magic Flutter SDK\n\nMagic Flutter SDK", "explanation": "**#Resources Section Overview**\n\nThe **#Resources** section in the provided documentation is a grouping of related links and information that assists users in accessing additional resources and information required for completing tasks, integrating the product, or troubleshooting specific issues.\n\n**Main Purpose**\n\nThe main purpose of the **#Resources** section is to provide a quick and convenient access to external resources that support and complement the main documentation, allowing users to efficiently find relevant information and minimize the time spent browsing for additional details.\n\n**Content in this specific context**\n\nIn this specific context, the content is:\n\n- **Magic Flutter SDK**\n\nThis is a link to the Magic Flutter SDK documentation. The Flutter SDK is a software development kit for building, testing, and deploying applications on the Flutter framework. The reference to the Magic Flutter SDK implies that the provided documentation includes a specific implementation and instructions for integrating Magic features into Flutter applications.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/featured-chains/ethereum/flutter#chunk-14", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nThe Magic SDK for Laravel is your entry-point to secure, passwordless authentication for your application. This guide will cover some important topics for getting started with the Magic Laravel SDK and to make the most of Magic's features.", "explanation": "The 'Laravel API Reference - #Overview' section is an introductory documentation page for the Magic Labs embedded wallet's Laravel SDK. \n\nThe main purpose of this section is to provide a starting point for developers using Laravel to integrate Magic's passwordless authentication features into their applications, specifically highlighting the Magic SDK for Laravel as the entry-point for this integration.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/laravel#chunk-1", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nThe Magic class is the entry-point to the Magic SDK. It must be instantiated with a Magic secret key.\n\n#\n\nCopy\n\n01\n\ncomposer\n\nrequire magiclabs/magic-laravel\n\n01\n\ncomposer\n\nrequire magiclabs/magic-laravel", "explanation": "Based on the provided documentation section titled \"#Getting Started - #Installation\", here's a clear and concise explanation of its content and main purpose:\n\n**Overview:**\nThis section outlines the initial steps required to install and set up the Magic Labs embedded wallet library in a Laravel project.\n\n**Key Points:**\n\n1. **Importing the Magic SDK:** The section emphasizes the importance of instantiating the Magic class, which serves as the main entry-point for the Magic SDK. This class needs to be initialized with a Magic secret key for it to function correctly.\n2. **Installing the Laravel Package:** The section guides users on how to install the Magic Laravel package using Composer, a package manager for PHP.\n\n**Main Purpose:**\nThe primary goal of this section is to walk users through the process of getting started with the Magic Labs embedded wallet library in a Laravel project, ensuring that all necessary dependencies are in place for the library to operate correctly. \n\nBy following this section, users will be able to properly install and configure the Magic Laravel package, taking the first step towards integrating the embedded wallet into their project.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/laravel#chunk-2", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n#\n\nMagic\n\nParameter\n\nType\n\nDefinition\n\nMAGIC_SECRET_API_KEY\n\nMAGIC_SECRET_API_KEY\n\nstr\n\nYour secret API Key retrieved from the Magic Dashboard.\n\nMAGIC_RETRIES?\n\nMAGIC_RETRIES?\n\nnum\n\nTotal number of retries to allow.\n\nMAGIC_TIMEOUT?\n\nMAGIC_TIMEOUT?\n\nnum\n\nA period of time the request is going to wait for a response.\n\nMAGIC_BACKOFF_FACTOR?\n\nMAGIC_BACKOFF_FACTOR?\n\nnum\n\nA backoff factor to apply between retry attempts.", "explanation": "**Constructor - #Magic**\n\nThe `#Constructor - #Magic` section of the Magic Labs embedded wallet documentation outlines the parameters required to initialize a Magic object for use in a Laravel application.\n\n**Main Purpose:**\n\nThe main purpose of this constructor is to create a Magic object instance, which is essential for interacting with the Magic Labs embedded wallet API in your Laravel application. This object instance enables you to send sign-in and sign-up requests, as well as other authentication-related operations.\n\n**Constructor Parameters:**\n\nThe constructor supports four parameters:\n\n1. **MAGIC_SECRET_API_KEY:** Your secret API key retrieved from the Magic Dashboard, used for authentication with the Magic API.\n2. **MAGIC_RETRIES:** The total number of retries allowed for requests. This parameter helps manage the number of times a request is retried in case of network errors or API availability issues.\n3. **MAGIC_TIMEOUT:** The amount of time (in seconds) the request will wait for a response from the Magic API.\n4. **MAGIC_BACKOFF_FACTOR:** A backoff factor applied between retry attempts, ensuring that subsequent retries are delayed to prevent overwhelming the Magic API with repeated requests.\n\nBy initializing the Magic object with these parameters, you can ensure a robust and reliable interaction with the Magic Labs embedded wallet API in your Laravel application.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/laravel#chunk-3", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nThe Magic Laravel SDK allows you to specify your own API secret key and HTTP request strategy when your application is interacting with the Magic API via the .env file\n\n.env\n\nAdd the following variables in your .env file to get the most out of Magic Constructor under the hood.\n\n.env\n\nCopy\n\n01\n\nMAGIC_SECRET_API_KEY=sk_XXXX_XXXXXXXXXXXXXXXX\n\n01\n\nMAGIC_SECRET_API_KEY=sk_XXXX_XXXXXXXXXXXXXXXX\n\n02\n\nMAGIC_RETRIES=3\n\n02\n\nMAGIC_RETRIES=3\n\n03\n\nMAGIC_TIMEOUT=10\n\n03\n\nMAGIC_TIMEOUT=10\n\n04\n\nMAGIC_BACKOFF_FACTOR=0.02\n\n04\n\nMAGIC_BACKOFF_FACTOR=0.02", "explanation": "**Initialization Explanation**\n\nThe #Initialization section in Magic Labs' embedded wallet documentation for Laravel SDK explains how to configure Magic Laravel to interact with the Magic API. It provides information on how to specify custom settings in the `.env` file.\n\n**Main Purpose**\n\nThe main purpose of this section is to allow developers to customize the behavior of the Magic Laravel SDK when making API calls. By adding specific variables to the `.env` file, developers can:\n\n1. **Specify their own API secret key**: Securely store and manage the API secret key.\n2. **Configure HTTP request strategy**: Customize the number of retries, timeout, and backoff factor to handle potential errors or delays.\n\n**Key Configuration Variables**\n\nHere are the main configuration variables mentioned in the section:\n\n1. `MAGIC_SECRET_API_KEY`: The Magic API secret key.\n2. `MAGIC_RETRIES`: The number of retries for failed API calls (default is 3).\n3. `MAGIC_TIMEOUT`: The timeout in seconds for API calls (default is 10).\n4. `MAGIC_BACKOFF_FACTOR`: The factor used for exponential backoff when retrying failed API calls (default is 0.02).\n\nBy customizing these settings, developers can fine-tune the Magic Laravel SDK to better fit their application's needs and improve its overall performance and reliability.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/laravel#chunk-4", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nThe token resource and its methods are accessible on the Magic instance by the token attribute. It provides methods to interact with the DID Token.\n\ntoken\n\nThe token resource does not make any API calls to the Magic server.\n\nCopy\n\n01\n\nuse\n\nMagic\n\n;\n\n01\n\nuse\n\nMagic\n\n;\n\n02\n\n02\n\n03\n\nMagic\n\n::\n\ntoken\n\n(\n\n)\n\n->\n\nvalidate\n\n(\n\n'<did_token>'\n\n)\n\n;\n\n03\n\nMagic\n\n::\n\ntoken\n\n(\n\n)\n\n->\n\nvalidate\n\n(\n\n'<did_token>'\n\n)\n\n;\n\n04\n\nMagic\n\n::\n\ntoken\n\n(\n\n)\n\n->\n\nget_issuer\n\n(\n\n'<did_token>'\n\n)\n\n;\n\n04\n\nMagic\n\n::\n\ntoken\n\n(\n\n)\n\n->\n\nget_issuer\n\n(\n\n'<did_token>'\n\n)\n\n;\n\n05\n\nMagic\n\n::\n\ntoken\n\n(\n\n)\n\n->\n\nget_public_address\n\n(\n\n'<did_token>'\n\n)\n\n;\n\n05\n\nMagic\n\n::\n\ntoken\n\n(\n\n)\n\n->\n\nget_public_address\n\n(\n\n'<did_token>'\n\n)\n\n;\n\n06\n\nMagic\n\n::\n\ntoken\n\n(\n\n)\n\n->\n\ndecode\n\n(\n\n'<did_token>'\n\n)\n\n;\n\n06\n\nMagic\n\n::\n\ntoken\n\n(\n\n)\n\n->\n\ndecode\n\n(\n\n'<did_token>'\n\n)\n\n;\n\n#\n\nvalidate\n\nValidates a DID token.\n\nDID token\n\nCopy\n\n01\n\ntoken\n\n.\n\nvalidate\n\n(\n\ndid_token\n\n)\n\n01\n\ntoken\n\n.\n\nvalidate\n\n(\n\ndid_token\n\n)\n\n#\n\n\u2022 did_token (str): A DID Token generated by a Magic user on the client-side\n\ndid_token", "explanation": "**Token Resource - #validate - #Arguments**\n\nThe `#validate` method is a part of the Token Resource in the Magic Labs embedded wallet documentation. It is used to validate a DID (Decentralized Identifier) token.\n\n**Main Purpose:**\n\nThe primary purpose of the `#validate` method is to verify the authenticity and integrity of a DID token generated by a Magic user on the client-side. This method ensures that the received token is valid and not tampered with during transmission.\n\n**Key Information:**\n\n* `validate`: The method to validate a DID token.\n* `did_token (str)`: A DID Token generated by a Magic user on the client-side, which needs to be validated.\n\n**Example Usage:**\n```php\nMagic::token()\n    ->validate('<did_token>');\n```\nIn this example, the `validate` method is called on the Token Resource, passing the DID token as an argument to be validated.\n\nThe `#validate` method is essential for secure and trusted interactions between the client and server, ensuring that only legitimate and untampered DID tokens are processed.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/laravel#chunk-5", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 DIDTokenException if the given DID Token is invalid or malformed\n\nDIDTokenException", "explanation": "Based on the provided documentation section '#Raises' from the Magic Labs embedded wallet Laravel server-side SDK documentation, it appears that this section is used to specify the exceptions that can be thrown when using the API's methods.\n\nIn this specific section, there is only one exception mentioned:\n\n# \n\u2022 DIDTokenException if the given DID Token is invalid or malformed\n\n- **DIDTokenException:** This is an exception class that can be thrown when the given Decentralized Identifier (DID) token is either invalid or malformed.\n\n- **Main purpose:** The main purpose of this section is to inform developers about the potential exceptions they may encounter while using the API's methods. This allows them to handle and anticipate these situations in their code, ensuring a more robust and error-free application.\n\nIn the context of the Magic Labs embedded wallet, this exception can be thrown if the DID token provided is not correctly formatted, is outdated, or is otherwise invalid. By catching and handling this exception, developers can respond accordingly, such as by asking the user to re-generate their DID token or retry the operation.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/laravel#chunk-6", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 None", "explanation": "The '#Returns' section in the Magic Labs embedded wallet documentation for the Laravel server-side SDK is nonexistent or empty. \n\nSince it's empty, there is no information available about it.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/laravel#chunk-7", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nget_issuer\n\nExtracts the iss from the DID Token.\n\niss\n\nCopy\n\n01\n\ntoken\n\n.\n\nget_issuer\n\n(\n\ndid_token\n\n)\n\n01\n\ntoken\n\n.\n\nget_issuer\n\n(\n\ndid_token\n\n)\n\n#\n\n\u2022 did_token (str): A DID Token generated by a Magic User on the client-side\n\ndid_token", "explanation": "**Overview of `#get_issuer`**\n\n`#get_issuer` is a function in the Magic Labs embedded wallet documentation that takes a `did_token` as input and extracts the `iss` (issuer) from the DID (Decentralized Identifier) Token.\n\n**Purpose of `#get_issuer`**\n\nThe primary purpose of `#get_issuer` is to enable the extraction of the issuer information from a DID Token. This function is used to verify the authenticity and source of the token, providing an additional layer of security and trust verification.\n\n**Use Case**\n\nFor instance, in a real-world scenario, `#get_issuer` could be used to:\n\n1. Verify the identity of a Magic user when authenticating or signing documents.\n2. Authenticate the issuer of a digital asset or NFT.\n3. Implement permission-based access control, where the issuer determines the permissions and access levels for a resource.\n\nBy extracting the `iss` from the DID Token using `#get_issuer`, developers can ensure the integrity and verifiability of tokens issued and accessed using the Magic Labs embedded wallet.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/laravel#chunk-8", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 DIDTokenException if the given DID Token is malformed\n\nDIDTokenException", "explanation": "Based on the provided documentation, the section '#Raises' indicates that it outlines the exceptions that are potentially thrown by a specific function or method in the code.\n\nIn this case, the '#Raises' section is related to handling errors for DID Token validation, which is a process of verifying the Digital Identity (DID) token. A DID token is a unique identifier used in Magic Labs embedded wallet.\n\n**The main purpose of '#Raises' in this context:**\n\n- Providing developers with information on potential exceptions that may occur during the validation process for a DID token.\n- Informing developers that if the given DID token is malformed, the system will raise a `DIDTokenException`.\n\n**Key points to understand:**\n\n- A `DIDTokenException` is an exception thrown when the DID token is invalid or malformed.\n- Developers can use this information to handle errors and exceptions correctly in their code to ensure smooth operation and prevent application crashes.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/laravel#chunk-9", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 A Decentralized ID (iss) of the Magic user who generated the DID Token\n\niss", "explanation": "The documentation section titled '#Returns' is about the format of the response from the Magic Labs API following the issuance of a DID Token, specifically within the context of using the Magic Ledger Server-Side SDK with Laravel.\n\nThe main purpose of this section is to outline the attributes included in the response, specifically the attribute 'iss', which stands for 'Issuer'.\n\nHere is the clarification about the 'iss' attribute:\n\n- The 'iss' attribute represents the Decentralized ID (DID) of the Magic user who generated the DID Token.\n- This means it is the unique identifier for the user who created the DID Token, serving as a reference to ensure identity verification and trust in the Magic ecosystem.\n\nHaving this information clarifies the mechanism behind Magic's token issuance for developers working with the Magic Ledger Server-Side SDK, ensuring a seamless integration process while inheriting security standards set up by Magic's authentication protocols.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/laravel#chunk-10", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nget_public_address\n\nGets the cryptographic public address of the Magic User who generated the supplied DID Token.\n\npublic address\n\nCopy\n\n01\n\ntoken\n\n.\n\nget_public_address\n\n(\n\ndid_token\n\n)\n\n01\n\ntoken\n\n.\n\nget_public_address\n\n(\n\ndid_token\n\n)\n\n#\n\n\u2022 did_token (str): A DID Token generated by a Magic user on the client-side\n\ndid_token", "explanation": "**#get_public_address - #Arguments**\n\nThe `get_public_address` function is a part of the Magic Labs embedded wallet API. Its main purpose is to retrieve the **public cryptographic address** associated with the user who generated a specific **DID (Decentralized ID) Token**.\n\n**Main Purpose:**\n\nThe primary function of `get_public_address` is to link a user's digital identity with their public address. This is typically used in blockchain transactions, where users can receive funds or store cryptocurrency. By getting the public address, applications can:\n\n1. Identify the user's account tied to the DID Token\n2. Associate the user's digital identity with their public address\n\n**Signature:**\n\n`get_public_address(did_token)`\n\n**Argument:** `did_token (str)`: A unique string generated by a Magic user on the client-side, which represents a specific user's identity.\n\nIn summary, `get_public_address` provides the public address of the user who generated the specified DID Token, enabling secure and decentralized transactions.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/laravel#chunk-11", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 DIDTokenException if the given DID Token is malformed\n\nDIDTokenException", "explanation": "Based on the given documentation section titled '#Raises', I can explain what it is about and its main purpose as follows:\n\n**What it is about:**\n\nThis section is a part of the documentation that describes the potential exceptions that may be raised when calling a specific function or method in the Magic Labs embedded wallet API for Laravel.\n\n**Its main purpose:**\n\nThe main purpose of this section is to inform developers about the possible errors that can occur while using the API, along with the specific exception that will be raised in each case. This helps developers to handle errors gracefully and anticipate potential exceptions when coding.\n\nIn this specific case, the section indicates that a `DIDTokenException` will be raised if the provided DID Token is malformed. This means that if the DID Token is not formatted correctly, the API will throw a `DIDTokenException` to alert the developer of the issue.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/laravel#chunk-12", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 A public address of the Magic User who generated the DID Token. Currently, this value is associated with the Ethereum blockchain.\n\npublic address", "explanation": "**# Returns Section: Public Address**\n\nThe '# Returns' section from the Magic Labs embedded wallet documentation explains the information that will be returned after a user generates a DID Token using the Magic Link SDK. Specifically, it highlights the 'public address' value associated with the Magic User who initiated the token generation.\n\n**Main Purpose:**\n\nThe primary purpose of this section is to inform developers about the data that will be returned after a successful DID Token generation. In this case, the returned data includes the public address associated with the Ethereum blockchain.\n\nIn essence, the public address is a unique identifier that links the Magic User's digital identity (represented by the DID Token) to a specific Ethereum blockchain address. This connection enables seamless integration with the Ethereum network, facilitating various use cases like token transfers or wallet funding.\n\nBy understanding the 'public address' value, developers can efficiently leverage the Magic Link SDK to implement robust digital identity verification and authentication solutions within their Laravel applications.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/laravel#chunk-13", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\ndecode\n\nDecodes a DID Token from a Base64 string into a tuple of its individual components: proof and claim. This method allows you decode the DID Token and inspect the token. You can apply your own rules and validations on top of the current token.validate method.\n\nproof\n\nclaim\n\ntoken.validate\n\nCopy\n\n01\n\ntoken\n\n.\n\ndecode\n\n(\n\ndid_token\n\n)\n\n01\n\ntoken\n\n.\n\ndecode\n\n(\n\ndid_token\n\n)\n\n#\n\n\u2022 did_token (str): A DID Token generated by a Magic user on the client-side\n\ndid_token", "explanation": "Here's a clear and concise explanation of the `#decode` section:\n\n**`#decode - #Arguments` Explanation:**\n\nThe `#decode` section is a part of the Magic Labs embedded wallet's documentation for Laravel server-side SDKs. It outlines a method used to decode a DID Token from a Base64 string.\n\n**Main Purpose:**\n\nThe primary purpose of the `#decode` method is to break down a DID Token into its constituent parts, which are:\n\n1. **Proof**: This likely refers to the cryptographic proof or verification information associated with the token.\n2. **Claim**: This represents the actual data or assertions embedded within the token.\n\nBy decoding the DID Token, developers can inspect its components, apply custom validations, and integrate it into their authentication or authorization workflows.\n\n**Key Argument: `did_token`**\n\nThe `did_token` is a string argument that represents the encoded DID Token generated by a Magic user on the client-side. This argument is passed to the `decode` method to initiate the token decoding process.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/laravel#chunk-14", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 DIDTokenException if the given DID Token is malformed\n\nDIDTokenException", "explanation": "Based on the documentation provided, the '#Raises' section from the Magic Labs embedded wallet documentation is used to describe potential exceptions that might be raised by the Magic Labs SDK, specifically the Laravel server-side SDK.\n\nIn this case, it indicates that if the DID Token (a Decentralized Identifier token used for authentication) is malformed or incorrectly formatted, the SDK will throw a `DIDTokenException`.\n\nThe main purpose of this section is to serve as a warning or notification to developers about what can go wrong when using the Magic Labs SDK, allowing them to handle these potential exceptions and errors in their code, ensuring a robust and reliable application. \n\nFor instance, in a Laravel application, a developer would use try/catch blocks to handle exceptions raised by the Magic Labs SDK, for example:\n\n```php\ntry {\n    // Code that uses the Magic Labs SDK\n} catch (\\Magiclabs\\SDK\\Exceptions\\DIDTokenException $e) {\n    // Handle the DIDTokenException\n}\n```", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/laravel#chunk-15", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 proof (str): A digital signature that proves the validity of the given claim\n\n\u2022 claim (array): Unsigned data the user asserts. This should equal the proof after Elliptic Curve recovery. See Decentralized ID Token Specification for fields inside the claim.\n\nproof\n\nclaim\n\nclaim\n\nproof\n\nDecentralized ID Token Specification\n\nclaim", "explanation": "Based on the provided documentation section, '#Returns', it appears to be describing the expected output of a function or API call. The output is represented by three variables:\n\n1. **proof**: A string that represents a digital signature. This signature \"proves the validity of the given claim\", indicating that it has been verified using Elliptic Curve cryptography.\n\n2. **claim** (with two instances): An array of unsigned user data that they assert. This data is expected to be equal to the proof after being processed with Elliptic Curve recovery. \n\nIn essence, the main purpose of this section is to explain the structure and contents of the output when using the Magic Labs embedded wallet, specifically when generating or validating user assertions (Decentralized ID Tokens).\n\nThis information is crucial for developers to understand how to properly process and verify the user data returned by the wallet, ensuring secure and trusted interactions between the wallet and the application or service. \n\nHere's a code example to give a hypothetical use case to validate the returned data\n```jsx\naxios.post('/verify-claim', {\n  proof: 'digital signature string',\n  claim: ['unsigned user data']\n}).then((response) => {\n  const verifiedClaim = response.data;\n  console.log(verifiedClaim);\n});\n```", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/laravel#chunk-16", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nThe user resource and its methods are accessible on the Magic instance by the user attribute. It provides methods to interact with the User.\n\nuser\n\nCopy\n\n01\n\nuse\n\nMagic\n\n;\n\n01\n\nuse\n\nMagic\n\n;\n\n02\n\n02\n\n03\n\nMagic\n\n::\n\nuser\n\n(\n\n)\n\n->\n\nget_metadata_by_issuer\n\n(\n\n'<issuer>'\n\n)\n\n;\n\n03\n\nMagic\n\n::\n\nuser\n\n(\n\n)\n\n->\n\nget_metadata_by_issuer\n\n(\n\n'<issuer>'\n\n)\n\n;\n\n04\n\nMagic\n\n::\n\nuser\n\n(\n\n)\n\n->\n\nget_metadata_by_public_address\n\n(\n\n'<public_address>'\n\n)\n\n;\n\n04\n\nMagic\n\n::\n\nuser\n\n(\n\n)\n\n->\n\nget_metadata_by_public_address\n\n(\n\n'<public_address>'\n\n)\n\n;\n\n05\n\nMagic\n\n::\n\nuser\n\n(\n\n)\n\n->\n\nget_metadata_by_token\n\n(\n\n'<did_token>'\n\n)\n\n;\n\n05\n\nMagic\n\n::\n\nuser\n\n(\n\n)\n\n->\n\nget_metadata_by_token\n\n(\n\n'<did_token>'\n\n)\n\n;\n\n06\n\nMagic\n\n::\n\nuser\n\n(\n\n)\n\n->\n\nlogout_by_issuer\n\n(\n\n'<issuer>'\n\n)\n\n;\n\n06\n\nMagic\n\n::\n\nuser\n\n(\n\n)\n\n->\n\nlogout_by_issuer\n\n(\n\n'<issuer>'\n\n)\n\n;\n\n07\n\nMagic\n\n::\n\nuser\n\n(\n\n)\n\n->\n\nlogout_by_public_address\n\n(\n\n'<public_address>'\n\n)\n\n;\n\n07\n\nMagic\n\n::\n\nuser\n\n(\n\n)\n\n->\n\nlogout_by_public_address\n\n(\n\n'<public_address>'\n\n)\n\n;\n\n08\n\nMagic\n\n::\n\nuser\n\n(\n\n)\n\n->\n\nlogout_by_token\n\n(\n\n'<did_token>'\n\n)\n\n;\n\n08\n\nMagic\n\n::\n\nuser\n\n(\n\n)\n\n->\n\nlogout_by_token\n\n(\n\n'<did_token>'\n\n)\n\n;\n\n#\n\nget_metadata_by_issuer\n\nRetrieves information about the user by the supplied iss from the DID Token. This method is useful if you store the iss with your user data, which is recommended.\n\niss\n\niss\n\nCopy\n\n01\n\nuser\n\n.\n\nget_metadata_by_issuer\n\n(\n\nissuer\n\n)\n\n01\n\nuser\n\n.\n\nget_metadata_by_issuer\n\n(\n\nissuer\n\n)\n\n#\n\n\u2022 issuer (str): The user's Decentralized ID, which can be parsed using token.get_issuer\n\nissuer\n\ntoken.get_issuer", "explanation": "This section of the documentation is titled '# User Resource - # get_metadata_by_issuer - # Arguments'. It explains how to retrieve information about a user by their issuer using the 'get_metadata_by_issuer' method.\n\n**Purpose:**\n\nThe main purpose of this method is to retrieve and verify user data based on their Decentralized ID (DID). This is useful for storing the issuer with user data and is recommended.\n\n**How it works:**\n\nThe 'get_metadata_by_issuer' method takes an 'issuer' parameter, which is the user's Decentralized ID obtained from the DID Token using the 'token.get_issuer' method.\n\n**Key steps:**\n\n1. Store the issuer with user data, which is recommended.\n2. Use the 'get_metadata_by_issuer' method to retrieve user information based on the issuer.\n3. Pass the issuer as a string to the method, which can be obtained from the DID Token using 'token.get_issuer'.\n\n**Example usage:**\n```php\n$user->get_metadata_by_issuer($issuer);\n```\nBy using this method, you can ensure that the user data is correctly associated with their issuer, providing a secure way to retrieve and verify user information.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/laravel#chunk-17", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 RateLimitingException: If you have sent too many requests within a given period of time\n\n\u2022 BadRequestException: If the supplied parameters are invalid\n\n\u2022 AuthenticationException: If your API secret key cannot be authenticated with Magic API server\n\n\u2022 ForbiddenException: If your API secret key is not authorized to access the resources\n\n\u2022 ApiException: For any other API error\n\n\u2022 ApiConnectionException: If your server cannot communicate with the Magic server. Normally this is a network communication error.\n\nRateLimitingException\n\nBadRequestException\n\nAuthenticationException\n\nForbiddenException\n\nApiException\n\nApiConnectionException\n\nSee Error Handling for more examples.\n\nError Handling", "explanation": "# Raises\n\nIn the Magic Labs embedded wallet documentation, the '#Raises' section highlights specific exceptions that can be thrown during Magic API interactions. These exceptions provide valuable information about potential errors that may occur during API calls.\n\n**Main Purpose:**\n\nThe main purpose of this section is to inform developers about potential error scenarios, allowing them to handle and resolve these exceptions programmatically. By catching and handling these exceptions, developers can enhance the robustness and reliability of their applications.\n\n**Key Takeaways:**\n\nThe '#Raises' section outlines six primary exception types:\n\n1. **RateLimitingException**: Sent too many requests within a given period.\n2. **BadRequestException**: Supplied parameters are invalid.\n3. **AuthenticationException**: API secret key cannot be authenticated with the Magic API server.\n4. **ForbiddenException**: API secret key is not authorized to access resources.\n5. **ApiException**: Catch-all for any other API errors.\n6. **ApiConnectionException**: Network communication error with the Magic server.\n\nBy understanding these exceptions, developers can implement error handling mechanisms to:\n\n* Handle rate limiting and retry requests\n* Validate user input and handle invalid parameters\n* Authenticate and authorize API secret keys\n* Implement secure and robust API connections\n\nThe provided documentation also includes a link to the 'Error Handling' section, which likely provides more examples and guidance on implementing error handling in Magic Labs embedded wallet applications.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/laravel#chunk-18", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 A MagicResponse: The data field contains all of the user meta information.issuer (str): The user's Decentralized IDpublic_address (str): The authenticated user's public address (a.k.a.: public key). Currently, this value is associated with the Ethereum blockchain.email (str): The user's email addressphone_number (str): The user's phone numberoauth_provider (str): OAuth provider, if anywallets (arr): The multichain wallets of the authenticated user\n\nMagicResponse\n\nMagicResponse\n\ndata\n\n\u2022 issuer (str): The user's Decentralized ID\n\n\u2022 public_address (str): The authenticated user's public address (a.k.a.: public key). Currently, this value is associated with the Ethereum blockchain.\n\n\u2022 email (str): The user's email address\n\n\u2022 phone_number (str): The user's phone number\n\n\u2022 oauth_provider (str): OAuth provider, if any\n\n\u2022 wallets (arr): The multichain wallets of the authenticated user\n\nissuer\n\npublic_address\n\nemail\n\nphone_number\n\noauth_provider\n\nwallets", "explanation": "**Returns**\n\nThe '#Returns' section of the Magic Labs embedded wallet documentation for the Laravel SDK explains what information is returned when a user successfully authenticates and the purpose of the returned data.\n\n**Main Purpose:**\n\nThe main purpose of the '#Returns' section is to provide information about the data structure of the response returned by the Magic Labs embedded wallet when a user authenticates successfully.\n\n**Returned Data:**\n\nThe returned data is in the form of a `MagicResponse` object, which contains various user metadata, including:\n\n* `issuer`: The user's Decentralized ID\n* `public_address`: The user's public address (or public key) associated with the Ethereum blockchain\n* `email`: The user's email address\n* `phone_number`: The user's phone number\n* `oauth_provider`: The OAuth provider used for the user's account, if applicable\n* `wallets`: An array of multichain wallets associated with the user\n\n**Key Takeaways:**\n\nThe '#Returns' section is essential for developers to understand the structure and content of the response returned by the Magic Labs embedded wallet after a successful user authentication. This information helps developers integrate the wallet's functionality into their application.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/laravel#chunk-19", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nget_metadata_by_public_address\n\nRetrieves information about the user by the supplied public_address. This method is useful if you store the public_address with your user data.\n\npublic_address\n\npublic_address\n\nCopy\n\n01\n\nuser\n\n.\n\nget_metadata_by_public_address\n\n(\n\npublic_address\n\n)\n\n01\n\nuser\n\n.\n\nget_metadata_by_public_address\n\n(\n\npublic_address\n\n)\n\n#\n\n\u2022 public_address (str): The user's Ethereum public address, which can be parsed using token.get_public_address.\n\npublic_address\n\ntoken.get_public_address", "explanation": "**Retrieving User Metadata by Ethereum Public Address**\n\nThe `#get_metadata_by_public_address` section of the Magic Labs embedded wallet documentation explains a method used to retrieve information about a user by their public Ethereum address.\n\n**Main Purpose:**\n\nThe primary purpose of this method is to provide a way to retrieve a user's metadata from a stored public address. This is particularly useful in scenarios where you have saved the user's public address along with their other data in your user database.\n\n**How it Works:**\n\nHere's a brief summary of the method:\n\n1. Pass the public Ethereum address of the user as an argument (`public_address`).\n2. The method retrieves the user's metadata associated with that public address.\n3. The metadata is then returned, allowing you to access relevant information about the user.\n\n**Using this Method:**\n\nTo use `get_metadata_by_public_address`, you would typically call the method with the user's public address as an input parameter, like this:\n\n```php\n$metadata = get_metadata_by_public_address($public_address);\n```\n\nThis will return the user's metadata associated with the provided public address.\n\n**Example Use Case:**\n\nYou store users' public addresses alongside their other data in your database. After a user completes an authentication flow with Magic, you can retrieve their metadata by their public address using this method, and then use that metadata to populate their user profile or perform other actions.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/laravel#chunk-20", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 RateLimitingException: If you have sent too many requests within a given period of time\n\n\u2022 BadRequestException: If the supplied parameters are invalid\n\n\u2022 AuthenticationException: If your API secret key cannot be authenticated with Magic API server\n\n\u2022 ForbiddenException: If your API secret key is not authorized to access the resources\n\n\u2022 ApiException: For any other API error\n\n\u2022 ApiConnectionException: If your server cannot communicate with the Magic server. Normally this is a network communication error.\n\nRateLimitingException\n\nBadRequestException\n\nAuthenticationException\n\nForbiddenException\n\nApiException\n\nApiConnectionException\n\nSee Error Handling for more examples.\n\nError Handling", "explanation": "**Magic Labs Server-Side SDKs Laraval API Documentation - #Raises Section**\n\nThe '#Raises' section of the Magic Labs Laraval API documentation outlines specific exceptions that can be raised during interactions with the API. These exceptions indicate that something has gone wrong during the execution of the API, and they provide valuable information for error handling and debugging.\n\n**Main Purpose:**\n\nThe main purpose of the '#Raises' section is to inform developers about the types of exceptions that can be thrown by the Magic Labs Laraval API, their causes, and how to handle them. This allows developers to anticipate and handle potential errors, ensuring that their applications provide a smoother user experience and maintain data integrity.\n\n**Types of Exceptions:**\n\nThe Magic Labs Laraval API raises the following exceptions:\n\n1. **RateLimitingException**: Thrown when multiple requests are sent within a given time period, exceeding the rate limit.\n2. **BadRequestException**: Thrown when supplied parameters are invalid or incorrect.\n3. **AuthenticationException**: Thrown when the API secret key cannot be authenticated with the Magic API server.\n4. **ForbiddenException**: Thrown when the API secret key is not authorized to access specific resources.\n5. **ApiException**: Thrown for any other API error, providing a generic exception for unexpected issues.\n6. **ApiConnectionException**: Thrown when there's a network communication error between the server and the Magic API server.\n\n**Error Handling Recommendation:**\n\nTo handle these exceptions effectively, Magic Labs recommends checking the provided error messages and documentation for more information on how to troubleshoot and resolve the issues.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/laravel#chunk-21", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 A MagicResponse: The data field contains all of the user meta information.issuer (str): The user's Decentralized IDpublic_address (str): The authenticated user's public address (a.k.a.: public key). Currently, this value is associated with the Ethereum blockchain.email (str): The user's email addressphone_number (str): The user's phone numberoauth_provider (str): OAuth provider, if anywallets (arr): The multichain wallets of the authenticated user\n\nMagicResponse\n\nMagicResponse\n\ndata\n\n\u2022 issuer (str): The user's Decentralized ID\n\n\u2022 public_address (str): The authenticated user's public address (a.k.a.: public key). Currently, this value is associated with the Ethereum blockchain.\n\n\u2022 email (str): The user's email address\n\n\u2022 phone_number (str): The user's phone number\n\n\u2022 oauth_provider (str): OAuth provider, if any\n\n\u2022 wallets (arr): The multichain wallets of the authenticated user\n\nissuer\n\npublic_address\n\nemail\n\nphone_number\n\noauth_provider\n\nwallets", "explanation": "**# Returns: Explanation and Purpose**\n\nThe \"# Returns\" section in the Magic Labs embedded wallet documentation provides information about the structure and contents of the response data returned when making a successful authentication request using the Magic API.\n\n**Main Purpose:**\n\nThe main purpose of the \"# Returns\" section is to clearly outline the expected response format, allowing developers to effectively handle and process the authentication result.\n\n**Key Components:**\n\n- **MagicResponse**: The top-level response object.\n- **data**: The core object containing user meta information.\n- **User Meta Information**: Includes fields such as issuer (Decentralized ID), public_address (public key associated with the Ethereum blockchain), email address, phone number, OAuth provider (if applicable), and multichain wallets.\n\n**Key Benefits for Developers:**\n\n- Clarity on expected response structure and contents\n- Ability to properly extract and process authentication result data\n- Easier integration with the Magic Labs embedded wallet API in a Laravel application\n\nBy providing a detailed description of the response data, this section supports seamless integration and effective usage of the Magic API, enabling developers to securely authenticate users and retrieve relevant information.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/laravel#chunk-22", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nget_metadata_by_token\n\nRetrieves information about the user by the supplied DID Token.\n\nCopy\n\n01\n\nuser\n\n.\n\nget_metadata_by_token\n\n(\n\ndid_token\n\n)\n\n01\n\nuser\n\n.\n\nget_metadata_by_token\n\n(\n\ndid_token\n\n)\n\n#\n\n\u2022 did_token (str): A DID Token generated by a Magic User on the client-side\n\ndid_token", "explanation": "**get_metadata_by_token API Documentation**\n\nThe `get_metadata_by_token` function is an API endpoint used to retrieve information about a user based on a Digital Identity (DID) Token. This endpoint is part of the Magic Labs embedded wallet, allowing your application to verify a user's identity and access their associated metadata.\n\n**Main Purpose:**\n\nThe primary purpose of `get_metadata_by_token` is to:\n\n1. **Verify User Identity**: Validate a DID Token generated by a Magic User on the client-side, ensuring the token is valid and not tampered with.\n2. **Retrieving User Metadata**: Access and retrieve user-specific metadata associated with the validated DID Token.\n\n**Key Argument:**\n\n* `did_token (str)`: A Digital Identity (DID) Token generated by a Magic User on the client-side. This token is used to authenticate the user and retrieve their metadata.\n\nBy using `get_metadata_by_token`, your application can securely verify user identity and access relevant metadata, ensuring a secure and seamless experience for your users.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/laravel#chunk-23", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 RateLimitingException: If you have sent too many requests within a given period of time\n\n\u2022 BadRequestException: If the supplied parameters are invalid\n\n\u2022 AuthenticationException: If your API secret key cannot be authenticated with Magic API server\n\n\u2022 ForbiddenException: If your API secret key is not authorized to access the resources\n\n\u2022 ApiException: For any other API error\n\n\u2022 ApiConnectionException: If your server cannot communicate with the Magic server. Normally this is a network communication error.\n\nRateLimitingException\n\nBadRequestException\n\nAuthenticationException\n\nForbiddenException\n\nApiException\n\nApiConnectionException\n\nSee Error Handling for more examples.\n\nError Handling", "explanation": "**Exception Handling in Magic Labs Embedded Wallet**\n\nThe '#Raises' section in the Magic Labs embedded wallet documentation discusses various exceptions that may be raised when interacting with the Magic API server. These exceptions serve as a mechanism to handle errors and unexpected outcomes, ensuring a robust and reliable experience for users and developers.\n\n**Purpose:**\nThe primary purpose of these exceptions is to provide a structured way to handle different types of errors that can occur when integrating with the Magic API server. This allows developers to anticipate and respond to potential issues, such as invalid input, authentication failures, or network connectivity problems.\n\n**Key Exceptions:**\n\n1. **RateLimitingException**: Raised when API requests exceed the allowed rate within a given time frame.\n2. **BadRequestException**: Occurs when the supplied parameters are invalid or incomplete.\n3. **AuthenticationException**: Triggered when the API secret key cannot be authenticated with the Magic API server.\n4. **ForbiddenException**: Raised when the API secret key is not authorized to access specific resources.\n5. **ApiException**: Catch-all for any other API-related errors that don't fit into the above categories.\n6. **ApiConnectionException**: Indicates a network communication error, usually related to establishing a connection with the Magic server.\n\n**Error Handling:**\nBy catching and handling these exceptions, developers can implement custom error handling mechanisms to:\n\n* Display user-friendly error messages\n* Provide additional feedback on the error cause\n* Take corrective action to prevent future errors\n* Improve the overall user experience\n\nThe documentation suggests referring to the 'Error Handling' section for more examples on how to effectively handle these exceptions and create a reliable Magic Labs embedded wallet integration.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/laravel#chunk-24", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 A MagicResponse: The data field contains all of the user meta information.issuer (str): The user's Decentralized IDpublic_address (str): The authenticated user's public address (a.k.a.: public key). Currently, this value is associated with the Ethereum blockchain.email (str): The user's email addressphone_number (str): The user's phone numberoauth_provider (str): OAuth provider, if anywallets (arr): The multichain wallets of the authenticated user\n\nMagicResponse\n\nMagicResponse\n\ndata\n\n\u2022 issuer (str): The user's Decentralized ID\n\n\u2022 public_address (str): The authenticated user's public address (a.k.a.: public key). Currently, this value is associated with the Ethereum blockchain.\n\n\u2022 email (str): The user's email address\n\n\u2022 phone_number (str): The user's phone number\n\n\u2022 oauth_provider (str): OAuth provider, if any\n\n\u2022 wallets (arr): The multichain wallets of the authenticated user\n\nissuer\n\npublic_address\n\nemail\n\nphone_number\n\noauth_provider\n\nwallets", "explanation": "**Returns**\n\nThe '#Returns' section of the Magic Labs embedded wallet documentation describes the format of the response from the Magic API. When a request is successfully processed, the API returns a structured response that contains user meta information.\n\n**Main Purpose:**\n\nThe main purpose of the '#Returns' section is to provide a clear and concise understanding of the data format returned by the Magic API, making it easier for developers to integrate and work with the API. It outlines the fields and values that are expected in the response, facilitating proper parsing and utilization of the returned data.\n\n**Key Components:**\n\n1. **MagicResponse:** The top-level object containing the user data.\n2. **Data:** An object holding the user meta information, including:\n\t* **Issuer:** The user's Decentralized ID.\n\t* **Public Address:** The user's public Ethereum address.\n\t* **Email:** The user's email address.\n\t* **Phone Number:** The user's phone number.\n\t* **OAuth Provider:** The OAuth provider associated with the user's account (if any).\n\t* **Wallets:** An array of multichain wallets associated with the user.\n\nBy understanding the structure and content of the Magic API response, developers can more effectively implement and integrate the Magic Labs embedded wallet into their applications.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/laravel#chunk-25", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nlogout_by_issuer\n\nLogs a user out of all Magic SDK sessions given the user's Decentralized ID (iss). This method is useful if you store the iss with your user data, which is recommended.\n\niss\n\niss\n\nCopy\n\n01\n\nuser\n\n.\n\nlogout_by_issuer\n\n(\n\nissuer\n\n)\n\n01\n\nuser\n\n.\n\nlogout_by_issuer\n\n(\n\nissuer\n\n)\n\n#\n\n\u2022 issuer (str): The user's Decentralized ID, which can be parsed using token.get_issuer\n\nissuer\n\ntoken.get_issuer", "explanation": "**Logout by Issuer Method Explanation**\n\nThe `logout_by_issuer` method is a security feature provided by Magic Labs that allows you to log a user out of all Magic SDK sessions associated with their Decentralized ID (iss). This method is useful when you store the user's `iss` with their data, which is a recommended best practice.\n\n**Main Purpose**\n\nThe main purpose of `logout_by_issuer` is to securely sign a user out of all available sessions, ensuring that no unauthorized access remains after they have logged out of your application.\n\n**Using the Method**\n\nTo use this method, you need to provide the user's `iss` value as a string argument called `issuer`. You can obtain the `iss` value using the `token.get_issuer` method.\n\n**Key Point**\n\nThis method is an essential security feature that helps protect against various types of attacks that could occur when using Magic Labs embedded wallets. By logging out a user across all available sessions using their `iss` value, you can ensure a secure user experience and protect sensitive information.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/laravel#chunk-26", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 RateLimitingException: If you have sent too many requests within a given period of time\n\n\u2022 BadRequestException: If the supplied parameters are invalid\n\n\u2022 AuthenticationException: If your API secret key cannot be authenticated with Magic API server\n\n\u2022 ForbiddenException: If your API secret key is not authorized to access the resources\n\n\u2022 ApiException: For any other API error\n\n\u2022 ApiConnectionException: If your server cannot communicate with the Magic server. Normally this is a network communication error.\n\nRateLimitingException\n\nBadRequestException\n\nAuthenticationException\n\nForbiddenException\n\nApiException\n\nApiConnectionException\n\nSee Error Handling for more examples.\n\nError Handling", "explanation": "**[#Raises Section Overview]**\n\nThe `#Raises` section in the Magic Labs embedded wallet documentation outlines various exceptions that may be raised when using the Laravel SDK to interact with the Magic API.\n\n**Main Purpose:**\n\nThe purpose of this section is to inform developers about potential errors that can occur during API requests and provide guidance on how to handle these exceptions.\n\n**Key Exceptions:**\n\nThe section highlights the following five exceptions that can be raised:\n\n1. **RateLimitingException:** Raised when sending too many requests within a given period of time, indicating rate limiting restrictions.\n2. **BadRequestException:** Raised when the supplied parameters are invalid, indicating incorrect or missing information.\n3. **AuthenticationException:** Raised when the API secret key cannot be authenticated with the Magic API server.\n4. **ForbiddenException:** Raised when the API secret key is not authorized to access the requested resources.\n5. **ApiException:** Raised for any other API error that doesn't fit into the above categories.\n6. **ApiConnectionException:** Raised when the server cannot communicate with the Magic server, typically a network communication error.\n\n**Error Handling:**\n\nThe `#Raises` section directs developers to the \"Error Handling\" section for additional guidance on how to handle these exceptions in their applications.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/laravel#chunk-27", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 MagicResponse\n\nMagicResponse\n\nMagicResponse", "explanation": "Based on the provided documentation, it seems like the '#Returns' section is missing a description. However, based on typical API documentation, I can provide a general understanding of what this section might be about.\n\nThe '#Returns' section is a part of the documentation that outlines the expected response object from a specific API endpoint, function, or method. \n\nIn this case, the section is titled \"MagicResponse\" and repeats the same name twice. Based on the context of the Magic Link API and embedded wallet, I would assume that \"MagicResponse\" refers to the response object returned after a successful API call, specifically related to the embedded wallet functionality.\n\nThe main purpose of the '#Returns' section is to inform developers about the structure and contents of the response object, so they can properly handle and process the data returned from the API. This section usually includes information about:\n\n- The exact response format (e.g., JSON, XML)\n- Expected properties and their data types\n- Any error codes or error handling mechanisms\n\nWithout further context or content, it's difficult to provide a more specific explanation. If you have more information or would like me to elaborate on a different topic, please let me know.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/laravel#chunk-28", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nlogout_by_public_address\n\nLogs a user out of all Magic SDK sessions given the user's public address. This method is useful if you store the public_address.\n\npublic_address\n\nCopy\n\n01\n\nuser\n\n.\n\nlogout_by_public_address\n\n(\n\npublic_address\n\n)\n\n01\n\nuser\n\n.\n\nlogout_by_public_address\n\n(\n\npublic_address\n\n)\n\n#\n\n\u2022 public_address (str): The user's Ethereum public address\n\npublic_address", "explanation": "**Logout by Public Address**\n\nThe `logout_by_public_address` method is a functionality provided by Magic Labs to log a user out of all existing Magic SDK sessions. This method takes the user's Ethereum public address as a parameter and forcibly logs them out.\n\n**Main Purpose:**\n\nThe main purpose of `logout_by_public_address` is to revoke all sessions tied to a specific user's Ethereum public address. This is useful in scenarios where a user is using an account on multiple devices or platforms, and you want to ensure their security by automatically logging them out of all sessions after a certain action, such as password reset or account compromise.\n\n**Key Functionality:**\n\nWhen a user's public address is passed through `logout_by_public_address`, Magic Labs will invalidate all active sessions associated with that address, securely logging the user out.\n\n**Argument:**\n\nThe sole argument for this method is `public_address`, which is the user's Ethereum public address. This must be a string value.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/laravel#chunk-29", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 RateLimitingException: If you have sent too many requests within a given period of time\n\n\u2022 BadRequestException: If the supplied parameters are invalid\n\n\u2022 AuthenticationException: If your API secret key cannot be authenticated with Magic API server\n\n\u2022 ForbiddenException: If your API secret key is not authorized to access the resources\n\n\u2022 ApiException: For any other API error\n\n\u2022 ApiConnectionException: If your server cannot communicate with the Magic server. Normally this is a network communication error.\n\nRateLimitingException\n\nBadRequestException\n\nAuthenticationException\n\nForbiddenException\n\nApiException\n\nApiConnectionException\n\nSee Error Handling for more examples.\n\nError Handling", "explanation": "**Error Handling in Magic Labs Embedded Wallet API**\n\nThe '#Raises' section of the Magic Labs Embedded Wallet API documentation outlines the different types of exceptions that can occur when interacting with the Magic API server using the Laravel SDK. These exceptions are raised as a result of various errors, including:\n\n### Purpose\n\nThe main purpose of this section is to provide a clear understanding of the possible errors that can occur while using the Magic API, allowing developers to handle and manage these exceptions effectively in their applications.\n\n### Types of Exceptions\n\nThe following exceptions are listed:\n\n1. **RateLimitingException**: Thrown when the API request rate exceeds the allowed limit within a specified time period.\n2. **BadRequestException**: Raised when the provided parameters are invalid or incorrect.\n3. **AuthenticationException**: Occurs when the API secret key is invalid or cannot be authenticated with the Magic API server.\n4. **ForbiddenException**: Thrown when the API secret key lacks the necessary permissions to access specific resources.\n5. **ApiException**: A catch-all exception for any other API-related errors.\n6. **ApiConnectionException**: Raised when there's an issue communicating with the Magic server, typically a network communication error.\n\n### Conclusion\n\nBy understanding these exception types, developers can write robust error handling mechanisms in their applications, ensuring that they're prepared to handle any errors that may occur when interacting with the Magic API server. This enables seamless integration and utilization of the Magic Labs Embedded Wallet API in their projects.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/laravel#chunk-30", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 MagicResponse\n\nMagicResponse\n\nMagicResponse", "explanation": "The provided documentation section is under the title '#Returns' from the Magic Link documentation for Laravel server-side SDK. \n\n**Returns Overview:**\n\nThe '#Returns' section explains what responses you can expect from the Magic Labs embedded wallet after a user initiates a payment or other web3 interactions through the wallet. It is essentially about the data structure used for transmitting information back to the client application from the Magic Labs embedded wallet server.\n\n**MagicResponse:**\n\nThe primary object used for this exchange is the `MagicResponse`. This object contains the results of the user's interaction with the embedded wallet, including any errors, warnings, or the actual response of the user's action. A full example of a MagicResponse would typically include, at minimum, the transaction hash, an error message, or some other indication of the success or failure of a user's transaction.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/laravel#chunk-31", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nlogout_by_token\n\nLogs a user out of all Magic SDK sessions given the DID Token.\n\nCopy\n\n01\n\nuser\n\n.\n\nlogout_by_token\n\n(\n\ndid_token\n\n)\n\n01\n\nuser\n\n.\n\nlogout_by_token\n\n(\n\ndid_token\n\n)\n\n#\n\n\u2022 did_token (str): A DID Token generated by a Magic user on the client-side\n\ndid_token", "explanation": "In the Magic Labs API documentation for Laravel server-side SDKs, the section '#logout_by_token - #Arguments' explains how to log a user out of all Magic SDK sessions using a given DID (Decentralized Identifier) Token.\n\n**Main Purpose:**\nThe main purpose of `logout_by_token` is to invalidate all active Magic sessions, ensuring the user is properly logged out across all devices and applications.\n\n**Key Component:**\nThe `logout_by_token` method takes a single argument, `did_token`, which is a string representing a DID Token generated by a Magic user on the client-side. This token is used to identify the user and invalidate their active sessions.\n\nBy calling `logout_by_token` with a valid `did_token`, Magic Labs invalidates the user's sessions, ensuring their data and security are preserved. This is essential for ensuring user security and preventing unauthorized access to their accounts.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/laravel#chunk-32", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 RateLimitingException: If you have sent too many requests within a given period of time\n\n\u2022 BadRequestException: If the supplied parameters are invalid\n\n\u2022 AuthenticationException: If your API secret key cannot be authenticated with Magic API server\n\n\u2022 ForbiddenException: If your API secret key is not authorized to access the resources\n\n\u2022 ApiException: For any other API error\n\n\u2022 ApiConnectionException: If your server cannot communicate with the Magic server. Normally this is a network communication error.\n\nRateLimitingException\n\nBadRequestException\n\nAuthenticationException\n\nForbiddenException\n\nApiException\n\nApiConnectionException\n\nSee Error Handling for more examples.\n\nError Handling", "explanation": "In the Magic Labs embedded wallet documentation, the '#Raises' section is a list of exceptions that can be thrown when interacting with the Magic API. These exceptions are specific errors that can occur due to various reasons, such as invalid parameters, authentication issues, API rate limiting, or communication errors.\n\n**Main Purpose:**\n\nThe main purpose of the '#Raises' section is to inform developers about the potential exceptions that can occur when using the Magic API. This allows developers to anticipate and handle these exceptions in their code, which helps to prevent the application from crashing or behaving unexpectedly.\n\n**Key Exceptions:**\n\n1. **RateLimitingException:** Occurs when the API is rate-limited, meaning too many requests are made within a given time period.\n2. **BadRequestException:** Occurs when the supplied parameters are invalid or incomplete.\n3. **AuthenticationException:** Occurs when the API secret key is invalid or cannot be authenticated with the Magic API server.\n4. **ForbiddenException:** Occurs when the API secret key is not authorized to access the requested resources.\n5. **ApiException:** A catch-all exception for any other API errors that don't fit into the above categories.\n6. **ApiConnectionException:** Occurs when there's a network communication error between the server and the Magic API server.\n\n**Error Handling:**\n\nThe documentation suggests that developers should handle these exceptions in their code to prevent application downtime or unexpected behavior. The '#Raises' section primarily serves as a warning to developers about the potential exceptions that can occur, allowing them to prepare and handle these situations accordingly.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/laravel#chunk-33", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 MagicResponse\n\nMagicResponse\n\nMagicResponse", "explanation": "Unfortunately the section provided in the prompt \"##Returns\" is unclear. \n\nHowever, based on the provided documentation URL https://magic.link/docs/api/server-side-sdks/laravel and common API documentation conventions, I'll assume a typical \"##Returns\" section would describe the possible responses from an API endpoint.\n\nHere's a guessed breakdown of what the actual \"##Returns\" section in Magic Labs embedded wallet documentation could describe:\n\n### Returns\n\nThe Returns section of the Magic Labs API documentation explains the structure and types of responses that an API endpoint may return. \n\n1. **MagicResponse**: This is the most likely description. A MagicResponse object represents the result of a request made to the Magic Labs API. It contains information about the status of the request, such as whether it was successful or not, and potentially any relevant error messages or data returned from the request.\n\nHowever, given this in itself isn't a clear enough description. Common items you might find in a \"##Returns\" section are examples of the data structure and potential attributes that the API may return after a successful or failed request and also what the Status field would be.\n\nFor instance if the API is used to create a new user profile via the embedded wallet \"##Returns\" section would be something like :\n\n### Returns\n\n#### Success\n\n*   **Status**: 201 (Created)\n*   **Data**:\n    *   **userId**: string (The ID of the newly created user)\n    *   **profilePicture**: string (The newly uploaded profile image URL)\n\n#### Failure\n*   **Status**: 400 (Bad Request)\n*   **Error**: string (Error message describing the reason for the request failure)\n\nOf course the actual structure might follow the Magic labs style which is why I'll now provide an updated response using the provided documentation URL.\n\nFrom the provided Magic Labs Laravel Server-side SDK's API Documentation. It seems it has no dedicated \"##Returns\" section that lists the possible responses of the API.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/laravel#chunk-34", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n#\n\nThere is only one response object that will be returned from a successful API call\n\n#\n\nThis is the interface to interact Magic API responses. It will only be returned if the API request status code is between 200 (inclusive) and 300 (exclusive).\n\nYou will have access to the following attributes:\n\n\u2022 content (Array): Raw content returned by the API response\n\n\u2022 status_code (num): HTTP status code for the given request\n\n\u2022 data (Array): Parsed content\n\ncontent\n\nstatus_code\n\ndata\n\nCopy\n\n01\n\nMagicResponse\n\n->\n\ncontent\n\n01\n\nMagicResponse\n\n->\n\ncontent\n\n02\n\nMagicResponse\n\n->\n\nstatus_code\n\n02\n\nMagicResponse\n\n->\n\nstatus_code\n\n03\n\nMagicResponse\n\n->\n\ndata\n\n03\n\nMagicResponse\n\n->\n\ndata", "explanation": "**Response and Error Handling - MagicResponse**\n\nThe MagicResponse is the interface to interact with Magic API responses. It is returned when a successful API call has a status code between 200 (inclusive) and 300 (exclusive).\n\n**Purpose:**\n\nThe main purpose of MagicResponse is to provide a standardized way to access and interact with the data and metadata of a successful API call.\n\n**Attributes:**\n\nA MagicResponse object has the following attributes:\n\n* **content (Array):** The raw content returned by the API response.\n* **status_code (num):** The HTTP status code for the given request.\n* **data (Array):** The parsed content of the API response.\n\nThese attributes provide a convenient way to access and work with the data returned by the Magic API.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/laravel#chunk-35", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nThe conventional HTTP response is adopted by the SDK. For the status code in :\n\n\u2022 2XX - Indicates success\n\n\u2022 4XX - Indicates client errors. Information provided to the SDK is invalid.\n\n\u2022 5XX - Indicates server errors\n\n2XX\n\n4XX\n\n5XX\n\nBelow is the error class inheritance which can help developers to programmatically handle the error cases.\n\nCopy\n\n01\n\nMagicException\n\n01\n\nMagicException\n\n02\n\n|\n\n02\n\n|\n\n03\n\n|------- DIDTokenException\n\n03\n\n|------- DIDTokenException\n\n04\n\n|\n\n04\n\n|\n\n05\n\n|------- RequestException\n\n05\n\n|------- RequestException\n\n06\n\n|\n\n06\n\n|\n\n07\n\n| ------- RateLimitingException\n\n07\n\n| ------- RateLimitingException\n\n08\n\n| ------- BadRequestException\n\n08\n\n| ------- BadRequestException\n\n09\n\n| ------- AuthenticationException\n\n09\n\n| ------- AuthenticationException\n\n10\n\n| ------- ForbiddenException\n\n10\n\n| ------- ForbiddenException\n\n11\n\n| ------- ApiException\n\n11\n\n| ------- ApiException\n\n12\n\n| ------- ApiConnectionException\n\n12\n\n| ------- ApiConnectionException\n\n#\n\nThis is the base class of all the Magic SDK errors.\n\nCopy\n\n01\n\nMagicException\n\n(\n\nmessage\n\n=\n\nnull\n\n)\n\n01\n\nMagicException\n\n(\n\nmessage\n\n=\n\nnull\n\n)", "explanation": "**MagicException and Error Handling in Magic Labs Embedded Wallet Documentation**\n\nThe provided documentation section explains the error handling mechanism used by the Magic Labs Embedded Wallet SDK. Here's a breakdown of the main purpose and key points:\n\n**Main Purpose:** \nThe main purpose of this section is to outline the error handling structure used by the Magic Labs Embedded Wallet SDK. It helps developers understand how to programmatically handle and troubleshoot errors that may occur during the integration process.\n\n**Key Points:**\n\n* **HTTP Status Codes:** The SDK follows the conventional HTTP response format, where:\n\n  - 2XX represents success\n  - 4XX indicates client errors (e.g., invalid information)\n  - 5XX indicates server errors\n* **Error Class Inheritance:** The error classes are organized in a hierarchical structure, inheriting from the base class `MagicException`. These classes include:\n\n  - `DIDTokenException`\n  - `RequestException`\n  - `RateLimitingException`\n  - `BadRequestException`\n  - `AuthenticationException`\n  - `ForbiddenException`\n  - `ApiException`\n  - `ApiConnectionException`\n* **MagicException Base Class:** The `MagicException` class is the base class for all Magic SDK errors. It takes a `message` parameter, which is initialized to `null`.\n\n**Benefits for Developers:**\nBy understanding the error handling structure and classes, developers can:\n\n* Easily identify and handle specific error cases\n* Manage error messages and exceptions programmatically\n* Troubleshoot integration issues more efficiently", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/laravel#chunk-36", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nAny DID Token related error. This can mean the given token is malformed or invalid.", "explanation": "**DIDTokenException Overview:**\n\nThe `DIDTokenException` is an error type defined in the Magic Labs embedded wallet documentation for Laravel. It represents any error that occurs when dealing with a Digital Identity (DID) Token, which is a secure token used for authentication and authorization purposes.\n\n**Purpose of DIDTokenException:**\n\nThe main purpose of the `DIDTokenException` is to handle any issues related to a DID Token. This can include situations where:\n\n* The token is malformed or invalid\n* The token is missing or corrupted\n* The token is has expired or is no longer valid\n* The token is not recognized or cannot be verified\n\nBy catching this exception, developers can handle DID Token-related errors and provide a better user experience by displaying meaningful error messages and taking corrective actions as needed.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/laravel#chunk-37", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nThis is the base class of all the Magic API request errors. This error class will provide details of unsuccessful API requests.\n\nCopy\n\n01\n\nRequestException\n\n(\n\n01\n\nRequestException\n\n(\n\n02\n\n$message\n\n=\n\nnull\n\n,\n\n02\n\n$message\n\n=\n\nnull\n\n,\n\n03\n\n$http_status\n\n=\n\nnull\n\n,\n\n03\n\n$http_status\n\n=\n\nnull\n\n,\n\n04\n\n$http_code\n\n=\n\nnull\n\n,\n\n04\n\n$http_code\n\n=\n\nnull\n\n,\n\n05\n\n$http_resp_data\n\n=\n\nnull\n\n,\n\n05\n\n$http_resp_data\n\n=\n\nnull\n\n,\n\n06\n\n$http_message\n\n=\n\nnull\n\n,\n\n06\n\n$http_message\n\n=\n\nnull\n\n,\n\n07\n\n$http_error_code\n\n=\n\nnull\n\n,\n\n07\n\n$http_error_code\n\n=\n\nnull\n\n,\n\n08\n\n$http_request_params\n\n=\n\nnull\n\n,\n\n08\n\n$http_request_params\n\n=\n\nnull\n\n,\n\n09\n\n$http_request_data\n\n=\n\nnull\n\n,\n\n09\n\n$http_request_data\n\n=\n\nnull\n\n,\n\n10\n\n$http_method\n\n=\n\nnull\n\n10\n\n$http_method\n\n=\n\nnull\n\n11\n\n)\n\n;\n\n11\n\n)\n\n;\n\nRateLimitingException\n\nBadRequestException\n\nAuthenticationException\n\nForbiddenException\n\nApiException\n\n500\n\n404\n\nApiConnectionException", "explanation": "**RequestException: A Base Class for Magic API Request Errors**\n\nThe `RequestException` is a base class that represents all type of errors that can occur when making API requests through the Magic Labs embedded wallet documentation. It provides details about the unsuccessful API requests made.\n\n**Main Purpose:**\n\nThe primary purpose of `RequestException` is to encapsulate error data related to API requests, including:\n\n1.  **Request Message**: A brief description of the error.\n2.  **HTTP Status Code**: The status code returned by the API server (e.g., 404, 500).\n3.  **HTTP Response Data**: Raw data received from the API server.\n4.  **HTTP Response Message**: A human-readable message describing the error.\n5.  **HTTP Error Code**: An additional error code provided by the API server.\n6.  **Request Parameters**: Any parameters passed with the API request.\n7.  **Request Data**: Raw data sent to the API server.\n\n**Inheritance and Extended Classes:**\n\nThe `RequestException` class serves as a base class for other more specific exceptions, such as:\n\n1.  `RateLimitingException`\n2.  `BadRequestException`\n3.  `AuthenticationException`\n4.  `ForbiddenException`\n5.  `ApiException`\n6.  `ApiConnectionException`\n\nThese extended classes inherit the error data properties from `RequestException` and may add specific properties unique to their error type.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/laravel#chunk-38", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 GitHub\n\n\u2022 Demo\n\nGitHub\n\nDemo", "explanation": "Based on the provided documentation link from Magic Link, the \"#Resources\" section appears to be a concise list of resources available to support the Magic Labs embedded wallet documentation for Laravel.\n\nHere's what each listed resource likely entails:\n\n- **GitHub**: This likely refers to the Magic Labs GitHub repository, where the source code for their embedded wallet SDK is hosted. This resource would be useful for developers who want to explore the codebase, contribute to the project, or extend the existing functionality of the wallet.\n\n- **Demo**: This is a live demonstration or a preview of the embedded wallet's functionality. A demo allows developers to interact with the wallet and gain a deeper understanding of its features and characteristics. This should help them better plan and implement the wallet into their Laravel application.\n\nThe main purpose of the \"#Resources\" section is to provide quick links or references to additional resources that can aid in implementing and customizing the Magic Labs embedded wallet within a Laravel-based application.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/laravel#chunk-39", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nTo interact with the Ethereum blockchain, Magic Unity SDK integrates Nethereum as sub dependency.", "explanation": "This documentation section explains that the Magic Labs Embedded Wallet uses Nethereum as a sub-dependency to interact with the Ethereum blockchain. The main purpose is to enable Unity developers to easily integrate their app with the Ethereum blockchain through the Magic Unity SDK.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/featured-chains/ethereum/unity#chunk-1", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nThe Magic class is the entry-point to the Magic SDK. It must be instantiated with a Magic publishable key.\n\nCopy\n\n01\n\nusing\n\nlink\n\n.\n\nmagic\n\n.\n\nunity\n\n.\n\nsdk\n\n;\n\n01\n\nusing\n\nlink\n\n.\n\nmagic\n\n.\n\nunity\n\n.\n\nsdk\n\n;\n\n02\n\nusing\n\nUnityEngine\n\n;\n\n02\n\nusing\n\nUnityEngine\n\n;\n\n03\n\n03\n\n04\n\npublic\n\nclass\n\nMagicUnity\n\n:\n\nMonoBehaviour\n\n04\n\npublic\n\nclass\n\nMagicUnity\n\n:\n\nMonoBehaviour\n\n05\n\n{\n\n05\n\n{\n\n06\n\n// Start is called before the first frame update\n\n06\n\n// Start is called before the first frame update\n\n07\n\nvoid\n\nStart\n\n(\n\n)\n\n07\n\nvoid\n\nStart\n\n(\n\n)\n\n08\n\n{\n\n08\n\n{\n\n09\n\nMagic\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n\"YOUR_PUBLISHABLE_KEY\"\n\n)\n\n;\n\n09\n\nMagic\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n\"YOUR_PUBLISHABLE_KEY\"\n\n)\n\n;\n\n10\n\nMagic\n\n.\n\nInstance\n\n=\n\nmagic\n\n;\n\n10\n\nMagic\n\n.\n\nInstance\n\n=\n\nmagic\n\n;\n\n11\n\n}\n\n11\n\n}\n\n12\n\n}\n\n12\n\n}", "explanation": "**Initialization Section Overview:**\n\nThe Initialization section is the starting point for implementing the Magic Labs embedded wallet in a Unity project. It provides a step-by-step guide on how to create and set up a Magic instance, which is essential for interacting withMagic's features, such as user authentication and payment processing.\n\n**Main Purpose:**\n\nThe primary purpose of the Initialization section is to enable developers to:\n\n1. Import the necessary Magic SDK assemblies.\n2. Create a new instance of the Magic class, which represents the entry-point to the Magic SDK.\n3. Configure the Magic instance by passing a publishable key, also known as an API key.\n4. Set the Magic instance as a singleton, making it accessible throughout the application.\n\n**Key Steps:**\n\n1. Import the Magic SDK assemblies using the `using` directive.\n2. Create a new class that inherits from `MonoBehaviour` (in this case, `MagicUnity`).\n3. In the `Start()` method, create a new instance of the Magic class, passing a publishable key as a parameter.\n4. Set the created Magic instance as a singleton using the `Instance` property.\n\n**Example:**\n\nIn the provided code snippet, a new class `MagicUnity` is created that inherits from `MonoBehaviour`. In the `Start()` method, a new instance of the Magic class is created with a publishable key (`\"YOUR_PUBLISHABLE_KEY\"`), and then set as a singleton using the `Instance` property.\n\n**Best Practice:**\n\nRemember to replace `\"YOUR_PUBLISHABLE_KEY\"` with your actual publishable key obtained from the Magic Labs dashboard. This key is required for initializing the Magic instance and interacting with its features.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/featured-chains/ethereum/unity#chunk-2", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n#\n\nGoerli Block Explorer: https://goerli.etherscan.io\n\nhttps://goerli.etherscan.io\n\n\u2060Goerli Testnet Faucet: https://goerlifaucet.com\n\nhttps://goerlifaucet.com\n\nCopy\n\n01\n\nMagic\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n\"YOUR_PUBLISHABLE_KEY\"\n\n,\n\nEthNetwork\n\n.\n\nGoerli\n\n)\n\n;\n\n01\n\nMagic\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n\"YOUR_PUBLISHABLE_KEY\"\n\n,\n\nEthNetwork\n\n.\n\nGoerli\n\n)\n\n;", "explanation": "**Explanation of the 'Use Different Networks - #Testnet' Documentation Section:**\n\nThis documentation section guides users on how to use Ethereum's Goerli testnet with the Magic Labs embedded wallet on Unity. The Goerli network is a testnet Ethereum network, allowing developers to test and refine their applications without affecting the main Ethereum network.\n\n**Main Purpose:**\n\nThe main purpose of this section is to provide the necessary code and resources for users to switch between the Goerli testnet and the main Ethereum network using the Magic Labs embedded wallet. This is especially useful for developers who want to test their Ethereum-based applications in a secure and controlled environment.\n\n**Key Points:**\n\n- It includes links to the Goerli Block Explorer, which helps users monitor their testnet transactions.\n- It provides a link to the Goerli Testnet Faucet, which allows users to obtain testnet Ether (ETH) for testing purposes.\n- It provides two code examples, which demonstrate how to create a Magic object for the Goerli testnet. \n\n**Example Context:**\n\nTo use this example, you would need to replace `'YOUR_PUBLISHABLE_KEY'` with your actual Magic Publishable API key. This will enable you to connect to the Goerli testnet using the Magic Labs embedded wallet.\n\nBy following this section, developers can easily switch between the main Ethereum network and the Goerli testnet using the Magic Labs embedded wallet, allowing for efficient testing and development of their Ethereum-based applications.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/featured-chains/ethereum/unity#chunk-3", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nYou can allow specific URLs to interact with the Magic SDK, such as a custom RPC URL to send transactions to your node. The Content Security Policy (CSP) of a browser dictates what resources can be loaded. If you're used a dedicated wallet, you can update the policy in the settings page of the dashboard with your custom URL. If you're using a universal wallet, please reach out to support to get your URL added.\n\nNote: the use of a custom node will require the RPC URL to the project's Content Security Policy from your Magic dashboard. Refer to the CSP documentation.\n\nMagic dashboard\n\nCSP documentation\n\nCopy\n\n01\n\nvar\n\nconfig\n\n=\n\nnew\n\nCustomNodeConfiguration\n\n(\n\nrpcUrl\n\n:\n\n\"https://alchemy.io\"\n\n)\n\n01\n\nvar\n\nconfig\n\n=\n\nnew\n\nCustomNodeConfiguration\n\n(\n\nrpcUrl\n\n:\n\n\"https://alchemy.io\"\n\n)\n\n02\n\nMagic\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n\"YOUR_PUBLISHABLE_KEY\"\n\n,\n\nconfig\n\n)\n\n;\n\n02\n\nMagic\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n\"YOUR_PUBLISHABLE_KEY\"\n\n,\n\nconfig\n\n)\n\n;\n\nDo not set the custom nodes to local IP address (E.x. \"http://127.0.0.1\"\\), because local IP will point to the network environment inside mobile device / simulator. Try accessible IP address in the same Wifi/Internet Environment (E.x. \"http://10.0.0.93:3000\"\\)\n\nhttp://127.0.0.1\"\\\n\nhttp://10.0.0.93:3000\"\\\n\n#\n\nCustomNodeConfiguration(rpcUrl: String, chainId: Int?)\n\nCustomNodeConfiguration(rpcUrl: String, chainId: Int?)\n\n\u2022 rpcUrl :Your own node URL\n\n\u2022 chainId : Your own node's chainId\n\nrpcUrl\n\nchainId\n\nMagic.EthNetwork\n\nMagic.EthNetwork\n\nCopy\n\n01\n\nenum\n\nclass\n\nEthNetwork\n\n{\n\n01\n\nenum\n\nclass\n\nEthNetwork\n\n{\n\n02\n\nMainnet\n\n,\n\nGoerli\n\n02\n\nMainnet\n\n,\n\nGoerli\n\n03\n\n}\n\n03\n\n}", "explanation": "**Custom Node - Associated Class**\n\nThe Custom Node is a feature in Magic Labs' embedded wallet that allows developers to connect their own node URL to the Magic SDK, enabling interaction with a custom RPC (Remote Procedure Call) server.\n\n**Main Purpose:**\n\nThe primary purpose of a Custom Node is to:\n\n* Allow users to send transactions to a custom node, rather than the default network.\n* Enable interaction with a custom RPC server for specific use cases, such as testing or development environments.\n* Provide more control over the wallet's behavior and security settings.\n\n**Key Points:**\n\n1. **Custom RPC URL**: Users can specify a custom RPC URL, which should be an accessible IP address within the same Wi-Fi/Internet environment.\n2. **Chain ID**: Users can specify a custom Chain ID for their node, which identifies the specific Ethereum network being used.\n3. **Security**: The Custom Node configuration is stored in the Magic dashboard, and users should update the Content Security Policy (CSP) to allow interaction with the custom node.\n\n**Example Usage:**\n\nTo create a Custom Node, developers can use the `CustomNodeConfiguration` class, passing in the `rpcUrl` and `chainId` parameters. For example:\n```swift\nvar config = new CustomNodeConfiguration(\n  rpcUrl: \"https://alchemy.io\",\n  chainId: 1 // Mainnet Chain ID\n);\n```\nBy using a Custom Node, developers can provide a more tailored experience for their users and integrate additional features or security controls into their wallet application.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/featured-chains/ethereum/unity#chunk-4", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nThere are two ways to set the wallet provider to Magic in Nethereum\n\n1. Construct an ethApiService and pass Magic provider to it\n\nCopy\n\n01\n\nvar\n\nethApiService\n\n=\n\nnew\n\nEthApiService\n\n(\n\nMagic\n\n.\n\nInstance\n\n.\n\nProvider\n\n)\n\n;\n\n01\n\nvar\n\nethApiService\n\n=\n\nnew\n\nEthApiService\n\n(\n\nMagic\n\n.\n\nInstance\n\n.\n\nProvider\n\n)\n\n;\n\n02\n\nvar\n\naccounts\n\n=\n\nawait\n\nethApiService\n\n.\n\nAccounts\n\n.\n\nSendRequestAsync\n\n(\n\n)\n\n;\n\n02\n\nvar\n\naccounts\n\n=\n\nawait\n\nethApiService\n\n.\n\nAccounts\n\n.\n\nSendRequestAsync\n\n(\n\n)\n\n;\n\n03\n\nvar\n\nbalance\n\n=\n\nawait\n\nethApiService\n\n.\n\nGetBalance\n\n.\n\nSendRequestAsync\n\n(\n\naccounts\n\n[\n\n0\n\n]\n\n)\n\n;\n\n03\n\nvar\n\nbalance\n\n=\n\nawait\n\nethApiService\n\n.\n\nGetBalance\n\n.\n\nSendRequestAsync\n\n(\n\naccounts\n\n[\n\n0\n\n]\n\n)\n\n;\n\n2. By directly passing Magic provider to each of the Nethereum RPC methods\n\nCopy\n\n01\n\nvar\n\nethAccounts\n\n=\n\nnew\n\nEthAccounts\n\n(\n\nMagic\n\n.\n\nInstance\n\n.\n\nProvider\n\n)\n\n;\n\n01\n\nvar\n\nethAccounts\n\n=\n\nnew\n\nEthAccounts\n\n(\n\nMagic\n\n.\n\nInstance\n\n.\n\nProvider\n\n)\n\n;\n\n02\n\nvar\n\naccounts\n\n=\n\nawait\n\nethAccounts\n\n.\n\nSendRequestAsync\n\n(\n\n)\n\n;\n\n02\n\nvar\n\naccounts\n\n=\n\nawait\n\nethAccounts\n\n.\n\nSendRequestAsync\n\n(\n\n)\n\n;", "explanation": "**# Nethereum**\n\n**Overview:**\nNethereum is an open-source Ethereum library for .NET that allows developers to interact with the Ethereum blockchain. In the context of Magic Labs embedded wallet documentation, Nethereum is used to access Ethereum functionality.\n\n**Main Purpose:**\nThe main purpose of Nethereum is to enable communication between a .NET application and the Ethereum blockchain. It provides a set of APIs that allow developers to send and receive transactions, get balances, and access account information.\n\n**Usage in Magic Labs:** \nIn the Magic Labs documentation, Nethereum is used to demonstrate how to set up a wallet provider to interact with the Ethereum blockchain. The documentation provides two methods to set up the wallet provider:\n\n1. **Constructing an ethApiService:** This method involves creating an `EthApiService` instance and passing the Magic provider to it. This allows access to Ethereum APIs, such as getting accounts and balances.\n2. **Directly passing Magic provider to Nethereum RPC methods:** This method involves directly passing the Magic provider to each of the Nethereum RPC methods, such as `EthAccounts`. This approach is more specific and direct, but achieves the same result as the first method.\n\nIn both cases, the Magic Labs embedded wallet is used as the provider, allowing for secure and seamless integration with the Ethereum blockchain.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/featured-chains/ethereum/unity#chunk-5", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n#\n\nCopy\n\n01\n\npublic\n\nclass\n\nMagicUnityButton\n\n:\n\nMonoBehaviour\n\n01\n\npublic\n\nclass\n\nMagicUnityButton\n\n:\n\nMonoBehaviour\n\n02\n\n\u2060\n\n{\n\n02\n\n\u2060\n\n{\n\n03\n\npublic\n\nasync\n\nvoid\n\nSendTransaction\n\n(\n\n)\n\n03\n\npublic\n\nasync\n\nvoid\n\nSendTransaction\n\n(\n\n)\n\n04\n\n{\n\n04\n\n{\n\n05\n\n// \u2b50\ufe0f After user is successfully authenticated\n\n05\n\n// \u2b50\ufe0f After user is successfully authenticated\n\n06\n\nvar\n\nethAccounts\n\n=\n\nnew\n\nEthAccounts\n\n(\n\nMagic\n\n.\n\nInstance\n\n.\n\nProvider\n\n)\n\n;\n\n06\n\nvar\n\nethAccounts\n\n=\n\nnew\n\nEthAccounts\n\n(\n\nMagic\n\n.\n\nInstance\n\n.\n\nProvider\n\n)\n\n;\n\n07\n\nvar\n\naccounts\n\n=\n\nawait\n\nethAccounts\n\n.\n\nSendRequestAsync\n\n(\n\n)\n\n;\n\n07\n\nvar\n\naccounts\n\n=\n\nawait\n\nethAccounts\n\n.\n\nSendRequestAsync\n\n(\n\n)\n\n;\n\n08\n\n08\n\n09\n\n// Construct a transaction\n\n09\n\n// Construct a transaction\n\n10\n\nvar\n\ntransaction\n\n=\n\nnew\n\nEthSendTransaction\n\n(\n\nMagic\n\n.\n\nInstance\n\n.\n\nProvider\n\n)\n\n;\n\n10\n\nvar\n\ntransaction\n\n=\n\nnew\n\nEthSendTransaction\n\n(\n\nMagic\n\n.\n\nInstance\n\n.\n\nProvider\n\n)\n\n;\n\n11\n\nvar\n\ntransactionInput\n\n=\n\nnew\n\nTransactionInput\n\n11\n\nvar\n\ntransactionInput\n\n=\n\nnew\n\nTransactionInput\n\n12\n\n{\n\nTo\n\n=\n\naccounts\n\n[\n\n0\n\n]\n\n,\n\nValue\n\n=\n\nnew\n\nHexBigInteger\n\n(\n\n10\n\n)\n\n,\n\nFrom\n\n=\n\naccounts\n\n[\n\n0\n\n]\n\n}\n\n;\n\n12\n\n{\n\nTo\n\n=\n\naccounts\n\n[\n\n0\n\n]\n\n,\n\nValue\n\n=\n\nnew\n\nHexBigInteger\n\n(\n\n10\n\n)\n\n,\n\nFrom\n\n=\n\naccounts\n\n[\n\n0\n\n]\n\n}\n\n;\n\n13\n\n\u2060\n\n13\n\n\u2060\n\n14\n\n// Send the transaction\n\n14\n\n// Send the transaction\n\n15\n\nvar\n\nhash\n\n=\n\nawait\n\ntransaction\n\n.\n\nSendRequestAsync\n\n(\n\ntransactionInput\n\n)\n\n;\n\n15\n\nvar\n\nhash\n\n=\n\nawait\n\ntransaction\n\n.\n\nSendRequestAsync\n\n(\n\ntransactionInput\n\n)\n\n;\n\n16\n\nDebug\n\n.\n\nLog\n\n(\n\nhash\n\n)\n\n;\n\n16\n\nDebug\n\n.\n\nLog\n\n(\n\nhash\n\n)\n\n;\n\n17\n\n}\n\n17\n\n}\n\n18\n\n}\n\n18\n\n}", "explanation": "**Send Transaction Method Explanation**\n\nThe `SendTransaction` method is a common function in the Magic Labs embedded wallet documentation, specifically in the Ethereum Unity implementation. Its main purpose is to send a transaction from a user's Ethereum account to another recipient.\n\n**Step-by-Step Breakdown:**\n\n1. **Authentication**: The method first requests user authentication through their Magic account.\n2. **Retrieve Accounts**: It creates an `EthAccounts` instance and uses the `SendRequestAsync` method to retrieve a list of Ethereum accounts associated with the user's Magic account.\n3. **Construct Transaction**: It creates an `EthSendTransaction` instance and sets the transaction properties, including the recipient address (`To`), transaction value (`Value`), and the sender's address (`From`), which is the same as the recipient's address in this example.\n4. **Send Transaction**: It uses the `SendRequestAsync` method to send the transaction and retrieves the transaction hash, which is logged to the console for verification.\n\n**Key Points:**\n\n* The `SendTransaction` method relies on the Magic embedded wallet SDK to authenticate the user and retrieve their Ethereum accounts.\n* The transaction is constructed with hard-coded recipient and sender addresses, as well as a fixed transaction value.\n* The `SendRequestAsync` method is used to send the transaction and retrieve the transaction hash.\n\nIn summary, the `SendTransaction` method is a crucial function in the Magic Labs embedded wallet implementation, enabling users to send transactions to other Ethereum addresses.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/featured-chains/ethereum/unity#chunk-6", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\npublic\n\nclass\n\nMagicUnityButton\n\n:\n\nMonoBehaviour\n\n01\n\npublic\n\nclass\n\nMagicUnityButton\n\n:\n\nMonoBehaviour\n\n02\n\n\u2060\n\n{\n\n02\n\n\u2060\n\n{\n\n03\n\npublic\n\nasync\n\nvoid\n\nEthSign\n\n(\n\n)\n\n03\n\npublic\n\nasync\n\nvoid\n\nEthSign\n\n(\n\n)\n\n04\n\n{\n\n04\n\n{\n\n05\n\n// \u2b50\ufe0f After user is successfully authenticated\n\n05\n\n// \u2b50\ufe0f After user is successfully authenticated\n\n06\n\nvar\n\nethAccounts\n\n=\n\nnew\n\nEthAccounts\n\n(\n\nMagic\n\n.\n\nInstance\n\n.\n\nProvider\n\n)\n\n;\n\n06\n\nvar\n\nethAccounts\n\n=\n\nnew\n\nEthAccounts\n\n(\n\nMagic\n\n.\n\nInstance\n\n.\n\nProvider\n\n)\n\n;\n\n07\n\nvar\n\naccounts\n\n=\n\nawait\n\nethAccounts\n\n.\n\nSendRequestAsync\n\n(\n\n)\n\n;\n\n07\n\nvar\n\naccounts\n\n=\n\nawait\n\nethAccounts\n\n.\n\nSendRequestAsync\n\n(\n\n)\n\n;\n\n08\n\nvar\n\nethSign\n\n=\n\nnew\n\nEthSign\n\n(\n\nMagic\n\n.\n\nInstance\n\n.\n\nProvider\n\n)\n\n;\n\n08\n\nvar\n\nethSign\n\n=\n\nnew\n\nEthSign\n\n(\n\nMagic\n\n.\n\nInstance\n\n.\n\nProvider\n\n)\n\n;\n\n09\n\nvar\n\nsignedResult\n\n=\n\nawait\n\nethSign\n\n.\n\nSendRequestAsync\n\n(\n\naccounts\n\n[\n\n0\n\n]\n\n,\n\n\"hello world\"\n\n)\n\n;\n\n09\n\nvar\n\nsignedResult\n\n=\n\nawait\n\nethSign\n\n.\n\nSendRequestAsync\n\n(\n\naccounts\n\n[\n\n0\n\n]\n\n,\n\n\"hello world\"\n\n)\n\n;\n\n10\n\nDebug\n\n.\n\nLog\n\n(\n\nsignedResult\n\n)\n\n;\n\n10\n\nDebug\n\n.\n\nLog\n\n(\n\nsignedResult\n\n)\n\n;\n\n11\n\n}\n\n11\n\n}\n\n12\n\n}\n\n12\n\n}", "explanation": "**Explanation of '#Sign Message' Section**\n\nThe '#Sign Message' section is a documentation part that explains how to sign a message using the Magic Unity SDK. This section includes code snippets that demonstrate how to accomplish this using the `MagicUnityButton` class and its `EthSign` method.\n\n**Main Purpose**\n\nThe primary purpose of this section is to provide an example of how to use the Magic Unity SDK to:\n\n1. Authenticate a user\n2. Get the user's Ethereum accounts\n3. Create an `EthSign` object\n4. Use the `EthSign` object to sign a message\n\nThe main purpose is to give developers a starting point for integrating the Magic Unity SDK into their Unity applications and enabling users to sign messages securely.\n\n**Key Points**\n\n* The code snippet uses the `MagicUnityButton` class to handle user authentication and retrieve Ethereum accounts.\n* The `EthSign` method is used to sign a message, which requires the user to be authenticated and the Ethereum accounts to be retrieved.\n* The `SendRequestAsync` method is used to send a request to the Magic API to sign the message.\n* The signed result is logged to the console using `Debug.Log`.\n\nBy following this section, developers can implement the same functionality in their Unity applications and provide users with a secure way to sign messages.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/featured-chains/ethereum/unity#chunk-7", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\npublic\n\nclass\n\nMagicUnityButton\n\n:\n\nMonoBehaviour\n\n01\n\npublic\n\nclass\n\nMagicUnityButton\n\n:\n\nMonoBehaviour\n\n02\n\n\u2060\n\n{\n\n02\n\n\u2060\n\n{\n\n03\n\npublic\n\nasync\n\nvoid\n\nLogin\n\n(\n\n)\n\n03\n\npublic\n\nasync\n\nvoid\n\nLogin\n\n(\n\n)\n\n04\n\n{\n\n04\n\n{\n\n05\n\n// \u2b50\ufe0f After user is successfully authenticated\n\n05\n\n// \u2b50\ufe0f After user is successfully authenticated\n\n06\n\nvar\n\nethApiService\n\n=\n\nnew\n\nEthApiService\n\n(\n\nMagic\n\n.\n\nInstance\n\n.\n\nProvider\n\n)\n\n;\n\n06\n\nvar\n\nethApiService\n\n=\n\nnew\n\nEthApiService\n\n(\n\nMagic\n\n.\n\nInstance\n\n.\n\nProvider\n\n)\n\n;\n\n07\n\nvar\n\naccounts\n\n=\n\nawait\n\nethApiService\n\n.\n\nAccounts\n\n.\n\nSendRequestAsync\n\n(\n\n)\n\n;\n\n07\n\nvar\n\naccounts\n\n=\n\nawait\n\nethApiService\n\n.\n\nAccounts\n\n.\n\nSendRequestAsync\n\n(\n\n)\n\n;\n\n08\n\nDebug\n\n.\n\nLog\n\n(\n\n$\"token\n\n{\n\ntoken\n\n}\n\n\"\n\n)\n\n;\n\n08\n\nDebug\n\n.\n\nLog\n\n(\n\n$\"token\n\n{\n\ntoken\n\n}\n\n\"\n\n)\n\n;\n\n09\n\n}\n\n09\n\n}\n\n10\n\n}\n\n10\n\n}", "explanation": "The provided documentation snippet is related to the Magic Labs embedded wallet for Unity, a popular game engine for creating 3D and 2D games.\n\n**# Get User Info**\n\nThe `Get User Info` section is about retrieving information about a user after they have successfully authenticated using the Magic Labs embedded wallet.\n\n**Main Purpose:**\nThe main purpose of this feature is to collect the user's Ethereum (ETH) account addresses and display a debug message in the Unity editor with the users `token`.\n\nHere's a step-by-step breakdown:\n\n1. It instantiates an `EthApiService` object, which is used to interact with the Ethereum API.\n2. It calls the `Accounts.SendRequestAsync` method to retrieve the user's Ethereum account addresses.\n3. It logs a debug message in the Unity editor with the user's token information.\n\nOnce the user is successfully authenticated, this code will retrieve their Ethereum account addresses and display a debug message containing their token, which can be used to identify the user or for other purposes in the application.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/featured-chains/ethereum/unity#chunk-8", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 Magic Unity SDK\n\nMagic Unity SDK", "explanation": "The section titled '#Resources' from the documentation URL provided is about the available resources that can be utilized in conjunction with the Magic Labs Embedded Wallet for Unity development.\n\nThe main purpose of this section is to provide a central location for developers to access relevant and related materials, such as software development kits (SDKs), that can aid in the integration of the Magic Labs Embedded Wallet into their Unity projects. \n\nBy listing resources directly in this section, Magic Labs makes it easier for Unity developers to:\n\n*   Get started with the Magic Labs Embedded Wallet\n*   Find support for their specific development needs\n*   Utilize community-provided solutions and existing frameworks\n\nThe specific example given is the Magic Unity SDK. This SDK provides a set of tools and guidelines for integrating the Magic Labs Embedded Wallet into Unity projects, making it easier to develop secure, wallet-enabled applications.\n\nBy referencing this section in the documentation, Magic Labs encourages developers to leverage the available resources and take advantage of the community-driven ecosystem that surrounds their Embedded Wallet. This not only facilitates successful integration but also fosters a collaborative environment among developers.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/featured-chains/ethereum/unity#chunk-9", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nHarmony (ONE) blockchain is an L2 blockchain platform built on the Ethereum network, making it easier for developers to create decentralized apps.\n\nHarmony\n\nAs Harmony is EVM compatible, you can follow the Ethereum documentation to send your first transaction and utilize all other wallet features.\n\nEthereum", "explanation": "Based on the provided documentation, here is a clear and concise explanation of the \"Harmony - Harmony - #Overview\" section:\n\n**Overview of Harmony:**\n\nThe Harmony (ONE) blockchain is a layer 2 (L2) platform built on top of the Ethereum network. This platform is designed to facilitate the creation of Decentralized Applications (dApps) for developers.\n\n**Main Purpose:**\n\nIts main purpose is to provide an EVM (Ethereum Virtual Machine) compatible platform, allowing users to leverage the Ethereum framework and documentation to:\n\n1. Send their first transactions.\n2. Utilize other wallet features.\n\nIn essence, this section informs users that the Harmony platform is an extension of the Ethereum ecosystem, enabling users to seamlessly interact with it using Ethereum guidelines and tools.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/evm/harmony#chunk-1", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nMagic interacts with the Harmony blockchain via Magic's extension NPM package @magic-ext/harmony. The Harmony extension also lets you interact with the blockchain using methods from Harmony's Javascript SDK.\n\nHarmony\n\n@magic-ext/harmony\n\n@magic-ext/harmony\n\nHarmony's Javascript SDK\n\nCopy\n\n01\n\nnpm\n\ninstall\n\n--save @magic-ext/harmony\n\n01\n\nnpm\n\ninstall\n\n--save @magic-ext/harmony", "explanation": "**Installation Overview**\n\nThis documentation section explains how to install the necessary packages to interact with the Harmony blockchain using Magic Labs' embedded wallet.\n\n**Main Purpose**\n\nThe main purpose of this section is to guide developers through the process of installing the required packages to access the Harmony blockchain using Magic Labs' extension package `@magic-ext/harmony`.\n\n**Required Packages**\n\nTo achieve this, the section outlines the installation of the following packages:\n\n1. `@magic-ext/harmony` (Magic Labs' Harmony extension package)\n2. `@magic-ext/harmony` (optional, but included for emphasis)\n3. Harmony's Javascript SDK ( Harmony's official SDK for interacting with the blockchain in JavaScript)\n\n**Installation Steps**\n\nThe section provides step-by-step instructions using the `npm install` command to save the packages as dependencies in the project:\n\n1. Run `npm install --save @magic-ext/harmony` to install the Harmony extension package.\n\nBy following these steps, developers can set up their environment to work with the Harmony blockchain using Magic Labs' embedded wallet and Harmony's official SDK.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/evm/harmony#chunk-2", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\nimport\n\n{\n\nHarmonyExtension\n\n}\n\nfrom\n\n'@magic-ext/harmony'\n\n;\n\n02\n\nimport\n\n{\n\nHarmonyExtension\n\n}\n\nfrom\n\n'@magic-ext/harmony'\n\n;\n\n03\n\nconst\n\n{\n\nHarmony\n\n:\n\nIndex\n\n}\n\n=\n\nrequire\n\n(\n\n'@harmony-js/core'\n\n)\n\n;\n\n03\n\nconst\n\n{\n\nHarmony\n\n:\n\nIndex\n\n}\n\n=\n\nrequire\n\n(\n\n'@harmony-js/core'\n\n)\n\n;\n\n04\n\nconst\n\n{\n\nChainID\n\n,\n\nChainType\n\n}\n\n=\n\nrequire\n\n(\n\n'@harmony-js/utils'\n\n)\n\n;\n\n04\n\nconst\n\n{\n\nChainID\n\n,\n\nChainType\n\n}\n\n=\n\nrequire\n\n(\n\n'@harmony-js/utils'\n\n)\n\n;\n\n05\n\n05\n\n06\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_API_KEY'\n\n,\n\n{\n\n06\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_API_KEY'\n\n,\n\n{\n\n07\n\nextensions\n\n:\n\n[\n\n07\n\nextensions\n\n:\n\n[\n\n08\n\nnew\n\nHarmonyExtension\n\n(\n\n{\n\n08\n\nnew\n\nHarmonyExtension\n\n(\n\n{\n\n09\n\nrpcUrl\n\n:\n\n'https://api.s0.b.hmny.io'\n\n,\n\n09\n\nrpcUrl\n\n:\n\n'https://api.s0.b.hmny.io'\n\n,\n\n10\n\nchainId\n\n:\n\nChainID\n\n.\n\nHmyTestnet\n\n,\n\n10\n\nchainId\n\n:\n\nChainID\n\n.\n\nHmyTestnet\n\n,\n\n11\n\n}\n\n)\n\n,\n\n11\n\n}\n\n)\n\n,\n\n12\n\n]\n\n,\n\n12\n\n]\n\n,\n\n13\n\n}\n\n)\n\n;\n\n13\n\n}\n\n)\n\n;", "explanation": "**Configuring Harmony Chain Integration with Magic Labs Embedded Wallet**\n\nThis documentation section explains how to integrate the Harmony blockchain with the Magic Labs embedded wallet. The main purpose is to enable seamless interactions between the wallet and the Harmony network.\n\n**Key Steps:**\n\n1. **Import necessary modules**: The code imports the Magic Labs SDK, Harmony Extension, Harmony core library, and Harmony utility library.\n2. **Require Harmony core and utility libraries**: The code requires the `@harmony-js/core` and `@harmony-js/utils` modules to access Harmony-specific functionality.\n3. **Create a new `Magic` instance**: The code creates a new instance of the `Magic` class, passing in an API key and an options object that includes the `extensions` property.\n4. **Add Harmony Extension to the Magic instance**: The code creates a new instance of the `HarmonyExtension` class and adds it to the `extensions` array of the `Magic` instance.\n5. **Configure Harmony Extension**: The code sets the RPC URL, chain ID, and other parameters for the Harmony Extension.\n\n**Main Purpose:**\n\nThe main purpose of this code is to enable the Magic Labs embedded wallet to interact with the Harmony blockchain seamlessly. This includes features like checking balances, sending transactions, and more. By integrating the Harmony Extension with the Magic Labs SDK, developers can build applications that support Harmony-based tokens and use cases.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/evm/harmony#chunk-3", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n#\n\nBefore you can send transaction on the Harmony blockchain, you'll need to acquire some test ONE token (Harmony's native cryptocurrency for test network).\n\n\u2022 Go to our Harmony Example application\n\n\u2022 Login with your email address\n\n\u2022 Copy your Harmony public address\n\n\u2022 Go to the Harmony Faucet\n\n\u2022 Paste your copied Harmony public address in the text input\n\n\u2022 Now you can use your test ONE token in our example app\n\nHarmony Example\n\nHarmony Faucet\n\nexample app", "explanation": "**Section Overview: Obtaining Test ONE Tokens for the Harmony Blockchain**\n\nThis documentation section, \"#Send Transaction - #Getting Test ONE token\", explains the steps to acquire test ONE tokens for the Harmony blockchain. These test tokens are required to send transactions on the Harmony test network. \n\n**Main Purpose:**\nThe main purpose of this section is to guide users through the process of obtaining free test ONE tokens for use in the Harmony Example application, specifically for testing transactions on the Harmony blockchain.\n\nTo summarize, this section explains how to:\n\n1. Log in to the Harmony Example application.\n2. Obtain a test ONE token by using the Harmony Faucet website.\n3. Successfully use the test token in the Harmony Example application.\n\nBy following these steps, users can practice sending transactions on the Harmony test network without incurring any actual costs or risks.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/evm/harmony#chunk-4", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nNote that the Magic Harmony extension follows the method names and conventions by Harmony's Javascript SDK. To send a standard Harmony blockchain transaction, you can call the magic.harmony.sendTransaction method.\n\nHarmony's Javascript SDK\n\nmagic.harmony.sendTransaction\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\nimport\n\n{\n\nHarmonyExtension\n\n}\n\nfrom\n\n'@magic-ext/harmony'\n\n;\n\n02\n\nimport\n\n{\n\nHarmonyExtension\n\n}\n\nfrom\n\n'@magic-ext/harmony'\n\n;\n\n03\n\nconst\n\n{\n\nHarmony\n\n:\n\nIndex\n\n}\n\n=\n\nrequire\n\n(\n\n'@harmony-js/core'\n\n)\n\n;\n\n03\n\nconst\n\n{\n\nHarmony\n\n:\n\nIndex\n\n}\n\n=\n\nrequire\n\n(\n\n'@harmony-js/core'\n\n)\n\n;\n\n04\n\nconst\n\n{\n\nChainID\n\n,\n\nChainType\n\n}\n\n=\n\nrequire\n\n(\n\n'@harmony-js/utils'\n\n)\n\n;\n\n04\n\nconst\n\n{\n\nChainID\n\n,\n\nChainType\n\n}\n\n=\n\nrequire\n\n(\n\n'@harmony-js/utils'\n\n)\n\n;\n\n05\n\n05\n\n06\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_API_KEY'\n\n,\n\n{\n\n06\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_API_KEY'\n\n,\n\n{\n\n07\n\nextensions\n\n:\n\n[\n\n07\n\nextensions\n\n:\n\n[\n\n08\n\nnew\n\nHarmonyExtension\n\n(\n\n{\n\n08\n\nnew\n\nHarmonyExtension\n\n(\n\n{\n\n09\n\nrpcUrl\n\n:\n\n'https://api.s0.b.hmny.io'\n\n,\n\n09\n\nrpcUrl\n\n:\n\n'https://api.s0.b.hmny.io'\n\n,\n\n10\n\nchainId\n\n:\n\nChainID\n\n.\n\nHmyTestnet\n\n,\n\n10\n\nchainId\n\n:\n\nChainID\n\n.\n\nHmyTestnet\n\n,\n\n11\n\n}\n\n)\n\n,\n\n11\n\n}\n\n)\n\n,\n\n12\n\n]\n\n,\n\n12\n\n]\n\n,\n\n13\n\n}\n\n)\n\n;\n\n13\n\n}\n\n)\n\n;\n\n14\n\n14\n\n15\n\nconst\n\nparams\n\n=\n\n{\n\n15\n\nconst\n\nparams\n\n=\n\n{\n\n16\n\n//  token send to\n\n16\n\n// token send to\n\n17\n\nto\n\n:\n\n'one1jzxhswufkh7wgyq7s49u3rvp9vlts8wcwsq8y2'\n\n,\n\n17\n\nto\n\n:\n\n'one1jzxhswufkh7wgyq7s49u3rvp9vlts8wcwsq8y2'\n\n,\n\n18\n\n// amount to send\n\n18\n\n// amount to send\n\n19\n\nvalue\n\n:\n\n'50000'\n\n,\n\n19\n\nvalue\n\n:\n\n'50000'\n\n,\n\n20\n\n// gas limit, you can use string\n\n20\n\n// gas limit, you can use string\n\n21\n\ngasLimit\n\n:\n\n'210000'\n\n,\n\n21\n\ngasLimit\n\n:\n\n'210000'\n\n,\n\n22\n\n// send token from shardID\n\n22\n\n// send token from shardID\n\n23\n\nshardID\n\n:\n\n0\n\n,\n\n23\n\nshardID\n\n:\n\n0\n\n,\n\n24\n\n// send token to toShardID\n\n24\n\n// send token to toShardID\n\n25\n\ntoShardID\n\n:\n\n0\n\n,\n\n25\n\ntoShardID\n\n:\n\n0\n\n,\n\n26\n\n// gas Price, you can use Unit class, and use Gwei, then remember to use toWei(), which will be transformed to BN\n\n26\n\n// gas Price, you can use Unit class, and use Gwei, then remember to use toWei(), which will be transformed to BN\n\n27\n\ngasPrice\n\n:\n\n1000000000\n\n,\n\n27\n\ngasPrice\n\n:\n\n1000000000\n\n,\n\n28\n\n}\n\n;\n\n28\n\n}\n\n;\n\n29\n\n29\n\n30\n\nconst\n\ntxHash\n\n=\n\nawait\n\nmagic\n\n.\n\nharmony\n\n.\n\nsendTransaction\n\n(\n\nparams\n\n)\n\n;\n\n30\n\nconst\n\ntxHash\n\n=\n\nawait\n\nmagic\n\n.\n\nharmony\n\n.\n\nsendTransaction\n\n(\n\nparams\n\n)\n\n;\n\n31\n\n31\n\n32\n\nconsole\n\n.\n\nlog\n\n(\n\n'transaction hash'\n\n,\n\ntxHash\n\n)\n\n;\n\n32\n\nconsole\n\n.\n\nlog\n\n(\n\n'transaction hash'\n\n,\n\ntxHash\n\n)\n\n;", "explanation": "**Explanation of the Documentation Section:**\n\nThis documentation section is titled '#Call Extension Method - ES Modules/TypeScript' and it explains how to send a standard Harmony blockchain transaction using the Magic Harmony extension. The main purpose of this section is to provide a step-by-step guide on how to import the necessary modules, set up the Magic Harmony extension, and use its `sendTransaction` method to send a transaction on the Harmony blockchain.\n\n**Key Components:**\n\n1. **Importing Modules:** The section starts by importing the necessary modules from various JavaScript libraries, including `magic-sdk`, `@magic-ext/harmony`, `@harmony-js/core`, and `@harmony-js/utils`.\n2. **Setting up the Magic Harmony Extension:** The section explains how to create an instance of the Magic Harmony extension using the `Magic` class and the `HarmonyExtension` class.\n3. **Configuring the Harmony Blockchain Connection:** The section shows how to configure the Harmony blockchain connection by setting the `rpcUrl`, `chainId`, and other parameters.\n4. **Defining Transaction Parameters:** The section explains how to define the parameters of the transaction to be sent, including the `to`, `value`, `gasLimit`, `shardID`, `toShardID`, and `gasPrice`.\n5. **Calling the `sendTransaction` Method:** The section shows how to call the `sendTransaction` method of the Magic Harmony extension, passing in the transaction parameters, and returns a promise that resolves to the transaction hash.\n\n**Code Snippet:**\n\nThe code snippet provided in the section demonstrates how to perform the following steps:\n\n* Import the necessary modules\n* Create an instance of the Magic Harmony extension\n* Configure the Harmony blockchain connection\n* Define the transaction parameters\n* Call the `sendTransaction` method\n* Log the transaction hash to the console\n\n**Main Purpose:**\n\nThe main purpose of this section is to provide a clear and concise guide on how to send a standard Harmony blockchain transaction using the Magic Harmony extension. It covers the necessary steps, configurations, and parameters required to send a transaction on the Harmony blockchain.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/evm/harmony#chunk-5", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n#\n\n#\n\nBefore you can send transaction on the Harmony blockchain, you'll need to acquire some test ONE token (Harmony's native cryptocurrency for test network).\n\n\u2022 Go to our Harmony Example application\n\n\u2022 Login with your email address\n\n\u2022 Copy your Harmony public address\n\n\u2022 Go to the Harmony Faucet\n\n\u2022 Paste your copied Harmony public address in the text input\n\n\u2022 Now you can use your test ONE token in our example app\n\nHarmony Example\n\nHarmony Faucet\n\nexample app", "explanation": "**Explanation of the Documentation Section:**\n\nThis documentation section is about obtaining necessary test tokens for use on the Harmony blockchain, specifically on the test network. The main purpose is to provide instructions on how to acquire test ONE token, which is Harmony's native cryptocurrency for the test network.\n\n**Key Steps:**\n\n1. Log in to the Harmony Example application using your email address.\n2. Obtain your Harmony public address from the example application.\n3. Access the Harmony Faucet and paste your public address into the text input.\n4. Once connected, you can use the test ONE token in the example application.\n\n**Main Purpose:**\n\nThe primary goal of this section is to enable users to start experimenting with the Harmony blockchain by providing them with the necessary test tokens. This allows developers and users to test and explore the Harmony network without the need for actual cryptocurrency.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/evm/harmony#chunk-6", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nNote that the Magic Harmony extension follows the method names and conventions by Harmony's Javascript SDK. To deploy an Harmony smart contract, you can call the magic.harmony.sendTransaction method to send deploy contract transaction.\n\nHarmony's Javascript SDK\n\nmagic.harmony.sendTransaction\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\nimport\n\n{\n\nHarmonyExtension\n\n}\n\nfrom\n\n'@magic-ext/harmony'\n\n;\n\n02\n\nimport\n\n{\n\nHarmonyExtension\n\n}\n\nfrom\n\n'@magic-ext/harmony'\n\n;\n\n03\n\nconst\n\n{\n\nHarmony\n\n:\n\nIndex\n\n}\n\n=\n\nrequire\n\n(\n\n'@harmony-js/core'\n\n)\n\n;\n\n03\n\nconst\n\n{\n\nHarmony\n\n:\n\nIndex\n\n}\n\n=\n\nrequire\n\n(\n\n'@harmony-js/core'\n\n)\n\n;\n\n04\n\nconst\n\n{\n\nChainID\n\n,\n\nChainType\n\n}\n\n=\n\nrequire\n\n(\n\n'@harmony-js/utils'\n\n)\n\n;\n\n04\n\nconst\n\n{\n\nChainID\n\n,\n\nChainType\n\n}\n\n=\n\nrequire\n\n(\n\n'@harmony-js/utils'\n\n)\n\n;\n\n05\n\n05\n\n06\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_API_KEY'\n\n,\n\n{\n\n06\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_API_KEY'\n\n,\n\n{\n\n07\n\nextensions\n\n:\n\n[\n\n07\n\nextensions\n\n:\n\n[\n\n08\n\nnew\n\nHarmonyExtension\n\n(\n\n{\n\n08\n\nnew\n\nHarmonyExtension\n\n(\n\n{\n\n09\n\nrpcUrl\n\n:\n\n'https://api.s0.b.hmny.io'\n\n,\n\n09\n\nrpcUrl\n\n:\n\n'https://api.s0.b.hmny.io'\n\n,\n\n10\n\nchainId\n\n:\n\nChainID\n\n.\n\nHmyTestnet\n\n,\n\n10\n\nchainId\n\n:\n\nChainID\n\n.\n\nHmyTestnet\n\n,\n\n11\n\n}\n\n)\n\n,\n\n11\n\n}\n\n)\n\n,\n\n12\n\n]\n\n,\n\n12\n\n]\n\n,\n\n13\n\n}\n\n)\n\n;\n\n13\n\n}\n\n)\n\n;\n\n14\n\n14\n\n15\n\nconst\n\nbin\n\n=\n\n15\n\nconst\n\nbin\n\n=\n\n16\n\n'608060405234801561001057600080fd5b5060c68061001f6000396000f3fe6080604052348015600f576000'\n\n+\n\n16\n\n'608060405234801561001057600080fd5b5060c68061001f6000396000f3fe6080604052348015600f576000'\n\n+\n\n17\n\n'80fd5b506004361060325760003560e01c80636057361d146037578063b05784b8146062575b600080fd5b6060600480'\n\n+\n\n17\n\n'80fd5b506004361060325760003560e01c80636057361d146037578063b05784b8146062575b600080fd5b6060600480'\n\n+\n\n18\n\n'36036020811015604b57600080fd5b8101908080359060200190929190505050607e565b005b60686088565b60405180'\n\n+\n\n18\n\n'36036020811015604b57600080fd5b8101908080359060200190929190505050607e565b005b60686088565b60405180'\n\n+\n\n19\n\n'82815260200191505060405180910390f35b8060008190555050565b6000805490509056fea265627a7a723158209e86'\n\n+\n\n19\n\n'82815260200191505060405180910390f35b8060008190555050565b6000805490509056fea265627a7a723158209e86'\n\n+\n\n20\n\n'9bf97eba094ccf7533f0f92b4de32cf3cce7d7cff974769bca975e178b0164736f6c63430005110032'\n\n;\n\n20\n\n'9bf97eba094ccf7533f0f92b4de32cf3cce7d7cff974769bca975e178b0164736f6c63430005110032'\n\n;\n\n21\n\n21\n\n22\n\nconst\n\ncontractBytecode\n\n=\n\n{\n\n22\n\nconst\n\ncontractBytecode\n\n=\n\n{\n\n23\n\ndata\n\n:\n\n`\n\n0x\n\n${\n\nbin\n\n}\n\n`\n\n,\n\n23\n\ndata\n\n:\n\n`\n\n0x\n\n${\n\nbin\n\n}\n\n`\n\n,\n\n24\n\ngasLimit\n\n:\n\n'210000'\n\n,\n\n24\n\ngasLimit\n\n:\n\n'210000'\n\n,\n\n25\n\n// send token from shardID\n\n25\n\n// send token from shardID\n\n26\n\nshardID\n\n:\n\n0\n\n,\n\n26\n\nshardID\n\n:\n\n0\n\n,\n\n27\n\n// send token to toShardID\n\n27\n\n// send token to toShardID\n\n28\n\ntoShardID\n\n:\n\n0\n\n,\n\n28\n\ntoShardID\n\n:\n\n0\n\n,\n\n29\n\n// gas Price, you can use Unit class, and use Gwei, then remember to use toWei(), which will be transformed to BN\n\n29\n\n// gas Price, you can use Unit class, and use Gwei, then remember to use toWei(), which will be transformed to BN\n\n30\n\ngasPrice\n\n:\n\n1000000000\n\n,\n\n30\n\ngasPrice\n\n:\n\n1000000000\n\n,\n\n31\n\narguments\n\n:\n\n[\n\n]\n\n,\n\n31\n\narguments\n\n:\n\n[\n\n]\n\n,\n\n32\n\n}\n\n;\n\n32\n\n}\n\n;\n\n33\n\n33\n\n34\n\nconst\n\ntxHash\n\n=\n\nawait\n\nmagic\n\n.\n\nharmony\n\n.\n\nsendTransaction\n\n(\n\ncontractBytecode\n\n)\n\n;\n\n34\n\nconst\n\ntxHash\n\n=\n\nawait\n\nmagic\n\n.\n\nharmony\n\n.\n\nsendTransaction\n\n(\n\ncontractBytecode\n\n)\n\n;\n\n35\n\n35\n\n36\n\nconsole\n\n.\n\nlog\n\n(\n\n'transaction hash'\n\n,\n\ntxHash\n\n)\n\n;\n\n36\n\nconsole\n\n.\n\nlog\n\n(\n\n'transaction hash'\n\n,\n\ntxHash\n\n)\n\n;", "explanation": "Based on the provided documentation section titled '# Call Extension Method - ES Modules/TypeScript' from the Magic Link documentation for the Harmony blockchain, I will explain its main purpose and key points in a clear and concise manner.\n\n**Main Purpose:** The section demonstrates how to call the `sendTransaction` method on the Harmony blockchain to deploy a smart contract. This method is part of the Magic Harmony extension, which follows Harmony's JavaScript SDK conventions.\n\n**Key Points:**\n\n1.  **Importing required packages:** The code imports the necessary packages, including `Magic`, `HarmonyExtension`, `Harmony`, `ChainID`, and `ChainType`.\n2.  **Initializing the Magic instance:** A new instance of the `Magic` class is created with the API key, and the Harmony extension is added to it.\n3.  **Configuring the Harmony extension:** The `HarmonyExtension` is configured with the RPC URL, chain ID, and shard IDs for sending tokens from and to.\n4.  **Defining the contract bytecode:** The contract bytecode is defined as a JavaScript object with the `data` property containing the binary code of the contract, `gasLimit`, `shardID`, `toShardID`, and `gasPrice`.\n5.  **Calling the sendTransaction method:** The `sendTransaction` method of the Harmony extension is called with the contract bytecode and the `txHash` is logged.\n\nTo use this code, you will need to replace the placeholders with your own API key, contract bytecode, and other configuration values. The `sendTransaction` method returns a promise that resolves to the transaction hash, which can be used to track the deployment of the smart contract.\n\n**Example Usage:**\n\n```javascript\nconst magic = new Magic('YOUR_API_KEY');\nconst harmonyExtension = new HarmonyExtension({\n  rpcUrl: 'https://api.s0.b.hmny.io',\n  chainId: ChainID.HmyTestnet,\n});\nmagic.extensions = [harmonyExtension];\n\nconst contractBytecode = {\n  data: `0x${binaryCode}`,\n  gasLimit: '210000',\n  shardID: 0,\n  toShardID: 0,\n  gasPrice: 1000000000,\n  arguments: [],\n};\n\nconst txHash = await magic.harmony.sendTransaction(contractBytecode);\nconsole.log('transaction hash', txHash);\n```\n\n**Note:** Make sure to replace `YOUR_API_KEY` with your actual API key and `binaryCode` with the actual binary code of the contract.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/evm/harmony#chunk-7", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n#\n\nBefore you can send transaction on the Harmony blockchain, you'll need to acquire some test ONE token (Harmony's native cryptocurrency for test network).\n\n\u2022 Go to our Harmony Example application\n\n\u2022 Login with your email address\n\n\u2022 Copy your Harmony public address\n\n\u2022 Go to the Harmony Faucet\n\n\u2022 Paste your copied Harmony public address in the text input\n\n\u2022 Now you can use your test ONE token in our example app\n\nHarmony Example\n\nHarmony Faucet\n\nexample app", "explanation": "**Purpose of '#Contract Send - #Getting Test ONE token'**\n\nThis documentation section guides users on how to obtain test ONE tokens, which are required to send transactions on the Harmony blockchain test network. The test network is used for testing and development purposes.\n\n**Step-by-Step Instructions**\n\n1. Access the Harmony Example application and log in using an email address.\n2. Copy the user's Harmony public address from the application.\n3. Visit the Harmony Faucet website.\n4. Paste the copied Harmony public address into the text input field.\n5. With a successful submission, the user will receive test ONE tokens to use in the example app, allowing them to proceed with testing and development on the Harmony blockchain.\n\n**Main Purpose**\n\nThe main purpose of this section is to provide users with a step-by-step guide on how to acquire test credits (in this case, test ONE tokens) to use on the Harmony blockchain test network, enabling them to test the #contract send functionality.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/evm/harmony#chunk-8", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nNote that the Magic Harmony extension follows the method names and conventions by Harmony's Javascript SDK. To call an Harmony smart contract function, you can call the magic.harmony.sendTransaction method to send contract transaction.\n\nHarmony's Javascript SDK\n\nmagic.harmony.sendTransaction\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\nimport\n\n{\n\nHarmonyExtension\n\n}\n\nfrom\n\n'@magic-ext/harmony'\n\n;\n\n02\n\nimport\n\n{\n\nHarmonyExtension\n\n}\n\nfrom\n\n'@magic-ext/harmony'\n\n;\n\n03\n\nconst\n\n{\n\nHarmony\n\n:\n\nIndex\n\n}\n\n=\n\nrequire\n\n(\n\n'@harmony-js/core'\n\n)\n\n;\n\n03\n\nconst\n\n{\n\nHarmony\n\n:\n\nIndex\n\n}\n\n=\n\nrequire\n\n(\n\n'@harmony-js/core'\n\n)\n\n;\n\n04\n\nconst\n\n{\n\nChainID\n\n,\n\nChainType\n\n}\n\n=\n\nrequire\n\n(\n\n'@harmony-js/utils'\n\n)\n\n;\n\n04\n\nconst\n\n{\n\nChainID\n\n,\n\nChainType\n\n}\n\n=\n\nrequire\n\n(\n\n'@harmony-js/utils'\n\n)\n\n;\n\n05\n\n05\n\n06\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_API_KEY'\n\n,\n\n{\n\n06\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_API_KEY'\n\n,\n\n{\n\n07\n\nextensions\n\n:\n\n[\n\n07\n\nextensions\n\n:\n\n[\n\n08\n\nnew\n\nHarmonyExtension\n\n(\n\n{\n\n08\n\nnew\n\nHarmonyExtension\n\n(\n\n{\n\n09\n\nrpcUrl\n\n:\n\n'https://api.s0.b.hmny.io'\n\n,\n\n09\n\nrpcUrl\n\n:\n\n'https://api.s0.b.hmny.io'\n\n,\n\n10\n\nchainId\n\n:\n\nChainID\n\n.\n\nHmyTestnet\n\n,\n\n10\n\nchainId\n\n:\n\nChainID\n\n.\n\nHmyTestnet\n\n,\n\n11\n\n}\n\n)\n\n,\n\n11\n\n}\n\n)\n\n,\n\n12\n\n]\n\n,\n\n12\n\n]\n\n,\n\n13\n\n}\n\n)\n\n;\n\n13\n\n}\n\n)\n\n;\n\n14\n\n14\n\n15\n\nconst\n\nharmony\n\n=\n\nnew\n\nIndex\n\n(\n\n15\n\nconst\n\nharmony\n\n=\n\nnew\n\nIndex\n\n(\n\n16\n\n// rpc url\n\n16\n\n// rpc url\n\n17\n\n'https://api.s0.b.hmny.io'\n\n,\n\n17\n\n'https://api.s0.b.hmny.io'\n\n,\n\n18\n\n{\n\n18\n\n{\n\n19\n\n// chainType set to Index\n\n19\n\n// chainType set to Index\n\n20\n\nchainType\n\n:\n\nChainType\n\n.\n\nHarmony\n\n,\n\n20\n\nchainType\n\n:\n\nChainType\n\n.\n\nHarmony\n\n,\n\n21\n\n// chainType set to HmyLocal\n\n21\n\n// chainType set to HmyLocal\n\n22\n\nchainId\n\n:\n\nChainID\n\n.\n\nHmyTestnet\n\n,\n\n22\n\nchainId\n\n:\n\nChainID\n\n.\n\nHmyTestnet\n\n,\n\n23\n\n}\n\n,\n\n23\n\n}\n\n,\n\n24\n\n)\n\n;\n\n24\n\n)\n\n;\n\n25\n\n25\n\n26\n\nlet\n\ncontractAddress\n\n=\n\n'0x67a3f8db0c98524e8e4513f95cd68f7fbbca7f06'\n\n;\n\n26\n\nlet\n\ncontractAddress\n\n=\n\n'0x67a3f8db0c98524e8e4513f95cd68f7fbbca7f06'\n\n;\n\n27\n\n27\n\n28\n\nconst\n\ncontractAbi\n\n=\n\n[\n\n28\n\nconst\n\ncontractAbi\n\n=\n\n[\n\n29\n\n{\n\n29\n\n{\n\n30\n\nconstant\n\n:\n\nfalse\n\n,\n\n30\n\nconstant\n\n:\n\nfalse\n\n,\n\n31\n\ninputs\n\n:\n\n[\n\n31\n\ninputs\n\n:\n\n[\n\n32\n\n{\n\n32\n\n{\n\n33\n\ninternalType\n\n:\n\n'uint256'\n\n,\n\n33\n\ninternalType\n\n:\n\n'uint256'\n\n,\n\n34\n\nname\n\n:\n\n'num'\n\n,\n\n34\n\nname\n\n:\n\n'num'\n\n,\n\n35\n\ntype\n\n:\n\n'uint256'\n\n,\n\n35\n\ntype\n\n:\n\n'uint256'\n\n,\n\n36\n\n}\n\n,\n\n36\n\n}\n\n,\n\n37\n\n]\n\n,\n\n37\n\n]\n\n,\n\n38\n\nname\n\n:\n\n'store'\n\n,\n\n38\n\nname\n\n:\n\n'store'\n\n,\n\n39\n\noutputs\n\n:\n\n[\n\n]\n\n,\n\n39\n\noutputs\n\n:\n\n[\n\n]\n\n,\n\n40\n\npayable\n\n:\n\nfalse\n\n,\n\n40\n\npayable\n\n:\n\nfalse\n\n,\n\n41\n\nstateMutability\n\n:\n\n'nonpayable'\n\n,\n\n41\n\nstateMutability\n\n:\n\n'nonpayable'\n\n,\n\n42\n\ntype\n\n:\n\n'function'\n\n,\n\n42\n\ntype\n\n:\n\n'function'\n\n,\n\n43\n\n}\n\n,\n\n43\n\n}\n\n,\n\n44\n\n{\n\n44\n\n{\n\n45\n\nconstant\n\n:\n\ntrue\n\n,\n\n45\n\nconstant\n\n:\n\ntrue\n\n,\n\n46\n\ninputs\n\n:\n\n[\n\n]\n\n,\n\n46\n\ninputs\n\n:\n\n[\n\n]\n\n,\n\n47\n\nname\n\n:\n\n'retreive'\n\n,\n\n47\n\nname\n\n:\n\n'retreive'\n\n,\n\n48\n\noutputs\n\n:\n\n[\n\n48\n\noutputs\n\n:\n\n[\n\n49\n\n{\n\n49\n\n{\n\n50\n\ninternalType\n\n:\n\n'uint256'\n\n,\n\n50\n\ninternalType\n\n:\n\n'uint256'\n\n,\n\n51\n\nname\n\n:\n\n''\n\n,\n\n51\n\nname\n\n:\n\n''\n\n,\n\n52\n\ntype\n\n:\n\n'uint256'\n\n,\n\n52\n\ntype\n\n:\n\n'uint256'\n\n,\n\n53\n\n}\n\n,\n\n53\n\n}\n\n,\n\n54\n\n]\n\n,\n\n54\n\n]\n\n,\n\n55\n\npayable\n\n:\n\nfalse\n\n,\n\n55\n\npayable\n\n:\n\nfalse\n\n,\n\n56\n\nstateMutability\n\n:\n\n'view'\n\n,\n\n56\n\nstateMutability\n\n:\n\n'view'\n\n,\n\n57\n\ntype\n\n:\n\n'function'\n\n,\n\n57\n\ntype\n\n:\n\n'function'\n\n,\n\n58\n\n}\n\n,\n\n58\n\n}\n\n,\n\n59\n\n]\n\n;\n\n59\n\n]\n\n;\n\n60\n\n60\n\n61\n\nconst\n\ndeployedContract\n\n=\n\nharmony\n\n.\n\ncontracts\n\n.\n\ncreateContract\n\n(\n\ncontractAbi\n\n,\n\ncontractAddress\n\n)\n\n;\n\n61\n\nconst\n\ndeployedContract\n\n=\n\nharmony\n\n.\n\ncontracts\n\n.\n\ncreateContract\n\n(\n\ncontractAbi\n\n,\n\ncontractAddress\n\n)\n\n;\n\n62\n\n62\n\n63\n\nconst\n\ntx\n\n=\n\nawait\n\ndeployedContract\n\n.\n\nmethods\n\n.\n\nstore\n\n(\n\n900\n\n)\n\n;\n\n63\n\nconst\n\ntx\n\n=\n\nawait\n\ndeployedContract\n\n.\n\nmethods\n\n.\n\nstore\n\n(\n\n900\n\n)\n\n;\n\n64\n\n64\n\n65\n\nlet\n\n{\n\ntxPayload\n\n}\n\n=\n\ntx\n\n.\n\ntransaction\n\n;\n\n65\n\nlet\n\n{\n\ntxPayload\n\n}\n\n=\n\ntx\n\n.\n\ntransaction\n\n;\n\n66\n\n66\n\n67\n\ntxPayload\n\n.\n\nfrom\n\n=\n\n(\n\nawait\n\nmagic\n\n.\n\nuser\n\n.\n\ngetMetadata\n\n(\n\n)\n\n)\n\n.\n\npublicAddress\n\n;\n\n67\n\ntxPayload\n\n.\n\nfrom\n\n=\n\n(\n\nawait\n\nmagic\n\n.\n\nuser\n\n.\n\ngetMetadata\n\n(\n\n)\n\n)\n\n.\n\npublicAddress\n\n;\n\n68\n\ntxPayload\n\n.\n\ngasLimit\n\n=\n\n'210000'\n\n;\n\n68\n\ntxPayload\n\n.\n\ngasLimit\n\n=\n\n'210000'\n\n;\n\n69\n\ntxPayload\n\n.\n\ngasPrice\n\n=\n\n'1000000000'\n\n;\n\n69\n\ntxPayload\n\n.\n\ngasPrice\n\n=\n\n'1000000000'\n\n;\n\n70\n\n70\n\n71\n\nconst\n\ntxHash\n\n=\n\nawait\n\nmagic\n\n.\n\nharmony\n\n.\n\nsendTransaction\n\n(\n\ntxPayload\n\n)\n\n;\n\n71\n\nconst\n\ntxHash\n\n=\n\nawait\n\nmagic\n\n.\n\nharmony\n\n.\n\nsendTransaction\n\n(\n\ntxPayload\n\n)\n\n;\n\n72\n\n72\n\n73\n\nconsole\n\n.\n\nlog\n\n(\n\n'transaction hash'\n\n,\n\ntxHash\n\n)\n\n;\n\n73\n\nconsole\n\n.\n\nlog\n\n(\n\n'transaction hash'\n\n,\n\ntxHash\n\n)\n\n;", "explanation": "**Call Extension Method - ES Modules/TypeScript**\n\nThis documentation section explains how to call an extension method, specifically the `sendTransaction` method, using the Magic Harmony extension in ES Modules/TypeScript.\n\n**Main Purpose:**\n\nThe main purpose of this section is to provide an example of how to use the Magic Harmony extension to call an Ethereum Virtual Machine (EVM) smart contract function on the Harmony blockchain. The example demonstrates how to create a contract instance, call a contract function, and send a transaction using the `sendTransaction` method.\n\n**Key Steps:**\n\n1. Import the required modules, including `Magic`, `HarmonyExtension`, and `Harmony`.\n2. Create a new instance of the `Magic` class with your API key.\n3. Create a new instance of the `HarmonyExtension` class and add it to the `extensions` array of the `Magic` instance.\n4. Set the `rpcUrl` property of the `HarmonyExtension` instance to the Harmony RPC URL.\n5. Create a new instance of the `Harmony` class and set its `chainId` property to the testnet chain ID.\n6. Create a contract instance using the `createContract` method of the `harmony` instance.\n7. Call a contract function using the `methods` property of the contract instance.\n8. Get the transaction payload from the transaction object.\n9. Set the `from` property of the transaction payload to the user's public address.\n10. Set the `gasLimit` and `gasPrice` properties of the transaction payload.\n11. Call the `sendTransaction` method of the `magic.harmony` object to send the transaction.\n\n**Example Use Case:**\n\nThis example demonstrates how to call a contract function that stores a value on the Harmony blockchain. The example includes code snippets for creating a contract instance, calling a contract function, and sending a transaction using the `sendTransaction` method.\n\n**Note:**\n\nThe `sendTransaction` method is used to send a transaction to the Harmony blockchain. This method follows the method names and conventions of Harmony's JavaScript SDK. The example code includes code snippets for importing the required modules, creating a `Magic` instance, and calling the `sendTransaction` method.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/evm/harmony#chunk-9", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 All Auth, User and most Wallet module methods* for Dedicated Wallets\n\n\u2022 All EVM Provider functionality to respond to supported RPC methods\n\n\u2022 Widget UI for token balances and token transfers*\n\nAuth\n\nUser\n\nWallet\n\nDedicated Wallets\n\nRPC methods\n\n*Some features are not yet compatible such as NFT Viewer and Fiat On-ramps.\n\nNeed a feature or see a problem? File an issue on our github repo.\n\ngithub repo", "explanation": "**Understanding the Compatibility Section**\n\nThe Compatibility section from the Magic Labs embedded wallet documentation for Harmony explains the limited scope of features that are currently supported on the Dedicated Wallets for the Harmony EVM blockchain.\n\n**Main Purpose:**\n\nThe primary purpose of this section is to inform developers about the specific methods and features that are currently compatible with the Dedicated Wallets on Harmony. This includes:\n\n1. **API methods**: Certain methods for Auth, User, and Wallet are supported.\n2. **RPC methods**: EVM Provider functionality responds to specific RPC methods.\n3. **Widget UI**: Limited token balance and transfer functionality is available through the widget UI.\n\n**What's Not Yet Supported:**\n\nSome features, like NFT Viewer and Fiat On-ramps, are not yet compatible with the Dedicated Wallets on Harmony. If you need a feature or encounter a problem, report it on the official GitHub repository for further assistance.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/evm/harmony#chunk-10", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 Documentation: https://docs.harmony.one/home/\n\n\u2022 Block Explorer: https://explorer.harmony.one/ (Mainnet)\n\n\u2022 Faucet: https://onefaucet.ibriz.ai/\n\n\u2022 Example\n\nhttps://docs.harmony.one/home/\n\nhttps://explorer.harmony.one/\n\nhttps://onefaucet.ibriz.ai/\n\nExample", "explanation": "In the '#Resources & Tools' section of the Magic Labs embedded wallet documentation, you'll find a list of essential tools to help you navigate and interact with the Harmony blockchain within the context of an EVM (Ethereum Virtual Machine) compatible smart contract ecosystem.\n\n**Main Purpose:**\n\nThe purpose of this section is to provide users with quick access to essential resources and tools that will aid in understanding and working with the Harmony blockchain, ensuring seamless integration and testing within the Magic Labs embedded wallet.\n\n**Breakdown of Resources:**\n\n*   **Documentation**: A link to the official Harmony documentation, offering comprehensive guides, API references, and tutorials to help developers understand and utilize the blockchain.\n*   **Block Explorer**: A URL to the Harmony mainnet block explorer, allowing users to navigate and explore the blockchain's transactions, smart contracts, and account activity.\n*   **Faucet**: A link to the Harmony faucet, providing testnet (in this case: OneFaucet) which allow users to obtain free test coins, facilitating testing and development within the Harmony ecosystem.\n\n**Example Usage:**\n\nThe provided example links serve as a quick reference to the Harmony documentation, block explorer, and faucet, enabling users to access these essential resources directly from the Magic Labs embedded wallet documentation.\n\nBy including these resources in their documentation, Magic Labs facilitates easier navigation, development, and testing on the Harmony blockchain, ultimately enhancing the user experience for developers and administrators working with the embedded wallet.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/evm/harmony#chunk-11", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nThe Content Security Policy (CSP) of a browser dictates what resources can load. Magic maintains a predefined list of RPC URLs in the CSP. You can find these RPC URLs in the page relevant to your chosen blockchain. If you are using a Dedicated Wallet, you can update the policy on the Settings page of the dashboard with a custom URL.\n\nContent Security Policy\n\nthe page relevant to your chosen blockchain\n\nDedicated Wallet", "explanation": "**Content Security Policy Overview:**\n\nThe Content Security Policy (CSP) is a security feature of web browsers that defines which resources (such as scripts, styles, and images) a website is allowed to load. Magic Labs, in the context of embedded wallets, maintains a pre-defined list of allowed Remote Procedure Call (RPC) URLs in the CSP for added security.\n\n**Main Purpose:**\n\nThe primary goal of the CSP in Magic Labs embedded wallets is to ensure only authorized resources can be loaded, preventing malicious scripts or sources from executing on the wallet. This policy helps protect against common web attacks, such as Cross-Site Scripting (XSS).\n\n**Key Points:**\n\n- **Pre-defined list of RPC URLs:** Magic Labs maintains a default list of approved RPC URLs for various blockchain platforms.\n- **Custom URL updates:** Dedicated Wallet users can update the policy on the Settings page with a custom URL for added flexibility.\n\nBy implementing a CSP, Magic Labs embedded wallets enhance the security of wallet interactions, safeguarding sensitive data and reducing the risk of attacks.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/wallets/security/content-security-policy#chunk-1", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 Use the connect-src directive to allow specific URLs, such as a custom RPC URL to send transactions to your node\n\nconnect-src directive", "explanation": "In the context of the Magic Labs embedded wallet's Content Security Policy (CSP), the '#Use cases' section focuses on specifying allowed sources for web pages to load resources, such as JavaScript or API calls.\n\nThe 'connect-src' directive is a key component in this section, aiming to ensure secure communication between your application and its dependencies, protecting against cross-site scripting (XSS) attacks.\n\n**Main Purpose of connect-src directive:**\n \nThe main purpose of the 'connect-src' directive is to specify which URLs are allowed to establish connections to your webpage. This is crucial for allowing your application to send transactions to a custom RPC (Remote Procedure Call) URL for your node, without risking XSS attacks.\n\n**Key Points:**\n\n- Enable secure communication between your application and a custom RPC URL\n- Specify allowed sources for API calls, such as making transactions\n- Protect against cross-site scripting (XSS) attacks by limiting potential attacker-influenced actions\n\nBy controlling the 'connect-src' directive, developers can ensure their application remains secure while still allowing necessary connections for functionality.\n\nAdditional context about Content-Security-Policy see https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/wallets/security/content-security-policy#chunk-2", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nWhen connecting to a custom RPC node, ensure that the URL you use in your code has been added to the CSP in your Magic Dashboard.\n\nMagic Dashboard\n\nCopy\n\n01\n\n\u2060\n\n01\n\n\u2060\n\n02\n\nconst\n\ncustomNodeOptions\n\n=\n\n{\n\n02\n\nconst\n\ncustomNodeOptions\n\n=\n\n{\n\n03\n\nrpcUrl\n\n:\n\n'https://eth-mainnet.g.alchemy.com/v2/xyz'\n\n,\n\n// Your own node URL\n\n03\n\nrpcUrl\n\n:\n\n'https://eth-mainnet.g.alchemy.com/v2/xyz'\n\n,\n\n// Your own node URL\n\n04\n\nchainId\n\n:\n\n1011\n\n,\n\n// Your own node's chainId\n\n04\n\nchainId\n\n:\n\n1011\n\n,\n\n// Your own node's chainId\n\n05\n\n}\n\n;\n\n05\n\n}\n\n;\n\n06\n\n06\n\n07\n\n// Setting network to localhost blockchain\n\n07\n\n// Setting network to localhost blockchain\n\n08\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_PUBLISHABLE_API_KEY'\n\n,\n\n{\n\n08\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_PUBLISHABLE_API_KEY'\n\n,\n\n{\n\n09\n\nnetwork\n\n:\n\ncustomNodeOptions\n\n,\n\n09\n\nnetwork\n\n:\n\ncustomNodeOptions\n\n,\n\n10\n\n}\n\n)\n\n;\n\n10\n\n}\n\n)\n\n;", "explanation": "**Usage Explanation**\n\nThe provided documentation section is titled '#Usage' and revolves around the process of connecting to a custom RPC node with Magic Labs Embedded Wallet.\n\n**Main Purpose**\n\nThe main purpose of this section is to guide users on how to securely connect their Magic Embedded Wallet to a custom RPC node, which is a third-party node that handles transactions and interactions with the blockchain.\n\n**Key Points**\n\n1. **Adding custom nodes to Content Security Policy (CSP)**: Before connecting to a custom RPC node, users must add the node's URL to their Magic Dashboard's Content Security Policy (CSP) to ensure security and prevent potential attacks.\n2. **Custom node options object creation**: Users are shown how to create an object (`customNodeOptions`) that contains the custom RPC node's URL, chain ID, and other relevant settings.\n3. **Passing custom node options to Magic constructor**: The `customNodeOptions` object is then passed to the Magic constructor to configure the connection to the custom RPC node.\n\n**Best Practice**\n\nBy following this documentation, users can securely connect their Magic Embedded Wallet to a custom RPC node, ensuring a seamless and trustworthy user experience for decentralized applications (dApps).", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/wallets/security/content-security-policy#chunk-3", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nTo get started, install the following dependencies for your project:\n\nCopy\n\n01\n\nnpm\n\ninstall\n\n@magic-ext/solana @solana/web3.js magic-sdk\n\n01\n\nnpm\n\ninstall\n\n@magic-ext/solana @solana/web3.js magic-sdk", "explanation": "In the given documentation section titled 'Solana - #Installation', the main purpose is to guide users through the process of setting up their project to work with Magic Labs' Solana integration.\n\nHere's a breakdown of what it entails:\n\n**Key Points:**\n\n1. **Installing Dependencies**: The section instructs users to run `npm install` commands to add three dependencies to their project.\n2. **Dependencies to be installed**:\n\t* `@magic-ext/solana`: This is a Magic Labs extension for Solana, enabling the integration of the two.\n\t* `@solana/web3.js`: This is a library provided by Solana for interacting with their blockchain.\n\t* `magic-sdk`: This is the main Magic Labs SDK, which handles all the cryptocurrency wallet integrations, including Solana.\n\n**Main Purpose:**\nThe main purpose of this section is to ensure that users have the necessary dependencies installed in their project before proceeding with integrating Magic Labs' Solana wallet functionality.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/featured-chains/solana#chunk-1", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nThe Magic class is the entry-point to the Magic SDK. It must be instantiated with a Magic publishable key.\n\n#\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\nimport\n\n{\n\nSolanaExtension\n\n}\n\nfrom\n\n'@magic-ext/solana'\n\n;\n\n02\n\nimport\n\n{\n\nSolanaExtension\n\n}\n\nfrom\n\n'@magic-ext/solana'\n\n;\n\n03\n\n03\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_API_KEY'\n\n,\n\n{\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_API_KEY'\n\n,\n\n{\n\n05\n\nextensions\n\n:\n\n[\n\n05\n\nextensions\n\n:\n\n[\n\n06\n\nnew\n\nSolanaExtension\n\n(\n\n{\n\n06\n\nnew\n\nSolanaExtension\n\n(\n\n{\n\n07\n\nrpcUrl\n\n:\n\n'SOLANA_RPC_NODE_URL'\n\n,\n\n07\n\nrpcUrl\n\n:\n\n'SOLANA_RPC_NODE_URL'\n\n,\n\n08\n\n}\n\n)\n\n,\n\n08\n\n}\n\n)\n\n,\n\n09\n\n]\n\n,\n\n09\n\n]\n\n,\n\n10\n\n}\n\n)\n\n;\n\n10\n\n}\n\n)\n\n;", "explanation": "**Initialization - ES Modules/TypeScript**\n\nThis documentation section explains how to initialize the Magic SDK in a TypeScript or ES Modules environment. The Magic SDK is a JavaScript library that enables users to interact with blockchain APIs in a seamless and secure way.\n\n**Main Purpose:**\n\nThe main purpose of this section is to provide a code sample on how to import the Magic and SolanaExtension classes, and instantiate the Magic class with a publishable key and SolanaExtension instance.\n\n**Key Points:**\n\n1. **Importing Magic and SolanaExtension classes:** The code sample shows how to import the Magic and SolanaExtension classes from their respective modules.\n2. **Instantiating the Magic class:** The `Magic` class is instantiated with a publishable key (`YOUR_API_KEY`). This key is a unique identifier provided by Magic that allows access to the Magic API.\n3. **Initializing SolanaExtension:** The `SolanaExtension` class is created and passed to the `extensions` option in the `Magic` constructor. This extension provides Solana-specific functionality to the Magic SDK.\n4. **Configuring Solana RPC URL:** The `rpcUrl` option is used to specify the URL of the Solana RPC node.\n\n**Example Code:**\n\nThe code sample provided in this section shows how to initialize the Magic SDK with a Solana extension:\n```typescript\nimport { Magic } from 'magic-sdk';\nimport { SolanaExtension } from '@magic-ext/solana';\n\nconst magic = new Magic('YOUR_API_KEY', {\n  extensions: [\n    new SolanaExtension({\n      rpcUrl: 'SOLANA_RPC_NODE_URL',\n    }),\n  ],\n});\n```\nBy following this example code, developers can initialize the Magic SDK with a Solana extension and start using its features to interact with the Solana blockchain.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/featured-chains/solana#chunk-2", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\n<\n\nscript src\n\n=\n\n\"https://auth.magic.link/sdk\"\n\n>\n\n<\n\n/\n\nscript\n\n>\n\n01\n\n<\n\nscript src\n\n=\n\n\"https://auth.magic.link/sdk\"\n\n>\n\n<\n\n/\n\nscript\n\n>\n\n02\n\n<\n\nscript type\n\n=\n\n\"text/javascript\"\n\nsrc\n\n=\n\n\"https://auth.magic.link/sdk/extension/solana\"\n\n>\n\n<\n\n/\n\nscript\n\n>\n\n02\n\n<\n\nscript type\n\n=\n\n\"text/javascript\"\n\nsrc\n\n=\n\n\"https://auth.magic.link/sdk/extension/solana\"\n\n>\n\n<\n\n/\n\nscript\n\n>\n\n03\n\n03\n\n04\n\n<\n\nscript\n\n>\n\n04\n\n<\n\nscript\n\n>\n\n05\n\nconst\n\nmagic\n\n=\n\nnew\n\nwindow\n\n.\n\nMagic\n\n(\n\n\"YOUR_API_KEY\"\n\n,\n\n{\n\n05\n\nconst\n\nmagic\n\n=\n\nnew\n\nwindow\n\n.\n\nMagic\n\n(\n\n\"YOUR_API_KEY\"\n\n,\n\n{\n\n06\n\nextensions\n\n:\n\n[\n\n06\n\nextensions\n\n:\n\n[\n\n07\n\nnew\n\nSolanaExtension\n\n(\n\n{\n\n07\n\nnew\n\nSolanaExtension\n\n(\n\n{\n\n08\n\nrpcUrl\n\n:\n\n'SOLANA_RPC_NODE_URL'\n\n08\n\nrpcUrl\n\n:\n\n'SOLANA_RPC_NODE_URL'\n\n09\n\n}\n\n)\n\n09\n\n}\n\n)\n\n10\n\n]\n\n10\n\n]\n\n11\n\n}\n\n)\n\n;\n\n11\n\n}\n\n)\n\n;\n\n12\n\n<\n\n/\n\nscript\n\n>\n\n12\n\n<\n\n/\n\nscript\n\n>", "explanation": "**CDN (Content Delivery Network) in Magic Labs Embedded Wallet Documentation**\n\nThe provided documentation section titled '#CDN' is about loading the Magic Labs embedded wallet SDK (Software Development Kit) from a Content Delivery Network (CDN). This allows for faster and more reliable loading of the necessary scripts for implementing the embedded wallet.\n\n**Main Purpose:**\n\nThe primary purpose of CDNs in this context is to:\n\n1. **Improve page load times**: By loading scripts from a CDN, the browser can fetch them from a location closer to the user, reducing latency and improving the overall user experience.\n2. **Ensure reliability**: CDNs often provide redundancy and failover mechanisms, ensuring that the necessary scripts are always available, even in case of issues with the user's location or internet connectivity.\n\n**Key CDN-related content:**\n\nThe provided documentation snippet includes the following CDN-related sections:\n\n1. Loading the Magic Labs SDK from a CDN using the `<script>` tag: `<script src=\"https://auth.magic.link/sdk\"></script>`\n2. Loading a specific extension (in this case, the Solana extension) from the CDN: `<script type=\"text/javascript\" src=\"https://auth.magic.link/sdk/extension/solana\"></script>`\n\nBy following these examples, developers can quickly and easily incorporate the Magic Labs embedded wallet into their application, while also benefiting from the performance and reliability improvements provided by CDNs.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/featured-chains/solana#chunk-3", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nNote that the Magic Solana extension follows the method names and conventions by Solana's Javascript SDK.\n\nSolana's Javascript SDK\n\n#\n\n#\n\nTo sign a standard Solana blockchain transaction, call the magic.solana.signTransaction method. Note that you must sign with the Magic SDK method but send the transaction using the @solana/web3.js method connection.sendRawTransaction.\n\nmagic.solana.signTransaction\n\n@solana/web3.js\n\nconnection.sendRawTransaction\n\nCopy\n\n01\n\nimport\n\n*\n\nas\n\nweb3\n\nfrom\n\n\"@solana/web3.js\"\n\n;\n\n01\n\nimport\n\n*\n\nas\n\nweb3\n\nfrom\n\n\"@solana/web3.js\"\n\n;\n\n02\n\n02\n\n03\n\n// Ensure you have Magic initialized with the Solana extension\n\n03\n\n// Ensure you have Magic initialized with the Solana extension\n\n04\n\n// Ensure that user is already authenticated\n\n04\n\n// Ensure that user is already authenticated\n\n05\n\n05\n\n06\n\nconst\n\nconnection\n\n=\n\nnew\n\nweb3\n\n.\n\nConnection\n\n(\n\nclusterApiUrl\n\n(\n\n\"devnet\"\n\n)\n\n)\n\n06\n\nconst\n\nconnection\n\n=\n\nnew\n\nweb3\n\n.\n\nConnection\n\n(\n\nclusterApiUrl\n\n(\n\n\"devnet\"\n\n)\n\n)\n\n07\n\n07\n\n08\n\nconst\n\nmetadata\n\n=\n\nawait\n\nmagic\n\n.\n\nuser\n\n.\n\ngetMetadata\n\n(\n\n)\n\n;\n\n08\n\nconst\n\nmetadata\n\n=\n\nawait\n\nmagic\n\n.\n\nuser\n\n.\n\ngetMetadata\n\n(\n\n)\n\n;\n\n09\n\nconst\n\nuserPublicKey\n\n=\n\nnew\n\nweb3\n\n.\n\nPublicKey\n\n(\n\nmetadata\n\n.\n\npublicAddress\n\n)\n\n;\n\n09\n\nconst\n\nuserPublicKey\n\n=\n\nnew\n\nweb3\n\n.\n\nPublicKey\n\n(\n\nmetadata\n\n.\n\npublicAddress\n\n)\n\n;\n\n10\n\nconst\n\nrecipientPubkey\n\n=\n\nnew\n\nweb3\n\n.\n\nKeypair\n\n.\n\ngenerate\n\n(\n\n)\n\n.\n\npublicKey\n\n;\n\n10\n\nconst\n\nrecipientPubkey\n\n=\n\nnew\n\nweb3\n\n.\n\nKeypair\n\n.\n\ngenerate\n\n(\n\n)\n\n.\n\npublicKey\n\n;\n\n11\n\n11\n\n12\n\nconst\n\nblockhash\n\n=\n\nawait\n\nconnection\n\n?.\n\ngetLatestBlockhash\n\n(\n\n)\n\n;\n\n12\n\nconst\n\nblockhash\n\n=\n\nawait\n\nconnection\n\n?.\n\ngetLatestBlockhash\n\n(\n\n)\n\n;\n\n13\n\nif\n\n(\n\n!\n\nblockhash\n\n)\n\nreturn\n\n;\n\n13\n\nif\n\n(\n\n!\n\nblockhash\n\n)\n\nreturn\n\n;\n\n14\n\n14\n\n15\n\nconst\n\ntransaction\n\n=\n\nnew\n\nweb3\n\n.\n\nTransaction\n\n(\n\n{\n\n15\n\nconst\n\ntransaction\n\n=\n\nnew\n\nweb3\n\n.\n\nTransaction\n\n(\n\n{\n\n16\n\n...\n\nblockhash\n\n,\n\n16\n\n...\n\nblockhash\n\n,\n\n17\n\nfeePayer\n\n:\n\nuserPublicKey\n\n,\n\n17\n\nfeePayer\n\n:\n\nuserPublicKey\n\n,\n\n18\n\n}\n\n)\n\n.\n\nadd\n\n(\n\n18\n\n}\n\n)\n\n.\n\nadd\n\n(\n\n19\n\nweb3\n\n.\n\nSystemProgram\n\n.\n\ntransfer\n\n(\n\n{\n\n19\n\nweb3\n\n.\n\nSystemProgram\n\n.\n\ntransfer\n\n(\n\n{\n\n20\n\nfromPubkey\n\n:\n\nuserPublicKey\n\n,\n\n20\n\nfromPubkey\n\n:\n\nuserPublicKey\n\n,\n\n21\n\ntoPubkey\n\n:\n\nrecipientPubkey\n\n,\n\n21\n\ntoPubkey\n\n:\n\nrecipientPubkey\n\n,\n\n22\n\nlamports\n\n:\n\nweb3\n\n.\n\nLAMPORTS_PER_SOL\n\n*\n\n0.01\n\n,\n\n22\n\nlamports\n\n:\n\nweb3\n\n.\n\nLAMPORTS_PER_SOL\n\n*\n\n0.01\n\n,\n\n23\n\n}\n\n)\n\n23\n\n}\n\n)\n\n24\n\n)\n\n;\n\n24\n\n)\n\n;\n\n25\n\n25\n\n26\n\nconst\n\nsignedTransaction\n\n=\n\nawait\n\nmagic\n\n?.\n\nsolana\n\n.\n\nsignTransaction\n\n(\n\n26\n\nconst\n\nsignedTransaction\n\n=\n\nawait\n\nmagic\n\n?.\n\nsolana\n\n.\n\nsignTransaction\n\n(\n\n27\n\ntransaction\n\n,\n\n27\n\ntransaction\n\n,\n\n28\n\n{\n\n28\n\n{\n\n29\n\nrequireAllSignatures\n\n:\n\nfalse\n\n,\n\n29\n\nrequireAllSignatures\n\n:\n\nfalse\n\n,\n\n30\n\nverifySignatures\n\n:\n\ntrue\n\n,\n\n30\n\nverifySignatures\n\n:\n\ntrue\n\n,\n\n31\n\n}\n\n31\n\n}\n\n32\n\n)\n\n;\n\n32\n\n)\n\n;\n\n33\n\n33\n\n34\n\nconst\n\nsignature\n\n=\n\nawait\n\nconnection\n\n?.\n\nsendRawTransaction\n\n(\n\n34\n\nconst\n\nsignature\n\n=\n\nawait\n\nconnection\n\n?.\n\nsendRawTransaction\n\n(\n\n35\n\nBuffer\n\n.\n\nfrom\n\n(\n\nsignedTransaction\n\n?.\n\nrawTransaction\n\nas\n\nstring\n\n,\n\n\"base64\"\n\n)\n\n35\n\nBuffer\n\n.\n\nfrom\n\n(\n\nsignedTransaction\n\n?.\n\nrawTransaction\n\nas\n\nstring\n\n,\n\n\"base64\"\n\n)\n\n36\n\n)\n\n\u2060\n\n;\n\n36\n\n)\n\n\u2060\n\n;\n\n37\n\n37\n\n38\n\n\u2060\n\nconsole\n\n.\n\nlog\n\n(\n\nsignature\n\n)\n\n;\n\n38\n\n\u2060\n\nconsole\n\n.\n\nlog\n\n(\n\nsignature\n\n)\n\n;", "explanation": "**Sign and Send Transaction on Solana Blockchain**\n\nThe provided documentation section describes how to sign and send a transaction on the Solana blockchain using the Magic Labs embedded wallet.\n\n**Main Purpose:**\n\nThe main purpose of this documentation is to guide developers on how to use the Magic Solana extension to sign a transaction and send it to the Solana blockchain using the Solana web3.js library.\n\n**Key Steps:**\n\n1. **Initialize Magic and Solana**: The developer must ensure that the Magic SDK is initialized with the Solana extension and that the user is already authenticated.\n2. **Get User Metadata and Public Key**: The developer retrieves the user's metadata and public key using the `magic.user.getMetadata()` method.\n3. **Create a New Transaction**: The developer creates a new transaction using the Solana web3.js library, specifying the sender, recipient, and amount of lamports.\n4. **Sign the Transaction**: The developer uses the `magic.solana.signTransaction()` method to sign the transaction.\n5. **Send the Signed Transaction**: The developer uses the Solana web3.js library to send the signed transaction to the Solana blockchain.\n\n**Important Notes:**\n\n* The developer must ensure that the user is already authenticated and that the Magic SDK is initialized with the Solana extension.\n* The `requireAllSignatures` and `verifySignatures` parameters are set to `false` and `true`, respectively, to allow for partial signing and verification of the transaction.\n\nBy following these steps and using the Magic Labs embedded wallet, developers can easily sign and send transactions on the Solana blockchain.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/featured-chains/solana#chunk-4", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n#\n\nCopy\n\n01\n\n// Ensure you have Magic initialized with the Solana extension\n\n01\n\n// Ensure you have Magic initialized with the Solana extension\n\n02\n\n// Ensure that user is already authenticated\n\n02\n\n// Ensure that user is already authenticated\n\n03\n\n03\n\n04\n\nconst\n\nsignedMessage\n\n=\n\nawait\n\nmagic\n\n?.\n\nsolana\n\n.\n\nsignMessage\n\n(\n\n\"Hello World\"\n\n)\n\n04\n\nconst\n\nsignedMessage\n\n=\n\nawait\n\nmagic\n\n?.\n\nsolana\n\n.\n\nsignMessage\n\n(\n\n\"Hello World\"\n\n)\n\n05\n\n\u2060\n\n05\n\n\u2060\n\n06\n\nconsole\n\n.\n\nlog\n\n(\n\nsignedMessage\n\n)\n\n06\n\nconsole\n\n.\n\nlog\n\n(\n\nsignedMessage\n\n)", "explanation": "**Signing a Message with Magic Labs Solana Extension**\n\nThis documentation section explains how to use the Magic Labs Solana extension to sign a message using the user's digital wallet. The main purpose of this feature is to enable users to securely sign a message, which can be used for various purposes such as authentication, verification, or data validation.\n\n**Key Steps:**\n\n1. **Initialize Magic with Solana extension**: Ensure that Magic is initialized with the Solana extension, which enables the user's digital wallet to be accessed.\n2. **Ensure user authentication**: Verify that the user is already authenticated, meaning their digital wallet is connected and ready for use.\n3. **Use the `signMessage` method**: Utilize the `signMessage` method of the Solana extension to generate a signature for the specified message (\"Hello World\" in this example).\n4. **Log the signed message**: Print the signed message to the console for verification purposes.\n\n**Example Code:**\n```typescript\nconst signedMessage = await magic?.solana?.signMessage(\"Hello World\");\nconsole.log(signedMessage);\n```\nBy following these steps, developers can securely sign messages using the user's digital wallet, enabling a range of applications in the realm of authentication, verification, and data validation.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/featured-chains/solana#chunk-5", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 Magic Solana SDK\n\n\u2022 Solana JavaScript Web3 example\n\n\u2022 Solana Faucet\n\n\u2022 How to use email to create wallets on Solana\n\nMagic Solana SDK\n\nSolana JavaScript Web3 example\n\nSolana Faucet\n\nHow to use email to create wallets on Solana", "explanation": "The '#Resources' section is a collection of useful links and guides that provide additional support and information for working with the Magic Labs embedded wallet on the Solana blockchain.\n\nThe main purpose of this section is to offer quick access to various resources, including:\n\n1. Documentation for specific SDKs (Software Development Kits) and examples of how to implement them on the Solana blockchain.\n2. Tutorials and guides on how to use various features and tools, such as creating wallets using email.\n\nThe resources listed in this section can help developers, users, and technical teams to:\n\n- Set up and integrate the Magic Labs embedded wallet with their projects or applications on Solana.\n- Find examples and code snippets for reference.\n- Access testing tools, such as faucets, to test their wallets and applications.\n\nOverall, the '#Resources' section serves as a gateway to a wealth of supporting information, enabling users to get the most out of the Magic Labs embedded wallet on the Solana blockchain.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/featured-chains/solana#chunk-6", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nYou can allow your users to sign up & login into your web application with their GitLab account.", "explanation": "The documentation section 'GitLab Social Login with Magic - #Overview' describes the process of integrating GitLab social login into a web application using Magic Labs' authentication services. This feature allows users to sign up and log in to the application using their existing GitLab account credentials, providing a seamless and secure user experience.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/login/social-logins/social-providers/gitlab#chunk-1", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n#\n\nMagic SDK offers two OAuth extensions: v1 and v2. For web applications, it is recommended to use v2, while v1 should be used for mobile applications.\n\nv1\n\nv2\n\n\u2022 You will need a GitLab account\n\n\u2022 You will need to have the Magic SDK installed into your web app\n\n\u2022 You will need to have the Magic SDK - OAuth Extension installed into your web app\n\nGitLab\n\nMagic SDK installed\n\nMagic SDK - OAuth Extension", "explanation": "This section is titled '#Usage - #Prerequisites' from the Magic Labs embedded wallet documentation. It outlines the necessary steps and requirements to successfully integrate the GitLab OAuth provider with the Magic SDK.\n\n**Main Purpose:**\nThe purpose of this section is to list the prerequisites needed to access the GitLab OAuth flow using the Magic SDK.\n\n**Key Requirements:**\n\n1. **GitLab Account:** You must have an active GitLab account to utilize the OAuth flow.\n2. **Magic SDK Installation:** The Magic SDK must be installed in your web application.\n3. **Magc SDK - OAuth Extension:** The Magic SDK - OAuth Extension must also be installed in your web application.\n\nBy meeting these prerequisites, you can proceed with the login flow using the GitLab OAuth provider and the Magic SDK.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/login/social-logins/social-providers/gitlab#chunk-2", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nAfter installing the OAuth extension, you can now enable GitLab Login for your Magic app:\n\n\u2022 Go to your Magic Dashboard\n\n\u2022 Select the Magic app for which you\u2019d like to enable GitLab Login, or create a new app\n\n\u2022 Navigate to Social Login from the sidebar\n\n\u2022 Click the toggle for GitLab\n\n\u2022 Copy the Redirect URI field from your Magic Dashboard\n\n\u2022 Go to GitLab App Dashboard.\n\n\u2022 On the left sidebar, select your avatar\n\n\u2022 Select Edit Profile\n\n\u2022 On the left sidebar, select Applications\n\n\u2022 Select Add new application\n\n\u2022 In the application form, enter a Name (arbitrary), and make sure to paste the Redirect URI from step 5, into the input field\n\n\u2022 Make sure to tick openid, profile, email in the Scopes\n\n\u2022 When you click Save application you are provided with the application ID and the application secret which you can then use with your application that connects to GitLab\n\n\u2022 Return to your Magic Dashboard and input the Application Id and Secret for your GitLab OAuth app\n\n\u2022 In Magic Dashboard, click \u201cSave\u201d \u2013 Done!\n\nMagic Dashboard", "explanation": "**GitLab Setup (v1 extension) Overview:**\n\nThe GitLab Setup documentation is a step-by-step guide for integrating GitLab Login functionality into a Magic app. Its main purpose is to enable users to sign in with their GitLab credentials through a Magic app.\n\n**Main Purpose:**\n\nThe main goal of this setup is to allow users to authenticate with a Magic app using their GitLab account. By following these instructions, developers can implement OAuth-based authentication between a Magic app and a GitLab account, providing a seamless login experience for users.\n\n**Key Components:**\n\n1. **Magic Dashboard:** The central hub where developers manage their Magic apps and social login integrations.\n2. **GitLab App Dashboard:** The interface where developers configure their GitLab application and obtain the necessary credentials for integration.\n3. **Redirect URI:** A field in the Magic Dashboard that contains the URI used for redirecting users after successful authentication.\n4. **Application ID and Secret:** The unique identifiers obtained from the GitLab App Dashboard, used to authenticate with the Magic app.\n5. **Scopes:** The permissions granted by the user's GitLab account, such as openid, profile, and email, required for authentication.\n\n**Outcome:**\n\nBy completing the GitLab Setup (v1 extension), developers can add GitLab Login functionality to their Magic app, enabling users to sign in securely and efficiently. This integration leverages the OAuth 2.0 protocol to provide a seamless authentication experience.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/login/social-logins/social-providers/gitlab#chunk-3", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 Follow above steps, but disregard Magic's Redirect URI in step 5\n\n\u2022 In step 11, paste the Redirect URI you are passing in as the redirectURI argument to the loginWithRedirect method\n\nCopy\n\n01\n\nawait\n\nmagic\n\n.\n\noauth2\n\n.\n\nloginWithRedirect\n\n(\n\n{\n\n01\n\nawait\n\nmagic\n\n.\n\noauth2\n\n.\n\nloginWithRedirect\n\n(\n\n{\n\n02\n\nprovider\n\n:\n\n'gitlab'\n\n,\n\n02\n\nprovider\n\n:\n\n'gitlab'\n\n,\n\n03\n\nredirectURI\n\n:\n\n'https://your-app.com/your/oauth/callback'\n\n,\n\n// <== whitelist this with Gitlab\n\n03\n\nredirectURI\n\n:\n\n'https://your-app.com/your/oauth/callback'\n\n,\n\n// <== whitelist this with Gitlab\n\n04\n\n}\n\n)\n\n;\n\n04\n\n}\n\n)\n\n;", "explanation": "**GitLab Setup (v2 extension)**\n\nThis documentation section outlines the steps to integrate GitLab login functionality into your Magic Labs embedded wallet.\n\n**Main Purpose:**\n\nThe main purpose of this section is to guide developers on how to configure GitLab authentication for their Magic Labs embedded wallet. It provides the necessary steps to set up and integrate GitLab login functionality, specifically highlighting the differences in configuration compared to other social providers.\n\n**Key Takeaways:**\n\n1. **Disregard Magic's Redirect URI**: Unlike other social providers, when setting up GitLab, you should not use Magic's default Redirect URI. Instead, you should use the Redirect URI specified in the `loginWithRedirect` method.\n2. **Whitelist the Redirect URI with GitLab**: Make sure to whitelist the Redirect URI (`https://your-app.com/your/oauth/callback`) with GitLab.\n3. **Configure the `loginWithRedirect` method**: Use the `loginWithRedirect` method from the Magic Labs SDK, passing in the necessary parameters, including the `provider` (set to `'gitlab'`) and the `redirectURI`.\n\nBy following these steps, developers can successfully integrate GitLab login functionality into their Magic Labs embedded wallet, allowing users to log in seamlessly using their GitLab credentials.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/login/social-logins/social-providers/gitlab#chunk-4", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 GitLab Social Login Demo\n\nGitLab Social Login Demo", "explanation": "In the Magic Labs embedded wallet documentation, the '#Resources' section typically contains helpful references, guides, and examples that can aid with implementing and troubleshooting the Magic Labs features.\n\nIn this specific section, it appears that there is a resource named 'GitLab Social Login Demo'. \n\nThe main purpose of this resource, 'GitLab Social Login Demo', is to provide a demonstration or example of how to implement GitLab social login functionality within an embedded wallet using the Magic Labs service. This demo likely includes steps, code snippets, or visual guides that developers can use as a reference to integrate GitLab social login functionality into their applications. The overall goal is to assist developers in successfully setting up GitLab social login within Magic Labs.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/login/social-logins/social-providers/gitlab#chunk-5", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nThe Magic admin PHP SDK is your entry-point to secure, passwordless authentication for your application. This guide will cover some important topics for getting started with the PHP SDK and to make the most of Magic's features.", "explanation": "This documentation section, titled 'PHP API Reference - #Overview', serves as the introduction to the Magic Labs embedded wallet's PHP API. The main purpose of this section is to provide an overview of the Magic admin PHP SDK, which is the starting point for incorporating secure and passwordless authentication in your application.\n\nIn essence, this section:\n\n1. Introduces the Magic admin PHP SDK as a gateway to implementing secure authentication in your PHP-based application.\n2. Sets the stage for covering essential topics and features to get started with the PHP SDK.\n\nThe section's primary goal is to provide a framework for developers to successfully integrate Magic's authentication capabilities into their PHP-based applications.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/php#chunk-1", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nThe Magic class is the entry-point to the Magic SDK. It must be instantiated with a Magic secret key.\n\n#\n\nCopy\n\n01\n\ncomposer\n\nrequire magiclabs/magic-admin-php\n\n01\n\ncomposer\n\nrequire magiclabs/magic-admin-php", "explanation": "**Getting Started - Installation Section**\n\nThis section is about setting up the Magic Labs Embedded Wallet SDK for PHP. It explains the steps needed to begin working with the Magic SDK.\n\n**Main Purpose:**\n\nThe primary purpose of this section is to guide users in installing and initializing the Magic class, which serves as the entry-point to the Magic PHP SDK. This initial step is crucial for creating and using Magic instances, wallet connections, and other capabilities within the SDK.\n\n**Key Takeaways:**\n\n1. The Magic class requires a Magic secret key to be instantiated.\n2. The installation process involves two Composer commands to add the Magic Admin PHP package to the project.\n3. This section is a prerequisite for working with the Magic PHP SDK and creating wallets, connections, and other features.\n\nBy following this section, developers can successfully set up the Magic Labs Embedded Wallet SDK for PHP, enabling them to use the SDK's features and functions within their project.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/php#chunk-2", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n#\n\nnew \\MagicAdmin\\Magic()\n\nParameter\n\nType\n\nDefinition\n\napi_secret_key\n\napi_secret_key\n\nstr\n\nYour secret API Key retrieved from the Magic Dashboard.\n\nretries?\n\nretries?\n\nnum\n\nTotal number of retries to allow.\n\ntimeout?\n\ntimeout?\n\nnum\n\nA period of time the request is going to wait for a response.\n\nbackoff_factor?\n\nbackoff_factor?\n\nnum\n\nA backoff factor to apply between retry attempts.", "explanation": "**Constructor: `new \\MagicAdmin\\Magic()`**\n\nThe `new \\MagicAdmin\\Magic()` constructor is a key part of the Magic Labs embedded wallet API documentation for PHP. It initializes an instance of the `Magic` class, allowing you to use various methods for interacting with the Magic API.\n\n**Main Purpose:**\n\nThe main purpose of this constructor is to authenticate your application with the Magic API using your secret API Key, retrieved from the Magic Dashboard. This API Key ensures that your requests are uniquely identified and authorized.\n\n**Constructor Parameters:**\n\nThe constructor takes 5 parameters:\n\n1. **`api_secret_key`**: Your secret API Key (string).\n2. **`retries`** (optional): The total number of retries to allow in case of a request failure (number).\n3. **`timeout`** (optional): A period of time to wait for a response (number).\n4. **`backoff_factor`** (optional): A backoff factor to apply between retry attempts (number).\n\n**Example:**\n```php\n$magic = new \\MagicAdmin\\Magic(\n    'your_secret_api_key_here',\n    3, // 3 retries\n    5, // 5 seconds timeout\n    1.5 // backoff factor\n);\n```\nBy instantiating the `Magic` class with your API Key and custom settings, you can begin using the Magic API methods for features like wallet creation, authentication, and payment processing.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/php#chunk-3", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\n$magic\n\n=\n\nnew\n\n\\\n\nMagicAdmin\n\n\\\n\nMagic\n\n(\n\n01\n\n$magic\n\n=\n\nnew\n\n\\\n\nMagicAdmin\n\n\\\n\nMagic\n\n(\n\n02\n\n'<SECRET_API_KEY>'\n\n,\n\n02\n\n'<SECRET_API_KEY>'\n\n,\n\n03\n\n5\n\n,\n\n03\n\n5\n\n,\n\n04\n\n5\n\n,\n\n04\n\n5\n\n,\n\n05\n\n0.01\n\n,\n\n05\n\n0.01\n\n,\n\n06\n\n)\n\n;\n\n06\n\n)\n\n;", "explanation": "**Initialization Section Explanation**\n\nThe provided documentation section explains how to initialize the Magic Labs embedded wallet in a PHP environment. This process is crucial for setting up the wallet and enabling secure transactions between the user and the system.\n\n**Main Purpose**\n\nThe main purpose of this initialization is to create a Magic Labs wallet instance, which can then be used to facilitate various functions such as transactions, user authentication, and more. This initialization requires several parameters, including:\n\n- `SECRET_API_KEY`: a secret key provided by Magic Labs for authentication.\n- The `callback_url` and `intent_id` are not required, which can be left at 5 if they are not needed.\n- The `gas_price_bearer` and `native_currency_precision`, can be anything from a number of floating points (you can easily use 0.01 if the rest are 0.01 and any other callback setting of number type), or a number.\n\n**Initialization Code Breakdown**\n\nTo break down the code:\n\n```php\n$magic = new MagicAdmin\\Magic(\n    '<SECRET_API_KEY>',\n    '<SECRET_API_KEY>',\n    5,\n    5,\n    5,\n    0.01,\n    0.01,\n    0\n);\n```\n\nHere, we're creating a new instance of the Magic Labs wallet with the provided API key and other configurations.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/php#chunk-4", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nThe token resource and its methods are accessible on the Magic instance by the token attribute. It provides methods to interact with the DID Token.\n\ntoken\n\nThe token resource does not make any API calls to the Magic server.\n\nCopy\n\n01\n\n$magic\n\n=\n\nnew\n\n\\\n\nMagicAdmin\n\n\\\n\nMagic\n\n(\n\n'<SECRET_API_KEY>'\n\n)\n\n;\n\n01\n\n$magic\n\n=\n\nnew\n\n\\\n\nMagicAdmin\n\n\\\n\nMagic\n\n(\n\n'<SECRET_API_KEY>'\n\n)\n\n;\n\n02\n\n02\n\n03\n\n$magic\n\n->\n\ntoken\n\n03\n\n$magic\n\n->\n\ntoken\n\n04\n\n$magic\n\n->\n\ntoken\n\n->\n\nget_issuer\n\n04\n\n$magic\n\n->\n\ntoken\n\n->\n\nget_issuer\n\n05\n\n$magic\n\n->\n\ntoken\n\n->\n\nget_public_address\n\n05\n\n$magic\n\n->\n\ntoken\n\n->\n\nget_public_address\n\n06\n\n$magic\n\n->\n\ntoken\n\n->\n\ndecode\n\n06\n\n$magic\n\n->\n\ntoken\n\n->\n\ndecode\n\n07\n\n$magic\n\n->\n\ntoken\n\n->\n\nvalidate\n\n07\n\n$magic\n\n->\n\ntoken\n\n->\n\nvalidate\n\n#\n\nget_issuer\n\nExtracts the iss from the DID Token.\n\niss\n\nDID Token\n\nCopy\n\n01\n\ntoken\n\n.\n\nget_issuer\n\n(\n\ndid_token\n\n)\n\n;\n\n01\n\ntoken\n\n.\n\nget_issuer\n\n(\n\ndid_token\n\n)\n\n;\n\n#\n\n\u2022 did_token (str): A DID Token generated by a Magic User on the client-side\n\ndid_token", "explanation": "Let's break down the provided documentation to understand its purpose and main function.\n\n**Introduction to the Token Resource**\n\nThe token resource is accessible through the `token` attribute on a Magic instance. It provides methods to interact with the DID Token, which is generated on the client-side by a Magic User. The token resource does not make any API calls to the Magic server, making it a helpful tool for working with DID Tokens locally.\n\n**Main Purpose: get_issuer Method**\n\nThe `get_issuer` method is one of the methods provided by the token resource. Its main purpose is to **extract the `iss` value from a DID Token**, which is an essential field in the DID Token structure.\n\n**Argument: did_token**\n\nThe `get_issuer` method requires a single argument, `did_token`, which is a string representing a DID Token generated on the client-side. This DID Token is likely retrieved using a client-side JavaScript SDK.\n\n**How to Use the get_issuer Method**\n\nTo use the `get_issuer` method, you would need to:\n\n1. Initialize a Magic instance using your secret API key.\n2. Access the token resource using the `token` attribute on your Magic instance.\n3. Call the `get_issuer` method on the token resource, passing the DID Token as an argument.\n\nBy extracting the issuer from a DID Token, you can verify the authenticity of the token and determine its origin. This information is critical for secure authentication and authorization in various applications.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/php#chunk-5", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 DIDTokenException if the given DID Token is malformed\n\nDIDTokenException", "explanation": "The given section '#Raises' from the Magic Labs embedded wallet documentation appears to describe potential exceptions that may be thrown by the `PHP` SDK when working with DID (Decentralized Identifier) tokens.\n\n**Translation:**\n\nIn simpler terms, this summary indicates that if there's an error with the DID token that's given, this would result in an exception called `DIDTokenException` being raised.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/php#chunk-6", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 A Decentralized ID (iss) of the Magic user who generated the DID Token\n\niss", "explanation": "The '#Returns' documentation section in the Magic Labs embedded wallet PHP SDK is a description of the expected response format when a call to the Magic APIs is successful. \n\nIn this specific case, the 'Returns' section is listing the properties that will be included in the response, which are part of the Decentralized ID (DID Token). \n\nThe main purpose of this section is to inform the developer about the structure and content of the response data they will receive from the Magic API after making a request. This information is crucial for proper handling and processing of the API's response in their PHP application.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/php#chunk-7", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nget_public_address\n\nGets the cryptographic public address of the Magic User who generated the supplied DID Token.\n\npublic address\n\nCopy\n\n01\n\ntoken\n\n.\n\nget_public_address\n\n(\n\ndid_token\n\n)\n\n;\n\n01\n\ntoken\n\n.\n\nget_public_address\n\n(\n\ndid_token\n\n)\n\n;\n\n#\n\n\u2022 did_token (str): A DID Token generated by a Magic user on the client-side\n\ndid_token", "explanation": "Here's a clear and concise explanation of the '#get_public_address - #Arguments' section from the Magic Labs embedded wallet documentation:\n\n**Description:** The `get_public_address` function retrieves the cryptographic public address of the Magic User who generated the provided `DID Token`.\n\n**Purpose:** The main purpose of `get_public_address` is to verify the identity of a Magic User by linking their `DID Token` to a public wallet address. This allows for secure and decentralized interactions between users.\n\n**Arguments:**\n\n* `did_token`: A string representing the `DID Token` generated by the Magic User on the client-side. This token serves as a unique identifier for the user.\n\nIn summary, the `get_public_address` function takes a `DID Token` as input and returns the corresponding public wallet address, enabling secure verification and authentication of Magic Users.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/php#chunk-8", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 DIDTokenException if the given DID Token is malformed\n\nDIDTokenException", "explanation": "Based on the provided documentation from Magic Labs' embedded wallet, the `#Raises` section describes the possible exceptions that may be thrown when using specific functions or methods in the Magic Labs' PHP server-side SDK.\n\nIn this case, the `#Raises` section mentions a single exception:\n\n- `DIDTokenException`: This exception is thrown when the given DID Token is malformed. A DID Token is a unique token used to authenticate and authorize interactions with the Magic Labs' wallet. A malformed DID Token means it does not meet the required format or structure, and therefore, cannot be used for authentication or authorization.\n\nThe main purpose of this `#Raises` section is to alert developers to the potential exceptions that can occur when using the Magic Labs' PHP server-side SDK, allowing them to handle and anticipate errors, and provide better error messaging and support to their users. By understanding the possible exceptions, developers can design more robust and error-handling-friendly applications, ensuring a better user experience.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/php#chunk-9", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 A public address of the Magic User who generated the DID Token. Currently, this value is associated with the Ethereum blockchain.\n\npublic address", "explanation": "According to the Magic Labs embedded wallet documentation, the '#Returns' section corresponds to the expected output when making API calls using the Magic PHP SDK.\n\nWithin this section, we have information about the potential return values, specifically the 'public address' of the Magic User who generated the DID Token. \n\nThe 'public address' is the main purpose here. It represents the unique identifier associated with the user on the Ethereum blockchain. In other words, it's the public key linked to the Magic user's digital identity. \n\nIn essence, this public address is used to verify the user's identity and it's crucial for linking the user's Magic DID Token with the Ethereum blockchain.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/php#chunk-10", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\ndecode\n\nDecodes a DID Token from a Base64 string into a tuple of its individual components: proof and claim. This method allows you decode the DID Token and inspect the token. You can apply your own rules and validations on top of the current token.validate method.\n\nproof\n\nclaim\n\ntoken.validate\n\nCopy\n\n01\n\ntoken\n\n.\n\ndecode\n\n(\n\ndid_token\n\n)\n\n;\n\n01\n\ntoken\n\n.\n\ndecode\n\n(\n\ndid_token\n\n)\n\n;\n\n#\n\n\u2022 did_token (str): A DID Token generated by a Magic user on the client-side\n\ndid_token", "explanation": "**decode Method: Decoding DID Tokens**\n\nIn the Magic Labs' embedded wallet PHP SDK documentation, the `#decode` section explains a method that decodes a DID Token from a Base64 string into its individual components.\n\n**Main Purpose:**\nThe main purpose of the `#decode` method is to inspect and validate the contents of a DID Token. By decoding the token, you can examine its components, such as the proof and claim, to apply custom rules and validations on top of the built-in `token.validate` method.\n\n**Method Signature:**\n```php\ndecode(token)\n```\n**Argument:**\n\n* `did_token` (str): A DID Token generated by a Magic user on the client-side, encoded as a Base64 string.\n\n**Decoded Output:**\nThe decoded output consists of two components:\n\n* `proof`\n* `claim`\n\nThe `decode` method returns a tuple containing these two components, allowing you to inspect and validate the DID Token as needed.\n\n**Example:**\n```php\n$decodedToken = token->decode($didToken);\nprint_r($decodedToken); // Output: Array ('proof' => ..., 'claim' => ...)\n```", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/php#chunk-11", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 DIDTokenException if the given DID Token is malformed\n\nDIDTokenException", "explanation": "Based on the provided documentation from Magic Labs, the section titled '#Raises' is about the potential exceptions that may be thrown when using the Magic Labs PHP SDK for server-side SDKs.\n\nIn this specific section, it mentions that two exceptions may be raised:\n\n1. `DIDTokenException`: This exception is thrown when the given DID Token (Decentralized Identifier Token) is malformed. A malformed DID Token means that it does not conform to the expected format or structure. This exception is likely to be raised when the SDK tries to validate or process the DID Token, and it fails due to an error in the token's format.\n\nThe main purpose of this section is to inform developers about the potential exceptions that may occur when using the Magic Labs PHP SDK, specifically when working with DID Tokens. By knowing about these exceptions, developers can handle them properly in their code, ensuring robust and error-free execution.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/php#chunk-12", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 proof (str): A digital signature that proves the validity of the given claim\n\n\u2022 claim (array): Unsigned data the user asserts. This should equal the proof after Elliptic Curve recovery. See Decentralized Token Specification for fields inside the claim.\n\nproof\n\nclaim\n\nclaim\n\nproof\n\nDecentralized Token Specification\n\nclaim", "explanation": "In the '#Returns' section of the Magic Labs embedded wallet documentation for the PHP server-side SDK, it explains the format and content of the return values from a verification request.\n\nThe returning values include two main parts:\n\n1. **proof (str):** This is a digital signature that confirms the validity of the provided claim. The proof is used to verify the integrity and authenticity of the data being asserted.\n\n2. **claim (array):** This is the unsigned data that the user is asserting. The claim should match the proof after Elliptic Curve recovery.\n\nThe main purpose of this section is to provide information on how to handle and validate the return data from a Magic Labs embedded wallet verification request. The provided values enable you to verify the authenticity and integrity of the data being asserted, ensuring a secure and trustworthy interaction between your application and the embedded wallet. \n\nBy following this documentation, you can accurately interpret and process the return data, allowing for seamless integration of Magic Labs embedded wallet functionality within your application.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/php#chunk-13", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nvalidate\n\nValidates a DID token.\n\nCopy\n\n01\n\ntoken\n\n.\n\nvalidate\n\n(\n\ndid_token\n\n)\n\n;\n\n01\n\ntoken\n\n.\n\nvalidate\n\n(\n\ndid_token\n\n)\n\n;\n\n#\n\n\u2022 did_token (str): A DID Token generated by a Magic user on the client-side\n\ndid_token", "explanation": "**Validation in Magic Labs Embedded Wallet**\n\nThe `#validate` section in Magic Labs embedded wallet documentation discusses the process of validating a DID Token (Decentralized Identifier Token) generated by users on the client-side.\n\n**Purpose:**\n\nThe primary goal of `#validate` is to verify the legitimacy and authenticity of a DID Token. This ensures that the token is properly formed, has not been tampered with, and corresponds to a valid user on the Magic platform.\n\n**Key Functionality:**\n\nThe `validate` function takes one argument:\n\n- `did_token` (string): A unique identifier generated by a Magic user on the client-side, represented as a string.\n\n**In Summary:**\n\nBy utilizing the `#validate` section, developers can confidently verify the authenticity of DID Tokens, ensuring seamless user experience and trust within their Magic Labs embedded wallet application.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/php#chunk-14", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 DIDTokenException if the given DID Token is invalid or malformed\n\nDIDTokenException", "explanation": "Based on the provided documentation from Magic Labs, the '#Raises' section is used to describe the exceptions that may be thrown when using the Magic Labs Embedded Wallet.\n\nIn this context, '#Raises' is used to inform developers about the potential errors that may occur when validating a DID (Decentralized Identifier) Token. \n\nThe main purpose of the '#Raises' section is to:\n\n* Warn developers about potential exceptions that may be thrown\n* Provide information on the possible exception types (e.g., `DIDTokenException`)\n* Give developers guidance on how to anticipate and handle these exceptions in their code.\n\nIn this specific case, if the DID Token is invalid or malformed, the `DIDTokenException` exception will be thrown. By understanding this, developers can write robust code to handle and mitigate such errors.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/php#chunk-15", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 None", "explanation": "The '#Returns' documentation section you're referring to is actually empty, indicating that the Magic Labs Embedded Wallet API for PHP currently does not have any specific return information or behaviors documented.\n\nGiven this empty section, the main purpose of such a section, if it were populated, would be to describe the expected responses from the API after making a request. This could include:\n\n* HTTP status codes returned by the API\n* The structure and content of response payloads\n* Any notable error handling or edge cases\n\nHowever, since the section is empty, it suggests that the API's return behaviors are not explicitly defined in the documentation, or that they are still being developed or added.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/php#chunk-16", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nThe user resource and its methods are accessible on the Magic instance by the user attribute. It provides methods to interact with the User.\n\nuser\n\nCopy\n\n01\n\n$magic\n\n=\n\nnew\n\n\\\n\nMagicAdmin\n\n\\\n\nMagic\n\n(\n\n'<SECRET_API_KEY>'\n\n)\n\n;\n\n01\n\n$magic\n\n=\n\nnew\n\n\\\n\nMagicAdmin\n\n\\\n\nMagic\n\n(\n\n'<SECRET_API_KEY>'\n\n)\n\n;\n\n02\n\n02\n\n03\n\n$magic\n\n->\n\nuser\n\n03\n\n$magic\n\n->\n\nuser\n\n04\n\n$magic\n\n->\n\nuser\n\n->\n\nget_metadata_by_issuer\n\n04\n\n$magic\n\n->\n\nuser\n\n->\n\nget_metadata_by_issuer\n\n05\n\n$magic\n\n->\n\nuser\n\n->\n\nget_metadata_by_public_address\n\n05\n\n$magic\n\n->\n\nuser\n\n->\n\nget_metadata_by_public_address\n\n06\n\n$magic\n\n->\n\nuser\n\n->\n\nget_metadata_by_token\n\n06\n\n$magic\n\n->\n\nuser\n\n->\n\nget_metadata_by_token\n\n07\n\n$magic\n\n->\n\nuser\n\n->\n\nlogout_by_issuer\n\n07\n\n$magic\n\n->\n\nuser\n\n->\n\nlogout_by_issuer\n\n08\n\n$magic\n\n->\n\nuser\n\n->\n\nlogout_by_public_address\n\n08\n\n$magic\n\n->\n\nuser\n\n->\n\nlogout_by_public_address\n\n09\n\n$magic\n\n->\n\nuser\n\n->\n\nlogout_by_token\n\n09\n\n$magic\n\n->\n\nuser\n\n->\n\nlogout_by_token\n\n#\n\nget_metadata_by_issuer\n\nRetrieves information about the user by the supplied iss from the DID Token. This method is useful if you store the iss with your user data, which is recommended.\n\niss\n\niss\n\nCopy\n\n01\n\nuser\n\n.\n\nget_metadata_by_issuer\n\n(\n\nissuer\n\n)\n\n;\n\n01\n\nuser\n\n.\n\nget_metadata_by_issuer\n\n(\n\nissuer\n\n)\n\n;\n\n#\n\n\u2022 issuer (str): The user's Decentralized ID, which can be parsed using token.get_issuer\n\nissuer\n\ntoken.get_issuer", "explanation": "**get_metadata_by_issuer Documented Function**\n\n**Purpose:**\n\nThe `get_metadata_by_issuer` function is a method within the Magic Labs Embedded Wallet User Resource that retrieves user information based on the supplied issuer (Decentralized ID) from the DID Token.\n\n**Main Functionality:**\n\nThis method is designed to fetch user metadata by the issuer (Decentralized ID). It is particularly useful when storing the issuer with user data, which is highly recommended.\n\n**Main Argument:**\n\n* `issuer (str)`: The user's Decentralized ID, which can be obtained using `token.get_issuer`.\n\n**Usage Example:**\n\nTo use `get_metadata_by_issuer`, you would call the method on the `user` object, passing the required `issuer` argument:\n```php\n$magic->user->get_metadata_by_issuer(\n  issuer\n);\n```\nThis would return the user's metadata associated with the specified issuer.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/php#chunk-17", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 RateLimitingException: If you have sent too many requests within a given period of time\n\n\u2022 BadRequestException: If the supplied parameters are invalid\n\n\u2022 AuthenticationException: If your API secret key cannot be authenticated with Magic API server\n\n\u2022 ForbiddenException: If your API secret key is not authorized to access the resources\n\n\u2022 ApiException: For any other API error\n\n\u2022 ApiConnectionException: If your server cannot communicate with the Magic server. Normally this is a network communication error.\n\nRateLimitingException\n\nBadRequestException\n\nAuthenticationException\n\nForbiddenException\n\nApiException\n\nApiConnectionException\n\nSee Error Handling for more examples.\n\nError Handling", "explanation": "**Understanding #Raises in Magic Labs Server-Side SDK Documentation**\n\nIn the context of the Magic Labs Server-Side SDK documentation, specifically within the PHP implementation, the '#Raises' section is concerned with detailing various exceptions that may be thrown during API interactions.\n\n**Main Purpose: Exception Handling**\n\nThe purpose of the '#Raises' section is to inform developers about the possible exceptions that can occur when using the Magic Labs API, and how to handle these exceptions effectively. By knowing what exceptions to expect, developers can write robust and error-resilient code to handle various scenarios, such as:\n\n1. Rate limiting (RateLimitingException)\n2. Invalid request parameters (BadRequestException)\n3. Authentication issues (AuthenticationException)\n4. Authorization problems (ForbiddenException)\n5. Any other API-related errors (ApiException)\n6. Network communication issues (ApiConnectionException)\n\nThis section serves as a reference for developers to write better error handling mechanisms in their code, ensuring that their applications can handle and recover from these exceptions appropriately.\n\n**Error Handling**\n\nThe documentation also provides a link to the full error handling examples, which can be useful for developers to learn how to handle these exceptions in their code.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/php#chunk-18", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 A MagicResponse: The data field contains all of the user meta information.issuer (str): The user's Decentralized IDpublic_address (str): The authenticated user's public address (a.k.a.: public key). Currently, this value is associated with the Ethereum blockchain.email (str): The user's email addressphone_number (str): The user's phone numberoauth_provider (str): OAuth provider, if anywallets (arr): Array of user's wallet addresses\n\nMagicResponse\n\nMagicResponse\n\ndata\n\n\u2022 issuer (str): The user's Decentralized ID\n\n\u2022 public_address (str): The authenticated user's public address (a.k.a.: public key). Currently, this value is associated with the Ethereum blockchain.\n\n\u2022 email (str): The user's email address\n\n\u2022 phone_number (str): The user's phone number\n\n\u2022 oauth_provider (str): OAuth provider, if any\n\n\u2022 wallets (arr): Array of user's wallet addresses\n\nissuer\n\npublic_address\n\nemail\n\nphone_number\n\noauth_provider\n\nwallets", "explanation": "**Returns Section Explanation:**\n\nThe 'Returns' section in the Magic Labs embedded wallet documentation describes the structure of the data returned after a successful API call, specifically when authenticating a user or retrieving their meta information.\n\n**Main Purpose:**\n\nThe main purpose of this section is to clearly outline the data format and contents of the response, ensuring developers using the Magic SDK can easily integrate and utilize the data in their application.\n\n**Key Components:**\n\nThe 'Returns' section highlights the following key components:\n\n* A `MagicResponse` object, which contains all user meta information.\n* The `data` object within the `MagicResponse`, which holds the actual user data.\n* Detailed properties within the `data` object, including:\n\t+ `issuer`: The user's Decentralized ID.\n\t+ `public_address`: The user's public Ethereum blockchain address.\n\t+ `email`: The user's email address.\n\t+ `phone_number`: The user's phone number.\n\t+ `oauth_provider`: The OAuth provider used (if any).\n\t+ `wallets`: An array of the user's wallet addresses.\n\nBy understanding the structure and contents of the `MagicResponse`, developers can effectively retrieve and utilize user data in their application, enhancing the overall user experience.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/php#chunk-19", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nget_metadata_by_public_address\n\nRetrieves information about the user by the supplied public_address. This method is useful if you store the public_address with your user data.\n\npublic_address\n\npublic_address\n\nCopy\n\n01\n\nuser\n\n.\n\nget_metadata_by_public_address\n\n(\n\npublic_address\n\n)\n\n;\n\n01\n\nuser\n\n.\n\nget_metadata_by_public_address\n\n(\n\npublic_address\n\n)\n\n;\n\n#\n\n\u2022 public_address (str): The user's Ethereum public address, which can be parsed using token.get_public_address\n\npublic_address\n\ntoken.get_public_address", "explanation": "Based on the documentation, let's break down the explanation:\n\n**#get_metadata_by_public_address**\n\nThis section is about a method called `get_metadata_by_public_address`, which is used to retrieve information about a user from Magic Labs.\n\n**Main purpose:** Its main purpose is to fetch user data when you have their Ethereum public address stored with your user information. This method is particularly useful when you want to retrieve user metadata without requiring them to log in directly through the Magic Labs login flow.\n\n**Key argument:** The single required argument for this method is `public_address` (str), which is a user's Ethereum public address. This address can be obtained using the `token.get_public_address` method, as shown in the documentation. \n\nThis method seems to be effective for anonymous authentication (when users choose to use their anonymous addresses in place of typical emails) using the stored public_addresses to fetch user information.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/php#chunk-20", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 RateLimitingException: If you have sent too many requests within a given period of time\n\n\u2022 BadRequestException: If the supplied parameters are invalid\n\n\u2022 AuthenticationException: If your API secret key cannot be authenticated with Magic API server\n\n\u2022 ForbiddenException: If your API secret key is not authorized to access the resources\n\n\u2022 ApiException: For any other API error\n\n\u2022 ApiConnectionException: If your server cannot communicate with the Magic server. Normally this is a network communication error.\n\nRateLimitingException\n\nBadRequestException\n\nAuthenticationException\n\nForbiddenException\n\nApiException\n\nApiConnectionException\n\nSee Error Handling for more examples.\n\nError Handling", "explanation": "**#Raises: Exception Handling in Magic Labs Embedded Wallet Documentation**\n\nThe `#Raises` section in the Magic Labs embedded wallet documentation pertains to the potential exceptions that may be raised during the execution of API calls. These exceptions are categorized by their type and include information on the specific error scenarios they represent.\n\n**Main Purpose:**\n\nThe main purpose of the `#Raises` section is to provide developers with a clear understanding of the possible errors that may occur when using the Magic Labs API. By anticipating and handling these exceptions, developers can write robust and resilient code that can recover from errors and continue functioning as expected.\n\n**Types of Exceptions:**\n\nThe documentation lists five types of exceptions that may be raised:\n\n1. **RateLimitingException:** Indicates that the number of requests has exceeded the allowed limit within a specified timeframe.\n2. **BadRequestException:** Signifies that the supplied parameters or data are invalid or malformed.\n3. **AuthenticationException:** Occurs when the API secret key is invalid or cannot be authenticated with the Magic API server.\n4. **ForbiddenException:** Indicates that the API secret key is not authorized to access the requested resources.\n5. **ApiException:** A catch-all exception for any other API-related errors that do not fall under the other categories.\n6. **ApiConnectionException:** Represents a network communication error between the server and the Magic API server.\n\n**Error Handling:**\n\nThe documentation suggests that developers refer to the \"Error Handling\" section for more examples on how to handle these exceptions. By properly handling these exceptions, developers can ensure that their applications are resilient and provide a better user experience.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/php#chunk-21", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 A MagicResponse: The data field contains all of the user meta information.issuer (str): The user's Decentralized IDpublic_address (str): The authenticated user's public address (a.k.a.: public key). Currently, this value is associated with the Ethereum blockchain.email (str): The user's email addressphone_number (str): The user's phone numberoauth_provider (str): OAuth provider, if anywallets (arr): Array of user's wallet addresses\n\nMagicResponse\n\nMagicResponse\n\ndata\n\n\u2022 issuer (str): The user's Decentralized ID\n\n\u2022 public_address (str): The authenticated user's public address (a.k.a.: public key). Currently, this value is associated with the Ethereum blockchain.\n\n\u2022 email (str): The user's email address\n\n\u2022 phone_number (str): The user's phone number\n\n\u2022 oauth_provider (str): OAuth provider, if any\n\n\u2022 wallets (arr): Array of user's wallet addresses\n\nissuer\n\npublic_address\n\nemail\n\nphone_number\n\noauth_provider\n\nwallets", "explanation": "**Returns Section Explanation**\n\nThe '#Returns' section of the Magic Labs embedded wallet documentation describes the response object returned by the Magic.link API when a request is made.\n\n**Main Purpose**\n\nThe main purpose of this section is to clearly outline the structure and contents of the response object received from the API, helping developers understand how to properly parse and utilize the returned data.\n\n**Breaking Down the Response Object**\n\nThe response object is of type `MagicResponse`. Its `data` field contains the actual user information, which includes the following sub-fields:\n\n1. **issuer**: The user's Decentralized ID (a unique identifier).\n2. **public_address**: The user's public address (public key) associated with the Ethereum blockchain.\n3. **email**: The user's email address.\n4. **phone_number**: The user's phone number.\n5. **oauth_provider**: The OAuth provider used for authentication (if any).\n6. **wallets**: An array of the user's wallet addresses.\n\nThis detailed breakdown enables developers to successfully integrate the Magic.link API with their applications and utilize the returned user information accordingly.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/php#chunk-22", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nget_metadata_by_token\n\nRetrieves information about the user by the supplied DID Token.\n\nCopy\n\n01\n\nuser\n\n.\n\nget_metadata_by_token\n\n(\n\ndid_token\n\n)\n\n;\n\n01\n\nuser\n\n.\n\nget_metadata_by_token\n\n(\n\ndid_token\n\n)\n\n;\n\n#\n\n\u2022 did_token (str): A DID Token generated by a Magic User on the client-side\n\ndid_token", "explanation": "**#get_metadata_by_token - Main Purpose and Explanation**\n\nThe `get_metadata_by_token` function is a method in the Magic Labs embedded wallet documentation, used to retrieve specific user metadata information based on a valid Digital Identity (DID) token. The main purpose of this function is to verify a user's identity and obtain additional metadata associated with their account, such as email, name, address, etc.\n\n**Key Point:**\n\nThis function relies on a client-generated DID token to authenticate the user and ensure authorized access to sensitive information.\n\n**Function Call Syntax:**\n\n- `get_metadata_by_token(did_token)`, where:\n- `did_token` (string): A uniquely generated DID token, created by a Magic User on the client-side, which serves as a digital identifier for authentication and verification purposes.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/php#chunk-23", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 RateLimitingException: If you have sent too many requests within a given period of time\n\n\u2022 BadRequestException: If the supplied parameters are invalid\n\n\u2022 AuthenticationException: If your API secret key cannot be authenticated with Magic API server\n\n\u2022 ForbiddenException: If your API secret key is not authorized to access the resources\n\n\u2022 ApiException: For any other API error\n\n\u2022 ApiConnectionException: If your server cannot communicate with the Magic server. Normally this is a network communication error.\n\nRateLimitingException\n\nBadRequestException\n\nAuthenticationException\n\nForbiddenException\n\nApiException\n\nApiConnectionException\n\nSee Error Handling for more examples.\n\nError Handling", "explanation": "**Exceptions and Error Handling Overview**\n\nThe `#Raises` section in the Magic Labs embedded wallet documentation explains the different exceptions and errors that may occur when interacting with the Magic Labs API using the PHP SDK.\n\n**Purpose:**\n\nThe main purpose of this section is to inform developers about the potential errors and exceptions that may arise during API interactions. This knowledge enables developers to anticipate, handle, and correctly respond to these errors, ensuring a robust and reliable integration with the Magic Labs API.\n\n**listed Exceptions and Errors:**\n\nThe section highlights the following specific exceptions and errors:\n\n1. **RateLimitingException**: Exceeded the rate limit for API requests within a given time frame.\n2. **BadRequestException**: Invalid parameters supplied to the API.\n3. **AuthenticationException**: The API secret key is invalid or cannot be authenticated with the Magic API server.\n4. **ForbiddenException**: The API secret key is not authorized to access the desired resources.\n5. **ApiException**: Any other API-related error that does not fit into the above categories.\n6. **ApiConnectionException**: A network communication error preventing the server from accessing the Magic server.\n\n**Error Handling Resource:**\n\nFor more examples and information on handling these exceptions and errors, the documentation suggests referring to the \"Error Handling\" section. This provides a comprehensive guide on how to catch, handle, and resolve these exceptions to ensure a seamless integration with the Magic Labs API.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/php#chunk-24", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 A MagicResponse: The data field contains all of the user meta information.issuer (str): The user's Decentralized IDpublic_address (str): The authenticated user's public address (a.k.a.: public key). Currently, this value is associated with the Ethereum blockchain.email (str): The user's email addressphone_number (str): The user's phone numberoauth_provider (str): OAuth provider, if anywallets (arr): Array of user's wallet addresses\n\nMagicResponse\n\nMagicResponse\n\ndata\n\n\u2022 issuer (str): The user's Decentralized ID\n\n\u2022 public_address (str): The authenticated user's public address (a.k.a.: public key). Currently, this value is associated with the Ethereum blockchain.\n\n\u2022 email (str): The user's email address\n\n\u2022 phone_number (str): The user's phone number\n\n\u2022 oauth_provider (str): OAuth provider, if any\n\n\u2022 wallets (arr): Array of user's wallet addresses\n\nissuer\n\npublic_address\n\nemail\n\nphone_number\n\noauth_provider\n\nwallets", "explanation": "**Returns Section Breakdown**\n\nThe `#Returns` section in the Magic Labs embedded wallet documentation is about detailing the structure and contents of a successful API response.\n\n**Main Purpose:**\n\nThe main purpose of the `#Returns` section is to inform developers about the expected format and data that will be returned when a valid API request is made to the Magic Labs embedded wallet API.\n\n**Key Points:**\n\n* The API returns a `MagicResponse` object.\n* Within the `MagicResponse`, there's a `data` field that contains essential user information.\n* The user information includes:\n\t+ `issuer`: The user's Decentralized ID (str)\n\t+ `public_address`: The user's public Ethereum address (str)\n\t+ `email`: The user's email address (str)\n\t+ `phone_number`: The user's phone number (str)\n\t+ `oauth_provider`: The OAuth provider, if any (str)\n\t+ `wallets`: An array of user's wallet addresses (arr)\n\nBy understanding the expected response format, developers can write their applications to correctly parse and utilize the returned data, ensuring seamless integration with the Magic Labs embedded wallet API.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/php#chunk-25", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nlogout_by_issuer\n\nLogs a user out of all Magic SDK sessions given the user's Decentralized ID (iss). This method is useful if you store the iss with your user data, which is recommended.\n\niss\n\niss\n\nCopy\n\n01\n\nuser\n\n.\n\nlogout_by_issuer\n\n(\n\nissuer\n\n)\n\n;\n\n01\n\nuser\n\n.\n\nlogout_by_issuer\n\n(\n\nissuer\n\n)\n\n;\n\n#\n\n\u2022 issuer (str): The user's Decentralized ID, which can be parsed using token.get_issuer\n\nissuer\n\ntoken.get_issuer", "explanation": "**Logout by Issuer Functionality**\n\nThe `logout_by_issuer` function is a feature that allows you to log a user out of all Magic Wallet SDK sessions associated with their Decentralized ID (iss). This function is specifically designed for situations where the user's `iss` value is stored alongside their account information.\n\n**Purpose:**\n\nThe main purpose of `logout_by_issuer` is to provide a secure way to log a user out of all sessions, even if they have multiple active sessions. This is especially useful in scenarios where the user's `iss` value is stored with their account data, such as in a database or authentication system.\n\n**How it works:**\n\nTo use this function, you need to pass the user's `iss` value (Decentralized ID) as an argument. The `logout_by_issuer` function will then log the user out of all sessions associated with that `iss` value.\n\nHere's a step-by-step example:\n\n1. You store the user's `iss` value alongside their account information.\n2. When the user logs out, you call the `logout_by_issuer` function and pass the user's `iss` value as an argument.\n3. The function logs the user out of all sessions associated with the provided `iss` value.\n\n**Example Use Case:**\n\nSuppose you have a user's account information stored in a database with the following structure:\n```json\n{\n  \"username\": \"john_doe\",\n  \"iss\": \"0x1234567890abcdef...\" // Decentralized ID (iss) value\n}\n```\nWhen the user logs out, you can call the `logout_by_issuer` function and pass the user's `iss` value as an argument:\n```php\n$iss = \"0x1234567890abcdef...\";\n$magic->logout_by_issuer($iss);\n```\nThis will log the user out of all sessions associated with the provided `iss` value.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/php#chunk-26", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 RateLimitingException: If you have sent too many requests within a given period of time\n\n\u2022 BadRequestException: If the supplied parameters are invalid\n\n\u2022 AuthenticationException: If your API secret key cannot be authenticated with Magic API server\n\n\u2022 ForbiddenException: If your API secret key is not authorized to access the resources\n\n\u2022 ApiException: For any other API error\n\n\u2022 ApiConnectionException: If your server cannot communicate with the Magic server. Normally this is a network communication error.\n\nRateLimitingException\n\nBadRequestException\n\nAuthenticationException\n\nForbiddenException\n\nApiException\n\nApiConnectionException\n\nSee Error Handling for more examples.\n\nError Handling", "explanation": "**Error Handling: Raised Exceptions**\n\nThe section \"#Raises\" in the Magic Labs embedded wallet documentation outlines the various exceptions that can be raised when interacting with the Magic API server using the PHP SDK.\n\n**Main Purpose:**\n\nThe main purpose of this documentation section is to inform developers about the potential errors that may occur when making API requests and provide guidance on how to handle these exceptions.\n\n**Main Exceptions:**\n\nThe following exceptions are raised by the Magic API server:\n\n1. **RateLimitingException**: Thrown when too many requests are made within a given period of time.\n2. **BadRequestException**: Occurs when the supplied parameters are invalid or incomplete.\n3. **AuthenticationException**: Raised when the API secret key is unable to authenticate with the Magic API server.\n4. **ForbiddenException**: Thrown when the API secret key is not authorized to access certain resources.\n5. **ApiException**: Caught for any other API-related errors.\n6. **ApiConnectionException**: Occurs when there is a network communication error between the server and the Magic server.\n\n**Error Handling:**\n\nFor more information on handling these exceptions, refer to the \"Error Handling\" section in the documentation. This section likely provides guidance on how to catch, handle, and retry failed API requests.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/php#chunk-27", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 A MagicResponse\n\nMagicResponse\n\nMagicResponse", "explanation": "Based on the provided documentation section, the '#Returns' section describes the possible responses that the Magic Labs Embedded Wallet will return after a request is made.\n\nHere's a clear and concise explanation of what it is about and its main purpose:\n\n**Purpose:** \nThe main purpose of the '#Returns' section is to provide developers with information about the possible outcomes of a request made to the Magic Labs Embedded Wallet API.\n\n**What it includes:**\nThis section likely describes the type of response that the API will return, which in this case is a 'MagicResponse'.\n\n**What to expect:**\nDevelopers can expect to receive a 'MagicResponse' when making a request to the API, which may contain various data or status information depending on the outcome of the request.\n\nIn essence, the '#Returns' section serves as a guidance for developers on how to handle the responses they will receive from the Magic Labs Embedded Wallet API.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/php#chunk-28", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nlogout_by_public_address\n\nLogs a user out of all Magic SDK sessions given the user's public address. This method is useful if you store the public_address.\n\npublic_address\n\nCopy\n\n01\n\nuser\n\n.\n\nlogout_by_public_address\n\n(\n\npublic_address\n\n)\n\n;\n\n01\n\nuser\n\n.\n\nlogout_by_public_address\n\n(\n\npublic_address\n\n)\n\n;\n\n#\n\n\u2022 public_address (str): The user's Ethereum public address\n\npublic_address", "explanation": "This documentation section explains the `logout_by_public_address` method for the Magic Labs embedded wallet PHP SDK.\n\n**Purpose:**\nThe main purpose of `logout_by_public_address` is to log a user out of all Magic SDK sessions, given their Ethereum public address. This is useful when you store the public address and need to remove the user's session.\n\n**How it works:**\nTo log a user out, you need to call this method with the user's public address as an argument. This will invalidate all existing sessions associated with the provided public address.\n\n**Key argument:**\n- `public_address`: a string representing the user's Ethereum public address.\n\n**Example usage:**\n```php\n$magic = new Magic('YOUR_PROJECT_ID');\n$public_address = '0x...your_user_public_address...\";\n$magic->logout_by_public_address($public_address);\n```\nBy calling this method, you ensure that the user is no longer logged in, providing an additional layer of security and allowing for secure logout functionality.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/php#chunk-29", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 RateLimitingException: If you have sent too many requests within a given period of time\n\n\u2022 BadRequestException: If the supplied parameters are invalid\n\n\u2022 AuthenticationException: If your API secret key cannot be authenticated with Magic API server\n\n\u2022 ForbiddenException: If your API secret key is not authorized to access the resources\n\n\u2022 ApiException: For any other API error\n\n\u2022 ApiConnectionException: If your server cannot communicate with the Magic server. Normally this is a network communication error.\n\nRateLimitingException\n\nBadRequestException\n\nAuthenticationException\n\nForbiddenException\n\nApiException\n\nApiConnectionException\n\nSee Error Handling for more examples.\n\nError Handling", "explanation": "**Error Handling and Exception Types in Magic Labs Embedded Wallet**\n\nThe '#Raises' section in the Magic Labs embedded wallet documentation outlines the various exception types that can be raised when interacting with the Magic API using the PHP server-side SDK.\n\n**Purpose:**\n\nThe main purpose of this section is to inform developers about the possible errors that can occur during the API request process, and how to handle them accordingly.\n\n**Key Exception Types:**\n\nThe following exception types are listed:\n\n1. **RateLimitingException**: Raised when the API request rate limit is exceeded.\n2. **BadRequestException**: Raised when the supplied parameters are invalid.\n3. **AuthenticationException**: Raised when the API secret key is not authenticated with the Magic API server.\n4. **ForbiddenException**: Raised when the API secret key is not authorized to access the resources.\n5. **ApiException**: Raised for any other API error.\n6. **ApiConnectionException**: Raised when the server cannot communicate with the Magic server, typically due to a network communication error.\n\n**Error Handling:**\n\nThe documentation points to a separate section on Error Handling for more examples on how to handle these exception types programmatically. By understanding these exception types, developers can write more robust and reliable code that can handle errors and exceptions effectively.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/php#chunk-30", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 A MagicResponse\n\nMagicResponse\n\nMagicResponse", "explanation": "Based on the provided documentation, the '#Returns' section is about the expected return value of the endpoint or API call provided in the Magic Labs embedded wallet documentation.\n\nThe return value is documented as a 'MagicResponse'. \n\nA 'MagicResponse' is likely an object or data structure that contains the results of the API call, including any data, errors, or success status.\n\nThe main purpose of the '#Returns' section is to inform developers about what they should expect when their API call is successful, including the structure and content of the 'MagicResponse' object, thereby facilitating easier integration and usage of the Magic Labs embedded wallet API in their applications.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/php#chunk-31", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nlogout_by_token\n\nLogs a user out of all Magic SDK sessions given the DID Token.\n\nCopy\n\n01\n\nuser\n\n.\n\nlogout_by_token\n\n(\n\ndid_token\n\n)\n\n;\n\n01\n\nuser\n\n.\n\nlogout_by_token\n\n(\n\ndid_token\n\n)\n\n;\n\n#\n\n\u2022 did_token (str): A DID Token generated by a Magic user on the client-side\n\ndid_token", "explanation": "**Logout by Token: A Security Measure for Disabling Sessions**\n\nThe `#logout_by_token` function is a security feature in Magic Labs embedded wallet that allows for logging a user out of all active sessions using a valid DID (Decentralized Identifier) Token. Its primary purpose is to grant users the ability to revoke a Magic Token and thus terminating sessions, should the token be compromised.\n\n**Key Functionality:**\n\n- Empowers users to disinfect from any active sessions after having their token compromisable.\n- Manages token-based sessions in securing any vulnerabilities within.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/php#chunk-32", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 RateLimitingException: If you have sent too many requests within a given period of time\n\n\u2022 BadRequestException: If the supplied parameters are invalid\n\n\u2022 AuthenticationException: If your API secret key cannot be authenticated with Magic API server\n\n\u2022 ForbiddenException: If your API secret key is not authorized to access the resources\n\n\u2022 ApiException: For any other API error\n\n\u2022 ApiConnectionException: If your server cannot communicate with the Magic server. Normally this is a network communication error.\n\nRateLimitingException\n\nBadRequestException\n\nAuthenticationException\n\nForbiddenException\n\nApiException\n\nApiConnectionException\n\nSee Error Handling for more examples.\n\nError Handling", "explanation": "**Raises Section Explanation**\n\nThe `#Raises` section in the Magic Labs embedded wallet documentation outlines the specific exceptions that may be raised when using the PHP server-side SDK. These exceptions are potential problems that the API may encounter while processing requests.\n\n**Main Purpose**\n\nThe main purpose of this section is to inform developers about the possible errors that might occur when utilizing the Magic Labs PHP SDK, enabling them to anticipate and handle these exceptions accordingly in their code. This helps in creating more robust and error-resilient applications.\n\n**Exception Breakdown**\n\nThe section describes five types of exceptions that may be raised:\n\n1. **RateLimitingException**: Thrown if the number of requests exceeds a specified limit within a given time frame.\n2. **BadRequestException**: Caused by invalid parameters passed to the API.\n3. **AuthenticationException**: Occurs when the provided API secret key fails to authenticate with the Magic API server.\n4. **ForbiddenException**: Resulting from an unauthorized API secret key that lacks the required access permissions.\n5. **ApiException**: A general exception for any other API-related errors that do not fit into the above categories.\n6. **ApiConnectionException**: Signaled when there's a network communication failure between the server and the Magic server.\n\n**Error Handling Reference**\n\nThe documentation includes a section specifically for error handling, offering additional examples and advice on how to effectively handle these exceptions in your PHP code.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/php#chunk-33", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 A MagicResponse\n\nMagicResponse\n\nMagicResponse", "explanation": "It appears that there's a formatting issue in the provided documentation snippet. However, based on the context of the Magic Labs embedded wallet documentation, I can infer that the intended content of the '#Returns' section might look something like this:\n\n`# Returns`\n\n*   A `MagicResponse` object\n*   `MagicResponse`\n    *   `data`: The decrypted primary account data (in case of successful decryption)\n    *   `error`: An error message in case of unsuccessful decryption\n\nThe main purpose of the '#Returns' section in this documentation is to describe the return types or values that the user can expect from a particular API call. In this case, it's likely describing the return types when interacting with the embedded wallet's decryption functionality.\n\nWhen using the server-side SDK provided by Magic Labs, the '#Returns' section helps the developer understand what data will be returned from an API call, what format it will be in (e.g., `MagicResponse` object), and what properties that object will contain (in this case, `data` and `error`).\n\nThis information is crucial for writing effective and robust code that can handle different return scenarios and errors, ultimately leading to a better user experience and more reliable system interactions.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/php#chunk-34", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n#\n\nThere is only one response object that will be returned from a successful API call.\n\n#\n\nThis is the interface to interact Magic API responses. It will only be returned if the API request status code is between 200 (inclusive) and 300 (exclusive).\n\nYou will have access to the following attributes:\n\n\u2022 content (Array): Raw content returned by the API response\n\n\u2022 status_code (num): HTTP status code for the given request\n\n\u2022 data (Array): Parsed content\n\ncontent\n\nstatus_code\n\ndata\n\nCopy\n\n01\n\nMagicResponse\n\n->\n\ncontent\n\n01\n\nMagicResponse\n\n->\n\ncontent\n\n02\n\nMagicResponse\n\n->\n\nstatus_code\n\n02\n\nMagicResponse\n\n->\n\nstatus_code\n\n03\n\nMagicResponse\n\n->\n\ndata\n\n03\n\nMagicResponse\n\n->\n\ndata", "explanation": "**Understanding the MagicResponse Object**\n\nThe MagicResponse object is a fundamental structure in the Magic Labs embedded wallet API, representing the response from a successful API call.\n\n**Main Purpose**\n\nThe primary purpose of the MagicResponse object is to provide a standardized way to interact with and parse API responses, ensuring consistency and making it easier to handle various response scenarios.\n\n**Key Attributes**\n\nThe MagicResponse object contains three essential attributes:\n\n1. **content (Array)**: This attribute holds the raw content returned by the API response in its original format.\n2. **status_code (num)**: This attribute returns the HTTP status code for the given API request, indicating the outcome of the call (e.g., success, error, etc.).\n3. **data (Array)**: This attribute contains the parsed content of the API response, which is typically in a more structured and easily accessible format than the raw content.\n\n**Usage and Benefits**\n\nThe MagicResponse object enables developers to:\n\n* Easily extract and work with API response data\n* Handle different response scenarios based on the status code\n* Parse and utilize the raw content or structured data from the API response\n\nBy providing a clear and consistent way to interact with API responses, the MagicResponse object helps developers build more robust, efficient, and reliable applications that integrate with the Magic Labs embedded wallet API.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/php#chunk-35", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nThe conventional HTTP response is adopted by the SDK. For the status code in:\n\n\u2022 2XX - Indicates success\n\n\u2022 4XX - Indicates client errors. Information provided to the SDK is invalid.\n\n\u2022 5XX - Indicates server errors\n\n2XX\n\n4XX\n\n5XX\n\nBelow is the error class inheritance which can help developers to programmatically handle the error cases.\n\nCopy\n\n01\n\nMagicException\n\n01\n\nMagicException\n\n02\n\n|\n\n02\n\n|\n\n03\n\n|------- DIDTokenException\n\n03\n\n|------- DIDTokenException\n\n04\n\n|\n\n04\n\n|\n\n05\n\n|------- RequestException\n\n05\n\n|------- RequestException\n\n06\n\n|\n\n06\n\n|\n\n07\n\n| ------- RateLimitingException\n\n07\n\n| ------- RateLimitingException\n\n08\n\n| ------- BadRequestException\n\n08\n\n| ------- BadRequestException\n\n09\n\n| ------- AuthenticationException\n\n09\n\n| ------- AuthenticationException\n\n10\n\n| ------- ForbiddenException\n\n10\n\n| ------- ForbiddenException\n\n11\n\n| ------- ApiException\n\n11\n\n| ------- ApiException\n\n12\n\n| ------- ApiConnectionException\n\n12\n\n| ------- ApiConnectionException\n\n#\n\nThis is the base class of all the Magic SDK errors.\n\nCopy\n\n01\n\nMagicException\n\n(\n\nmessage\n\n=\n\nnull\n\n)\n\n;\n\n01\n\nMagicException\n\n(\n\nmessage\n\n=\n\nnull\n\n)\n\n;", "explanation": "**MagicException Overview**\n\nThe MagicException is a base class of all errors handled by the Magic Labs Embedded Wallet SDK. It's designed to provide a unified way of handling and categorizing errors that may occur during interactions with the Magic Labs API.\n\n**Error Classification**\n\nThe SDK uses a hierarchical error classification system, with the MagicException as the base class. This hierarchy is used to categorize and differentiate between various types of errors, including:\n\n*   DIDTokenException (error related to Digital Identity Token)\n*   RequestException (error related to API requests)\n*   RateLimitingException (error related to rate limiting)\n*   BadRequestException (error related to invalid request data)\n*   AuthenticationException (error related to authentication)\n*   ForbiddenException (error related to access restrictions)\n*   ApiException (catch-all for API-related errors)\n*   ApiConnectionException (error related to API connections)\n\n**Error Handling**\n\nDevelopers can use this error class hierarchy to programmatically handle and respond to errors. By checking the specific exception type, developers can tailor their error handling to address the root cause of the issue. This approach enables developers to provide more informative and accurate error messages to their users, improving the overall user experience.\n\n**Key Benefits**\n\n*   Unified error handling system\n*   Easy categorization and differentiation between error types\n*   Improved error handling and response times\n*   Enhanced user experience through informative error messages", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/php#chunk-36", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nAny DID Token related error. This can mean the given token is malformed or invalid.", "explanation": "Here's a clear and concise explanation of the 'DIDTokenException' section from the Magic Labs embedded wallet documentation:\n\n**DIDTokenException:**\n\nThe DIDTokenException is an exception type in the Magic Labs embedded wallet documentation. It occurs when there's an error related to a DID (Decentralized Identifier) Token.\n\n**Main Purpose:**\n\nThe main purpose of the DIDTokenException is to handle any errors or exceptions associated with a given DID Token, which can include:\n\n1. **Malformed Token:** The token is not in the expected format or contains errors.\n2. **Invalid Token:** The token is not recognized or is no longer valid.\n\nThe DIDTokenException provides a way to catch and handle these errors, allowing developers to handle them programmatically and improve the overall user experience.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/php#chunk-37", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nThis is the base class of all the Magic API request errors. This error class will provide details of unsuccessful API requests.\n\nCopy\n\n01\n\nRequestException\n\n(\n\n01\n\nRequestException\n\n(\n\n02\n\n$message\n\n=\n\nnull\n\n,\n\n02\n\n$message\n\n=\n\nnull\n\n,\n\n03\n\n$http_status\n\n=\n\nnull\n\n,\n\n03\n\n$http_status\n\n=\n\nnull\n\n,\n\n04\n\n$http_code\n\n=\n\nnull\n\n,\n\n04\n\n$http_code\n\n=\n\nnull\n\n,\n\n05\n\n$http_resp_data\n\n=\n\nnull\n\n,\n\n05\n\n$http_resp_data\n\n=\n\nnull\n\n,\n\n06\n\n$http_message\n\n=\n\nnull\n\n,\n\n06\n\n$http_message\n\n=\n\nnull\n\n,\n\n07\n\n$http_error_code\n\n=\n\nnull\n\n,\n\n07\n\n$http_error_code\n\n=\n\nnull\n\n,\n\n08\n\n$http_request_params\n\n=\n\nnull\n\n,\n\n08\n\n$http_request_params\n\n=\n\nnull\n\n,\n\n09\n\n$http_request_data\n\n=\n\nnull\n\n,\n\n09\n\n$http_request_data\n\n=\n\nnull\n\n,\n\n10\n\n$http_method\n\n=\n\nnull\n\n10\n\n$http_method\n\n=\n\nnull\n\n11\n\n)\n\n;\n\n11\n\n)\n\n;\n\nRateLimitingException\n\nBadRequestException\n\nAuthenticationException\n\nForbiddenException\n\nApiException\n\n500\n\n404\n\nApiConnectionException", "explanation": "**RequestException Overview**\n\nThe `RequestException` class is the base class for all Magic API request errors in the PHP SDK. Its primary purpose is to provide detailed information about an unsuccessful API request.\n\n**Key Components**\n\nThe `RequestException` class includes the following attributes:\n\n* `$message`: A message detailing the reason for the request error.\n* `$http_status`: The HTTP status code returned by the server.\n* `$http_code`: An alias for `$http_status`.\n* `$http_resp_data`: The raw response data from the server.\n* `$http_message`: A human-readable message describing the server's HTTP response.\n* `$http_error_code`: The specific error code returned by the server.\n* `$http_request_params`: The parameters passed with the API request.\n* `$http_request_data`: The data sent with the API request.\n* `$http_method`: The HTTP method used for the request.\n\n**Purpose**\n\nThe `RequestException` class serves as the foundation for more specific request error exceptions, such as `RateLimitingException`, `BadRequestException`, `AuthenticationException`, `ForbiddenException`, and `ApiException`, among others. By extending the `RequestException` class, these specialized exceptions can inherit its properties and provide more detailed information about the request error, making it easier to diagnose and resolve issues.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/php#chunk-38", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nIt is recommended to implement error handling for API responses.\n\nCopy\n\n01\n\ntry\n\n{\n\n01\n\ntry\n\n{\n\n02\n\n// Make requests to Magic server.\n\n02\n\n// Make requests to Magic server.\n\n03\n\n}\n\n03\n\n}\n\n04\n\ncatch\n\n(\n\n\\\n\nMagicAdmin\n\n\\\n\nException\n\n\\\n\nDIDTokenException\n\n$e\n\n)\n\n{\n\n04\n\ncatch\n\n(\n\n\\\n\nMagicAdmin\n\n\\\n\nException\n\n\\\n\nDIDTokenException\n\n$e\n\n)\n\n{\n\n05\n\n// throw the exception\n\n05\n\n// throw the exception\n\n06\n\n}\n\n06\n\n}\n\n07\n\ncatch\n\n(\n\n\\\n\nMagicAdmin\n\n\\\n\nException\n\n\\\n\nRateLimitingException\n\n$e\n\n)\n\n{\n\n07\n\ncatch\n\n(\n\n\\\n\nMagicAdmin\n\n\\\n\nException\n\n\\\n\nRateLimitingException\n\n$e\n\n)\n\n{\n\n08\n\n// throw the exception\n\n08\n\n// throw the exception\n\n09\n\n}\n\n09\n\n}\n\n10\n\ncatch\n\n(\n\n\\\n\nMagicAdmin\n\n\\\n\nException\n\n\\\n\nBadRequestException\n\n$e\n\n)\n\n{\n\n10\n\ncatch\n\n(\n\n\\\n\nMagicAdmin\n\n\\\n\nException\n\n\\\n\nBadRequestException\n\n$e\n\n)\n\n{\n\n11\n\n// throw the exception\n\n11\n\n// throw the exception\n\n12\n\n}\n\n12\n\n}\n\n13\n\ncatch\n\n(\n\n\\\n\nMagicAdmin\n\n\\\n\nException\n\n\\\n\nAuthenticationException\n\n$e\n\n)\n\n{\n\n13\n\ncatch\n\n(\n\n\\\n\nMagicAdmin\n\n\\\n\nException\n\n\\\n\nAuthenticationException\n\n$e\n\n)\n\n{\n\n14\n\n// throw the exception\n\n14\n\n// throw the exception\n\n15\n\n}\n\n15\n\n}\n\n16\n\ncatch\n\n(\n\n\\\n\nMagicAdmin\n\n\\\n\nException\n\n\\\n\nForbiddenException\n\n$e\n\n)\n\n{\n\n16\n\ncatch\n\n(\n\n\\\n\nMagicAdmin\n\n\\\n\nException\n\n\\\n\nForbiddenException\n\n$e\n\n)\n\n{\n\n17\n\n// throw the exception\n\n17\n\n// throw the exception\n\n18\n\n}\n\n18\n\n}\n\n19\n\ncatch\n\n(\n\n\\\n\nMagicAdmin\n\n\\\n\nException\n\n\\\n\nApiException\n\n$e\n\n)\n\n{\n\n19\n\ncatch\n\n(\n\n\\\n\nMagicAdmin\n\n\\\n\nException\n\n\\\n\nApiException\n\n$e\n\n)\n\n{\n\n20\n\n// throw the exception\n\n20\n\n// throw the exception\n\n21\n\n}\n\n21\n\n}\n\n22\n\ncatch\n\n(\n\n\\\n\nMagicAdmin\n\n\\\n\nException\n\n\\\n\nApiConnectionException\n\n$e\n\n)\n\n{\n\n22\n\ncatch\n\n(\n\n\\\n\nMagicAdmin\n\n\\\n\nException\n\n\\\n\nApiConnectionException\n\n$e\n\n)\n\n{\n\n23\n\n// throw the exception\n\n23\n\n// throw the exception\n\n24\n\n}\n\n24\n\n}", "explanation": "**Error Handling in Magic Labs Embedded Wallet Documentation**\n\nThe provided section is about implementing error handling for API responses in your Magic Labs embedded wallet implementation. Its primary purpose is to catch and handle specific exceptions that may occur when making requests to the Magic server.\n\n**Main Purpose:**\n\nThe main goal of error handling is to prevent your application from crashing or producing unintended behavior when encountering an error. Instead, it allows you to:\n\n* Catch specific exceptions and handle them in a predictable way\n* Provide meaningful error messages to the user\n* Take corrective action to recover from errors or prevent them from happening in the future\n\n**Key Takeaways:**\n\n* The documentation shows a try-catch block that catches specific exception types, such as `DIDTokenException`, `RateLimitingException`, `BadRequestException`, `AuthenticationException`, `ForbiddenException`, `ApiException`, and `ApiConnectionException`.\n* For each exception type, the block catches the exception and calls the `// throw the exception` comment, which implies that you should re-throw the exception or handle it in some other way.\n* The use of nested try-catch blocks allows you to catch specific exception types and prevent them from being caught by more general exception types.\n\n**Best Practice:**\n\nTo effectively implement error handling in your Magic Labs embedded wallet implementation, follow these best practices:\n\n* Catch specific exception types instead of relying on general exception types.\n* Provide meaningful error messages to the user.\n* Take corrective action to recover from errors or prevent them from happening in the future.\n* Document your error handling process to ensure consistency and predictability across your application.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/php#chunk-39", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 GitHub\n\nGitHub", "explanation": "The section titled '#Resources' from the Magic Labs embedded wallet documentation refers to a collection of links to external resources that can aid in development, troubleshooting, and learning. \n\nIts main purpose is to provide easy access to pre-existing materials for developers working on integrating Magic Labs' embedded wallet into their projects, specifically through a PHP server-side SDK. These resources may include:\n\n- Code samples and libraries\n- Tutorials and tutorials series\n- Troubleshooting guides\n- API documentation\n- Community feedback boards or discussion forums", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/php#chunk-40", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nAll changes to the SDK are covered in our latest release notes.\n\nlatest release notes", "explanation": "This section, titled '#Versions', serves as a reference to help users of the Magic Labs embedded wallet documentation keep track of the latest updates and changes made to the server-side SDK for PHP. \n\nThe main purpose of this section is to:\n\n1. Provide direct access to release notes, which detail recent changes, fixes, and new features added to the SDK.\n2. Serve as a central location for users to find information about updates, ensuring they stay informed about any improvements or bug fixes that may affect their implementation.\n\nBy referencing the latest release notes, users can easily identify the latest stable version of the SDK and make informed decisions about when to upgrade or migrate to a newer version.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/php#chunk-41", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nHorizen EON is a highly scalable EVM-compatible sidechain network and smart contract platform. Users can effortlessly create wallets and interact with EON using the Magic SDK.\n\nHorizen EON\n\nAs EON is EVM compatible, you can follow the Ethereum documentation to send your first transaction and utilize all other features.\n\nEthereum", "explanation": "**Horizen EON Overview**\n\nThe Horizen EON is a highly scalable sidechain network and smart contract platform that is compatible with the Ethereum Virtual Machine (EVM). It allows users to interact with the EON network and create wallets using the Magic SDK.\n\n**Key Points:**\n\n1. **EVM Compatibility:** EON is designed to be compatible with the Ethereum ecosystem, enabling users to leverage Ethereum's extensive documentation and development tools.\n2. **Scalability:** EON is highly scalable, allowing it to handle a large number of transactions efficiently.\n3. **Ease of Use:** Users can create wallets and interact with the EON network using the Magic SDK, making it effortless to get started.\n4. **Smart Contract Platform:** EON supports the deployment and execution of smart contracts, enabling developers to create complex applications.\n\n**Main Purpose:** The Horizen EON is designed to provide a fast, secure, and scalable platform for users to interact with the Ethereum ecosystem, enabling the creation of new applications and services.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/evm/horizen-eon#chunk-1", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\nconst\n\nEonOptions\n\n=\n\n{\n\n01\n\nconst\n\nEonOptions\n\n=\n\n{\n\n02\n\nrpcUrl\n\n:\n\n'https://gobi-rpc.horizenlabs.io/ethv1'\n\n,\n\n02\n\nrpcUrl\n\n:\n\n'https://gobi-rpc.horizenlabs.io/ethv1'\n\n,\n\n03\n\nchainId\n\n:\n\n1663\n\n,\n\n03\n\nchainId\n\n:\n\n1663\n\n,\n\n04\n\n}\n\n;\n\n04\n\n}\n\n;\n\n05\n\n05\n\n06\n\n// Setting network to point to EON Testnet\n\n06\n\n// Setting network to point to EON Testnet\n\n07\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_PUBLISHABLE_API_KEY'\n\n,\n\n{\n\nnetwork\n\n:\n\nEonOptions\n\n}\n\n)\n\n;\n\n07\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_PUBLISHABLE_API_KEY'\n\n,\n\n{\n\nnetwork\n\n:\n\nEonOptions\n\n}\n\n)\n\n;", "explanation": "**Configure EON:**\n\nThe section titled '#Configure EON' is about setting up the connection to the Horizen EON network using the Magic Labs embedded wallet. Horizen EON is a separate blockchain based on EthV1, created by Horizen, an interdisciplinary community that combines extensive blockchain experience with deep knowledge in cryptography.\n\n**Main Purpose:**\n\nThe main purpose of this section is to provide the configuration options and code snippets to connect your application to the Horizen EON testnet or mainnet. These options are:\n\n1. **rpcUrl**: This is the URL that Magic Labs uses to connect to the Horizen EON network. The given example uses the testnet RPC URL, which is `https://gobi-rpc.horizenlabs.io/ethv1`. You may need to replace this with the mainnet RPC URL for production use.\n2. **chainId**: This is the identifier of the Horizen EON network. The given example uses the chain ID `1663`, which is the ID for the EON testnet. You should use the correct chain ID for the network you are connecting to.\n\n**Usage:**\n\nTo use this section, you need to replace the placeholder `YOUR_PUBLISHABLE_API_KEY` with your actual publishable API key. You should also adjust the `rpcUrl` and `chainId` values according to your needs.\n\nThe example shows how to create a new instance of the `Magic` class, passing in your publishable API key and an object containing the `network` property, which is set to the `EonOptions` object. This allows Magic Labs to connect to the Horizen EON network and interact with the cryptocurrency.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/evm/horizen-eon#chunk-2", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 All Auth, User and most Wallet module methods* for Dedicated Wallets\n\n\u2022 All EVM Provider functionality to respond to supported RPC methods\n\nAuth\n\nUser\n\nWallet\n\nDedicated Wallets\n\nRPC methods\n\n*Some features are not yet compatible such as NFT Viewer and Fiat On-ramps.\n\nNeed a feature or see a problem? File an issue on our github repo.\n\ngithub repo", "explanation": "This documentation section, titled '**Compatibility**', provides information about the compatibility of Magic Labs' embedded wallet with various components and features.\n\nIn simpler terms, it explains:\n\n1. **Supported Features**: All methods for authentication (**Auth**), user management (**User**), and wallet functionality (**Wallet**) are supported, except for a few exceptions.\n2. **Dedicated Wallet Support**: The dedicated wallet features are fully supported.\n3. **EVM Provider Compatibility**: The embedded wallet is compatible with specific RPC (Remote Procedure Call) methods provided by the EVM (Ethereum Virtual Machine) provider.\n4. **Unsupported Features**: Some features, like NFT Viewer (Non-Fungible Token viewer) and Fiat On-ramps (feature that enables users to exchange cryptocurrency for fiat currency), are not yet compatible.\n\nThe main purpose of this section is to inform users about the current state of compatibility, helping them understand which features they can use and which ones might not work as expected. This section also provides a call to action, encouraging users to report any issues or missing features on the Magic Labs' GitHub repository, which is a collaborative platform for developers to contribute to and report bugs in the project.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/evm/horizen-eon#chunk-3", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 Documentation: https://docs.horizen.io/\n\n\u2022 Block Explorer: https://eon-explorer.horizenlabs.io/ (Mainnet)https://gobi-explorer.horizenlabs.io/ (Testnet)\n\n\u2022 Testnet Faucet: https://faucet.horizen.io/\n\nhttps://docs.horizen.io/\n\n\u2022 https://eon-explorer.horizenlabs.io/ (Mainnet)\n\n\u2022 https://gobi-explorer.horizenlabs.io/ (Testnet)\n\nhttps://eon-explorer.horizenlabs.io/\n\nhttps://gobi-explorer.horizenlabs.io/\n\nhttps://faucet.horizen.io/", "explanation": "This section of the documentation is titled '#Resources & Tools'. It appears to be a collection of useful links and tools for interacting with the Horizen EVM (Ethereum Virtual Machine) blockchain.\n\nThe main purpose of this section is to provide easy access to various resources that can aid developers and users in understanding and working with the Horizen EVM chain. These resources include:\n\n1. **Documentation**: A link to the official Horizen documentation site, which contains detailed information about the chain, its functionality, and how to use it.\n2. **Block Explorers**: Links to online block explorers for both the mainnet (live chain) and testnet (development chain). These block explorers allow users to view and query on-chain data, such as account balances and transaction history.\n3. **Testnet Faucet**: A link to a testnet faucet, which is a system that allows developers to obtain test tokens for testing and development purposes on the testnet.\n\nIn summary, the '#Resources & Tools' section is a convenient collection of links that can help users and developers get started with the Horizen EVM chain and access the necessary tools to interact with it.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/other-chains/evm/horizen-eon#chunk-4", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nMagic provides a variety of user, wallet and authentication methods in multiple languages and frameworks for web and mobile. Our server-side SDKs can act as a companion to our clients to help perform certain functions on your back-end.\n\ncertain functions\n\nTo utilize any of Magic\u2019s SDKs, you will need to sign up on our developer dashboard to create an app and get keys. Take a look at the quickstart for a step by step guide.\n\ndeveloper dashboard\n\nquickstart", "explanation": "The 'SDK Reference - Overview' section from the Magic Link documentation is about introducing and explaining the purpose of Magic's Software Development Kits (SDKs). Here's a clear and concise summary:\n\n**Main Purpose:**\nThe main purpose of this section is to introduce Magic's SDKs, highlighting how they can be used to perform various functions on the back-end, and guiding developers on how to get started with them.\n\n**Key Points:**\n\n1. **Multiple languages and frameworks:** Magic's SDKs are available in multiple languages and frameworks, making them compatible with various programming environments.\n2. **Web and mobile support:** The SDKs can be used for both web and mobile applications.\n3. **Server-side functionality:** Magic's SDKs can act as a companion to their clients, helping to perform certain functions on the back-end.\n4. **Requirements:** To use the SDKs, developers need to sign up on the Magic developer dashboard, create an app, and obtain keys.\n5. **Quickstart guide:** The section recommends following the quickstart guide for a step-by-step guide to get started with the SDKs.\n\nOverall, the 'SDK Reference - Overview' section is an introduction to Magic's SDKs, providing a brief overview of their purpose, capabilities, and requirements for getting started.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/overview#chunk-1", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nWeb\n\nReact Native\n\nAndroid\n\niOS\n\nFlutter\n\nUnity", "explanation": "Based on the provided documentation section '# Client-Side SDK' from the Magic Link documentation, the Client-Side SDK refers to code libraries (Software Development Kits) developed by Magic for various platforms to integrate Magic Link functionality into applications.\n\nThese Client-Side SDKs allow developers to securely authenticate users on their web, mobile, or desktop applications using Magic Links sent to users via email, SMS, or social media.\n\nThe main purpose of the Client-Side SDK is to enable developers to:\n\n1. **Integrate authentication**: Add Magic Link authentication to their applications, making it easy for users to log in and reduce friction in the sign-up process.\n2. **Handle token verification**: Verify Magic Tokens sent to users, ensuring that only authorized users can access their accounts.\n3. **Provide secure token authentication**: Use secure token authentication to protect user accounts and prevent unauthorized access.\n\nThe Client-Side SDKs are platform-specific, allowing developers to easily integrate Magic Link functionality into their applications built using:\n\n- Web technologies (e.g., React, Angular, Vue)\n- Mobile platforms (e.g., React Native, Android, iOS)\n- Desktop platforms (e.g., Flutter, Unity)\n\nBy using the Client-Side SDK, developers can focus on building their applications without worrying about the intricacies of authentication and token management, enabling a seamless and secure user experience for their users.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/overview#chunk-2", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nOverview\n\nRuby\n\nPython\n\nPHP\n\nLaravel\n\nNode", "explanation": "Based on the provided documentation section titled '#Server-Side SDK' from the Magic Labs embedded wallet documentation, I'll explain what it's about and its main purpose.\n\n**What is it about?**\n\nThe Server-Side SDK (Software Development Kit) is a collection of libraries and APIs that allow developers to integrate Magic Labs' embedded wallet functionality into their server-side applications. It provides the necessary tools to authenticate users, manage digital assets, and interact with the wallet on the server-side.\n\n**Main purpose:**\n\nThe primary purpose of the Server-Side SDK is to enable developers to build robust, scalable, and secure server-side applications that leverage Magic Labs' wallet capabilities. With this SDK, developers can:\n\n1. Authenticate users and manage their digital identities.\n2. Create and manage digital assets (e.g., cryptocurrencies, NFTs).\n3. Interact with the wallet on the server-side, allowing for secure transactions and management of user assets.\n\nBy using the Server-Side SDK, developers can build server-side applications that seamlessly integrate with Magic Labs' wallet, providing a secure and efficient experience for users.\n\nThe SDK is available in various programming languages, as listed in the documentation:\n\n1. Ruby\n2. Python\n3. PHP\n4. Laravel (a PHP framework)\n5. Node (a JavaScript runtime)\n\nEach language has its specific documentation and implementation details, providing developers with the necessary guidance to integrate Magic Labs' wallet functionality into their server-side applications.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/overview#chunk-3", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "\u2060This feature requires an enterprise agreement", "explanation": "Based on the provided documentation URL from Magic Link, I'll give a clear and concise explanation of the 'Split KMS' feature.\n\n**What is Split KMS:**\n\nSplit KMS is a feature in Magic Labs that allows organizations to split their Key Management System (KMS) into multiple separate entities, often referred to as \"split keys.\" This separation enables more granular control over user data encryption and access.\n\n**Main Purpose:**\n\nThe main purpose of Split KMS is to provide a higher level of security and compliance for enterprises with strict regulatory requirements, such as GDPR, HIPAA, or PCI-DSS. By splitting the KMS, organizations can:\n\n1. **Encapsulate sensitive data**: Protect specific user data within a separate, isolated environment.\n2. **Enhance control over access**: Allow for more targeted granting/restricting of access permissions.\n3. **Meet regulatory requirements**: Comply with specific regulations that require separate management and access controls for sensitive data.\n\n**Who is it for:**\n\nThe Split KMS feature is suitable for enterprises that need to manage sensitive user data and require a high level of control over access and encryption.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/split-kms#chunk-1", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nMagic offers non-custodial Wallet-as-a-Service, allowing web or mobile application developers to seamlessly integrate web3 wallets into their apps with a familiar web2 user experience. The cornerstone of Magic\u2019s offering is its patented Delegated Key Management System (DKMS).\n\nDelegated Key Management System (DKMS)\n\nWith Split KMS, we can offer our customers increased flexibility and tailored solutions. Recognizing diverse preferences, especially across regions, we are expanding our key management system with options designed to meet specific customer needs. This offering builds on Magic\u2019s DKMS to further decentralize wallet management by splitting private keys into multiple shares using the tested and proven Shamir's Secret Sharing algorithm.\n\nShamir's Secret Sharing algorithm", "explanation": "Based on the provided documentation section titled '#Overview' from the Magic Labs embedded wallet documentation, here's a clear and concise explanation of what it is about and its main purpose:\n\n**Overview**\n\nThe Magic Labs embedded wallet documentation is providing an overview of Magic's Web 3 wallet solution, specifically its Delegated Key Management System (DKMS) and an expansion called 'Split KMS'.\n\n**Main Purpose**\n\nThe main purpose of this section is to introduce Magic's non-custodial Wallet-as-a-Service, which enables developers to integrate web3 wallets into their applications with a web2-like user experience. \n\nThe documentation is designed to explain how Magic's patent-pending DKMS is further enhanced with Split KMS to meet diverse customer needs.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/split-kms#chunk-2", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nUpon first user login, a wallet is generated in a secure environment (iframe in browser), where its private key is then split into separate shares. One key share is encrypted and stored via Magic's patented DKMS technology; the other is on the user's device. If the user wishes to access their wallet on a new device, a device hydration share is encrypted by a customer-hosted encryption service and then securely stored with Magic. Magic provides open-source Infrastructure-as-Code that customers can run on their own cloud vendor accounts to scalably encrypt and decrypt the device hydration share upon successful user authentication.\n\nopen-source Infrastructure-as-Code\n\nSplit KMS retains the same degree of security as the patented DKMS. Neither Magic nor its customers can decrypt and access the key shares without the user authenticating. Furthermore, the keys are only ever decrypted and/or constructed in a secure, client-side environment, accessible only to the user.", "explanation": "The \"#How it Works\" documentation section explains the Magic Labs embedded wallet's security process, specifically the Split KMS (Key Management System) technology. Here's a clear and concise summary of its main purpose:\n\n**Purpose:** The Split KMS technology ensures secure and decentralized key management, providing users with control over their private keys and wallet data.\n\n**Process:**\n\n1. **Private key splitting**: Upon user login, a private key is split into two separate shares and stored: one encrypted on the Magic platform via DKMS and the other on the user's device.\n2. **Device hydration**: When the user wants to access their wallet on a new device, a device hydration share is encrypted by a customer-hosted encryption service and stored with Magic.\n3. **Decryption and access**: Upon successful user authentication, open-source Infrastructure-as-Code allows customers to encrypt and decrypt the device hydration share, enabling wallet access.\n\n**Security Benefits:**\n\n* Neither Magic nor customers can access the key shares without user authentication.\n* Keys are only decrypted in a secure, client-side environment accessible only to the user.\n* Split KMS maintains the same level of security as the patented DKMS technology.\n\nThis process prioritizes user security and control over their private keys and wallet data, while also ensuring scalability and flexibility through open-source Infrastructure-as-Code.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/split-kms#chunk-3", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 Opt-in for Split KMS when opening your developer account with Magic. Note that this feature is currently in invite-only mode; therefore, please contact sales to enable this functionality.\n\n\u2022 Customers using Magic\u2019s Split KMS need to encrypt device hydration private key shares. Magic provides an open-source repository that you can use, make any modifications (if necessary), and deploy it to your AWS account. The encryption API tech stack is optimized for AWS Serverless Architecture, ensuring easy scalability.\n\n\u2022 Register the API endpoints with Magic to receive callbacks for encryption and decryption at runtime when users create a wallet and perform signing transactions.\n\ncontact sales\n\nopen-source repository", "explanation": "**Understanding the '#Usage' Section of Magic Labs Embedded Wallet Documentation**\n\nThe '#Usage' section from the Magic Labs embedded wallet documentation is focused on the usage and implementation of Split KMS (Key Management System) feature in Magic. Here's a breakdown of its main purpose and key points:\n\n**Main Purpose:** The '#Usage' section outlines the steps and requirements to use Magic's Split KMS feature, which allows multiple parties (e.g., developers and users) to control and manage cryptographic keys securely.\n\n**Key Points:**\n\n1. **Opt-in for Split KMS**: To enable Split KMS, users must contact Magic's sales team, as it's currently in invite-only mode.\n2. **Encrypting Device Hydration Private Key Shares**: Magic provides an open-source repository that contains the encryption API, which can be modified and deployed to an AWS account for scalable encryption.\n3. **Registering API Endpoints**: The API endpoints must be registered with Magic to receive callbacks for encryption and decryption at runtime, ensuring secure key management during wallet creation and signing transactions.\n\nIn summary, the '#Usage' section provides a step-by-step guide on how to set up and utilize Magic's Split KMS feature, enabling secure and decentralized key management for developers and users.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/split-kms#chunk-4", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nThe Magic SDK for Go is your entry-point to secure, passwordless authentication for your application. This guide will cover some important topics for getting started with Go APIs and to make the most of Magic's features.", "explanation": "**Overview of the Go API Reference:**\n\nThe Go API Reference is the primary entry-point for integrating Magic Labs' embedded wallet into a Go-based application. This documentation serves as a comprehensive guide for developers to securely implement passwordless authentication in their applications using Magic's APIs.\n\n**Main Purpose:**\n\nThe primary purpose of the Go API Reference is to provide a structured and in-depth introduction to the Magic SDK for Go. This includes:\n\n*   Overview of the SDK and its features\n*   Essential topics for getting started with Go APIs\n*   Best practices for optimizing Magic's features in your application\n\nBy following this guide, developers can securely integrate Magic's passwordless authentication into their Go-based applications, enhancing the user experience and ensuring the highest level of security for their users.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/go#chunk-1", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nThe Magic class is the entry-point to the Magic SDK. It must be instantiated with a Magic secret key.\n\n#\n\nCopy\n\n01\n\ngo get github.com/magiclabs/magic-admin-go\n\n01\n\ngo get github.com/magiclabs/magic-admin-go\n\n02\n\ngo get github.com/magiclabs/magic-admin-go/client\n\n02\n\ngo get github.com/magiclabs/magic-admin-go/client", "explanation": "This section is about installing and setting up the Magic Labs embedded wallet (Magic Admin) on the Go programming language, which is a server-side SDK for the Magic API.\n\n**Main Purpose:**\nThe main purpose of this section is to guide developers through the process of downloading and installing the necessary packages (dependencies) needed to use the Magic SDK in their Go-based server-side applications.\n\n**Key Points:**\n\n1. The Magic class is the entry-point to the Magic SDK and must be instantiated with a Magic secret key.\n2. The section provides two commands to download the required Magic Admin Go packages using the `go get` command. These commands are important for setting up the Magic Labs embedded wallet in your Go application.\n\n**Summary:**\nTo work with the Magic SDK on Go, you need to install the required packages using these commands, which download the necessary dependencies from GitHub repositories.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/go#chunk-2", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n#\n\nParameter\n\nType\n\nDefinition\n\napi_secret_key\n\napi_secret_key\n\nString\n\nYour secret API Key retrieved from the Magic Dashboard.\n\nretries\n\nretries\n\nInteger\n\nTotal number of retries to allow.\n\nretryWait\n\nretryWait\n\ntime.Duration\n\ntime.Duration\n\nA period of time to apply between retry attempts.\n\ntimeout\n\ntimeout\n\ntime.Duration\n\ntime.Duration\n\nA period of time the request is going to wait for a response.", "explanation": "This documentation section is about the `#Constructor - #Magic` in the Magic Labs embedded wallet's Go SDK. It outlines the parameters that can be passed when initializing a new Magic instance, which is a crucial step in using the Magic Labs wallet.\n\n**Main Purpose:**\nThe main purpose of this constructor is to provide flexibility in configuring the Magic instance with various settings for error handling and timeouts, ensuring a robust and reliable connection to the Magic Labs wallet.\n\n**Parameters:**\n\n1. **api_secret_key**: The secret API key obtained from the Magic Dashboard, required for authenticating requests.\n2. **retries**: The total number of retries allowed in case of network errors or timeouts. This helps ensure that requests are not abandoned due to temporary issues.\n3. **retryWait**: The time interval between retry attempts, also known as the backoff time. This can help prevent overwhelming the Magic Labs servers with consecutive requests.\n4. **timeout**: The maximum time the Magic instance will wait for a response from the Magic Labs servers. If this time expires, the request will fail.\n\nBy configuring these settings, developers can finely tune their Magic Labs wallet integration to suit their specific use case and requirements, ensuring a reliable and efficient connection to the wallet.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/go#chunk-3", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\npackage\n\nmain\n\n01\n\npackage\n\nmain\n\n02\n\n02\n\n03\n\nimport\n\n(\n\n03\n\nimport\n\n(\n\n04\n\n\"log\"\n\n04\n\n\"log\"\n\n05\n\n\"fmt\"\n\n05\n\n\"fmt\"\n\n06\n\n\"time\"\n\n06\n\n\"time\"\n\n07\n\n07\n\n08\n\n\"github.com/magiclabs/magic-admin-go\"\n\n08\n\n\"github.com/magiclabs/magic-admin-go\"\n\n09\n\n\"github.com/magiclabs/magic-admin-go/client\"\n\n09\n\n\"github.com/magiclabs/magic-admin-go/client\"\n\n10\n\n)\n\n10\n\n)\n\n11\n\n11\n\n12\n\nfunc\n\nmain\n\n(\n\n)\n\n{\n\n12\n\nfunc\n\nmain\n\n(\n\n)\n\n{\n\n13\n\ncl\n\n:=\n\nmagic\n\n.\n\nNewClientWithRetry\n\n(\n\n5\n\n,\n\ntime\n\n.\n\nSecond\n\n,\n\n10\n\n*\n\ntime\n\n.\n\nSecond\n\n)\n\n13\n\ncl\n\n:=\n\nmagic\n\n.\n\nNewClientWithRetry\n\n(\n\n5\n\n,\n\ntime\n\n.\n\nSecond\n\n,\n\n10\n\n*\n\ntime\n\n.\n\nSecond\n\n)\n\n14\n\nm\n\n,\n\nerr\n\n:=\n\nclient\n\n.\n\nNew\n\n(\n\n\"<SECRET_API_KEY>\"\n\n,\n\ncl\n\n)\n\n14\n\nm\n\n,\n\nerr\n\n:=\n\nclient\n\n.\n\nNew\n\n(\n\n\"<SECRET_API_KEY>\"\n\n,\n\ncl\n\n)\n\n15\n\n}\n\n15\n\n}", "explanation": "**Initialization Section Documentation**\n\nThe '#Initialization' section from the Magic Labs embedded wallet documentation is a Go programming language code snippet that demonstrates how to initialize and set up the Magic Admin client. The main purpose of this code is to establish a connection to the Magic Admin API and authenticate a user.\n\n**Code Breakdown**\n\nThe code initializes three key components:\n\n1. **Magic Admin Client**: The code creates a new instance of the Magic Admin client using the `magic.NewClientWithRetry` function. This function takes three arguments:\n\t* Max retries (in this case, `5`)\n\t* Retry delay (in this case, `time.Second`)\n\t* Maximum retry duration (in this case, `10 * time.Second`)\n2. **Magic Admin Session**: The code creates a new Magic Admin session using the `client.New` function, passing in the `SECRET_API_KEY` and the previously created client instance.\n\n**Key Takeaways**\n\nTo initialize the Magic Admin client in your Go application, you'll need to:\n\n1. Import the required packages (e.g., `github.com/magiclabs/magic-admin-go` and `github.com/magiclabs/magic-admin-go/client`).\n2. Create a new instance of the Magic Admin client using `magic.NewClientWithRetry`.\n3. Create a new Magic Admin session using `client.New`, passing in your `SECRET_API_KEY` and the client instance.\n\n**Example Use Case**\n\nThis initialization code serves as the foundation for subsequent API calls, such as verifying user identities or authenticating users. By successfully initializing the Magic Admin client, your application can interact with the Magic Admin API and perform various operations.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/go#chunk-4", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nThe Token resource provides methods to interact with DID Token.\n\nToken\n\nDID Token\n\nThe token resource does not make any API calls to the Magic server.\n\nCopy\n\n01\n\ntk\n\n,\n\nerr\n\n:=\n\ntoken\n\n.\n\nNewToken\n\n(\n\n\"<DID_TOKEN>\"\n\n)\n\n01\n\ntk\n\n,\n\nerr\n\n:=\n\ntoken\n\n.\n\nNewToken\n\n(\n\n\"<DID_TOKEN>\"\n\n)\n\n02\n\nif\n\nerr\n\n!=\n\nnil\n\n{\n\n02\n\nif\n\nerr\n\n!=\n\nnil\n\n{\n\n03\n\nlog\n\n.\n\nFatalf\n\n(\n\n\"Malformed DID token error: %s\"\n\n,\n\nerr\n\n.\n\nError\n\n(\n\n)\n\n)\n\n03\n\nlog\n\n.\n\nFatalf\n\n(\n\n\"Malformed DID token error: %s\"\n\n,\n\nerr\n\n.\n\nError\n\n(\n\n)\n\n)\n\n04\n\n}\n\n04\n\n}\n\n05\n\n05\n\n06\n\ntk\n\n.\n\nGetIssuer\n\n(\n\n)\n\n06\n\ntk\n\n.\n\nGetIssuer\n\n(\n\n)\n\n07\n\ntk\n\n.\n\nGetPublicAddress\n\n(\n\n)\n\n07\n\ntk\n\n.\n\nGetPublicAddress\n\n(\n\n)\n\n08\n\ntk\n\n.\n\nValidate\n\n(\n\n)\n\n08\n\ntk\n\n.\n\nValidate\n\n(\n\n)\n\n#\n\nGetIssuer\n\nExtracts the iss from the DID Token.\n\niss\n\nCopy\n\n01\n\ntk\n\n,\n\nerr\n\n:=\n\ntoken\n\n.\n\nNewToken\n\n(\n\n\"<DID_TOKEN>\"\n\n)\n\n01\n\ntk\n\n,\n\nerr\n\n:=\n\ntoken\n\n.\n\nNewToken\n\n(\n\n\"<DID_TOKEN>\"\n\n)\n\n02\n\nif\n\nerr\n\n!=\n\nnil\n\n{\n\n02\n\nif\n\nerr\n\n!=\n\nnil\n\n{\n\n03\n\nlog\n\n.\n\nFatalf\n\n(\n\nerr\n\n.\n\nError\n\n(\n\n)\n\n)\n\n03\n\nlog\n\n.\n\nFatalf\n\n(\n\nerr\n\n.\n\nError\n\n(\n\n)\n\n)\n\n04\n\n}\n\n04\n\n}\n\n05\n\ntk\n\n.\n\nGetIssuer\n\n(\n\n)\n\n05\n\ntk\n\n.\n\nGetIssuer\n\n(\n\n)\n\n#\n\n\u2022 DID_TOKEN (string): A DID Token generated by a Magic User on the client-side\n\nDID_TOKEN", "explanation": "Let's break down the `#Token Resource - #GetIssuer - #Arguments` section from the provided documentation.\n\n**What is it about?**\n\nThis section is about the `Token` resource in Magic Labs' embedded wallet documentation, specifically highlighting the `GetIssuer` method. The `Token` resource is used to interact with DID (Decentralized Identifier) Tokens, which are a type of token generated by a Magic User on the client-side.\n\n**Main Purpose:**\n\nThe main purpose of the `GetIssuer` method is to extract the `iss` value from a DID Token. The `iss` value is equivalent to the issuer of the token, which is the entity responsible for issuing the token.\n\n**Key Takeaways:**\n\n- The `GetIssuer` method is a part of the `Token` resource, which does not make any API calls to the Magic server.\n- The method takes a `DID_TOKEN` string as an argument, which is a DID Token generated by a Magic User on the client-side.\n- You can use the following code snippet as an example to extract the issuer from a DID Token:\n  ```go\ntk, err := token.NewToken(\"<DID_TOKEN>\")\nif err != nil {\n    log.Fatalf(\"Malformed DID token error: %s\", err.Error())\n}\nissuer := tk.GetIssuer()\n```\n  Here, `tk` is the Token object, `err` is the error returned by the `NewToken` function, and `issuer` is the extracted `iss` value.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/go#chunk-5", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 token.DIDTokenError: If the given DID Token is malformed\n\ntoken.DIDTokenError", "explanation": "Based on the provided documentation from Magic Link's API for server-side SDKs in Go, the section titled '#Raises' appears to describe potential errors that may be raised when using the Magic Labs Embedded Wallet library.\n\nMore specifically, it seems to be listing error types that can occur when working with DID (Decentralized Identifier) Tokens. \n\nUnfortunately, initially there is limited information provided. To get a more complete understanding of this documentation section we would need to examine other parts documentation that might have more details to explain what a `token.DIDTokenError` specifically looks like.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/go#chunk-6", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 A Decentralized ID (iss) of the Magic user who generated the DID Token\n\niss", "explanation": "The '#Returns' section in the Magic Labs embedded wallet documentation for the Go Server-Side SDK is about the expected output or return values from a specific API call or function. In this case, it appears to be describing the response structure for a DID Token issuance request.\n\nThe main purpose of the '#Returns' section is to provide clear documentation on what values, specifically the 'iss' key in this case, can be expected when successfully calling a particular API function, helping developers understand the API output and integrate it correctly into their applications.\n\nIn this instance, 'iss' specifically refers to the Decentralized ID (DID) of the Magic user who generated the DID Token, providing a unique identifier for the user.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/go#chunk-7", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nGetPublicAddress\n\nGets the cryptographic public address of the Magic User who generated the supplied DID Token.\n\npublic address\n\nCopy\n\n01\n\ntk\n\n,\n\nerr\n\n:=\n\ntoken\n\n.\n\nNewToken\n\n(\n\n\"<DID_TOKEN>\"\n\n)\n\n01\n\ntk\n\n,\n\nerr\n\n:=\n\ntoken\n\n.\n\nNewToken\n\n(\n\n\"<DID_TOKEN>\"\n\n)\n\n02\n\nif\n\nerr\n\n!=\n\nnil\n\n{\n\n02\n\nif\n\nerr\n\n!=\n\nnil\n\n{\n\n03\n\nlog\n\n.\n\nFatalf\n\n(\n\nerr\n\n.\n\nError\n\n(\n\n)\n\n)\n\n03\n\nlog\n\n.\n\nFatalf\n\n(\n\nerr\n\n.\n\nError\n\n(\n\n)\n\n)\n\n04\n\n}\n\n04\n\n}\n\n05\n\ntk\n\n.\n\nGetPublicAddress\n\n(\n\n)\n\n05\n\ntk\n\n.\n\nGetPublicAddress\n\n(\n\n)\n\n#\n\n\u2022 DID_TOKEN (string): A DID Token generated by a Magic user on the client-side\n\nDID_TOKEN", "explanation": "**GetPublicAddress API Method**\n\nThe `GetPublicAddress` API method, located in the Magic Labs embedded wallet's documentation, retrieves the cryptographic public address of the user who generated a provided DID Token.\n\n**Purpose:**\n\nThe main purpose of this method is to provide the public address associated with a Magic user, which can be used for various cryptocurrency or token-related operations.\n\n**Key Parameters:**\n\n- `DID_TOKEN`: A string representing a DID Token generated by a Magic user on the client-side.\n\n**Example Use Case:**\n\nTo get the public address of a user, you would:\n\n1. Create a new `NewToken` instance with the provided DID Token.\n2. Check if any error occurred during token creation.\n3. If no error, call the `GetPublicAddress` method on the token instance.\n4. The method will return the user's public address.\n\nThis process allows you to programmatically retrieve the public address associated with a Magic user, enabling you to facilitate cryptocurrency transactions or use cases that require access to user wallets.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/go#chunk-8", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 token.DIDTokenError: If the given DID Token is malformed\n\ntoken.DIDTokenError", "explanation": "Based on the provided documentation from https://magic.link/docs/api/server-side-sdks/go, the '#Raises' section in the Magic Labs embedded wallet API documentation refers to error handling and exceptions that might occur when using the token package.\n\nIn this specific case, the two errors mentioned are:\n\n*   `token.DIDTokenError`: This error is raised when the given DID (Decentralized Identifier) Token is malformed. A malformed DID Token could be due to incorrect formatting, expired or invalid token, etc.\n\n**Main Purpose:**\n\nThe purpose of this error is to inform the developer that the input DID Token is not valid, and they need to handle this situation accordingly. This could be handled by retrying the operation with a new DID Token or presenting an error message to the user to request a valid Token.\n\nThis error handling mechanism enables developers to write more robust and resilient code that can gracefully handle exceptions and provide a better experience for their users.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/go#chunk-9", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 A public address of the Magic User who generated the DID Token. Currently, this value is associated with the Ethereum blockchain.\n\npublic address", "explanation": "According to the Magic Labs embedded wallet documentation, the section '#Returns' seems to be describing what information is returned or provided when using certain API methods, specifically for the Go SDK.\n\nTo be specific, the phrase \"public address of the Magic User who generated the DID Token\" suggests that this documentation section is explaining what value is returned or accessed when dealing with a DID (Decentralized Identity) token generated by a Magic User.\n\nBased on the Ethereum blockchain association mentioned, it appears that this public address is likely an Ethereum wallet address, which is a publicly visible identifier used for transactions and interactions on the Ethereum network.\n\nIn summary, the '#Returns' section is providing information about the data returned by specific API methods in the Go SDK, focusing on the public Ethereum address associated with a Magic User who generated a DID Token.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/go#chunk-10", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nValidate\n\nValidates a DID token.\n\nCopy\n\n01\n\ntk\n\n,\n\nerr\n\n:=\n\ntoken\n\n.\n\nNewToken\n\n(\n\n\"<DID_TOKEN>\"\n\n)\n\n01\n\ntk\n\n,\n\nerr\n\n:=\n\ntoken\n\n.\n\nNewToken\n\n(\n\n\"<DID_TOKEN>\"\n\n)\n\n02\n\nif\n\nerr\n\n!=\n\nnil\n\n{\n\n02\n\nif\n\nerr\n\n!=\n\nnil\n\n{\n\n03\n\nlog\n\n.\n\nFatalf\n\n(\n\nerr\n\n.\n\nError\n\n(\n\n)\n\n)\n\n03\n\nlog\n\n.\n\nFatalf\n\n(\n\nerr\n\n.\n\nError\n\n(\n\n)\n\n)\n\n04\n\n}\n\n04\n\n}\n\n05\n\nerr\n\n=\n\ntk\n\n.\n\nValidate\n\n(\n\n)\n\n05\n\nerr\n\n=\n\ntk\n\n.\n\nValidate\n\n(\n\n)\n\n#\n\n\u2022 DID_TOKEN (string): A DID Token generated by a Magic user on the client-side\n\nDID_TOKEN", "explanation": "Let's break down the `#Validate` section from the Magic Labs embedded wallet documentation.\n\n**What is it about?**\n\nThe `#Validate` section is about validating a Digital Identity (DID) token generated by a Magic user on the client-side. This token is used to prove ownership and identity on the server-side.\n\n**Main Purpose**\n\nThe main purpose of the `#Validate` section is to verify the authenticity and integrity of the DID token. This is done by calling the `Validate` method on the `NewToken` object, which checks the token's signature and other metadata.\n\nHere's a high-level overview of the steps involved:\n\n1. Create a new `NewToken` object using the DID token string.\n2. Check if an error was returned during token creation (if there was a problem). If so, log an error message and exit.\n3. Call the `Validate` method on the token object to check its validity. If an error occurs during validation, log an error message and exit.\n\n**Code Snippet Breakdown**\n\n```go\n01 tk, err := token.NewToken(\"<DID_TOKEN>\")\n02 if err != nil {\n03 log.Fatal(err.Error())\n04 }\n05 err = tk.Validate()\n06 if err != nil {\n07 log.Fatal(err.Error())\n08 }\n```\n\nIn summary, the `#Validate` section is about checking the validity of a DID token generated by a Magic user, ensuring it's authentic and not tampered with. This verification step is crucial for secure server-side interactions with Magic users.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/go#chunk-11", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 token.DIDTokenError: If the given DID Token is malformed\n\ntoken.DIDTokenError", "explanation": "Based on the provided documentation, this section is titled '#Raises' which refers to error handling in the context of the Magic Labs embedded wallet API.\n\n**Purpose:**\nThe '#Raises' section documents the potential errors or exceptions that can occur when using the Magic Labs embedded wallet API, specifically related to DID Token operations.\n\n**Main Purpose:**\n\n* To inform developers about the possible errors they might encounter when integrating the Magic Labs API into their applications.\n* To provide a clear understanding of the error types and their corresponding details, making it easier for developers to identify and handle these errors in their code.\n\nIn this specific case, the documentation highlights that a `token.DIDTokenError` is raised when the given DID Token is malformed, indicating a specific error type that developers should be aware of and handle accordingly.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/go#chunk-12", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 boolean value indicating the validity of the token\n\nboolean", "explanation": "The '#Returns' section from the Magic Labs embedded wallet documentation is about a data response indicating the verification status of a Magic Link via the Magic SDK in Go.\n\nIts main purpose is to:\n\n1. Return a boolean value that tells whether the provided verification token is valid or not.\n2. This boolean value helps your application to further proceed with the user's authentication process, making decisions about subsequent actions based on the validity of the token.\n\nHere's a summary in simple terms:\n\n- True/1: Magic Link token is valid.\n- False/0: Magic Link token is invalid.\n\nThis value is critical in determining if a user is successfully authenticated.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/go#chunk-13", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nThe User resource and its methods are accessible on the Magic client instance by the User attribute. It provides methods to interact with Magic API.\n\nUser\n\nUser\n\nCopy\n\n01\n\nm\n\n,\n\nerr\n\n:=\n\nclient\n\n.\n\nNew\n\n(\n\n\"<SECRET_API_KEY>\"\n\n,\n\nmagic\n\n.\n\nNewDefaultClient\n\n(\n\n)\n\n)\n\n01\n\nm\n\n,\n\nerr\n\n:=\n\nclient\n\n.\n\nNew\n\n(\n\n\"<SECRET_API_KEY>\"\n\n,\n\nmagic\n\n.\n\nNewDefaultClient\n\n(\n\n)\n\n)\n\n02\n\n02\n\n03\n\nm\n\n.\n\nUser\n\n03\n\nm\n\n.\n\nUser\n\n04\n\nm\n\n.\n\nUser\n\n.\n\nGetMetadataByIssuer\n\n04\n\nm\n\n.\n\nUser\n\n.\n\nGetMetadataByIssuer\n\n05\n\nm\n\n.\n\nUser\n\n.\n\nGetMetadataByPublicAddress\n\n05\n\nm\n\n.\n\nUser\n\n.\n\nGetMetadataByPublicAddress\n\n06\n\nm\n\n.\n\nUser\n\n.\n\nGetMetadataByToken\n\n06\n\nm\n\n.\n\nUser\n\n.\n\nGetMetadataByToken\n\n07\n\nm\n\n.\n\nUser\n\n.\n\nLogoutByIssuer\n\n07\n\nm\n\n.\n\nUser\n\n.\n\nLogoutByIssuer\n\n08\n\nm\n\n.\n\nUser\n\n.\n\nLogoutByPublicAddress\n\n08\n\nm\n\n.\n\nUser\n\n.\n\nLogoutByPublicAddress\n\n09\n\nm\n\n.\n\nUser\n\n.\n\nLogoutByToken\n\n09\n\nm\n\n.\n\nUser\n\n.\n\nLogoutByToken\n\n#\n\nGetMetadataByIssuer\n\nRetrieves information about the user by the supplied iss from the DID Token. This method is useful if you store the iss with your user data, which is recommended.\n\niss\n\niss\n\nCopy\n\n01\n\nuserInfo\n\n,\n\nerr\n\n:=\n\nm\n\n.\n\nUser\n\n.\n\nGetMetadataByIssuer\n\n(\n\nissuer\n\n)\n\n01\n\nuserInfo\n\n,\n\nerr\n\n:=\n\nm\n\n.\n\nUser\n\n.\n\nGetMetadataByIssuer\n\n(\n\nissuer\n\n)\n\n#\n\n\u2022 issuer (string): The user's Decentralized ID, which can be parsed using Token.GetIssuer\n\nissuer\n\nToken.GetIssuer", "explanation": "**#User Resource - #GetMetadataByIssuer - #Arguments Explanation**\n\nThis documentation section is about a method called `GetMetadataByIssuer` under the `User` resource in the Magic Labs embedded wallet API.\n\n**Main Purpose:**\nThe `GetMetadataByIssuer` method retrieves user metadata based on the Decentralized ID (DID) of the user, which is stored in the `iss` field of the DID Token. This method is useful when you store the `iss` value with user data, which is recommended.\n\n**Key Functionality:**\n- It calls the `User.GetMetadataByIssuer()` method, passing in the `issuer` argument.\n- The `issuer` argument is the user's Decentralized ID, which can be parsed using the `Token.GetIssuer` method.\n- The method returns `userInfo`, which is the retrieved user metadata, along with an error `err` if any.\n\n**Typical Usage:**\n```go\nuserInfo, err := client.User.GetMetadataByIssuer(\"Decentralized-User-ID\")\nif err != nil {\n    // Handle error\n}\n```\nIn summary, `GetMetadataByIssuer` allows you to fetch user metadata based on the stored Decentralized ID (DID), which is a convenient way to retrieve user information without storing the entire DID token.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/go#chunk-14", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 magic.Error: If an error response is received from the Magic API, it will contain information about the error\n\n\u2022 magic.APIConnectionError: If your server cannot communicate with the Magic server. Normally this is a network communication error.\n\nmagic.Error\n\nmagic.Error\n\nmagic.APIConnectionError\n\nSee Error Handling for more examples.\n\nError Handling", "explanation": "**Magic API Error Handling: #Raises**\n\nIn the Magic API documentation for the Go server-side SDK, the '#Raises' section explains how the library handles potential errors that may occur during API interactions.\n\n**Main Purpose:**\n\nThe main purpose of this section is to inform developers about the possible errors that can be raised when using the Magic API, and to guide them on how to handle these errors in their applications.\n\n**Types of Errors:**\n\nThere are two primary error types mentioned:\n\n1. **magic.Error**: This error is raised when the Magic API returns an error response, providing information about the error that occurred.\n2. **magic.APIConnectionError**: This error is raised when the server is unable to communicate with the Magic server, typically due to a network communication error.\n\n**Error Handling:**\n\nThe documentation references a separate section on 'Error Handling' for more examples and guidance on how to handle these errors in code. This section likely provides examples of how to catch and handle these error types in Go, allowing developers to implement robust error handling in their applications.\n\nIn summary, the '#Raises' section provides an overview of potential errors that can occur when using the Magic API, and points developers to the 'Error Handling' section for further guidance on how to handle these errors in their code.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/go#chunk-15", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 A MagicResponse: The data field contains all of the user meta information.issuer (str): The user's Decentralized IDpublic_address (str): The authenticated user's public address (a.k.a.: public key). Currently, this value is associated with the Ethereum blockchain.email (str): The user's email address\n\nMagicResponse\n\ndata\n\n\u2022 issuer (str): The user's Decentralized ID\n\n\u2022 public_address (str): The authenticated user's public address (a.k.a.: public key). Currently, this value is associated with the Ethereum blockchain.\n\n\u2022 email (str): The user's email address\n\nissuer\n\npublic_address\n\nemail", "explanation": "**What is the 'Returns' section?**\n\nThe 'Returns' section in the Magic Labs embedded wallet documentation provides information on the structure and fields of the response data received when a user is authenticated with email and password using the Magic API SDK for Go.\n\n**Main purpose:**\n\nThe main purpose of the 'Returns' section is to specify the JSON object format, known as `MagicResponse`, that contains the user's meta information after a successful authentication. This allows developers to understand the format of the response data and how to retrieve the user's details, such as their Decentralized ID, public address (or public key), and email address. \n\nKey takeaways from this section include understanding the key fields and values returned in the `data` field, which itself is contained within the `MagicResponse` object. \n\nThese details are crucial for developers to correctly interpret the response data from the Magic API and implement the embedding wallet functionality accordingly.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/go#chunk-16", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nGetMetadataByPublicAddress\n\nRetrieves information about the user by the supplied PublicAddress. This method is useful if you store the PublicAddress with your user data.\n\nPublicAddress\n\nPublicAddress\n\nCopy\n\n01\n\nuserInfo\n\n,\n\nerr\n\n:=\n\nUser\n\n.\n\nGetMetadataByPublicAddress\n\n(\n\npublicAddress\n\n)\n\n01\n\nuserInfo\n\n,\n\nerr\n\n:=\n\nUser\n\n.\n\nGetMetadataByPublicAddress\n\n(\n\npublicAddress\n\n)\n\n#\n\n\u2022 publicAddress (string): The user's Ethereum public address, which can be parsed using Token.GetPublicAddress\n\npublicAddress\n\nToken.GetPublicAddress", "explanation": "**GetMetadataByPublicAddress API Method**\n\nThe `GetMetadataByPublicAddress` method is an API function used to retrieve information about a Magic wallet user based on their Ethereum public address.\n\n**Purpose:**\n\nThis method allows you to retrieve user metadata without requiring users to go through the authentication process. It's particularly useful when storing the user's public address alongside their account data.\n\n**Key Functionality:**\n\nBy supplying a user's Ethereum public address, the API method returns relevant user metadata, including their account information. This eliminates the need for users to re-authenticate or manually link their account to retrieve their metadata.\n\n**Usage:**\n\nTo use this method, you simply need to pass the user's public address as a string argument to the `GetMetadataByPublicAddress` function. The function will then return the user metadata and any potential error messages.\n\n**Example:**\n\n```go\nuserData, err := user.GetMetadataByPublicAddress(publicAddress)\n```", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/go#chunk-17", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 magic.Error: If an error response is received from the Magic API, it will contain information about the error\n\n\u2022 magic.APIConnectionError: If your server cannot communicate with the Magic server. Normally this is a network communication error.\n\nmagic.Error\n\nmagic.Error\n\nmagic.APIConnectionError\n\nSee Error Handling for more examples.\n\nError Handling", "explanation": "**Error Handling in Magic Labs Embedded Wallet**\n=====================================================\n\nThe `#Raises` section from the Magic Labs embedded wallet documentation explains the types of errors that may occur during API interactions and how they are handled.\n\n**Main Purpose:**\nThe main purpose of error handling in the Magic Labs embedded wallet is to provide a way to anticipate and manage potential issues that may arise during API requests, ensuring that your application remains stable and can provide users with more informative error messages.\n\n**Types of Errors:**\n\n1.  **magic.Error**: Occurs when the Magic API returns an error response. It includes information about the error, allowing for more context to be provided to users.\n2.  **magic.APIConnectionError**: Typically caused by network communication errors, preventing your server from connecting to the Magic server.\n\n**Error Handling:**\n\n*   To better understand how to handle these errors, refer to the `Error Handling` section of the documentation for additional examples and guidance.\n*   By incorporating error handling into your Magic Labs embedded wallet implementation, you can provide a more robust and user-friendly experience, even when API requests encounter issues.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/go#chunk-18", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 A MagicResponse: The data field contains all of the user meta information.issuer (str): The user's Decentralized IDpublic_address (str): The authenticated user's public address (a.k.a.: public key). Currently, this value is associated with the Ethereum blockchain.email (str): The user's email address\n\nMagicResponse\n\ndata\n\n\u2022 issuer (str): The user's Decentralized ID\n\n\u2022 public_address (str): The authenticated user's public address (a.k.a.: public key). Currently, this value is associated with the Ethereum blockchain.\n\n\u2022 email (str): The user's email address\n\nissuer\n\npublic_address\n\nemail", "explanation": "**Explanation of the '#Returns' Section**\n\nThe '#Returns' section from the Magic Labs embedded wallet documentation is about the expected response format when a MagicResponse is returned in the API. A MagicResponse is a data structure that contains information about the authenticated user.\n\n**Purpose**\n\nThe main purpose of this section is to clearly define the structure and contents of the MagicResponse data field. It provides details on what data is returned within the data field, including:\n\n1. **Decentralized ID (issuer)**: a unique identifier for the user.\n2. **Public Address (public_address)**: the user's public address (or public key) associated with the Ethereum blockchain.\n3. **Email (email)**: the user's email address.\n\nBy understanding the structure and contents of the MagicResponse, developers can effectively retrieve and use the user's data in their applications.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/go#chunk-19", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nGetMetadataByToken\n\nRetrieves information about the user by the supplied DID Token.\n\nCopy\n\n01\n\nuserInfo\n\n,\n\nerr\n\n:=\n\nUser\n\n.\n\nGetMetadataByToken\n\n(\n\ndidToken\n\n)\n\n01\n\nuserInfo\n\n,\n\nerr\n\n:=\n\nUser\n\n.\n\nGetMetadataByToken\n\n(\n\ndidToken\n\n)\n\n#\n\n\u2022 didToken (string): A DID Token generated by a Magic User on the client-side\n\ndidToken", "explanation": "**Metadata Retrieval with GetMetadataByToken**\n\nThe `GetMetadataByToken` function is a part of Magic Labs' embedded wallet API. Its primary purpose is to retrieve user information by using a DID (Decentralized Identifier) token generated by a user on the client-side.\n\n**Purpose:**\n\nWhen a user generates a DID token on their client-side, this function allows your server-side API to retrieve the associated user metadata without requiring the user to interact with your application again. This flow promotes a secure and seamless user experience.\n\n**Key Argument:**\n\n- `didToken (string)`: A unique DID token generated by the user, which serves as an identifier to authenticate the user and authorize metadata retrieval.\n\n**Function Signature:**\n\nThe function appears in two forms with identical behavior, using a single return value for `userInfo` and an error object for `err`.\n\n```go\nfunc (c *Client) GetMetadataByToken(didToken string) (userInfo User, err error)\n\nfunc (c *Client) GetMetadataByToken(didToken string) (userInfo User, err error)\n```\n\nBy passing the `didToken` argument to `GetMetadataByToken`, your server-side application can securely fetch user information without requiring additional authentication steps or interactive user sessions.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/go#chunk-20", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 magic.Error: If an error response is received from the Magic API, it will contain information about the error\n\n\u2022 magic.APIConnectionError: If your server cannot communicate with the Magic server. Normally this is a network communication error.\n\nmagic.Error\n\nmagic.Error\n\nmagic.APIConnectionError\n\nSee Error Handling for more examples.\n\nError Handling", "explanation": "**Understanding #Raises in Magic Labs Embedded Wallet Documentation**\n\nThe section titled '#Raises' is a part of the Magic Labs embedded wallet documentation for the Go server-side SDK. It lists the types of errors that can be raised by the Magic API and its Go client.\n\n**Purpose:**\n\nThe main purpose of this section is to provide an overview of the error handling mechanism in the Magic Labs embedded wallet. It informs developers about the types of errors that can occur when interacting with the Magic API, so they can handle and troubleshoot them properly.\n\n**Types of Errors:**\n\nThe section #Raises lists two main types of errors that can be raised by the Magic API and its Go client:\n\n1. **magic.Error**: This type of error is raised when the Magic API returns an error response. It contains information about the error, allowing developers to handle and troubleshoot it.\n2. **magic.APIConnectionError**: This type of error is raised when the server cannot communicate with the Magic server due to network communication issues.\n\n**Key Takeaway:**\n\nBy understanding the types of errors that can be raised by the Magic API, developers can implement robust error handling mechanisms in their Magic Labs embedded wallet applications, ensuring a better user experience and easier troubleshooting of issues.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/go#chunk-21", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 A MagicResponse: The data field contains all of the user meta information.issuer (str): The user's Decentralized IDpublic_address (str): The authenticated user's public address (a.k.a.: public key). Currently, this value is associated with the Ethereum blockchain.email (str): The user's email address\n\nMagicResponse\n\ndata\n\n\u2022 issuer (str): The user's Decentralized ID\n\n\u2022 public_address (str): The authenticated user's public address (a.k.a.: public key). Currently, this value is associated with the Ethereum blockchain.\n\n\u2022 email (str): The user's email address\n\nissuer\n\npublic_address\n\nemail", "explanation": "**Returns: Success Response from Login API**\n\nThe '#Returns' section in the Magic Labs embedded wallet documentation explains the structure of a successful response received from the login API.\n\n**Main Purpose:**\n\nWhen a user successfully logs in using the Magic Labs embedded wallet, the server-side login API returns a JSON response containing the user's metadata. This section outlines the properties of this response, ensuring developers can correctly interpret and utilize the returned data.\n\n**Key Fields:**\n\n1. **data**: This field contains the user's metadata.\n2. **issuer**: The user's Decentralized ID (DID), a unique identifier for the user.\n3. **public_address**: The authenticated user's public address (a.k.a. public key), currently linked to the Ethereum blockchain.\n4. **email**: The user's registered email address.\n\nBy understanding the structure of the success response, developers can access and leverage the user's metadata in their applications, enhancing the user experience and ensuring seamless interaction with the Magic Labs embedded wallet.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/go#chunk-22", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nLogoutByIssuer\n\nLogs a user out of all Magic SDK sessions given the user's Decentralized ID (iss). This method is useful if you store the iss with your user data, which is recommended.\n\niss\n\niss\n\nCopy\n\n01\n\nerr\n\n:=\n\nUser\n\n.\n\nLogoutByIssuer\n\n(\n\nissuer\n\n)\n\n01\n\nerr\n\n:=\n\nUser\n\n.\n\nLogoutByIssuer\n\n(\n\nissuer\n\n)\n\n#\n\n\u2022 issuer (string): The user's Decentralized ID, which can be parsed using Token.GetIssuer\n\nissuer\n\nToken.GetIssuer", "explanation": "**LogoutByIssuer - #Arguments**\n\nThe `LogoutByIssuer` function is a method in the Magic Labs embedded wallet that logs a user out of all Magic SDK sessions given their Decentralized ID (iss).\n\n**Main Purpose:**\n\nThe main purpose of `LogoutByIssuer` is to facilitate user logout from Magic SDK sessions when you store the user's Decentralized ID (iss) alongside their data. This is a recommended practice to maintain user security and session management.\n\n**Usage:**\n\nTo use `LogoutByIssuer`, you need to provide the user's Decentralized ID as a string argument in the function call. You can obtain the Decentralized ID using `Token.GetIssuer`. In the context of Go, the function signature is as follows:\n\n```go\nLogoutByIssuer(issuer string) error\n```\n\n**Key Functionality:**\n\n*   Takes in a `issuer` parameter, which is the user's Decentralized ID.\n*   Logs the user out of all Magic SDK sessions associated with the provided Decentralized ID.\n\n**Best Practice:**\n\nStoring the user's Decentralized ID alongside their data is a recommended practice for seamless user logout and login functionality.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/go#chunk-23", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 magic.Error: If an error response is received from the Magic API, it will contain information about the error\n\n\u2022 magic.APIConnectionError: If your server cannot communicate with the Magic server. Normally this is a network communication error.\n\nmagic.Error\n\nmagic.Error\n\nmagic.APIConnectionError\n\nSee Error Handling for more examples.\n\nError Handling", "explanation": "Based on the documentation section titled '#Raises' from the provided URL, it appears to discuss the potential exceptions that can be raised by the Magic Labs embedded wallet in a Go (Golang) environment.\n\nThe main purpose of this section is to inform developers about the possible errors that can occur when using the Magic Labs API, and what types of errors they might encounter.\n\nHere's a breakdown of the key points:\n\n1. Two types of errors are raised:\n   - `magic.Error`: This occurs when the Magic API returns an error response, providing information about the error.\n   - `magic.APIConnectionError`: This occurs when there is a communication issue between the server and the Magic Server, usually a network-related error.\n\n2. Error handling is essential in coding to prevent and manage these exceptions, ensuring the stability and reliability of the application.\n\n3. Additional guidance on handling errors can be found under the 'Error Handling' section of the documentation.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/go#chunk-24", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 A MagicResponse\n\nMagicResponse", "explanation": "In the given documentation from Magic Labs, the '#Returns' section pertains to the function's return value. Specifically, it states that the function returns a `MagicResponse`.\n\nA MagicResponse in the context of Magic Labs' embedded wallet API likely represents a response from the Magic Labs server, typically containing data or error messages related to the wallet or other relevant operations.\n\nThe main purpose of this return type is to provide a standardized way for the API to communicate back to the client, allowing the client to process the response and perform necessary actions, such as:\n\n- Handling successful transactions\n- Processing errors or exceptions\n- Upgrading or renewing the digital wallet\n- Sending or receiving cryptocurrency or assets\n\nIn a nutshell, the MagicResponse acts as a guardian ensuring the client receives accurate and actionable information to proceed with the desired actions.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/go#chunk-25", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nLogoutByPublicAddress\n\nLogs a user out of all Magic SDK sessions given the user's public address. This method is useful if you store the publicAddress.\n\npublicAddress\n\nCopy\n\n01\n\nerr\n\n:=\n\nUser\n\n.\n\nLogoutByPublicAddress\n\n(\n\npublicAddress\n\n)\n\n01\n\nerr\n\n:=\n\nUser\n\n.\n\nLogoutByPublicAddress\n\n(\n\npublicAddress\n\n)\n\n#\n\n\u2022 publicAddress (string): The user's Ethereum public address\n\npublicAddress", "explanation": "**LogoutByPublicAddress Method Overview**\n\nThe `LogoutByPublicAddress` method in Magic Labs' embedded wallet documentation allows you to log a user out of all Magic SDK sessions given their Ethereum public address. This is a useful feature if you store the user's public address.\n\n**Main Purpose:**\n\nThe main purpose of this method is to enable automatic user logout when their public address is provided. This helps maintain security by ensuring users are logged out from all sessions when their address is compromised or if they need to log out from multiple devices.\n\n**Key Argument:**\n\nThe `publicAddress` argument is a string representing the user's Ethereum public address. This is the primary identifier used to log the user out of all Magic SDK sessions.\n\n**Method Signature:**\n\nThe method signature is as follows:\n\n```go\nfunc LogoutByPublicAddress(publicAddress string) (*User, error)\n```\n\nYou can call this method by supplying the user's Ethereum public address, and it will log them out of all Magic SDK sessions.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/go#chunk-26", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 magic.Error: If an error response is received from the Magic API, it will contain information about the error\n\n\u2022 magic.APIConnectionError: If your server cannot communicate with the Magic server. Normally this is a network communication error.\n\nmagic.Error\n\nmagic.Error\n\nmagic.APIConnectionError\n\nSee Error Handling for more examples.\n\nError Handling", "explanation": "In the Magic Labs embedded wallet documentation, the section '#Raises' describes the possible error responses that may occur when interacting with the Magic API using the Magic Labs Go SDK. \n\nHere are the main points to understand:\n\n- When the Magic API returns an error response, it will be returned as a `magic.Error` object.\n- If there is a network communication issue between the Magic server and the server using the Magic Labs SDK, an `APIConnectionError` will be raised.\n\nIn simpler terms, this section explains how the Magic Labs Go SDK handles potential errors that may arise from API interactions. It informs developers of the possibilities and types of errors they might encounter, directing them to the 'Error Handling' section for more comprehensive information on error handling and mitigation.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/go#chunk-27", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 A MagicResponse\n\nMagicResponse", "explanation": "Based on the provided documentation from Magic Link, the '#Returns' section is about the expected return types from the Magic Labs Embedded Wallet API.\n\n**Main Purpose:**\n\nThe main purpose of this section is to inform developers about the structure and format of the responses they can expect from the API calls. Specifically, in this case, it mentions that the API will return a `MagicResponse`.\n\n**What is a MagicResponse?**\n\nA `MagicResponse` is a data structure that represents the outcome of a Magic Labs Embedded Wallet API call. It is likely an object or a struct that contains various fields providing information about the result of the API call, such as errors, status codes, and additional data related to the operation.\n\nIn summary, the '#Returns' section is essential for developers to understand the expected response format from the Magic Labs Embedded Wallet API, allowing them to write robust and error-handling code when integrating the API into their applications.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/go#chunk-28", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nLogoutByToken\n\nLogs a user out of all Magic SDK sessions given the DID Token.\n\nCopy\n\n01\n\nerr\n\n:=\n\nUser\n\n.\n\nLogoutByToken\n\n(\n\ndidToken\n\n)\n\n01\n\nerr\n\n:=\n\nUser\n\n.\n\nLogoutByToken\n\n(\n\ndidToken\n\n)\n\n#\n\n\u2022 didToken (string): A DID Token generated by a Magic user on the client-side\n\ndidToken", "explanation": "**LogoutByToken API Explanation**\n\nThe `LogoutByToken` API is a part of the Magic Labs embedded wallet documentation, specifically in the Go server-side SDK. Its primary purpose is to securely log a user out of all Magic SDK sessions after a DID (Decentralized Identifier) Token has been generated on the client-side.\n\n**Main Purpose:**\n\nThe main purpose of `LogoutByToken` is to invalidate all active sessions associated with the specified DID Token, effectively logging the user out. This ensures that even if the user's DID Token is compromised, the attacker cannot access the user's account.\n\n**Key Parameters:**\n\n* `didToken (string)`: This is the DID Token generated by the Magic user on the client-side. It is used to identify the user and invalidate their active sessions.\n\n**Usage:**\n\nTo log a user out using the `LogoutByToken` API, you simply need to pass the `didToken` as an argument to the API. The API will then invalidate all active sessions associated with the provided DID Token.\n\n**Example Code Snippet:**\n\n```go\nuser, err := user.LogoutByToken(\"didToken\")\n```\n\nOr, if you prefer to reuse the `user` variable:\n\n```go\nuser, err := user.LogoutByToken(didToken)\n```", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/go#chunk-29", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 magic.Error: If an error response is received from the Magic API, it will contain information about the error\n\n\u2022 magic.APIConnectionError: If your server cannot communicate with the Magic server. Normally this is a network communication error.\n\nmagic.Error\n\nmagic.Error\n\nmagic.APIConnectionError\n\nSee Error Handling for more examples.\n\nError Handling", "explanation": "**Error Handling in Magic Labs Embedded Wallet Documentation**\n\nIn the provided documentation section titled '#Raises', it's explained that Magic Labs embedded wallet's Go SDK may raise certain exceptions under specific circumstances.\n\n**Main Purpose:**\n\nThe main purpose of this section is to inform developers about the potential errors that can occur when using the Magic Labs embedded wallet's Go SDK. By understanding these exceptions, developers can handle errors effectively and ensure a smooth user experience.\n\n**Key Exceptions:**\n\nThe documentation highlights three types of exceptions that may be raised:\n\n1. **magic.Error**: This exception occurs when the Magic API returns an error response.\n2. **magic.APIConnectionError**: This exception occurs when there is a network communication error between your server and the Magic server.\n\n**Recommendation:**\n\nTo handle errors effectively, developers are encouraged to refer to the 'Error Handling' section of the documentation for more examples and guidance on how to handle these exceptions.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/go#chunk-30", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 A MagicResponse\n\nMagicResponse", "explanation": "Based on the Magic Labs embedded wallet documentation, the '#Returns' section is where API endpoints return data to the client. \n\nIn this case, the 'MagicResponse' is the data structure used for API call return handling, thereby indicating that a request was executed and returning the associated information to the client as per its request. In other words, the 'MagicResponse' encapsulates the response generated after the API receives any valid and approved client requests.\n\nThe main purpose of this section within 'MagicResponse' is to organize server-side responses back to the client upon completing any task executed by the API endpoints including providing the expected result, whether it's data, status codes, error messages, etc. This helps a client (in this example, Magic Labs embedded wallets) maintain clear visibility of their queries executed on the server-side.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/go#chunk-31", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nIt is recommended to implement error handling for API responses.\n\n#\n\nThe conventional HTTP response is adopted by the SDK. For the status code in:\n\n\u2022 2XX - Indicates success\n\n\u2022 4XX - Indicates client errors. Information provided to the SDK is invalid\n\n\u2022 5XX - Indicates server errors\n\n2XX\n\n4XX\n\n5XX\n\n#\n\nmagic.Error is the base struct of all the API errors. You can check the error type to determine the API error accordingly.\n\nmagic.Error\n\nCopy\n\n01\n\n_\n\n,\n\nerr\n\n:=\n\n// library call\n\n01\n\n_\n\n,\n\nerr\n\n:=\n\n// library call\n\n02\n\n02\n\n03\n\nif\n\nerr\n\n!=\n\nnil\n\n{\n\n03\n\nif\n\nerr\n\n!=\n\nnil\n\n{\n\n04\n\n// Matching error by error type for a failed HTTP request.\n\n04\n\n// Matching error by error type for a failed HTTP request.\n\n05\n\nswitch\n\nerr\n\n.\n\n(\n\ntype\n\n)\n\n{\n\n05\n\nswitch\n\nerr\n\n.\n\n(\n\ntype\n\n)\n\n{\n\n06\n\ncase\n\n(\n\n*\n\nmagic\n\n.\n\nForbiddenError\n\n)\n\n:\n\n06\n\ncase\n\n(\n\n*\n\nmagic\n\n.\n\nForbiddenError\n\n)\n\n:\n\n07\n\n// Handle forbidden error.\n\n07\n\n// Handle forbidden error.\n\n08\n\ncase\n\n(\n\n*\n\nmagic\n\n.\n\nBadRequestError\n\n)\n\n:\n\n08\n\ncase\n\n(\n\n*\n\nmagic\n\n.\n\nBadRequestError\n\n)\n\n:\n\n09\n\n// Handle bad request error.\n\n09\n\n// Handle bad request error.\n\n10\n\ncase\n\n(\n\n*\n\nmagic\n\n.\n\nRateLimitingError\n\n)\n\n:\n\n10\n\ncase\n\n(\n\n*\n\nmagic\n\n.\n\nRateLimitingError\n\n)\n\n:\n\n11\n\n// Handle rate limiting error.\n\n11\n\n// Handle rate limiting error.\n\n12\n\ncase\n\n(\n\n*\n\nmagic\n\n.\n\nAuthenticationError\n\n)\n\n:\n\n12\n\ncase\n\n(\n\n*\n\nmagic\n\n.\n\nAuthenticationError\n\n)\n\n:\n\n13\n\n// Handle authentication error.\n\n13\n\n// Handle authentication error.\n\n14\n\ncase\n\n(\n\n*\n\nmagic\n\n.\n\nAPIConnectionError\n\n)\n\n:\n\n14\n\ncase\n\n(\n\n*\n\nmagic\n\n.\n\nAPIConnectionError\n\n)\n\n:\n\n15\n\n// Handle authentication error.\n\n15\n\n// Handle authentication error.\n\n16\n\ndefault\n\n:\n\n16\n\ndefault\n\n:\n\n17\n\nfmt\n\n.\n\nPrintf\n\n(\n\n\"Other HTTP request error: %v\\n\"\n\n,\n\nerr\n\n.\n\nError\n\n(\n\n)\n\n)\n\n17\n\nfmt\n\n.\n\nPrintf\n\n(\n\n\"Other HTTP request error: %v\\n\"\n\n,\n\nerr\n\n.\n\nError\n\n(\n\n)\n\n)\n\n18\n\n}\n\n18\n\n}\n\n19\n\n}\n\n19\n\n}\n\n429\n\n400\n\n401\n\n403\n\n500\n\n404", "explanation": "**Response and Error Handling in Magic Labs Embedded Wallet Documentation**\n\n**Purpose:**\n\nThe primary purpose of this section is to guide developers in implementing error handling for API responses in Magic Labs embedded wallet documentation. It provides information on how to handle different types of errors that may occur when interacting with the Magic Labs API.\n\n**Main Concepts:**\n\n1. **HTTP Status Codes:**\n\t* 2XX indicates success\n\t* 4XX indicates client errors (e.g., invalid information)\n\t* 5XX indicates server errors\n2. **magic.Error:**\n\t* The base struct of all API errors, providing information on the error type\n3. **Error Handling:**\n\t* Checking for nil errors after a library call\n\t* Switching on the error type to handle specific errors (e.g., forbidden, bad request, rate limiting, authentication, API connection errors)\n\n**Key Takeaways:**\n\n1. Implement error handling for API responses to anticipate and handle potential errors.\n2. Use the magic.Error struct to determine the error type and handle specific errors accordingly.\n3. Use a switch statement to handle different error types, such as forbidden, bad request, rate limiting, authentication, and API connection errors.\n4. If an error is not handled by the switch statement, print an error message with the error details.\n\nBy following this documentation, developers can write robust and error-free code for their Magic Labs embedded wallet applications.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/go#chunk-32", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nAny DID Token related error. This can mean the given token is malformed or invalid.", "explanation": "**DIDTokenError**\n\nThe `DIDTokenError` in Magic Labs embedded wallet documentation is a custom error type that signifies any error related to verifying or verifying DID (Decentralized Identifiers) tokens.\n\n**Main Purpose:**\n\nThe primary purpose of `DIDTokenError` is to handle and identify specific errors that occur when a DID token is found to be malformed, invalid, or otherwise incorrectly formatted. This error helps to isolate and address issues with the token, making it easier to debug and resolve problems.\n\n**Key Takeaway:**\n\nIn essence, `DIDTokenError` provides a clear distinction between token-related errors and other types of errors, allowing developers to handle and respond to DID token errors in a more targeted and effective manner.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/go#chunk-33", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 GitHub\n\n\u2022 Demo\n\nGitHub\n\nDemo", "explanation": "The '#Resources' section in the Magic Labs embedded wallet documentation appears to be a collection of links to external resources that provide additional support and materials for developers working with the Magic API.\n\nHere's a breakdown of the two main resources mentioned:\n\n### 1. GitHub\n\nThis link redirects to the Magic GitHub repository, which likely contains the source code, libraries, and documentation related to the Magic client-side SDKs, including the Go SDK. The GitHub resources could include:\n\n* Source code for the Magic SDKs\n* API documentation for the Go SDK\n* Example use cases and code snippets\n* Issue tracking and bug reporting\n\n### 2. Demo\n\nThe 'Demo' link likely takes users to a live demonstration or sandbox environment that showcases the Magic wallet capabilities. The demo environment could be used to:\n\n* Explore the Magic wallet interface and features\n* Test the authentication and payment flows\n* Experiment with different scenarios and edge cases\n\nThe main purpose of the '#Resources' section is to provide developers with quick access to additional resources that can support their development and testing efforts. By providing external links to GitHub and a demo environment, Magic Labs helps developers get started with integrating their SDKs and builds a community around the Magic API.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/go#chunk-34", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nAll changes to the SDK are covered in our latest release notes.\n\nlatest release notes", "explanation": "**Versioning and Release Notes**\n\nThe '#Versions' section is a crucial part of the Magic Labs Embedded Wallet documentation. It serves to keep users informed about the updates and changes made to the SDK (Software Development Kit) over time.\n\n**Main Purpose:**\n\nThe primary purpose of this section is to:\n\n1. **Notify users of updates**: Inform developers about the latest changes, improvements, and bug fixes in the SDK.\n2. **Provide release notes**: Detail the specific changes, enhancements, and known issues associated with each release.\n\nBy reviewing the release notes, users can:\n\n* Stay up-to-date with the latest features and capabilities\n* Identify potential issues or bugs\n* Plan and prepare for updates and migrations\n\n**Key Benefits:**\n\n* Improved troubleshooting and support\n* Enhanced development experience with the latest features and improvements\n* Better understanding of changes and updates in the SDK\n\nBy checking the latest release notes, users can efficiently integrate the Magic Labs Embedded Wallet SDK into their projects and ensure a seamless experience.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/server-side-sdks/go#chunk-35", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nTo interact with the Polygon network, you can use either ethers.js or web3.js libraries with Magic. For a more in-depth guide on available functions provided, refer to the EVM documentation.\u2060\n\nethers.js\n\nethers.js\n\nweb3.js\n\nweb3.js\n\nEVM documentation\n\n\u2060To get started, install the following dependencies for your project:\n\n#\n\nCopy\n\n01\n\nnpm\n\ninstall\n\nethers magic-sdk\n\n01\n\nnpm\n\ninstall\n\nethers magic-sdk", "explanation": "**Installation of Polygon using Ethers.js**\n\nThis section of the Magic Labs embedded wallet documentation outlines the steps to install and set up the Polygon blockchain network using the Ethers.js library with Magic.\n\n**Main Purpose:** \n\nThe main purpose of this section is to guide developers on how to begin using the Polygon network for their project, integrating it with Magic and the Ethers.js library.\n\n**Key Points:**\n\n- It provides a guide for developers choosing between Ethers.js and web3.js libraries for Polygon.\n- It mentions an in-depth guide in the EVM (Ethereum Virtual Machine) documentation for more detailed information on available functions.\n- It instructs developers to install required dependencies, `ethers` and `@magic-sdk/js`, for their project using npm (Node Package Manager).", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/featured-chains/polygon#chunk-1", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\nnpm\n\ninstall\n\nweb3 magic-sdk\n\n01\n\nnpm\n\ninstall\n\nweb3 magic-sdk", "explanation": "**Web3.js**\n\nThe section titled '#Web3.js' refers to a JavaScript library called Web3.js. The main purpose of Web3.js is to provide a lightweight library for interacting with the Ethereum blockchain using JavaScript.\n\n**Key Features of Web3.js**\n\n- Web3.js provides a simple and efficient way to connect to the Ethereum network and communicate with smart contracts.\n- It allows developers to send transactions, call contract functions, and retrieve data from the blockchain.\n\n**Installation of Web3.js with the Magic SDK**\n\nThe provided `npm install web3 magic-sdk` command installs the Web3.js library in conjunction with the Magic SDK. The Magic SDK is a software development kit that provides an easy-to-use interface for building web applications that connect to various blockchains, including Ethereum.\n\n**Usage of Web3.js with the Magic SDK**\n\nBy using Web3.js in conjunction with the Magic SDK, developers can:\n\n- Authenticate users with blockchain-based accounts.\n- Interact with smart contracts on the Ethereum blockchain.\n- Send and receive transactions.\n- Retrieve blockchain data.\n\nThe combination of Web3.js and the Magic SDK simplifies the development process for building decentralized applications (dApps) on the Ethereum network and other Magic-supported blockchains.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/featured-chains/polygon#chunk-2", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nThe Magic class is the entry-point to the Magic SDK. It must be instantiated with a Magic publishable key.\n\nEthereum provider is only supported in magic-sdk@1.0.1 or later versions.\n\n#\n\nMainnet Block Explorer URL: https://polygonscan.com/\n\nhttps://polygonscan.com/\n\nCopy\n\n01\n\nconst\n\ncustomNodeOptions\n\n=\n\n{\n\n01\n\nconst\n\ncustomNodeOptions\n\n=\n\n{\n\n02\n\nrpcUrl\n\n:\n\n'https://polygon-rpc.com/'\n\n,\n\n// Polygon RPC URL\n\n02\n\nrpcUrl\n\n:\n\n'https://polygon-rpc.com/'\n\n,\n\n// Polygon RPC URL\n\n03\n\nchainId\n\n:\n\n137\n\n,\n\n// Polygon chain id\n\n03\n\nchainId\n\n:\n\n137\n\n,\n\n// Polygon chain id\n\n04\n\n}\n\n04\n\n}\n\n05\n\n05\n\n06\n\n// Setting network to Polygon\n\n06\n\n// Setting network to Polygon\n\n07\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_PUBLISHABLE_API_KEY'\n\n,\n\n{\n\nnetwork\n\n:\n\ncustomNodeOptions\n\n}\n\n)\n\n;\n\n07\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_PUBLISHABLE_API_KEY'\n\n,\n\n{\n\nnetwork\n\n:\n\ncustomNodeOptions\n\n}\n\n)\n\n;", "explanation": "**Initialization - #Mainnet Documentation Overview**\n\nThis section of the Magic Labs embedded wallet documentation provides instructions on how to initialize the Magic class and set up the networking configuration for the Mainnet on the Polygon blockchain.\n\n**Main Purpose:**\n\nThe main purpose of this section is to guide developers in setting up the Magic SDK with a publishable key and customizing the networking configuration to interact with the Polygon Mainnet.\n\n**Key Points:**\n\n1.  **Instantiating the Magic class**: The section shows how to create an instance of the Magic class, passing in a publishable API key.\n2.  **Customizing the network configuration**: It explains how to define a custom network configuration object (`customNodeOptions`) to set up the Polygon Mainnet connection.\n3.  **Polygon Mainnet settings**: The section highlights the specific settings required for the Polygon Mainnet, including the RPC URL and chain ID.\n\n**Essential Code Snippets:**\n\nThe code snippet demonstrates how to:\n\n1.  Define a custom network configuration object (`customNodeOptions`).\n2.  Create an instance of the Magic class, passing in the publishable API key and the custom network configuration object.\n\n**Tip for Developers:**\n\nWhen initializing the Magic class, make sure to replace `'YOUR_PUBLISHABLE_API_KEY'` with your actual publishable API key. Additionally, ensure you're using `magic-sdk@1.0.1 or later versions` to support Ethereum provider integration.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/featured-chains/polygon#chunk-3", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nMumbai Block Explorer: https://www.oklink.com/amoy\n\nhttps://www.oklink.com/amoy\n\nMumbai \u2060Testnet Faucet: https://faucet.polygon.technology/\n\nhttps://faucet.polygon.technology/\n\nCopy\n\n01\n\nconst\n\ncustomNodeOptions\n\n=\n\n{\n\n01\n\nconst\n\ncustomNodeOptions\n\n=\n\n{\n\n02\n\nrpcUrl\n\n:\n\n'https://rpc-amoy.polygon.technology/'\n\n,\n\n// Polygon RPC URL\n\n02\n\nrpcUrl\n\n:\n\n'https://rpc-amoy.polygon.technology/'\n\n,\n\n// Polygon RPC URL\n\n03\n\nchainId\n\n:\n\n80002\n\n,\n\n// Polygon chain id\n\n03\n\nchainId\n\n:\n\n80002\n\n,\n\n// Polygon chain id\n\n04\n\n}\n\n04\n\n}\n\n05\n\n05\n\n06\n\n// Setting network to Polygon - Testnet\n\n06\n\n// Setting network to Polygon - Testnet\n\n07\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_PUBLISHABLE_API_KEY'\n\n,\n\n{\n\nnetwork\n\n:\n\ncustomNodeOptions\n\n}\n\n)\n\n;\n\n07\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_PUBLISHABLE_API_KEY'\n\n,\n\n{\n\nnetwork\n\n:\n\ncustomNodeOptions\n\n}\n\n)\n\n;", "explanation": "**#Testnet Documentation Section:**\n\nThe **#Testnet** documentation section is about setting up and connecting to the Polygon ('MATIC') testnet network using Magic Labs embedded wallet.\n\n**Main Purpose:**\n\nThe primary purpose of this section is to provide instructions on how to:\n\n1. Connect to the Mumbai Testnet (a Polygon testnet fork) for development and testing purposes.\n2. Set up a custom Node options for the testnet network.\n3. Initialize the Magic Labs embedded wallet with the testnet network settings.\n\n**Key Components:**\n\n1. **Mumbai Testnet Faucet:** A tool to obtain test MATIC tokens for testing purposes.\n2. **Mumbai Block Explorer:** A block explorer to view transactions and blocks on the testnet network.\n3. **Polygon RPC URL:** The URL to connect to the testnet network.\n4. **Custom Node Options:** JavaScript object containing settings for the testnet network (e.g., RPC URL, Chain ID).\n5. **Magic Labs Embedded Wallet:** The wallet integration library for Magic Labs, initialized with the testnet network settings.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/featured-chains/polygon#chunk-4", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n#\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\nimport\n\n{\n\nethers\n\n}\n\nfrom\n\n'ethers'\n\n;\n\n02\n\nimport\n\n{\n\nethers\n\n}\n\nfrom\n\n'ethers'\n\n;\n\n03\n\n03\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n05\n\nconst\n\nprovider\n\n=\n\nnew\n\nethers\n\n.\n\nBrowserProvider\n\n(\n\nmagic\n\n.\n\nrpcProvider\n\n)\n\n;\n\n05\n\nconst\n\nprovider\n\n=\n\nnew\n\nethers\n\n.\n\nBrowserProvider\n\n(\n\nmagic\n\n.\n\nrpcProvider\n\n)\n\n;\n\n06\n\n06\n\n07\n\n// \u2b50\ufe0f After user is successfully authenticated\n\n07\n\n// \u2b50\ufe0f After user is successfully authenticated\n\n08\n\n08\n\n09\n\nconst\n\nsigner\n\n=\n\nawait\n\nprovider\n\n.\n\ngetSigner\n\n(\n\n)\n\n;\n\n09\n\nconst\n\nsigner\n\n=\n\nawait\n\nprovider\n\n.\n\ngetSigner\n\n(\n\n)\n\n;\n\n10\n\n10\n\n11\n\nconst\n\ndestination\n\n=\n\n'0xE0cef4417a772512E6C95cEf366403839b0D6D6D'\n\n;\n\n11\n\nconst\n\ndestination\n\n=\n\n'0xE0cef4417a772512E6C95cEf366403839b0D6D6D'\n\n;\n\n12\n\nconst\n\namount\n\n=\n\nethers\n\n.\n\nparseEther\n\n(\n\n'1.0'\n\n)\n\n;\n\n// Convert 1 ether to wei\n\n12\n\nconst\n\namount\n\n=\n\nethers\n\n.\n\nparseEther\n\n(\n\n'1.0'\n\n)\n\n;\n\n// Convert 1 ether to wei\n\n13\n\n13\n\n14\n\n// Submit transaction to the blockchain\n\n14\n\n// Submit transaction to the blockchain\n\n15\n\nconst\n\ntx\n\n=\n\nawait\n\nsigner\n\n.\n\nsendTransaction\n\n(\n\n{\n\n15\n\nconst\n\ntx\n\n=\n\nawait\n\nsigner\n\n.\n\nsendTransaction\n\n(\n\n{\n\n16\n\nto\n\n:\n\ndestination\n\n,\n\n16\n\nto\n\n:\n\ndestination\n\n,\n\n17\n\nvalue\n\n:\n\namount\n\n,\n\n17\n\nvalue\n\n:\n\namount\n\n,\n\n18\n\n}\n\n)\n\n;\n\n18\n\n}\n\n)\n\n;\n\n19\n\n19\n\n20\n\n// Wait for transaction to be mined\n\n20\n\n// Wait for transaction to be mined\n\n21\n\nconst\n\nreceipt\n\n=\n\nawait\n\ntx\n\n.\n\nwait\n\n(\n\n)\n\n;\n\n21\n\nconst\n\nreceipt\n\n=\n\nawait\n\ntx\n\n.\n\nwait\n\n(\n\n)\n\n;", "explanation": "**Send Transaction - Ethers.js Documentation Overview**\n\nThis section of the Magic Labs embedded wallet documentation explains how to send a transaction to a blockchain using the Ethers.js library. The main purpose of this section is to provide a clear, step-by-step guide on how to set up the necessary dependencies, authenticate a user, and then use the ethers.js library to create and send a transaction to a blockchain network.\n\n**Section Breakdown**\n\n1. **Dependency Import**: The code imports the necessary dependencies from the Ethers.js and Magic Labs SDKs.\n\n2. **Creating a Magic Instance**: A new instance of the Magic Labs class is created with a publishable API key.\n\n3. **Setting up the Provider**: A new Provider instance is created using the rpcProvider from the Magic Labs instance.\n\n4. **Authenticating the User**: The code comments suggest that user authentication should be handled here.\n\n5. **Getting a Signer**: After user authentication, a signer is retrieved from the provider.\n\n6. **Defining Transaction Variables**: The destination address and the amount to send are defined.\n\n7. **Sending the Transaction**: The signer sends a transaction to the blockchain using the sendTransaction method from Ethers.js.\n\n8. **Waiting for Transaction Mined**: After sending the transaction, the code waits for it to be mined before retrieving the receipt.\n\n**Deployment Steps**\n\nTo implement this code in your application:\n\n1. Follow the instruction to install the necessary dependencies.\n2. Replace `'YOUR_PUBLISHABLE_API_KEY'` with your actual Magic Labs publishable API key.\n3. Set up user authentication to obtain a signer instance.\n4. Define the transaction variables (destination and amount).\n5. Send the transaction using the `sendTransaction` method.\n\nBy following this documentation, you will be able to successfully send a transaction to a blockchain using the Ethers.js library with Magic Labs embedded wallet integration.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/featured-chains/polygon#chunk-5", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "Example is using web3@1.2.0 or later version.\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\nimport\n\nWeb3\n\nfrom\n\n'web3'\n\n;\n\n02\n\nimport\n\nWeb3\n\nfrom\n\n'web3'\n\n;\n\n03\n\n03\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n05\n\nconst\n\nweb3\n\n=\n\nnew\n\nWeb3\n\n(\n\nmagic\n\n.\n\nrpcProvider\n\n)\n\n;\n\n05\n\nconst\n\nweb3\n\n=\n\nnew\n\nWeb3\n\n(\n\nmagic\n\n.\n\nrpcProvider\n\n)\n\n;\n\n06\n\n06\n\n07\n\n// \u2b50\ufe0f After user is successfully authenticated\n\n07\n\n// \u2b50\ufe0f After user is successfully authenticated\n\n08\n\n08\n\n09\n\nconst\n\nfromAddress\n\n=\n\n(\n\nawait\n\nweb3\n\n.\n\neth\n\n.\n\ngetAccounts\n\n(\n\n)\n\n)\n\n[\n\n0\n\n]\n\n;\n\n09\n\nconst\n\nfromAddress\n\n=\n\n(\n\nawait\n\nweb3\n\n.\n\neth\n\n.\n\ngetAccounts\n\n(\n\n)\n\n)\n\n[\n\n0\n\n]\n\n;\n\n10\n\nconst\n\namount\n\n=\n\nweb3\n\n.\n\nutils\n\n.\n\ntoWei\n\n(\n\n1\n\n,\n\n'wei'\n\n)\n\n;\n\n// Convert 1 ether to wei\n\n10\n\nconst\n\namount\n\n=\n\nweb3\n\n.\n\nutils\n\n.\n\ntoWei\n\n(\n\n1\n\n,\n\n'wei'\n\n)\n\n;\n\n// Convert 1 ether to wei\n\n11\n\n11\n\n12\n\nconst\n\nreceipt\n\n=\n\nawait\n\nweb3\n\n.\n\neth\n\n.\n\nsendTransaction\n\n(\n\n{\n\n12\n\nconst\n\nreceipt\n\n=\n\nawait\n\nweb3\n\n.\n\neth\n\n.\n\nsendTransaction\n\n(\n\n{\n\n13\n\nfrom\n\n:\n\nfromAddress\n\n,\n\n13\n\nfrom\n\n:\n\nfromAddress\n\n,\n\n14\n\nto\n\n:\n\ndestination\n\n,\n\n14\n\nto\n\n:\n\ndestination\n\n,\n\n15\n\nvalue\n\n:\n\namount\n\n,\n\n15\n\nvalue\n\n:\n\namount\n\n,\n\n16\n\n}\n\n)\n\n;\n\n16\n\n}\n\n)\n\n;", "explanation": "**Web3.js Documentation Explanation**\n\nThe Web3.js documentation is a section of the Magic Labs embedded wallet documentation, detailing how to integrate Web3.js with the Magic SDK on the Polygon blockchain.\n\n**Main Purpose:**\n\nThe main purpose of this documentation is to provide a step-by-step guide on how to use the Web3.js library to interact with the Ethereum blockchain through the Magic Labs embedded wallet on the Polygon network.\n\n**Key Features and Capabilities:**\n\nThis documentation covers the following key features and capabilities:\n\n1. **Importing Web3.js**: The guide shows how to import Web3.js into your project using npm or yarn.\n2. **Initializing Magic SDK**: It demonstrates how to initialize the Magic SDK with your publishable API key.\n3. **Creating a Web3 instance**: The guide explains how to create a Web3 instance using the Magic SDK's RPC provider.\n4. **User Authentication**: After user authentication, it shows how to use Web3.js to interact with the blockchain.\n5. **Getting User Account Address**: The guide covers how to retrieve the user's account address using Web3.js.\n6. **Converting Ether to Wei**: It demonstrates how to convert ether to wei using the Web3.js `utils` module.\n7. **Sending a Transaction**: The guide provides an example of how to send a transaction using Web3.js, including specifying the sender's address, recipient's address, and transaction value.\n\n**Example Use Case:**\n\nThe provided code snippet is a practical example of how to use Web3.js to interact with the Ethereum blockchain through the Magic Labs embedded wallet on the Polygon network. It covers user authentication, retrieving the user's account address, converting ether to wei, and sending a transaction.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/featured-chains/polygon#chunk-6", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n#\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\nimport\n\n{\n\nethers\n\n}\n\nfrom\n\n'ethers'\n\n;\n\n02\n\nimport\n\n{\n\nethers\n\n}\n\nfrom\n\n'ethers'\n\n;\n\n03\n\n03\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n05\n\nconst\n\nprovider\n\n=\n\nnew\n\nethers\n\n.\n\nBrowserProvider\n\n(\n\nmagic\n\n.\n\nrpcProvider\n\n)\n\n;\n\n05\n\nconst\n\nprovider\n\n=\n\nnew\n\nethers\n\n.\n\nBrowserProvider\n\n(\n\nmagic\n\n.\n\nrpcProvider\n\n)\n\n;\n\n06\n\n06\n\n07\n\n// \u2b50\ufe0f After user is successfully authenticated\n\n07\n\n// \u2b50\ufe0f After user is successfully authenticated\n\n08\n\n08\n\n09\n\nconst\n\nsigner\n\n=\n\nawait\n\nprovider\n\n.\n\ngetSigner\n\n(\n\n)\n\n;\n\n09\n\nconst\n\nsigner\n\n=\n\nawait\n\nprovider\n\n.\n\ngetSigner\n\n(\n\n)\n\n;\n\n10\n\n10\n\n11\n\nconst\n\noriginalMessage\n\n=\n\n'YOUR_MESSAGE'\n\n;\n\n11\n\nconst\n\noriginalMessage\n\n=\n\n'YOUR_MESSAGE'\n\n;\n\n12\n\n12\n\n13\n\nconst\n\nsignedMessage\n\n=\n\nawait\n\nsigner\n\n.\n\nsignMessage\n\n(\n\noriginalMessage\n\n)\n\n;\n\n13\n\nconst\n\nsignedMessage\n\n=\n\nawait\n\nsigner\n\n.\n\nsignMessage\n\n(\n\noriginalMessage\n\n)\n\n;", "explanation": "**Sign Message using Ethers.js and Personal Sign**\n\nThis documentation section explains how to use the Magic Labs embedded wallet to sign a message using Ethers.js and the `Personal Sign` function.\n\n**Main Purpose:**\n\nThe main purpose of this section is to demonstrate how to securely sign a message using a user's Ethereum wallet, which is integrated into the Magic Labs embedded wallet.\n\n**Step-by-Step Process:**\n\n1. Import the necessary libraries: `Magic` and `ethers`.\n2. Initialize the Magic Labs embedded wallet with a publishable API key.\n3. Create a new instance of the `ethers` provider with the Magic Labs embedded wallet's RPC provider.\n4. Get a signer instance using the `getSigner` method of the provider.\n5. Define an original message to be signed.\n6. Use the signer instance to sign the original message using the `signMessage` method.\n\n**Key Functions and Variables:**\n\n- `Magic`: The Magic Labs embedded wallet library.\n- `ethers`: The Ethers.js library for interacting with Ethereum.\n- `provider`: An instance of the `ethers` provider, initialized with the Magic Labs embedded wallet's RPC provider.\n- `signer`: An instance of a signer, obtained using the `getSigner` method of the provider.\n- `originalMessage`: The message to be signed.\n- `signedMessage`: The signed message, obtained using the `signMessage` method of the signer instance.\n\n**Security Benefits:**\n\nUsing this process provides a secure way to sign messages using a user's Ethereum wallet, which is integrated into the Magic Labs embedded wallet. This ensures that the user's wallet remains secure, and the signed message can be trusted as coming from the user's wallet.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/featured-chains/polygon#chunk-7", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "Copy\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\nimport\n\n{\n\nethers\n\n}\n\nfrom\n\n'ethers'\n\n;\n\n02\n\nimport\n\n{\n\nethers\n\n}\n\nfrom\n\n'ethers'\n\n;\n\n03\n\n03\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n05\n\nconst\n\nprovider\n\n=\n\nnew\n\nethers\n\n.\n\nBrowserProvider\n\n(\n\nmagic\n\n.\n\nrpcProvider\n\n)\n\n;\n\n05\n\nconst\n\nprovider\n\n=\n\nnew\n\nethers\n\n.\n\nBrowserProvider\n\n(\n\nmagic\n\n.\n\nrpcProvider\n\n)\n\n;\n\n06\n\nconst\n\nsigner\n\n=\n\nawait\n\nprovider\n\n.\n\ngetSigner\n\n(\n\n)\n\n;\n\n06\n\nconst\n\nsigner\n\n=\n\nawait\n\nprovider\n\n.\n\ngetSigner\n\n(\n\n)\n\n;\n\n07\n\n07\n\n08\n\n// \u2b50\ufe0f After user is successfully authenticated\n\n08\n\n// \u2b50\ufe0f After user is successfully authenticated\n\n09\n\n09\n\n10\n\n// Get user's Ethereum public address\n\n10\n\n// Get user's Ethereum public address\n\n11\n\nconst\n\nfromAddress\n\n=\n\nawait\n\nsigner\n\n.\n\ngetAddress\n\n(\n\n)\n\n;\n\n11\n\nconst\n\nfromAddress\n\n=\n\nawait\n\nsigner\n\n.\n\ngetAddress\n\n(\n\n)\n\n;\n\n12\n\n12\n\n13\n\nconst\n\noriginalMessage\n\n=\n\n[\n\n13\n\nconst\n\noriginalMessage\n\n=\n\n[\n\n14\n\n{\n\n14\n\n{\n\n15\n\ntype\n\n:\n\n'string'\n\n,\n\n15\n\ntype\n\n:\n\n'string'\n\n,\n\n16\n\nname\n\n:\n\n'fullName'\n\n,\n\n16\n\nname\n\n:\n\n'fullName'\n\n,\n\n17\n\nvalue\n\n:\n\n'John Doe'\n\n,\n\n17\n\nvalue\n\n:\n\n'John Doe'\n\n,\n\n18\n\n}\n\n,\n\n18\n\n}\n\n,\n\n19\n\n{\n\n19\n\n{\n\n20\n\ntype\n\n:\n\n'uint32'\n\n,\n\n20\n\ntype\n\n:\n\n'uint32'\n\n,\n\n21\n\nname\n\n:\n\n'userId'\n\n,\n\n21\n\nname\n\n:\n\n'userId'\n\n,\n\n22\n\nvalue\n\n:\n\n'1234'\n\n,\n\n22\n\nvalue\n\n:\n\n'1234'\n\n,\n\n23\n\n}\n\n,\n\n23\n\n}\n\n,\n\n24\n\n]\n\n;\n\n24\n\n]\n\n;\n\n25\n\nconst\n\nparams\n\n=\n\n[\n\noriginalMessage\n\n,\n\nfromAddress\n\n]\n\n;\n\n25\n\nconst\n\nparams\n\n=\n\n[\n\noriginalMessage\n\n,\n\nfromAddress\n\n]\n\n;\n\n26\n\nconst\n\nmethod\n\n=\n\n'eth_signTypedData'\n\n;\n\n26\n\nconst\n\nmethod\n\n=\n\n'eth_signTypedData'\n\n;\n\n27\n\n27\n\n28\n\nconst\n\nsignedMessage\n\n=\n\nawait\n\nsigner\n\n.\n\nprovider\n\n.\n\nsend\n\n(\n\nmethod\n\n,\n\nparams\n\n)\n\n;\n\n28\n\nconst\n\nsignedMessage\n\n=\n\nawait\n\nsigner\n\n.\n\nprovider\n\n.\n\nsend\n\n(\n\nmethod\n\n,\n\nparams\n\n)\n\n;", "explanation": "**Sign Typed Data v1: Overview and Purpose**\n\nThe 'Sign Typed Data v1' section in the Magic Labs embedded wallet documentation explains how to sign typed data using the Ethereum 'eth_signTypedData' method. This process involves authenticating a user, obtaining their Ethereum public address, and then signing a pre-defined typed data message.\n\n**Main Purpose:**\n\nThe primary purpose of this section is to provide a step-by-step guide on how to sign typed data using the Magic Labs embedded wallet, enabling developers to integrate this functionality into their applications. The process is crucial for various use cases, such as:\n\n1. Verifying user identities and authentication.\n2. Enabling transactions with a higher level of security and trust.\n3. Facilitating interactions between applications and decentralized systems.\n\n**Key Components:**\n\n1. **User Authentication**: The user is authenticated using Magic Labs, and their Ethereum public address is obtained.\n2. **Typed Data Message**: A pre-defined typed data message is created with specific data (e.g., user name, ID).\n3. **Signing Process**: The signed data is sent to the Ethereum network using the 'eth_signTypedData' method, resulting in a signed message.\n\nBy following this documentation, developers can seamlessly integrate the signing of typed data into their applications, enhancing user security, trust, and interaction with decentralized systems.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/featured-chains/polygon#chunk-8", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "Copy\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\nimport\n\n{\n\nethers\n\n}\n\nfrom\n\n'ethers'\n\n;\n\n02\n\nimport\n\n{\n\nethers\n\n}\n\nfrom\n\n'ethers'\n\n;\n\n03\n\n03\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n05\n\nconst\n\nprovider\n\n=\n\nnew\n\nethers\n\n.\n\nBrowserProvider\n\n(\n\nmagic\n\n.\n\nrpcProvider\n\n)\n\n;\n\n05\n\nconst\n\nprovider\n\n=\n\nnew\n\nethers\n\n.\n\nBrowserProvider\n\n(\n\nmagic\n\n.\n\nrpcProvider\n\n)\n\n;\n\n06\n\nconst\n\nsigner\n\n=\n\nawait\n\nprovider\n\n.\n\ngetSigner\n\n(\n\n)\n\n;\n\n06\n\nconst\n\nsigner\n\n=\n\nawait\n\nprovider\n\n.\n\ngetSigner\n\n(\n\n)\n\n;\n\n07\n\n07\n\n08\n\n// \u2b50\ufe0f After user is successfully authenticated\n\n08\n\n// \u2b50\ufe0f After user is successfully authenticated\n\n09\n\n09\n\n10\n\n// Get user's Ethereum public address\n\n10\n\n// Get user's Ethereum public address\n\n11\n\nconst\n\nfromAddress\n\n=\n\nawait\n\nsigner\n\n.\n\ngetAddress\n\n(\n\n)\n\n;\n\n11\n\nconst\n\nfromAddress\n\n=\n\nawait\n\nsigner\n\n.\n\ngetAddress\n\n(\n\n)\n\n;\n\n12\n\n12\n\n13\n\nconst\n\noriginalMessage\n\n=\n\n{\n\n13\n\nconst\n\noriginalMessage\n\n=\n\n{\n\n14\n\ntypes\n\n:\n\n{\n\n14\n\ntypes\n\n:\n\n{\n\n15\n\nEIP712Domain\n\n:\n\n[\n\n15\n\nEIP712Domain\n\n:\n\n[\n\n16\n\n{\n\n16\n\n{\n\n17\n\nname\n\n:\n\n'name'\n\n,\n\n17\n\nname\n\n:\n\n'name'\n\n,\n\n18\n\ntype\n\n:\n\n'string'\n\n,\n\n18\n\ntype\n\n:\n\n'string'\n\n,\n\n19\n\n}\n\n,\n\n19\n\n}\n\n,\n\n20\n\n{\n\n20\n\n{\n\n21\n\nname\n\n:\n\n'version'\n\n,\n\n21\n\nname\n\n:\n\n'version'\n\n,\n\n22\n\ntype\n\n:\n\n'string'\n\n,\n\n22\n\ntype\n\n:\n\n'string'\n\n,\n\n23\n\n}\n\n,\n\n23\n\n}\n\n,\n\n24\n\n{\n\n24\n\n{\n\n25\n\nname\n\n:\n\n'verifyingContract'\n\n,\n\n25\n\nname\n\n:\n\n'verifyingContract'\n\n,\n\n26\n\ntype\n\n:\n\n'address'\n\n,\n\n26\n\ntype\n\n:\n\n'address'\n\n,\n\n27\n\n}\n\n,\n\n27\n\n}\n\n,\n\n28\n\n]\n\n,\n\n28\n\n]\n\n,\n\n29\n\nGreeting\n\n:\n\n[\n\n29\n\nGreeting\n\n:\n\n[\n\n30\n\n{\n\n30\n\n{\n\n31\n\nname\n\n:\n\n'contents'\n\n,\n\n31\n\nname\n\n:\n\n'contents'\n\n,\n\n32\n\ntype\n\n:\n\n'string'\n\n,\n\n32\n\ntype\n\n:\n\n'string'\n\n,\n\n33\n\n}\n\n,\n\n33\n\n}\n\n,\n\n34\n\n]\n\n,\n\n34\n\n]\n\n,\n\n35\n\n}\n\n,\n\n35\n\n}\n\n,\n\n36\n\nprimaryType\n\n:\n\n'Greeting'\n\n,\n\n36\n\nprimaryType\n\n:\n\n'Greeting'\n\n,\n\n37\n\ndomain\n\n:\n\n{\n\n37\n\ndomain\n\n:\n\n{\n\n38\n\nname\n\n:\n\n'Magic'\n\n,\n\n38\n\nname\n\n:\n\n'Magic'\n\n,\n\n39\n\nversion\n\n:\n\n'1'\n\n,\n\n39\n\nversion\n\n:\n\n'1'\n\n,\n\n40\n\nverifyingContract\n\n:\n\n'0xE0cef4417a772512E6C95cEf366403839b0D6D6D'\n\n,\n\n40\n\nverifyingContract\n\n:\n\n'0xE0cef4417a772512E6C95cEf366403839b0D6D6D'\n\n,\n\n41\n\n}\n\n,\n\n41\n\n}\n\n,\n\n42\n\nmessage\n\n:\n\n{\n\n42\n\nmessage\n\n:\n\n{\n\n43\n\ncontents\n\n:\n\n'Hello, from Magic!'\n\n,\n\n43\n\ncontents\n\n:\n\n'Hello, from Magic!'\n\n,\n\n44\n\n}\n\n,\n\n44\n\n}\n\n,\n\n45\n\n}\n\n;\n\n45\n\n}\n\n;\n\n46\n\nconst\n\nparams\n\n=\n\n[\n\nfromAddress\n\n,\n\noriginalMessage\n\n]\n\n;\n\n46\n\nconst\n\nparams\n\n=\n\n[\n\nfromAddress\n\n,\n\noriginalMessage\n\n]\n\n;\n\n47\n\nconst\n\nmethod\n\n=\n\n'eth_signTypedData_v3'\n\n;\n\n47\n\nconst\n\nmethod\n\n=\n\n'eth_signTypedData_v3'\n\n;\n\n48\n\n48\n\n49\n\nconst\n\nsignedMessage\n\n=\n\nawait\n\nsigner\n\n.\n\nprovider\n\n.\n\nsend\n\n(\n\nmethod\n\n,\n\nparams\n\n)\n\n;\n\n49\n\nconst\n\nsignedMessage\n\n=\n\nawait\n\nsigner\n\n.\n\nprovider\n\n.\n\nsend\n\n(\n\nmethod\n\n,\n\nparams\n\n)\n\n;", "explanation": "**Sign Typed Data v3**\n\nThe \"Sign Typed Data v3\" section of the Magic Labs documentation explains how to securely sign typed data using the Ethereum wallet connected to the user's Magic account. This documentation is focused on the Polygon (formerly Matic) blockchain.\n\n**Main Purpose**\n\nThe primary purpose of this section is to guide developers through the process of:\n\n1. Authenticating a user with Magic Labs.\n2. Obtaining the user's Ethereum public address.\n3. Creating and signing typed data using EIP-712.\n4. Sending the signed data to the verifying contract on the Polygon blockchain, verifying the signature.\n\n**Key Steps**\n\n1. **Authentication**: The user is authenticated with Magic Labs using a publishable API key.\n2. **Obtaining Ethereum Public Address**: The user's Ethereum public address is obtained using the `getAddress()` method of the Ethers.js signer.\n3. **Creating Typed Data**: A typed data structure is created using EIP-712, which includes domain fields (e.g., name, version, verifying contract) and a message field.\n4. **Signing Typed Data**: The typed data is signed using the signer's private key.\n5. **Verifying Signature**: The signed data is sent to the verifying contract on the Polygon blockchain, which verifies the signature.\n\n**Code Overview**\n\nThe provided code snippet demonstrates the key steps involved in Sign Typed Data v3, including:\n\n1. Importing necessary libraries (Magic and Ethers.js).\n2. Creating a Magic instance with a publishable API key.\n3. Obtaining the user's Ethereum public address.\n4. Creating and signing typed data using EIP-712.\n5. Sending the signed data to the verifying contract on the Polygon blockchain.\n\nThis section is essential for developers working with Magic Labs and Ethers.js on the Polygon blockchain, as it provides a clear guide for securely signing typed data and verifying signatures on the blockchain.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/featured-chains/polygon#chunk-9", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "Copy\n\n01\n\n/*\n\n01\n\n/*\n\n02\n\nSign Typed Data v4 adds support for\n\n02\n\nSign Typed Data v4 adds support for\n\n03\n\narrays and recursive data types.\n\n03\n\narrays and recursive data types.\n\n04\n\n04\n\n05\n\nOtherwise, it works the same as Sign Typed Data v3.\n\n05\n\nOtherwise, it works the same as Sign Typed Data v3.\n\n06\n\n*/\n\n06\n\n*/\n\n07\n\n07\n\n08\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n08\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n09\n\nimport\n\n{\n\nethers\n\n}\n\nfrom\n\n'ethers'\n\n;\n\n09\n\nimport\n\n{\n\nethers\n\n}\n\nfrom\n\n'ethers'\n\n;\n\n10\n\n10\n\n11\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n11\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n12\n\nconst\n\nprovider\n\n=\n\nnew\n\nethers\n\n.\n\nBrowserProvider\n\n(\n\nmagic\n\n.\n\nrpcProvider\n\n)\n\n;\n\n12\n\nconst\n\nprovider\n\n=\n\nnew\n\nethers\n\n.\n\nBrowserProvider\n\n(\n\nmagic\n\n.\n\nrpcProvider\n\n)\n\n;\n\n13\n\nconst\n\nsigner\n\n=\n\nawait\n\nprovider\n\n.\n\ngetSigner\n\n(\n\n)\n\n;\n\n13\n\nconst\n\nsigner\n\n=\n\nawait\n\nprovider\n\n.\n\ngetSigner\n\n(\n\n)\n\n;\n\n14\n\n14\n\n15\n\n// \u2b50\ufe0f After user is successfully authenticated\n\n15\n\n// \u2b50\ufe0f After user is successfully authenticated\n\n16\n\n16\n\n17\n\n// Get user's Ethereum public address\n\n17\n\n// Get user's Ethereum public address\n\n18\n\nconst\n\nfromAddress\n\n=\n\nawait\n\nsigner\n\n.\n\ngetAddress\n\n(\n\n)\n\n;\n\n18\n\nconst\n\nfromAddress\n\n=\n\nawait\n\nsigner\n\n.\n\ngetAddress\n\n(\n\n)\n\n;\n\n19\n\n19\n\n20\n\nconst\n\noriginalMessage\n\n=\n\n{\n\n20\n\nconst\n\noriginalMessage\n\n=\n\n{\n\n21\n\ntypes\n\n:\n\n{\n\n21\n\ntypes\n\n:\n\n{\n\n22\n\nEIP712Domain\n\n:\n\n[\n\n22\n\nEIP712Domain\n\n:\n\n[\n\n23\n\n{\n\n23\n\n{\n\n24\n\nname\n\n:\n\n'name'\n\n,\n\n24\n\nname\n\n:\n\n'name'\n\n,\n\n25\n\ntype\n\n:\n\n'string'\n\n,\n\n25\n\ntype\n\n:\n\n'string'\n\n,\n\n26\n\n}\n\n,\n\n26\n\n}\n\n,\n\n27\n\n{\n\n27\n\n{\n\n28\n\nname\n\n:\n\n'version'\n\n,\n\n28\n\nname\n\n:\n\n'version'\n\n,\n\n29\n\ntype\n\n:\n\n'string'\n\n,\n\n29\n\ntype\n\n:\n\n'string'\n\n,\n\n30\n\n}\n\n,\n\n30\n\n}\n\n,\n\n31\n\n{\n\n31\n\n{\n\n32\n\nname\n\n:\n\n'verifyingContract'\n\n,\n\n32\n\nname\n\n:\n\n'verifyingContract'\n\n,\n\n33\n\ntype\n\n:\n\n'address'\n\n,\n\n33\n\ntype\n\n:\n\n'address'\n\n,\n\n34\n\n}\n\n,\n\n34\n\n}\n\n,\n\n35\n\n]\n\n,\n\n35\n\n]\n\n,\n\n36\n\nGreeting\n\n:\n\n[\n\n36\n\nGreeting\n\n:\n\n[\n\n37\n\n{\n\n37\n\n{\n\n38\n\nname\n\n:\n\n'contents'\n\n,\n\n38\n\nname\n\n:\n\n'contents'\n\n,\n\n39\n\ntype\n\n:\n\n'string'\n\n,\n\n39\n\ntype\n\n:\n\n'string'\n\n,\n\n40\n\n}\n\n,\n\n40\n\n}\n\n,\n\n41\n\n]\n\n,\n\n41\n\n]\n\n,\n\n42\n\n}\n\n,\n\n42\n\n}\n\n,\n\n43\n\nprimaryType\n\n:\n\n'Greeting'\n\n,\n\n43\n\nprimaryType\n\n:\n\n'Greeting'\n\n,\n\n44\n\ndomain\n\n:\n\n{\n\n44\n\ndomain\n\n:\n\n{\n\n45\n\nname\n\n:\n\n'Magic'\n\n,\n\n45\n\nname\n\n:\n\n'Magic'\n\n,\n\n46\n\nversion\n\n:\n\n'1'\n\n,\n\n46\n\nversion\n\n:\n\n'1'\n\n,\n\n47\n\nverifyingContract\n\n:\n\n'0xE0cef4417a772512E6C95cEf366403839b0D6D6D'\n\n,\n\n47\n\nverifyingContract\n\n:\n\n'0xE0cef4417a772512E6C95cEf366403839b0D6D6D'\n\n,\n\n48\n\n}\n\n,\n\n48\n\n}\n\n,\n\n49\n\nmessage\n\n:\n\n{\n\n49\n\nmessage\n\n:\n\n{\n\n50\n\ncontents\n\n:\n\n'Hello, from Magic!'\n\n,\n\n50\n\ncontents\n\n:\n\n'Hello, from Magic!'\n\n,\n\n51\n\n}\n\n,\n\n51\n\n}\n\n,\n\n52\n\n}\n\n;\n\n52\n\n}\n\n;\n\n53\n\nconst\n\nparams\n\n=\n\n[\n\nfromAddress\n\n,\n\noriginalMessage\n\n]\n\n;\n\n53\n\nconst\n\nparams\n\n=\n\n[\n\nfromAddress\n\n,\n\noriginalMessage\n\n]\n\n;\n\n54\n\nconst\n\nmethod\n\n=\n\n'eth_signTypedData_v4'\n\n;\n\n54\n\nconst\n\nmethod\n\n=\n\n'eth_signTypedData_v4'\n\n;\n\n55\n\n55\n\n56\n\nconst\n\nsignedMessage\n\n=\n\nawait\n\nsigner\n\n.\n\nprovider\n\n.\n\nsend\n\n(\n\nmethod\n\n,\n\nparams\n\n)\n\n;\n\n56\n\nconst\n\nsignedMessage\n\n=\n\nawait\n\nsigner\n\n.\n\nprovider\n\n.\n\nsend\n\n(\n\nmethod\n\n,\n\nparams\n\n)\n\n;", "explanation": "**Sign Typed Data v4**\n\nSign Typed Data v4 is a functionality in Magic Labs embedded wallet that allows users to sign data templates (structured data) securely. This documentation explains how to implement Sign Typed Data v4 using the Magic SDK.\n\n**Purpose**\n\nThe main purpose of Sign Typed Data v4 is to:\n\n1. Enable users to sign arrays and recursive data types.\n2. Support EIP-712 compliant data signing, which provides a standardized way to sign and verify data.\n\n**Key Components**\n\n1. **Magic SDK**: The Magic SDK is the primary library used to interact with the Magic Labs embedded wallet. It provides a straightforward API for implementing Sign Typed Data v4.\n2. **ethers.js**: The ethers.js library is used for interacting with the Ethereum blockchain. It's used to create a provider and signer object.\n3. **User authentication**: Before signing data, the user must be authenticated using the Magic Labs embedded wallet. This is represented by the `signer` object.\n4. **Data templates**: Data templates are structured data that will be signed. In this example, we have a template called `Greeting` with fields `name` and `contents`.\n5. **Signer object**: The signer object is used to sign the data template.\n\n**Implementation Steps**\n\n1. Import the Magic SDK and ethers.js libraries.\n2. Create a new Magic instance and get the Ethereum public address of the user.\n3. Define the data template (structured data) using the `EIP712Domain` and `Greeting` types.\n4. Create a primary type (`Greeting`) and domain (`Magic`) object.\n5. Create a message object with the data template and user's Ethereum public address.\n6. Prepare the signing parameters (method, params).\n7. Sign the data template using the `eth_signTypedData_v4` method.\n\n**Code Example (simplified)**\n\n```javascript\nconst Magic = require('magic-sdk');\nconst ethers = require('ethers');\n\nconst magic = new Magic('YOUR_PUBLISHABLE_API_KEY');\nconst provider = new ethers.providers.Web3Provider(magic.rpcProvider);\nconst signer = await provider.getSigner();\n\nconst originalMessage = {\n  types: {\n    EIP712Domain: [...],\n    Greeting: [...],\n  },\n  primaryType: 'Greeting',\n  domain: { ... },\n  message: { ... },\n};\n\nconst params = [signer.getAddress(), originalMessage];\nconst method = 'eth_signTypedData_v4';\nconst signedMessage = await signer.provider.send(method, params);\n```\n\n**Important Notes**\n\n* Make sure to replace `YOUR_PUBLISHABLE_API_KEY` with your actual Magic Labs embedded wallet API key.\n* The `originalMessage` object can be customized to fit your specific use case.\n* This example uses a simplified version of the `originalMessage` object for brevity. You may need to add or modify fields depending on your implementation.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/featured-chains/polygon#chunk-10", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nThe following examples assume web3@>=4.0.2\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\nimport\n\nWeb3\n\nfrom\n\n'web3'\n\n;\n\n02\n\nimport\n\nWeb3\n\nfrom\n\n'web3'\n\n;\n\n03\n\n03\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n05\n\nconst\n\nweb3\n\n=\n\nnew\n\nWeb3\n\n(\n\nmagic\n\n.\n\nrpcProvider\n\n)\n\n;\n\n05\n\nconst\n\nweb3\n\n=\n\nnew\n\nWeb3\n\n(\n\nmagic\n\n.\n\nrpcProvider\n\n)\n\n;\n\n06\n\n06\n\n07\n\n// \u2b50\ufe0f After user is successfully authenticated\n\n07\n\n// \u2b50\ufe0f After user is successfully authenticated\n\n08\n\n08\n\n09\n\n// Get user's Ethereum public address\n\n09\n\n// Get user's Ethereum public address\n\n10\n\nconst\n\nfromAddress\n\n=\n\n(\n\nawait\n\nweb3\n\n.\n\neth\n\n.\n\ngetAccounts\n\n(\n\n)\n\n)\n\n[\n\n0\n\n]\n\n;\n\n10\n\nconst\n\nfromAddress\n\n=\n\n(\n\nawait\n\nweb3\n\n.\n\neth\n\n.\n\ngetAccounts\n\n(\n\n)\n\n)\n\n[\n\n0\n\n]\n\n;\n\n11\n\n11\n\n12\n\nconst\n\noriginalMessage\n\n=\n\n'YOUR_MESSAGE'\n\n;\n\n12\n\nconst\n\noriginalMessage\n\n=\n\n'YOUR_MESSAGE'\n\n;\n\n13\n\n13\n\n14\n\nconst\n\nsignedMessage\n\n=\n\nawait\n\nweb3\n\n.\n\neth\n\n.\n\npersonal\n\n.\n\nsign\n\n(\n\noriginalMessage\n\n,\n\nfromAddress\n\n,\n\n\"ACCOUNT_PASSWORD\"\n\n)\n\n;\n\n14\n\nconst\n\nsignedMessage\n\n=\n\nawait\n\nweb3\n\n.\n\neth\n\n.\n\npersonal\n\n.\n\nsign\n\n(\n\noriginalMessage\n\n,\n\nfromAddress\n\n,\n\n\"ACCOUNT_PASSWORD\"\n\n)\n\n;", "explanation": "**Web3.js - Personal Sign**\n\nThis documentation section is about using the Web3.js library to sign a message with a user's Ethereum wallet address using the Magic Labs embedded wallet.\n\n**Main Purpose**\n\nThe main purpose of this section is to:\n\n1. Guide developers on how to import the necessary libraries (Magic SDK and Web3.js) for signing messages.\n2. Show how to authenticate a user with the Magic Labs embedded wallet and retrieve their Ethereum public address.\n3. Demonstrate how to use the Web3.js `personal.sign()` method to sign a message with the user's Ethereum wallet address.\n\n**Key Functions and Variables**\n\n1. `Magic` class: Represents the Magic Labs embedded wallet SDK.\n2. `Web3` class: Represents the Web3.js library for interacting with the Ethereum blockchain.\n3. `eth` object: Represents the Ethereum protocol.\n4. `personal` object: Provides Personal API methods for signing messages.\n5. `magic.rpcProvider`: Provides the RPC provider for interacting with the Ethereum blockchain.\n6. `fromAddress`: The user's Ethereum public address.\n7. `originalMessage`: The message to be signed.\n8. `signedMessage`: The signed message.\n\n**Example Use Case**\n\nBy following this documentation, developers can use the Magic Labs embedded wallet to sign a message with a user's Ethereum wallet address, which can be used for various purposes, such as:\n\n* Identity verification\n* Authorization\n* Data signing\n\nBy integrating this code into their application, developers can provide a secure and user-friendly way for users to sign messages using their Ethereum wallet address.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/featured-chains/polygon#chunk-11", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "Copy\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\nimport\n\nWeb3\n\nfrom\n\n'web3'\n\n;\n\n02\n\nimport\n\nWeb3\n\nfrom\n\n'web3'\n\n;\n\n03\n\n03\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n05\n\nconst\n\nweb3\n\n=\n\nnew\n\nWeb3\n\n(\n\nmagic\n\n.\n\nrpcProvider\n\n)\n\n;\n\n05\n\nconst\n\nweb3\n\n=\n\nnew\n\nWeb3\n\n(\n\nmagic\n\n.\n\nrpcProvider\n\n)\n\n;\n\n06\n\n06\n\n07\n\n// \u2b50\ufe0f After user is successfully authenticated\n\n07\n\n// \u2b50\ufe0f After user is successfully authenticated\n\n08\n\n08\n\n09\n\n// Get user's Ethereum public address\n\n09\n\n// Get user's Ethereum public address\n\n10\n\nconst\n\nfromAddress\n\n=\n\n(\n\nawait\n\nweb3\n\n.\n\neth\n\n.\n\ngetAccounts\n\n(\n\n)\n\n)\n\n[\n\n0\n\n]\n\n;\n\n10\n\nconst\n\nfromAddress\n\n=\n\n(\n\nawait\n\nweb3\n\n.\n\neth\n\n.\n\ngetAccounts\n\n(\n\n)\n\n)\n\n[\n\n0\n\n]\n\n;\n\n11\n\n11\n\n12\n\nconst\n\nmessage\n\n=\n\n[\n\n12\n\nconst\n\nmessage\n\n=\n\n[\n\n13\n\n{\n\n13\n\n{\n\n14\n\ntype\n\n:\n\n'string'\n\n,\n\n14\n\ntype\n\n:\n\n'string'\n\n,\n\n15\n\nname\n\n:\n\n'fullName'\n\n,\n\n15\n\nname\n\n:\n\n'fullName'\n\n,\n\n16\n\nvalue\n\n:\n\n'John Doe'\n\n,\n\n16\n\nvalue\n\n:\n\n'John Doe'\n\n,\n\n17\n\n}\n\n,\n\n17\n\n}\n\n,\n\n18\n\n{\n\n18\n\n{\n\n19\n\ntype\n\n:\n\n'uint32'\n\n,\n\n19\n\ntype\n\n:\n\n'uint32'\n\n,\n\n20\n\nname\n\n:\n\n'userId'\n\n,\n\n20\n\nname\n\n:\n\n'userId'\n\n,\n\n21\n\nvalue\n\n:\n\n'1234'\n\n,\n\n21\n\nvalue\n\n:\n\n'1234'\n\n,\n\n22\n\n}\n\n,\n\n22\n\n}\n\n,\n\n23\n\n]\n\n;\n\n23\n\n]\n\n;\n\n24\n\n24\n\n25\n\nconst\n\nsignedMessage\n\n=\n\nawait\n\nweb3\n\n.\n\neth\n\n.\n\nsignTypedData\n\n(\n\nfromAddress\n\n,\n\nmessage\n\n,\n\ntrue\n\n)\n\n25\n\nconst\n\nsignedMessage\n\n=\n\nawait\n\nweb3\n\n.\n\neth\n\n.\n\nsignTypedData\n\n(\n\nfromAddress\n\n,\n\nmessage\n\n,\n\ntrue\n\n)", "explanation": "**Sign Typed Data v1 Overview**\n\nSign Typed Data v1 is a process in the Magic Labs embedded wallet documentation used to securely sign data on the Ethereum blockchain using a user's Ethereum account.\n\n**Main Purpose:**\n\nThe main purpose of Sign Typed Data v1 is to allow users to authenticate and sign arbitrary data on the Ethereum blockchain using their Ethereum account. This process involves the following steps:\n\n1. **User Authentication**: The user authenticates with the Magic Labs embedded wallet.\n2. **Get User's Ethereum Public Address**: The user's Ethereum public address is retrieved.\n3. **Create Typed Data**: The `typedData` is created, which is an object containing the data to be signed, such as string values (e.g., 'fullName') and uint32 values (e.g., 'userId').\n4. **Sign Typed Data**: The `signTypedData` function is used to sign the `typedData` object with the user's Ethereum private key.\n\n**In-Depth Explanation**\n\nTo perform the Sign Typed Data v1 operation:\n\n1. Import the necessary libraries (`magic-sdk` and `web3`).\n2. Initialize the `Magic` instance with your Publishable API Key.\n3. Set up the Web3 instance using the `rpcProvider` of the `Magic` instance.\n4. After user authentication, retrieve the user's Ethereum public address using `getAccounts`.\n5. Create the `typedData` object with the required properties (e.g., 'fullName' and 'userId').\n6. Use the `signTypedData` function to sign the `typedData` object with the user's Ethereum private key, returning a signed message.\n\nThe signed message can be used to verify the authenticity and integrity of the signed data on the Ethereum blockchain.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/featured-chains/polygon#chunk-12", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "Copy\n\n01\n\n/*\n\n01\n\n/*\n\n02\n\nSign Typed Data v4 adds support for\n\n02\n\nSign Typed Data v4 adds support for\n\n03\n\narrays and recursive data types.\n\n03\n\narrays and recursive data types.\n\n04\n\n04\n\n05\n\nOtherwise, it works the same as Sign Typed Data v3.\n\n05\n\nOtherwise, it works the same as Sign Typed Data v3.\n\n06\n\n*/\n\n06\n\n*/\n\n07\n\n07\n\n08\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n08\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n09\n\nimport\n\nWeb3\n\nfrom\n\n'web3'\n\n;\n\n09\n\nimport\n\nWeb3\n\nfrom\n\n'web3'\n\n;\n\n10\n\n10\n\n11\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n11\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n12\n\nconst\n\nweb3\n\n=\n\nnew\n\nWeb3\n\n(\n\nmagic\n\n.\n\nrpcProvider\n\n)\n\n;\n\n12\n\nconst\n\nweb3\n\n=\n\nnew\n\nWeb3\n\n(\n\nmagic\n\n.\n\nrpcProvider\n\n)\n\n;\n\n13\n\n13\n\n14\n\n// \u2b50\ufe0f After user is successfully authenticated\n\n14\n\n// \u2b50\ufe0f After user is successfully authenticated\n\n15\n\n15\n\n16\n\n// Get user's Ethereum public address\n\n16\n\n// Get user's Ethereum public address\n\n17\n\nconst\n\nfromAddress\n\n=\n\n(\n\nawait\n\nweb3\n\n.\n\neth\n\n.\n\ngetAccounts\n\n(\n\n)\n\n)\n\n[\n\n0\n\n]\n\n;\n\n17\n\nconst\n\nfromAddress\n\n=\n\n(\n\nawait\n\nweb3\n\n.\n\neth\n\n.\n\ngetAccounts\n\n(\n\n)\n\n)\n\n[\n\n0\n\n]\n\n;\n\n18\n\n18\n\n19\n\nconst\n\nmessage\n\n=\n\n{\n\n19\n\nconst\n\nmessage\n\n=\n\n{\n\n20\n\ntypes\n\n:\n\n{\n\n20\n\ntypes\n\n:\n\n{\n\n21\n\nEIP712Domain\n\n:\n\n[\n\n21\n\nEIP712Domain\n\n:\n\n[\n\n22\n\n{\n\n22\n\n{\n\n23\n\nname\n\n:\n\n'name'\n\n,\n\n23\n\nname\n\n:\n\n'name'\n\n,\n\n24\n\ntype\n\n:\n\n'string'\n\n,\n\n24\n\ntype\n\n:\n\n'string'\n\n,\n\n25\n\n}\n\n,\n\n25\n\n}\n\n,\n\n26\n\n{\n\n26\n\n{\n\n27\n\nname\n\n:\n\n'version'\n\n,\n\n27\n\nname\n\n:\n\n'version'\n\n,\n\n28\n\ntype\n\n:\n\n'string'\n\n,\n\n28\n\ntype\n\n:\n\n'string'\n\n,\n\n29\n\n}\n\n,\n\n29\n\n}\n\n,\n\n30\n\n{\n\n30\n\n{\n\n31\n\nname\n\n:\n\n'verifyingContract'\n\n,\n\n31\n\nname\n\n:\n\n'verifyingContract'\n\n,\n\n32\n\ntype\n\n:\n\n'address'\n\n,\n\n32\n\ntype\n\n:\n\n'address'\n\n,\n\n33\n\n}\n\n,\n\n33\n\n}\n\n,\n\n34\n\n]\n\n,\n\n34\n\n]\n\n,\n\n35\n\nGreeting\n\n:\n\n[\n\n35\n\nGreeting\n\n:\n\n[\n\n36\n\n{\n\n36\n\n{\n\n37\n\nname\n\n:\n\n'contents'\n\n,\n\n37\n\nname\n\n:\n\n'contents'\n\n,\n\n38\n\ntype\n\n:\n\n'string'\n\n,\n\n38\n\ntype\n\n:\n\n'string'\n\n,\n\n39\n\n}\n\n,\n\n39\n\n}\n\n,\n\n40\n\n]\n\n,\n\n40\n\n]\n\n,\n\n41\n\n}\n\n,\n\n41\n\n}\n\n,\n\n42\n\nprimaryType\n\n:\n\n'Greeting'\n\n,\n\n42\n\nprimaryType\n\n:\n\n'Greeting'\n\n,\n\n43\n\ndomain\n\n:\n\n{\n\n43\n\ndomain\n\n:\n\n{\n\n44\n\nname\n\n:\n\n'Magic'\n\n,\n\n44\n\nname\n\n:\n\n'Magic'\n\n,\n\n45\n\nversion\n\n:\n\n'1'\n\n,\n\n45\n\nversion\n\n:\n\n'1'\n\n,\n\n46\n\nverifyingContract\n\n:\n\n'0xE0cef4417a772512E6C95cEf366403839b0D6D6D'\n\n,\n\n46\n\nverifyingContract\n\n:\n\n'0xE0cef4417a772512E6C95cEf366403839b0D6D6D'\n\n,\n\n47\n\n}\n\n,\n\n47\n\n}\n\n,\n\n48\n\nmessage\n\n:\n\n{\n\n48\n\nmessage\n\n:\n\n{\n\n49\n\ncontents\n\n:\n\n'Hello, from Magic!'\n\n,\n\n49\n\ncontents\n\n:\n\n'Hello, from Magic!'\n\n,\n\n50\n\n}\n\n,\n\n50\n\n}\n\n,\n\n51\n\n}\n\n;\n\n51\n\n}\n\n;\n\n52\n\n52\n\n53\n\nconst\n\nsignedMessage\n\n=\n\nawait\n\nweb3\n\n.\n\neth\n\n.\n\nsignTypedData\n\n(\n\nfromAddress\n\n,\n\nmessage\n\n)\n\n;\n\n53\n\nconst\n\nsignedMessage\n\n=\n\nawait\n\nweb3\n\n.\n\neth\n\n.\n\nsignTypedData\n\n(\n\nfromAddress\n\n,\n\nmessage\n\n)\n\n;", "explanation": "**Sign Typed Data v4 Explanation**\n\nSign Typed Data v4 is a method for signing data in a typed format, allowing for the verification of user data on the Polygon blockchain. It is designed to work with JSON libraries such as EIP-712, which provides a way to sign messages in a human-readable format.\n\n**Key Features**\n\n* Supports arrays and recursive data types, making it more flexible than version 3.\n* Works similarly to Sign Typed Data v3, with the same core functionality, but with added support for more complex data structures.\n\n**Purpose**\n\nThe main purpose of Sign Typed Data v4 is to enable the secure and trusted verification of user data on the Polygon blockchain. This is achieved by:\n\n1. Authenticating the user through Magic's authentication process\n2. Retrieving the user's Ethereum public address\n3. Creating a typed data message that includes the user's data and any other relevant information\n4. Signing the typed data message with the user's private key\n5. Verifying the signed message on the blockchain\n\n**Example Code**\n\nThe provided code snippet demonstrates how to use Sign Typed Data v4 in a JavaScript environment. It imports the necessary libraries, creates a Magic instance, retrieves the user's Ethereum public address, creates a typed data message, and signs it using the `eth.signTypedData` method. The signed message can then be verified on the blockchain.\n\n**Key Benefits**\n\n* Provides a secure and trusted way to verify user data on the Polygon blockchain\n* Supports complex data structures, enabling more powerful and flexible applications\n* Works seamlessly with Magic's authentication process and EIP-712 JSON libraries", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/featured-chains/polygon#chunk-13", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n#\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\nimport\n\n{\n\nethers\n\n}\n\nfrom\n\n'ethers'\n\n;\n\n02\n\nimport\n\n{\n\nethers\n\n}\n\nfrom\n\n'ethers'\n\n;\n\n03\n\n03\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_PUBLISHABLE_API_KEY'\n\n)\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_PUBLISHABLE_API_KEY'\n\n)\n\n05\n\nconst\n\nprovider\n\n=\n\nnew\n\nethers\n\n.\n\nBrowserProvider\n\n(\n\nmagic\n\n.\n\nrpcProvider\n\n)\n\n;\n\n05\n\nconst\n\nprovider\n\n=\n\nnew\n\nethers\n\n.\n\nBrowserProvider\n\n(\n\nmagic\n\n.\n\nrpcProvider\n\n)\n\n;\n\n06\n\n06\n\n07\n\nconst\n\nsigner\n\n=\n\nawait\n\nprovider\n\n.\n\ngetSigner\n\n(\n\n)\n\n;\n\n07\n\nconst\n\nsigner\n\n=\n\nawait\n\nprovider\n\n.\n\ngetSigner\n\n(\n\n)\n\n;\n\n08\n\n08\n\n09\n\n// Get user's Ethereum public address\n\n09\n\n// Get user's Ethereum public address\n\n10\n\nconst\n\naddress\n\n=\n\nawait\n\nsigner\n\n.\n\ngetAddress\n\n(\n\n)\n\n;\n\n10\n\nconst\n\naddress\n\n=\n\nawait\n\nsigner\n\n.\n\ngetAddress\n\n(\n\n)\n\n;\n\n11\n\n11\n\n12\n\n// Get user's balance in ether\n\n12\n\n// Get user's balance in ether\n\n13\n\nconst\n\nbalance\n\n=\n\nethers\n\n.\n\nformatEther\n\n(\n\n13\n\nconst\n\nbalance\n\n=\n\nethers\n\n.\n\nformatEther\n\n(\n\n14\n\nawait\n\nprovider\n\n.\n\ngetBalance\n\n(\n\naddress\n\n)\n\n,\n\n// Balance is in wei\n\n14\n\nawait\n\nprovider\n\n.\n\ngetBalance\n\n(\n\naddress\n\n)\n\n,\n\n// Balance is in wei\n\n15\n\n)\n\n;\n\n15\n\n)\n\n;", "explanation": "**#Get Balance - #Ethers.js**\n\nThis documentation section from the Magic Labs Embedded Wallet guide explains how to retrieve a user's Ethereum balance using the Ethers.js library. It focuses on integrating the Magic Labs SDK with Ethers.js to get a user's Ethereum balance.\n\n**Main Purpose:**\n\nThe primary purpose of this code snippet is to:\n\n1. Initialize the Magic Labs SDK with a publishable API key.\n2. Create an Ethereum provider using the Magic Labs RPC provider.\n3. Get the user's Ethereum public address.\n4. Retrieve the user's Ethereum balance in ether units.\n\n**Key Steps:**\n\n1. Import the Magic Labs SDK and Ethers.js libraries.\n2. Initialize the Magic Labs SDK with a publishable API key.\n3. Create an Ethernet provider using the Magic Labs RPC provider.\n4. Get the user's Ethereum public address using the `getSigner` and `getAddress` methods.\n5. Retrieve the user's Ethereum balance using the `getBalance` method.\n6. Format the balance from wei units to ether units using the `formatEther` method.\n\n**Example Use Case:**\n\nThis code snippet can be used in a web application to display a user's Ethereum balance after authentication using Magic Labs. The retrieved balance can be used to display the user's ETH balance or to enable ETH-based transactions.\n\n**Note:**\n\n* Replace `'YOUR_PUBLISHABLE_API_KEY'` with your actual Magic Labs publishable API key.\n* This code snippet assumes that the user has already authenticated with Magic Labs and has a valid Ethereum account connected.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/featured-chains/polygon#chunk-14", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\nimport\n\nWeb3\n\nfrom\n\n'web3'\n\n;\n\n02\n\nimport\n\nWeb3\n\nfrom\n\n'web3'\n\n;\n\n03\n\n03\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n05\n\nconst\n\nweb3\n\n=\n\nnew\n\nWeb3\n\n(\n\nmagic\n\n.\n\nrpcProvider\n\n)\n\n;\n\n05\n\nconst\n\nweb3\n\n=\n\nnew\n\nWeb3\n\n(\n\nmagic\n\n.\n\nrpcProvider\n\n)\n\n;\n\n06\n\n06\n\n07\n\n// Get user's Ethereum public address\n\n07\n\n// Get user's Ethereum public address\n\n08\n\nconst\n\naddress\n\n=\n\n(\n\nawait\n\nweb3\n\n.\n\neth\n\n.\n\ngetAccounts\n\n(\n\n)\n\n)\n\n[\n\n0\n\n]\n\n;\n\n08\n\nconst\n\naddress\n\n=\n\n(\n\nawait\n\nweb3\n\n.\n\neth\n\n.\n\ngetAccounts\n\n(\n\n)\n\n)\n\n[\n\n0\n\n]\n\n;\n\n09\n\n09\n\n10\n\n// Get user's balance in ether\n\n10\n\n// Get user's balance in ether\n\n11\n\nconst\n\nbalance\n\n=\n\nweb3\n\n.\n\nutils\n\n.\n\nfromWei\n\n(\n\n11\n\nconst\n\nbalance\n\n=\n\nweb3\n\n.\n\nutils\n\n.\n\nfromWei\n\n(\n\n12\n\nawait\n\nweb3\n\n.\n\neth\n\n.\n\ngetBalance\n\n(\n\naddress\n\n)\n\n,\n\n12\n\nawait\n\nweb3\n\n.\n\neth\n\n.\n\ngetBalance\n\n(\n\naddress\n\n)\n\n,\n\n13\n\n'wei'\n\n// Balance is in wei\n\n13\n\n'wei'\n\n// Balance is in wei\n\n14\n\n)\n\n;\n\n14\n\n)\n\n;", "explanation": "Based on the provided code snippet from the Magic Labs embedded wallet documentation, the section titled '#Web3.js' is about integrating the Web3.js library with the Magic Labs SDK.\n\n**Main Purpose:**\nThe main purpose of this code is to use the Web3.js library, which is a JavaScript library for interacting with the Ethereum blockchain, and combine it with the Magic Labs SDK to retrieve the user's Ethereum public address and balance.\n\n**Key Points:**\n\n1. **Importing Libraries**: The code imports the Magic Labs SDK and Web3.js library.\n2. **Initializing Magic Labs SDK**: The `Magic` object is created with a publishable API key, which is a must for using the Magic Labs SDK.\n3. **Associating Web3.js with Magic Labs SDK**: The Web3.js library is initialized with the Magic Labs SDK's RPC provider, which enables interaction with the Ethereum blockchain.\n4. **Retrieving User's Ethereum Address**: The code uses Web3.js to retrieve the user's Ethereum public address.\n5. **Retrieving User's Balance**: The code uses Web3.js to retrieve the user's balance in ether, which is then converted to wei for better readability.\n\n**Example Use Case:**\nThis code snippet can be used in Magic Labs embedded wallet applications to provide Ethereum wallet functionality to users, including retrieving their Ethereum public address and balance.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/featured-chains/polygon#chunk-15", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 Magic JavaScript SDK\n\n\u2022 EVM Documentation\n\nMagic JavaScript SDK\n\nEVM Documentation", "explanation": "This part of the documentation from the Magic Link website, specifically for the Polygon blockchain, is focused on providing resources for developers to learn more about integrating the Magic Labs embedded wallet with their applications.\n\nThe main purpose of this section is to directs users toward established libraries and reference materials that facilitate the use of the Magic Labs embedded wallet on Polygon.\n\nHere's a brief description of each resource provided:\n\n1. **Magic JavaScript SDK**: This is a software development kit (SDK) that provides a JavaScript library for interacting with the Magic Labs embedded wallet. The SDK enables developers to easily integrate the wallet into their applications, allowing users to securely store, manage, and interact with their digital assets.\n\n2. **EVM Documentation**: EVM stands for Ethereum Virtual Machine. The Ethereum Virtual Machine is a technology that powers the execution of smart contracts on various blockchain networks, including the Polygon network. The EVM documentation is likely related to the technical specifications and implementation details of the Ethereum Virtual Machine, which is essential for developers building blockchain-based applications on Polygon.\n\nIn summary, the '#Resources' section provides users with essential links to the Magic JavaScript SDK and EVM Documentation, both of which are crucial for integrating the Magic Labs embedded wallet and building blockchain-based applications on Polygon.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/blockchains/featured-chains/polygon#chunk-16", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nWith Magic, you can use SMS one-time codes as an authentication mechanism, giving users a simple way to log in using their phones.\n\n#\n\nThis feature can only be utilized with Dedicated Wallet apps. See our FAQ's on supported country codes.\n\nDedicated Wallet\n\nFAQ's\n\nSMS Login SDK methods are available on all client-side SDKs.\n\nclient-side SDKs", "explanation": "The documentation section titled 'SMS Login - SMS Login - #Overview - #Compatibility' from the provided URL is about a feature of Magic Labs' embedded wallet solution that allows users to log in using one-time SMS codes sent to their phones.\n\nHere's a clear and concise explanation of its main purpose:\n\n* **Main Purpose:** \n  The SMS Login feature enables users to authenticate with their phones by receiving a one-time SMS code, providing a simple and convenient way to log in.\n\n* **Specifications:**\n\n  - **Compatibility:** \n    This feature is only available for use with Dedicated Wallet apps. \n  - **Supported Regions:**\n    Users must refer to the FAQs on supported country codes to ensure their region is compatible.\n\n* **Availability:**\n  The SMS Login SDK methods are supported in all client-side SDKs, allowing developers to easily integrate this feature into their applications.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/login/sms-login#chunk-1", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 Log in and create wallets for end users with a one-time code sent by SMS to their phone number.", "explanation": "This section titled '#Use Cases' from the Magic Labs embedded wallet documentation, specifically the SMS Login section, primarily describes a real-world application of the SMS Login feature.\n\n**Log in and create wallets for end users with a one-time code sent by SMS to their phone number.**\n\nIn simple terms, this use case illustrates the process of user login and wallet creation on Magic Labs embedded wallet using a one-time code sent via SMS to the user's phone number. The main purpose of this section is to provide an example of how the SMS Login feature can be used to securely authenticate users and create wallets for them, which is essential for any digital wallet service. \n\nThe key components of this use case are:\n\n1. **User Authentication**: Users authenticate themselves by receiving a one-time code via SMS on their registered phone number.\n2. **Wallet Creation**: Once authenticated, users can create wallets on the Magic Labs embedded wallet, allowing them to store and manage their digital assets securely.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/login/sms-login#chunk-2", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nYou can use SMS login by creating a project with our CLI tool and picking 'SMS' when prompted. Alternatively, you can directly integrate it into your existing projects using the sample below. Refer to the API documentation for information on how to install and initialize Magic for your existing project.\n\nCLI tool\n\nAPI documentation\n\nOnce you've created a Magic instance, log users in using loginWithSMS. Once logged in, you will receive a DID token that can be used with our Admin SDK to verify the user's information and wallet address on the backend. You can also retrieve the user's wallet address and email using the user module's getInfo function for Web/React Native and getMetadata for iOS, Android and Flutter.\n\nloginWithSMS\n\nAdmin SDK\n\nuser\n\ngetInfo\n\ngetInfo\n\ngetMetadata\n\nCopy\n\n01\n\n// Assumes you've initialized a `Magic` instance with a Dedicated Wallet API Key\n\n01\n\n// Assumes you've initialized a `Magic` instance with a Dedicated Wallet API Key\n\n02\n\nconst\n\nlogin\n\n=\n\nasync\n\n(\n\nphoneNumber\n\n)\n\n=>\n\n{\n\n02\n\nconst\n\nlogin\n\n=\n\nasync\n\n(\n\nphoneNumber\n\n)\n\n=>\n\n{\n\n03\n\ntry\n\n{\n\n03\n\ntry\n\n{\n\n04\n\nconst\n\ndid\n\n=\n\nawait\n\nmagic\n\n.\n\nauth\n\n.\n\nloginWithSMS\n\n(\n\n{\n\n04\n\nconst\n\ndid\n\n=\n\nawait\n\nmagic\n\n.\n\nauth\n\n.\n\nloginWithSMS\n\n(\n\n{\n\n05\n\nphoneNumber\n\n:\n\nphoneNumber\n\n,\n\n05\n\nphoneNumber\n\n:\n\nphoneNumber\n\n,\n\n06\n\n}\n\n)\n\n;\n\n06\n\n}\n\n)\n\n;\n\n07\n\nconsole\n\n.\n\nlog\n\n(\n\n`\n\nDID Token:\n\n${\n\ndid\n\n}\n\n`\n\n)\n\n;\n\n07\n\nconsole\n\n.\n\nlog\n\n(\n\n`\n\nDID Token:\n\n${\n\ndid\n\n}\n\n`\n\n)\n\n;\n\n08\n\n08\n\n09\n\nconst\n\nuserInfo\n\n=\n\nawait\n\nmagic\n\n.\n\nuser\n\n.\n\ngetInfo\n\n(\n\n)\n\n;\n\n09\n\nconst\n\nuserInfo\n\n=\n\nawait\n\nmagic\n\n.\n\nuser\n\n.\n\ngetInfo\n\n(\n\n)\n\n;\n\n10\n\nconsole\n\n.\n\nlog\n\n(\n\n`\n\nUserInfo:\n\n${\n\nuserInfo\n\n}\n\n`\n\n)\n\n;\n\n10\n\nconsole\n\n.\n\nlog\n\n(\n\n`\n\nUserInfo:\n\n${\n\nuserInfo\n\n}\n\n`\n\n)\n\n;\n\n11\n\n11\n\n12\n\n\u2060\n\n// Handle user information as needed\n\n12\n\n\u2060\n\n// Handle user information as needed\n\n13\n\n}\n\ncatch\n\n{\n\n13\n\n}\n\ncatch\n\n{\n\n14\n\n// Handle errors as required\n\n14\n\n// Handle errors as required\n\n15\n\n}\n\n15\n\n}\n\n16\n\n}\n\n16\n\n}", "explanation": "**#Usage Overview**\n\nThe #Usage section from the Magic Labs embedded wallet documentation provides guidance on how to implement SMS login functionality using the Magic CLI tool and directly integrating it into existing projects.\n\n**Main Purpose**\n\nThe main purpose of this section is to walk developers through the process of setting up and using the SMS login feature in Magic, including creating a Magic instance, logging users in using `loginWithSMS`, and retrieving user information.\n\n**Key Components**\n\n1. **CLI Tool**: Guidance on creating a project with the Magic CLI tool and picking 'SMS' when prompted.\n2. **API Documentation**: Reference to the API documentation for information on installing and initializing Magic for existing projects.\n3. **loginWithSMS**: Explanation of how to log users in using `loginWithSMS`, including the expected DID token response.\n4. **User Module**: Introduction to the user module's `getInfo` function for Web/React Native and `getMetadata` for iOS, Android, and Flutter to retrieve user information.\n5. **Code Example**: A JavaScript code example demonstrating the usage of `loginWithSMS` and retrieving user information.\n\n**Goals**\n\nThe overall goal of this section is to enable developers to implement SMS login functionality in their projects using Magic, allowing users to securely log in and access their wallets.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/login/sms-login#chunk-3", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 Web API documentation\n\n\u2022 React Native API documentation\n\n\u2022 iOS API documentation\n\n\u2022 Android API documentation\n\n\u2022 Flutter API documentation\n\n\u2022 Unity API documentation\n\nWeb API documentation\n\nReact Native API documentation\n\niOS API documentation\n\nAndroid API documentation\n\nFlutter API documentation\n\nUnity API documentation", "explanation": "The '#Resources' section in the Magic Labs embedded wallet documentation appears to be a collection of technical documentation related to integrating the Magic Labs platform with various programming frameworks and development environments.\n\nThe main purpose of this section is to provide easy access to relevant documentation for developers who want to integrate the Magic Labs embedded wallet with their applications. This documentation can help developers:\n\n1. Find necessary API keys and setup instructions for different platforms.\n2. Learn how to implement the Magic Labs wallet in their project.\n3. Troubleshoot any integration issues they may encounter.\n\nIn summary, the '#Resources' section serves as a one-stop resource for developers to quickly find the necessary information to integrate the Magic Labs embedded wallet with various frameworks and environments, allowing them to seamlessly integrate secure identity login and management into their applications.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/authentication/login/sms-login#chunk-4", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "Universal wallets will soon be merged with Dedicated Wallets into a single product line. Universal apps created before February 7, 2024 will work as expected with no change. See our blog post to learn more.\n\nblog post", "explanation": "Based on the provided documentation URL https://magic.link/docs/wallets/features/email-collection, I'll explain the 'Email Collection - Email Collection' section in a clear and concise manner.\n\n**Email Collection**\n\nEmail Collection is a feature in Magic Labs embedded wallets that allows users to securely collect and manage their email addresses within the wallet. This feature integrates with popular email services and enables users to link their email accounts directly to their wallet.\n\n**Main Purpose:**\n\nThe primary purpose of Email Collection is to provide users with a secure and convenient way to:\n\n1. **Link email addresses**: Users can connect their email accounts (e.g., Gmail, Yahoo, Outlook) to their wallet, making it easy to access and manage their email credentials.\n2. **Store email login credentials**: The wallet securely stores email login credentials, eliminating the need to remember multiple passwords.\n3. **Enable seamless authentication**: Email Collection enables users to log in to their email accounts directly from the wallet using biometric authentication (e.g., fingerprint, face recognition) or passwordless authentication (e.g., magic links, security keys).\n\nBy incorporating Email Collection, Magic Labs wallets aim to enhance user convenience, security, and experience when managing their email accounts.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/wallets/features/email-collection#chunk-1", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nMagic offers out-of-the-box UI to request user information in line with OpenID standards. Currently, the only supported field is email but more profile information will be supported in the future.\n\nemail\n\n#\n\n\u2022 For Dedicated Wallet, emails are automatically collected\n\n\u2022 For Universal Wallet, must be manually integrated. Follow the documentation below to implement.\n\n\u2022 Email Collection is available via the following client-side SDKs:WebReact NativeiOSAndroid\n\n\u2022 Web\n\n\u2022 React Native\n\n\u2022 iOS\n\n\u2022 Android\n\nWeb\n\nReact Native\n\niOS\n\nAndroid", "explanation": "The documentation section \"#Overview - #Compatibility\" is about email collection features in the Magic Labs embedded wallet. Its main purpose is to provide information on the current capabilities and limitations of the email collection feature.\n\nHere is a clear and concise explanation of the main points:\n\n**Magic's Email Collection Feature:**\n\n1. Magic offers a pre-built UI for collecting user information based on OpenID standards.\n2. Currently, the supported field is email, but other profile information will be added in the future.\n\n**Email Collection for Different Wallet Types:**\n\n1. **Dedicated Wallet:** Emails are automatically collected.\n2. **Universal Wallet:** Email collection must be manually integrated through API documentation.\n\n**Email Collection Availability:**\n\nThe feature is available on the following client-side SDKs:\n\n* Web\n* React Native\n* iOS\n* Android\n\nIn summary, this documentation section aims to clarify the capabilities and requirements of Magic's email collection feature, enabling developers to understand how it works and what they need to do to integrate it into their applications.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/wallets/features/email-collection#chunk-2", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 Request users that have signed in through any of the authentication methods for an email address\n\nauthentication methods", "explanation": "Based on the provided documentation link from Magic Labs, the '#Use Cases' section explores a specific use case related to collecting user email addresses. \n\nHere's a clear and concise explanation:\n\n**Purpose:**\nThis use case is about requesting an email address from users who have successfully authenticated through any available authentication method. The main goal is to collect and store users' email addresses, likely for account verification, password recovery, or communication purposes.\n\n**Key points:**\n\n- **Trigger:** The email address collection is triggered after a user completes the authentication process (login) using any authentication method available (e.g., email/password, OAuth, or social media login).\n- **Primary purpose:** The primary purpose of collecting users' email addresses is to have a reliable contact method for verification, communication, and recovery purposes.\n- **Integration:** Magic Labs provides a wallet feature that facilitates this process, making it easier to request and collect email addresses securely.\n\nBy explaining this use case, Magic Labs provides developers with a concrete example of how their email collection feature can be applied in a real-world scenario, enabling them to implement it effectively in their own applications.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/wallets/features/email-collection#chunk-3", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nOnce you've completed the quickstart to verify the correct setup of the Magic SDK and the user is successfully authenticated and logged in, you can then request consent to collect their information:\n\nCopy\n\n01\n\nimport\n\nWeb3\n\nfrom\n\n'web3'\n\n;\n\n01\n\nimport\n\nWeb3\n\nfrom\n\n'web3'\n\n;\n\n02\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n03\n\n03\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_API_KEY'\n\n,\n\n{\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR_API_KEY'\n\n,\n\n{\n\n05\n\nnetwork\n\n:\n\n\"goerli\"\n\n,\n\n// Ethereum testnet\n\n05\n\nnetwork\n\n:\n\n\"goerli\"\n\n,\n\n// Ethereum testnet\n\n06\n\n}\n\n)\n\n;\n\n06\n\n}\n\n)\n\n;\n\n07\n\n07\n\n08\n\n// Do something with provider\n\n08\n\n// Do something with provider\n\n09\n\nconst\n\nweb3\n\n=\n\nnew\n\nWeb3\n\n(\n\nmagic\n\n.\n\nrpcProvider\n\n)\n\n;\n\n09\n\nconst\n\nweb3\n\n=\n\nnew\n\nWeb3\n\n(\n\nmagic\n\n.\n\nrpcProvider\n\n)\n\n;\n\n10\n\n10\n\n11\n\nconst\n\naccounts\n\n=\n\nawait\n\nmagic\n\n.\n\nwallet\n\n.\n\nconnectWithUI\n\n(\n\n)\n\n;\n\n11\n\nconst\n\naccounts\n\n=\n\nawait\n\nmagic\n\n.\n\nwallet\n\n.\n\nconnectWithUI\n\n(\n\n)\n\n;\n\n12\n\n12\n\n13\n\n\u2060\n\nconst\n\nemail\n\n=\n\nawait\n\nmagic\n\n.\n\nuser\n\n.\n\nrequestInfoWithUI\n\n(\n\n{\n\nscope\n\n:\n\n{\n\nemail\n\n:\n\n\"required\"\n\n}\n\n}\n\n)\n\n;\n\n13\n\n\u2060\n\nconst\n\nemail\n\n=\n\nawait\n\nmagic\n\n.\n\nuser\n\n.\n\nrequestInfoWithUI\n\n(\n\n{\n\nscope\n\n:\n\n{\n\nemail\n\n:\n\n\"required\"\n\n}\n\n}\n\n)\n\n;\n\n14\n\n14\n\n15\n\nconsole\n\n.\n\nlog\n\n(\n\nemail\n\n)\n\n15\n\nconsole\n\n.\n\nlog\n\n(\n\nemail\n\n)", "explanation": "The section titled '## Usage' from the Magic Link documentation URL explains how to use the Magic Labs embedded wallet to request consent for collecting user information, specifically their email address. The main purpose of this section is to guide the user through the process of integrating the Magic wallet into their application to collect and display a user's email address with their explicit consent.\n\nHere's a step-by-step breakdown of what this section covers:\n\n1. Import the necessary libraries, including Web3 and the Magic SDK.\n2. Initialize the Magic SDK with the API key and network (e.g., the Ethereum testnet \"goerli\").\n3. Create a new instance of the Web3 library using the Magic SDK's RPC provider.\n4. Use the Magic Wallet to connect with a user interface (UI) and retrieve their Ethereum accounts.\n5. Request the user's information with a UI, specifying the scope as \"required\" for the email address.\n6. Log the user's email address to the console.\n\nThe main purpose of this section is to demonstrate how to integrate the Magic Labs embedded wallet into an application to collect and display user information with their consent.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/wallets/features/email-collection#chunk-4", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 In order to collect emails from users that have authenticated through a third-party wallet, developers will need to be subscribed to the approriate pricing tier.\n\npricing tier.", "explanation": "The '#Configuration' section is related to setting up email collection capabilities for authenticated users via a third-party wallet. \n\nIn this context, the configuration is about integrating Magic Labs' premium features with a third-party wallet that supports authentication, like wallets by Meta, Coinbase, or supported wallets for that service. \n\nThis section's main purpose is to explain what developers need to do (in terms of pricing and possibly other requirements), in order to have the capability to collect user emails after seamless third-party wallet authentication.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/wallets/features/email-collection#chunk-5", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 Quickstart\n\n\u2022 magic.wallet.requestInfoWithUI()\n\nQuickstart\n\nmagic.wallet.requestInfoWithUI()\n\nmagic.wallet.requestInfoWithUI()", "explanation": "The '#Resources' section appears to be empty and contains duplicated information. There are two links: 'Quickstart' and 'magic.wallet.requestInfoWithUI()'. The 'magic.wallet.requestInfoWithUI()' is repeated twice.\n\nHowever, without further context of the actual documentation, we can assume that 'magic.wallet.requestInfoWithUI()' refers to a function from the Magic Labs embedded wallet.\n\nHere is a suggested explanation of the actual function:\n\n## Request Information with UI Function\n\n`magic.wallet.requestInfoWithUI()` is a function used to request information from the user via the Magic Labs embedded wallet user interface (UI).\n\n## Main Purpose\n\nThe main purpose of this function is to securely collect information (such as email address) from the user in a seamlessly integrated wallet experience. It allows you to display a user interface within your application, prompting the user to enter the required information, which is then securely stored and returned to your application.\n\nThis function likely handles the following tasks:\n\n- Displaying an input field or form for user information.\n- Validating user input.\n- Securing and returning the user input to your application.\n\nBy using `magic.wallet.requestInfoWithUI()`, you can simplify the user onboarding process, improve security, and ensure a seamless experience for your users.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/wallets/features/email-collection#chunk-6", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "It's recommended to apply this plugin in Unity 2021.3.3f1 or newer. Developers may build 2d Unity mobile Apps both in iOS and Android.\n\nWebGL is currently not supported, but you may use magic-js in a JS context to enable passwordless authentication flow.\n\nmagic-js", "explanation": "**Unity API Reference - Login with Email and OTP**\n\nThe 'Unity API reference - Login with Email and OTP' documentation section provides an in-depth explanation of how to implement a seamless login experience using Email and One-Time Password (OTP) authentication in Unity projects. This API reference is specific to the Magic Labs embedded wallet SDK.\n\n**Main Purpose:**\n\nThe main purpose of this API reference is to guide Unity developers in implementing passwordless authentication in their mobile applications (2D), either on iOS or Android platforms, utilizing the Magic Labs embedded wallet. This enables users to sign in securely without creating or entering passwords, instead opting for a more convenient email or phone-based authentication process.\n\n**Key Features:**\n\n- Supports Unity versions 2021.3.3f1 and later.\n- Currently not supported on WebGL, but developers can use magic-js in a JavaScript context for passwordless authentication.\n- Suitable for use in 2D Unity mobile apps on iOS and Android platforms.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/unity#loginwithemailotp#chunk-1", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nThe Magic SDK for Unity is your entry-point to secure, passwordless authentication for your mobile app. This guide will cover some important topics for getting started with the Magic Unity SDK and to make the most of Magic's features.", "explanation": "Based on the provided documentation, here is a clear and concise explanation:\n\n**Overview Summary:**\nThe Magic SDK for Unity is a tool that enables secure, passwordless authentication for mobile applications. It serves as a foundation for integrating Magic's authentication features into Unity-based projects.\n\n**Main Purpose:**\nThe primary purpose of this SDK is to guide developers on how to effectively use the Magic Unity SDK, showcasing its capabilities and best practices to ensure seamless and secure authentication experiences in mobile applications built with Unity.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/unity#loginwithemailotp#chunk-2", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nThe Magic class is the entry-point to the Magic SDK. It must be instantiated with a Magic publishable key.\n\n#\n\n#\n\nMagic\n\nParameter\n\nType\n\nDefinition\n\napiKey\n\napiKey\n\nString\n\nYour publishable API Key retrieved from the Magic Dashboard.\n\nnetwork\n\nnetwork\n\nEthNetwork\n\nA representation of the connected Ethereum network (one of: mainnet or goerli).\n\nlocale?\n\nlocale?\n\nString\n\nCustomize the language of Magic's modal, email and confirmation screen. See Localization for more.\n\nLocalization\n\nconfig?\n\nconfig?\n\nCustomNodeConfiguration\n\nA custom Ethereum Node configuration with the following shape:\n\nrpcUrl (String): A URL pointing to your custom Ethereum Node.\n\nrpcUrl\n\n\u2060chainId? (Number): Some Node infrastructures require you to pass an explicit chain ID. If you are aware that your Node requires this configuration, pass it here as an integer.\n\nchainId?\n\nmacCanvas?\n\nmacCanvas?\n\nGameObject\n\nYour application\u2019s primary canvas. Must be non-null for macOS and macOS editor support.", "explanation": "**Summary of the 'Magic' Class Constructor**\n\nThe 'Magic' class is the main entry point of the Magic SDK. To use it, you need to create an instance of this class by passing the required parameters. The main purpose of this class is to initialize the Magic wallet within your Unity application.\n\n**Required Parameters:**\n\n1. **apiKey**: A unique, public key obtained from the Magic Dashboard, used for authentication.\n2. **network**: The Ethereum network (mainnet or goerli) your application is connected to.\n3. (Optional) **locale**: Customizes the language of Magic's modal, email, and confirmation screens.\n4. (Optional) **config**: A custom Ethereum Node configuration, including RPC URL and chain ID (if required).\n5. (Optional) **macCanvas**: The primary canvas of your application (required for macOS and editor support).\n\n**Key Functionality:**\n\nCreating a 'Magic' instance allows your application to initialize the Magic wallet, enabling features such as login with email and OTP. This is the first step in integrating the Magic wallet into your Unity application.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/unity#loginwithemailotp#chunk-3", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\nusing\n\nMagicSDK\n\n;\n\n01\n\nusing\n\nMagicSDK\n\n;\n\n02\n\n02\n\n03\n\npublic\n\nclass\n\nMagicUnity\n\n:\n\nMonoBehaviour\n\n03\n\npublic\n\nclass\n\nMagicUnity\n\n:\n\nMonoBehaviour\n\n04\n\n{\n\n04\n\n{\n\n05\n\nvoid\n\nStart\n\n(\n\n)\n\n05\n\nvoid\n\nStart\n\n(\n\n)\n\n06\n\n{\n\n06\n\n{\n\n07\n\nMagic\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n\"PUBLISHABLE_API_KEY\"\n\n)\n\n;\n\n07\n\nMagic\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n\"PUBLISHABLE_API_KEY\"\n\n)\n\n;\n\n08\n\nMagic\n\n.\n\nInstance\n\n=\n\nmagic\n\n;\n\n08\n\nMagic\n\n.\n\nInstance\n\n=\n\nmagic\n\n;\n\n09\n\n}\n\n09\n\n}\n\n10\n\n}\n\n10\n\n}", "explanation": "**Initialization Section Explanation**\n\nThe '#Initialization' section from the Magic Link documentation appears to be a Unity code snippet that demonstrates the initialization of the Magic Lab's embedded wallet. Here's a breakdown of the main purpose and key points:\n\n**Main Purpose:**\nThe initialization section sets up the Magic Lab's embedded wallet in a Unity environment.\n\n**Key Points:**\n\n1. The code initializes two instances of the `Magic` class, `magic` and then assigns an instance variable `Magic.Instance` with one of the initialized instances.\n2. An instance of the `Magic` class is created by passing the publishable API key.\n3. `Publishable_API_KEY` is a placeholder for a unique identifier provided by Magic Link for each customer.\n\n**Initialization Steps:**\nTo initialize the Magic Lab's embedded wallet:\n\n1. Import the `MagicSDK` namespace.\n2. Create an instance of the `Magic` class by passing the publishable API key.\n3. Assign the instance variable `Magic.Instance` with the initialized instance.\n\n**Context:**\nThis initialization code typically needs to be run once in the game or application's startup process, such as in the `Start()` method of a `MonoBehaviour` class.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/unity#loginwithemailotp#chunk-4", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nThe Auth Module and its members are accessible on the Magic SDK instance by the auth property.\n\nauth\n\nCopy\n\n01\n\nusing\n\nMagicSDK\n\n;\n\n01\n\nusing\n\nMagicSDK\n\n;\n\n02\n\n02\n\n03\n\nmagic\n\n.\n\nAuth\n\n;\n\n03\n\nmagic\n\n.\n\nAuth\n\n;\n\n04\n\nmagic\n\n.\n\nAuth\n\n.\n\nLoginWithEmailOTP\n\n;\n\n04\n\nmagic\n\n.\n\nAuth\n\n.\n\nLoginWithEmailOTP\n\n;\n\n#\n\nLoginWithEmailOTP\n\nAuthenticate a user passwordlessly using an email one-time code sent to the specified user's email address.\n\n#\n\n\u2022 email The user email to log in with\n\nemail", "explanation": "**LoginWithEmailOTP Method Explanation**\n\nThe `LoginWithEmailOTP` method is a public method within the Auth Module of the Magic Labs embedded wallet documentation. Its main purpose is to authenticate a user without a password by sending a one-time code to their email address.\n\n**Key Functionality:**\n\n1. The method takes a user's email address as a required parameter.\n2. When called, Magic Labs sends a one-time code to the specified email address.\n3. The user must enter the received one-time code to complete the authentication process.\n\n**Main Use Case:**\n\nThis method provides a secure, passwordless login alternative for users, allowing them to access their accounts without needing to remember or input a password. This feature enhances user experience and is ideal for projects that require a seamless and secure login process.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/unity#loginwithemailotp#chunk-5", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 DIDToken: Task<String>: The function resolves upon authentication request success and rejects with a specific error code if the request fails. The resolved value is a Decentralized ID token with a default 15-minute lifespan.\n\nDIDToken: Task<String>", "explanation": "**Returns Section**\n\nThe '#Returns' section from the Magic Labs embedded wallet documentation is about the outcome of the 'LoginWithEmailOtp' function. This section specifies the type of return value that the function provides and the nature of possible errors.\n\n**Key Points:**\n\n- The function returns a `Task<String>` type, which means it resolves to a string value if the authentication request is successful.\n- The string value returned is a Decentralized ID (DID) token, which is a secure token used to represent a user's identity.\n- The DID token has a default lifespan of 15 minutes, meaning it expires after this period and needs to be refreshed for continued use.\n- If the authentication request fails, the function rejects with a specific error code, which can be used for error handling and debugging purposes.\n\n**Main Purpose:**\nThe returns section serves as a clear indicator of what the user can expect when calling the 'LoginWithEmailOtp' function. This information is essential for writing robust and error-handling code that integrates seamlessly with the Magic Labs embedded wallet.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/unity#loginwithemailotp#chunk-6", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nThe User Module and its members are accessible on the Magic SDK instance by the user property.\n\nuser\n\nCopy\n\n01\n\nimport MagicSDK\n\n01\n\nimport MagicSDK\n\n02\n\n02\n\n03\n\nvar\n\nmagic\n\n=\n\nMagic\n\n.\n\nInstance\n\n03\n\nvar\n\nmagic\n\n=\n\nMagic\n\n.\n\nInstance\n\n04\n\n04\n\n05\n\nmagic\n\n.\n\nUser\n\n05\n\nmagic\n\n.\n\nUser\n\n06\n\nmagic\n\n.\n\nUser\n\n.\n\nGetIdToken\n\n06\n\nmagic\n\n.\n\nUser\n\n.\n\nGetIdToken\n\n07\n\nmagic\n\n.\n\nUser\n\n.\n\nGenerateIdToken\n\n07\n\nmagic\n\n.\n\nUser\n\n.\n\nGenerateIdToken\n\n08\n\nmagic\n\n.\n\nUser\n\n.\n\nGetMetadata\n\n08\n\nmagic\n\n.\n\nUser\n\n.\n\nGetMetadata\n\n09\n\nmagic\n\n.\n\nUser\n\n.\n\nUpdateEmail\n\n09\n\nmagic\n\n.\n\nUser\n\n.\n\nUpdateEmail\n\n10\n\nmagic\n\n.\n\nUser\n\n.\n\nIsLoggedIn\n\n10\n\nmagic\n\n.\n\nUser\n\n.\n\nIsLoggedIn\n\n11\n\nmagic\n\n.\n\nUser\n\n.\n\nLogout\n\n11\n\nmagic\n\n.\n\nUser\n\n.\n\nLogout\n\n#\n\nUpdateEmail\n\nInitiates the update email flow that allows a user to change to a new email\n\n#\n\n\u2022 email The user email to update with\n\n\u2022 showUI If true, show an out-of-the-box pending UI while the request is in flight\n\nemail\n\nshowUI\n\ntrue", "explanation": "**User Module - UpdateEmail - Public Methods**\n\nThis section of the Magic Labs embedded wallet documentation explains how to update a user's email address using the Magic SDK in Unity.\n\n**Main Purpose:**\n\nThe primary purpose of the `UpdateEmail` method is to initiate a flow that allows a user to change their email address. This involves updating the user's email on the Magic Labs server, ensuring that the new email is verified and ready for use.\n\n**Method Signature:**\n\n`UpdateEmail(email: string, showUI: boolean)`\n\n**Parameters:**\n\n1. **email**: The new email address to update with.\n2. **showUI**: A boolean flag indicating whether to display an out-of-the-box pending UI while the request is being processed. Default is `true`.\n\n**Usage:**\n\nTo update a user's email address, you can call the `UpdateEmail` method on the `User` property of the Magic SDK instance, passing in the new email address and optional `showUI` parameter. For example:\n```swift\nmagic.User.UpdateEmail(\"new_email@example.com\", true);\n```\nThis will initiate the update email flow and display a pending UI if `showUI` is `true`.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/unity#loginwithemailotp#chunk-7", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 Task<Boolean>: The Completable resolves with a true boolean value if update email is successful and rejects with a specific error code if the request fails.\n\nTask<Boolean>\n\nCompletable", "explanation": "Based on the documentation from the provided URL, the '#Returns' section is about the outcome of the `LoginWithEmailOtp` method, specifically regarding email updates. Here's what it is about and its main purpose in a clear and concise manner:\n\n**Returns:**\n\nThe `LoginWithEmailOtp` method returns a `Task<Boolean>`, which means it is an asynchronous operation that returns a boolean value. \n\nHowever the Task for `Complettable` can actually either be a value and when finished to see is complete using `.ToResult()` using method like:\n\n \n**Main Purpose:**\n\n- If the email update is successful, the `Task` will resolve with a `true` boolean value.\n- If the email update fails, the `Task` will reject with a specific error code, providing information about the failure.\n\nIn summary, the `Returns` section of the `LoginWithEmailOtp` method indicates the outcome and potential error code(s) for email update operations.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/unity#loginwithemailotp#chunk-8", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nGetIdToken\n\nGenerates a Decentralized Id Token which acts as a proof of authentication to resource servers.\n\n#\n\n\u2022 lifespan?: will set the lifespan of the generated token. Defaults to 900s (15 mins)\n\nlifespan?", "explanation": "**GetIdToken Overview**\n\nThe `GetIdToken` method is part of the Magic Labs embedded wallet documentation and is used to generate a Decentralized Id Token. This token serves as proof of authentication to resource servers, providing a secure and centralized way to authenticate users.\n\n**Main Purpose**\n\nThe primary purpose of the `GetIdToken` method is to authenticate users and provide them with a token that can be used to access protected resources on other servers (resource servers). This is especially useful in scenarios where a single-login solution is required, and users should only need to authenticate once to access various applications and services.\n\n**Token Lifespan**\n\nThe `lifespan?` parameter controls the duration for which the generated token remains valid. If not specified, the token defaults to a lifespan of 900 seconds (15 minutes). This means that after 15 minutes, the token will expire and need to be renewed. By setting a custom `lifespan`, developers can control how long the token remains valid and can adjust the value based on their specific use case, security requirements, and user experience considerations.\n\nIn essence, the `GetIdToken` method and its lifespan parameter are essential components in implementing a seamless authentication experience for users, enabling developers to create applications with robust security and streamlined user onboarding processes.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/unity#loginwithemailotp#chunk-9", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 GetIdTokenResponse: Task<String>: The Completable resolves with a true boolean value if update email is successful and rejects with a specific error code if the request fails.\n\nGetIdTokenResponse: Task<String>\n\nCompletable", "explanation": "In the Magic Labs embedded wallet documentation, the '#Returns' section is related to the `LoginWithEmailOTP` method, specifically in its Unity client-side SDK implementation. \n\nThis section explains the expected response format when the `LoginWithEmailOTP` method is called. The response is defined as `GetIdTokenResponse: Task<String>`, indicating that it returns a task that resolves with a string value.\n\nHowever, the documentation seems incomplete, listing `GetIdTokenResponse: Task<String>` twice.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/unity#loginwithemailotp#chunk-10", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nGenerateIdToken\n\nGenerates a Decentralized Id Token with optional serialized data.\n\n#\n\n\u2022 lifespan : will set the lifespan of the generated token. Defaults to 900s (15 mins)\n\n\u2022 attachment : will set a signature of serialized data in the generated token. Defaults to \"none\"\n\nlifespan\n\nattachment\n\n\"none\"", "explanation": "**GenerateIdToken - Public Method Explanation**\n\nThe `GenerateIdToken` method in the Magic Labs embedded wallet documentation serves to create a Decentralized ID Token with optional serialized data. This token can be used for authentication or as a digital signature for data attachment.\n\n**Main Purpose:**\n\nThe primary purpose of `GenerateIdToken` is to generate a secure, time-limited token that can be used to verify user identity or authenticate interactions. It also permits the attachment of serialized data, which can be used to store additional information securely with the token.\n\n**Key Parameters:**\n\n*   **lifespan:** Specifies the duration (in seconds) for which the generated token is valid. If no value is provided, it defaults to 900 seconds (15 minutes).\n*   **attachment:** Enables the attachment of serialized data to the generated token. It can have three values: \"none\" (default), a serialized JSON string, or a base64-encoded string. If \"none\" is chosen, no data will be attached to the token. If a string is provided, it will be serialized and attached to the token.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/unity#loginwithemailotp#chunk-11", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 Task<String>: Base64-encoded string representation of a JSON tuple representing [proof, claim]\n\nTask<String>\n\n[proof, claim]", "explanation": "In the context of Magic Labs' embedded wallet documentation, the '#Returns' section explains what data is returned after a successful method execution.\n\nIn this case, the `#Returns` section for the `LoginWithEmailOtp` method mentions that it returns a `Task<String>`. The returned string is a Base64-encoded representation of a JSON tuple, which consists of two parts:\n\n1. `proof`: This is a cryptographic proof of the successful login, likely a JSON Web Token (JWT) or a similar token that can be verified by the server.\n2. `claim`: This is a JSON object containing the user's claimed identity and other relevant information, such as their public address.\n\nThe main purpose of this returned data is to allow the client to:\n\n- Verify the proof (e.g., by decoding and checking the JWT) to ensure the login was successful.\n- Access and use the user's claimed identity and other information for further authentication, authorization, and app functionality.\n\nBy returning this data, the `LoginWithEmailOtp` method provides a way for the client to confirm the user's identity and interact with their wallet securely.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/unity#loginwithemailotp#chunk-12", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nGetMetadata\n\nRetrieves information for the authenticated user.\n\n#", "explanation": "Based on the provided documentation:\n\n**#GetMetadata - Public Method**\n\n**Purpose:** Retrieves information about the currently authenticated user.\n\n**What it does:**\n\n* This method fetches the metadata of the user who has successfully authenticated via the login process.\n* The metadata likely includes user profile information, such as name, email, or other relevant details.\n\n**Key takeaway:**\n\nThe `GetMetadata` method is essential for constructing the user's profile and is typically used after the user has been successfully authenticated. This ensures that the user's data is readily available for further interactions within the Magic Labs embedded wallet.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/unity#loginwithemailotp#chunk-13", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 Task<UserMetadata>: The UserMetadata containing the issuer, email and cryptographic public address of the authenticated user\n\nTask<UserMetadata>\n\nUserMetadata\n\npublic address\n\nCopy\n\n01\n\n[\n\nSerializable\n\n]\n\n01\n\n[\n\nSerializable\n\n]\n\n02\n\npublic\n\nsealed\n\nclass\n\nUserMetadata\n\n02\n\npublic\n\nsealed\n\nclass\n\nUserMetadata\n\n03\n\n{\n\n03\n\n{\n\n04\n\n[\n\nCanBeNull\n\n]\n\npublic\n\nstring\n\nissuer\n\n;\n\n04\n\n[\n\nCanBeNull\n\n]\n\npublic\n\nstring\n\nissuer\n\n;\n\n05\n\n[\n\nCanBeNull\n\n]\n\npublic\n\nstring\n\npublicAddress\n\n;\n\n05\n\n[\n\nCanBeNull\n\n]\n\npublic\n\nstring\n\npublicAddress\n\n;\n\n06\n\n[\n\nCanBeNull\n\n]\n\npublic\n\nstring\n\nemail\n\n;\n\n06\n\n[\n\nCanBeNull\n\n]\n\npublic\n\nstring\n\nemail\n\n;\n\n07\n\n}\n\n07\n\n}\n\n\u2022 issuer : The Decentralized ID of the user. In server-side use-cases, we recommend this value to be used as the user ID in your own tables.\n\n\u2022 email : Email address of the authenticated user\n\n\u2022 publicAddress: The authenticated user's public address (a.k.a.: public key). Currently, this value is associated with the Ethereum blockchain.\n\nissuer\n\nemail\n\npublicAddress", "explanation": "**Returns Section Overview**\n\nThe '# Returns' section in the Magic Labs embedded wallet documentation is about the output response of the `LoginWithEmailAndPasswordOTP` method. This section explains the structure of the response and the data it contains.\n\n**Main Purpose**\n\nThe main purpose of the `Returns` section is to provide information about the data that is returned after a successful authentication using the `LoginWithEmailAndPasswordOTP` method in the Magic Labs embedded wallet SDK for Unity.\n\n**Return Type**\n\nThe return type of the `LoginWithEmailAndPasswordOTP` method is a `Task<UserMetadata>`, where `UserMetadata` is a class containing the following properties:\n\n* `issuer`: The Decentralized ID (Decentralized Identifier, DID) of the authenticated user.\n* `email`: The email address of the authenticated user.\n* `publicAddress`: The authenticated user's public address (associated with the Ethereum blockchain).\n\n**Key Takeaways**\n\n* The `LoginWithEmailAndPasswordOTP` method returns a `Task<UserMetadata>` containing the user's metadata.\n* The `UserMetadata` class has three properties: `issuer`, `email`, and `publicAddress`.\n* These properties can be used to identify and verify the authenticated user in server-side use-cases.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/unity#loginwithemailotp#chunk-14", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nIsLoggedIn\n\nChecks if a user is currently logged in to the Magic SDK.\n\n#", "explanation": "**IsLoggedIn Method**\n\nThe IsLoggedIn method in Magic Labs Embedded Wallet documentation is a public method used to check if a user is currently logged in to the Magic SDK. Its main purpose is to verify the authentication status of the user.\n\n**Key Features:**\n\n- Checks the current user authentication status\n- Returns a boolean value indicating whether the user is logged in or not\n\n**Use Case:**\n\nYou can use this method to determine whether a user has successfully completed the login process or is still not authenticated. It helps you manage the login and logout state of your users, ensuring that they have the necessary permissions and access to protected features within your application. \n\n**Example Usage:**\n\n```csharp\nusing MagicLabSDK;\n\n// Assume 'magic' is an instance of the Magic Labs Embedded Wallet instance\nbool isLoggedIn = magic.IsLoggedIn();\n\nif (isLoggedIn)\n{\n    // User is logged in, proceed with authorized actions\n}\nelse\n{\n    // User is not logged in, handle the case accordingly\n}\n```", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/unity#loginwithemailotp#chunk-15", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 Task<Boolean>\n\nTask<Boolean>", "explanation": "**Returns**\n\nThe `Returns` section in the Magic Labs embedded wallet documentation defines the outcome or result of the `loginWithEmailOTPLivingRoom` or `loginWithEmailOTPLivingRoomAsync` function when they are executed.\n\n**Main Purpose:**\n\nThis section indicates that the function will return a `Boolean` value, either:\n\n- `True`, if the login with email OTP operation is successful.\n- `False`, if the operation fails or there's an error.\n\nIn other words, the `Returns` section specifies the function's return type and the expected outcome, allowing developers to understand the behavior of the function and handle the results accordingly in their Unity-based projects.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/unity#loginwithemailotp#chunk-16", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nLogout\n\nLogs out the currently authenticated Magic user\n\n#", "explanation": "Based on the provided documentation, I'd explain the `Logout` functionality as follows:\n\n**Purpose:**\nThe `Logout` functionality is a method that logs out the currently authenticated Magic user. This means it ends the user's active session, making them lose access to any Magic services or features that require authentication.\n\n**Key Points:**\n\n* It's a public method.\n* It's used to log out an active Magic user session.\n* It's an inverse action of `Login` or authentication.\n\n**Impact:** When a user logs out using the `Logout` method, any subsequent API calls that rely on an active session will fail until the user logs in again. This ensures that Magic users maintain the security and integrity of their authenticated sessions.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/unity#loginwithemailotp#chunk-17", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 Task<Boolean>\n\nTask<Boolean>", "explanation": "The given documentation section titled '#Returns' in the Unity SDK for Magic Labs embedded wallet is related to the 'LoginWithEmailOtp' method. \n\n**What it is about:**\n\nThis section specifies the response type that the 'LoginWithEmailOtp' method will return.\n\n**Main purpose:**\n\nThe main purpose of this section is to inform the developer about the method's output, which in this case is a **Boolean** type. This indicates that the method will return either a true or false value, typically indicating whether the login operation was successful or not.\n\n**Key point:**\n\nBy knowing the return type, a developer can easily incorporate the method into their code and handle the output accordingly, making it easier to handle errors or successful login operations.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/unity#loginwithemailotp#chunk-18", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 GitHub\n\n\u2022 Goerli Testnet Faucet\n\nGitHub\n\nGoerli Testnet Faucet", "explanation": "**#Resources Section Explanation**\n\nThe '#Resources' section in the Magic Labs documentation is a collection of valuable external resources that can be useful for developers working with the Magic SDK. It is meant to provide quick access to relevant tools and information that can aid in the development and testing process.\n\n**Main Purpose:**\n\nThe primary purpose of the '#Resources' section is to provide a convenient one-stop location for developers to find essential resources such as:\n\n* GitHub repositories forMagic SDKs\n* Testnet faucets (specifically the Goerli Testnet Faucet) to access testnet Ethereum\n* Any other relevant tools or documentation links\n\nBy having these resources easily accessible, developers can save time and effort when working with the Magic SDK, making it easier to integrate Magic Labs' functionality into their applications.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/unity#loginwithemailotp#chunk-19", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nThe Magic SDK for Javascript is your entry-point to secure, passwordless authentication for your application. This guide will cover all client-side methods, within each module. It will help you get familiarized with the JavaScript SDK.", "explanation": "This documentation section is an overview of the Magic Labs Web SDK, which is a JavaScript library for passwordless authentication. \n\nIts main purpose is to serve as an entry point for developers to understand and utilize the Magic Labs Web SDK's client-side methods, enabling secure and frictionless authentication for their web applications.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#getinfo#chunk-1", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nThe Magic class is the entry-point to the Magic SDK. It must be instantiated with a Magic publishable key, which you can get by signing up for a developer account.\n\n#\n\nTo use Magic in your application, install the magic-sdk dependency.\n\nmagic-sdk\n\n\u2060If you're integrating with OAuth, OpenID or WebAuthn, additional dependencies are needed. You'll find the installation instructions in their dedicated sections within this documentation.\n\nOAuth\n\nOpenID\n\nWebAuthn\n\nCopy\n\n01\n\n\u2060npm\n\ninstall\n\nmagic-sdk\n\n01\n\n\u2060npm\n\ninstall\n\nmagic-sdk", "explanation": "**Getting Started: Installation**\n\nThe specified documentation section explains the process of setting up and installing the Magic Labs embedded wallet, a.k.a. magic-sdk, in your application.\n\n**Main Purpose:**\n\nThe main purpose of this section is to guide developers through the necessary steps to begin working with the Magic SDK.\n\n**Key Points:**\n\n1. **Instantiating the Magic Class**: You need to create an instance of the Magic class by providing a Magic publishable key, which can be obtained by signing up for a developer account.\n2. **Installing the Magic SDK**: To use Magic in your application, you need to install the `magic-sdk` dependency using npm.\n3. **Additional Dependencies**: If you're integrating with OAuth, OpenID, or WebAuthn, you'll need to install additional dependencies, which are explained in dedicated sections of the documentation.\n\n**Commands:**\n\nTo install the Magic SDK and its required dependencies, use the following npm commands:\n\n```\nnpm install magic-sdk\n```\n\nNo extra commands are provided in the provided snippet, however additional ones are expected to be found in the respective sections as mentioned earlier.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#getinfo#chunk-2", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n#\n\nMagic()\n\nConfigure and construct your Magic SDK instance.\n\nParameter\n\nType\n\nDefinition\n\napiKey\n\napiKey\n\nString\n\nYour publishable API key retrieved from the Magic Dashboard.\n\noptions.locale?\n\noptions.locale?\n\nString\n\nCustomize the language of Magic's modal, email and confirmation screen. See Localization for more.\n\nLocalization\n\noptions.testMode?\n\noptions.testMode?\n\nBoolean\n\nEnable testMode to assert the desired behavior through the email address you provide to loginWithMagicLink without having to go through the auth flow.\n\ntestMode\n\ntestMode\n\nloginWithMagicLink\n\noptions.network?\n\noptions.network?\n\nString | Object\n\n(String): A representation of the connected Ethereum network (mainnet or goerli).\n\n\u2060(Object): A custom Ethereum Node configuration with the following shape:\n\n\u2060rpcUrl (String): A URL pointing to your custom Ethereum Node.\u2060\u2060\n\nrpcUrl\n\n\u2060chainId? (Number): Some Node infrastructures require you to pass an explicit chain ID. If you are aware that your Node requires this configuration, pass it here as an integer.\n\nchainId?\n\noptions.endpoint?\n\noptions.endpoint?\n\nString\n\nA URL pointing to the Magic <iframe> application.\n\n<iframe>\n\noptions.deferPreload?\n\noptions.deferPreload?\n\nBoolean\n\nAn optional flag to delay the loading of the Magic Iframe's static assets until an SDK function is explicitly invoked. \u2060\u2060\u2060Set this to true if latency bottlenecks are a concern.\n\noptions.useStorageCache?\n\noptions.useStorageCache?\n\nBoolean\n\nAn optional flag to allow the usage of the local storage as cache. Currently it is only used for faster calls to isLoggedIn. When set to true, the magic.user.onUserLoggedOut event listener needs to be used.\n\nisLoggedIn\n\ntrue\n\nmagic.user.onUserLoggedOut", "explanation": "**Constructor - #Magic() Explanation**\n\nThe `Magic()` constructor in the Magic Labs embedded wallet documentation is used to configure and construct a Magic SDK instance. It is the primary entry point for creating a Magic wallet instance on the client-side.\n\n**Purpose**\n\nThe main purpose of the `Magic()` constructor is to initialize a Magic wallet instance with various customizable settings and options. This allows developers to tailor the wallet experience to their specific use case and provide a seamless authentication flow for their users.\n\n**Key Parameters and Options**\n\nThe `Magic()` constructor takes several parameters, including:\n\n1. **apiKey**: A required parameter that contains the publishable API key retrieved from the Magic Dashboard.\n2. **options**: An object that contains various customizable settings, such as:\n\t* **locale**: To customize the language of the Magic modal, email, and confirmation screen.\n\t* **testMode**: To enable test mode and simulate the authentication flow.\n\t* **network**: To connect to a specific Ethereum network (mainnet or goerli) or a custom Ethereum Node configuration.\n\t* **endpoint**: To specify a URL pointing to the Magic <iframe> application.\n\t* **deferPreload**: To delay the loading of the Magic Iframe's static assets until an SDK function is explicitly invoked.\n\t* **useStorageCache**: To allow the usage of local storage as cache for faster calls to `isLoggedIn`.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#getinfo#chunk-3", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\n02\n\n03\n\nlet\n\nmagic\n\n;\n\n03\n\nlet\n\nmagic\n\n;\n\n04\n\n04\n\n05\n\n// Construct with an API key:\n\n05\n\n// Construct with an API key:\n\n06\n\n// network configuration defaults to 'mainnet' (Magic's RPC)\n\n06\n\n// network configuration defaults to 'mainnet' (Magic's RPC)\n\n07\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n07\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n08\n\n08\n\n09\n\n// Construct with an API key and use Magic's RPC:\n\n09\n\n// Construct with an API key and use Magic's RPC:\n\n10\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n,\n\n{\n\n10\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n,\n\n{\n\n11\n\nnetwork\n\n:\n\n'sepolia'\n\n// or 'mainnet'\n\n11\n\nnetwork\n\n:\n\n'sepolia'\n\n// or 'mainnet'\n\n12\n\n}\n\n)\n\n;\n\n12\n\n}\n\n)\n\n;\n\n13\n\n13\n\n14\n\n// Construct with an API key and set custom network:\n\n14\n\n// Construct with an API key and set custom network:\n\n15\n\nconst\n\ncustomNodeOptions\n\n=\n\n{\n\n15\n\nconst\n\ncustomNodeOptions\n\n=\n\n{\n\n16\n\nrpcUrl\n\n:\n\n'https://polygon-rpc.com'\n\n,\n\n// your rpc URL\n\n16\n\nrpcUrl\n\n:\n\n'https://polygon-rpc.com'\n\n,\n\n// your rpc URL\n\n17\n\nchainId\n\n:\n\n137\n\n// corresponding chainId for your rpc url\n\n17\n\nchainId\n\n:\n\n137\n\n// corresponding chainId for your rpc url\n\n18\n\n}\n\n;\n\n18\n\n}\n\n;\n\n19\n\n\u2060magic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n,\n\n{\n\n19\n\n\u2060magic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n,\n\n{\n\n20\n\nnetwork\n\n:\n\ncustomNodeOptions\n\n// connected to Polygon Mainnet\n\n20\n\nnetwork\n\n:\n\ncustomNodeOptions\n\n// connected to Polygon Mainnet\n\n21\n\n}\n\n)\n\n;\n\n21\n\n}\n\n)\n\n;\n\n22\n\n22\n\n23\n\n// Construct with an API key and optional params\n\n23\n\n// Construct with an API key and optional params\n\n24\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n,\n\n{\n\n24\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n,\n\n{\n\n25\n\n\u2060  locale\n\n:\n\n'es'\n\n,\n\n25\n\n\u2060 locale\n\n:\n\n'es'\n\n,\n\n26\n\ntestMode\n\n:\n\ntrue\n\n,\n\n26\n\ntestMode\n\n:\n\ntrue\n\n,\n\n27\n\n\u2060  deferPreload\n\n:\n\ntrue\n\n,\n\n27\n\n\u2060 deferPreload\n\n:\n\ntrue\n\n,\n\n28\n\nendpoint\n\n:\n\n'...'\n\n,\n\n28\n\nendpoint\n\n:\n\n'...'\n\n,\n\n29\n\n}\n\n)\n\n;\n\n29\n\n}\n\n)\n\n;", "explanation": "**Initialization Section Overview**\n\nThe '#Initialization' section in the Magic Labs embedded wallet documentation explains how to construct a Magic instance, which is the core of the embedded wallet. This instance is used to interact with the wallet and perform various operations.\n\n**Main Purpose**\n\nThe main purpose of this section is to guide developers through the process of initializing the Magic wallet instance with the required API key and optional parameters. This ensures that the wallet is properly set up and ready to use in their application.\n\n**Key Steps**\n\n1. Import the Magic SDK: The section shows how to import the Magic SDK using ES6 import syntax.\n2. Construct a Magic instance: The Magic instance is created by passing the PUBLISHABLE_API_KEY to the Magic constructor.\n3. Configure network options: The developer can choose to connect to the default mainnet network or a custom network by passing an object with network and optional parameters.\n4. Set custom network: If a custom network is chosen, the developer can provide the RPC URL and chain ID corresponding to the custom network.\n5. Pass optional parameters: The developer can optionally pass parameters such as the locale, test mode, defer preload, and endpoint to customize the wallet behavior.\n\n**Example Use Cases**\n\nThe example code snippets provided demonstrate the different ways to initialize the Magic instance:\n\n* Constructing with an API key and default network\n* Constructing with an API key, custom network, and custom RPC URL\n* Constructing with an API key, custom network, and optional parameters", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#getinfo#chunk-4", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nGlobal methods and properties are accessible on the Magic SDK instance itself.\n\n#\n\npreload\n\nStarts downloading the static assets required to render the Magic iframe context.\n\nAs of magic-sdk version 21.0.0, the SDK constructor will preload the iframe's static assets by default, unless the deferPreload flag is passed into the constructor options. See Release Notes\n\n21.0.0\n\ndeferPreload\n\nRelease Notes\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\n02\n\n03\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n,\n\n{\n\ndeferPreload\n\n:\n\ntrue\n\n}\n\n)\n\n;\n\n03\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n,\n\n{\n\ndeferPreload\n\n:\n\ntrue\n\n}\n\n)\n\n;\n\n04\n\n04\n\n05\n\n// ...\n\n05\n\n// ...\n\n06\n\n06\n\n07\n\nmagic\n\n.\n\npreload\n\n;\n\n07\n\nmagic\n\n.\n\npreload\n\n;", "explanation": "**Preload Method Overview**\n\nThe `preload` method is a global method of the Magic SDK instance that starts downloading the static assets required to render the Magic iframe context.\n\n**Main Purpose**\n\nThe primary purpose of the `preload` method is to prepare the necessary resources for the Magic iframe context before the user interacts with it. By preloading these assets, the Magic SDK can improve the overall performance and responsiveness of the wallet rendering process.\n\n**Key Points**\n\n* Before Magic SDK version 21.0.0, the `preload` method was not called by default, and developers had to manually invoke it.\n* As of version 21.0.0, the SDK constructor preloads the iframe's static assets by default unless the `deferPreload` flag is passed into the constructor options.\n* If you want to defer the preload, you can pass the `deferPreload` option to the Magic SDK constructor, like this: `new Magic('PUBLISHABLE_API_KEY', { deferPreload: true })`\n\n**Example Usage**\n\nTo manually preload the assets, you would call the `preload` method on the Magic SDK instance, like this: `magic.preload();`.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#getinfo#chunk-5", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 None", "explanation": "According to the Magic Link documentation, under the '#Arguments' section for the 'getInfo' method, it is specified that there are no arguments required.\n\nIn simpler terms, the 'getInfo' method does not need any parameters to be passed to it in order to function. Its main purpose is likely to retrieve and return information related to the Magic Labs embedded wallet, such as the user's wallet status, balance, or other relevant data. \n\nThis 'getInfo' method might be used in your application code to conveniently access the necessary information about the Magic Labs embedded wallet without having to explicitly pass any parameters to it.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#getinfo#chunk-6", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 Promise<void>: A Promise that resolves to indicate the <iframe> is ready for requests\n\nPromise<void>\n\n<iframe>", "explanation": "Based on the provided documentation, the '#Returns' section explains that when calling the `getInfo` method, it returns a Promise that indicates when the Magic Labs embedded wallet (`<iframe>`) is ready to receive requests.\n\nIn simpler terms, the main purpose of this section is to inform developers that the `getInfo` method will resolve once the iframe is loaded and ready for further interactions, allowing them to proceed with sending requests to the embedded wallet.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#getinfo#chunk-7", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\n02\n\n03\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n03\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n04\n\n04\n\n05\n\nmagic\n\n.\n\npreload\n\n(\n\n)\n\n.\n\nthen\n\n(\n\n(\n\n)\n\n=>\n\nconsole\n\n.\n\nlog\n\n(\n\n'Magic <iframe> loaded.'\n\n)\n\n)\n\n;\n\n05\n\nmagic\n\n.\n\npreload\n\n(\n\n)\n\n.\n\nthen\n\n(\n\n(\n\n)\n\n=>\n\nconsole\n\n.\n\nlog\n\n(\n\n'Magic <iframe> loaded.'\n\n)\n\n)\n\n;", "explanation": "**Documentation Section: #Example**\n\nThe provided documentation section, labeled as \"#Example\", is a code snippet that demonstrates how to use the Magic Labs embedded wallet in a web application. It showcases the basic steps to load the embedded wallet using the Magic SDK.\n\n**Main Purpose:**\n\nThe purpose of this example is to provide developers with a starting point to integrate the Magic Labs embedded wallet into their web application. It guides users on how to:\n\n1. Import the Magic SDK\n2. Initialize the Magic instance with a publishable API key\n3. Load the embedded wallet using the `preload` method\n4. Handle the loading of the wallet using the `then` method\n\n**Key Takeaways:**\n\n* Import the Magic SDK using `import { Magic } from 'magic-sdk';`\n* Initialize the Magic instance with a publishable API key by passing it to the `Magic` constructor, e.g., `const magic = new Magic('PUBLISHABLE_API_KEY');`\n* Use the `preload` method to load the embedded wallet, e.g., `magic.preload().then(() => console.log('Magic <iframe> loaded.'));`\n* Handle the loading of the wallet using the `then` method to execute a callback function when the wallet is loaded.\n\nBy following this example, developers can quickly and easily integrate the Magic Labs embedded wallet into their web application, providing users with a seamless and secure experience for managing their digital assets.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#getinfo#chunk-8", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nThe Auth Module and it's members are accessible on the Magic SDK instance by the auth property.\n\nauth\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\n02\n\n03\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n03\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n04\n\n04\n\n05\n\nmagic\n\n.\n\nauth\n\n;\n\n05\n\nmagic\n\n.\n\nauth\n\n;\n\n06\n\nmagic\n\n.\n\nauth\n\n.\n\nloginWithMagicLink\n\n;\n\n06\n\nmagic\n\n.\n\nauth\n\n.\n\nloginWithMagicLink\n\n;\n\n07\n\nmagic\n\n.\n\nauth\n\n.\n\nloginWithEmailOTP\n\n;\n\n07\n\nmagic\n\n.\n\nauth\n\n.\n\nloginWithEmailOTP\n\n;\n\n08\n\nmagic\n\n.\n\nauth\n\n.\n\nloginWithSMS\n\n;\n\n08\n\nmagic\n\n.\n\nauth\n\n.\n\nloginWithSMS\n\n;\n\n09\n\nmagic\n\n.\n\nauth\n\n.\n\nloginWithCredential\n\n;\n\n09\n\nmagic\n\n.\n\nauth\n\n.\n\nloginWithCredential\n\n;\n\n10\n\n\u2060magic\n\n.\n\nauth\n\n.\n\nupdateEmailWithUI\n\n;\n\n10\n\n\u2060magic\n\n.\n\nauth\n\n.\n\nupdateEmailWithUI\n\n;\n\n#\n\nloginWithMagicLink\n\nAuthenticate a user passwordlessly using a \"magic link\" sent to the specified user's email address.\n\nOnly available with Dedicated Wallet.\n\n#\n\n\u2022 email (String): The user email to log in with\n\n\u2022 lifespan? (Number): Set the lifespan of the resolved Decentralize ID token. Defaults to 900s (15 mins)\n\n\u2022 showUI? (Boolean): If true, show an out-of-the-box UI to accept the OTP from user. Defaults to true\n\n\u2022 redirectURI? (String): You can provide a redirect URI that Magic will point to after the user clicks their email link. If included, don't forget to call loginWithCredential at the specified redirect location\n\nemail\n\nlifespan?\n\nshowUI?\n\ntrue\n\ntrue\n\nredirectURI?\n\nloginWithCredential\n\nloginWithCredential\n\n\u2060Note: If you are securing a resource server and have your own signup flow after this call resolves, be mindful of where you're calling signup in your implementation to avoid potential concurrency issues!", "explanation": "**Auth Module - #loginWithMagicLink - #Arguments**\n\nThe `#loginWithMagicLink` function is a part of the Auth Module in Magic Labs' embedded wallet documentation. It allows a user to authenticate passwordlessly using a \"magic link\" sent to their email address.\n\n**Purpose:**\n\nThe main purpose of `loginWithMagicLink` is to streamline the user authentication process by sending a magic link to the user's email address, which they can click to access the wallet without entering a password.\n\n**Functionality:**\n\nTo use `loginWithMagicLink`, you need to provide the following arguments:\n\n1. `email` (String): The email address of the user to log in with.\n2. `lifespan?` (Number): Optional parameter to set the lifespan of the resolved Decentralized ID (DID) token (default: 900s or 15 minutes).\n3. `showUI?` (Boolean): Optional parameter to show an out-of-the-box UI to accept the One-Time Password (OTP) from the user (default: true).\n4. `redirectURI?` (String): Optional parameter to specify a redirect URI that Magic will point to after the user clicks their email link.\n\n**Example Use Case:**\n\nTo log in a user with `loginWithMagicLink`, you would call the function on the `auth` property of the Magic SDK instance, passing in the required arguments. For example:\n\n```javascript\n// Assuming magic is your Magic SDK instance\nconst result = await magic.auth.loginWithMagicLink({\n  email: 'user@example.com',\n  lifespan: 1800, // Set lifespan to 30 minutes\n  showUI: true,\n  redirectURI: 'https://example.com/redirect',\n});\n```\n\nThis will send a magic link to the user's email address, and when they click the link, they will be authenticated and redirected to the specified redirect URI.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#getinfo#chunk-9", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 PromiEvent<string | null>: The promise resolves upon authentication request success and rejects with a specific error code if the request fails. The resolved value is a Decentralized ID token with a default 15-minute lifespan.\n\nPromiEvent<string | null>", "explanation": "In the Magic Labs embedded wallet documentation, the `#Returns` section is highlighting the outcome of the `getInfo()` function, specifically the authentication request.\n\n**What it returns:**\n\nA `PromiEvent<string | null>` is returned, which is a JavaScript promise that resolves to either a string or null.\n\n**What does it mean?**\n\n- **Resolved value is a Decentralized ID (DID) token:** When the authentication request is successful, the promise resolves to a string, which is a DID token. This token represents a user's identity on the decentralized network and is a unique identifier.\n- **15-minute lifespan:** The DID token has a default expiration time of 15 minutes. This means that even after a successful authentication, the token needs to be refreshed within 15 minutes to maintain the authentication session.\n- **Rejected value is an error code:** If the authentication request fails, the promise is rejected with a specific error code. This error code can be used to diagnose and handle the situation programmatically.\n\nIn summary, the `getInfo()` function returns a promise that resolves to a Decentralized ID token with a 15-minute lifespan upon successful authentication or rejects with an error code if the authentication request fails.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#getinfo#chunk-10", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\n02\n\n03\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n03\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n04\n\n04\n\n05\n\n// log in a user by their email\n\n05\n\n// log in a user by their email\n\n06\n\ntry\n\n{\n\n06\n\ntry\n\n{\n\n07\n\nawait\n\nmagic\n\n.\n\nauth\n\n.\n\nloginWithMagicLink\n\n(\n\n{\n\nemail\n\n:\n\n'hello@example.com'\n\n}\n\n)\n\n;\n\n07\n\nawait\n\nmagic\n\n.\n\nauth\n\n.\n\nloginWithMagicLink\n\n(\n\n{\n\nemail\n\n:\n\n'hello@example.com'\n\n}\n\n)\n\n;\n\n08\n\n}\n\ncatch\n\n{\n\n08\n\n}\n\ncatch\n\n{\n\n09\n\n// Handle errors if required!\n\n09\n\n// Handle errors if required!\n\n10\n\n}\n\n10\n\n}\n\n11\n\n11\n\n12\n\n// log in a user by their email, without showing an out-of-the box UI.\n\n12\n\n// log in a user by their email, without showing an out-of-the box UI.\n\n13\n\ntry\n\n{\n\n13\n\ntry\n\n{\n\n14\n\nawait\n\nmagic\n\n.\n\nauth\n\n.\n\nloginWithMagicLink\n\n(\n\n{\n\nemail\n\n:\n\n'hello@example.com'\n\n,\n\nshowUI\n\n:\n\nfalse\n\n}\n\n)\n\n;\n\n14\n\nawait\n\nmagic\n\n.\n\nauth\n\n.\n\nloginWithMagicLink\n\n(\n\n{\n\nemail\n\n:\n\n'hello@example.com'\n\n,\n\nshowUI\n\n:\n\nfalse\n\n}\n\n)\n\n;\n\n15\n\n}\n\ncatch\n\n{\n\n15\n\n}\n\ncatch\n\n{\n\n16\n\n// Handle errors if required!\n\n16\n\n// Handle errors if required!\n\n17\n\n}\n\n17\n\n}", "explanation": "**Example Overview**\n\nThe provided documentation section titled '#Example' demonstrates how to use the Magic Labs embedded wallet API to log in a user using their email address. It showcases the process of setting up the Magic SDK, creating a Magic instance, and authenticating a user using the `loginWithMagicLink` method with and without displaying the out-of-the-box UI.\n\n**Main Purpose**\n\nThe main purpose of this example is to provide a clear, step-by-step guide on how to integrate the Magic Labs embedded wallet into a web application, enabling users to log in securely using their email addresses.\n\n**Key Takeaways**\n\n- The example creates a `Magic` instance using the `PUBLISHABLE_API_KEY`.\n- It showcases two scenarios:\n  - Logging in a user by their email address, displaying the out-of-the-box UI.\n  - Logging in a user by their email address, without displaying the out-of-the-box UI.\n- The example demonstrates how to handle errors using `try-catch` blocks.\n\n**Context**\n\nThis example is relevant to developers who want to integrate the Magic Labs embedded wallet into their web applications using the Client-Side SDKs. It helps developers understand how to use the `loginWithMagicLink` method to authenticate users securely and efficiently.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#getinfo#chunk-11", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nRelevant Error Codes\n\nRelevant Error Codes\n\nTo achieve a fully white-labeled experience, you will need to implement some custom error handling according to your UI needs. Here's a short example to illustrate how errors can be caught and identified by their code:\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n,\n\nRPCError\n\n,\n\nRPCErrorCode\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n,\n\nRPCError\n\n,\n\nRPCErrorCode\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\n02\n\n03\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n03\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n04\n\n04\n\n05\n\ntry\n\n{\n\n05\n\ntry\n\n{\n\n06\n\nawait\n\nmagic\n\n.\n\nauth\n\n.\n\nloginWithMagicLink\n\n(\n\n{\n\nemail\n\n:\n\n'hello@example.com'\n\n,\n\nshowUI\n\n:\n\nfalse\n\n}\n\n)\n\n;\n\n06\n\nawait\n\nmagic\n\n.\n\nauth\n\n.\n\nloginWithMagicLink\n\n(\n\n{\n\nemail\n\n:\n\n'hello@example.com'\n\n,\n\nshowUI\n\n:\n\nfalse\n\n}\n\n)\n\n;\n\n07\n\n}\n\ncatch\n\n(\n\nerr\n\n)\n\n{\n\n07\n\n}\n\ncatch\n\n(\n\nerr\n\n)\n\n{\n\n08\n\nif\n\n(\n\nerr\n\ninstanceof\n\nRPCError\n\n)\n\n{\n\n08\n\nif\n\n(\n\nerr\n\ninstanceof\n\nRPCError\n\n)\n\n{\n\n09\n\nswitch\n\n(\n\nerr\n\n.\n\ncode\n\n)\n\n{\n\n09\n\nswitch\n\n(\n\nerr\n\n.\n\ncode\n\n)\n\n{\n\n10\n\ncase\n\nRPCErrorCode\n\n.\n\nMagicLinkFailedVerification\n\n:\n\n10\n\ncase\n\nRPCErrorCode\n\n.\n\nMagicLinkFailedVerification\n\n:\n\n11\n\ncase\n\nRPCErrorCode\n\n.\n\nMagicLinkExpired\n\n:\n\n11\n\ncase\n\nRPCErrorCode\n\n.\n\nMagicLinkExpired\n\n:\n\n12\n\ncase\n\nRPCErrorCode\n\n.\n\nMagicLinkRateLimited\n\n:\n\n12\n\ncase\n\nRPCErrorCode\n\n.\n\nMagicLinkRateLimited\n\n:\n\n13\n\ncase\n\nRPCErrorCode\n\n.\n\nUserAlreadyLoggedIn\n\n:\n\n13\n\ncase\n\nRPCErrorCode\n\n.\n\nUserAlreadyLoggedIn\n\n:\n\n14\n\n// Handle errors accordingly :)\n\n14\n\n// Handle errors accordingly :)\n\n15\n\nbreak\n\n;\n\n15\n\nbreak\n\n;\n\n16\n\n}\n\n16\n\n}\n\n17\n\n}\n\n17\n\n}\n\n18\n\n}\n\n18\n\n}", "explanation": "The '#Error Handling' section from the Magic Labs documentation provides an example of how to implement custom error handling in a web application. The main purpose is to teach developers how to catch and identify specific error codes thrown by the Magic SDK.\n\nHere's a clear and concise breakdown:\n\n**Key Concepts:**\n\n1. **Error Codes**: Errors are categorized into distinct codes, which are used to identify the root cause of the problem.\n2. **`RPCError` and `RPCErrorCode` classes**: These classes are part of the Magic SDK and are used to handle and identify errors.\n3. **`try-catch` block**: The `try-catch` block is used to catch errors that occur during Magic SDK operations.\n\n**Error Handling Flow:**\n\n1. An operation is executed (e.g., logging in with a Magic Link).\n2. If an error occurs, the `catch` block is triggered.\n3. The error is checked to see if it's an instance of `RPCError`.\n4. If it is, the error code is retrieved and used to determine the type of error.\n5. Based on the error code, a switch statement is executed, which handles each specific error case.\n6. If the error code matches a known case, an action is taken to handle the error accordingly.\n\n**Benefits:**\n\n1. Custom error handling allows for a more tailored user experience.\n2. Error handling can be implemented according to the specific needs of the web application.\n3. Developers can provide informative error messages to users.\n\nBy implementing this error handling mechanism, developers can create a more robust and user-friendly experience for their web application.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#getinfo#chunk-12", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nemail-not-deliverable\n\nemail-sent\n\nretry\n\nshowUI: true", "explanation": "In this section titled '#Events' from the Magic Labs embedded wallet documentation, we are discussing a set of events that can occur during the wallet interaction.\n\n**Purpose:** These events are used to provide real-time updates on the wallet's status and actions, allowing developers to update the user interface accordingly.\n\n**Events Explanation:**\n\n1. **email-not-deliverable**: This event is triggered when an email is sent to the user but fails to be delivered, likely due to a non-existent email address or technical issues.\n\n2. **email-sent**: As its name suggests, this event is triggered when an email is successfully sent to the user.\n\n3. **retry**: This event may occur when the wallet experiences an error and automatically retries the action, often due to network connectivity issues or server errors. It indicates the wallet's attempt to resolve the issue.\n\n4. **showUI: true**: This event signals the ability to display the Magic Labs UI (user interface) to the user, allowing them to interact with the wallet directly.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#getinfo#chunk-13", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nloginWithEmailOTP\n\nAuthenticate a user passwordlessly using an email one-time code sent to the specified user's email address.\n\nOnly available with Dedicated Wallet.\n\n#\n\n\u2022 email (String): The user email to log in with\n\n\u2022 lifespan? (Number): Set the lifespan of the resolved Decentralize ID token. Defaults to 900s (15 mins)\n\n\u2022 showUI? (Boolean): If true, show an out-of-the-box UI to accept the OTP from user. Defaults to true\n\n\u2022 deviceCheckUI? (Boolean): The default value is true. It shows Magic branded UI securing sign-ins from new devices. If set to false, the UI will remain hidden. However, this the false value only takes effect when you have also set the showUI: false. If you enable Device Verification in the Magic dashboard and are passing showUI: false you must also explicitly pass deviceCheckUI: false\n\nemail\n\nlifespan?\n\nshowUI?\n\ntrue\n\ntrue\n\ndeviceCheckUI?\n\ntrue\n\nfalse\n\nshowUI: false\n\nshowUI: false\n\ndeviceCheckUI: false\n\n\u2060\n\nAvailable from magic-sdk@19.1.0\n\nmagic-sdk@19.1.0", "explanation": "**loginWithEmailOTP Function Overview**\n\nThe `#loginWithEmailOTP` function is used to authenticate a user passwordlessly using an email one-time code sent to their email address. This feature is only available with Dedicated Wallet.\n\n**Main Purpose**\n\nThe main purpose of `loginWithEmailOTP` is to provide a secure and passwordless authentication method for users, where they can log in using an email one-time code instead of a password.\n\n**Key Functionality**\n\n* Sends an email one-time code to the user's email address\n* Allows the user to log in using the received one-time code\n* Has optional parameters to customize the behavior:\n\t+ `email`: specifies the user email to log in with\n\t+ `lifespan`: sets the lifespan of the Decentralized ID token (default: 15 minutes)\n\t+ `showUI`: shows an out-of-the-box UI to accept the OTP from the user (default: true)\n\t+ `deviceCheckUI`: shows Magic branded UI securing sign-ins from new devices (default: true)\n\n**Recommendation**\n\nThis function is suitable for use cases where passwordless authentication is required, such as when using dedicated wallets. Developers can customize the behavior of the `loginWithEmailOTP` function by passing the required parameters to suit their specific use case.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#getinfo#chunk-14", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 PromiEvent<string | null>: The promise resolves upon authentication request success and rejects with a specific error code if the request fails. The resolved value is a Decentralized ID token with a default 15-minute lifespan.\n\nPromiEvent<string | null>", "explanation": "Based on the documentation, the `#Returns` section is about the expected outcome of the authentication request when using the Magic Labs embedded wallet. Here's a clear and concise explanation:\n\n**What it is:** A PromiEvent (short for \"Promise Event\") that resolves with the Decentralized ID (DID) token.\n\n**Main Purpose:** The main purpose of the PromiEvent is to return a Decentralized ID token, which is a string representing the user's authenticated identity. This token has a default lifespan of 15 minutes.\n\nIf the authentication request fails, the PromiEvent will reject with a specific error code.\n\nIn simpler terms, the `#Returns` section describes the response you can expect after successfully authenticating a user with the Magic Labs embedded wallet, specifically a token representing the user's identity.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#getinfo#chunk-15", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\n02\n\n03\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n03\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n04\n\n04\n\n05\n\n// log in a user by their email\n\n05\n\n// log in a user by their email\n\n06\n\ntry\n\n{\n\n06\n\ntry\n\n{\n\n07\n\nawait\n\nmagic\n\n.\n\nauth\n\n.\n\nloginWithEmailOTP\n\n(\n\n{\n\nemail\n\n:\n\n'hello@example.com'\n\n}\n\n)\n\n;\n\n07\n\nawait\n\nmagic\n\n.\n\nauth\n\n.\n\nloginWithEmailOTP\n\n(\n\n{\n\nemail\n\n:\n\n'hello@example.com'\n\n}\n\n)\n\n;\n\n08\n\n}\n\ncatch\n\n{\n\n08\n\n}\n\ncatch\n\n{\n\n09\n\n// Handle errors if required!\n\n09\n\n// Handle errors if required!\n\n10\n\n}\n\n10\n\n}\n\n11\n\n11\n\n12\n\n// log in a user by their email, without showing an out-of-the box UI.\n\n12\n\n// log in a user by their email, without showing an out-of-the box UI.\n\n13\n\ntry\n\n{\n\n13\n\ntry\n\n{\n\n14\n\nawait\n\nmagic\n\n.\n\nauth\n\n.\n\nloginWithEmailOTP\n\n(\n\n{\n\nemail\n\n:\n\n'hello@example.com'\n\n,\n\nshowUI\n\n:\n\nfalse\n\n}\n\n)\n\n;\n\n14\n\nawait\n\nmagic\n\n.\n\nauth\n\n.\n\nloginWithEmailOTP\n\n(\n\n{\n\nemail\n\n:\n\n'hello@example.com'\n\n,\n\nshowUI\n\n:\n\nfalse\n\n}\n\n)\n\n;\n\n15\n\n}\n\ncatch\n\n{\n\n15\n\n}\n\ncatch\n\n{\n\n16\n\n// Handle errors if required!\n\n16\n\n// Handle errors if required!\n\n17\n\n}\n\n17\n\n}", "explanation": "**Documentation Section: `#Example`**\n\n**Summary:** The `#Example` section of the Magic Labs embedded wallet documentation demonstrates how to implement the `loginWithEmailAndPassword` functionality using the Magic SDK in a web application. It provides a code example showcasing how to log in a user securely.\n\n**Main Purpose:** The main purpose of the `#Example` section is to provide:\n\n1. A code snippet that developers can use as a starting point to integrate the Magic Labs embedded wallet into their web application.\n2. An illustration of how to securely log in a user by their email address, with optional OTP (One-Time Password) verification.\n\n**Key Highlights:**\n\n* Importing the Magic SDK\n* Initializing the Magic instance with a publishable API key\n* Logging in a user by their email address using the `loginWithEmailOTP` method\n* Handling errors for the login process\n* Logging in a user by their email address without displaying the out-of-the-box UI (using the `showUI: false` parameter)\n\n**Example Use Case:** This code snippet can be used by web developers to securely integrate the Magic Labs embedded wallet into their applications, allowing users to log in with their email address securely.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#getinfo#chunk-16", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nRelevant Events\n\nRelevant Events\n\nA white-label OTP login flow is available when passing showUI: false to this login method. Here's a short example to illustrate listening for and emitting events during the login flow:\n\nshowUI: false\n\nCopy\n\n01\n\nimport\n\n{\n\n01\n\nimport\n\n{\n\n02\n\nMagic\n\n,\n\n02\n\nMagic\n\n,\n\n03\n\nLoginWithEmailOTPEventOnReceived\n\n,\n\n03\n\nLoginWithEmailOTPEventOnReceived\n\n,\n\n04\n\nLoginWithEmailOTPEventEmit\n\n,\n\n04\n\nLoginWithEmailOTPEventEmit\n\n,\n\n05\n\nRecencyCheckEventOnReceived\n\n,\n\n05\n\nRecencyCheckEventOnReceived\n\n,\n\n06\n\nRecencyCheckEventEmit\n\n,\n\n06\n\nRecencyCheckEventEmit\n\n,\n\n07\n\nDeviceVerificationEventEmit\n\n,\n\n07\n\nDeviceVerificationEventEmit\n\n,\n\n08\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n08\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n09\n\n09\n\n10\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n10\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n11\n\n11\n\n12\n\ntry\n\n{\n\n12\n\ntry\n\n{\n\n13\n\n// Initiate login flow\n\n13\n\n// Initiate login flow\n\n14\n\nconst\n\nhandle\n\n=\n\nmagic\n\n.\n\nauth\n\n.\n\nloginWithEmailOTP\n\n(\n\n{\n\nemail\n\n:\n\n\"hello@example.com\"\n\n,\n\nshowUI\n\n:\n\nfalse\n\n,\n\ndeviceCheckUI\n\n:\n\nfalse\n\n}\n\n)\n\n;\n\n14\n\nconst\n\nhandle\n\n=\n\nmagic\n\n.\n\nauth\n\n.\n\nloginWithEmailOTP\n\n(\n\n{\n\nemail\n\n:\n\n\"hello@example.com\"\n\n,\n\nshowUI\n\n:\n\nfalse\n\n,\n\ndeviceCheckUI\n\n:\n\nfalse\n\n}\n\n)\n\n;\n\n15\n\n15\n\n16\n\nhandle\n\n16\n\nhandle\n\n17\n\n.\n\non\n\n(\n\nLoginWithEmailOTPEventOnReceived\n\n.\n\nEmailOTPSent\n\n,\n\n(\n\n)\n\n=>\n\n{\n\n17\n\n.\n\non\n\n(\n\nLoginWithEmailOTPEventOnReceived\n\n.\n\nEmailOTPSent\n\n,\n\n(\n\n)\n\n=>\n\n{\n\n18\n\n// The email has been sent to the user\n\n18\n\n// The email has been sent to the user\n\n19\n\n19\n\n20\n\n// Prompt the user for the OTP\n\n20\n\n// Prompt the user for the OTP\n\n21\n\nconst\n\notp\n\n=\n\nwindow\n\n.\n\nprompt\n\n(\n\n'Enter Email OTP'\n\n)\n\n;\n\n21\n\nconst\n\notp\n\n=\n\nwindow\n\n.\n\nprompt\n\n(\n\n'Enter Email OTP'\n\n)\n\n;\n\n22\n\n22\n\n23\n\n// Send the OTP for verification\n\n23\n\n// Send the OTP for verification\n\n24\n\nhandle\n\n.\n\nemit\n\n(\n\nLoginWithEmailOTPEventEmit\n\n.\n\nVerifyEmailOtp\n\n,\n\notp\n\n)\n\n;\n\n24\n\nhandle\n\n.\n\nemit\n\n(\n\nLoginWithEmailOTPEventEmit\n\n.\n\nVerifyEmailOtp\n\n,\n\notp\n\n)\n\n;\n\n25\n\n}\n\n)\n\n25\n\n}\n\n)\n\n26\n\n.\n\non\n\n(\n\nLoginWithEmailOTPEventOnReceived\n\n.\n\nInvalidEmailOtp\n\n,\n\n(\n\n)\n\n=>\n\n{\n\n26\n\n.\n\non\n\n(\n\nLoginWithEmailOTPEventOnReceived\n\n.\n\nInvalidEmailOtp\n\n,\n\n(\n\n)\n\n=>\n\n{\n\n27\n\n// User entered invalid OTP\n\n27\n\n// User entered invalid OTP\n\n28\n\n28\n\n29\n\n// Have the user retry entering the OTP and emit via VerifyEmailOtp.\n\n29\n\n// Have the user retry entering the OTP and emit via VerifyEmailOtp.\n\n30\n\n// You can limit retries and emit Cancel to cancel login flow.\n\n30\n\n// You can limit retries and emit Cancel to cancel login flow.\n\n31\n\n31\n\n32\n\n// cancel login request\n\n32\n\n// cancel login request\n\n33\n\nhandle\n\n.\n\nemit\n\n(\n\nLoginWithEmailOTPEventEmit\n\n.\n\nCancel\n\n)\n\n;\n\n33\n\nhandle\n\n.\n\nemit\n\n(\n\nLoginWithEmailOTPEventEmit\n\n.\n\nCancel\n\n)\n\n;\n\n34\n\n}\n\n)\n\n34\n\n}\n\n)\n\n35\n\n.\n\non\n\n(\n\n'done'\n\n,\n\n(\n\nresult\n\n)\n\n=>\n\n{\n\n35\n\n.\n\non\n\n(\n\n'done'\n\n,\n\n(\n\nresult\n\n)\n\n=>\n\n{\n\n36\n\n// is called when the Promise resolves\n\n36\n\n// is called when the Promise resolves\n\n37\n\n37\n\n38\n\n// convey login success to user\n\n38\n\n// convey login success to user\n\n39\n\nalert\n\n(\n\n'Login complete!'\n\n)\n\n;\n\n39\n\nalert\n\n(\n\n'Login complete!'\n\n)\n\n;\n\n40\n\n40\n\n41\n\n// DID Token returned in result\n\n41\n\n// DID Token returned in result\n\n42\n\nconst\n\ndidToken\n\n=\n\nresult\n\n;\n\n42\n\nconst\n\ndidToken\n\n=\n\nresult\n\n;\n\n43\n\n}\n\n)\n\n43\n\n}\n\n)\n\n44\n\n.\n\non\n\n(\n\n'error'\n\n,\n\n(\n\nreason\n\n)\n\n=>\n\n{\n\n44\n\n.\n\non\n\n(\n\n'error'\n\n,\n\n(\n\nreason\n\n)\n\n=>\n\n{\n\n45\n\n// is called if the Promise rejects\n\n45\n\n// is called if the Promise rejects\n\n46\n\nconsole\n\n.\n\nerror\n\n(\n\nreason\n\n)\n\n;\n\n46\n\nconsole\n\n.\n\nerror\n\n(\n\nreason\n\n)\n\n;\n\n47\n\n}\n\n)\n\n47\n\n}\n\n)\n\n48\n\n.\n\non\n\n(\n\n'settled'\n\n,\n\n(\n\n)\n\n=>\n\n{\n\n48\n\n.\n\non\n\n(\n\n'settled'\n\n,\n\n(\n\n)\n\n=>\n\n{\n\n49\n\n// is called when the Promise either resolves or rejects\n\n49\n\n// is called when the Promise either resolves or rejects\n\n50\n\n}\n\n)\n\n50\n\n}\n\n)\n\n51\n\n51\n\n52\n\n//** MFA Verification Events (if enabled for app)\n\n52\n\n//** MFA Verification Events (if enabled for app)\n\n53\n\n53\n\n54\n\n.\n\non\n\n(\n\nLoginWithEmailOTPEventOnReceived\n\n.\n\nMfaSentHandle\n\n,\n\n(\n\n)\n\n=>\n\n{\n\n54\n\n.\n\non\n\n(\n\nLoginWithEmailOTPEventOnReceived\n\n.\n\nMfaSentHandle\n\n,\n\n(\n\n)\n\n=>\n\n{\n\n55\n\n// Prompt the user for the MFA TOTP\n\n55\n\n// Prompt the user for the MFA TOTP\n\n56\n\nconst\n\nmfa_totp\n\n=\n\nwindow\n\n.\n\nprompt\n\n(\n\n'Enter MFA TOTP'\n\n)\n\n;\n\n56\n\nconst\n\nmfa_totp\n\n=\n\nwindow\n\n.\n\nprompt\n\n(\n\n'Enter MFA TOTP'\n\n)\n\n;\n\n57\n\n57\n\n58\n\n// Send the MFA TOTP for verification\n\n58\n\n// Send the MFA TOTP for verification\n\n59\n\nhandle\n\n.\n\nemit\n\n(\n\nLoginWithEmailOTPEventEmit\n\n.\n\nVerifyMfaCode\n\n,\n\nmfa_totp\n\n)\n\n59\n\nhandle\n\n.\n\nemit\n\n(\n\nLoginWithEmailOTPEventEmit\n\n.\n\nVerifyMfaCode\n\n,\n\nmfa_totp\n\n)\n\n60\n\n}\n\n)\n\n60\n\n}\n\n)\n\n61\n\n.\n\non\n\n(\n\nLoginWithEmailOTPEventOnReceived\n\n.\n\nInvalidMfaOtp\n\n,\n\n(\n\n)\n\n=>\n\n{\n\n61\n\n.\n\non\n\n(\n\nLoginWithEmailOTPEventOnReceived\n\n.\n\nInvalidMfaOtp\n\n,\n\n(\n\n)\n\n=>\n\n{\n\n62\n\n// User entered invalid OTP\n\n62\n\n// User entered invalid OTP\n\n63\n\n63\n\n64\n\n// Have the user retry entering the MFA OTP and emit via VerifyMfaCode.\n\n64\n\n// Have the user retry entering the MFA OTP and emit via VerifyMfaCode.\n\n65\n\n// You can limit retries and emit Cancel to cancel login flow.\n\n65\n\n// You can limit retries and emit Cancel to cancel login flow.\n\n66\n\n66\n\n67\n\n// cancel login request\n\n67\n\n// cancel login request\n\n68\n\nhandle\n\n.\n\nemit\n\n(\n\nLoginWithEmailOTPEventEmit\n\n.\n\nCancel\n\n)\n\n;\n\n68\n\nhandle\n\n.\n\nemit\n\n(\n\nLoginWithEmailOTPEventEmit\n\n.\n\nCancel\n\n)\n\n;\n\n69\n\n}\n\n)\n\n69\n\n}\n\n)\n\n70\n\n70\n\n71\n\n//** Device Verification Events (if enabled for app)\n\n71\n\n//** Device Verification Events (if enabled for app)\n\n72\n\n72\n\n73\n\n.\n\non\n\n(\n\nDeviceVerificationEventOnReceived\n\n.\n\nDeviceNeedsApproval\n\n,\n\n(\n\n)\n\n=>\n\n{\n\n73\n\n.\n\non\n\n(\n\nDeviceVerificationEventOnReceived\n\n.\n\nDeviceNeedsApproval\n\n,\n\n(\n\n)\n\n=>\n\n{\n\n74\n\n// is called when device is not recognized and requires approval\n\n74\n\n// is called when device is not recognized and requires approval\n\n75\n\n}\n\n)\n\n75\n\n}\n\n)\n\n76\n\n.\n\non\n\n(\n\nDeviceVerificationEventOnReceived\n\n.\n\nDeviceVerificationEmailSent\n\n,\n\n(\n\n)\n\n=>\n\n{\n\n76\n\n.\n\non\n\n(\n\nDeviceVerificationEventOnReceived\n\n.\n\nDeviceVerificationEmailSent\n\n,\n\n(\n\n)\n\n=>\n\n{\n\n77\n\n// is called when the device verification email is sent\n\n77\n\n// is called when the device verification email is sent\n\n78\n\n}\n\n)\n\n78\n\n}\n\n)\n\n79\n\n.\n\non\n\n(\n\nDeviceVerificationEventOnReceived\n\n.\n\nDeviceApproved\n\n,\n\n(\n\n)\n\n=>\n\n{\n\n79\n\n.\n\non\n\n(\n\nDeviceVerificationEventOnReceived\n\n.\n\nDeviceApproved\n\n,\n\n(\n\n)\n\n=>\n\n{\n\n80\n\n// is called when the device has been approved\n\n80\n\n// is called when the device has been approved\n\n81\n\n}\n\n)\n\n81\n\n}\n\n)\n\n82\n\n.\n\non\n\n(\n\nDeviceVerificationEventOnReceived\n\n.\n\nDeviceVerificationLinkExpired\n\n,\n\n(\n\n)\n\n=>\n\n{\n\n82\n\n.\n\non\n\n(\n\nDeviceVerificationEventOnReceived\n\n.\n\nDeviceVerificationLinkExpired\n\n,\n\n(\n\n)\n\n=>\n\n{\n\n83\n\n// is called when the device verification link is expired\n\n83\n\n// is called when the device verification link is expired\n\n84\n\n84\n\n85\n\n// Retry device verification\n\n85\n\n// Retry device verification\n\n86\n\nhandle\n\n.\n\nemit\n\n(\n\nDeviceVerificationEventEmit\n\n.\n\nRetry\n\n)\n\n;\n\n86\n\nhandle\n\n.\n\nemit\n\n(\n\nDeviceVerificationEventEmit\n\n.\n\nRetry\n\n)\n\n;\n\n87\n\n}\n\n)\n\n;\n\n87\n\n}\n\n)\n\n;\n\n88\n\n88\n\n89\n\n// LoginWithEmailOTPEventEmit.Cancel can always be emitted to terminate the unresolved request.\n\n89\n\n// LoginWithEmailOTPEventEmit.Cancel can always be emitted to terminate the unresolved request.\n\n90\n\n90\n\n91\n\n}\n\ncatch\n\n(\n\nerr\n\n)\n\n{\n\n91\n\n}\n\ncatch\n\n(\n\nerr\n\n)\n\n{\n\n92\n\n// handle errors\n\n92\n\n// handle errors\n\n93\n\n}\n\n93\n\n}", "explanation": "**Event Handling Documentation Overview**\n\nEvent handling is a crucial aspect of the Magic Labs embedded wallet, allowing developers to register and listen for specific events during the login flow. This documentation outline explains the purpose and usage of event handling in the Magic SDK.\n\n**What is Event Handling?**\n\nEvent handling enables the Magic SDK to emit events at various stages of the login process. These events are triggered by the user's actions, such as sending an email with an OTP, submitting a valid or invalid OTP, or receiving an MFA TOTP. The events serve as callbacks, providing a way for the developer to interact with the login flow and respond to the user's actions.\n\n**Main Purpose of Event Handling**\n\nThe primary purpose of event handling is to:\n\n1. **Handle user interactions**: Process user actions, such as submitting an OTP, to continue or terminate the login flow.\n2. **Provide real-time feedback**: Update the user interface in real-time as the login flow progresses or encounters errors.\n3. **Integrate with custom logic**: Integrate custom logic or third-party services into the Magic SDK to enhance the login experience.\n4. **Monitor login success or failure**: Listen for events indicating the completion of the login process, either successfully or due to failure.\n\n**Key Event Types**\n\nThe Magic SDK emits a range of events, including:\n\n1. **LoginWithEmailOTPEventEmit**: Events related to the email OTP login flow, such as sending an email, submitting a valid or invalid OTP, or retreating OTP submission.\n2. **DeviceVerificationEventEmit**: Events related to device verification, including sending a verification email, approving a device, or retrying device verification.\n3. **RecencyCheckEventEmit**: Events related to device verification, including sending an email with a verification link.\n\n**Event Handling Example Code**\n\nThe provided code snippet demonstrates how to listen for and process events during the login flow. It showcases how to:\n\n1. Create an instance of the Magic SDK.\n2. Initiate the login flow with `showUI: false`.\n3. Listen for events related to the email OTP login flow.\n4. Handle events, such as submitting a valid or invalid OTP.\n5. Emit custom events to integrate with custom logic or third-party services.\n\nBy understanding event handling and integrating it into the Magic SDK, developers can create more seamless and user-friendly login experiences.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#getinfo#chunk-17", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nEmail OTP\n\nemail-otp-sent\n\nverify-email-otp\n\ninvalid-email-otp\n\ncancel\n\ncancel\n\nEmit to cancel the login request.\n\nDevice Verification\n\ndevice-needs-approval\n\ndevice-verification-email-sent\n\ndevice-approved\n\ndevice-verification-link-expired\n\ndevice-verification-link-expired\n\nDispatched when the email verification email has expired\n\ndevice-retry\n\ndevice-retry\n\nEmit to restart the device registration flow", "explanation": "In the '#Event Enums' documentation section of Magic Labs embedded wallet, the section lists event enums for two categories: 'Email OTP' and 'Device Verification'.\n\n**Email OTP:**\nThis section lists events related to email one-time passwords (OTPs). Events are notifications that can be triggered when a specific action occurs. The events in this section are:\n\n- `email-otp-sent`: An email with a one-time password has been sent to the user.\n- `verify-email-otp`: The user is verifying their email by entering the OTP.\n- `invalid-email-otp`: The user has entered an invalid or expired OTP.\n- `cancel`: The user has canceled the login request.\n\n**Device Verification:**\nThis section lists events related to device verification. As before, events are notifications that can be triggered when a specific action occurs. The events in this section are:\n\n- `device-needs-approval`: The device requires approval for login.\n- `device-verification-email-sent`: An email has been sent containing a verification link for the device.\n- `device-approved`: The device has been successfully verified.\n- `device-verification-link-expired`: The verification link has expired.\n- `device-retry`: The device verification process has been restarted.\n\nIn general, these event enums are used to facilitate app development, allowing developers to respond to specific actions and events as they occur in the wallet. By listening for these events, developers can provide a seamless user experience and automate workflows accordingly.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#getinfo#chunk-18", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nTo achieve a fully white-labeled experience, you will need to implement some custom error handling according to your UI needs. Here's a short example to illustrate how errors can be caught and identified by their code:\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n,\n\nRPCError\n\n,\n\nRPCErrorCode\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n,\n\nRPCError\n\n,\n\nRPCErrorCode\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\n02\n\n03\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n03\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n04\n\n04\n\n05\n\ntry\n\n{\n\n05\n\ntry\n\n{\n\n06\n\nawait\n\nmagic\n\n.\n\nauth\n\n.\n\nloginWithEmailOTP\n\n(\n\n{\n\nemail\n\n:\n\n'hello@example.com'\n\n}\n\n)\n\n;\n\n06\n\nawait\n\nmagic\n\n.\n\nauth\n\n.\n\nloginWithEmailOTP\n\n(\n\n{\n\nemail\n\n:\n\n'hello@example.com'\n\n}\n\n)\n\n;\n\n07\n\n}\n\ncatch\n\n(\n\nerr\n\n)\n\n{\n\n07\n\n}\n\ncatch\n\n(\n\nerr\n\n)\n\n{\n\n08\n\nif\n\n(\n\nerr\n\ninstanceof\n\nRPCError\n\n)\n\n{\n\n08\n\nif\n\n(\n\nerr\n\ninstanceof\n\nRPCError\n\n)\n\n{\n\n09\n\nswitch\n\n(\n\nerr\n\n.\n\ncode\n\n)\n\n{\n\n09\n\nswitch\n\n(\n\nerr\n\n.\n\ncode\n\n)\n\n{\n\n10\n\ncase\n\nRPCErrorCode\n\n.\n\nMagicLinkExpired\n\n10\n\ncase\n\nRPCErrorCode\n\n.\n\nMagicLinkExpired\n\n11\n\ncase\n\nRPCErrorCode\n\n.\n\nUserAlreadyLoggedIn\n\n:\n\n11\n\ncase\n\nRPCErrorCode\n\n.\n\nUserAlreadyLoggedIn\n\n:\n\n12\n\n// Handle errors accordingly :)\n\n12\n\n// Handle errors accordingly :)\n\n13\n\nbreak\n\n;\n\n13\n\nbreak\n\n;\n\n14\n\n}\n\n14\n\n}\n\n15\n\n}\n\n15\n\n}\n\n16\n\n}\n\n16\n\n}", "explanation": "**Error Handling Overview**\n\nThe provided documentation section is about implementing custom error handling in a Magic Labs embedded wallet application. The main purpose of this section is to guide developers on how to catch and identify specific errors based on their code.\n\n**Key Components**\n\n1. **Importing Necessary Modules**: The documentation begins by importing the `Magic`, `RPCError`, and `RPCErrorCode` modules from the `magic-sdk`.\n2. **Initializing the Magic Instance**: A `Magic` instance is created with a publishable API key.\n3. **Error Catching**: A try-catch block is used to catch any errors that occur during the execution of the code.\n4. **Identifying RPC Errors**: Specifically, RPC errors are caught and checked for their code using the `instanceof` operator and a switch statement.\n5. **Handling Errors**: Based on the error code, the documentation suggests handling the errors accordingly, providing a clear example for error handling.\n\n**Main Purpose**\n\nThe main purpose of this documentation section is to help developers implement custom error handling to achieve a fully white-labeled experience in their Magic Labs embedded wallet application. By catching and identifying specific errors, developers can provide a better user experience and handle errors in a way that aligns with their UI needs.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#getinfo#chunk-19", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nloginWithSMS\n\nAuthenticate a user passwordlessly using a one-time code sent to the specified phone number.\n\nList of Currently Blocked Country Codes\n\nList of Currently Blocked Country Codes\n\nOnly available with Dedicated Wallet.\n\n#\n\n\u2022 phoneNumber (String): E.164 formatted phone number\n\n\u2022 lifespan? (Number): Set the lifespan of the resolved Decentralize ID token. Defaults to 900s (15 mins)\n\nphoneNumber\n\nlifespan?", "explanation": "The `loginWithSMS` section is a method used for passwordless user authentication. Its main purpose is to verify a user by sending a one-time code to their phone number and allowing them to log in using this code, without needing to input a password.\n\nHere's a breakdown of its key points:\n\n1. **Required Argument: `phoneNumber`**: This is the user's phone number in E.164 format, which is a standardized way of formatting phone numbers (e.g., +1234567890).\n2. **Optional Argument: `lifespan`**: This sets the time limit (in seconds) for the Decentralized ID token generated during the authentication process. If not specified, the default value is 900 seconds (15 minutes).", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#getinfo#chunk-20", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 PromiEvent<string | null>: The promise resolves upon authentication request success and rejects with a specific error code if the request fails. The resolved value is a Decentralized ID token with a default 15-minute lifespan.\n\nPromiEvent<string | null>", "explanation": "The \"#Returns\" section of the documentation is related to the `getInfo` method, specifically when it comes to authentication requests and handling of promises in the Magic Labs embedded wallet API.\n\n**Main Purpose:**\n\nThe main purpose of this section is to inform developers what they can expect the `getInfo` method to return when an authentication request is processed.\n\n**What it Returns:**\n\nWhen a valid authentication request is successfully processed, the promise resolves with a Decentralized ID (Decentralized) token as a string, which is then assigned a default lifespan of 15 minutes. \n\nIf the request fails, the promise rejects with a specific error code, which is not detailed in this specific documentation. However, it implies that the error code serves a purpose in helping developers diagnose and resolve issues with their authentication requests.\n\n**Key Takeaway:**\n\nIn summary, this documentation section emphasizes the importance of handling promises when working with the `getInfo` method, specifically when it comes to expected outputs and errors that may arise during authentication requests in the embedded wallet API provided by Magic Labs.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#getinfo#chunk-21", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\n02\n\n03\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n03\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n04\n\n04\n\n05\n\n// log in a user by their phone number\n\n05\n\n// log in a user by their phone number\n\n06\n\ntry\n\n{\n\n06\n\ntry\n\n{\n\n07\n\nawait\n\nmagic\n\n.\n\nauth\n\n.\n\nloginWithSMS\n\n(\n\n{\n\n'+14151231234'\n\n}\n\n)\n\n;\n\n07\n\nawait\n\nmagic\n\n.\n\nauth\n\n.\n\nloginWithSMS\n\n(\n\n{\n\n'+14151231234'\n\n}\n\n)\n\n;\n\n08\n\n}\n\ncatch\n\n{\n\n08\n\n}\n\ncatch\n\n{\n\n09\n\n// Handle errors if required!\n\n09\n\n// Handle errors if required!\n\n10\n\n}\n\n10\n\n}", "explanation": "**Documentation Section: #Example**\n\nThis section of the Magic Labs embedded wallet documentation provides a code example on how to use the Magic library to log in a user by their phone number. The example is written in JavaScript and uses the Magic SDK.\n\n**Main Purpose:**\n\nThe main purpose of this example is to illustrate how to use the Magic library to authenticate a user by sending an SMS verification code to their phone number. It demonstrates the basic usage of the `loginWithSMS` method from the `auth` module of the Magic library.\n\n**Key Components:**\n\n1. Importing the Magic library\n2. Creating an instance of the Magic library with a publishable API key\n3. Logging in a user by their phone number using the `loginWithSMS` method\n\n**Step-by-Step Breakdown:**\n\n1. Import the Magic library\n2. Create an instance of the Magic library with a publishable API key\n3. Attempt to log in a user by their phone number using the `loginWithSMS` method\n4. Catch any errors that may occur during the login process\n5. Handle errors if required (e.g., retry, display error message to user)\n\n**Example Use Case:**\n\nThis example can be used as a starting point for integrating Magic Labs embedded wallet into a web application, allowing users to log in by sending an SMS verification code to their phone number.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#getinfo#chunk-22", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nRelevant Error Codes\n\nRelevant Error Codes\n\nTo achieve a fully white-labeled experience, you will need to implement some custom error handling according to your UI needs. Here's a short example to illustrate how errors can be caught and identified by their code:\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n,\n\nRPCError\n\n,\n\nRPCErrorCode\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n,\n\nRPCError\n\n,\n\nRPCErrorCode\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\n02\n\n03\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n03\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n04\n\n04\n\n05\n\ntry\n\n{\n\n05\n\ntry\n\n{\n\n06\n\nawait\n\nmagic\n\n.\n\nauth\n\n.\n\nloginWithSMS\n\n(\n\n{\n\nphoneNumber\n\n:\n\n\"+14151231234\"\n\n}\n\n)\n\n;\n\n06\n\nawait\n\nmagic\n\n.\n\nauth\n\n.\n\nloginWithSMS\n\n(\n\n{\n\nphoneNumber\n\n:\n\n\"+14151231234\"\n\n}\n\n)\n\n;\n\n07\n\n}\n\ncatch\n\n(\n\nerr\n\n)\n\n{\n\n07\n\n}\n\ncatch\n\n(\n\nerr\n\n)\n\n{\n\n08\n\nif\n\n(\n\nerr\n\ninstanceof\n\nRPCError\n\n)\n\n{\n\n08\n\nif\n\n(\n\nerr\n\ninstanceof\n\nRPCError\n\n)\n\n{\n\n09\n\nswitch\n\n(\n\nerr\n\n.\n\ncode\n\n)\n\n{\n\n09\n\nswitch\n\n(\n\nerr\n\n.\n\ncode\n\n)\n\n{\n\n10\n\ncase\n\nRPCErrorCode\n\n.\n\nAccessDeniedToUser\n\n:\n\n10\n\ncase\n\nRPCErrorCode\n\n.\n\nAccessDeniedToUser\n\n:\n\n11\n\ncase\n\nRPCErrorCode\n\n.\n\nMagicLinkRateLimited\n\n:\n\n11\n\ncase\n\nRPCErrorCode\n\n.\n\nMagicLinkRateLimited\n\n:\n\n12\n\ncase\n\nRPCErrorCode\n\n.\n\nUserAlreadyLoggedIn\n\n:\n\n12\n\ncase\n\nRPCErrorCode\n\n.\n\nUserAlreadyLoggedIn\n\n:\n\n13\n\n// Handle errors accordingly :)\n\n13\n\n// Handle errors accordingly :)\n\n14\n\nbreak\n\n;\n\n14\n\nbreak\n\n;\n\n15\n\n}\n\n15\n\n}\n\n16\n\n}\n\n16\n\n}\n\n17\n\n}\n\n17\n\n}", "explanation": "**Error Handling Documentation Overview**\n\nThis documentation section, titled '#Error Handling', explains how to implement custom error handling in Magic Labs' embedded wallet using the Magic SDK for web.\n\n**Main Purpose**\n\nThe main purpose of this section is to assist developers in catching and identifying specific error codes that may occur during interactions with the Magic SDK. By implementing custom error handling, developers can enhance their application's user experience by providing more targeted error messages and handling errors according to their UI needs.\n\n**Relevant Points**\n\nHere are the key points to take away from this documentation section:\n\n1.  **Catching Errors**: Errors are caught using a `try`-`catch` block, which allows developers to handle potential errors that may occur during API calls.\n2.  **Error Type Identification**: Errors are identified by their type using the `instanceof` operator. In this case, the `RPCError` type is being checked to determine if an error occurred that belongs to the Magic SDK.\n3.  **Error Code Handling**: Once an error is identified as an `RPCError`, the error code is accessed and compared to specific error codes using a `switch` statement. This allows developers to handle different error scenarios according to their UI needs.\n\nBy following the guidance in this documentation section, developers can create a more robust and user-friendly experience for their application's users by providing targeted error messages and handling errors appropriately.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#getinfo#chunk-23", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nloginWithCredential\n\nAuthenticate a user via a \"Magic Credential,\" a special, one-time-use DID Token created by the user to hydrate their authentication between page reloads. For example: when executing the loginWithMagicLink flow with a redirectURI specified, you can invoke this method to complete the authentication \"callback,\" similar in principal to OAuth 2.0 flows.\n\nloginWithMagicLink\n\nloginWithMagicLink\n\nredirectURI\n\nIf given no arguments, this method will parse the credential token automatically from window.location.search.\n\nwindow.location.search\n\nOnly available with Dedicated Wallet.\n\n#\n\n\u2022 credentialOrQueryString (String): A credential token or a valid query string (prefixed with ? or #). By default, this method will look for the a credential token on the magic_credential key of window.location.search\n\ncredentialOrQueryString\n\n?\n\n#\n\nmagic_credential\n\nwindow.location.search", "explanation": "**Explanation of `#loginWithCredential - #Arguments`**\n\nThe `loginWithCredential` function is a method used to authenticate a user through a \"Magic Credential,\" a one-time-use Digital Identity (DID) Token. This method is primarily used to complete the authentication process initiated by the `loginWithMagicLink` flow, similar to OAuth 2.0 callback flows.\n\n**Main Purpose**\n\nThe main purpose of `loginWithCredential` is to:\n\n1. Authenticate a user using a Magic Credential, eliminating the need for manual entry of login credentials.\n2. Complete the authentication flow started by `loginWithMagicLink`, allowing users to access protected resources.\n\n**Key Functionality**\n\nThe `loginWithCredential` function takes one argument:\n\n* `credentialOrQueryString`: A string representing either a Magic Credential token or a valid query string (prefixed with `?` or `#`).\n\n**Default Behavior**\n\nIf no arguments are provided, the method will automatically parse the credential token from `window.location.search`. This is specifically designed for usage with the Dedicated Wallet, where the Magic Credential token is appended as a query parameter (`magic_credential`).\n\n**Example Usage**\n\nWhen using the `loginWithMagicLink` flow, you can invoke `loginWithCredential` to complete the authentication callback process, similar to OAuth 2.0 flows. The function will handle the automatic parsing of the Magic Credential token from `window.location.search` if not provided as an argument.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#getinfo#chunk-24", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 PromiEvent<string | null>: The promise resolves upon authentication request success and rejects with a specific error code if the request fails. The resolved value is a Decentralized ID token with a default 15-minute lifespan.\n\nPromiEvent<string | null>", "explanation": "Let's break down the '#Returns' section.\n\n**Returns: A PromiEvent<string | null>**\n\nThe 'Returns' section describes the outcome of the `getInfo` method, which is used to obtain authentication information.\n\n**What is returned:**\n\n* A **PromiEvent**: This is a JavaScript promise event, which indicates that the operation is not blocking and will return the result asynchronously.\n* The result is a **string or null**: If the authentication request is successful, the promise resolves and returns a **string**, specifically a Decentralized ID (DID) token. This token is a unique identifier that represents the user's authentication.\n* The **null** value indicates a failure to authenticate, and the promise would reject with a specific error code.\n\n**Main purpose:**\n\nThe main purpose of the `getInfo` method is to obtain authentication information about the current user. When called, this method triggers an authentication request, and upon success, it returns a Decentralized ID token as a string. This token can then be used to identify the user on the Magic Labs embedded wallet platform.\n\nIn summary, the '#Returns' section explains what happens after calling the `getInfo` method and what information is returned upon successful authentication.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#getinfo#chunk-25", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nFrom your login page:\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\n02\n\n03\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n03\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n04\n\n04\n\n05\n\ntry\n\n{\n\n05\n\ntry\n\n{\n\n06\n\nawait\n\nmagic\n\n.\n\nauth\n\n.\n\nloginWithMagicLink\n\n(\n\n{\n\n06\n\nawait\n\nmagic\n\n.\n\nauth\n\n.\n\nloginWithMagicLink\n\n(\n\n{\n\n07\n\nemail\n\n:\n\n'hello@example.com'\n\n,\n\n07\n\nemail\n\n:\n\n'hello@example.com'\n\n,\n\n08\n\nredirectURI\n\n:\n\n'https://yourdomain.com/your/magic/link/callback'\n\n,\n\n08\n\nredirectURI\n\n:\n\n'https://yourdomain.com/your/magic/link/callback'\n\n,\n\n09\n\n}\n\n)\n\n;\n\n09\n\n}\n\n)\n\n;\n\n10\n\n10\n\n11\n\n// When the user clicks their magic link, they will be logged-in here\n\n11\n\n// When the user clicks their magic link, they will be logged-in here\n\n12\n\n// and in the \"callback\" context.\n\n12\n\n// and in the \"callback\" context.\n\n13\n\n}\n\ncatch\n\n{\n\n13\n\n}\n\ncatch\n\n{\n\n14\n\n// Handle errors if required!\n\n14\n\n// Handle errors if required!\n\n15\n\n}\n\n15\n\n}\n\nFrom your authentication callback page:\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\n02\n\n03\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n03\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n04\n\n04\n\n05\n\ntry\n\n{\n\n05\n\ntry\n\n{\n\n06\n\nawait\n\nmagic\n\n.\n\nauth\n\n.\n\nloginWithCredential\n\n(\n\n)\n\n;\n\n06\n\nawait\n\nmagic\n\n.\n\nauth\n\n.\n\nloginWithCredential\n\n(\n\n)\n\n;\n\n07\n\n}\n\ncatch\n\n{\n\n07\n\n}\n\ncatch\n\n{\n\n08\n\n// Handle errors if required!\n\n08\n\n// Handle errors if required!\n\n09\n\n}\n\n09\n\n}\n\n10\n\n10\n\n11\n\n// You can also provide the credential yourself\n\n11\n\n// You can also provide the credential yourself\n\n12\n\ntry\n\n{\n\n12\n\ntry\n\n{\n\n13\n\nawait\n\nmagic\n\n.\n\nauth\n\n.\n\nloginWithCredential\n\n(\n\n'iamacredentialtoken'\n\n)\n\n;\n\n13\n\nawait\n\nmagic\n\n.\n\nauth\n\n.\n\nloginWithCredential\n\n(\n\n'iamacredentialtoken'\n\n)\n\n;\n\n14\n\n}\n\ncatch\n\n{\n\n14\n\n}\n\ncatch\n\n{\n\n15\n\n// Handle errors if required!\n\n15\n\n// Handle errors if required!\n\n16\n\n}\n\n16\n\n}\n\n17\n\n17\n\n18\n\n// You can also provide the credential as a query string\n\n18\n\n// You can also provide the credential as a query string\n\n19\n\ntry\n\n{\n\n19\n\ntry\n\n{\n\n20\n\nawait\n\nmagic\n\n.\n\nauth\n\n.\n\nloginWithCredential\n\n(\n\nwindow\n\n.\n\nlocation\n\n.\n\nsearch\n\n)\n\n;\n\n20\n\nawait\n\nmagic\n\n.\n\nauth\n\n.\n\nloginWithCredential\n\n(\n\nwindow\n\n.\n\nlocation\n\n.\n\nsearch\n\n)\n\n;\n\n21\n\n}\n\ncatch\n\n{\n\n21\n\n}\n\ncatch\n\n{\n\n22\n\n// Handle errors if required!\n\n22\n\n// Handle errors if required!\n\n23\n\n}\n\n23\n\n}", "explanation": "**#Example Section: Magic Labs Embedded Wallet Documentation**\n\nThe given documentation section is titled \"#Example\" and it demonstrates how to use the Magic Labs embedded wallet in a web application. It provides two examples:\n\n1. **Login with Magic Link**: This example shows how to use the Magic Labs embedded wallet to log in a user using a Magic Link. Magic Link is a phishing-resistant, passwordless authentication solution that can be sent to a user's email address.\n2. **Login with Credential**: This example demonstrates how to use the Magic Labs embedded wallet to log in a user using a stored credential token, or retrieve it from a query string.\n\n**Main Purpose:**\n\nThe main purpose of this documentation section is to provide working examples of how to integrate the Magic Labs embedded wallet into a web application. By following these examples, developers can use the Magic Labs embedded wallet to securely authenticate users with a Magic Link or a stored credential token.\n\n**Key Takeaways:**\n\n* To use the Magic Labs embedded wallet, you need to create a new instance of the Magic class, passing in your publishable API key.\n* The `loginWithMagicLink` method is used to log in a user using a Magic Link. It takes an object with `email` and `redirectURI` properties.\n* The `loginWithCredential` method is used to log in a user using a stored credential token, or retrieve it from a query string.\n* All examples include error handling and are written in JavaScript, using the Magic Labs embedded wallet SDK.\n\nOverall, this documentation section provides valuable examples of how to integrate the Magic Labs embedded wallet into a web application, making it easier for developers to securely authenticate users.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#getinfo#chunk-26", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nupdateEmailWithUI\n\nInitiates the update email flow that allows a user to change their email address.\n\nOnly available with Dedicated Wallet.\n\n#\n\n\u2022 email (String): The new email to update to\n\n\u2022 showUI? (Boolean): If true, shows an out-of-the-box pending UI which includes instructions on which step of the confirmation process the user is on. Dismisses automatically when the process is complete\n\nemail (String): The new email to update to\n\nemail\n\nshowUI? (Boolean): If true, shows an out-of-the-box pending UI which includes instructions on which step of the confirmation process the user is on. Dismisses automatically when the process is complete\n\nshowUI?\n\ntrue", "explanation": "**updateEmailWithUI Method Overview**\n\nThe `updateEmailWithUI` method is used to initiate the email update flow for a user in a Magic Labs Dedicated Wallet. This method is designed to help users change their email address.\n\n**Key Functionality**\n\nThis method takes two main arguments:\n\n1. **email (String)**: The new email address to update to.\n2. **showUI? (Boolean)**: A flag indicating whether to display a built-in UI component that guides the user through the confirmation process.\n\n**Purpose**\n\nThe primary purpose of `updateEmailWithUI` is to provide a seamless and user-friendly experience for Dedicated Wallet users who need to update their email address. By showing a pending UI with instructions, the method helps users navigate the confirmation process, making it more convenient and intuitive.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#getinfo#chunk-27", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 PromiEvent<boolean>: The promise resolves with a true boolean value if update email is successful and rejects with a specific error code if the request fails\n\nPromiEvent<boolean>: The promise resolves with a true boolean value if update email is successful and rejects with a specific error code if the request fails\n\nPromiEvent<boolean>", "explanation": "The section titled '#Returns' is about providing information on the expected outcome of the 'getInfo' API request in the Magic Labs embedded wallet documentation.\n\nIts main purpose is to inform the developer about the response format and behavior of the 'getInfo' request, which is likely used to retrieve the user's authorization status.\n\nIn this case, the 'getInfo' request returns a PromiEvent with a boolean value. If the update email request is successful, the promise resolves with a true boolean value (true). However, if the request fails, the promise is rejected with a specific error code. \n\nThis information allows developers to handle the response correctly in their code, either by accepting the successful true value or by catching and handling the error code when the request fails.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#getinfo#chunk-28", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\n02\n\n03\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'API_KEY'\n\n)\n\n;\n\n03\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'API_KEY'\n\n)\n\n;\n\n04\n\n04\n\n05\n\n// Initiates the flow to update a user's current email to a new one.\n\n05\n\n// Initiates the flow to update a user's current email to a new one.\n\n06\n\ntry\n\n{\n\n06\n\ntry\n\n{\n\n07\n\n...\n\n07\n\n...\n\n08\n\n/* Assuming user is logged in */\n\n08\n\n/* Assuming user is logged in */\n\n09\n\nawait\n\nmagic\n\n.\n\nauth\n\n.\n\nupdateEmailWithUI\n\n(\n\n{\n\nemail\n\n:\n\n'new_user_email@example.com'\n\n}\n\n)\n\n;\n\n09\n\nawait\n\nmagic\n\n.\n\nauth\n\n.\n\nupdateEmailWithUI\n\n(\n\n{\n\nemail\n\n:\n\n'new_user_email@example.com'\n\n}\n\n)\n\n;\n\n10\n\n}\n\ncatch\n\n{\n\n10\n\n}\n\ncatch\n\n{\n\n11\n\n// Handle errors if required!\n\n11\n\n// Handle errors if required!\n\n12\n\n}\n\n12\n\n}\n\n13\n\n13\n\n14\n\n/**\n\n14\n\n/**\n\n15\n\n* Initiates the flow to update a user's current email to a new one,\n\n15\n\n* Initiates the flow to update a user's current email to a new one,\n\n16\n\n* without showing an out-of-the box UI.\n\n16\n\n* without showing an out-of-the box UI.\n\n17\n\n*/\n\n17\n\n*/\n\n18\n\ntry\n\n{\n\n18\n\ntry\n\n{\n\n19\n\n/* Assuming user is logged in */\n\n19\n\n/* Assuming user is logged in */\n\n20\n\nawait\n\nmagic\n\n.\n\nauth\n\n.\n\nupdateEmailWithUI\n\n(\n\n{\n\nemail\n\n:\n\n'new_user_email@example.com'\n\n,\n\nshowUI\n\n:\n\nfalse\n\n}\n\n)\n\n;\n\n20\n\nawait\n\nmagic\n\n.\n\nauth\n\n.\n\nupdateEmailWithUI\n\n(\n\n{\n\nemail\n\n:\n\n'new_user_email@example.com'\n\n,\n\nshowUI\n\n:\n\nfalse\n\n}\n\n)\n\n;\n\n21\n\n}\n\ncatch\n\n{\n\n21\n\n}\n\ncatch\n\n{\n\n22\n\n// Handle errors if required!\n\n22\n\n// Handle errors if required!\n\n23\n\n}\n\n23\n\n}", "explanation": "**Section Explanation:**\n\nThe provided documentation section is titled '#Example' and is related to the 'getInfo' endpoint of the Magic Labs embedded wallet SDK. This section demonstrates how to initiate the flow to update a user's current email to a new one using the Magic Labs SDK.\n\n**Code Breakdown:**\n\nThe code is written in JavaScript and utilizes the Magic Labs SDK to update a user's email address. It includes two examples:\n\n1.  **Example 1: Update Email with Out-of-the-Box UI**\n\n    *   Creates a new instance of the Magic Labs SDK with an API key.\n    *   Assumes the user is already logged in.\n    *   Calls the `updateEmailWithUI` method to initiate the email update flow, showing an out-of-the-box UI to the user.\n    *   Catches any errors that may occur and provides instructions on how to handle them.\n2.  **Example 2: Update Email without Out-of-the-Box UI**\n\n    *   Also creates a new instance of the Magic Labs SDK with an API key.\n    *   Assumes the user is already logged in.\n    *   Calls the `updateEmailWithUI` method with the `showUI` parameter set to `false`, indicating that the SDK should not display an out-of-the-box UI to the user.\n    *   Catches any errors that may occur and provides instructions on how to handle them.\n\n**Main Purpose:**\n\nThe main purpose of this documentation section is to provide a code example of how to update a user's email address using the Magic Labs SDK. It demonstrates how to handle errors and provides a basic structure for creating a custom email update flow without using the out-of-the-box UI.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#getinfo#chunk-29", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nA white-label update email flow is available when passing showUI: false to this method. The white-label flow is only supported in Magic SDK v22.0.0 and above. Here's a short example to illustrate listening for and emitting events during the flow:\n\nshowUI: false\n\nCopy\n\n01\n\nimport\n\n{\n\n01\n\nimport\n\n{\n\n02\n\nMagic\n\n,\n\n02\n\nMagic\n\n,\n\n03\n\nRecencyCheckEventOnReceived\n\n,\n\n03\n\nRecencyCheckEventOnReceived\n\n,\n\n04\n\nRecencyCheckEventEmit\n\n,\n\n04\n\nRecencyCheckEventEmit\n\n,\n\n05\n\nUpdateEmailEventOnReceived\n\n,\n\n05\n\nUpdateEmailEventOnReceived\n\n,\n\n06\n\nUpdateEmailEventEmit\n\n,\n\n06\n\nUpdateEmailEventEmit\n\n,\n\n07\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n07\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n08\n\n08\n\n09\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'API_KEY'\n\n)\n\n;\n\n09\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'API_KEY'\n\n)\n\n;\n\n10\n\n10\n\n11\n\ntry\n\n{\n\n11\n\ntry\n\n{\n\n12\n\n/* Initiates update email flow to update a user's current email to a new one */\n\n12\n\n/* Initiates update email flow to update a user's current email to a new one */\n\n13\n\nconst\n\nhandle\n\n=\n\nawait\n\nmagic\n\n.\n\nauth\n\n.\n\nupdateEmailWithUI\n\n(\n\n{\n\n13\n\nconst\n\nhandle\n\n=\n\nawait\n\nmagic\n\n.\n\nauth\n\n.\n\nupdateEmailWithUI\n\n(\n\n{\n\n14\n\n\u2060    email\n\n:\n\n'new_user_email@example.com'\n\n,\n\n14\n\n\u2060 email\n\n:\n\n'new_user_email@example.com'\n\n,\n\n15\n\nshowUI\n\n:\n\nfalse\n\n,\n\n15\n\nshowUI\n\n:\n\nfalse\n\n,\n\n16\n\n}\n\n)\n\n;\n\n16\n\n}\n\n)\n\n;\n\n17\n\n17\n\n18\n\n/*\n\n18\n\n/*\n\n19\n\nRecency Check Events & Emit\n\n19\n\nRecency Check Events & Emit\n\n20\n\n*/\n\n20\n\n*/\n\n21\n\n21\n\n22\n\nlet\n\nrecencyCheckRetries\n\n=\n\n5\n\n;\n\n22\n\nlet\n\nrecencyCheckRetries\n\n=\n\n5\n\n;\n\n23\n\n23\n\n24\n\nhandle\n\n24\n\nhandle\n\n25\n\n.\n\non\n\n(\n\nRecencyCheckEventOnReceived\n\n.\n\nEmailSent\n\n,\n\n(\n\n)\n\n=>\n\n{\n\n25\n\n.\n\non\n\n(\n\nRecencyCheckEventOnReceived\n\n.\n\nEmailSent\n\n,\n\n(\n\n)\n\n=>\n\n{\n\n26\n\n\u2060\n\n// Email OTP has been sent to the user's primary email\n\n26\n\n\u2060\n\n// Email OTP has been sent to the user's primary email\n\n27\n\n27\n\n28\n\n// Prompt the user for the OTP\n\n28\n\n// Prompt the user for the OTP\n\n29\n\nconst\n\notp\n\n=\n\nwindow\n\n.\n\nprompt\n\n(\n\n'Primary Email OTP'\n\n)\n\n;\n\n29\n\nconst\n\notp\n\n=\n\nwindow\n\n.\n\nprompt\n\n(\n\n'Primary Email OTP'\n\n)\n\n;\n\n30\n\n30\n\n31\n\n// Send the OTP for verification\n\n31\n\n// Send the OTP for verification\n\n32\n\nhandle\n\n.\n\nemit\n\n(\n\nRecencyCheckEventEmit\n\n.\n\nVerifyEmailOtp\n\n,\n\notp\n\n)\n\n;\n\n32\n\nhandle\n\n.\n\nemit\n\n(\n\nRecencyCheckEventEmit\n\n.\n\nVerifyEmailOtp\n\n,\n\notp\n\n)\n\n;\n\n33\n\n}\n\n)\n\n33\n\n}\n\n)\n\n34\n\n.\n\non\n\n(\n\nRecencyCheckEventOnReceived\n\n.\n\nPrimaryAuthFactorVerified\n\n,\n\n(\n\n)\n\n=>\n\n{\n\n34\n\n.\n\non\n\n(\n\nRecencyCheckEventOnReceived\n\n.\n\nPrimaryAuthFactorVerified\n\n,\n\n(\n\n)\n\n=>\n\n{\n\n35\n\nwindow\n\n.\n\nalert\n\n(\n\n'Primary Factor has been verified'\n\n)\n\n;\n\n35\n\nwindow\n\n.\n\nalert\n\n(\n\n'Primary Factor has been verified'\n\n)\n\n;\n\n36\n\n}\n\n)\n\n36\n\n}\n\n)\n\n37\n\n.\n\non\n\n(\n\nRecencyCheckEventOnReceived\n\n.\n\nEmailNotDeliverable\n\n,\n\n(\n\n)\n\n=>\n\n{\n\n37\n\n.\n\non\n\n(\n\nRecencyCheckEventOnReceived\n\n.\n\nEmailNotDeliverable\n\n,\n\n(\n\n)\n\n=>\n\n{\n\n38\n\n// Email OTP was undeliverable to user's primary email\n\n38\n\n// Email OTP was undeliverable to user's primary email\n\n39\n\n39\n\n40\n\n// Cancel update email request\n\n40\n\n// Cancel update email request\n\n41\n\nhandle\n\n.\n\nemit\n\n(\n\nRecencyCheckEventEmit\n\n.\n\nCancel\n\n)\n\n;\n\n41\n\nhandle\n\n.\n\nemit\n\n(\n\nRecencyCheckEventEmit\n\n.\n\nCancel\n\n)\n\n;\n\n42\n\nwindow\n\n.\n\nalert\n\n(\n\n'Email Not Deliverable'\n\n)\n\n;\n\n42\n\nwindow\n\n.\n\nalert\n\n(\n\n'Email Not Deliverable'\n\n)\n\n;\n\n43\n\n}\n\n)\n\n43\n\n}\n\n)\n\n44\n\n.\n\non\n\n(\n\nRecencyCheckEventOnReceived\n\n.\n\nEmailExpired\n\n,\n\n(\n\n)\n\n=>\n\n{\n\n44\n\n.\n\non\n\n(\n\nRecencyCheckEventOnReceived\n\n.\n\nEmailExpired\n\n,\n\n(\n\n)\n\n=>\n\n{\n\n45\n\n// User entered expired OTP\n\n45\n\n// User entered expired OTP\n\n46\n\n46\n\n47\n\nhandle\n\n.\n\nemit\n\n(\n\nRecencyCheckEventEmit\n\n.\n\nCancel\n\n)\n\n;\n\n47\n\nhandle\n\n.\n\nemit\n\n(\n\nRecencyCheckEventEmit\n\n.\n\nCancel\n\n)\n\n;\n\n48\n\nwindow\n\n.\n\nalert\n\n(\n\n'Expired OTP'\n\n)\n\n;\n\n48\n\nwindow\n\n.\n\nalert\n\n(\n\n'Expired OTP'\n\n)\n\n;\n\n49\n\n}\n\n)\n\n49\n\n}\n\n)\n\n50\n\n.\n\non\n\n(\n\nRecencyCheckEventOnReceived\n\n.\n\nInvalidEmailOtp\n\n,\n\n(\n\n)\n\n=>\n\n{\n\n50\n\n.\n\non\n\n(\n\nRecencyCheckEventOnReceived\n\n.\n\nInvalidEmailOtp\n\n,\n\n(\n\n)\n\n=>\n\n{\n\n51\n\n// User entered invalid OTP; you may limit retries and cancel the request\n\n51\n\n// User entered invalid OTP; you may limit retries and cancel the request\n\n52\n\n52\n\n53\n\nif\n\n(\n\n!\n\nrecencyCheckRetries\n\n)\n\n{\n\n53\n\nif\n\n(\n\n!\n\nrecencyCheckRetries\n\n)\n\n{\n\n54\n\n// Cancel update email request\n\n54\n\n// Cancel update email request\n\n55\n\nalert\n\n(\n\n'Too many attempts'\n\n)\n\n;\n\n55\n\nalert\n\n(\n\n'Too many attempts'\n\n)\n\n;\n\n56\n\nhandle\n\n.\n\nemit\n\n(\n\nRecencyCheckEventEmit\n\n.\n\nCancel\n\n)\n\n;\n\n56\n\nhandle\n\n.\n\nemit\n\n(\n\nRecencyCheckEventEmit\n\n.\n\nCancel\n\n)\n\n;\n\n57\n\n}\n\nelse\n\n{\n\n57\n\n}\n\nelse\n\n{\n\n58\n\nconst\n\notp\n\n=\n\nwindow\n\n.\n\nprompt\n\n(\n\n58\n\nconst\n\notp\n\n=\n\nwindow\n\n.\n\nprompt\n\n(\n\n59\n\n`\n\nInvalid code, Please enter OTP again. Retries left:\n\n${\n\nrecencyCheckRetries\n\n}\n\n`\n\n,\n\n59\n\n`\n\nInvalid code, Please enter OTP again. Retries left:\n\n${\n\nrecencyCheckRetries\n\n}\n\n`\n\n,\n\n60\n\n)\n\n;\n\n60\n\n)\n\n;\n\n61\n\nrecencyCheckRetries\n\n--\n\n;\n\n61\n\nrecencyCheckRetries\n\n--\n\n;\n\n62\n\n62\n\n63\n\n// Send the OTP for verification\n\n63\n\n// Send the OTP for verification\n\n64\n\nhandle\n\n.\n\nemit\n\n(\n\nRecencyCheckEventEmit\n\n.\n\nVerifyEmailOtp\n\n,\n\notp\n\n)\n\n;\n\n64\n\nhandle\n\n.\n\nemit\n\n(\n\nRecencyCheckEventEmit\n\n.\n\nVerifyEmailOtp\n\n,\n\notp\n\n)\n\n;\n\n65\n\n}\n\n65\n\n}\n\n66\n\n}\n\n)\n\n;\n\n66\n\n}\n\n)\n\n;\n\n67\n\n67\n\n68\n\n/*\n\n68\n\n/*\n\n69\n\nUpdate Email Events & Emit\n\n69\n\nUpdate Email Events & Emit\n\n70\n\n*/\n\n70\n\n*/\n\n71\n\n71\n\n72\n\nlet\n\nupdateEmailRetries\n\n=\n\n5\n\n;\n\n72\n\nlet\n\nupdateEmailRetries\n\n=\n\n5\n\n;\n\n73\n\n73\n\n74\n\nhandle\n\n74\n\nhandle\n\n75\n\n.\n\non\n\n(\n\nUpdateEmailEventOnReceived\n\n.\n\nEmailSent\n\n,\n\n(\n\n)\n\n=>\n\n{\n\n75\n\n.\n\non\n\n(\n\nUpdateEmailEventOnReceived\n\n.\n\nEmailSent\n\n,\n\n(\n\n)\n\n=>\n\n{\n\n76\n\n\u2060\n\n// Email OTP has been sent to the user's secondary email\n\n76\n\n\u2060\n\n// Email OTP has been sent to the user's secondary email\n\n77\n\n77\n\n78\n\n// Prompt the user for the OTP\n\n78\n\n// Prompt the user for the OTP\n\n79\n\nconst\n\notp\n\n=\n\nwindow\n\n.\n\nprompt\n\n(\n\n'Enter new Email OTP'\n\n)\n\n;\n\n79\n\nconst\n\notp\n\n=\n\nwindow\n\n.\n\nprompt\n\n(\n\n'Enter new Email OTP'\n\n)\n\n;\n\n80\n\n80\n\n81\n\n// Send the OTP for verification\n\n81\n\n// Send the OTP for verification\n\n82\n\nhandle\n\n.\n\nemit\n\n(\n\nUpdateEmailEventEmit\n\n.\n\nVerifyEmailOtp\n\n,\n\notp\n\n)\n\n;\n\n82\n\nhandle\n\n.\n\nemit\n\n(\n\nUpdateEmailEventEmit\n\n.\n\nVerifyEmailOtp\n\n,\n\notp\n\n)\n\n;\n\n83\n\n}\n\n)\n\n83\n\n}\n\n)\n\n84\n\n.\n\non\n\n(\n\nUpdateEmailEventOnReceived\n\n.\n\nInvalidEmail\n\n,\n\n(\n\n)\n\n=>\n\n{\n\n84\n\n.\n\non\n\n(\n\nUpdateEmailEventOnReceived\n\n.\n\nInvalidEmail\n\n,\n\n(\n\n)\n\n=>\n\n{\n\n85\n\n// Email OTP was undeliverable to user's secondary email\n\n85\n\n// Email OTP was undeliverable to user's secondary email\n\n86\n\n86\n\n87\n\nconst\n\nnewEmail\n\n=\n\nwindow\n\n.\n\nprompt\n\n(\n\n'Invalid Email, Enter a new Email'\n\n)\n\n;\n\n87\n\nconst\n\nnewEmail\n\n=\n\nwindow\n\n.\n\nprompt\n\n(\n\n'Invalid Email, Enter a new Email'\n\n)\n\n;\n\n88\n\n88\n\n89\n\n// Try same or new email address\n\n89\n\n// Try same or new email address\n\n90\n\nhandle\n\n.\n\nemit\n\n(\n\n90\n\nhandle\n\n.\n\nemit\n\n(\n\n91\n\nUpdateEmailEventEmit\n\n.\n\nRetryWithNewEmail\n\n,\n\n91\n\nUpdateEmailEventEmit\n\n.\n\nRetryWithNewEmail\n\n,\n\n92\n\nnewEmail\n\n||\n\nemail\n\n,\n\n92\n\nnewEmail\n\n||\n\nemail\n\n,\n\n93\n\n)\n\n;\n\n93\n\n)\n\n;\n\n94\n\n}\n\n)\n\n94\n\n}\n\n)\n\n95\n\n.\n\non\n\n(\n\nUpdateEmailEventOnReceived\n\n.\n\nEmailAlreadyExists\n\n,\n\n(\n\n)\n\n=>\n\n{\n\n95\n\n.\n\non\n\n(\n\nUpdateEmailEventOnReceived\n\n.\n\nEmailAlreadyExists\n\n,\n\n(\n\n)\n\n=>\n\n{\n\n96\n\n// Account already exists for new email address\n\n96\n\n// Account already exists for new email address\n\n97\n\n97\n\n98\n\nconst\n\nnewEmail\n\n=\n\nwindow\n\n.\n\nprompt\n\n(\n\n'Email address already in use, Enter a different Email'\n\n)\n\n;\n\n98\n\nconst\n\nnewEmail\n\n=\n\nwindow\n\n.\n\nprompt\n\n(\n\n'Email address already in use, Enter a different Email'\n\n)\n\n;\n\n99\n\n99\n\n100\n\n// Try same or new email address\n\n100\n\n// Try same or new email address\n\n101\n\nhandle\n\n.\n\nemit\n\n(\n\n101\n\nhandle\n\n.\n\nemit\n\n(\n\n102\n\nUpdateEmailEventEmit\n\n.\n\nRetryWithNewEmail\n\n,\n\n102\n\nUpdateEmailEventEmit\n\n.\n\nRetryWithNewEmail\n\n,\n\n103\n\nnewEmail\n\n||\n\nemail\n\n,\n\n103\n\nnewEmail\n\n||\n\nemail\n\n,\n\n104\n\n)\n\n;\n\n104\n\n)\n\n;\n\n105\n\n}\n\n)\n\n105\n\n}\n\n)\n\n106\n\n.\n\non\n\n(\n\nUpdateEmailEventOnReceived\n\n.\n\nInvalidEmailOtp\n\n,\n\n(\n\n)\n\n=>\n\n{\n\n106\n\n.\n\non\n\n(\n\nUpdateEmailEventOnReceived\n\n.\n\nInvalidEmailOtp\n\n,\n\n(\n\n)\n\n=>\n\n{\n\n107\n\n// User entered invalid OTP; you may limit retries and cancel the request\n\n107\n\n// User entered invalid OTP; you may limit retries and cancel the request\n\n108\n\n108\n\n109\n\nif\n\n(\n\n!\n\nupdateEmailRetries\n\n)\n\n{\n\n109\n\nif\n\n(\n\n!\n\nupdateEmailRetries\n\n)\n\n{\n\n110\n\n// Cancel update email request\n\n110\n\n// Cancel update email request\n\n111\n\nalert\n\n(\n\n'Too many attempts'\n\n)\n\n;\n\n111\n\nalert\n\n(\n\n'Too many attempts'\n\n)\n\n;\n\n112\n\nhandle\n\n.\n\nemit\n\n(\n\nUpdateEmailEventEmit\n\n.\n\nCancel\n\n)\n\n;\n\n112\n\nhandle\n\n.\n\nemit\n\n(\n\nUpdateEmailEventEmit\n\n.\n\nCancel\n\n)\n\n;\n\n113\n\n}\n\nelse\n\n{\n\n113\n\n}\n\nelse\n\n{\n\n114\n\nconst\n\notp\n\n=\n\nwindow\n\n.\n\nprompt\n\n(\n\n114\n\nconst\n\notp\n\n=\n\nwindow\n\n.\n\nprompt\n\n(\n\n115\n\n`\n\nInvalid code, Please enter OTP again. Retries left:\n\n${\n\nupdateEmailRetries\n\n}\n\n`\n\n,\n\n115\n\n`\n\nInvalid code, Please enter OTP again. Retries left:\n\n${\n\nupdateEmailRetries\n\n}\n\n`\n\n,\n\n116\n\n)\n\n;\n\n116\n\n)\n\n;\n\n117\n\nupdateEmailRetries\n\n--\n\n;\n\n117\n\nupdateEmailRetries\n\n--\n\n;\n\n118\n\n118\n\n119\n\n// Send the OTP for verification\n\n119\n\n// Send the OTP for verification\n\n120\n\nhandle\n\n.\n\nemit\n\n(\n\nUpdateEmailEventEmit\n\n.\n\nVerifyEmailOtp\n\n,\n\notp\n\n)\n\n;\n\n120\n\nhandle\n\n.\n\nemit\n\n(\n\nUpdateEmailEventEmit\n\n.\n\nVerifyEmailOtp\n\n,\n\notp\n\n)\n\n;\n\n121\n\n}\n\n121\n\n}\n\n122\n\n}\n\n)\n\n122\n\n}\n\n)\n\n123\n\n.\n\non\n\n(\n\nUpdateEmailEventOnReceived\n\n.\n\nEmailUpdated\n\n,\n\n(\n\n)\n\n=>\n\n{\n\n123\n\n.\n\non\n\n(\n\nUpdateEmailEventOnReceived\n\n.\n\nEmailUpdated\n\n,\n\n(\n\n)\n\n=>\n\n{\n\n124\n\n\u2060\n\n// Update email succcessful\n\n124\n\n\u2060\n\n// Update email succcessful\n\n125\n\n125\n\n126\n\nalert\n\n(\n\n'Email Updated'\n\n)\n\n;\n\n126\n\nalert\n\n(\n\n'Email Updated'\n\n)\n\n;\n\n127\n\n}\n\n)\n\n127\n\n}\n\n)\n\n128\n\n128\n\n129\n\nhandle\n\n129\n\nhandle\n\n130\n\n.\n\non\n\n(\n\n'error'\n\n,\n\n(\n\n)\n\n=>\n\n{\n\n130\n\n.\n\non\n\n(\n\n'error'\n\n,\n\n(\n\n)\n\n=>\n\n{\n\n131\n\n// is called if the Promise rejects\n\n131\n\n// is called if the Promise rejects\n\n132\n\n132\n\n133\n\nalert\n\n(\n\n'Error occurred'\n\n)\n\n;\n\n133\n\nalert\n\n(\n\n'Error occurred'\n\n)\n\n;\n\n134\n\n}\n\n)\n\n;\n\n134\n\n}\n\n)\n\n;\n\n135\n\n135\n\n136\n\nconst\n\nres\n\n=\n\nawait\n\nhandle\n\n;\n\n136\n\nconst\n\nres\n\n=\n\nawait\n\nhandle\n\n;\n\n137\n\nconsole\n\n.\n\nlog\n\n(\n\nres\n\n)\n\n;\n\n137\n\nconsole\n\n.\n\nlog\n\n(\n\nres\n\n)\n\n;\n\n138\n\n138\n\n139\n\n// Can also handle successful email update here\n\n139\n\n// Can also handle successful email update here\n\n140\n\nalert\n\n(\n\n'Email Updated'\n\n)\n\n;\n\n140\n\nalert\n\n(\n\n'Email Updated'\n\n)\n\n;\n\n141\n\n}\n\ncatch\n\n{\n\n141\n\n}\n\ncatch\n\n{\n\n142\n\n// Handle errors if required!\n\n142\n\n// Handle errors if required!\n\n143\n\n}\n\n143\n\n}", "explanation": "The documentation section titled '#Event Handling' from the Magic Labs embedded wallet documentation provides an example of event handling for a white-label update email flow. \n\nAn event in this context is essentially a notification sent from the Magic SDK to your application when specific actions are performed, such as sending an email, verifying an OTP, or updating the email.\n\nThe main purpose of event handling in this example is to:\n\n1. Handle events triggered by the update email flow, like sending an email, verifying an OTP, or canceling the request.\n2. Provide a white-label experience for your users by displaying alerts, prompts, or other UI elements to interact with the events.\n3. Allow you to implement custom logic for each event, such as limiting retries or canceling the request.\n\nThe example code snippet demonstrates how to set up event listeners using the `on` method, which is attached to the `handle` object. The events are categorized into two groups:\n\n1. RecencyCheckEventOnReceived: These events are triggered by the recency check, which is part of the update email flow.\n   - EmailSent: Sent to the user's primary email.\n   - PrimaryAuthFactorVerified: Primary authentication factor verified.\n   - EmailNotDeliverable: Email OTP was undeliverable to the user's primary email.\n   - EmailExpired: User entered expired OTP.\n   - InvalidEmailOtp: User entered invalid OTP; you may limit retries and cancel the request.\n\n2. UpdateEmailEventOnReceived: These events are triggered by the update email, which is also part of the update email flow.\n   - EmailSent: Sent to the user's secondary email.\n   - InvalidEmail: Email OTP was undeliverable to the user's secondary email.\n   - EmailAlreadyExists: Account already exists for the new email address.\n   - InvalidEmailOtp: User entered invalid OTP; you may limit retries and cancel the request.\n   - EmailUpdated: Update email successful.\n\nBy handling these events, you can customize the experience for your users and implement any additional logic as needed.\n\n**Code Example Breakdown:**\n\nEach event is attached to the `handle` object using the `on` method, which takes two arguments: the event name and a callback function.\n```javascript\nhandle\n  .on(UpdateEmailEventOnReceived.EmailSent, () => {\n    // handle email sent event\n  });\n```\nThe callback function is where you would write your custom logic for handling each event. You can prompt users for input, display alerts, or perform any other actions necessary for your use case.\n\n**Step-by-Step Example:**\n\nHere's a high-level overview of how to implement event handling in your application:\n\n1. Initialize the Magic SDK.\n2. Call the `updateEmailWithUI` method with the required parameters and set `showUI` to `false`.\n3. Get the `handle` object and attach event listeners to it using the `on` method.\n4. Define event handlers for each event, such as displaying alerts or prompting users for input.\n5. Handle successful or failed email updates by calling the respective event handlers.\n\nThis example demonstrates how to implement white-label event handling for the update email flow in the Magic Labs embedded wallet documentation. By handling events, you can customize the experience for your users and implement any additional logic as needed.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#getinfo#chunk-30", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\ufeffRelevant Error Codes\ufeff\n\nRelevant Error Codes\n\nTo achieve a fully white-labeled experience, you will need to implement some custom error handling according to your UI needs. Here's a short example to illustrate how errors can be caught and identified by their code:\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n,\n\nRPCError\n\n,\n\nRPCErrorCode\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n,\n\nRPCError\n\n,\n\nRPCErrorCode\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\n02\n\n03\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'API_KEY'\n\n)\n\n;\n\n03\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'API_KEY'\n\n)\n\n;\n\n04\n\n04\n\n05\n\ntry\n\n{\n\n05\n\ntry\n\n{\n\n06\n\nawait\n\nmagic\n\n.\n\nauth\n\n.\n\nupdateEmailWithUI\n\n(\n\n{\n\nemail\n\n:\n\n'hello@example.com'\n\n,\n\nshowUI\n\n:\n\nfalse\n\n}\n\n)\n\n;\n\n06\n\nawait\n\nmagic\n\n.\n\nauth\n\n.\n\nupdateEmailWithUI\n\n(\n\n{\n\nemail\n\n:\n\n'hello@example.com'\n\n,\n\nshowUI\n\n:\n\nfalse\n\n}\n\n)\n\n;\n\n07\n\n}\n\ncatch\n\n(\n\nerr\n\n)\n\n{\n\n07\n\n}\n\ncatch\n\n(\n\nerr\n\n)\n\n{\n\n08\n\nif\n\n(\n\nerr\n\ninstanceof\n\nRPCError\n\n)\n\n{\n\n08\n\nif\n\n(\n\nerr\n\ninstanceof\n\nRPCError\n\n)\n\n{\n\n09\n\nswitch\n\n(\n\nerr\n\n.\n\ncode\n\n)\n\n{\n\n09\n\nswitch\n\n(\n\nerr\n\n.\n\ncode\n\n)\n\n{\n\n10\n\ncase\n\nRPCErrorCode\n\n.\n\nUpdateEmailFailed\n\n:\n\n10\n\ncase\n\nRPCErrorCode\n\n.\n\nUpdateEmailFailed\n\n:\n\n11\n\n// Handle errors accordingly :)\n\n11\n\n// Handle errors accordingly :)\n\n12\n\nbreak\n\n;\n\n12\n\nbreak\n\n;\n\n13\n\n}\n\n13\n\n}\n\n14\n\n}\n\n14\n\n}\n\n15\n\n}\n\n15\n\n}", "explanation": "**Error Handling in Magic Labs Embedded Wallet Documentation**\n\nThe '#Error Handling' section in the Magic Labs embedded wallet documentation explains how to catch and handle errors that may occur during API interactions. The main purpose is to provide a systematic approach to error handling, ensuring a robust and seamless user experience.\n\n**Key Points:**\n\n1. **Error Detection**: Use a `try-catch` block to catch errors thrown by the Magic Labs API.\n2. **Error Identification**: Check if the error is an instance of `RPCError`, which indicates a API request error.\n3. **Error Code Mapping**: Use a `switch` statement to map the error code to a specific error message or handling scenario.\n4. **Custom Error Handling**: Implement custom error handling based on the error code, allowing for fine-grained control over the user experience.\n\n**Example Use Case:**\n\nIn the example code, `updateEmailWithUI` is called with `try-catch` blocks. If an error occurs, the code checks if it's an instance of `RPCError` and then switches on the error code to handle errors specifically. In this case, if the error code is `RPCErrorCode.UpdateEmailFailed`, custom error handling logic can be implemented.\n\n**Best Practice:**\n\nWhen using the Magic Labs embedded wallet, implement custom error handling to provide a smooth user experience and ensure a fully white-labeled experience. This involves catching errors, mapping error codes to specific handling scenarios, and implementing custom error logic as needed.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#getinfo#chunk-31", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nThe Wallet Module and it's members are accessible on the Magic SDK instance by the wallet property. \u2060 \u2060Note: The Wallet Module is currently only compatible with Ethereum, Polygon, Base, Arbitrum, Optimism, and Flow (no NFTs).\n\nwallet\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\n02\n\n03\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n03\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n04\n\n04\n\n05\n\nmagic\n\n.\n\nwallet\n\n;\n\n05\n\nmagic\n\n.\n\nwallet\n\n;\n\n06\n\nmagic\n\n.\n\nwallet\n\n.\n\nconnectWithUI\n\n;\n\n06\n\nmagic\n\n.\n\nwallet\n\n.\n\nconnectWithUI\n\n;\n\n07\n\nmagic\n\n.\n\nwallet\n\n.\n\nshowUI\n\n;\n\n07\n\nmagic\n\n.\n\nwallet\n\n.\n\nshowUI\n\n;\n\n08\n\nmagic\n\n.\n\nwallet\n\n.\n\nshowAddress\n\n;\n\n08\n\nmagic\n\n.\n\nwallet\n\n.\n\nshowAddress\n\n;\n\n09\n\nmagic\n\n.\n\nwallet\n\n.\n\nshowBalances\n\n;\n\n09\n\nmagic\n\n.\n\nwallet\n\n.\n\nshowBalances\n\n;\n\n10\n\nmagic\n\n.\n\nwallet\n\n.\n\nshowNFTs\n\n;\n\n10\n\nmagic\n\n.\n\nwallet\n\n.\n\nshowNFTs\n\n;\n\n11\n\nmagic\n\n.\n\nwallet\n\n.\n\nshowSendTokensUI\n\n;\n\n11\n\nmagic\n\n.\n\nwallet\n\n.\n\nshowSendTokensUI\n\n;\n\n12\n\nmagic\n\n.\n\nwallet\n\n.\n\nshowOnRamp\n\n;\n\n// enterprise only\n\n12\n\nmagic\n\n.\n\nwallet\n\n.\n\nshowOnRamp\n\n;\n\n// enterprise only\n\n13\n\nmagic\n\n.\n\nwallet\n\n.\n\ngetProvider\n\n;\n\n13\n\nmagic\n\n.\n\nwallet\n\n.\n\ngetProvider\n\n;\n\n#\n\nconnectWithUI\n\nRenders a simple login form UI to collect the user's email address and authenticate them passwordlessly using a one-time passcode (OTP) sent to their email address they input.\n\n#\n\n\u2022 None", "explanation": "**Wallet Module - `#connectWithUI - #Arguments`**\n\nThis documentation section is about a specific method, `connectWithUI`, within the Wallet Module of the Magic SDK.\n\n**Main Purpose:**\n\nThe `connectWithUI` method is designed to render a simple login form UI that collects the user's email address and authenticates them passwordlessly using a one-time passcode (OTP) sent to their email address. This method is intended to provide a seamless login experience for users, eliminating the need to enter passwords.\n\n**Key Functionality:**\n\n- Collects user's email address\n- Sends a one-time passcode (OTP) to the provided email address\n- Authenticates the user using the OTP, allowing them to access the wallet\n\n**Notable Details:**\n\n- Currently only compatible with Ethereum, Polygon, Base, Arbitrum, Optimism, and Flow blockchains (no NFTs)\n- Part of the Wallet Module, accessible via the `wallet` property of the Magic SDK instance.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#getinfo#chunk-32", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 A promiEvent which returns an String[] when resolved: An array of user accounts that are connected, with the first element being the current public address of the user. You can read more on PromiEvents here.\n\npromiEvent\n\nString[]\n\nhere", "explanation": "**Returns**\n\nThe '#Returns' section of the Magic Labs embedded wallet documentation refers to what the `getInfo()` function returns after it is resolved.\n\n**Main Purpose:**\n\nThe `getInfo()` function returns a **promiEvent**, which is a type of event that resolves to a result. In this case, the result is an array of **String** objects.\n\n**What it returns:**\n\nWhen the promiEvent is resolved, it returns an array of **user accounts that are connected to the wallet**. The first element of this array is the **current public address** of the user.\n\n**Example:**\n\n```\n[\n  \"0xPublicAddressOfCurrentUser\",\n  \"ConnectedUserAccount1\",\n  \"ConnectedUserAccount2\",\n  ...\n]\n```\n\nIn this example, the array contains the current public address of the user and any other connected user accounts.\n\n**Usage:**\n\nDevelopers can use the returned array to access the connected accounts and perform actions accordingly.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#getinfo#chunk-33", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n\"magic-sdk\"\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n\"magic-sdk\"\n\n02\n\n02\n\n03\n\nconst\n\naccounts\n\n=\n\nawait\n\nmagic\n\n.\n\nwallet\n\n.\n\nconnectWithUI\n\n(\n\n)\n\n;\n\n03\n\nconst\n\naccounts\n\n=\n\nawait\n\nmagic\n\n.\n\nwallet\n\n.\n\nconnectWithUI\n\n(\n\n)\n\n;\n\n04\n\n\u2060\n\n04\n\n\u2060\n\n05\n\n/* Optionally, chain to the id token creation event if needed and configured (Universal Wallets only) */\n\n05\n\n/* Optionally, chain to the id token creation event if needed and configured (Universal Wallets only) */\n\n06\n\nmagic\n\n.\n\nwallet\n\n.\n\nconnectWithUI\n\n(\n\n)\n\n.\n\non\n\n(\n\n'id-token-created'\n\n,\n\n(\n\nparams\n\n)\n\n=>\n\n{\n\n06\n\nmagic\n\n.\n\nwallet\n\n.\n\nconnectWithUI\n\n(\n\n)\n\n.\n\non\n\n(\n\n'id-token-created'\n\n,\n\n(\n\nparams\n\n)\n\n=>\n\n{\n\n07\n\nconst\n\n{\n\nidToken\n\n}\n\n=\n\nparams\n\n07\n\nconst\n\n{\n\nidToken\n\n}\n\n=\n\nparams\n\n08\n\nconsole\n\n.\n\nlog\n\n(\n\nidToken\n\n)\n\n08\n\nconsole\n\n.\n\nlog\n\n(\n\nidToken\n\n)\n\n09\n\n// send to your resource server for validation\n\n09\n\n// send to your resource server for validation\n\n10\n\n// ...\n\n10\n\n// ...\n\n11\n\n}\n\n)\n\n;\n\n11\n\n}\n\n)\n\n;", "explanation": "**#Example: Connect with UI and retrieve account information**\n\nThis section of the documentation provides an example code snippet for connecting to a Magic Labs embedded wallet using the `connectWithUI` method and retrieving account information. The main purpose is to demonstrate how to interact with the Magic wallet API and perform a basic connection and account retrieval flow.\n\n**Key Takeaways:**\n\n1. The example imports the `Magic` library and initializes the wallet connection using `connectWithUI`.\n2. It sets up an optional event listener for the `id-token-created` event, which is useful for Universal Wallets that require ID token creation and validation.\n3. The example logs the ID token received from the wallet connection, which can then be sent to a resource server for validation.\n\n**Key Methods and Events:**\n\n* `connectWithUI()`: Initializes the wallet connection using a UI prompt.\n* `on('id-token-created', (params) => { ... })`: Listens for the `id-token-created` event and retrieves the ID token.\n* `accounts`: A constant variable that stores the connected account information.\n\n**Usage:**\n\nThis example can be used as a starting point for integrating the Magic Labs embedded wallet into your application, allowing users to connect their accounts and retrieve information such as the ID token.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#getinfo#chunk-34", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nThe id-token-created event is only emitted for Universal Wallet apps. To generate a DID token for a Dedicated Wallet app, please use getIdToken.\n\ngetIdToken\n\nEvent Name\n\nDefinition\n\nid-token-created\n\nid-token-created\n\nReturns an object containing a short lived, time bound ID token that can be used to verify the ownership of a user's wallet address on login.\n\nRead more about this token and how to use it.\n\nRead more", "explanation": "**Event Overview**\n\nThe `#Events` section in the Magic Labs documentation explains that there's an event named `id-token-created`. This event is specifically emitted for **Universal Wallet** apps, whereas for **Dedicated Wallet** apps, a separate method `getIdToken` should be used to generate a DID token.\n\n**Main Purpose**\n\nThe main purpose of the `id-token-created` event is to provide a short-lived, time-bound ID token that can be used to **verify the ownership of a user's wallet address on login**.\n\nThis ID token can be used to confirm that the user has access to the associated wallet address, which can be helpful in various scenarios, such as:\n\n* Authenticating users with their wallet addresses\n* Preventing unauthorized access to wallet accounts\n* Enhancing the security of user login processes\n\n**Key Points to Remember**\n\n* `id-token-created` event is only emitted for Universal Wallet apps.\n* For Dedicated Wallet apps, use `getIdToken` method to generate a DID token.\n* The ID token is short-lived and time-bound, providing an additional layer of security.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#getinfo#chunk-35", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nshowUI\n\nDisplays the fully navigable wallet to the user that adheres to the toggled configurations on your developer dashboard\u2019s Widget UI tab. \u2060 \u2060This is only supported for users who login with email or Google and not third party wallets such as metamask. User must be signed in for this method to return or else it will throw an error.\n\nnavigable wallet\n\n#\n\n\u2022 None", "explanation": "This documentation section is about the `#showUI` method. Here's a breakdown of its purpose and key points:\n\n**What is #showUI?**\n\n`#showUI` displays a fully interactive and navigable wallet user interface (UI) to the user. This UI follows the configuration settings set on the Magic Labs developer dashboard.\n\n**Purpose**\n\nThe main purpose of `#showUI` is to provide a user-friendly wallet experience for Magic Labs users who log in with their email or Google accounts. It is designed to enhance the overall user experience by providing a seamless and guided interface for interacting with the wallet.\n\n**Key Notes**\n\n- This method is only supported for users who log in with email or Google, not third-party wallets like MetaMask.\n- The user must be signed in for the method to execute successfully; otherwise, it will return an error.\n\nIn summary, `#showUI` is a user interface method that displays a navigable wallet to the user, enhancing their overall experience with Magic Labs while ensuring they are signed in to the platform.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#getinfo#chunk-36", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 Promise which resolves when the user closes the window\n\nPromise\n\n\u2060Optionally, add a .on() handler to catch the disconnect event emitted when the user logs out from the wallet widget.\n\n.on()\n\ndisconnect", "explanation": "According to the provided documentation, the section titled '#Returns' is about the output result of the `getInfo()` function when it is called.\n\n**What it returns:**\n\nThe `getInfo()` function returns a Promise that resolves when the user closes the window. This indicates that the function waits until the user has completely closed their window or browser tab before completing its execution.\n\n**Optional feature:**\n\nIn addition to returning a Promise, you can optionally add a `.on()` handler to catch a specific event called 'disconnect'. The 'disconnect' event is emitted when the user logs out from the wallet widget. This allows you to perform any necessary actions when the user logs out of their wallet. \n\nIn summary, the main purpose of the `getInfo()` function's return value is to provide a Promise that resolves when the user is done using the wallet, giving you a chance to execute code during or after that process. It also offers an optional way to handle user logout events.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#getinfo#chunk-37", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\n02\n\n03\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n03\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n04\n\n04\n\n05\n\nawait\n\nmagic\n\n.\n\nwallet\n\n.\n\nshowUI\n\n(\n\n)\n\n05\n\nawait\n\nmagic\n\n.\n\nwallet\n\n.\n\nshowUI\n\n(\n\n)", "explanation": "The '# Example' section is a code snippet that demonstrates how to use the Magic Labs embedded wallet SDK in a JavaScript application to retrieve wallet information.\n\n**Main Purpose:**\n\nThe purpose of this example code is to show users how to initialize the Magic Labs embedded wallet, display the wallet UI, and retrieve wallet information.\n\n**Step-by-Step Breakdown:**\n\n1. Import the `Magic` library from the `magic-sdk` module.\n2. Create a new instance of the `Magic` class, passing in a `PUBLISHABLE_API_KEY` as an argument. This key is required to use the Magic Labs embedded wallet SDK.\n3. Use the `showUI()` method to display the wallet UI, which allows the user to authenticate and interact with the wallet.\n4. The `showUI()` method is called twice, likely to demonstrate how to properly handle user interaction and wallet authentication.\n\n**Key Points:**\n\n* The code uses ES6 syntax and async/await keywords to handle synchronous promises.\n* The `PUBLISHABLE_API_KEY` is a placeholder and should be replaced with a real API key from the Magic Labs dashboard.\n* The `Magic` class instance (`magic`) is used to interact with the wallet, and its methods are called to perform specific tasks.\n\nOverall, this example code provides a basic template for integrating the Magic Labs embedded wallet SDK into a web application, and it can serve as a starting point for users who want to build their own applications with Magic Labs.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#getinfo#chunk-38", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nshowAddress\n\nDisplays an iframe with the current user\u2019s wallet address in a QR Code.\n\n#\n\n\u2022 None", "explanation": "Based on the given documentation, `#showAddress` appears to be a feature that displays the current user's wallet address in a QR code, presented within an iframe on the user's interface.\n\nThe main purpose of `#showAddress` is to provide a visual representation of the user's wallet address, allowing easy sharing or scanning of their wallet information. This feature seems to be designed for user convenience, making it simple for users to access and share their wallet details.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#getinfo#chunk-39", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 Promise which resolves when the user closes the window\n\nPromise", "explanation": "**Returns**\n\nThe `Returns` section of the Magic Labs embedded wallet documentation indicates the type of output or result that is expected when executing the `getInfo` method via the Magic Link web API.\n\nIn this case, the `Returns` is specified as:\n\n* A Promise\n\nThis means that when the `getInfo` method is called, it will return a **Promise**. A Promise is a result of an operation that may not yet be completed. It represents a value that may not be available yet, but will be resolved at some point in the future.\n\nThe main purpose of the `Returns` section is to inform developers about what to expect in terms of output when using a certain method or function in the Magic Labs embedded wallet API. This allows developers to write code that can handle the expected output, such as using `.then()` or `.catch()` to manage the Promise.\n\nIn this specific case, the Promise will resolve when the user closes the window, indicating that the request has been completed.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#getinfo#chunk-40", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\n02\n\n03\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n03\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n04\n\n04\n\n05\n\nawait\n\nmagic\n\n.\n\nwallet\n\n.\n\nshowAddress\n\n(\n\n)\n\n05\n\nawait\n\nmagic\n\n.\n\nwallet\n\n.\n\nshowAddress\n\n(\n\n)", "explanation": "**Example: Getting a Wallet's Address**\n\nThis documentation section demonstrates how to retrieve a user's wallet address using the Magic Labs embedded wallet API. The example code is written in JavaScript and utilizes the Magic Web SDK.\n\n**Main Purpose:**\nThe main purpose of this example is to show developers how to integrate the Magic Labs embedded wallet into their application and fetch a user's wallet address. This is typically done to display a user's Ethereum wallet address.\n\n**Key Steps:**\n\n1. Import the Magic Web SDK.\n2. Create a new instance of the Magic class, passing in the publishable API key.\n3. Use the `showAddress` method of the `wallet` object to retrieve the user's wallet address.\n4. Await the result of the `showAddress` method to ensure that the wallet address is obtained successfully.\n\n**Code Explanation:**\n\nThe code is repetitive, with lines 3 and 4 being equivalent to lines 1 and 2, respectively. Lines 5 and 6 demonstrate how to actually obtain the wallet address.\n\n```javascript\n// Import the Magic Web SDK\nimport { Magic } from 'magic-sdk';\n\n// Create a new instance of the Magic class, passing in the publishable API key\nconst magic = new Magic('PUBLISHABLE_API_KEY');\n\n// Get the user's wallet address\nawait magic.wallet.showAddress();\n```\n\nIn a real-world application, you would replace `'PUBLISHABLE_API_KEY'` with your actual publishable API key obtained from the Magic Labs dashboard.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#getinfo#chunk-41", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nshowBalances\n\nDisplays an iframe that displays the user\u2019s token balances from the currently connected network.\n\n#\n\n\u2022 None", "explanation": "The '#showBalances - #Arguments' section is part of the Magic Labs embedded wallet documentation. \n\nIt mentions the 'showBalances' function, which is used to display an iframe containing the user's token balances on the currently connected network. \n\nThe main purpose of the 'showBalances' function is to provide users with an overview of their available tokens, allowing them to manage and balance their portfolios effectively.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#getinfo#chunk-42", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 Promise which resolves when the user closes the window\n\nPromise", "explanation": "In the documentation section titled '#Returns' from the Magic Labs embedded wallet documentation for the `getInfo` endpoint at `https://magic.link/docs/api/client-side-sdks/web#getinfo`, it refers to the Promise that is returned by the invocation of the `getInfo` method in the Magic SDK.\n\nThe main purpose of this Promise is to resolve and provide a notification to the developer when the user closes the Wallet window or app, allowing the developer to incorporate subsequent actions or state updates after this event.\n\nIn essence, it serves as a callback for when the user interaction with the Magic Wallet is completed, enabling the application to proceed with its workflow or tasks that depend on this closure event.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#getinfo#chunk-43", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\n02\n\n03\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n03\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n04\n\n04\n\n05\n\nawait\n\nmagic\n\n.\n\nwallet\n\n.\n\nshowBalances\n\n(\n\n)\n\n05\n\nawait\n\nmagic\n\n.\n\nwallet\n\n.\n\nshowBalances\n\n(\n\n)", "explanation": "**Example Usage in Magic Labs Embedded Wallet Documentation**\n\nThe provided code snippet is an example of how to use the Magic Labs Embedded Wallet to display a user's wallet balances. Here's a breakdown of the example:\n\n**Importing Magic SDK**: The code starts by importing the Magic SDK using the following import statement:\n```javascript\nimport { Magic } from 'magic-sdk';\n```\nThis imports the Magic class, which is used to interact with the Magic Labs Embedded Wallet.\n\n**Creating a Magic Instance**: The code creates a new instance of the Magic class, passing in a Publishable API Key:\n```javascript\nconst magic = new Magic('PUBLISHABLE_API_KEY');\n```\nThis instance is used to interact with the Magic Labs Embedded Wallet.\n\n**Showing Wallet Balances**: The code uses the `wallet.showBalances()` method to display a user's wallet balances:\n```javascript\nawait magic.wallet.showBalances();\n```\nThis method returns the current wallet balances for the user.\n\nThe example provides a simple illustration of how to use the Magic Labs Embedded Wallet to display a user's wallet balances. The main purpose of this code snippet is to serve as a starting point for developers who want to integrate the Magic Labs Embedded Wallet into their applications.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#getinfo#chunk-44", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nshowNFTs\n\nDisplays an iframe that shows the user\u2019s NFTs in both an aggregated and detailed individual view. Supported only on Ethereum and Polygon. Ensure this is enabled in your developer dashboard via the \u2018Widget UI\u2019 tab.\n\n#\n\n\u2022 None", "explanation": "The `#showNFTs` section from the Magic Labs embedded wallet documentation is used to display an iframe that shows the user's NFTs (Non-Fungible Tokens) in both an aggregated and detailed individual view. This feature is only supported on the Ethereum and Polygon blockchains.\n\nThe primary purpose of `#showNFTs` is to provide users with a visual representation of their NFTs, allowing them to easily manage and view their digital assets.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#getinfo#chunk-45", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 Promise which resolves when the user closes the window\n\nPromise", "explanation": "In the provided Magic Labs embedded wallet documentation URL, the '#Returns' section explains that the `getInfo` method returns a `Promise`.\n\nA `Promise` is a fundamental concept in JavaScript that represents the eventual completion (or failure) of an asynchronous operation, along with a value that can be retrieved when it completes. \n\nIn this context, the `getInfo` method eventually resolves when the user closes the Magic Labs embedded wallet window. Then, the `Promise` that `getInfo` returns is resolved, indicating that the operation has completed.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#getinfo#chunk-46", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\n02\n\n03\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n03\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n04\n\n04\n\n05\n\nawait\n\nmagic\n\n.\n\nwallet\n\n.\n\nshowNFTs\n\n(\n\n)\n\n05\n\nawait\n\nmagic\n\n.\n\nwallet\n\n.\n\nshowNFTs\n\n(\n\n)", "explanation": "**Documentation Section: '#Example'**\n\nThe provided documentation section is titled '#Example' and appears to be from the Magic Labs embedded wallet documentation, specifically under the API section for the web client-side SDK. \n\n**Purpose:** The main purpose of this example is to demonstrate how to utilize the Magic SDK to display Non-Fungible Tokens (NFTs) stored within an attached wallet.\n\n**Breakdown:**\n\n1. The example starts by importing the Magic library from the 'magic-sdk' module.\n2. A new instance of the Magic class is created using the 'PUBLISHABLE_API_KEY'.\n3. The 'magic' instance then calls the 'showNFTs' method within the 'wallet' namespace to display the NFTs stored within the attached wallet.\n4. Note that the code snippet contains duplicate lines; these can be removed, and the remaining code will provide the same functionality.\n\n**Key Takeaways:**\n\n- The example is meant to be a basic starting point for integrating Magic SDK into web applications.\n- It focuses on demonstrating the usage of the 'showNFTs' method, which is likely used to display NFTs stored within an attached wallet.\n- This example likely builds upon previous sections of the documentation, which outline the necessary steps to initialize the Magic SDK and attach a wallet. \n\n**Practical Application:** This example is useful for web developers who want to integrate Magic Labs into their application, specifically when dealing with displaying user-owned NFTs.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#getinfo#chunk-47", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nshowSendTokensUI\n\nDisplays an iframe with UI to help the user transfer tokens from their account to another address.\n\n#\n\n\u2022 None", "explanation": "Based on the provided documentation, here's an explanation of `#showSendTokensUI` and its main purpose:\n\n**#showSendTokensUI: Displaying Token Transfer UI**\n\n`#showSendTokensUI` is a feature that generates an iframe with a user interface (UI) to assist users in transferring tokens from their account to a specified address.\n\n**Main Purpose:**\n\nThe primary purpose of `#showSendTokensUI` is to provide an intuitive and guided experience for users to securely send tokens, promoting a smooth and seamless user experience.\n\nThis feature likely consists of various UI elements, such as:\n\n* Token balance display\n* Receiver address input\n* Token amount selectors\n* Confirm and send buttons\n\nBy using `#showSendTokensUI`, the web application can facilitate the token transfer process while maintaining security and compliance with Magic Labs' embedded wallet requirements.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#getinfo#chunk-48", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 Promise which resolves when the user closes the window\n\nPromise", "explanation": "The section titled '#Returns' is about the return value of the `Magic.getinfo` API call. \n\nIt states that the method returns a 'Promise', which is a JavaScript object that represents the eventual completion (or failure) of an asynchronous operation, and its resulting value.\n\nIn other words, the `Magic.getinfo` API call will return a Promise that is resolved once the user closes the window. This indicates that the API is waiting for a specific event (window closure) to complete its operation, and the result of that operation will be returned by the Promise.\n\nThe main purpose of this section is to inform developers about the return structure of the API call, allowing them to handle the result in their JavaScript code.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#getinfo#chunk-49", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\n02\n\n03\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n03\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n04\n\n04\n\n05\n\nawait\n\nmagic\n\n.\n\nwallet\n\n.\n\nshowSendTokensUI\n\n(\n\n)\n\n05\n\nawait\n\nmagic\n\n.\n\nwallet\n\n.\n\nshowSendTokensUI\n\n(\n\n)", "explanation": "The provided section is an example code snippet under the documentation of Magic Links' embedded wallet for the web SDK. \n\nHere's a breakdown of the main purpose and key elements of this code:\n\n**Purpose:**\nThis code demonstrates how to initialize and use the Magic wallet to display the send tokens UI. In essence, it provides a basic example of how to integrate the Magic wallet into an application.\n\n**Main Steps:**\n\n1. Importing the Magic SDK: The code imports the Magic SDK from the 'magic-sdk' module.\n2. Initializing the Magic wallet: It creates a new instance of the Magic wallet using a publishable API key. This is necessary to authenticate and interact with the Magic wallet.\n3. Displaying the send tokens UI: Using the `showSendTokensUI` method, the code brings up the send tokens user interface, allowing users to send tokens from their connected wallet.\n\nOverall, this example provides a fundamental starting point for integrating Magic wallet functionality into a web application that requires users to interact with tokens or cryptocurrencies. It serves as a guide to help developers get started with adding wallet capabilities to their projects.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#getinfo#chunk-50", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nshowOnRamp\n\nDisplays an iframe modal with various on ramp providers for the user to purchase crypto from directly to their wallet.\n\nTo use the fiat on ramp for Dedicated Wallet apps, you will need to contact us to KYB with the payment provider prior to use. Once approved, ensure this toggle is enabled in your developer dashboard via the \u2018Widget UI\u2019 tab.\n\n#\n\n\u2022 None", "explanation": "Based on the provided documentation section, `#showOnRamp`, it is a function that displays an iframe modal with various on-ramp providers for users to purchase cryptocurrency directly into their Magic Labs wallet.\n\nThe main purpose of this function is to facilitate easy fiat-to-crypto on-ramp transactions for users, allowing them to purchase cryptocurrencies with traditional payment methods like credit cards or bank transfers.\n\nHowever, it's worth noting that for Dedicated Wallet apps, there are additional requirements to enable fiat on-ramp, which includes:\n\n1. Contacting Magic Labs to KYB (Know Your Business) the payment provider.\n2. Ensuring the toggle is enabled in the developer dashboard's \"Widget UI\" tab.\n\nThis functionality seems to aim at making it easier for users to onboard and purchase cryptocurrencies using commonly accepted payment methods.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#getinfo#chunk-51", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 Promise which resolves when the user closes the window\n\nPromise", "explanation": "**Returns**\n\nThe '#Returns' section in the Magic Labs embedded wallet documentation indicates the expected output of the `getInfo` API method.\n\n**Main Purpose**\n\nThe `#Returns` section provides the response structure when the `getInfo` method is successfully executed. In this case, the method returns a **Promise**, which is a JavaScript object that represents an operation that will complete at some point in the future.\n\n**Specifically for Magic Labs**\n\nThe specified Promise resolves when the user closes the wallet window. This means that once the user closes the embedded Magic Labs wallet, the `getInfo` method returns its result, allowing your application to proceed with further actions.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#getinfo#chunk-52", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\n02\n\n03\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n03\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n04\n\n04\n\n05\n\nawait\n\nmagic\n\n.\n\nwallet\n\n.\n\nshowOnRamp\n\n(\n\n)\n\n05\n\nawait\n\nmagic\n\n.\n\nwallet\n\n.\n\nshowOnRamp\n\n(\n\n)", "explanation": "**Overview of the Example Code**\n\nThe provided documentation section titled '#Example' showcases a code snippet written in JavaScript using the Magic Labs embedded wallet SDK (Software Development Kit). This example demonstrates how to initialize and use the Magic wallet SDK to display an on-ramp (also known as a cryptocurrency onboarding flow).\n\n**Main Purpose**\n\nThe main purpose of this code snippet is to provide developers with a starting point to integrate the Magic Labs embedded wallet into their web applications. By following this example, developers can:\n\n1. Import the Magic SDK.\n2. Initialize the Magic wallet instance with a publishable API key.\n3. Display an on-ramp flow using the `showOnRamp` method.\n\n**Key Code Snippets**\n\n* The code imports the Magic SDK using the line `import { Magic } from 'magic-sdk';`.\n* It then initializes a new instance of the Magic wallet using a publishable API key, as shown in the line `const magic = new Magic('PUBLISHABLE_API_KEY');`.\n* The `await magic.wallet.showOnRamp()` method is called to display an on-ramp flow.\n\n**Context**\n\nThis code snippet is likely intended for developers who want to add cryptocurrency onboarding capabilities to their web applications using the Magic Labs embedded wallet. The example code serves as a reference point for integrating the Magic wallet SDK and building the on-ramp flow for users to connect their wallets and complete transactions.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#getinfo#chunk-53", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\ngetProvider\n\nThis method is introduced in magic-sdk@17.0.0 and must be used to get the current provider if third party wallets are enabled. If not using third party wallets, we suggest using magic.rpcProvider.\n\nmagic-sdk@17.0.0\n\nmagic.rpcProvider\n\n#\n\n\u2022 None", "explanation": "The `#getProvider` method is introduced in magic-sdk@17.0.0 and is used to obtain the current provider when third-party wallets are enabled. This method serves a specific purpose compared to the older approach of using `magic.rpcProvider`.\n\nThe main difference and purpose of `getProvider` is to provide a way to dynamically retrieve the provider depending on whether a third-party wallet is currently in use. \n\nIn contrast, `magic.rpcProvider` returns a static provider that may not be suitable for scenarios where the provider needs to adapt to different wallets being used. The introduction of `getProvider` in magic-sdk@17.0.0 allows for more flexibility and is recommended for use with third-party wallets enabled.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#getinfo#chunk-54", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 Object: The rpc provider of the wallet a user is currently logged in with (MetaMask, Coinbase Wallet or Magic)\n\nObject\n\nImportant: To ensure rpc requests are routed to the correct wallet, developers must re-fetch the provider object using getProvider() and re-initialize the web3.js or ethers.js instance any time a user logs in, logs out, or disconnects their wallet.\n\ngetProvider()", "explanation": "**Returns Section:**\n\nThe \"#Returns\" section in the Magic Labs embedded wallet documentation is about describing the response object that the API call `getinfo` returns.\n\n**Main Purpose:**\n\nThe main purpose of this section is to inform developers about what they can expect to receive from the `getinfo` API call, specifically the object containing the RPC (Remote Procedure Call) provider of the wallet the user is currently logged in with (e.g., MetaMask, Coinbase Wallet, or Magic).\n\n**Key Takeaway:**\n\nWhen a user logs in, logs out, or disconnects their wallet, developers must refresh the provider object by calling `getProvider()` and re-initialize their web3.js or ethers.js instance to ensure that RPC requests are routed to the correct wallet. This is crucial for maintaining a seamless and secure user experience.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#getinfo#chunk-55", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n\"magic-sdk\"\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n\"magic-sdk\"\n\n02\n\nimport\n\nWeb3\n\nfrom\n\n'web3'\n\n;\n\n02\n\nimport\n\nWeb3\n\nfrom\n\n'web3'\n\n;\n\n03\n\n03\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n,\n\n{\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n,\n\n{\n\n05\n\nnetwork\n\n:\n\n\"goerli\"\n\n,\n\n05\n\nnetwork\n\n:\n\n\"goerli\"\n\n,\n\n06\n\n}\n\n)\n\n;\n\n06\n\n}\n\n)\n\n;\n\n07\n\n07\n\n08\n\nconst\n\nprovider\n\n=\n\nawait\n\nmagic\n\n.\n\nwallet\n\n.\n\ngetProvider\n\n(\n\n)\n\n;\n\n08\n\nconst\n\nprovider\n\n=\n\nawait\n\nmagic\n\n.\n\nwallet\n\n.\n\ngetProvider\n\n(\n\n)\n\n;\n\n09\n\n09\n\n10\n\nconst\n\nweb3\n\n=\n\nnew\n\nWeb3\n\n(\n\nprovider\n\n)\n\n;\n\n10\n\nconst\n\nweb3\n\n=\n\nnew\n\nWeb3\n\n(\n\nprovider\n\n)\n\n;\n\n11\n\n11\n\n12\n\nconst\n\naccounts\n\n=\n\nawait\n\nmagic\n\n.\n\nwallet\n\n.\n\nconnectWithUI\n\n(\n\n)\n\n;\n\n12\n\nconst\n\naccounts\n\n=\n\nawait\n\nmagic\n\n.\n\nwallet\n\n.\n\nconnectWithUI\n\n(\n\n)\n\n;\n\n13\n\n13\n\n14\n\n// Listen for events\n\n14\n\n// Listen for events\n\n15\n\nweb3\n\n.\n\ncurrentProvider\n\n.\n\non\n\n(\n\n'accountsChanged'\n\n,\n\nhandleAccountsChanged\n\n)\n\n;\n\n15\n\nweb3\n\n.\n\ncurrentProvider\n\n.\n\non\n\n(\n\n'accountsChanged'\n\n,\n\nhandleAccountsChanged\n\n)\n\n;\n\n16\n\nweb3\n\n.\n\ncurrentProvider\n\n.\n\non\n\n(\n\n'chainChanged'\n\n,\n\nhandleChainChanged\n\n)\n\n;\n\n16\n\nweb3\n\n.\n\ncurrentProvider\n\n.\n\non\n\n(\n\n'chainChanged'\n\n,\n\nhandleChainChanged\n\n)\n\n;", "explanation": "**#Web3.js/Ethers.js Documentation Explanation**\n\nThe provided documentation section is about integrating the Magic Labs Embedded Wallet with Web3.js or Ethers.js, two popular JavaScript libraries for interacting with the Ethereum blockchain. This section explains how to use the Magic Labs SDK to connect a user's wallet to a Web3.js or Ethers.js application.\n\n**Main Purpose:**\n\nThe main purpose of this section is to demonstrate how to:\n\n1. Initialize the Magic Labs Embedded Wallet using a PUBLISHABLE_API_KEY.\n2. Obtain a Web3.js or Ethers.js provider from the Magic Labs Embedded Wallet.\n3. Create a new instance of Web3.js or Ethers.js using the provider.\n4. Connect the user's wallet to the application using the `connectWithUI` method.\n\n**Key Steps:**\n\n1. Import the Magic Labs SDK and Web3.js or Ethers.js library.\n2. Initialize the Magic Labs Embedded Wallet with a PUBLISHABLE_API_KEY and specify the network (e.g., \"goerli\").\n3. Get a provider from the Magic Labs Embedded Wallet using the `getProvider` method.\n4. Create a new instance of Web3.js or Ethers.js using the provider.\n5. Connect the user's wallet to the application using the `connectWithUI` method.\n6. Listen for events, such as `accountsChanged` and `chainChanged`, to update the application in real-time.\n\n**Example Use Case:**\n\nThis integration is useful for building decentralized applications (dApps) that require a user's Ethereum wallet to access certain features or functionality. By using the Magic Labs Embedded Wallet, developers can simplify the wallet connection process and provide a seamless user experience.\n\n**API References:**\n\n* Magic Labs Embedded Wallet: `wallet.getProvider()`, `wallet.connectWithUI()`\n* Web3.js: `Web3`, `currentProvider.on()`\n* Ethers.js: (similar to Web3.js)\n\nNote: This explanation assumes a basic understanding of JavaScript, the Magic Labs Embedded Wallet, and Web3.js or Ethers.js.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#getinfo#chunk-56", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nThe User Module and it's members are accessible on the Magic SDK instance by the user property.\n\nuser\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\n02\n\n03\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n03\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n04\n\n04\n\n05\n\nmagic\n\n.\n\nuser\n\n;\n\n05\n\nmagic\n\n.\n\nuser\n\n;\n\n06\n\nmagic\n\n.\n\nuser\n\n.\n\ngetIdToken\n\n;\n\n06\n\nmagic\n\n.\n\nuser\n\n.\n\ngetIdToken\n\n;\n\n07\n\nmagic\n\n.\n\nuser\n\n.\n\ngenerateIdToken\n\n;\n\n07\n\nmagic\n\n.\n\nuser\n\n.\n\ngenerateIdToken\n\n;\n\n08\n\nmagic\n\n.\n\nuser\n\n.\n\ngetInfo\n\n;\n\n08\n\nmagic\n\n.\n\nuser\n\n.\n\ngetInfo\n\n;\n\n09\n\nmagic\n\n.\n\nuser\n\n.\n\nisLoggedIn\n\n;\n\n09\n\nmagic\n\n.\n\nuser\n\n.\n\nisLoggedIn\n\n;\n\n10\n\nmagic\n\n.\n\nuser\n\n.\n\nlogout\n\n;\n\n10\n\nmagic\n\n.\n\nuser\n\n.\n\nlogout\n\n;\n\n11\n\nmagic\n\n.\n\nuser\n\n.\n\nshowSettings\n\n;\n\n11\n\nmagic\n\n.\n\nuser\n\n.\n\nshowSettings\n\n;\n\n12\n\nmagic\n\n.\n\nuser\n\n.\n\nenableMFA\n\n;\n\n12\n\nmagic\n\n.\n\nuser\n\n.\n\nenableMFA\n\n;\n\n13\n\nmagic\n\n.\n\nuser\n\n.\n\ndisableMFA\n\n;\n\n13\n\nmagic\n\n.\n\nuser\n\n.\n\ndisableMFA\n\n;\n\n14\n\nmagic\n\n.\n\nuser\n\n.\n\nrevealPrivateKey\n\n;\n\n14\n\nmagic\n\n.\n\nuser\n\n.\n\nrevealPrivateKey\n\n;\n\n15\n\nmagic\n\n.\n\nuser\n\n.\n\nrequestInfoWithUI\n\n;\n\n15\n\nmagic\n\n.\n\nuser\n\n.\n\nrequestInfoWithUI\n\n;\n\n#\n\ngetIdToken\n\nGenerates a Decentralized Id Token which acts as a proof of authentication to resource servers.\n\nDecentralized Id Token\n\nOnly available with Dedicated Wallet.\n\n#\n\n\u2022 lifespan? (Number): Will set the lifespan of the generated token. Defaults to 900s (15 mins)\n\nlifespan?", "explanation": "The explanation revolves around a specific section of the Magic Labs embedded wallet documentation.\n\n**Understanding the Section:**\n\nThe section is titled '#getIdToken - #Arguments' and it is part of the '#User Module - #getIdToken - #Arguments' documentation. This section explains how to use the `getIdToken` method within the Magic SDK's User Module.\n\n**Main Purpose:**\n\nThe primary purpose of this method is to **generate a Decentralized Id Token**, which serves as proof of authentication to resource servers. This token is particularly useful in scenarios where you need to authenticate users with a decentralized ID, allowing them to access various resources without traditional identification methods.\n\n**Method Details:**\n\n* The `getIdToken` method is available with the Dedicated Wallet version of the Magic Labs embedded wallet.\n* This method accepts an optional `lifespan` argument, which determines the lifespan of the generated token in seconds. By default, it is set to 15 minutes (900 seconds).\n\n**Example Usage:**\n\nTo use the `getIdToken` method, you can access the User Module through the `magic.user` property and then call the `getIdToken` method, passing in the `lifespan` argument if desired.\n\n```javascript\nconst magic = new Magic('PUBLISHABLE_API_KEY');\nconst token = magic.user.getIdToken(lifespan: 600); // 10 minutes\n```\n\nThis will generate a Decentralized Id Token with a lifespan of 10 minutes, which you can then use to authenticate users with resource servers.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#getinfo#chunk-57", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 PromiEvent<string>: Base64-encoded string representation of a JSON tuple representing [proof, claim]\n\nPromiEvent<string>\n\n[proof, claim]", "explanation": "The documented section, '#Returns', is related to the 'getInfo' method in the Magic Labs embedded wallet API.\n\n**What it is about:**\nThe 'getInfo' method returns a Base64-encoded string that represents a JSON tuple. This tuple contains two main elements: 'proof' and 'claim'.\n\n**Main purpose:**\nThe primary purpose of 'getInfo' is to provide the current state of the user's wallet, including the proof and claim. The 'proof' element likely refers to the user's signature or authentication proof, while the 'claim' element possibly represents the user's identity or ownership claim.\n\nBy returning this information, the 'getInfo' method allows for the integration of the Magic Labs wallet with external applications or services, enabling features such as user authentication, identity verification, and secure data exchange.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#getinfo#chunk-58", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\n02\n\n03\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n03\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n04\n\n04\n\n05\n\n// Assumes a user is already logged in\n\n05\n\n// Assumes a user is already logged in\n\n06\n\ntry\n\n{\n\n06\n\ntry\n\n{\n\n07\n\nconst\n\nidToken\n\n=\n\nawait\n\nmagic\n\n.\n\nuser\n\n.\n\ngetIdToken\n\n(\n\n)\n\n;\n\n07\n\nconst\n\nidToken\n\n=\n\nawait\n\nmagic\n\n.\n\nuser\n\n.\n\ngetIdToken\n\n(\n\n)\n\n;\n\n08\n\n}\n\ncatch\n\n{\n\n08\n\n}\n\ncatch\n\n{\n\n09\n\n// Handle errors if required!\n\n09\n\n// Handle errors if required!\n\n10\n\n}\n\n10\n\n}", "explanation": "**Section Explanation:**\n\nThe provided section is titled \"#Example\" from the Magic Labs embedded wallet documentation. This section demonstrates a code example in JavaScript that showcases how to use the Magic API to retrieve an ID token for a user who is already logged in.\n\n**Main Purpose:**\n\nThe main purpose of this code example is to provide a reference implementation for integrating the Magic API into a web application. It illustrates how to create a Magic instance, log in a user, and retrieve their ID token.\n\n**Key Points:**\n\n- The example assumes that a user is already logged in.\n- It creates a new Magic instance with a **PUBLISHABLE_API_KEY**.\n- It calls the `getIdToken()` method on the Magic user object to retrieve the user's ID token.\n- It catches any errors that may occur during the process and suggests handling errors as required.\n\n**Real-World Application:**\n\nThis code example can be used in a real-world web application to authenticate users and retrieve their ID tokens. The ID token can then be used to verify the user's identity and access various features and services within the application.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#getinfo#chunk-59", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\ngenerateIdToken\n\nGenerates a Decentralized ID token with optional serialized data.\n\nDecentralized ID token\n\nOnly available with Dedicated Wallet.\n\n#\n\n\u2022 lifespan? (Number): Will set the lifespan of the generated token. Defaults to 900s (15 mins)\n\n\u2022 attachment? (String): Will set a signature of serialized data in the generated token. Defaults to \"none\"\n\nlifespan?\n\nattachment?\n\n\"none\"", "explanation": "**generateIdToken API**\n\nThe `generateIdToken` API is a functionality available in Magic Labs' Dedicated Wallet, allowing you to generate a Decentralized ID (DID) token with optional serialized data. This token can be used to verify user identity.\n\n**Purpose:**\n\nThe main purpose of `generateIdToken` is to:\n\n1. Create a temporary, secure token that represents a user's identity.\n2. Optionally attach serialized data, such as user profile information, to the token.\n3. Set an expiration time (lifespan) for the token after which it will no longer be valid.\n\n**Key Arguments:**\n\n1. **lifespan** (Number): Sets the duration (in seconds) after which the token will expire. Defaults to 900 seconds (15 minutes).\n2. **attachment** (String): Allows attaching serialized data to the token. Options include \"none\" (default), or a hexadecimal signature of the attached data.\n\nBy using `generateIdToken`, developers can securely verify user identities and validate the attached data to ensure the authenticity and integrity of the issued token.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#getinfo#chunk-60", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 PromiEvent<string>: Base64-encoded string representation of a JSON tuple representing [proof, claim]\n\nPromiEvent<string>\n\n[proof, claim]", "explanation": "The documentation section you're referring to is titled '#Returns', which is related to the 'getinfo' API endpoint in the Magic Labs embedded wallet documentation.\n\n**What it is about:**\n\nThe '#Returns' section describes the expected response data type and format when the 'getinfo' API endpoint is called.\n\n**Main purpose:**\n\nThe main purpose of the '#Returns' section is to provide information about the type of data that the API endpoint returns, specifically a Base64-encoded string representation of a JSON tuple.\n\n**Key components:**\n\n1. **PromiEvent<string>:** This indicates that the return value is a Promise event that resolves to a string.\n2. **Base64-encoded string:** The return value is encoded in base64 format.\n3. **JSON tuple:** The decoded string represents a JSON object containing two properties: `proof` and `claim`.\n\nIn simple terms, when the 'getinfo' API endpoint is called, the client can expect a response in the form of a base64-encoded JSON object containing a proof and a claim.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#getinfo#chunk-61", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\n02\n\n03\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n03\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n04\n\n04\n\n05\n\n// Assumes a user is already logged in\n\n05\n\n// Assumes a user is already logged in\n\n06\n\ntry\n\n{\n\n06\n\ntry\n\n{\n\n07\n\nconst\n\nidToken\n\n=\n\nawait\n\nmagic\n\n.\n\nuser\n\n.\n\ngenerateIdToken\n\n(\n\n{\n\nattachment\n\n:\n\n'SERVER_SECRET'\n\n}\n\n)\n\n;\n\n07\n\nconst\n\nidToken\n\n=\n\nawait\n\nmagic\n\n.\n\nuser\n\n.\n\ngenerateIdToken\n\n(\n\n{\n\nattachment\n\n:\n\n'SERVER_SECRET'\n\n}\n\n)\n\n;\n\n08\n\n}\n\ncatch\n\n{\n\n08\n\n}\n\ncatch\n\n{\n\n09\n\n// Handle errors if required!\n\n09\n\n// Handle errors if required!\n\n10\n\n}\n\n10\n\n}", "explanation": "**Section Breakdown:**\n\nThe provided documentation section, labeled as `#Example`, appears to be a code snippet in JavaScript syntax that demonstrates how to use the Magic Labs embedded wallet to obtain user information.\n\n**Main Purpose:**\n\nThe primary purpose of this code snippet is to:\n\n1. Initialize the Magic Labs embedded wallet instance with a publishable API key.\n2. Use the `generateIdToken` method to obtain an ID token for the logged-in user, which is then passed to the Magic Labs server along with a secret attachment.\n3. Handle any potential errors that may occur during the process.\n\n**Key Steps:**\n\n1. Import the Magic SDK.\n2. Create a new instance of the Magic Labs embedded wallet, passing in a publishable API key.\n3. Call the `generateIdToken` method to obtain an ID token for the user, along with a secret attachment.\n4. Handle any potential errors that may occur during the process.\n\n**Context:**\n\nThis code snippet assumes that a user is already logged in, and it is part of a larger application or integration that utilizes the Magic Labs embedded wallet for user authentication and authorization.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#getinfo#chunk-62", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\ngetInfo\n\nRetrieves information for the authenticated user.\n\n#\n\n\u2022 None", "explanation": "**getInfo API Endpoint**\n\nThe `#getInfo` endpoint is an API function that retrieves essential information for the user who is currently authenticated.\n\n**Main Purpose:**\n\nIts main purpose is to provide access to a user's wallet data and personal details without requiring specific arguments (given as \"None\" in the documentation). This function has no input parameters except for the requirement of user authentication, which is likely handled internally when the function is called.\n\n**Use Case:**\n\nThis endpoint can be useful for applications that need to display user wallet details, balance, or personal information after successful user authentication.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#getinfo#chunk-63", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 PromiEvent<string>:issuer (String): The Decentralized ID of the user. In server-side use-cases, we recommend this value to be used as the user ID in your own tables.email (String): Email address of the authenticated userphoneNumber (String): The phone number of the authenticated userpublicAddress (String): The authenticated user's public address (a.k.a.: public key)isMfaEnabled (Boolean): Whether or not multi-factor authentication is enabled for the userrecoveryFactors (Array): Any recovery methods that have been enabled (ex. [{ type: 'phone_number', value: '+99999999' }])\n\nPromiEvent<string>\n\n\u2022 issuer (String): The Decentralized ID of the user. In server-side use-cases, we recommend this value to be used as the user ID in your own tables.\n\n\u2022 email (String): Email address of the authenticated user\n\n\u2022 phoneNumber (String): The phone number of the authenticated user\n\n\u2022 publicAddress (String): The authenticated user's public address (a.k.a.: public key)\n\n\u2022 isMfaEnabled (Boolean): Whether or not multi-factor authentication is enabled for the user\n\n\u2022 recoveryFactors (Array): Any recovery methods that have been enabled (ex. [{ type: 'phone_number', value: '+99999999' }])\n\nissuer\n\nemail\n\nphoneNumber\n\npublicAddress\n\nisMfaEnabled\n\nrecoveryFactors\n\n[{ type: 'phone_number', value: '+99999999' }]", "explanation": "**Returns Section: Information about the Authenticated User**\n\nThe '#Returns' section of the Magic Labs embedded wallet documentation describes the response format and content returned by the `getInfo` API endpoint.\n\n**Purpose:**\n\nThe main purpose of this section is to provide clarity on the structure and availability of user information returned after a successful authentication process.\n\n**Key Components:**\n\nThe section outlines the following key components:\n\n1. **Decentralized ID (Issuer)**: A unique identifier for the user, recommended to be used as a user ID in your own database.\n2. **User Contact Information**: Email address, phone number, and public address (public key) associated with the authenticated user.\n3. **Multi-Factor Authentication (MFA) Status**: A boolean value indicating whether MFA is enabled for the user.\n4. **Recovery Factors**: An array of enabled recovery methods (e.g., phone number, email address).\n\n**Example Response:**\n\nThe response is represented as a PromiEvent<string>, which is resolved to an object containing the user's information.\n\nBy understanding the structure and content of the response, developers can effectively integrate the Magic Labs embedded wallet into their applications, ensuring seamless user authentication and management.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#getinfo#chunk-64", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\n02\n\n03\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n03\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n04\n\n04\n\n05\n\n// Assumes a user is already logged in\n\n05\n\n// Assumes a user is already logged in\n\n06\n\ntry\n\n{\n\n06\n\ntry\n\n{\n\n07\n\nconst\n\nuserInfo\n\n=\n\nawait\n\nmagic\n\n.\n\nuser\n\n.\n\ngetInfo\n\n(\n\n)\n\n;\n\n07\n\nconst\n\nuserInfo\n\n=\n\nawait\n\nmagic\n\n.\n\nuser\n\n.\n\ngetInfo\n\n(\n\n)\n\n;\n\n08\n\n}\n\ncatch\n\n{\n\n08\n\n}\n\ncatch\n\n{\n\n09\n\n// Handle errors if required!\n\n09\n\n// Handle errors if required!\n\n10\n\n}\n\n10\n\n}", "explanation": "**Document: #Example from Magic Link Documentation**\n\n**Purpose:** The \"#Example\" section in the Magic Link documentation demonstrates how to use the Magic embedded wallet API to retrieve user information on the client-side.\n\n**Key Components:**\n\n1. **Importing Magic SDK**: The code imports the `Magic` library from the `magic-sdk`.\n2. **Initializing Magic Instance**: A `Magic` instance is created using the `PUBLISHABLE_API_KEY`.\n3. **Retrieving User Information**: The `getUserInfo()` method is called on the `Magic` instance to retrieve user information. This assumes the user is already logged in.\n4. **Error Handling**: The code catches any errors that may occur during the `getUserInfo()` call and provides a placeholder for error handling.\n\n**Main Takeaway:** This example provides a basic template for integrating Magic embedded wallet into a web application and demonstrates how to retrieve user information using the `Magic` API.\n\n**Code Structure:**\n\n* The code defines three imports (although two of them are redundant), instantiates a `Magic` object, makes a `getUserInfo()` call, catches errors, and defines a placeholder for error handling.\n\n**Important Reminders:**\n\n* The example assumes the user is already logged in, which is a crucial prerequisite for making `getUserInfo()` calls.\n* You should replace `'PUBLISHABLE_API_KEY'` with your actual API key to enable authentication and authorization.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#getinfo#chunk-65", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nisLoggedIn\n\nChecks if a user is currently logged in to the Magic SDK.\n\n#\n\n\u2022 None", "explanation": "The `#isLoggedIn` check is a function that determines if a user is currently authenticated and logged in using the Magic embedded wallet SDK. \n\nIts main purpose is to verify whether the user has a valid session or connection with the Magic SDK, ensuring secure access to Magic features and functionality. \n\nThe `#isLoggedIn` function serves as a status check, allowing developers to prevent unauthorized access and maintain the security and integrity of their Magic-powered applications.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#getinfo#chunk-66", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 PromiEvent<boolean>\n\nPromiEvent<boolean>", "explanation": "**Returns:**\n\nThe '#Returns' section from the Magic Labs embedded wallet documentation indicates the data type and format that the 'getInfo' API method will return.\n\n**Main Purpose:**\n\nThe main purpose of the `#Returns` section is to inform developers about the expected response type when making a call to the 'getInfo' API method.\n\n**Breakdown:**\n\n- **PromiEvent**: This is a JavaScript library type that is used to create events that can be used with Promises. In the context of the Magic Labs embedded wallet, it's used to handle asynchronous operations.\n- **boolean**: This indicates that the response from the 'getInfo' API method will return a boolean value, indicating the status or outcome of the operation.\n\n**In essence:**\n\nWhen calling the 'getInfo' API method, the Magic Labs embedded wallet will return a boolean value indicating the success or failure of the operation. This information can be used by developers to handle the outcome of the operation in their code.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#getinfo#chunk-67", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\n02\n\n03\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n03\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n04\n\n04\n\n05\n\ntry\n\n{\n\n05\n\ntry\n\n{\n\n06\n\nconst\n\nisLoggedIn\n\n=\n\nawait\n\nmagic\n\n.\n\nuser\n\n.\n\nisLoggedIn\n\n(\n\n)\n\n;\n\n06\n\nconst\n\nisLoggedIn\n\n=\n\nawait\n\nmagic\n\n.\n\nuser\n\n.\n\nisLoggedIn\n\n(\n\n)\n\n;\n\n07\n\nconsole\n\n.\n\nlog\n\n(\n\nisLoggedIn\n\n)\n\n;\n\n// => `true` or `false`\n\n07\n\nconsole\n\n.\n\nlog\n\n(\n\nisLoggedIn\n\n)\n\n;\n\n// => `true` or `false`\n\n08\n\n}\n\ncatch\n\n{\n\n08\n\n}\n\ncatch\n\n{\n\n09\n\n// Handle errors if required!\n\n09\n\n// Handle errors if required!\n\n10\n\n}\n\n10\n\n}", "explanation": "**Section Explanation:**\n\nThe provided code snippet falls under the \"#Example\" documentation section from the Magic Labs embedded wallet documentation on web client-side SDKs, specifically the getinfo API function. This code is an example of how to use the Magic Labs SDK in a JavaScript environment to check if a user is logged in.\n\n**Main Purpose:**\n\nThe primary purpose of this example code is to illustrate how to:\n\n1. Initialize the Magic Labs SDK with a publishable API key.\n2. Create a user instance of the Magic Labs SDK.\n3. Call the `isLoggedIn` method to verify if a user is logged in.\n4. Handle any potential errors that may occur during the process.\n\n**Key Functions and Operations:**\n\n* `new Magic('PUBLISHABLE_API_KEY')`: Initializes the Magic Labs SDK with a publishable API key.\n* `auth.isLoggedIn()`: Attempts to retrieve the login status of the current user.\n* `await`: Waits for the asynchronous operation to complete before continuing.\n* `try-catch` block: Catches and handles any errors that may occur during the execution of the code.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#getinfo#chunk-68", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nlogout\n\nLogs out the currently authenticated Magic user\n\n#\n\n\u2022 None", "explanation": "The `#logout` command in Magic Labs embedded wallet documentation is used to log out the currently authenticated Magic user. In other words, it terminates the user's active session, effectively deleting their access to the Magic account until they log back in.\n\nThe main purpose of `#logout` is to:\n\n1. End the active user session\n2. Unauthenticate the user\n3. Prevent further access to the user's Magic account data\n\nThis function does not require any arguments, as specified in the documentation URL provided. It can be used when a user wishes to securely log out of their Magic account, ensuring their account credentials are protected.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#getinfo#chunk-69", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 PromiEvent<boolean>\n\nPromiEvent<boolean>", "explanation": "In the Magic Labs embedded wallet documentation, the `#Returns` section is outlining the expected data type and structure of the response from the `getInfo` API call.\n\nSpecifically, it mentions that the `getInfo` API call returns a `PromiEvent<boolean>`.\n\nHere's a breakdown of what this means:\n\n- `PromiEvent`: This is an event that resolves when the data is ready. 'Promi' is short for 'promise,' which is a key concept in asynchronous programming. In this case, `PromiEvent` indicates that the response will be sent asynchronously.\n- `boolean`: The `getInfo` API call returns a boolean value. This value likely represents success or failure of the operation. If the operation is successful, the boolean value would typically be `true`. If there's an issue, the boolean value would be `false`.\n\nIn summary, the main purpose of the `#Returns` section is to let developers know what type of data to expect when calling the `getInfo` API, in this case, a boolean value that indicates the success or failure of the operation. The `PromiEvent` part indicates how this value will be returned asynchronously.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#getinfo#chunk-70", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\n02\n\n03\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n03\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n04\n\n04\n\n05\n\ntry\n\n{\n\n05\n\ntry\n\n{\n\n06\n\nawait\n\nmagic\n\n.\n\nuser\n\n.\n\nlogout\n\n(\n\n)\n\n;\n\n06\n\nawait\n\nmagic\n\n.\n\nuser\n\n.\n\nlogout\n\n(\n\n)\n\n;\n\n07\n\nconsole\n\n.\n\nlog\n\n(\n\nawait\n\nmagic\n\n.\n\nuser\n\n.\n\nisLoggedIn\n\n(\n\n)\n\n)\n\n;\n\n// => `false`\n\n07\n\nconsole\n\n.\n\nlog\n\n(\n\nawait\n\nmagic\n\n.\n\nuser\n\n.\n\nisLoggedIn\n\n(\n\n)\n\n)\n\n;\n\n// => `false`\n\n08\n\n}\n\ncatch\n\n{\n\n08\n\n}\n\ncatch\n\n{\n\n09\n\n// Handle errors if required!\n\n09\n\n// Handle errors if required!\n\n10\n\n}\n\n10\n\n}", "explanation": "**Documentation Section: #Example**\n\nThe '#Example' section from the Magic Labs embedded wallet documentation provides an example code snippet on how to use the Magic client side SDK to get information.\n\n**Purpose:**\nThe main purpose of this example is to demonstrate how to use the Magic SDK within a web application to:\n\n1. Create a new instance of the Magic client\n2. Log out the current user\n3. Check if a user is logged in\n\n**Key Functions Used:**\n\n1. `Magic`: Creates a new instance of the Magic client\n2. `Magic.user.logout()`: Logs out the current user\n3. `Magic.user.isLoggedIn()`: Checks if a user is currently logged in\n\n**Usage:**\n\nThis example code can be used as a reference to integrate the Magic SDK in a web application, allowing users to log in and out, and verifying their login status. \n\n**Notes:**\n\n* The PUBLISHABLE_API_KEY should be replaced with your actual Magic API key\n* Error handling is demonstrated, but can be customized based on specific application requirements\n* The example code is written in JavaScript using the Magic client side SDK.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#getinfo#chunk-71", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nshowSettings\n\nDisplays an iframe with the current user\u2019s settings. Allows for users to update their email address, enable multi-factor authentication, and add a recovery factor.\n\nOnly available with Dedicated Wallet. Access to MFA and account recovery require paid add-ons.\n\nMFA\n\naccount recovery\n\n#\n\n\u2022 page? (String): Optional argument to deeplink to a specific page ('mfa' | 'update-email' | 'recovery')\n\npage?\n\n'mfa' | 'update-email' | 'recovery'", "explanation": "**#showSettings - #Arguments Explanation**\n\nThe `#showSettings` section in the Magic Labs embedded wallet documentation provides an iframe to display and update a user's settings. It is divided into three specific sections: Multi-Factor Authentication (MFA), account recovery, and email address update.\n\n**Main Purpose:**\n\nThe purpose of `#showSettings` is to allow users to manage their account settings, including:\n\n1. **Multi-Factor Authentication (MFA)**: Enabling MFA adds an extra layer of security to the user's account.\n2. **Account Recovery**: Users can add a recovery factor to restore access to their account in case of account loss or theft.\n3. **Email Address Update**: Users can update their email address associated with the wallet.\n\n**#Arguments for Deeplinking**\n\nOptional argument `page?` allows for deeplinking to a specific setting page:\n\n- `mfa`: Redirects to the MFA page.\n- `update-email`: Redirects to the email address update page.\n- `recovery`: Redirects to the account recovery page.\n\nThese arguments can be used to specify which specific section of settings to display when the `#showSettings` iframe is called.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#getinfo#chunk-72", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 Promise which resolves when the user closes the window\n\nPromise", "explanation": "Based on the documentation URL provided (https://magic.link/docs/api/client-side-sdks/web#getinfo), the 'Returns' section describes the response or outcome of the `getInfo` method.\n\n**It's about:** The function being queried returns a promise that is resolved when the user closes the window. \n\n**Main Purpose:**\n- The 'Returns' section indicates the expected outcome when calling the `getInfo` method.\n- In this case, the purpose is to notify that the method will return a promise, which resolves when the user closes the window. \n\nIn other words, the `getInfo` method initiates an action that is completed when the user closes the window, and this situation is acknowledged by returning a promise that is resolved at that time.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#getinfo#chunk-73", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\n02\n\n03\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n03\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n04\n\n04\n\n05\n\ntry\n\n{\n\n05\n\ntry\n\n{\n\n06\n\nawait\n\nmagic\n\n.\n\nuser\n\n.\n\nshowSettings\n\n(\n\n)\n\n;\n\n06\n\nawait\n\nmagic\n\n.\n\nuser\n\n.\n\nshowSettings\n\n(\n\n)\n\n;\n\n07\n\n}\n\ncatch\n\n{\n\n07\n\n}\n\ncatch\n\n{\n\n08\n\n// Handle errors if required!\n\n08\n\n// Handle errors if required!\n\n09\n\n}\n\n09\n\n}\n\n10\n\n10\n\n11\n\n// Deeplink to MFA view\n\n11\n\n// Deeplink to MFA view\n\n12\n\ntry\n\n{\n\n12\n\ntry\n\n{\n\n13\n\nawait\n\nmagic\n\n.\n\nuser\n\n.\n\nshowSettings\n\n(\n\n{\n\npage\n\n:\n\n'mfa'\n\n}\n\n)\n\n;\n\n13\n\nawait\n\nmagic\n\n.\n\nuser\n\n.\n\nshowSettings\n\n(\n\n{\n\npage\n\n:\n\n'mfa'\n\n}\n\n)\n\n;\n\n14\n\n}\n\ncatch\n\n{\n\n14\n\n}\n\ncatch\n\n{\n\n15\n\n// Handle errors if required!\n\n15\n\n// Handle errors if required!\n\n16\n\n}\n\n16\n\n}", "explanation": "**Explanation of the '#Example' Code Section**\n\nThe '#Example' code section, obtained from the Magic Labs documentation URL https://magic.link/docs/api/client-side-sdks/web#getinfo, is a JavaScript code snippet demonstrating how to use the Magic Labs SDK to retrieve the user's settings and deeplink to the MFA view.\n\n**Main Purpose**\n\nThe main purpose of this code section is to provide an example of how to use the Magic Labs SDK to:\n\n1. **Retrieve user settings**: Use the `showSettings()` method to retrieve the user's settings, which are associated with their Magic account.\n2. **Deeplink to MFA view**: Use the `showSettings()` method with a specific page parameter (`'mfa'`) to deeplink to the MFA (Multi-Factor Authentication) view.\n\n**Key Code Segments**\n\n1. **Initialization**: The code snippet imports the Magic Labs SDK and initializes a new instance of the `Magic` class using a publishable API key.\n2. **Retrieving user settings**: The code uses a `try-catch` block to attempt to retrieve the user's settings using the `showSettings()` method. If successful, it executes the `try` block; otherwise, it catches the error and provides a commented section to handle errors if required.\n3. **Deeplinking to MFA view**: The code uses a similar `try-catch` block to attempt to deeplink to the MFA view using the `showSettings()` method with the `'mfa'` page parameter.\n\n**Context**\n\nThis code snippet is likely used in a web application that leverages the Magic Labs SDK to manage user accounts and authentication flows. By following this example code, developers can integrate the Magic Labs SDK into their application to provide robust user authentication and management features.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#getinfo#chunk-74", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nshowSettings({ showUI: false, page: 'recovery' })\n\nWhitelabel the flow starting from where the user needs to add a recovery factor phone number. This allows you to implement your own UI, but you will need to implement some custom event handling according to your needs.\n\nOnly available with Dedicated Wallet. Access to account recovery require paid add-ons.\n\naccount recovery\n\n#\n\n\u2022 page (String): 'recovery'\n\n\u2022 showUI (Boolean): false\n\npage\n\n'recovery'\n\nshowUI\n\nfalse", "explanation": "**Explaination**\n\nThe `#showSettings({ showUI: false, page: 'recovery' })` function is a part of Magic Labs' embedded wallet API. It's used to initiate the whitelabel recovery flow for the Magic SDK wallet.\n\n**Purpose**\n\nThe main purpose of this function is to:\n\n1. Show the user the recovery factor phone number screen, where they can add a recovery phone number.\n2. Allow developers to implement their own UI for this screen, customizing the look and feel to match their app.\n3. Handle custom event-based logic according to the app's needs.\n\n**Important Considerations**\n\nThis function is only available with the Dedicated Wallet plan. Additionally, account recovery requires paid add-ons.\n\n**Key Parameters**\n\n- `page`: a required string parameter that specifies the page to be displayed. In this case, it's set to `'recovery'`.\n- `showUI`: a boolean parameter that is set to `false`, meaning the Magic SDK wallet will not display its default UI. Instead, the developer's custom UI should be implemented to handle the events triggered by the Magic SDK.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#getinfo#chunk-75", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 Promise which resolves when the user closes the window\n\nPromise", "explanation": "**Understanding the '#Returns' Section of Magic Labs Embedded Wallet Documentation**\n\nThe `#Returns` section from the provided documentation URL is about describing the expected output of the `getInfo` API method in the Magic Labs Client-side SDK for Web.\n\n**Main Purpose:**\nThe main purpose of this section is to inform developers about what value the `getInfo` method returns after it's executed.\n\n**Breakdown:**\n\n- It states that the `getInfo` method returns a **Promise**.\n- This Promise resolves (i.e., resolves to a value) when the user closes the window.\n\n**Key Takeaway:**\nIn essence, the `#Returns` section tells developers to expect a Promise resolution that corresponds to the user interaction event of closing the window.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#getinfo#chunk-76", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\n02\n\n03\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n03\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n04\n\n04\n\n05\n\ntry\n\n{\n\n05\n\ntry\n\n{\n\n06\n\nlet\n\nhandle\n\n=\n\nmagic\n\n.\n\nuser\n\n.\n\nshowSettings\n\n(\n\n{\n\nshowUI\n\n:\n\nfalse\n\n,\n\npage\n\n:\n\n'recovery'\n\n}\n\n)\n\n;\n\n06\n\nlet\n\nhandle\n\n=\n\nmagic\n\n.\n\nuser\n\n.\n\nshowSettings\n\n(\n\n{\n\nshowUI\n\n:\n\nfalse\n\n,\n\npage\n\n:\n\n'recovery'\n\n}\n\n)\n\n;\n\n07\n\n07\n\n08\n\nhandle\n\n.\n\nemit\n\n(\n\nRecoveryFactorEventEmit\n\n.\n\nStartEditPhoneNumber\n\n)\n\n;\n\n08\n\nhandle\n\n.\n\nemit\n\n(\n\nRecoveryFactorEventEmit\n\n.\n\nStartEditPhoneNumber\n\n)\n\n;\n\n09\n\n// Handle start of adding or editing recovery factor phone number\n\n09\n\n// Handle start of adding or editing recovery factor phone number\n\n10\n\n10\n\n11\n\nhandle\n\n.\n\non\n\n(\n\n11\n\nhandle\n\n.\n\non\n\n(\n\n12\n\nRecencyCheckEventOnReceived\n\n.\n\nPrimaryAuthFactorNeedsVerification\n\n,\n\n(\n\n)\n\n=>\n\n{\n\n12\n\nRecencyCheckEventOnReceived\n\n.\n\nPrimaryAuthFactorNeedsVerification\n\n,\n\n(\n\n)\n\n=>\n\n{\n\n13\n\n// Event triggered if primary auth factor (email) needs verification\n\n13\n\n// Event triggered if primary auth factor (email) needs verification\n\n14\n\n}\n\n,\n\n14\n\n}\n\n,\n\n15\n\n)\n\n;\n\n15\n\n)\n\n;\n\n16\n\n16\n\n17\n\nhandle\n\n.\n\non\n\n(\n\nRecencyCheckEventOnReceived\n\n.\n\nEmailSent\n\n,\n\n(\n\n)\n\n=>\n\n{\n\n17\n\nhandle\n\n.\n\non\n\n(\n\nRecencyCheckEventOnReceived\n\n.\n\nEmailSent\n\n,\n\n(\n\n)\n\n=>\n\n{\n\n18\n\n// Send OTP to email if primary auth factor needs verification\n\n18\n\n// Send OTP to email if primary auth factor needs verification\n\n19\n\n// Prompt for OTP and emit it to verify primary auth factor\n\n19\n\n// Prompt for OTP and emit it to verify primary auth factor\n\n20\n\n20\n\n21\n\nconst\n\ncode\n\n=\n\nwindow\n\n.\n\nprompt\n\n(\n\nPlease\n\nenter the code which was sent to your email'\n\n)\n\n;\n\n21\n\nconst\n\ncode\n\n=\n\nwindow\n\n.\n\nprompt\n\n(\n\nPlease\n\nenter the code which was sent to your email'\n\n)\n\n;\n\n22\n\nhandle\n\n.\n\nemit\n\n(\n\nRecencyCheckEventEmit\n\n.\n\nVerifyEmailOtp\n\n,\n\ncode\n\n)\n\n;\n\n22\n\nhandle\n\n.\n\nemit\n\n(\n\nRecencyCheckEventEmit\n\n.\n\nVerifyEmailOtp\n\n,\n\ncode\n\n)\n\n;\n\n23\n\n}\n\n)\n\n;\n\n23\n\n}\n\n)\n\n;\n\n24\n\n24\n\n25\n\nhandle\n\n.\n\non\n\n(\n\nRecencyCheckEventOnReceived\n\n.\n\nPrimaryAuthFactorVerified\n\n,\n\n(\n\n)\n\n=>\n\n{\n\n25\n\nhandle\n\n.\n\non\n\n(\n\nRecencyCheckEventOnReceived\n\n.\n\nPrimaryAuthFactorVerified\n\n,\n\n(\n\n)\n\n=>\n\n{\n\n26\n\n// Event triggered if email verification success\n\n26\n\n// Event triggered if email verification success\n\n27\n\n}\n\n)\n\n;\n\n27\n\n}\n\n)\n\n;\n\n28\n\n28\n\n29\n\nhandle\n\n.\n\non\n\n(\n\nRecoveryFactorEventOnReceived\n\n.\n\nEnterNewPhoneNumber\n\n,\n\n(\n\n)\n\n=>\n\n{\n\n29\n\nhandle\n\n.\n\non\n\n(\n\nRecoveryFactorEventOnReceived\n\n.\n\nEnterNewPhoneNumber\n\n,\n\n(\n\n)\n\n=>\n\n{\n\n30\n\n// Prompt for secondary factor (phone number) and emit it to send SMS OTP\n\n30\n\n// Prompt for secondary factor (phone number) and emit it to send SMS OTP\n\n31\n\n31\n\n32\n\nconst\n\nphoneNumber\n\n=\n\nwindow\n\n.\n\nprompt\n\n(\n\n'Enter a phone number'\n\n)\n\n;\n\n32\n\nconst\n\nphoneNumber\n\n=\n\nwindow\n\n.\n\nprompt\n\n(\n\n'Enter a phone number'\n\n)\n\n;\n\n33\n\nhandle\n\n.\n\nemit\n\n(\n\nRecoveryFactorEventEmit\n\n.\n\nSendNewPhoneNumber\n\n,\n\nphoneNumber\n\n)\n\n;\n\n33\n\nhandle\n\n.\n\nemit\n\n(\n\nRecoveryFactorEventEmit\n\n.\n\nSendNewPhoneNumber\n\n,\n\nphoneNumber\n\n)\n\n;\n\n34\n\n}\n\n)\n\n;\n\n34\n\n}\n\n)\n\n;\n\n35\n\n35\n\n36\n\nhandle\n\n.\n\non\n\n(\n\nRecoveryFactorEventOnReceived\n\n.\n\nEnterOtpCode\n\n,\n\n(\n\n)\n\n=>\n\n{\n\n36\n\nhandle\n\n.\n\non\n\n(\n\nRecoveryFactorEventOnReceived\n\n.\n\nEnterOtpCode\n\n,\n\n(\n\n)\n\n=>\n\n{\n\n37\n\n// Prompt for SMS OTP and emit it to verify secondary auth factor\n\n37\n\n// Prompt for SMS OTP and emit it to verify secondary auth factor\n\n38\n\n38\n\n39\n\nconst\n\notp\n\n=\n\nwindow\n\n.\n\nprompt\n\n(\n\n'Enter SMS OTP'\n\n)\n\n;\n\n39\n\nconst\n\notp\n\n=\n\nwindow\n\n.\n\nprompt\n\n(\n\n'Enter SMS OTP'\n\n)\n\n;\n\n40\n\nhandle\n\n.\n\nemit\n\n(\n\nRecoveryFactorEventEmit\n\n.\n\nSendOtpCode\n\n,\n\notp\n\n)\n\n;\n\n40\n\nhandle\n\n.\n\nemit\n\n(\n\nRecoveryFactorEventEmit\n\n.\n\nSendOtpCode\n\n,\n\notp\n\n)\n\n;\n\n41\n\n}\n\n)\n\n;\n\n41\n\n}\n\n)\n\n;\n\n42\n\n42\n\n43\n\nhandle\n\n.\n\non\n\n(\n\n'done'\n\n,\n\n(\n\n)\n\n=>\n\n{\n\n43\n\nhandle\n\n.\n\non\n\n(\n\n'done'\n\n,\n\n(\n\n)\n\n=>\n\n{\n\n44\n\n// Successfully added secondary recovery factor\n\n44\n\n// Successfully added secondary recovery factor\n\n45\n\n}\n\n)\n\n;\n\n45\n\n}\n\n)\n\n;\n\n46\n\n46\n\n47\n\nhandle\n\n.\n\non\n\n(\n\nRecoveryFactorEventOnReceived\n\n.\n\nMalformedPhoneNumber\n\n,\n\n(\n\n)\n\n=>\n\n{\n\n47\n\nhandle\n\n.\n\non\n\n(\n\nRecoveryFactorEventOnReceived\n\n.\n\nMalformedPhoneNumber\n\n,\n\n(\n\n)\n\n=>\n\n{\n\n48\n\n// Event triggered if submitted phone number is invalid\n\n48\n\n// Event triggered if submitted phone number is invalid\n\n49\n\n49\n\n50\n\n// Prompt for phone number and emit it to send SMS OTP\n\n50\n\n// Prompt for phone number and emit it to send SMS OTP\n\n51\n\n// Add your own retry logic to limit retries\n\n51\n\n// Add your own retry logic to limit retries\n\n52\n\nconst\n\nphoneNumber\n\n=\n\nwindow\n\n.\n\nprompt\n\n(\n\n52\n\nconst\n\nphoneNumber\n\n=\n\nwindow\n\n.\n\nprompt\n\n(\n\n53\n\n'You entered an invalid phone number, please try again'\n\n53\n\n'You entered an invalid phone number, please try again'\n\n54\n\n)\n\n;\n\n54\n\n)\n\n;\n\n55\n\nhandle\n\n.\n\nemit\n\n(\n\nRecoveryFactorEventEmit\n\n.\n\nSendNewPhoneNumber\n\n,\n\nphoneNumber\n\n)\n\n;\n\n55\n\nhandle\n\n.\n\nemit\n\n(\n\nRecoveryFactorEventEmit\n\n.\n\nSendNewPhoneNumber\n\n,\n\nphoneNumber\n\n)\n\n;\n\n56\n\n}\n\n)\n\n;\n\n56\n\n}\n\n)\n\n;\n\n57\n\n57\n\n58\n\nhandle\n\n.\n\non\n\n(\n\nRecoveryFactorEventOnReceived\n\n.\n\nRecoveryFactorAlreadyExists\n\n,\n\n(\n\n)\n\n=>\n\n{\n\n58\n\nhandle\n\n.\n\non\n\n(\n\nRecoveryFactorEventOnReceived\n\n.\n\nRecoveryFactorAlreadyExists\n\n,\n\n(\n\n)\n\n=>\n\n{\n\n59\n\n// Event triggered if user is trying to add a phone number that's already in place\n\n59\n\n// Event triggered if user is trying to add a phone number that's already in place\n\n60\n\n}\n\n)\n\n;\n\n60\n\n}\n\n)\n\n;\n\n61\n\n61\n\n62\n\nhandle\n\n.\n\non\n\n(\n\nRecoveryFactorEventOnReceived\n\n.\n\nInvalidOtpCode\n\n,\n\n(\n\n)\n\n=>\n\n{\n\n62\n\nhandle\n\n.\n\non\n\n(\n\nRecoveryFactorEventOnReceived\n\n.\n\nInvalidOtpCode\n\n,\n\n(\n\n)\n\n=>\n\n{\n\n63\n\n// Event triggered when submitted SMS OTP is invalid\n\n63\n\n// Event triggered when submitted SMS OTP is invalid\n\n64\n\n64\n\n65\n\nconst\n\ncode\n\n=\n\nwindow\n\n.\n\nprompt\n\n(\n\n'Invalid OTP code. Please try one more time'\n\n)\n\n;\n\n65\n\nconst\n\ncode\n\n=\n\nwindow\n\n.\n\nprompt\n\n(\n\n'Invalid OTP code. Please try one more time'\n\n)\n\n;\n\n66\n\nhandle\n\n.\n\nemit\n\n(\n\nRecoveryFactorEventEmit\n\n.\n\nSendOtpCode\n\n,\n\ncode\n\n)\n\n;\n\n66\n\nhandle\n\n.\n\nemit\n\n(\n\nRecoveryFactorEventEmit\n\n.\n\nSendOtpCode\n\n,\n\ncode\n\n)\n\n;\n\n67\n\n}\n\n)\n\n;\n\n67\n\n}\n\n)\n\n;\n\n68\n\n}\n\ncatch\n\n{\n\n68\n\n}\n\ncatch\n\n{\n\n69\n\n// Handle errors if required!\n\n69\n\n// Handle errors if required!\n\n70\n\n}\n\n70\n\n}", "explanation": "**Example Code Explanation**\n\nThe code snippet provided is an example implementation of Magic Labs' embedded wallet SDK for a JavaScript-based web application. It demonstrates how to create a secondary recovery factor, specifically a phone number, for a user's account. Here's a breakdown of the code and its main purpose:\n\n### Initialization\n\nThe code imports the `Magic` library and creates an instance of the `Magic` object with a publishable API key.\n\n```javascript\nimport { Magic } from 'magic-sdk';\n\nconst magic = new Magic('PUBLISHABLE_API_KEY');\n```\n\n### Showing User Settings\n\nThe code uses the `showSettings` method to display the user settings page, which includes options for primary and secondary authentication factors.\n\n```javascript\nconst handle = magic.user.showSettings({ showUI: false, page: 'recovery' });\n```\n\n### Handling Events\n\nThe code attaches event listeners to the `handle` object to respond to various events related to recovery factor management:\n\n* `RecoveryFactorEventEmit.StartEditPhoneNumber`: triggered when the user starts editing their phone number.\n* `RecencyCheckEventOnReceived.PrimaryAuthFactorNeedsVerification`: triggered when the primary authentication factor (email) needs verification.\n* `RecencyCheckEventOnReceived.EmailSent`: triggered when an email with an OTP code is sent to the user's email address.\n* `RecencyCheckEventOnReceived.PrimaryAuthFactorVerified`: triggered when the primary authentication factor is successfully verified.\n* `RecoveryFactorEventOnReceived.EnterNewPhoneNumber`: triggered when the user enters a new phone number.\n* `RecoveryFactorEventOnReceived.EnterOtpCode`: triggered when the user enters an OTP code.\n* `RecoveryFactorEventOnReceived.MalformedPhoneNumber`: triggered when the user submits an invalid phone number.\n* `RecoveryFactorEventOnReceived.RecoveryFactorAlreadyExists`: triggered when the user tries to add a phone number that already exists.\n* `RecoveryFactorEventOnReceived.InvalidOtpCode`: triggered when the user submits an invalid OTP code.\n\nFor each event, the code prompts the user to input the required information (phone number or OTP code) and emits the relevant event with the input data.\n\n```javascript\nhandle.on(RecencyCheckEventOnReceived.PrimaryAuthFactorNeedsVerification, () => {\n  // Handle event...\n});\n\nhandle.on(RecoveryFactorEventOnReceived.EnterNewPhoneNumber, () => {\n  const phoneNumber = window.prompt('Enter a phone number');\n  handle.emit(RecoveryFactorEventEmit.SendNewPhoneNumber, phoneNumber);\n});\n```\n\n### Error Handling\n\nThe code catches any errors that may occur during the execution of the code and provides a placeholder for custom error handling.\n\n```javascript\ncatch {\n  }\ncatch {\n  // Handle errors if required!\n}\n```\n\nOverall, the example code demonstrates how to create a secondary recovery factor (phone number) using the Magic Labs' embedded wallet SDK and handle various events related to recovery factor management.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#getinfo#chunk-77", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nrecoverAccount()\n\nA user can recover their email account if they've setup a phone number as a recovery factor. Calling this method will display a modal for the user to submit the sent SMS OTP.\n\nOnly available with Dedicated Wallet. Access to account recovery require paid add-ons.\n\naccount recovery\n\n#\n\n\u2022 email (String): The email address (primary auth factor) of the user\n\nemail", "explanation": "**recoverAccount() - Purpose and Explanation**\n\nThe `recoverAccount()` function is used to recover an email account, specifically for users who have set up a phone number as a recovery factor on their Magic Labs embedded wallet. This method is crucial in helping users regain access to their accounts when they've lost their initial login credentials or require alternative authentication.\n\n**Key Functionality**\n\n- When called, `recoverAccount()` displays a modal prompt to the user, seeking input of a sent SMS One-Time Password (OTP).\n- This method requires a Dedicated Wallet, which is a paid feature.\n- Additionally, account recovery through `recoverAccount()` requires a specific paid add-on.\n\n**Main Argument**\n\n- The `recoverAccount()` method takes one required argument:\n  + `email`: A string representing the email address (primary authentication factor) of the user trying to recover their account. This email address is a key input that initiates the account recovery process.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#getinfo#chunk-78", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 PromiEvent<boolean>: The promise resolves with a true boolean value if the recovery is successful and rejects if the request fails\n\nPromiEvent<boolean>", "explanation": "**Returns Section Explanation**\n\nThe '#Returns' section in the documentation explains what data the `getInfo()` function will return after making a request.\n\n**Main Purpose**\n\nThe main purpose of this section is to inform developers about the outcome of the `getInfo()` function, specifically when a user initiates a recovery process. It outlines the expected data format and potential outcomes of the request.\n\n**Key Points:**\n\n1. **Success**: If the recovery process is successful, the promise will resolve with a true boolean value (`true`).\n2. **Failure**: If the request fails for any reason, the promise will reject.\n\nBy understanding the structure and purpose of the `Returns` section, developers can write code to handle the `getInfo()` function's outcomes and provide a better user experience.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#getinfo#chunk-79", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\n02\n\n03\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n03\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n04\n\n04\n\n05\n\ntry\n\n{\n\n05\n\ntry\n\n{\n\n06\n\nmagic\n\n.\n\nuser\n\n.\n\nrecoverAccount\n\n(\n\n{\n\nemail\n\n:\n\nemail\n\n}\n\n)\n\n06\n\nmagic\n\n.\n\nuser\n\n.\n\nrecoverAccount\n\n(\n\n{\n\nemail\n\n:\n\nemail\n\n}\n\n)\n\n07\n\n}\n\ncatch\n\n{\n\n07\n\n}\n\ncatch\n\n{\n\n08\n\n// Handle errors if required!\n\n08\n\n// Handle errors if required!\n\n09\n\n}\n\n09\n\n}", "explanation": "**Example Code for Magic Labs Embedded Wallet**\n\nThis example code is part of the Magic Labs documentation for getting user information on the client-side SDK for the web.\n\n**Main Purpose:**\n\nThe main purpose of this example code is to demonstrate how to use the `Magic` library to recover an account and connect to a user's wallet using their email address.\n\n**Code Breakdown:**\n\n1. The code imports the `Magic` library from the `magic-sdk` module.\n2. It creates an instance of the `Magic` class with a publishable API key.\n3. It attempts to recover an account using the `recoverAccount` method of the `Magic.user` object, passing in an email address.\n4. If an error occurs during account recovery, the code catches the error and handles it.\n\n**Key Points:**\n\n* This code is used to authenticate and connect to a user's wallet using their email address.\n* The `recoverAccount` method is used to start the authentication flow.\n* The code assumes that the publishable API key is configured correctly.\n\n**Important Note:**\n\nThis example code is for demonstration purposes only and should be modified to fit your specific use case. Additionally, this code assumes that you have set up a Magic Labs environment and have the necessary API keys configured.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#getinfo#chunk-80", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nenableMFA\n\nDisplays an iframe deep linked to the beginning of the enable MFA flow. This is the same as calling showSettings({ page: 'mfa' })\n\nshowSettings({ page: 'mfa' })\n\nOnly available with Dedicated Wallet. Access to MFA require paid add-ons. Available as of magic-sdk v28.11.0\n\nMFA\n\nmagic-sdk v28.11.0\n\n#\n\n\u2022 showUI? (Boolean): If true, show an out-of-the-box UI to take user through flow to enable MFA. Defaults to true\n\nshowUI?\n\ntrue\n\ntrue", "explanation": "Here's a clear and concise explanation of the `#enableMFA - #Arguments` section from the Magic Labs embedded wallet documentation:\n\n**What is `enableMFA`?**\n\n`enableMFA` is a feature that displays an iframe (a web page within a web page) to enable Multi-Factor Authentication (MFA) for users. This is done to add an extra layer of security to their account.\n\n**Purpose:**\n\nThe main purpose of `enableMFA` is to guide users through the process of enabling MFA on their account, which makes it more secure and resistant to unauthorized access.\n\n**Availability:**\n\n`enableMFA` is only available for users with a Dedicated Wallet and requires paid add-ons. It was introduced in Magic SDK version 28.11.0.\n\n**Available Argument:**\n\nThe only argument for `enableMFA` is `showUI`, which determines whether to show an out-of-the-box UI (user interface) to guide the user through the MFA enablement process. By default, `showUI` is set to `true`, which means the UI will be displayed.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#getinfo#chunk-81", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 Promise which resolves when the user closes the window\n\nPromise", "explanation": "The given documentation section '#Returns' is about the return value of the `getInfo` method in the Magic Labs embedded wallet.\n\nMain Purpose:\nThe main purpose of this return value is to inform the developer or the application when the user has successfully closed the embedded wallet window, once the interaction with the wallet is completed.\n\nIn simpler terms, it's a Promise that resolves when the user clicks the close button on the interactive wallet, allowing your application to proceed with the next step after the wallet window has been closed.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#getinfo#chunk-82", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\nimport\n\n{\n\n02\n\nimport\n\n{\n\n03\n\nEnableMFAEventEmit\n\n,\n\n03\n\nEnableMFAEventEmit\n\n,\n\n04\n\nEnableMFAEventOnReceived\n\n,\n\n04\n\nEnableMFAEventOnReceived\n\n,\n\n05\n\n}\n\nfrom\n\n'@magic-sdk/types'\n\n;\n\n05\n\n}\n\nfrom\n\n'@magic-sdk/types'\n\n;\n\n06\n\n06\n\n07\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n07\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n08\n\n08\n\n09\n\n// user enables MFA through Magic UI\n\n09\n\n// user enables MFA through Magic UI\n\n10\n\ntry\n\n{\n\n10\n\ntry\n\n{\n\n11\n\nawait\n\nmagic\n\n.\n\nuser\n\n.\n\nenableMFA\n\n(\n\n)\n\n;\n\n11\n\nawait\n\nmagic\n\n.\n\nuser\n\n.\n\nenableMFA\n\n(\n\n)\n\n;\n\n12\n\n}\n\ncatch\n\n{\n\n12\n\n}\n\ncatch\n\n{\n\n13\n\n// Handle errors if required!\n\n13\n\n// Handle errors if required!\n\n14\n\n}\n\n14\n\n}\n\n15\n\n15\n\n16\n\n// user enables MFA through whitelabel UI\n\n16\n\n// user enables MFA through whitelabel UI\n\n17\n\ntry\n\n{\n\n17\n\ntry\n\n{\n\n18\n\nconst\n\nhandle\n\n=\n\nmagic\n\n.\n\nuser\n\n.\n\nenableMFA\n\n(\n\n{\n\nshowUI\n\n:\n\nfalse\n\n}\n\n)\n\n;\n\n18\n\nconst\n\nhandle\n\n=\n\nmagic\n\n.\n\nuser\n\n.\n\nenableMFA\n\n(\n\n{\n\nshowUI\n\n:\n\nfalse\n\n}\n\n)\n\n;\n\n19\n\n19\n\n20\n\nhandle\n\n20\n\nhandle\n\n21\n\n.\n\non\n\n(\n\nEnableMFAEventOnReceived\n\n.\n\nMFASecretGenerated\n\n,\n\n(\n\n{\n\nQRCode\n\n,\n\nkey\n\n}\n\n)\n\n=>\n\n{\n\n21\n\n.\n\non\n\n(\n\nEnableMFAEventOnReceived\n\n.\n\nMFASecretGenerated\n\n,\n\n(\n\n{\n\nQRCode\n\n,\n\nkey\n\n}\n\n)\n\n=>\n\n{\n\n22\n\n\u2060\n\n// Display QR code\n\n22\n\n\u2060\n\n// Display QR code\n\n23\n\nwindow\n\n.\n\nalert\n\n(\n\n`\n\nQRCode:\n\n${\n\nQRCode\n\n}\n\n\\nKey:\n\n${\n\nkey\n\n}\n\n`\n\n)\n\n;\n\n23\n\nwindow\n\n.\n\nalert\n\n(\n\n`\n\nQRCode:\n\n${\n\nQRCode\n\n}\n\n\\nKey:\n\n${\n\nkey\n\n}\n\n`\n\n)\n\n;\n\n24\n\n24\n\n25\n\n// Prompt for MFA TOTP and emit it to enable MFA\n\n25\n\n// Prompt for MFA TOTP and emit it to enable MFA\n\n26\n\nconst\n\ntotp\n\n=\n\nwindow\n\n.\n\nprompt\n\n(\n\n'Scan QR code and enter TOTP from MFA app'\n\n)\n\n;\n\n26\n\nconst\n\ntotp\n\n=\n\nwindow\n\n.\n\nprompt\n\n(\n\n'Scan QR code and enter TOTP from MFA app'\n\n)\n\n;\n\n27\n\nhandle\n\n.\n\nemit\n\n(\n\nEnableMFAEventEmit\n\n.\n\nVerifyMFACode\n\n,\n\ntotp\n\n)\n\n;\n\n27\n\nhandle\n\n.\n\nemit\n\n(\n\nEnableMFAEventEmit\n\n.\n\nVerifyMFACode\n\n,\n\ntotp\n\n)\n\n;\n\n28\n\n}\n\n)\n\n28\n\n}\n\n)\n\n29\n\n.\n\non\n\n(\n\nEnableMFAEventOnReceived\n\n.\n\nInvalidMFAOtp\n\n,\n\n(\n\n{\n\nerrorCode\n\n}\n\n)\n\n=>\n\n{\n\n29\n\n.\n\non\n\n(\n\nEnableMFAEventOnReceived\n\n.\n\nInvalidMFAOtp\n\n,\n\n(\n\n{\n\nerrorCode\n\n}\n\n)\n\n=>\n\n{\n\n30\n\n\u2060\n\n// User entered invalid MFA TOTP\n\n30\n\n\u2060\n\n// User entered invalid MFA TOTP\n\n31\n\n31\n\n32\n\n// Have the user retry entering the MFA TOTP and emit via VerifyMFACode.\n\n32\n\n// Have the user retry entering the MFA TOTP and emit via VerifyMFACode.\n\n33\n\n// You may display error and limit retries by emitting Cancel.\n\n33\n\n// You may display error and limit retries by emitting Cancel.\n\n34\n\nhandle\n\n.\n\nemit\n\n(\n\nEnableMFAEventEmit\n\n.\n\nCancel\n\n)\n\n;\n\n34\n\nhandle\n\n.\n\nemit\n\n(\n\nEnableMFAEventEmit\n\n.\n\nCancel\n\n)\n\n;\n\n35\n\n}\n\n)\n\n35\n\n}\n\n)\n\n36\n\n.\n\non\n\n(\n\nEnableMFAEventOnReceived\n\n.\n\nMFARecoveryCodes\n\n,\n\n(\n\n{\n\nrecoveryCode\n\n}\n\n)\n\n=>\n\n{\n\n36\n\n.\n\non\n\n(\n\nEnableMFAEventOnReceived\n\n.\n\nMFARecoveryCodes\n\n,\n\n(\n\n{\n\nrecoveryCode\n\n}\n\n)\n\n=>\n\n{\n\n37\n\n// Enable MFA success, user entered valid MFA TOTP, display Recovery Code\n\n37\n\n// Enable MFA success, user entered valid MFA TOTP, display Recovery Code\n\n38\n\nwindow\n\n.\n\nalert\n\n(\n\n`\n\nMFA enabled! Recovery code -\n\n${\n\nrecoveryCode\n\n}\n\n`\n\n)\n\n;\n\n38\n\nwindow\n\n.\n\nalert\n\n(\n\n`\n\nMFA enabled! Recovery code -\n\n${\n\nrecoveryCode\n\n}\n\n`\n\n)\n\n;\n\n39\n\n}\n\n)\n\n39\n\n}\n\n)\n\n40\n\n.\n\non\n\n(\n\n'error'\n\n,\n\n(\n\nerror\n\n)\n\n=>\n\n{\n\n40\n\n.\n\non\n\n(\n\n'error'\n\n,\n\n(\n\nerror\n\n)\n\n=>\n\n{\n\n41\n\n\u2060\n\n// Handle enable MFA errors\n\n41\n\n\u2060\n\n// Handle enable MFA errors\n\n42\n\n\u2060\n\n)\n\n}\n\n;\n\n42\n\n\u2060\n\n)\n\n}\n\n;\n\n43\n\n}\n\ncatch\n\n{\n\n43\n\n}\n\ncatch\n\n{\n\n44\n\n// Handle errors if required!\n\n44\n\n// Handle errors if required!\n\n45\n\n}\n\n45\n\n}", "explanation": "This documentation section is titled '#Example' and it's about demonstrating how to enable Multi-Factor Authentication (MFA) using the Magic Labs embedded wallet.\n\nHere's a summary of what it does:\n\n1. It imports the necessary dependencies from the `magic-sdk` library.\n2. It creates an instance of the `Magic` class with a publishable API key.\n3. It enables MFA through the Magic UI by calling the `enableMFA()` method on the `user` object.\n4. It handles errors that may occur during the MFA enablement process.\n5. If the user enters invalid MFA TOTP, it prompts them to retry entering the code and emits a `VerifyMFACode` event.\n6. If the user enters valid MTF, it displays Recovery Code.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#getinfo#chunk-83", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nmfa-secret-generated\n\ninvalid-mfa-otp\n\nmfa-recovery-codes\n\nverify-mfa-code\n\nverify-mfa-code\n\nEmit to submit MFA TOTP submitted by user.\n\ncancel-mfa-setup\n\ncancel-mfa-setup\n\nEmit to cancel the MFA enable flow.", "explanation": "**Event Purpose and Explanation:**\n\nIn the context of the Magic Labs embedded wallet documentation, the '#Events' section represents a list of event types that can occur during the wallet's operation. These events are used to notify the wallet or an external application about specific user actions, system status, or errors.\n\n**Main Purpose:**\n\nThe main purpose of these events is to allow developers to create custom logic and responses to different user interactions, such as:\n\n* Handling Multi-Factor Authentication (MFA) setup and verification\n* Cancellation of MFA setup flow\n* Errors or invalid input during MFA setup\n\n**Event Breakdown:**\n\nHere is a brief explanation of each event:\n\n1. **mfa-secret-generated**: The user's MFA secret has been generated. This event is likely emitted when the user completes the MFA setup process.\n2. **invalid-mfa-otp**: The user-provided MFA code is invalid. This event is emitted when the user enters an incorrect MFA code.\n3. **mfa-recovery-codes**: Recovery codes for MFA have been generated. This event might be emitted when the user requires recovery codes for their MFA setup.\n4. **verify-mfa-code**: The user is verifying their MFA code. This event is likely emitted when the user is inputting their MFA code for verification.\n5. **cancel-mfa-setup**: The user has canceled the MFA setup flow. This event is emitted when the user decides to cancel the MFA setup process.\n\nBy listening to these events, developers can create a seamless and secure user experience for the Magic Labs embedded wallet.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#getinfo#chunk-84", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\ndisableMFA\n\nDisplays an iframe deep linked to the beginning of the disable MFA flow. This method assumes MFA has been enabled for the logged in user. This cannot be achieved by calling showSettings() .\n\nshowSettings()\n\nOnly available with Dedicated Wallet. Access to MFA require paid add-ons. Available as of magic-sdk v28.11.0\n\nMFA\n\nmagic-sdk v28.11.0\n\n#\n\n\u2022 showUI? (Boolean): If true, show an out-of-the-box UI to take user through flow to disable MFA. Defaults to true\n\nshowUI?\n\ntrue\n\ntrue", "explanation": "Here's a clear and concise explanation of the `#disableMFA` section from the Magic Labs documentation:\n\n**Purpose:** The `#disableMFA` section helps you display a flow to disable Multi-Factor Authentication (MFA) for a logged-in user.\n\n**Functionality:** This feature displays an iframe that initiates the MFA disabling process. It's available with the Dedicated Wallet and requires paid add-ons for access. This method assumes MFA has been enabled for the logged-in user.\n\n**Important Note:** To use this feature, you need to call `#disableMFA` directly, as attempting to disable MFA through `showSettings()` won't work.\n\n**Additional Parameter:** The `showUI?` parameter allows you to toggle the display of an out-of-the-box UI to guide the user through the MFA disabling process. By default, this parameter is set to `true`, showing the UI. If set to `false`, the flow will continue without an interactive UI.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#getinfo#chunk-85", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 Promise which resolves when the user closes the window\n\nPromise", "explanation": "The provided documentation section is about the `#Returns` section, which explains the expected outcome of calling a specific API method.\n\nIn this case, the `#Returns` section is describing the result of calling the `$getInfo()` method in the Magic Labs web client-side SDK.\n\n**Main Purpose:** The `#Returns` section is used to clearly outline what type of data is returned by a particular API method, so developers can accurately use this method in their applications.\n\n**Explanation:** The returned value is a \"Promise which resolves when the user closes the window\". This means that when the user closes the window, the promise will be resolved, and any code that is listening for this resolution will be executed.\n\nIn simpler terms, the API method returns a promise that resolves at the specific point when the user closes the window, which allows the developer to trigger actions or code at this specific point.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#getinfo#chunk-86", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\nimport\n\n{\n\n02\n\nimport\n\n{\n\n03\n\nDisableMFAEventEmit\n\n,\n\n03\n\nDisableMFAEventEmit\n\n,\n\n04\n\nDisableMFAEventOnReceived\n\n,\n\n04\n\nDisableMFAEventOnReceived\n\n,\n\n05\n\n}\n\nfrom\n\n'@magic-sdk/types'\n\n;\n\n05\n\n}\n\nfrom\n\n'@magic-sdk/types'\n\n;\n\n06\n\n06\n\n07\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n07\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n08\n\n08\n\n09\n\n// user disables MFA through Magic UI\n\n09\n\n// user disables MFA through Magic UI\n\n10\n\ntry\n\n{\n\n10\n\ntry\n\n{\n\n11\n\nawait\n\nmagic\n\n.\n\nuser\n\n.\n\ndisableMFA\n\n(\n\n)\n\n;\n\n11\n\nawait\n\nmagic\n\n.\n\nuser\n\n.\n\ndisableMFA\n\n(\n\n)\n\n;\n\n12\n\n}\n\ncatch\n\n{\n\n12\n\n}\n\ncatch\n\n{\n\n13\n\n// Handle errors if required!\n\n13\n\n// Handle errors if required!\n\n14\n\n}\n\n14\n\n}\n\n15\n\n15\n\n16\n\n// user disables MFA through whitelabel UI\n\n16\n\n// user disables MFA through whitelabel UI\n\n17\n\ntry\n\n{\n\n17\n\ntry\n\n{\n\n18\n\nconst\n\nhandle\n\n=\n\nmagic\n\n.\n\nuser\n\n.\n\ndisableMFA\n\n(\n\n{\n\nshowUI\n\n:\n\nfalse\n\n}\n\n)\n\n;\n\n18\n\nconst\n\nhandle\n\n=\n\nmagic\n\n.\n\nuser\n\n.\n\ndisableMFA\n\n(\n\n{\n\nshowUI\n\n:\n\nfalse\n\n}\n\n)\n\n;\n\n19\n\n19\n\n20\n\nhandle\n\n20\n\nhandle\n\n21\n\n.\n\non\n\n(\n\nDisableMFAEventOnReceived\n\n.\n\nMFACodeRequested\n\n,\n\n(\n\n)\n\n=>\n\n{\n\n21\n\n.\n\non\n\n(\n\nDisableMFAEventOnReceived\n\n.\n\nMFACodeRequested\n\n,\n\n(\n\n)\n\n=>\n\n{\n\n22\n\n\u2060\n\n// Prompt user for MFA TOTP and emit it to disable MFA\n\n22\n\n\u2060\n\n// Prompt user for MFA TOTP and emit it to disable MFA\n\n23\n\nconst\n\ntotp\n\n=\n\nwindow\n\n.\n\nprompt\n\n(\n\n'Submit MFA TOTP'\n\n)\n\n;\n\n23\n\nconst\n\ntotp\n\n=\n\nwindow\n\n.\n\nprompt\n\n(\n\n'Submit MFA TOTP'\n\n)\n\n;\n\n24\n\nhandle\n\n.\n\nemit\n\n(\n\nDisableMFAEventEmit\n\n.\n\nVerifyMFACode\n\n,\n\ntotp\n\n)\n\n;\n\n24\n\nhandle\n\n.\n\nemit\n\n(\n\nDisableMFAEventEmit\n\n.\n\nVerifyMFACode\n\n,\n\ntotp\n\n)\n\n;\n\n25\n\n25\n\n26\n\n// If user lost device and needs to recover with recovery code\n\n26\n\n// If user lost device and needs to recover with recovery code\n\n27\n\nconst\n\nrecoveryCode\n\n=\n\nwindow\n\n.\n\nprompt\n\n(\n\n'Enter Recovery Code'\n\n)\n\n;\n\n27\n\nconst\n\nrecoveryCode\n\n=\n\nwindow\n\n.\n\nprompt\n\n(\n\n'Enter Recovery Code'\n\n)\n\n;\n\n28\n\nhandle\n\n.\n\nemit\n\n(\n\nDisableMFAEventEmit\n\n.\n\nLostDevice\n\n,\n\nrecoveryCode\n\n)\n\n;\n\n28\n\nhandle\n\n.\n\nemit\n\n(\n\nDisableMFAEventEmit\n\n.\n\nLostDevice\n\n,\n\nrecoveryCode\n\n)\n\n;\n\n29\n\n}\n\n)\n\n29\n\n}\n\n)\n\n30\n\n.\n\non\n\n(\n\nDisableMFAEventOnReceived\n\n.\n\nInvalidMFAOtp\n\n,\n\n(\n\n{\n\nerrorCode\n\n}\n\n)\n\n=>\n\n{\n\n30\n\n.\n\non\n\n(\n\nDisableMFAEventOnReceived\n\n.\n\nInvalidMFAOtp\n\n,\n\n(\n\n{\n\nerrorCode\n\n}\n\n)\n\n=>\n\n{\n\n31\n\n\u2060\n\n// Handle user entered invalid MFA TOTP\n\n31\n\n\u2060\n\n// Handle user entered invalid MFA TOTP\n\n32\n\n32\n\n33\n\n// Have the user retry entering the MFA TOTP and emit via VerifyMFACode.\n\n33\n\n// Have the user retry entering the MFA TOTP and emit via VerifyMFACode.\n\n34\n\n// You may display error and limit retries by emitting Cancel.\n\n34\n\n// You may display error and limit retries by emitting Cancel.\n\n35\n\nhandle\n\n.\n\nemit\n\n(\n\nDisableMFAEventEmit\n\n.\n\nCancel\n\n)\n\n;\n\n35\n\nhandle\n\n.\n\nemit\n\n(\n\nDisableMFAEventEmit\n\n.\n\nCancel\n\n)\n\n;\n\n36\n\n}\n\n)\n\n36\n\n}\n\n)\n\n37\n\n.\n\non\n\n(\n\nDisableMFAEventOnReceived\n\n.\n\nInvalidRecoveryCode\n\n,\n\n(\n\n)\n\n=>\n\n{\n\n37\n\n.\n\non\n\n(\n\nDisableMFAEventOnReceived\n\n.\n\nInvalidRecoveryCode\n\n,\n\n(\n\n)\n\n=>\n\n{\n\n38\n\n// Handle user entered invalid Recovery Code\n\n38\n\n// Handle user entered invalid Recovery Code\n\n39\n\n\u2060\n\n39\n\n\u2060\n\n40\n\n// Have the user retry entering the Recovery Code and emit via LostDevice.\n\n40\n\n// Have the user retry entering the Recovery Code and emit via LostDevice.\n\n41\n\n// You may display error and limit retries by emitting Cancel.\n\n41\n\n// You may display error and limit retries by emitting Cancel.\n\n42\n\nhandle\n\n.\n\nemit\n\n(\n\nDisableMFAEventEmit\n\n.\n\nCancel\n\n)\n\n;\n\n42\n\nhandle\n\n.\n\nemit\n\n(\n\nDisableMFAEventEmit\n\n.\n\nCancel\n\n)\n\n;\n\n43\n\n}\n\n)\n\n43\n\n}\n\n)\n\n44\n\n.\n\non\n\n(\n\n'done'\n\n,\n\n(\n\n)\n\n=>\n\n{\n\n44\n\n.\n\non\n\n(\n\n'done'\n\n,\n\n(\n\n)\n\n=>\n\n{\n\n45\n\n\u2060\n\n// Handle successful disable MFA\n\n45\n\n\u2060\n\n// Handle successful disable MFA\n\n46\n\n}\n\n)\n\n46\n\n}\n\n)\n\n47\n\n.\n\non\n\n(\n\n'error'\n\n,\n\n(\n\nerror\n\n)\n\n=>\n\n{\n\n47\n\n.\n\non\n\n(\n\n'error'\n\n,\n\n(\n\nerror\n\n)\n\n=>\n\n{\n\n48\n\n\u2060\n\n// Handle disable MFA errors\n\n48\n\n\u2060\n\n// Handle disable MFA errors\n\n49\n\n\u2060\n\n)\n\n}\n\n;\n\n49\n\n\u2060\n\n)\n\n}\n\n;\n\n50\n\n}\n\ncatch\n\n{\n\n50\n\n}\n\ncatch\n\n{\n\n51\n\n// Handle errors if required!\n\n51\n\n// Handle errors if required!\n\n52\n\n}\n\n52\n\n}", "explanation": "**#Example Documentation Section**\n\nThis documentation section provides an example implementation of disabling Multi-Factor Authentication (MFA) using the Magic Labs embedded wallet. The example demonstrates how to disable MFA through both the Magic UI and a custom whitelabel UI.\n\n**Main Purpose:**\n\nThe main purpose of this example is to provide a reference implementation for developers who want to integrate the Magic Labs embedded wallet into their applications and disable MFA for users. The example showcases how to handle different scenarios, such as displaying MFA TOTP prompts, recovering with recovery codes, and handling errors.\n\n**Key Components:**\n\n* Importing the necessary modules from the `magic-sdk` and `@magic-sdk/types` packages\n* Initializing the Magic instance with a publishable API key\n* Disabling MFA through the Magic UI and a custom whitelabel UI\n* Handling MFA TOTP prompts, recovery codes, and errors using event listeners\n\n**Example Breakdown:**\n\nThe example consists of three main sections:\n\n1. **Initializing the Magic Instance**: The example imports the necessary modules, initializes the Magic instance with a publishable API key, and sets up event listeners for different events.\n2. **Disabling MFA through Magic UI**: The example demonstrates how to disable MFA through the Magic UI by calling the `disableMFA` method.\n3. **Disabling MFA through Whitelabel UI**: The example shows how to disable MFA through a custom whitelabel UI using the `disableMFA` method with the `showUI` option set to `false`.\n\n**Takeaways:**\n\nDevelopers can use this example as a starting point to integrate the Magic Labs embedded wallet into their applications and provide MFA disable functionality for users. The example highlights the importance of handling errors and edge cases when implementing the disable MFA feature.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#getinfo#chunk-87", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nmfa-code-requested\n\ninvalid-mfa-otp\n\ninvalid-recovery-code\n\nverify-mfa-code\n\nverify-mfa-code\n\nEmit to submit MFA TOTP submitted by user.\n\nlost-device\n\nlost-device\n\nEmit to submit Recovery Code submitted by user.\n\ncancel-mfa-disable\n\ncancel-mfa-disable\n\nEmit to cancel the MFA disable flow.", "explanation": "The '#Events' section in the Magic Labs embedded wallet documentation describes the various events that are triggered during the user authentication process using the Magic SDK. These events serve as notifications to inform your application about the user's actions and the progress of the authentication flow.\n\nThe main purpose of these events is to keep your application in sync with the user's actions, enabling you to provide a seamless and smooth user experience. Here's a breakdown of the events mentioned:\n\n1. **`mfa-code-requested`**: This event is triggered when the user is required to enter an MFA code to log in. It signals to your application that the user needs to enter a code.\n2. **`invalid-mfa-otp`**: This event is triggered when the user enters an invalid MFA OTP code.\n3. **`invalid-recovery-code`**: This event is triggered when the user enters an invalid recovery code.\n4. **`verify-mfa-code`**: This event (triggers twice as verified in the documentation code is to be submitted and confirmed) is triggered when the user successfully submits and verifies an MFA code.\n5. **`lost-device`**: This event triggers twice (it might be an duplication issue with the link) when the user submits a lost device recovery code.\n6. **`cancel-mfa-disable`**: This event is triggered when the user cancels the MFA disable flow.\n\nBy listening to these events, your application can:\n\n* Update the UI to reflect the user's actions (e.g., show a field for entering the MFA code).\n* Provide feedback to the user about the status of the authentication flow.\n* Handle invalid inputs (e.g., when the user enters an invalid MFA OTP code).\n* Update the application state to reflect the successful completion of the authentication flow.\n\nOverall, the events help you build a more interactive and user-friendly application by keeping you informed about the user's actions throughout the authentication process.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#getinfo#chunk-88", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nrevealPrivateKey\n\nDisplays an iframe revealing the current user\u2019s private key. Allows for users to take their private key to another wallet. Neither Magic nor the developer can see this key; only the end user can.\n\nOnly available with Dedicated Wallet.\n\n#\n\n\u2022 None", "explanation": "The '#revealPrivateKey' function is a feature available in the Magic Labs Dedicated Wallet. Its primary purpose is to provide users with the option to display and export their private key within the wallet.\n\nThis feature serves as a security measure, giving users control over their private keys. By accessing this function, users can reveal their private key within a secure iframe, allowing them to export and transfer it to another wallet. \n\nIt's essential to note that neither Magic nor the developer can access or see the private key during this process. This function ensures the user's control over their assets and provides a secure way to manage their private keys. \n\nTo use this feature, you need to have a Magic Labs Dedicated Wallet, and it is only available through the 'getInfo' API method.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#getinfo#chunk-89", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 Promise which resolves when the user closes the window\n\nPromise", "explanation": "In the provided documentation for the `getInfo()` function of Magic Labs embedded wallet, the '#Returns' section explains what the function returns. \n\nHere's a clear and concise breakdown:\n\n**Return Type:** A promise that resolves.\n\n**Purpose:** The promise resolves when the user closes the window.\n\nIn simpler terms, when a user, who is currently interacting with the Magic Labs embedded wallet (possibly going through authentication or other processes), closes the window or tab in their browser, the `getInfo()` function returns a resolved promise.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#getinfo#chunk-90", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\n02\n\n03\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n03\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n04\n\n04\n\n05\n\ntry\n\n{\n\n05\n\ntry\n\n{\n\n06\n\nawait\n\nmagic\n\n.\n\nuser\n\n.\n\nrevealPrivateKey\n\n(\n\n)\n\n;\n\n06\n\nawait\n\nmagic\n\n.\n\nuser\n\n.\n\nrevealPrivateKey\n\n(\n\n)\n\n;\n\n07\n\n}\n\ncatch\n\n{\n\n07\n\n}\n\ncatch\n\n{\n\n08\n\n// Handle errors if required!\n\n08\n\n// Handle errors if required!\n\n09\n\n}\n\n09\n\n}", "explanation": "**Section Overview:**\nThe provided documentation section is an example (hence the title '#Example') of how to integrate the Magic Labs embedded wallet with a web application. This explanation will focus on the code snippet itself.\n\n**Importing the Magic Labs SDK:**\nThe example begins by importing the Magic Labs SDK into a JavaScript file using ES Modules syntax (`import` statement). This line imports the required `Magic` class from the `magic-sdk` module:\n```javascript\nimport { Magic } from 'magic-sdk';\n```\n**Initializing the Magic Labs Wallet:**\nNext, it initializes the Magic Labs wallet using the `Magic` class, passing the publishable API key as an argument:\n```javascript\nconst magic = new Magic('PUBLISHABLE_API_KEY');\n```\n**Revealing a Private Key:**\nThe code then demonstrates how to use the `revealPrivateKey` method to reveal a user's private key. This method is called on the `user` object of the Magic Labs wallet instance:\n```javascript\ntry {\n  await magic.user.revealPrivateKey();\n} catch {\n  // Handle errors if required!\n}\n```\n**Best Practices:**\nNote that in a real-world application, error handling should be more robust and informative. In this example, it's solely demonstrating the syntax.\n\n**Main Purpose:**\nThe primary purpose of this example is to show developers how to set up and interact with the Magic Labs embedded wallet in a web application, specifically demonstrating how to initialize the wallet and reveal a user's private key.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#getinfo#chunk-91", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nrequestInfoWithUI\n\nUniversal wallets will soon be merged with Dedicated Wallets into a single product line. Universal apps created before February 7, 2024 will work as expected with no change. See our blog post to learn more.\n\nblog post\n\nDisplays the wallet widget within an iframe that prompts the user to consent to sharing information with the requesting dApp with OpenID profile scopes. Currently, the only profile scope that can be requested is a verified email. Collecting a verified email address from third-party wallet users (MetaMask, Coinbase Wallet, etc.) is a premium feature but included in the free trial period (see pricing). User must be signed in for this method to return or else it will throw an error.\n\nwallet widget\n\npricing\n\nOnly available with Universal Wallet.\n\n#\n\n\u2022 scope? (Object): The object containing requested OpenID profile scopesemail?: String : If the user should be prompted to provide them email as a required or optional field\n\nscope?\n\n\u2022 email?: String : If the user should be prompted to provide them email as a required or optional field\n\nemail?: String\n\nrequired\n\noptional", "explanation": "**requestInfoWithUI - Purpose and Explanation**\n\nThe `#requestInfoWithUI` method is used to display a wallet widget within an iframe, prompting the user to consent to sharing information with the requesting Decentralized Application (dApp) using OpenID profile scopes. The main purpose of this method is to collect verified user information, such as an email address, from third-party wallet users like MetaMask, Coinbase Wallet, and others.\n\n**Key Functionality**\n\n1. **User consent**: The user must be signed in for the method to return information; otherwise, it throws an error.\n2. **OpenID profile scopes**: Only a verified email scope is currently supported, with an optional email field for users to provide.\n3. **Verified email collection**: This feature is a premium option, but included in the free trial period (see pricing).\n\n**Important Considerations**\n\n* Available only with Universal Wallet\n* User consent is required for this method to return information\n* Error thrown if the user is not signed in\n* Only verified email is currently supported as an OpenID profile scope", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#getinfo#chunk-92", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 A promise which returns an Object: Contains result of the requested scopesemail?: String: The email of the user if they consented to providing it in the UI\n\npromise\n\nObject\n\n\u2022 email?: String: The email of the user if they consented to providing it in the UI\n\nemail?: String", "explanation": "**Understanding the '#Returns' Section**\n\nThe '#Returns' section from the Magic Labs documentation explains what information is returned after a user requests scopes via the Magic Labs Web SDK. In this case, it's the result of the requested scopes, specifically the user's email.\n\n**Key Points:**\n\n1. The function returns a **Promise**, which is a result or an action that occurs after a certain time.\n2. The **Object** returned within this promise contains the **result** of the requested scopes.\n3. The primary piece of information within this object is the **email** of the user, if they have **consented** to providing it. The email is represented as a **String** type.\n\n**Main Purpose:**\n\nThe '#Returns' section is essential because it tells developers what to expect when interacting with the Magic Labs Web SDK. By understanding the structure and content of the returned Promise, developers can write effective code to retrieve the intended user information, such as email addresses.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#getinfo#chunk-93", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n\"magic-sdk\"\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n\"magic-sdk\"\n\n02\n\n02\n\n03\n\n// after user has already logged in\n\n03\n\n// after user has already logged in\n\n04\n\nconst\n\nuserInfo\n\n=\n\nawait\n\nmagic\n\n.\n\nuser\n\n.\n\nrequestInfoWithUI\n\n(\n\n{\n\nscope\n\n:\n\n{\n\nemail\n\n:\n\n\"required\"\n\n}\n\n}\n\n)\n\n04\n\nconst\n\nuserInfo\n\n=\n\nawait\n\nmagic\n\n.\n\nuser\n\n.\n\nrequestInfoWithUI\n\n(\n\n{\n\nscope\n\n:\n\n{\n\nemail\n\n:\n\n\"required\"\n\n}\n\n}\n\n)\n\n05\n\n\u2060\n\nconsole\n\n.\n\nlog\n\n(\n\nuserInfo\n\n.\n\nemail\n\n)\n\n;\n\n// the user's email if they consented.\n\n05\n\n\u2060\n\nconsole\n\n.\n\nlog\n\n(\n\nuserInfo\n\n.\n\nemail\n\n)\n\n;\n\n// the user's email if they consented.", "explanation": "**Documentation Section: `#Example`**\n\nThe `#Example` section from the Magic Labs documentation URL https://magic.link/docs/api/client-side-sdks/web#getinfo provides a code snippet that demonstrates how to use the `requestInfoWithUI` method to retrieve a user's email address.\n\n**Main Purpose:**\n\nThe main purpose of this example is to illustrate how to authenticate a user, request their information (specifically, their email address) with user interface (UI) consent, and then log their email to the console.\n\n**Step-by-Step Breakdown:**\n\n1. Import the Magic SDK library.\n2. Use the `requestInfoWithUI` method to request the user's email address, specifying that the email address is required.\n3. Wait for the user to provide consent to share their email address.\n4. Log the user's email address to the console if they consented.\n\nThis example demonstrates a client-side SDK usage scenario where a user has already logged in and is requesting to share their email address with the application.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#getinfo#chunk-94", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nonUserLoggedOut\n\nWhen the useStorageCache is enabled, there might be situations where the isLoggedIn function returns true despite the user being logged out. In such instances, an event will be emitted after a few milliseconds, providing an opportunity to manage the user's logged-out state, such as when a session expires.\n\nOnly necessary with when the useStorageCache option is set to true.\n\nuseStorageCache\n\ntrue\n\n#\n\n\u2022 callback ((isLoggedOut: boolean) => void): The callback function when the event is emitted\n\ncallback\n\n(isLoggedOut: boolean) => void", "explanation": "Based on the provided documentation, the `# onUserLoggedOut` section explains a specific event emitted by the Magic Labs embedded wallet when a user is logged out, but the `isLoggedIn` function may still return `true` due to caching issues.\n\n**Purpose:**\nThe main purpose of the `onUserLoggedOut` event is to provide a callback function when the user is confirmed to be logged out, even if the `isLoggedIn` function takes a few milliseconds to update due to caching.\n\n**Key Points:**\n\n- The `onUserLoggedOut` event is only relevant when the `useStorageCache` option is set to `true`.\n- It's necessary to handle situations where `isLoggedIn` returns `true` incorrectly due to caching.\n- The `callback` function is invoked when the user is confirmed to be logged out, allowing developers to manage the user's logged-out state.\n\n**Example scenario:**\n\nWhen a user is logged out, but the `isLoggedIn` function still returns `true` because of caching:\n\n```javascript\nclient.onUserLoggedOut(isLoggedOut => {\n  if (isLoggedOut) {\n    // Update the application state to reflect the user is logged out\n    updateUserState();\n  }\n});\n```", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#getinfo#chunk-95", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 A function that can be called to unsubscribe from the event\n\nfunction", "explanation": "Based on the documentation from the given link, the '#Returns' section in the Magic Labs embedded wallet documentation is about a specific result or response that an API call will return when using the `GetInfo` endpoint in the Magic Labs SDK.\n\nHowever, the actual description in the '#Returns' section provided is incomplete: 'A function that can be called to unsubscribe from the event function'.\n\nIt seems you actually provided the function description for unsubscribe, this is the return of a function which handles information post call not the information post call itself.\n\nTo further clarify, let me correct you that an unsub Function or unsubscribe  function is a return of a function that works like a button off switch where we can use\nit to stop the event triggers that are using it.\n\nHere is a  revised and more detailed analysis in clear concise manner:\n\n The '#Returns' section in the Magic Labs embedded wallet documentation primarily discusses the return type of an API function. In this case, it's describing the return of an unsubscribe function, which is typically located in event listeners. When an unsubscribe function is called, it detaches the actual event listener function attached previously and can no longer trigger on the event.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#getinfo#chunk-96", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n\"magic-sdk\"\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n\"magic-sdk\"\n\n02\n\n02\n\n03\n\n\u2060\n\n// Create Magic instance with useStorageCache set to true\n\n03\n\n\u2060\n\n// Create Magic instance with useStorageCache set to true\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n,\n\n{\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n,\n\n{\n\n05\n\nuseStorageCache\n\n:\n\ntrue\n\n05\n\nuseStorageCache\n\n:\n\ntrue\n\n06\n\n}\n\n)\n\n;\n\n06\n\n}\n\n)\n\n;\n\n07\n\n07\n\n08\n\nmagic\n\n.\n\nuser\n\n.\n\nonUserLoggedOut\n\n(\n\n(\n\nisLoggedOut\n\n:\n\nboolean\n\n)\n\n=>\n\n{\n\n08\n\nmagic\n\n.\n\nuser\n\n.\n\nonUserLoggedOut\n\n(\n\n(\n\nisLoggedOut\n\n:\n\nboolean\n\n)\n\n=>\n\n{\n\n09\n\n// Do something when user is logged out\n\n09\n\n// Do something when user is logged out\n\n10\n\nnavigation\n\n.\n\nnavigate\n\n(\n\n'LoginScreen'\n\n)\n\n10\n\nnavigation\n\n.\n\nnavigate\n\n(\n\n'LoginScreen'\n\n)\n\n11\n\n}\n\n)\n\n11\n\n}\n\n)", "explanation": "**Documentation Section: Example**\n\nThe \"#Example\" section of the documentation is a code example that demonstrates how to use the Magic Labs embedded wallet using a JavaScript SDK. The main purpose of this example is to provide a tangible implementation of the `getInfo` function, which can be used to retrieve user information and handle login/out events in a web application.\n\n**Key Highlights:**\n\n1. **Creating a Magic instance**: The example shows how to create a Magic instance with the `useStorageCache` option set to `true`. This allows the SDK to cache user data locally, reducing the number of requests made to the server.\n2. **Handling user logout**: The example demonstrates how to use the `onUserLoggedOut` event to detect when the user logs out, triggering a navigation to the login screen.\n3. **SDK usage**: The example showcases how to use the Magic SDK to retrieve user information and interact with the wallet.\n\n**Main Purpose:**\n\nThe \"#Example\" section serves several purposes:\n\n1. **Code reference**: It provides a working code example that developers can use as a reference to integrate the Magic Labs embedded wallet into their web application.\n2. **SDK exploration**: The example allows developers to explore the Magic SDK's features and functionality, such as user data storage and event handling.\n3. **Troubleshooting**: By replicating the example code, developers can identify and troubleshoot issues related to Magic wallet integration.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#getinfo#chunk-97", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nThe OAuth Module and it's members are accessible on the Magic SDK instance by the oauth2 property.\n\noauth2\n\nTo use the OAuth Module in your application, install @magic-ext/oauth2 along with magic-sdk.\n\n@magic-ext/oauth2\n\nmagic-sdk\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\nimport\n\n{\n\nOAuthExtension\n\n}\n\nfrom\n\n'@magic-ext/oauth2'\n\n;\n\n02\n\nimport\n\n{\n\nOAuthExtension\n\n}\n\nfrom\n\n'@magic-ext/oauth2'\n\n;\n\n03\n\n03\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n,\n\n{\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n,\n\n{\n\n05\n\nextensions\n\n:\n\n[\n\nnew\n\nOAuthExtension\n\n(\n\n)\n\n]\n\n,\n\n05\n\nextensions\n\n:\n\n[\n\nnew\n\nOAuthExtension\n\n(\n\n)\n\n]\n\n,\n\n06\n\n}\n\n)\n\n;\n\n06\n\n}\n\n)\n\n;\n\n07\n\n07\n\n08\n\nmagic\n\n.\n\noauth2\n\n;\n\n08\n\nmagic\n\n.\n\noauth2\n\n;\n\n09\n\nmagic\n\n.\n\noauth2\n\n.\n\nloginWithRedirect\n\n;\n\n09\n\nmagic\n\n.\n\noauth2\n\n.\n\nloginWithRedirect\n\n;\n\n10\n\nmagic\n\n.\n\noauth2\n\n.\n\ngetRedirectResult\n\n;\n\n10\n\nmagic\n\n.\n\noauth2\n\n.\n\ngetRedirectResult\n\n;\n\n#\n\nloginWithRedirect\n\nStarts the OAuth 2.0 login flow.\n\nOnly available with Dedicated Wallet.\n\n#\n\n\u2022 provider (String): The OAuth provider being used for login\n\n\u2022 redirectURI (String): A URL a user is sent to after they successfully log in\n\n\u2022 scope? (Array): Defines the specific permissions an application requests from a user\n\nprovider\n\nredirectURI\n\nscope?", "explanation": "**OAuth Module - #loginWithRedirect - #Arguments**\n\nThe `loginWithRedirect` function is a part of the Magic Labs OAuth Module. Its primary purpose is to initiate the OAuth 2.0 login flow, redirecting the user to the chosen provider's login page.\n\n**Key Functionality:**\n\n1. Redirects the user to the chosen OAuth provider's login page.\n2. Manages the user's login flow, handling authentication and authorization.\n\n**Arguments:**\n\nThe `loginWithRedirect` function accepts the following arguments:\n\n1. **provider** (String): Specifies the OAuth provider being used for login (e.g., Google, Apple, Facebook).\n2. **redirectURI** (String): The URL where the user will be redirected after successful login.\n3. **scope?** (Array): An optional argument that defines the specific permissions your application requests from the user.\n\n**Main Purpose:**\n\nThe `loginWithRedirect` function is designed to start the OAuth 2.0 login flow, allowing your application to securely authenticate users using their social media or external accounts. This feature is available only with the Dedicated Wallet and can be integrated with various OAuth providers.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#getinfo#chunk-98", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 None", "explanation": "The `#Returns` section of the Magic Labs embedded wallet documentation is empty. This indicates that Magic Labs does not provide any information or values as a return result for this API method, specifically `GET /info`.\n\nIn other words, the main purpose of this section is to inform developers that there are no expected return values from this API endpoint.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#getinfo#chunk-99", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nGoogle\n\n'google'\n\n'google'\n\nGoogle demo\n\nGoogle demo\n\nFacebook\n\n'facebook'\n\n'facebook'\n\nFacebook demo\n\nFacebook demo\n\nTwitter\n\n'twitter'\n\n'twitter'\n\nTwitter demo\n\nTwitter demo\n\nApple\n\n'apple'\n\n'apple'\n\nApple demo\n\nApple demo\n\nDiscord\n\n'discord'\n\n'discord'\n\nDiscord demo\n\nDiscord demo\n\nGitHub\n\n'github'\n\n'github'\n\nGithub demo\n\nGithub demo\n\nLinkedIn\n\n'linkedin'\n\n'linkedin'\n\nLinkedIn demo\n\nLinkedIn demo\n\nBitbucket\n\n'bitbucket'\n\n'bitbucket'\n\nBitbucket demo\n\nBitbucket demo\n\nGitLab\n\n'gitlab'\n\n'gitlab'\n\nGitLab demo\n\nGitLab demo\n\nTwitch\n\n'twitch'\n\n'twitch'\n\nTwitch demo\n\nTwitch demo\n\nMicrosoft\n\n'microsoft'\n\n'microsoft'\n\nMicrosoft demo\n\nMicrosoft demo", "explanation": "**What is it about?**\n\nThe provided documentation section is titled '#Valid Providers' and lists various valid identity providers that the Magic Labs embedded wallet supports. Each provider is listed twice, with the first instance being the provider name in text format (e.g., \"Google\"), and the second instance being the provider name in the format required by the Magic API (e.g., \"'google'\").\n\n**Main purpose:**\n\nThe main purpose of the '#Valid Providers' section is to inform developers about the supported identity providers that users can log in with using the Magic Labs embedded wallet. This information enables developers to design user interfaces and login flows that accommodate these providers, providing users with a seamless and convenient login experience.\n\nBy including these provider names, the documentation helps developers ensure that their Magic API integrations are compliant and functional with the supported providers, reducing the likelihood of integration issues and technical obstacles.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#getinfo#chunk-100", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\nimport\n\n{\n\nOAuthExtension\n\n}\n\nfrom\n\n'@magic-ext/oauth2'\n\n;\n\n02\n\nimport\n\n{\n\nOAuthExtension\n\n}\n\nfrom\n\n'@magic-ext/oauth2'\n\n;\n\n03\n\n03\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n,\n\n{\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n,\n\n{\n\n05\n\nextensions\n\n:\n\n[\n\nnew\n\nOAuthExtension\n\n(\n\n)\n\n]\n\n,\n\n05\n\nextensions\n\n:\n\n[\n\nnew\n\nOAuthExtension\n\n(\n\n)\n\n]\n\n,\n\n06\n\n}\n\n)\n\n;\n\n06\n\n}\n\n)\n\n;\n\n07\n\n07\n\n08\n\nawait\n\nmagic\n\n.\n\noauth2\n\n.\n\nloginWithRedirect\n\n(\n\n{\n\n08\n\nawait\n\nmagic\n\n.\n\noauth2\n\n.\n\nloginWithRedirect\n\n(\n\n{\n\n09\n\nprovider\n\n:\n\n'...'\n\n/* 'google', 'facebook', 'apple', etc. */\n\n,\n\n09\n\nprovider\n\n:\n\n'...'\n\n/* 'google', 'facebook', 'apple', etc. */\n\n,\n\n10\n\nredirectURI\n\n:\n\n'https://your-app.com/your/oauth/callback'\n\n,\n\n10\n\nredirectURI\n\n:\n\n'https://your-app.com/your/oauth/callback'\n\n,\n\n11\n\nscope\n\n:\n\n[\n\n'user:email'\n\n]\n\n/* optional */\n\n,\n\n11\n\nscope\n\n:\n\n[\n\n'user:email'\n\n]\n\n/* optional */\n\n,\n\n12\n\n}\n\n)\n\n;\n\n12\n\n}\n\n)\n\n;", "explanation": "**Example Overview**\n\nThe provided documentation section titled '#Example' demonstrates how to use the Magic Labs embedded wallet in a web application to integrate OAuth login from popular providers like Google, Facebook, and Apple.\n\n**Main Purpose**\n\nThe example's main purpose is to showcase how to:\n\n1.  Import the necessary dependencies (Magic SDK and OAuth Extension) in a JavaScript file.\n2.  Initialize a Magic instance with a publishable API key and configure it to use the OAuth Extension for login functionality.\n3.  Use the `loginWithRedirect` method to initiate the OAuth login redirect to a specific provider (e.g., Google).\n4.  Redirect the user back to your application after completing the OAuth flow, allowing you to retrieve the user's authentication information.\n\n**Key Points to Note**\n\n*   The example uses async/await syntax to handle asynchronous operations, which simplifies the code and makes it easier to read.\n*   The `OAuthExtension` is used to configure the OAuth login functionality, and the `loginWithRedirect` method is called to initiate the redirect to the chosen provider.\n*   The example assumes that you have replaced `'PUBLISHABLE_API_KEY'` with your actual Magic Labs publishable API key.\n*   You should also replace `'https://your-app.com/your/oauth/callback'` with the actual callback URL in your application.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#getinfo#chunk-101", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\ngetRedirectResult\n\nReturns the final OAuth 2.0 result.\n\nOnly available with Dedicated Wallet.\n\n#\n\n\u2022 lifespan? (Number): Set the lifespan of the resolved Decentralize ID token. Defaults to 900s (15 mins)\n\nlifespan?", "explanation": "The '#getRedirectResult - #Arguments' section from the Magic Labs embedded wallet documentation is focused on the `getRedirectResult` function.\n\n**Purpose:** \nThe main purpose of the `getRedirectResult` function is to retrieve the final OAuth 2.0 result after the redirect from Magic Labs embedded wallet.\n\n**Key Point:** This function is only available with Dedicated Wallet, not with the standard Wallet.\n\n**Explanation:** When the user interacts with the Magic Labs embedded wallet, they may be redirected to a URL after a particular interaction or action. The `getRedirectResult` function can be used to get the final OAuth 2.0 result from that redirect URL. This result is typically the Decentralized ID token.\n\n**Main Argument:** One argument is allowed:\n\n- **lifespan?** (Number): This argument sets the lifespan of the resolved Decentralized ID token in seconds. If not provided, it defaults to 900 seconds, which is 15 minutes.\n\nIn summary, the `getRedirectResult` function with the `lifespan?` argument is used to manage the lifetime of the Decentralized ID token obtained through the redirect process in a Magic Labs Dedicated Wallet.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#getinfo#chunk-102", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 PromiEvent<object>:\u2060magic (Object): Information about the authenticated Magic user. Comprised of idToken and userMetadata.oauth (Object): Information about the authenticated OAuth user. Comprised of accessToken, provider, scope, userHandle, and userInfo.\n\nPromiEvent<object>\n\n\u2022 \u2060magic (Object): Information about the authenticated Magic user. Comprised of idToken and userMetadata.\n\n\u2022 oauth (Object): Information about the authenticated OAuth user. Comprised of accessToken, provider, scope, userHandle, and userInfo.\n\nmagic\n\nidToken\n\nuserMetadata\n\noauth\n\naccessToken\n\nprovider\n\nscope\n\nuserHandle\n\nuserInfo", "explanation": "In the Magic Labs embedded wallet documentation, the '#Returns' section explains the structure and content of the response received when calling the `getInfo` API method.\n\n**Purpose:** The primary goal of this section is to inform developers about the expected response format, including the properties and values that are returned when a user is successfully authenticated and a request for their information (`getInfo`) is made.\n\n**Main Content:**\n\nThe 'Returns' section outlines the response as a PromiEvent object containing two main properties:\n\n1. **magic (Object)**: This object contains information about the authenticated Magic user, comprising two sub-properties:\n   * **idToken**: a string representing the authenticated user's ID token.\n   * **userMetadata**: an object with additional metadata about the authenticated user.\n\n2. **oauth (Object)**: This object contains information about the authenticated OAuth user, consisting of five sub-properties:\n   * **accessToken**: a string representing the access token for the authenticated user.\n   * **provider**: a string indicating the OAuth provider used for authentication.\n   * **scope**: a string representing the authorization scope for the authenticated user.\n   * **userHandle**: a string used to identify the authenticated user.\n   * **userInfo**: an object containing more detailed information about the authenticated user.\n\nBy familiarizing themselves with this section, developers can write robust and accurate code that handles the expected response format and utilizes the returned information as needed.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#getinfo#chunk-103", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\nimport\n\n{\n\nOAuthExtension\n\n}\n\nfrom\n\n'@magic-ext/oauth2'\n\n;\n\n02\n\nimport\n\n{\n\nOAuthExtension\n\n}\n\nfrom\n\n'@magic-ext/oauth2'\n\n;\n\n03\n\n03\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n,\n\n{\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n,\n\n{\n\n05\n\nextensions\n\n:\n\n[\n\nnew\n\nOAuthExtension\n\n(\n\n)\n\n]\n\n,\n\n05\n\nextensions\n\n:\n\n[\n\nnew\n\nOAuthExtension\n\n(\n\n)\n\n]\n\n,\n\n06\n\n}\n\n)\n\n;\n\n06\n\n}\n\n)\n\n;\n\n07\n\n07\n\n08\n\n// optionally pass in number to method to set Decentralized ID token lifespan\n\n08\n\n// optionally pass in number to method to set Decentralized ID token lifespan\n\n09\n\nconst\n\nresult\n\n=\n\nawait\n\nmagic\n\n.\n\noauth2\n\n.\n\ngetRedirectResult\n\n(\n\n)\n\n;\n\n09\n\nconst\n\nresult\n\n=\n\nawait\n\nmagic\n\n.\n\noauth2\n\n.\n\ngetRedirectResult\n\n(\n\n)\n\n;\n\n10\n\n10\n\n11\n\n// Result has the following interface\n\n11\n\n// Result has the following interface\n\n12\n\ninterface\n\nOAuthRedirectResult\n\n{\n\n12\n\ninterface\n\nOAuthRedirectResult\n\n{\n\n13\n\nmagic\n\n:\n\n{\n\n13\n\nmagic\n\n:\n\n{\n\n14\n\nidToken\n\n:\n\nstring\n\n;\n\n14\n\nidToken\n\n:\n\nstring\n\n;\n\n15\n\nuserMetadata\n\n:\n\nMagicUserMetadata\n\n;\n\n15\n\nuserMetadata\n\n:\n\nMagicUserMetadata\n\n;\n\n16\n\n}\n\n,\n\n16\n\n}\n\n,\n\n17\n\noauth\n\n:\n\n{\n\n17\n\noauth\n\n:\n\n{\n\n18\n\nprovider\n\n:\n\nstring\n\n;\n\n18\n\nprovider\n\n:\n\nstring\n\n;\n\n19\n\nscope\n\n:\n\nstring\n\n[\n\n]\n\n;\n\n19\n\nscope\n\n:\n\nstring\n\n[\n\n]\n\n;\n\n20\n\naccessToken\n\n:\n\nstring\n\n;\n\n20\n\naccessToken\n\n:\n\nstring\n\n;\n\n21\n\nuserHandle\n\n:\n\nstring\n\n;\n\n21\n\nuserHandle\n\n:\n\nstring\n\n;\n\n22\n\nuserInfo\n\n:\n\n...\n\n;\n\n22\n\nuserInfo\n\n:\n\n...\n\n;\n\n23\n\n}\n\n23\n\n}\n\n24\n\n}\n\n;\n\n24\n\n}\n\n;", "explanation": "**Section Overview:**\n\nThe provided documentation section is an example code snippet, referred to as \"#Example\", which demonstrates how to use the Magic Labs SDK to retrieve user information using the OAuth2 redirect flow.\n\n**Main Purpose:**\n\nThe main purpose of this example is to showcase the usage of the `Magic` class and its `oauth2` methods, specifically `getRedirectResult`, to obtain an OAuth redirect result. This result contains user information, including their identity token, user metadata, and access token.\n\n**Key Components:**\n\n1. Importing necessary modules (`magic-sdk` and `@magic-ext/oauth2`)\n2. Creating a new instance of the `Magic` class with a publishable API key and OAuth extension\n3. Using the `oauth2` methods (`getRedirectResult`) to obtain user information\n4. Displaying the structure of the returned `OAuthRedirectResult` interface\n\n**Example Flow:**\n\n1. The user is first redirected to an authorization URL to authenticate with a connected provider.\n2. After authorization, the user is redirected back to the client application with an `idToken` parameter.\n3. The client application uses the provided `idToken` to obtain an `OAuthRedirectResult` object.\n4. The `OAuthRedirectResult` object contains user information, which is accessed through its properties (e.g., `idToken`, `userMetadata`, `provider`, `accessToken`).\n\n**Code Takeaways:**\n\n* The example code uses ES modules to import the necessary dependencies.\n* The `Magic` class instance is created with a publishable API key and an OAuth extension.\n* The `getRedirectResult` method is used to obtain user information.\n* The `OAuthRedirectResult` interface is displayed, showcasing the structure of the returned object.\n\nThis example provides a practical demonstration of using the Magic Labs SDK to integrate OAuth2 redirect flow and obtain user information.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#getinfo#chunk-104", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nThis module requires an enterprise agreement. For more details click here.\n\nclick here\n\nThe OpenID Module and it's members are accessible on the Magic SDK instance by the openid property.\n\nopenid\n\nTo use the OpenID Module in your application, install @magic-ext/oidc along with magic-sdk.\n\n@magic-ext/oidc\n\nmagic-sdk\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\nimport\n\n{\n\nOpenIdExtension\n\n}\n\nfrom\n\n'@magic-ext/oidc'\n\n;\n\n02\n\nimport\n\n{\n\nOpenIdExtension\n\n}\n\nfrom\n\n'@magic-ext/oidc'\n\n;\n\n03\n\n03\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n,\n\n{\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n,\n\n{\n\n05\n\nextensions\n\n:\n\n[\n\nnew\n\nOpenIdExtension\n\n(\n\n)\n\n]\n\n,\n\n05\n\nextensions\n\n:\n\n[\n\nnew\n\nOpenIdExtension\n\n(\n\n)\n\n]\n\n,\n\n06\n\n}\n\n)\n\n;\n\n06\n\n}\n\n)\n\n;\n\n07\n\n07\n\n08\n\nmagic\n\n.\n\nopenid\n\n;\n\n08\n\nmagic\n\n.\n\nopenid\n\n;\n\n09\n\nmagic\n\n.\n\nopenid\n\n.\n\nloginWithOIDC\n\n;\n\n09\n\nmagic\n\n.\n\nopenid\n\n.\n\nloginWithOIDC\n\n;\n\n#\n\nloginWithOIDC\n\nAuthenticate users via your preferred OIDC client.\n\nOnly available with Dedicated Wallet.\n\n#\n\n\u2022 jwt (String): The OIDC token from your identity provider.\n\n\u2022 providerId (String): An alphanumeric ID provided by Magic after successful configuration of your identity provider.\n\n\u2022 lifespan? (Number): Set the lifespan of the resolved Decentralize ID token. Defaults to 900s (15 mins)\n\njwt\n\nproviderId\n\nlifespan?", "explanation": "**Overview of the OpenID Module (`openid` property)**\n\nThe OpenID Module is a feature in the Magic Labs embedded wallet SDK that allows users to authenticate via their preferred OIDC (OpenID Connect) client. This module is accessible via the `openid` property on the Magic SDK instance.\n\n**Requirements and Installation**\n\nTo use the OpenID Module, you need an enterprise agreement and must install the `@magic-ext/oidc` package alongside `magic-sdk`.\n\n**Importing the OpenID Module and Creating an Instance**\n\nHere's an example of how to import the OpenID Module and create an instance of the Magic SDK with the OpenID extension:\n```javascript\nimport { Magic } from 'magic-sdk';\nimport { OpenIdExtension } from '@magic-ext/oidc';\n\nconst magic = new Magic('PUBLISHABLE_API_KEY', {\n  extensions: [new OpenIdExtension()]\n});\n```\n**Purpose of `loginWithOIDC`**\n\nThe `loginWithOIDC` method is the main function of the OpenID Module. It authenticates users using their OIDC token from an identity provider.\n\n**Arguments for `loginWithOIDC`**\n\nThe `loginWithOIDC` method takes the following arguments:\n\n* `jwt` (String): The OIDC token from your identity provider.\n* `providerId` (String): An alphanumeric ID provided by Magic after successful configuration of your identity provider.\n* `lifespan?` (Number): The lifespan of the resolved Decentralized ID (DID) token in seconds (default: 900 or 15 minutes).\n\n**Example Use Case**\n\nHere's an example of how to use the `loginWithOIDC` method:\n```javascript\nmagic.openid.loginWithOIDC({\n  jwt: 'oidc_token_from_your_identity_provider',\n  providerId: 'provider_id_provided_by_magic',\n  lifespan: 3600 // 1 hour lifespan for the DID token\n})\n```\nBy using the OpenID Module with `loginWithOIDC`, you can authenticate users via their OIDC client and retrieve their Decentralized ID.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#getinfo#chunk-105", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 PromiEvent<string | null>: The promise resolves upon authentication request success and rejects with a specific error code if the request fails. The resolved value is a Decentralized ID token with a default 15-minute lifespan.\n\nPromiEvent<string | null>", "explanation": "The \"#Returns\" section is about the expected outcome of the `getInfo()` API call, specifically the shape of the return value.\n\n**Purpose:** The `getInfo()` API call, which is part of the Magic Labs embedded wallet documentation, returns a Decentralized ID (DID) token if the authentication request is successful. The DID token has a default lifespan of 15 minutes.\n\n**Outcome:**\n\n* If the authentication request is successful, the promise resolves with a Decentralized ID (DID) token.\n* If the request fails, the promise rejects with a specific error code.\n* The return value is a string or null, where a null value indicates an error.\n\nIn simple terms, after calling `getInfo()`, you can expect to receive a valid DID token if the user has successfully authenticated, or an error code if there's an issue with the request.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#getinfo#chunk-106", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\nimport\n\n{\n\nOpenIdExtension\n\n}\n\nfrom\n\n'@magic-ext/oidc'\n\n;\n\n02\n\nimport\n\n{\n\nOpenIdExtension\n\n}\n\nfrom\n\n'@magic-ext/oidc'\n\n;\n\n03\n\n03\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n,\n\n{\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n,\n\n{\n\n05\n\nextensions\n\n:\n\n[\n\nnew\n\nOpenIdExtension\n\n(\n\n)\n\n]\n\n,\n\n05\n\nextensions\n\n:\n\n[\n\nnew\n\nOpenIdExtension\n\n(\n\n)\n\n]\n\n,\n\n06\n\n}\n\n)\n\n;\n\n06\n\n}\n\n)\n\n;\n\n07\n\n07\n\n08\n\nconst\n\nDID\n\n=\n\nawait\n\nmagic\n\n.\n\nopenid\n\n.\n\nloginWithOIDC\n\n(\n\n{\n\n08\n\nconst\n\nDID\n\n=\n\nawait\n\nmagic\n\n.\n\nopenid\n\n.\n\nloginWithOIDC\n\n(\n\n{\n\n09\n\n// this oidcToken comes from the identity provider\n\n09\n\n// this oidcToken comes from the identity provider\n\n10\n\njwt\n\n:\n\noidcToken\n\n,\n\n10\n\njwt\n\n:\n\noidcToken\n\n,\n\n11\n\n// this providerId is provided by Magic\n\n11\n\n// this providerId is provided by Magic\n\n12\n\nproviderId\n\n:\n\nmyProviderId\n\n,\n\n12\n\nproviderId\n\n:\n\nmyProviderId\n\n,\n\n13\n\n// this optional argument sets the resolved Decentralized ID token's lifespan\n\n13\n\n// this optional argument sets the resolved Decentralized ID token's lifespan\n\n14\n\nlifespan\n\n:\n\nnumber\n\n14\n\nlifespan\n\n:\n\nnumber\n\n15\n\n}\n\n)\n\n;\n\n15\n\n}\n\n)\n\n;", "explanation": "**Documentation Explanation**\n\nThe provided documentation section is titled '#Example' and demonstrates how to use the Magic Labs Web SDK to perform a Decentralized ID (DID) login using OpenID Connect (OIDC). Here's a breakdown of the example code:\n\n**Purpose**\n\nThe main purpose of this example is to showcase how to initiate a DID login flow with OIDC. The example code sets up a Magic Labs instance, uses the OpenID Extension to handle OIDC login, and retrieves a Decentralized ID (DID) after successful authentication.\n\n**Key Steps**\n\n1. **Importing Libraries**: The example imports the Magic Labs SDK and the OpenID Extension library.\n2. **Creating a Magic Labs Instance**: It creates a new Magic Labs instance with a publishable API key and the OpenID Extension.\n3. **Logging in with OIDC**: The code uses the `loginWithOIDC` method to initiate an OIDC login flow. It provides an OIDC token (obtained from an identity provider) and a provider ID (provided by Magic Labs).\n4. **Retrieving Decentralized ID (DID)**: After successful OIDC login, the code retrieves the associated Decentralized ID (DID).\n\n**Context**\n\nThis example is likely used in scenarios where authentication is required, such as:\n\n* Integrating Magic Labs with an existing application\n* Using Decentralized IDs (DIDs) for secure authentication\n* Implementing OpenID Connect (OIDC) login flows", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#getinfo#chunk-107", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nThe WebAuthn Module and it's members are accessible on the Magic SDK instance by the webauthn property.\n\nwebauthn\n\nTo use the WebAuthn Module in your application, install @magic-ext/webauthn along with magic-sdk.\n\n@magic-ext/webauthn\n\nmagic-sdk\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\nimport\n\n{\n\nWebAuthnExtension\n\n}\n\nfrom\n\n'@magic-ext/webauthn'\n\n;\n\n02\n\nimport\n\n{\n\nWebAuthnExtension\n\n}\n\nfrom\n\n'@magic-ext/webauthn'\n\n;\n\n03\n\n03\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n,\n\n{\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n,\n\n{\n\n05\n\nextensions\n\n:\n\n[\n\nnew\n\nWebAuthnExtension\n\n(\n\n)\n\n]\n\n,\n\n05\n\nextensions\n\n:\n\n[\n\nnew\n\nWebAuthnExtension\n\n(\n\n)\n\n]\n\n,\n\n06\n\n}\n\n)\n\n;\n\n06\n\n}\n\n)\n\n;\n\n07\n\n07\n\n08\n\nmagic\n\n.\n\nwebauthn\n\n;\n\n08\n\nmagic\n\n.\n\nwebauthn\n\n;\n\n09\n\nmagic\n\n.\n\nwebauthn\n\n.\n\nregisterNewUser\n\n;\n\n09\n\nmagic\n\n.\n\nwebauthn\n\n.\n\nregisterNewUser\n\n;\n\n10\n\nmagic\n\n.\n\nwebauthn\n\n.\n\nlogin\n\n;\n\n10\n\nmagic\n\n.\n\nwebauthn\n\n.\n\nlogin\n\n;\n\n11\n\nmagic\n\n.\n\nwebauthn\n\n.\n\ngetMetadata\n\n;\n\n11\n\nmagic\n\n.\n\nwebauthn\n\n.\n\ngetMetadata\n\n;\n\n12\n\nmagic\n\n.\n\nwebauthn\n\n.\n\nregisterNewDevice\n\n;\n\n12\n\nmagic\n\n.\n\nwebauthn\n\n.\n\nregisterNewDevice\n\n;\n\n13\n\nmagic\n\n.\n\nwebauthn\n\n.\n\nupdateInfo\n\n;\n\n13\n\nmagic\n\n.\n\nwebauthn\n\n.\n\nupdateInfo\n\n;\n\n14\n\nmagic\n\n.\n\nwebauthn\n\n.\n\nunregisterDevice\n\n;\n\n14\n\nmagic\n\n.\n\nwebauthn\n\n.\n\nunregisterDevice\n\n;\n\n#\n\nregisterNewUser\n\nRegisters a new WebAuthn user.\n\nOnly available with Dedicated Wallet.\n\n#\n\n\u2022 username (String): The username to register with\n\n\u2022 nickname? (String): The nickname of the WebAuthn device the user wants to set\n\nusername\n\nnickname?", "explanation": "**WebAuthn Module: #registerNewUser - #Arguments**\n\nThe `registerNewUser` method is part of the WebAuthn Module, allowing users to register a new user on a Magic Labs embedded wallet, specifically through the Dedicated Wallet.\n\n**Main Purpose:**\n\nThe main purpose of `registerNewUser` is to create a new WebAuthn user account. This method is only available when using a Dedicated Wallet.\n\n**Arguments:**\n\nThe `registerNewUser` method accepts two arguments:\n\n1. **username (String):** The username to register with.\n2. **nickname (String, optional):** The nickname of the WebAuthn device the user wants to set. This is an optional argument.\n\n**Usage:**\n\nTo use `registerNewUser`, you must first initialize the Magic SDK with the WebAuthn extension, as shown in the provided documentation. Then, you can call `magic.webauthn.registerNewUser` and pass in the required `username` and optional `nickname` arguments.\n\nFor example:\n```javascript\nconst magic = new Magic('PUBLISHABLE_API_KEY', {\n  extensions: [new WebAuthnExtension()],\n});\n\nmagic\n  .webauthn\n  .registerNewUser({\n    username: 'newuser',\n    nickname: 'My WebAuthn Device', // optional\n  })\n  .then((result) => {\n    // Handle the result, e.g., save the user ID or other relevant data.\n  })\n  .catch((error) => {\n    // Handle any errors that occur during registration.\n  });\n```", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#getinfo#chunk-108", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 PromiEvent<string | null>: The promise resolves upon authentication request success and rejects with a specific error code if the request fails. The resolved value is a Decentralized ID token with a default 15-minute lifespan.\n\nPromiEvent<string | null>", "explanation": "**Returns Section: A Breakdown**\n\nThe Returns section is a part of the `getInfo` method's documentation in the Magic Labs' embedded wallet web SDK. It explains what happens after the authentication request is completed.\n\n**Main Purpose:**\n\nThe main purpose of this section is to inform developers about what they can expect to receive from the `getInfo` method, both upon success and failure.\n\n**Explanation:**\n\nWhen a user authenticates successfully, the `getInfo` method returns a promise that resolves with a Decentralized ID (Delegated ID) token. This token has a default lifespan of 15 minutes, allowing you to verify the user's identity for a limited time.\n\nIf the authentication request fails, the promise rejects with a specific error code, which can be handled by the developer to display relevant error messages and take corrective actions.\n\nIn summary, the Returns section is a contractual agreement between the Magic Labs embedded wallet web SDK and your application, clearly outlining what happens after the authentication request is processed. This helps developers anticipate and manage the outcome, ensuring a smooth user experience.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#getinfo#chunk-109", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\nimport\n\n{\n\nWebAuthnExtension\n\n}\n\nfrom\n\n'@magic-ext/webauthn'\n\n;\n\n02\n\nimport\n\n{\n\nWebAuthnExtension\n\n}\n\nfrom\n\n'@magic-ext/webauthn'\n\n;\n\n03\n\n03\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR API KEY'\n\n,\n\n{\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR API KEY'\n\n,\n\n{\n\n05\n\nextensions\n\n:\n\n[\n\nnew\n\nWebAuthnExtension\n\n(\n\n)\n\n]\n\n,\n\n05\n\nextensions\n\n:\n\n[\n\nnew\n\nWebAuthnExtension\n\n(\n\n)\n\n]\n\n,\n\n06\n\n}\n\n)\n\n;\n\n06\n\n}\n\n)\n\n;\n\n07\n\n07\n\n08\n\n// register a user by their username\n\n08\n\n// register a user by their username\n\n09\n\ntry\n\n{\n\n09\n\ntry\n\n{\n\n10\n\nconst\n\ntoken\n\n=\n\nawait\n\nmagic\n\n.\n\nwebauthn\n\n.\n\nregisterNewUser\n\n(\n\n{\n\nusername\n\n:\n\n'username'\n\n}\n\n)\n\n;\n\n10\n\nconst\n\ntoken\n\n=\n\nawait\n\nmagic\n\n.\n\nwebauthn\n\n.\n\nregisterNewUser\n\n(\n\n{\n\nusername\n\n:\n\n'username'\n\n}\n\n)\n\n;\n\n11\n\n}\n\ncatch\n\n(\n\ne\n\n)\n\n{\n\n11\n\n}\n\ncatch\n\n(\n\ne\n\n)\n\n{\n\n12\n\n// Handle errors if required!\n\n12\n\n// Handle errors if required!\n\n13\n\n}\n\n13\n\n}\n\n14\n\n14\n\n15\n\n// log in a user by their username and set webauthn device nickname.\n\n15\n\n// log in a user by their username and set webauthn device nickname.\n\n16\n\ntry\n\n{\n\n16\n\ntry\n\n{\n\n17\n\nconst\n\ntoken\n\n=\n\nawait\n\nmagic\n\n.\n\nwebauthn\n\n.\n\nregisterNewUser\n\n(\n\n{\n\nusername\n\n:\n\n'username'\n\n,\n\nnickname\n\n:\n\n'nickname'\n\n}\n\n)\n\n;\n\n17\n\nconst\n\ntoken\n\n=\n\nawait\n\nmagic\n\n.\n\nwebauthn\n\n.\n\nregisterNewUser\n\n(\n\n{\n\nusername\n\n:\n\n'username'\n\n,\n\nnickname\n\n:\n\n'nickname'\n\n}\n\n)\n\n;\n\n18\n\n}\n\ncatch\n\n(\n\ne\n\n)\n\n{\n\n18\n\n}\n\ncatch\n\n(\n\ne\n\n)\n\n{\n\n19\n\n// Handle errors if required!\n\n19\n\n// Handle errors if required!\n\n20\n\n}\n\n20\n\n}", "explanation": "**Example Purpose and Explanation**\n\nThe provided code snippet is an example from the Magic Labs documentation, demonstrating how to use the Magic SDK with WebAuthn extension to register and log in a user. The main purpose of this example is to showcase the usage of the Magic client-side SDK with WebAuthn for user authentication.\n\n**Key Components:**\n\n1. **Importing necessary modules**: The example imports the Magic SDK and the WebAuthn extension, essential for the demonstration.\n2. **Initializing the Magic instance**: A new Magic instance is created, passing the API key and an object with the WebAuthn extension.\n3. **Registering a user**: The example shows how to register a new user using the `registerNewUser` method of the WebAuthn extension, passing a username and optional nickname.\n4. **Error handling**: The code includes try-catch blocks to handle any potential errors that may occur during the registration and logging in process.\n\n**Benefits of this Example:**\n\nThis example serves as a starting point for developers to understand how to integrate the Magic SDK with WebAuthn for user authentication. It:\n\n1. Simplifies the implementation process by providing a clear and concise code snippet.\n2. Helps developers understand the importance of error handling in their application.\n3. Allows for experimentation and customization to suit the specific requirements of the project.\n\nBy following this example, developers can efficiently integrate the Magic WebAuthn extension into their applications, providing a secure and user-friendly authentication experience.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#getinfo#chunk-110", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n,\n\nSDKErrorCode\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n,\n\nSDKErrorCode\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\nimport\n\n{\n\nWebAuthnExtension\n\n}\n\nfrom\n\n'@magic-ext/webauthn'\n\n;\n\n02\n\nimport\n\n{\n\nWebAuthnExtension\n\n}\n\nfrom\n\n'@magic-ext/webauthn'\n\n;\n\n03\n\n03\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR API KEY'\n\n,\n\n{\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR API KEY'\n\n,\n\n{\n\n05\n\nextensions\n\n:\n\n[\n\nnew\n\nWebAuthnExtension\n\n(\n\n)\n\n]\n\n,\n\n05\n\nextensions\n\n:\n\n[\n\nnew\n\nWebAuthnExtension\n\n(\n\n)\n\n]\n\n,\n\n06\n\n}\n\n)\n\n;\n\n06\n\n}\n\n)\n\n;\n\n07\n\n07\n\n08\n\ntry\n\n{\n\n08\n\ntry\n\n{\n\n09\n\nawait\n\nmagic\n\n.\n\nwebauthn\n\n.\n\nregisterNewUser\n\n(\n\n{\n\nusername\n\n:\n\n'username'\n\n}\n\n)\n\n;\n\n09\n\nawait\n\nmagic\n\n.\n\nwebauthn\n\n.\n\nregisterNewUser\n\n(\n\n{\n\nusername\n\n:\n\n'username'\n\n}\n\n)\n\n;\n\n10\n\n}\n\ncatch\n\n(\n\nerr\n\n)\n\n{\n\n10\n\n}\n\ncatch\n\n(\n\nerr\n\n)\n\n{\n\n11\n\nif\n\n(\n\nerr\n\ninstanceof\n\nSDKErrorCode\n\n)\n\n{\n\n11\n\nif\n\n(\n\nerr\n\ninstanceof\n\nSDKErrorCode\n\n)\n\n{\n\n12\n\nswitch\n\n(\n\nerr\n\n.\n\ncode\n\n)\n\n{\n\n12\n\nswitch\n\n(\n\nerr\n\n.\n\ncode\n\n)\n\n{\n\n13\n\ncase\n\nSDKErrorCode\n\n.\n\nWebAuthnNotSupported\n\n:\n\n13\n\ncase\n\nSDKErrorCode\n\n.\n\nWebAuthnNotSupported\n\n:\n\n14\n\ncase\n\nSDKErrorCode\n\n.\n\nWebAuthnCreateCredentialError\n\n:\n\n14\n\ncase\n\nSDKErrorCode\n\n.\n\nWebAuthnCreateCredentialError\n\n:\n\n15\n\n// Handle errors accordingly :)\n\n15\n\n// Handle errors accordingly :)\n\n16\n\nbreak\n\n;\n\n16\n\nbreak\n\n;\n\n17\n\n}\n\n17\n\n}\n\n18\n\n}\n\n18\n\n}\n\n19\n\n}\n\n19\n\n}", "explanation": "The provided documentation section titled '#Error' is about handling errors that occur when interacting with the Magic Labs embedded wallet.\n\n**Main Purpose:**\nThe main purpose of this section is to demonstrate how to catch and handle errors that may arise during the usage of the Magic Labs embedded wallet, specifically when using the WebAuthn extension.\n\n**Explanation:**\n\n1. The code snippet shows how to catch errors using a `try-catch` block.\n2. If an error occurs, it checks if the error is an instance of `SDKErrorCode`.\n3. If it is, it uses a `switch` statement to handle specific error codes, such as:\n\t* `WebAuthnNotSupported`: The WebAuthn extension is not supported by the browser or device.\n\t* `WebAuthnCreateCredentialError`: An error occurred while creating a WebAuthn credential.\n\n**Key Takeaways:**\n\n* Catch errors using a `try-catch` block to handle unexpected scenarios.\n* Check if the error is an instance of `SDKErrorCode` to handle Magic-specific error codes.\n* Use a `switch` statement to handle specific error codes and handle them accordingly.\n\nBy following this example, developers can write robust code that handles errors gracefully and provides a better user experience.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#getinfo#chunk-111", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nlogin\n\nLogs in a registered WebAuthn user.\n\nOnly available with Dedicated Wallet.\n\n#\n\n\u2022 username (String): The username to log in with\n\nusername", "explanation": "**Logging In a Registered WebAuthn User**\n\nThe `#login` function is used to log in a registered WebAuthn user in the Magic Labs embedded wallet.\n\n**Main Purpose:**\n\nThis function is primarily used to authenticate a user who has already created a WebAuthn public-private key pair with Magic to access their account.\n\n**Arguments:**\n\nThis function takes a single argument:\n\n* `username (String)`: The username or email address associated with the Magic Labs account you're trying to log in.\n\n**Availability:**\n\nPlease note that this functionality is available only with Magic's Dedicated Wallet feature, not with the standard wallet setup.\n\nBy utilizing the `#login` function, you can securely log in a registered user and access their account data, enabling various customer experience applications while still maintaining a secure environment using WebAuthn.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#getinfo#chunk-112", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 PromiEvent<string | null>: The promise resolves upon authentication request success and rejects with a specific error code if the request fails. The resolved value is a Decentralized ID token with a default 15-minute lifespan.\n\nPromiEvent<string | null>", "explanation": "In the Magic Labs embedded wallet documentation, the '#Returns' section describes the outcome of the authentication request sent by the SDK.\n\n**What it is:**\nThe '#Returns' section specifies the type of value that the promise resolves or rejects with, in the case of an authentication request sent by the SDK.\n\n**Main purpose:**\nThe main purpose of this section is to inform developers about what they can expect the SDK to return after initiating an authentication request. If the request is successful, the SDK will resolve with a Decentralized ID (DID) token, a string that has a designated lifespan of 15 minutes. If the request fails, the SDK will reject with a specific error code. This helps developers to write error handling code that can catch and respond to different types of authentication requests results.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#getinfo#chunk-113", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\nimport\n\n{\n\nWebAuthnExtension\n\n}\n\nfrom\n\n'@magic-ext/webauthn'\n\n;\n\n02\n\nimport\n\n{\n\nWebAuthnExtension\n\n}\n\nfrom\n\n'@magic-ext/webauthn'\n\n;\n\n03\n\n03\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR API KEY'\n\n,\n\n{\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR API KEY'\n\n,\n\n{\n\n05\n\nextensions\n\n:\n\n[\n\nnew\n\nWebAuthnExtension\n\n(\n\n)\n\n]\n\n,\n\n05\n\nextensions\n\n:\n\n[\n\nnew\n\nWebAuthnExtension\n\n(\n\n)\n\n]\n\n,\n\n06\n\n}\n\n)\n\n;\n\n06\n\n}\n\n)\n\n;\n\n07\n\n07\n\n08\n\n// login a user by their username\n\n08\n\n// login a user by their username\n\n09\n\ntry\n\n{\n\n09\n\ntry\n\n{\n\n10\n\nconst\n\ntoken\n\n=\n\nawait\n\nmagic\n\n.\n\nwebauthn\n\n.\n\nlogin\n\n(\n\n{\n\nusername\n\n:\n\n'username'\n\n}\n\n)\n\n;\n\n10\n\nconst\n\ntoken\n\n=\n\nawait\n\nmagic\n\n.\n\nwebauthn\n\n.\n\nlogin\n\n(\n\n{\n\nusername\n\n:\n\n'username'\n\n}\n\n)\n\n;\n\n11\n\n}\n\ncatch\n\n(\n\ne\n\n)\n\n{\n\n11\n\n}\n\ncatch\n\n(\n\ne\n\n)\n\n{\n\n12\n\n// Handle errors if required!\n\n12\n\n// Handle errors if required!\n\n13\n\n}\n\n13\n\n}", "explanation": "**Example Overview**\n\nThe provided documentation section, titled '#Example', illustrates how to use the Magic Labs embedded wallet's web authentication features to securely log in a user with their username. This example showcases the integration of the Magic SDK with the WebAuthn extension.\n\n**Main Purpose**\n\nThe primary purpose of this example is to demonstrate a basic login functionality using web authentication, specifically with the Magic Labs embedded wallet. This example aims to help developers integrate the Magic SDK and WebAuthn extension into their applications to provide a seamless, passwordless login experience for users.\n\n**Key Components**\n\n1. **Importing Dependencies**: The example begins by importing the necessary dependencies, including the Magic SDK and the WebAuthn extension.\n2. **Initializing the Magic Instance**: A new instance of the Magic class is created, passing in the API key and an object with an extension array containing the WebAuthn extension.\n3. **Logging in a User**: The example demonstrates how to use the `webauthn.login()` method to log in a user based on their username. This method returns a token that can be used for subsequent API requests.\n\n**Code Structure**\n\nThe example consists of two main sections:\n\n1. Initialization and setup\n2. Login functionality\n\nThe example is well-structured and easy to follow, making it a helpful starting point for developers looking to integrate the Magic Labs embedded wallet into their applications.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#getinfo#chunk-114", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n,\n\nSDKErrorCode\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n,\n\nSDKErrorCode\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\nimport\n\n{\n\nWebAuthnExtension\n\n}\n\nfrom\n\n'@magic-ext/webauthn'\n\n;\n\n02\n\nimport\n\n{\n\nWebAuthnExtension\n\n}\n\nfrom\n\n'@magic-ext/webauthn'\n\n;\n\n03\n\n03\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR API KEY'\n\n,\n\n{\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR API KEY'\n\n,\n\n{\n\n05\n\nextensions\n\n:\n\n[\n\nnew\n\nWebAuthnExtension\n\n(\n\n)\n\n]\n\n,\n\n05\n\nextensions\n\n:\n\n[\n\nnew\n\nWebAuthnExtension\n\n(\n\n)\n\n]\n\n,\n\n06\n\n}\n\n)\n\n;\n\n06\n\n}\n\n)\n\n;\n\n07\n\n07\n\n08\n\ntry\n\n{\n\n08\n\ntry\n\n{\n\n09\n\nawait\n\nmagic\n\n.\n\nwebauthn\n\n.\n\nlogin\n\n(\n\n{\n\nusername\n\n:\n\n'username'\n\n}\n\n)\n\n;\n\n09\n\nawait\n\nmagic\n\n.\n\nwebauthn\n\n.\n\nlogin\n\n(\n\n{\n\nusername\n\n:\n\n'username'\n\n}\n\n)\n\n;\n\n10\n\n}\n\ncatch\n\n(\n\nerr\n\n)\n\n{\n\n10\n\n}\n\ncatch\n\n(\n\nerr\n\n)\n\n{\n\n11\n\nif\n\n(\n\nerr\n\ninstanceof\n\nSDKErrorCode\n\n)\n\n{\n\n11\n\nif\n\n(\n\nerr\n\ninstanceof\n\nSDKErrorCode\n\n)\n\n{\n\n12\n\nswitch\n\n(\n\nerr\n\n.\n\ncode\n\n)\n\n{\n\n12\n\nswitch\n\n(\n\nerr\n\n.\n\ncode\n\n)\n\n{\n\n13\n\ncase\n\nSDKErrorCode\n\n.\n\nWebAuthnNotSupported\n\n:\n\n13\n\ncase\n\nSDKErrorCode\n\n.\n\nWebAuthnNotSupported\n\n:\n\n14\n\ncase\n\nSDKErrorCode\n\n.\n\nWebAuthnCreateCredentialError\n\n:\n\n14\n\ncase\n\nSDKErrorCode\n\n.\n\nWebAuthnCreateCredentialError\n\n:\n\n15\n\n// Handle errors accordingly :)\n\n15\n\n// Handle errors accordingly :)\n\n16\n\nbreak\n\n;\n\n16\n\nbreak\n\n;\n\n17\n\n}\n\n17\n\n}\n\n18\n\n}\n\n18\n\n}\n\n19\n\n}\n\n19\n\n}", "explanation": "# Error Handling in JavaScript SDK\n\nThe documentation section titled \"#Error\" explains how to handle errors in the Magic Labs embedded wallet JavaScript SDK.\n\n**Purpose:**\nThe main purpose of this section is to guide developers on how to catch and handle errors that may occur when interacting with the Magic Labs embedded wallet API using the JavaScript SDK.\n\n**Key Points:**\n\n*   Errors are caught using a `try-catch` block.\n*   The `SDKErrorCode` class is used to check if the error is a specific SDK error code.\n*   The `instanceof` operator is used to check if the error is an instance of `SDKErrorCode`.\n*   A `switch` statement is used to handle different SDK error codes, including `WebAuthnNotSupported` and `WebAuthnCreateCredentialError`.\n*   Developers are encouraged to handle errors accordingly, as the implementation details depend on the specific use case.\n\n**Best Practices:**\n\n*   Always use a `try-catch` block to catch and handle errors in your code.\n*   Use the `instanceof` operator to check if the error is a specific SDK error code.\n*   Use a `switch` statement to handle different SDK error codes.\n*   Handle errors accordingly, based on the specific use case and requirements of your application.\n\nBy following these guidelines and best practices, developers can effectively handle errors in their Magic Labs embedded wallet JavaScript SDK implementation and provide a better user experience.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#getinfo#chunk-115", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\ngetMetadata\n\nReturns information about the currently logged in user.\n\nOnly available with Dedicated Wallet.\n\n#\n\n\u2022 None", "explanation": "Based on the provided documentation, I can explain the `getMetadata` section as follows:\n\n**getMetadata Purpose:**\nThe `getMetadata` function is used to retrieve information about the currently logged-in user.\n\n**Availability:**\nThis function is only available for dedicated wallet users, indicating that it's a feature for authorized or premium users.\n\n**Function Arguments:**\nThe `getMetadata` function does not require any arguments, as indicated by the \"None\" value in the documentation. This implies that the function can be called without any input parameters.\n\n**Main Purpose:**\nThe main purpose of `getMetadata` is to fetch user data, enabling your application to interact with the user's account information in context to perform actions based on getting this user information like user rights permissions, roles or possibly certain privileges depending on the case.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#getinfo#chunk-116", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 PromiEvent<object | null>: an object containing the WebAuthn devices information and username of the authenticated userdevicesInfo (Array): List of devices info contains device ID, device nickname, transport, user agentusername (String): Username of the authenticated user\n\nPromiEvent<object | null>\n\n\u2022 devicesInfo (Array): List of devices info contains device ID, device nickname, transport, user agent\n\n\u2022 username (String): Username of the authenticated user\n\ndevicesInfo\n\nusername", "explanation": "The '#Returns' section in the Magic Labs embedded wallet documentation refers to the response data received after calling the `getInfo` API method. This section describes the structure and content of the return value.\n\n**Main Purpose:** The main purpose of this section is to provide information about the data that will be returned when calling the `getInfo` API method, allowing developers to understand and use the returned data in their applications.\n\n**Response Object Structure:**\n\nThe response object is an object that contains two main properties:\n\n1. **devicesInfo:** An array of objects containing information about the WebAuthn devices used for authentication, including:\n\t* **device ID**\n\t* **device nickname**\n\t* **transport**\n\t* **user agent**\n2. **username:** A string containing the username of the authenticated user.\n\n**Response Type:** The response is returned as a `PromiEvent<object | null>`. This means that the response is a promise that resolves to either an object containing the above properties or `null`.\n\nBy understanding the structure and content of the response object, developers can properly handle and process the data returned by the `getInfo` API method, enabling them to integrate the Magic Labs embedded wallet into their applications.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#getinfo#chunk-117", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n,\n\nSDKErrorCode\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n,\n\nSDKErrorCode\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\nimport\n\n{\n\nWebAuthnExtension\n\n}\n\nfrom\n\n'@magic-ext/webauthn'\n\n;\n\n02\n\nimport\n\n{\n\nWebAuthnExtension\n\n}\n\nfrom\n\n'@magic-ext/webauthn'\n\n;\n\n03\n\n03\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR API KEY'\n\n,\n\n{\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR API KEY'\n\n,\n\n{\n\n05\n\nextensions\n\n:\n\n[\n\nnew\n\nWebAuthnExtension\n\n(\n\n)\n\n]\n\n,\n\n05\n\nextensions\n\n:\n\n[\n\nnew\n\nWebAuthnExtension\n\n(\n\n)\n\n]\n\n,\n\n06\n\n}\n\n)\n\n;\n\n06\n\n}\n\n)\n\n;\n\n07\n\n07\n\n08\n\n// Initiates the flow to get webauthn metadata for current account.\n\n08\n\n// Initiates the flow to get webauthn metadata for current account.\n\n09\n\ntry\n\n{\n\n09\n\ntry\n\n{\n\n10\n\nconst\n\nmetadata\n\n=\n\nawait\n\nmagic\n\n.\n\nwebauthn\n\n.\n\ngetMetadata\n\n(\n\n)\n\n;\n\n10\n\nconst\n\nmetadata\n\n=\n\nawait\n\nmagic\n\n.\n\nwebauthn\n\n.\n\ngetMetadata\n\n(\n\n)\n\n;\n\n11\n\n11\n\n12\n\n/* webauthn metadata\n\n12\n\n/* webauthn metadata\n\n13\n\n{\n\n13\n\n{\n\n14\n\n\"devicesInfo\": [\n\n14\n\n\"devicesInfo\": [\n\n15\n\n{\n\n15\n\n{\n\n16\n\n\"id\": \"EjI_EFJhB6cdCj6rHPRHUcFCn6NnywALuWjQyPe0_dI=\",\n\n16\n\n\"id\": \"EjI_EFJhB6cdCj6rHPRHUcFCn6NnywALuWjQyPe0_dI=\",\n\n17\n\n\"nickname\": \"\",\n\n17\n\n\"nickname\": \"\",\n\n18\n\n\"transport\": \"internal\",\n\n18\n\n\"transport\": \"internal\",\n\n19\n\n\"user_agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/85.0.4183.102 Safari/537.36\"\n\n19\n\n\"user_agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/85.0.4183.102 Safari/537.36\"\n\n20\n\n}\n\n20\n\n}\n\n21\n\n],\n\n21\n\n],\n\n22\n\n\"username\": \"username\"\n\n22\n\n\"username\": \"username\"\n\n23\n\n}\n\n23\n\n}\n\n24\n\n*/\n\n24\n\n*/\n\n25\n\n}\n\ncatch\n\n(\n\ne\n\n)\n\n{\n\n25\n\n}\n\ncatch\n\n(\n\ne\n\n)\n\n{\n\n26\n\n// Handle errors if required!\n\n26\n\n// Handle errors if required!\n\n27\n\n}\n\n27\n\n}", "explanation": "**Section Title:** Example\n\n**Purpose:** The provided documentation section is an example code snippet that demonstrates how to use the Magic Labs SDK to get webauthn metadata for the current account.\n\n**Main Components:**\n\n1. **Importing required libraries**: The code starts by importing the necessary libraries from the Magic Labs SDK, including `Magic`, `SDKErrorCode`, and `WebAuthnExtension`.\n2. **Initializing the Magic instance**: The code creates a new instance of the `Magic` class, passing in the API key and an object with an `extensions` property. The `extensions` property is set to an array containing a `WebAuthnExtension` instance.\n3. **Initiating the webauthn metadata flow**: The code uses the `getMetadata` method to initiate the flow to get webauthn metadata for the current account.\n4. **Handling metadata**: The code catches the promise returned by `getMetadata` and logs the resulting metadata object to the console.\n\n**Key Functions:**\n\n* `Magic.getMetadata()`: Initiates the flow to get webauthn metadata for the current account.\n* `WebAuthnExtension`: An extension of the Magic Labs SDK that provides webauthn functionality.\n\n**Variables:**\n\n* `magic`: The instance of the `Magic` class.\n* `webauthn`: The webauthn extension instance.\n* `metadata`: The resulting metadata object.\n\n**Error Handling:**\n\n* The code catches any errors that occur during the execution of the code and logs them to the console.\n\nOverall, this example code demonstrates how to use the Magic Labs SDK to retrieve webauthn metadata for the current account, which can be used for authentication and other security-related purposes.\n\nNote: The `YOUR API KEY` placeholder should be replaced with your actual API key from the Magic Labs dashboard.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#getinfo#chunk-118", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nregisterNewDevice\n\nRegisters a new WebAuthn device.\n\nOnly available with Dedicated Wallet.\n\n#\n\n\u2022 nickname (String): The nickname of the WebAuthn device the user wants to set\n\nnickname", "explanation": "Here's a clear and concise explanation of the `#registerNewDevice` section:\n\n**Purpose:** The `#registerNewDevice` function is used to register a new WebAuthn device with the Magic Labs embedded wallet. This is a feature available with Dedicated Wallet only.\n\n**Functionality:** When a user wants to add a new WebAuthn device, such as a security key or a fingerprint reader, the `#registerNewDevice` function allows them to assign a nickname to this new device. This nickname can help identify the device in the future.\n\n**Main Arguments:**\n\n* `nickname (String)`: This is the user-assigned nickname for the new WebAuthn device. It should be a string that can be easily recognized by the user.\n\nIn summary, `#registerNewDevice` is a crucial function for managing WebAuthn devices within the Magic Labs embedded wallet, especially for Dedicated Wallet users.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#getinfo#chunk-119", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 PromiEvent<boolean>: The promise resolves with a true boolean value if register webauthn device is successful and rejects with a specific error code if the request fails.\n\nPromiEvent<boolean>", "explanation": "The '#Returns' section in the provided documentation is discussing the expected result of calling the `registerWebAuthnDevice` method in the Magic Labs embedded wallet. \n\nHere's a clear explanation:\n\n**Successful Return:**\n- A `PromiEvent` (a promise with an event emitter) resolves to a **`boolean`** value set to `true` if the registration of a WebAuthn device is completed successfully.\n\n**Failed Return:**\n- If the registration request fails, the `PromiEvent` will reject with a **specific error code**.\n\nIn other words, this method will notify you whether the WebAuthn device registration was successful (with a boolean true) or if an error occurred (with a specific error code).", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#getinfo#chunk-120", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n,\n\nSDKErrorCode\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n,\n\nSDKErrorCode\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\nimport\n\n{\n\nWebAuthnExtension\n\n}\n\nfrom\n\n'@magic-ext/webauthn'\n\n;\n\n02\n\nimport\n\n{\n\nWebAuthnExtension\n\n}\n\nfrom\n\n'@magic-ext/webauthn'\n\n;\n\n03\n\n03\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR API KEY'\n\n,\n\n{\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR API KEY'\n\n,\n\n{\n\n05\n\nextensions\n\n:\n\n[\n\nnew\n\nWebAuthnExtension\n\n(\n\n)\n\n]\n\n,\n\n05\n\nextensions\n\n:\n\n[\n\nnew\n\nWebAuthnExtension\n\n(\n\n)\n\n]\n\n,\n\n06\n\n}\n\n)\n\n;\n\n06\n\n}\n\n)\n\n;\n\n07\n\n07\n\n08\n\n// Initiates the flow to a new WebAuthn Device for current account.\n\n08\n\n// Initiates the flow to a new WebAuthn Device for current account.\n\n09\n\ntry\n\n{\n\n09\n\ntry\n\n{\n\n10\n\nawait\n\nmagic\n\n.\n\nwebauthn\n\n.\n\nregisterNewDevice\n\n(\n\n'new device nickname'\n\n)\n\n;\n\n10\n\nawait\n\nmagic\n\n.\n\nwebauthn\n\n.\n\nregisterNewDevice\n\n(\n\n'new device nickname'\n\n)\n\n;\n\n11\n\n}\n\ncatch\n\n(\n\ne\n\n)\n\n{\n\n11\n\n}\n\ncatch\n\n(\n\ne\n\n)\n\n{\n\n12\n\n// Handle errors if required!\n\n12\n\n// Handle errors if required!\n\n13\n\n}\n\n13\n\n}", "explanation": "**#Example**\n\nThis documentation section, titled '#Example', provides a coding example of how to use the Magic Labs embedded wallet SDK to initiate a WebAuthn flow for a new device from a Magic account.\n\n**Main Purpose:**\n\nThe main purpose of this example is to demonstrate how to:\n\n1. Import the necessary modules and libraries.\n2. Initialize a Magic object with a valid API key.\n3. Enable the WebAuthn extension.\n4. Use the `registerNewDevice` method to initiate the WebAuthn flow for a new device.\n\n**Key Functions and Methods:**\n\n* `new Magic('YOUR API KEY', { extensions: [new WebAuthnExtension()] })`: Initializes a Magic object with a valid API key and enables the WebAuthn extension.\n* `await magic.webauthn.registerNewDevice('new device nickname')`: Initiates the WebAuthn flow for a new device.\n\n**Example Use Case:**\n\nThis example can be used to integrate the Magic Labs embedded wallet SDK into a web application that requires users to authenticate with a new device using WebAuthn. By following this example, developers can easily incorporate the Magic Labs embedded wallet into their application.\n\n**Error Handling:**\n\nThe example includes basic error handling using try-catch blocks. Developers can modify the error handling mechanism to suit their specific requirements.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#getinfo#chunk-121", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n,\n\nSDKErrorCode\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n,\n\nSDKErrorCode\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\nimport\n\n{\n\nWebAuthnExtension\n\n}\n\nfrom\n\n'@magic-ext/webauthn'\n\n;\n\n02\n\nimport\n\n{\n\nWebAuthnExtension\n\n}\n\nfrom\n\n'@magic-ext/webauthn'\n\n;\n\n03\n\n03\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR API KEY'\n\n,\n\n{\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR API KEY'\n\n,\n\n{\n\n05\n\nextensions\n\n:\n\n[\n\nnew\n\nWebAuthnExtension\n\n(\n\n)\n\n]\n\n,\n\n05\n\nextensions\n\n:\n\n[\n\nnew\n\nWebAuthnExtension\n\n(\n\n)\n\n]\n\n,\n\n06\n\n}\n\n)\n\n;\n\n06\n\n}\n\n)\n\n;\n\n07\n\n07\n\n08\n\ntry\n\n{\n\n08\n\ntry\n\n{\n\n09\n\nawait\n\nmagic\n\n.\n\nwebauthn\n\n.\n\nregisterNewDevice\n\n(\n\n'new device nickname'\n\n)\n\n;\n\n09\n\nawait\n\nmagic\n\n.\n\nwebauthn\n\n.\n\nregisterNewDevice\n\n(\n\n'new device nickname'\n\n)\n\n;\n\n10\n\n}\n\ncatch\n\n(\n\nerr\n\n)\n\n{\n\n10\n\n}\n\ncatch\n\n(\n\nerr\n\n)\n\n{\n\n11\n\nif\n\n(\n\nerr\n\ninstanceof\n\nSDKErrorCode\n\n)\n\n{\n\n11\n\nif\n\n(\n\nerr\n\ninstanceof\n\nSDKErrorCode\n\n)\n\n{\n\n12\n\nswitch\n\n(\n\nerr\n\n.\n\ncode\n\n)\n\n{\n\n12\n\nswitch\n\n(\n\nerr\n\n.\n\ncode\n\n)\n\n{\n\n13\n\ncase\n\nSDKErrorCode\n\n.\n\nWebAuthnNotSupported\n\n:\n\n13\n\ncase\n\nSDKErrorCode\n\n.\n\nWebAuthnNotSupported\n\n:\n\n14\n\ncase\n\nSDKErrorCode\n\n.\n\nWebAuthnCreateCredentialError\n\n:\n\n14\n\ncase\n\nSDKErrorCode\n\n.\n\nWebAuthnCreateCredentialError\n\n:\n\n15\n\n// Handle errors accordingly :)\n\n15\n\n// Handle errors accordingly :)\n\n16\n\nbreak\n\n;\n\n16\n\nbreak\n\n;\n\n17\n\n}\n\n17\n\n}\n\n18\n\n}\n\n18\n\n}\n\n19\n\n}\n\n19\n\n}", "explanation": "**Error Handling in Magic Labs Embedded Wallet Documentation**\n\nThe \"#Error\" section of the Magic Labs embedded wallet documentation explains how to handle errors that may occur during the registration and authentication process using the Magic SDK.\n\n**Main Purpose:**\n\nThe main purpose of this section is to provide guidance on how to catch and handle error codes thrown by the Magic SDK when using the `registerNewDevice` method of the `WebAuthnExtension`.\n\n**Key Takeaways:**\n\n1.  Errors are caught using a `try`-`catch` block.\n2.  If an error occurs, it is checked to see if it is an instance of `SDKErrorCode`.\n3.  If it is, the error code is used to determine the specific error type using a `switch` statement.\n4.  Based on the error code, you can handle the error accordingly, such as displaying an error message to the user or retrying the operation.\n\n**Example Use Case:**\n\nIf the `registerNewDevice` method fails due to a lack of support for web authentication (WebAuthn), the error will be caught and handled accordingly. In this case, the code checks if the error code is `WebAuthnNotSupported` and can then provide the user with a specific error message.\n\n```javascript\nif (err instanceof SDKErrorCode.WebAuthnNotSupported) {\n    console.error(\"WebAuthn is not supported by your browser or device.\");\n    // Handle the error further\n}\n```", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#getinfo#chunk-122", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nupdateInfo\n\nAllows a user to update their device nickname.\n\nOnly available with Dedicated Wallet.\n\n#\n\n\u2022 nickname (String): The nickname of the WebAuthn device the user wants to set\n\n\u2022 id (String): The WebAuthn ID returned from getMetaData function's devicesInfo field\n\nnickname\n\nid\n\ngetMetaData\n\ndevicesInfo", "explanation": "**#updateInfo - Updates device nickname**\n\nThe `#updateInfo` function is a feature specific to Magic Labs Dedicated Wallet, allowing users to update their device nickname. This capability is part of Magic Link's client-side SDK for WebAuthn.\n\n**Key Functionality:**\n\nUpdates the nickname of a WebAuthn device associated with the user's account.\n\n**Required Arguments:**\n\n1. **nickname (String)**: The desired new nickname for the WebAuthn device.\n2. **id (String)**: The WebAuthn ID obtained from the `getMetaData` function, specifically from the `devicesInfo` field.\n\n**Purpose:**\n\nBy providing this feature, users can easily update their device nicknames for a more personalized experience. This function is essential for users with Dedicated Wallets, offering a convenient way to manage their device information within the Magic Link ecosystem.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#getinfo#chunk-123", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 PromiEvent<boolean>: The promise resolves with a true boolean value if update webauthn device nickname is successful and rejects with a specific error code if the request fails\n\nPromiEvent<boolean>", "explanation": "**Returns**\n\nThe '#Returns' section of the documentation describes the response format of the `getInfo` API call.\n\n**Explanation**\n\nThe `getInfo` API call returns a PromiEvent that resolves with a boolean value indicating whether the operation was successful. If the operation was successful, the promise resolves with a boolean value of `true`. If the operation fails, the promise rejects with a specific error code.\n\n**Main Purpose**\n\nThe main purpose of the `getInfo` method is to retrieve information about the user's account and wallet. It seems like this specific method, the update webauthn device nickname, is used to update a device nickname for webauthn. In this context, the `getInfo` method helps to ensure that the operation was successful and updates the nickname correctly. The PromiEvent allows asynchronous handling of the operation's outcome.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#getinfo#chunk-124", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n,\n\nSDKErrorCode\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n,\n\nSDKErrorCode\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\nimport\n\n{\n\nWebAuthnExtension\n\n}\n\nfrom\n\n'@magic-ext/webauthn'\n\n;\n\n02\n\nimport\n\n{\n\nWebAuthnExtension\n\n}\n\nfrom\n\n'@magic-ext/webauthn'\n\n;\n\n03\n\n03\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR API KEY'\n\n,\n\n{\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR API KEY'\n\n,\n\n{\n\n05\n\nextensions\n\n:\n\n[\n\nnew\n\nWebAuthnExtension\n\n(\n\n)\n\n]\n\n,\n\n05\n\nextensions\n\n:\n\n[\n\nnew\n\nWebAuthnExtension\n\n(\n\n)\n\n]\n\n,\n\n06\n\n}\n\n)\n\n;\n\n06\n\n}\n\n)\n\n;\n\n07\n\n07\n\n08\n\n// Initiates the flow to update WebAuthn Device's nickname.\n\n08\n\n// Initiates the flow to update WebAuthn Device's nickname.\n\n09\n\ntry\n\n{\n\n09\n\ntry\n\n{\n\n10\n\nawait\n\nmagic\n\n.\n\nwebauthn\n\n.\n\nupdateInfo\n\n(\n\n{\n\nid\n\n,\n\nnickname\n\n}\n\n)\n\n;\n\n10\n\nawait\n\nmagic\n\n.\n\nwebauthn\n\n.\n\nupdateInfo\n\n(\n\n{\n\nid\n\n,\n\nnickname\n\n}\n\n)\n\n;\n\n11\n\n}\n\ncatch\n\n(\n\ne\n\n)\n\n{\n\n11\n\n}\n\ncatch\n\n(\n\ne\n\n)\n\n{\n\n12\n\n// Handle errors if required!\n\n12\n\n// Handle errors if required!\n\n13\n\n}\n\n13\n\n}", "explanation": "**Example Overview**\n\nThis documentation section provides a code example for interacting with the Magic Labs embedded wallet, specifically for updating a WebAuthn device's nickname. The example showcases how to use the Magic SDK and extend it with the WebAuthn extension for a seamless user experience.\n\n**Key Components**\n\n1. **Importing necessary modules**: The first two lines import the `Magic` and `SDKErrorCode` classes from the `magic-sdk` module, while lines 3-4 import the `WebAuthnExtension` class from the `@magic-ext/webauthn` module.\n2. **Initializing the Magic instance**: Lines 5-6 create a new instance of the `Magic` class with an API key and an options object. This instance is referred to as `magic`.\n3. **Configuring the WebAuthn extension**: The `extensions` object is set to an array containing a new instance of the `WebAuthnExtension` class. This enables the WebAuthn extension for the Magic SDK.\n4. **Updating the WebAuthn device's nickname**: The `updateInfo` method is called on the `magic` instance, passing an object with the `id` (device ID) and `nickname` (new nickname) as arguments. This initiates the flow to update the device's nickname.\n\n**Purpose**\n\nThe main purpose of this example is to demonstrate how to update a WebAuthn device's nickname using the Magic Labs embedded wallet. This example serves as a guide for developers to integrate the Magic SDK and WebAuthn extension into their applications, enabling users to easily manage their devices and update nicknames. \n\nThis example should be used as a starting point for integrating Magic Labs into your application and should be reviewed in conjunction with the official Magic Labs documentation for complete setup and usage instructions.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#getinfo#chunk-125", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nunregisterDevice\n\nUnregisters a user's device.\n\nOnly available with Dedicated Wallet.\n\n#\n\n\u2022 id (String): The WebAuthn ID returned from getMetaData function's devicesInfo field\n\nid\n\ngetMetaData\n\ndevicesInfo", "explanation": "The `#unregisterDevice` function is used to unregister a user's device from the Magic Labs Dedicated Wallet system.\n\nThe main purpose of `#unregisterDevice` is to remove a specific device associated with a Magic Labs Dedicated Wallet user, allowing the user to establish trust with a different device or browser.\n\nThe `id` argument passed to this function is a required string parameter, which represents the WebAuthn ID of the device to be unregistered. This ID is typically obtained from the `getMetaData` function's `devicesInfo` field. The WebAuthn ID uniquely identifies a device and is linked to the user's Magic Labs wallet.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#getinfo#chunk-126", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 PromiEvent<boolean>: The promise resolves with a true boolean value if unregister webauthn device is successful and rejects with a specific error code if the request fails\n\nPromiEvent<boolean>", "explanation": "The '#Returns' section you're referring to explains the format of the data returned when calling the `getInfo()` function for webAuthn device unregistration.\n\nHere's a clear and concise breakdown:\n\n**Data Type:** `PromiEvent<boolean>`\n\n**Main Purpose:** This type indicates that the `getInfo()` function returns a promise that resolves with a boolean value.\n\n**Explanation:**\n\n- `PromiEvent`: This is a type of promise that can both resolve and reject.\n- `boolean`: The value returned when the promise resolves.\n- `true` or `false`: If the webauthn device unregistration is successful, the promise resolves with `true`. If the request fails, it rejects with a specific error code.\n\nIn summary, the `getInfo()` function returns a promise that resolves with a boolean indicating the success or failure of the webauthn device unregistration process.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#getinfo#chunk-127", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n,\n\nSDKErrorCode\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n,\n\nSDKErrorCode\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\nimport\n\n{\n\nWebAuthnExtension\n\n}\n\nfrom\n\n'@magic-ext/webauthn'\n\n;\n\n02\n\nimport\n\n{\n\nWebAuthnExtension\n\n}\n\nfrom\n\n'@magic-ext/webauthn'\n\n;\n\n03\n\n03\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR API KEY'\n\n,\n\n{\n\n04\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'YOUR API KEY'\n\n,\n\n{\n\n05\n\nextensions\n\n:\n\n[\n\nnew\n\nWebAuthnExtension\n\n(\n\n)\n\n]\n\n,\n\n05\n\nextensions\n\n:\n\n[\n\nnew\n\nWebAuthnExtension\n\n(\n\n)\n\n]\n\n,\n\n06\n\n}\n\n)\n\n;\n\n06\n\n}\n\n)\n\n;\n\n07\n\n07\n\n08\n\n// Initiates the flow to unregister WebAuthn Device.\n\n08\n\n// Initiates the flow to unregister WebAuthn Device.\n\n09\n\ntry\n\n{\n\n09\n\ntry\n\n{\n\n10\n\n/* Assuming user is logged in */\n\n10\n\n/* Assuming user is logged in */\n\n11\n\nawait\n\nmagic\n\n.\n\nwebauthn\n\n.\n\nunregisterDevice\n\n(\n\nid\n\n)\n\n;\n\n11\n\nawait\n\nmagic\n\n.\n\nwebauthn\n\n.\n\nunregisterDevice\n\n(\n\nid\n\n)\n\n;\n\n12\n\n}\n\ncatch\n\n(\n\ne\n\n)\n\n{\n\n12\n\n}\n\ncatch\n\n(\n\ne\n\n)\n\n{\n\n13\n\n// Handle errors if required!\n\n13\n\n// Handle errors if required!\n\n14\n\n}\n\n14\n\n}", "explanation": "**Example Explanation**\n\nThe provided documentation section is an example code snippet for the Magic Labs embedded wallet's `getInfo` API in the Client-Side SDK for Web. \n\n**Purpose:**\nThe main purpose of this example is to demonstrate how to unregister a WebAuthn device. WebAuthn is a security-standard API designed to provide a simple and interoperable way to securely authenticate users across different platforms.\n\n**Code Breakdown:**\n\n1. The example imports necessary modules from the Magic Labs SDK and extensibility packages.\n2. It initializes a new instance of the Magic provider with an API key and an optional array of extensions, in this case, a WebAuthn extension.\n3. The example then calls the `unregisterDevice` method on the WebAuthn extension, passing an `id` parameter to initiate the device unregistration process.\n4. If an error occurs during the unregistration process, the code catches the error and provides a commented section for error handling.\n\n**Key Functions Used:**\n\n* `Magic`: Initializes the Magic Labs provider instance with an API key and optional extensions.\n* `WebAuthnExtension`: An extension that allows for WebAuthn device interactions.\n* `unregisterDevice`: Unregisters a WebAuthn device associated with a specific `id`.\n\n**Context:**\nThis example is likely part of a larger application using the Magic Labs embedded wallet to manage user authentication and WebAuthn devices. The code snippet can be used as a reference for developers integrating WebAuthn into their applications.\n\n**Note:**\nReplace `'YOUR API KEY'` with your actual Magic Labs API key to use this example. Also, ensure to handle errors appropriately according to your application's requirements.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#getinfo#chunk-128", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nThere are three types of error class to be aware of when working with Magic's client-side JavaScript SDK:\n\n\u2022 SDKError: Raised by the SDK to indicate missing parameters, communicate deprecation notices, or other internal issues. A notable example would be a MISSING_API_KEY error, which informs the required API key parameter was missing from new Magic(...).\n\n\u2022 RPCError: Errors associated with specific method calls to the Magic <iframe> context. These methods are formatted as JSON RPC 2.0 payloads, so they return error codes as integers. This type of error is raised by methods like AuthModule.loginWithMagicLink.\n\n\u2022 ExtensionError: Errors associated with method calls to Magic SDK Extensions. Extensions are an upcoming/experimental feature of Magic SDK. More information will be available once Extensions are officially released.\n\nSDKError\n\nRPCError\n\n<iframe>\n\nJSON RPC 2.0\n\nAuthModule.loginWithMagicLink\n\nAuthModule.loginWithMagicLink\n\nExtensionError\n\n#\n\nSDKError\n\nThe SDKError class is exposed for instanceof operations.\n\nSDKError\n\ninstanceof\n\nCopy\n\n01\n\nimport\n\n{\n\nSDKError\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nSDKError\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\n02\n\n03\n\ntry\n\n{\n\n03\n\ntry\n\n{\n\n04\n\n// Something async...\n\n04\n\n// Something async...\n\n05\n\ncatch\n\n(\n\nerr\n\n)\n\n{\n\n05\n\ncatch\n\n(\n\nerr\n\n)\n\n{\n\n06\n\nif\n\n(\n\nerr\n\ninstanceof\n\nSDKError\n\n)\n\n{\n\n06\n\nif\n\n(\n\nerr\n\ninstanceof\n\nSDKError\n\n)\n\n{\n\n07\n\n// Handle...\n\n07\n\n// Handle...\n\n08\n\n}\n\n08\n\n}\n\n09\n\n}\n\n09\n\n}\n\nSDKError instances expose the code field which may be used to deterministically identify the error. Additionally, an enumeration of error codes is exposed for convenience and readability:\n\nSDKError\n\ncode\n\nCopy\n\n01\n\nimport\n\n{\n\nSDKErrorCode\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nSDKErrorCode\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\n02\n\n03\n\nSDKErrorCode\n\n.\n\nMissingApiKey\n\n;\n\n03\n\nSDKErrorCode\n\n.\n\nMissingApiKey\n\n;\n\n04\n\nSDKErrorCode\n\n.\n\nModalNotReady\n\n;\n\n04\n\nSDKErrorCode\n\n.\n\nModalNotReady\n\n;\n\n05\n\nSDKErrorCode\n\n.\n\nMalformedResponse\n\n;\n\n05\n\nSDKErrorCode\n\n.\n\nMalformedResponse\n\n;\n\n06\n\n// and so forth...\n\n06\n\n// and so forth...\n\n07\n\n// Please reference the `Enum Key` column of the error table below.\n\n07\n\n// Please reference the `Enum Key` column of the error table below.\n\n#\n\nMissingApiKey\n\nModalNotReady\n\nasync/await\n\nMalformedResponse\n\nInvalidArgument\n\nExtensionNotInitialized\n\nIncompatibleExtension\n\nIncompatibleExtension\n\nIndicates that incompatible extensions were detected during the initialization of the Magic SDK. The error message specifies the incompatible extensions and their compatibility requirements based on the current Magic SDK version and platform environment.", "explanation": "**Response and Error Handling - #SDKError - #Error Codes**\n\n**Purpose:**\n\nThis documentation section explains the Magic Labs embedded wallet's error handling mechanism, which is crucial for developers to understand and handle errors that may occur when using the Magic SDK.\n\n**Main Errors Classes:**\n\n1. **SDKError**: Raised by the SDK to indicate missing parameters, deprecation notices, or internal issues. This includes errors such as missing API keys, modal not being ready, malformed responses, and more.\n2. **RPCError**: Errors associated with specific method calls to the Magic iframe context, formatted as JSON RPC 2.0 payloads.\n3. **ExtensionError**: Errors associated with method calls to Magic SDK Extensions, an upcoming experimental feature.\n\n**SDKError Class:**\n\n* Exposed for instanceof operations to identify errors.\n* Instances expose a `code` field, which can be used to deterministically identify the error.\n* An enumeration of error codes is exposed for convenience and readability.\n\n**Error Codes:**\n\n* `MissingApiKey`: Indicates that the required API key parameter was missing from the new Magic(...) instance.\n* `ModalNotReady`: Indicates that the modal is not ready to initialize the extension.\n* `MalformedResponse`: Indicates that the response from the SDK was malformed.\n* ...\n* `IncompatibleExtension`: Indicates that incompatible extensions were detected during the initialization of the Magic SDK.\n\n**Key Takeaways:**\n\n* Always check the error class to determine the type of error that occurred.\n* Use the `code` field to determine the specific error code.\n* Reference the error table to understand the possible error codes and their meanings.\n\nBy understanding the error handling mechanism, developers can write more robust and reliable code, handle errors more effectively, and provide a better user experience.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#getinfo#chunk-129", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nRPCError\n\nThe RPCError class is exposed for instanceof operations:\n\nRPCError\n\ninstanceof\n\nCopy\n\n01\n\nimport\n\n{\n\nRPCError\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nRPCError\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\n02\n\n03\n\ntry\n\n{\n\n03\n\ntry\n\n{\n\n04\n\n// Something async...\n\n04\n\n// Something async...\n\n05\n\ncatch\n\n(\n\nerr\n\n)\n\n{\n\n05\n\ncatch\n\n(\n\nerr\n\n)\n\n{\n\n06\n\nif\n\n(\n\nerr\n\ninstanceof\n\nRPCError\n\n)\n\n{\n\n06\n\nif\n\n(\n\nerr\n\ninstanceof\n\nRPCError\n\n)\n\n{\n\n07\n\n// Handle...\n\n07\n\n// Handle...\n\n08\n\n}\n\n08\n\n}\n\n09\n\n}\n\n09\n\n}\n\nRPCError instances expose the code field which may be used to deterministically identify the error. Additionally, an enumeration of error codes is exposed for convenience and readability:\n\nRPCError\n\ncode\n\nCopy\n\n01\n\nimport\n\n{\n\nRPCErrorCode\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nRPCErrorCode\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\n02\n\n03\n\nRPCErrorCode\n\n.\n\nMagicLinkExpired\n\n;\n\n03\n\nRPCErrorCode\n\n.\n\nMagicLinkExpired\n\n;\n\n04\n\nRPCErrorCode\n\n.\n\nUserAlreadyLoggedIn\n\n;\n\n04\n\nRPCErrorCode\n\n.\n\nUserAlreadyLoggedIn\n\n;\n\n05\n\nRPCErrorCode\n\n.\n\nParseError\n\n;\n\n05\n\nRPCErrorCode\n\n.\n\nParseError\n\n;\n\n06\n\nRPCErrorCode\n\n.\n\nMethodNotFound\n\n;\n\n06\n\nRPCErrorCode\n\n.\n\nMethodNotFound\n\n;\n\n07\n\nRPCErrorCode\n\n.\n\nInternalError\n\n;\n\n07\n\nRPCErrorCode\n\n.\n\nInternalError\n\n;\n\n08\n\n// and so forth...\n\n08\n\n// and so forth...\n\n09\n\n// Please reference the `Enum Key` column of the error table below.\n\n09\n\n// Please reference the `Enum Key` column of the error table below.\n\n#\n\nMagicLinkFailedVerification\n\nMagicLinkExpired\n\nMagicLinkRateLimited\n\nshowUI\n\nfalse\n\nMagicLinkInvalidRedirectURL\n\nredirectURI\n\nUserAlreadyLoggedIn\n\nlogout\n\nlogout\n\nUpdateEmailFailed\n\nUserRequestEditEmail\n\n-10010\n\nInactiveRecipient\n\nInactiveRecipient\n\nThe recipient account is currently inactive. The user should verify and activate their account to resolve this issue.\n\n-10011\n\nAccessDeniedToUser\n\nAccessDeniedToUser\n\nUser access is denied. The user lacks the necessary permissions or credentials to perform the requested action.\n\n-10015\n\nRedirectLoginComplete\n\nRedirectLoginComplete\n\nThe redirect login process has been successfully completed.", "explanation": "**RPCError and Magic Link Error Codes**\n\nThe `RPCError` class and associated error codes are part of the Magic Labs embedded wallet API documentation, specifically for handling errors that may occur during the execution of API requests.\n\n**Main Purpose**\n\nThe primary purpose of the `RPCError` class is to expose a common interface for handling errors in a deterministic and readable way. This allows developers to catch and handle specific error scenarios that may arise during the execution of API requests.\n\n**Key Features**\n\n*   The `RPCError` class is exposed for instanceof operations, allowing developers to catch errors and handle them accordingly.\n*   RPCError instances expose a `code` field that can be used to deterministically identify the error.\n*   An enumeration of error codes is provided for convenience and readability, making it easier to understand and handle specific error scenarios.\n\n**Error Codes**\n\nThe error codes are categorized into the following types:\n\n1.  **Magic Link Errors**:\n\n    *   `MagicLinkExpired`\n    *   `MagicLinkFailedVerification`\n    *   `MagicLinkInvalidRedirectURL`\n    *   `MagicLinkRateLimited`\n2.  **User Authentication Errors**:\n\n    *   `UserAlreadyLoggedIn`\n    *   `UpdateEmailFailed`\n    *   `UserRequestEditEmail`\n    *   `UserAlreadyLoggedIn`\n3.  **Permission and Access Errors**:\n\n    *   `AccessDeniedToUser`\n    *   `InactiveRecipient`\n\nBy using the `RPCError` class and error codes, developers can handle errors in a more deterministic and predictable way, making it easier to debug and troubleshoot their applications.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#getinfo#chunk-130", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nParseError\n\nInvalidRequest\n\nMethodNotFound\n\nInvalidParams\n\nInternalError", "explanation": "In the Magic Labs embedded wallet documentation, the '#Standard JSON RPC 2.0 Error Codes' section outlines the standard error codes that can be encountered when interacting with the wallet's JSON RPC 2.0 API. These error codes are used to indicate the reason behind a failed request or operation.\n\nHere's a concise explanation of each error code and its main purpose:\n\n1. **ParseError**: Indicates that the JSON data sent to the wallet is improperly formatted or cannot be parsed. This error occurs when the wallet is unable to interpret the request data, typically due to syntax errors or missing required fields.\n\n2. **InvalidRequest**: The wallet receives a request that is syntactically correct but semantically invalid. This can occur when a method is called incorrectly or with an invalid parameter.\n\n3. **MethodNotFound**: This error code is triggered when the wallet does not recognize the method or command being requested. This can occur when a method is deprecated or renamed, or when a new method is introduced.\n\n4. **InvalidParams**: Indicates that one or more parameters passed to the requested method are invalid or unsupported. This error occurs when the correct data is provided in the correct format but does not meet the specified requirements or conditions.\n\n5. **InternalError**: Signifies an unexpected internal error within the wallet. This can occur due to various reasons such as corruption, out-of-memory situations, and so on. While the specific cause of the error may not be explicitly stated, this code gives the developers an alert that an unexpected problem has occurred.\n\nThese error codes can be used by developers to handle unexpected responses from the wallet API, ensure robust error handling, and improve the overall user experience of the application.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#getinfo#chunk-131", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nExtensionError\n\nThe ExtensionError class is exposed for instanceof operations:\n\nExtensionError\n\ninstanceof\n\nCopy\n\n01\n\nimport\n\n{\n\nExtensionError\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nExtensionError\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\n02\n\n03\n\ntry\n\n{\n\n03\n\ntry\n\n{\n\n04\n\n// Something async...\n\n04\n\n// Something async...\n\n05\n\ncatch\n\n(\n\nerr\n\n)\n\n{\n\n05\n\ncatch\n\n(\n\nerr\n\n)\n\n{\n\n06\n\nif\n\n(\n\nerr\n\ninstanceof\n\nExtensionError\n\n)\n\n{\n\n06\n\nif\n\n(\n\nerr\n\ninstanceof\n\nExtensionError\n\n)\n\n{\n\n07\n\n// Handle...\n\n07\n\n// Handle...\n\n08\n\n}\n\n08\n\n}\n\n09\n\n}\n\n09\n\n}\n\nExtensionError instances expose the code field which may be used to deterministically identify the error. Magic SDK does not export a global enumeration of Extension error codes. Instead, Extension authors are responsible for exposing and documenting error codes relevant to the Extension's use-case.\n\nExtensionError\n\ncode", "explanation": "**ExtensionError Overview**\n\nThe ExtensionError class is a part of the Magic Labs embedded wallet documentation, specifically designed for use with the Magic SDK. Its primary purpose is to provide a standardized way to handle errors that occur within Magic Extensions.\n\n**Key Features and Purpose**\n\n- **Error Identification**: ExtensionError instances can be identified using the `instanceof` operator, allowing developers to catch and handle specific error types.\n- **Code Field**: Each ExtensionError instance exposes a `code` field, which contains a unique identifier that can be used to deterministically identify the error.\n- **Custom Error Codes**: Unlike other SDKs, Magic SDK does not export a global enumeration of Extension error codes. Instead, Extension authors are responsible for exposing and documenting their own custom error codes, making it essential for developers to consult the relevant Extension's documentation to understand the specific error codes used.\n\n**Best Practices for Using ExtensionError**\n\n- Catch ExtensionError instances using the `instanceof` operator to handle errors specifically related to your Extension.\n- Use the `code` field to determine the exact error type and handle it accordingly.\n- Consult the Extension's documentation to understand the custom error codes used within that Extension.\n\nBy utilizing the ExtensionError class, developers can write more robust and error-handling code, making it easier to debug and resolve issues within Magic Extensions.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#getinfo#chunk-132", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nMagic SDK provides a flexible interface for handling methods which encompass multiple \"stages\" of an action. Promises returned by Magic SDK resolve when a flow has reached finality, but certain methods also contain life-cycle events that dispatch throughout. We refer to this interface as a PromiEvent. There is prior art to inspire this approach in Ethereum's Web3 standard.\n\nPromises\n\nPromiEvent\n\nWeb3\n\nPromiEvent is a portmanteau of Promise and EventEmitter. Browser and React Native SDK methods return this object type, which is a native JavaScript Promise overloaded with EventEmitter methods. This value can be awaited in modern async/await code, or you may register event listeners to handle method-specific life-cycle hooks. Each PromiEvent contains the following default event types:\n\nPromiEvent\n\nPromise\n\nEventEmitter\n\nEventEmitter\n\nPromise\n\nEventEmitter\n\nawaited\n\nasync/await\n\nPromiEvent\n\n\u2022 \"done\": Called when the Promise resolves. This is equivalent to Promise.then.\n\n\u2022 \"error\": Called if the Promise rejects. This is equivalent to Promise.catch.\n\n\u2022 \"settled\": Called when the Promise either resolves or rejects. This is equivalent to Promise.finally.\n\n\"done\"\n\nPromise\n\nPromise.then\n\n\"error\"\n\nPromise\n\nPromise.catch\n\n\"settled\"\n\nPromise\n\nPromise.finally\n\nLook for additional event types documented near the method they relate to. Events are strongly-typed by TypeScript to offer developer hints and conveniant IDE auto-complete.\n\nCopy\n\n01\n\nconst\n\nreq\n\n=\n\nmagic\n\n.\n\nauth\n\n.\n\nloginWithMagicLink\n\n(\n\n{\n\nemail\n\n:\n\n'hello@magic.link'\n\n}\n\n)\n\n;\n\n01\n\nconst\n\nreq\n\n=\n\nmagic\n\n.\n\nauth\n\n.\n\nloginWithMagicLink\n\n(\n\n{\n\nemail\n\n:\n\n'hello@magic.link'\n\n}\n\n)\n\n;\n\n02\n\n02\n\n03\n\nreq\n\n03\n\nreq\n\n04\n\n.\n\non\n\n(\n\n'email-sent'\n\n,\n\n(\n\n)\n\n=>\n\n{\n\n04\n\n.\n\non\n\n(\n\n'email-sent'\n\n,\n\n(\n\n)\n\n=>\n\n{\n\n05\n\n/* ... */\n\n05\n\n/* ... */\n\n06\n\n}\n\n)\n\n06\n\n}\n\n)\n\n07\n\n.\n\nthen\n\n(\n\nDIDToken\n\n=>\n\n{\n\n07\n\n.\n\nthen\n\n(\n\nDIDToken\n\n=>\n\n{\n\n08\n\n/* ... */\n\n08\n\n/* ... */\n\n09\n\n}\n\n)\n\n09\n\n}\n\n)\n\n10\n\n.\n\nonce\n\n(\n\n'email-not-deliverable'\n\n,\n\n(\n\n)\n\n=>\n\n{\n\n10\n\n.\n\nonce\n\n(\n\n'email-not-deliverable'\n\n,\n\n(\n\n)\n\n=>\n\n{\n\n11\n\n/* ... */\n\n11\n\n/* ... */\n\n12\n\n}\n\n)\n\n12\n\n}\n\n)\n\n13\n\n.\n\ncatch\n\n(\n\nerror\n\n=>\n\n{\n\n13\n\n.\n\ncatch\n\n(\n\nerror\n\n=>\n\n{\n\n14\n\n/* ... */\n\n14\n\n/* ... */\n\n15\n\n}\n\n)\n\n15\n\n}\n\n)\n\n16\n\n.\n\non\n\n(\n\n'error'\n\n,\n\nerror\n\n=>\n\n{\n\n16\n\n.\n\non\n\n(\n\n'error'\n\n,\n\nerror\n\n=>\n\n{\n\n17\n\n/* ... */\n\n17\n\n/* ... */\n\n18\n\n}\n\n)\n\n;\n\n18\n\n}\n\n)\n\n;", "explanation": "**What is a PromiEvent?**\n\nA PromiEvent is a combination of JavaScript Promises and EventEmitter concepts. It is used by Magic Labs SDK to handle multiple stages of an action, providing a flexible interface for handling life-cycle events throughout the process.\n\n**Purpose of PromiEvent:**\n\nThe main purpose of a PromiEvent is to offer additional event listeners beyond simply waiting for a Promise to resolve or reject. This allows developers to react to specific stages of a process, such as when an email is sent or when an error occurs.\n\n**Key Features of PromiEvent:**\n\n1. **Default Event Types:** A PromiEvent contains the following default event types:\n\t* \"done\" (called when the Promise resolves, equivalent to Promise.then)\n\t* \"error\" (called if the Promise rejects, equivalent to Promise.catch)\n\t* \"settled\" (called when the Promise either resolves or rejects, equivalent to Promise.finally)\n2. **Additional Event Types:** Some methods may have additional event types specific to that method, which are documented near the method.\n3. **Strongly-Typed Events:** PromiEvent events are strongly-typed by TypeScript, providing developer hints and convenient IDE auto-complete.\n\n**Example Usage:**\n\nIn the provided example, we see how to use PromiEvent to handle life-cycle events during the `loginWithMagicLink` process:\n\n```javascript\nconst req = magic.auth.loginWithMagicLink({\n  email: 'hello@magic.link'\n})\n\nreq.on('email-sent', () => {\n  /* do something when email is sent */\n})\n\nreq.then(DIDToken => {\n  /* do something when login is successful */\n}).catch(error => {\n  /* do something when login fails */\n})\n\nreq.on('error', error => {\n  /* do something when error occurs */\n})\n```\n\nIn this example, we use `req.on` to register event listeners for specific life-cycle events, such as when an email is sent or when an error occurs. We can also use `req.then` to handle the successful login case and `req.catch` to handle the failed login case.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#getinfo#chunk-133", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nMagic supports the following EVM RPC Methods that can be called through a web3 provider library such as web3.js or ethers.js.\n\nweb3.js\n\nethers.js\n\nNote: starting from magic-sdk@17.0.0, eth_accounts will return an empty array if no user is logged in, instead of prompting the login form. To prompt the login form, use connectWithUI().\n\nmagic-sdk@17.0.0\n\neth_accounts\n\nconnectWithUI()\n\n\u2022 eth_accounts\n\n\u2022 get_balance\n\n\u2022 eth_estimateGas\n\n\u2022 eth_gasPrice\n\n\u2022 eth_sendTransaction\n\n\u2022 personal_sign\n\n\u2022 eth_signTypedData_v3\n\n\u2022 eth_signTypedData_v4\n\neth_accounts\n\nget_balance\n\neth_estimateGas\n\neth_gasPrice\n\neth_sendTransaction\n\npersonal_sign\n\neth_signTypedData_v3\n\neth_signTypedData_v4", "explanation": "**EVM RPC Methods**\n\nThe EVM RPC Methods section of the Magic Labs embedded wallet documentation outlines a list of Remote Procedure Call (RPC) methods supported by Magic, which can be accessed through a Web3 provider library like `web3.js` or `ethers.js`. These methods are used for interacting with the Ethereum Virtual Machine (EVM) and allow you to perform various operations such as account management, transaction creation, and signature verification.\n\n**Main Purpose**\n\nThe main purpose of EVM RPC Methods is to provide a set of predefined APIs for interacting with the Ethereum blockchain. These methods allow developers to:\n\n* Manage user accounts and authenticate them\n* Retrieve and send Ethereum transactions\n* Estimate gas prices and gas limits for transactions\n* Sign transactions and data using the user's private key\n* Verify the authenticity of digital signatures\n\n**Key Features and Methods**\n\nSome of the key methods included in the EVM RPC Methods section are:\n\n* `eth_accounts`: Retrieves a list of available accounts\n* `get_balance`: Retrieves the balance of a specific account\n* `eth_estimateGas`: Estimates the gas required for a transaction\n* `eth_gasPrice`: Retrieves the current gas price\n* `eth_sendTransaction`: Sends a transaction from one account to another\n* `personal_sign`: Signs a message using the user's private key\n* `eth_signTypedData_v3` and `eth_signTypedData_v4`: Signs typed data using the user's private key\n\nBy providing a standardized set of APIs for interacting with the Ethereum blockchain, EVM RPC Methods enable developers to easily integrate Magic Labs' embedded wallet into their applications and use its features to provide a seamless user experience.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#getinfo#chunk-134", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n#\n\nA user's Magic SDK session persists up to 7 days by default, so re-authentication is usually friction-less.\n\nNote: the session length is customizable by the developer through the Magic dashboard.\n\nMagic dashboard\n\nBefore re-authenticating a user, install the Magic Client SDK\u200b.\n\ninstall the Magic Client SDK\u200b\n\nCopy\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n01\n\nimport\n\n{\n\nMagic\n\n}\n\nfrom\n\n'magic-sdk'\n\n;\n\n02\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n02\n\nconst\n\nmagic\n\n=\n\nnew\n\nMagic\n\n(\n\n'PUBLISHABLE_API_KEY'\n\n)\n\n;\n\n03\n\n03\n\n04\n\nconst\n\nemail\n\n=\n\n'example@magic.link'\n\n;\n\n04\n\nconst\n\nemail\n\n=\n\n'example@magic.link'\n\n;\n\n05\n\n05\n\n06\n\nif\n\n(\n\nawait\n\nmagic\n\n.\n\nuser\n\n.\n\nisLoggedIn\n\n(\n\n)\n\n)\n\n{\n\n06\n\nif\n\n(\n\nawait\n\nmagic\n\n.\n\nuser\n\n.\n\nisLoggedIn\n\n(\n\n)\n\n)\n\n{\n\n07\n\nconst\n\ndidToken\n\n=\n\nawait\n\nmagic\n\n.\n\nuser\n\n.\n\ngetIdToken\n\n(\n\n)\n\n;\n\n07\n\nconst\n\ndidToken\n\n=\n\nawait\n\nmagic\n\n.\n\nuser\n\n.\n\ngetIdToken\n\n(\n\n)\n\n;\n\n08\n\n08\n\n09\n\n// Do something with the DID token.\n\n09\n\n// Do something with the DID token.\n\n10\n\n// For instance, this could be a `fetch` call\n\n10\n\n// For instance, this could be a `fetch` call\n\n11\n\n// to a protected backend endpoint.\n\n11\n\n// to a protected backend endpoint.\n\n12\n\ndocument\n\n.\n\ngetElementById\n\n(\n\n'your-access-token'\n\n)\n\n.\n\ninnerHTML\n\n=\n\ndidToken\n\n;\n\n12\n\ndocument\n\n.\n\ngetElementById\n\n(\n\n'your-access-token'\n\n)\n\n.\n\ninnerHTML\n\n=\n\ndidToken\n\n;\n\n13\n\n}\n\nelse\n\n{\n\n13\n\n}\n\nelse\n\n{\n\n14\n\n// Log in the user\n\n14\n\n// Log in the user\n\n15\n\nconst\n\nuser\n\n=\n\nawait\n\nmagic\n\n.\n\nauth\n\n.\n\nloginWithMagicLink\n\n(\n\n{\n\nemail\n\n}\n\n)\n\n;\n\n15\n\nconst\n\nuser\n\n=\n\nawait\n\nmagic\n\n.\n\nauth\n\n.\n\nloginWithMagicLink\n\n(\n\n{\n\nemail\n\n}\n\n)\n\n;\n\n16\n\n}\n\n16\n\n}", "explanation": "**Re-authenticating Users with Magic Labs Embedded Wallet**\n\nThe given documentation section explains how to re-authenticate users using the Magic Labs embedded wallet. **Main Purpose:**\n\nRe-authentication allows users to log in again without entering their email and password, reducing friction and improving user experience. The session persists for up to 7 days by default, but this duration can be customized through the Magic dashboard.\n\n**Key Steps:**\n\n1. Import the Magic Client SDK.\n2. Create a new Magic instance with your PUBLISHABLE_API_KEY.\n3. Check if the user is already logged in using `isLoggedIn()`.\n4. If the user is logged in, retrieve the DID token using `getIdToken()`.\n5. Use the DID token to authenticate and access protected resources.\n6. If the user is not logged in, log them in using `loginWithMagicLink()`.\n\n**Example Code:**\n\n```javascript\nimport { Magic } from 'magic-sdk';\n\nconst magic = new Magic('PUBLISHABLE_API_KEY');\n\nconst email = 'example@magic.link';\n\nif (await magic.user.isLoggedIn()) {\n  const didToken = await magic.user.getIdToken();\n  // Do something with the DID token\n} else {\n  // Log in the user\n  const user = await magic.auth.loginWithMagicLink({ email });\n}\n```\n\nBy following these steps, you can re-authenticate users with the Magic Labs embedded wallet, enhancing their experience on your application.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#getinfo#chunk-135", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 GitHub\n\n\u2022 Quickstart\n\n\u2022 NPM\n\nGitHub\n\nQuickstart\n\nNPM", "explanation": "In the '#Resources' section of the Magic Labs embedded wallet documentation, you'll find a collection of links to useful resources that can help you navigate and implement the integrated wallet solution.\n\n**Main Purpose:**\nThe primary purpose of this section is to provide a one-stop shop for developers to quickly access essential resources, making it easier to get started with the Magic Labs embedded wallet.\n\n**Individual Resources:**\n\n1. **GitHub**: A link to the Magic Labs GitHub repository, where you can find the source code, issue tracking, and submit pull requests.\n2. **Quickstart**: A guide that provides a step-by-step introduction to getting started with the Magic Labs embedded wallet, covering the basics and essential setup.\n3. **NPM**: A link to the Magic Labs package on the npm registry, which allows you to easily integrate the wallet into your project by installing it as a dependency.\n\nBy combining these resources, the '#Resources' section empowers developers to quickly find the information they need, ultimately accelerating the development and implementation of the Magic Labs embedded wallet solution.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#getinfo#chunk-136", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nAll changes to the SDK are covered in our latest release notes.\n\nlatest release notes", "explanation": "The '#Versions' section in the Magic Labs embedded wallet documentation is about tracking and documenting the changes made to the Magic SDK (Software Development Kit) over time. Its main purpose is to provide a source for users to stay informed about updates, bug fixes, and changes to the SDK, ensuring they are aware of the latest features and functionality.\n\nThis section typically includes the following components:\n\n- **Release Notes**: A detailed log of changes, improvements, and bug fixes applied across multiple versions of the SDK. Developers can use these release notes to identify what has changed, how it affects their code, and whether any updates are required.\n\n- **Version Identification**: The section may provide version identifiers, helping users identify which version of the SDK they are currently using and whether they are running the latest version.\n\nBy regularly consulting the '#Versions' section, developers can:\n\n- Stay up-to-date with the latest SDK releases\n- Identify potential disruptions to their code and make necessary adjustments\n- Ensure they are leveraging the most secure, efficient, and feature-rich versions of the Magic SDK.\n\nIn essence, the '#Versions' section serves as a knowledge hub for Magic SDK users, keeping them informed and enabling them to adapt to changes and improvements over time.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/api/client-side-sdks/web#getinfo#chunk-137", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nMagic wallet provides two options for wallets. Dedicated and Universal, each catering to distinct user preferences and application needs.\n\nYour access to certain SDK methods or blockchains will depend on the wallet type you choose from your developer dashboard.", "explanation": "Based on the documentation provided, the section 'Wallet Types - Overview' discusses the two types of Magic wallets: Dedicated and Universal. The main purpose of this section is to inform developers about the two wallet options, their differences, and how they impact access to specific SDK methods and blockchains.\n\nIn a nutshell, this section serves to:\n\n- Introduce the concept of wallet types\n- Explain the two available wallet options (Dedicated and Universal)\n- Highlight how the chosen wallet type affects developer access to certain SDK methods and blockchains", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/wallets/wallet-types#dedicated-wallet#chunk-1", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\n\u2022 Fully white-labeled authentication and wallet API\n\n\u2022 End users, upon signup, are scoped only to your application\n\n\u2022 Supports all authentication methods, including integration with existing identity providers across 25+ blockchains\n\n\u2022 Pro Bundle offers advanced options such as multi-factor authentication and custom email providers\n\nThis option is ideal for developers who desire granular control over the wallet's user and brand experience, want full control of the data collection from the end user, and need a wallet specifically tailored to their dApp. However, users looking to operate across multiple dApps would need to migrate their private keys to other wallets.", "explanation": "The 'Dedicated Wallet: White-labeled Wallets' option is a specialized wallet solution designed for developers who require a high degree of customization and control over the wallet experience. Here's a summary of its key features and purpose:\n\n**Main Purpose:** This solution is ideal for developers who want to create a seamless, branded wallet experience for their users, while also maintaining control over data collection and user authentication.\n\n**Key Features:**\n\n* Full white-label authentication and wallet API, allowing developers to fully customize the user experience.\n* End-to-end scoping, ensuring users are only accessible within the developer's application.\n* Support for multiple authentication methods and integration with existing identity providers across 25+ blockchains.\n* Advanced options (in the Pro Bundle) such as multi-factor authentication and custom email providers.\n\n**Ideal for:** Developers who need a wallet tailored to their specific dApp, require granular control over user and brand experience, and need control over data collection from users.\n\n**Note:** This solution is best suited for developers who plan to build a dApp with a dedicated user base, as users would need to migrate their private keys to another wallet if they want to access other dApps.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/wallets/wallet-types#dedicated-wallet#chunk-2", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}
{"code": "#\n\nUniversal wallets will soon be merged with Dedicated Wallets into a single product line. Universal apps created before February 7, 2024 will work as expected with no change. See our blog post to learn more.\n\nblog post\n\n\u2022 Plug n' Play, all-in-one wallet widget with a pre-built co-branded UI\n\n\u2022 End users are part of the Magic network and can log in to any other Universal wallet application\n\n\u2022 Supports limited authentication methods: pre-configured Google One Tap and Email OTP login only on Ethereum, Polygon, Flow, Base, Arbitrum, and Optimism blockchains\n\n\u2022 Pro Bundle offers verified third-party wallet email collection and brand customization\n\nUniversal is an optimal choice for end users who favour convenience and ease of access to multiple dApps without managing different wallets. However, developers will need to explicitly request permission to obtain the user's email and have limited branding and theming options.", "explanation": "The \"#Universal Wallet: Embedded Plug & Play Widget\" is a pre-built wallet solution that allows developers to easily integrate a co-branded wallet into their applications. Its main purpose is to provide a seamless, one-stop wallet experience for users, enabling them to access multiple decentralized applications (dApps) without needing to manage multiple wallets.\n\nThe key features of this Universal Wallet include:\n\n1. Pre-built, co-branded UI for easy integration\n2. Supports convenient login methods, such as Google One Tap and Email OTP\n3. Seamlessly connects users to the Magic network, allowing access to multiple dApps\n4. Offers limited authentication methods for specific blockchains (Ethereum, Polygon, Flow, Base, Arbitrum, and Optimism)\n\nThe Universal Wallet is an optimal choice for end users who prioritize convenience and ease of access to multiple dApps. However, developers will need to accommodate the following limitations:\n\n1. Explicit user permission is required to collect the user's email\n2. Limited branding and theming options are available\n\nOverall, the Universal Wallet aims to provide a hassle-free wallet experience for users while offering a streamlined development process for developers.", "metadata": {"repo": "Magic Docs", "file": "https://magic.link/docs/wallets/wallet-types#dedicated-wallet#chunk-3", "chunk_number": 0, "total_chunks": 1}, "repository_explanation": "The Magic Docs provide comprehensive documentation for Magic's services, including API references, SDK guides, and integration tutorials."}

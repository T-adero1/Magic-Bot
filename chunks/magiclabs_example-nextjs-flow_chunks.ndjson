{"code": "NEXT_PUBLIC_MAGIC_API_KEY=\nNEXT_PUBLIC_FCL_BASE_URL=", "explanation": "Environment variable declarations:\n\n* `NEXT_PUBLIC_MAGIC_API_KEY`: stores an API key for Magic (purpose unknown)\n* `NEXT_PUBLIC_FCL_BASE_URL`: stores a base URL for FCL ( likely Front-End Content Library)", "metadata": {"repo": "magiclabs/example-nextjs-flow", "file": ".env.example", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Unfortunately, you haven't provided a repository for me to explain.\n\nIf you provide the repository URL or describe its contents, I'd be happy to give you a concise summary!", "file_summary": "Here is a concise and holistic summary of the file '.env.example':\n\nThis file contains environment variable declarations for two external services: Magic API key and FCL Base URL, making them available as public variables in the NEXT application."}
{"code": "{\n  \"extends\": \"next/core-web-vitals\"\n}\n", "explanation": "This block extends the `next/core-web-vitals` feature, which suggests it enables Web Vitals monitoring in a Next.js project.", "metadata": {"repo": "magiclabs/example-nextjs-flow", "file": ".eslintrc.json", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Unfortunately, you haven't provided a repository for me to explain.\n\nIf you provide the repository URL or describe its contents, I'd be happy to give you a concise summary!", "file_summary": "Here is a concise summary:\n\nThe `.eslintrc.json` file enables Web Vitals monitoring for a Next.js project by extending the `next/core-web-vitals` feature."}
{"code": "{\n  \"trailingComma\": \"all\",\n  \"tabWidth\": 2,\n  \"semi\": false,\n  \"singleQuote\": true,\n  \"endOfLine\": \"auto\",\n  \"jsxSingleQuote\": false,\n  \"printWidth\": 80,\n  \"useTabs\": false,\n  \"plugins\": [\"prettier-plugin-tailwindcss\"]\n}\n", "explanation": "This block is a configuration for Prettier, a code formatter. It sets formatting options such as indentation (tab width), quotes, line length, and plugins (e.g., TailwindCSS).", "metadata": {"repo": "magiclabs/example-nextjs-flow", "file": ".prettierrc.json", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Unfortunately, you haven't provided a repository for me to explain.\n\nIf you provide the repository URL or describe its contents, I'd be happy to give you a concise summary!", "file_summary": "Here's a holistic summary of the file '.prettierrc.json':\n\nConfiguration file for Prettier, setting general formatting rules and customizing behavior with specific options."}
{"code": "{\n  \"recommendations\": [\n    \"bradlc.vscode-tailwindcss\",\n    \"esbenp.prettier-vscode\",\n    \"dbaeumer.vscode-eslint\",\n    \"GitHub.copilot\"\n  ]\n}\n", "explanation": "This block is a JSON object that lists recommended VSCode extensions, providing easy installation links for users.", "metadata": {"repo": "magiclabs/example-nextjs-flow", "file": ".vscode/extensions.json", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Unfortunately, you haven't provided a repository for me to explain.\n\nIf you provide the repository URL or describe its contents, I'd be happy to give you a concise summary!", "file_summary": "Here is a concise and to the point summary:\n\n`.vscode/extensions.json`: A JSON file listing recommended Visual Studio Code (VSCode) extensions with direct installation links for user convenience."}
{"code": "{\n  \"search.exclude\": {\n    \"**/node_modules\": true,\n    \".next/**/*\": true,\n    \"**/dist\": true\n  },\n  \"editor.codeActionsOnSave\": {\n    \"source.fixAll.eslint\": \"explicit\",\n    \"source.fixAll.tslint\": \"explicit\",\n    \"source.fixAll.stylelint\": \"explicit\",\n    \"source.organizeImports\": \"explicit\"\n  },\n  \"editor.formatOnSave\": true,\n  \"typescript.preferences.importModuleSpecifier\": \"non-relative\",\n  \"typescript.tsdk\": \"node_modules/typescript/lib\",\n  \"typescript.enablePromptUseWorkspaceTsdk\": true,\n  \"css.lint.unknownAtRules\": \"ignore\", \n}\n", "explanation": "Here is a concise summary of the block:\n\n**Configuration settings**\n\n* Excludes certain directories from search results\n* Formats code on save with specified actions (e.g. fixing linting issues, organizing imports)\n* Sets TypeScript preferences and SDK location\n* Ignores unknown CSS at-rules in linting", "metadata": {"repo": "magiclabs/example-nextjs-flow", "file": ".vscode/settings.json", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Unfortunately, you haven't provided a repository for me to explain.\n\nIf you provide the repository URL or describe its contents, I'd be happy to give you a concise summary!", "file_summary": "Here is a concise summary of the file '.vscode/settings.json':\n\n**Editor configuration**\n\nThis file sets various editor settings, including search exclusions, code formatting on save, TypeScript preferences, and styling rules, to enhance development efficiency and code quality."}
{"code": "This is a [Next.js](https://nextjs.org/) project bootstrapped with [`create-next-app`](https://github.com/vercel/next.js/tree/canary/packages/create-next-app).\n\n## Getting Started\n\nFirst, run the development server:\n\n```bash\nnpm run dev\n# or\nyarn dev\n# or\npnpm dev\n# or\nbun dev\n```\n\nOpen [http://localhost:3000](http://localhost:3000) with your browser to see the result.\n\nYou can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.\n\nThis project uses [`next/font`](https://nextjs.org/docs/basic-features/font-optimization) to automatically optimize and load Inter, a custom Google Font.\n\n## Learn More\n\nTo learn more about Next.js, take a look at the following resources:\n\n- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.\n- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.\n\nYou can check out [the Next.js GitHub repository](https://github.com/vercel/next.js/) - your feedback and contributions are welcome!\n", "explanation": "Here is a concise summary of the purpose and functionality:\n\n**Purpose:** This is a Next.js project created with `create-next-app`.\n\n**Functionality:** A development server can be started using various commands (npm, yarn, pnpm, bun) to preview the project at localhost:3000. The page auto-updates as the code changes in `app/page.tsx`.", "metadata": {"repo": "magiclabs/example-nextjs-flow", "file": "README.md", "chunk_number": 1, "total_chunks": 2}, "repository_explanation": "Unfortunately, you haven't provided a repository for me to explain.\n\nIf you provide the repository URL or describe its contents, I'd be happy to give you a concise summary!", "file_summary": "Here is a concise summary of the file 'README.md':\n\n\"Next.js project created with `create-next-app`, allowing for easy development server startup via npm, yarn, pnpm, or bun commands.\""}
{"code": "## Deploy on Vercel\n\nThe easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.\n\nCheck out our [Next.js deployment documentation](https://nextjs.org/docs/deployment) for more details.\n", "explanation": "**Summary:** This block provides a link to deploy a Next.js app on Vercel, a platform created by the same team as Next.js.", "metadata": {"repo": "magiclabs/example-nextjs-flow", "file": "README.md", "chunk_number": 2, "total_chunks": 2}, "repository_explanation": "Unfortunately, you haven't provided a repository for me to explain.\n\nIf you provide the repository URL or describe its contents, I'd be happy to give you a concise summary!", "file_summary": "Here is a concise summary of the file 'README.md':\n\n\"Next.js project created with `create-next-app`, allowing for easy development server startup via npm, yarn, pnpm, or bun commands.\""}
{"code": "'use client'\n\nimport { useUser } from '@/hooks/use-user'\nimport { useRouter } from 'next/navigation'\nimport { PropsWithChildren, useEffect, useState } from 'react'\n\nexport default function SignInLayout({ children }: PropsWithChildren) {\n  const router = useRouter()\n  const [isMounted, setIsMounted] = useState(false)\n  const { isLoggedIn } = useUser()\n\n  useEffect(() => {\n    if (!isLoggedIn) {\n      router.push('/sign-in')\n    }\n    setIsMounted(true)\n  }, [isLoggedIn, router])\n\n  if (!isMounted) {\n    return <div>Checking session...</div>\n  }\n\n  return !isLoggedIn ? <div>Checking session...</div> : <>{children}</>\n}\n", "explanation": "Here is a concise summary:\n\n**Purpose:** Redirects user to sign-in page if not logged in.\n\n**Functionality:** Checks login status, displays loading message until checked, then shows content (if logged in) or redirects to sign-in page (if not).", "metadata": {"repo": "magiclabs/example-nextjs-flow", "file": "app/(auth)/layout.tsx", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Unfortunately, you haven't provided a repository for me to explain.\n\nIf you provide the repository URL or describe its contents, I'd be happy to give you a concise summary!", "file_summary": "Here is a concise and holistic summary:\n\n**app/auth/layout.tsx**: Authenticates user upon loading, displaying a loading message until verified; if logged in, renders content; otherwise, redirects to sign-in page."}
{"code": "'use client'\n\nimport { AppUtilsCard } from '@/components/app-utils-card'\nimport { BuildersCard } from '@/components/builders-card'\nimport { ContractsCard } from '@/components/contracts-card'\nimport { CurrentUserCard } from '@/components/current-user-card'\nimport { OnChainInteractionsCard } from '@/components/on-chain-interactions-card'\nimport { PreBuiltInteractionsCard } from '@/components/pre-built-interactions-card'\nimport { TransactionStatusUtilityCard } from '@/components/transaction-status-utility-card'\nimport { TypographyH2 } from '@/components/ui/typography'\nimport { UserInfoCard } from '@/components/user-info-card'\n\nexport default function Home() {\n  return (\n    <div className=\"flex w-full flex-1 flex-col\">\n      <TypographyH2>Magic FCL Wallet</TypographyH2>\n      <br />\n\n      <div className=\"flex flex-col space-y-6\">\n        <UserInfoCard />\n\n        <ContractsCard />\n        <OnChainInteractionsCard />\n        <PreBuiltInteractionsCard />\n        <TransactionStatusUtilityCard />", "explanation": "**Summary:**\n\nThis block is a React functional component named `Home`. It imports various cards from custom components and returns a container with multiple card sections, including user info, contracts, interactions, and transaction status utilities. The purpose is to display these cards on the home page of an application, specifically the Magic FCL Wallet.", "metadata": {"repo": "magiclabs/example-nextjs-flow", "file": "app/(auth)/page.tsx", "chunk_number": 1, "total_chunks": 2}, "repository_explanation": "Unfortunately, you haven't provided a repository for me to explain.\n\nIf you provide the repository URL or describe its contents, I'd be happy to give you a concise summary!", "file_summary": "Here is a concise summary:\n\n`page.tsx`: The \"Home\" component in the Magic FCL Wallet app, rendering multiple card sections with user info, contracts, interactions, and transaction utilities."}
{"code": "        <AppUtilsCard />\n        <BuildersCard />\n        <CurrentUserCard />\n      </div>\n    </div>\n  )\n}\n", "explanation": "A group of cards displaying user-specific information and tools: \n\n- App Utils Card\n- Builders Card\n- Current User Card", "metadata": {"repo": "magiclabs/example-nextjs-flow", "file": "app/(auth)/page.tsx", "chunk_number": 2, "total_chunks": 2}, "repository_explanation": "Unfortunately, you haven't provided a repository for me to explain.\n\nIf you provide the repository URL or describe its contents, I'd be happy to give you a concise summary!", "file_summary": "Here is a concise summary:\n\n`page.tsx`: The \"Home\" component in the Magic FCL Wallet app, rendering multiple card sections with user info, contracts, interactions, and transaction utilities."}
{"code": "@tailwind base;\n@tailwind components;\n@tailwind utilities;\n \n@layer base {\n  :root {\n    --background: 0 0% 100%;\n    --foreground: 0 0% 3.9%;\n\n    --card: 0 0% 100%;\n    --card-foreground: 0 0% 3.9%;\n \n    --popover: 0 0% 100%;\n    --popover-foreground: 0 0% 3.9%;\n \n    --primary: 0 0% 9%;\n    --primary-foreground: 0 0% 98%;\n \n    --secondary: 0 0% 96.1%;\n    --secondary-foreground: 0 0% 9%;\n \n    --muted: 0 0% 96.1%;\n    --muted-foreground: 0 0% 45.1%;\n \n    --accent: 0 0% 96.1%;\n    --accent-foreground: 0 0% 9%;\n \n    --destructive: 0 84.2% 60.2%;\n    --destructive-foreground: 0 0% 98%;\n\n    --border: 0 0% 89.8%;\n    --input: 0 0% 89.8%;\n    --ring: 0 0% 3.9%;\n \n    --radius: 0.5rem;\n  }\n \n  .dark {\n    --background: 0 0% 3.9%;\n    --foreground: 0 0% 98%;\n \n    --card: 0 0% 3.9%;\n    --card-foreground: 0 0% 98%;\n \n    --popover: 0 0% 3.9%;\n    --popover-foreground: 0 0% 98%;\n \n    --primary: 0 0% 98%;\n    --primary-foreground: 0 0% 9%;\n \n    --secondary: 0 0% 14.9%;\n    --secondary-foreground: 0 0% 98%;\n \n    --muted: 0 0% 14.9%;", "explanation": "Here is a concise summary:\n\n**Purpose:** Define custom color palette and typography variables for a Tailwind CSS project.\n\n**Functionality:** This block sets up pre-defined color palettes (e.g., background, foreground, primary, secondary) and typography settings that can be used throughout the application. It also defines a `.dark` class to switch between light and dark themes.", "metadata": {"repo": "magiclabs/example-nextjs-flow", "file": "app/globals.css", "chunk_number": 1, "total_chunks": 2}, "repository_explanation": "Unfortunately, you haven't provided a repository for me to explain.\n\nIf you provide the repository URL or describe its contents, I'd be happy to give you a concise summary!", "file_summary": "Here is a concise summary:\n\n**app/globals.css**: Defines custom color palette and typography variables for Tailwind CSS, enabling theme switching via `.dark` class, and sets up global styles with the `@layer` directive."}
{"code": "    --muted-foreground: 0 0% 63.9%;\n \n    --accent: 0 0% 14.9%;\n    --accent-foreground: 0 0% 98%;\n \n    --destructive: 0 62.8% 30.6%;\n    --destructive-foreground: 0 0% 98%;\n \n    --border: 0 0% 14.9%;\n    --input: 0 0% 14.9%;\n    --ring: 0 0% 83.1%;\n  }\n}\n \n@layer base {\n  * {\n    @apply border-border;\n  }\n  body {\n    @apply bg-background text-foreground;\n  }\n}", "explanation": "This block defines a set of CSS variables for styling a user interface, including colors and borders. It also applies these styles to the base layer of an HTML document using the `@layer` directive.", "metadata": {"repo": "magiclabs/example-nextjs-flow", "file": "app/globals.css", "chunk_number": 2, "total_chunks": 2}, "repository_explanation": "Unfortunately, you haven't provided a repository for me to explain.\n\nIf you provide the repository URL or describe its contents, I'd be happy to give you a concise summary!", "file_summary": "Here is a concise summary:\n\n**app/globals.css**: Defines custom color palette and typography variables for Tailwind CSS, enabling theme switching via `.dark` class, and sets up global styles with the `@layer` directive."}
{"code": "import { QueryProvider } from '@/components/query-provider'\nimport { ThemeProvider } from '@/components/theme-provider'\nimport { Toaster } from '@/components/ui/toaster'\nimport type { Metadata } from 'next'\nimport { Inter } from 'next/font/google'\nimport './globals.css'\n\nconst inter = Inter({ subsets: ['latin'] })\n\nexport const metadata: Metadata = {\n  title: 'Magic + FCL Example',\n  description: 'A Next.js starter with Magic and FCL',\n}\n\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html lang=\"en\">\n      <body className={inter.className}>\n        <QueryProvider>\n          <ThemeProvider\n            attribute=\"class\"\n            forcedTheme=\"dark\"\n            disableTransitionOnChange\n          >\n            <main className=\"flex min-h-svh flex-col items-center p-4 md:p-24\">\n              {children}\n              <Toaster />\n            </main>\n          </ThemeProvider>\n        </QueryProvider>\n      </body>\n    </html>\n  )\n}\n", "explanation": "**Summary**\n\nThis block sets up a Next.js application with global styles, typography, and providers for theme management (`ThemeProvider`) and query data (`QueryProvider`). It also includes a toaster notification component. The layout serves as a container for other pages within the app.", "metadata": {"repo": "magiclabs/example-nextjs-flow", "file": "app/layout.tsx", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Unfortunately, you haven't provided a repository for me to explain.\n\nIf you provide the repository URL or describe its contents, I'd be happy to give you a concise summary!", "file_summary": "Here is a concise summary:\n\nThe `app/layout.tsx` file sets up the basic structure of the Next.js application, including global styles, typography, theme management, query data providers, and a toaster notification component, serving as a container for other pages within the app."}
{"code": "export default function Loading() {\n  return <div>loading...</div>\n}\n", "explanation": "**Purpose:** A reusable React component for displaying a loading animation.\n\n**Functionality:** Simply displays the text \"loading...\" on screen.", "metadata": {"repo": "magiclabs/example-nextjs-flow", "file": "app/loading.tsx", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Unfortunately, you haven't provided a repository for me to explain.\n\nIf you provide the repository URL or describe its contents, I'd be happy to give you a concise summary!", "file_summary": "Here is a concise and to-the-point holistic summary of the file 'app/loading.tsx':\n\n\"A simple, reusable React component that displays a 'loading...' message on screen.\""}
{"code": "'use client'\n\nimport { zodResolver } from '@hookform/resolvers/zod'\nimport { useForm } from 'react-hook-form'\n\nimport { Button } from '@/components/ui/button'\nimport {\n  Card,\n  CardContent,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from '@/components/ui/card'\nimport {\n  Form,\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from '@/components/ui/form'\nimport { Input } from '@/components/ui/input'\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select'\nimport { TypographySmall } from '@/components/ui/typography'\nimport { useToast } from '@/components/ui/use-toast'\nimport { FCL_BASE_URL, MAGIC_API_KEY } from '@/constants/env'\nimport { fcl } from '@/lib/fcl'\nimport { useRouter } from 'next/navigation'\nimport { useEffect } from 'react'\nimport { z } from 'zod'\n\nconst FormSchema = z.object({\n  network: z.string(),\n  apiKey: z.string(),\n  method: z.string(),\n  locale: z.string(),\n})\n\nexport default function DefaultPage() {", "explanation": "Here is a concise summary of the block's purpose and functionality:\n\n**Purpose:** A React component that defines a form with validation using Hook Form and Zod resolvers.\n\n**Functionality:** The form collects data (network, API key, method, locale) through input fields and provides validation feedback. It also includes buttons for submission and possibly Toast notifications.", "metadata": {"repo": "magiclabs/example-nextjs-flow", "file": "app/sign-in/default/page.tsx", "chunk_number": 1, "total_chunks": 6}, "repository_explanation": "Unfortunately, you haven't provided a repository for me to explain.\n\nIf you provide the repository URL or describe its contents, I'd be happy to give you a concise summary!", "file_summary": "Here's a holistic summary of the file 'app/sign-in/default/page.tsx':\n\n**Summary:** This React component handles user login and authentication for the Flow blockchain, featuring a form with validation, submission handling, and error display. It collects data through input fields, submits it to authenticate users, and configures FCL settings based on form input."}
{"code": "  const router = useRouter()\n  const { toast } = useToast()\n\n  const form = useForm<z.infer<typeof FormSchema>>({\n    resolver: zodResolver(FormSchema),\n    defaultValues: {\n      network: 'testnet',\n      apiKey: MAGIC_API_KEY,\n      method: 'default',\n      locale: 'en',\n    },\n  })\n\n  const method = form.watch('method')\n\n  const onSubmit = async ({\n    network,\n    apiKey,\n    locale,\n  }: z.infer<typeof FormSchema>) => {\n    try {\n      fcl.config().put('flow.network', network)\n      fcl\n        .config()\n        .put(\n          'accessNode.api',\n          network === 'mainnet'\n            ? 'https://rest-mainnet.onflow.org'\n            : 'https://access-testnet.onflow.org',\n        )\n\n      fcl.config().put(\n        'discovery.wallet',\n        `${FCL_BASE_URL}/${locale}/authn?${new URLSearchParams({\n          apiKey,\n        })}`,\n      )\n      fcl.config().put('discovery.wallet.method', 'IFRAME/RPC')\n\n      const user = await fcl.authenticate()\n      if (!user.loggedIn) {\n        throw new Error(\"You're not logged in\")", "explanation": "Here is a summary of the block's purpose and functionality:\n\n**Purpose:** Handles form submission for Flow blockchain authentication.\n\n**Functionality:** Uses Formik's `useForm` hook with Zod validation, submits form data to authenticate user on Flow blockchain, configures FCL (Flow Client Library) settings based on form input, and authenticates user using FCL.", "metadata": {"repo": "magiclabs/example-nextjs-flow", "file": "app/sign-in/default/page.tsx", "chunk_number": 2, "total_chunks": 6}, "repository_explanation": "Unfortunately, you haven't provided a repository for me to explain.\n\nIf you provide the repository URL or describe its contents, I'd be happy to give you a concise summary!", "file_summary": "Here's a holistic summary of the file 'app/sign-in/default/page.tsx':\n\n**Summary:** This React component handles user login and authentication for the Flow blockchain, featuring a form with validation, submission handling, and error display. It collects data through input fields, submits it to authenticate users, and configures FCL settings based on form input."}
{"code": "      }\n      console.log({ user })\n\n      toast({\n        title: 'Success Login',\n        description: 'You have successfully logged in!',\n      })\n      router.push('/')\n    } catch (e) {\n      form.setError('root', {\n        message: e instanceof Error ? e.message : 'An unknown error occurred',\n      })\n    }\n  }\n\n  useEffect(() => {\n    router.push('/sign-in/' + method)\n  }, [method, router])\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>FCL Authenticate</CardTitle>\n      </CardHeader>\n      <Form {...form}>\n        <form onSubmit={form.handleSubmit(onSubmit)}>\n          <CardContent className=\"space-y-6\">\n            <FormField\n              control={form.control}\n              name=\"network\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Network</FormLabel>\n                  <FormDescription></FormDescription>\n                  <Select\n                    onValueChange={field.onChange}\n                    defaultValue={field.value}\n                  >", "explanation": "Here is a concise summary of the purpose and functionality of this block:\n\n**Purpose:** Handle user login and authentication.\n\n**Functionality:**\n\n* When form is submitted, it calls `onSubmit` function with user data.\n* `onSubmit` function logs the user in, displays a success toast message, and redirects to the root URL.\n* If an error occurs during submission, it sets the error on the form.\n* Upon page load, it uses `useEffect` hook to redirect to the sign-in page with a specified method parameter.", "metadata": {"repo": "magiclabs/example-nextjs-flow", "file": "app/sign-in/default/page.tsx", "chunk_number": 3, "total_chunks": 6}, "repository_explanation": "Unfortunately, you haven't provided a repository for me to explain.\n\nIf you provide the repository URL or describe its contents, I'd be happy to give you a concise summary!", "file_summary": "Here's a holistic summary of the file 'app/sign-in/default/page.tsx':\n\n**Summary:** This React component handles user login and authentication for the Flow blockchain, featuring a form with validation, submission handling, and error display. It collects data through input fields, submits it to authenticate users, and configures FCL settings based on form input."}
{"code": "                    <FormControl>\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select a verified email to display\" />\n                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent>\n                      <SelectItem value=\"mainnet\">Mainnet</SelectItem>\n                      <SelectItem value=\"testnet\">Testnet</SelectItem>\n                    </SelectContent>\n                  </Select>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            <FormField\n              control={form.control}\n              name=\"locale\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Locale</FormLabel>\n                  <FormDescription></FormDescription>\n                  <Select\n                    onValueChange={field.onChange}\n                    defaultValue={field.value}\n                  >\n                    <FormControl>", "explanation": "This block is a dropdown menu (Select) with two options: \"Mainnet\" and \"Testnet\". It allows users to select one of these options, which will trigger an action when changed. The selected value is linked to a form field called \"locale\".", "metadata": {"repo": "magiclabs/example-nextjs-flow", "file": "app/sign-in/default/page.tsx", "chunk_number": 4, "total_chunks": 6}, "repository_explanation": "Unfortunately, you haven't provided a repository for me to explain.\n\nIf you provide the repository URL or describe its contents, I'd be happy to give you a concise summary!", "file_summary": "Here's a holistic summary of the file 'app/sign-in/default/page.tsx':\n\n**Summary:** This React component handles user login and authentication for the Flow blockchain, featuring a form with validation, submission handling, and error display. It collects data through input fields, submits it to authenticate users, and configures FCL settings based on form input."}
{"code": "                      <SelectTrigger>\n                        <SelectValue />\n                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent>\n                      <SelectItem value=\"en\">en</SelectItem>\n                      <SelectItem value=\"ja\">ja</SelectItem>\n                    </SelectContent>\n                  </Select>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            <FormField\n              control={form.control}\n              name=\"apiKey\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Magic API Key</FormLabel>\n                  <FormControl>\n                    <Input placeholder=\"Your API Key\" {...field} />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            {form.formState.errors.root && (\n              <div>", "explanation": "Here is a concise summary of the purpose and functionality:\n\n**Purpose:** A form input field with validation and error handling.\n\n**Functionality:** \n\n* Allows user to select a language (en or ja) using dropdown options.\n* Requires user to enter an API key in a text field, with validation and error messages displayed as needed.", "metadata": {"repo": "magiclabs/example-nextjs-flow", "file": "app/sign-in/default/page.tsx", "chunk_number": 5, "total_chunks": 6}, "repository_explanation": "Unfortunately, you haven't provided a repository for me to explain.\n\nIf you provide the repository URL or describe its contents, I'd be happy to give you a concise summary!", "file_summary": "Here's a holistic summary of the file 'app/sign-in/default/page.tsx':\n\n**Summary:** This React component handles user login and authentication for the Flow blockchain, featuring a form with validation, submission handling, and error display. It collects data through input fields, submits it to authenticate users, and configures FCL settings based on form input."}
{"code": "                <TypographySmall className=\"text-red-500 dark:text-red-900\">\n                  {form.formState.errors.root.message}\n                </TypographySmall>\n              </div>\n            )}\n          </CardContent>\n          <CardFooter>\n            <Button\n              type=\"submit\"\n              size=\"lg\"\n              className=\"w-full\"\n              disabled={\n                form.formState.isSubmitting || form.formState.isSubmitSuccessful\n              }\n            >\n              Sign In\n            </Button>\n          </CardFooter>\n        </form>\n      </Form>\n    </Card>\n  )\n}\n", "explanation": "**Summary:**\n\nThis block displays an error message from a form submission, while also rendering a submit button. The button is disabled when the form is submitting or has already been submitted successfully.", "metadata": {"repo": "magiclabs/example-nextjs-flow", "file": "app/sign-in/default/page.tsx", "chunk_number": 6, "total_chunks": 6}, "repository_explanation": "Unfortunately, you haven't provided a repository for me to explain.\n\nIf you provide the repository URL or describe its contents, I'd be happy to give you a concise summary!", "file_summary": "Here's a holistic summary of the file 'app/sign-in/default/page.tsx':\n\n**Summary:** This React component handles user login and authentication for the Flow blockchain, featuring a form with validation, submission handling, and error display. It collects data through input fields, submits it to authenticate users, and configures FCL settings based on form input."}
{"code": "'use client'\n\nimport { zodResolver } from '@hookform/resolvers/zod'\nimport { useForm } from 'react-hook-form'\n\nimport { Button } from '@/components/ui/button'\nimport {\n  Card,\n  CardContent,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from '@/components/ui/card'\nimport {\n  Form,\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from '@/components/ui/form'\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select'\nimport { TypographySmall } from '@/components/ui/typography'\nimport { useToast } from '@/components/ui/use-toast'\nimport { fcl } from '@/lib/fcl'\nimport { useRouter } from 'next/navigation'\nimport { z } from 'zod'\n\nconst FormSchema = z.object({\n  network: z.string(),\n})\n\nexport default function DiscoveryPage() {\n  const router = useRouter()\n  const { toast } = useToast()\n\n  const form = useForm<z.infer<typeof FormSchema>>({\n    resolver: zodResolver(FormSchema),\n    defaultValues: {\n      network: 'testnet',\n    },\n  })\n", "explanation": "Here is a concise summary of the purpose and functionality of this block:\n\n**Purpose:** A React functional component for handling form submissions with validation.\n\n**Functionality:** It uses `react-hook-form` with Zod resolver to validate user input, provides a simple form interface with customizable UI components, and allows redirecting to another page on successful submission.", "metadata": {"repo": "magiclabs/example-nextjs-flow", "file": "app/sign-in/discovery/page.tsx", "chunk_number": 1, "total_chunks": 4}, "repository_explanation": "Unfortunately, you haven't provided a repository for me to explain.\n\nIf you provide the repository URL or describe its contents, I'd be happy to give you a concise summary!", "file_summary": "Here's a concise holistic summary:\n\n**Summary:** This React component, `signInDisoveryPage`, authenticates users with Flow Blockchain (FCL) and updates configuration settings. It displays a login form with error handling, allows network selection, and redirects to the root URL upon successful authentication."}
{"code": "  const onSubmit = async ({ network }: z.infer<typeof FormSchema>) => {\n    try {\n      fcl.config().put('flow.network', network)\n      fcl\n        .config()\n        .put(\n          'accessNode.api',\n          network === 'mainnet'\n            ? 'https://rest-mainnet.onflow.org'\n            : 'https://access-testnet.onflow.org',\n        )\n\n      fcl\n        .config()\n        .put(\n          'discovery.wallet',\n          `https://fcl-discovery.onflow.org/${network}/authn`,\n        )\n\n      const user = await fcl.authenticate()\n      if (!user.loggedIn) {\n        throw new Error(\"You're not logged in\")\n      }\n      console.log({ user })\n\n      toast({\n        title: 'Success Login',\n        description: 'You have successfully logged in!',\n      })\n      router.push('/')\n    } catch (e) {\n      form.setError('root', {\n        message: e instanceof Error ? e.message : 'An unknown error occurred',\n      })\n    }\n  }\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>FCL Authenticate</CardTitle>\n      </CardHeader>", "explanation": "Here is a concise summary of the block's purpose and functionality:\n\n**Purpose:** Authenticate user with Flow Blockchain (FCL) and update configuration settings.\n\n**Functionality:** \n\n1. Updates FCL configuration settings based on selected network.\n2. Authenticates user using FCL authentication API.\n3. If successful, logs in user and redirects to root URL.\n4. Displays a toast message upon success or error.", "metadata": {"repo": "magiclabs/example-nextjs-flow", "file": "app/sign-in/discovery/page.tsx", "chunk_number": 2, "total_chunks": 4}, "repository_explanation": "Unfortunately, you haven't provided a repository for me to explain.\n\nIf you provide the repository URL or describe its contents, I'd be happy to give you a concise summary!", "file_summary": "Here's a concise holistic summary:\n\n**Summary:** This React component, `signInDisoveryPage`, authenticates users with Flow Blockchain (FCL) and updates configuration settings. It displays a login form with error handling, allows network selection, and redirects to the root URL upon successful authentication."}
{"code": "      <CardContent>\n        <Form {...form}>\n          <form className=\"space-y-6\">\n            <FormField\n              control={form.control}\n              name=\"network\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Network</FormLabel>\n                  <FormDescription></FormDescription>\n                  <Select\n                    onValueChange={field.onChange}\n                    defaultValue={field.value}\n                  >\n                    <FormControl>\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select a verified email to display\" />\n                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent>\n                      <SelectItem value=\"mainnet\">Mainnet</SelectItem>\n                      <SelectItem value=\"testnet\">Testnet</SelectItem>\n                    </SelectContent>\n                  </Select>\n                  <FormMessage />\n                </FormItem>", "explanation": "**Summary:**\n\nThis block is a form field that allows users to select a network (Mainnet or Testnet) from a dropdown menu using a controlled Select component.", "metadata": {"repo": "magiclabs/example-nextjs-flow", "file": "app/sign-in/discovery/page.tsx", "chunk_number": 3, "total_chunks": 4}, "repository_explanation": "Unfortunately, you haven't provided a repository for me to explain.\n\nIf you provide the repository URL or describe its contents, I'd be happy to give you a concise summary!", "file_summary": "Here's a concise holistic summary:\n\n**Summary:** This React component, `signInDisoveryPage`, authenticates users with Flow Blockchain (FCL) and updates configuration settings. It displays a login form with error handling, allows network selection, and redirects to the root URL upon successful authentication."}
{"code": "              )}\n            />\n\n            {form.formState.errors.root && (\n              <div>\n                <TypographySmall className=\"text-red-500 dark:text-red-900\">\n                  {form.formState.errors.root.message}\n                </TypographySmall>\n              </div>\n            )}\n          </form>\n        </Form>\n      </CardContent>\n      <CardFooter>\n        <Button\n          type=\"submit\"\n          size=\"lg\"\n          className=\"w-full\"\n          onClick={form.handleSubmit(onSubmit)}\n          disabled={\n            form.formState.isSubmitting || form.formState.isSubmitSuccessful\n          }\n        >\n          Sign In\n        </Button>\n      </CardFooter>\n    </Card>\n  )\n}\n", "explanation": "This block appears to be JSX code that renders a login form with error handling and submit functionality.\n\n**Purpose:** Display a login form with an error message if submission fails.\n\n**Functionality:**\n\n1. Shows a \"Sign In\" button that submits the form when clicked.\n2. Displays an error message below the form if there are validation errors.\n3. Disables the \"Sign In\" button while the form is being submitted or after successful submission.", "metadata": {"repo": "magiclabs/example-nextjs-flow", "file": "app/sign-in/discovery/page.tsx", "chunk_number": 4, "total_chunks": 4}, "repository_explanation": "Unfortunately, you haven't provided a repository for me to explain.\n\nIf you provide the repository URL or describe its contents, I'd be happy to give you a concise summary!", "file_summary": "Here's a concise holistic summary:\n\n**Summary:** This React component, `signInDisoveryPage`, authenticates users with Flow Blockchain (FCL) and updates configuration settings. It displays a login form with error handling, allows network selection, and redirects to the root URL upon successful authentication."}
{"code": "'use client'\n\nimport { zodResolver } from '@hookform/resolvers/zod'\nimport { useForm } from 'react-hook-form'\n\nimport { Button } from '@/components/ui/button'\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from '@/components/ui/card'\nimport {\n  Form,\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from '@/components/ui/form'\nimport { Input } from '@/components/ui/input'\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select'\nimport { TypographySmall } from '@/components/ui/typography'\nimport { useToast } from '@/components/ui/use-toast'\nimport { FCL_BASE_URL, MAGIC_API_KEY } from '@/constants/env'\nimport { fcl } from '@/lib/fcl'\nimport { useRouter } from 'next/navigation'\nimport { z } from 'zod'\n\nconst FormSchema = z.object({\n  method: z.string(),\n  network: z.string(),\n  apiKey: z.string(),\n  email: z.string().email(),\n  locale: z.string(),\n})\n\nexport default function EmailOTPPage() {", "explanation": "Here is a concise summary:\n\n**Purpose:** A React Hook Form with validation, used for collecting user data (email, method, network, API key, etc.).\n\n**Functionality:** It renders a form with various fields (inputs, select menus), validates user input using Zod schema, and displays errors or success messages.", "metadata": {"repo": "magiclabs/example-nextjs-flow", "file": "app/sign-in/email-otp/page.tsx", "chunk_number": 1, "total_chunks": 7}, "repository_explanation": "Unfortunately, you haven't provided a repository for me to explain.\n\nIf you provide the repository URL or describe its contents, I'd be happy to give you a concise summary!", "file_summary": "Here is a concise and holistic summary of the file 'app/sign-in/email-otp/page.tsx':\n\n**Purpose:** Authenticate user login using custom UI with email OTP.\n\n**Functionality:** Validates email input, configures Flow blockchain integration, authenticates user with toast notification upon successful submission."}
{"code": "  const router = useRouter()\n  const { toast } = useToast()\n\n  const form = useForm<z.infer<typeof FormSchema>>({\n    resolver: zodResolver(FormSchema),\n    defaultValues: {\n      method: 'email-otp',\n      network: 'testnet',\n      apiKey: MAGIC_API_KEY,\n      email: '',\n      locale: 'en',\n    },\n  })\n\n  const onSubmit = async ({\n    method,\n    network,\n    apiKey,\n    email,\n    locale,\n  }: z.infer<typeof FormSchema>) => {\n    try {\n      fcl.config().put('flow.network', network)\n      fcl\n        .config()\n        .put(\n          'accessNode.api',\n          network === 'mainnet'\n            ? 'https://rest-mainnet.onflow.org'\n            : 'https://access-testnet.onflow.org',\n        )\n      fcl.config().put(\n        'discovery.wallet',\n        `${FCL_BASE_URL}/${locale}/authn?${new URLSearchParams({\n          apiKey,\n          method,\n          email,\n        })}`,\n      )\n      fcl.config().put('discovery.wallet.method', 'IFRAME/RPC')\n\n      const user = await fcl.authenticate()\n      if (!user.loggedIn) {", "explanation": "Here is a summary of the purpose and functionality of this block:\n\n**Purpose:** Handle form submission with Flow blockchain integration.\n\n**Functionality:**\n\n* Validates form data using Zod schema\n* Sets default values for form fields\n* Configures Flow ChainLink (FCL) API settings based on form data\n* Authenticates user with FCL when form is submitted.", "metadata": {"repo": "magiclabs/example-nextjs-flow", "file": "app/sign-in/email-otp/page.tsx", "chunk_number": 2, "total_chunks": 7}, "repository_explanation": "Unfortunately, you haven't provided a repository for me to explain.\n\nIf you provide the repository URL or describe its contents, I'd be happy to give you a concise summary!", "file_summary": "Here is a concise and holistic summary of the file 'app/sign-in/email-otp/page.tsx':\n\n**Purpose:** Authenticate user login using custom UI with email OTP.\n\n**Functionality:** Validates email input, configures Flow blockchain integration, authenticates user with toast notification upon successful submission."}
{"code": "        throw new Error(\"You're not logged in\")\n      }\n      console.log({ user })\n\n      toast({\n        title: 'Success Login',\n        description: 'You have successfully logged in!',\n      })\n      router.push('/')\n    } catch (e) {\n      form.setError('root', {\n        message: e instanceof Error ? e.message : 'An unknown error occurred',\n      })\n    }\n  }\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>FCL Authenticate</CardTitle>\n        <CardDescription>Sign in with mail OTP using custom UI</CardDescription>\n      </CardHeader>\n      <Form {...form}>\n        <form onSubmit={form.handleSubmit(onSubmit)}>\n          <CardContent className=\"space-y-6\">\n            <FormField\n              control={form.control}\n              name=\"network\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Network</FormLabel>\n                  <FormDescription></FormDescription>\n                  <Select\n                    onValueChange={field.onChange}", "explanation": "Here is a concise summary:\n\n**Purpose:** Authenticate user login using custom UI.\n\n**Functionality:**\n\n* Validate login credentials\n* Handle errors\n* Log in successful users with toast notification and redirect to home page\n* Display error message on form if authentication fails", "metadata": {"repo": "magiclabs/example-nextjs-flow", "file": "app/sign-in/email-otp/page.tsx", "chunk_number": 3, "total_chunks": 7}, "repository_explanation": "Unfortunately, you haven't provided a repository for me to explain.\n\nIf you provide the repository URL or describe its contents, I'd be happy to give you a concise summary!", "file_summary": "Here is a concise and holistic summary of the file 'app/sign-in/email-otp/page.tsx':\n\n**Purpose:** Authenticate user login using custom UI with email OTP.\n\n**Functionality:** Validates email input, configures Flow blockchain integration, authenticates user with toast notification upon successful submission."}
{"code": "                    defaultValue={field.value}\n                  >\n                    <FormControl>\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select a verified email to display\" />\n                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent>\n                      <SelectItem value=\"mainnet\">Mainnet</SelectItem>\n                      <SelectItem value=\"testnet\">Testnet</SelectItem>\n                    </SelectContent>\n                  </Select>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            <FormField\n              control={form.control}\n              name=\"locale\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Locale</FormLabel>\n                  <FormDescription></FormDescription>\n                  <Select\n                    onValueChange={field.onChange}\n                    defaultValue={field.value}", "explanation": "Here is a concise summary:\n\nThis block is a form field that allows users to select an option from a dropdown list, with options for \"Mainnet\" and \"Testnet\". It also includes a message field below the selection.", "metadata": {"repo": "magiclabs/example-nextjs-flow", "file": "app/sign-in/email-otp/page.tsx", "chunk_number": 4, "total_chunks": 7}, "repository_explanation": "Unfortunately, you haven't provided a repository for me to explain.\n\nIf you provide the repository URL or describe its contents, I'd be happy to give you a concise summary!", "file_summary": "Here is a concise and holistic summary of the file 'app/sign-in/email-otp/page.tsx':\n\n**Purpose:** Authenticate user login using custom UI with email OTP.\n\n**Functionality:** Validates email input, configures Flow blockchain integration, authenticates user with toast notification upon successful submission."}
{"code": "                  >\n                    <FormControl>\n                      <SelectTrigger>\n                        <SelectValue />\n                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent>\n                      <SelectItem value=\"en\">en</SelectItem>\n                      <SelectItem value=\"ja\">ja</SelectItem>\n                    </SelectContent>\n                  </Select>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            <FormField\n              control={form.control}\n              name=\"apiKey\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Magic API Key</FormLabel>\n                  <FormControl>\n                    <Input placeholder=\"Your API Key\" {...field} />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}", "explanation": "**Summary:**\n\nThis block is a form field with two input fields:\n\n1. A dropdown menu (Select) for selecting language (\"en\" or \"ja\")\n2. An input field (FormControl) for entering an API key\n\nBoth fields have labels, validation messages, and are controlled by a FormContext instance.", "metadata": {"repo": "magiclabs/example-nextjs-flow", "file": "app/sign-in/email-otp/page.tsx", "chunk_number": 5, "total_chunks": 7}, "repository_explanation": "Unfortunately, you haven't provided a repository for me to explain.\n\nIf you provide the repository URL or describe its contents, I'd be happy to give you a concise summary!", "file_summary": "Here is a concise and holistic summary of the file 'app/sign-in/email-otp/page.tsx':\n\n**Purpose:** Authenticate user login using custom UI with email OTP.\n\n**Functionality:** Validates email input, configures Flow blockchain integration, authenticates user with toast notification upon successful submission."}
{"code": "              name=\"email\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Email</FormLabel>\n                  <FormControl>\n                    <Input placeholder=\"Your email\" {...field} />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            {form.formState.errors.root && (\n              <div>\n                <TypographySmall className=\"text-red-500 dark:text-red-900\">\n                  {form.formState.errors.root.message}\n                </TypographySmall>\n              </div>\n            )}\n          </CardContent>\n\n          <CardFooter>\n            <Button\n              type=\"submit\"\n              size=\"lg\"\n              className=\"w-full\"\n              disabled={\n                form.formState.isSubmitting || form.formState.isSubmitSuccessful\n              }\n            >\n              Sign In\n            </Button>\n          </CardFooter>\n        </form>\n      </Form>\n    </Card>", "explanation": "Here is a summary of the block's purpose and functionality:\n\n**Purpose:** A sign-in form with an email input field.\n\n**Functionality:** Allows users to enter their email address, displays any validation errors, and submits the form upon clicking a \"Sign In\" button.", "metadata": {"repo": "magiclabs/example-nextjs-flow", "file": "app/sign-in/email-otp/page.tsx", "chunk_number": 6, "total_chunks": 7}, "repository_explanation": "Unfortunately, you haven't provided a repository for me to explain.\n\nIf you provide the repository URL or describe its contents, I'd be happy to give you a concise summary!", "file_summary": "Here is a concise and holistic summary of the file 'app/sign-in/email-otp/page.tsx':\n\n**Purpose:** Authenticate user login using custom UI with email OTP.\n\n**Functionality:** Validates email input, configures Flow blockchain integration, authenticates user with toast notification upon successful submission."}
{"code": "  )\n}\n", "explanation": "Closing a block or structure in programming.", "metadata": {"repo": "magiclabs/example-nextjs-flow", "file": "app/sign-in/email-otp/page.tsx", "chunk_number": 7, "total_chunks": 7}, "repository_explanation": "Unfortunately, you haven't provided a repository for me to explain.\n\nIf you provide the repository URL or describe its contents, I'd be happy to give you a concise summary!", "file_summary": "Here is a concise and holistic summary of the file 'app/sign-in/email-otp/page.tsx':\n\n**Purpose:** Authenticate user login using custom UI with email OTP.\n\n**Functionality:** Validates email input, configures Flow blockchain integration, authenticates user with toast notification upon successful submission."}
{"code": "'use client'\n\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select'\nimport { TypographyH2, TypographyP } from '@/components/ui/typography'\nimport { useUser } from '@/hooks/use-user'\nimport { usePathname, useRouter } from 'next/navigation'\nimport { PropsWithChildren, useEffect, useMemo, useState } from 'react'\n\nexport default function SignInLayout({ children }: PropsWithChildren) {\n  const router = useRouter()\n  const pathname = usePathname()\n  const { isLoggedIn } = useUser()\n\n  const [isMounted, setIsMounted] = useState(false)\n\n  const method = useMemo(() => {\n    return pathname.split('/').pop()\n  }, [pathname])\n\n  useEffect(() => {\n    if (isLoggedIn) {\n      router.push('/')\n    }\n    setIsMounted(true)\n  }, [isLoggedIn, router])\n\n  if (!isMounted) {\n    return <div>Checking session...</div>\n  }\n\n  return isLoggedIn ? (\n    <div>Checking session...</div>\n  ) : (\n    <div className=\"flex w-full flex-1 flex-col\">", "explanation": "Here is a concise summary of the purpose and functionality of this block:\n\n**Purpose:** A reusable React component for handling user sign-in functionality.\n\n**Functionality:** Redirects users to the homepage if they are already logged in, and displays a \"Checking session...\" message while verifying the user's login status. If the user is not logged in, it renders a layout component that can contain children elements (not shown).", "metadata": {"repo": "magiclabs/example-nextjs-flow", "file": "app/sign-in/layout.tsx", "chunk_number": 1, "total_chunks": 2}, "repository_explanation": "Unfortunately, you haven't provided a repository for me to explain.\n\nIf you provide the repository URL or describe its contents, I'd be happy to give you a concise summary!", "file_summary": "Here is a concise summary of the 'app/sign-in/layout.tsx' file:\n\n\"Reusable React component for user sign-in functionality, displaying a selection of methods (e.g. Email OTP, Magic Link) with a dropdown menu, verifying login status, and routing to corresponding sign-in pages as needed.\""}
{"code": "      <TypographyH2>Magic + FCL Example</TypographyH2>\n      <br />\n\n      <TypographyP>You can select sign-in methods</TypographyP>\n      <Select\n        value={method}\n        onValueChange={(v) => router.push('/sign-in/' + v)}\n      >\n        <SelectTrigger>\n          <SelectValue placeholder=\"Select a verified email to display\" />\n        </SelectTrigger>\n        <SelectContent>\n          <SelectItem value=\"default\">Default</SelectItem>\n          <SelectItem value=\"email-otp\">Email OTP</SelectItem>\n          <SelectItem value=\"magic-link\">Magic Link</SelectItem>\n          <SelectItem value=\"sms\">SMS</SelectItem>\n          <SelectItem value=\"oauth\">OAuth</SelectItem>\n          <SelectItem value=\"discovery\">Discovery</SelectItem>\n        </SelectContent>\n      </Select>\n\n      <br />\n\n      {children}\n    </div>\n  )\n}\n", "explanation": "This block:\n\n* Displays a selection of sign-in methods (e.g. Email OTP, Magic Link, SMS)\n* Allows user to select a method using a dropdown menu\n* Routes to a corresponding sign-in page based on the selected method", "metadata": {"repo": "magiclabs/example-nextjs-flow", "file": "app/sign-in/layout.tsx", "chunk_number": 2, "total_chunks": 2}, "repository_explanation": "Unfortunately, you haven't provided a repository for me to explain.\n\nIf you provide the repository URL or describe its contents, I'd be happy to give you a concise summary!", "file_summary": "Here is a concise summary of the 'app/sign-in/layout.tsx' file:\n\n\"Reusable React component for user sign-in functionality, displaying a selection of methods (e.g. Email OTP, Magic Link) with a dropdown menu, verifying login status, and routing to corresponding sign-in pages as needed.\""}
{"code": "'use client'\n\nimport { zodResolver } from '@hookform/resolvers/zod'\nimport { useForm } from 'react-hook-form'\n\nimport { Button } from '@/components/ui/button'\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from '@/components/ui/card'\nimport {\n  Form,\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from '@/components/ui/form'\nimport { Input } from '@/components/ui/input'\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select'\nimport { TypographySmall } from '@/components/ui/typography'\nimport { useToast } from '@/components/ui/use-toast'\nimport { FCL_BASE_URL, MAGIC_API_KEY } from '@/constants/env'\nimport { fcl } from '@/lib/fcl'\nimport { useRouter } from 'next/navigation'\nimport { z } from 'zod'\n\nconst FormSchema = z.object({\n  method: z.string(),\n  network: z.string(),\n  apiKey: z.string(),\n  email: z.string().email(),\n  locale: z.string(),\n})\n\nexport default function MagicLinkPage() {", "explanation": "**Summary**\n\nThis code block defines a React functional component for a \"Magic Link\" page, which uses form handling and validation with `react-hook-form` and `zodResolver`. It includes various UI components from a custom library and leverages Next.js navigation and toast notifications. The component is validated against a predefined schema using Zod.", "metadata": {"repo": "magiclabs/example-nextjs-flow", "file": "app/sign-in/magic-link/page.tsx", "chunk_number": 1, "total_chunks": 7}, "repository_explanation": "Unfortunately, you haven't provided a repository for me to explain.\n\nIf you provide the repository URL or describe its contents, I'd be happy to give you a concise summary!", "file_summary": "Here is a concise summary of the 'app/sign-in/magic-link/page.tsx' file:\n\n**Purpose:** Handles form submission for user authentication using Magic Link.\n\n**Functionality:**\n\n* Validates user input against a predefined schema\n* Configures FCL settings based on user input\n* Authenticates user login, logging and redirecting to root URL upon success\n* Catches and displays errors during authentication\n\nThis summary captures the essence of the file's purpose and functionality. Let me know if you'd like me to make any adjustments!"}
{"code": "  const router = useRouter()\n  const { toast } = useToast()\n\n  const form = useForm<z.infer<typeof FormSchema>>({\n    resolver: zodResolver(FormSchema),\n    defaultValues: {\n      method: 'magic-link',\n      network: 'testnet',\n      apiKey: MAGIC_API_KEY,\n      email: '',\n      locale: 'en',\n    },\n  })\n\n  const onSubmit = async ({\n    method,\n    network,\n    apiKey,\n    email,\n    locale,\n  }: z.infer<typeof FormSchema>) => {\n    try {\n      fcl.config().put('flow.network', network)\n      fcl\n        .config()\n        .put(\n          'accessNode.api',\n          network === 'mainnet'\n            ? 'https://rest-mainnet.onflow.org'\n            : 'https://access-testnet.onflow.org',\n        )\n      fcl.config().put(\n        'discovery.wallet',\n        `${FCL_BASE_URL}/${locale}/authn?${new URLSearchParams({\n          apiKey,\n          method,\n          email,\n        })}`,\n      )\n      fcl.config().put('discovery.wallet.method', 'IFRAME/RPC')\n\n      const user = await fcl.authenticate()\n      if (!user.loggedIn) {", "explanation": "Here is a concise summary of the block's purpose and functionality:\n\n**Purpose:** Handle form submission for authentication.\n\n**Functionality:** Uses Formik and Zod to validate form data, then configures Flow Client Library (FCL) settings based on user input before attempting to authenticate using FCL.", "metadata": {"repo": "magiclabs/example-nextjs-flow", "file": "app/sign-in/magic-link/page.tsx", "chunk_number": 2, "total_chunks": 7}, "repository_explanation": "Unfortunately, you haven't provided a repository for me to explain.\n\nIf you provide the repository URL or describe its contents, I'd be happy to give you a concise summary!", "file_summary": "Here is a concise summary of the 'app/sign-in/magic-link/page.tsx' file:\n\n**Purpose:** Handles form submission for user authentication using Magic Link.\n\n**Functionality:**\n\n* Validates user input against a predefined schema\n* Configures FCL settings based on user input\n* Authenticates user login, logging and redirecting to root URL upon success\n* Catches and displays errors during authentication\n\nThis summary captures the essence of the file's purpose and functionality. Let me know if you'd like me to make any adjustments!"}
{"code": "        throw new Error(\"You're not logged in\")\n      }\n      console.log({ user })\n\n      toast({\n        title: 'Success Login',\n        description: 'You have successfully logged in!',\n      })\n      router.push('/')\n    } catch (e) {\n      form.setError('root', {\n        message: e instanceof Error ? e.message : 'An unknown error occurred',\n      })\n    }\n  }\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>FCL Authenticate</CardTitle>\n        <CardDescription>Sign in with mail OTP using custom UI</CardDescription>\n      </CardHeader>\n      <Form {...form}>\n        <form onSubmit={form.handleSubmit(onSubmit)}>\n          <CardContent className=\"space-y-6\">\n            <FormField\n              control={form.control}\n              name=\"network\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Network</FormLabel>\n                  <FormDescription></FormDescription>\n                  <Select\n                    onValueChange={field.onChange}", "explanation": "Here is a concise summary of the purpose and functionality of this block:\n\n**Purpose:** Handle form submission and authenticate user login.\n\n**Functionality:**\n\n* Validate user login, throwing an error if not logged in.\n* Log the authenticated user (`user`) and display a success toast message.\n* Redirect to the root URL (`'/'`).\n* Catch any errors that occur during authentication and display an error message to the user.", "metadata": {"repo": "magiclabs/example-nextjs-flow", "file": "app/sign-in/magic-link/page.tsx", "chunk_number": 3, "total_chunks": 7}, "repository_explanation": "Unfortunately, you haven't provided a repository for me to explain.\n\nIf you provide the repository URL or describe its contents, I'd be happy to give you a concise summary!", "file_summary": "Here is a concise summary of the 'app/sign-in/magic-link/page.tsx' file:\n\n**Purpose:** Handles form submission for user authentication using Magic Link.\n\n**Functionality:**\n\n* Validates user input against a predefined schema\n* Configures FCL settings based on user input\n* Authenticates user login, logging and redirecting to root URL upon success\n* Catches and displays errors during authentication\n\nThis summary captures the essence of the file's purpose and functionality. Let me know if you'd like me to make any adjustments!"}
{"code": "                    defaultValue={field.value}\n                  >\n                    <FormControl>\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select a verified email to display\" />\n                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent>\n                      <SelectItem value=\"mainnet\">Mainnet</SelectItem>\n                      <SelectItem value=\"testnet\">Testnet</SelectItem>\n                    </SelectContent>\n                  </Select>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            <FormField\n              control={form.control}\n              name=\"locale\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Locale</FormLabel>\n                  <FormDescription></FormDescription>\n                  <Select\n                    onValueChange={field.onChange}\n                    defaultValue={field.value}", "explanation": "This block is a dropdown select component with two options: \"Mainnet\" and \"Testnet\". It appears within a form and allows users to choose an option from the list.", "metadata": {"repo": "magiclabs/example-nextjs-flow", "file": "app/sign-in/magic-link/page.tsx", "chunk_number": 4, "total_chunks": 7}, "repository_explanation": "Unfortunately, you haven't provided a repository for me to explain.\n\nIf you provide the repository URL or describe its contents, I'd be happy to give you a concise summary!", "file_summary": "Here is a concise summary of the 'app/sign-in/magic-link/page.tsx' file:\n\n**Purpose:** Handles form submission for user authentication using Magic Link.\n\n**Functionality:**\n\n* Validates user input against a predefined schema\n* Configures FCL settings based on user input\n* Authenticates user login, logging and redirecting to root URL upon success\n* Catches and displays errors during authentication\n\nThis summary captures the essence of the file's purpose and functionality. Let me know if you'd like me to make any adjustments!"}
{"code": "                  >\n                    <FormControl>\n                      <SelectTrigger>\n                        <SelectValue />\n                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent>\n                      <SelectItem value=\"en\">en</SelectItem>\n                      <SelectItem value=\"ja\">ja</SelectItem>\n                    </SelectContent>\n                  </Select>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            <FormField\n              control={form.control}\n              name=\"apiKey\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Magic API Key</FormLabel>\n                  <FormControl>\n                    <Input placeholder=\"Your API Key\" {...field} />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}", "explanation": "This block appears to be React code, specifically a form component, that:\n\n* Displays a dropdown select menu with language options (English and Japanese)\n* Allows users to input an API key in a text field\n* Contains error message display functionality for both fields.", "metadata": {"repo": "magiclabs/example-nextjs-flow", "file": "app/sign-in/magic-link/page.tsx", "chunk_number": 5, "total_chunks": 7}, "repository_explanation": "Unfortunately, you haven't provided a repository for me to explain.\n\nIf you provide the repository URL or describe its contents, I'd be happy to give you a concise summary!", "file_summary": "Here is a concise summary of the 'app/sign-in/magic-link/page.tsx' file:\n\n**Purpose:** Handles form submission for user authentication using Magic Link.\n\n**Functionality:**\n\n* Validates user input against a predefined schema\n* Configures FCL settings based on user input\n* Authenticates user login, logging and redirecting to root URL upon success\n* Catches and displays errors during authentication\n\nThis summary captures the essence of the file's purpose and functionality. Let me know if you'd like me to make any adjustments!"}
{"code": "              name=\"email\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Email</FormLabel>\n                  <FormControl>\n                    <Input placeholder=\"Your email\" {...field} />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            {form.formState.errors.root && (\n              <div>\n                <TypographySmall className=\"text-red-500 dark:text-red-900\">\n                  {form.formState.errors.root.message}\n                </TypographySmall>\n              </div>\n            )}\n          </CardContent>\n\n          <CardFooter>\n            <Button\n              type=\"submit\"\n              size=\"lg\"\n              className=\"w-full\"\n              disabled={\n                form.formState.isSubmitting || form.formState.isSubmitSuccessful\n              }\n            >\n              Sign In\n            </Button>\n          </CardFooter>\n        </form>\n      </Form>\n    </Card>", "explanation": "Here is a concise summary:\n\n**Email Input Block**\n\n* Purpose: Collects user's email address for sign-in form.\n* Functionality: Displays an input field with placeholder text, validates email format, and displays error message if invalid.", "metadata": {"repo": "magiclabs/example-nextjs-flow", "file": "app/sign-in/magic-link/page.tsx", "chunk_number": 6, "total_chunks": 7}, "repository_explanation": "Unfortunately, you haven't provided a repository for me to explain.\n\nIf you provide the repository URL or describe its contents, I'd be happy to give you a concise summary!", "file_summary": "Here is a concise summary of the 'app/sign-in/magic-link/page.tsx' file:\n\n**Purpose:** Handles form submission for user authentication using Magic Link.\n\n**Functionality:**\n\n* Validates user input against a predefined schema\n* Configures FCL settings based on user input\n* Authenticates user login, logging and redirecting to root URL upon success\n* Catches and displays errors during authentication\n\nThis summary captures the essence of the file's purpose and functionality. Let me know if you'd like me to make any adjustments!"}
{"code": "  )\n}\n", "explanation": "Closing a block of code or text.", "metadata": {"repo": "magiclabs/example-nextjs-flow", "file": "app/sign-in/magic-link/page.tsx", "chunk_number": 7, "total_chunks": 7}, "repository_explanation": "Unfortunately, you haven't provided a repository for me to explain.\n\nIf you provide the repository URL or describe its contents, I'd be happy to give you a concise summary!", "file_summary": "Here is a concise summary of the 'app/sign-in/magic-link/page.tsx' file:\n\n**Purpose:** Handles form submission for user authentication using Magic Link.\n\n**Functionality:**\n\n* Validates user input against a predefined schema\n* Configures FCL settings based on user input\n* Authenticates user login, logging and redirecting to root URL upon success\n* Catches and displays errors during authentication\n\nThis summary captures the essence of the file's purpose and functionality. Let me know if you'd like me to make any adjustments!"}
{"code": "'use client'\n\nimport { zodResolver } from '@hookform/resolvers/zod'\nimport { useForm } from 'react-hook-form'\n\nimport { Button } from '@/components/ui/button'\nimport {\n  Card,\n  CardContent,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from '@/components/ui/card'\nimport {\n  Form,\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from '@/components/ui/form'\nimport { Input } from '@/components/ui/input'\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select'\nimport { TypographySmall } from '@/components/ui/typography'\nimport { useToast } from '@/components/ui/use-toast'\nimport { FCL_BASE_URL, MAGIC_API_KEY } from '@/constants/env'\nimport { fcl } from '@/lib/fcl'\nimport { useRouter } from 'next/navigation'\nimport { z } from 'zod'\n\nconst FormSchema = z.object({\n  network: z.string(),\n  apiKey: z.string(),\n  method: z.string(),\n  provider: z.string(),\n  locale: z.string(),\n})\n\nexport default function OAuthPage() {\n  const router = useRouter()", "explanation": "Here is a concise summary of the purpose and functionality:\n\n**Purpose:** A React functional component that renders an OAuth form.\n\n**Functionality:** It uses the `react-hook-form` library to manage form state, validates user input with a Zod schema, and handles form submission using the `useForm` hook. The component also includes various UI components (e.g., buttons, cards, inputs) from a custom UI library.", "metadata": {"repo": "magiclabs/example-nextjs-flow", "file": "app/sign-in/oauth/page.tsx", "chunk_number": 1, "total_chunks": 7}, "repository_explanation": "Unfortunately, you haven't provided a repository for me to explain.\n\nIf you provide the repository URL or describe its contents, I'd be happy to give you a concise summary!", "file_summary": "Here's a concise holistic summary of the file 'app/sign-in/oauth/page.tsx':\n\nThis component renders an OAuth login form that utilizes `react-hook-form` for state management, validation with Zod schema, and handles submission using `useForm`. It also includes UI components from a custom library. The form:\n\n* Initializes default values and authenticates users upon submission using the Flow Client Library (FCL) API.\n* Validates user input, displaying errors if invalid.\n* Displays success messages on successful login and catches any errors to display an error message.\n\nThe component also handles network and locale selection, language choice, Magic API key input, provider selection, and form submission with disabled button functionality."}
{"code": "  const { toast } = useToast()\n\n  const form = useForm<z.infer<typeof FormSchema>>({\n    resolver: zodResolver(FormSchema),\n    defaultValues: {\n      method: 'oauth',\n      network: 'testnet',\n      apiKey: MAGIC_API_KEY,\n      provider: 'google',\n      locale: 'en',\n    },\n  })\n\n  const onSubmit = async ({\n    network,\n    apiKey,\n    method,\n    provider,\n    locale,\n  }: z.infer<typeof FormSchema>) => {\n    try {\n      fcl.config().put('flow.network', network)\n      fcl\n        .config()\n        .put(\n          'accessNode.api',\n          network === 'mainnet'\n            ? 'https://rest-mainnet.onflow.org'\n            : 'https://access-testnet.onflow.org',\n        )\n      fcl.config().put(\n        'discovery.wallet',\n        `${FCL_BASE_URL}/${locale}/authn?${new URLSearchParams({\n          apiKey,\n          method,\n          provider,\n        })}`,\n      )\n      fcl.config().put('discovery.wallet.method', 'TAB/RPC')\n\n      const user = await fcl.authenticate()\n      if (!user.loggedIn) {", "explanation": "Here is a concise summary:\n\n**Purpose:** Initialize a form with default values using `zodResolver` and handle form submission.\n\n**Functionality:**\n\n* Sets up a form with default values for authentication settings.\n* Handles form submission by configuring Flow Client Library (FCL) API endpoints.\n* Authenticates the user using FCL's `authenticate()` method.", "metadata": {"repo": "magiclabs/example-nextjs-flow", "file": "app/sign-in/oauth/page.tsx", "chunk_number": 2, "total_chunks": 7}, "repository_explanation": "Unfortunately, you haven't provided a repository for me to explain.\n\nIf you provide the repository URL or describe its contents, I'd be happy to give you a concise summary!", "file_summary": "Here's a concise holistic summary of the file 'app/sign-in/oauth/page.tsx':\n\nThis component renders an OAuth login form that utilizes `react-hook-form` for state management, validation with Zod schema, and handles submission using `useForm`. It also includes UI components from a custom library. The form:\n\n* Initializes default values and authenticates users upon submission using the Flow Client Library (FCL) API.\n* Validates user input, displaying errors if invalid.\n* Displays success messages on successful login and catches any errors to display an error message.\n\nThe component also handles network and locale selection, language choice, Magic API key input, provider selection, and form submission with disabled button functionality."}
{"code": "        throw new Error(\"You're not logged in\")\n      }\n      console.log({ user })\n\n      toast({\n        title: 'Success Login',\n        description: 'You have successfully logged in!',\n      })\n      router.push('/')\n    } catch (e) {\n      form.setError('root', {\n        message: e instanceof Error ? e.message : 'An unknown error occurred',\n      })\n    }\n  }\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>FCL Authenticate</CardTitle>\n      </CardHeader>\n\n      <Form {...form}>\n        <form>\n          <CardContent className=\"space-y-6\">\n            <FormField\n              control={form.control}\n              name=\"network\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Network</FormLabel>\n                  <FormDescription></FormDescription>\n                  <Select\n                    onValueChange={field.onChange}\n                    defaultValue={field.value}\n                  >\n                    <FormControl>\n                      <SelectTrigger>", "explanation": "**Summary:**\n\nThis block appears to be a login form function that:\n\n* Checks if a user is logged in, throwing an error if not\n* Logs in a user and redirects them to the root URL\n* Displays a success toast message on successful login\n* Catches any errors and displays an error message on the form\n\nThe functionality can be summarized as: **Login User with Validation and Error Handling**.", "metadata": {"repo": "magiclabs/example-nextjs-flow", "file": "app/sign-in/oauth/page.tsx", "chunk_number": 3, "total_chunks": 7}, "repository_explanation": "Unfortunately, you haven't provided a repository for me to explain.\n\nIf you provide the repository URL or describe its contents, I'd be happy to give you a concise summary!", "file_summary": "Here's a concise holistic summary of the file 'app/sign-in/oauth/page.tsx':\n\nThis component renders an OAuth login form that utilizes `react-hook-form` for state management, validation with Zod schema, and handles submission using `useForm`. It also includes UI components from a custom library. The form:\n\n* Initializes default values and authenticates users upon submission using the Flow Client Library (FCL) API.\n* Validates user input, displaying errors if invalid.\n* Displays success messages on successful login and catches any errors to display an error message.\n\nThe component also handles network and locale selection, language choice, Magic API key input, provider selection, and form submission with disabled button functionality."}
{"code": "                        <SelectValue placeholder=\"Select a verified email to display\" />\n                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent>\n                      <SelectItem value=\"mainnet\">Mainnet</SelectItem>\n                      <SelectItem value=\"testnet\">Testnet</SelectItem>\n                    </SelectContent>\n                  </Select>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            <FormField\n              control={form.control}\n              name=\"locale\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Locale</FormLabel>\n                  <FormDescription></FormDescription>\n                  <Select\n                    onValueChange={field.onChange}\n                    defaultValue={field.value}\n                  >\n                    <FormControl>\n                      <SelectTrigger>\n                        <SelectValue />", "explanation": "Here is a concise summary of the block:\n\n**Purpose:** A form input component for selecting a network (Mainnet or Testnet) and locale.\n\n**Functionality:** Two dropdown menus, one for selecting a verified email address and another for selecting a network (network selection), followed by a message field.", "metadata": {"repo": "magiclabs/example-nextjs-flow", "file": "app/sign-in/oauth/page.tsx", "chunk_number": 4, "total_chunks": 7}, "repository_explanation": "Unfortunately, you haven't provided a repository for me to explain.\n\nIf you provide the repository URL or describe its contents, I'd be happy to give you a concise summary!", "file_summary": "Here's a concise holistic summary of the file 'app/sign-in/oauth/page.tsx':\n\nThis component renders an OAuth login form that utilizes `react-hook-form` for state management, validation with Zod schema, and handles submission using `useForm`. It also includes UI components from a custom library. The form:\n\n* Initializes default values and authenticates users upon submission using the Flow Client Library (FCL) API.\n* Validates user input, displaying errors if invalid.\n* Displays success messages on successful login and catches any errors to display an error message.\n\nThe component also handles network and locale selection, language choice, Magic API key input, provider selection, and form submission with disabled button functionality."}
{"code": "                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent>\n                      <SelectItem value=\"en\">en</SelectItem>\n                      <SelectItem value=\"ja\">ja</SelectItem>\n                    </SelectContent>\n                  </Select>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            <FormField\n              control={form.control}\n              name=\"apiKey\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Magic API Key</FormLabel>\n                  <FormControl>\n                    <Input placeholder=\"Your API Key\" {...field} />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            <FormField\n              control={form.control}\n              name=\"provider\"\n              render={({ field }) => (\n                <FormItem>", "explanation": "Here is a summary of the purpose and functionality:\n\n**Select Language Form Field**\n\n* Allows user to select language (en or ja)\n* Displays two options in a dropdown list\n* Has associated error message display\n\n**API Key Form Field**\n\n* Requests user to input Magic API key\n* Displayed as a text input field with placeholder text\n* Has associated error message display", "metadata": {"repo": "magiclabs/example-nextjs-flow", "file": "app/sign-in/oauth/page.tsx", "chunk_number": 5, "total_chunks": 7}, "repository_explanation": "Unfortunately, you haven't provided a repository for me to explain.\n\nIf you provide the repository URL or describe its contents, I'd be happy to give you a concise summary!", "file_summary": "Here's a concise holistic summary of the file 'app/sign-in/oauth/page.tsx':\n\nThis component renders an OAuth login form that utilizes `react-hook-form` for state management, validation with Zod schema, and handles submission using `useForm`. It also includes UI components from a custom library. The form:\n\n* Initializes default values and authenticates users upon submission using the Flow Client Library (FCL) API.\n* Validates user input, displaying errors if invalid.\n* Displays success messages on successful login and catches any errors to display an error message.\n\nThe component also handles network and locale selection, language choice, Magic API key input, provider selection, and form submission with disabled button functionality."}
{"code": "                  <FormLabel>Provider</FormLabel>\n                  <Select\n                    onValueChange={field.onChange}\n                    defaultValue={field.value}\n                  >\n                    <FormControl>\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select a provider\" />\n                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent>\n                      <SelectItem value=\"google\">Google</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </FormItem>\n              )}\n            />\n\n            {form.formState.errors.root && (\n              <div>\n                <TypographySmall className=\"text-red-500 dark:text-red-900\">\n                  {form.formState.errors.root.message}\n                </TypographySmall>\n              </div>\n            )}\n          </CardContent>\n          <CardFooter>\n            <Button\n              type=\"submit\"", "explanation": "Here is a summary of the purpose and functionality of this block:\n\n**Purpose:** A dropdown form field for selecting a provider.\n\n**Functionality:** Displays a list of providers with \"Google\" as an option, allows user selection, and triggers error display if invalid input.", "metadata": {"repo": "magiclabs/example-nextjs-flow", "file": "app/sign-in/oauth/page.tsx", "chunk_number": 6, "total_chunks": 7}, "repository_explanation": "Unfortunately, you haven't provided a repository for me to explain.\n\nIf you provide the repository URL or describe its contents, I'd be happy to give you a concise summary!", "file_summary": "Here's a concise holistic summary of the file 'app/sign-in/oauth/page.tsx':\n\nThis component renders an OAuth login form that utilizes `react-hook-form` for state management, validation with Zod schema, and handles submission using `useForm`. It also includes UI components from a custom library. The form:\n\n* Initializes default values and authenticates users upon submission using the Flow Client Library (FCL) API.\n* Validates user input, displaying errors if invalid.\n* Displays success messages on successful login and catches any errors to display an error message.\n\nThe component also handles network and locale selection, language choice, Magic API key input, provider selection, and form submission with disabled button functionality."}
{"code": "              size=\"lg\"\n              className=\"w-full\"\n              onClick={form.handleSubmit(onSubmit)}\n              disabled={\n                form.formState.isSubmitting || form.formState.isSubmitSuccessful\n              }\n            >\n              Sign In\n            </Button>\n          </CardFooter>\n        </form>\n      </Form>\n    </Card>\n  )\n}\n", "explanation": "Here is a concise summary:\n\n**Purpose:** Submit a form and trigger an onSubmit action.\n\n**Functionality:** A button that, when clicked, sends a form submission request while disabling itself if the form is already submitting or has been successfully submitted.", "metadata": {"repo": "magiclabs/example-nextjs-flow", "file": "app/sign-in/oauth/page.tsx", "chunk_number": 7, "total_chunks": 7}, "repository_explanation": "Unfortunately, you haven't provided a repository for me to explain.\n\nIf you provide the repository URL or describe its contents, I'd be happy to give you a concise summary!", "file_summary": "Here's a concise holistic summary of the file 'app/sign-in/oauth/page.tsx':\n\nThis component renders an OAuth login form that utilizes `react-hook-form` for state management, validation with Zod schema, and handles submission using `useForm`. It also includes UI components from a custom library. The form:\n\n* Initializes default values and authenticates users upon submission using the Flow Client Library (FCL) API.\n* Validates user input, displaying errors if invalid.\n* Displays success messages on successful login and catches any errors to display an error message.\n\nThe component also handles network and locale selection, language choice, Magic API key input, provider selection, and form submission with disabled button functionality."}
{"code": "import { redirect } from 'next/navigation'\n\nexport default function SignInPage() {\n  redirect('/sign-in/default')\n}\n", "explanation": "**Purpose:** Redirects user to a specified page on load.\n\n**Functionality:** Uses `redirect` hook from Next.js to instantly navigate to the '/sign-in/default' URL.", "metadata": {"repo": "magiclabs/example-nextjs-flow", "file": "app/sign-in/page.tsx", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Unfortunately, you haven't provided a repository for me to explain.\n\nIf you provide the repository URL or describe its contents, I'd be happy to give you a concise summary!", "file_summary": "Here is a concise and to-the-point summary of the file 'app/sign-in/page.tsx':\n\nRedirects user to `/sign-in/default` on page load using Next.js's `redirect` hook."}
{"code": "'use client'\n\nimport { zodResolver } from '@hookform/resolvers/zod'\nimport { useForm } from 'react-hook-form'\n\nimport { Button } from '@/components/ui/button'\nimport {\n  Card,\n  CardContent,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from '@/components/ui/card'\nimport {\n  Form,\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from '@/components/ui/form'\nimport { Input } from '@/components/ui/input'\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select'\nimport { TypographySmall } from '@/components/ui/typography'\nimport { useToast } from '@/components/ui/use-toast'\nimport { FCL_BASE_URL, MAGIC_API_KEY } from '@/constants/env'\nimport { fcl } from '@/lib/fcl'\nimport { useRouter } from 'next/navigation'\nimport { z } from 'zod'\n\nconst FormSchema = z.object({\n  method: z.string(),\n  network: z.string(),\n  apiKey: z.string(),\n  phoneNumber: z.string(),\n  locale: z.string(),\n})\n\nexport default function SMSPage() {", "explanation": "**Block Summary**\n\nThis block is a React functional component that renders an SMS-related form. It uses Formik's `useForm` hook with Zod resolver for validation, and includes various UI components (inputs, buttons, etc.) to collect user input. The purpose of this code is likely to handle user-submitted form data.", "metadata": {"repo": "magiclabs/example-nextjs-flow", "file": "app/sign-in/sms/page.tsx", "chunk_number": 1, "total_chunks": 6}, "repository_explanation": "Unfortunately, you haven't provided a repository for me to explain.\n\nIf you provide the repository URL or describe its contents, I'd be happy to give you a concise summary!", "file_summary": "Here is a concise and holistic summary of the file 'app/sign-in/sms/page.tsx':\n\nThis React component renders an SMS-related form for user login, utilizing Formik's `useForm` hook with Zod validation. It authenticates users using Flow Blockchain's Chainlink (FCL) and updates configuration upon successful authentication. The form includes a dropdown select box for network choice (\"Mainnet\" or \"Testnet\"), inputs for language selection and Magic API Key, as well as an optional phone number input and submit button to complete the sign-in process."}
{"code": "  const router = useRouter()\n  const { toast } = useToast()\n\n  const form = useForm<z.infer<typeof FormSchema>>({\n    resolver: zodResolver(FormSchema),\n    defaultValues: {\n      method: 'sms',\n      network: 'testnet',\n      apiKey: MAGIC_API_KEY,\n      locale: 'en',\n    },\n  })\n\n  const onSubmit = async ({\n    method,\n    network,\n    apiKey,\n    phoneNumber,\n    locale,\n  }: z.infer<typeof FormSchema>) => {\n    try {\n      fcl.config().put('flow.network', network)\n      fcl\n        .config()\n        .put(\n          'accessNode.api',\n          network === 'mainnet'\n            ? 'https://rest-mainnet.onflow.org'\n            : 'https://access-testnet.onflow.org',\n        )\n      fcl.config().put(\n        'discovery.wallet',\n        `${FCL_BASE_URL}/${locale}/authn?${new URLSearchParams({\n          apiKey,\n          method,\n          phoneNumber,\n        })}`,\n      )\n      fcl.config().put('discovery.wallet.method', 'IFRAME/RPC')\n\n      const user = await fcl.authenticate()\n      if (!user.loggedIn) {", "explanation": "Here is a concise summary of the block's purpose and functionality:\n\n**Purpose:** Handles form submission and authentication with Flow Blockchain.\n\n**Functionality:**\n\n* Validates form input using Zod schema.\n* Sets configuration for Flow Chainlink (FCL) based on form data.\n* Authenticates user using FCL and updates configuration if authentication is successful.", "metadata": {"repo": "magiclabs/example-nextjs-flow", "file": "app/sign-in/sms/page.tsx", "chunk_number": 2, "total_chunks": 6}, "repository_explanation": "Unfortunately, you haven't provided a repository for me to explain.\n\nIf you provide the repository URL or describe its contents, I'd be happy to give you a concise summary!", "file_summary": "Here is a concise and holistic summary of the file 'app/sign-in/sms/page.tsx':\n\nThis React component renders an SMS-related form for user login, utilizing Formik's `useForm` hook with Zod validation. It authenticates users using Flow Blockchain's Chainlink (FCL) and updates configuration upon successful authentication. The form includes a dropdown select box for network choice (\"Mainnet\" or \"Testnet\"), inputs for language selection and Magic API Key, as well as an optional phone number input and submit button to complete the sign-in process."}
{"code": "        throw new Error(\"You're not logged in\")\n      }\n      console.log({ user })\n\n      toast({\n        title: 'Success Login',\n        description: 'You have successfully logged in!',\n      })\n      router.push('/')\n    } catch (e) {\n      form.setError('root', {\n        message: e instanceof Error ? e.message : 'An unknown error occurred',\n      })\n    }\n  }\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>FCL Authenticate</CardTitle>\n      </CardHeader>\n\n      <Form {...form}>\n        <form onSubmit={form.handleSubmit(onSubmit)}>\n          <CardContent className=\"space-y-6\">\n            <FormField\n              control={form.control}\n              name=\"network\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Network</FormLabel>\n                  <FormDescription></FormDescription>\n                  <Select\n                    onValueChange={field.onChange}\n                    defaultValue={field.value}\n                  >\n                    <FormControl>", "explanation": "**Functionality Summary:**\n\nThis block handles user login functionality, checking if a user is logged in before proceeding with the login process. If not logged in, an error is thrown. If successful, it logs the user, displays a toast message, and redirects the user to the homepage. It also catches any errors that occur during the login process and sets an error message on a form.", "metadata": {"repo": "magiclabs/example-nextjs-flow", "file": "app/sign-in/sms/page.tsx", "chunk_number": 3, "total_chunks": 6}, "repository_explanation": "Unfortunately, you haven't provided a repository for me to explain.\n\nIf you provide the repository URL or describe its contents, I'd be happy to give you a concise summary!", "file_summary": "Here is a concise and holistic summary of the file 'app/sign-in/sms/page.tsx':\n\nThis React component renders an SMS-related form for user login, utilizing Formik's `useForm` hook with Zod validation. It authenticates users using Flow Blockchain's Chainlink (FCL) and updates configuration upon successful authentication. The form includes a dropdown select box for network choice (\"Mainnet\" or \"Testnet\"), inputs for language selection and Magic API Key, as well as an optional phone number input and submit button to complete the sign-in process."}
{"code": "                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select a verified email to display\" />\n                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent>\n                      <SelectItem value=\"mainnet\">Mainnet</SelectItem>\n                      <SelectItem value=\"testnet\">Testnet</SelectItem>\n                    </SelectContent>\n                  </Select>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            <FormField\n              control={form.control}\n              name=\"locale\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Locale</FormLabel>\n                  <FormDescription></FormDescription>\n                  <Select\n                    onValueChange={field.onChange}\n                    defaultValue={field.value}\n                  >\n                    <FormControl>\n                      <SelectTrigger>", "explanation": "Here is a concise summary of the purpose and functionality:\n\nA dropdown select box for choosing between \"Mainnet\" and \"Testnet\".", "metadata": {"repo": "magiclabs/example-nextjs-flow", "file": "app/sign-in/sms/page.tsx", "chunk_number": 4, "total_chunks": 6}, "repository_explanation": "Unfortunately, you haven't provided a repository for me to explain.\n\nIf you provide the repository URL or describe its contents, I'd be happy to give you a concise summary!", "file_summary": "Here is a concise and holistic summary of the file 'app/sign-in/sms/page.tsx':\n\nThis React component renders an SMS-related form for user login, utilizing Formik's `useForm` hook with Zod validation. It authenticates users using Flow Blockchain's Chainlink (FCL) and updates configuration upon successful authentication. The form includes a dropdown select box for network choice (\"Mainnet\" or \"Testnet\"), inputs for language selection and Magic API Key, as well as an optional phone number input and submit button to complete the sign-in process."}
{"code": "                        <SelectValue />\n                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent>\n                      <SelectItem value=\"en\">en</SelectItem>\n                      <SelectItem value=\"ja\">ja</SelectItem>\n                    </SelectContent>\n                  </Select>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            <FormField\n              control={form.control}\n              name=\"apiKey\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Magic API Key</FormLabel>\n                  <FormControl>\n                    <Input placeholder=\"Your API Key\" {...field} />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            <FormField\n              control={form.control}\n              name=\"phoneNumber\"\n              render={({ field }) => (\n                <FormItem>", "explanation": "Here is a concise summary:\n\nThis block appears to be a form input component with two fields: \n\n1. A select dropdown for language (\"en\" or \"ja\")\n2. An input field for a Magic API Key\n3. An optional phone number input (not shown in this snippet)", "metadata": {"repo": "magiclabs/example-nextjs-flow", "file": "app/sign-in/sms/page.tsx", "chunk_number": 5, "total_chunks": 6}, "repository_explanation": "Unfortunately, you haven't provided a repository for me to explain.\n\nIf you provide the repository URL or describe its contents, I'd be happy to give you a concise summary!", "file_summary": "Here is a concise and holistic summary of the file 'app/sign-in/sms/page.tsx':\n\nThis React component renders an SMS-related form for user login, utilizing Formik's `useForm` hook with Zod validation. It authenticates users using Flow Blockchain's Chainlink (FCL) and updates configuration upon successful authentication. The form includes a dropdown select box for network choice (\"Mainnet\" or \"Testnet\"), inputs for language selection and Magic API Key, as well as an optional phone number input and submit button to complete the sign-in process."}
{"code": "                  <FormLabel>PhoneNumber</FormLabel>\n                  <FormControl>\n                    <Input placeholder=\"Your phone number\" {...field} />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            {form.formState.errors.root && (\n              <div>\n                <TypographySmall className=\"text-red-500 dark:text-red-900\">\n                  {form.formState.errors.root.message}\n                </TypographySmall>\n              </div>\n            )}\n          </CardContent>\n          <CardFooter>\n            <Button\n              type=\"submit\"\n              size=\"lg\"\n              className=\"w-full\"\n              disabled={\n                form.formState.isSubmitting || form.formState.isSubmitSuccessful\n              }\n            >\n              Sign In\n            </Button>\n          </CardFooter>\n        </form>\n      </Form>\n    </Card>\n  )\n}\n", "explanation": "This block is a form input field for a user's phone number, accompanied by:\n\n* A label \"PhoneNumber\"\n* An error message display (if any)\n* A submit button to complete the sign-in process\n* Dynamic disabling of the submit button based on form state.", "metadata": {"repo": "magiclabs/example-nextjs-flow", "file": "app/sign-in/sms/page.tsx", "chunk_number": 6, "total_chunks": 6}, "repository_explanation": "Unfortunately, you haven't provided a repository for me to explain.\n\nIf you provide the repository URL or describe its contents, I'd be happy to give you a concise summary!", "file_summary": "Here is a concise and holistic summary of the file 'app/sign-in/sms/page.tsx':\n\nThis React component renders an SMS-related form for user login, utilizing Formik's `useForm` hook with Zod validation. It authenticates users using Flow Blockchain's Chainlink (FCL) and updates configuration upon successful authentication. The form includes a dropdown select box for network choice (\"Mainnet\" or \"Testnet\"), inputs for language selection and Magic API Key, as well as an optional phone number input and submit button to complete the sign-in process."}
{"code": "{\n  \"$schema\": \"https://ui.shadcn.com/schema.json\",\n  \"style\": \"default\",\n  \"rsc\": true,\n  \"tsx\": true,\n  \"tailwind\": {\n    \"config\": \"tailwind.config.ts\",\n    \"css\": \"app/globals.css\",\n    \"baseColor\": \"neutral\",\n    \"cssVariables\": true,\n    \"prefix\": \"\"\n  },\n  \"aliases\": {\n    \"components\": \"@/components\",\n    \"utils\": \"@/lib/utils\"\n  }\n}", "explanation": "This block appears to be a configuration file (likely in JSON format) that defines settings for a UI component or application, including:\n\n* Styling options\n* References to external resources (e.g., CSS files)\n* Aliases for importing components and utilities.", "metadata": {"repo": "magiclabs/example-nextjs-flow", "file": "components.json", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Unfortunately, you haven't provided a repository for me to explain.\n\nIf you provide the repository URL or describe its contents, I'd be happy to give you a concise summary!", "file_summary": "Here is a holistic summary of the file 'components.json':\n\n**Configuration File: Components**\n\nDefines settings for a UI component or application, including styling options, external resource references, and aliases for importing components and utilities."}
{"code": "import { Button } from '@/components/ui/button'\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'\nimport { APP_IDENTIFIER, fcl } from '@/lib/fcl'\n\nconst USER_SIGNATURE = 'USER_SIGNATURE'\n\nexport const AppUtilsCard = () => {\n  const handleVerifyUserSignature = async () => {\n    try {\n      const hexMessage = Buffer.from('Foo').toString('hex')\n      const signatures = await fcl.currentUser().signUserMessage(hexMessage)\n      console.log({ signatures })\n\n      const isValid = await fcl.AppUtils.verifyUserSignatures(\n        hexMessage,\n        signatures,\n      )\n      console.log({ isValid })\n    } catch (e) {\n      console.error(e)\n    }\n  }\n\n  const handleVerifyAccountProof = async () => {\n    const user = await fcl.currentUser.snapshot()\n    console.log({ user })\n\n    const proofService = user.services.find(\n      (service: any) => service.type === 'account-proof',\n    )\n    if (!proofService) {\n      console.warn('account-proof service is not enabled')\n      return false\n    }", "explanation": "**Summary**\n\nThis block is a React component (`AppUtilsCard`) that provides utility functions for interacting with a blockchain app via a library called `fcl`. It includes two main functionalities:\n\n1. **Verifying User Signatures**: A button click triggers a function to sign and verify a user message using the `fcl` library.\n2. **Verifying Account Proof**: Another button click attempts to retrieve an account proof service from the current blockchain user and verify its existence.\n\n**Functionalities**\n\n* Signing and verifying user messages\n* Verifying account proof services", "metadata": {"repo": "magiclabs/example-nextjs-flow", "file": "components/app-utils-card.tsx", "chunk_number": 1, "total_chunks": 2}, "repository_explanation": "Unfortunately, you haven't provided a repository for me to explain.\n\nIf you provide the repository URL or describe its contents, I'd be happy to give you a concise summary!", "file_summary": "Here is a concise summary:\n\nThe `AppUtilsCard` component in `components/app-utils-card.tsx` provides utility functions for interacting with a blockchain app via `fcl`. It offers two main features: signing and verifying user messages, and verifying account proof services."}
{"code": "    console.log({ proofService })\n\n    const accountProofData = {\n      address: user.addr,\n      nonce: proofService.data.nonce,\n      signatures: proofService.data.signatures,\n    }\n\n    const isValid = await fcl.AppUtils.verifyAccountProof(\n      APP_IDENTIFIER,\n      accountProofData,\n    )\n\n    console.log({ isValid })\n  }\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>App Utils</CardTitle>\n      </CardHeader>\n      <CardContent className=\"grid-col-2 grid flex-col space-y-3\">\n        <Button onClick={handleVerifyUserSignature}>\n          fcl.AppUtils.verifyUserSignatures\n        </Button>\n        <Button onClick={handleVerifyAccountProof}>\n          fcl.AppUtils.verifyAccountProof\n        </Button>\n      </CardContent>\n    </Card>\n  )\n}\n", "explanation": "**Purpose:** Verify account proof using `fcl.AppUtils.verifyAccountProof`.\n\n**Functionality:**\n\n* Creates a data object with user address, nonce, and signatures.\n* Passes this data to the `verifyAccountProof` function to check its validity.\n* Logs the result to the console.", "metadata": {"repo": "magiclabs/example-nextjs-flow", "file": "components/app-utils-card.tsx", "chunk_number": 2, "total_chunks": 2}, "repository_explanation": "Unfortunately, you haven't provided a repository for me to explain.\n\nIf you provide the repository URL or describe its contents, I'd be happy to give you a concise summary!", "file_summary": "Here is a concise summary:\n\nThe `AppUtilsCard` component in `components/app-utils-card.tsx` provides utility functions for interacting with a blockchain app via `fcl`. It offers two main features: signing and verifying user messages, and verifying account proof services."}
{"code": "import { Button } from '@/components/ui/button'\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'\nimport { fcl } from '@/lib/fcl'\n\nexport const BuildersCard = () => {\n  const handleGetBlock = async () => {\n    const block = await fcl.send([fcl.getBlock(true)]).then(fcl.decode)\n\n    console.log({ block })\n  }\n\n  const handleGetAccount = async () => {\n    const user = await fcl.currentUser().snapshot()\n\n    const account = await await fcl\n      .send([fcl.getAccount(user.addr)])\n      .then(fcl.decode)\n\n    console.log({ account })\n  }\n\n  const handleAtBlockHeight = async () => {\n    const target = await fcl.send([fcl.getBlock(true)]).then(fcl.decode)\n\n    const block = await fcl\n      .send([fcl.getBlock(), fcl.atBlockHeight(target.height)])\n      .then(fcl.decode)\n\n    console.log({ block })\n  }\n\n  const handleGetEventsAtBlockHeightRange = async () => {\n    const block = await fcl.send([fcl.getBlock(true)]).then(fcl.decode)\n    console.log({ block })\n\n    const result = await fcl", "explanation": "Here is a concise summary of the purpose and functionality of this block:\n\n**Purpose:** A React component that provides options for interacting with the blockchain.\n\n**Functionality:**\n\n* Retrieves and logs current block information on click.\n* Retrieves and logs user account information on click.\n* Retrieves and logs block information at a specific height on click.\n* (Broken/ commented out section) Retrieves and logs events across a range of block heights.", "metadata": {"repo": "magiclabs/example-nextjs-flow", "file": "components/builders-card.tsx", "chunk_number": 1, "total_chunks": 3}, "repository_explanation": "Unfortunately, you haven't provided a repository for me to explain.\n\nIf you provide the repository URL or describe its contents, I'd be happy to give you a concise summary!", "file_summary": "Here's a concise summary of the file 'components/builders-card.tsx':\n\n**Summary:** A React component providing options for interacting with the blockchain, including retrieving and logging block information, user account details, and specific block data on click."}
{"code": "      .send([\n        fcl.getEventsAtBlockHeightRange(\n          'A.7e60df042a9c0868.FlowToken.TokensWithdrawn',\n          block.height - 100,\n          block.height,\n        ),\n      ])\n      .then(fcl.decode)\n\n    console.log(result)\n  }\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Builders</CardTitle>\n      </CardHeader>\n      <CardContent className=\"grid-col-2 grid flex-col space-y-3\">\n        <Button\n          className=\"small-button\"\n          style={{ width: 'auto' }}\n          onClick={handleGetAccount}\n        >\n          getAccount\n        </Button>\n        <Button\n          className=\"small-button\"\n          style={{ width: 'auto' }}\n          onClick={handleGetBlock}\n        >\n          getBlock\n        </Button>\n        <Button\n          className=\"small-button\"\n          style={{ width: 'auto' }}\n          onClick={handleAtBlockHeight}\n        >\n          atBlockHeight\n        </Button>\n        <Button\n          className=\"small-button\"\n          style={{ width: 'auto' }}", "explanation": "**Purpose:** Fetch events related to token withdrawals at a specific block height.\n\n**Functionality:** Uses Flow's fcl library to retrieve events, decodes the result, and logs it to the console.", "metadata": {"repo": "magiclabs/example-nextjs-flow", "file": "components/builders-card.tsx", "chunk_number": 2, "total_chunks": 3}, "repository_explanation": "Unfortunately, you haven't provided a repository for me to explain.\n\nIf you provide the repository URL or describe its contents, I'd be happy to give you a concise summary!", "file_summary": "Here's a concise summary of the file 'components/builders-card.tsx':\n\n**Summary:** A React component providing options for interacting with the blockchain, including retrieving and logging block information, user account details, and specific block data on click."}
{"code": "          onClick={handleGetEventsAtBlockHeightRange}\n        >\n          getEventsAtBlockHeightRange\n        </Button>\n      </CardContent>\n    </Card>\n  )\n}\n", "explanation": "**Summary**\n\nThis block is a button that, when clicked, triggers the `handleGetEventsAtBlockHeightRange` function. Its purpose is to retrieve events at a specified block height range.", "metadata": {"repo": "magiclabs/example-nextjs-flow", "file": "components/builders-card.tsx", "chunk_number": 3, "total_chunks": 3}, "repository_explanation": "Unfortunately, you haven't provided a repository for me to explain.\n\nIf you provide the repository URL or describe its contents, I'd be happy to give you a concise summary!", "file_summary": "Here's a concise summary of the file 'components/builders-card.tsx':\n\n**Summary:** A React component providing options for interacting with the blockchain, including retrieving and logging block information, user account details, and specific block data on click."}
{"code": "import { Button } from '@/components/ui/button'\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'\nimport { fcl } from '@/lib/fcl'\n\nexport const ContractsCard = () => {\n  const handleGetAccount = async () => {\n    const currentUser = await fcl.currentUser()\n\n    const cadence = `\n    import FungibleToken from 0xFT\n    import FlowToken from 0xFLOW\n\n    transaction(recepient: Address, amount: UFix64){\n      prepare(signer: AuthAccount){\n        let sender = signer.borrow<&FlowToken.Vault>(from: /storage/flowTokenVault)\n          ?? panic(\"Could not borrow Provider reference to the Vault\")\n\n        let receiverAccount = getAccount(recepient)\n\n        let receiver = receiverAccount.getCapability(/public/flowTokenReceiver)\n          .borrow<&FlowToken.Vault{FungibleToken.Receiver}>()\n          ?? panic(\"Could not borrow Receiver reference to the Vault\")\n\n                let tempVault <- sender.withdraw(amount: amount)\n        receiver.deposit(from: <- tempVault)\n      }\n    }\n  `", "explanation": "Here is a summary of the block:\n\n**Purpose:** A React component (`ContractsCard`) that handles an action related to Flow blockchain transactions.\n\n**Functionality:** The component uses the `fcl` library to interact with the Flow blockchain, executing a Cadence script (a programming language for Flow) to transfer tokens between accounts.", "metadata": {"repo": "magiclabs/example-nextjs-flow", "file": "components/contracts-card.tsx", "chunk_number": 1, "total_chunks": 2}, "repository_explanation": "Unfortunately, you haven't provided a repository for me to explain.\n\nIf you provide the repository URL or describe its contents, I'd be happy to give you a concise summary!", "file_summary": "Here's a concise holistic summary of the file 'components/contracts-card.tsx':\n\n`ContractsCard` is a React component that sends a Flow blockchain transaction using Cadence, executing a contract mutation with predefined inputs and logging the resulting transaction ID."}
{"code": "    const args = (arg: any, t: any) => [\n      arg('0x3ad5425104231af1', t.Address),\n      arg(0.00001, t.UFix64),\n    ]\n    const limit = 500\n\n    const txId = await fcl.mutate({ cadence, args, limit })\n    console.log({ txId })\n  }\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Contracts</CardTitle>\n      </CardHeader>\n      <CardContent className=\"grid-col-2 grid flex-col space-y-3\">\n        <Button\n          className=\"small-button\"\n          style={{ width: 'auto' }}\n          onClick={handleGetAccount}\n        >\n          Send tokens\n        </Button>\n      </CardContent>\n    </Card>\n  )\n}\n", "explanation": "Here is a concise summary:\n\n**Purpose:** Execute a Cadence contract mutation with predefined arguments.\n\n**Functionality:** Sends a transaction with specified inputs (address and UFix64 value) and logs the resulting transaction ID.", "metadata": {"repo": "magiclabs/example-nextjs-flow", "file": "components/contracts-card.tsx", "chunk_number": 2, "total_chunks": 2}, "repository_explanation": "Unfortunately, you haven't provided a repository for me to explain.\n\nIf you provide the repository URL or describe its contents, I'd be happy to give you a concise summary!", "file_summary": "Here's a concise holistic summary of the file 'components/contracts-card.tsx':\n\n`ContractsCard` is a React component that sends a Flow blockchain transaction using Cadence, executing a contract mutation with predefined inputs and logging the resulting transaction ID."}
{"code": "import { Button } from '@/components/ui/button'\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'\nimport { fcl } from '@/lib/fcl'\n\nexport const CurrentUserCard = () => {\n  const handleSignUserMessage = async () => {\n    const user = await fcl.currentUser()\n\n    const hexMessage = Buffer.from('Hello World').toString('hex')\n    const signed = await user.signUserMessage(hexMessage)\n\n    console.log({ signed })\n  }\n\n  const handleSnapshot = async () => {\n    const user = await fcl.currentUser().snapshot()\n\n    console.log({ user })\n  }\n\n  const handleSubscribe = async () => {\n    // subscribes to the current user object and logs to console on changes\n    fcl.currentUser().subscribe(console.log)\n  }\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Current User</CardTitle>\n      </CardHeader>\n      <CardContent className=\"grid-col-2 grid flex-col space-y-3\">\n        <Button onClick={handleSignUserMessage}>\n          fcl.currentUser().signUserMessage()\n        </Button>", "explanation": "Here is a concise summary:\n\nThis block defines a \"Current User Card\" component that uses the \"fcl\" library to interact with the current user's data on a blockchain. It provides three interactive buttons: \"Sign User Message\", \"Snapshot\", and \"Subscribe\", which perform different operations related to the current user's data, such as signing messages, taking snapshots, and subscribing to changes.", "metadata": {"repo": "magiclabs/example-nextjs-flow", "file": "components/current-user-card.tsx", "chunk_number": 1, "total_chunks": 2}, "repository_explanation": "Unfortunately, you haven't provided a repository for me to explain.\n\nIf you provide the repository URL or describe its contents, I'd be happy to give you a concise summary!", "file_summary": "Here is a concise summary of the file 'components/current-user-card.tsx':\n\n**Purpose:** Provides interactive buttons for snapshot, subscribe, and sign user message functionality related to the current user in a blockchain context.\n\n**Key Features:**\n\n* Three clickable buttons within a Card content area\n* Triggers `handleSnapshot`, `handleSubscribe`, and `handleSignUserMessage` functions on button click\n* Interacts with current user's data using `fcl.currentUser()` method"}
{"code": "        <Button onClick={handleSnapshot}>fcl.currentUser().snapshot()</Button>\n        <Button onClick={handleSubscribe}>fcl.currentUser().subscribe()</Button>\n      </CardContent>\n    </Card>\n  )\n}\n", "explanation": "This block of code appears to be a React component that displays two buttons within a Card content area.\n\n**Purpose:** Provide clickable buttons for snapshot and subscribe functionality related to the current user in a blockchain context (fcl.currentUser()).\n\n**Functionality:**\n\n1. The first button, when clicked, triggers the `handleSnapshot` function.\n2. The second button, when clicked, triggers the `handleSubscribe` function.\n\nBoth functions seem to be interacting with the current user's data using the `fcl.currentUser()` method.", "metadata": {"repo": "magiclabs/example-nextjs-flow", "file": "components/current-user-card.tsx", "chunk_number": 2, "total_chunks": 2}, "repository_explanation": "Unfortunately, you haven't provided a repository for me to explain.\n\nIf you provide the repository URL or describe its contents, I'd be happy to give you a concise summary!", "file_summary": "Here is a concise summary of the file 'components/current-user-card.tsx':\n\n**Purpose:** Provides interactive buttons for snapshot, subscribe, and sign user message functionality related to the current user in a blockchain context.\n\n**Key Features:**\n\n* Three clickable buttons within a Card content area\n* Triggers `handleSnapshot`, `handleSubscribe`, and `handleSignUserMessage` functions on button click\n* Interacts with current user's data using `fcl.currentUser()` method"}
{"code": "import { Button } from '@/components/ui/button'\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'\nimport { fcl } from '@/lib/fcl'\n\nexport const OnChainInteractionsCard = () => {\n  const handleQuery = async () => {\n    const result = await fcl.query({\n      cadence: `\n        pub fun main(a: Int, b: Int, addr: Address): Int {\n          log(addr)\n          return a + b\n        }\n      `,\n      args: (arg: any, t: any) => [\n        arg(7, t.Int), // a: Int\n        arg(6, t.Int), // b: Int\n        arg('0xba1132bc08f82fe2', t.Address), // addr: Address\n      ],\n    })\n\n    console.log({ result })\n  }\n\n  const handleMutate = async () => {\n    const user = await fcl.currentUser().snapshot()\n    console.log({ user })\n\n    const transactionId = await fcl.mutate({\n      cadence: `\n      transaction(a: Int, b: Int, c: Address) {\n        prepare(acct: AuthAccount) {\n          log(acct)\n          log(a)\n          log(b)\n          log(c)\n        }\n      }\n    `,\n      args: (arg: any, t: any) => [", "explanation": "**Summary**\n\nThis block is a React component (`OnChainInteractionsCard`) that demonstrates on-chain interactions using the Flow Blockchain Library (FCL). It contains two functional components:\n\n1. `handleQuery`: A function that queries the blockchain, executing a Cadence script with input parameters.\n2. `handleMutate`: A function that initiates a transaction, modifying data on the blockchain.\n\nBoth functions log relevant data to the console for demonstration purposes.", "metadata": {"repo": "magiclabs/example-nextjs-flow", "file": "components/on-chain-interactions-card.tsx", "chunk_number": 1, "total_chunks": 3}, "repository_explanation": "Unfortunately, you haven't provided a repository for me to explain.\n\nIf you provide the repository URL or describe its contents, I'd be happy to give you a concise summary!", "file_summary": "Here is a concise summary of the `components/on-chain-interactions-card.tsx` file:\n\n**OnChainInteractionsCard**\n\nA React component demonstrating on-chain interactions with the Flow Blockchain Library (FCL). It provides an interface for querying and mutating blockchain data through buttons, offering functionalities such as querying, making mutations, sending transactions, and decoding on-chain data."}
{"code": "        arg(6, t.Int),\n        arg(7, t.Int),\n        arg(user.addr, t.Address),\n      ],\n      limit: 50,\n    })\n\n    console.log({ transactionId })\n\n    return transactionId\n  }\n\n  const handleSend = async () => {\n    const tx = await fcl.send([\n      fcl.transaction`\n        transaction {\n          prepare(acct: AuthAccount) {\n            log(\"Transaction Submitted\")\n          }\n        }\n      `,\n      fcl.payer(fcl.authz),\n      fcl.proposer(fcl.authz),\n      fcl.authorizations([fcl.authz]),\n      fcl.limit(100),\n    ])\n\n    console.log({ tx })\n    return tx\n  }\n\n  const handleDecode = async () => {\n    const response = await fcl.send([\n      fcl.script`\n            pub fun main(int1: Int, int2: Int): Int {\n                return int1 + int2\n            }\n        `,\n      fcl.args([fcl.arg(1, fcl.t.Int), fcl.arg(2, fcl.t.Int)]),\n    ])\n\n    console.log({ response })\n\n    const decoded = await fcl.decode(response)\n    console.log({ decoded })\n  }\n\n  return (\n    <Card>\n      <CardHeader>", "explanation": "Here is a concise summary:\n\n**Block Functionality:**\n\n* Three functions: `handleGet`, `handleSend`, and `handleDecode`\n* Handle GET request: takes an address as input, logs a message, and returns a transaction ID\n* Handle SEND request: sends a transaction to the blockchain, proposing and paying from an authorized account\n* Handle DECODE request: executes a script on the blockchain, decodes the response, and logs it", "metadata": {"repo": "magiclabs/example-nextjs-flow", "file": "components/on-chain-interactions-card.tsx", "chunk_number": 2, "total_chunks": 3}, "repository_explanation": "Unfortunately, you haven't provided a repository for me to explain.\n\nIf you provide the repository URL or describe its contents, I'd be happy to give you a concise summary!", "file_summary": "Here is a concise summary of the `components/on-chain-interactions-card.tsx` file:\n\n**OnChainInteractionsCard**\n\nA React component demonstrating on-chain interactions with the Flow Blockchain Library (FCL). It provides an interface for querying and mutating blockchain data through buttons, offering functionalities such as querying, making mutations, sending transactions, and decoding on-chain data."}
{"code": "        <CardTitle>On-chain Interactions</CardTitle>\n      </CardHeader>\n      <CardContent className=\"grid-col-2 grid flex-col space-y-3\">\n        <Button onClick={handleQuery}>fcl.query</Button>\n        <Button onClick={handleMutate}>fcl.muate</Button>\n        <Button onClick={handleSend}>fcl.send</Button>\n        <Button onClick={handleDecode}>fcl.decode</Button>\n      </CardContent>\n    </Card>\n  )\n}\n", "explanation": "Here is a concise summary:\n\n**Card Block Purpose:**\nProvides an interface for interacting with on-chain data through buttons.\n\n**Functionalities:**\n\n* Query on-chain data (fcl.query)\n* Make on-chain mutations (fcl.muate)\n* Send transactions (fcl.send)\n* Decode on-chain data (fcl.decode)", "metadata": {"repo": "magiclabs/example-nextjs-flow", "file": "components/on-chain-interactions-card.tsx", "chunk_number": 3, "total_chunks": 3}, "repository_explanation": "Unfortunately, you haven't provided a repository for me to explain.\n\nIf you provide the repository URL or describe its contents, I'd be happy to give you a concise summary!", "file_summary": "Here is a concise summary of the `components/on-chain-interactions-card.tsx` file:\n\n**OnChainInteractionsCard**\n\nA React component demonstrating on-chain interactions with the Flow Blockchain Library (FCL). It provides an interface for querying and mutating blockchain data through buttons, offering functionalities such as querying, making mutations, sending transactions, and decoding on-chain data."}
{"code": "import { Button } from '@/components/ui/button'\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'\nimport { fcl } from '@/lib/fcl'\n\nexport const PreBuiltInteractionsCard = () => {\n  const handleAccount = async () => {\n    const user = await fcl.currentUser().snapshot()\n    const account = await fcl.account(user.addr)\n    console.log({ account })\n  }\n\n  const handleBlock = async () => {\n    // get latest finalized block\n    const latestBlock = await fcl.block()\n    console.log({ latestBlock })\n\n    // get latest sealed block\n    const sealedLatestBlock = await fcl.block({ sealed: true })\n    console.log({ sealedLatestBlock })\n\n    // get block by id\n    const blockById = await fcl.block({\n      id: latestBlock.id,\n    })\n    console.log({ blockById })\n\n    // get block by height\n    const blockByHeight = await fcl.block({ height: latestBlock.height })\n    console.log({ blockByHeight })\n  }\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Pre-built interactions</CardTitle>", "explanation": "**Summary**\n\nThis is a React component that provides pre-built interactions with a blockchain using the FCL (Fantom Chain Library) library. It includes two buttons: \"Account\" and \"Block\", which, when clicked, execute different functions to retrieve and log user account information and various block data, respectively.", "metadata": {"repo": "magiclabs/example-nextjs-flow", "file": "components/pre-built-interactions-card.tsx", "chunk_number": 1, "total_chunks": 2}, "repository_explanation": "Unfortunately, you haven't provided a repository for me to explain.\n\nIf you provide the repository URL or describe its contents, I'd be happy to give you a concise summary!", "file_summary": "Here is a concise summary of the file 'components/pre-built-interactions-card.tsx':\n\n**Summary**\n\nA React component that provides pre-built interactions with a blockchain using FCL, allowing users to retrieve account info and block data through button clicks."}
{"code": "      </CardHeader>\n      <CardContent className=\"grid-col-2 grid flex-col space-y-3\">\n        <Button onClick={handleAccount}>fcl.account</Button>\n        <Button onClick={handleBlock}>fcl.block</Button>\n      </CardContent>\n    </Card>\n  )\n}\n", "explanation": "This block appears to be a React card component that contains two buttons: \"fcl.account\" and \"fcl.block\". The purpose is to allow user interaction through button clicks, which trigger corresponding functions `handleAccount` and `handleBlock`.", "metadata": {"repo": "magiclabs/example-nextjs-flow", "file": "components/pre-built-interactions-card.tsx", "chunk_number": 2, "total_chunks": 2}, "repository_explanation": "Unfortunately, you haven't provided a repository for me to explain.\n\nIf you provide the repository URL or describe its contents, I'd be happy to give you a concise summary!", "file_summary": "Here is a concise summary of the file 'components/pre-built-interactions-card.tsx':\n\n**Summary**\n\nA React component that provides pre-built interactions with a blockchain using FCL, allowing users to retrieve account info and block data through button clicks."}
{"code": "'use client'\n\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query'\nimport { useState, type PropsWithChildren } from 'react'\n\nexport const QueryProvider = ({ children }: PropsWithChildren) => {\n  const [queryClient] = useState(\n    () =>\n      new QueryClient({\n        defaultOptions: {\n          queries: {\n            // With SSR, we usually want to set some default staleTime\n            // above 0 to avoid refetching immediately on the client\n            staleTime: 60 * 1000,\n          },\n        },\n      }),\n  )\n\n  return (\n    <QueryClientProvider client={queryClient}>{children}</QueryClientProvider>\n  )\n}\n", "explanation": "**Purpose:** Provides a global QueryClient instance for React Query.\n\n**Functionality:** Wraps the app with a QueryClientProvider, allowing components to access a shared query cache.", "metadata": {"repo": "magiclabs/example-nextjs-flow", "file": "components/query-provider.tsx", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Unfortunately, you haven't provided a repository for me to explain.\n\nIf you provide the repository URL or describe its contents, I'd be happy to give you a concise summary!", "file_summary": "Here is a concise summary of the file 'components/query-provider.tsx':\n\nProvides a global QueryClient instance via QueryClientProvider, enabling shared caching for React Query across components."}
{"code": "'use client'\n\nimport { ThemeProvider as NextThemesProvider } from 'next-themes'\nimport { type ThemeProviderProps } from 'next-themes/dist/types'\n\nexport function ThemeProvider({ children, ...props }: ThemeProviderProps) {\n  return <NextThemesProvider {...props}>{children}</NextThemesProvider>\n}\n", "explanation": "**Summary:**\n\nThis block is a custom `ThemeProvider` component that wraps around the `NextThemesProvider` from the `next-themes` library, allowing for theme management in a Next.js application. It exposes a simple API for its users to easily integrate theme switching into their components.", "metadata": {"repo": "magiclabs/example-nextjs-flow", "file": "components/theme-provider.tsx", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Unfortunately, you haven't provided a repository for me to explain.\n\nIf you provide the repository URL or describe its contents, I'd be happy to give you a concise summary!", "file_summary": "Here is a concise summary:\n\n**ThemeProvider.tsx:** A custom component that wraps `NextThemesProvider`, enabling easy theme management in Next.js applications."}
{"code": "import { Button } from '@/components/ui/button'\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'\nimport { fcl } from '@/lib/fcl'\n\nexport const TransactionStatusUtilityCard = () => {\n  const handleTx = async () => {\n    const user = await fcl.currentUser().snapshot()\n    console.log({ user })\n\n    const transactionId = await fcl.mutate({\n      cadence: `\n      transaction(a: Int, b: Int, c: Address) {\n        prepare(acct: AuthAccount) {\n          log(acct)\n          log(a)\n          log(b)\n          log(c)\n        }\n      }\n    `,\n      args: (arg: any, t: any) => [\n        arg(6, t.Int),\n        arg(7, t.Int),\n        arg(user.addr, t.Address),\n      ],\n      limit: 50,\n    })\n\n    const tx = await fcl.tx(transactionId).snapshot()\n\n    console.log({ tx })\n  }\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Transaction Status Utility</CardTitle>\n      </CardHeader>\n      <CardContent className=\"grid-col-2 grid flex-col space-y-3\">\n        <Button onClick={handleTx}>fcl.tx</Button>", "explanation": "Here is a concise summary:\n\n**Purpose:** TransactionStatusUtilityCard displays a card with a button that triggers a Cadence transaction snapshot when clicked.\n\n**Functionality:** The button, labeled \"fcl.tx\", initiates a transaction snapshot using the Flow Cryptocurrency Library (FCL) and logs user data to the console.", "metadata": {"repo": "magiclabs/example-nextjs-flow", "file": "components/transaction-status-utility-card.tsx", "chunk_number": 1, "total_chunks": 2}, "repository_explanation": "Unfortunately, you haven't provided a repository for me to explain.\n\nIf you provide the repository URL or describe its contents, I'd be happy to give you a concise summary!", "file_summary": "Here is a concise summary of the file 'components/transaction-status-utility-card.tsx':\n\n**TransactionStatusUtilityCard**: A card component with a button that triggers a Cadence transaction snapshot when clicked, logging user data to the console using FCL."}
{"code": "      </CardContent>\n    </Card>\n  )\n}\n", "explanation": "This block appears to be React JavaScript code, specifically a JSX (JavaScript XML) element that closes a `CardContent` component within a `Card` component.", "metadata": {"repo": "magiclabs/example-nextjs-flow", "file": "components/transaction-status-utility-card.tsx", "chunk_number": 2, "total_chunks": 2}, "repository_explanation": "Unfortunately, you haven't provided a repository for me to explain.\n\nIf you provide the repository URL or describe its contents, I'd be happy to give you a concise summary!", "file_summary": "Here is a concise summary of the file 'components/transaction-status-utility-card.tsx':\n\n**TransactionStatusUtilityCard**: A card component with a button that triggers a Cadence transaction snapshot when clicked, logging user data to the console using FCL."}
{"code": "import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",", "explanation": "**Purpose:** A reusable, customizable button component.\n\n**Functionality:** This block defines a set of styles for a button using the `cva` library from `class-variance-authority`. It includes various variants (e.g., default, destructive, outline, secondary, ghost) that can be used to style the button.", "metadata": {"repo": "magiclabs/example-nextjs-flow", "file": "components/ui/button.tsx", "chunk_number": 1, "total_chunks": 2}, "repository_explanation": "Unfortunately, you haven't provided a repository for me to explain.\n\nIf you provide the repository URL or describe its contents, I'd be happy to give you a concise summary!", "file_summary": "Here is a holistic summary of the file 'components/ui/button.tsx':\n\n\"A reusable, customizable button component that generates a styled button element with various variants (default, destructive, outline, secondary, ghost) and sizes.\""}
{"code": "        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n", "explanation": "Here is a concise summary:\n\n**Purpose:** A customizable button component.\n\n**Functionality:** Generates a button element with dynamic styling based on provided variants and sizes. Can be used as a standalone button or as a child of another component.", "metadata": {"repo": "magiclabs/example-nextjs-flow", "file": "components/ui/button.tsx", "chunk_number": 2, "total_chunks": 2}, "repository_explanation": "Unfortunately, you haven't provided a repository for me to explain.\n\nIf you provide the repository URL or describe its contents, I'd be happy to give you a concise summary!", "file_summary": "Here is a holistic summary of the file 'components/ui/button.tsx':\n\n\"A reusable, customizable button component that generates a styled button element with various variants (default, destructive, outline, secondary, ghost) and sizes.\""}
{"code": "import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h3\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLParagraphElement,", "explanation": "**Summary:**\n\nThis block defines a set of reusable React components for building cards with customizable styles:\n\n1. **Card**: A container component that wraps content.\n2. **CardHeader**: A header component that contains title and description.\n3. **CardTitle**: A title component that displays the main heading.\n4. **CardDescription**: Not fully defined in this snippet, but presumably a component for displaying additional text or details.\n\nAll components use the `cn` utility function to apply class names and styles from a library.", "metadata": {"repo": "magiclabs/example-nextjs-flow", "file": "components/ui/card.tsx", "chunk_number": 1, "total_chunks": 2}, "repository_explanation": "Unfortunately, you haven't provided a repository for me to explain.\n\nIf you provide the repository URL or describe its contents, I'd be happy to give you a concise summary!", "file_summary": "Here is a concise summary of the file 'components/ui/card.tsx':\n\nThis module defines reusable React card components (`Card`, `CardHeader`, `CardTitle`, and others) with customizable styles, using utility functions like `cn` for class name management."}
{"code": "  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <p\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n", "explanation": "Here is a concise summary:\n\nThis block defines four React components for styling card elements: `Card`, `CardHeader`, `CardContent`, and `CardFooter`. They accept HTML attributes and provide default styles through utility functions like `cn` (short for \"classnames\"). The components use forwardRef to enable ref passing.", "metadata": {"repo": "magiclabs/example-nextjs-flow", "file": "components/ui/card.tsx", "chunk_number": 2, "total_chunks": 2}, "repository_explanation": "Unfortunately, you haven't provided a repository for me to explain.\n\nIf you provide the repository URL or describe its contents, I'd be happy to give you a concise summary!", "file_summary": "Here is a concise summary of the file 'components/ui/card.tsx':\n\nThis module defines reusable React card components (`Card`, `CardHeader`, `CardTitle`, and others) with customizable styles, using utility functions like `cn` for class name management."}
{"code": "import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  ControllerProps,\n  FieldPath,\n  FieldValues,\n  FormProvider,\n  useFormContext,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {", "explanation": "Here is a concise summary:\n\n**Purpose:** A reusable form field component that provides context for React Hook Form.\n\n**Functionality:** Wraps `Controller` from react-hook-form in a custom context, enabling access to form data and validation rules within the component tree.", "metadata": {"repo": "magiclabs/example-nextjs-flow", "file": "components/ui/form.tsx", "chunk_number": 1, "total_chunks": 4}, "repository_explanation": "Unfortunately, you haven't provided a repository for me to explain.\n\nIf you provide the repository URL or describe its contents, I'd be happy to give you a concise summary!", "file_summary": "Here is a concise summary of the file 'components/ui/form.tsx':\n\nThis code defines a reusable form field component that provides context for React Hook Form. It includes a custom context, form label, form control container, and two display components (FormDescription and FormMessage) to show form-related text. The components use a shared hook to retrieve information about the form field."}
{"code": "  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>", "explanation": "Here is a concise summary:\n\n**Purpose:** Provides functionality for form fields, retrieving field state and context.\n\n**Functionality:** Returns an object with field state and context, including ID, name, and error message IDs, based on the `FormField` context. Throws an error if not used within `<FormField>`.", "metadata": {"repo": "magiclabs/example-nextjs-flow", "file": "components/ui/form.tsx", "chunk_number": 2, "total_chunks": 4}, "repository_explanation": "Unfortunately, you haven't provided a repository for me to explain.\n\nIf you provide the repository URL or describe its contents, I'd be happy to give you a concise summary!", "file_summary": "Here is a concise summary of the file 'components/ui/form.tsx':\n\nThis code defines a reusable form field component that provides context for React Hook Form. It includes a custom context, form label, form control container, and two display components (FormDescription and FormMessage) to show form-related text. The components use a shared hook to retrieve information about the form field."}
{"code": "  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<", "explanation": "Here is a summary of the purpose and functionality of this code:\n\n**Summary:**\n\nThis code defines three custom React components for building forms:\n\n1. `FormLabel`: A label component that displays an error message when applicable.\n2. `FormControl`: A container component that wraps form fields, providing accessibility features like ARIA attributes.\n3. **Missing component name**: The third component is not named or summarized in the provided code.\n\nThese components use a shared hook (`useFormField`) to retrieve information about the form field, such as error status and IDs.", "metadata": {"repo": "magiclabs/example-nextjs-flow", "file": "components/ui/form.tsx", "chunk_number": 3, "total_chunks": 4}, "repository_explanation": "Unfortunately, you haven't provided a repository for me to explain.\n\nIf you provide the repository URL or describe its contents, I'd be happy to give you a concise summary!", "file_summary": "Here is a concise summary of the file 'components/ui/form.tsx':\n\nThis code defines a reusable form field component that provides context for React Hook Form. It includes a custom context, form label, form control container, and two display components (FormDescription and FormMessage) to show form-related text. The components use a shared hook to retrieve information about the form field."}
{"code": "  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message) : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n", "explanation": "Here is a concise summary:\n\n**Purpose:** Two React components: `FormDescription` and `FormMessage`, display text related to form fields.\n\n**Functionality:** \n\n* `FormDescription`: Displays a paragraph with form description, optionally highlighting errors.\n* `FormMessage`: Displays a message (error or success) in a paragraph.", "metadata": {"repo": "magiclabs/example-nextjs-flow", "file": "components/ui/form.tsx", "chunk_number": 4, "total_chunks": 4}, "repository_explanation": "Unfortunately, you haven't provided a repository for me to explain.\n\nIf you provide the repository URL or describe its contents, I'd be happy to give you a concise summary!", "file_summary": "Here is a concise summary of the file 'components/ui/form.tsx':\n\nThis code defines a reusable form field component that provides context for React Hook Form. It includes a custom context, form label, form control container, and two display components (FormDescription and FormMessage) to show form-related text. The components use a shared hook to retrieve information about the form field."}
{"code": "import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nexport interface InputProps\n  extends React.InputHTMLAttributes<HTMLInputElement> {}\n\nconst Input = React.forwardRef<HTMLInputElement, InputProps>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n", "explanation": "Here is a concise summary of the purpose and functionality of this block:\n\n**Purpose:** A reusable input field component.\n\n**Functionality:** Accepts various props (e.g., type, className) and renders an HTML input element with customizable styles.", "metadata": {"repo": "magiclabs/example-nextjs-flow", "file": "components/ui/input.tsx", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Unfortunately, you haven't provided a repository for me to explain.\n\nIf you provide the repository URL or describe its contents, I'd be happy to give you a concise summary!", "file_summary": "Here is a concise and holistic summary of the file 'components/ui/input.tsx':\n\n\"Reusable input field component that accepts customizable props and renders a styled HTML input element.\""}
{"code": "\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n", "explanation": "Here is a concise summary of the block's purpose and functionality:\n\n**Purpose:** A reusable label component for React applications.\n\n**Functionality:** Provides a customizable label element with dynamic styling, accessibility features, and a disabled state indicator.", "metadata": {"repo": "magiclabs/example-nextjs-flow", "file": "components/ui/label.tsx", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Unfortunately, you haven't provided a repository for me to explain.\n\nIf you provide the repository URL or describe its contents, I'd be happy to give you a concise summary!", "file_summary": "Here is a concise holistic summary:\n\n**Label Component Summary:**\nA reusable, customizable label component for React apps, offering dynamic styling, accessibility features, and a disabled state indicator."}
{"code": "\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>", "explanation": "Here is a concise summary of the purpose and functionality of this block:\n\n**Purpose:** A customizable dropdown select component.\n\n**Functionality:** Renders a trigger element that can be customized with various styles and icons, allowing users to interact with a hidden list of options.", "metadata": {"repo": "magiclabs/example-nextjs-flow", "file": "components/ui/select.tsx", "chunk_number": 1, "total_chunks": 7}, "repository_explanation": "Unfortunately, you haven't provided a repository for me to explain.\n\nIf you provide the repository URL or describe its contents, I'd be happy to give you a concise summary!", "file_summary": "Here is a concise summary:\n\n**File Summary:** `components/ui/select.tsx` defines a customizable SelectItem component for selecting options, along with related components (SelectContent, SelectScrollDownButton, etc.) for rendering dropdown menus and handling user interactions."}
{"code": "      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(", "explanation": "Here is a concise summary:\n\nThis block defines two custom components (`SelectScrollUpButton` and `SelectScrollDownButton`) that render scroll up and down buttons with Chevron icons, respectively. They are built on top of a third-party library's (`SelectPrimitive`) scroll button component.", "metadata": {"repo": "magiclabs/example-nextjs-flow", "file": "components/ui/select.tsx", "chunk_number": 2, "total_chunks": 7}, "repository_explanation": "Unfortunately, you haven't provided a repository for me to explain.\n\nIf you provide the repository URL or describe its contents, I'd be happy to give you a concise summary!", "file_summary": "Here is a concise summary:\n\n**File Summary:** `components/ui/select.tsx` defines a customizable SelectItem component for selecting options, along with related components (SelectContent, SelectScrollDownButton, etc.) for rendering dropdown menus and handling user interactions."}
{"code": "      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(", "explanation": "Here is a concise summary:\n\nThis block renders a scroll down button with a ChevronDown icon, utilizing the `SelectPrimitive` component from the `@react-aria/select` library. The button's styling is customized using CSS classes (`flex`, `cursor-default`, etc.).", "metadata": {"repo": "magiclabs/example-nextjs-flow", "file": "components/ui/select.tsx", "chunk_number": 3, "total_chunks": 7}, "repository_explanation": "Unfortunately, you haven't provided a repository for me to explain.\n\nIf you provide the repository URL or describe its contents, I'd be happy to give you a concise summary!", "file_summary": "Here is a concise summary:\n\n**File Summary:** `components/ui/select.tsx` defines a customizable SelectItem component for selecting options, along with related components (SelectContent, SelectScrollDownButton, etc.) for rendering dropdown menus and handling user interactions."}
{"code": "        \"relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}", "explanation": "Here is a concise summary:\n\nThis block appears to be a CSS class string with conditional logic, defining styles and animations for a dropdown or popover component. It controls various aspects such as position, size, borders, background, text color, shadows, and animations based on specific states (e.g., open/closed) and positions (e.g., top/bottom).", "metadata": {"repo": "magiclabs/example-nextjs-flow", "file": "components/ui/select.tsx", "chunk_number": 4, "total_chunks": 7}, "repository_explanation": "Unfortunately, you haven't provided a repository for me to explain.\n\nIf you provide the repository URL or describe its contents, I'd be happy to give you a concise summary!", "file_summary": "Here is a concise summary:\n\n**File Summary:** `components/ui/select.tsx` defines a customizable SelectItem component for selecting options, along with related components (SelectContent, SelectScrollDownButton, etc.) for rendering dropdown menus and handling user interactions."}
{"code": "      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(", "explanation": "Here is a concise summary:\n\nThis block defines a custom component (`SelectContent`) with a dropdown menu (via `SelectScrollDownButton`), which contains a label (`SelectLabel`) and an item list (`SelectItem`). It also sets display names for these components.", "metadata": {"repo": "magiclabs/example-nextjs-flow", "file": "components/ui/select.tsx", "chunk_number": 5, "total_chunks": 7}, "repository_explanation": "Unfortunately, you haven't provided a repository for me to explain.\n\nIf you provide the repository URL or describe its contents, I'd be happy to give you a concise summary!", "file_summary": "Here is a concise summary:\n\n**File Summary:** `components/ui/select.tsx` defines a customizable SelectItem component for selecting options, along with related components (SelectContent, SelectScrollDownButton, etc.) for rendering dropdown menus and handling user interactions."}
{"code": "      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))", "explanation": "Here is a concise summary:\n\n**Block Purpose:** A customizable SelectItem component for selecting options.\n\n**Functionality:**\n\n* Displays an item in a dropdown or list\n* Allows user selection with default cursor behavior\n* Supports disabled state with pointer-events-none and opacity-50 styles\n* Can be customized with various props, including className and children.", "metadata": {"repo": "magiclabs/example-nextjs-flow", "file": "components/ui/select.tsx", "chunk_number": 6, "total_chunks": 7}, "repository_explanation": "Unfortunately, you haven't provided a repository for me to explain.\n\nIf you provide the repository URL or describe its contents, I'd be happy to give you a concise summary!", "file_summary": "Here is a concise summary:\n\n**File Summary:** `components/ui/select.tsx` defines a customizable SelectItem component for selecting options, along with related components (SelectContent, SelectScrollDownButton, etc.) for rendering dropdown menus and handling user interactions."}
{"code": "SelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n", "explanation": "**Summary:**\n\nThis block exports a set of UI components, including a separator component, for use in a select dropdown interface. It also sets the display name for the separator component.", "metadata": {"repo": "magiclabs/example-nextjs-flow", "file": "components/ui/select.tsx", "chunk_number": 7, "total_chunks": 7}, "repository_explanation": "Unfortunately, you haven't provided a repository for me to explain.\n\nIf you provide the repository URL or describe its contents, I'd be happy to give you a concise summary!", "file_summary": "Here is a concise summary:\n\n**File Summary:** `components/ui/select.tsx` defines a customizable SelectItem component for selecting options, along with related components (SelectContent, SelectScrollDownButton, etc.) for rendering dropdown menus and handling user interactions."}
{"code": "import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(", "explanation": "Here is a concise summary of the purpose and functionality of this block:\n\n**Purpose:** To create a reusable, customizable toast component with a provider.\n\n**Functionality:**\n\n* Provides a `ToastProvider` component for managing toast notifications.\n* Defines a `ToastViewport` component that renders a toast notification container.\n* Uses `class-variance-authority` to generate variant classes (`toastVariants`) for styling the toast component.", "metadata": {"repo": "magiclabs/example-nextjs-flow", "file": "components/ui/toast.tsx", "chunk_number": 1, "total_chunks": 6}, "repository_explanation": "Unfortunately, you haven't provided a repository for me to explain.\n\nIf you provide the repository URL or describe its contents, I'd be happy to give you a concise summary!", "file_summary": "Here is a concise and holistic summary of the file 'components/ui/toast.tsx':\n\nThis file defines a reusable and customizable toast component with a provider, allowing for centralized management of toast notifications. The toast component features variant-based styling, animation on swipe or state changes, and customizable styles through props. It includes components for managing toast providers, rendering toast containers, and displaying close buttons, titles, and descriptions with hover effects and transitions."}
{"code": "  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,", "explanation": "Here is a concise summary:\n\nThis block defines a toast component's styles and variants, allowing it to animate in/out on swipe or state changes, with customizable styles based on its variant (e.g., default, destructive).", "metadata": {"repo": "magiclabs/example-nextjs-flow", "file": "components/ui/toast.tsx", "chunk_number": 2, "total_chunks": 6}, "repository_explanation": "Unfortunately, you haven't provided a repository for me to explain.\n\nIf you provide the repository URL or describe its contents, I'd be happy to give you a concise summary!", "file_summary": "Here is a concise and holistic summary of the file 'components/ui/toast.tsx':\n\nThis file defines a reusable and customizable toast component with a provider, allowing for centralized management of toast notifications. The toast component features variant-based styling, animation on swipe or state changes, and customizable styles through props. It includes components for managing toast providers, rendering toast containers, and displaying close buttons, titles, and descriptions with hover effects and transitions."}
{"code": "  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(", "explanation": "Here is a concise summary:\n\n**Purpose:** A custom `Toast` component that wraps the underlying `ToastPrimitives.Root` component with additional functionality.\n\n**Functionality:** Accepts variant and class name props, and passes them to the underlying component for styling. Also accepts other props and references for customization.", "metadata": {"repo": "magiclabs/example-nextjs-flow", "file": "components/ui/toast.tsx", "chunk_number": 3, "total_chunks": 6}, "repository_explanation": "Unfortunately, you haven't provided a repository for me to explain.\n\nIf you provide the repository URL or describe its contents, I'd be happy to give you a concise summary!", "file_summary": "Here is a concise and holistic summary of the file 'components/ui/toast.tsx':\n\nThis file defines a reusable and customizable toast component with a provider, allowing for centralized management of toast notifications. The toast component features variant-based styling, animation on swipe or state changes, and customizable styles through props. It includes components for managing toast providers, rendering toast containers, and displaying close buttons, titles, and descriptions with hover effects and transitions."}
{"code": "      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(", "explanation": "This block is a React component that renders a close button with various styles and hover effects, likely used in a toast notification system.", "metadata": {"repo": "magiclabs/example-nextjs-flow", "file": "components/ui/toast.tsx", "chunk_number": 4, "total_chunks": 6}, "repository_explanation": "Unfortunately, you haven't provided a repository for me to explain.\n\nIf you provide the repository URL or describe its contents, I'd be happy to give you a concise summary!", "file_summary": "Here is a concise and holistic summary of the file 'components/ui/toast.tsx':\n\nThis file defines a reusable and customizable toast component with a provider, allowing for centralized management of toast notifications. The toast component features variant-based styling, animation on swipe or state changes, and customizable styles through props. It includes components for managing toast providers, rendering toast containers, and displaying close buttons, titles, and descriptions with hover effects and transitions."}
{"code": "      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,", "explanation": "Here is a concise summary of the block:\n\n**Summary:** A CSS class string defining styles for a toast component's close button, title, and description elements.\n\n**Functionality:** Provides visual styles (e.g., colors, opacity, transitions) for these components when hovered, focused, or interacted with.", "metadata": {"repo": "magiclabs/example-nextjs-flow", "file": "components/ui/toast.tsx", "chunk_number": 5, "total_chunks": 6}, "repository_explanation": "Unfortunately, you haven't provided a repository for me to explain.\n\nIf you provide the repository URL or describe its contents, I'd be happy to give you a concise summary!", "file_summary": "Here is a concise and holistic summary of the file 'components/ui/toast.tsx':\n\nThis file defines a reusable and customizable toast component with a provider, allowing for centralized management of toast notifications. The toast component features variant-based styling, animation on swipe or state changes, and customizable styles through props. It includes components for managing toast providers, rendering toast containers, and displaying close buttons, titles, and descriptions with hover effects and transitions."}
{"code": "  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n", "explanation": "Here is a concise summary:\n\n**Purpose:** A React component that renders a toast description element with customizable styling and props.\n\n**Functionality:** Returns an instance of `ToastPrimitives.Description` component, passing through ref, className, and other props.", "metadata": {"repo": "magiclabs/example-nextjs-flow", "file": "components/ui/toast.tsx", "chunk_number": 6, "total_chunks": 6}, "repository_explanation": "Unfortunately, you haven't provided a repository for me to explain.\n\nIf you provide the repository URL or describe its contents, I'd be happy to give you a concise summary!", "file_summary": "Here is a concise and holistic summary of the file 'components/ui/toast.tsx':\n\nThis file defines a reusable and customizable toast component with a provider, allowing for centralized management of toast notifications. The toast component features variant-based styling, animation on swipe or state changes, and customizable styles through props. It includes components for managing toast providers, rendering toast containers, and displaying close buttons, titles, and descriptions with hover effects and transitions."}
{"code": "\"use client\"\n\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\nimport { useToast } from \"@/components/ui/use-toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n", "explanation": "**Purpose:** Display a toast notification list with customizable content.\n\n**Functionality:**\n\n* Uses `useToast` hook to retrieve notifications\n* Maps through each notification and displays:\n\t+ Title (if provided)\n\t+ Description (if provided)\n\t+ Action (if provided)\n\t+ Close button\n* Renders a ToastViewport at the bottom", "metadata": {"repo": "magiclabs/example-nextjs-flow", "file": "components/ui/toaster.tsx", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Unfortunately, you haven't provided a repository for me to explain.\n\nIf you provide the repository URL or describe its contents, I'd be happy to give you a concise summary!", "file_summary": "Here is a concise and to-the-point holistic summary of the file 'components/ui/toaster.tsx':\n\n**File Purpose:** Displays a toast notification list with customizable content.\n\n**Functionality:** Retrieves notifications via `useToast` hook, rendering each item with title, description, action (if provided), and close button."}
{"code": "import { cn } from '@/lib/utils'\nimport { type ComponentProps } from 'react'\n\nexport function TypographyH1({ className, ...rest }: ComponentProps<'h1'>) {\n  return (\n    <h1\n      className={cn(\n        'scroll-m-20 text-4xl font-extrabold tracking-tight lg:text-5xl',\n        className,\n      )}\n      {...rest}\n    />\n  )\n}\n\nexport function TypographyH2({ className, ...rest }: ComponentProps<'h2'>) {\n  return (\n    <h2\n      className={cn(\n        'scroll-m-20 pb-2 text-3xl font-semibold tracking-tight transition-colors first:mt-0',\n        className,\n      )}\n      {...rest}\n    />\n  )\n}\n\nexport function TypographyH3({ className, ...rest }: ComponentProps<'h3'>) {\n  return (\n    <h3\n      className={cn(\n        'scroll-m-20 text-2xl font-semibold tracking-tight',\n        className,\n      )}\n      {...rest}\n    />\n  )\n}\n\nexport function TypographyH4({ className, ...rest }: ComponentProps<'h4'>) {\n  return (\n    <h4\n      className={cn(\n        'scroll-m-20 text-xl font-semibold tracking-tight',\n        className,\n      )}", "explanation": "**Purpose:** Provides reusable React components for typography styles (H1-H4) with customizable classes.\n\n**Functionality:** These components render HTML heading elements (h1-h4) with predefined class names, allowing users to add custom class names through the `className` prop. The `cn` function is used to concatenate custom class names with default styles.", "metadata": {"repo": "magiclabs/example-nextjs-flow", "file": "components/ui/typography.tsx", "chunk_number": 1, "total_chunks": 3}, "repository_explanation": "Unfortunately, you haven't provided a repository for me to explain.\n\nIf you provide the repository URL or describe its contents, I'd be happy to give you a concise summary!", "file_summary": "Here's a concise and to-the-point summary of the file 'components/ui/typography.tsx':\n\n**Summary:** This block exports five reusable React typography components for styling headings and paragraphs, with customizable class names and default styles."}
{"code": "      {...rest}\n    />\n  )\n}\n\nexport function TypographyP({ className, ...rest }: ComponentProps<'p'>) {\n  return (\n    <p\n      className={cn('leading-7 [&:not(:first-child)]:mt-6', className)}\n      {...rest}\n    />\n  )\n}\n\nexport function TypographyInlineCode({\n  className,\n  ...rest\n}: ComponentProps<'code'>) {\n  return (\n    <code\n      className={cn(\n        'bg-muted relative rounded px-[0.3rem] py-[0.2rem] font-mono text-sm font-semibold',\n        className,\n      )}\n      {...rest}\n    />\n  )\n}\n\nexport function TypographyBlockquote({\n  className,\n  ...rest\n}: ComponentProps<'blockquote'>) {\n  return (\n    <blockquote\n      className={cn('mt-6 border-l-2 pl-6 italic', className)}\n      {...rest}\n    />\n  )\n}\n\nexport function TypographyLead({ className, ...rest }: ComponentProps<'p'>) {\n  return (\n    <p className={cn('text-muted-foreground text-xl', className)} {...rest} />\n  )\n}\n\nexport function TypographyLarge({ className, ...rest }: ComponentProps<'div'>) {", "explanation": "This block exports five React components for typography:\n\n* `TypographyP`: A paragraph component with customizable styles.\n* `TypographyInlineCode`: An inline code component with a specific style.\n* `TypographyBlockquote`: A blockquote component with a stylized layout.\n* `TypographyLead`: A lead text component with a muted color scheme.\n* `TypographyLarge`: A large text component that can wrap around its content.", "metadata": {"repo": "magiclabs/example-nextjs-flow", "file": "components/ui/typography.tsx", "chunk_number": 2, "total_chunks": 3}, "repository_explanation": "Unfortunately, you haven't provided a repository for me to explain.\n\nIf you provide the repository URL or describe its contents, I'd be happy to give you a concise summary!", "file_summary": "Here's a concise and to-the-point summary of the file 'components/ui/typography.tsx':\n\n**Summary:** This block exports five reusable React typography components for styling headings and paragraphs, with customizable class names and default styles."}
{"code": "  return <div className={cn('text-lg font-semibold', className)} {...rest} />\n}\n\nexport function TypographySmall({\n  className,\n  ...rest\n}: ComponentProps<'small'>) {\n  return (\n    <small\n      className={cn('text-sm font-medium leading-none', className)}\n      {...rest}\n    />\n  )\n}\n\nexport function TypographyMuted({ className, ...rest }: ComponentProps<'p'>) {\n  return (\n    <p className={cn('text-muted-foreground text-sm', className)} {...rest} />\n  )\n}\n", "explanation": "Here is a concise summary:\n\nThis block exports three functions for rendering HTML typography elements:\n\n* `TypographySmall`: Small text\n* `TypographyMuted`: Muted text paragraph\n* A generic Typography element (not shown) that takes additional props", "metadata": {"repo": "magiclabs/example-nextjs-flow", "file": "components/ui/typography.tsx", "chunk_number": 3, "total_chunks": 3}, "repository_explanation": "Unfortunately, you haven't provided a repository for me to explain.\n\nIf you provide the repository URL or describe its contents, I'd be happy to give you a concise summary!", "file_summary": "Here's a concise and to-the-point summary of the file 'components/ui/typography.tsx':\n\n**Summary:** This block exports five reusable React typography components for styling headings and paragraphs, with customizable class names and default styles."}
{"code": "// Inspired by react-hot-toast library\nimport * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n", "explanation": "Here is a concise summary:\n\nThis block implements a toaster functionality, inspired by React Hot Toast library, allowing for display of notifications (toasts) with customizable content, actions, and delay-driven removal. It uses a state machine to manage toast lifecycle events and a unique ID generator.", "metadata": {"repo": "magiclabs/example-nextjs-flow", "file": "components/ui/use-toast.ts", "chunk_number": 1, "total_chunks": 4}, "repository_explanation": "Unfortunately, you haven't provided a repository for me to explain.\n\nIf you provide the repository URL or describe its contents, I'd be happy to give you a concise summary!", "file_summary": "Here is a concise summary of the file 'components/ui/use-toast.ts':\n\nThis file implements a toaster functionality, managing toast state updates (add, remove, toggle) and timeouts for customizable notifications with actions and delay-driven removal."}
{"code": "const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)", "explanation": "**Purpose:** Manage toast timeouts and dispatch removal events.\n\n**Functionality:**\n\n* Maintains a map of toast IDs with corresponding timeout values.\n* Adds a toast ID to the removal queue when `DISMISS_TOAST` action is dispatched.\n* Deletes the timeout value for a toast ID after the specified delay (TOAST_REMOVE_DELAY) and dispatches \"REMOVE_TOAST\" action.", "metadata": {"repo": "magiclabs/example-nextjs-flow", "file": "components/ui/use-toast.ts", "chunk_number": 2, "total_chunks": 4}, "repository_explanation": "Unfortunately, you haven't provided a repository for me to explain.\n\nIf you provide the repository URL or describe its contents, I'd be happy to give you a concise summary!", "file_summary": "Here is a concise summary of the file 'components/ui/use-toast.ts':\n\nThis file implements a toaster functionality, managing toast state updates (add, remove, toggle) and timeouts for customizable notifications with actions and delay-driven removal."}
{"code": "      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({", "explanation": "Here is a concise summary of the purpose and functionality of this block:\n\n**Purpose:** Handle toast state updates (add, remove, toggle)\n\n**Functionality:** The `reducer` function manages a list of \"toasts\" by updating them based on received actions. It can add, remove, or toggle individual toasts. When an action is dispatched, it updates the memory state and notifies registered listeners.", "metadata": {"repo": "magiclabs/example-nextjs-flow", "file": "components/ui/use-toast.ts", "chunk_number": 3, "total_chunks": 4}, "repository_explanation": "Unfortunately, you haven't provided a repository for me to explain.\n\nIf you provide the repository URL or describe its contents, I'd be happy to give you a concise summary!", "file_summary": "Here is a concise summary of the file 'components/ui/use-toast.ts':\n\nThis file implements a toaster functionality, managing toast state updates (add, remove, toggle) and timeouts for customizable notifications with actions and delay-driven removal."}
{"code": "      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n", "explanation": "Here is a summary of the purpose and functionality of this block:\n\n**Purpose:** Manage toast notifications (e.g., alerts, messages).\n\n**Functionality:** \n\n* Add new toast notifications.\n* Update existing toast notifications.\n* Dismiss toast notifications.\n* Store and retrieve toast state using React State.", "metadata": {"repo": "magiclabs/example-nextjs-flow", "file": "components/ui/use-toast.ts", "chunk_number": 4, "total_chunks": 4}, "repository_explanation": "Unfortunately, you haven't provided a repository for me to explain.\n\nIf you provide the repository URL or describe its contents, I'd be happy to give you a concise summary!", "file_summary": "Here is a concise summary of the file 'components/ui/use-toast.ts':\n\nThis file implements a toaster functionality, managing toast state updates (add, remove, toggle) and timeouts for customizable notifications with actions and delay-driven removal."}
{"code": "import { Button } from '@/components/ui/button'\nimport {\n  Card,\n  CardContent,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from '@/components/ui/card'\nimport { TypographyLarge, TypographySmall } from '@/components/ui/typography'\nimport { useToast } from '@/components/ui/use-toast'\nimport { useUser } from '@/hooks/use-user'\nimport { fcl, getFlowdiverAccountURL } from '@/lib/fcl'\nimport { CopyIcon, ExternalLinkIcon } from 'lucide-react'\nimport { useRouter } from 'next/navigation'\nimport { useCopyToClipboard } from 'react-use'\n\nexport const UserInfoCard = () => {\n  const router = useRouter()\n  const { user } = useUser()\n  const [, copyToClipboard] = useCopyToClipboard()\n  const { toast } = useToast()\n\n  const handleLogout = async () => {\n    const res = await fcl.unauthenticate()\n    console.log({ res })\n    toast({\n      title: 'Success Logout',\n      description: 'You have successfully logged out!',\n    })\n    router.push('/sign-in')\n  }\n\n  const handleCopyPublicAddress = () => {\n    try {", "explanation": "**Summary:**\n\nThis code block defines a reusable UI component called `UserInfoCard`. Its purpose is to display user information and provide interactive functionality, such as logging out or copying the public address. The component uses various libraries and hooks (e.g., Next.js navigation, FCL authentication) to manage its behavior and interactions with the user.", "metadata": {"repo": "magiclabs/example-nextjs-flow", "file": "components/user-info-card.tsx", "chunk_number": 1, "total_chunks": 3}, "repository_explanation": "Unfortunately, you haven't provided a repository for me to explain.\n\nIf you provide the repository URL or describe its contents, I'd be happy to give you a concise summary!", "file_summary": "Here's a concise and to-the-point summary of the file 'components/user-info-card.tsx':\n\n**Summary:** This component displays user information, including a public address copy feature, and provides interactive functionality for logging out or viewing additional details."}
{"code": "      copyToClipboard(user.addr)\n      toast({\n        title: 'Copy Public Address',\n        description: 'Copied to clipboard!',\n      })\n    } catch (err) {\n      console.error(err)\n    }\n  }\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>User Info</CardTitle>\n        {/* <CardDescription>{email}</CardDescription> */}\n      </CardHeader>\n      <CardContent className=\"flex flex-col space-y-3\">\n        <Button\n          variant=\"link\"\n          className=\"space-x-2\"\n          onClick={handleCopyPublicAddress}\n        >\n          <TypographyLarge>{user.addr}</TypographyLarge>\n          <CopyIcon className=\"h-5 w-5\" />\n        </Button>\n      </CardContent>\n      <CardFooter className=\"flex items-end justify-between\">\n        <a\n          href={getFlowdiverAccountURL(user.addr)}\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          className=\"flex flex-row items-center space-x-2 hover:underline\"\n        >\n          <ExternalLinkIcon className=\"h-4 w-4\" />", "explanation": "Here is a concise summary of the code block's purpose and functionality:\n\n**Purpose:** Copy user public address to clipboard and display success message.\n\n**Functionality:** A button is clicked, triggering an action that copies the user's public address to the clipboard, displays a toast notification saying \"Copied to clipboard!\", and logs any errors.", "metadata": {"repo": "magiclabs/example-nextjs-flow", "file": "components/user-info-card.tsx", "chunk_number": 2, "total_chunks": 3}, "repository_explanation": "Unfortunately, you haven't provided a repository for me to explain.\n\nIf you provide the repository URL or describe its contents, I'd be happy to give you a concise summary!", "file_summary": "Here's a concise and to-the-point summary of the file 'components/user-info-card.tsx':\n\n**Summary:** This component displays user information, including a public address copy feature, and provides interactive functionality for logging out or viewing additional details."}
{"code": "          <TypographySmall>See details in the Flowdiver!</TypographySmall>\n        </a>\n        <Button onClick={handleLogout}>Logout</Button>\n      </CardFooter>\n    </Card>\n  )\n}\n", "explanation": "**Summary:**\n\nThis block is a card footer containing:\n\n1. A text link inviting user to \"See details in the Flowdiver!\"\n2. A logout button with an associated `handleLogout` function.", "metadata": {"repo": "magiclabs/example-nextjs-flow", "file": "components/user-info-card.tsx", "chunk_number": 3, "total_chunks": 3}, "repository_explanation": "Unfortunately, you haven't provided a repository for me to explain.\n\nIf you provide the repository URL or describe its contents, I'd be happy to give you a concise summary!", "file_summary": "Here's a concise and to-the-point summary of the file 'components/user-info-card.tsx':\n\n**Summary:** This component displays user information, including a public address copy feature, and provides interactive functionality for logging out or viewing additional details."}
{"code": "'use client'\n\nimport { zodResolver } from '@hookform/resolvers/zod'\nimport { useForm } from 'react-hook-form'\n\nimport { Button } from '@/components/ui/button'\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from '@/components/ui/form'\nimport { Input } from '@/components/ui/input'\nimport { TypographySmall } from '@/components/ui/typography'\nimport { z } from 'zod'\n\nconst FormSchema = z.object({\n  otp: z.string().optional(),\n})\n\nexport default function VerifyEmailOTPForm() {\n  const form = useForm<z.infer<typeof FormSchema>>({\n    resolver: zodResolver(FormSchema),\n    defaultValues: {\n      otp: '',\n    },\n  })\n\n  const onSubmit = async ({ otp }: z.infer<typeof FormSchema>) => {\n    // window.addEventListener('message', )\n  }\n\n  return (\n    <Form {...form}>\n      <form className=\"space-y-6\" onClick={form.handleSubmit(onSubmit)}>\n        <FormField\n          control={form.control}\n          name=\"otp\"\n          render={({ field }) => (\n            <FormItem>", "explanation": "Here is a concise summary of the purpose and functionality of this block:\n\n**Purpose:** A form component for verifying email OTP (One-Time Password).\n\n**Functionality:** Accepts an optional OTP input, validates it using Zod schema, and submits the data when the user clicks the submit button, triggering an async `onSubmit` function.", "metadata": {"repo": "magiclabs/example-nextjs-flow", "file": "components/verify-email-otp-form.tsx", "chunk_number": 1, "total_chunks": 2}, "repository_explanation": "Unfortunately, you haven't provided a repository for me to explain.\n\nIf you provide the repository URL or describe its contents, I'd be happy to give you a concise summary!", "file_summary": "Here is a concise and holistic summary of the file 'components/verify-email-otp-form.tsx':\n\n**OTP Form Component:**\nAccepts user input, validates OTP using Zod schema, and triggers an async `onSubmit` function when submitted, providing error messaging for invalid inputs."}
{"code": "              <FormLabel>OTP</FormLabel>\n              <FormControl>\n                <Input placeholder=\"000000\" {...field} />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        {form.formState.errors.root && (\n          <div>\n            <TypographySmall className=\"text-red-500 dark:text-red-900\">\n              {form.formState.errors.root.message}\n            </TypographySmall>\n          </div>\n        )}\n\n        <Button type=\"submit\">Verify</Button>\n      </form>\n    </Form>\n  )\n}\n", "explanation": "Here is a summary of the block:\n\n**Purpose:** OTP (One-Time Password) input field with validation.\n\n**Functionality:** A text input for entering an OTP code, accompanied by error messaging if invalid. A \"Verify\" button submits the form.", "metadata": {"repo": "magiclabs/example-nextjs-flow", "file": "components/verify-email-otp-form.tsx", "chunk_number": 2, "total_chunks": 2}, "repository_explanation": "Unfortunately, you haven't provided a repository for me to explain.\n\nIf you provide the repository URL or describe its contents, I'd be happy to give you a concise summary!", "file_summary": "Here is a concise and holistic summary of the file 'components/verify-email-otp-form.tsx':\n\n**OTP Form Component:**\nAccepts user input, validates OTP using Zod schema, and triggers an async `onSubmit` function when submitted, providing error messaging for invalid inputs."}
{"code": "export const MAGIC_API_KEY = process.env.NEXT_PUBLIC_MAGIC_API_KEY\nexport const FCL_BASE_URL = process.env.NEXT_PUBLIC_FCL_BASE_URL\n", "explanation": "This block exports two constants:\n\n* `MAGIC_API_KEY`: an API key for the Magic.com service\n* `FCL_BASE_URL`: a base URL for the Filecoin (FCL) service", "metadata": {"repo": "magiclabs/example-nextjs-flow", "file": "constants/env.ts", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Unfortunately, you haven't provided a repository for me to explain.\n\nIf you provide the repository URL or describe its contents, I'd be happy to give you a concise summary!", "file_summary": "Here is a holistic summary of the file 'constants/env.ts':\n\n\"Exports two constants: `MAGIC_API_KEY` for interacting with Magic.com, and `FCL_BASE_URL` for interacting with Filecoin.\""}
{"code": "import { fcl } from '@/lib/fcl'\nimport { useQueryClient, useSuspenseQuery } from '@tanstack/react-query'\nimport { useEffect } from 'react'\n\nexport const useUser = () => {\n  const queryClient = useQueryClient()\n\n  const { data: user } = useSuspenseQuery({\n    queryKey: ['user'],\n    queryFn: async () => {\n      if (typeof window === 'undefined') {\n        return null\n      }\n      const user = await fcl.currentUser().snapshot()\n      return user\n    },\n  })\n\n  const isLoggedIn = !!user?.loggedIn\n\n  useEffect(() => {\n    fcl.currentUser().subscribe((user: any) => {\n      queryClient.setQueryData(['user'], user)\n    })\n  }, [queryClient])\n\n  return { user, isLoggedIn }\n}\n", "explanation": "Here is a concise summary:\n\nThis block (`useUser`) fetches and manages the current user data using Fetch.ai's (fcl) API and React Query. It returns the user object and a boolean indicating whether the user is logged in.", "metadata": {"repo": "magiclabs/example-nextjs-flow", "file": "hooks/use-user.tsx", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Unfortunately, you haven't provided a repository for me to explain.\n\nIf you provide the repository URL or describe its contents, I'd be happy to give you a concise summary!", "file_summary": "Here is a concise and holistic summary of the file 'hooks/use-user.tsx':\n\n\"Fetches and manages current user data via Fetch.ai's API and React Query, returning the user object and login status.\""}
{"code": "import { generateRandomNonce } from '@/utils'\nimport * as fcl from '@onflow/fcl'\nimport * as t from '@onflow/types'\n\nexport const APP_IDENTIFIER = 'Magic Wallet'\n\nconst resolver = async () => {\n  return {\n    appIdentifier: APP_IDENTIFIER,\n    nonce: generateRandomNonce(),\n  }\n}\n\nfcl.config({\n  'flow.network': 'testnet',\n  'accessNode.api': 'https://rest-testnet.onflow.org',\n  'discovery.wallet': 'https://fcl-discovery.onflow.org/testnet/authn',\n  'discovery.wallet.method': 'IFRAME/RPC',\n  'fcl.accountProof.resolver': resolver,\n  '0xFLOW': '0x7e60df042a9c0868',\n  '0xFT': '0x9a0766d93b6608b7',\n})\n\nconst getFlowdiverAccountURL = (address: string) => {\n  const network = fcl.config().get('flow.network')\n  return network === 'mainnet'\n    ? `https://flowdiver.io/account/${address}`\n    : `https://testnet.flowdiver.io/account/${address}`\n}\n\nconst getFlowdiverTxURL = (txId: string) => {\n  const network = fcl.config().get('flow.network')\n  return network === 'mainnet'\n    ? `https://flowdiver.io/tx/${txId}`", "explanation": "Here is a concise summary of the purpose and functionality of this block:\n\n**Purpose:** Initialize Flow Chain Link (FCL) configuration for Magic Wallet application.\n\n**Functionality:**\n\n* Generates random nonce for authentication.\n* Configures FCL settings, including network, access node, and account proof resolver.\n* Provides functions to get FlowDiver account URL and transaction URL based on network.", "metadata": {"repo": "magiclabs/example-nextjs-flow", "file": "lib/fcl.ts", "chunk_number": 1, "total_chunks": 2}, "repository_explanation": "Unfortunately, you haven't provided a repository for me to explain.\n\nIf you provide the repository URL or describe its contents, I'd be happy to give you a concise summary!", "file_summary": "Here is a concise summary of the file 'lib/fcl.ts':\n\n**Initializes FCL configuration for Magic Wallet, generating a random nonce and configuring network settings, with functions to generate URLs for FlowDiver transactions.**"}
{"code": "    : `https://testnet.flowdiver.io/tx/${txId}`\n}\n\nexport { fcl, getFlowdiverAccountURL, getFlowdiverTxURL, t }\n", "explanation": "This block exports a function `getFlowdiverTxURL` which generates a URL for displaying a Flow transaction on the testnet of FlowDiver.io.", "metadata": {"repo": "magiclabs/example-nextjs-flow", "file": "lib/fcl.ts", "chunk_number": 2, "total_chunks": 2}, "repository_explanation": "Unfortunately, you haven't provided a repository for me to explain.\n\nIf you provide the repository URL or describe its contents, I'd be happy to give you a concise summary!", "file_summary": "Here is a concise summary of the file 'lib/fcl.ts':\n\n**Initializes FCL configuration for Magic Wallet, generating a random nonce and configuring network settings, with functions to generate URLs for FlowDiver transactions.**"}
{"code": "import { clsx, type ClassValue } from 'clsx'\nimport { twMerge } from 'tailwind-merge'\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n", "explanation": "**Purpose:** Combines multiple CSS classes into a single class string.\n\n**Functionality:** A utility function that merges Tailwind CSS classes with other CSS classes, returning a combined class string using `twMerge` from `tailwind-merge`.", "metadata": {"repo": "magiclabs/example-nextjs-flow", "file": "lib/utils.ts", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Unfortunately, you haven't provided a repository for me to explain.\n\nIf you provide the repository URL or describe its contents, I'd be happy to give you a concise summary!", "file_summary": "Here is a concise and holistic summary of the file 'lib/utils.ts':\n\n```typescript\n// lib/utils.ts: A utility file that combines Tailwind CSS classes with custom classes.\n```\n\nLet me know if you'd like me to add anything!"}
{"code": "declare module \"@onflow/fcl\";\n", "explanation": "**Summary:**\n\nThis line declares a module named `@onflow/fcl`, making its contents available for use in the current scope.", "metadata": {"repo": "magiclabs/example-nextjs-flow", "file": "modules.d.ts", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Unfortunately, you haven't provided a repository for me to explain.\n\nIf you provide the repository URL or describe its contents, I'd be happy to give you a concise summary!", "file_summary": "Here is a concise and to the point holistic summary of the file 'modules.d.ts':\n\n\"Declares the `@onflow/fcl` module, making its contents available for use.\""}
{"code": "/** @type {import('next').NextConfig} */\nconst nextConfig = {}\n\nmodule.exports = nextConfig\n", "explanation": "This is a configuration file for Next.js, exporting an empty object as the application's settings.", "metadata": {"repo": "magiclabs/example-nextjs-flow", "file": "next.config.js", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Unfortunately, you haven't provided a repository for me to explain.\n\nIf you provide the repository URL or describe its contents, I'd be happy to give you a concise summary!", "file_summary": "Here is a concise and to-the-point summary:\n\n`next.config.js`: An empty configuration object for Next.js applications."}
{"code": "module.exports = {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n", "explanation": "**Purpose:** Configures plugins for CSS processing.\n\n**Functionality:** Enables Tailwind CSS and Autoprefixer functionality in a Node.js module.", "metadata": {"repo": "magiclabs/example-nextjs-flow", "file": "postcss.config.js", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Unfortunately, you haven't provided a repository for me to explain.\n\nIf you provide the repository URL or describe its contents, I'd be happy to give you a concise summary!", "file_summary": "Here is a concise and to the point summary:\n\n**Summary:**\nThe `postcss.config.js` file configures PostCSS plugins, enabling Tailwind CSS and Autoprefixer for CSS processing in Node.js projects."}
{"code": "<svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 394 80\"><path fill=\"#000\" d=\"M262 0h68.5v12.7h-27.2v66.6h-13.6V12.7H262V0ZM149 0v12.7H94v20.4h44.3v12.6H94v21h55v12.6H80.5V0h68.7zm34.3 0h-17.8l63.8 79.4h17.9l-32-39.7 32-39.6h-17.9l-23 28.6-23-28.6zm18.3 56.7-9-11-27.1 33.7h17.8l18.3-22.7z\"/><path fill=\"#000\" d=\"M81 79.3 17 0H0v79.3h13.6V17l50.2 62.3H81Zm252.6-.4c-1 0-1.8-.4-2.5-1s-1.1-1.6-1.1-2.6.3-1.8 1-2.5 1.6-1 2.6-1 1.8.3 2.5 1a3.4 3.4 0 0 1 .6 4.3 3.7 3.7 0 0 1-3 1.8zm23.2-33.5h6v23.3c0 2.1-.4 4-1.3 5.5a9.1 9.1 0 0 1-3.8 3.5c-1.6.8-3.5 1.3-5.7 1.3-2 0-3.7-.4-5.3-1s-2.8-1.8-3.7-3.2c-.9-1.3-1.4-3-1.4-5h6c.1.8.3 1.6.7 2.2s1 1.2 1.6 1.5c.7.4 1.5.5 2.4.5 1 0 1.8-.2 2.4-.6a4 4 0 0 0 1.6-1.8c.3-.8.5-1.8.5-3V45.5zm30.9 9.1a4.4 4.4 0 0 0-2-3.3 7.5 7.5 0 0 0-4.3-1.1c-1.3 0-2.4.2-3.3.5-.9.4-1.6 1-2 1.6a3.5 3.5 0 0 0-.3 4c.3.5.7.9 1.3 1.2l1.8 1 2 .5 3.2.8c1.3.3 2.5.7 3.7 1.2a13 13 0 0 1 3.2 1.8 8.1 8.1 0 0 1 3 6.5c0 2-.5 3.7-1.5 5.1a10 10 0 0 1-4.4 3.5c-1.8.8-4.1 1.2-6.8 1.2-2.6 0-4.9-.4-6.8-1.2-2-.8-3.4-2-4.5-3.5a10 10 0 0 1-1.7-5.6h6a5 5 0 0 0 3.5 4.6c1 .4 2.2.6 3.4.6 1.3 0 2.5-.2 3.5-.6 1-.4 1.8-1 2.4-1.7a4 4 0 0 0 .8-2.4c0-.9-.2-1.6-.7-2.2a11 11 0 0 0-2.1-1.4l-3.2-1-3.8-1c-2.8-.7-5-1.7-6.6-3.2a7.2 7.2 0 0 1-2.4-5.7 8 8 0 0 1 1.7-5 10 10 0 0 1 4.3-3.5c2-.8 4-1.2 6.4-1.2 2.3 0 4.4.4 6.2 1.2 1.8.8 3.2 2 4.3 3.4 1 1.4 1.5 3 1.5 5h-5.8z\"/></svg>", "explanation": "This block appears to be an SVG (Scalable Vector Graphics) image, likely a logo or icon. It contains two paths with filled shapes and lines, which suggests it is designed for visual representation rather than functional code.", "metadata": {"repo": "magiclabs/example-nextjs-flow", "file": "public/next.svg", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Unfortunately, you haven't provided a repository for me to explain.\n\nIf you provide the repository URL or describe its contents, I'd be happy to give you a concise summary!", "file_summary": "Here's a holistic summary of the file 'public/next.svg':\n\nThe `public/next.svg` file is an SVG image containing two paths with filled shapes and lines, likely used as a logo or icon for visual representation purposes."}
{"code": "<svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 283 64\"><path fill=\"black\" d=\"M141 16c-11 0-19 7-19 18s9 18 20 18c7 0 13-3 16-7l-7-5c-2 3-6 4-9 4-5 0-9-3-10-7h28v-3c0-11-8-18-19-18zm-9 15c1-4 4-7 9-7s8 3 9 7h-18zm117-15c-11 0-19 7-19 18s9 18 20 18c6 0 12-3 16-7l-8-5c-2 3-5 4-8 4-5 0-9-3-11-7h28l1-3c0-11-8-18-19-18zm-10 15c2-4 5-7 10-7s8 3 9 7h-19zm-39 3c0 6 4 10 10 10 4 0 7-2 9-5l8 5c-3 5-9 8-17 8-11 0-19-7-19-18s8-18 19-18c8 0 14 3 17 8l-8 5c-2-3-5-5-9-5-6 0-10 4-10 10zm83-29v46h-9V5h9zM37 0l37 64H0L37 0zm92 5-27 48L74 5h10l18 30 17-30h10zm59 12v10l-3-1c-6 0-10 4-10 10v15h-9V17h9v9c0-5 6-9 13-9z\"/></svg>", "explanation": "This block appears to be an SVG image, likely used as a graphical icon. Its purpose is decorative or illustrative, adding visual interest without providing functional functionality.", "metadata": {"repo": "magiclabs/example-nextjs-flow", "file": "public/vercel.svg", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Unfortunately, you haven't provided a repository for me to explain.\n\nIf you provide the repository URL or describe its contents, I'd be happy to give you a concise summary!", "file_summary": "Here is a holistic summary of the file 'public/vercel.svg':\n\n\"This decorative SVG icon adds visual interest without functional functionality.\""}
{"code": "import type { Config } from \"tailwindcss\"\n\nconst config = {\n  darkMode: [\"class\"],\n  content: [\n    './pages/**/*.{ts,tsx}',\n    './components/**/*.{ts,tsx}',\n    './app/**/*.{ts,tsx}',\n    './src/**/*.{ts,tsx}',\n\t],\n  prefix: \"\",\n  theme: {\n    container: {\n      center: true,\n      padding: \"2rem\",\n      screens: {\n        \"2xl\": \"1400px\",\n      },\n    },\n    extend: {\n      colors: {\n        border: \"hsl(var(--border))\",\n        input: \"hsl(var(--input))\",\n        ring: \"hsl(var(--ring))\",\n        background: \"hsl(var(--background))\",\n        foreground: \"hsl(var(--foreground))\",\n        primary: {\n          DEFAULT: \"hsl(var(--primary))\",\n          foreground: \"hsl(var(--primary-foreground))\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary))\",\n          foreground: \"hsl(var(--secondary-foreground))\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive))\",\n          foreground: \"hsl(var(--destructive-foreground))\",\n        },\n        muted: {", "explanation": "**Summary:**\n\nThis block is a Tailwind CSS configuration file that defines custom color schemes and layout styles for a web application. It specifies dark mode, content sources, and theme extensions with custom colors and container styles.", "metadata": {"repo": "magiclabs/example-nextjs-flow", "file": "tailwind.config.ts", "chunk_number": 1, "total_chunks": 3}, "repository_explanation": "Unfortunately, you haven't provided a repository for me to explain.\n\nIf you provide the repository URL or describe its contents, I'd be happy to give you a concise summary!", "file_summary": "Here's a concise holistic summary of the file 'tailwind.config.ts':\n\n**Summary**\n\nThe `tailwind.config.ts` file defines custom color schemes and layout styles for a web application using Tailwind CSS. It configures dark mode, content sources, theme extensions, and plugins, such as animation effects, to style various UI components."}
{"code": "          DEFAULT: \"hsl(var(--muted))\",\n          foreground: \"hsl(var(--muted-foreground))\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent))\",\n          foreground: \"hsl(var(--accent-foreground))\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover))\",\n          foreground: \"hsl(var(--popover-foreground))\",\n        },\n        card: {\n          DEFAULT: \"hsl(var(--card))\",\n          foreground: \"hsl(var(--card-foreground))\",\n        },\n      },\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",", "explanation": "**Summary**\n\nThis block appears to be a set of CSS variables (or constants) for styling various UI components, including colors, border radius, and animations. It defines styles for default, foreground, accent, popover, card, and accordion components, as well as animation effects.", "metadata": {"repo": "magiclabs/example-nextjs-flow", "file": "tailwind.config.ts", "chunk_number": 2, "total_chunks": 3}, "repository_explanation": "Unfortunately, you haven't provided a repository for me to explain.\n\nIf you provide the repository URL or describe its contents, I'd be happy to give you a concise summary!", "file_summary": "Here's a concise holistic summary of the file 'tailwind.config.ts':\n\n**Summary**\n\nThe `tailwind.config.ts` file defines custom color schemes and layout styles for a web application using Tailwind CSS. It configures dark mode, content sources, theme extensions, and plugins, such as animation effects, to style various UI components."}
{"code": "        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\")],\n} satisfies Config\n\nexport default config", "explanation": "Here is a concise summary:\n\nThis block configures Tailwind CSS with an animate plugin, specifying a transition effect for accordion-up events.", "metadata": {"repo": "magiclabs/example-nextjs-flow", "file": "tailwind.config.ts", "chunk_number": 3, "total_chunks": 3}, "repository_explanation": "Unfortunately, you haven't provided a repository for me to explain.\n\nIf you provide the repository URL or describe its contents, I'd be happy to give you a concise summary!", "file_summary": "Here's a concise holistic summary of the file 'tailwind.config.ts':\n\n**Summary**\n\nThe `tailwind.config.ts` file defines custom color schemes and layout styles for a web application using Tailwind CSS. It configures dark mode, content sources, theme extensions, and plugins, such as animation effects, to style various UI components."}
{"code": "{\n  \"compilerOptions\": {\n    \"target\": \"es5\",\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"allowJs\": true,\n    \"skipLibCheck\": true,\n    \"strict\": true,\n    \"noEmit\": true,\n    \"esModuleInterop\": true,\n    \"module\": \"esnext\",\n    \"moduleResolution\": \"bundler\",\n    \"resolveJsonModule\": true,\n    \"isolatedModules\": true,\n    \"jsx\": \"preserve\",\n    \"incremental\": true,\n    \"plugins\": [\n      {\n        \"name\": \"next\"\n      }\n    ],\n    \"paths\": {\n      \"@/*\": [\"./*\"]\n    }\n  },\n  \"include\": [\"next-env.d.ts\", \"**/*.ts\", \"**/*.tsx\", \".next/types/**/*.ts\", \"./node_modules/@onflow/types/**/*\"],\n  \"exclude\": [\"node_modules\"]\n}\n", "explanation": "This block is a configuration object for a build process, specifically targeting Next.js projects. It sets various options for compiling TypeScript files, including:\n\n* Targeting ES5 syntax\n* Enabling JavaScript support and strict mode\n* Skipping library checks and emitting output files\n* Resolving module imports and using the \"bundler\" resolution method\n\nIt also includes/excludes specific files and directories during compilation.", "metadata": {"repo": "magiclabs/example-nextjs-flow", "file": "tsconfig.json", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Unfortunately, you haven't provided a repository for me to explain.\n\nIf you provide the repository URL or describe its contents, I'd be happy to give you a concise summary!", "file_summary": "Here is a concise summary of the `tsconfig.json` file:\n\n**Configures TypeScript for Next.js Projects**\n\nSets ES5 syntax target, enables JavaScript support & strict mode, skips library checks, and compiles specified files/directories."}
{"code": "export const yup = (tag: string) => (d: any) => {\n  // eslint-disable-next-line no-console\n  console.log(`${tag}`, d)\n  return d\n}\n\nexport const nope = (tag: string) => (d: any) => {\n  // eslint-disable-next-line no-console\n  console.error(`Oh No!! [${tag}]`, d)\n  return d\n}\n\nexport const generateRandomNonce = () => {\n  const hexChars = '0123456789abcdef'\n  let nonce = ''\n\n  for (let i = 0; i < 64; i++) {\n    const randomIndex = Math.floor(Math.random() * 16)\n    nonce += hexChars[randomIndex]\n  }\n\n  return nonce\n}\n", "explanation": "Here is a concise summary:\n\nThis block exports two utility functions: `yup` (logging) and `nope` (error logging), as well as a third function, `generateRandomNonce`, which generates a random hexadecimal string (nonce).", "metadata": {"repo": "magiclabs/example-nextjs-flow", "file": "utils/index.ts", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Unfortunately, you haven't provided a repository for me to explain.\n\nIf you provide the repository URL or describe its contents, I'd be happy to give you a concise summary!", "file_summary": "Here's a concise summary of the file 'utils/index.ts':\n\nExports utility functions: `yup` (logging), `nope` (error logging), and `generateRandomNonce` (random hex nonce generation)."}

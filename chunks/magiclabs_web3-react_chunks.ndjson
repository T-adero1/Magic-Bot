{"code": "node_modules\ndist\n*.js\n*.spec.ts\n", "explanation": "This block appears to be a file pattern specification for a build process.\n\n**Purpose:** Specify files to include in a build output.\n\n**Functionality:** Include all JavaScript files (.js) and TypeScript test files (.spec.ts) from the current directory, excluding node_modules and dist directories.", "metadata": {"repo": "magiclabs/web3-react", "file": ".eslintignore", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here is a concise summary of the file '.eslintignore':\n\n\"Specify which files to exclude from ESLint validation.\""}
{"code": "/* eslint-env node */\n\nrequire('@uniswap/eslint-config/load')\n\nmodule.exports = {\n  extends: '@uniswap/eslint-config/react',\n  rules: {\n    'import/no-unused-modules': 'off'\n  }\n}\n", "explanation": "Here is a concise summary:\n\n**Purpose:** Configures ESLint for a Node.js project.\n\n**Functionality:** Loads Uniswap ESLint config, disables unused module rule, and extends React ESLint rules.", "metadata": {"repo": "magiclabs/web3-react", "file": ".eslintrc.js", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here's a concise summary of the '.eslintrc.js' file:\n\nConfigures ESLint for a Node.js project by loading Uniswap ESLint settings, disabling unused module warnings, and extending React ESLint rules."}
{"code": "name: CI\n\non:\n  pull_request:\n    branches:\n      - main\n  push:\n    branches:\n      - main\n\njobs:\n  test:\n    runs-on: ${{ matrix.os }}\n\n    strategy:\n      matrix:\n        os:\n          - ubuntu-latest\n          - macOS-latest\n        node_version:\n          - 16\n          - 18\n\n    steps:\n      - uses: actions/checkout@v2\n      - uses: actions/setup-node@v2\n        with:\n          node-version: ${{ matrix.node_version }}\n          cache: 'yarn'\n\n      # ensure the lockfile is in sync with the specified dependencies\n      - run: yarn install --frozen-lockfile\n\n      - run: yarn build\n\n      - run: yarn lint\n      - run: yarn test\n\n      - run: yarn lerna exec 'yarn next build' --scope=example\n", "explanation": "Here is a summary of the block:\n\n**Purpose:** Continuous Integration (CI) for GitHub repository.\n\n**Functionality:** Automatically runs tests on pull requests and pushes to main branch, checking code quality and execution on Ubuntu, macOS, Node.js 16, and Node.js 18 environments.", "metadata": {"repo": "magiclabs/web3-react", "file": ".github/workflows/CI.yml", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here is a concise and holistic summary of the file '.github/workflows/CI.yml':\n\n**Summary:** This workflow automates testing and code quality checks for GitHub repository pull requests and main branch pushes, running on multiple environments (Ubuntu, macOS, Node.js 16, Node.js 18)."}
{"code": "name: Snyk Code Security\n\non:\n  pull_request:\n    branches:\n      - '**'\n  push:\n    branches:\n      - main\n    paths-ignore:\n      - '**/*.md'\n\njobs:\n  open-source:\n    name: '\ud83d\udd12 Open Source Scan'\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Run Snyk test to check for known vulnerabilities in software supply chain\n        uses: snyk/actions/node@0e928f3e9ae859e2b95ac2b89af55d7b6434244d\n        env:\n          SNYK_TOKEN: ${{ secrets.SNYK_API_TOKEN }}\n        with:\n          command: test\n          # include devDependencies to deps list for Snyk dep-graph\n          args: --dev --severity-threshold=medium \n\n      - name: Run Snyk monitor to upload the latest snapshot \n        uses: snyk/actions/node@0e928f3e9ae859e2b95ac2b89af55d7b6434244d\n        env:\n          SNYK_TOKEN: ${{ secrets.SNYK_API_TOKEN }}\n        with:\n          command: monitor\n          # include devDependencies to deps list for Snyk dep-graph\n          args: --dev --severity-threshold=medium ", "explanation": "Here is a concise summary:\n\n**Purpose:** Run Snyk Code Security scans on pull requests and pushes to the main branch.\n\n**Functionality:** \n\n* Scans for known vulnerabilities in the software supply chain.\n* Runs two steps:\n\t1. Snyk test: checks for vulnerabilities with a severity threshold of medium or higher.\n\t2. Snyk monitor: uploads the latest snapshot to track dependencies.", "metadata": {"repo": "magiclabs/web3-react", "file": ".github/workflows/snyk_sca_scan.yml", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here is a holistic summary:\n\n**Purpose:** Run Snyk Code Security scans on '.github/workflows/snyk_sca_scan.yml' to identify vulnerabilities in software supply chain, triggered by pull requests and pushes to main branch.\n\n**Key Functionality:**\n\n* Scans for medium-severity+ vulnerabilities\n* Executes two Snyk steps: testing & monitoring."}
{"code": "# Snyk (https://snyk.io) policy file, patches or ignores known vulnerabilities.\nversion: v1.25.0\n# ignores vulnerabilities until expiry date; change duration by modifying expiry date\nignore:\n  SNYK-JS-SEMVER-3247795:\n    - '*':\n        reason: >-\n          lerna is fine with this version and vulnerability path is not\n          reachable\n        expires: 2023-08-06T16:52:38.439Z\n        created: 2023-07-07T16:52:38.448Z\n  SNYK-JS-NWSAPI-2841516:\n    - '*':\n        reason: >-\n          no direct update or patch available suggested for jest / most probably\n          vuln is not reachable\n        expires: 2023-08-06T16:54:16.219Z\n        created: 2023-07-07T16:54:16.233Z\n  SNYK-JS-TOUGHCOOKIE-5672873:\n    - '*':\n        reason: no patch or suggestion is available by jest\n        expires: 2023-08-06T16:55:11.239Z\n        created: 2023-07-07T16:55:11.253Z\n  SNYK-JS-WORDWRAP-3149973:\n    - '*':\n        reason: >-\n          ReDoS is valid when there is a path between the source (user", "explanation": "**Purpose:** This file (likely YAML or JSON) manages known vulnerabilities in dependencies.\n\n**Functionality:** It ignores specific vulnerabilities until an expiry date, allowing developers to temporarily suppress alerts for identified issues.", "metadata": {"repo": "magiclabs/web3-react", "file": ".snyk", "chunk_number": 1, "total_chunks": 2}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here is a concise summary of the file '.snyk':\n\n**Summary:** The '.snyk' file configures Snyk security scanning, excluding certain directories (packages/, examples/) from scans and specifying licenses for specific packages (rlp, ethereumjs-util)."}
{"code": "          uncontrolled input) to a sink that is a regex parser but in this case\n          is not applicable\n        expires: 2023-08-06T16:56:21.700Z\n        created: 2023-07-07T16:56:21.716Z\n  'snyk:lic:npm:rlp:MPL-2.0':\n    - '*':\n        reason: >-\n          introduced through Coinbase Wallet and should be discussed with them -\n          MPL 2.0\n        expires: 2023-08-06T16:57:10.898Z\n        created: 2023-07-07T16:57:10.915Z\n  'snyk:lic:npm:ethereumjs-util:MPL-2.0':\n    - '*':\n        reason: >-\n          introduced through Coinbase Wallet and should be discussed with them -\n          MPL 2.0\n        expires: 2023-08-06T16:57:55.493Z\n        created: 2023-07-07T16:57:55.512Z\npatch: {}\nexclude:\n  global:\n    - packages/**\n    - examples/**\n", "explanation": "This appears to be a configuration file for Snyk, a security platform. The purpose of this block is to exclude certain directories from security scanning.\n\nKey functionality:\n\n* Excludes `packages/` and `examples/` folders globally\n* Specifies licenses (MPL-2.0) for specific packages (`rlp`, `ethereumjs-util`)", "metadata": {"repo": "magiclabs/web3-react", "file": ".snyk", "chunk_number": 2, "total_chunks": 2}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here is a concise summary of the file '.snyk':\n\n**Summary:** The '.snyk' file configures Snyk security scanning, excluding certain directories (packages/, examples/) from scans and specifying licenses for specific packages (rlp, ethereumjs-util)."}
{"code": "# web3-react (beta)\n\n[![CI](https://github.com/Uniswap/web3-react/actions/workflows/CI.yml/badge.svg)](https://github.com/Uniswap/web3-react/actions/workflows/CI.yml)\n\n_Looking for the prior version of this library? It's available on the [v6 branch](https://github.com/Uniswap/web3-react/tree/v6)._\n\n## [Example](https://web3-react-mu.vercel.app/)\n\nThis is a hosted version of [example](/example).\n\n## Packages\n\n| Package                                                                                                                                       | Version                                                                                                                                         | Size                                                                                                                                                                | Link                                                                      |", "explanation": "Here is a concise summary:\n\n**Purpose:** A React library for building web3 applications (beta version).\n \n**Functionality:** Provides functionality for interacting with blockchain networks, likely including authentication, wallet management, and smart contract interactions.", "metadata": {"repo": "magiclabs/web3-react", "file": "README.md", "chunk_number": 1, "total_chunks": 22}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here is a holistic summary of the file 'README.md':\n\n**Web3 React Library**\n\nThis library provides functionality for building web3 applications using React. It enables interactions with blockchain networks, wallet management, and smart contract interactions.\n\nThe library includes various connectors for different wallets and services, such as MetaMask, Coinbase Wallet, Trust Wallet, and more. Each connector has its own purpose and functionality, which are described in the corresponding package information displays.\n\n**Key Features**\n\n* Provides network functionality for Web3 React applications\n* Enables integration of blockchain functionality into React apps using various wallets and services\n* Allows explicit installation of client packages for transparent switching between compatible versions\n* Encourages users to write their own connectors by providing inspiration from existing ones\n\n**Status**\n\nThe library is currently in beta version.\n\nNote: This summary focuses on the main purpose and features of the Web3 React Library, while also highlighting its status as a beta version."}
{"code": "| --------------------------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------- |", "explanation": "There is no content provided in the \"block\" you described. The only thing present are pipes (\"|\") which don't convey any information or functionality. If this were a code snippet, it would be empty.", "metadata": {"repo": "magiclabs/web3-react", "file": "README.md", "chunk_number": 2, "total_chunks": 22}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here is a holistic summary of the file 'README.md':\n\n**Web3 React Library**\n\nThis library provides functionality for building web3 applications using React. It enables interactions with blockchain networks, wallet management, and smart contract interactions.\n\nThe library includes various connectors for different wallets and services, such as MetaMask, Coinbase Wallet, Trust Wallet, and more. Each connector has its own purpose and functionality, which are described in the corresponding package information displays.\n\n**Key Features**\n\n* Provides network functionality for Web3 React applications\n* Enables integration of blockchain functionality into React apps using various wallets and services\n* Allows explicit installation of client packages for transparent switching between compatible versions\n* Encourages users to write their own connectors by providing inspiration from existing ones\n\n**Status**\n\nThe library is currently in beta version.\n\nNote: This summary focuses on the main purpose and features of the Web3 React Library, while also highlighting its status as a beta version."}
{"code": "| [`@web3-react/types`](packages/types)                                                                                                         | [![npm](https://img.shields.io/npm/v/@web3-react/types/beta.svg)](https://www.npmjs.com/package/@web3-react/types/v/beta)                       | [![minzip](https://img.shields.io/bundlephobia/minzip/@web3-react/types/beta.svg)](https://bundlephobia.com/result?p=@web3-react/types@beta)                        |                                                                           |", "explanation": "This block appears to be a badge or metadata display for an npm package, specifically:\n\n* `@web3-react/types` is the package name\n* It displays its current version (using the Shields.io service)\n* Additionally, it shows the minified zip size of the package on Bundlephobia.", "metadata": {"repo": "magiclabs/web3-react", "file": "README.md", "chunk_number": 3, "total_chunks": 22}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here is a holistic summary of the file 'README.md':\n\n**Web3 React Library**\n\nThis library provides functionality for building web3 applications using React. It enables interactions with blockchain networks, wallet management, and smart contract interactions.\n\nThe library includes various connectors for different wallets and services, such as MetaMask, Coinbase Wallet, Trust Wallet, and more. Each connector has its own purpose and functionality, which are described in the corresponding package information displays.\n\n**Key Features**\n\n* Provides network functionality for Web3 React applications\n* Enables integration of blockchain functionality into React apps using various wallets and services\n* Allows explicit installation of client packages for transparent switching between compatible versions\n* Encourages users to write their own connectors by providing inspiration from existing ones\n\n**Status**\n\nThe library is currently in beta version.\n\nNote: This summary focuses on the main purpose and features of the Web3 React Library, while also highlighting its status as a beta version."}
{"code": "| [`@web3-react/store`](packages/store)                                                                                                         | [![npm](https://img.shields.io/npm/v/@web3-react/store/beta.svg)](https://www.npmjs.com/package/@web3-react/store/v/beta)                       | [![minzip](https://img.shields.io/bundlephobia/minzip/@web3-react/store/beta.svg)](https://bundlephobia.com/result?p=@web3-react/store@beta)                        |                                                                           |", "explanation": "**Summary:**\n\nThis block is a package (likely code) for managing Web3 state using React, specifically for storing and managing application data in a decentralized environment.", "metadata": {"repo": "magiclabs/web3-react", "file": "README.md", "chunk_number": 4, "total_chunks": 22}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here is a holistic summary of the file 'README.md':\n\n**Web3 React Library**\n\nThis library provides functionality for building web3 applications using React. It enables interactions with blockchain networks, wallet management, and smart contract interactions.\n\nThe library includes various connectors for different wallets and services, such as MetaMask, Coinbase Wallet, Trust Wallet, and more. Each connector has its own purpose and functionality, which are described in the corresponding package information displays.\n\n**Key Features**\n\n* Provides network functionality for Web3 React applications\n* Enables integration of blockchain functionality into React apps using various wallets and services\n* Allows explicit installation of client packages for transparent switching between compatible versions\n* Encourages users to write their own connectors by providing inspiration from existing ones\n\n**Status**\n\nThe library is currently in beta version.\n\nNote: This summary focuses on the main purpose and features of the Web3 React Library, while also highlighting its status as a beta version."}
{"code": "| [`@web3-react/core`](packages/core)                                                                                                           | [![npm](https://img.shields.io/npm/v/@web3-react/core/beta.svg)](https://www.npmjs.com/package/@web3-react/core/v/beta)                         | [![minzip](https://img.shields.io/bundlephobia/minzip/@web3-react/core/beta.svg)](https://bundlephobia.com/result?p=@web3-react/core@beta)                          |                                                                           |", "explanation": "This block appears to be a package metadata summary, likely from npm (Node Package Manager). It displays information about the `@web3-react/core` package, including:\n\n* A link to its documentation (`packages/core`)\n* Its version on npm (`beta`) with a clickable badge showing the latest version\n* Its minified size on bundlephobia\n\nThe purpose of this block is to provide quick access to key metadata and links related to the `@web3-react/core` package.", "metadata": {"repo": "magiclabs/web3-react", "file": "README.md", "chunk_number": 5, "total_chunks": 22}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here is a holistic summary of the file 'README.md':\n\n**Web3 React Library**\n\nThis library provides functionality for building web3 applications using React. It enables interactions with blockchain networks, wallet management, and smart contract interactions.\n\nThe library includes various connectors for different wallets and services, such as MetaMask, Coinbase Wallet, Trust Wallet, and more. Each connector has its own purpose and functionality, which are described in the corresponding package information displays.\n\n**Key Features**\n\n* Provides network functionality for Web3 React applications\n* Enables integration of blockchain functionality into React apps using various wallets and services\n* Allows explicit installation of client packages for transparent switching between compatible versions\n* Encourages users to write their own connectors by providing inspiration from existing ones\n\n**Status**\n\nThe library is currently in beta version.\n\nNote: This summary focuses on the main purpose and features of the Web3 React Library, while also highlighting its status as a beta version."}
{"code": "| **Connectors**                                                                                                                                |                                                                                                                                                 |                                                                                                                                                                     |                                                                           |", "explanation": "This block appears to be a table or list with the title \"**Connectors**\". I'm unable to provide a more detailed summary as there is no content within the block.", "metadata": {"repo": "magiclabs/web3-react", "file": "README.md", "chunk_number": 6, "total_chunks": 22}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here is a holistic summary of the file 'README.md':\n\n**Web3 React Library**\n\nThis library provides functionality for building web3 applications using React. It enables interactions with blockchain networks, wallet management, and smart contract interactions.\n\nThe library includes various connectors for different wallets and services, such as MetaMask, Coinbase Wallet, Trust Wallet, and more. Each connector has its own purpose and functionality, which are described in the corresponding package information displays.\n\n**Key Features**\n\n* Provides network functionality for Web3 React applications\n* Enables integration of blockchain functionality into React apps using various wallets and services\n* Allows explicit installation of client packages for transparent switching between compatible versions\n* Encourages users to write their own connectors by providing inspiration from existing ones\n\n**Status**\n\nThe library is currently in beta version.\n\nNote: This summary focuses on the main purpose and features of the Web3 React Library, while also highlighting its status as a beta version."}
{"code": "| [`@web3-react/eip1193`](packages/eip1193)                                                                                                     | [![npm](https://img.shields.io/npm/v/@web3-react/eip1193/beta.svg)](https://www.npmjs.com/package/@web3-react/eip1193/v/beta)                   | [![minzip](https://img.shields.io/bundlephobia/minzip/@web3-react/eip1193/beta.svg)](https://bundlephobia.com/result?p=@web3-react/eip1193@beta)                    | [EIP-1193](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1193.md) |", "explanation": "This block appears to be a package metadata display, likely from npm (Node Package Manager). The purpose is to show the details of a package named `@web3-react/eip1193`. \n\nThe key information is:\n\n* Name: `@web3-react/eip1193`\n* Version: shown as beta via badges\n* Minified size: linked via badge", "metadata": {"repo": "magiclabs/web3-react", "file": "README.md", "chunk_number": 7, "total_chunks": 22}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here is a holistic summary of the file 'README.md':\n\n**Web3 React Library**\n\nThis library provides functionality for building web3 applications using React. It enables interactions with blockchain networks, wallet management, and smart contract interactions.\n\nThe library includes various connectors for different wallets and services, such as MetaMask, Coinbase Wallet, Trust Wallet, and more. Each connector has its own purpose and functionality, which are described in the corresponding package information displays.\n\n**Key Features**\n\n* Provides network functionality for Web3 React applications\n* Enables integration of blockchain functionality into React apps using various wallets and services\n* Allows explicit installation of client packages for transparent switching between compatible versions\n* Encourages users to write their own connectors by providing inspiration from existing ones\n\n**Status**\n\nThe library is currently in beta version.\n\nNote: This summary focuses on the main purpose and features of the Web3 React Library, while also highlighting its status as a beta version."}
{"code": "| [`@web3-react/empty`](packages/empty)                                                                                                         | [![npm](https://img.shields.io/npm/v/@web3-react/empty/beta.svg)](https://www.npmjs.com/package/@web3-react/empty/v/beta)                       | [![minzip](https://img.shields.io/bundlephobia/minzip/@web3-react/empty/beta.svg)](https://bundlephobia.com/result?p=@web3-react/empty@beta)                        |                                                                           |", "explanation": "**Package:** `@web3-react/empty`\n**Purpose:** An empty package (likely a placeholder or stub) for the Web3 React library.\n**Functionality:** No functionality is specified, implying it may be used as a base for other packages or development purposes.", "metadata": {"repo": "magiclabs/web3-react", "file": "README.md", "chunk_number": 8, "total_chunks": 22}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here is a holistic summary of the file 'README.md':\n\n**Web3 React Library**\n\nThis library provides functionality for building web3 applications using React. It enables interactions with blockchain networks, wallet management, and smart contract interactions.\n\nThe library includes various connectors for different wallets and services, such as MetaMask, Coinbase Wallet, Trust Wallet, and more. Each connector has its own purpose and functionality, which are described in the corresponding package information displays.\n\n**Key Features**\n\n* Provides network functionality for Web3 React applications\n* Enables integration of blockchain functionality into React apps using various wallets and services\n* Allows explicit installation of client packages for transparent switching between compatible versions\n* Encourages users to write their own connectors by providing inspiration from existing ones\n\n**Status**\n\nThe library is currently in beta version.\n\nNote: This summary focuses on the main purpose and features of the Web3 React Library, while also highlighting its status as a beta version."}
{"code": "| [`@web3-react/gnosis-safe`](packages/gnosis-safe)                                                                                             | [![npm](https://img.shields.io/npm/v/@web3-react/gnosis-safe/beta.svg)](https://www.npmjs.com/package/@web3-react/gnosis-safe/v/beta)           | [![minzip](https://img.shields.io/bundlephobia/minzip/@web3-react/gnosis-safe/beta.svg)](https://bundlephobia.com/result?p=@web3-react/gnosis-safe@beta)            | [Gnosis Safe](https://gnosis-safe.io/)                                    |", "explanation": "Here is a concise summary:\n\n**Block Summary:** A package for interacting with Gnosis Safe, a decentralized application for managing cryptocurrency assets.", "metadata": {"repo": "magiclabs/web3-react", "file": "README.md", "chunk_number": 9, "total_chunks": 22}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here is a holistic summary of the file 'README.md':\n\n**Web3 React Library**\n\nThis library provides functionality for building web3 applications using React. It enables interactions with blockchain networks, wallet management, and smart contract interactions.\n\nThe library includes various connectors for different wallets and services, such as MetaMask, Coinbase Wallet, Trust Wallet, and more. Each connector has its own purpose and functionality, which are described in the corresponding package information displays.\n\n**Key Features**\n\n* Provides network functionality for Web3 React applications\n* Enables integration of blockchain functionality into React apps using various wallets and services\n* Allows explicit installation of client packages for transparent switching between compatible versions\n* Encourages users to write their own connectors by providing inspiration from existing ones\n\n**Status**\n\nThe library is currently in beta version.\n\nNote: This summary focuses on the main purpose and features of the Web3 React Library, while also highlighting its status as a beta version."}
{"code": "| [`@web3-react/metamask`](packages/metamask)                                                                                                   | [![npm](https://img.shields.io/npm/v/@web3-react/metamask/beta.svg)](https://www.npmjs.com/package/@web3-react/metamask/v/beta)                 | [![minzip](https://img.shields.io/bundlephobia/minzip/@web3-react/metamask/beta.svg)](https://bundlephobia.com/result?p=@web3-react/metamask@beta)                  | [MetaMask](https://metamask.io/)                                          |", "explanation": "This block appears to be a package information card, likely from npm (Node Package Manager). The purpose is to display details about the `@web3-react/metamask` package, including:\n\n* Link to the package on npm\n* Version badge\n* Bundle size badge\n* External link to MetaMask website", "metadata": {"repo": "magiclabs/web3-react", "file": "README.md", "chunk_number": 10, "total_chunks": 22}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here is a holistic summary of the file 'README.md':\n\n**Web3 React Library**\n\nThis library provides functionality for building web3 applications using React. It enables interactions with blockchain networks, wallet management, and smart contract interactions.\n\nThe library includes various connectors for different wallets and services, such as MetaMask, Coinbase Wallet, Trust Wallet, and more. Each connector has its own purpose and functionality, which are described in the corresponding package information displays.\n\n**Key Features**\n\n* Provides network functionality for Web3 React applications\n* Enables integration of blockchain functionality into React apps using various wallets and services\n* Allows explicit installation of client packages for transparent switching between compatible versions\n* Encourages users to write their own connectors by providing inspiration from existing ones\n\n**Status**\n\nThe library is currently in beta version.\n\nNote: This summary focuses on the main purpose and features of the Web3 React Library, while also highlighting its status as a beta version."}
{"code": "| [`@web3-react/network`](packages/network)                                                                                                     | [![npm](https://img.shields.io/npm/v/@web3-react/network/beta.svg)](https://www.npmjs.com/package/@web3-react/network/v/beta)                   | [![minzip](https://img.shields.io/bundlephobia/minzip/@web3-react/network/beta.svg)](https://bundlephobia.com/result?p=@web3-react/network@beta)                    |                                                                           |", "explanation": "Here is a concise summary:\n\n**Package:** `@web3-react/network`\n**Purpose:** Provides network functionality for Web3 React applications\n**Functionality:** Unknown (may be code or text, but no specific information provided)", "metadata": {"repo": "magiclabs/web3-react", "file": "README.md", "chunk_number": 11, "total_chunks": 22}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here is a holistic summary of the file 'README.md':\n\n**Web3 React Library**\n\nThis library provides functionality for building web3 applications using React. It enables interactions with blockchain networks, wallet management, and smart contract interactions.\n\nThe library includes various connectors for different wallets and services, such as MetaMask, Coinbase Wallet, Trust Wallet, and more. Each connector has its own purpose and functionality, which are described in the corresponding package information displays.\n\n**Key Features**\n\n* Provides network functionality for Web3 React applications\n* Enables integration of blockchain functionality into React apps using various wallets and services\n* Allows explicit installation of client packages for transparent switching between compatible versions\n* Encourages users to write their own connectors by providing inspiration from existing ones\n\n**Status**\n\nThe library is currently in beta version.\n\nNote: This summary focuses on the main purpose and features of the Web3 React Library, while also highlighting its status as a beta version."}
{"code": "| [`@web3-react/url`](packages/url)                                                                                                             | [![npm](https://img.shields.io/npm/v/@web3-react/url/beta.svg)](https://www.npmjs.com/package/@web3-react/url/v/beta)                           | [![minzip](https://img.shields.io/bundlephobia/minzip/@web3-react/url/beta.svg)](https://bundlephobia.com/result?p=@web3-react/url@beta)                            |                                                                           |", "explanation": "This block appears to be a package info display, likely from npm (Node Package Manager). It shows information about the `@web3-react/url` package, including its version and download size.", "metadata": {"repo": "magiclabs/web3-react", "file": "README.md", "chunk_number": 12, "total_chunks": 22}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here is a holistic summary of the file 'README.md':\n\n**Web3 React Library**\n\nThis library provides functionality for building web3 applications using React. It enables interactions with blockchain networks, wallet management, and smart contract interactions.\n\nThe library includes various connectors for different wallets and services, such as MetaMask, Coinbase Wallet, Trust Wallet, and more. Each connector has its own purpose and functionality, which are described in the corresponding package information displays.\n\n**Key Features**\n\n* Provides network functionality for Web3 React applications\n* Enables integration of blockchain functionality into React apps using various wallets and services\n* Allows explicit installation of client packages for transparent switching between compatible versions\n* Encourages users to write their own connectors by providing inspiration from existing ones\n\n**Status**\n\nThe library is currently in beta version.\n\nNote: This summary focuses on the main purpose and features of the Web3 React Library, while also highlighting its status as a beta version."}
{"code": "| [`@web3-react/walletconnect-v2`](packages/walletconnect-v2)                                                                                   | [![npm](https://img.shields.io/npm/v/@web3-react/walletconnect-v2/beta.svg)](https://www.npmjs.com/package/@web3-react/walletconnect-v2/v/beta) | [![minzip](https://img.shields.io/bundlephobia/minzip/@web3-react/walletconnect-v2/beta.svg)](https://bundlephobia.com/result?p=@web3-react/walletconnect-v2@beta)  | [WalletConnect](https://walletconnect.org/)                               |", "explanation": "Here is a concise summary:\n\n**Purpose:** WalletConnect v2 integration for Web3 React.\n**Functionality:** Provides connection between dApps and mobile wallets through WalletConnect protocol.", "metadata": {"repo": "magiclabs/web3-react", "file": "README.md", "chunk_number": 13, "total_chunks": 22}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here is a holistic summary of the file 'README.md':\n\n**Web3 React Library**\n\nThis library provides functionality for building web3 applications using React. It enables interactions with blockchain networks, wallet management, and smart contract interactions.\n\nThe library includes various connectors for different wallets and services, such as MetaMask, Coinbase Wallet, Trust Wallet, and more. Each connector has its own purpose and functionality, which are described in the corresponding package information displays.\n\n**Key Features**\n\n* Provides network functionality for Web3 React applications\n* Enables integration of blockchain functionality into React apps using various wallets and services\n* Allows explicit installation of client packages for transparent switching between compatible versions\n* Encourages users to write their own connectors by providing inspiration from existing ones\n\n**Status**\n\nThe library is currently in beta version.\n\nNote: This summary focuses on the main purpose and features of the Web3 React Library, while also highlighting its status as a beta version."}
{"code": "| [`@web3-react/coinbase-wallet`](packages/coinbase-wallet)                                                                                     | [![npm](https://img.shields.io/npm/v/@web3-react/coinbase-wallet/beta.svg)](https://www.npmjs.com/package/@web3-react/coinbase-wallet/v/beta)   | [![minzip](https://img.shields.io/bundlephobia/minzip/@web3-react/coinbase-wallet/beta.svg)](https://bundlephobia.com/result?p=@web3-react/coinbase-wallet@beta)    | [Coinbase Wallet](https://docs.cloud.coinbase.com/wallet-sdk/docs)        |", "explanation": "Here is a concise summary:\n\nThis block appears to be an npm package documentation, specifically for `@web3-react/coinbase-wallet`. It provides information on its purpose (integration with Coinbase Wallet) and functionality, along with versioning and size metrics.", "metadata": {"repo": "magiclabs/web3-react", "file": "README.md", "chunk_number": 14, "total_chunks": 22}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here is a holistic summary of the file 'README.md':\n\n**Web3 React Library**\n\nThis library provides functionality for building web3 applications using React. It enables interactions with blockchain networks, wallet management, and smart contract interactions.\n\nThe library includes various connectors for different wallets and services, such as MetaMask, Coinbase Wallet, Trust Wallet, and more. Each connector has its own purpose and functionality, which are described in the corresponding package information displays.\n\n**Key Features**\n\n* Provides network functionality for Web3 React applications\n* Enables integration of blockchain functionality into React apps using various wallets and services\n* Allows explicit installation of client packages for transparent switching between compatible versions\n* Encourages users to write their own connectors by providing inspiration from existing ones\n\n**Status**\n\nThe library is currently in beta version.\n\nNote: This summary focuses on the main purpose and features of the Web3 React Library, while also highlighting its status as a beta version."}
{"code": "| [`@web3-react-trust-wallet`](https://github.com/trustwallet/web3-react-trust-wallet)                                                          | [![npm](https://img.shields.io/npm/v/@trustwallet/web3-react-trust-wallet)](https://www.npmjs.com/package/@trustwallet/web3-react-trust-wallet) | [![minzip](https://img.shields.io/bundlephobia/minzip/@trustwallet/web3-react-trust-wallet)](https://bundlephobia.com/package/@trustwallet/web3-react-trust-wallet) | [Trust Wallet](https://trustwallet.com/)                                  |", "explanation": "Here is a concise summary:\n\n**Package:** `@web3-react-trust-wallet`\n**Purpose:** Web3 React library for Trust Wallet integration\n**Functionality:** Enables Trust Wallet wallet connections in web applications.", "metadata": {"repo": "magiclabs/web3-react", "file": "README.md", "chunk_number": 15, "total_chunks": 22}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here is a holistic summary of the file 'README.md':\n\n**Web3 React Library**\n\nThis library provides functionality for building web3 applications using React. It enables interactions with blockchain networks, wallet management, and smart contract interactions.\n\nThe library includes various connectors for different wallets and services, such as MetaMask, Coinbase Wallet, Trust Wallet, and more. Each connector has its own purpose and functionality, which are described in the corresponding package information displays.\n\n**Key Features**\n\n* Provides network functionality for Web3 React applications\n* Enables integration of blockchain functionality into React apps using various wallets and services\n* Allows explicit installation of client packages for transparent switching between compatible versions\n* Encourages users to write their own connectors by providing inspiration from existing ones\n\n**Status**\n\nThe library is currently in beta version.\n\nNote: This summary focuses on the main purpose and features of the Web3 React Library, while also highlighting its status as a beta version."}
{"code": "| [`@avalabs/web3-react-core-connector`](https://github.com/ava-labs/avalanche-dapp-sdks/tree/alpha-release/packages/web3-react-core-connector) | [![npm](https://img.shields.io/npm/v/@avalabs/web3-react-core-connector)](https://www.npmjs.com/package/@avalabs/web3-react-core-connector)     | [![minzip](https://img.shields.io/bundlephobia/minzip/@avalabs/web3-react-core-connector)](https://bundlephobia.com/package/@avalabs/web3-react-core-connector)     | [Core Wallet](https://extension.core.app/)                                |", "explanation": "This block appears to be a package description for `@avalabs/web3-react-core-connector`. Here is a concise summary:\n\n**Purpose:** A Web3 connector for React applications, specifically designed for use with Core Wallet.\n\n**Functionality:** Enables integration of blockchain functionality into React apps using Core Wallet.", "metadata": {"repo": "magiclabs/web3-react", "file": "README.md", "chunk_number": 16, "total_chunks": 22}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here is a holistic summary of the file 'README.md':\n\n**Web3 React Library**\n\nThis library provides functionality for building web3 applications using React. It enables interactions with blockchain networks, wallet management, and smart contract interactions.\n\nThe library includes various connectors for different wallets and services, such as MetaMask, Coinbase Wallet, Trust Wallet, and more. Each connector has its own purpose and functionality, which are described in the corresponding package information displays.\n\n**Key Features**\n\n* Provides network functionality for Web3 React applications\n* Enables integration of blockchain functionality into React apps using various wallets and services\n* Allows explicit installation of client packages for transparent switching between compatible versions\n* Encourages users to write their own connectors by providing inspiration from existing ones\n\n**Status**\n\nThe library is currently in beta version.\n\nNote: This summary focuses on the main purpose and features of the Web3 React Library, while also highlighting its status as a beta version."}
{"code": "| [`@venly/web3-react-venly`](https://github.com/ArkaneNetwork/web3-react-venly)                                                                | [![npm](https://img.shields.io/npm/v/@venly/web3-react-venly)](https://www.npmjs.com/package/@venly/web3-react-venly)                           | [![minzip](https://img.shields.io/bundlephobia/minzip/@venly/web3-react-venly)](https://bundlephobia.com/package/@venly/web3-react-venly)                           | [Venly](https://www.venly.io/)                                            |", "explanation": "This block appears to be a package information display, likely from npm (Node Package Manager), summarizing:\n\n* A library: `@venly/web3-react-venly`\n* Its purpose: likely a React-based Web3 library for Venly\n* Functionality: likely provides a React integration for interacting with the Venly platform using Web3 technologies.", "metadata": {"repo": "magiclabs/web3-react", "file": "README.md", "chunk_number": 17, "total_chunks": 22}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here is a holistic summary of the file 'README.md':\n\n**Web3 React Library**\n\nThis library provides functionality for building web3 applications using React. It enables interactions with blockchain networks, wallet management, and smart contract interactions.\n\nThe library includes various connectors for different wallets and services, such as MetaMask, Coinbase Wallet, Trust Wallet, and more. Each connector has its own purpose and functionality, which are described in the corresponding package information displays.\n\n**Key Features**\n\n* Provides network functionality for Web3 React applications\n* Enables integration of blockchain functionality into React apps using various wallets and services\n* Allows explicit installation of client packages for transparent switching between compatible versions\n* Encourages users to write their own connectors by providing inspiration from existing ones\n\n**Status**\n\nThe library is currently in beta version.\n\nNote: This summary focuses on the main purpose and features of the Web3 React Library, while also highlighting its status as a beta version."}
{"code": "| [`@magiclabs/web3-react`](https://github.com/magiclabs/web3-react-magic-connect)                                                              | [![npm](https://img.shields.io/npm/v/@magiclabs/web3-react)](https://www.npmjs.com/package/@magiclabs/web3-react)                               | [![minzip](https://img.shields.io/bundlephobia/minzip/@magiclabs/web3-react)](https://bundlephobia.com/package/@magiclabs/web3-react)                               | [Magic Connect](https://magic.link/connect)                               |\n\n## Get Started\n\n- `yarn`\n- `yarn start`\n\nIn addition to compiling each package in watch mode, this will also spin up [packages/example](packages/example) on [localhost:3000](http://localhost:3000/). (It will also spin up [packages/example-cra](packages/example-cra) on [localhost:3001](http://localhost:3001/), but this is just a skeleton app for testing compatibility.)\n\n## Run Tests\n\n- `yarn build`\n- `yarn test --watch`\n\n## Publish\n\n- `yarn lerna publish [--dist-tag] `\n", "explanation": "Here is a summary of the purpose and functionality of this block:\n\n**Purpose:** Guide for using the Magic Connect library (@magiclabs/web3-react) in React applications.\n\n**Functionality:**\n\n* Provides instructions on how to get started with the library\n* Describes how to run tests and publish the library.", "metadata": {"repo": "magiclabs/web3-react", "file": "README.md", "chunk_number": 18, "total_chunks": 22}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here is a holistic summary of the file 'README.md':\n\n**Web3 React Library**\n\nThis library provides functionality for building web3 applications using React. It enables interactions with blockchain networks, wallet management, and smart contract interactions.\n\nThe library includes various connectors for different wallets and services, such as MetaMask, Coinbase Wallet, Trust Wallet, and more. Each connector has its own purpose and functionality, which are described in the corresponding package information displays.\n\n**Key Features**\n\n* Provides network functionality for Web3 React applications\n* Enables integration of blockchain functionality into React apps using various wallets and services\n* Allows explicit installation of client packages for transparent switching between compatible versions\n* Encourages users to write their own connectors by providing inspiration from existing ones\n\n**Status**\n\nThe library is currently in beta version.\n\nNote: This summary focuses on the main purpose and features of the Web3 React Library, while also highlighting its status as a beta version."}
{"code": "## Documentation\n\nThis version of web3-react is still in beta, so unfortunately documentation is pretty sparse at the moment. [packages/example](packages/example), TSDoc comments, and the source code itself are the best ways to get an idea of what's going on. More thorough documentation is a priority as development continues!\n\n## Upgrading Connector Dependencies\n", "explanation": "Here is a concise summary:\n\n**Purpose:** Inform users about limited documentation for web3-react beta version.\n\n**Functionality:** Provide notice and suggest alternative resources (example package, TSDoc comments, and source code) for understanding its functionality.", "metadata": {"repo": "magiclabs/web3-react", "file": "README.md", "chunk_number": 19, "total_chunks": 22}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here is a holistic summary of the file 'README.md':\n\n**Web3 React Library**\n\nThis library provides functionality for building web3 applications using React. It enables interactions with blockchain networks, wallet management, and smart contract interactions.\n\nThe library includes various connectors for different wallets and services, such as MetaMask, Coinbase Wallet, Trust Wallet, and more. Each connector has its own purpose and functionality, which are described in the corresponding package information displays.\n\n**Key Features**\n\n* Provides network functionality for Web3 React applications\n* Enables integration of blockchain functionality into React apps using various wallets and services\n* Allows explicit installation of client packages for transparent switching between compatible versions\n* Encourages users to write their own connectors by providing inspiration from existing ones\n\n**Status**\n\nThe library is currently in beta version.\n\nNote: This summary focuses on the main purpose and features of the Web3 React Library, while also highlighting its status as a beta version."}
{"code": "Some connectors have one or more dependencies that are specific to the connection method in question. For example, the walletconnect connector relies on `@walletconnect/ethereum-provider` package to handle a lot of the connection logic. Often, you may wish to upgrade to the latest version of a client package, to take advantage of the latest features. web3-react makes the process of upgrading client packages fairly painless by specifying them as [`peerDependencies`](https://docs.npmjs.com/cli/v8/configuring-npm/package-json#peerdependencies). This means that you have to explicitly install client packages, and therefore may transparently switch between any version that agrees with the semver specified in the connector (usually any matching major).\n\n## Third-Party Connectors\n", "explanation": "Here is a summary of the purpose and functionality of this block:\n\n**Purpose:** Explain how web3-react handles dependencies for third-party connectors.\n\n**Functionality:** Allows explicit installation of client packages, enabling transparent switching between compatible versions.", "metadata": {"repo": "magiclabs/web3-react", "file": "README.md", "chunk_number": 20, "total_chunks": 22}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here is a holistic summary of the file 'README.md':\n\n**Web3 React Library**\n\nThis library provides functionality for building web3 applications using React. It enables interactions with blockchain networks, wallet management, and smart contract interactions.\n\nThe library includes various connectors for different wallets and services, such as MetaMask, Coinbase Wallet, Trust Wallet, and more. Each connector has its own purpose and functionality, which are described in the corresponding package information displays.\n\n**Key Features**\n\n* Provides network functionality for Web3 React applications\n* Enables integration of blockchain functionality into React apps using various wallets and services\n* Allows explicit installation of client packages for transparent switching between compatible versions\n* Encourages users to write their own connectors by providing inspiration from existing ones\n\n**Status**\n\nThe library is currently in beta version.\n\nNote: This summary focuses on the main purpose and features of the Web3 React Library, while also highlighting its status as a beta version."}
{"code": "The decision to publish a connector under the @web3-react namespace is fully up to the discretion of the team. However, third-party connectors are always welcome! This library was designed to be highly modular, and you should be able to draw inspiration from the existing connectors to write your own. That connector can live inside your codebase, or even be published as a standalone package. A selection of third-party connectors that have widespread usage may be featured below, PRs modifying this list are welcome.\n\n## Upgrading from v6\n", "explanation": "Here is a concise summary:\n\n**Purpose:** Allow third-party developers to create custom connectors for web3-react library.\n**Functionality:** Encourage users to write their own connectors by providing inspiration from existing ones, which can be published separately or within their own codebase.", "metadata": {"repo": "magiclabs/web3-react", "file": "README.md", "chunk_number": 21, "total_chunks": 22}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here is a holistic summary of the file 'README.md':\n\n**Web3 React Library**\n\nThis library provides functionality for building web3 applications using React. It enables interactions with blockchain networks, wallet management, and smart contract interactions.\n\nThe library includes various connectors for different wallets and services, such as MetaMask, Coinbase Wallet, Trust Wallet, and more. Each connector has its own purpose and functionality, which are described in the corresponding package information displays.\n\n**Key Features**\n\n* Provides network functionality for Web3 React applications\n* Enables integration of blockchain functionality into React apps using various wallets and services\n* Allows explicit installation of client packages for transparent switching between compatible versions\n* Encourages users to write their own connectors by providing inspiration from existing ones\n\n**Status**\n\nThe library is currently in beta version.\n\nNote: This summary focuses on the main purpose and features of the Web3 React Library, while also highlighting its status as a beta version."}
{"code": "While the internals of web3-react have changed fairly dramatically between v6 and v8, the hope is that usage don't have to change too much when upgrading. Once you've migrated to the new connectors and state management patterns, you should be able to use the hooks defined in @web3-react/core, in particular `useWeb3React` (or `usePriorityWeb3React`), as more or less drop-in replacements for the v6 hooks. The big benefit in v8 is that hooks are now per-connector, as opposed to global, so no more juggling between connectors/multiple roots!\n", "explanation": "Here is a concise summary:\n\n**Purpose:** Per-connector state management in web3-react.\n\n**Functionality:** Use of `useWeb3React` hooks (e.g. `useWeb3React`) as drop-in replacements for v6 hooks, allowing per-connector state management and eliminating global connector juggling.", "metadata": {"repo": "magiclabs/web3-react", "file": "README.md", "chunk_number": 22, "total_chunks": 22}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here is a holistic summary of the file 'README.md':\n\n**Web3 React Library**\n\nThis library provides functionality for building web3 applications using React. It enables interactions with blockchain networks, wallet management, and smart contract interactions.\n\nThe library includes various connectors for different wallets and services, such as MetaMask, Coinbase Wallet, Trust Wallet, and more. Each connector has its own purpose and functionality, which are described in the corresponding package information displays.\n\n**Key Features**\n\n* Provides network functionality for Web3 React applications\n* Enables integration of blockchain functionality into React apps using various wallets and services\n* Allows explicit installation of client packages for transparent switching between compatible versions\n* Encourages users to write their own connectors by providing inspiration from existing ones\n\n**Status**\n\nThe library is currently in beta version.\n\nNote: This summary focuses on the main purpose and features of the Web3 React Library, while also highlighting its status as a beta version."}
{"code": "# example\n\nThis is an example app built with [Next.js](https://nextjs.org/) that showcases some basic web3-react usage patterns.\n", "explanation": "**Purpose:** Demonstrates Next.js-based example app for showcasing web3-react usage.\n\n**Functionality:** Showscasing basic web3-react functionality in a Next.js-built application.", "metadata": {"repo": "magiclabs/web3-react", "file": "example/README.md", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here is a concise holistic summary of the file 'example/README.md':\n\n\"This repository demonstrates a Next.js-based example app that showcases the basic functionality of web3-react.\""}
{"code": "import type { AddEthereumChainParameter } from '@web3-react/types'\n\nconst ETH: AddEthereumChainParameter['nativeCurrency'] = {\n  name: 'Ether',\n  symbol: 'ETH',\n  decimals: 18,\n}\n\nconst MATIC: AddEthereumChainParameter['nativeCurrency'] = {\n  name: 'Matic',\n  symbol: 'MATIC',\n  decimals: 18,\n}\n\nconst CELO: AddEthereumChainParameter['nativeCurrency'] = {\n  name: 'Celo',\n  symbol: 'CELO',\n  decimals: 18,\n}\n\ninterface BasicChainInformation {\n  urls: string[]\n  name: string\n}\n\ninterface ExtendedChainInformation extends BasicChainInformation {\n  nativeCurrency: AddEthereumChainParameter['nativeCurrency']\n  blockExplorerUrls: AddEthereumChainParameter['blockExplorerUrls']\n}\n\nfunction isExtendedChainInformation(\n  chainInformation: BasicChainInformation | ExtendedChainInformation\n): chainInformation is ExtendedChainInformation {\n  return !!(chainInformation as ExtendedChainInformation).nativeCurrency\n}\n\nexport function getAddChainParameters(chainId: number): AddEthereumChainParameter | number {", "explanation": "Here is a concise summary:\n\nThis block defines native currencies for Ethereum (ETH), Polygon (MATIC), and Celo (CELO) chains, as well as functions to determine if chain information is basic or extended and retrieve add chain parameters by chain ID.", "metadata": {"repo": "magiclabs/web3-react", "file": "example/chains.ts", "chunk_number": 1, "total_chunks": 5}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here is a concise and holistic summary of the file 'example/chains.ts':\n\nThis block defines a configuration object (`CHAINS`) for blockchain networks, providing details such as chain IDs, native currencies, RPC URLs, and block explorer URLs. It also includes testnet chains in a separate section (`TESTNET_CHAINS`). The code exports two constants: `CHAINS` and `URLS`, which can be used to retrieve chain information and extract valid URLs from each chain's configuration."}
{"code": "  const chainInformation = CHAINS[chainId]\n  if (isExtendedChainInformation(chainInformation)) {\n    return {\n      chainId,\n      chainName: chainInformation.name,\n      nativeCurrency: chainInformation.nativeCurrency,\n      rpcUrls: chainInformation.urls,\n      blockExplorerUrls: chainInformation.blockExplorerUrls,\n    }\n  } else {\n    return chainId\n  }\n}\n\nconst getInfuraUrlFor = (network: string) =>\n  process.env.infuraKey ? `https://${network}.infura.io/v3/${process.env.infuraKey}` : undefined\nconst getAlchemyUrlFor = (network: string) =>\n  process.env.alchemyKey ? `https://${network}.alchemyapi.io/v2/${process.env.alchemyKey}` : undefined\n\ntype ChainConfig = { [chainId: number]: BasicChainInformation | ExtendedChainInformation }\n\nexport const MAINNET_CHAINS: ChainConfig = {\n  1: {\n    urls: [getInfuraUrlFor('mainnet'), getAlchemyUrlFor('eth-mainnet'), 'https://cloudflare-eth.com'].filter(Boolean),\n    name: 'Mainnet',\n  },\n  10: {", "explanation": "Here is a concise summary:\n\n**Purpose:** Returns chain information for a given `chainId`.\n\n**Functionality:**\n\n* Retrieves chain data from the `CHAINS` object.\n* Checks if the chain has extended information using the `isExtendedChainInformation` function.\n* If true, returns a detailed object with chain ID, name, native currency, RPC URLs, and block explorer URLs.\n* If false or no info exists, returns only the chain ID.", "metadata": {"repo": "magiclabs/web3-react", "file": "example/chains.ts", "chunk_number": 2, "total_chunks": 5}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here is a concise and holistic summary of the file 'example/chains.ts':\n\nThis block defines a configuration object (`CHAINS`) for blockchain networks, providing details such as chain IDs, native currencies, RPC URLs, and block explorer URLs. It also includes testnet chains in a separate section (`TESTNET_CHAINS`). The code exports two constants: `CHAINS` and `URLS`, which can be used to retrieve chain information and extract valid URLs from each chain's configuration."}
{"code": "    urls: [getInfuraUrlFor('optimism-mainnet'), 'https://mainnet.optimism.io'].filter(Boolean),\n    name: 'Optimism',\n    nativeCurrency: ETH,\n    blockExplorerUrls: ['https://optimistic.etherscan.io'],\n  },\n  42161: {\n    urls: [getInfuraUrlFor('arbitrum-mainnet'), 'https://arb1.arbitrum.io/rpc'].filter(Boolean),\n    name: 'Arbitrum One',\n    nativeCurrency: ETH,\n    blockExplorerUrls: ['https://arbiscan.io'],\n  },\n  137: {\n    urls: [getInfuraUrlFor('polygon-mainnet'), 'https://polygon-rpc.com'].filter(Boolean),\n    name: 'Polygon Mainnet',\n    nativeCurrency: MATIC,\n    blockExplorerUrls: ['https://polygonscan.com'],\n  },\n  42220: {\n    urls: ['https://forno.celo.org'],\n    name: 'Celo',\n    nativeCurrency: CELO,\n    blockExplorerUrls: ['https://explorer.celo.org'],\n  },\n}\n\nexport const TESTNET_CHAINS: ChainConfig = {\n  5: {\n    urls: [getInfuraUrlFor('goerli')].filter(Boolean),\n    name: 'G\u00f6rli',\n  },\n  420: {\n    urls: [getInfuraUrlFor('optimism-goerli'), 'https://goerli.optimism.io'].filter(Boolean),", "explanation": "**Summary**\n\nThis is a configuration object for blockchain networks, defining properties such as:\n\n* Chain IDs (e.g., 1, 5, 42161)\n* URLs for connecting to each chain\n* Network names (e.g., \"Optimism\", \"Arbitrum One\")\n* Native currencies (e.g., ETH, MATIC)\n* Block explorer URLs\n\nThe object appears to be used for testing and development purposes, with a separate section (`TESTNET_CHAINS`) defining testnet chains.", "metadata": {"repo": "magiclabs/web3-react", "file": "example/chains.ts", "chunk_number": 3, "total_chunks": 5}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here is a concise and holistic summary of the file 'example/chains.ts':\n\nThis block defines a configuration object (`CHAINS`) for blockchain networks, providing details such as chain IDs, native currencies, RPC URLs, and block explorer URLs. It also includes testnet chains in a separate section (`TESTNET_CHAINS`). The code exports two constants: `CHAINS` and `URLS`, which can be used to retrieve chain information and extract valid URLs from each chain's configuration."}
{"code": "    name: 'Optimism Goerli',\n    nativeCurrency: ETH,\n    blockExplorerUrls: ['https://goerli-explorer.optimism.io'],\n  },\n  421613: {\n    urls: [getInfuraUrlFor('arbitrum-goerli'), 'https://goerli-rollup.arbitrum.io/rpc'].filter(Boolean),\n    name: 'Arbitrum Goerli',\n    nativeCurrency: ETH,\n    blockExplorerUrls: ['https://testnet.arbiscan.io'],\n  },\n  80001: {\n    urls: [getInfuraUrlFor('polygon-mumbai')].filter(Boolean),\n    name: 'Polygon Mumbai',\n    nativeCurrency: MATIC,\n    blockExplorerUrls: ['https://mumbai.polygonscan.com'],\n  },\n  44787: {\n    urls: ['https://alfajores-forno.celo-testnet.org'],\n    name: 'Celo Alfajores',\n    nativeCurrency: CELO,\n    blockExplorerUrls: ['https://alfajores-blockscout.celo-testnet.org'],\n  },\n}\n\nexport const CHAINS: ChainConfig = {\n  ...MAINNET_CHAINS,\n  ...TESTNET_CHAINS,\n}\n\nexport const URLS: { [chainId: number]: string[] } = Object.keys(CHAINS).reduce<{ [chainId: number]: string[] }>(\n  (accumulator, chainId) => {", "explanation": "Here is a summary of the purpose and functionality of this block:\n\n**This block defines a configuration object for blockchain networks**\n\nIt contains an array of objects, each representing a specific blockchain network (e.g., Optimism Goerli, Arbitrum Goerli, Polygon Mumbai). Each object includes details such as:\n\n* `chainId`: A unique identifier for the network\n* `name`: The name of the network\n* `nativeCurrency`: The cryptocurrency used on the network (e.g. ETH, MATIC)\n* `blockExplorerUrls`: URLs to block explorers for each network\n\nThe configuration is used to export two constants: `CHAINS` and `URLS`.", "metadata": {"repo": "magiclabs/web3-react", "file": "example/chains.ts", "chunk_number": 4, "total_chunks": 5}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here is a concise and holistic summary of the file 'example/chains.ts':\n\nThis block defines a configuration object (`CHAINS`) for blockchain networks, providing details such as chain IDs, native currencies, RPC URLs, and block explorer URLs. It also includes testnet chains in a separate section (`TESTNET_CHAINS`). The code exports two constants: `CHAINS` and `URLS`, which can be used to retrieve chain information and extract valid URLs from each chain's configuration."}
{"code": "    const validURLs: string[] = CHAINS[Number(chainId)].urls\n\n    if (validURLs.length) {\n      accumulator[Number(chainId)] = validURLs\n    }\n\n    return accumulator\n  },\n  {}\n)\n", "explanation": "**Functionality:** Extracts a list of valid URLs from a chain's configuration.\n\n**Purpose:** Updates an object with valid URLs for each chain, if present.", "metadata": {"repo": "magiclabs/web3-react", "file": "example/chains.ts", "chunk_number": 5, "total_chunks": 5}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here is a concise and holistic summary of the file 'example/chains.ts':\n\nThis block defines a configuration object (`CHAINS`) for blockchain networks, providing details such as chain IDs, native currencies, RPC URLs, and block explorer URLs. It also includes testnet chains in a separate section (`TESTNET_CHAINS`). The code exports two constants: `CHAINS` and `URLS`, which can be used to retrieve chain information and extract valid URLs from each chain's configuration."}
{"code": "import type { BigNumber } from '@ethersproject/bignumber'\nimport { formatEther } from '@ethersproject/units'\nimport type { Web3ReactHooks } from '@web3-react/core'\nimport { useEffect, useState } from 'react'\n\nfunction useBalances(\n  provider?: ReturnType<Web3ReactHooks['useProvider']>,\n  accounts?: string[]\n): BigNumber[] | undefined {\n  const [balances, setBalances] = useState<BigNumber[] | undefined>()\n\n  useEffect(() => {\n    if (provider && accounts?.length) {\n      let stale = false\n\n      void Promise.all(accounts.map((account) => provider.getBalance(account))).then((balances) => {\n        if (stale) return\n        setBalances(balances)\n      })\n\n      return () => {\n        stale = true\n        setBalances(undefined)\n      }\n    }\n  }, [provider, accounts])\n\n  return balances\n}\n\nexport function Accounts({\n  accounts,\n  provider,\n  ENSNames,\n}: {\n  accounts: ReturnType<Web3ReactHooks['useAccounts']>\n  provider: ReturnType<Web3ReactHooks['useProvider']>\n  ENSNames: ReturnType<Web3ReactHooks['useENSNames']>\n}) {", "explanation": "**Summary:**\n\nThis block is a custom React hook called `useBalances` that fetches and updates account balances for a list of Ethereum addresses, provided by Web3 React hooks (`@web3-react/core`). It returns an array of `BigNumber` values representing the balances.\n\nThe accompanying component, `Accounts`, likely uses this hook to display account information, including balances.", "metadata": {"repo": "magiclabs/web3-react", "file": "example/components/Accounts.tsx", "chunk_number": 1, "total_chunks": 2}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here is a concise summary of the file 'example/components/Accounts.tsx':\n\n**Summary:** The `Accounts` component displays account information for a list of Ethereum addresses, including ENS names and balances, utilizing the custom hook `useBalances`."}
{"code": "  const balances = useBalances(provider, accounts)\n\n  if (accounts === undefined) return null\n\n  return (\n    <div>\n      Accounts:{' '}\n      <b>\n        {accounts.length === 0\n          ? 'None'\n          : accounts?.map((account, i) => (\n              <ul key={account} style={{ margin: 0, overflow: 'hidden', textOverflow: 'ellipsis' }}>\n                {ENSNames?.[i] ?? account}\n                {balances?.[i] ? ` (\u039e${formatEther(balances[i])})` : null}\n              </ul>\n            ))}\n      </b>\n    </div>\n  )\n}\n", "explanation": "Here is a concise summary:\n\n**Purpose:** Displays account information, including ENS names and balances.\n\n**Functionality:** Maps over `accounts` array, displaying each account with its corresponding ENS name (if available) and balance in ETH format, if applicable. If no accounts are present, displays \"None\".", "metadata": {"repo": "magiclabs/web3-react", "file": "example/components/Accounts.tsx", "chunk_number": 2, "total_chunks": 2}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here is a concise summary of the file 'example/components/Accounts.tsx':\n\n**Summary:** The `Accounts` component displays account information for a list of Ethereum addresses, including ENS names and balances, utilizing the custom hook `useBalances`."}
{"code": "import type { CoinbaseWallet } from '@web3-react/coinbase-wallet'\nimport type { Web3ReactHooks } from '@web3-react/core'\nimport type { GnosisSafe } from '@web3-react/gnosis-safe'\nimport type { MetaMask } from '@web3-react/metamask'\nimport type { Network } from '@web3-react/network'\nimport type { WalletConnect } from '@web3-react/walletconnect'\nimport type { WalletConnect as WalletConnectV2 } from '@web3-react/walletconnect-v2'\n\nimport { getName } from '../utils'\nimport { Accounts } from './Accounts'\nimport { Chain } from './Chain'\nimport { ConnectWithSelect } from './ConnectWithSelect'\nimport { Status } from './Status'\n\ninterface Props {\n  connector: MetaMask | WalletConnect | WalletConnectV2 | CoinbaseWallet | Network | GnosisSafe\n  activeChainId: ReturnType<Web3ReactHooks['useChainId']>\n  chainIds?: ReturnType<Web3ReactHooks['useChainId']>[]\n  isActivating: ReturnType<Web3ReactHooks['useIsActivating']>\n  isActive: ReturnType<Web3ReactHooks['useIsActive']>\n  error: Error | undefined", "explanation": "This block imports various wallet connectors from `@web3-react` and other libraries, and exports a React component (`ConnectWithSelect`) that likely allows users to connect their wallets to a blockchain network using one of these connectors.", "metadata": {"repo": "magiclabs/web3-react", "file": "example/components/Card.tsx", "chunk_number": 1, "total_chunks": 3}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here is a concise summary of the file 'example/components/Card.tsx':\n\n**File Summary:** \nThe file defines props for a React \"Card\" component that allows users to connect their wallets to a blockchain network, displaying status and connection options, with error handling and activation state."}
{"code": "  setError: (error: Error | undefined) => void\n  ENSNames: ReturnType<Web3ReactHooks['useENSNames']>\n  provider?: ReturnType<Web3ReactHooks['useProvider']>\n  accounts?: string[]\n}\n\nexport function Card({\n  connector,\n  activeChainId,\n  chainIds,\n  isActivating,\n  isActive,\n  error,\n  setError,\n  ENSNames,\n  accounts,\n  provider,\n}: Props) {\n  return (\n    <div\n      style={{\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'space-between',\n        width: '20rem',\n        padding: '1rem',\n        margin: '1rem',\n        overflow: 'auto',\n        border: '1px solid',\n        borderRadius: '1rem',\n      }}\n    >\n      <b>{getName(connector)}</b>\n      <div style={{ marginBottom: '1rem' }}>\n        <Status isActivating={isActivating} isActive={isActive} error={error} />\n      </div>\n      <Chain chainId={activeChainId} />\n      <div style={{ marginBottom: '1rem' }}>\n        <Accounts accounts={accounts} provider={provider} ENSNames={ENSNames} />\n      </div>\n      <ConnectWithSelect", "explanation": "Here is a concise summary of the purpose and functionality of this block:\n\n**Block Type:** TypeScript interface or type definition\n\n**Purpose:** Define a set of props (short for properties) that can be passed to a React component, specifically a \"Card\" component.\n\n**Functionality:** The props include error handling, ENS names, accounts, provider information, and connector details, which are used to display status, chain ID, accounts, and connection options in the Card component.", "metadata": {"repo": "magiclabs/web3-react", "file": "example/components/Card.tsx", "chunk_number": 2, "total_chunks": 3}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here is a concise summary of the file 'example/components/Card.tsx':\n\n**File Summary:** \nThe file defines props for a React \"Card\" component that allows users to connect their wallets to a blockchain network, displaying status and connection options, with error handling and activation state."}
{"code": "        connector={connector}\n        activeChainId={activeChainId}\n        chainIds={chainIds}\n        isActivating={isActivating}\n        isActive={isActive}\n        error={error}\n        setError={setError}\n      />\n    </div>\n  )\n}\n", "explanation": "This block appears to be a React component, likely a button or toggle, that:\n\n* Connects to a network (indicated by `connector`)\n* Displays information about active chains (`activeChainId`, `chainIds`)\n* Indicates activation status (`isActivating`, `isActive`)\n* Handles errors and error state (`error`, `setError`)", "metadata": {"repo": "magiclabs/web3-react", "file": "example/components/Card.tsx", "chunk_number": 3, "total_chunks": 3}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here is a concise summary of the file 'example/components/Card.tsx':\n\n**File Summary:** \nThe file defines props for a React \"Card\" component that allows users to connect their wallets to a blockchain network, displaying status and connection options, with error handling and activation state."}
{"code": "import type { Web3ReactHooks } from '@web3-react/core'\n\nimport { CHAINS } from '../chains'\n\nexport function Chain({ chainId }: { chainId: ReturnType<Web3ReactHooks['useChainId']> }) {\n  if (chainId === undefined) return null\n\n  const name = chainId ? CHAINS[chainId]?.name : undefined\n\n  if (name) {\n    return (\n      <div>\n        Chain:{' '}\n        <b>\n          {name} ({chainId})\n        </b>\n      </div>\n    )\n  }\n\n  return (\n    <div>\n      Chain Id: <b>{chainId}</b>\n    </div>\n  )\n}\n", "explanation": "**Purpose:** Displays the chain name or ID based on the current blockchain network.\n\n**Functionality:** Returns a JSX element with either the chain name (if available) or the chain ID, depending on whether the `chainId` is valid.", "metadata": {"repo": "magiclabs/web3-react", "file": "example/components/Chain.tsx", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here is a concise holistic summary of the file 'example/components/Chain.tsx':\n\nDisplays the current blockchain network's chain name or ID based on a valid `chainId`."}
{"code": "import type { CoinbaseWallet } from '@web3-react/coinbase-wallet'\nimport type { Web3ReactHooks } from '@web3-react/core'\nimport { GnosisSafe } from '@web3-react/gnosis-safe'\nimport type { MetaMask } from '@web3-react/metamask'\nimport { Network } from '@web3-react/network'\nimport { WalletConnect } from '@web3-react/walletconnect'\nimport { WalletConnect as WalletConnectV2 } from '@web3-react/walletconnect-v2'\nimport { useCallback, useEffect, useState } from 'react'\n\nimport { CHAINS, getAddChainParameters } from '../chains'\n\nfunction ChainSelect({\n  activeChainId,\n  switchChain,\n  chainIds,\n}: {\n  activeChainId: number\n  switchChain: (chainId: number) => void\n  chainIds: number[]\n}) {\n  return (\n    <select\n      value={activeChainId}\n      onChange={(event) => {\n        switchChain(Number(event.target.value))\n      }}\n      disabled={switchChain === undefined}\n    >\n      <option hidden disabled selected={activeChainId === undefined}>\n        Select chain\n      </option>", "explanation": "**Summary**\n\nThis block imports various Web3 libraries and defines a `ChainSelect` component, which is a dropdown menu for selecting a blockchain network (chain). The component takes three props: `activeChainId`, `switchChain`, and `chainIds`. It allows users to switch between different chains by selecting one from the list.", "metadata": {"repo": "magiclabs/web3-react", "file": "example/components/ConnectWithSelect.tsx", "chunk_number": 1, "total_chunks": 5}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here is a concise and holistic summary of the file 'example/components/ConnectWithSelect.tsx':\n\n**Summary**\n\nThe `ConnectWithSelect` component is a dropdown select menu for connecting to different blockchain chains. It allows users to switch between chains, updates the `desiredChainId` value based on user connection status, and handles activation/deactivation of a blockchain connector accordingly."}
{"code": "      <option value={-1} selected={activeChainId === -1}>\n        Default\n      </option>\n      {chainIds.map((chainId) => (\n        <option key={chainId} value={chainId} selected={chainId === activeChainId}>\n          {CHAINS[chainId]?.name ?? chainId}\n        </option>\n      ))}\n    </select>\n  )\n}\n\nexport function ConnectWithSelect({\n  connector,\n  activeChainId,\n  chainIds = Object.keys(CHAINS).map(Number),\n  isActivating,\n  isActive,\n  error,\n  setError,\n}: {\n  connector: MetaMask | WalletConnect | WalletConnectV2 | CoinbaseWallet | Network | GnosisSafe\n  activeChainId: ReturnType<Web3ReactHooks['useChainId']>\n  chainIds?: ReturnType<Web3ReactHooks['useChainId']>[]\n  isActivating: ReturnType<Web3ReactHooks['useIsActivating']>\n  isActive: ReturnType<Web3ReactHooks['useIsActive']>\n  error: Error | undefined\n  setError: (error: Error | undefined) => void\n}) {\n  const [desiredChainId, setDesiredChainId] = useState<number>(undefined)\n\n  /**", "explanation": "Here is a concise summary:\n\n**Purpose:** A dropdown select menu for connecting to different blockchain chains.\n\n**Functionality:** Allows user to select a chain from a list of available options (default, custom chains), with the currently active chain selected by default. Updates desired chain ID state when selection changes.", "metadata": {"repo": "magiclabs/web3-react", "file": "example/components/ConnectWithSelect.tsx", "chunk_number": 2, "total_chunks": 5}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here is a concise and holistic summary of the file 'example/components/ConnectWithSelect.tsx':\n\n**Summary**\n\nThe `ConnectWithSelect` component is a dropdown select menu for connecting to different blockchain chains. It allows users to switch between chains, updates the `desiredChainId` value based on user connection status, and handles activation/deactivation of a blockchain connector accordingly."}
{"code": "   * When user connects eagerly (`desiredChainId` is undefined) or to the default chain (`desiredChainId` is -1),\n   * update the `desiredChainId` value so that <select /> has the right selection.\n   */\n  useEffect(() => {\n    if (activeChainId && (!desiredChainId || desiredChainId === -1)) {\n      setDesiredChainId(activeChainId)\n    }\n  }, [desiredChainId, activeChainId])\n\n  const switchChain = useCallback(\n    async (desiredChainId: number) => {\n      setDesiredChainId(desiredChainId)\n\n      try {\n        if (\n          // If we're already connected to the desired chain, return\n          desiredChainId === activeChainId ||\n          // If they want to connect to the default chain and we're already connected, return\n          (desiredChainId === -1 && activeChainId !== undefined)\n        ) {\n          setError(undefined)\n          return\n        }\n\n        if (desiredChainId === -1 || connector instanceof GnosisSafe) {\n          await connector.activate()\n        } else if (", "explanation": "Here is a concise summary of the purpose and functionality of this block:\n\n**Purpose:** Update the `desiredChainId` value based on user connection status.\n\n**Functionality:**\n\n1. If user connects to default chain or eagerly, update `desiredChainId` with current chain ID.\n2. When user switches chains, check if they're already connected to desired chain; if so, return without changing connections.\n3. Activate connector and/or set error state accordingly based on new chain ID.", "metadata": {"repo": "magiclabs/web3-react", "file": "example/components/ConnectWithSelect.tsx", "chunk_number": 3, "total_chunks": 5}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here is a concise and holistic summary of the file 'example/components/ConnectWithSelect.tsx':\n\n**Summary**\n\nThe `ConnectWithSelect` component is a dropdown select menu for connecting to different blockchain chains. It allows users to switch between chains, updates the `desiredChainId` value based on user connection status, and handles activation/deactivation of a blockchain connector accordingly."}
{"code": "          connector instanceof WalletConnectV2 ||\n          connector instanceof WalletConnect ||\n          connector instanceof Network\n        ) {\n          await connector.activate(desiredChainId)\n        } else {\n          await connector.activate(getAddChainParameters(desiredChainId))\n        }\n\n        setError(undefined)\n      } catch (error) {\n        setError(error)\n      }\n    },\n    [connector, activeChainId, setError]\n  )\n\n  return (\n    <div style={{ display: 'flex', flexDirection: 'column' }}>\n      {!(connector instanceof GnosisSafe) && (\n        <ChainSelect activeChainId={desiredChainId} switchChain={switchChain} chainIds={chainIds} />\n      )}\n      <div style={{ marginBottom: '1rem' }} />\n      {isActive ? (\n        error ? (\n          <button onClick={() => switchChain(desiredChainId)}>Try again?</button>\n        ) : (\n          <button\n            onClick={() => {\n              if (connector?.deactivate) {\n                void connector.deactivate()\n              } else {", "explanation": "Here is a concise summary of the purpose and functionality of this code block:\n\n**Purpose:** Handle activation/deactivation of a blockchain connector based on its type.\n\n**Functionality:** If the connector is a WalletConnect or Network instance, activate it with a specific chain ID. Otherwise, activate it with additional parameters. Catch errors and display them as needed.", "metadata": {"repo": "magiclabs/web3-react", "file": "example/components/ConnectWithSelect.tsx", "chunk_number": 4, "total_chunks": 5}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here is a concise and holistic summary of the file 'example/components/ConnectWithSelect.tsx':\n\n**Summary**\n\nThe `ConnectWithSelect` component is a dropdown select menu for connecting to different blockchain chains. It allows users to switch between chains, updates the `desiredChainId` value based on user connection status, and handles activation/deactivation of a blockchain connector accordingly."}
{"code": "                void connector.resetState()\n              }\n              setDesiredChainId(undefined)\n            }}\n          >\n            Disconnect\n          </button>\n        )\n      ) : (\n        <button\n          onClick={() =>\n            connector instanceof GnosisSafe\n              ? void connector\n                  .activate()\n                  .then(() => setError(undefined))\n                  .catch(setError)\n              : switchChain(desiredChainId)\n          }\n          disabled={isActivating || !desiredChainId}\n        >\n          {error ? 'Try again?' : 'Connect'}\n        </button>\n      )}\n    </div>\n  )\n}\n", "explanation": "Here is a concise summary:\n\nThis block represents a button that either connects or disconnects from a blockchain network, depending on its state (connected or disconnected).", "metadata": {"repo": "magiclabs/web3-react", "file": "example/components/ConnectWithSelect.tsx", "chunk_number": 5, "total_chunks": 5}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here is a concise and holistic summary of the file 'example/components/ConnectWithSelect.tsx':\n\n**Summary**\n\nThe `ConnectWithSelect` component is a dropdown select menu for connecting to different blockchain chains. It allows users to switch between chains, updates the `desiredChainId` value based on user connection status, and handles activation/deactivation of a blockchain connector accordingly."}
{"code": "import type { CoinbaseWallet } from '@web3-react/coinbase-wallet'\nimport { useWeb3React, Web3ReactHooks, Web3ReactProvider } from '@web3-react/core'\nimport type { MetaMask } from '@web3-react/metamask'\nimport type { Network } from '@web3-react/network'\nimport type { WalletConnect } from '@web3-react/walletconnect'\nimport type { WalletConnect as WalletConnectV2 } from '@web3-react/walletconnect-v2'\n\nimport { coinbaseWallet, hooks as coinbaseWalletHooks } from '../connectors/coinbaseWallet'\nimport { hooks as metaMaskHooks, metaMask } from '../connectors/metaMask'\nimport { hooks as networkHooks, network } from '../connectors/network'\nimport { hooks as walletConnectHooks, walletConnect } from '../connectors/walletConnect'\nimport { hooks as walletConnectV2Hooks, walletConnectV2 } from '../connectors/walletConnectV2'\nimport { getName } from '../utils'\n\nconst connectors: [MetaMask | WalletConnect | WalletConnectV2 | CoinbaseWallet | Network, Web3ReactHooks][] = [\n  [metaMask, metaMaskHooks],", "explanation": "**Summary**\n\nThis block imports various web3 libraries and connectors, setting up a provider for multiple wallet connections (Coinbase Wallet, MetaMask, Network, WalletConnect, and WalletConnectV2) with corresponding hooks for each.", "metadata": {"repo": "magiclabs/web3-react", "file": "example/components/ProviderExample.tsx", "chunk_number": 1, "total_chunks": 2}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here is a concise summary of the file 'example/components/ProviderExample.tsx':\n\nThis file sets up a provider for multiple wallet connections (e.g., MetaMask, Coinbase Wallet), allowing React components to access Web3 functionality via various connectors."}
{"code": "  [walletConnect, walletConnectHooks],\n  [walletConnectV2, walletConnectV2Hooks],\n  [coinbaseWallet, coinbaseWalletHooks],\n  [network, networkHooks],\n]\n\nfunction Child() {\n  const { connector } = useWeb3React()\n  console.log(`Priority Connector is: ${getName(connector)}`)\n  return null\n}\n\nexport default function ProviderExample() {\n  return (\n    <Web3ReactProvider connectors={connectors}>\n      <Child />\n    </Web3ReactProvider>\n  )\n}\n", "explanation": "Here is a concise summary of the purpose and functionality:\n\n**Purpose:** To provide Web3 connectivity via multiple wallet libraries (e.g., WalletConnect, CoinbaseWallet) to React components.\n\n**Functionality:** The `connectors` array defines available wallets, and the `Web3ReactProvider` component wraps a child component (`Child`) with the selected connector, enabling Web3 functionality.", "metadata": {"repo": "magiclabs/web3-react", "file": "example/components/ProviderExample.tsx", "chunk_number": 2, "total_chunks": 2}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here is a concise summary of the file 'example/components/ProviderExample.tsx':\n\nThis file sets up a provider for multiple wallet connections (e.g., MetaMask, Coinbase Wallet), allowing React components to access Web3 functionality via various connectors."}
{"code": "import type { Web3ReactHooks } from '@web3-react/core'\n\nexport function Status({\n  isActivating,\n  isActive,\n  error,\n}: {\n  isActivating: ReturnType<Web3ReactHooks['useIsActivating']>\n  isActive: ReturnType<Web3ReactHooks['useIsActive']>\n  error?: Error\n}) {\n  return (\n    <div>\n      {error ? (\n        <>\n          \ud83d\udd34 {error.name ?? 'Error'}\n          {error.message ? `: ${error.message}` : null}\n        </>\n      ) : isActivating ? (\n        <>\ud83d\udfe1 Connecting</>\n      ) : isActive ? (\n        <>\ud83d\udfe2 Connected</>\n      ) : (\n        <>\u26aa\ufe0f Disconnected</>\n      )}\n    </div>\n  )\n}\n", "explanation": "**Summary:**\n\nThis code block is a React component named `Status` that displays the current status of a Web3 connection (e.g., connecting, connected, or disconnected). It takes three props: `isActivating`, `isActive`, and `error`. The component renders an icon and text indicating the current state.", "metadata": {"repo": "magiclabs/web3-react", "file": "example/components/Status.tsx", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here is a concise summary of the file 'example/components/Status.tsx':\n\n**Summary:** \nThe `Status` React component displays the status of a Web3 connection, showing the current state through an icon and text indication (e.g., connecting, connected, or disconnected)."}
{"code": "import { useEffect, useState } from 'react'\n\nimport { coinbaseWallet, hooks } from '../../connectors/coinbaseWallet'\nimport { Card } from '../Card'\n\nconst { useChainId, useAccounts, useIsActivating, useIsActive, useProvider, useENSNames } = hooks\n\nexport default function CoinbaseWalletCard() {\n  const chainId = useChainId()\n  const accounts = useAccounts()\n  const isActivating = useIsActivating()\n\n  const isActive = useIsActive()\n\n  const provider = useProvider()\n  const ENSNames = useENSNames(provider)\n\n  const [error, setError] = useState(undefined)\n\n  // attempt to connect eagerly on mount\n  useEffect(() => {\n    void coinbaseWallet.connectEagerly().catch(() => {\n      console.debug('Failed to connect eagerly to coinbase wallet')\n    })\n  }, [])\n\n  return (\n    <Card\n      connector={coinbaseWallet}\n      activeChainId={chainId}\n      isActivating={isActivating}\n      isActive={isActive}\n      error={error}\n      setError={setError}\n      accounts={accounts}\n      provider={provider}\n      ENSNames={ENSNames}\n    />\n  )", "explanation": "Here is a concise summary:\n\nThis block imports React hooks, Coinbase Wallet connectors, and a Card component. It uses these hooks to retrieve various information about the user's account and connection status, then renders a Coinbase Wallet Card with this data. The card attempts to connect to Coinbase Wallet on mount and displays errors if connection fails.", "metadata": {"repo": "magiclabs/web3-react", "file": "example/components/connectorCards/CoinbaseWalletCard.tsx", "chunk_number": 1, "total_chunks": 2}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Since there is no actual code block provided, I will assume you want me to create a summary based on the description you gave.\n\nHere is a concise summary:\n\n**CoinbaseWalletCard.tsx Summary**\nThis component imports React hooks and Coinbase Wallet connectors to display a card with user account and connection status information. It attempts to connect to Coinbase Wallet on mount and shows errors if connection fails, rendering a Coinbase Wallet Card with this data."}
{"code": "}\n", "explanation": "This is not a block or any type of code/text, but rather an instruction to provide a summary. Since there's no content provided, I'll wait for you to input something before summarizing it.", "metadata": {"repo": "magiclabs/web3-react", "file": "example/components/connectorCards/CoinbaseWalletCard.tsx", "chunk_number": 2, "total_chunks": 2}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Since there is no actual code block provided, I will assume you want me to create a summary based on the description you gave.\n\nHere is a concise summary:\n\n**CoinbaseWalletCard.tsx Summary**\nThis component imports React hooks and Coinbase Wallet connectors to display a card with user account and connection status information. It attempts to connect to Coinbase Wallet on mount and shows errors if connection fails, rendering a Coinbase Wallet Card with this data."}
{"code": "import { useEffect, useState } from 'react'\n\nimport { gnosisSafe, hooks } from '../../connectors/gnosisSafe'\nimport { Card } from '../Card'\n\nconst { useChainId, useAccounts, useIsActivating, useIsActive, useProvider, useENSNames } = hooks\n\nexport default function GnosisSafeCard() {\n  const chainId = useChainId()\n  const accounts = useAccounts()\n  const isActivating = useIsActivating()\n\n  const isActive = useIsActive()\n\n  const provider = useProvider()\n  const ENSNames = useENSNames(provider)\n\n  const [error, setError] = useState(undefined)\n\n  // attempt to connect eagerly on mount\n  useEffect(() => {\n    void gnosisSafe.connectEagerly().catch(() => {\n      console.debug('Failed to connect eagerly to gnosis safe')\n    })\n  }, [])\n\n  return (\n    <Card\n      connector={gnosisSafe}\n      activeChainId={chainId}\n      isActivating={isActivating}\n      isActive={isActive}\n      error={error}\n      setError={setError}\n      accounts={accounts}\n      provider={provider}\n      ENSNames={ENSNames}\n    />\n  )\n}\n", "explanation": "Here is a concise summary of the block's purpose and functionality:\n\n**Purpose:** Render a Gnosis Safe card with connection status.\n\n**Functionality:**\n\n* Connects to Gnosis Safe eagerly on mount\n* Displays connection status (active/inactivating)\n* Handles errors and updates the error state\n* Passes relevant data (chain ID, accounts, provider, ENS names) to the Card component", "metadata": {"repo": "magiclabs/web3-react", "file": "example/components/connectorCards/GnosisSafeCard.tsx", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here is a concise summary of the file 'example/components/connectorCards/GnosisSafeCard.tsx':\n\n**Summary:** A Gnosis Safe card component that eagerly connects on mount, displays connection status, handles errors, and passes relevant data to its parent."}
{"code": "import { useEffect, useState } from 'react'\n\nimport { hooks, metaMask } from '../../connectors/metaMask'\nimport { Card } from '../Card'\n\nconst { useChainId, useAccounts, useIsActivating, useIsActive, useProvider, useENSNames } = hooks\n\nexport default function MetaMaskCard() {\n  const chainId = useChainId()\n  const accounts = useAccounts()\n  const isActivating = useIsActivating()\n\n  const isActive = useIsActive()\n\n  const provider = useProvider()\n  const ENSNames = useENSNames(provider)\n\n  const [error, setError] = useState(undefined)\n\n  // attempt to connect eagerly on mount\n  useEffect(() => {\n    void metaMask.connectEagerly().catch(() => {\n      console.debug('Failed to connect eagerly to metamask')\n    })\n  }, [])\n\n  return (\n    <Card\n      connector={metaMask}\n      activeChainId={chainId}\n      isActivating={isActivating}\n      isActive={isActive}\n      error={error}\n      setError={setError}\n      accounts={accounts}\n      provider={provider}\n      ENSNames={ENSNames}\n    />\n  )\n}\n", "explanation": "Here is a concise summary:\n\n**Purpose:** A React component that displays information about MetaMask connections.\n\n**Functionality:** Connects to MetaMask, retrieves account data, and renders a card with connection status, chain ID, accounts, provider, and ENS names.", "metadata": {"repo": "magiclabs/web3-react", "file": "example/components/connectorCards/MetaMaskCard.tsx", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here is a holistic summary of the file 'example/components/connectorCards/MetaMaskCard.tsx':\n\n**MetaMask Card Component**: A React component that connects to MetaMask, displays account data, and renders a card with connection status, chain ID, accounts, provider, and ENS names."}
{"code": "import { useEffect, useState } from 'react'\n\nimport { URLS } from '../../chains'\nimport { hooks, network } from '../../connectors/network'\nimport { Card } from '../Card'\n\nconst { useChainId, useAccounts, useIsActivating, useIsActive, useProvider, useENSNames } = hooks\n\nconst CHAIN_IDS = Object.keys(URLS).map(Number)\n\nexport default function NetworkCard() {\n  const chainId = useChainId()\n  const accounts = useAccounts()\n  const isActivating = useIsActivating()\n\n  const isActive = useIsActive()\n\n  const provider = useProvider()\n  const ENSNames = useENSNames(provider)\n\n  const [error, setError] = useState(undefined)\n\n  // attempt to connect eagerly on mount\n  useEffect(() => {\n    void network.activate().catch(() => {\n      console.debug('Failed to connect to network')\n    })\n  }, [])\n\n  return (\n    <Card\n      connector={network}\n      activeChainId={chainId}\n      chainIds={CHAIN_IDS}\n      isActivating={isActivating}\n      isActive={isActive}\n      error={error}\n      setError={setError}\n      accounts={accounts}", "explanation": "Here is a concise summary:\n\n**NetworkCard Component**\n\nThis React component displays information about a blockchain network. It uses various hooks to fetch data from the network, such as chain ID, accounts, and ENS names. The component also attempts to connect to the network on mount and updates its state with any errors that occur.", "metadata": {"repo": "magiclabs/web3-react", "file": "example/components/connectorCards/NetworkCard.tsx", "chunk_number": 1, "total_chunks": 2}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here is a concise summary of the `NetworkCard` component:\n\n**NetworkCard Component**\n\nDisplays network information, fetching data via hooks on mount, and attempting connection with error handling."}
{"code": "      provider={provider}\n      ENSNames={ENSNames}\n    />\n  )\n}\n", "explanation": "This block is a React component that likely passes props (data) to a child element, specifically setting \"provider\" and \"ENSNames\" attributes or values.", "metadata": {"repo": "magiclabs/web3-react", "file": "example/components/connectorCards/NetworkCard.tsx", "chunk_number": 2, "total_chunks": 2}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here is a concise summary of the `NetworkCard` component:\n\n**NetworkCard Component**\n\nDisplays network information, fetching data via hooks on mount, and attempting connection with error handling."}
{"code": "import { URI_AVAILABLE } from '@web3-react/walletconnect'\nimport { useEffect, useState } from 'react'\n\nimport { hooks, walletConnect } from '../../connectors/walletConnect'\nimport { Card } from '../Card'\n\nconst { useChainId, useAccounts, useIsActivating, useIsActive, useProvider, useENSNames } = hooks\n\nexport default function WalletConnectCard() {\n  const chainId = useChainId()\n  const accounts = useAccounts()\n  const isActivating = useIsActivating()\n\n  const isActive = useIsActive()\n\n  const provider = useProvider()\n  const ENSNames = useENSNames(provider)\n\n  const [error, setError] = useState(undefined)\n\n  // log URI when available\n  useEffect(() => {\n    walletConnect.events.on(URI_AVAILABLE, (uri: string) => {\n      console.log(`uri: ${uri}`)\n    })\n  }, [])\n\n  // attempt to connect eagerly on mount\n  useEffect(() => {\n    walletConnect.connectEagerly().catch(() => {\n      console.debug('Failed to connect eagerly to walletconnect')\n    })\n  }, [])\n\n  return (\n    <Card\n      connector={walletConnect}", "explanation": "**Summary:**\n\nThis is a React functional component, `WalletConnectCard`, that integrates with WalletConnect using the `@web3-react/walletconnect` library. It displays a card with information about the user's wallet connection, including chain ID, accounts, activation status, and ENS names. The component also logs the URI when available and attempts to connect eagerly on mount.", "metadata": {"repo": "magiclabs/web3-react", "file": "example/components/connectorCards/WalletConnectCard.tsx", "chunk_number": 1, "total_chunks": 2}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here is a concise and to-the-point holistic summary of the file 'example/components/connectorCards/WalletConnectCard.tsx':\n\n\"This React component, `WalletConnectCard`, integrates with WalletConnect to manage user's Ethereum wallet/account state, displaying connection info and providing activation/deactivation functionality.\""}
{"code": "      activeChainId={chainId}\n      isActivating={isActivating}\n      isActive={isActive}\n      error={error}\n      setError={setError}\n      accounts={accounts}\n      provider={provider}\n      ENSNames={ENSNames}\n    />\n  )\n}\n", "explanation": "This block appears to be a React component, likely an Ethereum wallet or account manager. Its purpose is to manage user's active chain ID and account state, providing functionality for:\n\n* Activating/deactivating accounts\n* Handling errors\n* Displaying ENS (Ethereum Name Service) names\n* Integrating with provider libraries\n\nIn summary: This block manages user's Ethereum wallet or account state.", "metadata": {"repo": "magiclabs/web3-react", "file": "example/components/connectorCards/WalletConnectCard.tsx", "chunk_number": 2, "total_chunks": 2}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here is a concise and to-the-point holistic summary of the file 'example/components/connectorCards/WalletConnectCard.tsx':\n\n\"This React component, `WalletConnectCard`, integrates with WalletConnect to manage user's Ethereum wallet/account state, displaying connection info and providing activation/deactivation functionality.\""}
{"code": "import { URI_AVAILABLE } from '@web3-react/walletconnect-v2'\nimport { useEffect, useState } from 'react'\n\nimport { MAINNET_CHAINS } from '../../chains'\nimport { hooks, walletConnectV2 } from '../../connectors/walletConnectV2'\nimport { Card } from '../Card'\n\nconst CHAIN_IDS = Object.keys(MAINNET_CHAINS).map(Number)\n\nconst { useChainId, useAccounts, useIsActivating, useIsActive, useProvider, useENSNames } = hooks\n\nexport default function WalletConnectV2Card() {\n  const chainId = useChainId()\n  const accounts = useAccounts()\n  const isActivating = useIsActivating()\n\n  const isActive = useIsActive()\n\n  const provider = useProvider()\n  const ENSNames = useENSNames(provider)\n\n  const [error, setError] = useState(undefined)\n\n  // log URI when available\n  useEffect(() => {\n    walletConnectV2.events.on(URI_AVAILABLE, (uri: string) => {\n      console.log(`uri: ${uri}`)\n    })\n  }, [])\n\n  // attempt to connect eagerly on mount\n  useEffect(() => {\n    walletConnectV2.connectEagerly().catch((error) => {", "explanation": "Here is a concise summary of the block's purpose and functionality:\n\n**Purpose:** Displays a Wallet Connect V2 card, allowing users to connect their wallets and interact with Web3 services.\n\n**Functionality:**\n\n* Uses hooks from `walletConnectV2` to retrieve wallet data (chain ID, accounts, etc.)\n* Checks if the wallet is active and provides error handling\n* Logs URI availability when connected\n* Attempts to connect the wallet eagerly on mount", "metadata": {"repo": "magiclabs/web3-react", "file": "example/components/connectorCards/WalletConnectV2Card.tsx", "chunk_number": 1, "total_chunks": 2}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here is a concise summary:\n\n**WalletConnectV2Card**: Displays a card allowing users to connect their Wallet Connect V2 wallets, handles failed connections, and logs errors."}
{"code": "      console.debug('Failed to connect eagerly to walletconnect', error)\n    })\n  }, [])\n\n  return (\n    <Card\n      connector={walletConnectV2}\n      activeChainId={chainId}\n      chainIds={CHAIN_IDS}\n      isActivating={isActivating}\n      isActive={isActive}\n      error={error}\n      setError={setError}\n      accounts={accounts}\n      provider={provider}\n      ENSNames={ENSNames}\n    />\n  )\n}\n", "explanation": "**Purpose:** Handles failed connection attempts to WalletConnect.\n\n**Functionality:** Logs an error message and returns a Card component with the current state of connection.", "metadata": {"repo": "magiclabs/web3-react", "file": "example/components/connectorCards/WalletConnectV2Card.tsx", "chunk_number": 2, "total_chunks": 2}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here is a concise summary:\n\n**WalletConnectV2Card**: Displays a card allowing users to connect their Wallet Connect V2 wallets, handles failed connections, and logs errors."}
{"code": "import { CoinbaseWallet } from '@web3-react/coinbase-wallet'\nimport { initializeConnector } from '@web3-react/core'\n\nimport { URLS } from '../chains'\n\nexport const [coinbaseWallet, hooks] = initializeConnector<CoinbaseWallet>(\n  (actions) =>\n    new CoinbaseWallet({\n      actions,\n      options: {\n        url: URLS[1][0],\n        appName: 'web3-react',\n      },\n    })\n)\n", "explanation": "Here is a concise summary:\n\n**Purpose:** Initialize and configure a Coinbase Wallet connector for Web3 interactions.\n\n**Functionality:** Establishes a connection between a user's Coinbase wallet and a Web3 application, enabling wallet-related functionality such as authentication and transactions.", "metadata": {"repo": "magiclabs/web3-react", "file": "example/connectors/coinbaseWallet.ts", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here is a concise and to-the-point summary:\n\n**Summary:** Initializes and configures the Coinbase Wallet connector for seamless Web3 interactions, enabling authentication and transaction capabilities."}
{"code": "import { Eip1193Bridge } from '@ethersproject/experimental'\nimport { JsonRpcProvider } from '@ethersproject/providers'\nimport { initializeConnector } from '@web3-react/core'\nimport { EIP1193 } from '@web3-react/eip1193'\n\nimport { URLS } from '../chains'\n\nclass Eip1193BridgeWithoutAccounts extends Eip1193Bridge {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  request(request: { method: string; params?: any[] }): Promise<any> {\n    if (request.method === 'eth_requestAccounts' || request.method === 'eth_accounts') return Promise.resolve([])\n    return super.request(request)\n  }\n}\n\nconst ethersProvider = new JsonRpcProvider(URLS[1][0], 1)\nconst eip1193Provider = new Eip1193BridgeWithoutAccounts(ethersProvider.getSigner(), ethersProvider)\n\nexport const [eip1193, hooks] = initializeConnector<EIP1193>(\n  (actions) => new EIP1193({ actions, provider: eip1193Provider })\n)\n", "explanation": "Here is a concise summary:\n\n**Purpose:** Establish an Ethereum provider with Web3 support for dApps.\n\n**Functionality:** Initializes an Ethereum provider using the `Ethers` library, disables account management, and provides hooks for Web3 interactions.", "metadata": {"repo": "magiclabs/web3-react", "file": "example/connectors/eip1193.ts", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here is a concise holistic summary of the file 'example/connectors/eip1193.ts':\n\n**Establishes an EIP-1193-enabled Ethereum provider with Web3 support for dApps, initializing an Ethers provider and disabling account management.**"}
{"code": "import { initializeConnector } from '@web3-react/core'\nimport { EMPTY, Empty } from '@web3-react/empty'\n\nexport const [empty, hooks] = initializeConnector<Empty>(() => EMPTY)\n", "explanation": "**Summary**\n\nThis block initializes a connector for an empty web3 instance using `@web3-react/core`. It returns a connector and hooks for use in a React application when no Ethereum provider is available.", "metadata": {"repo": "magiclabs/web3-react", "file": "example/connectors/empty.ts", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here is a concise summary of the file 'example/connectors/empty.ts':\n\n\"Initializes an empty Web3 connector with @web3-react/core, returning a connector and hooks for use without an Ethereum provider.\""}
{"code": "import { initializeConnector } from '@web3-react/core'\nimport { GnosisSafe } from '@web3-react/gnosis-safe'\n\nexport const [gnosisSafe, hooks] = initializeConnector<GnosisSafe>((actions) => new GnosisSafe({ actions }))\n", "explanation": "This block initializes a connector for interacting with a Gnosis Safe multi-signature wallet using the Web3 React library.", "metadata": {"repo": "magiclabs/web3-react", "file": "example/connectors/gnosisSafe.ts", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here is a concise and to-the-point holistic summary:\n\nInitializes a Gnosis Safe connector using Web3 React for interacting with a multi-signature wallet."}
{"code": "import { initializeConnector } from '@web3-react/core'\nimport { MetaMask } from '@web3-react/metamask'\n\nexport const [metaMask, hooks] = initializeConnector<MetaMask>((actions) => new MetaMask({ actions }))\n", "explanation": "This block initializes a connection to MetaMask using the `@web3-react` library, allowing users to interact with their Ethereum account within an application.", "metadata": {"repo": "magiclabs/web3-react", "file": "example/connectors/metaMask.ts", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here is a concise holistic summary of the file 'example/connectors/metaMask.ts':\n\n\"Initializes and connects to MetaMask wallet using @web3-react, enabling Ethereum account interaction within the application.\""}
{"code": "import { initializeConnector } from '@web3-react/core'\nimport { Network } from '@web3-react/network'\n\nimport { URLS } from '../chains'\n\nexport const [network, hooks] = initializeConnector<Network>((actions) => new Network({ actions, urlMap: URLS }))\n", "explanation": "Here is a concise summary:\n\n**Purpose:** Initializes Web3 connector for interacting with Ethereum network.\n\n**Functionality:** Returns `network` object and `hooks` utility functions for using the initialized connector.", "metadata": {"repo": "magiclabs/web3-react", "file": "example/connectors/network.ts", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here is a concise holistic summary of the file 'example/connectors/network.ts':\n\n**Initializes and Exposes Ethereum Network Connector**: Returns a `network` object and utility hooks for interacting with the Ethereum network via Web3."}
{"code": "import { initializeConnector } from '@web3-react/core'\nimport { Url } from '@web3-react/url'\n\nimport { URLS } from '../chains'\n\nexport const [url, hooks] = initializeConnector<Url>((actions) => new Url({ actions, url: URLS[1][0] }))\n", "explanation": "This block initializes a Web3 connector with a custom URL configuration using `@web3-react/core`. It sets up an instance of `Url` with a specified URL from the `URLS` array.", "metadata": {"repo": "magiclabs/web3-react", "file": "example/connectors/url.ts", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here is a concise summary:\n\n**example/connectors/url.ts**: Initializes a Web3 connector with a custom URL configuration, utilizing a pre-defined URL from the `URLS` array."}
{"code": "import { initializeConnector } from '@web3-react/core'\nimport { WalletConnect } from '@web3-react/walletconnect'\n\nimport { URLS } from '../chains'\n\nexport const [walletConnect, hooks] = initializeConnector<WalletConnect>(\n  (actions) =>\n    new WalletConnect({\n      actions,\n      options: {\n        rpc: URLS,\n      },\n    })\n)\n", "explanation": "Here is a concise summary:\n\n**Purpose:** Initialize and configure Wallet Connect connector for Web3 interactions.\n**Functionality:** Creates a Wallet Connect instance with RPC URLs and provides hooks for usage in Web3 applications.", "metadata": {"repo": "magiclabs/web3-react", "file": "example/connectors/walletConnect.ts", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here is a concise and holistic summary of the file 'example/connectors/walletConnect.ts':\n\n**Purpose:** Initialize Wallet Connect for Web3 interactions, providing an RPC URL-enabled connector with usage hooks."}
{"code": "import { initializeConnector } from '@web3-react/core'\nimport { WalletConnect as WalletConnectV2 } from '@web3-react/walletconnect-v2'\n\nimport { MAINNET_CHAINS } from '../chains'\n\nconst [mainnet, ...optionalChains] = Object.keys(MAINNET_CHAINS).map(Number)\n\nexport const [walletConnectV2, hooks] = initializeConnector<WalletConnectV2>(\n  (actions) =>\n    new WalletConnectV2({\n      actions,\n      options: {\n        projectId: process.env.walletConnectProjectId,\n        chains: [mainnet],\n        optionalChains,\n        showQrModal: true,\n      },\n    })\n)\n", "explanation": "Here is a concise summary:\n\n**Purpose:** Initialize WalletConnect v2 connector for Web3 interactions.\n\n**Functionality:** Connects to WalletConnect, enabling wallet-based transactions on mainnet chains (with optional support for other chains).", "metadata": {"repo": "magiclabs/web3-react", "file": "example/connectors/walletConnectV2.ts", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here's a concise and to-the-point holistic summary of the file 'example/connectors/walletConnectV2.ts':\n\n**Summary:** Initializes a WalletConnect v2 connector for Web3 interactions, enabling wallet-based transactions on mainnet chains with optional support for other chains."}
{"code": "/// <reference types=\"next\" />\n/// <reference types=\"next/image-types/global\" />\n\n// NOTE: This file should not be edited\n// see https://nextjs.org/docs/basic-features/typescript for more information.\n", "explanation": "This block is a TypeScript configuration file that imports references from Next.js and its image module, serving as a setup file that should not be manually edited.", "metadata": {"repo": "magiclabs/web3-react", "file": "example/next-env.d.ts", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here is a concise and to-the-point summary:\n\n**example/next-env.d.ts**: A TypeScript configuration file for Next.js, importing necessary references for image processing and other dependencies."}
{"code": "/**\n * @type {import('next').NextConfig}\n */\nconst nextConfig = {\n  env: {\n    infuraKey: process.env.INFURA_KEY,\n    alchemyKey: process.env.ALCHEMY_KEY,\n    walletConnectProjectId: process.env.WALLET_CONNECT_PROJECT_ID,\n  },\n}\n\nmodule.exports = nextConfig\n", "explanation": "Here is a concise summary:\n\n**Purpose:** Define environment variables for Next.js project.\n\n**Functionality:** Exports a configuration object that sets environment variables for an application, specifically for interactions with blockchain APIs (Infura, Alchemy, Wallet Connect).", "metadata": {"repo": "magiclabs/web3-react", "file": "example/next.config.js", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here is a concise and holistic summary of the file 'example/next.config.js':\n\nDefines environment variables for a Next.js project, configuring API connections for interactions with blockchain services via Infura, Alchemy, and Wallet Connect."}
{"code": "import CoinbaseWalletCard from '../components/connectorCards/CoinbaseWalletCard'\nimport GnosisSafeCard from '../components/connectorCards/GnosisSafeCard'\nimport MetaMaskCard from '../components/connectorCards/MetaMaskCard'\nimport NetworkCard from '../components/connectorCards/NetworkCard'\nimport WalletConnectCard from '../components/connectorCards/WalletConnectCard'\nimport WalletConnectV2Card from '../components/connectorCards/WalletConnectV2Card'\nimport ProviderExample from '../components/ProviderExample'\n\nexport default function Home() {\n  return (\n    <>\n      <ProviderExample />\n      <div style={{ display: 'flex', flexFlow: 'wrap', fontFamily: 'sans-serif' }}>\n        <MetaMaskCard />\n        <WalletConnectV2Card />\n        <WalletConnectCard />\n        <CoinbaseWalletCard />\n        <NetworkCard />\n        <GnosisSafeCard />\n      </div>\n    </>\n  )\n}\n", "explanation": "This block appears to be a React JavaScript code snippet that defines a \"Home\" page component. Its purpose is to render a list of connector cards, each representing a different digital wallet provider (e.g., MetaMask, Coinbase Wallet), allowing users to choose their preferred connection method.", "metadata": {"repo": "magiclabs/web3-react", "file": "example/pages/index.tsx", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here is a concise summary:\n\n`example/pages/index.tsx`: A React component rendering a list of digital wallet connector cards for user selection."}
{"code": "{\n  \"compilerOptions\": {\n    \"target\": \"es5\",\n    \"lib\": [\n      \"dom\",\n      \"dom.iterable\",\n      \"esnext\"\n    ],\n    \"allowJs\": true,\n    \"skipLibCheck\": true,\n    \"strict\": false,\n    \"forceConsistentCasingInFileNames\": true,\n    \"noEmit\": true,\n    \"esModuleInterop\": true,\n    \"module\": \"esnext\",\n    \"moduleResolution\": \"node\",\n    \"resolveJsonModule\": true,\n    \"isolatedModules\": true,\n    \"jsx\": \"preserve\",\n    \"incremental\": true\n  },\n  \"include\": [\n    \"next-env.d.ts\",\n    \"**/*.ts\",\n    \"**/*.tsx\"\n  ],\n  \"exclude\": [\n    \"node_modules\"\n  ]\n}\n", "explanation": "Here is a concise summary of the block:\n\n**Configuration settings for TypeScript compiler**\n\n* Specifies target environment (ES5)\n* Allows JavaScript code and disables library checks\n* Enables features like ESNext and JSX support\n* Configures file inclusion, exclusion, and module resolution rules.", "metadata": {"repo": "magiclabs/web3-react", "file": "example/tsconfig.json", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here is a concise summary of the 'example/tsconfig.json' file:\n\n**TypeScript Configuration File**\n\nSpecifies target environment (ES5), enables JavaScript compatibility and future features, and configures project-specific settings for TypeScript compilation."}
{"code": "import { CoinbaseWallet } from '@web3-react/coinbase-wallet'\nimport { GnosisSafe } from '@web3-react/gnosis-safe'\nimport { MetaMask } from '@web3-react/metamask'\nimport { Network } from '@web3-react/network'\nimport type { Connector } from '@web3-react/types'\nimport { WalletConnect as WalletConnect } from '@web3-react/walletconnect'\nimport { WalletConnect as WalletConnectV2 } from '@web3-react/walletconnect-v2'\n\nexport function getName(connector: Connector) {\n  if (connector instanceof MetaMask) return 'MetaMask'\n  if (connector instanceof WalletConnectV2) return 'WalletConnect V2'\n  if (connector instanceof WalletConnect) return 'WalletConnect'\n  if (connector instanceof CoinbaseWallet) return 'Coinbase Wallet'\n  if (connector instanceof Network) return 'Network'\n  if (connector instanceof GnosisSafe) return 'Gnosis Safe'\n  return 'Unknown'\n}\n", "explanation": "**Summary**\n\nThis block imports various Web3 connectors from `@web3-react` library, including MetaMask, WalletConnect, CoinbaseWallet, and others. It also defines a function `getName` that returns the name of a given connector instance.", "metadata": {"repo": "magiclabs/web3-react", "file": "example/utils.ts", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here is a concise summary:\n\n**example/utils.ts**: Imports various Web3 connectors from `@web3-react` and defines a `getName` function for retrieving connector names."}
{"code": "module.exports = {\n  preset: 'ts-jest',\n  testEnvironment: 'jsdom',\n  moduleNameMapper: {\n    '^@web3-react/(.*)$': '<rootDir>/packages/$1/src',\n  },\n}\n", "explanation": "This block is a JavaScript configuration file that exports an object with settings for Jest, a testing framework. It:\n\n* Specifies a preset for TypeScript support\n* Uses jsdom as the test environment\n* Maps @web3-react module imports to local paths in the project.", "metadata": {"repo": "magiclabs/web3-react", "file": "jest.config.js", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here's a concise summary of the `jest.config.js` file:\n\n\"This Jest configuration file enables TypeScript support, uses jsdom as the test environment, and resolves external dependencies for the `@web3-react` module.\""}
{"code": "{\n  \"version\": \"independent\",\n  \"packages\": [\n    \"packages/*\",\n    \"example\"\n  ],\n  \"npmClient\": \"yarn\",\n  \"ignoreChanges\": [\"**/*.md\", \"**/*.spec.ts\"],\n  \"useWorkspaces\": true\n}\n", "explanation": "This block is a configuration file for managing dependencies in a project, specifically for use with the `yarn` package manager. It specifies which packages to include and ignore changes to certain files.", "metadata": {"repo": "magiclabs/web3-react", "file": "lerna.json", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here's a concise summary of the 'lerna.json' file:\n\n**Configuration file for Lerna**: Manages project dependencies, specifying included packages and ignoring file changes in specific directories."}
{"code": "# @web3-react/coinbase-wallet\n", "explanation": "This is a React library for integrating Coinbase Wallet with web3 applications, likely facilitating easy login and wallet interactions.", "metadata": {"repo": "magiclabs/web3-react", "file": "packages/coinbase-wallet/README.md", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here's a concise and to-the-point holistic summary of the file 'packages/coinbase-wallet/README.md':\n\n**Coinbase Wallet Integration Library**\n\nA lightweight React library that simplifies integrating Coinbase Wallet with web3 applications, enabling seamless user login and wallet interactions."}
{"code": "import { createWeb3ReactStoreAndActions } from '@web3-react/store'\nimport type { Actions, Web3ReactStore } from '@web3-react/types'\nimport { CoinbaseWallet } from '.'\nimport { MockEIP1193Provider } from '@web3-react/core'\n\njest.mock(\n  '@coinbase/wallet-sdk',\n  () =>\n    class MockCoinbaseWallet {\n      makeWeb3Provider() {\n        return new MockEIP1193Provider()\n      }\n    }\n)\n\nconst chainId = '0x1'\nconst accounts: string[] = []\n\ndescribe('Coinbase Wallet', () => {\n  let store: Web3ReactStore\n  let connector: CoinbaseWallet\n  let mockProvider: MockEIP1193Provider\n\n  describe('connectEagerly = true', () => {\n    beforeEach(async () => {\n      let actions: Actions\n      ;[store, actions] = createWeb3ReactStoreAndActions()\n      connector = new CoinbaseWallet({\n        actions,\n        options: {\n          appName: 'test',\n          url: 'https://mock.url',\n        },\n      })\n      await connector.connectEagerly().catch(() => {})\n\n      mockProvider = connector.provider as unknown as MockEIP1193Provider", "explanation": "Here is a concise summary:\n\n**Purpose:** Test the Coinbase Wallet provider.\n\n**Functionality:** This block mocks the Coinbase Wallet provider, sets up a Web3React store and actions, creates a CoinbaseWallet instance, and connects it eagerly to test its functionality.", "metadata": {"repo": "magiclabs/web3-react", "file": "packages/coinbase-wallet/src/index.spec.ts", "chunk_number": 1, "total_chunks": 2}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here's a concise holistic summary:\n\n**Purpose:** Test Coinbase Wallet provider functionality.\n\n**Functionality:** Mocks provider, sets up Web3 store, creates instance, connects eagerly to test interactions and state updates."}
{"code": "      mockProvider.chainId = chainId\n      mockProvider.accounts = accounts\n    })\n\n    test('#activate', async () => {\n      await connector.activate()\n\n      expect(mockProvider.eth_requestAccounts).toHaveBeenCalled()\n      expect(mockProvider.eth_accounts).not.toHaveBeenCalled()\n      expect(mockProvider.eth_chainId).toHaveBeenCalled()\n      expect(mockProvider.eth_chainId.mock.invocationCallOrder[0])\n        .toBeGreaterThan(mockProvider.eth_requestAccounts.mock.invocationCallOrder[0])\n\n      expect(store.getState()).toEqual({\n        chainId: Number.parseInt(chainId, 16),\n        accounts,\n        activating: false,\n      })\n    })\n  })\n})\n", "explanation": "Here is a concise summary:\n\nThis block tests the `activate` method of a connector by verifying its interactions with a mock provider and updating application state.", "metadata": {"repo": "magiclabs/web3-react", "file": "packages/coinbase-wallet/src/index.spec.ts", "chunk_number": 2, "total_chunks": 2}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here's a concise holistic summary:\n\n**Purpose:** Test Coinbase Wallet provider functionality.\n\n**Functionality:** Mocks provider, sets up Web3 store, creates instance, connects eagerly to test interactions and state updates."}
{"code": "import type { CoinbaseWalletProvider, CoinbaseWalletSDK } from '@coinbase/wallet-sdk'\nimport type {\n  Actions,\n  AddEthereumChainParameter,\n  ProviderConnectInfo,\n  ProviderRpcError,\n  WatchAssetParameters,\n} from '@web3-react/types'\nimport { Connector } from '@web3-react/types'\n\nfunction parseChainId(chainId: string | number) {\n  return typeof chainId === 'number' ? chainId : Number.parseInt(chainId, chainId.startsWith('0x') ? 16 : 10)\n}\n\ntype CoinbaseWalletSDKOptions = ConstructorParameters<typeof CoinbaseWalletSDK>[0] & { url: string }\n\n/**\n * @param options - Options to pass to `@coinbase/wallet-sdk`.\n * @param onError - Handler to report errors thrown from eventListeners.\n */\nexport interface CoinbaseWalletConstructorArgs {\n  actions: Actions\n  options: CoinbaseWalletSDKOptions\n  onError?: (error: Error) => void\n}\n\nexport class CoinbaseWallet extends Connector {\n  /** {@inheritdoc Connector.provider} */\n  public provider: CoinbaseWalletProvider | undefined\n\n  private readonly options: CoinbaseWalletSDKOptions", "explanation": "Here is a concise summary of the purpose and functionality of this block:\n\n**Purpose:** A class-based connector for interacting with the Coinbase Wallet SDK.\n\n**Functionality:** Allows users to connect their Coinbase wallet to Web3 applications, providing an interface for handling errors and customizing SDK options.", "metadata": {"repo": "magiclabs/web3-react", "file": "packages/coinbase-wallet/src/index.ts", "chunk_number": 1, "total_chunks": 8}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here's a concise summary of the file 'packages/coinbase-wallet/src/index.ts':\n\n**Coinbase Wallet Connector**\n\nThis class-based connector enables users to connect their Coinbase wallet to Web3 applications, providing an interface for handling errors and customizing SDK options.\n\nIt initializes a Coinbase Wallet SDK instance, handles events from an Ethereum provider, updates application state accordingly, and provides methods to:\n\n* Switch between Ethereum chains\n* Activate Ethereum wallets with specified chain IDs\n* Watch ERC20 assets on blockchain providers\n\nOverall, this connector streamlines the process of connecting Coinbase wallets to Web3 applications."}
{"code": "  private eagerConnection?: Promise<void>\n\n  /**\n   * A `CoinbaseWalletSDK` instance.\n   */\n  public coinbaseWallet: CoinbaseWalletSDK | undefined\n\n  constructor({ actions, options, onError }: CoinbaseWalletConstructorArgs) {\n    super(actions, onError)\n    this.options = options\n  }\n\n  // the `connected` property, is bugged, but this works as a hack to check connection status\n  private get connected() {\n    return !!this.provider?.selectedAddress\n  }\n\n  private async isomorphicInitialize(): Promise<void> {\n    if (this.eagerConnection) return\n\n    await (this.eagerConnection = import('@coinbase/wallet-sdk').then((m) => {\n      const { url, ...options } = this.options\n      this.coinbaseWallet = new m.default(options)\n      this.provider = this.coinbaseWallet.makeWeb3Provider(url)\n\n      this.provider.on('connect', ({ chainId }: ProviderConnectInfo): void => {\n        this.actions.update({ chainId: parseChainId(chainId) })\n      })\n\n      this.provider.on('disconnect', (error: ProviderRpcError): void => {", "explanation": "Here is a concise summary:\n\n**Purpose:** Initialize Coinbase Wallet SDK instance.\n\n**Functionality:**\n\n* Provides an instance of `CoinbaseWalletSDK` via `this.coinbaseWallet`.\n* Initializes a web3 provider using the `makeWeb3Provider` method.\n* Listens for connection and disconnection events from the provider to update internal state.", "metadata": {"repo": "magiclabs/web3-react", "file": "packages/coinbase-wallet/src/index.ts", "chunk_number": 2, "total_chunks": 8}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here's a concise summary of the file 'packages/coinbase-wallet/src/index.ts':\n\n**Coinbase Wallet Connector**\n\nThis class-based connector enables users to connect their Coinbase wallet to Web3 applications, providing an interface for handling errors and customizing SDK options.\n\nIt initializes a Coinbase Wallet SDK instance, handles events from an Ethereum provider, updates application state accordingly, and provides methods to:\n\n* Switch between Ethereum chains\n* Activate Ethereum wallets with specified chain IDs\n* Watch ERC20 assets on blockchain providers\n\nOverall, this connector streamlines the process of connecting Coinbase wallets to Web3 applications."}
{"code": "        this.actions.resetState()\n        this.onError?.(error)\n      })\n\n      this.provider.on('chainChanged', (chainId: string): void => {\n        this.actions.update({ chainId: parseChainId(chainId) })\n      })\n\n      this.provider.on('accountsChanged', (accounts: string[]): void => {\n        if (accounts.length === 0) {\n          // handle this edge case by disconnecting\n          this.actions.resetState()\n        } else {\n          this.actions.update({ accounts })\n        }\n      })\n    }))\n  }\n\n  /** {@inheritdoc Connector.connectEagerly} */\n  public async connectEagerly(): Promise<void> {\n    const cancelActivation = this.actions.startActivation()\n\n    try {\n      await this.isomorphicInitialize()\n\n      if (!this.provider || !this.connected) throw new Error('No existing connection')\n\n      // Wallets may resolve eth_chainId and hang on eth_accounts pending user interaction, which may include changing\n      // chains; they should be requested serially, with accounts first, so that the chainId can settle.", "explanation": "Here is a concise summary of the purpose and functionality:\n\n**Purpose:** Handle events from an Ethereum provider and update application state accordingly.\n\n**Functionality:**\n\n* Call `resetState` when an error occurs or on account change (if accounts array is empty).\n* Update application state with new chain ID when it changes.\n* Update application state with new account list when it changes, unless it's empty (in which case reset the state).", "metadata": {"repo": "magiclabs/web3-react", "file": "packages/coinbase-wallet/src/index.ts", "chunk_number": 3, "total_chunks": 8}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here's a concise summary of the file 'packages/coinbase-wallet/src/index.ts':\n\n**Coinbase Wallet Connector**\n\nThis class-based connector enables users to connect their Coinbase wallet to Web3 applications, providing an interface for handling errors and customizing SDK options.\n\nIt initializes a Coinbase Wallet SDK instance, handles events from an Ethereum provider, updates application state accordingly, and provides methods to:\n\n* Switch between Ethereum chains\n* Activate Ethereum wallets with specified chain IDs\n* Watch ERC20 assets on blockchain providers\n\nOverall, this connector streamlines the process of connecting Coinbase wallets to Web3 applications."}
{"code": "      const accounts = await this.provider.request<string[]>({ method: 'eth_accounts' })\n      if (!accounts.length) throw new Error('No accounts returned')\n      const chainId = await this.provider.request<string>({ method: 'eth_chainId' })\n      this.actions.update({ chainId: parseChainId(chainId), accounts })\n    } catch (error) {\n      cancelActivation()\n      throw error\n    }\n  }\n\n  /**\n   * Initiates a connection.\n   *\n   * @param desiredChainIdOrChainParameters - If defined, indicates the desired chain to connect to. If the user is\n   * already connected to this chain, no additional steps will be taken. Otherwise, the user will be prompted to switch\n   * to the chain, if one of two conditions is met: either they already have it added, or the argument is of type\n   * AddEthereumChainParameter, in which case the user will be prompted to add the chain with the specified parameters\n   * first, before being prompted to switch.\n   */", "explanation": "Here is a concise summary:\n\n**Block Purpose:** Updates Ethereum connection state by fetching account information.\n\n**Functionality:**\n\n* Fetches accounts using `eth_accounts` method from provider.\n* Checks if any accounts are returned, throwing an error if not.\n* Retrieves current chain ID and updates state with parsed chain ID and account list.", "metadata": {"repo": "magiclabs/web3-react", "file": "packages/coinbase-wallet/src/index.ts", "chunk_number": 4, "total_chunks": 8}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here's a concise summary of the file 'packages/coinbase-wallet/src/index.ts':\n\n**Coinbase Wallet Connector**\n\nThis class-based connector enables users to connect their Coinbase wallet to Web3 applications, providing an interface for handling errors and customizing SDK options.\n\nIt initializes a Coinbase Wallet SDK instance, handles events from an Ethereum provider, updates application state accordingly, and provides methods to:\n\n* Switch between Ethereum chains\n* Activate Ethereum wallets with specified chain IDs\n* Watch ERC20 assets on blockchain providers\n\nOverall, this connector streamlines the process of connecting Coinbase wallets to Web3 applications."}
{"code": "  public async activate(desiredChainIdOrChainParameters?: number | AddEthereumChainParameter): Promise<void> {\n    const desiredChainId =\n      typeof desiredChainIdOrChainParameters === 'number'\n        ? desiredChainIdOrChainParameters\n        : desiredChainIdOrChainParameters?.chainId\n\n    if (this.provider && this.connected) {\n      if (!desiredChainId || desiredChainId === parseChainId(this.provider.chainId)) return\n\n      const desiredChainIdHex = `0x${desiredChainId.toString(16)}`\n      return this.provider\n        .request<void>({\n          method: 'wallet_switchEthereumChain',\n          params: [{ chainId: desiredChainIdHex }],\n        })\n        .catch(async (error: ProviderRpcError) => {\n          if (error.code === 4902 && typeof desiredChainIdOrChainParameters !== 'number') {\n            if (!this.provider) throw new Error('No provider')\n            // if we're here, we can try to add a new network\n            return this.provider.request<void>({", "explanation": "Here is a concise summary:\n\n**Purpose:** Switch between Ethereum chains using the `wallet_switchEthereumChain` method.\n\n**Functionality:**\n\n* Accepts an optional chain ID or parameters as input.\n* If already connected, switches to the desired chain if it's different from the current one.\n* If not connected, attempts to add a new network if chain parameters are provided.", "metadata": {"repo": "magiclabs/web3-react", "file": "packages/coinbase-wallet/src/index.ts", "chunk_number": 5, "total_chunks": 8}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here's a concise summary of the file 'packages/coinbase-wallet/src/index.ts':\n\n**Coinbase Wallet Connector**\n\nThis class-based connector enables users to connect their Coinbase wallet to Web3 applications, providing an interface for handling errors and customizing SDK options.\n\nIt initializes a Coinbase Wallet SDK instance, handles events from an Ethereum provider, updates application state accordingly, and provides methods to:\n\n* Switch between Ethereum chains\n* Activate Ethereum wallets with specified chain IDs\n* Watch ERC20 assets on blockchain providers\n\nOverall, this connector streamlines the process of connecting Coinbase wallets to Web3 applications."}
{"code": "              method: 'wallet_addEthereumChain',\n              params: [{ ...desiredChainIdOrChainParameters, chainId: desiredChainIdHex }],\n            })\n          }\n\n          throw error\n        })\n    }\n\n    const cancelActivation = this.actions.startActivation()\n\n    try {\n      await this.isomorphicInitialize()\n      if (!this.provider) throw new Error('No provider')\n\n      // Wallets may resolve eth_chainId and hang on eth_accounts pending user interaction, which may include changing\n      // chains; they should be requested serially, with accounts first, so that the chainId can settle.\n      const accounts = await this.provider.request<string[]>({ method: 'eth_requestAccounts' })\n      const chainId = await this.provider.request<string>({ method: 'eth_chainId' })\n      const receivedChainId = parseChainId(chainId)\n\n      if (!desiredChainId || desiredChainId === receivedChainId)\n        return this.actions.update({ chainId: receivedChainId, accounts })\n", "explanation": "Here is a concise summary:\n\n**Purpose:** Activate Ethereum wallet with specified chain ID.\n\n**Functionality:**\n\n* Request user's Ethereum account(s) from provider\n* Get current Ethereum chain ID\n* Compare desired chain ID with received chain ID; if match, update state with new chain ID and accounts.", "metadata": {"repo": "magiclabs/web3-react", "file": "packages/coinbase-wallet/src/index.ts", "chunk_number": 6, "total_chunks": 8}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here's a concise summary of the file 'packages/coinbase-wallet/src/index.ts':\n\n**Coinbase Wallet Connector**\n\nThis class-based connector enables users to connect their Coinbase wallet to Web3 applications, providing an interface for handling errors and customizing SDK options.\n\nIt initializes a Coinbase Wallet SDK instance, handles events from an Ethereum provider, updates application state accordingly, and provides methods to:\n\n* Switch between Ethereum chains\n* Activate Ethereum wallets with specified chain IDs\n* Watch ERC20 assets on blockchain providers\n\nOverall, this connector streamlines the process of connecting Coinbase wallets to Web3 applications."}
{"code": "      // if we're here, we can try to switch networks\n      const desiredChainIdHex = `0x${desiredChainId.toString(16)}`\n      return this.provider\n        ?.request<void>({\n          method: 'wallet_switchEthereumChain',\n          params: [{ chainId: desiredChainIdHex }],\n        })\n        .catch(async (error: ProviderRpcError) => {\n          if (error.code === 4902 && typeof desiredChainIdOrChainParameters !== 'number') {\n            if (!this.provider) throw new Error('No provider')\n            // if we're here, we can try to add a new network\n            return this.provider.request<void>({\n              method: 'wallet_addEthereumChain',\n              params: [{ ...desiredChainIdOrChainParameters, chainId: desiredChainIdHex }],\n            })\n          }\n\n          throw error\n        })\n    } catch (error) {\n      cancelActivation()\n      throw error\n    }\n  }\n\n  /** {@inheritdoc Connector.deactivate} */\n  public deactivate(): void {\n    this.coinbaseWallet?.disconnect()\n  }\n\n  public async watchAsset({", "explanation": "Here are the summaries:\n\n**First block:**\nThis block attempts to switch to a new Ethereum network by calling `wallet_switchEthereumChain` on the provider, or if that fails, it tries to add a new network using `wallet_addEthereumChain`.\n\n**Second block:**\nThis method (`watchAsset`) is not described in the provided text. However, I can tell you that it's likely an async function that performs some operation related to watching (monitoring) assets.", "metadata": {"repo": "magiclabs/web3-react", "file": "packages/coinbase-wallet/src/index.ts", "chunk_number": 7, "total_chunks": 8}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here's a concise summary of the file 'packages/coinbase-wallet/src/index.ts':\n\n**Coinbase Wallet Connector**\n\nThis class-based connector enables users to connect their Coinbase wallet to Web3 applications, providing an interface for handling errors and customizing SDK options.\n\nIt initializes a Coinbase Wallet SDK instance, handles events from an Ethereum provider, updates application state accordingly, and provides methods to:\n\n* Switch between Ethereum chains\n* Activate Ethereum wallets with specified chain IDs\n* Watch ERC20 assets on blockchain providers\n\nOverall, this connector streamlines the process of connecting Coinbase wallets to Web3 applications."}
{"code": "    address,\n    symbol,\n    decimals,\n    image,\n  }: Pick<WatchAssetParameters, 'address'> & Partial<Omit<WatchAssetParameters, 'address'>>): Promise<true> {\n    if (!this.provider) throw new Error('No provider')\n\n    return this.provider\n      .request({\n        method: 'wallet_watchAsset',\n        params: {\n          type: 'ERC20',\n          options: {\n            address, // The address that the token is at.\n            symbol, // A ticker symbol or shorthand, up to 5 chars.\n            decimals, // The number of decimals in the token\n            image, // A string url of the token logo\n          },\n        },\n      })\n      .then((success) => {\n        if (!success) throw new Error('Rejected')\n        return true\n      })\n  }\n}\n", "explanation": "**Function Purpose:**\nWatch an ERC20 asset on a blockchain provider.\n\n**Functionality:**\n\n* Requests `wallet_watchAsset` method from provider with specified parameters (address, symbol, decimals, image)\n* Returns a promise resolving to `true` if successful\n* Throws error if provider is not set or request fails", "metadata": {"repo": "magiclabs/web3-react", "file": "packages/coinbase-wallet/src/index.ts", "chunk_number": 8, "total_chunks": 8}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here's a concise summary of the file 'packages/coinbase-wallet/src/index.ts':\n\n**Coinbase Wallet Connector**\n\nThis class-based connector enables users to connect their Coinbase wallet to Web3 applications, providing an interface for handling errors and customizing SDK options.\n\nIt initializes a Coinbase Wallet SDK instance, handles events from an Ethereum provider, updates application state accordingly, and provides methods to:\n\n* Switch between Ethereum chains\n* Activate Ethereum wallets with specified chain IDs\n* Watch ERC20 assets on blockchain providers\n\nOverall, this connector streamlines the process of connecting Coinbase wallets to Web3 applications."}
{"code": "{\n  \"extends\": \"../../tsconfig.json\",\n  \"include\": [\"./src\"],\n  \"compilerOptions\": {\n    \"outDir\": \"./dist\"\n  }\n}\n", "explanation": "This block is a configuration file for a TypeScript compiler, specifically configuring it to:\n\n* Extend an existing `tsconfig.json` file\n* Compile files in the `./src` directory\n* Output compiled code to the `./dist` directory", "metadata": {"repo": "magiclabs/web3-react", "file": "packages/coinbase-wallet/tsconfig.json", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here is a concise summary of the 'packages/coinbase-wallet/tsconfig.json' file:\n\n**TSConfig File**\n\n Configures TypeScript compiler to compile **./src** files and output compiled code to **./dist**."}
{"code": "# @web3-react/core\n", "explanation": "This is a library reference for Web3 React Core.", "metadata": {"repo": "magiclabs/web3-react", "file": "packages/core/README.md", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Unfortunately, you didn't provide the actual code blocks. However, I can still help you write a concise and to-the-point summary based on your description.\n\nHere's a possible summary:\n\n**Web3 React Core Library Reference**\n\nA comprehensive guide to Web3 React Core, providing an overview of its library features and functionality for building blockchain-based applications with React."}
{"code": "import { Web3Provider } from '@ethersproject/providers'\nimport { act, renderHook } from '@testing-library/react-hooks'\nimport type { Actions } from '@web3-react/types'\nimport { Connector } from '@web3-react/types'\nimport EventEmitter from 'events'\nimport type { Web3ReactHooks, Web3ReactPriorityHooks, Web3ReactSelectedHooks } from './hooks'\nimport { getPriorityConnector, getSelectedConnector, initializeConnector } from './hooks'\n\nclass MockProvider extends EventEmitter {\n  request = jest.fn()\n}\n\nclass MockConnector extends Connector {\n  provider = new MockProvider()\n\n  constructor(actions: Actions) {\n    super(actions)\n  }\n  public activate() {\n    this.actions.startActivation()\n  }\n  public update(...args: Parameters<Actions['update']>) {\n    this.actions.update(...args)\n  }\n}\n\nclass MockConnector2 extends MockConnector {}\n\ndescribe('#initializeConnector', () => {\n  let connector: MockConnector\n  let hooks: Web3ReactHooks\n\n  beforeEach(() => {", "explanation": "Here is a concise summary of the purpose and functionality of this block:\n\n**Summary**\n\nThis code defines mock implementations for Web3 React providers and connectors, used for testing purposes. It includes mock classes `MockProvider` and `MockConnector`, which mimic the behavior of real Web3 providers and connectors. The `initializeConnector` function is tested using these mocks.", "metadata": {"repo": "magiclabs/web3-react", "file": "packages/core/src/hooks.spec.ts", "chunk_number": 1, "total_chunks": 7}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here is a concise summary:\n\n**Summary**\n\nThis file tests the functionality of various React hooks in a Web3React context, including `useChainId`, `useAccounts`, `useProvider`, `getSelectedConnector`, `useSelectedIsActive`, and a Priority Connector system. The tests verify that these hooks behave as expected when triggered by user interactions or updates to accounts and connectors."}
{"code": "    ;[connector, hooks] = initializeConnector((actions) => new MockConnector(actions))\n  })\n\n  test('#useChainId', () => {\n    const { result } = renderHook(() => hooks.useChainId())\n    expect(result.current).toBe(undefined)\n\n    act(() => connector.update({ chainId: 1 }))\n    expect(result.current).toBe(1)\n  })\n\n  describe('#useAccounts', () => {\n    test('empty', () => {\n      const { result } = renderHook(() => hooks.useAccounts())\n      expect(result.current).toBe(undefined)\n\n      act(() => connector.update({ accounts: [] }))\n      expect(result.current).toEqual([])\n    })\n\n    test('single', () => {\n      const { result } = renderHook(() => hooks.useAccounts())\n      expect(result.current).toBe(undefined)\n\n      act(() => connector.update({ accounts: ['0x0000000000000000000000000000000000000000'] }))\n      expect(result.current).toEqual(['0x0000000000000000000000000000000000000000'])\n    })\n\n    test('multiple', () => {\n      const { result } = renderHook(() => hooks.useAccounts())", "explanation": "Here is a concise summary:\n\n**Block Purpose:** Test functionality of `useChainId` and `useAccounts` hooks.\n\n**Functionality:**\n\n1. Initialize a connector with mock data.\n2. Test `useChainId` hook:\n\t* Initial value is undefined.\n\t* Updates to chain ID from connector update the hook's value.\n3. Test `useAccounts` hook:\n\t* Initial value is undefined for empty, single, and multiple accounts scenarios.\n\t* Updates to accounts from connector update the hook's value to match the updated accounts array.", "metadata": {"repo": "magiclabs/web3-react", "file": "packages/core/src/hooks.spec.ts", "chunk_number": 2, "total_chunks": 7}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here is a concise summary:\n\n**Summary**\n\nThis file tests the functionality of various React hooks in a Web3React context, including `useChainId`, `useAccounts`, `useProvider`, `getSelectedConnector`, `useSelectedIsActive`, and a Priority Connector system. The tests verify that these hooks behave as expected when triggered by user interactions or updates to accounts and connectors."}
{"code": "      expect(result.current).toBe(undefined)\n\n      act(() =>\n        connector.update({\n          accounts: ['0x0000000000000000000000000000000000000000', '0x0000000000000000000000000000000000000001'],\n        })\n      )\n      expect(result.current).toEqual([\n        '0x0000000000000000000000000000000000000000',\n        '0x0000000000000000000000000000000000000001',\n      ])\n    })\n  })\n\n  test('#useIsActivating', () => {\n    const { result } = renderHook(() => hooks.useIsActivating())\n    expect(result.current).toBe(false)\n\n    act(() => connector.activate())\n    expect(result.current).toEqual(true)\n  })\n\n  test('#useIsActive', () => {\n    const { result } = renderHook(() => hooks.useIsActive())\n    expect(result.current).toBe(false)\n\n    act(() => connector.update({ chainId: 1, accounts: [] }))\n    expect(result.current).toEqual(true)\n  })\n\n  describe('#useProvider', () => {\n    test('lazy loads Web3Provider and rerenders', async () => {\n      act(() => connector.update({ chainId: 1, accounts: [] }))\n", "explanation": "Here is a concise summary of the purpose and functionality:\n\n**Testing Hooks**\n\nThis block tests various React hooks, specifically their behavior when triggered by user interactions (e.g., updating accounts or activating a connection). The tests verify that the hooks return expected values in response to these actions.", "metadata": {"repo": "magiclabs/web3-react", "file": "packages/core/src/hooks.spec.ts", "chunk_number": 3, "total_chunks": 7}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here is a concise summary:\n\n**Summary**\n\nThis file tests the functionality of various React hooks in a Web3React context, including `useChainId`, `useAccounts`, `useProvider`, `getSelectedConnector`, `useSelectedIsActive`, and a Priority Connector system. The tests verify that these hooks behave as expected when triggered by user interactions or updates to accounts and connectors."}
{"code": "      const { result, waitForNextUpdate } = renderHook(() => hooks.useProvider())\n      expect(result.current).toBeUndefined()\n      await waitForNextUpdate()\n      expect(result.current).toBeInstanceOf(Web3Provider)\n    })\n  })\n})\n\ndescribe('#getSelectedConnector', () => {\n  let connector: MockConnector\n  let hooks: Web3ReactHooks\n\n  let connector2: MockConnector\n  let hooks2: Web3ReactHooks\n\n  let selectedConnectorHooks: Web3ReactSelectedHooks\n\n  beforeEach(() => {\n    ;[connector, hooks] = initializeConnector((actions) => new MockConnector(actions))\n    ;[connector2, hooks2] = initializeConnector((actions) => new MockConnector2(actions))\n\n    selectedConnectorHooks = getSelectedConnector([connector, hooks], [connector2, hooks2])\n  })\n\n  test('isActive is false for connector', () => {\n    const {\n      result: { current: isActive },\n    } = renderHook(() => selectedConnectorHooks.useSelectedIsActive(connector))\n\n    expect(isActive).toBe(false)\n  })\n\n  test('isActive is false for connector2', () => {\n    const {", "explanation": "Here's a concise summary:\n\nThis block tests the functionality of Web3React hooks, specifically:\n\n* Verifying that `useProvider()` returns an instance of `Web3Provider`.\n* Testing `getSelectedConnector` with two mock connectors, ensuring it correctly identifies the inactive ones.\n\nIn short, this code suite checks if the library's hooks behave as expected.", "metadata": {"repo": "magiclabs/web3-react", "file": "packages/core/src/hooks.spec.ts", "chunk_number": 4, "total_chunks": 7}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here is a concise summary:\n\n**Summary**\n\nThis file tests the functionality of various React hooks in a Web3React context, including `useChainId`, `useAccounts`, `useProvider`, `getSelectedConnector`, `useSelectedIsActive`, and a Priority Connector system. The tests verify that these hooks behave as expected when triggered by user interactions or updates to accounts and connectors."}
{"code": "      result: { current: isActive },\n    } = renderHook(() => selectedConnectorHooks.useSelectedIsActive(connector2))\n\n    expect(isActive).toBe(false)\n  })\n\n  test('connector active', () => {\n    act(() => connector.update({ chainId: 1, accounts: [] }))\n    const {\n      result: { current: isActive },\n    } = renderHook(() => selectedConnectorHooks.useSelectedIsActive(connector))\n\n    const {\n      result: { current: isActive2 },\n    } = renderHook(() => selectedConnectorHooks.useSelectedIsActive(connector2))\n\n    expect(isActive).toBe(true)\n    expect(isActive2).toBe(false)\n  })\n\n  test('connector2 active', () => {\n    act(() => connector2.update({ chainId: 1, accounts: [] }))\n    const {\n      result: { current: isActive },\n    } = renderHook(() => selectedConnectorHooks.useSelectedIsActive(connector))\n\n    const {\n      result: { current: isActive2 },\n    } = renderHook(() => selectedConnectorHooks.useSelectedIsActive(connector2))\n\n    expect(isActive).toBe(false)\n    expect(isActive2).toBe(true)\n  })\n})\n", "explanation": "Here is a summary of the block's purpose and functionality:\n\n**Purpose:** Test the `useSelectedIsActive` hook from `selectedConnectorHooks`.\n\n**Functionality:** Verify the behavior of the `useSelectedIsActive` hook when used with different connectors (`connector`, `connector2`) in various states (active, inactive).", "metadata": {"repo": "magiclabs/web3-react", "file": "packages/core/src/hooks.spec.ts", "chunk_number": 5, "total_chunks": 7}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here is a concise summary:\n\n**Summary**\n\nThis file tests the functionality of various React hooks in a Web3React context, including `useChainId`, `useAccounts`, `useProvider`, `getSelectedConnector`, `useSelectedIsActive`, and a Priority Connector system. The tests verify that these hooks behave as expected when triggered by user interactions or updates to accounts and connectors."}
{"code": "describe('#getPriorityConnector', () => {\n  let connector: MockConnector\n  let hooks: Web3ReactHooks\n\n  let connector2: MockConnector\n  let hooks2: Web3ReactHooks\n\n  let priorityConnectorHooks: Web3ReactPriorityHooks\n\n  beforeEach(() => {\n    ;[connector, hooks] = initializeConnector((actions) => new MockConnector(actions))\n    ;[connector2, hooks2] = initializeConnector((actions) => new MockConnector2(actions))\n\n    priorityConnectorHooks = getPriorityConnector([connector, hooks], [connector2, hooks2])\n  })\n\n  test('returns first connector if both are uninitialized', () => {\n    const {\n      result: { current: priorityConnector },\n    } = renderHook(() => priorityConnectorHooks.usePriorityConnector())\n\n    expect(priorityConnector).toBeInstanceOf(MockConnector)\n    expect(priorityConnector).not.toBeInstanceOf(MockConnector2)\n  })\n\n  test('returns first connector if it is initialized', () => {\n    act(() => connector.update({ chainId: 1, accounts: [] }))\n    const {\n      result: { current: priorityConnector },", "explanation": "**Purpose:** Returns a priority connector based on initialization status.\n\n**Functionality:** A function that takes an array of connectors as input and returns the first initialized connector, or the first one if both are uninitialized. If a connector is updated after initializiation, it becomes the returned priority connector.", "metadata": {"repo": "magiclabs/web3-react", "file": "packages/core/src/hooks.spec.ts", "chunk_number": 6, "total_chunks": 7}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here is a concise summary:\n\n**Summary**\n\nThis file tests the functionality of various React hooks in a Web3React context, including `useChainId`, `useAccounts`, `useProvider`, `getSelectedConnector`, `useSelectedIsActive`, and a Priority Connector system. The tests verify that these hooks behave as expected when triggered by user interactions or updates to accounts and connectors."}
{"code": "    } = renderHook(() => priorityConnectorHooks.usePriorityConnector())\n\n    const {\n      result: { current: isActive },\n    } = renderHook(() => priorityConnectorHooks.usePriorityIsActive())\n    expect(isActive).toBe(true)\n\n    expect(priorityConnector).toBeInstanceOf(MockConnector)\n    expect(priorityConnector).not.toBeInstanceOf(MockConnector2)\n  })\n\n  test('returns second connector if it is initialized', () => {\n    act(() => connector2.update({ chainId: 1, accounts: [] }))\n    const {\n      result: { current: priorityConnector },\n    } = renderHook(() => priorityConnectorHooks.usePriorityConnector())\n\n    const {\n      result: { current: isActive },\n    } = renderHook(() => priorityConnectorHooks.usePriorityIsActive())\n    expect(isActive).toBe(true)\n\n    expect(priorityConnector).toBeInstanceOf(MockConnector2)\n  })\n})\n", "explanation": "Here is a concise summary:\n\n**Block Purpose:** Test suite for a Priority Connector system.\n\n**Functionality:**\n\n1. Verifies that the priority connector is initialized correctly.\n2. Tests that the second connector is returned if it's initialized, otherwise returns the first connector.\n3. Checks the instance type of the returned connector.", "metadata": {"repo": "magiclabs/web3-react", "file": "packages/core/src/hooks.spec.ts", "chunk_number": 7, "total_chunks": 7}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here is a concise summary:\n\n**Summary**\n\nThis file tests the functionality of various React hooks in a Web3React context, including `useChainId`, `useAccounts`, `useProvider`, `getSelectedConnector`, `useSelectedIsActive`, and a Priority Connector system. The tests verify that these hooks behave as expected when triggered by user interactions or updates to accounts and connectors."}
{"code": "import type { Networkish } from '@ethersproject/networks'\nimport type { BaseProvider, Web3Provider } from '@ethersproject/providers'\nimport { createWeb3ReactStoreAndActions } from '@web3-react/store'\nimport type { Actions, Connector, Web3ReactState, Web3ReactStore } from '@web3-react/types'\nimport { useEffect, useMemo, useState } from 'react'\nimport { useStore } from 'zustand'\n\nlet DynamicProvider: typeof Web3Provider | null | undefined\nasync function importProvider(): Promise<void> {\n  if (DynamicProvider === undefined) {\n    try {\n      const { Web3Provider } = await import('@ethersproject/providers')\n      DynamicProvider = Web3Provider\n    } catch {\n      console.debug('@ethersproject/providers not available')\n      DynamicProvider = null\n    }\n  }\n}\n\nexport type Web3ReactHooks = ReturnType<typeof getStateHooks> &\n  ReturnType<typeof getDerivedHooks> &\n  ReturnType<typeof getAugmentedHooks>\n\nexport type Web3ReactSelectedHooks = ReturnType<typeof getSelectedConnector>\n", "explanation": "Here is a concise summary:\n\n**Purpose:** Dynamic provider for Ethereum-based Web3 interactions.\n\n**Functionality:** Imports and manages Ethers.js providers, enabling seamless Web3 integration in React applications.", "metadata": {"repo": "magiclabs/web3-react", "file": "packages/core/src/hooks.ts", "chunk_number": 1, "total_chunks": 14}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here is a concise holistic summary of the file 'packages/core/src/hooks.ts':\n\nThis file provides a set of custom React hooks for working with Ethereum-based Web3 interactions, including provider management, data extraction, and utility functions. The hooks enable seamless integration with Ethers.js providers in React applications, providing access to various blockchain states and services such as ENS names."}
{"code": "export type Web3ReactPriorityHooks = ReturnType<typeof getPriorityConnector>\n\n/**\n * Wraps the initialization of a `connector`. Creates a zustand `store` with `actions` bound to it, and then passes\n * these to the connector as specified in `f`. Also creates a variety of `hooks` bound to this `store`.\n *\n * @typeParam T - The type of the `connector` returned from `f`.\n * @param f - A function which is called with `actions` bound to the returned `store`.\n * @returns [connector, hooks, store] - The initialized connector, a variety of hooks, and a zustand store.\n */\nexport function initializeConnector<T extends Connector>(\n  f: (actions: Actions) => T\n): [T, Web3ReactHooks, Web3ReactStore] {\n  const [store, actions] = createWeb3ReactStoreAndActions()\n\n  const connector = f(actions)\n  const stateHooks = getStateHooks(store)\n  const derivedHooks = getDerivedHooks(stateHooks)\n  const augmentedHooks = getAugmentedHooks<T>(connector, stateHooks, derivedHooks)\n", "explanation": "Here is a summary of the block:\n\n**Purpose:** Initializes a Web3 connector with hooks and store.\n\n**Functionality:** Creates a zustand store, passes it to the connector function, and returns the initialized connector along with various hooks and the store itself.", "metadata": {"repo": "magiclabs/web3-react", "file": "packages/core/src/hooks.ts", "chunk_number": 2, "total_chunks": 14}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here is a concise holistic summary of the file 'packages/core/src/hooks.ts':\n\nThis file provides a set of custom React hooks for working with Ethereum-based Web3 interactions, including provider management, data extraction, and utility functions. The hooks enable seamless integration with Ethers.js providers in React applications, providing access to various blockchain states and services such as ENS names."}
{"code": "  return [connector, { ...stateHooks, ...derivedHooks, ...augmentedHooks }, store]\n}\n\nfunction computeIsActive({ chainId, accounts, activating }: Web3ReactState) {\n  return Boolean(chainId && accounts && !activating)\n}\n\n/**\n * Creates a variety of convenience `hooks` that return data associated with a particular passed connector.\n *\n * @param initializedConnectors - Two or more [connector, hooks(, store)] arrays, as returned from initializeConnector.\n * @returns hooks - A variety of convenience hooks that wrap the hooks returned from initializeConnector.\n */\nexport function getSelectedConnector(\n  ...initializedConnectors: [Connector, Web3ReactHooks][] | [Connector, Web3ReactHooks, Web3ReactStore][]\n) {\n  function getIndex(connector: Connector) {\n    const index = initializedConnectors.findIndex(([initializedConnector]) => connector === initializedConnector)\n    if (index === -1) throw new Error('Connector not found')\n    return index\n  }\n\n  function useSelectedStore(connector: Connector) {", "explanation": "Here is a summary of the purpose and functionality of this block:\n\n**Purpose:** Provides convenience hooks that wrap initialized connector data.\n\n**Functionality:** Takes one or more initialized connectors as input, returns a set of derived hooks based on the passed connector, and provides access to associated store data.", "metadata": {"repo": "magiclabs/web3-react", "file": "packages/core/src/hooks.ts", "chunk_number": 3, "total_chunks": 14}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here is a concise holistic summary of the file 'packages/core/src/hooks.ts':\n\nThis file provides a set of custom React hooks for working with Ethereum-based Web3 interactions, including provider management, data extraction, and utility functions. The hooks enable seamless integration with Ethers.js providers in React applications, providing access to various blockchain states and services such as ENS names."}
{"code": "    const store = initializedConnectors[getIndex(connector)][2]\n    if (!store) throw new Error('Stores not passed')\n    return store\n  }\n\n  // the following code calls hooks in a map a lot, which violates the eslint rule.\n  // this is ok, though, because initializedConnectors never changes, so the same hooks are called each time\n  function useSelectedChainId(connector: Connector) {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    const values = initializedConnectors.map(([, { useChainId }]) => useChainId())\n    return values[getIndex(connector)]\n  }\n\n  function useSelectedAccounts(connector: Connector) {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    const values = initializedConnectors.map(([, { useAccounts }]) => useAccounts())\n    return values[getIndex(connector)]\n  }\n\n  function useSelectedIsActivating(connector: Connector) {\n    // eslint-disable-next-line react-hooks/rules-of-hooks", "explanation": "Here is a concise summary of the purpose and functionality:\n\n**Purpose:** Extract data from initialized connectors.\n\n**Functionality:** Returns specific data (store, chain ID, accounts, or activation status) associated with a given connector using indexing and hook calls.", "metadata": {"repo": "magiclabs/web3-react", "file": "packages/core/src/hooks.ts", "chunk_number": 4, "total_chunks": 14}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here is a concise holistic summary of the file 'packages/core/src/hooks.ts':\n\nThis file provides a set of custom React hooks for working with Ethereum-based Web3 interactions, including provider management, data extraction, and utility functions. The hooks enable seamless integration with Ethers.js providers in React applications, providing access to various blockchain states and services such as ENS names."}
{"code": "    const values = initializedConnectors.map(([, { useIsActivating }]) => useIsActivating())\n    return values[getIndex(connector)]\n  }\n\n  function useSelectedAccount(connector: Connector) {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    const values = initializedConnectors.map(([, { useAccount }]) => useAccount())\n    return values[getIndex(connector)]\n  }\n\n  function useSelectedIsActive(connector: Connector) {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    const values = initializedConnectors.map(([, { useIsActive }]) => useIsActive())\n    return values[getIndex(connector)]\n  }\n\n  /**\n   * @typeParam T - A type argument must only be provided if one or more of the connectors passed to\n   * getSelectedConnector is using `connector.customProvider`, in which case it must match every possible type of this\n   * property, over all connectors.\n   */\n  function useSelectedProvider<T extends BaseProvider = Web3Provider>(\n    connector: Connector,\n    network?: Networkish", "explanation": "Here is a concise summary:\n\n**Functionality:** A set of three utility functions (`useSelectedAccount`, `useSelectedIsActive`, `useSelectedProvider`) that extract and return specific values from an array of initialized connectors based on a given connector index.\n\n**Purpose:** To provide easy access to various connector properties (account, isActive, custom provider) for use in React components.", "metadata": {"repo": "magiclabs/web3-react", "file": "packages/core/src/hooks.ts", "chunk_number": 5, "total_chunks": 14}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here is a concise holistic summary of the file 'packages/core/src/hooks.ts':\n\nThis file provides a set of custom React hooks for working with Ethereum-based Web3 interactions, including provider management, data extraction, and utility functions. The hooks enable seamless integration with Ethers.js providers in React applications, providing access to various blockchain states and services such as ENS names."}
{"code": "  ): T | undefined {\n    const index = getIndex(connector)\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    const values = initializedConnectors.map(([, { useProvider }], i) => useProvider<T>(network, i === index))\n    return values[index]\n  }\n\n  function useSelectedENSNames(connector: Connector, provider?: BaseProvider) {\n    const index = getIndex(connector)\n    const values = initializedConnectors.map(([, { useENSNames }], i) =>\n      // eslint-disable-next-line react-hooks/rules-of-hooks\n      useENSNames(i === index ? provider : undefined)\n    )\n    return values[index]\n  }\n\n  function useSelectedENSName(connector: Connector, provider?: BaseProvider) {\n    const index = getIndex(connector)\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    const values = initializedConnectors.map(([, { useENSName }], i) => useENSName(i === index ? provider : undefined))\n    return values[index]\n  }\n\n  return {\n    useSelectedStore,\n    useSelectedChainId,\n    useSelectedAccounts,", "explanation": "Here is a concise summary:\n\nThis code block provides three custom hooks that allow for the selection of specific data from a list of initialized connectors:\n\n* `useSelected[Data]`: Returns the selected data (e.g., store, chain ID, accounts) based on the index of the current connector.", "metadata": {"repo": "magiclabs/web3-react", "file": "packages/core/src/hooks.ts", "chunk_number": 6, "total_chunks": 14}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here is a concise holistic summary of the file 'packages/core/src/hooks.ts':\n\nThis file provides a set of custom React hooks for working with Ethereum-based Web3 interactions, including provider management, data extraction, and utility functions. The hooks enable seamless integration with Ethers.js providers in React applications, providing access to various blockchain states and services such as ENS names."}
{"code": "    useSelectedIsActivating,\n    useSelectedAccount,\n    useSelectedIsActive,\n    useSelectedProvider,\n    useSelectedENSNames,\n    useSelectedENSName,\n  }\n}\n\n/**\n * Creates a variety of convenience `hooks` that return data associated with the first of the `initializedConnectors`\n * that is active.\n *\n * @param initializedConnectors - Two or more [connector, hooks(, store)] arrays, as returned from initializeConnector.\n * @returns hooks - A variety of convenience hooks that wrap the hooks returned from initializeConnector.\n */\nexport function getPriorityConnector(\n  ...initializedConnectors: [Connector, Web3ReactHooks][] | [Connector, Web3ReactHooks, Web3ReactStore][]\n) {\n  const {\n    useSelectedStore,\n    useSelectedChainId,\n    useSelectedAccounts,\n    useSelectedIsActivating,\n    useSelectedAccount,\n    useSelectedIsActive,\n    useSelectedProvider,\n    useSelectedENSNames,\n    useSelectedENSName,\n  } = getSelectedConnector(...initializedConnectors)\n\n  function usePriorityConnector() {", "explanation": "**Summary**\n\nThe `getPriorityConnector` function returns a set of convenience hooks that provide data associated with the first active connector from an array of initialized connectors.", "metadata": {"repo": "magiclabs/web3-react", "file": "packages/core/src/hooks.ts", "chunk_number": 7, "total_chunks": 14}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here is a concise holistic summary of the file 'packages/core/src/hooks.ts':\n\nThis file provides a set of custom React hooks for working with Ethereum-based Web3 interactions, including provider management, data extraction, and utility functions. The hooks enable seamless integration with Ethers.js providers in React applications, providing access to various blockchain states and services such as ENS names."}
{"code": "    // eslint-disable-next-line react-hooks/rules-of-hooks\n    const values = initializedConnectors.map(([, { useIsActive }]) => useIsActive())\n    const index = values.findIndex((isActive) => isActive)\n    return initializedConnectors[index === -1 ? 0 : index][0]\n  }\n\n  function usePriorityStore() {\n    return useSelectedStore(usePriorityConnector())\n  }\n\n  function usePriorityChainId() {\n    return useSelectedChainId(usePriorityConnector())\n  }\n\n  function usePriorityAccounts() {\n    return useSelectedAccounts(usePriorityConnector())\n  }\n\n  function usePriorityIsActivating() {\n    return useSelectedIsActivating(usePriorityConnector())\n  }\n\n  function usePriorityAccount() {\n    return useSelectedAccount(usePriorityConnector())\n  }\n\n  function usePriorityIsActive() {\n    return useSelectedIsActive(usePriorityConnector())\n  }\n\n  /**\n   * @typeParam T - A type argument must only be provided if one or more of the connectors passed to", "explanation": "Here is a concise summary:\n\nThis block initializes an array with statuses from multiple connectors, finds the first active connector, and returns its data. It also defines several helper functions that reuse this logic with different useSelected*() functions.", "metadata": {"repo": "magiclabs/web3-react", "file": "packages/core/src/hooks.ts", "chunk_number": 8, "total_chunks": 14}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here is a concise holistic summary of the file 'packages/core/src/hooks.ts':\n\nThis file provides a set of custom React hooks for working with Ethereum-based Web3 interactions, including provider management, data extraction, and utility functions. The hooks enable seamless integration with Ethers.js providers in React applications, providing access to various blockchain states and services such as ENS names."}
{"code": "   * getPriorityConnector is using `connector.customProvider`, in which case it must match every possible type of this\n   * property, over all connectors.\n   */\n  function usePriorityProvider<T extends BaseProvider = Web3Provider>(network?: Networkish) {\n    return useSelectedProvider<T>(usePriorityConnector(), network)\n  }\n\n  function usePriorityENSNames(provider?: BaseProvider) {\n    return useSelectedENSNames(usePriorityConnector(), provider)\n  }\n\n  function usePriorityENSName(provider?: BaseProvider) {\n    return useSelectedENSName(usePriorityConnector(), provider)\n  }\n\n  return {\n    useSelectedStore,\n    useSelectedChainId,\n    useSelectedAccounts,\n    useSelectedIsActivating,\n    useSelectedAccount,\n    useSelectedIsActive,\n    useSelectedProvider,\n    useSelectedENSNames,\n    useSelectedENSName,\n    usePriorityConnector,\n    usePriorityStore,\n    usePriorityChainId,\n    usePriorityAccounts,\n    usePriorityIsActivating,\n    usePriorityAccount,\n    usePriorityIsActive,\n    usePriorityProvider,", "explanation": "**Summary**\n\nThe provided block of code defines a set of utility functions for working with Ethereum providers. The main purpose is to provide high-priority versions of existing provider-related hooks.", "metadata": {"repo": "magiclabs/web3-react", "file": "packages/core/src/hooks.ts", "chunk_number": 9, "total_chunks": 14}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here is a concise holistic summary of the file 'packages/core/src/hooks.ts':\n\nThis file provides a set of custom React hooks for working with Ethereum-based Web3 interactions, including provider management, data extraction, and utility functions. The hooks enable seamless integration with Ethers.js providers in React applications, providing access to various blockchain states and services such as ENS names."}
{"code": "    usePriorityENSNames,\n    usePriorityENSName,\n  }\n}\n\nconst CHAIN_ID = ({ chainId }: Web3ReactState) => chainId\nconst ACCOUNTS = ({ accounts }: Web3ReactState) => accounts\nconst ACTIVATING = ({ activating }: Web3ReactState) => activating\n\nconst ACCOUNTS_EQUALITY_CHECKER: <T extends Web3ReactState['accounts']>(a: T, b: T) => boolean = (\n  oldAccounts,\n  newAccounts\n) =>\n  (oldAccounts === undefined && newAccounts === undefined) ||\n  (oldAccounts !== undefined &&\n    oldAccounts.length === newAccounts?.length &&\n    oldAccounts.every((oldAccount, i) => oldAccount === newAccounts[i]))\n\nfunction getStateHooks(store: Web3ReactStore) {\n  function useChainId(): Web3ReactState['chainId'] {\n    return useStore(store, CHAIN_ID)\n  }\n\n  function useAccounts(): Web3ReactState['accounts'] {\n    return useStore(store, ACCOUNTS, ACCOUNTS_EQUALITY_CHECKER)\n  }\n\n  function useIsActivating(): Web3ReactState['activating'] {\n    return useStore(store, ACTIVATING)\n  }\n\n  return { useChainId, useAccounts, useIsActivating }\n}\n", "explanation": "Here is a concise summary:\n\n**Purpose:** Provides utility functions for accessing Ethereum blockchain state.\n\n**Functionality:** Returns hooks for retrieving `chainId`, `accounts`, and `activating` states from a Web3React store, with optional equality checking for account updates.", "metadata": {"repo": "magiclabs/web3-react", "file": "packages/core/src/hooks.ts", "chunk_number": 10, "total_chunks": 14}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here is a concise holistic summary of the file 'packages/core/src/hooks.ts':\n\nThis file provides a set of custom React hooks for working with Ethereum-based Web3 interactions, including provider management, data extraction, and utility functions. The hooks enable seamless integration with Ethers.js providers in React applications, providing access to various blockchain states and services such as ENS names."}
{"code": "function getDerivedHooks({ useChainId, useAccounts, useIsActivating }: ReturnType<typeof getStateHooks>) {\n  function useAccount(): string | undefined {\n    return useAccounts()?.[0]\n  }\n\n  function useIsActive(): boolean {\n    const chainId = useChainId()\n    const accounts = useAccounts()\n    const activating = useIsActivating()\n\n    return computeIsActive({\n      chainId,\n      accounts,\n      activating,\n    })\n  }\n\n  return { useAccount, useIsActive }\n}\n\n/**\n * @returns ENSNames - An array of length `accounts.length` which contains entries which are either all `undefined`,\n * indicated that names cannot be fetched because there's no provider, or they're in the process of being fetched,\n * or `string | null`, depending on whether an ENS name has been set for the account in question or not.\n */\nfunction useENS(provider?: BaseProvider, accounts: string[] = []): undefined[] | (string | null)[] {\n  const [ENSNames, setENSNames] = useState<(string | null)[] | undefined>()\n\n  useEffect(() => {", "explanation": "Here is a summary of the purpose and functionality of this code:\n\n**Purpose:** Returns an object with two custom hooks: `useAccount` and `useIsActive`.\n\n**Functionality:** The `getDerivedHooks` function returns an object with two custom hooks that provide access to user account information and activation status. \n\n(Note: I removed the comment about the `useENS` function as it was not part of the original text.)", "metadata": {"repo": "magiclabs/web3-react", "file": "packages/core/src/hooks.ts", "chunk_number": 11, "total_chunks": 14}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here is a concise holistic summary of the file 'packages/core/src/hooks.ts':\n\nThis file provides a set of custom React hooks for working with Ethereum-based Web3 interactions, including provider management, data extraction, and utility functions. The hooks enable seamless integration with Ethers.js providers in React applications, providing access to various blockchain states and services such as ENS names."}
{"code": "    if (provider && accounts.length) {\n      let stale = false\n\n      Promise.all(accounts.map((account) => provider.lookupAddress(account)))\n        .then((ENSNames) => {\n          if (stale) return\n          setENSNames(ENSNames)\n        })\n        .catch((error) => {\n          if (stale) return\n          console.debug('Could not fetch ENS names', error)\n          setENSNames(new Array<null>(accounts.length).fill(null))\n        })\n\n      return () => {\n        stale = true\n        setENSNames(undefined)\n      }\n    }\n  }, [provider, accounts])\n\n  return ENSNames ?? new Array<undefined>(accounts.length).fill(undefined)\n}\n\nfunction getAugmentedHooks<T extends Connector>(\n  connector: T,\n  { useAccounts, useChainId }: ReturnType<typeof getStateHooks>,\n  { useAccount, useIsActive }: ReturnType<typeof getDerivedHooks>\n) {\n  /**\n   * Avoid type erasure by returning the most qualified type if not otherwise set.\n   * Note that this function's return type is `T | undefined`, but there is a code path", "explanation": "Here is a concise summary of the purpose and functionality of this block:\n\n**Purpose:** Fetch ENS (Ethereum Name Service) names for a list of accounts using a provider.\n\n**Functionality:**\n\n1. If a provider is available and there are accounts, fetch ENS names for each account.\n2. Update the `ENSNames` state with the fetched results or an array of nulls if failed.\n3. When the component unmounts, set `stale` to true and reset `ENSNames` to undefined.\n4. Return the `ENSNames` state or a default value (an array of undefined) if not available.", "metadata": {"repo": "magiclabs/web3-react", "file": "packages/core/src/hooks.ts", "chunk_number": 12, "total_chunks": 14}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here is a concise holistic summary of the file 'packages/core/src/hooks.ts':\n\nThis file provides a set of custom React hooks for working with Ethereum-based Web3 interactions, including provider management, data extraction, and utility functions. The hooks enable seamless integration with Ethers.js providers in React applications, providing access to various blockchain states and services such as ENS names."}
{"code": "   * that returns a Web3Provider, which could conflict with a user-provided T. So,\n   * it's important that users only provide an override for T if they know that\n   * `connector.customProvider` is going to be defined and of type T.\n   *\n   * @typeParam T - A type argument must only be provided if using `connector.customProvider`, in which case it\n   * must match the type of this property.\n   */\n  function useProvider<T extends BaseProvider = Web3Provider>(network?: Networkish, enabled = true): T | undefined {\n    const isActive = useIsActive()\n    const chainId = useChainId()\n\n    // ensure that Provider is going to be available when loaded if @ethersproject/providers is installed\n    const [loaded, setLoaded] = useState(DynamicProvider !== undefined)\n    useEffect(() => {\n      if (loaded) return\n      let stale = false\n      void importProvider().then(() => {\n        if (stale) return\n        setLoaded(true)\n      })\n      return () => {\n        stale = true\n      }\n    }, [loaded])\n", "explanation": "Here is a summary of the purpose and functionality of this code block:\n\n**Purpose:** Returns a Web3Provider instance based on user-provided settings.\n\n**Functionality:** The `useProvider` function takes optional network and enabled parameters, and returns an instance of type `T` (defaulting to Web3Provider) if custom provider is defined. It also ensures the Provider library is loaded before use.", "metadata": {"repo": "magiclabs/web3-react", "file": "packages/core/src/hooks.ts", "chunk_number": 13, "total_chunks": 14}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here is a concise holistic summary of the file 'packages/core/src/hooks.ts':\n\nThis file provides a set of custom React hooks for working with Ethereum-based Web3 interactions, including provider management, data extraction, and utility functions. The hooks enable seamless integration with Ethers.js providers in React applications, providing access to various blockchain states and services such as ENS names."}
{"code": "    return useMemo(() => {\n      // to ensure connectors remain fresh, we condition re-renders on loaded, isActive and chainId\n      void loaded && isActive && chainId\n      if (enabled) {\n        if (connector.customProvider) return connector.customProvider as T\n        // see tsdoc note above for return type explanation.\n        else if (DynamicProvider && connector.provider)\n          return new DynamicProvider(connector.provider, network) as unknown as T\n      }\n    }, [loaded, enabled, isActive, chainId, network])\n  }\n\n  function useENSNames(provider?: BaseProvider): undefined[] | (string | null)[] {\n    const accounts = useAccounts()\n    return useENS(provider, accounts)\n  }\n\n  function useENSName(provider?: BaseProvider): undefined | string | null {\n    const account = useAccount()\n    const accounts = useMemo(() => (account === undefined ? undefined : [account]), [account])\n    return useENS(provider, accounts)?.[0]\n  }\n\n  return { useProvider, useENSNames, useENSName }\n}\n", "explanation": "Here is a concise summary:\n\nThis block returns an object with three functions: `useProvider`, `useENSNames`, and `useENSName`. These functions are memoized hooks that provide access to various blockchain providers (e.g. Ethers.js) and Ethereum Name Service (ENS) names.", "metadata": {"repo": "magiclabs/web3-react", "file": "packages/core/src/hooks.ts", "chunk_number": 14, "total_chunks": 14}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here is a concise holistic summary of the file 'packages/core/src/hooks.ts':\n\nThis file provides a set of custom React hooks for working with Ethereum-based Web3 interactions, including provider management, data extraction, and utility functions. The hooks enable seamless integration with Ethers.js providers in React applications, providing access to various blockchain states and services such as ENS names."}
{"code": "export * from './hooks'\nexport * from './mocks'\nexport * from './provider'\n", "explanation": "**Summary:**\n\nThis block exports all contents (functions, variables) from three separate files (`hooks`, `mocks`, and `provider`) making them available for use in other parts of the application.", "metadata": {"repo": "magiclabs/web3-react", "file": "packages/core/src/index.tsx", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here is a concise summary:\n\nThe `index.tsx` file aggregates and re-exports functions and variables from `hooks`, `mocks`, and `provider` files, making them accessible throughout the app."}
{"code": "import type { ProviderRpcError, RequestArguments } from '@web3-react/types'\nimport { EventEmitter } from 'eventemitter3'\n\nexport class MockEIP1193Provider<T = string> extends EventEmitter {\n  public chainId?: T\n  public accounts?: string[]\n\n  public eth_chainId = jest.fn((chainId?: T) => chainId)\n  public eth_accounts = jest.fn((accounts?: string[]) => accounts)\n  public eth_requestAccounts = jest.fn((accounts?: string[]) => accounts)\n\n  public request(x: RequestArguments): Promise<unknown> {\n    // make sure to throw if we're \"not connected\"\n    if (!this.chainId) return Promise.reject(new Error())\n\n    switch (x.method) {\n      case 'eth_chainId':\n        return Promise.resolve(this.eth_chainId(this.chainId))\n      case 'eth_accounts':\n        return Promise.resolve(this.eth_accounts(this.accounts))\n      case 'eth_requestAccounts':\n        return Promise.resolve(this.eth_requestAccounts(this.accounts))\n      default:\n        throw new Error(`Method not supported on mock: ${JSON.stringify(x)}`)\n    }\n  }\n", "explanation": "Here is a summary of the purpose and functionality of this block:\n\n**Purpose:** Mock Ethereum provider for testing purposes.\n\n**Functionality:** Implements EIP-1193 provider methods (`eth_chainId`, `eth_accounts`, `eth_requestAccounts`) and allows mocking chain ID, accounts, and request responses.", "metadata": {"repo": "magiclabs/web3-react", "file": "packages/core/src/mocks.ts", "chunk_number": 1, "total_chunks": 2}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here is a concise summary of the file 'packages/core/src/mocks.ts':\n\n\"Mock Ethereum provider class that emulates EIP-1193 methods, allowing chain ID, accounts, and request responses to be mocked for testing purposes.\""}
{"code": "  public emitConnect(chainId: string) {\n    this.emit('connect', { chainId })\n  }\n\n  public emitDisconnect(error: ProviderRpcError) {\n    this.emit('disconnect', error)\n  }\n\n  public emitChainChanged(chainId: string) {\n    this.emit('chainChanged', chainId)\n  }\n\n  public emitAccountsChanged(accounts: string[]) {\n    this.emit('accountsChanged', accounts)\n  }\n}\n", "explanation": "This block appears to be a class with methods that emit events for various Web3-related actions, including:\n\n* Connecting/disconnecting from a blockchain\n* Chain ID changes\n* Account list changes\n\nIn essence, it's an event emitter for notifying listeners of important changes in a blockchain context.", "metadata": {"repo": "magiclabs/web3-react", "file": "packages/core/src/mocks.ts", "chunk_number": 2, "total_chunks": 2}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here is a concise summary of the file 'packages/core/src/mocks.ts':\n\n\"Mock Ethereum provider class that emulates EIP-1193 methods, allowing chain ID, accounts, and request responses to be mocked for testing purposes.\""}
{"code": "import type { Networkish } from '@ethersproject/networks'\nimport type { BaseProvider, Web3Provider } from '@ethersproject/providers'\nimport type { Connector, Web3ReactStore } from '@web3-react/types'\nimport type { Context, MutableRefObject, ReactNode } from 'react'\nimport React, { createContext, useContext, useRef } from 'react'\n\nimport type { Web3ReactHooks, Web3ReactPriorityHooks } from './hooks'\nimport { getPriorityConnector } from './hooks'\n\n/**\n * @typeParam T - A type argument must only be provided if one or more of the connectors passed to Web3ReactProvider\n * is using `connector.customProvider`, in which case it must match every possible type of this\n * property, over all connectors.\n */\nexport type Web3ContextType<T extends BaseProvider = Web3Provider> = {\n  connector: Connector\n  chainId: ReturnType<Web3ReactPriorityHooks['useSelectedChainId']>\n  accounts: ReturnType<Web3ReactPriorityHooks['useSelectedAccounts']>\n  isActivating: ReturnType<Web3ReactPriorityHooks['useSelectedIsActivating']>", "explanation": "Here is a concise summary:\n\n**Purpose:** Provides a context for Web3 applications to access and manage Ethereum provider connections.\n\n**Functionality:** Offers a set of properties (connector, chainId, accounts, isActivating) that can be used by child components to interact with an Ethereum network.", "metadata": {"repo": "magiclabs/web3-react", "file": "packages/core/src/provider.tsx", "chunk_number": 1, "total_chunks": 6}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here's a concise holistic summary:\n\n**Purpose:** Provides a Web3 context for accessing and managing Ethereum provider connections.\n\n**Functionality:** Offers hooks and data access to child components, enabling interaction with Ethereum networks, custom connector injection, ENS lookup, and stable connector references for caching."}
{"code": "  account: ReturnType<Web3ReactPriorityHooks['useSelectedAccount']>\n  isActive: ReturnType<Web3ReactPriorityHooks['useSelectedIsActive']>\n  provider: T | undefined\n  ENSNames: ReturnType<Web3ReactPriorityHooks['useSelectedENSNames']>\n  ENSName: ReturnType<Web3ReactPriorityHooks['useSelectedENSName']>\n  hooks: ReturnType<typeof getPriorityConnector>\n}\n\nconst Web3Context = createContext<Web3ContextType | undefined>(undefined)\n\n/**\n * @param children - A React subtree that needs access to the context.\n * @param connectors - Two or more [connector, hooks(, store)] arrays, as returned from initializeConnector.\n * If modified in place without re-rendering the parent component, will result in an error.\n * @param connectorOverride - A connector whose state will be reflected in useWeb3React if set, overriding the\n * priority selection.\n * @param network - An optional argument passed along to `useSelectedProvider`.\n * @param lookupENS - A flag to enable/disable ENS lookups.\n */", "explanation": "Here is a concise summary:\n\n**Purpose:** Provides Web3 context with account, provider, and other related data.\n\n**Functionality:** Holds and exposes values such as account, provider, and ENS names through its child components via a React context API.", "metadata": {"repo": "magiclabs/web3-react", "file": "packages/core/src/provider.tsx", "chunk_number": 2, "total_chunks": 6}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here's a concise holistic summary:\n\n**Purpose:** Provides a Web3 context for accessing and managing Ethereum provider connections.\n\n**Functionality:** Offers hooks and data access to child components, enabling interaction with Ethereum networks, custom connector injection, ENS lookup, and stable connector references for caching."}
{"code": "export interface Web3ReactProviderProps {\n  children: ReactNode\n  connectors: [Connector, Web3ReactHooks][] | [Connector, Web3ReactHooks, Web3ReactStore][]\n  connectorOverride?: Connector\n  network?: Networkish\n  lookupENS?: boolean\n}\n\nexport function Web3ReactProvider({\n  children,\n  connectors,\n  connectorOverride,\n  network,\n  lookupENS = true,\n}: Web3ReactProviderProps) {\n  const cachedConnectors: MutableRefObject<Web3ReactProviderProps['connectors']> = useRef(connectors)\n  // because we're calling `getPriorityConnector` with these connectors, we need to ensure that they're not changing in place\n  if (\n    connectors.length != cachedConnectors.current.length ||\n    connectors.some((connector, i) => {\n      const cachedConnector = cachedConnectors.current[i]\n      // because a \"connector\" is actually an array, we want to be sure to only perform an equality check on the actual Connector\n      // class instance, to see if they're the same object\n      return connector[0] !== cachedConnector[0]\n    })\n  )", "explanation": "Here is a concise summary:\n\n**Purpose:** Provides a Web3 React context to connect with Ethereum networks.\n\n**Functionality:** Allows injecting custom connectors, override default connectors, specify network, and lookup ENS (ENS: Ethereum Name Service) addresses. Ensures stable connector references for caching.", "metadata": {"repo": "magiclabs/web3-react", "file": "packages/core/src/provider.tsx", "chunk_number": 3, "total_chunks": 6}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here's a concise holistic summary:\n\n**Purpose:** Provides a Web3 context for accessing and managing Ethereum provider connections.\n\n**Functionality:** Offers hooks and data access to child components, enabling interaction with Ethereum networks, custom connector injection, ENS lookup, and stable connector references for caching."}
{"code": "    throw new Error(\n      'The connectors prop passed to Web3ReactProvider must be referentially static. If connectors is changing, try providing a key prop to Web3ReactProvider that changes every time connectors changes.'\n    )\n\n  const hooks = getPriorityConnector(...connectors)\n  const {\n    usePriorityConnector,\n    useSelectedChainId,\n    useSelectedAccounts,\n    useSelectedIsActivating,\n    useSelectedAccount,\n    useSelectedIsActive,\n    useSelectedProvider,\n    useSelectedENSNames,\n    useSelectedENSName,\n  } = hooks\n\n  const priorityConnector = usePriorityConnector()\n  const connector = connectorOverride ?? priorityConnector\n\n  const chainId = useSelectedChainId(connector)\n  const accounts = useSelectedAccounts(connector)\n  const isActivating = useSelectedIsActivating(connector)\n  const account = useSelectedAccount(connector)\n  const isActive = useSelectedIsActive(connector)\n  // note that we've omitted a <T extends BaseProvider = Web3Provider> generic type", "explanation": "Here is a concise summary:\n\n**Purpose:** Handle dynamic connectors in Web3ReactProvider, throwing an error if not referentially static.\n\n**Functionality:** Provides hooks for accessing connector data (e.g., chain ID, accounts) using `usePriorityConnector` and other related hooks.", "metadata": {"repo": "magiclabs/web3-react", "file": "packages/core/src/provider.tsx", "chunk_number": 4, "total_chunks": 6}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here's a concise holistic summary:\n\n**Purpose:** Provides a Web3 context for accessing and managing Ethereum provider connections.\n\n**Functionality:** Offers hooks and data access to child components, enabling interaction with Ethereum networks, custom connector injection, ENS lookup, and stable connector references for caching."}
{"code": "  // in Web3ReactProvider, and thus can't pass T through to useSelectedProvider below.\n  // this is because if we did so, the type of provider would include T, but that would\n  // conflict because Web3Context can't take a generic. however, this isn't particularly\n  // important, because useWeb3React (below) is manually typed\n  const provider = useSelectedProvider(connector, network)\n  const ENSNames = useSelectedENSNames(connector, lookupENS ? provider : undefined)\n  const ENSName = useSelectedENSName(connector, lookupENS ? provider : undefined)\n\n  return (\n    <Web3Context.Provider\n      value={{\n        connector,\n        chainId,\n        accounts,\n        isActivating,\n        account,\n        isActive,\n        provider,\n        ENSNames,\n        ENSName,\n        hooks,\n      }}\n    >\n      {children}\n    </Web3Context.Provider>\n  )\n}\n\nexport function useWeb3React<T extends BaseProvider = Web3Provider>(): Web3ContextType<T> {\n  const context = useContext(Web3Context as Context<Web3ContextType<T> | undefined>)", "explanation": "Here is a concise summary:\n\nThis block sets up a Web3 context provider, passing connector, network, ENS names, and other data to child components through the context. It also defines a reusable hook `useWeb3React` to access this context.", "metadata": {"repo": "magiclabs/web3-react", "file": "packages/core/src/provider.tsx", "chunk_number": 5, "total_chunks": 6}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here's a concise holistic summary:\n\n**Purpose:** Provides a Web3 context for accessing and managing Ethereum provider connections.\n\n**Functionality:** Offers hooks and data access to child components, enabling interaction with Ethereum networks, custom connector injection, ENS lookup, and stable connector references for caching."}
{"code": "  if (!context) throw Error('useWeb3React can only be used within the Web3ReactProvider component')\n  return context\n}\n", "explanation": "**Summary:**\n\nThis block checks if a `context` is available, and if not, throws an error. If present, it returns the `context`. \n\n(Implies this code is used within a Web3 provider setup)", "metadata": {"repo": "magiclabs/web3-react", "file": "packages/core/src/provider.tsx", "chunk_number": 6, "total_chunks": 6}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here's a concise holistic summary:\n\n**Purpose:** Provides a Web3 context for accessing and managing Ethereum provider connections.\n\n**Functionality:** Offers hooks and data access to child components, enabling interaction with Ethereum networks, custom connector injection, ENS lookup, and stable connector references for caching."}
{"code": "{\n  \"extends\": \"../../tsconfig.json\",\n  \"include\": [\"./src\"],\n  \"compilerOptions\": {\n    \"outDir\": \"./dist\"\n  }\n}\n", "explanation": "Here is a concise summary:\n\nThis block configures a TypeScript compiler settings file, specifying an output directory (`outDir`) and including a source folder (`include`).", "metadata": {"repo": "magiclabs/web3-react", "file": "packages/core/tsconfig.json", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here is a concise summary of the 'packages/core/tsconfig.json' file:\n\nConfigures TypeScript compiler settings with specified output directory and included source folders."}
{"code": "# @web3-react/eip1193\n", "explanation": "This is a library or package, likely for JavaScript development, specifically related to Web3 and EIP-1193 (an Ethereum standard).", "metadata": {"repo": "magiclabs/web3-react", "file": "packages/eip1193/README.md", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here is a concise summary:\n\n\"EIP-1193 JavaScript Library: A package providing implementation of EIP-1193, an Ethereum standard for Web3 development.\""}
{"code": "import { Eip1193Bridge } from '@ethersproject/experimental'\nimport { Web3Provider } from '@ethersproject/providers'\nimport { createWeb3ReactStoreAndActions } from '@web3-react/store'\nimport { MockEIP1193Provider } from '@web3-react/core'\nimport type { Actions, Web3ReactStore, ProviderRpcError } from '@web3-react/types'\nimport { EIP1193 } from '.'\n\nclass MockProviderRpcError extends Error implements ProviderRpcError {\n  public code: number\n  constructor() {\n    super('Mock Provider RPC Error')\n    this.code = 4200\n  }\n}\n\nconst chainId = '0x1'\nconst accounts: string[] = []\n\ndescribe('EIP1193', () => {\n  let mockProvider: MockEIP1193Provider\n\n  let store: Web3ReactStore\n  let actions: Actions\n\n  let connector: EIP1193\n\n  beforeEach(() => {\n    mockProvider = new MockEIP1193Provider()\n    ;[store, actions] = createWeb3ReactStoreAndActions()\n  })\n\n  describe('ethers', () => {\n    afterEach(() => {\n      expect(mockProvider.eth_chainId.mock.calls.length).toBe(1)", "explanation": "Here is a concise summary of the block:\n\n**Purpose:** Unit testing EIP-1193 functionality with a mock provider.\n\n**Functionality:**\n\n* Creates a mock EIP-1193 provider using `MockEIP1193Provider`.\n* Sets up a Web3 React store and actions.\n* Tests interactions between EIP-1193 connector, provider, and store.", "metadata": {"repo": "magiclabs/web3-react", "file": "packages/eip1193/src/index.spec.ts", "chunk_number": 1, "total_chunks": 8}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here's a concise holistic summary of the file 'packages/eip1193/src/index.spec.ts':\n\n**Summary:** This code block contains comprehensive unit tests for an EIP-1193 connector, verifying its behavior in various scenarios, including activation, connection, disconnection, chain changes, and account updates."}
{"code": "      expect(mockProvider.eth_accounts.mock.calls.length).toBe(0)\n      expect(mockProvider.eth_requestAccounts.mock.calls.length).toBe(1)\n    })\n\n    test('works', async () => {\n      mockProvider.chainId = chainId\n      mockProvider.accounts = accounts\n\n      const web3Provider = new Web3Provider(mockProvider)\n      const wrapped = new Eip1193Bridge(web3Provider.getSigner(), web3Provider)\n\n      connector = new EIP1193({ actions, provider: wrapped })\n\n      await connector.activate()\n\n      expect(store.getState()).toEqual({\n        chainId: 1,\n        accounts,\n        activating: false,\n      })\n    })\n  })\n\n  describe('functions', () => {\n    describe('connectEagerly = true', () => {\n      beforeEach(() => {\n        expect(mockProvider.eth_chainId.mock.calls.length).toBe(0)\n        expect(mockProvider.eth_accounts.mock.calls.length).toBe(0)\n        expect(mockProvider.eth_requestAccounts.mock.calls.length).toBe(0)\n      })\n\n      // suppress console.debugs in this block\n      beforeEach(() => {", "explanation": "Here is a concise summary of the purpose and functionality of this code block:\n\n**Purpose:** Test the EIP1193 connector's activation and functionality.\n\n**Functionality:**\n\n* Verifies that the mock provider's methods are called correctly.\n* Activates the connector with a specific chain ID and accounts.\n* Asserts that the store's state is updated accordingly.", "metadata": {"repo": "magiclabs/web3-react", "file": "packages/eip1193/src/index.spec.ts", "chunk_number": 2, "total_chunks": 8}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here's a concise holistic summary of the file 'packages/eip1193/src/index.spec.ts':\n\n**Summary:** This code block contains comprehensive unit tests for an EIP-1193 connector, verifying its behavior in various scenarios, including activation, connection, disconnection, chain changes, and account updates."}
{"code": "        jest.spyOn(console, 'debug').mockImplementation(() => {})\n      })\n      afterEach(() => {\n        jest.clearAllMocks()\n      })\n\n      test('fails silently', async () => {\n        connector = new EIP1193({ actions, provider: mockProvider })\n        await connector.connectEagerly().catch(() => {})\n\n        expect(store.getState()).toEqual({\n          chainId: undefined,\n          accounts: undefined,\n          activating: false,\n        })\n\n        expect(mockProvider.eth_chainId.mock.calls.length).toBe(0)\n        expect(mockProvider.eth_accounts.mock.calls.length).toBe(0)\n        expect(mockProvider.eth_requestAccounts.mock.calls.length).toBe(0)\n      })\n\n      test('succeeds', async () => {\n        mockProvider.chainId = chainId\n        mockProvider.accounts = accounts\n\n        connector = new EIP1193({ actions, provider: mockProvider })\n        await connector.connectEagerly()\n\n        expect(store.getState()).toEqual({\n          chainId: 1,\n          accounts,\n          activating: false,\n        })\n", "explanation": "Here is a concise summary:\n\n**Purpose:** To test the behavior of an EIP1193 connector in various scenarios.\n\n**Functionality:** Mocks console logs, sets up a provider mock, and tests two cases: \"fails silently\" (connection fails without error) and \"succeeds\" (connection successful).", "metadata": {"repo": "magiclabs/web3-react", "file": "packages/eip1193/src/index.spec.ts", "chunk_number": 3, "total_chunks": 8}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here's a concise holistic summary of the file 'packages/eip1193/src/index.spec.ts':\n\n**Summary:** This code block contains comprehensive unit tests for an EIP-1193 connector, verifying its behavior in various scenarios, including activation, connection, disconnection, chain changes, and account updates."}
{"code": "        expect(mockProvider.eth_chainId.mock.calls.length).toBe(1)\n        expect(mockProvider.eth_accounts.mock.calls.length).toBe(1)\n        expect(mockProvider.eth_requestAccounts.mock.calls.length).toBe(0)\n        expect(mockProvider.eth_chainId.mock.invocationCallOrder[0])\n          .toBeGreaterThan(mockProvider.eth_accounts.mock.invocationCallOrder[0])\n      })\n    })\n\n    describe('connectEagerly = false', () => {\n      beforeEach(() => {\n        connector = new EIP1193({ actions, provider: mockProvider })\n      })\n\n      beforeEach(() => {\n        expect(mockProvider.eth_chainId.mock.calls.length).toBe(0)\n        expect(mockProvider.eth_accounts.mock.calls.length).toBe(0)\n        expect(mockProvider.eth_requestAccounts.mock.calls.length).toBe(0)\n      })\n\n      test('before', () => {\n        expect(store.getState()).toEqual({\n          chainId: undefined,\n          accounts: undefined,\n          activating: false,\n        })\n      })\n\n      describe('#activate', () => {\n        afterEach(() => {", "explanation": "Here is a concise summary:\n\n**Block Purpose:** Test the behavior of an EIP1193 connector with different `connectEagerly` settings.\n\n**Functionality:**\n\n* Tests that, when `connectEagerly = true`, the mock provider's methods are called in a specific order.\n* Tests that, when `connectEagerly = false`, the mock provider's methods are not called until the #activate method is called.", "metadata": {"repo": "magiclabs/web3-react", "file": "packages/eip1193/src/index.spec.ts", "chunk_number": 4, "total_chunks": 8}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here's a concise holistic summary of the file 'packages/eip1193/src/index.spec.ts':\n\n**Summary:** This code block contains comprehensive unit tests for an EIP-1193 connector, verifying its behavior in various scenarios, including activation, connection, disconnection, chain changes, and account updates."}
{"code": "          expect(mockProvider.eth_chainId.mock.calls.length).toBe(1)\n          expect(mockProvider.eth_accounts.mock.calls.length).toBe(0)\n          expect(mockProvider.eth_requestAccounts.mock.calls.length).toBe(1)\n          expect(mockProvider.eth_chainId.mock.invocationCallOrder[0])\n            .toBeGreaterThan(mockProvider.eth_requestAccounts.mock.invocationCallOrder[0])\n        })\n\n        test(`chainId = ${chainId}`, async () => {\n          mockProvider.chainId = chainId\n          mockProvider.accounts = accounts\n\n          await connector.activate()\n\n          expect(store.getState()).toEqual({\n            chainId: 1,\n            accounts,\n            activating: false,\n          })\n        })\n\n        test(\"chainId = '0x01'\", async () => {\n          mockProvider.chainId = '0x01'\n          mockProvider.accounts = accounts\n\n          await connector.activate()\n\n          expect(store.getState()).toEqual({\n            chainId: 1,\n            accounts,\n            activating: false,\n          })\n        })\n", "explanation": "Here is a concise summary:\n\nThis block tests the functionality of a Ethereum provider mock, specifically its interaction with an EVM connector. It checks that certain methods are called in a specific order and verifies that the resulting state is correct when activating the connector with different chain IDs.", "metadata": {"repo": "magiclabs/web3-react", "file": "packages/eip1193/src/index.spec.ts", "chunk_number": 5, "total_chunks": 8}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here's a concise holistic summary of the file 'packages/eip1193/src/index.spec.ts':\n\n**Summary:** This code block contains comprehensive unit tests for an EIP-1193 connector, verifying its behavior in various scenarios, including activation, connection, disconnection, chain changes, and account updates."}
{"code": "        test(\"accounts = ['0x0000000000000000000000000000000000000000']\", async () => {\n          const chainId = '0x1'\n          const accounts: string[] = ['0x0000000000000000000000000000000000000000']\n\n          mockProvider.chainId = chainId\n          mockProvider.accounts = accounts\n\n          await connector.activate()\n\n          expect(store.getState()).toEqual({\n            chainId: 1,\n            accounts,\n            activating: false,\n          })\n        })\n\n        test(\"accounts = ['0x0000000000000000000000000000000000000000', '0x0000000000000000000000000000000000000001']\", async () => {\n          const chainId = '0x1'\n          const accounts: string[] = [\n            '0x0000000000000000000000000000000000000000',\n            '0x0000000000000000000000000000000000000001',\n          ]\n\n          mockProvider.chainId = chainId\n          mockProvider.accounts = accounts\n\n          await connector.activate()\n\n          expect(store.getState()).toEqual({\n            chainId: 1,\n            accounts,", "explanation": "**Summary**\n\nThis code block is a set of two tests that verify the functionality of an Ethereum connector.\n\n* The tests activate the connector with a specified `chainId` and list of `accounts`.\n* They then assert that the expected state is correctly updated in the store, including the `chainId`, list of `accounts`, and `activating` status.", "metadata": {"repo": "magiclabs/web3-react", "file": "packages/eip1193/src/index.spec.ts", "chunk_number": 6, "total_chunks": 8}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here's a concise holistic summary of the file 'packages/eip1193/src/index.spec.ts':\n\n**Summary:** This code block contains comprehensive unit tests for an EIP-1193 connector, verifying its behavior in various scenarios, including activation, connection, disconnection, chain changes, and account updates."}
{"code": "            activating: false,\n          })\n        })\n      })\n    })\n  })\n\n  describe('events', () => {\n    beforeEach(() => {\n      connector = new EIP1193({ actions, provider: mockProvider })\n    })\n\n    afterEach(() => {\n      expect(mockProvider.eth_chainId.mock.calls.length).toBe(0)\n      expect(mockProvider.eth_accounts.mock.calls.length).toBe(0)\n      expect(mockProvider.eth_requestAccounts.mock.calls.length).toBe(0)\n    })\n\n    const chainId = '0x1'\n    const accounts: string[] = []\n    const error = new MockProviderRpcError()\n\n    test('#connect', async () => {\n      mockProvider.emitConnect(chainId)\n\n      expect(store.getState()).toEqual({\n        chainId: 1,\n        accounts: undefined,\n        activating: false,\n        error: undefined,\n      })\n    })\n\n    test('#disconnect', async () => {\n      mockProvider.emitDisconnect(error)\n\n      expect(store.getState()).toEqual({\n        chainId: undefined,\n        accounts: undefined,\n        activating: false,\n      })\n    })\n\n    test('#chainChanged', async () => {", "explanation": "Here is a concise summary:\n\nThis block describes test cases for an EIP1193 connector, specifically testing the `connect`, `disconnect`, and `chainChanged` events on a mock Ethereum provider.", "metadata": {"repo": "magiclabs/web3-react", "file": "packages/eip1193/src/index.spec.ts", "chunk_number": 7, "total_chunks": 8}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here's a concise holistic summary of the file 'packages/eip1193/src/index.spec.ts':\n\n**Summary:** This code block contains comprehensive unit tests for an EIP-1193 connector, verifying its behavior in various scenarios, including activation, connection, disconnection, chain changes, and account updates."}
{"code": "      mockProvider.emitChainChanged(chainId)\n\n      expect(store.getState()).toEqual({\n        chainId: 1,\n        accounts: undefined,\n        activating: false,\n      })\n    })\n\n    test('#accountsChanged', async () => {\n      mockProvider.emitAccountsChanged(accounts)\n\n      expect(store.getState()).toEqual({\n        chainId: undefined,\n        accounts,\n        activating: false,\n      })\n    })\n\n    test('initializes with connect', async () => {\n      mockProvider.emitConnect(chainId)\n      mockProvider.emitAccountsChanged(accounts)\n\n      expect(store.getState()).toEqual({\n        chainId: 1,\n        accounts,\n        activating: false,\n      })\n    })\n\n    test('initializes with chainChanged', async () => {\n      mockProvider.emitChainChanged(chainId)\n      mockProvider.emitAccountsChanged(accounts)\n\n      expect(store.getState()).toEqual({\n        chainId: 1,\n        accounts,\n        activating: false,\n      })\n    })\n  })\n})\n", "explanation": "Here is a concise summary:\n\nThis block of code defines tests for an Ethereum provider integration, ensuring its state is properly updated in response to various events (chain changed, account changed, connect events) and that it initializes correctly with different scenarios.", "metadata": {"repo": "magiclabs/web3-react", "file": "packages/eip1193/src/index.spec.ts", "chunk_number": 8, "total_chunks": 8}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here's a concise holistic summary of the file 'packages/eip1193/src/index.spec.ts':\n\n**Summary:** This code block contains comprehensive unit tests for an EIP-1193 connector, verifying its behavior in various scenarios, including activation, connection, disconnection, chain changes, and account updates."}
{"code": "import type { Actions, Provider, ProviderConnectInfo, ProviderRpcError } from '@web3-react/types'\nimport { Connector } from '@web3-react/types'\n\nfunction parseChainId(chainId: string | number) {\n  return typeof chainId === 'string' ? Number.parseInt(chainId, 16) : chainId\n}\n\n/**\n * @param provider - An EIP-1193 ({@link https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1193.md}) provider.\n * @param onError - Handler to report errors thrown from eventListeners.\n */\nexport interface EIP1193ConstructorArgs {\n  actions: Actions\n  provider: Provider\n  onError?: (error: Error) => void\n}\n\nexport class EIP1193 extends Connector {\n  /** {@inheritdoc Connector.provider} */\n  provider: Provider\n\n  constructor({ actions, provider, onError }: EIP1193ConstructorArgs) {\n    super(actions, onError)\n\n    this.provider = provider\n\n    this.provider.on('connect', ({ chainId }: ProviderConnectInfo): void => {\n      this.actions.update({ chainId: parseChainId(chainId) })\n    })\n", "explanation": "Here is a concise summary of the purpose and functionality of this block:\n\n**Purpose:** Provides an EIP-1193-compliant Ethereum provider, allowing for interaction with Ethereum nodes.\n\n**Functionality:** Connects to an Ethereum node using a given provider, updates local state when connected to a specific chain ID, and reports errors.", "metadata": {"repo": "magiclabs/web3-react", "file": "packages/eip1193/src/index.ts", "chunk_number": 1, "total_chunks": 3}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here is a holistic summary of the file 'packages/eip1193/src/index.ts':\n\nThis file provides an EIP-1193-compliant Ethereum provider that connects to an Ethereum node, updates local state based on chain ID, and reports errors. It listens for events, handles disconnections, errors, and account updates, and offers two methods to activate accounts: `connectEagerly` and `activate`, with fallbacks for each."}
{"code": "    this.provider.on('disconnect', (error: ProviderRpcError): void => {\n      this.actions.resetState()\n      this.onError?.(error)\n    })\n\n    this.provider.on('chainChanged', (chainId: string): void => {\n      this.actions.update({ chainId: parseChainId(chainId) })\n    })\n\n    this.provider.on('accountsChanged', (accounts: string[]): void => {\n      this.actions.update({ accounts })\n    })\n  }\n\n  private async activateAccounts(requestAccounts: () => Promise<string[]>): Promise<void> {\n    const cancelActivation = this.actions.startActivation()\n\n    try {\n      // Wallets may resolve eth_chainId and hang on eth_accounts pending user interaction, which may include changing\n      // chains; they should be requested serially, with accounts first, so that the chainId can settle.\n      const accounts = await requestAccounts()\n      const chainId = (await this.provider.request({ method: 'eth_chainId' })) as string\n      this.actions.update({ chainId: parseChainId(chainId), accounts })\n    } catch (error) {", "explanation": "Here is a concise summary:\n\n**Purpose:** Listen for Ethereum provider events and update state accordingly.\n\n**Functionality:**\n\n* Handle disconnections, errors, and account updates\n* Activate accounts by requesting them serially with chain ID, updating state upon success or error.", "metadata": {"repo": "magiclabs/web3-react", "file": "packages/eip1193/src/index.ts", "chunk_number": 2, "total_chunks": 3}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here is a holistic summary of the file 'packages/eip1193/src/index.ts':\n\nThis file provides an EIP-1193-compliant Ethereum provider that connects to an Ethereum node, updates local state based on chain ID, and reports errors. It listens for events, handles disconnections, errors, and account updates, and offers two methods to activate accounts: `connectEagerly` and `activate`, with fallbacks for each."}
{"code": "      cancelActivation()\n      throw error\n    }\n  }\n\n  /** {@inheritdoc Connector.connectEagerly} */\n  public async connectEagerly(): Promise<void> {\n    return this.activateAccounts(() => this.provider.request({ method: 'eth_accounts' }) as Promise<string[]>)\n  }\n\n  /** {@inheritdoc Connector.activate} */\n  public async activate(): Promise<void> {\n    return this.activateAccounts(\n      () =>\n        this.provider\n          .request({ method: 'eth_requestAccounts' })\n          .catch(() => this.provider.request({ method: 'eth_accounts' })) as Promise<string[]>\n    )\n  }\n}\n", "explanation": "Here is a concise summary of the purpose and functionality:\n\n**Purpose:** Activate accounts on an Ethereum provider.\n\n**Functionality:** Two methods are provided:\n\n* `connectEagerly`: Activates accounts by requesting them eagerly from the provider.\n* `activate`: Attempts to activate accounts, falling back to a more basic request if the primary method fails.", "metadata": {"repo": "magiclabs/web3-react", "file": "packages/eip1193/src/index.ts", "chunk_number": 3, "total_chunks": 3}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here is a holistic summary of the file 'packages/eip1193/src/index.ts':\n\nThis file provides an EIP-1193-compliant Ethereum provider that connects to an Ethereum node, updates local state based on chain ID, and reports errors. It listens for events, handles disconnections, errors, and account updates, and offers two methods to activate accounts: `connectEagerly` and `activate`, with fallbacks for each."}
{"code": "{\n  \"extends\": \"../../tsconfig.json\",\n  \"include\": [\"./src\"],\n  \"compilerOptions\": {\n    \"outDir\": \"./dist\"\n  }\n}\n", "explanation": "This block is a configuration file, likely in JSON format, that defines settings for a TypeScript compiler.\n\n**Purpose:** To configure a TypeScript build process.\n\n**Functionality:**\n\n* Extends an existing config from `tsconfig.json`\n* Includes only files from `./src` directory\n* Outputs compiled code to `./dist` directory", "metadata": {"repo": "magiclabs/web3-react", "file": "packages/eip1193/tsconfig.json", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here is a concise summary of the file 'packages/eip1193/tsconfig.json':\n\n**Configures TypeScript build for EIP 1193 package**\n\nExtends base config, compiles `src` files into `dist` directory."}
{"code": "# @web3-react/empty\n", "explanation": "This block is likely a module or package in a JavaScript project, specifically \"empty\" in the context of `@web3-react`. \n\nPurpose: Provides an empty placeholder for Web3 React integration.\n\nFunctionality: Does not provide any specific functionality itself, but rather serves as a foundation for other components to build upon.", "metadata": {"repo": "magiclabs/web3-react", "file": "packages/empty/README.md", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here is a concise holistic summary:\n\n**packages/empty/README.md**\n\nThis package provides a foundational placeholder for Web3 React integration, serving as a base for other components to build upon without any specific functionality of its own."}
{"code": "import { EMPTY } from '.'\n\ndescribe('EMPTY', () => {\n  test('#activate', () => {\n    EMPTY.activate()\n    expect(EMPTY.provider).toBeUndefined()\n  })\n})\n", "explanation": "Here is a concise summary:\n\n**Purpose:** Tests the functionality of the `EMPTY` block.\n\n**Functionality:** Activates the `EMPTY` block, verifying that its provider becomes undefined.", "metadata": {"repo": "magiclabs/web3-react", "file": "packages/empty/src/index.spec.ts", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here's a holistic summary of the file 'packages/empty/src/index.spec.ts':\n\n**Summary:** This file contains unit tests for the EMPTY block, ensuring it behaves correctly by becoming undefined when activated."}
{"code": "import { Connector } from '@web3-react/types'\n\nexport class Empty extends Connector {\n  /** {@inheritdoc Connector.provider} */\n  provider: undefined\n\n  /**\n   * No-op. May be called if it simplifies application code.\n   */\n  public activate() {\n    void 0\n  }\n}\n\n// @ts-expect-error actions aren't validated and are only used to set a protected property, so this is ok\nexport const EMPTY = new Empty()\n", "explanation": "This block creates an \"empty\" Web3 connector that:\n\n* Has no provider\n* Does not perform any actions when activated", "metadata": {"repo": "magiclabs/web3-react", "file": "packages/empty/src/index.ts", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here is a concise and to-the-point summary of the file 'packages/empty/src/index.ts':\n\n**Empty Web3 Connector**\n\nA basic, non-functional Web3 connector with no provider and no initialization logic."}
{"code": "{\n  \"extends\": \"../../tsconfig.json\",\n  \"include\": [\"./src\"],\n  \"compilerOptions\": {\n    \"outDir\": \"./dist\"\n  }\n}\n", "explanation": "**Configuration Block Summary**\n\nThis block is a configuration file for a compiler, likely TypeScript.\n\n* **Purpose:** To configure compilation settings.\n* **Functionality:**\n\t+ Includes files from `./src` directory.\n\t+ Outputs compiled code to `./dist` directory.", "metadata": {"repo": "magiclabs/web3-react", "file": "packages/empty/tsconfig.json", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here is a concise summary of the 'packages/empty/tsconfig.json' file:\n\n**TSConfig Summary**\n\nA TypeScript configuration file that compiles sources in './src' and outputs to './dist'."}
{"code": "# @web3-react/gnosis-safe\n", "explanation": "This block is a tag for importing the Gnosis Safe integration with Web3 React.", "metadata": {"repo": "magiclabs/web3-react", "file": "packages/gnosis-safe/README.md", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "I don't see any code block summaries. It seems you forgot to include them.\n\nHowever, based on your description of the file 'packages/gnosis-safe/README.md', I'll create a holistic summary:\n\n**Gnosis Safe Integration**\n\nA concise integration package for Web3 React, providing seamless access to Gnosis Safe functionality."}
{"code": "import type { SafeAppProvider } from '@safe-global/safe-apps-provider'\nimport type SafeAppsSDK from '@safe-global/safe-apps-sdk'\nimport type { Opts } from '@safe-global/safe-apps-sdk'\nimport type { Actions } from '@web3-react/types'\nimport { Connector } from '@web3-react/types'\n\nexport class NoSafeContext extends Error {\n  public constructor() {\n    super('The app is loaded outside safe context')\n    this.name = NoSafeContext.name\n    Object.setPrototypeOf(this, NoSafeContext.prototype)\n  }\n}\n\n/**\n * @param options - Options to pass to `@safe-global/safe-apps-sdk`.\n */\nexport interface GnosisSafeConstructorArgs {\n  actions: Actions\n  options?: Opts\n}\n\nexport class GnosisSafe extends Connector {\n  /** {@inheritdoc Connector.provider} */\n  public provider?: SafeAppProvider\n\n  private readonly options?: Opts\n  private eagerConnection?: Promise<void>\n\n  /**\n   * A `SafeAppsSDK` instance.\n   */\n  public sdk: SafeAppsSDK | undefined\n\n  constructor({ actions, options }: GnosisSafeConstructorArgs) {\n    super(actions)", "explanation": "Here is a concise summary of the purpose and functionality:\n\n**Purpose:** Provide an interface for interacting with the Gnosis Safe app context.\n\n**Functionality:**\n\n* Throws `NoSafeContext` error if not loaded in safe context.\n* Represents a connector to the Gnosis Safe app context.\n* Allows passing options to the `@safe-global/safe-apps-sdk`.\n* Provides a `provider` property for accessing the SafeAppProvider.\n* Manages an eager connection and holds a reference to the SafeAppsSDK instance.", "metadata": {"repo": "magiclabs/web3-react", "file": "packages/gnosis-safe/src/index.ts", "chunk_number": 1, "total_chunks": 4}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here is a concise holistic summary of the file 'packages/gnosis-safe/src/index.ts':\n\nThis module provides an interface for interacting with the Gnosis Safe app context, throwing an error if not loaded in safe context. It manages connections to the Safe App Provider and SDK, handling activation and error scenarios within an iframe context, and initializes application dependencies asynchronously while checking server and iframe contexts."}
{"code": "    this.options = options\n  }\n\n  /**\n   * A function to determine whether or not this code is executing on a server.\n   */\n  private get serverSide() {\n    return typeof window === 'undefined'\n  }\n\n  /**\n   * A function to determine whether or not this code is executing in an iframe.\n   */\n  private get inIframe() {\n    if (this.serverSide) return false\n    if (window !== window.parent) return true\n    return false\n  }\n\n  private async isomorphicInitialize(): Promise<void> {\n    if (this.eagerConnection) return\n\n    // kick off import early to minimize waterfalls\n    const SafeAppProviderPromise = import('@safe-global/safe-apps-provider').then(\n      ({ SafeAppProvider }) => SafeAppProvider\n    )\n\n    await (this.eagerConnection = import('@safe-global/safe-apps-sdk').then(async (m) => {\n      this.sdk = new m.default(this.options)\n\n      const safe = await Promise.race([\n        this.sdk.safe.getInfo(),\n        new Promise<undefined>((resolve) => setTimeout(resolve, 500)),\n      ])\n\n      if (safe) {", "explanation": "Here is a summary of the purpose and functionality of this block:\n\n**Purpose:** Initialize an application's dependencies in an asynchronous manner, while also checking if it's running on a server or in an iframe.\n\n**Functionality:**\n\n* Checks if it's running on a server (serverSide)\n* Checks if it's running inside an iframe (inIframe)\n* If not on server, initializes the Safe App Provider and SDK asynchronously\n* Waits for the Safe App Provider to load and creates a new instance with provided options\n* Attempts to retrieve information from Safe App Provider within 500ms; if successful, stores it in a safe variable.", "metadata": {"repo": "magiclabs/web3-react", "file": "packages/gnosis-safe/src/index.ts", "chunk_number": 2, "total_chunks": 4}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here is a concise holistic summary of the file 'packages/gnosis-safe/src/index.ts':\n\nThis module provides an interface for interacting with the Gnosis Safe app context, throwing an error if not loaded in safe context. It manages connections to the Safe App Provider and SDK, handling activation and error scenarios within an iframe context, and initializes application dependencies asynchronously while checking server and iframe contexts."}
{"code": "        const SafeAppProvider = await SafeAppProviderPromise\n        this.provider = new SafeAppProvider(safe, this.sdk)\n      }\n    }))\n  }\n\n  /** {@inheritdoc Connector.connectEagerly} */\n  public async connectEagerly(): Promise<void> {\n    if (!this.inIframe) return\n\n    const cancelActivation = this.actions.startActivation()\n\n    try {\n      await this.isomorphicInitialize()\n      if (!this.provider) throw new NoSafeContext()\n\n      this.actions.update({\n        chainId: this.provider.chainId,\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        accounts: [await this.sdk!.safe.getInfo().then(({ safeAddress }) => safeAddress)],\n      })\n    } catch (error) {\n      cancelActivation()\n      throw error\n    }\n  }\n\n  public async activate(): Promise<void> {\n    if (!this.inIframe) throw new NoSafeContext()\n\n    // only show activation if this is a first-time connection\n    let cancelActivation: () => void\n    if (!this.sdk) cancelActivation = this.actions.startActivation()\n", "explanation": "Here is a concise summary:\n\nThis code establishes a connection to a Safe App, allowing for interactions with the app's context, such as wallet data and network information. It handles activation and error scenarios within an iframe context.", "metadata": {"repo": "magiclabs/web3-react", "file": "packages/gnosis-safe/src/index.ts", "chunk_number": 3, "total_chunks": 4}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here is a concise holistic summary of the file 'packages/gnosis-safe/src/index.ts':\n\nThis module provides an interface for interacting with the Gnosis Safe app context, throwing an error if not loaded in safe context. It manages connections to the Safe App Provider and SDK, handling activation and error scenarios within an iframe context, and initializes application dependencies asynchronously while checking server and iframe contexts."}
{"code": "    return this.isomorphicInitialize()\n      .then(async () => {\n        if (!this.provider) throw new NoSafeContext()\n\n        this.actions.update({\n          chainId: this.provider.chainId,\n          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n          accounts: [await this.sdk!.safe.getInfo().then(({ safeAddress }) => safeAddress)],\n        })\n      })\n      .catch((error) => {\n        cancelActivation?.()\n        throw error\n      })\n  }\n}\n", "explanation": "Here is a concise summary:\n\n**Purpose:** Initialize and update UI state with blockchain provider data.\n\n**Functionality:** Calls `isomorphicInitialize()`, updates UI state with chain ID and Safe address, and handles errors by cancelling activation if necessary.", "metadata": {"repo": "magiclabs/web3-react", "file": "packages/gnosis-safe/src/index.ts", "chunk_number": 4, "total_chunks": 4}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here is a concise holistic summary of the file 'packages/gnosis-safe/src/index.ts':\n\nThis module provides an interface for interacting with the Gnosis Safe app context, throwing an error if not loaded in safe context. It manages connections to the Safe App Provider and SDK, handling activation and error scenarios within an iframe context, and initializes application dependencies asynchronously while checking server and iframe contexts."}
{"code": "{\n  \"extends\": \"../../tsconfig.json\",\n  \"include\": [\"./src\"],\n  \"compilerOptions\": {\n    \"outDir\": \"./dist\"\n  }\n}\n", "explanation": "This block is a configuration file ( likely `tsconfig.json`) that specifies:\n\n* It extends an existing configuration (`../../tsconfig.json`)\n* Includes files from the `./src` directory\n* Specifies output files should be written to the `./dist` directory.", "metadata": {"repo": "magiclabs/web3-react", "file": "packages/gnosis-safe/tsconfig.json", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here is a concise summary of the file 'packages/gnosis-safe/tsconfig.json':\n\nConfiguration for TypeScript build in Gnosis Safe package, extending base config, including source files from ./src, and outputting compiled files to ./dist."}
{"code": "# @web3-react/metamask\n", "explanation": "This is a code snippet that imports a module from `@web3-react`, specifically related to MetaMask.", "metadata": {"repo": "magiclabs/web3-react", "file": "packages/metamask/README.md", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Unfortunately, you didn't provide the actual summaries of the code block. However, I can create a placeholder summary for what you might have meant.\n\nSince there's no actual text to summarize, here's a brief placeholder:\n\n**Holistic Summary:** \nThis file (packages/metamask/README.md) appears to be a documentation file related to integrating MetaMask with Web3 React applications, providing an overview of the code and its intended use."}
{"code": "import { createWeb3ReactStoreAndActions } from '@web3-react/store'\nimport type { Actions, Web3ReactStore } from '@web3-react/types'\nimport { MetaMask } from '.'\nimport { MockEIP1193Provider } from '@web3-react/core'\n\nconst chainId = '0x1'\nconst accounts: string[] = ['0x0000000000000000000000000000000000000000']\n\ndescribe('MetaMask', () => {\n  let mockProvider: MockEIP1193Provider\n\n  beforeEach(() => {\n    mockProvider = new MockEIP1193Provider()\n  })\n\n  beforeEach(() => {\n    ;(window as any).ethereum = mockProvider\n  })\n\n  let store: Web3ReactStore\n  let connector: MetaMask\n\n  beforeEach(() => {\n    let actions: Actions\n    ;[store, actions] = createWeb3ReactStoreAndActions()\n    connector = new MetaMask({ actions })\n  })\n\n  test('#connectEagerly', async () => {\n    mockProvider.chainId = chainId\n    mockProvider.accounts = accounts\n\n    await connector.connectEagerly()\n\n    expect(mockProvider.eth_requestAccounts).not.toHaveBeenCalled()\n    expect(mockProvider.eth_accounts).toHaveBeenCalled()", "explanation": "Here is a concise summary:\n\n**Purpose:** Test the functionality of the MetaMask connector.\n\n**Functionality:**\n\n* Creates a mock Ethereum provider using `MockEIP1193Provider`.\n* Configures the provider with a chain ID and account.\n* Initializes a Web3 React store and actions using `createWeb3ReactStoreAndActions`.\n* Instanciates a MetaMask connector and calls its `connectEagerly` method.\n* Verifies that the expected behavior occurs, specifically:\n\t+ `eth_accounts` is called once.\n\t+ `eth_requestAccounts` is not called.", "metadata": {"repo": "magiclabs/web3-react", "file": "packages/metamask/src/index.spec.ts", "chunk_number": 1, "total_chunks": 2}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here is a concise and holistic summary:\n\n**Purpose:** Test MetaMask connector functionality.\n\n**Summary:** This file contains test cases verifying that the MetaMask connector initializes correctly with a mock Ethereum provider, updates Web3 React store and actions, and calls the expected `eth_accounts` method without triggering an unnecessary `eth_requestAccounts` call."}
{"code": "    expect(mockProvider.eth_chainId).toHaveBeenCalled()\n    expect(mockProvider.eth_chainId.mock.invocationCallOrder[0])\n      .toBeGreaterThan(mockProvider.eth_accounts.mock.invocationCallOrder[0])\n\n    expect(store.getState()).toEqual({\n      chainId: Number.parseInt(chainId, 16),\n      accounts,\n      activating: false,\n    })\n  })\n\n  test('#activate', async () => {\n    mockProvider.chainId = chainId\n    mockProvider.accounts = accounts\n\n    await connector.activate()\n\n    expect(mockProvider.eth_requestAccounts).toHaveBeenCalled()\n    expect(mockProvider.eth_accounts).not.toHaveBeenCalled()\n    expect(mockProvider.eth_chainId).toHaveBeenCalled()\n    expect(mockProvider.eth_chainId.mock.invocationCallOrder[0])\n      .toBeGreaterThan(mockProvider.eth_requestAccounts.mock.invocationCallOrder[0])\n\n    expect(store.getState()).toEqual({\n      chainId: Number.parseInt(chainId, 16),\n      accounts,\n      activating: false,\n    })\n  })\n})\n", "explanation": "Here is a concise summary:\n\nThis block contains two test cases that verify the functionality of an Ethereum connector's `activate` method. The tests check that the correct provider methods are called in the correct order, and that the application state is updated correctly after activation.", "metadata": {"repo": "magiclabs/web3-react", "file": "packages/metamask/src/index.spec.ts", "chunk_number": 2, "total_chunks": 2}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here is a concise and holistic summary:\n\n**Purpose:** Test MetaMask connector functionality.\n\n**Summary:** This file contains test cases verifying that the MetaMask connector initializes correctly with a mock Ethereum provider, updates Web3 React store and actions, and calls the expected `eth_accounts` method without triggering an unnecessary `eth_requestAccounts` call."}
{"code": "import type detectEthereumProvider from '@metamask/detect-provider'\nimport type {\n  Actions,\n  AddEthereumChainParameter,\n  Provider,\n  ProviderConnectInfo,\n  ProviderRpcError,\n  WatchAssetParameters,\n} from '@web3-react/types'\nimport { Connector } from '@web3-react/types'\n\ntype MetaMaskProvider = Provider & {\n  isMetaMask?: boolean\n  isConnected?: () => boolean\n  providers?: MetaMaskProvider[]\n  get chainId(): string\n  get accounts(): string[]\n}\n\nexport class NoMetaMaskError extends Error {\n  public constructor() {\n    super('MetaMask not installed')\n    this.name = NoMetaMaskError.name\n    Object.setPrototypeOf(this, NoMetaMaskError.prototype)\n  }\n}\n\nfunction parseChainId(chainId: string) {\n  return Number.parseInt(chainId, 16)\n}\n\n/**\n * @param options - Options to pass to `@metamask/detect-provider`\n * @param onError - Handler to report errors thrown from eventListeners.\n */\nexport interface MetaMaskConstructorArgs {\n  actions: Actions\n  options?: Parameters<typeof detectEthereumProvider>[0]", "explanation": "Here is a concise summary of the purpose and functionality:\n\n**Purpose:** A module for detecting and interacting with the MetaMask Ethereum provider.\n\n**Functionality:** \n\n* Detects MetaMask installation using `@metamask/detect-provider`.\n* Provides custom types and interfaces for working with MetaMask providers.\n* Handles errors and chain ID parsing.\n* Exposes a `MetaMaskProvider` interface for interacting with MetaMask.", "metadata": {"repo": "magiclabs/web3-react", "file": "packages/metamask/src/index.ts", "chunk_number": 1, "total_chunks": 9}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here's a concise and holistic summary of the file 'packages/metamask/src/index.ts':\n\n**Purpose:** This module provides an interface for interacting with MetaMask, allowing for detection, initialization, and management of Ethereum providers.\n\n**Functionality:**\n\n* Detects MetaMask installation using `@metamask/detect-provider`.\n* Provides custom types and interfaces for working with MetaMask providers.\n* Handles errors, chain ID parsing, and multiple installed providers.\n* Exposes a `MetaMaskProvider` interface for interacting with MetaMask.\n* Manages Ethereum provider events (connection, disconnection, chain change, account changes).\n* Establishes connections to Ethereum chains, prompting users to switch between chains if necessary.\n* Initializes wallet connections, retrieving account information and chain IDs.\n* Switches between Ethereum chains based on desired chain ID matches or differences.\n* Activates new Ethereum chains and adds assets (ERC20 tokens) to wallets.\n\nThis summary captures the core functionality of the file, highlighting its focus on interacting with MetaMask providers, managing Ethereum provider events, and establishing connections to Ethereum chains."}
{"code": "  onError?: (error: Error) => void\n}\n\nexport class MetaMask extends Connector {\n  /** {@inheritdoc Connector.provider} */\n  public provider?: MetaMaskProvider\n\n  private readonly options?: Parameters<typeof detectEthereumProvider>[0]\n  private eagerConnection?: Promise<void>\n\n  constructor({ actions, options, onError }: MetaMaskConstructorArgs) {\n    super(actions, onError)\n    this.options = options\n  }\n\n  private async isomorphicInitialize(): Promise<void> {\n    if (this.eagerConnection) return\n\n    return (this.eagerConnection = import('@metamask/detect-provider').then(async (m) => {\n      const provider = await m.default(this.options)\n      if (provider) {\n        this.provider = provider as MetaMaskProvider\n\n        // handle the case when e.g. metamask and coinbase wallet are both installed\n        if (this.provider.providers?.length) {\n          this.provider = this.provider.providers.find((p) => p.isMetaMask) ?? this.provider.providers[0]\n        }\n", "explanation": "Here is a concise summary of the purpose and functionality of the code block:\n\n**Purpose:** Define a MetaMask class that extends Connector, allowing for interaction with the Metamask Ethereum provider.\n\n**Functionality:** Initializes the MetaMask provider through the `detect-provider` library, handles multiple installed providers (e.g., Metamask and Coinbase Wallet), and provides an optional `onError` callback.", "metadata": {"repo": "magiclabs/web3-react", "file": "packages/metamask/src/index.ts", "chunk_number": 2, "total_chunks": 9}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here's a concise and holistic summary of the file 'packages/metamask/src/index.ts':\n\n**Purpose:** This module provides an interface for interacting with MetaMask, allowing for detection, initialization, and management of Ethereum providers.\n\n**Functionality:**\n\n* Detects MetaMask installation using `@metamask/detect-provider`.\n* Provides custom types and interfaces for working with MetaMask providers.\n* Handles errors, chain ID parsing, and multiple installed providers.\n* Exposes a `MetaMaskProvider` interface for interacting with MetaMask.\n* Manages Ethereum provider events (connection, disconnection, chain change, account changes).\n* Establishes connections to Ethereum chains, prompting users to switch between chains if necessary.\n* Initializes wallet connections, retrieving account information and chain IDs.\n* Switches between Ethereum chains based on desired chain ID matches or differences.\n* Activates new Ethereum chains and adds assets (ERC20 tokens) to wallets.\n\nThis summary captures the core functionality of the file, highlighting its focus on interacting with MetaMask providers, managing Ethereum provider events, and establishing connections to Ethereum chains."}
{"code": "        this.provider.on('connect', ({ chainId }: ProviderConnectInfo): void => {\n          this.actions.update({ chainId: parseChainId(chainId) })\n        })\n\n        this.provider.on('disconnect', (error: ProviderRpcError): void => {\n          // 1013 indicates that MetaMask is attempting to reestablish the connection\n          // https://github.com/MetaMask/providers/releases/tag/v8.0.0\n          if (error.code === 1013) {\n            console.debug('MetaMask logged connection error 1013: \"Try again later\"')\n            return\n          }\n          this.actions.resetState()\n          this.onError?.(error)\n        })\n\n        this.provider.on('chainChanged', (chainId: string): void => {\n          this.actions.update({ chainId: parseChainId(chainId) })\n        })\n\n        this.provider.on('accountsChanged', (accounts: string[]): void => {\n          if (accounts.length === 0) {\n            // handle this edge case by disconnecting\n            this.actions.resetState()\n          } else {", "explanation": "Here is a concise summary:\n\n**Block Purpose:** Handle Ethereum provider events.\n\n**Functionality:**\n\n* Update state on connection, disconnection, chain change, and account changes.\n* Trigger actions accordingly:\n\t+ `update`: Change chain ID or refresh accounts.\n\t+ `resetState`: Disconnect from the provider.", "metadata": {"repo": "magiclabs/web3-react", "file": "packages/metamask/src/index.ts", "chunk_number": 3, "total_chunks": 9}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here's a concise and holistic summary of the file 'packages/metamask/src/index.ts':\n\n**Purpose:** This module provides an interface for interacting with MetaMask, allowing for detection, initialization, and management of Ethereum providers.\n\n**Functionality:**\n\n* Detects MetaMask installation using `@metamask/detect-provider`.\n* Provides custom types and interfaces for working with MetaMask providers.\n* Handles errors, chain ID parsing, and multiple installed providers.\n* Exposes a `MetaMaskProvider` interface for interacting with MetaMask.\n* Manages Ethereum provider events (connection, disconnection, chain change, account changes).\n* Establishes connections to Ethereum chains, prompting users to switch between chains if necessary.\n* Initializes wallet connections, retrieving account information and chain IDs.\n* Switches between Ethereum chains based on desired chain ID matches or differences.\n* Activates new Ethereum chains and adds assets (ERC20 tokens) to wallets.\n\nThis summary captures the core functionality of the file, highlighting its focus on interacting with MetaMask providers, managing Ethereum provider events, and establishing connections to Ethereum chains."}
{"code": "            this.actions.update({ accounts })\n          }\n        })\n      }\n    }))\n  }\n\n  /** {@inheritdoc Connector.connectEagerly} */\n  public async connectEagerly(): Promise<void> {\n    const cancelActivation = this.actions.startActivation()\n\n    try {\n      await this.isomorphicInitialize()\n      if (!this.provider) return cancelActivation()\n\n      // Wallets may resolve eth_chainId and hang on eth_accounts pending user interaction, which may include changing\n      // chains; they should be requested serially, with accounts first, so that the chainId can settle.\n      const accounts = (await this.provider.request({ method: 'eth_accounts' })) as string[]\n      if (!accounts.length) throw new Error('No accounts returned')\n      const chainId = (await this.provider.request({ method: 'eth_chainId' })) as string\n      this.actions.update({ chainId: parseChainId(chainId), accounts })\n    } catch (error) {\n      console.debug('Could not connect eagerly', error)", "explanation": "Here is a concise summary:\n\n**Purpose:** Establishes a connection with an Ethereum provider.\n\n**Functionality:** Performs an initial setup, requesting account information and chain ID from the provider, then updates the application state with the result.", "metadata": {"repo": "magiclabs/web3-react", "file": "packages/metamask/src/index.ts", "chunk_number": 4, "total_chunks": 9}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here's a concise and holistic summary of the file 'packages/metamask/src/index.ts':\n\n**Purpose:** This module provides an interface for interacting with MetaMask, allowing for detection, initialization, and management of Ethereum providers.\n\n**Functionality:**\n\n* Detects MetaMask installation using `@metamask/detect-provider`.\n* Provides custom types and interfaces for working with MetaMask providers.\n* Handles errors, chain ID parsing, and multiple installed providers.\n* Exposes a `MetaMaskProvider` interface for interacting with MetaMask.\n* Manages Ethereum provider events (connection, disconnection, chain change, account changes).\n* Establishes connections to Ethereum chains, prompting users to switch between chains if necessary.\n* Initializes wallet connections, retrieving account information and chain IDs.\n* Switches between Ethereum chains based on desired chain ID matches or differences.\n* Activates new Ethereum chains and adds assets (ERC20 tokens) to wallets.\n\nThis summary captures the core functionality of the file, highlighting its focus on interacting with MetaMask providers, managing Ethereum provider events, and establishing connections to Ethereum chains."}
{"code": "      // we should be able to use `cancelActivation` here, but on mobile, metamask emits a 'connect'\n      // event, meaning that chainId is updated, and cancelActivation doesn't work because an intermediary\n      // update has occurred, so we reset state instead\n      this.actions.resetState()\n    }\n  }\n\n  /**\n   * Initiates a connection.\n   *\n   * @param desiredChainIdOrChainParameters - If defined, indicates the desired chain to connect to. If the user is\n   * already connected to this chain, no additional steps will be taken. Otherwise, the user will be prompted to switch\n   * to the chain, if one of two conditions is met: either they already have it added in their extension, or the\n   * argument is of type AddEthereumChainParameter, in which case the user will be prompted to add the chain with the\n   * specified parameters first, before being prompted to switch.\n   */\n  public async activate(desiredChainIdOrChainParameters?: number | AddEthereumChainParameter): Promise<void> {", "explanation": "Here is a concise summary:\n\n**Purpose:** Connect or re-establish a connection to an Ethereum chain.\n\n**Functionality:** Prompts user to switch to desired chain, either by switching from existing chain or adding new chain with specified parameters if not already added.", "metadata": {"repo": "magiclabs/web3-react", "file": "packages/metamask/src/index.ts", "chunk_number": 5, "total_chunks": 9}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here's a concise and holistic summary of the file 'packages/metamask/src/index.ts':\n\n**Purpose:** This module provides an interface for interacting with MetaMask, allowing for detection, initialization, and management of Ethereum providers.\n\n**Functionality:**\n\n* Detects MetaMask installation using `@metamask/detect-provider`.\n* Provides custom types and interfaces for working with MetaMask providers.\n* Handles errors, chain ID parsing, and multiple installed providers.\n* Exposes a `MetaMaskProvider` interface for interacting with MetaMask.\n* Manages Ethereum provider events (connection, disconnection, chain change, account changes).\n* Establishes connections to Ethereum chains, prompting users to switch between chains if necessary.\n* Initializes wallet connections, retrieving account information and chain IDs.\n* Switches between Ethereum chains based on desired chain ID matches or differences.\n* Activates new Ethereum chains and adds assets (ERC20 tokens) to wallets.\n\nThis summary captures the core functionality of the file, highlighting its focus on interacting with MetaMask providers, managing Ethereum provider events, and establishing connections to Ethereum chains."}
{"code": "    let cancelActivation: () => void\n    if (!this.provider?.isConnected?.()) cancelActivation = this.actions.startActivation()\n\n    return this.isomorphicInitialize()\n      .then(async () => {\n        if (!this.provider) throw new NoMetaMaskError()\n\n        // Wallets may resolve eth_chainId and hang on eth_accounts pending user interaction, which may include changing\n        // chains; they should be requested serially, with accounts first, so that the chainId can settle.\n        const accounts = (await this.provider.request({ method: 'eth_requestAccounts' })) as string[]\n        const chainId = (await this.provider.request({ method: 'eth_chainId' })) as string\n        const receivedChainId = parseChainId(chainId)\n        const desiredChainId =\n          typeof desiredChainIdOrChainParameters === 'number'\n            ? desiredChainIdOrChainParameters\n            : desiredChainIdOrChainParameters?.chainId\n\n        // if there's no desired chain, or it's equal to the received, update", "explanation": "Here is a concise summary of the purpose and functionality:\n\n**Purpose:** Initialize a wallet connection and retrieve account information.\n\n**Functionality:**\n\n1. Attempt to cancel activation (if not already connected).\n2. Request user accounts from the provider.\n3. Request chain ID from the provider.\n4. Compare received chain ID with desired chain ID, if provided.\n5. Return an initialized state with account information.", "metadata": {"repo": "magiclabs/web3-react", "file": "packages/metamask/src/index.ts", "chunk_number": 6, "total_chunks": 9}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here's a concise and holistic summary of the file 'packages/metamask/src/index.ts':\n\n**Purpose:** This module provides an interface for interacting with MetaMask, allowing for detection, initialization, and management of Ethereum providers.\n\n**Functionality:**\n\n* Detects MetaMask installation using `@metamask/detect-provider`.\n* Provides custom types and interfaces for working with MetaMask providers.\n* Handles errors, chain ID parsing, and multiple installed providers.\n* Exposes a `MetaMaskProvider` interface for interacting with MetaMask.\n* Manages Ethereum provider events (connection, disconnection, chain change, account changes).\n* Establishes connections to Ethereum chains, prompting users to switch between chains if necessary.\n* Initializes wallet connections, retrieving account information and chain IDs.\n* Switches between Ethereum chains based on desired chain ID matches or differences.\n* Activates new Ethereum chains and adds assets (ERC20 tokens) to wallets.\n\nThis summary captures the core functionality of the file, highlighting its focus on interacting with MetaMask providers, managing Ethereum provider events, and establishing connections to Ethereum chains."}
{"code": "        if (!desiredChainId || receivedChainId === desiredChainId)\n          return this.actions.update({ chainId: receivedChainId, accounts })\n\n        const desiredChainIdHex = `0x${desiredChainId.toString(16)}`\n\n        // if we're here, we can try to switch networks\n        return this.provider\n          .request({\n            method: 'wallet_switchEthereumChain',\n            params: [{ chainId: desiredChainIdHex }],\n          })\n          .catch((error: ProviderRpcError) => {\n            // https://github.com/MetaMask/metamask-mobile/issues/3312#issuecomment-1065923294\n            const errorCode = (error.data as any)?.originalError?.code || error.code\n\n            // 4902 indicates that the chain has not been added to MetaMask and wallet_addEthereumChain needs to be called\n            // https://docs.metamask.io/guide/rpc-api.html#wallet-switchethereumchain\n            if (errorCode === 4902 && typeof desiredChainIdOrChainParameters !== 'number') {", "explanation": "Here is a concise summary:\n\n**Purpose:** Switch Ethereum chains on MetaMask when the desired chain ID matches or differs from the current one.\n\n**Functionality:** \n\n1. If the desired chain ID matches, update the chain ID.\n2. Otherwise, attempt to switch networks using `wallet_switchEthereumChain`.\n3. Handle errors and add a new chain if necessary using `wallet_addEthereumChain`.", "metadata": {"repo": "magiclabs/web3-react", "file": "packages/metamask/src/index.ts", "chunk_number": 7, "total_chunks": 9}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here's a concise and holistic summary of the file 'packages/metamask/src/index.ts':\n\n**Purpose:** This module provides an interface for interacting with MetaMask, allowing for detection, initialization, and management of Ethereum providers.\n\n**Functionality:**\n\n* Detects MetaMask installation using `@metamask/detect-provider`.\n* Provides custom types and interfaces for working with MetaMask providers.\n* Handles errors, chain ID parsing, and multiple installed providers.\n* Exposes a `MetaMaskProvider` interface for interacting with MetaMask.\n* Manages Ethereum provider events (connection, disconnection, chain change, account changes).\n* Establishes connections to Ethereum chains, prompting users to switch between chains if necessary.\n* Initializes wallet connections, retrieving account information and chain IDs.\n* Switches between Ethereum chains based on desired chain ID matches or differences.\n* Activates new Ethereum chains and adds assets (ERC20 tokens) to wallets.\n\nThis summary captures the core functionality of the file, highlighting its focus on interacting with MetaMask providers, managing Ethereum provider events, and establishing connections to Ethereum chains."}
{"code": "              if (!this.provider) throw new Error('No provider')\n              // if we're here, we can try to add a new network\n              return this.provider.request({\n                method: 'wallet_addEthereumChain',\n                params: [{ ...desiredChainIdOrChainParameters, chainId: desiredChainIdHex }],\n              })\n            }\n\n            throw error\n          })\n          .then(() => this.activate(desiredChainId))\n      })\n      .catch((error) => {\n        cancelActivation?.()\n        throw error\n      })\n  }\n\n  public async watchAsset({ address, symbol, decimals, image }: WatchAssetParameters): Promise<true> {\n    if (!this.provider) throw new Error('No provider')\n\n    return this.provider\n      .request({\n        method: 'wallet_watchAsset',\n        params: {\n          type: 'ERC20', // Initially only supports ERC20, but eventually more!\n          options: {\n            address, // The address that the token is at.\n            symbol, // A ticker symbol or shorthand, up to 5 chars.", "explanation": "Here is a concise summary of the purpose and functionality of this code block:\n\n**Purpose:** Activate a new Ethereum chain and add an asset (e.g., ERC20 token) to a wallet.\n\n**Functionality:**\n\n1. Checks if a provider is available.\n2. If so, attempts to activate a new Ethereum chain using `wallet_addEthereumChain` method.\n3. If successful, activates the desired chain ID.\n4. If not successful, catches any errors and cancels activation (if applicable).", "metadata": {"repo": "magiclabs/web3-react", "file": "packages/metamask/src/index.ts", "chunk_number": 8, "total_chunks": 9}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here's a concise and holistic summary of the file 'packages/metamask/src/index.ts':\n\n**Purpose:** This module provides an interface for interacting with MetaMask, allowing for detection, initialization, and management of Ethereum providers.\n\n**Functionality:**\n\n* Detects MetaMask installation using `@metamask/detect-provider`.\n* Provides custom types and interfaces for working with MetaMask providers.\n* Handles errors, chain ID parsing, and multiple installed providers.\n* Exposes a `MetaMaskProvider` interface for interacting with MetaMask.\n* Manages Ethereum provider events (connection, disconnection, chain change, account changes).\n* Establishes connections to Ethereum chains, prompting users to switch between chains if necessary.\n* Initializes wallet connections, retrieving account information and chain IDs.\n* Switches between Ethereum chains based on desired chain ID matches or differences.\n* Activates new Ethereum chains and adds assets (ERC20 tokens) to wallets.\n\nThis summary captures the core functionality of the file, highlighting its focus on interacting with MetaMask providers, managing Ethereum provider events, and establishing connections to Ethereum chains."}
{"code": "            decimals, // The number of decimals in the token\n            image, // A string url of the token logo\n          },\n        },\n      })\n      .then((success) => {\n        if (!success) throw new Error('Rejected')\n        return true\n      })\n  }\n}\n", "explanation": "Here is a concise summary:\n\nThis block sets up an API request to retrieve information about a token, specifically its decimals (number of decimal places) and logo image URL, then checks if the request was successful.", "metadata": {"repo": "magiclabs/web3-react", "file": "packages/metamask/src/index.ts", "chunk_number": 9, "total_chunks": 9}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here's a concise and holistic summary of the file 'packages/metamask/src/index.ts':\n\n**Purpose:** This module provides an interface for interacting with MetaMask, allowing for detection, initialization, and management of Ethereum providers.\n\n**Functionality:**\n\n* Detects MetaMask installation using `@metamask/detect-provider`.\n* Provides custom types and interfaces for working with MetaMask providers.\n* Handles errors, chain ID parsing, and multiple installed providers.\n* Exposes a `MetaMaskProvider` interface for interacting with MetaMask.\n* Manages Ethereum provider events (connection, disconnection, chain change, account changes).\n* Establishes connections to Ethereum chains, prompting users to switch between chains if necessary.\n* Initializes wallet connections, retrieving account information and chain IDs.\n* Switches between Ethereum chains based on desired chain ID matches or differences.\n* Activates new Ethereum chains and adds assets (ERC20 tokens) to wallets.\n\nThis summary captures the core functionality of the file, highlighting its focus on interacting with MetaMask providers, managing Ethereum provider events, and establishing connections to Ethereum chains."}
{"code": "{\n  \"extends\": \"../../tsconfig.json\",\n  \"include\": [\"./src\"],\n  \"compilerOptions\": {\n    \"outDir\": \"./dist\"\n  }\n}\n", "explanation": "This block is a JSON configuration file that specifies:\n\n* A base configuration to extend from (`../../tsconfig.json`)\n* Which files to include in compilation (`./src`)\n* Output directory for compiled files (`./dist`)", "metadata": {"repo": "magiclabs/web3-react", "file": "packages/metamask/tsconfig.json", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here is a concise summary of the `packages/metamask/tsconfig.json` file:\n\n\"Configures TypeScript compilation with base settings from parent `tsconfig.json`, compiling `./src` files to output in `./dist`.\""}
{"code": "# @web3-react/network\n", "explanation": "This is a Web3 React network module. \n\nFunctionalities include interacting with blockchain networks through Web3 APIs.", "metadata": {"repo": "magiclabs/web3-react", "file": "packages/network/README.md", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here is a concise and to-the-point summary:\n\n**Web3 Network Module**\n\nInteracts with blockchain networks via Web3 APIs, providing a Web3 React network module for seamless integration."}
{"code": "import { createWeb3ReactStoreAndActions } from '@web3-react/store'\nimport type { Actions, Web3ReactStore } from '@web3-react/types'\nimport { Network } from './'\n\nexport class MockJsonRpcProvider {\n  public chainId?: string\n\n  public getNetwork() {\n    return Promise.resolve({ chainId: this.chainId === undefined ? undefined : Number.parseInt(this.chainId, 16) })\n  }\n}\n\njest.mock('@ethersproject/providers', () => ({\n  JsonRpcProvider: MockJsonRpcProvider,\n  FallbackProvider: class MockFallbackProvider extends MockJsonRpcProvider {},\n}))\n\nconst chainId = '0x1'\nconst accounts: string[] = []\n\ndescribe('Network', () => {\n  let store: Web3ReactStore\n  let connector: Network\n  let mockConnector: MockJsonRpcProvider\n\n  describe('single url', () => {\n    beforeEach(() => {\n      let actions: Actions\n      ;[store, actions] = createWeb3ReactStoreAndActions()\n      connector = new Network({ actions, urlMap: { 1: 'https://mock.url' } })\n    })\n\n    test('is un-initialized', async () => {\n      expect(store.getState()).toEqual({", "explanation": "Here is a concise summary:\n\n**Block Purpose:** Test suite for `Network` class\n**Functionality:** Mocks Ethereum providers (JsonRpcProvider, FallbackProvider) using Jest mocks to test `Network` functionality in different scenarios.", "metadata": {"repo": "magiclabs/web3-react", "file": "packages/network/src/index.spec.ts", "chunk_number": 1, "total_chunks": 4}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here is a concise holistic summary of the file 'packages/network/src/index.spec.ts':\n\n**Summary:** Test suite for `Network` class's `activate` method, verifying correct store state updates with different Ethereum provider scenarios (custom providers, array of URLs, chain IDs 1 and 2)."}
{"code": "        chainId: undefined,\n        accounts: undefined,\n        activating: false,\n        error: undefined,\n      })\n    })\n\n    describe('#activate', () => {\n      beforeEach(async () => {\n        // testing hack to ensure the provider is set\n        await connector.activate()\n        mockConnector = connector.customProvider as unknown as MockJsonRpcProvider\n        mockConnector.chainId = chainId\n      })\n\n      test('works', async () => {\n        await connector.activate()\n\n        expect(store.getState()).toEqual({\n          chainId: Number.parseInt(chainId, 16),\n          accounts,\n          activating: false,\n          error: undefined,\n        })\n      })\n    })\n  })\n\n  describe('array of urls', () => {\n    beforeEach(async () => {\n      let actions: Actions\n      ;[store, actions] = createWeb3ReactStoreAndActions()\n      connector = new Network({\n        actions,\n        urlMap: { 1: ['https://1.mock.url', 'https://2.mock.url'] },\n      })\n    })\n\n    beforeEach(async () => {", "explanation": "Here is a concise summary:\n\n**Block Purpose:** Test the activation functionality of a connector object.\n\n**Functionality:**\n\n* Activate the connector with a custom provider.\n* Verify that the store's state is updated correctly after activation.\n* Test the activation functionality with an array of URLs.", "metadata": {"repo": "magiclabs/web3-react", "file": "packages/network/src/index.spec.ts", "chunk_number": 2, "total_chunks": 4}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here is a concise holistic summary of the file 'packages/network/src/index.spec.ts':\n\n**Summary:** Test suite for `Network` class's `activate` method, verifying correct store state updates with different Ethereum provider scenarios (custom providers, array of URLs, chain IDs 1 and 2)."}
{"code": "      // testing hack to ensure the provider is set\n      await connector.activate()\n      mockConnector = connector.customProvider as unknown as MockJsonRpcProvider\n      mockConnector.chainId = chainId\n    })\n\n    test('#activate', async () => {\n      await connector.activate()\n\n      expect(store.getState()).toEqual({\n        chainId: Number.parseInt(chainId, 16),\n        accounts,\n        activating: false,\n        error: undefined,\n      })\n    })\n  })\n\n  describe('multiple chains', () => {\n    beforeEach(async () => {\n      let actions: Actions\n      ;[store, actions] = createWeb3ReactStoreAndActions()\n      connector = new Network({\n        actions,\n        urlMap: { 1: 'https://mainnet.mock.url', 2: 'https://testnet.mock.url' },\n      })\n    })\n\n    describe('#activate', () => {\n      test('chainId = 1', async () => {\n        // testing hack to ensure the provider is set\n        await connector.activate()\n        mockConnector = connector.customProvider as unknown as MockJsonRpcProvider", "explanation": "Here is a concise summary:\n\nThis block appears to be test code, specifically using Jest or a similar framework, to test the functionality of a `Network` class's `activate` method. It tests that the store's state is updated correctly after activation.", "metadata": {"repo": "magiclabs/web3-react", "file": "packages/network/src/index.spec.ts", "chunk_number": 3, "total_chunks": 4}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here is a concise holistic summary of the file 'packages/network/src/index.spec.ts':\n\n**Summary:** Test suite for `Network` class's `activate` method, verifying correct store state updates with different Ethereum provider scenarios (custom providers, array of URLs, chain IDs 1 and 2)."}
{"code": "        mockConnector.chainId = chainId\n        await connector.activate()\n\n        expect(store.getState()).toEqual({\n          chainId: 1,\n          accounts,\n          activating: false,\n          error: undefined,\n        })\n      })\n\n      test('chainId = 2', async () => {\n        // testing hack to ensure the provider is set\n        await connector.activate(2)\n        mockConnector = connector.customProvider as unknown as MockJsonRpcProvider\n        mockConnector.chainId = '0x2'\n        await connector.activate(2)\n\n        expect(store.getState()).toEqual({\n          chainId: 2,\n          accounts,\n          activating: false,\n          error: undefined,\n        })\n      })\n    })\n  })\n})\n", "explanation": "Here is a concise summary:\n\nThis block of code tests the activation of an Ethereum connector with different chain IDs (1 and 2) using Jest testing framework, verifying the expected state of a store after activation.", "metadata": {"repo": "magiclabs/web3-react", "file": "packages/network/src/index.spec.ts", "chunk_number": 4, "total_chunks": 4}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here is a concise holistic summary of the file 'packages/network/src/index.spec.ts':\n\n**Summary:** Test suite for `Network` class's `activate` method, verifying correct store state updates with different Ethereum provider scenarios (custom providers, array of URLs, chain IDs 1 and 2)."}
{"code": "import type { JsonRpcProvider } from '@ethersproject/providers'\nimport type { ConnectionInfo } from '@ethersproject/web'\nimport type { Actions } from '@web3-react/types'\nimport { Connector } from '@web3-react/types'\n\nimport { getBestProvider } from './utils'\n\ntype url = string | ConnectionInfo\n\nfunction isUrl(url: url | JsonRpcProvider): url is url {\n  return typeof url === 'string' || ('url' in url && !('connection' in url))\n}\n\n/**\n * @param urlMap - A mapping from chainIds to RPC urls.\n * @param defaultChainId - The chainId to connect to in activate if one is not provided.\n * @param timeout - Timeout, in milliseconds, after which to treat network calls to urls as failed when selecting\n * online providers.\n */\nexport interface NetworkConstructorArgs {\n  actions: Actions\n  urlMap: { [chainId: number]: url | url[] | JsonRpcProvider | JsonRpcProvider[] }\n  defaultChainId?: number\n  timeout?: number\n}\n\nexport class Network extends Connector {\n  /** {@inheritdoc Connector.provider} */", "explanation": "Here is a concise summary:\n\n**Purpose:** A Web3 React connector for interacting with Ethereum networks.\n\n**Functionality:** It takes in a configuration object (`NetworkConstructorArgs`) that maps chain IDs to RPC URLs, and provides methods to connect to and manage Ethereum networks.", "metadata": {"repo": "magiclabs/web3-react", "file": "packages/network/src/index.ts", "chunk_number": 1, "total_chunks": 4}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here's a concise and holistic summary of the file 'packages/network/src/index.ts':\n\n**Purpose:** A Web3 React connector that initializes and manages Ethereum network providers for multiple chains.\n\n**Functionality:** It takes in a configuration object, provides customizable provider instances, caches providers by chain ID, and returns the best provider after a timeout."}
{"code": "  public readonly provider: undefined\n  /** {@inheritdoc Connector.customProvider} */\n  public customProvider?: JsonRpcProvider\n\n  private readonly providerCache: Record<number, Promise<JsonRpcProvider> | undefined> = {}\n\n  private readonly urlMap: Record<number, url[] | JsonRpcProvider[]>\n  private readonly defaultChainId: number\n  private readonly timeout: number\n\n  constructor({\n    actions,\n    urlMap,\n    defaultChainId = Number(Object.keys(urlMap)[0]),\n    timeout = 5000,\n  }: NetworkConstructorArgs) {\n    super(actions)\n\n    this.urlMap = Object.keys(urlMap).reduce<typeof this.urlMap>((accumulator, chainId) => {\n      const urls = urlMap[Number(chainId)]\n\n      if (Array.isArray(urls)) {\n        accumulator[Number(chainId)] = urls\n      } else {\n        // this ternary just makes typescript happy, since it can't infer that the array has elements of the same type\n        accumulator[Number(chainId)] = isUrl(urls) ? [urls] : [urls]\n      }\n\n      return accumulator\n    }, {})", "explanation": "Here is a concise summary:\n\nThis block represents a network configuration object, which manages provider connections for multiple chains. It provides a customizable provider instance, caches providers by chain ID, and has a URL mapping system with timeouts.", "metadata": {"repo": "magiclabs/web3-react", "file": "packages/network/src/index.ts", "chunk_number": 2, "total_chunks": 4}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here's a concise and holistic summary of the file 'packages/network/src/index.ts':\n\n**Purpose:** A Web3 React connector that initializes and manages Ethereum network providers for multiple chains.\n\n**Functionality:** It takes in a configuration object, provides customizable provider instances, caches providers by chain ID, and returns the best provider after a timeout."}
{"code": "    this.defaultChainId = defaultChainId\n    this.timeout = timeout\n  }\n\n  private async isomorphicInitialize(chainId: number): Promise<JsonRpcProvider> {\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    if (this.providerCache[chainId]) return this.providerCache[chainId]!\n\n    const urls = this.urlMap[chainId]\n\n    // early return if we have a single jsonrpc provider already\n    if (urls.length === 1 && !isUrl(urls[0])) {\n      return (this.providerCache[chainId] = Promise.resolve(urls[0]))\n    }\n\n    return (this.providerCache[chainId] = import('@ethersproject/providers').then(({ JsonRpcProvider }) => {\n      const providers = urls.map((url) => (isUrl(url) ? new JsonRpcProvider(url, chainId) : url))\n      return getBestProvider(providers, this.timeout)\n    }))\n  }\n\n  /**\n   * Initiates a connection.\n   *\n   * @param desiredChainId - The desired chain to connect to.\n   */\n  public async activate(desiredChainId = this.defaultChainId): Promise<void> {", "explanation": "Here is a summary of the purpose and functionality of this block:\n\n**Purpose:** Initialize an Ethereum provider for a specific blockchain network.\n\n**Functionality:**\n\n* Stores default chain ID and timeout values.\n* Initializes a JSON-RPC provider for a given chain ID using cached providers or newly created ones from a URL map.\n* Returns the best provider after a timeout.", "metadata": {"repo": "magiclabs/web3-react", "file": "packages/network/src/index.ts", "chunk_number": 3, "total_chunks": 4}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here's a concise and holistic summary of the file 'packages/network/src/index.ts':\n\n**Purpose:** A Web3 React connector that initializes and manages Ethereum network providers for multiple chains.\n\n**Functionality:** It takes in a configuration object, provides customizable provider instances, caches providers by chain ID, and returns the best provider after a timeout."}
{"code": "    let cancelActivation: () => void\n    if (!this.providerCache[desiredChainId]) {\n      cancelActivation = this.actions.startActivation()\n    }\n\n    return this.isomorphicInitialize(desiredChainId)\n      .then(async (customProvider) => {\n        this.customProvider = customProvider\n\n        const { chainId } = await this.customProvider.getNetwork()\n        this.actions.update({ chainId, accounts: [] })\n      })\n      .catch((error: Error) => {\n        cancelActivation?.()\n        throw error\n      })\n  }\n}\n", "explanation": "Here is a summary of the block:\n\nThis function initializes the provider for a desired chain ID, cancelling any pending activation if it doesn't already exist in the cache. If initialization fails, it cancels any pending activation and re-throws the error.", "metadata": {"repo": "magiclabs/web3-react", "file": "packages/network/src/index.ts", "chunk_number": 4, "total_chunks": 4}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here's a concise and holistic summary of the file 'packages/network/src/index.ts':\n\n**Purpose:** A Web3 React connector that initializes and manages Ethereum network providers for multiple chains.\n\n**Functionality:** It takes in a configuration object, provides customizable provider instances, caches providers by chain ID, and returns the best provider after a timeout."}
{"code": "import type { JsonRpcProvider } from '@ethersproject/providers'\nimport { getBestProvider } from './utils'\n\nclass MockJsonRpcProvider {\n  public readonly succeed: boolean\n  public readonly latency: number\n\n  constructor(succeed: boolean, latency: number) {\n    this.succeed = succeed\n    this.latency = latency\n  }\n\n  public async getNetwork() {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (this.succeed) {\n          resolve(1)\n        } else {\n          reject()\n        }\n      }, this.latency)\n    })\n  }\n}\n\ndescribe('getBestProvider', () => {\n  test('works with 1 url (success)', async () => {\n    const provider = new MockJsonRpcProvider(true, 0) as unknown as JsonRpcProvider\n    const url = await getBestProvider([provider])\n    expect(url === provider).toBe(true)\n  })\n\n  test('works with 1 url (failure)', async () => {\n    const provider = new MockJsonRpcProvider(false, 0) as unknown as JsonRpcProvider\n    const url = await getBestProvider([provider])", "explanation": "Here is a concise summary:\n\n**Purpose:** A test utility class `MockJsonRpcProvider` that simulates an Ethereum provider with configurable success rate and latency.\n\n**Functionality:** Allows testing of a function `getBestProvider` by creating mock providers that can simulate successful or failed connections, enabling tests to be run under various scenarios.", "metadata": {"repo": "magiclabs/web3-react", "file": "packages/network/src/utils.spec.ts", "chunk_number": 1, "total_chunks": 3}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here is a concise summary:\n\n**File Summary:** `packages/network/src/utils.spec.ts` contains test cases for the `getBestProvider` function, which selects the most suitable JSON RPC provider based on status (successful or failed) and performance (speed)."}
{"code": "    expect(url === provider).toBe(true)\n  })\n\n  test('works with 2 urls (success/failure)', async () => {\n    const providerSucceed = new MockJsonRpcProvider(true, 0) as unknown as JsonRpcProvider\n    const providerFail = new MockJsonRpcProvider(false, 0) as unknown as JsonRpcProvider\n\n    const url = await getBestProvider([providerSucceed, providerFail])\n    expect(url === providerSucceed).toBe(true)\n  })\n\n  test('works with 2 urls (failure/success)', async () => {\n    const providerFail = new MockJsonRpcProvider(false, 0) as unknown as JsonRpcProvider\n    const providerSucceed = new MockJsonRpcProvider(true, 0) as unknown as JsonRpcProvider\n\n    const url = await getBestProvider([providerFail, providerSucceed])\n    expect(url === providerSucceed).toBe(true)\n  })\n\n  test('works with 2 successful urls (fast/slow)', async () => {\n    const provider0 = new MockJsonRpcProvider(true, 0) as unknown as JsonRpcProvider\n    const provider1 = new MockJsonRpcProvider(true, 1) as unknown as JsonRpcProvider\n", "explanation": "**Block Summary:**\n\nThis block of code contains four test cases for a `getBestProvider` function. The tests ensure that:\n\n* It correctly returns a single provider when only one is provided.\n* It prioritizes successful providers over failed ones.\n* It favors faster providers over slower ones when multiple successful providers are available.\n\nThe functionality of the `getBestProvider` function appears to select and return the most suitable provider based on its status (successful or failed) and performance (speed).", "metadata": {"repo": "magiclabs/web3-react", "file": "packages/network/src/utils.spec.ts", "chunk_number": 2, "total_chunks": 3}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here is a concise summary:\n\n**File Summary:** `packages/network/src/utils.spec.ts` contains test cases for the `getBestProvider` function, which selects the most suitable JSON RPC provider based on status (successful or failed) and performance (speed)."}
{"code": "    const url = await getBestProvider([provider0, provider1])\n    expect(url === provider0).toBe(true)\n  })\n\n  test('works with 2 successful urls (slow/fast)', async () => {\n    const provider1 = new MockJsonRpcProvider(true, 1) as unknown as JsonRpcProvider\n    const provider0 = new MockJsonRpcProvider(true, 0) as unknown as JsonRpcProvider\n\n    const url = await getBestProvider([provider1, provider0])\n    expect(url === provider1).toBe(true)\n  })\n\n  test('works with 2 successful urls (after timeout/before timeout)', async () => {\n    const provider100 = new MockJsonRpcProvider(true, 100) as unknown as JsonRpcProvider\n    const provider1 = new MockJsonRpcProvider(true, 1) as unknown as JsonRpcProvider\n\n    const url = await getBestProvider([provider100, provider1], 50)\n    expect(url === provider1).toBe(true)\n  })\n})\n", "explanation": "Here is a concise summary:\n\nThis block contains three test cases for the `getBestProvider` function, which appears to select the fastest JSON RPC provider from a list of options based on timeout values. The tests verify that the function returns the expected provider when given different combinations of providers and timeout configurations.", "metadata": {"repo": "magiclabs/web3-react", "file": "packages/network/src/utils.spec.ts", "chunk_number": 3, "total_chunks": 3}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here is a concise summary:\n\n**File Summary:** `packages/network/src/utils.spec.ts` contains test cases for the `getBestProvider` function, which selects the most suitable JSON RPC provider based on status (successful or failed) and performance (speed)."}
{"code": "import type { JsonRpcProvider } from '@ethersproject/providers'\n\n/**\n * @param providers - An array of providers to try to connect to.\n * @param timeout - How long to wait before a call is considered failed, in ms.\n */\nexport async function getBestProvider(providers: JsonRpcProvider[], timeout = 5000): Promise<JsonRpcProvider> {\n  // if we only have 1 provider, it's the best!\n  if (providers.length === 1) return providers[0]\n\n  // the below returns the first provider for which there's been a successful call, prioritized by index\n  return new Promise((resolve) => {\n    let resolved = false\n    const successes: { [index: number]: boolean } = {}\n\n    providers.forEach((provider, i) => {\n      // create a promise that resolves on a successful call, and rejects on a failed call or after timeout milliseconds\n      const promise = new Promise<void>((resolve, reject) => {\n        provider\n          .getNetwork()\n          .then(() => resolve())\n          .catch(() => reject())\n\n        // set a timeout to reject", "explanation": "Here is a concise summary:\n\n**Purpose:** Returns the best JSON RPC provider from an array of providers, prioritizing successful connections.\n\n**Functionality:** Iterates through providers, attempting to make a call using each one. The first provider that successfully makes a call (e.g., gets network info) is returned as the \"best\" provider. If no provider succeeds or if there's only one provider, it returns that provider.", "metadata": {"repo": "magiclabs/web3-react", "file": "packages/network/src/utils.ts", "chunk_number": 1, "total_chunks": 3}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here is a concise summary of the file 'packages/network/src/utils.ts':\n\nThis file contains utility functions for resolving promises in networks:\n- `getBestProvider`: Returns the first successful JSON RPC provider from an array of providers.\n- `waitForAllFailuresThenSucceed`: Resolves a promise when all previous promises at lower indices have failed, and the current one succeeds."}
{"code": "        setTimeout(() => {\n          reject()\n        }, timeout)\n      })\n\n      void promise\n        .then(() => true)\n        .catch(() => false)\n        .then((success) => {\n          // if we already resolved, return\n          if (resolved) return\n\n          // store the result of the call\n          successes[i] = success\n\n          // if this is the last call and we haven't resolved yet - do so\n          if (Object.keys(successes).length === providers.length) {\n            const index = Object.keys(successes).findIndex((j) => successes[Number(j)])\n            // no need to set resolved to true, as this is the last promise\n            return resolve(providers[index === -1 ? 0 : index])\n          }\n\n          // otherwise, for each prospective index, check if we can resolve\n          new Array<number>(providers.length).fill(0).forEach((_, prospectiveIndex) => {\n            // to resolve, we need to:\n            // a) have successfully made a call", "explanation": "Here is a concise summary of the purpose and functionality:\n\n**Purpose:** Resolve a promise when all asynchronous calls in an array are successful.\n\n**Functionality:** Iterates through an array of providers, making asynchronous calls and storing their results. When all calls are complete, resolves the promise with the provider that was able to make the call successfully (or returns a default provider if none were successful).", "metadata": {"repo": "magiclabs/web3-react", "file": "packages/network/src/utils.ts", "chunk_number": 2, "total_chunks": 3}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here is a concise summary of the file 'packages/network/src/utils.ts':\n\nThis file contains utility functions for resolving promises in networks:\n- `getBestProvider`: Returns the first successful JSON RPC provider from an array of providers.\n- `waitForAllFailuresThenSucceed`: Resolves a promise when all previous promises at lower indices have failed, and the current one succeeds."}
{"code": "            // b) not be waiting on any other higher-index calls\n            if (\n              successes[prospectiveIndex] &&\n              new Array<number>(prospectiveIndex).fill(0).every((_, j) => successes[j] === false)\n            ) {\n              resolved = true\n              resolve(providers[prospectiveIndex])\n            }\n          })\n        })\n    })\n  })\n}\n", "explanation": "**Purpose:** Resolve a promise when all previous promises at lower indices have failed, and the current one succeeds.\n\n**Functionality:**\n\n* Checks if the current promise (`successes[prospectiveIndex]`) is successful\n* Verifies that all previous promises (up to `prospectiveIndex-1`) have failed (`new Array<number>(prospectiveIndex).fill(0).every((_, j) => successes[j] === false)`))\n* If true, resolves the current promise with its value.", "metadata": {"repo": "magiclabs/web3-react", "file": "packages/network/src/utils.ts", "chunk_number": 3, "total_chunks": 3}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here is a concise summary of the file 'packages/network/src/utils.ts':\n\nThis file contains utility functions for resolving promises in networks:\n- `getBestProvider`: Returns the first successful JSON RPC provider from an array of providers.\n- `waitForAllFailuresThenSucceed`: Resolves a promise when all previous promises at lower indices have failed, and the current one succeeds."}
{"code": "{\n  \"extends\": \"../../tsconfig.json\",\n  \"include\": [\"./src\"],\n  \"compilerOptions\": {\n    \"outDir\": \"./dist\"\n  }\n}\n", "explanation": "This block is a JSON configuration file that specifies TypeScript compiler options for a specific project. It extends an existing tsconfig.json file and includes only the ./src directory, compiling it into ./dist.", "metadata": {"repo": "magiclabs/web3-react", "file": "packages/network/tsconfig.json", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here is a concise summary of the file 'packages/network/tsconfig.json':\n\n\"Configuration file for compiling TypeScript code in ./src into ./dist.\""}
{"code": "# @web3-react/store\n", "explanation": "This block is a comment indicating that it's related to a store for Web3 React.", "metadata": {"repo": "magiclabs/web3-react", "file": "packages/store/README.md", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Unfortunately, you haven't provided any code blocks or text for me to summarize.\n\nHowever, I can make an educated guess based on your description. If the files are related to a `packages/store` directory in a Web3 React project, here's a possible holistic summary:\n\n**Store Package**\n\nA package for managing state and data storage in a Web3 React application."}
{"code": "import { createWeb3ReactStoreAndActions, MAX_SAFE_CHAIN_ID } from '.'\n\ndescribe('#createWeb3ReactStoreAndActions', () => {\n  test('uninitialized', () => {\n    const [store] = createWeb3ReactStoreAndActions()\n    expect(store.getState()).toEqual({\n      chainId: undefined,\n      accounts: undefined,\n      activating: false,\n      error: undefined,\n    })\n  })\n\n  describe('#startActivation', () => {\n    test('works', () => {\n      const [store, actions] = createWeb3ReactStoreAndActions()\n      actions.startActivation()\n      expect(store.getState()).toEqual({\n        chainId: undefined,\n        accounts: undefined,\n        activating: true,\n        error: undefined,\n      })\n    })\n\n    test('cancellation works', () => {\n      const [store, actions] = createWeb3ReactStoreAndActions()\n      const cancelActivation = actions.startActivation()\n\n      cancelActivation()\n\n      expect(store.getState()).toEqual({\n        chainId: undefined,\n        accounts: undefined,\n        activating: false,\n        error: undefined,\n      })", "explanation": "Here is a concise summary:\n\n**Purpose:** Creates a React store and related actions for interacting with Web3.\n\n**Functionality:** Initializes a store with default values, allows activation and cancellation of the activation process, and updates the store state accordingly.", "metadata": {"repo": "magiclabs/web3-react", "file": "packages/store/src/index.spec.ts", "chunk_number": 1, "total_chunks": 5}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here is a concise summary:\n\n**Purpose:** Test the update functionality of a React Web3 store.\n\n**Functionality:** Verifies that updating store state with new chain ID or accounts preserves existing activation status, and tests two scenarios: starting activation with default values and unsetting activation after updates."}
{"code": "    })\n  })\n\n  describe('#update', () => {\n    test('throws on bad chainIds', () => {\n      const [, actions] = createWeb3ReactStoreAndActions()\n      for (const chainId of [1.1, 0, MAX_SAFE_CHAIN_ID + 1]) {\n        expect(() => actions.update({ chainId })).toThrow(`Invalid chainId ${chainId}`)\n      }\n    })\n\n    test('throws on bad accounts', () => {\n      const [, actions] = createWeb3ReactStoreAndActions()\n      expect(() => actions.update({ accounts: ['0x000000000000000000000000000000000000000'] })).toThrow()\n    })\n\n    test('chainId', () => {\n      const [store, actions] = createWeb3ReactStoreAndActions()\n      const chainId = 1\n      actions.update({ chainId })\n      expect(store.getState()).toEqual({\n        chainId,\n        accounts: undefined,\n        activating: false,\n        error: undefined,\n      })\n    })\n\n    describe('accounts', () => {\n      test('empty', () => {\n        const [store, actions] = createWeb3ReactStoreAndActions()\n        const accounts: string[] = []", "explanation": "This block appears to be a series of unit tests written in JavaScript using Jest and Enzyme. The purpose is to test the functionality of an `update` method, specifically its behavior when:\n\n* Invalid chain IDs are provided\n* Invalid accounts are provided\n* A valid chain ID is updated\n* An empty array of accounts is provided\n\nThe functionality being tested seems to be related to updating state in a React application, possibly for Web3 integration.", "metadata": {"repo": "magiclabs/web3-react", "file": "packages/store/src/index.spec.ts", "chunk_number": 2, "total_chunks": 5}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here is a concise summary:\n\n**Purpose:** Test the update functionality of a React Web3 store.\n\n**Functionality:** Verifies that updating store state with new chain ID or accounts preserves existing activation status, and tests two scenarios: starting activation with default values and unsetting activation after updates."}
{"code": "        actions.update({ accounts })\n        expect(store.getState()).toEqual({\n          chainId: undefined,\n          accounts,\n          activating: false,\n          error: undefined,\n        })\n      })\n\n      test('single', () => {\n        const [store, actions] = createWeb3ReactStoreAndActions()\n        const accounts = ['0x0000000000000000000000000000000000000000']\n        actions.update({ accounts })\n        expect(store.getState()).toEqual({\n          chainId: undefined,\n          accounts,\n          activating: false,\n          error: undefined,\n        })\n      })\n\n      test('multiple', () => {\n        const [store, actions] = createWeb3ReactStoreAndActions()\n        const accounts = ['0x0000000000000000000000000000000000000000', '0x0000000000000000000000000000000000000001']\n        actions.update({ accounts })\n        expect(store.getState()).toEqual({\n          chainId: undefined,\n          accounts,\n          activating: false,\n          error: undefined,\n        })\n      })\n    })\n", "explanation": "**Purpose:** Update store state with new account(s) data.\n\n**Functionality:** This block of code tests the `update` function by passing in a single or multiple Ethereum accounts and verifies that the resulting store state matches expected values (accounts, chainId, activating flag, and error status).", "metadata": {"repo": "magiclabs/web3-react", "file": "packages/store/src/index.spec.ts", "chunk_number": 3, "total_chunks": 5}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here is a concise summary:\n\n**Purpose:** Test the update functionality of a React Web3 store.\n\n**Functionality:** Verifies that updating store state with new chain ID or accounts preserves existing activation status, and tests two scenarios: starting activation with default values and unsetting activation after updates."}
{"code": "    test('both', () => {\n      const [store, actions] = createWeb3ReactStoreAndActions()\n      const chainId = 1\n      const accounts: string[] = []\n      actions.update({ chainId, accounts })\n      expect(store.getState()).toEqual({\n        chainId,\n        accounts,\n        activating: false,\n        error: undefined,\n      })\n    })\n\n    test('chainId does not unset activating', () => {\n      const [store, actions] = createWeb3ReactStoreAndActions()\n      const chainId = 1\n      actions.startActivation()\n      actions.update({ chainId })\n      expect(store.getState()).toEqual({\n        chainId,\n        accounts: undefined,\n        activating: true,\n        error: undefined,\n      })\n    })\n\n    test('accounts does not unset activating', () => {\n      const [store, actions] = createWeb3ReactStoreAndActions()\n      const accounts: string[] = []\n      actions.startActivation()\n      actions.update({ accounts })\n      expect(store.getState()).toEqual({\n        chainId: undefined,\n        accounts,", "explanation": "Here is a concise summary:\n\n**Purpose:** Test the functionality of an update action in a web3 React store.\n\n**Functionality:** Verify that updating the store with new chainId or accounts does not reset the activating state, but rather updates existing values.", "metadata": {"repo": "magiclabs/web3-react", "file": "packages/store/src/index.spec.ts", "chunk_number": 4, "total_chunks": 5}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here is a concise summary:\n\n**Purpose:** Test the update functionality of a React Web3 store.\n\n**Functionality:** Verifies that updating store state with new chain ID or accounts preserves existing activation status, and tests two scenarios: starting activation with default values and unsetting activation after updates."}
{"code": "        activating: true,\n        error: undefined,\n      })\n    })\n\n    test('unsets activating', () => {\n      const [store, actions] = createWeb3ReactStoreAndActions()\n      const chainId = 1\n      const accounts: string[] = []\n      actions.startActivation()\n      actions.update({ chainId, accounts })\n      expect(store.getState()).toEqual({\n        chainId,\n        accounts,\n        activating: false,\n        error: undefined,\n      })\n    })\n  })\n})\n", "explanation": "This block is testing the functionality of a React store that manages Web3 connections.\n\n**Summary:** It tests two scenarios:\n\n1. Starting activation with default values.\n2. Unsetting activation after updating chain ID and accounts.\n\nIt uses Jest's `expect` function to assert the expected state of the store in each scenario.", "metadata": {"repo": "magiclabs/web3-react", "file": "packages/store/src/index.spec.ts", "chunk_number": 5, "total_chunks": 5}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here is a concise summary:\n\n**Purpose:** Test the update functionality of a React Web3 store.\n\n**Functionality:** Verifies that updating store state with new chain ID or accounts preserves existing activation status, and tests two scenarios: starting activation with default values and unsetting activation after updates."}
{"code": "import { getAddress } from '@ethersproject/address'\nimport type { Actions, Web3ReactState, Web3ReactStateUpdate, Web3ReactStore } from '@web3-react/types'\nimport { createStore } from 'zustand'\n\n/**\n * MAX_SAFE_CHAIN_ID is the upper bound limit on what will be accepted for `chainId`\n * `MAX_SAFE_CHAIN_ID = floor( ( 2**53 - 39 ) / 2 ) = 4503599627370476`\n *\n * @see {@link https://github.com/MetaMask/metamask-extension/blob/b6673731e2367e119a5fee9a454dd40bd4968948/shared/constants/network.js#L31}\n */\nexport const MAX_SAFE_CHAIN_ID = 4503599627370476\n\nfunction validateChainId(chainId: number): void {\n  if (!Number.isInteger(chainId) || chainId <= 0 || chainId > MAX_SAFE_CHAIN_ID) {\n    throw new Error(`Invalid chainId ${chainId}`)\n  }\n}\n\nfunction validateAccount(account: string): string {\n  return getAddress(account)\n}\n\nconst DEFAULT_STATE = {\n  chainId: undefined,\n  accounts: undefined,\n  activating: false,\n}\n\nexport function createWeb3ReactStoreAndActions(): [Web3ReactStore, Actions] {", "explanation": "Here is a summary of the purpose and functionality of this block:\n\n**Purpose:** Create a Web3 React store and actions with validation for chainId and account addresses.\n\n**Functionality:**\n\n* Validates chainId to be within a safe range (MAX_SAFE_CHAIN_ID = 4503599627370476).\n* Validates account addresses using ethersproject's getAddress function.\n* Creates a default state for the Web3 React store.\n* Returns a Web3 React store and actions.", "metadata": {"repo": "magiclabs/web3-react", "file": "packages/store/src/index.ts", "chunk_number": 1, "total_chunks": 4}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here's a concise summary of the file 'packages/store/src/index.ts':\n\n**Summary:** The Web3 React store and actions with validation, designed to manage state updates, activation, and input changes while ensuring chainId and account address integrity."}
{"code": "  const store = createStore<Web3ReactState>()(() => DEFAULT_STATE)\n\n  // flag for tracking updates so we don't clobber data when cancelling activation\n  let nullifier = 0\n\n  /**\n   * Sets activating to true, indicating that an update is in progress.\n   *\n   * @returns cancelActivation - A function that cancels the activation by setting activating to false,\n   * as long as there haven't been any intervening updates.\n   */\n  function startActivation(): () => void {\n    const nullifierCached = ++nullifier\n\n    store.setState({ ...DEFAULT_STATE, activating: true })\n\n    // return a function that cancels the activation iff nothing else has happened\n    return () => {\n      if (nullifier === nullifierCached) store.setState({ activating: false })\n    }\n  }\n\n  /**\n   * Used to report a `stateUpdate` which is merged with existing state. The first `stateUpdate` that results in chainId\n   * and accounts being set will also set activating to false, indicating a successful connection.\n   *", "explanation": "Here is a concise summary:\n\n**Purpose:** Manages Web3React state updates and activation.\n\n**Functionality:**\n\n* Tracks activation status through `nullifier` flag.\n* Allows starting activation with `startActivation()` function, which returns a cancel function.\n* Reports state updates through `stateUpdate`, which can trigger activation cancellation.", "metadata": {"repo": "magiclabs/web3-react", "file": "packages/store/src/index.ts", "chunk_number": 2, "total_chunks": 4}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here's a concise summary of the file 'packages/store/src/index.ts':\n\n**Summary:** The Web3 React store and actions with validation, designed to manage state updates, activation, and input changes while ensuring chainId and account address integrity."}
{"code": "   * @param stateUpdate - The state update to report.\n   */\n  function update(stateUpdate: Web3ReactStateUpdate): void {\n    // validate chainId statically, independent of existing state\n    if (stateUpdate.chainId !== undefined) {\n      validateChainId(stateUpdate.chainId)\n    }\n\n    // validate accounts statically, independent of existing state\n    if (stateUpdate.accounts !== undefined) {\n      for (let i = 0; i < stateUpdate.accounts.length; i++) {\n        stateUpdate.accounts[i] = validateAccount(stateUpdate.accounts[i])\n      }\n    }\n\n    nullifier++\n\n    store.setState((existingState): Web3ReactState => {\n      // determine the next chainId and accounts\n      const chainId = stateUpdate.chainId ?? existingState.chainId\n      const accounts = stateUpdate.accounts ?? existingState.accounts\n\n      // ensure that the activating flag is cleared when appropriate\n      let activating = existingState.activating\n      if (activating && chainId && accounts) {\n        activating = false\n      }\n", "explanation": "Here is a concise summary:\n\n**Functionality:** Updates the state of a Web3React application.\n\n**Purpose:** Validates input changes, increments an internal counter (`nullifier`), and updates the state with new or modified chain ID, accounts, and activating flag.", "metadata": {"repo": "magiclabs/web3-react", "file": "packages/store/src/index.ts", "chunk_number": 3, "total_chunks": 4}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here's a concise summary of the file 'packages/store/src/index.ts':\n\n**Summary:** The Web3 React store and actions with validation, designed to manage state updates, activation, and input changes while ensuring chainId and account address integrity."}
{"code": "      return { chainId, accounts, activating }\n    })\n  }\n\n  /**\n   * Resets connector state back to the default state.\n   */\n  function resetState(): void {\n    nullifier++\n    store.setState(DEFAULT_STATE)\n  }\n\n  return [store, { startActivation, update, resetState }]\n}\n", "explanation": "Here is a concise summary:\n\nThis block exports an API for managing connector state, including starting activation, updating state, and resetting it back to default.", "metadata": {"repo": "magiclabs/web3-react", "file": "packages/store/src/index.ts", "chunk_number": 4, "total_chunks": 4}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here's a concise summary of the file 'packages/store/src/index.ts':\n\n**Summary:** The Web3 React store and actions with validation, designed to manage state updates, activation, and input changes while ensuring chainId and account address integrity."}
{"code": "{\n  \"extends\": \"../../tsconfig.json\",\n  \"include\": [\"./src\"],\n  \"compilerOptions\": {\n    \"outDir\": \"./dist\"\n  }\n}\n", "explanation": "**Configuration Block Summary**\n\nThis is a JSON configuration block for a TypeScript compiler setup.\n\n* **Purpose:** Defines the compilation settings for a project.\n* **Functionality:**\n\t+ Extends the base `tsconfig.json` file.\n\t+ Includes only files in the `./src` directory.\n\t+ Outputs compiled JavaScript to the `./dist` directory.", "metadata": {"repo": "magiclabs/web3-react", "file": "packages/store/tsconfig.json", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here is a concise and to-the-point summary of the 'packages/store/tsconfig.json' file:\n\n**TSConfig File Summary**\n\nDefines TypeScript compiler settings for project, compiling ./src files to ./dist directory."}
{"code": "# @web3-react/types\n", "explanation": "This is a JavaScript module ( likely) named '@web3-react/types', which suggests it contains type definitions for Web3 React, used for building Ethereum-based applications.", "metadata": {"repo": "magiclabs/web3-react", "file": "packages/types/README.md", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here's a concise summary:\n\n`@web3-react/types`: A TypeScript module containing type definitions for Web3 React, enabling the development of Ethereum-based applications."}
{"code": "import type { StoreApi } from 'zustand'\n\nexport interface Web3ReactState {\n  chainId: number | undefined\n  accounts: string[] | undefined\n  activating: boolean\n}\n\nexport type Web3ReactStore = StoreApi<Web3ReactState>\n\nexport type Web3ReactStateUpdate =\n  | {\n      chainId: number\n      accounts: string[]\n    }\n  | {\n      chainId: number\n      accounts?: never\n    }\n  | {\n      chainId?: never\n      accounts: string[]\n    }\n\nexport interface Actions {\n  startActivation: () => () => void\n  update: (stateUpdate: Web3ReactStateUpdate) => void\n  resetState: () => void\n}\n\n/** per {@link https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1193.md#request EIP-1193} */\nexport interface RequestArguments {\n  readonly method: string\n  readonly params?: readonly unknown[] | object\n}\n\n/** per {@link https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1193.md#events EIP-1193} */\nexport interface Provider {\n  request(args: RequestArguments): Promise<unknown>\n  on(eventName: string | symbol, listener: (...args: any[]) => void): this", "explanation": "Here is a concise summary of the purpose and functionality:\n\n**Purpose:** A Zustand store for managing Web3 blockchain interactions.\n\n**Functionality:** Provides a state object with chain ID and accounts, as well as methods for updating the state, activating/reactivating the connection, and resetting the state. Additionally, it includes an interface for interacting with the blockchain provider via EIP-1193 requests.", "metadata": {"repo": "magiclabs/web3-react", "file": "packages/types/src/index.ts", "chunk_number": 1, "total_chunks": 5}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here is a concise and holistic summary of the file 'packages/types/src/index.ts':\n\n**Purpose:** A comprehensive set of interfaces and classes for managing Web3 blockchain interactions, including store management (Zustand), Ethereum provider connections, and custom provider management.\n\n**Functionality:** Provides state management for chain ID and accounts, methods for updating the state and activating/reactivating connections, and interfaces for interacting with Ethereum providers via EIP-1193 requests. Additionally, includes classes for managing custom providers and handling errors, as well as methods for connecting to chains, watching assets, and disconnecting."}
{"code": "  removeListener(eventName: string | symbol, listener: (...args: any[]) => void): this\n}\n\n/** per {@link https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1193.md#connect-1 EIP-1193} */\nexport interface ProviderConnectInfo {\n  readonly chainId: string\n}\n\n/** per {@link https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1193.md#rpc-errors EIP-1193} */\nexport interface ProviderRpcError extends Error {\n  message: string\n  code: number\n  data?: unknown\n}\n\n/** Per {@link https://github.com/ethereum/EIPs/blob/master/EIPS/eip-3085.md#parameters EIP-3085} */\nexport interface AddEthereumChainParameter {\n  chainId: number\n  chainName: string\n  nativeCurrency: {\n    name: string\n    symbol: string // 2-6 characters long\n    decimals: 18\n  }\n  rpcUrls: string[]\n  blockExplorerUrls?: string[]\n  iconUrls?: string[] // Currently ignored.\n}\n\n/** per {@link https://github.com/ethereum/EIPs/blob/master/EIPS/eip-747.md#wallet_watchasset-parameters EIP-747} */\nexport interface WatchAssetParameters {", "explanation": "Here is a concise summary of the purpose and functionality of this block:\n\n**Purpose:** A set of interfaces for working with Ethereum providers, including connecting to chains and handling RPC errors.\n\n**Functionality:**\n\n* `removeListener(eventName, listener)`: Removes an event listener.\n* `ProviderConnectInfo`: An interface for providing information about a connected chain (e.g., its ID).\n* `ProviderRpcError`: An extension of the Error class for Ethereum RPC errors.\n* `AddEthereumChainParameter`: An interface for adding a new Ethereum chain to the provider.\n* `WatchAssetParameters`: An interface for watching assets in an EIP-747 compliant way.", "metadata": {"repo": "magiclabs/web3-react", "file": "packages/types/src/index.ts", "chunk_number": 2, "total_chunks": 5}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here is a concise and holistic summary of the file 'packages/types/src/index.ts':\n\n**Purpose:** A comprehensive set of interfaces and classes for managing Web3 blockchain interactions, including store management (Zustand), Ethereum provider connections, and custom provider management.\n\n**Functionality:** Provides state management for chain ID and accounts, methods for updating the state and activating/reactivating connections, and interfaces for interacting with Ethereum providers via EIP-1193 requests. Additionally, includes classes for managing custom providers and handling errors, as well as methods for connecting to chains, watching assets, and disconnecting."}
{"code": "  address: string // The address that the token is at.\n  symbol: string // A ticker symbol or shorthand, up to 5 chars.\n  decimals: number // The number of decimals in the token\n  image: string // A string url of the token logo\n}\n\nexport abstract class Connector {\n  /**\n   * An\n   * EIP-1193 ({@link https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1193.md}) and\n   * EIP-1102 ({@link https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1102.md}) compliant provider.\n   * May also comply with EIP-3085 ({@link https://github.com/ethereum/EIPs/blob/master/EIPS/eip-3085.md}).\n   * This property must be defined while the connector is active, unless a customProvider is provided.\n   */\n  public provider?: Provider\n\n  /**\n   * An optional property meant to allow ethers providers to be used directly rather than via the experimental\n   * 1193 bridge. If desired, this property must be defined while the connector is active, in which case it will\n   * be preferred over provider.\n   */", "explanation": "Here is a summary of the purpose and functionality:\n\n**Token Properties Block:**\nA data block containing properties of a token, including its address, symbol, decimals, and logo image.\n\n**Connector Class:**\nAn abstract class that serves as an Ethereum provider, compliant with EIP-1193, EIP-1102, and optionally EIP-3085. It provides options for using custom providers or the experimental 1193 bridge.", "metadata": {"repo": "magiclabs/web3-react", "file": "packages/types/src/index.ts", "chunk_number": 3, "total_chunks": 5}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here is a concise and holistic summary of the file 'packages/types/src/index.ts':\n\n**Purpose:** A comprehensive set of interfaces and classes for managing Web3 blockchain interactions, including store management (Zustand), Ethereum provider connections, and custom provider management.\n\n**Functionality:** Provides state management for chain ID and accounts, methods for updating the state and activating/reactivating connections, and interfaces for interacting with Ethereum providers via EIP-1193 requests. Additionally, includes classes for managing custom providers and handling errors, as well as methods for connecting to chains, watching assets, and disconnecting."}
{"code": "  public customProvider?: unknown\n\n  protected readonly actions: Actions\n\n  /**\n   * An optional handler which will report errors thrown from event listeners. Any errors caused from\n   * user-defined behavior will be thrown inline through a Promise.\n   */\n  protected onError?: (error: Error) => void\n\n  /**\n   * @param actions - Methods bound to a zustand store that tracks the state of the connector.\n   * @param onError - An optional handler which will report errors thrown from event listeners.\n   * Actions are used by the connector to report changes in connection status.\n   */\n  constructor(actions: Actions, onError?: (error: Error) => void) {\n    this.actions = actions\n    this.onError = onError\n  }\n\n  /**\n   * Reset the state of the connector without otherwise interacting with the connection.\n   */\n  public resetState(): Promise<void> | void {\n    this.actions.resetState()\n  }\n\n  /**\n   * Initiate a connection.\n   */\n  public abstract activate(...args: unknown[]): Promise<void> | void\n\n  /**", "explanation": "Here is a concise summary of the purpose and functionality:\n\n**Purpose:** A custom provider class for managing connections.\n\n**Functionality:**\n\n* Handles errors thrown from event listeners\n* Exposes methods (`resetState` and `activate`) for interacting with the connection\n* Can be extended or implemented by subclasses", "metadata": {"repo": "magiclabs/web3-react", "file": "packages/types/src/index.ts", "chunk_number": 4, "total_chunks": 5}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here is a concise and holistic summary of the file 'packages/types/src/index.ts':\n\n**Purpose:** A comprehensive set of interfaces and classes for managing Web3 blockchain interactions, including store management (Zustand), Ethereum provider connections, and custom provider management.\n\n**Functionality:** Provides state management for chain ID and accounts, methods for updating the state and activating/reactivating connections, and interfaces for interacting with Ethereum providers via EIP-1193 requests. Additionally, includes classes for managing custom providers and handling errors, as well as methods for connecting to chains, watching assets, and disconnecting."}
{"code": "   * Attempt to initiate a connection, failing silently\n   */\n  public connectEagerly?(...args: unknown[]): Promise<void> | void\n\n  /**\n   * Un-initiate a connection. Only needs to be defined if a connection requires specific logic on disconnect.\n   */\n  public deactivate?(...args: unknown[]): Promise<void> | void\n\n  /**\n   * Attempt to add an asset per EIP-747.\n   */\n  public watchAsset?(params: WatchAssetParameters): Promise<true>\n}\n", "explanation": "Here is a concise summary:\n\n**Interface Summary**\n\nThis block defines three methods for managing connections and assets:\n\n* `connectEagerly`: Initiates a connection, failing silently.\n* `deactivate`: Un-initiates a connection, with optional custom logic on disconnect.\n* `watchAsset`: Adds an asset per EIP-747.", "metadata": {"repo": "magiclabs/web3-react", "file": "packages/types/src/index.ts", "chunk_number": 5, "total_chunks": 5}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here is a concise and holistic summary of the file 'packages/types/src/index.ts':\n\n**Purpose:** A comprehensive set of interfaces and classes for managing Web3 blockchain interactions, including store management (Zustand), Ethereum provider connections, and custom provider management.\n\n**Functionality:** Provides state management for chain ID and accounts, methods for updating the state and activating/reactivating connections, and interfaces for interacting with Ethereum providers via EIP-1193 requests. Additionally, includes classes for managing custom providers and handling errors, as well as methods for connecting to chains, watching assets, and disconnecting."}
{"code": "{\n  \"extends\": \"../../tsconfig.json\",\n  \"include\": [\"./src\"],\n  \"compilerOptions\": {\n    \"outDir\": \"./dist\"\n  }\n}\n", "explanation": "**Configuration Block Summary**\n\nThis block is a JSON configuration file that sets up a TypeScript compiler environment. It:\n\n* Extends an existing configuration (`../../tsconfig.json`)\n* Includes source files from the `./src` directory\n* Specifies the output directory for compiled code as `./dist`", "metadata": {"repo": "magiclabs/web3-react", "file": "packages/types/tsconfig.json", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here is a concise summary of the file 'packages/types/tsconfig.json':\n\n**TSConfig File Summary**\n\nJSON configuration file that extends the parent tsconfig, targets ./src files, and outputs compiled code to ./dist."}
{"code": "# @web3-react/url\n", "explanation": "This is a Web3 React library with the name \"url\".", "metadata": {"repo": "magiclabs/web3-react", "file": "packages/url/README.md", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here is a concise and to-the-point holistic summary:\n\n**File Summary:**\n\n`packages/url/README.md` \n\n* This file contains documentation for the `url` package, a Web3 React library.\n* The library provides functionality related to URL manipulation."}
{"code": "import { createWeb3ReactStoreAndActions } from '@web3-react/store'\nimport type { Actions, Web3ReactStore } from '@web3-react/types'\nimport { Url } from '.'\nimport { MockJsonRpcProvider } from '../../network/src/index.spec'\n\njest.mock('@ethersproject/providers', () => ({\n  JsonRpcProvider: MockJsonRpcProvider,\n}))\n\nconst chainId = '0x1'\nconst accounts: string[] = []\n\ndescribe('Url', () => {\n  let store: Web3ReactStore\n  let connector: Url\n  let mockConnector: MockJsonRpcProvider\n\n  describe('works', () => {\n    beforeEach(() => {\n      let actions: Actions\n      ;[store, actions] = createWeb3ReactStoreAndActions()\n      connector = new Url({ actions, url: 'https://mock.url' })\n    })\n\n    test('is un-initialized', async () => {\n      expect(store.getState()).toEqual({\n        chainId: undefined,\n        accounts: undefined,\n        activating: false,\n        error: undefined,\n      })\n    })\n\n    describe('#activate', () => {\n      beforeEach(async () => {\n        // testing hack to ensure the provider is set", "explanation": "Here is a concise summary of the purpose and functionality of this block:\n\n**Purpose:** Unit test suite for the `Url` class, utilizing Jest mocking.\n\n**Functionality:**\n\n* Creates a Web3React store and actions using `createWeb3ReactStoreAndActions`.\n* Mocks the `JsonRpcProvider` from `@ethersproject/providers` with a custom implementation (`MockJsonRpcProvider`).\n* Tests the behavior of the `Url` class in various scenarios.", "metadata": {"repo": "magiclabs/web3-react", "file": "packages/url/src/index.spec.ts", "chunk_number": 1, "total_chunks": 2}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here is a concise summary:\n\n**Purpose:** Unit test suite for `Url` class using Jest mocking.\n\n**Functionality:** Tests various scenarios of the `Url` class with mocked connectors and expected store states."}
{"code": "        await connector.activate()\n        mockConnector = connector.customProvider as unknown as MockJsonRpcProvider\n        mockConnector.chainId = chainId\n      })\n\n      test('works', async () => {\n        await connector.activate()\n\n        expect(store.getState()).toEqual({\n          chainId: Number.parseInt(chainId, 16),\n          accounts,\n          activating: false,\n          error: undefined,\n        })\n      })\n    })\n  })\n})\n", "explanation": "**Summary:** This block activates a connector, assigns a mock connector with a specified chain ID, and tests that the resulting store state matches expected values.", "metadata": {"repo": "magiclabs/web3-react", "file": "packages/url/src/index.spec.ts", "chunk_number": 2, "total_chunks": 2}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here is a concise summary:\n\n**Purpose:** Unit test suite for `Url` class using Jest mocking.\n\n**Functionality:** Tests various scenarios of the `Url` class with mocked connectors and expected store states."}
{"code": "import type { JsonRpcProvider } from '@ethersproject/providers'\nimport type { ConnectionInfo } from '@ethersproject/web'\nimport type { Actions } from '@web3-react/types'\nimport { Connector } from '@web3-react/types'\n\ntype url = string | ConnectionInfo\n\nfunction isUrl(url: url | JsonRpcProvider): url is url {\n  return typeof url === 'string' || ('url' in url && !('connection' in url))\n}\n\n/**\n * @param url - An RPC url or a JsonRpcProvider.\n */\nexport interface UrlConstructorArgs {\n  actions: Actions\n  url: url | JsonRpcProvider\n}\n\nexport class Url extends Connector {\n  /** {@inheritdoc Connector.provider} */\n  public readonly provider: undefined\n  /** {@inheritdoc Connector.customProvider} */\n  public customProvider?: JsonRpcProvider\n\n  private readonly url: url | JsonRpcProvider\n\n  constructor({ actions, url }: UrlConstructorArgs) {\n    super(actions)\n    this.url = url\n  }\n\n  /** {@inheritdoc Connector.activate} */\n  public async activate(): Promise<void> {\n    if (!this.customProvider) {", "explanation": "Here is a concise summary of the purpose and functionality of this block:\n\n**Purpose:** A URL-based connector for Ethereum providers, allowing users to connect to a specific JSON-RPC endpoint.\n\n**Functionality:** The `Url` class extends a `Connector` and takes in an RPC URL or a `JsonRpcProvider`. It allows activation of the provider and optionally sets up a custom provider.", "metadata": {"repo": "magiclabs/web3-react", "file": "packages/url/src/index.ts", "chunk_number": 1, "total_chunks": 2}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here is a concise summary of the file 'packages/url/src/index.ts':\n\n**Purpose:** Initializes a custom Ethereum provider using a given URL.\n\n**Functionality:** Creates a JsonRpcProvider instance from the URL, sets it as the custom provider, retrieves the chain ID, and updates the application state with the new chain ID and empty accounts list."}
{"code": "      const cancelActivation = this.actions.startActivation()\n      if (!isUrl(this.url)) this.customProvider = this.url\n      await import('@ethersproject/providers')\n        .then(({ JsonRpcProvider }) => {\n          this.customProvider = new JsonRpcProvider(this.url as url)\n        })\n        .catch((error) => {\n          cancelActivation()\n          throw error\n        })\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    const { chainId } = await this.customProvider!.getNetwork()\n    this.actions.update({ chainId, accounts: [] })\n  }\n}\n", "explanation": "Here is a concise summary:\n\n**Purpose:** Initialize custom Ethereum provider with given URL.\n\n**Functionality:** \n\n1. Attempt to create JsonRpcProvider instance from imported @ethersproject/providers.\n2. If successful, set custom provider instance and retrieve chain ID from it.\n3. Update application state with new chain ID and empty accounts list.", "metadata": {"repo": "magiclabs/web3-react", "file": "packages/url/src/index.ts", "chunk_number": 2, "total_chunks": 2}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here is a concise summary of the file 'packages/url/src/index.ts':\n\n**Purpose:** Initializes a custom Ethereum provider using a given URL.\n\n**Functionality:** Creates a JsonRpcProvider instance from the URL, sets it as the custom provider, retrieves the chain ID, and updates the application state with the new chain ID and empty accounts list."}
{"code": "{\n  \"extends\": \"../../tsconfig.json\",\n  \"include\": [\"./src\"],\n  \"compilerOptions\": {\n    \"outDir\": \"./dist\"\n  }\n}\n", "explanation": "This block is a configuration file for a TypeScript compiler, specifying where to include code from and where to output compiled code.", "metadata": {"repo": "magiclabs/web3-react", "file": "packages/url/tsconfig.json", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here is a concise and to-the-point summary:\n\n`tsconfig.json`: TypeScript configuration file that specifies input and output paths for compilation."}
{"code": "# @web3-react/walletconnect-v2\n", "explanation": "A package for integrating WalletConnect v2 with Web3 React applications.", "metadata": {"repo": "magiclabs/web3-react", "file": "packages/walletconnect-v2/README.md", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here is a concise and to-the-point summary:\n\n**WalletConnect v2 Package**\n\nIntegrate WalletConnect v2 with your Web3 React application using this package, providing a seamless connection between your app and users' wallets."}
{"code": "// Not available in the `node` environment, but required by WalletConnect\nglobal.TextEncoder = jest.fn()\nglobal.TextDecoder = jest.fn()\n\nimport { EthereumProvider } from '@walletconnect/ethereum-provider'\nimport { MockEIP1193Provider } from '@web3-react/core'\nimport { createWeb3ReactStoreAndActions } from '@web3-react/store'\nimport { RequestArguments } from '@web3-react/types'\n\nimport { WalletConnect, WalletConnectOptions } from '.'\n\ntype EthereumProviderOptions = Parameters<typeof EthereumProvider.init>[0]\n\nconst createTestEnvironment = (\n  opts: Omit<WalletConnectOptions, 'projectId' | 'showQrModal'>,\n  defaultChainId?: number\n) => {\n  const [store, actions] = createWeb3ReactStoreAndActions()\n  const connector = new WalletConnect({\n    actions,\n    defaultChainId,\n    options: { ...opts, projectId: '', showQrModal: false },\n  })\n  return { connector, store }\n}\n\nconst chains = [1, 2, 3]\n\ntype SwitchEthereumChainRequestArguments = {\n  method: 'wallet_switchEthereumChain'\n  params: [{ chainId: string }]\n}\n", "explanation": "Here is a concise summary of the purpose and functionality of this block:\n\n**Purpose:** Mocking environment for WalletConnect testing, providing a setup for creating test environments with Ethereum providers.\n\n**Functionality:** Creates a mock environment by overriding global TextEncoder and Decoder functions, and provides a utility function `createTestEnvironment` to initialize a test environment with an Ethereum provider.", "metadata": {"repo": "magiclabs/web3-react", "file": "packages/walletconnect-v2/src/index.spec.ts", "chunk_number": 1, "total_chunks": 7}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here is a concise and holistic summary of the file 'packages/walletconnect-v2/src/index.spec.ts':\n\nThis file contains test suites for verifying the behavior of WalletConnect's connector functionality, including error handling, optional chain switching, inactive chain errors, and chain switching tests. The code uses Jest's testing framework to mock a wallet provider and test various scenarios, such as activating the connector with an invalid optional chain, switching between Ethereum chains, and checking for unnecessary calls when attempting to activate a chain that is already connected."}
{"code": "const isSwitchEthereumChainRequest = (x: RequestArguments): x is SwitchEthereumChainRequestArguments => {\n  return x.method === 'wallet_switchEthereumChain'\n}\n\nclass MockWalletConnectProvider extends MockEIP1193Provider<number> {\n  opts: EthereumProviderOptions\n\n  constructor(opts: EthereumProviderOptions) {\n    super()\n    this.chainId = opts.chains[0]\n    this.opts = opts\n  }\n\n  /** per {@link https://eips.ethereum.org/EIPS/eip-3326#specification EIP-3326} */\n  public eth_switchEthereumChain = jest.fn(\n    (/* eslint-disable-line @typescript-eslint/no-unused-vars */ _args: string) => null\n  )\n\n  public request(x: RequestArguments | SwitchEthereumChainRequestArguments): Promise<unknown> {\n    if (isSwitchEthereumChainRequest(x)) {\n      this.chainId = parseInt(x.params[0].chainId, 16)\n      this.emit('chainChanged', this.chainId)\n      return Promise.resolve(this.eth_switchEthereumChain(JSON.stringify(x)))\n    } else {\n      return super.request(x)\n    }\n  }\n\n  public enable() {", "explanation": "Here is a concise summary:\n\n**Purpose:** A mock Ethereum provider that handles `eth_switchEthereumChain` requests.\n\n**Functionality:** Checks if the request is for switching Ethereum chains, updates the chain ID and emits a \"chainChanged\" event, then calls the underlying `eth_switchEthereumChain` function.", "metadata": {"repo": "magiclabs/web3-react", "file": "packages/walletconnect-v2/src/index.spec.ts", "chunk_number": 2, "total_chunks": 7}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here is a concise and holistic summary of the file 'packages/walletconnect-v2/src/index.spec.ts':\n\nThis file contains test suites for verifying the behavior of WalletConnect's connector functionality, including error handling, optional chain switching, inactive chain errors, and chain switching tests. The code uses Jest's testing framework to mock a wallet provider and test various scenarios, such as activating the connector with an invalid optional chain, switching between Ethereum chains, and checking for unnecessary calls when attempting to activate a chain that is already connected."}
{"code": "    return super.request({ method: 'eth_requestAccounts' })\n  }\n\n  /**\n   * For testing purposes, let's assume we're connected to all required and optional chains.\n   * We mock this method later in the test suite to test behavior when optional chains are not supported.\n   */\n  public getConnectedChains() {\n    return this.opts.chains.concat(this.opts.optionalChains || [])\n  }\n\n  // session is an object when connected, undefined otherwise\n  get session() {\n    return this.eth_requestAccounts.mock.calls.length > 0\n      ? {\n          // We read `accounts` to check what chains from `optionalChains` did we connect to\n          namespaces: {\n            eip155: {\n              accounts: this.getConnectedChains().map((chainId) => `eip155:${chainId}:0x1`),\n            },\n          },\n        }\n      : undefined\n  }\n\n  public disconnect() {\n    return this\n  }\n}\n\ndescribe('WalletConnect', () => {\n  let wc2InitMock: jest.Mock\n\n  beforeEach(() => {\n    /*", "explanation": "Here is a concise summary:\n\n**Purpose:** This block contains methods for managing Ethereum wallet connections.\n\n**Functionality:**\n\n* `eth_requestAccounts`: Requests accounts from an Ethereum provider.\n* `getConnectedChains`: Returns an array of connected Ethereum chains.\n* `session`: Returns the current session object or undefined if not connected.\n* `disconnect`: Disconnects the wallet (but currently does nothing).", "metadata": {"repo": "magiclabs/web3-react", "file": "packages/walletconnect-v2/src/index.spec.ts", "chunk_number": 3, "total_chunks": 7}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here is a concise and holistic summary of the file 'packages/walletconnect-v2/src/index.spec.ts':\n\nThis file contains test suites for verifying the behavior of WalletConnect's connector functionality, including error handling, optional chain switching, inactive chain errors, and chain switching tests. The code uses Jest's testing framework to mock a wallet provider and test various scenarios, such as activating the connector with an invalid optional chain, switching between Ethereum chains, and checking for unnecessary calls when attempting to activate a chain that is already connected."}
{"code": "     * TypeScript error is expected here. We're mocking a factory `init` method\n     * to only define a subset of `EthereumProvider` that we use internally\n     */\n    // @ts-ignore\n    wc2InitMock = jest\n      .spyOn(EthereumProvider, 'init')\n      // @ts-ignore\n      .mockImplementation(async (opts) => {\n        const provider = new MockWalletConnectProvider(opts)\n        return provider\n      })\n  })\n\n  describe('#connectEagerly', () => {\n    test('should fail when no existing session', async () => {\n      const { connector } = createTestEnvironment({ chains })\n      await expect(connector.connectEagerly()).rejects.toThrow()\n    })\n  })\n\n  describe(`#isomorphicInitialize`, () => {\n    test('should initialize exactly one provider and return a Promise if pending initialization', async () => {\n      const { connector } = createTestEnvironment({ chains })\n      connector.activate()\n      connector.activate()\n      expect(wc2InitMock).toHaveBeenCalledTimes(1)\n    })\n  })\n\n  describe('#activate', () => {", "explanation": "Here is a concise summary:\n\nThis block of code mocks an `init` method for `EthereumProvider`, allowing only a subset of the provider to be used internally. It then tests three scenarios: \n\n1. `connectEagerly()` fails when no existing session exists.\n2. `isomorphicInitialize()` initializes exactly one provider and returns a Promise if pending initialization.\n3. `activate()` is tested, but its functionality is not explicitly stated in this block of code.", "metadata": {"repo": "magiclabs/web3-react", "file": "packages/walletconnect-v2/src/index.spec.ts", "chunk_number": 4, "total_chunks": 7}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here is a concise and holistic summary of the file 'packages/walletconnect-v2/src/index.spec.ts':\n\nThis file contains test suites for verifying the behavior of WalletConnect's connector functionality, including error handling, optional chain switching, inactive chain errors, and chain switching tests. The code uses Jest's testing framework to mock a wallet provider and test various scenarios, such as activating the connector with an invalid optional chain, switching between Ethereum chains, and checking for unnecessary calls when attempting to activate a chain that is already connected."}
{"code": "    test('should take first chain as default', async () => {\n      const { connector, store } = createTestEnvironment({ chains })\n      await connector.activate()\n      expect(store.getState().chainId).toEqual(chains[0])\n    })\n\n    test('should use `defaultChainId` when passed', async () => {\n      const { connector, store } = createTestEnvironment({ chains }, 3)\n      await connector.activate()\n      expect(store.getState().chainId).toEqual(3)\n    })\n\n    test('should prefer argument over `defaultChainId`', async () => {\n      const { connector, store } = createTestEnvironment({ chains }, 3)\n      await connector.activate(2)\n      expect(store.getState().chainId).toEqual(2)\n    })\n\n    test('should throw an error when activating with an unknown chain', async () => {\n      const { connector } = createTestEnvironment({ chains })\n      await expect(connector.activate(99)).rejects.toThrow()\n    })\n\n    test('should throw an error when using optional chain as default', async () => {", "explanation": "Here is a concise summary:\n\n**Block Purpose:** Test suite for verifying the behavior of a connector's `activate` method in relation to setting a default or specific blockchain chain ID.\n\n**Functionality:**\n\n* Tests various scenarios:\n\t+ Using the first available chain as default\n\t+ Using a specified `defaultChainId`\n\t+ Preferring an argument over `defaultChainId`\n\t+ Throwing an error when activating with an unknown chain ID\n\t+ Testing optional chain usage", "metadata": {"repo": "magiclabs/web3-react", "file": "packages/walletconnect-v2/src/index.spec.ts", "chunk_number": 5, "total_chunks": 7}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here is a concise and holistic summary of the file 'packages/walletconnect-v2/src/index.spec.ts':\n\nThis file contains test suites for verifying the behavior of WalletConnect's connector functionality, including error handling, optional chain switching, inactive chain errors, and chain switching tests. The code uses Jest's testing framework to mock a wallet provider and test various scenarios, such as activating the connector with an invalid optional chain, switching between Ethereum chains, and checking for unnecessary calls when attempting to activate a chain that is already connected."}
{"code": "      const { connector } = createTestEnvironment({ chains, optionalChains: [8] }, 8)\n      await expect(connector.activate()).rejects.toThrow()\n    })\n\n    test('should switch to an optional chain', async () => {\n      const { connector, store } = createTestEnvironment({\n        chains,\n        optionalChains: [8],\n      })\n      await connector.activate()\n      await connector.activate(8)\n      expect(store.getState().chainId).toEqual(8)\n    })\n\n    test('should throw an error when activating an inactive optional chain', async () => {\n      jest.spyOn(MockWalletConnectProvider.prototype, 'getConnectedChains').mockReturnValue(chains)\n      const { connector } = createTestEnvironment({\n        chains,\n        optionalChains: [8],\n      })\n      await connector.activate()\n      await expect(connector.activate(8)).rejects.toThrow()\n    })\n\n    test('should switch chain', async () => {\n      const { connector, store } = createTestEnvironment({ chains })\n      await connector.activate()", "explanation": "Here is a concise summary:\n\nThis block of code contains four test cases for a wallet connector functionality.\n\n1. **Error handling**: Test that activating the connector with an invalid optional chain throws an error.\n2. **Optional chain switching**: Test that switching to an optional chain is successful and updates the store state.\n3. **Inactive optional chain error**: Test that trying to activate an inactive optional chain throws an error.\n4. **Chain switching**: Test that switching between chains is successful.\n\nThe code uses Jest's testing framework and involves mocking a wallet provider to test different scenarios.", "metadata": {"repo": "magiclabs/web3-react", "file": "packages/walletconnect-v2/src/index.spec.ts", "chunk_number": 6, "total_chunks": 7}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here is a concise and holistic summary of the file 'packages/walletconnect-v2/src/index.spec.ts':\n\nThis file contains test suites for verifying the behavior of WalletConnect's connector functionality, including error handling, optional chain switching, inactive chain errors, and chain switching tests. The code uses Jest's testing framework to mock a wallet provider and test various scenarios, such as activating the connector with an invalid optional chain, switching between Ethereum chains, and checking for unnecessary calls when attempting to activate a chain that is already connected."}
{"code": "      expect(store.getState().chainId).toEqual(1)\n      await connector.activate(2)\n      expect(store.getState().chainId).toEqual(2)\n    })\n\n    test('should not switch chain if already connected', async () => {\n      const { connector } = createTestEnvironment({ chains })\n      await connector.activate(2)\n      await connector.activate(2)\n      expect(\n        (connector.provider as unknown as MockWalletConnectProvider).eth_switchEthereumChain\n      ).toHaveBeenCalledTimes(0)\n    })\n  })\n})\n", "explanation": "**Test Block**\n\nThis block contains two tests that verify the behavior of a connector when switching between Ethereum chains.\n\n1. **Chain Switching Test**: Verifies that the connector can switch from chain ID 1 to chain ID 2.\n2. **Duplicate Chain Activation Test**: Checks that if the connector is already connected to a chain, attempting to activate it again does not result in unnecessary calls to switch the chain.", "metadata": {"repo": "magiclabs/web3-react", "file": "packages/walletconnect-v2/src/index.spec.ts", "chunk_number": 7, "total_chunks": 7}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here is a concise and holistic summary of the file 'packages/walletconnect-v2/src/index.spec.ts':\n\nThis file contains test suites for verifying the behavior of WalletConnect's connector functionality, including error handling, optional chain switching, inactive chain errors, and chain switching tests. The code uses Jest's testing framework to mock a wallet provider and test various scenarios, such as activating the connector with an invalid optional chain, switching between Ethereum chains, and checking for unnecessary calls when attempting to activate a chain that is already connected."}
{"code": "import type WalletConnectProvider from '@walletconnect/ethereum-provider'\nimport type { Actions, ProviderRpcError } from '@web3-react/types'\nimport { Connector } from '@web3-react/types'\nimport EventEmitter3 from 'eventemitter3'\n\nimport { getBestUrlMap, getChainsWithDefault } from './utils'\n\nexport const URI_AVAILABLE = 'URI_AVAILABLE'\nconst DEFAULT_TIMEOUT = 5000\n\n/**\n * Options to configure the WalletConnect provider.\n * For the full list of options, see {@link https://docs.walletconnect.com/2.0/javascript/providers/ethereum#initialization WalletConnect documentation}.\n */\nexport type WalletConnectOptions = Omit<Parameters<typeof WalletConnectProvider.init>[0], 'rpcMap'> & {\n  /**\n   * Map of chainIds to rpc url(s). If multiple urls are provided, the first one that responds\n   * within a given timeout will be used. Note that multiple urls are not supported by WalletConnect by default.\n   * That's why we extend its options with our own `rpcMap` (@see getBestUrlMap).\n   */", "explanation": "Here is a concise summary:\n\n**Block Purpose:** Configure and utilize the WalletConnect Ethereum provider.\n\n**Key Functionality:**\n\n* Import necessary modules and types\n* Define constants for URI availability and timeout\n* Export type definitions for WalletConnect options and events\n* Utilize `getBestUrlMap` and `getChainsWithDefault` utility functions.", "metadata": {"repo": "magiclabs/web3-react", "file": "packages/walletconnect-v2/src/index.ts", "chunk_number": 1, "total_chunks": 7}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here is a concise summary of the file 'packages/walletconnect-v2/src/index.ts':\n\n**Purpose:** Configure and utilize the WalletConnect Ethereum provider.\n\n**Functionality:**\n\n* Handle user connections, disconnections, and errors\n* Initialize provider with desired chain ID\n* Validate current chain connection before activating a new chain\n* Enable provider with retries and automatic deactivation on error or disconnect events."}
{"code": "  rpcMap?: { [chainId: number]: string | string[] }\n  /** @deprecated Use `rpcMap` instead. */\n  rpc?: { [chainId: number]: string | string[] }\n}\n\n/**\n * Options to configure the WalletConnect connector.\n */\nexport interface WalletConnectConstructorArgs {\n  actions: Actions\n  /** Options to pass to `@walletconnect/ethereum-provider`. */\n  options: WalletConnectOptions\n  /** The chainId to connect to in activate if one is not provided. */\n  defaultChainId?: number\n  /**\n   * @param timeout - Timeout, in milliseconds, after which to treat network calls to urls as failed when selecting\n   * online urls.\n   */\n  timeout?: number\n  /**\n   * @param onError - Handler to report errors thrown from WalletConnect.\n   */\n  onError?: (error: Error) => void\n}\n\nexport class WalletConnect extends Connector {\n  /** {@inheritdoc Connector.provider} */\n  public provider?: WalletConnectProvider\n  public readonly events = new EventEmitter3()\n\n  private readonly options: Omit<WalletConnectOptions, 'rpcMap' | 'chains'>\n", "explanation": "Here is a concise summary of the purpose and functionality:\n\n**Purpose:** Configure options for the WalletConnect connector.\n\n**Functionality:** Pass options, such as chain ID, timeout, and error handler, to customize wallet connectivity behavior.", "metadata": {"repo": "magiclabs/web3-react", "file": "packages/walletconnect-v2/src/index.ts", "chunk_number": 2, "total_chunks": 7}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here is a concise summary of the file 'packages/walletconnect-v2/src/index.ts':\n\n**Purpose:** Configure and utilize the WalletConnect Ethereum provider.\n\n**Functionality:**\n\n* Handle user connections, disconnections, and errors\n* Initialize provider with desired chain ID\n* Validate current chain connection before activating a new chain\n* Enable provider with retries and automatic deactivation on error or disconnect events."}
{"code": "  private readonly rpcMap?: Record<number, string | string[]>\n  private readonly chains: number[]\n  private readonly defaultChainId?: number\n  private readonly timeout: number\n\n  private eagerConnection?: Promise<WalletConnectProvider>\n\n  constructor({ actions, options, defaultChainId, timeout = DEFAULT_TIMEOUT, onError }: WalletConnectConstructorArgs) {\n    super(actions, onError)\n\n    const { rpcMap, rpc, chains, ...rest } = options\n\n    this.options = rest\n    this.chains = chains\n    this.defaultChainId = defaultChainId\n    this.rpcMap = rpcMap || rpc\n    this.timeout = timeout\n  }\n\n  private disconnectListener = (error: ProviderRpcError) => {\n    this.actions.resetState()\n    if (error) this.onError?.(error)\n  }\n\n  private chainChangedListener = (chainId: string): void => {\n    this.actions.update({ chainId: Number.parseInt(chainId, 16) })\n  }\n\n  private accountsChangedListener = (accounts: string[]): void => {\n    this.actions.update({ accounts })\n  }\n\n  private URIListener = (uri: string): void => {", "explanation": "Here is a concise summary:\n\n**Block Purpose:** A constructor for a WalletConnect component, handling options, connections, and errors.\n\n**Functionality:**\n\n* Initializes instance variables from provided options\n* Handles connection disconnections with error handling\n* Updates state on chain ID changes\n* Updates state on account changes\n* Sets up event listeners for these changes", "metadata": {"repo": "magiclabs/web3-react", "file": "packages/walletconnect-v2/src/index.ts", "chunk_number": 3, "total_chunks": 7}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here is a concise summary of the file 'packages/walletconnect-v2/src/index.ts':\n\n**Purpose:** Configure and utilize the WalletConnect Ethereum provider.\n\n**Functionality:**\n\n* Handle user connections, disconnections, and errors\n* Initialize provider with desired chain ID\n* Validate current chain connection before activating a new chain\n* Enable provider with retries and automatic deactivation on error or disconnect events."}
{"code": "    this.events.emit(URI_AVAILABLE, uri)\n  }\n\n  private isomorphicInitialize(\n    desiredChainId: number | undefined = this.defaultChainId\n  ): Promise<WalletConnectProvider> {\n    if (this.eagerConnection) return this.eagerConnection\n\n    const rpcMap = this.rpcMap ? getBestUrlMap(this.rpcMap, this.timeout) : undefined\n    const chains = desiredChainId ? getChainsWithDefault(this.chains, desiredChainId) : this.chains\n\n    return (this.eagerConnection = import('@walletconnect/ethereum-provider').then(async (ethProviderModule) => {\n      const provider = (this.provider = await ethProviderModule.default.init({\n        ...this.options,\n        chains,\n        rpcMap: await rpcMap,\n      }))\n\n      return provider\n        .on('disconnect', this.disconnectListener)\n        .on('chainChanged', this.chainChangedListener)\n        .on('accountsChanged', this.accountsChangedListener)\n        .on('display_uri', this.URIListener)\n    }))\n  }\n\n  /** {@inheritdoc Connector.connectEagerly} */", "explanation": "Here is a concise summary:\n\n**Purpose:** Initialize WalletConnect provider with desired chain ID.\n\n**Functionality:** Imports Ethereum provider, sets up event listeners, and returns the initialized provider instance.", "metadata": {"repo": "magiclabs/web3-react", "file": "packages/walletconnect-v2/src/index.ts", "chunk_number": 4, "total_chunks": 7}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here is a concise summary of the file 'packages/walletconnect-v2/src/index.ts':\n\n**Purpose:** Configure and utilize the WalletConnect Ethereum provider.\n\n**Functionality:**\n\n* Handle user connections, disconnections, and errors\n* Initialize provider with desired chain ID\n* Validate current chain connection before activating a new chain\n* Enable provider with retries and automatic deactivation on error or disconnect events."}
{"code": "  public async connectEagerly(): Promise<void> {\n    const cancelActivation = this.actions.startActivation()\n\n    try {\n      const provider = await this.isomorphicInitialize()\n      // WalletConnect automatically persists and restores active sessions\n      if (!provider.session) {\n        throw new Error('No active session found. Connect your wallet first.')\n      }\n      this.actions.update({ accounts: provider.accounts, chainId: provider.chainId })\n    } catch (error) {\n      await this.deactivate()\n      cancelActivation()\n      throw error\n    }\n  }\n\n  /**\n   * @param desiredChainId - The desired chainId to connect to.\n   */\n  public async activate(desiredChainId?: number): Promise<void> {\n    const provider = await this.isomorphicInitialize(desiredChainId)\n\n    if (provider.session) {\n      if (!desiredChainId || desiredChainId === provider.chainId) return\n      // WalletConnect exposes connected accounts, not chains: `eip155:${chainId}:${address}`", "explanation": "Here is a concise summary of the purpose and functionality of this block:\n\n**Purpose:** Establish a connection with a wallet provider.\n\n**Functionality:**\n\n* Initialize the provider and retrieve active session information.\n* If no active session exists, display an error message and deactivate.\n* Otherwise, update local state with provider accounts and chain ID.\n* (Optional) Activate on a specific chain ID if provided.", "metadata": {"repo": "magiclabs/web3-react", "file": "packages/walletconnect-v2/src/index.ts", "chunk_number": 5, "total_chunks": 7}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here is a concise summary of the file 'packages/walletconnect-v2/src/index.ts':\n\n**Purpose:** Configure and utilize the WalletConnect Ethereum provider.\n\n**Functionality:**\n\n* Handle user connections, disconnections, and errors\n* Initialize provider with desired chain ID\n* Validate current chain connection before activating a new chain\n* Enable provider with retries and automatic deactivation on error or disconnect events."}
{"code": "      const isConnectedToDesiredChain = provider.session.namespaces.eip155.accounts.some((account) =>\n        account.startsWith(`eip155:${desiredChainId}:`)\n      )\n      if (!isConnectedToDesiredChain) {\n        if (this.options.optionalChains?.includes(desiredChainId)) {\n          throw new Error(\n            `Cannot activate an optional chain (${desiredChainId}), as the wallet is not connected to it.\\n\\tYou should handle this error in application code, as there is no guarantee that a wallet is connected to a chain configured in \"optionalChains\".`\n          )\n        }\n        throw new Error(\n          `Unknown chain (${desiredChainId}). Make sure to include any chains you might connect to in the \"chains\" or \"optionalChains\" parameters when initializing WalletConnect.`\n        )\n      }\n      return provider.request<void>({\n        method: 'wallet_switchEthereumChain',\n        params: [{ chainId: `0x${desiredChainId.toString(16)}` }],\n      })\n    }\n", "explanation": "Here is a concise summary:\n\n**Functionality:** Checks if the user is connected to the desired Ethereum chain and, if not, throws an error or switches chains using WalletConnect API.\n\n**Purpose:** Validates the current chain connection before activating a new chain.", "metadata": {"repo": "magiclabs/web3-react", "file": "packages/walletconnect-v2/src/index.ts", "chunk_number": 6, "total_chunks": 7}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here is a concise summary of the file 'packages/walletconnect-v2/src/index.ts':\n\n**Purpose:** Configure and utilize the WalletConnect Ethereum provider.\n\n**Functionality:**\n\n* Handle user connections, disconnections, and errors\n* Initialize provider with desired chain ID\n* Validate current chain connection before activating a new chain\n* Enable provider with retries and automatic deactivation on error or disconnect events."}
{"code": "    const cancelActivation = this.actions.startActivation()\n\n    try {\n      await provider.enable()\n      this.actions.update({ chainId: provider.chainId, accounts: provider.accounts })\n    } catch (error) {\n      await this.deactivate()\n      cancelActivation()\n      throw error\n    }\n  }\n\n  /** {@inheritdoc Connector.deactivate} */\n  public async deactivate(): Promise<void> {\n    this.provider\n      ?.removeListener('disconnect', this.disconnectListener)\n      .removeListener('chainChanged', this.chainChangedListener)\n      .removeListener('accountsChanged', this.accountsChangedListener)\n      .removeListener('display_uri', this.URIListener)\n      .disconnect()\n    this.provider = undefined\n    this.eagerConnection = undefined\n    this.actions.resetState()\n  }\n}\n", "explanation": "Here is a concise summary:\n\n**Purpose:** Handles provider enablement and automatic deactivation upon error.\n\n**Functionality:**\n\n* Enables provider with retries (with `try-catch` block)\n* Updates local state with provider chain ID and accounts\n* Automatically deactivates on error or disconnect events", "metadata": {"repo": "magiclabs/web3-react", "file": "packages/walletconnect-v2/src/index.ts", "chunk_number": 7, "total_chunks": 7}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here is a concise summary of the file 'packages/walletconnect-v2/src/index.ts':\n\n**Purpose:** Configure and utilize the WalletConnect Ethereum provider.\n\n**Functionality:**\n\n* Handle user connections, disconnections, and errors\n* Initialize provider with desired chain ID\n* Validate current chain connection before activating a new chain\n* Enable provider with retries and automatic deactivation on error or disconnect events."}
{"code": "import { getBestUrlMap, getChainsWithDefault } from './utils'\n\nclass MockHttpConnection {\n  public readonly succeed: boolean\n  public readonly latency: number\n\n  constructor(url: string) {\n    this.succeed = url.startsWith('succeed')\n    this.latency = Number.parseInt(url.split('_')[1])\n  }\n}\n\nclass MockJsonRpcProvider {\n  private readonly http: MockHttpConnection\n\n  constructor(http: MockHttpConnection) {\n    this.http = http\n  }\n\n  public async request() {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (this.http.succeed) {\n          resolve(1)\n        } else {\n          reject()\n        }\n      }, this.http.latency)\n    })\n  }\n}\n\njest.mock('@walletconnect/jsonrpc-http-connection', () => ({\n  HttpConnection: MockHttpConnection,\n}))\njest.mock('@walletconnect/jsonrpc-provider', () => ({\n  JsonRpcProvider: MockJsonRpcProvider,\n}))\n\ndescribe('getBestUrl', () => {\n  test('works with a single string', async () => {\n    const rpc = await getBestUrlMap({ 0: 'succeed_0' }, 100)", "explanation": "Here is a concise summary:\n\nThis block of code defines two mock classes (`MockHttpConnection` and `MockJsonRpcProvider`) for testing purposes. It uses Jest mocking to replace existing imports with these mocks, allowing tests to be run in isolation. The `getBestUrlMap` function is tested using a test case.", "metadata": {"repo": "magiclabs/web3-react", "file": "packages/walletconnect-v2/src/utils.spec.ts", "chunk_number": 1, "total_chunks": 3}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here's a holistic summary of the file 'packages/walletconnect-v2/src/utils.spec.ts':\n\nThis code defines mock classes for testing purposes, using Jest mocking to isolate tests. It contains two test suites verifying the functionality of `getBestUrlMap` and `getChainsWithDefault`, covering various scenarios under 100ms timeout."}
{"code": "    expect(rpc[0]).toBe('succeed_0')\n  })\n\n  test('works with 1 rpc (success)', async () => {\n    const rpc = await getBestUrlMap({ 0: ['succeed_0'] }, 100)\n    expect(rpc[0]).toBe('succeed_0')\n  })\n\n  test('works with 2 urls (success/failure)', async () => {\n    const rpc = await getBestUrlMap({ 0: ['succeed_0', 'fail_0'] }, 100)\n    expect(rpc[0]).toBe('succeed_0')\n  })\n\n  test('works with 2 urls (failure/success)', async () => {\n    const rpc = await getBestUrlMap({ 0: ['fail_0', 'succeed_0'] }, 100)\n    expect(rpc[0]).toBe('succeed_0')\n  })\n\n  test('works with 2 successful urls (fast/slow)', async () => {\n    const rpc = await getBestUrlMap({ 0: ['succeed_0', 'succeed_1'] }, 100)\n    expect(rpc[0]).toBe('succeed_0')\n  })\n\n  test('works with 2 successful urls (slow/fast)', async () => {\n    const rpc = await getBestUrlMap({ 0: ['succeed_1', 'succeed_0'] }, 100)\n    expect(rpc[0]).toBe('succeed_1')\n  })\n\n  test('works with 2 successful urls (after timeout/before timeout)', async () => {", "explanation": "This block contains a series of tests for the `getBestUrlMap` function, which appears to select the first successful URL from a list of URLs and return it as an object. The tests cover various scenarios, such as single or multiple URLs, success/failure outcomes, and varying response times within a 100ms timeout period.", "metadata": {"repo": "magiclabs/web3-react", "file": "packages/walletconnect-v2/src/utils.spec.ts", "chunk_number": 2, "total_chunks": 3}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here's a holistic summary of the file 'packages/walletconnect-v2/src/utils.spec.ts':\n\nThis code defines mock classes for testing purposes, using Jest mocking to isolate tests. It contains two test suites verifying the functionality of `getBestUrlMap` and `getChainsWithDefault`, covering various scenarios under 100ms timeout."}
{"code": "    const rpc = await getBestUrlMap({ 0: ['succeed_100', 'succeed_0'] }, 50)\n    expect(rpc[0]).toBe('succeed_0')\n  })\n})\n\ndescribe('getChainsWithDefault', () => {\n  test('puts the default chain first at the beginning', () => {\n    expect(getChainsWithDefault([1, 2, 3], 3)).toEqual([3, 1, 2])\n  })\n})\n", "explanation": "Here is a concise summary:\n\n**Block Purpose:** Test suite for two functions: `getBestUrlMap` and `getChainsWithDefault`.\n\n**Functionality:** The block contains two test cases that verify the expected output of these functions under different scenarios.", "metadata": {"repo": "magiclabs/web3-react", "file": "packages/walletconnect-v2/src/utils.spec.ts", "chunk_number": 3, "total_chunks": 3}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here's a holistic summary of the file 'packages/walletconnect-v2/src/utils.spec.ts':\n\nThis code defines mock classes for testing purposes, using Jest mocking to isolate tests. It contains two test suites verifying the functionality of `getBestUrlMap` and `getChainsWithDefault`, covering various scenarios under 100ms timeout."}
{"code": "/**\n * @param rpcMap - Map of chainIds to rpc url(s).\n * @param timeout - Timeout, in milliseconds, after which to consider network calls failed.\n */\nexport async function getBestUrlMap(\n  rpcMap: Record<string, string | string[]>,\n  timeout: number\n): Promise<{ [chainId: string]: string }> {\n  return Object.fromEntries(\n    await Promise.all(Object.entries(rpcMap).map(async ([chainId, map]) => [chainId, await getBestUrl(map, timeout)]))\n  )\n}\n\n/**\n * @param urls - An array of URLs to try to connect to.\n * @param timeout - {@link getBestUrlMap}\n */\nasync function getBestUrl(urls: string | string[], timeout: number): Promise<string> {\n  // if we only have 1 url, it's the best!\n  if (typeof urls === 'string') return urls\n  if (urls.length === 1) return urls[0]\n\n  const [HttpConnection, JsonRpcProvider] = await Promise.all([\n    import('@walletconnect/jsonrpc-http-connection').then(({ HttpConnection }) => HttpConnection),", "explanation": "**Summary**\n\nThe `getBestUrlMap` function takes a map of chain IDs to RPC URLs and a timeout value, and returns an object mapping each chain ID to its best-connected URL.\n\n**Functionality**\n\n1. It uses `Object.entries(rpcMap)` to get an array of key-value pairs from the input `rpcMap`.\n2. For each pair, it calls `getBestUrl` with the list of URLs for a given chain ID and timeout value.\n3. If only one URL is provided for a chain ID, it returns that single URL.\n4. Otherwise, it tries to establish connections to all provided URLs using `@walletconnect/jsonrpc-http-connection`.\n5. The function then returns an object mapping each chain ID to its best-connected URL.\n\n**getBestUrl**\n\nThis function takes an array of URLs and a timeout value, and returns the first successful connection or the only provided URL if there's only one.\n\nNote: This summary assumes you have basic knowledge of JavaScript and async functions. If you need further clarification, please let me know!", "metadata": {"repo": "magiclabs/web3-react", "file": "packages/walletconnect-v2/src/utils.ts", "chunk_number": 1, "total_chunks": 4}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here is a concise summary of the file 'packages/walletconnect-v2/src/utils.ts':\n\n**Summary:** This file contains utility functions for resolving connections to blockchain networks.\n\n**Key Functions:**\n\n1. `getBestUrlMap`: Resolves best-connected URLs for multiple chain IDs by iterating through provided URLs and returning the first successful connection.\n2. `getBestUrl`: Attempts to establish a successful connection with multiple URLs by sending an RPC request.\n3. `getChainsWithDefault`: Rearranges an array of chain IDs to prioritize a specified default chain ID.\n\n**Purpose:** To assist in establishing reliable connections to blockchain networks."}
{"code": "    import('@walletconnect/jsonrpc-provider').then(({ JsonRpcProvider }) => JsonRpcProvider),\n  ])\n\n  // the below returns the first url for which there's been a successful call, prioritized by index\n  return new Promise((resolve) => {\n    let resolved = false\n    const successes: { [index: number]: boolean } = {}\n\n    urls.forEach((url, i) => {\n      const http = new JsonRpcProvider(new HttpConnection(url))\n\n      // create a promise that resolves on a successful call, and rejects on a failed call or after timeout milliseconds\n      const promise = new Promise<void>((resolve, reject) => {\n        http\n          .request({ method: 'eth_chainId' })\n          .then(() => resolve())\n          .catch(() => reject())\n\n        // set a timeout to reject\n        setTimeout(() => {\n          reject()\n        }, timeout)\n      })\n\n      void promise\n        .then(() => true)\n        .catch(() => false)\n        .then((success) => {\n          // if we already resolved, return\n          if (resolved) return\n", "explanation": "Here is a summary of the purpose and functionality of this block:\n\n**Purpose:** Attempts to establish a successful connection with multiple URLs by sending an RPC request.\n\n**Functionality:** Iterates through a list of URLs, sends a 'eth_chainId' request to each one, and returns the first URL that successfully resolves within a specified timeout.", "metadata": {"repo": "magiclabs/web3-react", "file": "packages/walletconnect-v2/src/utils.ts", "chunk_number": 2, "total_chunks": 4}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here is a concise summary of the file 'packages/walletconnect-v2/src/utils.ts':\n\n**Summary:** This file contains utility functions for resolving connections to blockchain networks.\n\n**Key Functions:**\n\n1. `getBestUrlMap`: Resolves best-connected URLs for multiple chain IDs by iterating through provided URLs and returning the first successful connection.\n2. `getBestUrl`: Attempts to establish a successful connection with multiple URLs by sending an RPC request.\n3. `getChainsWithDefault`: Rearranges an array of chain IDs to prioritize a specified default chain ID.\n\n**Purpose:** To assist in establishing reliable connections to blockchain networks."}
{"code": "          // store the result of the call\n          successes[i] = success\n\n          // if this is the last call and we haven't resolved yet - do so\n          if (Object.keys(successes).length === urls.length) {\n            const index = Object.keys(successes).findIndex((j) => successes[Number(j)])\n            // no need to set resolved to true, as this is the last promise\n            return resolve(urls[index === -1 ? 0 : index])\n          }\n\n          // otherwise, for each prospective index, check if we can resolve\n          new Array<number>(urls.length).fill(0).forEach((_, prospectiveIndex) => {\n            // to resolve, we need to:\n            // a) have successfully made a call\n            // b) not be waiting on any other higher-index calls\n            if (\n              successes[prospectiveIndex] &&\n              new Array<number>(prospectiveIndex).fill(0).every((_, j) => successes[j] === false)\n            ) {\n              resolved = true\n              resolve(urls[prospectiveIndex])", "explanation": "Here is a concise summary of the purpose and functionality of this block:\n\n**Purpose:** Resolve promises in order, based on successful call results.\n\n**Functionality:** Checks if all calls are complete, or if each call can be resolved without waiting for others. If so, resolves the corresponding promise in sequence.", "metadata": {"repo": "magiclabs/web3-react", "file": "packages/walletconnect-v2/src/utils.ts", "chunk_number": 3, "total_chunks": 4}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here is a concise summary of the file 'packages/walletconnect-v2/src/utils.ts':\n\n**Summary:** This file contains utility functions for resolving connections to blockchain networks.\n\n**Key Functions:**\n\n1. `getBestUrlMap`: Resolves best-connected URLs for multiple chain IDs by iterating through provided URLs and returning the first successful connection.\n2. `getBestUrl`: Attempts to establish a successful connection with multiple URLs by sending an RPC request.\n3. `getChainsWithDefault`: Rearranges an array of chain IDs to prioritize a specified default chain ID.\n\n**Purpose:** To assist in establishing reliable connections to blockchain networks."}
{"code": "            }\n          })\n        })\n    })\n  })\n}\n\n/**\n * @param chains - An array of chain IDs.\n * @param defaultChainId - The chain ID to treat as the default (it will be the first element in the returned array).\n */\nexport function getChainsWithDefault(chains: number[], defaultChainId: number) {\n  const idx = chains.indexOf(defaultChainId)\n  if (idx === -1) {\n    throw new Error(\n      `Invalid chainId ${defaultChainId}. Make sure default chain is included in \"chains\" - chains specified in \"optionalChains\" may not be selected as the default, as they may not be supported by the wallet.`\n    )\n  }\n\n  const ordered = [...chains]\n  ordered.splice(idx, 1)\n  return [defaultChainId, ...ordered]\n}\n", "explanation": "**Summary:**\n\nThis block exports a function `getChainsWithDefault` that rearranges an array of chain IDs to prioritize a specified default chain ID. If the default chain ID is not found in the array, it throws an error. \n\nThe functionality can be summarized as:\n\n* Find the index of the default chain ID in the input array.\n* Remove the default chain ID from its position and return it as the first element of a new array, followed by the remaining elements in their original order.", "metadata": {"repo": "magiclabs/web3-react", "file": "packages/walletconnect-v2/src/utils.ts", "chunk_number": 4, "total_chunks": 4}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here is a concise summary of the file 'packages/walletconnect-v2/src/utils.ts':\n\n**Summary:** This file contains utility functions for resolving connections to blockchain networks.\n\n**Key Functions:**\n\n1. `getBestUrlMap`: Resolves best-connected URLs for multiple chain IDs by iterating through provided URLs and returning the first successful connection.\n2. `getBestUrl`: Attempts to establish a successful connection with multiple URLs by sending an RPC request.\n3. `getChainsWithDefault`: Rearranges an array of chain IDs to prioritize a specified default chain ID.\n\n**Purpose:** To assist in establishing reliable connections to blockchain networks."}
{"code": "{\n  \"extends\": \"../../tsconfig.json\",\n  \"include\": [\"./src\"],\n  \"compilerOptions\": {\n    \"outDir\": \"./dist\"\n  }\n}\n", "explanation": "This block is a configuration file for a TypeScript compiler, specifying:\n\n* The base configuration to extend (`../../tsconfig.json`)\n* Which directories to include in the compilation process (`./src`)\n* Output directory for compiled files (`./dist`)", "metadata": {"repo": "magiclabs/web3-react", "file": "packages/walletconnect-v2/tsconfig.json", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here's a concise summary of the file 'packages/walletconnect-v2/tsconfig.json':\n\n\"Base configuration extending from parent tsconfig, compiling ./src into ./dist.\""}
{"code": "# @web3-react/walletconnect\n", "explanation": "This is a library for Web3React, providing WalletConnect functionality.", "metadata": {"repo": "magiclabs/web3-react", "file": "packages/walletconnect/README.md", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here's a concise summary:\n\nThe `walletconnect` package provides WalletConnect functionality for Web3React, enabling seamless wallet interactions."}
{"code": "import { createWeb3ReactStoreAndActions } from '@web3-react/store'\nimport type { Actions, RequestArguments, Web3ReactStore } from '@web3-react/types'\nimport EventEmitter from 'eventemitter3'\nimport { WalletConnect } from '.'\nimport { MockEIP1193Provider } from '@web3-react/core'\n\nclass MockWalletConnectProvider extends MockEIP1193Provider<number> {\n  /**\n   * TODO(INFRA-140): We're using the following private API to fix an underlying WalletConnect issue.\n   * See {@link WalletConnect.activate} for details.\n   */\n  private setHttpProvider() {}\n}\n\njest.mock('@walletconnect/ethereum-provider', () => MockWalletConnectProvider)\n\nconst chainId = 1\nconst accounts: string[] = []\n\ndescribe('WalletConnect', () => {\n  let store: Web3ReactStore\n  let connector: WalletConnect\n  let mockProvider: MockWalletConnectProvider\n\n  describe('works', () => {\n    beforeEach(async () => {\n      let actions: Actions\n      ;[store, actions] = createWeb3ReactStoreAndActions()", "explanation": "**Summary**\n\nThis block of code creates a mock implementation of the `WalletConnect` provider for testing purposes using Jest. It defines a custom `MockWalletConnectProvider` class that extends an existing Mock EIP1193 provider, and then uses Jest's mocking API to replace the original `@walletconnect/ethereum-provider` with this custom implementation. The code sets up a test environment and describes tests for the `WalletConnect` component.", "metadata": {"repo": "magiclabs/web3-react", "file": "packages/walletconnect/src/index.spec.ts", "chunk_number": 1, "total_chunks": 2}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here's a concise and holistic summary of the file 'packages/walletconnect/src/index.spec.ts':\n\n**Summary**\n\nThis Jest test suite verifies the `activate` functionality of WalletConnect by mocking its interactions with a custom provider, ensuring correct updates to the store with expected data."}
{"code": "      connector = new WalletConnect({ actions, options: { rpc: {} } })\n    })\n\n    test('#activate', async () => {\n      await connector.connectEagerly().catch(() => {})\n\n      mockProvider = connector.provider as unknown as MockWalletConnectProvider\n      mockProvider.chainId = chainId\n      mockProvider.accounts = accounts\n\n      await connector.activate()\n\n      expect(mockProvider.eth_requestAccounts).toHaveBeenCalled()\n      expect(mockProvider.eth_accounts).not.toHaveBeenCalled()\n      expect(mockProvider.eth_chainId).toHaveBeenCalled()\n      expect(mockProvider.eth_chainId.mock.invocationCallOrder[0])\n        .toBeGreaterThan(mockProvider.eth_requestAccounts.mock.invocationCallOrder[0])\n\n      expect(store.getState()).toEqual({\n        chainId,\n        accounts,\n        activating: false,\n        error: undefined,\n      })\n    })\n  })\n})\n", "explanation": "Here is a concise summary:\n\nThis block of code tests the `activate` functionality of a WalletConnect connector, ensuring it correctly interacts with a mock provider and updates a store with expected data.", "metadata": {"repo": "magiclabs/web3-react", "file": "packages/walletconnect/src/index.spec.ts", "chunk_number": 2, "total_chunks": 2}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here's a concise and holistic summary of the file 'packages/walletconnect/src/index.spec.ts':\n\n**Summary**\n\nThis Jest test suite verifies the `activate` functionality of WalletConnect by mocking its interactions with a custom provider, ensuring correct updates to the store with expected data."}
{"code": "import type WalletConnectProvider from '@walletconnect/ethereum-provider'\nimport type { IWCEthRpcConnectionOptions } from '@walletconnect/types'\nimport type { Actions, ProviderRpcError } from '@web3-react/types'\nimport { Connector } from '@web3-react/types'\nimport EventEmitter from 'eventemitter3'\n\nimport { getBestUrl } from './utils'\n\nexport const URI_AVAILABLE = 'URI_AVAILABLE'\n\ntype MockWalletConnectProvider = WalletConnectProvider & EventEmitter\n\nfunction parseChainId(chainId: string | number) {\n  return typeof chainId === 'string' ? Number.parseInt(chainId) : chainId\n}\n\ntype WalletConnectOptions = Omit<IWCEthRpcConnectionOptions, 'rpc' | 'infuraId' | 'chainId'> & {\n  rpc: { [chainId: number]: string | string[] }\n}\n\n/**\n * @param options - Options to pass to `@walletconnect/ethereum-provider`\n * @param defaultChainId - The chainId to connect to in activate if one is not provided.\n * @param timeout - Timeout, in milliseconds, after which to treat network calls to urls as failed when selecting", "explanation": "Here is a concise summary of the purpose and functionality of this block:\n\n**Purpose:** Implement a mock WalletConnect provider for Ethereum connections.\n\n**Functionality:**\n\n* Import necessary types and libraries.\n* Define a custom `MockWalletConnectProvider` type that extends the original `WalletConnectProvider`.\n* Provide utility functions to parse chain IDs and construct options for the WalletConnect provider.\n* Expose an event emitter for handling events.", "metadata": {"repo": "magiclabs/web3-react", "file": "packages/walletconnect/src/index.ts", "chunk_number": 1, "total_chunks": 9}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here is a concise and holistic summary of the file 'packages/walletconnect/src/index.ts':\n\nThe code initializes a WalletConnect instance with options and setup event listeners, establishing a connection between a wallet and a blockchain network using the WalletConnect protocol. It provides utility functions for parsing chain IDs and constructing options, as well as exposing an event emitter for handling events. The code also includes functionality to update the RPC endpoint to match the user's desired chain ID when it differs from the current chain ID. Additionally, it includes methods to deactivate and re-try connections if necessary, ensuring a seamless Ethereum wallet connection experience."}
{"code": " * online urls.\n * @param onError - Handler to report errors thrown from eventListeners.\n */\nexport interface WalletConnectConstructorArgs {\n  actions: Actions\n  options: WalletConnectOptions\n  defaultChainId?: number\n  timeout?: number\n  onError?: (error: Error) => void\n}\n\n/**\n * @param desiredChainId - The desired chainId to connect to.\n * @param preventUserPrompt - If true, will suppress user-facing interactions and only connect silently.\n */\nexport interface ActivateOptions {\n  desiredChainId?: number\n  onlyIfAlreadyConnected?: boolean\n}\n\nexport class WalletConnect extends Connector {\n  /** {@inheritdoc Connector.provider} */\n  public provider?: MockWalletConnectProvider\n  public readonly events = new EventEmitter()\n\n  private readonly options: Omit<WalletConnectOptions, 'rpc'>\n  private readonly rpc: { [chainId: number]: string[] }\n  private readonly defaultChainId: number\n  private readonly timeout: number\n\n  private eagerConnection?: Promise<void>\n", "explanation": "Here is a concise summary of the purpose and functionality:\n\n**Purpose:** A class that establishes a connection between a wallet and a blockchain network using WalletConnect protocol.\n\n**Functionality:** Allows silent or interactive connections to a desired chainId, with options for error handling and timeout configuration.", "metadata": {"repo": "magiclabs/web3-react", "file": "packages/walletconnect/src/index.ts", "chunk_number": 2, "total_chunks": 9}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here is a concise and holistic summary of the file 'packages/walletconnect/src/index.ts':\n\nThe code initializes a WalletConnect instance with options and setup event listeners, establishing a connection between a wallet and a blockchain network using the WalletConnect protocol. It provides utility functions for parsing chain IDs and constructing options, as well as exposing an event emitter for handling events. The code also includes functionality to update the RPC endpoint to match the user's desired chain ID when it differs from the current chain ID. Additionally, it includes methods to deactivate and re-try connections if necessary, ensuring a seamless Ethereum wallet connection experience."}
{"code": "  constructor({ actions, options, defaultChainId, timeout = 5000, onError }: WalletConnectConstructorArgs) {\n    super(actions, onError)\n\n    const { rpc, ...rest } = options\n    this.options = rest\n    this.rpc = Object.keys(rpc).reduce<{ [chainId: number]: string[] }>((accumulator, chainId) => {\n      const value = rpc[Number(chainId)]\n      accumulator[Number(chainId)] = Array.isArray(value) ? value : [value]\n      return accumulator\n    }, {})\n    this.defaultChainId = defaultChainId ?? Number(Object.keys(this.rpc)[0])\n    this.timeout = timeout\n  }\n\n  private disconnectListener = (error?: ProviderRpcError): void => {\n    this.actions.resetState()\n    if (error) this.onError?.(error)\n  }\n\n  private chainChangedListener = (chainId: number | string): void => {\n    this.actions.update({ chainId: parseChainId(chainId) })\n  }\n\n  private accountsChangedListener = (accounts: string[]): void => {\n    this.actions.update({ accounts })\n  }\n", "explanation": "Here is a concise summary:\n\n**Block Purpose:** Initialize a WalletConnect instance with options and setup event listeners.\n\n**Functionality:**\n\n* Sets up event listeners for disconnect, chain changes, and account updates.\n* Initializes the default chain ID from options or the first available RPC endpoint.\n* Exposes methods to update state when events occur.", "metadata": {"repo": "magiclabs/web3-react", "file": "packages/walletconnect/src/index.ts", "chunk_number": 3, "total_chunks": 9}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here is a concise and holistic summary of the file 'packages/walletconnect/src/index.ts':\n\nThe code initializes a WalletConnect instance with options and setup event listeners, establishing a connection between a wallet and a blockchain network using the WalletConnect protocol. It provides utility functions for parsing chain IDs and constructing options, as well as exposing an event emitter for handling events. The code also includes functionality to update the RPC endpoint to match the user's desired chain ID when it differs from the current chain ID. Additionally, it includes methods to deactivate and re-try connections if necessary, ensuring a seamless Ethereum wallet connection experience."}
{"code": "  private URIListener = (_: Error | null, payload: { params: string[] }): void => {\n    this.events.emit(URI_AVAILABLE, payload.params[0])\n  }\n\n  private async isomorphicInitialize(chainId = this.defaultChainId): Promise<void> {\n    if (this.eagerConnection) return\n\n    // because we can only use 1 url per chainId, we need to decide between multiple, where necessary\n    const rpc = Promise.all(\n      Object.keys(this.rpc).map(\n        async (chainId): Promise<[number, string]> => [\n          Number(chainId),\n          await getBestUrl(this.rpc[Number(chainId)], this.timeout),\n        ]\n      )\n    ).then((results) =>\n      results.reduce<{ [chainId: number]: string }>((accumulator, [chainId, url]) => {\n        accumulator[chainId] = url\n        return accumulator\n      }, {})\n    )\n\n    return (this.eagerConnection = import('@walletconnect/ethereum-provider').then(async (m) => {\n      this.provider = new m.default({\n        ...this.options,\n        chainId,\n        rpc: await rpc,", "explanation": "Here is a concise summary of the block:\n\n**Purpose:** Initialize Ethereum provider with best URL for each chain ID.\n\n**Functionality:** Resolves multiple URLs for different chain IDs using `getBestUrl` function, then imports and initializes the Ethereum provider with the selected URLs.", "metadata": {"repo": "magiclabs/web3-react", "file": "packages/walletconnect/src/index.ts", "chunk_number": 4, "total_chunks": 9}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here is a concise and holistic summary of the file 'packages/walletconnect/src/index.ts':\n\nThe code initializes a WalletConnect instance with options and setup event listeners, establishing a connection between a wallet and a blockchain network using the WalletConnect protocol. It provides utility functions for parsing chain IDs and constructing options, as well as exposing an event emitter for handling events. The code also includes functionality to update the RPC endpoint to match the user's desired chain ID when it differs from the current chain ID. Additionally, it includes methods to deactivate and re-try connections if necessary, ensuring a seamless Ethereum wallet connection experience."}
{"code": "      }) as unknown as MockWalletConnectProvider\n\n      this.provider.on('disconnect', this.disconnectListener)\n      this.provider.on('chainChanged', this.chainChangedListener)\n      this.provider.on('accountsChanged', this.accountsChangedListener)\n      this.provider.connector.on('display_uri', this.URIListener)\n    }))\n  }\n\n  /** {@inheritdoc Connector.connectEagerly} */\n  public async connectEagerly(): Promise<void> {\n    const cancelActivation = this.actions.startActivation()\n\n    try {\n      await this.isomorphicInitialize()\n      if (!this.provider?.connected) throw Error('No existing connection')\n\n      // Wallets may resolve eth_chainId and hang on eth_accounts pending user interaction, which may include changing\n      // chains; they should be requested serially, with accounts first, so that the chainId can settle.\n      const accounts = await this.provider.request<string[]>({ method: 'eth_accounts' })\n      if (!accounts.length) throw new Error('No accounts returned')", "explanation": "**Summary**\n\nThis code block sets up event listeners for a blockchain provider and connects to it eagerly, requesting accounts before chain ID. If no existing connection is found, an error is thrown.", "metadata": {"repo": "magiclabs/web3-react", "file": "packages/walletconnect/src/index.ts", "chunk_number": 5, "total_chunks": 9}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here is a concise and holistic summary of the file 'packages/walletconnect/src/index.ts':\n\nThe code initializes a WalletConnect instance with options and setup event listeners, establishing a connection between a wallet and a blockchain network using the WalletConnect protocol. It provides utility functions for parsing chain IDs and constructing options, as well as exposing an event emitter for handling events. The code also includes functionality to update the RPC endpoint to match the user's desired chain ID when it differs from the current chain ID. Additionally, it includes methods to deactivate and re-try connections if necessary, ensuring a seamless Ethereum wallet connection experience."}
{"code": "      const chainId = await this.provider.request<string>({ method: 'eth_chainId' })\n\n      this.actions.update({ chainId: parseChainId(chainId), accounts })\n    } catch (error) {\n      cancelActivation()\n      throw error\n    }\n  }\n\n  /**\n   * @param desiredChainId - The desired chainId to connect to.\n   */\n  public async activate(desiredChainId?: number): Promise<void> {\n    // this early return clause catches some common cases if activate is called after connection has been established\n    if (this.provider?.connected) {\n      if (!desiredChainId || desiredChainId === this.provider.chainId) return\n      // because the provider is already connected, we can ignore the suppressUserPrompts\n      return this.provider.request<void>({\n        method: 'wallet_switchEthereumChain',\n        params: [{ chainId: `0x${desiredChainId.toString(16)}` }],\n      })\n    }\n\n    const cancelActivation = this.actions.startActivation()\n", "explanation": "Here is a concise summary:\n\n**Purpose:** Activate Ethereum wallet connection on a specified blockchain (chainId).\n\n**Functionality:** Retrieves chainId, updates state with parsed chainId, and requests wallet switch or initializes activation process if already connected.", "metadata": {"repo": "magiclabs/web3-react", "file": "packages/walletconnect/src/index.ts", "chunk_number": 6, "total_chunks": 9}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here is a concise and holistic summary of the file 'packages/walletconnect/src/index.ts':\n\nThe code initializes a WalletConnect instance with options and setup event listeners, establishing a connection between a wallet and a blockchain network using the WalletConnect protocol. It provides utility functions for parsing chain IDs and constructing options, as well as exposing an event emitter for handling events. The code also includes functionality to update the RPC endpoint to match the user's desired chain ID when it differs from the current chain ID. Additionally, it includes methods to deactivate and re-try connections if necessary, ensuring a seamless Ethereum wallet connection experience."}
{"code": "    // if we're trying to connect to a specific chain that we're not already initialized for, we have to re-initialize\n    if (desiredChainId && desiredChainId !== this.provider?.chainId) await this.deactivate()\n\n    try {\n      await this.isomorphicInitialize(desiredChainId)\n      if (!this.provider) throw new Error('No provider')\n\n      // Wallets may resolve eth_chainId and hang on eth_accounts pending user interaction, which may include changing\n      // chains; they should be requested serially, with accounts first, so that the chainId can settle.\n      const accounts = await this.provider\n        .request<string[]>({ method: 'eth_requestAccounts' })\n        // if a user triggers the walletconnect modal, closes it, and then tries to connect again,\n        // the modal will not trigger. by deactivating when this happens, we prevent the bug.\n        .catch(async (error: Error) => {\n          if (error?.message === 'User closed modal') await this.deactivate()\n          throw error\n        })", "explanation": "Here is a concise summary:\n\n**Purpose:** Re-initialize and connect to a specific blockchain chain, or deactivate and re-try if not already initialized for that chain.\n\n**Functionality:**\n\n1. Check if the desired chain ID matches the current provider's chain ID.\n2. If not, re-initialize by calling `deactivate()` then `isomorphicInitialize(desiredChainId)`.\n3. Request user accounts from the wallet provider.\n4. Handle errors and deactivation as needed.", "metadata": {"repo": "magiclabs/web3-react", "file": "packages/walletconnect/src/index.ts", "chunk_number": 7, "total_chunks": 9}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here is a concise and holistic summary of the file 'packages/walletconnect/src/index.ts':\n\nThe code initializes a WalletConnect instance with options and setup event listeners, establishing a connection between a wallet and a blockchain network using the WalletConnect protocol. It provides utility functions for parsing chain IDs and constructing options, as well as exposing an event emitter for handling events. The code also includes functionality to update the RPC endpoint to match the user's desired chain ID when it differs from the current chain ID. Additionally, it includes methods to deactivate and re-try connections if necessary, ensuring a seamless Ethereum wallet connection experience."}
{"code": "      const chainId = parseChainId(await this.provider.request<string>({ method: 'eth_chainId' }))\n      /**\n       * TODO(INFRA-140): It is possible that the user has changed the chain in the wallet while the modal was open.\n       * In that case, WalletConnect will not update the RPC endpoint to the one configured for that chain.\n       * Unfortunately, there's no public API to set the `rpc` endpoint, rather than calling private `setHttpProvider`.\n       * We should remove this once the underlying bug is resolved upstream.\n       */\n      if (chainId !== desiredChainId) {\n        // @ts-ignore\n        this.provider.http = this.provider.setHttpProvider(chainId)\n      }\n      this.actions.update({ chainId, accounts })\n    } catch (error) {\n      cancelActivation()\n      throw error\n    }\n  }\n\n  /** {@inheritdoc Connector.deactivate} */\n  public async deactivate(): Promise<void> {\n    this.provider?.off('disconnect', this.disconnectListener)\n    this.provider?.off('chainChanged', this.chainChangedListener)", "explanation": "Here is a concise summary of the purpose and functionality of this block:\n\n**Purpose:** Update the RPC endpoint to match the user's desired chain ID when it differs from the current chain ID.\n\n**Functionality:**\n\n1. Check if the current chain ID matches the desired chain ID.\n2. If they don't match, update the RPC endpoint using `setHttpProvider`.\n3. Trigger an action to update the UI with the new chain ID and accounts.\n4. Catch any errors that occur during this process and cancel activation.\n\nNote: This code also includes a comment about a potential bug in WalletConnect that prevents updating the RPC endpoint programmatically.", "metadata": {"repo": "magiclabs/web3-react", "file": "packages/walletconnect/src/index.ts", "chunk_number": 8, "total_chunks": 9}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here is a concise and holistic summary of the file 'packages/walletconnect/src/index.ts':\n\nThe code initializes a WalletConnect instance with options and setup event listeners, establishing a connection between a wallet and a blockchain network using the WalletConnect protocol. It provides utility functions for parsing chain IDs and constructing options, as well as exposing an event emitter for handling events. The code also includes functionality to update the RPC endpoint to match the user's desired chain ID when it differs from the current chain ID. Additionally, it includes methods to deactivate and re-try connections if necessary, ensuring a seamless Ethereum wallet connection experience."}
{"code": "    this.provider?.off('accountsChanged', this.accountsChangedListener)\n    // we don't unregister the display_uri handler because the walletconnect types/inheritances are really broken.\n    // it doesn't matter, anyway, as the connector object is destroyed\n    await this.provider?.disconnect()\n    this.provider = undefined\n    this.eagerConnection = undefined\n    this.actions.resetState()\n  }\n}\n", "explanation": "This block disconnects from a provider (likely a Web3 wallet connection), removes event listeners, and resets application state.", "metadata": {"repo": "magiclabs/web3-react", "file": "packages/walletconnect/src/index.ts", "chunk_number": 9, "total_chunks": 9}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here is a concise and holistic summary of the file 'packages/walletconnect/src/index.ts':\n\nThe code initializes a WalletConnect instance with options and setup event listeners, establishing a connection between a wallet and a blockchain network using the WalletConnect protocol. It provides utility functions for parsing chain IDs and constructing options, as well as exposing an event emitter for handling events. The code also includes functionality to update the RPC endpoint to match the user's desired chain ID when it differs from the current chain ID. Additionally, it includes methods to deactivate and re-try connections if necessary, ensuring a seamless Ethereum wallet connection experience."}
{"code": "import { getBestUrl } from './utils'\n\nclass MockHttpConnection {\n  public readonly succeed: boolean\n  public readonly latency: number\n\n  constructor(url: string) {\n    this.succeed = url.startsWith('succeed')\n    this.latency = Number.parseInt(url.split('_')[1])\n  }\n}\n\nclass MockJsonRpcProvider {\n  private readonly http: MockHttpConnection\n\n  constructor(http: MockHttpConnection) {\n    this.http = http\n  }\n\n  public async request() {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (this.http.succeed) {\n          resolve(1)\n        } else {\n          reject()\n        }\n      }, this.http.latency)\n    })\n  }\n}\n\njest.mock('@walletconnect/jsonrpc-http-connection', () => ({\n  HttpConnection: MockHttpConnection,\n}))\njest.mock('@walletconnect/jsonrpc-provider', () => ({\n  JsonRpcProvider: MockJsonRpcProvider,\n}))\n\ndescribe('getBestUrl', () => {\n  test('works with 1 url (success)', async () => {\n    const url = await getBestUrl(['succeed_0'], 100)\n    expect(url).toBe('succeed_0')\n  })\n", "explanation": "Here is a concise summary of the block's purpose and functionality:\n\n**Purpose:** Mocking and testing JSON-RPC provider and http connection functionality.\n\n**Functionality:**\n\n* Defines a `MockHttpConnection` class to simulate HTTP connections with varying latency and success rates.\n* Defines a `MockJsonRpcProvider` class to simulate JSON-RPC requests that resolve or reject based on the underlying HTTP connection.\n* Uses Jest mocking to replace original dependencies with mock implementations.\n* Tests the `getBestUrl` function, which is not defined in this block, but likely uses the mocked providers.", "metadata": {"repo": "magiclabs/web3-react", "file": "packages/walletconnect/src/utils.spec.ts", "chunk_number": 1, "total_chunks": 2}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here is a concise and to-the-point summary:\n\nThis file (`packages/walletconnect/src/utils.spec.ts`) contains test suites for mocking and testing JSON-RPC provider and http connection functionality, specifically targeting the `getBestUrl` function. It simulates various scenarios with different URLs, timeouts, latency, and success rates to ensure the function behaves as expected."}
{"code": "  test('works with 1 url (failure)', async () => {\n    const url = await getBestUrl(['fail_0'], 100)\n    expect(url).toBe('fail_0')\n  })\n\n  test('works with 2 urls (success/failure)', async () => {\n    const url = await getBestUrl(['succeed_0', 'fail_0'], 100)\n    expect(url).toBe('succeed_0')\n  })\n\n  test('works with 2 urls (failure/success)', async () => {\n    const url = await getBestUrl(['fail_0', 'succeed_0'], 100)\n    expect(url).toBe('succeed_0')\n  })\n\n  test('works with 2 successful urls (fast/slow)', async () => {\n    const url = await getBestUrl(['succeed_0', 'succeed_1'], 100)\n    expect(url).toBe('succeed_0')\n  })\n\n  test('works with 2 successful urls (slow/fast)', async () => {\n    const url = await getBestUrl(['succeed_1', 'succeed_0'], 100)\n    expect(url).toBe('succeed_1')\n  })\n\n  test('works with 2 successful urls (after timeout/before timeout)', async () => {\n    const url = await getBestUrl(['succeed_100', 'succeed_0'], 50)\n    expect(url).toBe('succeed_0')\n  })\n})\n", "explanation": "**Block Purpose:** Test suite for the `getBestUrl` function.\n\n**Functionality:**\n\nThe block tests the functionality of the `getBestUrl` function by providing various scenarios with different URLs and timeouts. It checks if the function returns the expected URL based on factors such as success, failure, speed, and timeout.", "metadata": {"repo": "magiclabs/web3-react", "file": "packages/walletconnect/src/utils.spec.ts", "chunk_number": 2, "total_chunks": 2}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here is a concise and to-the-point summary:\n\nThis file (`packages/walletconnect/src/utils.spec.ts`) contains test suites for mocking and testing JSON-RPC provider and http connection functionality, specifically targeting the `getBestUrl` function. It simulates various scenarios with different URLs, timeouts, latency, and success rates to ensure the function behaves as expected."}
{"code": "/**\n * @param urls - An array of URLs to try to connect to.\n * @param timeout - How long to wait before a call is considered failed, in ms.\n */\nexport async function getBestUrl(urls: string[], timeout: number): Promise<string> {\n  // if we only have 1 url, it's the best!\n  if (urls.length === 1) return urls[0]\n\n  const [HttpConnection, JsonRpcProvider] = await Promise.all([\n    import('@walletconnect/jsonrpc-http-connection').then(({ HttpConnection }) => HttpConnection),\n    import('@walletconnect/jsonrpc-provider').then(({ JsonRpcProvider }) => JsonRpcProvider),\n  ])\n\n  // the below returns the first url for which there's been a successful call, prioritized by index\n  return new Promise((resolve) => {\n    let resolved = false\n    const successes: { [index: number]: boolean } = {}\n\n    urls.forEach((url, i) => {\n      const http = new JsonRpcProvider(new HttpConnection(url))\n\n      // create a promise that resolves on a successful call, and rejects on a failed call or after timeout milliseconds", "explanation": "Here is a concise summary:\n\n**Purpose:** Returns the best URL from an array of URLs to try connecting to.\n\n**Functionality:** Tries each URL in order, with a timeout, and returns the first one that successfully connects. If only one URL is provided, it's assumed to be the best.", "metadata": {"repo": "magiclabs/web3-react", "file": "packages/walletconnect/src/utils.ts", "chunk_number": 1, "total_chunks": 3}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here's a holistic summary of the file 'packages/walletconnect/src/utils.ts':\n\nThis utility file provides three functions for handling network requests:\n\n* `getUrl`: Returns the best URL from an array of URLs to try connecting to, with timeout and retry logic.\n* `checkEthChainId`: Sends an HTTP request to `eth_chainId` and resolves a Promise if successful, rejecting it otherwise (used as a gatekeeper for subsequent requests).\n* `getNextUrl`: Iterates through an array of URLs, resolving each one once all previous calls have successfully completed."}
{"code": "      const promise = new Promise<void>((resolve, reject) => {\n        http\n          .request({ method: 'eth_chainId' })\n          .then(() => resolve())\n          .catch(() => reject())\n\n        // set a timeout to reject\n        setTimeout(() => {\n          reject()\n        }, timeout)\n      })\n\n      void promise\n        .then(() => true)\n        .catch(() => false)\n        .then((success) => {\n          // if we already resolved, return\n          if (resolved) return\n\n          // store the result of the call\n          successes[i] = success\n\n          // if this is the last call and we haven't resolved yet - do so\n          if (Object.keys(successes).length === urls.length) {\n            const index = Object.keys(successes).findIndex((j) => successes[Number(j)])\n            // no need to set resolved to true, as this is the last promise\n            return resolve(urls[index === -1 ? 0 : index])\n          }\n\n          // otherwise, for each prospective index, check if we can resolve", "explanation": "Here is a concise summary of the purpose and functionality of this block:\n\n**Purpose:** Create a Promise that checks if an HTTP request to `eth_chainId` is successful within a specified timeout.\n\n**Functionality:** \n\n* Sends an HTTP request to `eth_chainId`.\n* If successful, resolves the Promise.\n* If not successful or times out, rejects the Promise.\n* The result of this Promise (resolved or rejected) is used to determine the success of a series of subsequent requests.", "metadata": {"repo": "magiclabs/web3-react", "file": "packages/walletconnect/src/utils.ts", "chunk_number": 2, "total_chunks": 3}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here's a holistic summary of the file 'packages/walletconnect/src/utils.ts':\n\nThis utility file provides three functions for handling network requests:\n\n* `getUrl`: Returns the best URL from an array of URLs to try connecting to, with timeout and retry logic.\n* `checkEthChainId`: Sends an HTTP request to `eth_chainId` and resolves a Promise if successful, rejecting it otherwise (used as a gatekeeper for subsequent requests).\n* `getNextUrl`: Iterates through an array of URLs, resolving each one once all previous calls have successfully completed."}
{"code": "          new Array<number>(urls.length).fill(0).forEach((_, prospectiveIndex) => {\n            // to resolve, we need to:\n            // a) have successfully made a call\n            // b) not be waiting on any other higher-index calls\n            if (\n              successes[prospectiveIndex] &&\n              new Array<number>(prospectiveIndex).fill(0).every((_, j) => successes[j] === false)\n            ) {\n              resolved = true\n              resolve(urls[prospectiveIndex])\n            }\n          })\n        })\n    })\n  })\n}\n", "explanation": "**Purpose:** Resolve the next URL in an array when all previous calls are complete.\n\n**Functionality:** Iterates through an array of URLs, resolving each one once all previous calls have successfully completed.", "metadata": {"repo": "magiclabs/web3-react", "file": "packages/walletconnect/src/utils.ts", "chunk_number": 3, "total_chunks": 3}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here's a holistic summary of the file 'packages/walletconnect/src/utils.ts':\n\nThis utility file provides three functions for handling network requests:\n\n* `getUrl`: Returns the best URL from an array of URLs to try connecting to, with timeout and retry logic.\n* `checkEthChainId`: Sends an HTTP request to `eth_chainId` and resolves a Promise if successful, rejecting it otherwise (used as a gatekeeper for subsequent requests).\n* `getNextUrl`: Iterates through an array of URLs, resolving each one once all previous calls have successfully completed."}
{"code": "{\n  \"extends\": \"../../tsconfig.json\",\n  \"include\": [\"./src\"],\n  \"compilerOptions\": {\n    \"outDir\": \"./dist\"\n  }\n}\n", "explanation": "This block is a configuration file (likely for TypeScript) that specifies:\n\n* A parent configuration to extend (`extends`)\n* Files to include in the build process (`include`)\n* Output directory for compiled code (`outDir`)", "metadata": {"repo": "magiclabs/web3-react", "file": "packages/walletconnect/tsconfig.json", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here's a concise summary of the 'packages/walletconnect/tsconfig.json' file:\n\n**TypeScript Configuration**\n\nExtends parent config, includes specific files, and outputs compiled code in a designated directory."}
{"code": "{\n  \"extends\": \"@tsconfig/recommended/tsconfig.json\",\n  \"compilerOptions\": {\n    \"module\": \"CommonJS\",\n    \"declaration\": true,\n    \"moduleResolution\": \"Node\",\n    \"jsx\": \"react\"\n  },\n  \"exclude\": [\"**/*.spec.ts\"]\n}\n", "explanation": "This is a JSON configuration block, specifically for TypeScript.\n\nPurpose: Customizes the TypeScript compiler options.\n\nFunctionality:\n\n* Extends the recommended `tsconfig.json` settings.\n* Sets module type to CommonJS.\n* Generates declaration files (`*.d.ts`).\n* Enables React JSX syntax.\n* Excludes `.spec.ts` files from compilation.", "metadata": {"repo": "magiclabs/web3-react", "file": "tsconfig.json", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "This repository is a collection of React components for building blockchain-related web applications using Web3 libraries.\n\nKey points:\n\n* Purpose: Provide pre-built UI components for interacting with blockchain networks\n* Content: React components, hooks, and utilities for managing user accounts, wallets, transactions, etc.", "file_summary": "Here is a concise summary of the file 'tsconfig.json':\n\n**Customized TypeScript Compiler Configuration**\n\nExtends recommended settings, targets CommonJS modules, generates declaration files, enables React JSX, and excludes unit test files (.spec.ts)."}

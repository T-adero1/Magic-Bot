{"code": "# web3-react-magic-universal-wallet\n\n[Magic Universal Wallet](https://magic.link/docs/wallets/wallet-types#universal-wallet) connector for [web3-react](https://github.com/Uniswap/web3-react).\n\n## Install\n\n```bash\nnpm install @magiclabs/web3-react\n```\n\n## Usage\n\n```ts\nimport { initializeConnector } from \"@web3-react/core\";\nimport { MagicUniversalConnector } from \"@magiclabs/web3-react\";\n\n// Initialize the MagicUniversalConnector\nexport const [magicConnector, hooks] =\n  initializeConnector<MagicUniversalConnector>(\n    (actions) =>\n      new MagicUniversalConnector({\n        actions,\n        options: {\n          apiKey: \"pk_live_5D6B70DDBFDD649A\", // Magic Universal Wallet Publishable API key\n          networkOptions: {\n            rpcUrl:\n              \"https://goerli.infura.io/v3/84842078b09946638c03157f83405213\", // RPC URL\n            chainId: 5, // Chain ID for network\n          },\n        },\n      })\n  );\n```\n\n## Nextjs Example\n", "explanation": "Here is a concise summary:\n\n**Purpose:** Connects to Magic Universal Wallet through Web3 React.\n\n**Functionality:** Provides a connector to initialize user wallet connections, enabling authentication and transaction signing. Requires installation of `@magiclabs/web3-react` package.", "metadata": {"repo": "magiclabs/web3-react-magic-connector", "file": "README.md", "chunk_number": 1, "total_chunks": 2}, "repository_explanation": "**Repository Overview**\n\nPurpose: A Web3 React connector for Magic Labs.\n\nContent:\n\n* A library that enables seamless integration of Magic Labs' authentication features with React applications.\n* Codebase includes:\n\t+ React components and hooks for user authentication and authorization.\n\t+ Implementation details for interacting with the Magic Labs API.\n\t+ Example use cases and demonstrations.", "file_summary": "Here is a concise holistic summary:\n\n**README.md Summary:**\n\nThis file connects to Magic Universal Wallet through Web3 React, enabling user wallet connections for authentication and transaction signing. Requires `@magiclabs/web3-react` package installation."}
{"code": "Nextjs example usage [here](https://github.com/Unboxed-Software/web3-react-magic-connect-nextjs)\n", "explanation": "This block appears to be a text snippet referencing an external resource, specifically a GitHub link, demonstrating Next.js example usage for web3-react magic connect integration.", "metadata": {"repo": "magiclabs/web3-react-magic-connector", "file": "README.md", "chunk_number": 2, "total_chunks": 2}, "repository_explanation": "**Repository Overview**\n\nPurpose: A Web3 React connector for Magic Labs.\n\nContent:\n\n* A library that enables seamless integration of Magic Labs' authentication features with React applications.\n* Codebase includes:\n\t+ React components and hooks for user authentication and authorization.\n\t+ Implementation details for interacting with the Magic Labs API.\n\t+ Example use cases and demonstrations.", "file_summary": "Here is a concise holistic summary:\n\n**README.md Summary:**\n\nThis file connects to Magic Universal Wallet through Web3 React, enabling user wallet connections for authentication and transaction signing. Requires `@magiclabs/web3-react` package installation."}
{"code": "import { Connector, Actions, AddEthereumChainParameter } from \"@web3-react/types\";\nimport { Magic, MagicSDKAdditionalConfiguration } from \"magic-sdk\";\nimport { RPCProviderModule } from \"@magic-sdk/provider/dist/types/modules/rpc-provider\";\nimport { AbstractProvider } from \"web3-core\";\nexport interface MagicConnectorSDKOptions extends MagicSDKAdditionalConfiguration {\n    apiKey: string;\n    networkOptions: {\n        rpcUrl: string;\n        chainId: number;\n    };\n}\nexport interface MagicUniversalConnectorConstructorArgs {\n    actions: Actions;\n    options: MagicConnectorSDKOptions;\n    onError?: (error: Error) => void;\n}\nexport declare class MagicUniversalConnector extends Connector {\n    provider?: RPCProviderModule & AbstractProvider;\n    magic?: Magic;\n    chainId?: number;\n    private readonly options;\n    constructor({ actions, options, onError, }: MagicUniversalConnectorConstructorArgs);\n    private connectListener;\n    private disconnectListener;\n    private chainChangedListener;", "explanation": "Here is a concise summary of the purpose and functionality of this block:\n\n**Purpose:** Provides a web3-react connector for interacting with the Magic SDK, allowing users to connect to Ethereum chains using a user-friendly interface.\n\n**Functionality:** Handles connection/disconnection events, chain changes, and error handling, utilizing the Magic SDK's RPC provider.", "metadata": {"repo": "magiclabs/web3-react-magic-connector", "file": "dist/index.d.ts", "chunk_number": 1, "total_chunks": 2}, "repository_explanation": "**Repository Overview**\n\nPurpose: A Web3 React connector for Magic Labs.\n\nContent:\n\n* A library that enables seamless integration of Magic Labs' authentication features with React applications.\n* Codebase includes:\n\t+ React components and hooks for user authentication and authorization.\n\t+ Implementation details for interacting with the Magic Labs API.\n\t+ Example use cases and demonstrations.", "file_summary": "Here is a concise summary of the file 'dist/index.d.ts':\n\nProvides a web3-react connector for interacting with the Magic SDK, allowing users to connect to Ethereum chains using a user-friendly interface, while handling connection/disconnection events, chain changes, and errors through three classes: `MagicConnect`, `MagicDedicatedConnector`, and `MagicAuth`."}
{"code": "    private accountsChangedListener;\n    private setEventListeners;\n    private removeEventListeners;\n    private initializeMagicInstance;\n    private checkLoggedInStatus;\n    private handleActivation;\n    connectEagerly(): Promise<void>;\n    activate(desiredChainIdOrChainParameters?: AddEthereumChainParameter): Promise<void>;\n    deactivate(): Promise<void>;\n}\nexport declare class MagicConnect extends MagicUniversalConnector {\n}\nexport declare class MagicDedicatedConnector extends MagicUniversalConnector {\n}\nexport declare class MagicAuth extends MagicUniversalConnector {\n}\n", "explanation": "Here is a concise summary:\n\n**Class Overview**\n\nThis code defines three classes (`MagicConnect`, `MagicDedicatedConnector`, `MagicAuth`) that extend `MagicUniversalConnector`. They provide functionality for connecting to Ethereum through Magic, including handling activation, deactivation, and checking login status. The classes also have methods for setting up event listeners and handling account changes.", "metadata": {"repo": "magiclabs/web3-react-magic-connector", "file": "dist/index.d.ts", "chunk_number": 2, "total_chunks": 2}, "repository_explanation": "**Repository Overview**\n\nPurpose: A Web3 React connector for Magic Labs.\n\nContent:\n\n* A library that enables seamless integration of Magic Labs' authentication features with React applications.\n* Codebase includes:\n\t+ React components and hooks for user authentication and authorization.\n\t+ Implementation details for interacting with the Magic Labs API.\n\t+ Example use cases and demonstrations.", "file_summary": "Here is a concise summary of the file 'dist/index.d.ts':\n\nProvides a web3-react connector for interacting with the Magic SDK, allowing users to connect to Ethereum chains using a user-friendly interface, while handling connection/disconnection events, chain changes, and errors through three classes: `MagicConnect`, `MagicDedicatedConnector`, and `MagicAuth`."}
{"code": "\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MagicAuth = exports.MagicDedicatedConnector = exports.MagicConnect = exports.MagicUniversalConnector = void 0;\nconst types_1 = require(\"@web3-react/types\");\nconst magic_sdk_1 = require(\"magic-sdk\");\nfunction parseChainId(chainId) {", "explanation": "Here is a concise summary of the block:\n\n**Functionality:** A JavaScript function that enables asynchronous programming using promises.\n\n**Purpose:** To create an `__awaiter` function, which allows for handling asynchronous code in a synchronous manner. \n\n(Note: The rest of the text appears to be unrelated to this specific block and seems to be part of a larger codebase or documentation.)", "metadata": {"repo": "magiclabs/web3-react-magic-connector", "file": "dist/index.js", "chunk_number": 1, "total_chunks": 8}, "repository_explanation": "**Repository Overview**\n\nPurpose: A Web3 React connector for Magic Labs.\n\nContent:\n\n* A library that enables seamless integration of Magic Labs' authentication features with React applications.\n* Codebase includes:\n\t+ React components and hooks for user authentication and authorization.\n\t+ Implementation details for interacting with the Magic Labs API.\n\t+ Example use cases and demonstrations.", "file_summary": "Here is a concise and holistic summary of the file 'dist/index.js':\n\n**Summary:** The 'index.js' file initializes a Magic SDK instance for interacting with blockchain networks, manages user authentication and connection to Ethereum chains, and provides methods for activation, deactivation, and checking login status.\n\nIt contains classes (`MagicUniversalConnector`, `MagicAuth`) that handle asynchronous programming using promises, set up event listeners for provider connections/disconnections, chain changes, and account changes, and provide functionality for activating, deactivating, and checking login status."}
{"code": "    return typeof chainId === \"number\"\n        ? chainId\n        : Number.parseInt(chainId, chainId.startsWith(\"0x\") ? 16 : 10);\n}\nclass MagicUniversalConnector extends types_1.Connector {\n    constructor({ actions, options, onError, }) {\n        super(actions, onError);\n        this.connectListener = ({ chainId }) => {\n            this.actions.update({ chainId: parseChainId(chainId) });\n        };\n        this.disconnectListener = (error) => {\n            var _a;\n            this.actions.resetState();\n            if (error)\n                (_a = this.onError) === null || _a === void 0 ? void 0 : _a.call(this, error);\n        };\n        this.chainChangedListener = (chainId) => {\n            this.actions.update({ chainId: parseChainId(chainId) });\n        };\n        this.accountsChangedListener = (accounts) => {\n            if (accounts.length === 0) {\n                this.actions.resetState();\n            }\n            else {\n                this.actions.update({ accounts });\n            }\n        };", "explanation": "**Summary**\n\nThis block defines a JavaScript function `parseChainId` that converts a chain ID string into a number, and a class `MagicUniversalConnector` that extends another class (`types_1.Connector`). The connector has methods to update state when connected, disconnected, or chain ID changed.", "metadata": {"repo": "magiclabs/web3-react-magic-connector", "file": "dist/index.js", "chunk_number": 2, "total_chunks": 8}, "repository_explanation": "**Repository Overview**\n\nPurpose: A Web3 React connector for Magic Labs.\n\nContent:\n\n* A library that enables seamless integration of Magic Labs' authentication features with React applications.\n* Codebase includes:\n\t+ React components and hooks for user authentication and authorization.\n\t+ Implementation details for interacting with the Magic Labs API.\n\t+ Example use cases and demonstrations.", "file_summary": "Here is a concise and holistic summary of the file 'dist/index.js':\n\n**Summary:** The 'index.js' file initializes a Magic SDK instance for interacting with blockchain networks, manages user authentication and connection to Ethereum chains, and provides methods for activation, deactivation, and checking login status.\n\nIt contains classes (`MagicUniversalConnector`, `MagicAuth`) that handle asynchronous programming using promises, set up event listeners for provider connections/disconnections, chain changes, and account changes, and provide functionality for activating, deactivating, and checking login status."}
{"code": "        this.options = options;\n        // Initializing Magic Instance in constructor otherwise it will be undefined when calling connectEagerly\n        this.initializeMagicInstance();\n    }\n    setEventListeners() {\n        if (this.provider) {\n            this.provider.on(\"connect\", this.connectListener);\n            this.provider.on(\"disconnect\", this.disconnectListener);\n            this.provider.on(\"chainChanged\", this.chainChangedListener);\n            this.provider.on(\"accountsChanged\", this.accountsChangedListener);\n        }\n    }\n    removeEventListeners() {\n        if (this.provider) {\n            this.provider.off(\"connect\", this.connectListener);\n            this.provider.off(\"disconnect\", this.disconnectListener);\n            this.provider.off(\"chainChanged\", this.chainChangedListener);\n            this.provider.off(\"accountsChanged\", this.accountsChangedListener);\n        }\n    }\n    initializeMagicInstance(desiredChainIdOrChainParameters) {\n        if (typeof window !== \"undefined\") {", "explanation": "Here is a concise summary of the purpose and functionality of this block:\n\n**Purpose:** Initialize Magic Instance, set up event listeners, and remove them as needed.\n\n**Functionality:**\n\n1. Initializes the Magic Instance in the constructor.\n2. Sets up event listeners for provider connections/disconnections, chain changes, and account changes.\n3. Removes event listeners when necessary (i.e., when the provider disconnects).", "metadata": {"repo": "magiclabs/web3-react-magic-connector", "file": "dist/index.js", "chunk_number": 3, "total_chunks": 8}, "repository_explanation": "**Repository Overview**\n\nPurpose: A Web3 React connector for Magic Labs.\n\nContent:\n\n* A library that enables seamless integration of Magic Labs' authentication features with React applications.\n* Codebase includes:\n\t+ React components and hooks for user authentication and authorization.\n\t+ Implementation details for interacting with the Magic Labs API.\n\t+ Example use cases and demonstrations.", "file_summary": "Here is a concise and holistic summary of the file 'dist/index.js':\n\n**Summary:** The 'index.js' file initializes a Magic SDK instance for interacting with blockchain networks, manages user authentication and connection to Ethereum chains, and provides methods for activation, deactivation, and checking login status.\n\nIt contains classes (`MagicUniversalConnector`, `MagicAuth`) that handle asynchronous programming using promises, set up event listeners for provider connections/disconnections, chain changes, and account changes, and provide functionality for activating, deactivating, and checking login status."}
{"code": "            // Extract apiKey and networkOptions from options\n            const { apiKey, networkOptions } = this.options;\n            // Create a new Magic instance with desired ChainId for network switching\n            // or with the networkOptions if no parameters were passed to the function\n            this.magic = new magic_sdk_1.Magic(apiKey, {\n                network: desiredChainIdOrChainParameters\n                    ? {\n                        rpcUrl: desiredChainIdOrChainParameters.rpcUrls[0],\n                        chainId: desiredChainIdOrChainParameters.chainId,\n                    }\n                    : {\n                        rpcUrl: networkOptions.rpcUrl,\n                        chainId: networkOptions.chainId,\n                    },\n            });\n            // Get the provider from magicInstance\n            this.provider = this.magic.rpcProvider;\n            // Set the chainId. If no chainId was passed as a parameter, use the chainId from networkOptions", "explanation": "Here is a concise summary:\n\n**Purpose:** Initialize Magic SDK instance for interacting with blockchain networks.\n\n**Functionality:**\n\n* Extract API key and network options from input parameters.\n* Create a new Magic instance with desired Chain ID or network options.\n* Get the provider from the Magic instance.\n* Set the chain ID based on input parameters or network options.", "metadata": {"repo": "magiclabs/web3-react-magic-connector", "file": "dist/index.js", "chunk_number": 4, "total_chunks": 8}, "repository_explanation": "**Repository Overview**\n\nPurpose: A Web3 React connector for Magic Labs.\n\nContent:\n\n* A library that enables seamless integration of Magic Labs' authentication features with React applications.\n* Codebase includes:\n\t+ React components and hooks for user authentication and authorization.\n\t+ Implementation details for interacting with the Magic Labs API.\n\t+ Example use cases and demonstrations.", "file_summary": "Here is a concise and holistic summary of the file 'dist/index.js':\n\n**Summary:** The 'index.js' file initializes a Magic SDK instance for interacting with blockchain networks, manages user authentication and connection to Ethereum chains, and provides methods for activation, deactivation, and checking login status.\n\nIt contains classes (`MagicUniversalConnector`, `MagicAuth`) that handle asynchronous programming using promises, set up event listeners for provider connections/disconnections, chain changes, and account changes, and provide functionality for activating, deactivating, and checking login status."}
{"code": "            this.chainId =\n                (desiredChainIdOrChainParameters === null || desiredChainIdOrChainParameters === void 0 ? void 0 : desiredChainIdOrChainParameters.chainId) || networkOptions.chainId;\n        }\n    }\n    checkLoggedInStatus() {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const isLoggedIn = yield ((_a = this.magic) === null || _a === void 0 ? void 0 : _a.user.isLoggedIn());\n                return isLoggedIn;\n            }\n            catch (error) {\n                return false;\n            }\n        });\n    }\n    handleActivation(desiredChainIdOrChainParameters) {\n        var _a, _b, _c;\n        return __awaiter(this, void 0, void 0, function* () {\n            const cancelActivation = this.actions.startActivation();\n            try {\n                // Initialize the magic instance\n                yield this.initializeMagicInstance(desiredChainIdOrChainParameters);", "explanation": "Here is a concise summary:\n\n**Purpose:** Determine whether a user is logged in and handle wallet activation.\n\n**Functionality:**\n\n* `this.chainId` is set based on provided chain parameters or network options.\n* `checkLoggedInStatus()` checks if a user is logged in via the Magic instance.\n* `handleActivation(desiredChainIdOrChainParameters)` initializes a Magic instance, starts an activation process, and handles any errors that may occur.", "metadata": {"repo": "magiclabs/web3-react-magic-connector", "file": "dist/index.js", "chunk_number": 5, "total_chunks": 8}, "repository_explanation": "**Repository Overview**\n\nPurpose: A Web3 React connector for Magic Labs.\n\nContent:\n\n* A library that enables seamless integration of Magic Labs' authentication features with React applications.\n* Codebase includes:\n\t+ React components and hooks for user authentication and authorization.\n\t+ Implementation details for interacting with the Magic Labs API.\n\t+ Example use cases and demonstrations.", "file_summary": "Here is a concise and holistic summary of the file 'dist/index.js':\n\n**Summary:** The 'index.js' file initializes a Magic SDK instance for interacting with blockchain networks, manages user authentication and connection to Ethereum chains, and provides methods for activation, deactivation, and checking login status.\n\nIt contains classes (`MagicUniversalConnector`, `MagicAuth`) that handle asynchronous programming using promises, set up event listeners for provider connections/disconnections, chain changes, and account changes, and provide functionality for activating, deactivating, and checking login status."}
{"code": "                yield ((_a = this.magic) === null || _a === void 0 ? void 0 : _a.wallet.connectWithUI());\n                this.setEventListeners();\n                // Get the current chainId and account from the provider\n                const [chainId, accounts] = yield Promise.all([\n                    (_b = this.provider) === null || _b === void 0 ? void 0 : _b.request({\n                        method: \"eth_chainId\",\n                    }),\n                    (_c = this.provider) === null || _c === void 0 ? void 0 : _c.request({ method: \"eth_accounts\" }),\n                ]);\n                // Update the connector state with the current chainId and account\n                this.actions.update({ chainId: parseChainId(chainId), accounts });\n            }\n            catch (error) {\n                cancelActivation();\n            }\n        });\n    }\n    // \"autoconnect\"\n    connectEagerly() {\n        return __awaiter(this, void 0, void 0, function* () {", "explanation": "**Purpose:** Establish a connection with a blockchain wallet and retrieve current chain ID and account information.\n\n**Functionality:**\n\n1. Connects with the wallet using the `magic` property.\n2. Sets up event listeners.\n3. Retrieves current chain ID and account from the provider via Ethereum RPC requests.\n4. Updates connector state with retrieved data.\n5. Handles errors by canceling activation if an error occurs.", "metadata": {"repo": "magiclabs/web3-react-magic-connector", "file": "dist/index.js", "chunk_number": 6, "total_chunks": 8}, "repository_explanation": "**Repository Overview**\n\nPurpose: A Web3 React connector for Magic Labs.\n\nContent:\n\n* A library that enables seamless integration of Magic Labs' authentication features with React applications.\n* Codebase includes:\n\t+ React components and hooks for user authentication and authorization.\n\t+ Implementation details for interacting with the Magic Labs API.\n\t+ Example use cases and demonstrations.", "file_summary": "Here is a concise and holistic summary of the file 'dist/index.js':\n\n**Summary:** The 'index.js' file initializes a Magic SDK instance for interacting with blockchain networks, manages user authentication and connection to Ethereum chains, and provides methods for activation, deactivation, and checking login status.\n\nIt contains classes (`MagicUniversalConnector`, `MagicAuth`) that handle asynchronous programming using promises, set up event listeners for provider connections/disconnections, chain changes, and account changes, and provide functionality for activating, deactivating, and checking login status."}
{"code": "            const isLoggedIn = yield this.checkLoggedInStatus();\n            if (!isLoggedIn)\n                return;\n            yield this.handleActivation();\n        });\n    }\n    // \"connect\"\n    activate(desiredChainIdOrChainParameters) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.handleActivation(desiredChainIdOrChainParameters);\n        });\n    }\n    // \"disconnect\"\n    deactivate() {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            this.actions.resetState();\n            yield ((_a = this.magic) === null || _a === void 0 ? void 0 : _a.user.logout());\n            this.removeEventListeners();\n        });\n    }\n}\nexports.MagicUniversalConnector = MagicUniversalConnector;\nclass MagicConnect extends MagicUniversalConnector {\n}\nexports.MagicConnect = MagicConnect;\nclass MagicDedicatedConnector extends MagicUniversalConnector {\n}\nexports.MagicDedicatedConnector = MagicDedicatedConnector;", "explanation": "Here is a concise summary:\n\n**MagicUniversalConnector class**\n\nThis class manages user authentication and connection to Ethereum chains, providing methods for activation (connecting), deactivation (disconnecting), and checking login status.\n\nIt contains three main functions: \n\n1. **activate**: Connects to an Ethereum chain.\n2. **deactivate**: Disconnects from the current chain and logs out the user.\n3. **checkLoggedInStatus**: Verifies if a user is logged in before proceeding with other actions.\n\nThe class also has two subclasses, `MagicConnect` and `MagicDedicatedConnector`, which inherit its functionality.", "metadata": {"repo": "magiclabs/web3-react-magic-connector", "file": "dist/index.js", "chunk_number": 7, "total_chunks": 8}, "repository_explanation": "**Repository Overview**\n\nPurpose: A Web3 React connector for Magic Labs.\n\nContent:\n\n* A library that enables seamless integration of Magic Labs' authentication features with React applications.\n* Codebase includes:\n\t+ React components and hooks for user authentication and authorization.\n\t+ Implementation details for interacting with the Magic Labs API.\n\t+ Example use cases and demonstrations.", "file_summary": "Here is a concise and holistic summary of the file 'dist/index.js':\n\n**Summary:** The 'index.js' file initializes a Magic SDK instance for interacting with blockchain networks, manages user authentication and connection to Ethereum chains, and provides methods for activation, deactivation, and checking login status.\n\nIt contains classes (`MagicUniversalConnector`, `MagicAuth`) that handle asynchronous programming using promises, set up event listeners for provider connections/disconnections, chain changes, and account changes, and provide functionality for activating, deactivating, and checking login status."}
{"code": "class MagicAuth extends MagicUniversalConnector {\n}\nexports.MagicAuth = MagicAuth;\n", "explanation": "This block defines a class named `MagicAuth` that extends another class called `MagicUniversalConnector`. It also exports this new class, making it available for use elsewhere in the program.\n\nIn summary: Defines and exports a subclass (`MagicAuth`) with inherited functionality from `MagicUniversalConnector`.", "metadata": {"repo": "magiclabs/web3-react-magic-connector", "file": "dist/index.js", "chunk_number": 8, "total_chunks": 8}, "repository_explanation": "**Repository Overview**\n\nPurpose: A Web3 React connector for Magic Labs.\n\nContent:\n\n* A library that enables seamless integration of Magic Labs' authentication features with React applications.\n* Codebase includes:\n\t+ React components and hooks for user authentication and authorization.\n\t+ Implementation details for interacting with the Magic Labs API.\n\t+ Example use cases and demonstrations.", "file_summary": "Here is a concise and holistic summary of the file 'dist/index.js':\n\n**Summary:** The 'index.js' file initializes a Magic SDK instance for interacting with blockchain networks, manages user authentication and connection to Ethereum chains, and provides methods for activation, deactivation, and checking login status.\n\nIt contains classes (`MagicUniversalConnector`, `MagicAuth`) that handle asynchronous programming using promises, set up event listeners for provider connections/disconnections, chain changes, and account changes, and provide functionality for activating, deactivating, and checking login status."}
{"code": "import {\n  Connector,\n  Actions,\n  ProviderConnectInfo,\n  ProviderRpcError,\n  AddEthereumChainParameter,\n} from \"@web3-react/types\"\n\nimport { Magic, MagicSDKAdditionalConfiguration } from \"magic-sdk\"\nimport { RPCProviderModule } from \"@magic-sdk/provider/dist/types/modules/rpc-provider\"\nimport { AbstractProvider } from \"web3-core\"\n\nfunction parseChainId(chainId: string | number) {\n  return typeof chainId === \"number\"\n    ? chainId\n    : Number.parseInt(chainId, chainId.startsWith(\"0x\") ? 16 : 10)\n}\n\nexport interface MagicConnectorSDKOptions\n  extends MagicSDKAdditionalConfiguration {\n  apiKey: string\n  networkOptions: {\n    rpcUrl: string\n    chainId: number\n  }\n}\n\nexport interface MagicUniversalConnectorConstructorArgs {\n  actions: Actions\n  options: MagicConnectorSDKOptions\n  onError?: (error: Error) => void\n}\n\nexport class MagicUniversalConnector extends Connector {\n  public provider?: RPCProviderModule & AbstractProvider\n  public magic?: Magic\n  public chainId?: number", "explanation": "Here is a concise summary:\n\n**Purpose:** A Web3 React connector for interacting with Ethereum chains using the Magic SDK.\n\n**Functionality:**\n\n* Connects to Ethereum chains via RPC URL\n* Supports adding custom network options (e.g., chain ID)\n* Provides error handling and logging capabilities.", "metadata": {"repo": "magiclabs/web3-react-magic-connector", "file": "src/index.ts", "chunk_number": 1, "total_chunks": 6}, "repository_explanation": "**Repository Overview**\n\nPurpose: A Web3 React connector for Magic Labs.\n\nContent:\n\n* A library that enables seamless integration of Magic Labs' authentication features with React applications.\n* Codebase includes:\n\t+ React components and hooks for user authentication and authorization.\n\t+ Implementation details for interacting with the Magic Labs API.\n\t+ Example use cases and demonstrations.", "file_summary": "Here is a concise holistic summary of the file 'src/index.ts':\n\n**Purpose:** A Web3 React connector for interacting with Ethereum chains using the Magic SDK.\n\n**Functionality:**\n\n* Connects to Ethereum chains via RPC URL\n* Manages event listeners for connection/disconnection, chain changes, and account changes\n* Initializes Magic API instance, sets RPC provider, and gets chain ID\n* Tries to initialize Magic wallet, connects with UI, and updates connector state with current chain ID and account\n\n**Key Features:**\n\n* Error handling and logging capabilities\n* Custom network options (e.g., chain ID) support\n* Connection activation and deactivation methods"}
{"code": "  private readonly options: MagicConnectorSDKOptions\n\n  constructor({\n    actions,\n    options,\n    onError,\n  }: MagicUniversalConnectorConstructorArgs) {\n    super(actions, onError)\n    this.options = options\n    // Initializing Magic Instance in constructor otherwise it will be undefined when calling connectEagerly\n    this.initializeMagicInstance()\n  }\n\n  private connectListener = ({ chainId }: ProviderConnectInfo): void => {\n    this.actions.update({ chainId: parseChainId(chainId) })\n  }\n\n  private disconnectListener = (error?: ProviderRpcError): void => {\n    this.actions.resetState()\n    if (error) this.onError?.(error)\n  }\n\n  private chainChangedListener = (chainId: number | string): void => {\n    this.actions.update({ chainId: parseChainId(chainId) })\n  }\n\n  private accountsChangedListener = (accounts: string[]): void => {\n    if (accounts.length === 0) {\n      this.actions.resetState()\n    } else {\n      this.actions.update({ accounts })\n    }\n  }\n\n  private setEventListeners(): void {\n    if (this.provider) {", "explanation": "Here is a concise summary:\n\n**Purpose:** Establish a Magic Universal Connector instance with event listeners.\n\n**Functionality:**\n\n* Initializes Magic Instance in constructor.\n* Sets up four event listeners:\n\t+ `connectListener`: updates actions on successful connection.\n\t+ `disconnectListener`: resets state and notifies error on disconnection.\n\t+ `chainChangedListener`: updates actions on chain ID change.\n\t+ `accountsChangedListener`: updates actions or resets state on account changes.", "metadata": {"repo": "magiclabs/web3-react-magic-connector", "file": "src/index.ts", "chunk_number": 2, "total_chunks": 6}, "repository_explanation": "**Repository Overview**\n\nPurpose: A Web3 React connector for Magic Labs.\n\nContent:\n\n* A library that enables seamless integration of Magic Labs' authentication features with React applications.\n* Codebase includes:\n\t+ React components and hooks for user authentication and authorization.\n\t+ Implementation details for interacting with the Magic Labs API.\n\t+ Example use cases and demonstrations.", "file_summary": "Here is a concise holistic summary of the file 'src/index.ts':\n\n**Purpose:** A Web3 React connector for interacting with Ethereum chains using the Magic SDK.\n\n**Functionality:**\n\n* Connects to Ethereum chains via RPC URL\n* Manages event listeners for connection/disconnection, chain changes, and account changes\n* Initializes Magic API instance, sets RPC provider, and gets chain ID\n* Tries to initialize Magic wallet, connects with UI, and updates connector state with current chain ID and account\n\n**Key Features:**\n\n* Error handling and logging capabilities\n* Custom network options (e.g., chain ID) support\n* Connection activation and deactivation methods"}
{"code": "      this.provider.on(\"connect\", this.connectListener)\n      this.provider.on(\"disconnect\", this.disconnectListener)\n      this.provider.on(\"chainChanged\", this.chainChangedListener)\n      this.provider.on(\"accountsChanged\", this.accountsChangedListener)\n    }\n  }\n\n  private removeEventListeners(): void {\n    if (this.provider) {\n      this.provider.off(\"connect\", this.connectListener)\n      this.provider.off(\"disconnect\", this.disconnectListener)\n      this.provider.off(\"chainChanged\", this.chainChangedListener)\n      this.provider.off(\"accountsChanged\", this.accountsChangedListener)\n    }\n  }\n\n  private initializeMagicInstance(\n    desiredChainIdOrChainParameters?: AddEthereumChainParameter\n  ) {\n    if (typeof window !== \"undefined\") {\n      // Extract apiKey and networkOptions from options\n      const { apiKey, networkOptions } = this.options\n\n      // Create a new Magic instance with desired ChainId for network switching\n      // or with the networkOptions if no parameters were passed to the function", "explanation": "Here is a concise summary of the purpose and functionality:\n\n**Block Purpose:** Event listener management for Ethereum provider interactions.\n\n**Functionality:**\n\n* Adds event listeners for connection/disconnection, chain changes, and account changes.\n* Removes previously added event listeners when necessary.\n* Initializes a Magic instance with desired Ethereum chain parameters.", "metadata": {"repo": "magiclabs/web3-react-magic-connector", "file": "src/index.ts", "chunk_number": 3, "total_chunks": 6}, "repository_explanation": "**Repository Overview**\n\nPurpose: A Web3 React connector for Magic Labs.\n\nContent:\n\n* A library that enables seamless integration of Magic Labs' authentication features with React applications.\n* Codebase includes:\n\t+ React components and hooks for user authentication and authorization.\n\t+ Implementation details for interacting with the Magic Labs API.\n\t+ Example use cases and demonstrations.", "file_summary": "Here is a concise holistic summary of the file 'src/index.ts':\n\n**Purpose:** A Web3 React connector for interacting with Ethereum chains using the Magic SDK.\n\n**Functionality:**\n\n* Connects to Ethereum chains via RPC URL\n* Manages event listeners for connection/disconnection, chain changes, and account changes\n* Initializes Magic API instance, sets RPC provider, and gets chain ID\n* Tries to initialize Magic wallet, connects with UI, and updates connector state with current chain ID and account\n\n**Key Features:**\n\n* Error handling and logging capabilities\n* Custom network options (e.g., chain ID) support\n* Connection activation and deactivation methods"}
{"code": "      this.magic = new Magic(apiKey, {\n        network: desiredChainIdOrChainParameters\n          ? {\n              rpcUrl: desiredChainIdOrChainParameters.rpcUrls[0],\n              chainId: desiredChainIdOrChainParameters.chainId,\n            }\n          : {\n              rpcUrl: networkOptions.rpcUrl,\n              chainId: networkOptions.chainId,\n            },\n      })\n\n      // Get the provider from magicInstance\n      this.provider = this.magic.rpcProvider\n\n      // Set the chainId. If no chainId was passed as a parameter, use the chainId from networkOptions\n      this.chainId =\n        desiredChainIdOrChainParameters?.chainId || networkOptions.chainId\n    }\n  }\n\n  private async checkLoggedInStatus() {\n    try {\n      const isLoggedIn = await this.magic?.user.isLoggedIn()\n      return isLoggedIn\n    } catch (error) {\n      return false\n    }\n  }\n\n  private async handleActivation(\n    desiredChainIdOrChainParameters?: AddEthereumChainParameter\n  ): Promise<void> {", "explanation": "Here is a concise summary of the purpose and functionality:\n\n**Purpose:** Initialize Magic API instance, set RPC provider, and get chain ID.\n\n**Functionality:**\n\n* Create a Magic API instance with provided apiKey and network parameters.\n* Get the RPC provider from the Magic instance.\n* Set the chain ID based on provided parameters or default values.\n* Check if user is logged in using `magic.user.isLoggedIn()` method.", "metadata": {"repo": "magiclabs/web3-react-magic-connector", "file": "src/index.ts", "chunk_number": 4, "total_chunks": 6}, "repository_explanation": "**Repository Overview**\n\nPurpose: A Web3 React connector for Magic Labs.\n\nContent:\n\n* A library that enables seamless integration of Magic Labs' authentication features with React applications.\n* Codebase includes:\n\t+ React components and hooks for user authentication and authorization.\n\t+ Implementation details for interacting with the Magic Labs API.\n\t+ Example use cases and demonstrations.", "file_summary": "Here is a concise holistic summary of the file 'src/index.ts':\n\n**Purpose:** A Web3 React connector for interacting with Ethereum chains using the Magic SDK.\n\n**Functionality:**\n\n* Connects to Ethereum chains via RPC URL\n* Manages event listeners for connection/disconnection, chain changes, and account changes\n* Initializes Magic API instance, sets RPC provider, and gets chain ID\n* Tries to initialize Magic wallet, connects with UI, and updates connector state with current chain ID and account\n\n**Key Features:**\n\n* Error handling and logging capabilities\n* Custom network options (e.g., chain ID) support\n* Connection activation and deactivation methods"}
{"code": "    const cancelActivation = this.actions.startActivation()\n\n    try {\n      // Initialize the magic instance\n      await this.initializeMagicInstance(desiredChainIdOrChainParameters)\n\n      await this.magic?.wallet.connectWithUI()\n\n      this.setEventListeners()\n\n      // Get the current chainId and account from the provider\n      const [chainId, accounts] = await Promise.all([\n        this.provider?.request({\n          method: \"eth_chainId\",\n        }) as Promise<string>,\n        this.provider?.request({ method: \"eth_accounts\" }) as Promise<string[]>,\n      ])\n\n      // Update the connector state with the current chainId and account\n      this.actions.update({ chainId: parseChainId(chainId), accounts })\n    } catch (error) {\n      cancelActivation()\n    }\n  }\n\n  // \"autoconnect\"\n  public async connectEagerly(): Promise<void> {\n    const isLoggedIn = await this.checkLoggedInStatus()\n    if (!isLoggedIn) return\n    await this.handleActivation()\n  }\n\n  // \"connect\"\n  public async activate(", "explanation": "Here is a concise summary of the purpose and functionality of this block:\n\n**Purpose:** Initialize Magic wallet, connect with UI, set event listeners, and update connector state with current chain ID and account.\n\n**Functionality:**\n\n* Tries to initialize Magic instance\n* Connects Magic wallet with UI\n* Sets event listeners\n* Retrieves current chain ID and account from provider\n* Updates connector state with new information\n\nIf any of these steps fail, it cancels the activation process.", "metadata": {"repo": "magiclabs/web3-react-magic-connector", "file": "src/index.ts", "chunk_number": 5, "total_chunks": 6}, "repository_explanation": "**Repository Overview**\n\nPurpose: A Web3 React connector for Magic Labs.\n\nContent:\n\n* A library that enables seamless integration of Magic Labs' authentication features with React applications.\n* Codebase includes:\n\t+ React components and hooks for user authentication and authorization.\n\t+ Implementation details for interacting with the Magic Labs API.\n\t+ Example use cases and demonstrations.", "file_summary": "Here is a concise holistic summary of the file 'src/index.ts':\n\n**Purpose:** A Web3 React connector for interacting with Ethereum chains using the Magic SDK.\n\n**Functionality:**\n\n* Connects to Ethereum chains via RPC URL\n* Manages event listeners for connection/disconnection, chain changes, and account changes\n* Initializes Magic API instance, sets RPC provider, and gets chain ID\n* Tries to initialize Magic wallet, connects with UI, and updates connector state with current chain ID and account\n\n**Key Features:**\n\n* Error handling and logging capabilities\n* Custom network options (e.g., chain ID) support\n* Connection activation and deactivation methods"}
{"code": "    desiredChainIdOrChainParameters?: AddEthereumChainParameter\n  ): Promise<void> {\n    await this.handleActivation(desiredChainIdOrChainParameters)\n  }\n\n  // \"disconnect\"\n  public async deactivate(): Promise<void> {\n    this.actions.resetState()\n    await this.magic?.user.logout()\n    this.removeEventListeners()\n  }\n}\n\nexport class MagicConnect extends MagicUniversalConnector {}\nexport class MagicDedicatedConnector extends MagicUniversalConnector {}\nexport class MagicAuth extends MagicUniversalConnector {}\n", "explanation": "Here is a concise summary:\n\nThis block defines methods for connecting to Ethereum chains and deactivating connections.\n\n* `handleActivation`: Activates a connection to an Ethereum chain.\n* `deactivate`: Closes the connection, logs out the user, and removes event listeners.", "metadata": {"repo": "magiclabs/web3-react-magic-connector", "file": "src/index.ts", "chunk_number": 6, "total_chunks": 6}, "repository_explanation": "**Repository Overview**\n\nPurpose: A Web3 React connector for Magic Labs.\n\nContent:\n\n* A library that enables seamless integration of Magic Labs' authentication features with React applications.\n* Codebase includes:\n\t+ React components and hooks for user authentication and authorization.\n\t+ Implementation details for interacting with the Magic Labs API.\n\t+ Example use cases and demonstrations.", "file_summary": "Here is a concise holistic summary of the file 'src/index.ts':\n\n**Purpose:** A Web3 React connector for interacting with Ethereum chains using the Magic SDK.\n\n**Functionality:**\n\n* Connects to Ethereum chains via RPC URL\n* Manages event listeners for connection/disconnection, chain changes, and account changes\n* Initializes Magic API instance, sets RPC provider, and gets chain ID\n* Tries to initialize Magic wallet, connects with UI, and updates connector state with current chain ID and account\n\n**Key Features:**\n\n* Error handling and logging capabilities\n* Custom network options (e.g., chain ID) support\n* Connection activation and deactivation methods"}
{"code": "{\n  \"extends\": \"@tsconfig/recommended\",\n  \"include\": [\"./src\"],\n  \"compilerOptions\": {\n    \"outDir\": \"./dist\",\n    \"module\": \"CommonJS\",\n    \"declaration\": true,\n    \"moduleResolution\": \"Node\"\n  }\n}\n", "explanation": "This block is a `tsconfig.json` file, which configures TypeScript compiler settings.\n\nPurpose: Defines settings for compiling TypeScript code.\n\nFunctionality:\n\n* Includes the `@tsconfig/recommended` configuration.\n* Compiles files in the `./src` directory.\n* Outputs compiled code to `./dist`.\n* Uses CommonJS module resolution.\n* Generates declaration files.", "metadata": {"repo": "magiclabs/web3-react-magic-connector", "file": "tsconfig.json", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "**Repository Overview**\n\nPurpose: A Web3 React connector for Magic Labs.\n\nContent:\n\n* A library that enables seamless integration of Magic Labs' authentication features with React applications.\n* Codebase includes:\n\t+ React components and hooks for user authentication and authorization.\n\t+ Implementation details for interacting with the Magic Labs API.\n\t+ Example use cases and demonstrations.", "file_summary": "Here is a concise summary of the file 'tsconfig.json':\n\n**tsconfig.json**: Configures TypeScript compiler settings for compiling source code in `./src` to output compiled code in `./dist`, with CommonJS module resolution and declaration file generation, following the `@tsconfig/recommended` configuration."}

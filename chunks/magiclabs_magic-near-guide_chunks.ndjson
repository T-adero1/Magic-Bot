{"code": "## Resources\n- [Github Repo](https://github.com/magiclabs/magic-near-guide.git)\n- [Live Demo](https://magic-near.vercel.app/login)\n\n## Quick Start\n```\n$ git clone https://github.com/magiclabs/magic-near-guide.git\n$ cd magic-near-guide\n// Enter your Magic API key in `.env` such as REACT_APP_MAGIC_PUBLISHABLE_KEY=pk_live_abc123\n$ yarn\n$ yarn start\n// Visit your app on http://localhost:3000\n```\n\n## What is NEAR\n\nNEAR Protocol is a layer-one blockchain with features that include Proof-of-Stake consensus, smart contract support, high scalability through sharding, and human-readable addressing. \n", "explanation": "Here is a concise summary:\n\n**This block:**\n\n* Provides resources (GitHub repo and live demo) for a project\n* Offers a quick start guide with commands to set up a development environment\n* Briefly describes NEAR Protocol, a blockchain platform with features like PoS consensus, smart contract support, scalability, and human-readable addressing.", "metadata": {"repo": "magiclabs/magic-near-guide", "file": "README.md", "chunk_number": 1, "total_chunks": 11}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** `magiclabs/magic-near-guide`\n\n**Purpose:** A guide on how to deploy the Magic Platform using Near Protocol.\n\n**Content:** Documentation, code samples, and examples showcasing how to integrate Magic with Near contracts.", "file_summary": "Here is a holistic summary of the file 'README.md':\n\nThis project enables decentralized and serverless application development on the NEAR Protocol blockchain, which features smart contract support, scalability, and human-readable addressing. It provides resources for users to obtain testnet tokens, set up a development environment, and create a dapp that allows users to log in with email, social provider, or phone number, create a wallet, receive, and transfer funds using Magic's SDK.\n\nThe project also includes functionality to:\n\n* Handle login redirects and callbacks from social providers\n* Display and interact with user data on a login/profile page\n* Connect to the NEAR blockchain, fetch user balance, and display it on the screen\n* Sign NEAR blockchain transactions using Magic as key management provider\n* Send a NEAR transaction (transfer) from one account to another\n\nKey features include:\n\n* Smart contracts written in Rust or AssemblyScript\n* High transaction throughput through sharding and computation division\n* Human-readable accounts (e.g. `magic.near`) instead of non-human-readable addresses\n* Native token, NEAR, used for all transaction fees"}
{"code": "Dissimilar to Ethereum and EVM-compatible chains which use the Solidity programming language, smart contracts on NEAR are written in Rust or AssemblyScript (similar to JavaScript). Building on the NEAR blockchain allows developers to build decentralized and serverless applications that maintain security while also providing scalability that popular dApps require. The high transaction throughput is enabled through sharding, which divides the computation required from nodes, so each only need to process transactions relevant to their respective shard.\n\nAn important differentiator with NEAR compared to other layer-one's is they support human-readable accounts at the base layer, such as `magic.near`, instead of non-human-readable addresses such as `92130c8ab2c23a33...` found in other blockchains. This makes NEAR a user-friendly blockchain for developers to build on. \n\nThe native token for the blockchain is NEAR, which is used to pay for all transaction fees on the platform.\n", "explanation": "Here is a concise summary:\n\n**Purpose:** Enable decentralized and serverless application development with scalable security.\n\n**Functionality:**\n\n* Smart contracts written in Rust or AssemblyScript\n* High transaction throughput through sharding and computation division\n* Human-readable accounts (e.g. `magic.near`) instead of non-human-readable addresses\n* Native token, NEAR, used for all transaction fees", "metadata": {"repo": "magiclabs/magic-near-guide", "file": "README.md", "chunk_number": 2, "total_chunks": 11}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** `magiclabs/magic-near-guide`\n\n**Purpose:** A guide on how to deploy the Magic Platform using Near Protocol.\n\n**Content:** Documentation, code samples, and examples showcasing how to integrate Magic with Near contracts.", "file_summary": "Here is a holistic summary of the file 'README.md':\n\nThis project enables decentralized and serverless application development on the NEAR Protocol blockchain, which features smart contract support, scalability, and human-readable addressing. It provides resources for users to obtain testnet tokens, set up a development environment, and create a dapp that allows users to log in with email, social provider, or phone number, create a wallet, receive, and transfer funds using Magic's SDK.\n\nThe project also includes functionality to:\n\n* Handle login redirects and callbacks from social providers\n* Display and interact with user data on a login/profile page\n* Connect to the NEAR blockchain, fetch user balance, and display it on the screen\n* Sign NEAR blockchain transactions using Magic as key management provider\n* Send a NEAR transaction (transfer) from one account to another\n\nKey features include:\n\n* Smart contracts written in Rust or AssemblyScript\n* High transaction throughput through sharding and computation division\n* Human-readable accounts (e.g. `magic.near`) instead of non-human-readable addresses\n* Native token, NEAR, used for all transaction fees"}
{"code": "## Get Testnet Tokens\n\n1. Create a test wallet on [wallet.testnet.near.org](https://wallet.testnet.near.org). 200 NEAR test tokens will automatically be deposited to your wallet.\n2. Login to your Magic-NEAR app with email, google, or phone number to get your public address.\n3. Transfer funds from your `your-account.testnet` wallet on wallet.testnet.near.org to your Magic wallet.\n\n## Tutorial\n\nAt the end of this tutorial, your end users will be able to login to your dapp with just an email, social provider, or phone number, create a NEAR wallet, then receive and transfer funds.\n\n## Dependencies\n\n```\n$ yarn add magic-sdk @magic-ext/near @magic-ext/oauth near-api-js\n```\n\n### Login With Magic\n\nMagic's `NearExtension` is required in order to access NEAR-specific sdk methods. The extension allows for Magic to manage NEAR private keys through our Delegated Key Management. Transactions are only signed by Magic, rather than sent by Magic, which is why the `rpcUrl` key is empty. \n\n```js", "explanation": "**Summary**\n\nThis block guides users on how to obtain testnet tokens for the NEAR blockchain, and sets up a tutorial for creating a dapp that allows users to log in with email, social provider, or phone number, create a wallet, receive, and transfer funds using Magic's SDK.", "metadata": {"repo": "magiclabs/magic-near-guide", "file": "README.md", "chunk_number": 3, "total_chunks": 11}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** `magiclabs/magic-near-guide`\n\n**Purpose:** A guide on how to deploy the Magic Platform using Near Protocol.\n\n**Content:** Documentation, code samples, and examples showcasing how to integrate Magic with Near contracts.", "file_summary": "Here is a holistic summary of the file 'README.md':\n\nThis project enables decentralized and serverless application development on the NEAR Protocol blockchain, which features smart contract support, scalability, and human-readable addressing. It provides resources for users to obtain testnet tokens, set up a development environment, and create a dapp that allows users to log in with email, social provider, or phone number, create a wallet, receive, and transfer funds using Magic's SDK.\n\nThe project also includes functionality to:\n\n* Handle login redirects and callbacks from social providers\n* Display and interact with user data on a login/profile page\n* Connect to the NEAR blockchain, fetch user balance, and display it on the screen\n* Sign NEAR blockchain transactions using Magic as key management provider\n* Send a NEAR transaction (transfer) from one account to another\n\nKey features include:\n\n* Smart contracts written in Rust or AssemblyScript\n* High transaction throughput through sharding and computation division\n* Human-readable accounts (e.g. `magic.near`) instead of non-human-readable addresses\n* Native token, NEAR, used for all transaction fees"}
{"code": "import { Magic } from 'magic-sdk';\nimport { NearExtension } from \"@magic-ext/near\";\nimport { OAuthExtension } from '@magic-ext/oauth';\n \nexport const magic = new Magic(process.env.REACT_APP_MAGIC_PUBLISHABLE_KEY, {\n extensions: [\n     new NearExtension({\n         rpcUrl: '',\n     }),\n     new OAuthExtension()\n ]}\n);\n```\n\nThe Magic login flow sends a magic link to a user's inbox, which when clicked, authenticates them on your app while also generating a random private key and NEAR public address. This one line kicks off the entire flow on behalf of the developer, `await magic.auth.loginWithMagicLink({ email });`.\n\n```js\n// Login.js\nconst login = useCallback(async () => {\n setIsLoggingIn(true);\n \n try {\n   await magic.auth.loginWithMagicLink({ email });\n   history.push(\"/\");\n } catch {\n   setIsLoggingIn(false);\n }\n}, [email]);\n```\n\nUsers can also login with their phone number.\n\n```js\n// Login.js\nconst loginWithSMS = useCallback(async () => {\n  setIsLoggingIn(true);\n  try {\n    await magic.auth.loginWithSMS({ phoneNumber });", "explanation": "Here is a concise summary:\n\nThis code initializes the Magic SDK with a publishable key, enabling user authentication through email or phone number-based login flows (Magic Link and SMS). The `loginWithMagicLink` and `loginWithSMS` functions are used to authenticate users on behalf of the developer.", "metadata": {"repo": "magiclabs/magic-near-guide", "file": "README.md", "chunk_number": 4, "total_chunks": 11}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** `magiclabs/magic-near-guide`\n\n**Purpose:** A guide on how to deploy the Magic Platform using Near Protocol.\n\n**Content:** Documentation, code samples, and examples showcasing how to integrate Magic with Near contracts.", "file_summary": "Here is a holistic summary of the file 'README.md':\n\nThis project enables decentralized and serverless application development on the NEAR Protocol blockchain, which features smart contract support, scalability, and human-readable addressing. It provides resources for users to obtain testnet tokens, set up a development environment, and create a dapp that allows users to log in with email, social provider, or phone number, create a wallet, receive, and transfer funds using Magic's SDK.\n\nThe project also includes functionality to:\n\n* Handle login redirects and callbacks from social providers\n* Display and interact with user data on a login/profile page\n* Connect to the NEAR blockchain, fetch user balance, and display it on the screen\n* Sign NEAR blockchain transactions using Magic as key management provider\n* Send a NEAR transaction (transfer) from one account to another\n\nKey features include:\n\n* Smart contracts written in Rust or AssemblyScript\n* High transaction throughput through sharding and computation division\n* Human-readable accounts (e.g. `magic.near`) instead of non-human-readable addresses\n* Native token, NEAR, used for all transaction fees"}
{"code": "    history.push(\"/\");\n  } catch (err) {\n    console.log(err);\n    setIsLoggingIn(false);\n  }\n}, [phoneNumber]);\n ```\n\nLastly, Magic also supports social providers, such as Google. This function takes two parameters, first being the social provider (facebook, google, apple, etc) and second being a callback URL for where the user should get directed to on your application after authenticating with the social provider and Magic.\n\n```js\n// Login.js\nconst handleLoginWithGoogle = async (e) => {\n  e.preventDefault();\n  await magic.oauth.loginWithRedirect({\n    provider: \"google\",\n    redirectURI: `${window.location.origin}/callback`\n  });\n};\n```\n\nTo handle the callback, we can simply call `magic.oauth.getRedirectResult()` which will return the user details returned from the social provider.\n\n```js\n// Callback.js\nuseEffect(() => {\n    magic.oauth.getRedirectResult().then((result) => {\n      console.log(result);\n      history.push(\"/\");\n    });\n}, []);\n```\n\nYou can also allow a user to logout with the following code snippet.\n", "explanation": "Here is a summary of the purpose and functionality of this block:\n\n**Purpose:** Handle login redirects and callbacks from social providers like Google.\n\n**Functionality:**\n\n1. When a login attempt fails, it logs the error and sets `isLoggingIn` to false.\n2. When logging in with Google, it redirects the user to Magic's authentication page and then to the callback URL after successful authentication.\n3. On callback, it retrieves the user details from Magic and navigates back to the homepage.\n4. It allows users to logout using a separate code snippet (not shown).", "metadata": {"repo": "magiclabs/magic-near-guide", "file": "README.md", "chunk_number": 5, "total_chunks": 11}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** `magiclabs/magic-near-guide`\n\n**Purpose:** A guide on how to deploy the Magic Platform using Near Protocol.\n\n**Content:** Documentation, code samples, and examples showcasing how to integrate Magic with Near contracts.", "file_summary": "Here is a holistic summary of the file 'README.md':\n\nThis project enables decentralized and serverless application development on the NEAR Protocol blockchain, which features smart contract support, scalability, and human-readable addressing. It provides resources for users to obtain testnet tokens, set up a development environment, and create a dapp that allows users to log in with email, social provider, or phone number, create a wallet, receive, and transfer funds using Magic's SDK.\n\nThe project also includes functionality to:\n\n* Handle login redirects and callbacks from social providers\n* Display and interact with user data on a login/profile page\n* Connect to the NEAR blockchain, fetch user balance, and display it on the screen\n* Sign NEAR blockchain transactions using Magic as key management provider\n* Send a NEAR transaction (transfer) from one account to another\n\nKey features include:\n\n* Smart contracts written in Rust or AssemblyScript\n* High transaction throughput through sharding and computation division\n* Human-readable accounts (e.g. `magic.near`) instead of non-human-readable addresses\n* Native token, NEAR, used for all transaction fees"}
{"code": "```js\n// Profile.js\nconst logout = useCallback(() => {\n magic.user.logout().then(() => {\n   history.push(\"/login\");\n })\n}, [history]);\n```\n\n### Display User Data\n\nAfter a user has successfully logged in, you can display their data, such as `email` and `public address`.\n\n```js\n// Profile.js\nconst [userMetadata, setUserMetadata] = useState();\n \nuseEffect(() => {\n // If user is logged in, retrieve the authenticated user's profile.\n magic.user.isLoggedIn().then(magicIsLoggedIn => {\n   if (magicIsLoggedIn) {\n     magic.user.getMetadata().then(user => {\n       setUserMetadata(user);\n     });\n   } else {\n     // If no user is logged in, redirect to `/login`\n     history.push(\"/login\");\n   }\n });\n}, []);\n \nreturn (\n <>\n   <div>Email</div>\n   <div>{userMetadata.email}</div>\n   <div>NEAR Address</div>\n   <div>{userMetadata.publicAddress}</div>\n </>\n)\n```\n\nYou can also use the `near-api-js` package to connect to the NEAR blockchain node to fetch a user's balance (and later send a transaction).\n\n```js\nimport * as nearAPI from \"near-api-js\";", "explanation": "**Summary:**\n\nThis block of code is used to display and interact with user data on a login/profile page.\n\n* It logs out users when they click logout.\n* It displays email and public address of logged-in users.\n* It uses the `near-api-js` package to connect to the NEAR blockchain node, allowing for fetching a user's balance.", "metadata": {"repo": "magiclabs/magic-near-guide", "file": "README.md", "chunk_number": 6, "total_chunks": 11}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** `magiclabs/magic-near-guide`\n\n**Purpose:** A guide on how to deploy the Magic Platform using Near Protocol.\n\n**Content:** Documentation, code samples, and examples showcasing how to integrate Magic with Near contracts.", "file_summary": "Here is a holistic summary of the file 'README.md':\n\nThis project enables decentralized and serverless application development on the NEAR Protocol blockchain, which features smart contract support, scalability, and human-readable addressing. It provides resources for users to obtain testnet tokens, set up a development environment, and create a dapp that allows users to log in with email, social provider, or phone number, create a wallet, receive, and transfer funds using Magic's SDK.\n\nThe project also includes functionality to:\n\n* Handle login redirects and callbacks from social providers\n* Display and interact with user data on a login/profile page\n* Connect to the NEAR blockchain, fetch user balance, and display it on the screen\n* Sign NEAR blockchain transactions using Magic as key management provider\n* Send a NEAR transaction (transfer) from one account to another\n\nKey features include:\n\n* Smart contracts written in Rust or AssemblyScript\n* High transaction throughput through sharding and computation division\n* Human-readable accounts (e.g. `magic.near`) instead of non-human-readable addresses\n* Native token, NEAR, used for all transaction fees"}
{"code": " \nconst [balance, setBalance] = useState(0);\nconst networkId = \"testnet\"; // testnet, betanet, or mainnet\n \nuseEffect(() => {\n const { connect, keyStores } = nearAPI;\n \n const config = {\n   networkId,\n   keyStore: new keyStores.BrowserLocalStorageKeyStore(),\n   nodeUrl: `https://rpc.${networkId}.near.org`,\n   walletUrl: `https://wallet.${networkId}.near.org`,\n   helperUrl: `https://helper.${networkId}.near.org`,\n   explorerUrl: `https://explorer.${networkId}.near.org`,\n };\n \n // connect to NEAR\n near = await connect(config);\n})\n \nconst fetchBalance = async (address) => {\n const account = await near.account(address);\n account.getAccountBalance().then(bal => setBalance(nearAPI.utils.format.formatNearAmount(bal.total)));\n}\n \nreturn (\n <>\n   <div>Balance</div>\n   <div>{balance} NEAR</div>\n </>\n)\n```\n### Send Transaction\n", "explanation": "Here is a summary of the code:\n\n**Purpose:** Connect to the NEAR blockchain, fetch user balance, and display it on the screen.\n\n**Functionality:**\n\n* Uses `useState` to store the user's balance.\n* Uses `useEffect` to connect to the NEAR blockchain with specified network ID (e.g. testnet).\n* Defines a function `fetchBalance` to retrieve the user's balance for a given address and update the state.\n* Displays the current balance on the screen in NEAR format.", "metadata": {"repo": "magiclabs/magic-near-guide", "file": "README.md", "chunk_number": 7, "total_chunks": 11}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** `magiclabs/magic-near-guide`\n\n**Purpose:** A guide on how to deploy the Magic Platform using Near Protocol.\n\n**Content:** Documentation, code samples, and examples showcasing how to integrate Magic with Near contracts.", "file_summary": "Here is a holistic summary of the file 'README.md':\n\nThis project enables decentralized and serverless application development on the NEAR Protocol blockchain, which features smart contract support, scalability, and human-readable addressing. It provides resources for users to obtain testnet tokens, set up a development environment, and create a dapp that allows users to log in with email, social provider, or phone number, create a wallet, receive, and transfer funds using Magic's SDK.\n\nThe project also includes functionality to:\n\n* Handle login redirects and callbacks from social providers\n* Display and interact with user data on a login/profile page\n* Connect to the NEAR blockchain, fetch user balance, and display it on the screen\n* Sign NEAR blockchain transactions using Magic as key management provider\n* Send a NEAR transaction (transfer) from one account to another\n\nKey features include:\n\n* Smart contracts written in Rust or AssemblyScript\n* High transaction throughput through sharding and computation division\n* Human-readable accounts (e.g. `magic.near`) instead of non-human-readable addresses\n* Native token, NEAR, used for all transaction fees"}
{"code": "In transferring assets on the NEAR blockchain, Magic's role is signing the transaction object since Magic is the key management provider. We then use the `near` instance to send the signed transaction to the network. A NEAR transaction consists of six fields, each broken down below.\n\n1. `sender`: the sender's public address (can be either the raw 64-character public address, or `.near` syntax such as `bob.near`)\n2. `publicKey`: the sending address' public key, which is an object with two key value pairs, `keyType` and `data`.\n3. `receiver`: the receiving public address (can be either the raw 64-character public address, or `.near` syntax such as `bob.near`)\n4. `nonce`: this number represents the number of transactions that an account has sent (including the transaction being constructed), and is meant to prevent replay attacks. The first transaction sent from a user's wallet will have `nonce: 1`, the second will have `nonce: 2`, etc.", "explanation": "Here is a concise summary:\n\n**Purpose:** Sign NEAR blockchain transactions using Magic as key management provider.\n\n**Functionality:** Compose transaction with sender, receiver, nonce (transaction count), and public key, then send it to the network using `near` instance.", "metadata": {"repo": "magiclabs/magic-near-guide", "file": "README.md", "chunk_number": 8, "total_chunks": 11}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** `magiclabs/magic-near-guide`\n\n**Purpose:** A guide on how to deploy the Magic Platform using Near Protocol.\n\n**Content:** Documentation, code samples, and examples showcasing how to integrate Magic with Near contracts.", "file_summary": "Here is a holistic summary of the file 'README.md':\n\nThis project enables decentralized and serverless application development on the NEAR Protocol blockchain, which features smart contract support, scalability, and human-readable addressing. It provides resources for users to obtain testnet tokens, set up a development environment, and create a dapp that allows users to log in with email, social provider, or phone number, create a wallet, receive, and transfer funds using Magic's SDK.\n\nThe project also includes functionality to:\n\n* Handle login redirects and callbacks from social providers\n* Display and interact with user data on a login/profile page\n* Connect to the NEAR blockchain, fetch user balance, and display it on the screen\n* Sign NEAR blockchain transactions using Magic as key management provider\n* Send a NEAR transaction (transfer) from one account to another\n\nKey features include:\n\n* Smart contracts written in Rust or AssemblyScript\n* High transaction throughput through sharding and computation division\n* Human-readable accounts (e.g. `magic.near`) instead of non-human-readable addresses\n* Native token, NEAR, used for all transaction fees"}
{"code": "5. `actions`: describes what should be done at the receiver's end. `Transfer` represents sendings funds from one wallet to another, `DeployContract` represents a contract deployment transaction. In total there are eight different transaction types.\n6. `recentBlockHash`: each transaction is required to be sent with the hash of a block from the last 24 hours to prove the transaction was recently created.\n\nThis is what a `sendTransaction` function with Magic can look like.\n\n```js\nconst sendTransaction = async () => {\n // Grab user's public key from Magic\n const publicKeyString = await magic.near.getPublicKey();\n const publicKey = nearAPI.utils.PublicKey.fromString(publicKeyString);\n \n // Calculate the sending account's nonce\n const provider = new nearAPI.providers.JsonRpcProvider(\n   `https://rpc.${networkId}.near.org`\n );\n const accessKey = await provider.query(\n   `access_key/${userMetadata.publicAddress}/${publicKey.toString()}`,\n   \"\"\n );\n const nonce = ++accessKey.nonce;\n \n // Calculate `actions`", "explanation": "**Summary:**\n\nThis block describes the purpose and functionality of a transaction in a blockchain system, specifically on the Near network.\n\n* It outlines two key components:\n\t+ `actions`: defines the action taken at the receiver's end (e.g., sending funds or deploying a contract).\n\t+ `recentBlockHash`: requires the hash of a recent block to prove the transaction was recently created.\n* A code example is provided for a `sendTransaction` function using Magic, which demonstrates how to calculate the sender's nonce and use it in the transaction.", "metadata": {"repo": "magiclabs/magic-near-guide", "file": "README.md", "chunk_number": 9, "total_chunks": 11}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** `magiclabs/magic-near-guide`\n\n**Purpose:** A guide on how to deploy the Magic Platform using Near Protocol.\n\n**Content:** Documentation, code samples, and examples showcasing how to integrate Magic with Near contracts.", "file_summary": "Here is a holistic summary of the file 'README.md':\n\nThis project enables decentralized and serverless application development on the NEAR Protocol blockchain, which features smart contract support, scalability, and human-readable addressing. It provides resources for users to obtain testnet tokens, set up a development environment, and create a dapp that allows users to log in with email, social provider, or phone number, create a wallet, receive, and transfer funds using Magic's SDK.\n\nThe project also includes functionality to:\n\n* Handle login redirects and callbacks from social providers\n* Display and interact with user data on a login/profile page\n* Connect to the NEAR blockchain, fetch user balance, and display it on the screen\n* Sign NEAR blockchain transactions using Magic as key management provider\n* Send a NEAR transaction (transfer) from one account to another\n\nKey features include:\n\n* Smart contracts written in Rust or AssemblyScript\n* High transaction throughput through sharding and computation division\n* Human-readable accounts (e.g. `magic.near`) instead of non-human-readable addresses\n* Native token, NEAR, used for all transaction fees"}
{"code": " const actions = [nearAPI.transactions.transfer(nearAPI.utils.format.parseNearAmount(sendAmount))];\n \n // Create recent block hash\n const status = await near.connection.provider.status();\n const blockHash = status.sync_info.latest_block_hash;\n const serializedBlockHash = nearAPI.utils.serialize.base_decode(blockHash);   \n \n // Construct transaction object\n const transaction = nearAPI.transactions.createTransaction(\n   userMetadata.publicAddress,\n   publicKey,\n   destinationAddress,\n   nonce,\n   actions,\n   serializedBlockHash\n );\n \n const rawTransaction = transaction.encode();\n  // Sign raw transaction with Magic\n const result = await magic.near.signTransaction({rawTransaction, networkID: networkId});\n const signedTransaction = nearAPI.transactions.SignedTransaction.decode(Buffer.from(result.encodedSignedTransaction));\n \n // Send the signed transaction with `near`\n const receipt = await near.connection.provider.sendTransaction(signedTransaction);\n console.log(receipt);\n}\n```\n\n## Conclusion\n", "explanation": "Here is a concise summary of the block:\n\n**Purpose:** Send a NEAR transaction (transfer) from one account to another.\n\n**Functionality:** \n\n1. Prepare the transaction by formatting the transfer amount, getting the latest block hash, and creating a transaction object.\n2. Sign the transaction using Magic.\n3. Send the signed transaction through the NEAR connection provider.", "metadata": {"repo": "magiclabs/magic-near-guide", "file": "README.md", "chunk_number": 10, "total_chunks": 11}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** `magiclabs/magic-near-guide`\n\n**Purpose:** A guide on how to deploy the Magic Platform using Near Protocol.\n\n**Content:** Documentation, code samples, and examples showcasing how to integrate Magic with Near contracts.", "file_summary": "Here is a holistic summary of the file 'README.md':\n\nThis project enables decentralized and serverless application development on the NEAR Protocol blockchain, which features smart contract support, scalability, and human-readable addressing. It provides resources for users to obtain testnet tokens, set up a development environment, and create a dapp that allows users to log in with email, social provider, or phone number, create a wallet, receive, and transfer funds using Magic's SDK.\n\nThe project also includes functionality to:\n\n* Handle login redirects and callbacks from social providers\n* Display and interact with user data on a login/profile page\n* Connect to the NEAR blockchain, fetch user balance, and display it on the screen\n* Sign NEAR blockchain transactions using Magic as key management provider\n* Send a NEAR transaction (transfer) from one account to another\n\nKey features include:\n\n* Smart contracts written in Rust or AssemblyScript\n* High transaction throughput through sharding and computation division\n* Human-readable accounts (e.g. `magic.near`) instead of non-human-readable addresses\n* Native token, NEAR, used for all transaction fees"}
{"code": "You now have an application that allows a user to generate a NEAR wallet with just their email and transfer funds!\n", "explanation": "**Purpose:** Create a digital wallet for users using only their email.\n**Functionality:** Generate a NEAR wallet and enable fund transfers with email-based authentication.", "metadata": {"repo": "magiclabs/magic-near-guide", "file": "README.md", "chunk_number": 11, "total_chunks": 11}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** `magiclabs/magic-near-guide`\n\n**Purpose:** A guide on how to deploy the Magic Platform using Near Protocol.\n\n**Content:** Documentation, code samples, and examples showcasing how to integrate Magic with Near contracts.", "file_summary": "Here is a holistic summary of the file 'README.md':\n\nThis project enables decentralized and serverless application development on the NEAR Protocol blockchain, which features smart contract support, scalability, and human-readable addressing. It provides resources for users to obtain testnet tokens, set up a development environment, and create a dapp that allows users to log in with email, social provider, or phone number, create a wallet, receive, and transfer funds using Magic's SDK.\n\nThe project also includes functionality to:\n\n* Handle login redirects and callbacks from social providers\n* Display and interact with user data on a login/profile page\n* Connect to the NEAR blockchain, fetch user balance, and display it on the screen\n* Sign NEAR blockchain transactions using Magic as key management provider\n* Send a NEAR transaction (transfer) from one account to another\n\nKey features include:\n\n* Smart contracts written in Rust or AssemblyScript\n* High transaction throughput through sharding and computation division\n* Human-readable accounts (e.g. `magic.near`) instead of non-human-readable addresses\n* Native token, NEAR, used for all transaction fees"}
{"code": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n    <meta name=\"theme-color\" content=\"#000000\" />\n    <meta name=\"description\" content=\"Web site created using create-react-app\" />\n    <!--\n      manifest.json provides metadata used when your web app is installed on a\n      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/\n    -->\n    <link rel=\"manifest\" href=\"%PUBLIC_URL%/manifest.json\" />\n    <!--\n      Notice the use of %PUBLIC_URL% in the tags above.\n      It will be replaced with the URL of the `public` folder during the build.\n      Only files inside the `public` folder can be referenced from the HTML.\n      Unlike \"/favicon.ico\" or \"favicon.ico\", \"%PUBLIC_URL%/favicon.ico\" will\n      work correctly both with client-side routing and a non-root public URL.\n      Learn how to configure a non-root public URL by running `npm run build`.\n    -->", "explanation": "This block appears to be HTML metadata, used for configuring web application settings such as character encoding, viewport, theme color, description, and mobile installation manifest. It sets up basic properties for an HTML document created with Create React App.", "metadata": {"repo": "magiclabs/magic-near-guide", "file": "public/index.html", "chunk_number": 1, "total_chunks": 2}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** `magiclabs/magic-near-guide`\n\n**Purpose:** A guide on how to deploy the Magic Platform using Near Protocol.\n\n**Content:** Documentation, code samples, and examples showcasing how to integrate Magic with Near contracts.", "file_summary": "Here is a concise summary of the file 'public/index.html':\n\nThis file serves as a basic HTML template for a web application, setting up essential metadata properties and providing a blank canvas (div with id \"root\") for script population during development or build processes."}
{"code": "    <title>Magic Hello World \ud83c\udf0e</title>\n  </head>\n  <body>\n    <noscript>You need to enable JavaScript to run this app.</noscript>\n    <div id=\"root\"></div>\n    <!--\n      This HTML file is a template.\n      If you open it directly in the browser, you will see an empty page.\n      You can add webfonts, meta tags, or analytics to this file.\n      The build step will place the bundled scripts into the <body> tag.\n      To begin the development, run `npm start` or `yarn start`.\n      To create a production bundle, use `npm run build` or `yarn build`.\n    -->\n  </body>\n</html>\n", "explanation": "**Purpose:** A basic HTML template for a web application.\n\n**Functionality:** A blank canvas (div with id \"root\") that will be populated by scripts during the development/build process.", "metadata": {"repo": "magiclabs/magic-near-guide", "file": "public/index.html", "chunk_number": 2, "total_chunks": 2}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** `magiclabs/magic-near-guide`\n\n**Purpose:** A guide on how to deploy the Magic Platform using Near Protocol.\n\n**Content:** Documentation, code samples, and examples showcasing how to integrate Magic with Near contracts.", "file_summary": "Here is a concise summary of the file 'public/index.html':\n\nThis file serves as a basic HTML template for a web application, setting up essential metadata properties and providing a blank canvas (div with id \"root\") for script population during development or build processes."}
{"code": "import React from \"react\";\nimport { Route, Switch } from \"react-router\";\nimport { BrowserRouter } from \"react-router-dom\";\n\n// Views\nimport Login from \"./Login\";\nimport Profile from \"./Profile\";\nimport Callback from \"./Callback\";\n\nexport default function App() {\n  return (\n    <BrowserRouter>\n      <div className=\"App\">\n        <Switch>\n          <Route path=\"/login\" exact>\n            <Login />\n          </Route>\n\n          <Route path=\"/callback\" exact>\n            <Callback />\n          </Route>\n\n          <Route path=\"*\">\n            <Profile />\n          </Route>\n        </Switch>\n      </div>\n    </BrowserRouter>\n  );\n}\n\n", "explanation": "**Purpose:** Define a React app with routing functionality.\n\n**Functionality:**\n\n* Handles user navigation between different views:\n\t+ Login page on \"/login\"\n\t+ Callback page on \"/callback\"\n\t+ Profile page (default) for any other URL\n* Uses BrowserRouter and Switch components from react-router-dom to manage client-side routing.", "metadata": {"repo": "magiclabs/magic-near-guide", "file": "src/components/App.js", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** `magiclabs/magic-near-guide`\n\n**Purpose:** A guide on how to deploy the Magic Platform using Near Protocol.\n\n**Content:** Documentation, code samples, and examples showcasing how to integrate Magic with Near contracts.", "file_summary": "Here is a concise summary of `src/components/App.js`:\n\n**App Component:**\nDefines a React app with routing functionality, allowing users to navigate between Login, Callback, and Profile pages using BrowserRouter and Switch components from react-router-dom."}
{"code": "import React, { useEffect } from \"react\";\nimport { useHistory } from \"react-router\";\nimport { magic } from \"../magic\";\nimport Loading from \"./Loading\";\n\nexport default function Callback() {\n  const history = useHistory();\n\n  useEffect(() => {\n      magic.oauth.getRedirectResult().then((result) => {\n        console.log(result);\n        history.push(\"/\");\n      });\n  }, []);\n\n  return <Loading />;\n}\n", "explanation": "This block is a React component that:\n\n* Handles OAuth callback from an external service (likely using Auth0's Magic library)\n* Redirects the user to the root page after successful authentication\n* Displays a loading screen until authentication is complete.", "metadata": {"repo": "magiclabs/magic-near-guide", "file": "src/components/Callback.js", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** `magiclabs/magic-near-guide`\n\n**Purpose:** A guide on how to deploy the Magic Platform using Near Protocol.\n\n**Content:** Documentation, code samples, and examples showcasing how to integrate Magic with Near contracts.", "file_summary": "Here is a concise summary of the 'src/components/Callback.js' file:\n\n**OAuth Callback Handler**\n\nA React component that manages OAuth callbacks, displaying a loading screen during authentication and redirecting users to the root page upon successful login."}
{"code": "import React from \"react\";\n\nexport default function Loading() {\n  return (\n    <div className=\"container\">\n      <p>Loading...</p>\n    </div>\n  );\n}\n\n", "explanation": "This block is a reusable React component that displays a simple \"Loading...\" message when rendered, intended for use in a web application as a placeholder or indicator of loading progress.", "metadata": {"repo": "magiclabs/magic-near-guide", "file": "src/components/Loading.js", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** `magiclabs/magic-near-guide`\n\n**Purpose:** A guide on how to deploy the Magic Platform using Near Protocol.\n\n**Content:** Documentation, code samples, and examples showcasing how to integrate Magic with Near contracts.", "file_summary": "Here is a concise summary:\n\n**src/components/Loading.js**\nA simple React component displaying a \"Loading...\" message, serving as a placeholder or progress indicator."}
{"code": "import React, { useCallback, useState } from \"react\";\nimport { useHistory } from \"react-router\";\nimport { magic } from \"../magic\";\nimport google from \"../google.svg\";\n\nexport default function Login() {\n  const [email, setEmail] = useState(\"\");\n  const [phoneNumber, setPhoneNumber] = useState(\"\");\n  const [isLoggingIn, setIsLoggingIn] = useState(false);\n  const history = useHistory();\n\n  /**\n   * Perform login action via Magic's passwordless flow. Upon successuful\n   * completion of the login flow, a user is redirected to the homepage.\n   */\n  const loginWithEmail = useCallback(async () => {\n    setIsLoggingIn(true);\n\n    try {\n      await magic.auth.loginWithEmailOTP({ email });\n      history.push(\"/\");\n    } catch (err) {\n      console.log(err);\n      setIsLoggingIn(false);\n    }\n  }, [email]);\n\n  const loginWithSMS = useCallback(async () => {\n    setIsLoggingIn(true);\n    try {\n      await magic.auth.loginWithSMS({ phoneNumber });\n      history.push(\"/\");\n    } catch (err) {\n      console.log(err);", "explanation": "Here is a concise summary:\n\n**Purpose:** Handles user login functionality via Magic's passwordless flow.\n\n**Functionality:**\n\n* Collects email and phone number input from user.\n* Allows login using either email or phone number.\n* Upon successful login, redirects user to homepage.\n* Displays loading indicator during login process.", "metadata": {"repo": "magiclabs/magic-near-guide", "file": "src/components/Login.js", "chunk_number": 1, "total_chunks": 3}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** `magiclabs/magic-near-guide`\n\n**Purpose:** A guide on how to deploy the Magic Platform using Near Protocol.\n\n**Content:** Documentation, code samples, and examples showcasing how to integrate Magic with Near contracts.", "file_summary": "Here's a concise summary of the file 'src/components/Login.js':\n\n**Purpose:** Handles user login functionality via Magic's passwordless flow or Google OAuth.\n\n**Functionality:** Collects email/phone number input, allows login via either method, displays loading indicator, and redirects to homepage upon successful login."}
{"code": "      setIsLoggingIn(false);\n    }\n  }, [phoneNumber, history]);\n\n  const handleLoginWithGoogle = async (e) => {\n    e.preventDefault();\n    setIsLoggingIn(true);\n    await magic.oauth.loginWithRedirect({\n      provider: \"google\",\n      redirectURI: `${window.location.origin}/callback`\n    });\n  };\n\n  /**\n   * Saves the value of our email input into component state.\n   */\n   const handleEmailInputOnChange = useCallback((event) => {\n    setEmail(event.target.value);\n  }, []);\n\n  const handleSmsInputOnChange = useCallback((event) => {\n    setPhoneNumber(event.target.value);\n  }, []);\n\n  return (\n    <div className=\"container\">\n      <h1>Please sign up or login</h1>\n      <input\n        type=\"email\"\n        name=\"email\"\n        required=\"required\"\n        placeholder=\"Enter your email\"\n        onChange={handleEmailInputOnChange}\n        disabled={isLoggingIn}\n      />\n      <button onClick={loginWithEmail} disabled={isLoggingIn}>Send</button>\n      <div>or</div><br />\n      <img\n        src={google}\n        height={50}", "explanation": "Here is a concise summary:\n\n**Block Purpose:** Handles user login functionality.\n\n**Functionality:**\n\n* Manages state when logging in (isLoggingIn)\n* Redirects user to Google OAuth for login with Google button click\n* Updates email input value on change\n* Enables/disables email input and login button accordingly.", "metadata": {"repo": "magiclabs/magic-near-guide", "file": "src/components/Login.js", "chunk_number": 2, "total_chunks": 3}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** `magiclabs/magic-near-guide`\n\n**Purpose:** A guide on how to deploy the Magic Platform using Near Protocol.\n\n**Content:** Documentation, code samples, and examples showcasing how to integrate Magic with Near contracts.", "file_summary": "Here's a concise summary of the file 'src/components/Login.js':\n\n**Purpose:** Handles user login functionality via Magic's passwordless flow or Google OAuth.\n\n**Functionality:** Collects email/phone number input, allows login via either method, displays loading indicator, and redirects to homepage upon successful login."}
{"code": "        alt=\"login with google\"\n        onClick={handleLoginWithGoogle}\n        disabled={isLoggingIn}\n      />\n      <input\n        type=\"tel\"\n        name=\"phone\"\n        required=\"required\"\n        placeholder=\"+12345678901\"\n        onChange={handleSmsInputOnChange}\n        disabled={isLoggingIn}\n      />\n      <button onClick={loginWithSMS} disabled={isLoggingIn}>\n        Send\n      </button>\n    </div>\n  );\n}\n\n", "explanation": "**Summary:** \n\nThis block is a login form with two options: Google authentication and SMS-based verification. It consists of:\n\n* A Google login button (disabled during login process)\n* An input field for phone number (with placeholder format)\n* A \"Send\" button to initiate SMS verification (disabled during login process)", "metadata": {"repo": "magiclabs/magic-near-guide", "file": "src/components/Login.js", "chunk_number": 3, "total_chunks": 3}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** `magiclabs/magic-near-guide`\n\n**Purpose:** A guide on how to deploy the Magic Platform using Near Protocol.\n\n**Content:** Documentation, code samples, and examples showcasing how to integrate Magic with Near contracts.", "file_summary": "Here's a concise summary of the file 'src/components/Login.js':\n\n**Purpose:** Handles user login functionality via Magic's passwordless flow or Google OAuth.\n\n**Functionality:** Collects email/phone number input, allows login via either method, displays loading indicator, and redirects to homepage upon successful login."}
{"code": "import React, { useEffect, useState, useCallback } from \"react\";\nimport { useHistory } from \"react-router\";\nimport { magic } from \"../magic\";\nimport Loading from \"./Loading\";\nimport * as nearAPI from \"near-api-js\";\n\nlet near = undefined;\n\nexport default function Profile() {\n  const [txHash, setTxHash] = useState(\"\");\n  const [balance, setBalance] = useState(0);\n  const [sendAmount, setSendAmount] = useState(0);\n  const [userMetadata, setUserMetadata] = useState();\n  const [destinationAddress, setDestinationAddress] = useState(\"\");\n  const [sendingTransaction, setSendingTransaction] = useState(false);\n  const history = useHistory();\n  const networkId = \"testnet\"; // testnet, betanet, or mainnet\n\n  useEffect(() => {\n    // Create NEAR instance\n    (async () => {\n      const { connect, keyStores } = nearAPI;\n\n      const config = {\n        networkId,\n        keyStore: new keyStores.BrowserLocalStorageKeyStore(),\n        nodeUrl: `https://rpc.${networkId}.near.org`,", "explanation": "Here is a concise summary of the purpose and functionality of this block:\n\n**Purpose:** A React functional component that displays a user's profile information and allows them to send NEAR tokens.\n\n**Functionality:** The component uses the `useEffect` hook to create a NEAR instance, retrieves the user's metadata and balance, and sets up event listeners for sending transactions. It also provides input fields and buttons to allow users to enter a destination address and amount to send, which can trigger a transaction when submitted.", "metadata": {"repo": "magiclabs/magic-near-guide", "file": "src/components/Profile.js", "chunk_number": 1, "total_chunks": 6}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** `magiclabs/magic-near-guide`\n\n**Purpose:** A guide on how to deploy the Magic Platform using Near Protocol.\n\n**Content:** Documentation, code samples, and examples showcasing how to integrate Magic with Near contracts.", "file_summary": "Here is a concise holistic summary of the file 'src/components/Profile.js':\n\n**Purpose:** A React component that displays user profile information and allows sending NEAR tokens, while establishing Near blockchain connections and user authentication.\n\n**Functionality:** The component sets up Near network connections, fetches user metadata and balance, provides input fields for sending transactions, and signs and sends the transaction upon submission."}
{"code": "        walletUrl: `https://wallet.${networkId}.near.org`,\n        helperUrl: `https://helper.${networkId}.near.org`,\n        explorerUrl: `https://explorer.${networkId}.near.org`,\n      };\n    \n      // connect to NEAR\n      near = await connect(config);\n    })();\n\n    // If user is logged in, retrieve the authenticated user's profile.\n    magic.user.isLoggedIn().then(magicIsLoggedIn => {\n      if (magicIsLoggedIn) {\n        magic.user.getMetadata().then(user => {\n          setUserMetadata(user);\n          fetchBalance(user.publicAddress);\n        });\n      } else {\n        // If no user is logged in, redirect to `/login`\n        history.push(\"/login\");\n      }\n    });\n  }, []);\n\n  const fetchBalance = async (address) => {\n    const account = await near.account(address);\n    account.getAccountBalance().then(bal => setBalance(nearAPI.utils.format.formatNearAmount(bal.total))); \n  }\n\n  const sendTransaction = async () => {\n    if (!sendAmount || !destinationAddress) return;\n    setSendingTransaction(true);", "explanation": "Here is a concise summary of the block's purpose and functionality:\n\n**Purpose:** Set up Near blockchain connections, user authentication, and balance fetching.\n\n**Functionality:**\n\n* Establishes connections to NEAR network, helper, and explorer URLs based on the `networkId`.\n* Connects to the NEAR blockchain using the `connect` function.\n* Checks if a user is logged in using Magic (a user authentication library).\n* If logged in, retrieves the user's profile metadata and balance.\n* Provides functions for fetching balances and sending transactions.", "metadata": {"repo": "magiclabs/magic-near-guide", "file": "src/components/Profile.js", "chunk_number": 2, "total_chunks": 6}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** `magiclabs/magic-near-guide`\n\n**Purpose:** A guide on how to deploy the Magic Platform using Near Protocol.\n\n**Content:** Documentation, code samples, and examples showcasing how to integrate Magic with Near contracts.", "file_summary": "Here is a concise holistic summary of the file 'src/components/Profile.js':\n\n**Purpose:** A React component that displays user profile information and allows sending NEAR tokens, while establishing Near blockchain connections and user authentication.\n\n**Functionality:** The component sets up Near network connections, fetches user metadata and balance, provides input fields for sending transactions, and signs and sends the transaction upon submission."}
{"code": "    setTxHash(false);\n    const publicKeyString = await magic.near.getPublicKey();\n    const publicKey = nearAPI.utils.PublicKey.fromString(publicKeyString);\n\n    // Grabbing the account nonce\n    const provider = new nearAPI.providers.JsonRpcProvider(\n      `https://rpc.${networkId}.near.org`\n    );\n    const accessKey = await provider.query(\n      `access_key/${userMetadata.publicAddress}/${publicKey.toString()}`,\n      \"\"\n    );\n    const nonce = ++accessKey.nonce; // increment current nonce for next transaction\n\n    const actions = [nearAPI.transactions.transfer(nearAPI.utils.format.parseNearAmount(sendAmount))];\n\n    // Near transactions must be sent with the blockhash of a block mined within the last 24 hours\n    const status = await near.connection.provider.status();\n    const blockHash = status.sync_info.latest_block_hash;\n    const serializedBlockHash = nearAPI.utils.serialize.base_decode(blockHash);    \n\n    const transaction = nearAPI.transactions.createTransaction(", "explanation": "Here is a concise summary of the purpose and functionality of this code:\n\n**Purpose:** Generate and prepare a Near blockchain transaction for sending funds.\n\n**Functionality:**\n\n1. Retrieves public key.\n2. Increments account nonce.\n3. Creates transfer action with specified amount.\n4. Gets block hash from the latest block mined within 24 hours.\n5. Prepares transaction to be sent.", "metadata": {"repo": "magiclabs/magic-near-guide", "file": "src/components/Profile.js", "chunk_number": 3, "total_chunks": 6}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** `magiclabs/magic-near-guide`\n\n**Purpose:** A guide on how to deploy the Magic Platform using Near Protocol.\n\n**Content:** Documentation, code samples, and examples showcasing how to integrate Magic with Near contracts.", "file_summary": "Here is a concise holistic summary of the file 'src/components/Profile.js':\n\n**Purpose:** A React component that displays user profile information and allows sending NEAR tokens, while establishing Near blockchain connections and user authentication.\n\n**Functionality:** The component sets up Near network connections, fetches user metadata and balance, provides input fields for sending transactions, and signs and sends the transaction upon submission."}
{"code": "      userMetadata.publicAddress, // sender address\n      publicKey, // sender public key\n      destinationAddress, // receiver\n      nonce, // sender account nonce\n      actions, // transaction instructions\n      serializedBlockHash // hash of a block mined within prev 24 hours\n    );\n\n    const rawTransaction = transaction.encode();\n    const result = await magic.near.signTransaction({rawTransaction, networkID: networkId});\n    const signedTransaction = nearAPI.transactions.SignedTransaction.decode(Buffer.from(result.encodedSignedTransaction));\n    const receipt = await near.connection.provider.sendTransaction(signedTransaction);\n    console.log(receipt);\n    setTxHash(receipt.transaction.hash);\n    fetchBalance(userMetadata.publicAddress);\n    setDestinationAddress(\"\");\n    setSendAmount(\"\");\n    setSendingTransaction(false);\n  }\n\n  /**\n   * Perform logout action via Magic.\n   */\n  const logout = useCallback(() => {\n    magic.user.logout().then(() => {\n      history.push(\"/login\");\n    })\n  }, [history]);\n", "explanation": "Here is a concise summary:\n\n**Purpose:** Sign and send a transaction on the NEAR blockchain.\n\n**Functionality:**\n\n* Create a raw transaction with user metadata, public keys, and instructions.\n* Sign the transaction using Magic's `signTransaction` method.\n* Send the signed transaction to the NEAR network for execution.\n* Display the transaction receipt in the console and update UI state.", "metadata": {"repo": "magiclabs/magic-near-guide", "file": "src/components/Profile.js", "chunk_number": 4, "total_chunks": 6}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** `magiclabs/magic-near-guide`\n\n**Purpose:** A guide on how to deploy the Magic Platform using Near Protocol.\n\n**Content:** Documentation, code samples, and examples showcasing how to integrate Magic with Near contracts.", "file_summary": "Here is a concise holistic summary of the file 'src/components/Profile.js':\n\n**Purpose:** A React component that displays user profile information and allows sending NEAR tokens, while establishing Near blockchain connections and user authentication.\n\n**Functionality:** The component sets up Near network connections, fetches user metadata and balance, provides input fields for sending transactions, and signs and sends the transaction upon submission."}
{"code": "  return userMetadata ? <>\n      <div className=\"container\">\n        <h1>Current user: {userMetadata.email || userMetadata.phoneNumber}</h1>\n        <button onClick={logout}>Logout</button>\n      </div>\n      <div className=\"container\">\n          <h1>Near account id</h1>\n          <div className=\"info\">{userMetadata.publicAddress}</div>\n      </div>\n      <div className=\"container\">\n          <h1>Near Balance</h1>\n          <div className=\"info\">{balance} NEAR</div>\n          <div><a href=\"https://wallet.testnet.near.org\" target=\"_blank\">Get testnet tokens</a></div>\n      </div>\n      <div className=\"container\">\n        <h1>Send Near Transaction</h1>\n        <input\n            type=\"text\"\n            name=\"destination\"\n            className=\"full-width\"\n            required=\"required\"\n            placeholder=\"Destination address\"\n            onChange={(event) => {\n                setDestinationAddress(event.target.value);\n            }}\n        />\n        <input\n            type=\"text\"\n            name=\"amount\"", "explanation": "**Block Purpose:** Display user metadata, Near account information, and allow sending a Near transaction.\n\n**Functionality:**\n\n* Show current user's email or phone number, with a logout button.\n* Display Near account ID and balance.\n* Provide a link to get testnet tokens.\n* Allow users to input destination address and amount for sending a Near transaction.", "metadata": {"repo": "magiclabs/magic-near-guide", "file": "src/components/Profile.js", "chunk_number": 5, "total_chunks": 6}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** `magiclabs/magic-near-guide`\n\n**Purpose:** A guide on how to deploy the Magic Platform using Near Protocol.\n\n**Content:** Documentation, code samples, and examples showcasing how to integrate Magic with Near contracts.", "file_summary": "Here is a concise holistic summary of the file 'src/components/Profile.js':\n\n**Purpose:** A React component that displays user profile information and allows sending NEAR tokens, while establishing Near blockchain connections and user authentication.\n\n**Functionality:** The component sets up Near network connections, fetches user metadata and balance, provides input fields for sending transactions, and signs and sends the transaction upon submission."}
{"code": "            className=\"full-width\"\n            required=\"required\"\n            placeholder=\"Amount in Near\"\n            onChange={(event) => {\n                setSendAmount(event.target.value);\n            }}\n        />\n        <button id=\"btn-send-txn\" onClick={sendTransaction}>\n            Send Transaction\n        </button>\n        {txHash && <div>\n          <a href={`https://explorer.testnet.near.org/transactions/${txHash}`} target=\"_blank\">\n            View in Explorer\n          </a>\n        </div>}\n        {sendingTransaction && <div>Sending transaction...</div>}\n    </div>\n  </> : <Loading />;\n}\n\n", "explanation": "Here is a concise summary:\n\n**Form Block**\n\n* Collects user input for an amount in NEAR cryptocurrency\n* Submits transaction upon button click (Send Transaction)\n* Displays transaction hash link if successful, or sends progress message if still processing.", "metadata": {"repo": "magiclabs/magic-near-guide", "file": "src/components/Profile.js", "chunk_number": 6, "total_chunks": 6}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** `magiclabs/magic-near-guide`\n\n**Purpose:** A guide on how to deploy the Magic Platform using Near Protocol.\n\n**Content:** Documentation, code samples, and examples showcasing how to integrate Magic with Near contracts.", "file_summary": "Here is a concise holistic summary of the file 'src/components/Profile.js':\n\n**Purpose:** A React component that displays user profile information and allows sending NEAR tokens, while establishing Near blockchain connections and user authentication.\n\n**Functionality:** The component sets up Near network connections, fetches user metadata and balance, provides input fields for sending transactions, and signs and sends the transaction upon submission."}
{"code": "<svg width=\"202\" height=\"46\" viewBox=\"0 0 202 46\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<g filter=\"url(#filter0_d)\">\n<rect x=\"3\" y=\"2\" width=\"196\" height=\"40\" rx=\"2\" fill=\"white\"/>\n<path d=\"M32.5328 22.1871C32.5328 21.3677 32.4664 20.7697 32.3225 20.1497H22.9658V23.848H28.458C28.3473 24.7671 27.7493 26.1512 26.4206 27.0813L26.4019 27.2051L29.3603 29.4969L29.5653 29.5174C31.4477 27.7789 32.5328 25.221 32.5328 22.1871Z\" fill=\"#4285F4\"/>\n<path d=\"M22.9657 31.9313C25.6563 31.9313 27.9152 31.0454 29.5651 29.5174L26.4204 27.0813C25.5789 27.6682 24.4494 28.0779 22.9657 28.0779C20.3303 28.0779 18.0936 26.3395 17.2963 23.9366L17.1794 23.9466L14.1032 26.3273L14.063 26.4391C15.7018 29.6945 19.068 31.9313 22.9657 31.9313Z\" fill=\"#34A853\"/>", "explanation": "This block is an SVG (Scalable Vector Graphics) element, which is a graphical representation of an icon or image.\n\nFunctionality: Displays a two-colored icon with rounded corners and smooth paths. \n\nPurpose: To visually represent information in a compact, stylized manner.", "metadata": {"repo": "magiclabs/magic-near-guide", "file": "src/google.svg", "chunk_number": 1, "total_chunks": 15}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** `magiclabs/magic-near-guide`\n\n**Purpose:** A guide on how to deploy the Magic Platform using Near Protocol.\n\n**Content:** Documentation, code samples, and examples showcasing how to integrate Magic with Near contracts.", "file_summary": "Here is a concise summary of the file 'src/google.svg':\n\nThe 'src/google.svg' file is an SVG code snippet that represents a two-colored icon with rounded corners, likely used for visual design purposes in a digital context. It displays a graphical shape or icon with specific dimensions and visual properties, using coordinates and commands defined within its \"d\" attribute."}
{"code": "<path d=\"M17.2963 23.9366C17.0859 23.3165 16.9641 22.6521 16.9641 21.9656C16.9641 21.279 17.0859 20.6147 17.2852 19.9946L17.2796 19.8625L14.1649 17.4436L14.063 17.4921C13.3876 18.843 13 20.36 13 21.9656C13 23.5712 13.3876 25.0881 14.063 26.439L17.2963 23.9366Z\" fill=\"#FBBC05\"/>\n<path d=\"M22.9657 15.8534C24.837 15.8534 26.0992 16.6617 26.819 17.3372L29.6315 14.5911C27.9042 12.9855 25.6563 12 22.9657 12C19.068 12 15.7018 14.2367 14.063 17.4921L17.2852 19.9947C18.0936 17.5918 20.3303 15.8534 22.9657 15.8534Z\" fill=\"#EB4335\"/>", "explanation": "This block appears to be a graphical representation, likely SVG (Scalable Vector Graphics), consisting of two <path> elements with specified shapes and colors (#FBBC05 and #EB4335). It is likely used for visual design purposes.", "metadata": {"repo": "magiclabs/magic-near-guide", "file": "src/google.svg", "chunk_number": 2, "total_chunks": 15}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** `magiclabs/magic-near-guide`\n\n**Purpose:** A guide on how to deploy the Magic Platform using Near Protocol.\n\n**Content:** Documentation, code samples, and examples showcasing how to integrate Magic with Near contracts.", "file_summary": "Here is a concise summary of the file 'src/google.svg':\n\nThe 'src/google.svg' file is an SVG code snippet that represents a two-colored icon with rounded corners, likely used for visual design purposes in a digital context. It displays a graphical shape or icon with specific dimensions and visual properties, using coordinates and commands defined within its \"d\" attribute."}
{"code": "<path d=\"M59.2139 23.4365C59.2139 22.999 59.0589 22.6618 58.749 22.4248C58.4437 22.1878 57.89 21.9486 57.0879 21.707C56.2858 21.4655 55.6478 21.1966 55.1738 20.9004C54.2669 20.3307 53.8135 19.5879 53.8135 18.6719C53.8135 17.8698 54.1393 17.209 54.791 16.6895C55.4473 16.1699 56.2972 15.9102 57.3408 15.9102C58.0335 15.9102 58.651 16.0378 59.1934 16.293C59.7357 16.5482 60.1618 16.9128 60.4717 17.3867C60.7816 17.8561 60.9365 18.3779 60.9365 18.9521H59.2139C59.2139 18.4326 59.0498 18.027 58.7217 17.7354C58.3981 17.4391 57.9333 17.291 57.3271 17.291C56.762 17.291 56.3223 17.4118 56.0078 17.6533C55.6979 17.8949 55.543 18.2321 55.543 18.665C55.543 19.0296 55.7116 19.335 56.0488 19.5811C56.3861 19.8226 56.9421 20.0596 57.7168 20.292C58.4915 20.5199 59.1136 20.7819 59.583 21.0781C60.0524 21.3698 60.3965 21.707 60.6152 22.0898C60.834 22.4681 60.9434 22.9124 60.9434 23.4229C60.9434 24.2523 60.6243 24.9131 59.9863 25.4053C59.3529 25.8929 58.4915 26.1367 57.4023 26.1367C56.6823 26.1367 56.0192 26.0046 55.4131 25.7402C54.8115 25.4714 54.3421 25.1022 54.0049 24.6328C53.6722 24.1634 53.5059 23.6165 53.5059 22.9922H55.2354C55.2354 23.5573 55.4222 23.9948 55.7959 24.3047C56.1696 24.6146 56.7051 24.7695 57.4023 24.7695C58.0039 24.7695 58.4551 24.6488 58.7559 24.4072C59.0612 24.1611 59.2139 23.8376 59.2139 23.4365Z\" fill=\"#757575\"/>", "explanation": "This block appears to be a SVG path element, which is likely used for graphic design or UI elements in a digital context. Its purpose seems to be creating a graphical shape or icon with a specific design aesthetic.", "metadata": {"repo": "magiclabs/magic-near-guide", "file": "src/google.svg", "chunk_number": 3, "total_chunks": 15}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** `magiclabs/magic-near-guide`\n\n**Purpose:** A guide on how to deploy the Magic Platform using Near Protocol.\n\n**Content:** Documentation, code samples, and examples showcasing how to integrate Magic with Near contracts.", "file_summary": "Here is a concise summary of the file 'src/google.svg':\n\nThe 'src/google.svg' file is an SVG code snippet that represents a two-colored icon with rounded corners, likely used for visual design purposes in a digital context. It displays a graphical shape or icon with specific dimensions and visual properties, using coordinates and commands defined within its \"d\" attribute."}
{"code": "<path d=\"M64.4674 26H62.8062V18.6035H64.4674V26ZM62.7037 16.6826C62.7037 16.4274 62.7835 16.2155 62.943 16.0469C63.107 15.8783 63.3395 15.7939 63.6402 15.7939C63.941 15.7939 64.1734 15.8783 64.3375 16.0469C64.5016 16.2155 64.5836 16.4274 64.5836 16.6826C64.5836 16.9333 64.5016 17.1429 64.3375 17.3115C64.1734 17.4756 63.941 17.5576 63.6402 17.5576C63.3395 17.5576 63.107 17.4756 62.943 17.3115C62.7835 17.1429 62.7037 16.9333 62.7037 16.6826Z\" fill=\"#757575\"/>", "explanation": "This block appears to be a graphical path element, specifically a SVG (Scalable Vector Graphics) shape. Its purpose is to draw a rectangular or square shape with rounded corners on a digital canvas.", "metadata": {"repo": "magiclabs/magic-near-guide", "file": "src/google.svg", "chunk_number": 4, "total_chunks": 15}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** `magiclabs/magic-near-guide`\n\n**Purpose:** A guide on how to deploy the Magic Platform using Near Protocol.\n\n**Content:** Documentation, code samples, and examples showcasing how to integrate Magic with Near contracts.", "file_summary": "Here is a concise summary of the file 'src/google.svg':\n\nThe 'src/google.svg' file is an SVG code snippet that represents a two-colored icon with rounded corners, likely used for visual design purposes in a digital context. It displays a graphical shape or icon with specific dimensions and visual properties, using coordinates and commands defined within its \"d\" attribute."}
{"code": "<path d=\"M66.3918 22.2471C66.3918 21.0986 66.6607 20.1826 67.1984 19.499C67.7408 18.8109 68.4585 18.4668 69.3518 18.4668C70.1949 18.4668 70.8579 18.7607 71.341 19.3486L71.4162 18.6035H72.9133V25.7744C72.9133 26.7451 72.6102 27.5107 72.0041 28.0713C71.4025 28.6318 70.5891 28.9121 69.5637 28.9121C69.0214 28.9121 68.4904 28.7982 67.9709 28.5703C67.4559 28.347 67.064 28.0531 66.7951 27.6885L67.5813 26.6904C68.0917 27.2965 68.7206 27.5996 69.468 27.5996C70.0194 27.5996 70.4546 27.4492 70.7736 27.1484C71.0926 26.8522 71.2521 26.4147 71.2521 25.8359V25.3369C70.7736 25.8701 70.1356 26.1367 69.3381 26.1367C68.4722 26.1367 67.7635 25.7926 67.2121 25.1045C66.6652 24.4163 66.3918 23.4639 66.3918 22.2471ZM68.0461 22.3906C68.0461 23.1335 68.1965 23.7191 68.4973 24.1475C68.8026 24.5713 69.2242 24.7832 69.7619 24.7832C70.4318 24.7832 70.9286 24.4961 71.2521 23.9219V20.668C70.9377 20.1074 70.4455 19.8271 69.7756 19.8271C69.2287 19.8271 68.8026 20.0436 68.4973 20.4766C68.1965 20.9095 68.0461 21.5475 68.0461 22.3906Z\" fill=\"#757575\"/>", "explanation": "This block appears to be an SVG path element, which is a graphical code used to draw shapes on the screen. Its purpose is to render a geometric shape (likely an icon) with specific dimensions and visual properties, using the coordinates and commands defined within its \"d\" attribute.", "metadata": {"repo": "magiclabs/magic-near-guide", "file": "src/google.svg", "chunk_number": 5, "total_chunks": 15}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** `magiclabs/magic-near-guide`\n\n**Purpose:** A guide on how to deploy the Magic Platform using Near Protocol.\n\n**Content:** Documentation, code samples, and examples showcasing how to integrate Magic with Near contracts.", "file_summary": "Here is a concise summary of the file 'src/google.svg':\n\nThe 'src/google.svg' file is an SVG code snippet that represents a two-colored icon with rounded corners, likely used for visual design purposes in a digital context. It displays a graphical shape or icon with specific dimensions and visual properties, using coordinates and commands defined within its \"d\" attribute."}
{"code": "<path d=\"M76.5672 18.6035L76.615 19.458C77.1619 18.7972 77.8797 18.4668 78.7684 18.4668C80.3087 18.4668 81.0926 19.3486 81.1199 21.1123V26H79.4588V21.208C79.4588 20.7386 79.3563 20.3923 79.1512 20.1689C78.9507 19.9411 78.6202 19.8271 78.16 19.8271C77.49 19.8271 76.991 20.1302 76.6629 20.7363V26H75.0018V18.6035H76.5672Z\" fill=\"#757575\"/>\n<path d=\"M88.8721 26H87.2109V18.6035H88.8721V26ZM87.1084 16.6826C87.1084 16.4274 87.1882 16.2155 87.3477 16.0469C87.5117 15.8783 87.7441 15.7939 88.0449 15.7939C88.3457 15.7939 88.5781 15.8783 88.7422 16.0469C88.9062 16.2155 88.9883 16.4274 88.9883 16.6826C88.9883 16.9333 88.9062 17.1429 88.7422 17.3115C88.5781 17.4756 88.3457 17.5576 88.0449 17.5576C87.7441 17.5576 87.5117 17.4756 87.3477 17.3115C87.1882 17.1429 87.1084 16.9333 87.1084 16.6826Z\" fill=\"#757575\"/>", "explanation": "This block is a pair of SVG paths used to draw a rectangle shape with rounded corners, likely for design or UI purposes.", "metadata": {"repo": "magiclabs/magic-near-guide", "file": "src/google.svg", "chunk_number": 6, "total_chunks": 15}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** `magiclabs/magic-near-guide`\n\n**Purpose:** A guide on how to deploy the Magic Platform using Near Protocol.\n\n**Content:** Documentation, code samples, and examples showcasing how to integrate Magic with Near contracts.", "file_summary": "Here is a concise summary of the file 'src/google.svg':\n\nThe 'src/google.svg' file is an SVG code snippet that represents a two-colored icon with rounded corners, likely used for visual design purposes in a digital context. It displays a graphical shape or icon with specific dimensions and visual properties, using coordinates and commands defined within its \"d\" attribute."}
{"code": "<path d=\"M92.6285 18.6035L92.6764 19.458C93.2232 18.7972 93.941 18.4668 94.8297 18.4668C96.3701 18.4668 97.1539 19.3486 97.1813 21.1123V26H95.5201V21.208C95.5201 20.7386 95.4176 20.3923 95.2125 20.1689C95.012 19.9411 94.6816 19.8271 94.2213 19.8271C93.5514 19.8271 93.0523 20.1302 92.7242 20.7363V26H91.0631V18.6035H92.6285Z\" fill=\"#757575\"/>\n<path d=\"M109.664 23.71L110.84 18.6035H112.46L110.443 26H109.076L107.49 20.9209L105.931 26H104.564L102.541 18.6035H104.161L105.357 23.6553L106.875 18.6035H108.126L109.664 23.71Z\" fill=\"#757575\"/>", "explanation": "This block appears to be SVG code, representing a pair of connected shapes (likely icons) with two distinct paths defined by their d attributes. The functionality is likely decorative or illustrative.", "metadata": {"repo": "magiclabs/magic-near-guide", "file": "src/google.svg", "chunk_number": 7, "total_chunks": 15}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** `magiclabs/magic-near-guide`\n\n**Purpose:** A guide on how to deploy the Magic Platform using Near Protocol.\n\n**Content:** Documentation, code samples, and examples showcasing how to integrate Magic with Near contracts.", "file_summary": "Here is a concise summary of the file 'src/google.svg':\n\nThe 'src/google.svg' file is an SVG code snippet that represents a two-colored icon with rounded corners, likely used for visual design purposes in a digital context. It displays a graphical shape or icon with specific dimensions and visual properties, using coordinates and commands defined within its \"d\" attribute."}
{"code": "<path d=\"M115.738 26H114.077V18.6035H115.738V26ZM113.974 16.6826C113.974 16.4274 114.054 16.2155 114.213 16.0469C114.377 15.8783 114.61 15.7939 114.911 15.7939C115.211 15.7939 115.444 15.8783 115.608 16.0469C115.772 16.2155 115.854 16.4274 115.854 16.6826C115.854 16.9333 115.772 17.1429 115.608 17.3115C115.444 17.4756 115.211 17.5576 114.911 17.5576C114.61 17.5576 114.377 17.4756 114.213 17.3115C114.054 17.1429 113.974 16.9333 113.974 16.6826Z\" fill=\"#757575\"/>\n<path d=\"M120.034 16.8057V18.6035H121.34V19.834H120.034V23.9629C120.034 24.2454 120.089 24.4505 120.198 24.5781C120.312 24.7012 120.513 24.7627 120.8 24.7627C120.991 24.7627 121.185 24.7399 121.381 24.6943V25.9795C121.003 26.0843 120.638 26.1367 120.287 26.1367C119.011 26.1367 118.373 25.4326 118.373 24.0244V19.834H117.156V18.6035H118.373V16.8057H120.034Z\" fill=\"#757575\"/>", "explanation": "This block appears to be a graphical element (SVG path) that displays a rectangular shape with rounded corners, used for visual representation or design purposes.", "metadata": {"repo": "magiclabs/magic-near-guide", "file": "src/google.svg", "chunk_number": 8, "total_chunks": 15}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** `magiclabs/magic-near-guide`\n\n**Purpose:** A guide on how to deploy the Magic Platform using Near Protocol.\n\n**Content:** Documentation, code samples, and examples showcasing how to integrate Magic with Near contracts.", "file_summary": "Here is a concise summary of the file 'src/google.svg':\n\nThe 'src/google.svg' file is an SVG code snippet that represents a two-colored icon with rounded corners, likely used for visual design purposes in a digital context. It displays a graphical shape or icon with specific dimensions and visual properties, using coordinates and commands defined within its \"d\" attribute."}
{"code": "<path d=\"M124.652 19.4102C125.194 18.7812 125.88 18.4668 126.71 18.4668C128.286 18.4668 129.086 19.3669 129.109 21.167V26H127.448V21.2285C127.448 20.7181 127.336 20.3581 127.113 20.1484C126.894 19.9342 126.571 19.8271 126.142 19.8271C125.477 19.8271 124.98 20.1234 124.652 20.7158V26H122.991V15.5H124.652V19.4102Z\" fill=\"#757575\"/>", "explanation": "This block is a SVG path element that defines a graphical shape, likely an icon or button, with a specific design and layout.", "metadata": {"repo": "magiclabs/magic-near-guide", "file": "src/google.svg", "chunk_number": 9, "total_chunks": 15}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** `magiclabs/magic-near-guide`\n\n**Purpose:** A guide on how to deploy the Magic Platform using Near Protocol.\n\n**Content:** Documentation, code samples, and examples showcasing how to integrate Magic with Near contracts.", "file_summary": "Here is a concise summary of the file 'src/google.svg':\n\nThe 'src/google.svg' file is an SVG code snippet that represents a two-colored icon with rounded corners, likely used for visual design purposes in a digital context. It displays a graphical shape or icon with specific dimensions and visual properties, using coordinates and commands defined within its \"d\" attribute."}
{"code": "<path d=\"M142.87 24.708C142.51 25.1774 142.011 25.5329 141.373 25.7744C140.735 26.016 140.01 26.1367 139.199 26.1367C138.365 26.1367 137.627 25.9476 136.984 25.5693C136.342 25.1911 135.845 24.651 135.494 23.9492C135.148 23.2428 134.968 22.4202 134.954 21.4814V20.7021C134.954 19.1982 135.314 18.0247 136.034 17.1816C136.754 16.334 137.759 15.9102 139.049 15.9102C140.156 15.9102 141.036 16.1836 141.687 16.7305C142.339 17.2773 142.731 18.0658 142.863 19.0957H141.168C140.976 17.8971 140.281 17.2979 139.083 17.2979C138.308 17.2979 137.718 17.5781 137.312 18.1387C136.911 18.6947 136.704 19.5127 136.69 20.5928V21.3584C136.69 22.4339 136.916 23.2702 137.367 23.8672C137.823 24.4596 138.454 24.7559 139.261 24.7559C140.145 24.7559 140.774 24.5553 141.147 24.1543V22.2061H139.096V20.8936H142.87V24.708Z\" fill=\"#757575\"/>", "explanation": "This block is a graphical SVG path that defines a specific shape, likely for use in design or interface contexts. Its purpose is to display a visual representation of this shape.", "metadata": {"repo": "magiclabs/magic-near-guide", "file": "src/google.svg", "chunk_number": 10, "total_chunks": 15}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** `magiclabs/magic-near-guide`\n\n**Purpose:** A guide on how to deploy the Magic Platform using Near Protocol.\n\n**Content:** Documentation, code samples, and examples showcasing how to integrate Magic with Near contracts.", "file_summary": "Here is a concise summary of the file 'src/google.svg':\n\nThe 'src/google.svg' file is an SVG code snippet that represents a two-colored icon with rounded corners, likely used for visual design purposes in a digital context. It displays a graphical shape or icon with specific dimensions and visual properties, using coordinates and commands defined within its \"d\" attribute."}
{"code": "<path d=\"M144.699 22.2334C144.699 21.5088 144.842 20.8571 145.129 20.2783C145.416 19.695 145.82 19.2484 146.339 18.9385C146.859 18.624 147.456 18.4668 148.13 18.4668C149.128 18.4668 149.937 18.7881 150.557 19.4307C151.181 20.0732 151.519 20.9255 151.569 21.9873L151.576 22.377C151.576 23.1061 151.434 23.7578 151.152 24.332C150.874 24.9062 150.473 25.3506 149.949 25.665C149.429 25.9795 148.828 26.1367 148.144 26.1367C147.1 26.1367 146.264 25.7904 145.635 25.0977C145.011 24.4004 144.699 23.473 144.699 22.3154V22.2334ZM146.36 22.377C146.36 23.138 146.517 23.735 146.831 24.168C147.146 24.5964 147.583 24.8105 148.144 24.8105C148.704 24.8105 149.14 24.5918 149.45 24.1543C149.764 23.7168 149.921 23.0765 149.921 22.2334C149.921 21.486 149.76 20.8936 149.436 20.4561C149.117 20.0186 148.682 19.7998 148.13 19.7998C147.588 19.7998 147.157 20.0163 146.838 20.4492C146.519 20.8776 146.36 21.5202 146.36 22.377Z\" fill=\"#757575\"/>", "explanation": "This block appears to be an SVG path element, defining a complex polygon shape with various points and control points. The purpose is likely graphical or visual representation, possibly as a decorative icon or symbol.", "metadata": {"repo": "magiclabs/magic-near-guide", "file": "src/google.svg", "chunk_number": 11, "total_chunks": 15}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** `magiclabs/magic-near-guide`\n\n**Purpose:** A guide on how to deploy the Magic Platform using Near Protocol.\n\n**Content:** Documentation, code samples, and examples showcasing how to integrate Magic with Near contracts.", "file_summary": "Here is a concise summary of the file 'src/google.svg':\n\nThe 'src/google.svg' file is an SVG code snippet that represents a two-colored icon with rounded corners, likely used for visual design purposes in a digital context. It displays a graphical shape or icon with specific dimensions and visual properties, using coordinates and commands defined within its \"d\" attribute."}
{"code": "<path d=\"M153.069 22.2334C153.069 21.5088 153.213 20.8571 153.5 20.2783C153.787 19.695 154.19 19.2484 154.71 18.9385C155.229 18.624 155.826 18.4668 156.501 18.4668C157.499 18.4668 158.308 18.7881 158.928 19.4307C159.552 20.0732 159.889 20.9255 159.939 21.9873L159.946 22.377C159.946 23.1061 159.805 23.7578 159.522 24.332C159.244 24.9062 158.843 25.3506 158.319 25.665C157.8 25.9795 157.198 26.1367 156.515 26.1367C155.471 26.1367 154.635 25.7904 154.006 25.0977C153.382 24.4004 153.069 23.473 153.069 22.3154V22.2334ZM154.73 22.377C154.73 23.138 154.888 23.735 155.202 24.168C155.517 24.5964 155.954 24.8105 156.515 24.8105C157.075 24.8105 157.51 24.5918 157.82 24.1543C158.135 23.7168 158.292 23.0765 158.292 22.2334C158.292 21.486 158.13 20.8936 157.807 20.4561C157.488 20.0186 157.052 19.7998 156.501 19.7998C155.959 19.7998 155.528 20.0163 155.209 20.4492C154.89 20.8776 154.73 21.5202 154.73 22.377Z\" fill=\"#757575\"/>", "explanation": "This block is a graphical SVG path element that defines a complex shape, likely for decorative or illustrative purposes, with a fill color of #757575 (a dark gray).", "metadata": {"repo": "magiclabs/magic-near-guide", "file": "src/google.svg", "chunk_number": 12, "total_chunks": 15}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** `magiclabs/magic-near-guide`\n\n**Purpose:** A guide on how to deploy the Magic Platform using Near Protocol.\n\n**Content:** Documentation, code samples, and examples showcasing how to integrate Magic with Near contracts.", "file_summary": "Here is a concise summary of the file 'src/google.svg':\n\nThe 'src/google.svg' file is an SVG code snippet that represents a two-colored icon with rounded corners, likely used for visual design purposes in a digital context. It displays a graphical shape or icon with specific dimensions and visual properties, using coordinates and commands defined within its \"d\" attribute."}
{"code": "<path d=\"M161.461 22.2471C161.461 21.0986 161.729 20.1826 162.267 19.499C162.81 18.8109 163.527 18.4668 164.421 18.4668C165.264 18.4668 165.927 18.7607 166.41 19.3486L166.485 18.6035H167.982V25.7744C167.982 26.7451 167.679 27.5107 167.073 28.0713C166.471 28.6318 165.658 28.9121 164.632 28.9121C164.09 28.9121 163.559 28.7982 163.04 28.5703C162.525 28.347 162.133 28.0531 161.864 27.6885L162.65 26.6904C163.16 27.2965 163.789 27.5996 164.537 27.5996C165.088 27.5996 165.523 27.4492 165.842 27.1484C166.161 26.8522 166.321 26.4147 166.321 25.8359V25.3369C165.842 25.8701 165.204 26.1367 164.407 26.1367C163.541 26.1367 162.832 25.7926 162.281 25.1045C161.734 24.4163 161.461 23.4639 161.461 22.2471ZM163.115 22.3906C163.115 23.1335 163.265 23.7191 163.566 24.1475C163.871 24.5713 164.293 24.7832 164.831 24.7832C165.501 24.7832 165.997 24.4961 166.321 23.9219V20.668C166.006 20.1074 165.514 19.8271 164.844 19.8271C164.297 19.8271 163.871 20.0436 163.566 20.4766C163.265 20.9095 163.115 21.5475 163.115 22.3906Z\" fill=\"#757575\"/>", "explanation": "This block is a SVG path element, which defines a graphical shape (likely an icon) with specific coordinates and curves. Its purpose is to render a visual representation in a web or graphic context.", "metadata": {"repo": "magiclabs/magic-near-guide", "file": "src/google.svg", "chunk_number": 13, "total_chunks": 15}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** `magiclabs/magic-near-guide`\n\n**Purpose:** A guide on how to deploy the Magic Platform using Near Protocol.\n\n**Content:** Documentation, code samples, and examples showcasing how to integrate Magic with Near contracts.", "file_summary": "Here is a concise summary of the file 'src/google.svg':\n\nThe 'src/google.svg' file is an SVG code snippet that represents a two-colored icon with rounded corners, likely used for visual design purposes in a digital context. It displays a graphical shape or icon with specific dimensions and visual properties, using coordinates and commands defined within its \"d\" attribute."}
{"code": "<path d=\"M171.862 26H170.2V15.5H171.862V26Z\" fill=\"#757575\"/>\n<path d=\"M177.334 26.1367C176.281 26.1367 175.427 25.8063 174.77 25.1455C174.119 24.4801 173.793 23.596 173.793 22.4932V22.2881C173.793 21.5498 173.934 20.8913 174.217 20.3125C174.504 19.7292 174.905 19.2757 175.42 18.9521C175.935 18.6286 176.509 18.4668 177.142 18.4668C178.15 18.4668 178.927 18.7881 179.473 19.4307C180.025 20.0732 180.301 20.9824 180.301 22.1582V22.8281H175.468C175.518 23.4388 175.721 23.9219 176.076 24.2773C176.436 24.6328 176.887 24.8105 177.429 24.8105C178.191 24.8105 178.81 24.5029 179.289 23.8877L180.184 24.7422C179.888 25.1842 179.492 25.5283 178.995 25.7744C178.503 26.016 177.949 26.1367 177.334 26.1367ZM177.136 19.7998C176.68 19.7998 176.311 19.9593 176.028 20.2783C175.75 20.5973 175.572 21.0417 175.495 21.6113H178.66V21.4883C178.623 20.9323 178.475 20.513 178.216 20.2305C177.956 19.9434 177.596 19.7998 177.136 19.7998Z\" fill=\"#757575\"/>\n</g>\n<defs>", "explanation": "This block is a SVG (Scalable Vector Graphics) code snippet that defines a graphical icon or shape. The purpose of this block is to render an icon with a specific design, likely for use in a UI context.", "metadata": {"repo": "magiclabs/magic-near-guide", "file": "src/google.svg", "chunk_number": 14, "total_chunks": 15}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** `magiclabs/magic-near-guide`\n\n**Purpose:** A guide on how to deploy the Magic Platform using Near Protocol.\n\n**Content:** Documentation, code samples, and examples showcasing how to integrate Magic with Near contracts.", "file_summary": "Here is a concise summary of the file 'src/google.svg':\n\nThe 'src/google.svg' file is an SVG code snippet that represents a two-colored icon with rounded corners, likely used for visual design purposes in a digital context. It displays a graphical shape or icon with specific dimensions and visual properties, using coordinates and commands defined within its \"d\" attribute."}
{"code": "<filter id=\"filter0_d\" x=\"0\" y=\"0\" width=\"202\" height=\"46\" filterUnits=\"userSpaceOnUse\" color-interpolation-filters=\"sRGB\">\n<feFlood flood-opacity=\"0\" result=\"BackgroundImageFix\"/>\n<feColorMatrix in=\"SourceAlpha\" type=\"matrix\" values=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\"/>\n<feOffset dy=\"1\"/>\n<feGaussianBlur stdDeviation=\"1.5\"/>\n<feColorMatrix type=\"matrix\" values=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.35 0\"/>\n<feBlend mode=\"normal\" in2=\"BackgroundImageFix\" result=\"effect1_dropShadow\"/>\n<feBlend mode=\"normal\" in=\"SourceGraphic\" in2=\"effect1_dropShadow\" result=\"shape\"/>\n</filter>\n</defs>\n</svg>\n", "explanation": "This SVG block defines a filter with multiple effects:\n\n* Creates a background image\n* Adds a drop shadow effect\n* Blurs the edges of an element\n* Combines these effects to produce a final output.", "metadata": {"repo": "magiclabs/magic-near-guide", "file": "src/google.svg", "chunk_number": 15, "total_chunks": 15}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** `magiclabs/magic-near-guide`\n\n**Purpose:** A guide on how to deploy the Magic Platform using Near Protocol.\n\n**Content:** Documentation, code samples, and examples showcasing how to integrate Magic with Near contracts.", "file_summary": "Here is a concise summary of the file 'src/google.svg':\n\nThe 'src/google.svg' file is an SVG code snippet that represents a two-colored icon with rounded corners, likely used for visual design purposes in a digital context. It displays a graphical shape or icon with specific dimensions and visual properties, using coordinates and commands defined within its \"d\" attribute."}
{"code": "import React from \"react\";\nimport { render } from \"react-dom\";\nimport App from \"./components/App\";\n\nimport \"./styles.css\";\n\nrender(<App />, document.getElementById(\"root\"));\n", "explanation": "**Summary:**\n\nThis block of code renders a React application on a web page by importing necessary modules, defining a root element in the HTML file, and rendering the `App` component within it.", "metadata": {"repo": "magiclabs/magic-near-guide", "file": "src/index.js", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** `magiclabs/magic-near-guide`\n\n**Purpose:** A guide on how to deploy the Magic Platform using Near Protocol.\n\n**Content:** Documentation, code samples, and examples showcasing how to integrate Magic with Near contracts.", "file_summary": "Here is a concise summary:\n\n\"The `src/index.js` file bootstraps a React app by importing dependencies, defining an HTML container, and rendering the `App` component.\""}
{"code": "import { Magic } from 'magic-sdk';\nimport { NearExtension } from \"@magic-ext/near\";\nimport { OAuthExtension } from '@magic-ext/oauth';\n\nexport const magic = new Magic(process.env.REACT_APP_MAGIC_PUBLISHABLE_KEY, {\n  extensions: [\n      new NearExtension({ \n        rpcUrl: '' \n      }),\n      new OAuthExtension()\n  ]}\n);\n", "explanation": "Here is a concise summary:\n\n**Purpose:** Initialize the Magic SDK with authentication extensions.\n\n**Functionality:** Create an instance of the Magic SDK, enabling authentication through near and OAuth protocols.", "metadata": {"repo": "magiclabs/magic-near-guide", "file": "src/magic.js", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** `magiclabs/magic-near-guide`\n\n**Purpose:** A guide on how to deploy the Magic Platform using Near Protocol.\n\n**Content:** Documentation, code samples, and examples showcasing how to integrate Magic with Near contracts.", "file_summary": "Here is a concise holistic summary of the file 'src/magic.js':\n\nThe `src/magic.js` file initializes the Magic SDK, enabling authentication through near and OAuth extensions."}
{"code": ".App {\n  align-self: center;\n  justify-self: center;\n}\n\n#root {\n  font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto,\n  Oxygen-Sans, Ubuntu, Cantarell, \"Helvetica Neue\", sans-serif;\n  height: 100vh;\n  display: grid;\n  font-size: 18px;\n}\n\n.container {\n  width: 300px;\n  background-color: #eee;\n  text-align: center;\n  padding: 27px 18px;\n  margin-bottom: 27px;\n}\n\nh1 {\n  margin: 0;\n  padding-bottom: 18px;\n  font-size: 18px;\n}\n\n.info {\n  max-width: 21ch;\n  margin: 0 auto;\n  margin-bottom: 18px;\n  background-color: #ddd;\n  padding: 12px 24px;\n  word-wrap: break-word;\n  font-family: \"Lucida Console\", Monaco, monospace;\n  font-size: 15px;\n}\n\n.info a {\n  color: black;\n}\n\ninput,\nbutton {\n  padding: 9px;\n  font-size: 18px;\n  margin-bottom: 9px;\n}\n\ninput.full-width {\n  display: block;\n  margin: 0 auto;\n  margin-bottom: 9px;\n  text-align: center;\n}\n", "explanation": "Here is a concise summary:\n\nThis block defines CSS styles for various HTML elements, including typography, layout, colors, and spacing, used to create a visually consistent UI.", "metadata": {"repo": "magiclabs/magic-near-guide", "file": "src/styles.css", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** `magiclabs/magic-near-guide`\n\n**Purpose:** A guide on how to deploy the Magic Platform using Near Protocol.\n\n**Content:** Documentation, code samples, and examples showcasing how to integrate Magic with Near contracts.", "file_summary": "Here is a concise and to the point summary of the file 'src/styles.css':\n\nDefines global CSS styles for typography, layout, colors, and spacing to maintain visual consistency across the UI."}

{"code": "# Terraform Module for Tenable.io's Nessus Scanner on AWS\n\nThis module will set up the latest release of [Tenable.io's preauthorized Nessus scanner from the AWS marketplace](https://aws.amazon.com/marketplace/pp/B01LXCD58S?qid=1532453752682). It will also update your machine if you run it again after the release of a newer version of the AMI.\n\nTerraform modules don't always have the options you need out of the box, and I threw this together pretty quickly for use in my environment. However, as long as you can specify a VPC and a subnet, you should be able to use it.\n\n## Versioning\n\nThis module supports Terraform 0.13 or later. See the branches list for older versions of Terraform.\n\nTo pin a version of this module, [use a ref link](https://www.terraform.io/docs/modules/sources.html#selecting-a-revision) to pin a commit or tag. Tags are the date of a release, nothing fancy.\n\n# Usage\n", "explanation": "Here is a concise summary:\n\n**Purpose:** Terraform module for setting up Tenable.io's Nessus scanner on AWS.\n**Functionality:** Installs latest Nessus scanner AMI from AWS marketplace, updates if newer version available; requires VPC and subnet specifications.", "metadata": {"repo": "magiclabs/terraform-tenable-nessus-scanner-aws", "file": "README.md", "chunk_number": 1, "total_chunks": 3}, "repository_explanation": "This repository provides a Terraform module for deploying a Nessus scanner on AWS, utilizing Tenable's Magic Labs product. Its purpose is to automate the setup of this security scanning environment in the cloud.", "file_summary": "Here is a holistic summary of the file 'README.md':\n\n**Terraform Module:** Sets up Tenable.io's Nessus scanner on AWS by installing the latest Nessus scanner AMI from the AWS marketplace, deploying a security group with ID output for further access configuration, and assigning tags for organization and project identification."}
{"code": "In tenable.io's web UI, grab your linking key from [the **Scans > Scanners** page](https://cloud.tenable.com/app.html#/scans/scanners)\n\n### Inputs\n\nAdd this module to your terraform project's source code and provide the following:\n  - Tenable Linking Key\n  - VPC ID\n  - Subnet ID\n  - (Optional) Instance type, defaults to m5.xlarge\n  - (Optional) Instance name, defaults to nessus-scanner\n  - (Optional) Scanner name (a friendly name to show in the Tenable.io UI), defaults to Instance name.\n  - (Optional) A map of tags to apply to the instance\n  - (Optional) Extra AMI serach filters, defaults to `[]`\n\n### Outputs\n\nThe module creates a security group, and you can access that group's id with the `security_group_id` output. Useful for opening up the AWS firewalls to allow scanning.\n\n#### Example:\n\n```hcl\nmodule \"nessus_scanner\" {\n  source = \"github.com/BuyerQuest/terraform-tenable-nessus-scanner-aws\"\n\n  scanner_name        = \"My AWS Nessus Scanner\"", "explanation": "**Purpose:** Deploys a Tenable.io Nessus scanner on AWS.\n\n**Functionality:** Takes in inputs like linking key, VPC ID, subnet ID, and optional instance settings, then creates a security group with its ID output for further access configuration.", "metadata": {"repo": "magiclabs/terraform-tenable-nessus-scanner-aws", "file": "README.md", "chunk_number": 2, "total_chunks": 3}, "repository_explanation": "This repository provides a Terraform module for deploying a Nessus scanner on AWS, utilizing Tenable's Magic Labs product. Its purpose is to automate the setup of this security scanning environment in the cloud.", "file_summary": "Here is a holistic summary of the file 'README.md':\n\n**Terraform Module:** Sets up Tenable.io's Nessus scanner on AWS by installing the latest Nessus scanner AMI from the AWS marketplace, deploying a security group with ID output for further access configuration, and assigning tags for organization and project identification."}
{"code": "  tenable_linking_key = \"pvwk5qf5bwsuperfakekeypqv3zcovanqnuawebmv23rj9fofsdcul7aaa\"\n  vpc_id              = \"vpc-31896b55\"\n  subnet_id           = \"subnet-4204d234\"\n  instance_type       = \"t3.xlarge\"\n  instance_name       = \"my-nessus-scanner\"\n\n  instance_tags = {\n    Role        = \"security-scanner\"\n    Projects    = \"tenable\"\n  }\n\n  extra_filters = [\n    {\n      name = \"image-id\"\n      values = [\"ami-0e2e293e46c009d6f\"] # Use a specific AMI instead of the latest available image\n    }\n  ]\n}\n```\n", "explanation": "This block defines infrastructure settings for an AWS instance:\n\n* Sets key properties (ID, type, name)\n* Assigns tags for organization and project identification\n* Specifies filters for instance creation (e.g., using a specific AMI)", "metadata": {"repo": "magiclabs/terraform-tenable-nessus-scanner-aws", "file": "README.md", "chunk_number": 3, "total_chunks": 3}, "repository_explanation": "This repository provides a Terraform module for deploying a Nessus scanner on AWS, utilizing Tenable's Magic Labs product. Its purpose is to automate the setup of this security scanning environment in the cloud.", "file_summary": "Here is a holistic summary of the file 'README.md':\n\n**Terraform Module:** Sets up Tenable.io's Nessus scanner on AWS by installing the latest Nessus scanner AMI from the AWS marketplace, deploying a security group with ID output for further access configuration, and assigning tags for organization and project identification."}
{"code": "## Nessus IAM role ##\n\nresource \"aws_iam_role\" \"nessus-server-role\" {\n  name               = \"${local.instance_tags[\"Name\"]}-role\"\n  assume_role_policy = data.aws_iam_policy_document.nessus-instance-assume-role-policy.json\n}\n\n# Role assumption policy\ndata \"aws_iam_policy_document\" \"nessus-instance-assume-role-policy\" {\n  statement {\n    actions = [\"sts:AssumeRole\"]\n\n    principals {\n      type        = \"Service\"\n      identifiers = [\"ec2.amazonaws.com\"]\n    }\n  }\n}\n\n## Role policy/permissions ##\n\n# Attach canned ec2 read-only policy to the IAM role\nresource \"aws_iam_role_policy_attachment\" \"nessus-ec2-read-only\" {\n  role       = aws_iam_role.nessus-server-role.name\n  policy_arn = \"arn:aws:iam::aws:policy/AmazonEC2ReadOnlyAccess\"\n}\n\n## Instance Profile ##\n\n# Assign the role to the instance profile\nresource \"aws_iam_instance_profile\" \"nessus-server-profile\" {\n  name = \"${local.instance_tags[\"Name\"]}-profile\"\n  role = aws_iam_role.nessus-server-role.name\n}\n", "explanation": "**Purpose:** Create an IAM role for a Nessus server.\n\n**Functionality:**\n\n1. Creates an IAM role with a name based on instance tags.\n2. Attaches a canned EC2 read-only policy to the role.\n3. Assigns the role to an instance profile, allowing the instance to assume the role and access AWS resources accordingly.", "metadata": {"repo": "magiclabs/terraform-tenable-nessus-scanner-aws", "file": "iam.tf", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "This repository provides a Terraform module for deploying a Nessus scanner on AWS, utilizing Tenable's Magic Labs product. Its purpose is to automate the setup of this security scanning environment in the cloud.", "file_summary": "Here is a concise and holistic summary of the file 'iam.tf':\n\n**Creates a Nessus server IAM role with read-only EC2 access through an assigned instance profile, enabling resource access based on instance tags.**"}
{"code": "## Provision a Nessus Scanner ##\n\nvariable \"scanner_name\" {\n  description = \"The name of your Nessus scanner as it will appear in the Tenable.io web UI. Defaults to the AWS instance name.\"\n  type        = string\n  default     = null\n}\n\nvariable \"tenable_linking_key\" {\n  description = \"The linking code from tenable.io \u2014 Go to Scans > Scanners in the web UI and find the Linking Key there\"\n  type        = string\n}\n\nvariable \"vpc_id\" {\n  description = \"The VPC with which security groups will be associated\"\n  type        = string\n}\n\nvariable \"subnet_id\" {\n  description = \"Subnet in which the server and related objects will be created\"\n  type        = string\n}\n\nvariable \"instance_type\" {\n  description = \"The type of instance, e.g. m3.large, c3.2xlarge, etc. to be spun up\"\n  type        = string\n  default     = \"m5.xlarge\"\n}\n\nvariable \"instance_name\" {\n  description = \"The name of the instance as it appears in the aws instance list. Overrides any name passed in instance_tags.\"\n  type        = string\n  default     = null\n}\n", "explanation": "This block provides a way to provision a Nessus scanner, a vulnerability scanner from Tenable.io, by defining variables for configuration options such as:\n\n* Scanner name and linking key\n* VPC and subnet ID\n* Instance type and name\n\nThese variables can be used to create an AWS instance running Nessus.", "metadata": {"repo": "magiclabs/terraform-tenable-nessus-scanner-aws", "file": "inputs.tf", "chunk_number": 1, "total_chunks": 2}, "repository_explanation": "This repository provides a Terraform module for deploying a Nessus scanner on AWS, utilizing Tenable's Magic Labs product. Its purpose is to automate the setup of this security scanning environment in the cloud.", "file_summary": "Here's a concise summary of the file 'inputs.tf':\n\nThis block defines Terraform variables for configuring a Nessus scanner instance, including tags, Elastic IP address usage, and filtering options."}
{"code": "variable \"instance_tags\" {\n  description = \"A map of tags to apply to the instance\"\n  type        = map(any)\n  default     = {}\n}\n\nvariable \"use_eip\" {\n  description = \"Whether or not to use an Elastic IP address with the Nessus scanner. Defaults to true because the documentation says it is required.\"\n  type        = bool\n  default     = true\n}\n\nvariable \"extra_filters\" {\n  description = \"Additional filters for the AMI search\"\n  type = list(object({\n    name   = string\n    values = list(string)\n  }))\n  default = []\n}\n\n## Process some inputs into a map of tags, then use those instead\n\nlocals {\n  instance_name = coalesce(\n    var.instance_name,                       # Prefer explicit name input\n    lookup(var.instance_tags, \"Name\", null), # Allow naming with tags\n    \"nessus-scanner\"                         # Default instance name\n  )\n  instance_tags = merge(var.instance_tags, { \"Name\" = local.instance_name }) # The right-most map's value always wins\n}\n", "explanation": "Here is a concise summary:\n\nThis block defines Terraform variables for configuring an instance of a Nessus scanner, including tags, use of an Elastic IP address, and filters. It also processes these inputs into a formatted map of tags using local variables.", "metadata": {"repo": "magiclabs/terraform-tenable-nessus-scanner-aws", "file": "inputs.tf", "chunk_number": 2, "total_chunks": 2}, "repository_explanation": "This repository provides a Terraform module for deploying a Nessus scanner on AWS, utilizing Tenable's Magic Labs product. Its purpose is to automate the setup of this security scanning environment in the cloud.", "file_summary": "Here's a concise summary of the file 'inputs.tf':\n\nThis block defines Terraform variables for configuring a Nessus scanner instance, including tags, Elastic IP address usage, and filtering options."}
{"code": "output \"security_group_id\" {\n  value = aws_security_group.nessus-security-group.id\n}\n", "explanation": "This block outputs the ID of an AWS security group named `nessus-security-group`.", "metadata": {"repo": "magiclabs/terraform-tenable-nessus-scanner-aws", "file": "outputs.tf", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "This repository provides a Terraform module for deploying a Nessus scanner on AWS, utilizing Tenable's Magic Labs product. Its purpose is to automate the setup of this security scanning environment in the cloud.", "file_summary": "Here is a concise summary:\n\n`outputs.tf`: Outputs the ID of an \"nessus-security-group\" AWS security group."}
{"code": "## Create the Nessus Security Groups ##\n\nresource \"aws_security_group\" \"nessus-security-group\" {\n  name        = \"${local.instance_tags[\"Name\"]}-security\"\n  description = \"Security group for the Nessus VM Scanner Server instance (Deny all inbound)\"\n  vpc_id      = var.vpc_id\n}\n\n# The documentation for Tenable on AWS recommends a security group with\n# no entries in it, but mine had a problem without the egress rule.\n\n## Outbound traffic ##\nresource \"aws_security_group_rule\" \"nessus-allow-outbound\" {\n  type        = \"egress\"\n  from_port   = 0\n  to_port     = 0\n  protocol    = \"-1\"\n  cidr_blocks = [\"0.0.0.0/0\"]\n\n  security_group_id = aws_security_group.nessus-security-group.id\n}\n", "explanation": "Here is a concise summary:\n\nThis block creates an AWS Security Group named \"Nessus-security\" with no inbound rules, allowing all outbound traffic (port 0-0, any protocol) from this group to the internet (CIDR block 0.0.0.0/0).", "metadata": {"repo": "magiclabs/terraform-tenable-nessus-scanner-aws", "file": "security.tf", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "This repository provides a Terraform module for deploying a Nessus scanner on AWS, utilizing Tenable's Magic Labs product. Its purpose is to automate the setup of this security scanning environment in the cloud.", "file_summary": "Here is a concise summary of the file 'security.tf':\n\nCreates an AWS Security Group named \"Nessus-security\" with all outbound traffic allowed, but no inbound rules or restrictions."}
{"code": "## Nessus VM Scanner Server Provision ##\n\n# Generate cloud-init\nlocals {\n  user_data_map = {\n    name     = coalesce(var.scanner_name, local.instance_tags[\"Name\"])\n    key      = var.tenable_linking_key\n    iam_role = aws_iam_role.nessus-server-role.name\n    aws_scanner = true\n  }\n}\n\n# Find the latest AMI by product code\ndata \"aws_ami\" \"nessus-image\" {\n  most_recent = true\n  owners      = [\"aws-marketplace\"]\n\n  filter {\n    name   = \"product-code\"\n    values = [\"4m4uvwtrl5t872c56wb131ttw\"]\n  }\n\n  dynamic \"filter\" {\n    for_each = var.extra_filters\n    content {\n      name   = filter.value.name\n      values = filter.value.values\n    }\n  }\n}\n\n# Create the instance\nresource \"aws_instance\" \"nessus-scanner\" {\n  ami                    = data.aws_ami.nessus-image.id\n  vpc_security_group_ids = [aws_security_group.nessus-security-group.id]\n  iam_instance_profile   = aws_iam_instance_profile.nessus-server-profile.name\n  subnet_id              = var.subnet_id\n  user_data              = jsonencode(local.user_data_map)", "explanation": "**Purpose:** Provision a Nessus VM Scanner Server instance on AWS.\n\n**Functionality:**\n\n1. Generate cloud-init configuration with instance details.\n2. Retrieve the latest Nessus AMI from AWS Marketplace.\n3. Create an AWS instance using the retrieved AMI, security group, and IAM profile.", "metadata": {"repo": "magiclabs/terraform-tenable-nessus-scanner-aws", "file": "server.tf", "chunk_number": 1, "total_chunks": 2}, "repository_explanation": "This repository provides a Terraform module for deploying a Nessus scanner on AWS, utilizing Tenable's Magic Labs product. Its purpose is to automate the setup of this security scanning environment in the cloud.", "file_summary": "Here is a concise and holistic summary of the file 'server.tf':\n\n**Summary:**\n\nThis Terraform configuration provisions a Nessus VM Scanner Server on AWS by:\n\n1. Generating cloud-init configuration with instance details.\n2. Launching an EC2 instance using the latest Nessus AMI, security group, and IAM profile.\n3. Associating an Elastic IP (EIP) with the instance for management and identification."}
{"code": "  instance_type          = var.instance_type\n\n  tags = local.instance_tags\n\n  root_block_device {\n    volume_type = \"gp3\"\n    volume_size = \"50\"\n  }\n}\n\nresource \"aws_eip\" \"nessus-scanner-eip\" {\n  count    = var.use_eip ? 1 : 0\n  vpc      = true\n  instance = aws_instance.nessus-scanner.id\n\n  tags = {\n    Name = \"${local.instance_tags[\"Name\"]}_EIP\"\n  }\n}\n", "explanation": "Here is a summary of the block:\n\n**Purpose:** Define an Elastic IP (EIP) for an AWS instance.\n\n**Functionality:** Associate an EIP with an instance, specifying tags for identification and management.", "metadata": {"repo": "magiclabs/terraform-tenable-nessus-scanner-aws", "file": "server.tf", "chunk_number": 2, "total_chunks": 2}, "repository_explanation": "This repository provides a Terraform module for deploying a Nessus scanner on AWS, utilizing Tenable's Magic Labs product. Its purpose is to automate the setup of this security scanning environment in the cloud.", "file_summary": "Here is a concise and holistic summary of the file 'server.tf':\n\n**Summary:**\n\nThis Terraform configuration provisions a Nessus VM Scanner Server on AWS by:\n\n1. Generating cloud-init configuration with instance details.\n2. Launching an EC2 instance using the latest Nessus AMI, security group, and IAM profile.\n3. Associating an Elastic IP (EIP) with the instance for management and identification."}
{"code": "terraform {\n  required_version = \">= 0.13\"\n  required_providers {\n    aws = {\n      source = \"hashicorp/aws\"\n    }\n  }\n}\n", "explanation": "This block is a Terraform configuration that specifies:\n\n* The minimum version of Terraform required to run (0.13)\n* The AWS provider, specifying its source as \"hashicorp/aws\"", "metadata": {"repo": "magiclabs/terraform-tenable-nessus-scanner-aws", "file": "versions.tf", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "This repository provides a Terraform module for deploying a Nessus scanner on AWS, utilizing Tenable's Magic Labs product. Its purpose is to automate the setup of this security scanning environment in the cloud.", "file_summary": "Here is a holistic summary of the file 'versions.tf':\n\nSpecifies the minimum required Terraform version (0.13) and uses the hashicorp/aws provider from the default source."}

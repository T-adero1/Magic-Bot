{"code": "---\nname: Bug Report\nabout: Use this template to report a bug.\ntitle: \"[DESCRIPTIVE BUG NAME]\"\nlabels: \ud83d\udc1b Bug Report, \ud83d\udd0d Needs Triage\n---\n\n### \u2705 Prerequisites\n\n- [ ] Did you perform a cursory search of open issues? Is this bug already reported elsewhere?\n- [ ] Are you running the latest SDK version?\n- [ ] Are you reporting to the correct repository (`magic-admin-ruby`)?\n\n### \ud83d\udc1b Description\n\n[Description of the bug.]\n\n### \ud83e\udde9 Steps to Reproduce\n\n1. [First Step]\n2. [Second Step]\n3. [and so on...]\n\n### \ud83e\udd14 Expected behavior\n\n[What you expected to happen?]\n\n### \ud83d\ude2e Actual behavior\n\n[What actually happened? Please include any error stack traces you encounter.]\n\n### \ud83d\udcbb Code Sample\n\n[If possible, please provide a code repository, gist, code snippet or sample files to reproduce the issue.]\n\n### \ud83c\udf0e Environment\n\n| Software            | Version(s) |\n| ------------------- | ---------- |\n| `magic-admin-ruby`  |            |\n| `ruby`              |            |\n| Operating System    |            |\n", "explanation": "**Purpose:** Template for reporting bugs in a software project.\n\n**Functionality:** A structured format for users to report issues, including prerequisites, description of the bug, steps to reproduce, expected vs actual behavior, code sample (if applicable), and environment details. This template guides users through a thorough bug-reporting process.", "metadata": {"repo": "magiclabs/magic-admin-ruby", "file": ".github/ISSUE_TEMPLATE/bug_report.md", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise description:\n\n**Purpose:** A Ruby library for interacting with Magic Labs APIs.\n\n**Content:** Includes source code and documentation for managing Magic Labs resources (e.g., users, messages) using Ruby programming language.", "file_summary": "Here is a concise summary:\n\n**.github/ISSUE_TEMPLATE/bug_report.md:**\n\nA structured template for reporting bugs in software projects, guiding users through a detailed reporting process with sections on prerequisites, bug description, steps to reproduce, expected vs actual behavior, code sample (if applicable), and environment details."}
{"code": "---\nname: Feature Request\nabout: Use this template to request a new feature.\ntitle: \"[DESCRIPTIVE FEATURE NAME]\"\nlabels: \u2728Feature Request\n---\n\n### \u2705 Prerequisites\n\n- [ ] Did you perform a cursory search of open issues? Is this feature already requested elsewhere?\n- [ ] Are you reporting to the correct repository (`magic-admin-ruby`)?\n\n### \u2728 Feature Request\n\n[Description of the feature.]\n\n## \ud83e\udde9 Context\n\n[Explain any additional context or rationale for this feature. What are you trying to accomplish?]\n\n## \ud83d\udcbb Examples\n\n[Do you have any example(s) for the requested feature? If so, describe/demonstrate your example(s) here.]\n", "explanation": "**Purpose:** A template for submitting a new feature request.\n\n**Functionality:** Provides a structured format for users to propose a new feature, including prerequisites, description, context, and examples.", "metadata": {"repo": "magiclabs/magic-admin-ruby", "file": ".github/ISSUE_TEMPLATE/feature_request.md", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise description:\n\n**Purpose:** A Ruby library for interacting with Magic Labs APIs.\n\n**Content:** Includes source code and documentation for managing Magic Labs resources (e.g., users, messages) using Ruby programming language.", "file_summary": "Here is a concise summary of the file '.github/ISSUE_TEMPLATE/feature_request.md':\n\n\"A template for proposing new features, providing a structured format for submitting ideas with prerequisites, description, context, and examples.\""}
{"code": "---\nname: Question\nabout: Use this template to request help or ask a question.\ntitle: \"[WHAT'S YOUR QUESTION?]\"\nlabels: \u2753Question\n---\n\n### \u2705 Prerequisites\n\n- [ ] Did you perform a cursory search of open issues? Is this question already asked elsewhere?\n- [ ] Are you reporting to the correct repository (`magic-admin-ruby`)?\n\n### \u2753 Question\n\n[Ask your question here, please be as detailed as possible!]\n\n### \ud83c\udf0e Environment\n\n| Software            | Version(s) |\n| ------------------- | ---------- |\n| `magic-admin-ruby`  |            |\n| `ruby`              |            |\n| Operating System    |            |\n", "explanation": "Here is a concise summary of the purpose and functionality of this block:\n\n**Template for requesting help or asking a question**\n\nThis template guides users through a process to ensure their question is valid before submitting it, including searching existing issues and confirming they are in the correct repository. It also provides a structured format for users to ask their question and specify their environment details.", "metadata": {"repo": "magiclabs/magic-admin-ruby", "file": ".github/ISSUE_TEMPLATE/question.md", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise description:\n\n**Purpose:** A Ruby library for interacting with Magic Labs APIs.\n\n**Content:** Includes source code and documentation for managing Magic Labs resources (e.g., users, messages) using Ruby programming language.", "file_summary": "Here is a holistic summary of the file '.github/ISSUE_TEMPLATE/question.md':\n\n**Template for Validating and Submitting Questions**\n\nA guided template that helps users ensure their question is valid before submitting it, by searching existing issues and confirming repository accuracy, with a structured format to provide necessary details."}
{"code": "### \ud83d\udce6 Pull Request\n\n[Provide a general summary of the pull request here.]\n\n### \ud83d\udddc Versioning\n\n(Check _one!_)\n\n- [ ] Patch: Bug Fix?\n- [ ] Minor: New Feature?\n- [ ] Major: Breaking Change?\n\n### \u2705 Fixed Issues\n\n- [List any fixed issues here like: Fixes #XXXX]\n\n### \ud83d\udea8 Test instructions\n\n[Describe any additional context required to test the PR/feature/bug fix.]\n\n### \u26a0\ufe0f Update `CHANGELOG.md`\n\n- [ ] I have updated the `Upcoming Changes` section of `CHANGELOG.md` with context related to this Pull Request.\n", "explanation": "Here is a summary of the purpose and functionality of this block:\n\n**Pull Request Template**\n\nA template for submitting pull requests, outlining necessary information such as versioning, fixed issues, testing instructions, and changelog updates.", "metadata": {"repo": "magiclabs/magic-admin-ruby", "file": ".github/PULL_REQUEST_TEMPLATE.md", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise description:\n\n**Purpose:** A Ruby library for interacting with Magic Labs APIs.\n\n**Content:** Includes source code and documentation for managing Magic Labs resources (e.g., users, messages) using Ruby programming language.", "file_summary": "Here's a concise holistic summary of the file '.github/PULL_REQUEST_TEMPLATE.md':\n\n\"A standardized template for submitting pull requests that ensures contributors provide essential details, streamlining the review process.\""}
{"code": "--default-path test\n--require spec_helper\n--pattern '**{,/*/**}/*_test.rb'\n--color\n\n\n", "explanation": "This block is a set of command-line arguments for a Ruby testing framework (likely RSpec), specifying:\n\n* A default file path for tests\n* Required file inclusion (`spec_helper`)\n* Test pattern matching (`**{,/*/**}/*_test.rb`)\n* Colorized output", "metadata": {"repo": "magiclabs/magic-admin-ruby", "file": ".rspec", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise description:\n\n**Purpose:** A Ruby library for interacting with Magic Labs APIs.\n\n**Content:** Includes source code and documentation for managing Magic Labs resources (e.g., users, messages) using Ruby programming language.", "file_summary": "Here is a concise and holistic summary of the '.rspec' file:\n\n\"Configures RSpec with default test path, required spec helper inclusion, test pattern matching, and colorized output.\""}
{"code": "Layout/CaseIndentation:\n  EnforcedStyle: end\n\nLayout/FirstArrayElementIndentation:\n  EnforcedStyle: consistent\n\nLayout/FirstHashElementIndentation:\n  EnforcedStyle: consistent\n\nMetrics/MethodLength:\n  Max: 15\n\nMetrics/ModuleLength:\n  Enabled: false\n\nStyle/FrozenStringLiteralComment:\n  EnforcedStyle: always\n\nStyle/HashEachMethods:\n  Enabled: true\n\nStyle/HashTransformKeys:\n  Enabled: true\n\nStyle/HashTransformValues:\n  Enabled: true\n\nStyle/NumericPredicate:\n  Enabled: false\n\nStyle/StringLiterals:\n  EnforcedStyle: double_quotes\n\nMetrics/BlockLength:\n  Exclude:\n    - \"test/**/*.rb\"\n\nNaming/FileName:\n  Exclude:\n    - \"lib/magic-admin.rb\"\n\nStyle/Documentation:\n  Exclude:\n    - \"lib/magic-admin/config.rb\"\n    - \"lib/magic-admin/util.rb\"\n", "explanation": "This block is a configuration file for RuboCop, a Ruby code linter. It defines style guidelines and metrics settings for enforcing consistent coding conventions in Ruby projects.", "metadata": {"repo": "magiclabs/magic-admin-ruby", "file": ".rubocop.yml", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise description:\n\n**Purpose:** A Ruby library for interacting with Magic Labs APIs.\n\n**Content:** Includes source code and documentation for managing Magic Labs resources (e.g., users, messages) using Ruby programming language.", "file_summary": "Here's a concise summary:\n\nThe `.rubocop.yml` file configures RuboCop to enforce consistent coding standards in Ruby projects by defining style guidelines and metrics settings."}
{"code": "## Upcoming Changes\n\n#### Fixed\n\n- <PR-#ISSUE> ...\n\n#### Changed\n\n- <PR-#ISSUE> ...\n\n#### Added\n\n- <PR-#ISSUE> ...\n\n#### Changed\n\n- <PR-#ISSUE> ...\n\n## `1.0.0` - 7/5/2023\n\n#### Added\n\n- <PR-#20> Add Magic Connect Admin SDK support for Token Resource\n  - [Security Enhancement]: Validate `aud` using Magic client ID. \n  - Pull client ID from Magic servers if not provided in constructor.\n\n## `0.2.0` - 11/23/2022\n\n#### Added\n\n- <PR-#18> Support mult-chain wallets in get_metadata calls\n\n## `0.1.4` - 04/05/2022\n\n#### Changed\n\n- <PR-#16> https://github.com/magiclabs/magic-admin-ruby/issues/15\n\n## `0.1.3` - 03/29/2022\n\n#### Changed\n\n- <PR-#12> https://github.com/magiclabs/magic-admin-ruby/issues/7\n- <PR-#12> https://github.com/magiclabs/magic-admin-ruby/issues/8\n- <PR-#12> https://github.com/magiclabs/magic-admin-ruby/issues/11\n\n## `0.1.2` - 10/30/2020\n\n#### Changed\n\n- <PR-#5>: https://github.com/magiclabs/magic-admin-ruby/issues/5\n", "explanation": "**Summary:**\n\nThis block is a changelog, outlining changes made to a software project over time. It lists fixed issues, added features, and other updates by version number, along with brief descriptions of each change.", "metadata": {"repo": "magiclabs/magic-admin-ruby", "file": "CHANGELOG.md", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise description:\n\n**Purpose:** A Ruby library for interacting with Magic Labs APIs.\n\n**Content:** Includes source code and documentation for managing Magic Labs resources (e.g., users, messages) using Ruby programming language.", "file_summary": "Here's a concise summary:\n\nThe file 'CHANGELOG.md' is a record of all changes made to a software project over time, listing updates by version number with brief descriptions."}
{"code": "# Contributing\n\nWhen contributing to this repository, please first discuss the change you wish to make via an **issue**. This can be a feature request or a bug report. After a maintainer has triaged your issue, you are welcome to collaborate on a pull request. If your change is small or uncomplicated, you are welcome to open an issue and pull request simultaneously.\n\nPlease note we have a **code of conduct**, please follow it in all your interactions with the project.\n\n## Setting up for Local Development\n\n1. Fork this repostiory.\n2. Clone your fork.\n3. Create a new branch in your local repository with the following pattern:\n\n- For bug fixes: `bug/#[issue_number]/[descriptive_bug_name]`\n- For features: `feature/#[issue_number]/[descriptive_feature_name]`\n- For chores/the rest: `chore/[descriptive_chore_name]`\n\n## Opening a Pull Request\n", "explanation": "**Summary**\n\nThis block outlines the contribution process for a repository, including:\n\n* Discussing changes via an issue before making a pull request\n* Following a code of conduct\n* Setting up local development by forking, cloning, and creating a new branch with a specific naming convention\n* Opening a pull request with concise and to-the-point details.", "metadata": {"repo": "magiclabs/magic-admin-ruby", "file": "CONTRIBUTING.md", "chunk_number": 1, "total_chunks": 7}, "repository_explanation": "Here is a concise description:\n\n**Purpose:** A Ruby library for interacting with Magic Labs APIs.\n\n**Content:** Includes source code and documentation for managing Magic Labs resources (e.g., users, messages) using Ruby programming language.", "file_summary": "Here is a holistic summary of the file 'CONTRIBUTING.md':\n\n**Contribution Guidelines**\n\nThis document outlines how to contribute to an open-source project by submitting code changes, while also establishing community standards for professional behavior.\n\n**Key Points:**\n\n* Discuss and agree on changes before making a pull request\n* Follow a Code of Conduct that promotes empathy, kindness, and respect\n* Report and address abusive or unacceptable behavior within the community\n* Consequences for violating the Code of Conduct include warnings, temporary bans, and permanent bans\n\nBy following these guidelines, contributors can ensure their code is reviewed and approved in a timely manner, while also maintaining a safe and respectful community."}
{"code": "1. Update the **`Upcoming Changes`** section of [`CHANGELOG.md`](./CHANGELOG.md) with your fixes, changes, or additions. A maintainer will label your changes with a version number and release date once they are published.\n2. Open a pull request from your fork/branch to the upstream `master` branch of _this_ repository.\n3. A maintainer will review your code changes and offer feedback or suggestions if necessary. Once your changes are approved, a maintainer will merge the pull request for you and publish a release.\n\n## Contributor Covenant Code of Conduct\n\n### Our Pledge\n\nWe as members, contributors, and leaders pledge to make participation in our\ncommunity a harassment-free experience for everyone, regardless of age, body\nsize, visible or invisible disability, ethnicity, sex characteristics, gender\nidentity and expression, level of experience, education, socio-economic status,\nnationality, personal appearance, race, religion, or sexual identity\nand orientation.\n", "explanation": "Here is a summary of the block:\n\n**Purpose:** Contribute to an open-source project by submitting code changes.\n\n**Functionality:**\n\n1. Update a CHANGELOG file with your changes.\n2. Submit a pull request from your fork to the upstream repository.\n3. Receive review, feedback, and approval from maintainers before publishing a release.", "metadata": {"repo": "magiclabs/magic-admin-ruby", "file": "CONTRIBUTING.md", "chunk_number": 2, "total_chunks": 7}, "repository_explanation": "Here is a concise description:\n\n**Purpose:** A Ruby library for interacting with Magic Labs APIs.\n\n**Content:** Includes source code and documentation for managing Magic Labs resources (e.g., users, messages) using Ruby programming language.", "file_summary": "Here is a holistic summary of the file 'CONTRIBUTING.md':\n\n**Contribution Guidelines**\n\nThis document outlines how to contribute to an open-source project by submitting code changes, while also establishing community standards for professional behavior.\n\n**Key Points:**\n\n* Discuss and agree on changes before making a pull request\n* Follow a Code of Conduct that promotes empathy, kindness, and respect\n* Report and address abusive or unacceptable behavior within the community\n* Consequences for violating the Code of Conduct include warnings, temporary bans, and permanent bans\n\nBy following these guidelines, contributors can ensure their code is reviewed and approved in a timely manner, while also maintaining a safe and respectful community."}
{"code": "We pledge to act and interact in ways that contribute to an open, welcoming,\ndiverse, inclusive, and healthy community.\n\n### Our Standards\n\nExamples of behavior that contributes to a positive environment for our\ncommunity include:\n\n- Demonstrating empathy and kindness toward other people\n- Being respectful of differing opinions, viewpoints, and experiences\n- Giving and gracefully accepting constructive feedback\n- Accepting responsibility and apologizing to those affected by our mistakes, and learning from the experience\n- Focusing on what is best not just for us as individuals, but for the overall community\n\nExamples of unacceptable behavior include:\n\n- The use of sexualized language or imagery, and sexual attention or advances of any kind\n- Trolling, insulting or derogatory comments, and personal or political attacks\n- Public or private harassment\n- Publishing others' private information, such as a physical or email address, without their explicit permission", "explanation": "This block establishes community standards for behavior, outlining:\n\n**Positive Behavior:**\n\n* Demonstrating empathy and kindness\n* Respecting differing opinions\n* Giving/accepting constructive feedback\n* Taking responsibility and learning from mistakes\n\n**Unacceptable Behavior:**\n\n* Sexual harassment or explicit content\n* Trolling, insults, or personal attacks\n* Harassment or publishing private information", "metadata": {"repo": "magiclabs/magic-admin-ruby", "file": "CONTRIBUTING.md", "chunk_number": 3, "total_chunks": 7}, "repository_explanation": "Here is a concise description:\n\n**Purpose:** A Ruby library for interacting with Magic Labs APIs.\n\n**Content:** Includes source code and documentation for managing Magic Labs resources (e.g., users, messages) using Ruby programming language.", "file_summary": "Here is a holistic summary of the file 'CONTRIBUTING.md':\n\n**Contribution Guidelines**\n\nThis document outlines how to contribute to an open-source project by submitting code changes, while also establishing community standards for professional behavior.\n\n**Key Points:**\n\n* Discuss and agree on changes before making a pull request\n* Follow a Code of Conduct that promotes empathy, kindness, and respect\n* Report and address abusive or unacceptable behavior within the community\n* Consequences for violating the Code of Conduct include warnings, temporary bans, and permanent bans\n\nBy following these guidelines, contributors can ensure their code is reviewed and approved in a timely manner, while also maintaining a safe and respectful community."}
{"code": "- Other conduct which could reasonably be considered inappropriate in a professional setting\n\n### Enforcement Responsibilities\n\nCommunity leaders are responsible for clarifying and enforcing our standards of\nacceptable behavior and will take appropriate and fair corrective action in\nresponse to any behavior that they deem inappropriate, threatening, offensive,\nor harmful.\n\nCommunity leaders have the right and responsibility to remove, edit, or reject\ncomments, commits, code, wiki edits, issues, and other contributions that are\nnot aligned to this Code of Conduct, and will communicate reasons for moderation\ndecisions when appropriate.\n\n### Scope\n\nThis Code of Conduct applies within all community spaces, and also applies when\nan individual is officially representing the community in public spaces.\nExamples of representing our community include using an official e-mail address,\nposting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event.\n\n### Enforcement\n", "explanation": "Here is a concise summary:\n\n**Purpose:** Establish standards for professional behavior within a community.\n**Functionality:** Community leaders enforce the Code of Conduct by removing/editing/rejecting inappropriate contributions, taking corrective action when necessary, and communicating moderation decisions when applicable.", "metadata": {"repo": "magiclabs/magic-admin-ruby", "file": "CONTRIBUTING.md", "chunk_number": 4, "total_chunks": 7}, "repository_explanation": "Here is a concise description:\n\n**Purpose:** A Ruby library for interacting with Magic Labs APIs.\n\n**Content:** Includes source code and documentation for managing Magic Labs resources (e.g., users, messages) using Ruby programming language.", "file_summary": "Here is a holistic summary of the file 'CONTRIBUTING.md':\n\n**Contribution Guidelines**\n\nThis document outlines how to contribute to an open-source project by submitting code changes, while also establishing community standards for professional behavior.\n\n**Key Points:**\n\n* Discuss and agree on changes before making a pull request\n* Follow a Code of Conduct that promotes empathy, kindness, and respect\n* Report and address abusive or unacceptable behavior within the community\n* Consequences for violating the Code of Conduct include warnings, temporary bans, and permanent bans\n\nBy following these guidelines, contributors can ensure their code is reviewed and approved in a timely manner, while also maintaining a safe and respectful community."}
{"code": "Instances of abusive, harassing, or otherwise unacceptable behavior may be\nreported to the community leaders responsible for enforcement at [support@magic.link](mailto:support@magic.link).\nAll complaints will be reviewed and investigated promptly and fairly.\n\nAll community leaders are obligated to respect the privacy and security of the\nreporter of any incident.\n\n### Enforcement Guidelines\n\nCommunity leaders will follow these Community Impact Guidelines in determining\nthe consequences for any action they deem in violation of this Code of Conduct:\n\n#### 1. Correction\n\n**Community Impact**: Use of inappropriate language or other behavior deemed\nunprofessional or unwelcome in the community.\n\n**Consequence**: A private, written warning from community leaders, providing\nclarity around the nature of the violation and an explanation of why the\nbehavior was inappropriate. A public apology may be requested.\n\n#### 2. Warning\n\n**Community Impact**: A violation through a single incident or series\nof actions.\n", "explanation": "Here is a summary:\n\nThis block outlines the process for reporting and addressing abusive, harassing, or unacceptable behavior within the community. It provides guidelines for community leaders to investigate complaints, respect reporter privacy, and enforce consequences based on specific scenarios (Correction, Warning).", "metadata": {"repo": "magiclabs/magic-admin-ruby", "file": "CONTRIBUTING.md", "chunk_number": 5, "total_chunks": 7}, "repository_explanation": "Here is a concise description:\n\n**Purpose:** A Ruby library for interacting with Magic Labs APIs.\n\n**Content:** Includes source code and documentation for managing Magic Labs resources (e.g., users, messages) using Ruby programming language.", "file_summary": "Here is a holistic summary of the file 'CONTRIBUTING.md':\n\n**Contribution Guidelines**\n\nThis document outlines how to contribute to an open-source project by submitting code changes, while also establishing community standards for professional behavior.\n\n**Key Points:**\n\n* Discuss and agree on changes before making a pull request\n* Follow a Code of Conduct that promotes empathy, kindness, and respect\n* Report and address abusive or unacceptable behavior within the community\n* Consequences for violating the Code of Conduct include warnings, temporary bans, and permanent bans\n\nBy following these guidelines, contributors can ensure their code is reviewed and approved in a timely manner, while also maintaining a safe and respectful community."}
{"code": "**Consequence**: A warning with consequences for continued behavior. No\ninteraction with the people involved, including unsolicited interaction with\nthose enforcing the Code of Conduct, for a specified period of time. This\nincludes avoiding interactions in community spaces as well as external channels\nlike social media. Violating these terms may lead to a temporary or\npermanent ban.\n\n#### 3. Temporary Ban\n\n**Community Impact**: A serious violation of community standards, including\nsustained inappropriate behavior.\n\n**Consequence**: A temporary ban from any sort of interaction or public\ncommunication with the community for a specified period of time. No public or\nprivate interaction with the people involved, including unsolicited interaction\nwith those enforcing the Code of Conduct, is allowed during this period.\nViolating these terms may lead to a permanent ban.\n\n#### 4. Permanent Ban\n\n**Community Impact**: Demonstrating a pattern of violation of community", "explanation": "Here is a summary:\n\nThis block outlines consequences for violating a Code of Conduct, including:\n\n* Warning with no interaction for a specified time\n* Temporary ban from interacting with the community for a set period\n* Permanent ban due to repeated or severe violations.", "metadata": {"repo": "magiclabs/magic-admin-ruby", "file": "CONTRIBUTING.md", "chunk_number": 6, "total_chunks": 7}, "repository_explanation": "Here is a concise description:\n\n**Purpose:** A Ruby library for interacting with Magic Labs APIs.\n\n**Content:** Includes source code and documentation for managing Magic Labs resources (e.g., users, messages) using Ruby programming language.", "file_summary": "Here is a holistic summary of the file 'CONTRIBUTING.md':\n\n**Contribution Guidelines**\n\nThis document outlines how to contribute to an open-source project by submitting code changes, while also establishing community standards for professional behavior.\n\n**Key Points:**\n\n* Discuss and agree on changes before making a pull request\n* Follow a Code of Conduct that promotes empathy, kindness, and respect\n* Report and address abusive or unacceptable behavior within the community\n* Consequences for violating the Code of Conduct include warnings, temporary bans, and permanent bans\n\nBy following these guidelines, contributors can ensure their code is reviewed and approved in a timely manner, while also maintaining a safe and respectful community."}
{"code": "standards, including sustained inappropriate behavior,  harassment of an\nindividual, or aggression toward or disparagement of classes of individuals.\n\n**Consequence**: A permanent ban from any sort of public interaction within\nthe community.\n\n### Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant](https://www.contributor-covenant.org),\nversion 2.0, available at\nhttps://www.contributor-covenant.org/version/2/0/code_of_conduct.html.\n\nCommunity Impact Guidelines were inspired by [Mozilla's code of conduct\nenforcement ladder](https://github.com/mozilla/diversity).\n\nFor answers to common questions about this code of conduct, see the FAQ at\nhttps://www.contributor-covenant.org/faq. Translations are available at\nhttps://www.contributor-covenant.org/translations.\n", "explanation": "**Purpose:** Defines acceptable behavior in a community.\n\n**Functionality:** Impose a permanent ban for individuals engaging in sustained inappropriate behavior, harassment, or aggression towards others.", "metadata": {"repo": "magiclabs/magic-admin-ruby", "file": "CONTRIBUTING.md", "chunk_number": 7, "total_chunks": 7}, "repository_explanation": "Here is a concise description:\n\n**Purpose:** A Ruby library for interacting with Magic Labs APIs.\n\n**Content:** Includes source code and documentation for managing Magic Labs resources (e.g., users, messages) using Ruby programming language.", "file_summary": "Here is a holistic summary of the file 'CONTRIBUTING.md':\n\n**Contribution Guidelines**\n\nThis document outlines how to contribute to an open-source project by submitting code changes, while also establishing community standards for professional behavior.\n\n**Key Points:**\n\n* Discuss and agree on changes before making a pull request\n* Follow a Code of Conduct that promotes empathy, kindness, and respect\n* Report and address abusive or unacceptable behavior within the community\n* Consequences for violating the Code of Conduct include warnings, temporary bans, and permanent bans\n\nBy following these guidelines, contributors can ensure their code is reviewed and approved in a timely manner, while also maintaining a safe and respectful community."}
{"code": "# frozen_string_literal: true\n\nsource \"https://rubygems.org\"\n\ngemspec\n", "explanation": "This block specifies:\n\n* The Ruby version (frozen string literal) \n* The source of gems (RubyGems)\n* A gem specification (GemSpec).", "metadata": {"repo": "magiclabs/magic-admin-ruby", "file": "Gemfile", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise description:\n\n**Purpose:** A Ruby library for interacting with Magic Labs APIs.\n\n**Content:** Includes source code and documentation for managing Magic Labs resources (e.g., users, messages) using Ruby programming language.", "file_summary": "Here is a concise summary:\n\nThe `Gemfile` specifies dependencies for a Ruby project, including its Ruby version and the source for installation from RubyGems, using GemSpecs for precise gem versions."}
{"code": "The MIT License (MIT)\n\nCopyright (c) 2020 Magic Labs Inc.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,", "explanation": "**Summary:** This block is a license agreement, specifically the MIT License, which grants permission for free use, modification, and distribution of software, while excluding warranties and liability.", "metadata": {"repo": "magiclabs/magic-admin-ruby", "file": "LICENSE.txt", "chunk_number": 1, "total_chunks": 2}, "repository_explanation": "Here is a concise description:\n\n**Purpose:** A Ruby library for interacting with Magic Labs APIs.\n\n**Content:** Includes source code and documentation for managing Magic Labs resources (e.g., users, messages) using Ruby programming language.", "file_summary": "Here is a concise summary:\n\n**LICENSE.txt:** MIT License agreement granting free use, modification, and distribution of software with no warranties or liability."}
{"code": "OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n", "explanation": "This is a license agreement statement, specifically an Open Source License (e.g. GPL). It's purpose is to outline terms of use for software, and its functionality is to grant permission to use, modify, and distribute the software while adhering to specified conditions.", "metadata": {"repo": "magiclabs/magic-admin-ruby", "file": "LICENSE.txt", "chunk_number": 2, "total_chunks": 2}, "repository_explanation": "Here is a concise description:\n\n**Purpose:** A Ruby library for interacting with Magic Labs APIs.\n\n**Content:** Includes source code and documentation for managing Magic Labs resources (e.g., users, messages) using Ruby programming language.", "file_summary": "Here is a concise summary:\n\n**LICENSE.txt:** MIT License agreement granting free use, modification, and distribution of software with no warranties or liability."}
{"code": "# Magic Admin Ruby SDK\n\nThe Magic Admin Ruby SDK provides convenient ways for developers to interact with Magic API endpoints and an array of utilities to handle [DID Token](https://magic.link/docs/introduction/decentralized-id).\n\n## Table of Contents\n\n* [Documentation](#documentation)\n* [Quick Start](#quick-start)\n* [Changelog](#changelog)\n* [License](#license)\n\n## Documentation\nSee the [Magic doc](https://magic.link/docs/api-reference/server-side-sdks/ruby)!\n\n## Installation\nAdd this line to your application's Gemfile:\n\n```ruby\ngem 'magic-admin'\n```\n\nAnd then execute:\n\n```bash\n$ bundle\n```\n\nOr install it yourself as:\n\n```bash\n$ gem install magic-admin\n```\n\n### Prerequisites\n\n- Ruby 2.5+\n\n## Quick Start\nBefore you start, you will need an API secret key. You can get one from the [Magic Dashboard](https://dashboard.magic.link/). Once you have the API secret key, you can instantiate a Magic object.\n\n```ruby\nrequire 'magic-admin'\n\nmagic = Magic.new(api_secret_key: '<YOUR_API_SECRET_KEY>')\n\nmagic.token.validate('DID_TOKEN')\n", "explanation": "**Summary:** \n\nThe Magic Admin Ruby SDK provides a convenient way for developers to interact with Magic API endpoints and handle DID Tokens, requiring Ruby 2.5+ and an API secret key.", "metadata": {"repo": "magiclabs/magic-admin-ruby", "file": "README.md", "chunk_number": 1, "total_chunks": 2}, "repository_explanation": "Here is a concise description:\n\n**Purpose:** A Ruby library for interacting with Magic Labs APIs.\n\n**Content:** Includes source code and documentation for managing Magic Labs resources (e.g., users, messages) using Ruby programming language.", "file_summary": "Here is a holistic summary of the file 'README.md':\n\n**Magic Admin Ruby SDK**\n\nA lightweight Ruby library (requires 2.5+) that allows developers to interact with Magic API endpoints, handle DID Tokens, and manage API connections using an API secret key. The SDK initializes the Magic API object and offers network strategy configuration options for retries, timeouts, and backoffs."}
{"code": "# Read the docs to learn more! \ud83d\ude80\n```\n\nOptionally if you would like, you can load the API secret key from the environment variable, `MAGIC_API_SECRET_KEY`.\n\n```ruby\n# Set the env variable `MAGIC_API_SECRET_KEY`.\n\nmagic = Magic.new\n```\n\n**Note**: The arguments passed to the `Magic` object takes precedence over the environment variables.\n\n### Configure Network Strategy\nThe `Magic` object also takes in `retries`, `timeout` and `backoff` as optional arguments at the object instantiation time so you can override those values for your application setup.\n\n```ruby\nmagic = Magic.new(retries: 5, timeout: 10, backoff: 0.03)\n\n```\n\n## Changelog\nSee [Changelog](CHANGELOG.md)\n\n## License\nSee [License](LICENSE.txt)\n", "explanation": "Here is a concise summary of the block's purpose and functionality:\n\n**Purpose:** Initialize the Magic API object.\n\n**Functionality:**\n\n* Optionally load API secret key from environment variable `MAGIC_API_SECRET_KEY`.\n* Configure network strategy with optional arguments:\n\t+ `retries`: number of retries\n\t+ `timeout`: request timeout\n\t+ `backoff`: backoff time between requests.", "metadata": {"repo": "magiclabs/magic-admin-ruby", "file": "README.md", "chunk_number": 2, "total_chunks": 2}, "repository_explanation": "Here is a concise description:\n\n**Purpose:** A Ruby library for interacting with Magic Labs APIs.\n\n**Content:** Includes source code and documentation for managing Magic Labs resources (e.g., users, messages) using Ruby programming language.", "file_summary": "Here is a holistic summary of the file 'README.md':\n\n**Magic Admin Ruby SDK**\n\nA lightweight Ruby library (requires 2.5+) that allows developers to interact with Magic API endpoints, handle DID Tokens, and manage API connections using an API secret key. The SDK initializes the Magic API object and offers network strategy configuration options for retries, timeouts, and backoffs."}
{"code": "#!/usr/bin/env ruby\n# frozen_string_literal: true\n\nrequire \"irb\"\nrequire \"irb/completion\"\nrequire \"byebug\"\nrequire \"#{::File.dirname(__FILE__)}/../lib/magic-admin\"\n\n# Config IRB to enable --simple-prompt and auto indent\nIRB.conf[:PROMPT_MODE] = :SIMPLE\nIRB.conf[:AUTO_INDENT] = true\n\nputs \"Loaded gem 'magic-admin'\"\nIRB.start\n", "explanation": "Here is a concise summary of this block:\n\n**Purpose:** Load Ruby environment, configure IRB, and start interactive shell.\n\n**Functionality:**\n\n* Loads required libraries (irb, irb/completion, byebug, magic-admin)\n* Configures IRB with simple prompt and auto indentation\n* Prints message indicating that the \"magic-admin\" gem has been loaded\n* Starts an interactive Ruby shell using IRB", "metadata": {"repo": "magiclabs/magic-admin-ruby", "file": "bin/magic-console", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise description:\n\n**Purpose:** A Ruby library for interacting with Magic Labs APIs.\n\n**Content:** Includes source code and documentation for managing Magic Labs resources (e.g., users, messages) using Ruby programming language.", "file_summary": "Here is a concise summary of the file 'bin/magic-console':\n\n**Summary:** Loads Ruby environment, configures IRB, prints admin gem loaded message, and starts interactive Ruby shell via IRB."}
{"code": "# frozen_string_literal: true\n\n# Magic Ruby bindings\nrequire \"etc\"\nrequire \"json\"\nrequire \"net/http\"\nrequire \"uri\"\nrequire \"base64\"\nrequire \"eth\"\n\n# Version\nrequire \"magic-admin/version\"\n\n# Magic API Classes\nrequire \"magic-admin/util\"\nrequire \"magic-admin/config\"\nrequire \"magic-admin/errors\"\n\n# HTTP Classes\nrequire \"magic-admin/http/client\"\nrequire \"magic-admin/http/request\"\nrequire \"magic-admin/http/response\"\n\n# Magic Resource Classes\nrequire \"magic-admin/resource/token\"\nrequire \"magic-admin/resource/user\"\nrequire \"magic-admin/resource/wallet\"\n\n# Magic Class to access resources\nclass Magic\n  RETRIES = 3\n  TIMEOUT = 5\n  BACKOFF = 0.02\n\n  # attribute reader for magic api secret key\n  attr_reader :secret_key\n\n  # attribute reader for magic http client\n  attr_reader :http_client\n\n  # attribute reader for magic client id\n  attr_reader :client_id\n\n  # The constructor allows you to specify your own API secret key\n  # and HTTP request strategy when your application interacting\n  # with the Magic API.\n  #", "explanation": "**Summary:**\n\nThis block is a Ruby code file that sets up bindings for the Magic API, providing a structured way to interact with the API using various classes and methods.\n\n**Key Functionality:**\n\n* Imports necessary libraries and modules\n* Defines constants for retries, timeout, and backoff settings\n* Sets up attribute readers for secret key, HTTP client, and client ID\n* Provides a `Magic` class with customizable constructor options", "metadata": {"repo": "magiclabs/magic-admin-ruby", "file": "lib/magic-admin.rb", "chunk_number": 1, "total_chunks": 4}, "repository_explanation": "Here is a concise description:\n\n**Purpose:** A Ruby library for interacting with Magic Labs APIs.\n\n**Content:** Includes source code and documentation for managing Magic Labs resources (e.g., users, messages) using Ruby programming language.", "file_summary": "Here is a concise summary of the file 'lib/magic-admin.rb':\n\n**Summary:** Configures Magic Admin API client settings and provides utility methods for interacting with the Magic API.\n\n**Key Features:** Initializes HTTP client, sets timeout/retries/backoff, validates/sets secret key, and configures client ID."}
{"code": "  # It will automatically configure required arguments\n  # using the following environment variables\n  #   MAGIC_API_SECRET_KEY\n  #   MAGIC_API_RETRIES\n  #   MAGIC_API_TIMEOUT\n  #   MAGIC_API_BACKOFF\n  #\n  # Arguments:\n  #   api_secret_key: Your API Secret Key retrieved from the Magic Dashboard.\n  #   retries: Total number of retries to allow.\n  #   timeout: A period of time the request is going to wait for a response.\n  #   backoff: A backoff factor to apply between retry attempts.\n  #\n  # Returns:\n  #   A Magic object that provides access to all the supported resources.\n  #\n  # Examples:\n  #\n  #   Magic.new\n  #   Magic.new api_secret_key: \"SECRET_KEY>\"\n  #   Magic.new api_secret_key: \"SECRET_KEY>\",\n  #             retries: 2,\n  #             timeout: 2,\n  #             backoff: 0.2\n  #\n  #\n\n  def initialize(api_secret_key: nil,\n                 retries: nil,\n                 timeout: nil,\n                 backoff: nil,\n                 client_id: nil)\n    secret_key!(api_secret_key)", "explanation": "Here is a concise summary:\n\n**Purpose:** Automatically configure API settings from environment variables.\n\n**Functionality:** Initializes a Magic object with customizable API settings, allowing for retries, timeouts, backoff, and client ID configuration.", "metadata": {"repo": "magiclabs/magic-admin-ruby", "file": "lib/magic-admin.rb", "chunk_number": 2, "total_chunks": 4}, "repository_explanation": "Here is a concise description:\n\n**Purpose:** A Ruby library for interacting with Magic Labs APIs.\n\n**Content:** Includes source code and documentation for managing Magic Labs resources (e.g., users, messages) using Ruby programming language.", "file_summary": "Here is a concise summary of the file 'lib/magic-admin.rb':\n\n**Summary:** Configures Magic Admin API client settings and provides utility methods for interacting with the Magic API.\n\n**Key Features:** Initializes HTTP client, sets timeout/retries/backoff, validates/sets secret key, and configures client ID."}
{"code": "    http_client!(retries, timeout, backoff)\n    client_id!(client_id, api_secret_key)\n  end\n\n  # Description:\n  #   Method provides you User object\n  #   for interacting with the Magic API.\n  #\n  # Returns:\n  #   A User object that provides access to\n  #   all the supported resources.\n\n  def user\n    MagicAdmin::Resource::User.new(self)\n  end\n\n  # Description:\n  #   Method provides you Token object\n  #   for various utility methods of Token.\n  #\n  # Returns:\n  #   A Token object that provides access to\n  #   all the supported resources.\n\n  def token\n    MagicAdmin::Resource::Token.new(self)\n  end\n\n  private\n\n  def secret_key?\n    !(secret_key.nil? || secret_key.empty?)\n  end\n\n  def secret_key!(api_secret_key)\n    @secret_key = api_secret_key || ENV[\"MAGIC_API_SECRET_KEY\"]\n    message = \"Magic api secret key was not found.\"\n\n    raise MagicAdmin::MagicError, message unless secret_key?\n  end\n\n  def configure_retries(retries)\n    retries || ENV[\"MAGIC_API_RETRIES\"] || RETRIES\n  end\n\n  def configure_timeout(timeout)", "explanation": "Here is a concise summary:\n\n**Block Purpose:** Configures Magic Admin API client settings.\n\n**Functionality:**\n\n* Provides methods to interact with User and Token resources.\n* Validates and sets secret key for authentication.\n* Configures retries and timeout settings for API requests.", "metadata": {"repo": "magiclabs/magic-admin-ruby", "file": "lib/magic-admin.rb", "chunk_number": 3, "total_chunks": 4}, "repository_explanation": "Here is a concise description:\n\n**Purpose:** A Ruby library for interacting with Magic Labs APIs.\n\n**Content:** Includes source code and documentation for managing Magic Labs resources (e.g., users, messages) using Ruby programming language.", "file_summary": "Here is a concise summary of the file 'lib/magic-admin.rb':\n\n**Summary:** Configures Magic Admin API client settings and provides utility methods for interacting with the Magic API.\n\n**Key Features:** Initializes HTTP client, sets timeout/retries/backoff, validates/sets secret key, and configures client ID."}
{"code": "    timeout || ENV[\"MAGIC_API_TIMEOUT\"] || TIMEOUT\n  end\n\n  def configure_backoff(backoff)\n    backoff || ENV[\"MAGIC_API_BACKOFF\"] || BACKOFF\n  end\n\n  def http_client!(retries, timeout, backoff)\n    @http_client = MagicAdmin::Http::Client\n                   .new(MagicAdmin::Config.api_base,\n                        configure_retries(retries),\n                        configure_timeout(timeout),\n                        configure_backoff(backoff))\n  end\n\n  def client_id!(client_id, secret_key)\n    @client_id = client_id || ENV[\"MAGIC_CLIENT_ID\"]\n    if !@client_id\n      headers = MagicAdmin::Util.headers(secret_key)\n      options = { headers: headers }\n      response = self.http_client\n          .call(:get, \"/v1/admin/client/get\", options)\n\n      message = \"Magic api secret key is not valid.\"\n      raise MagicAdmin::MagicError, message unless response.data[:data][:client_id]\n      \n      @client_id = response.data[:data][:client_id]\n    end\n  end\n\nend\n", "explanation": "Here is a concise summary:\n\nThis block provides utility methods for configuring and initializing an HTTP client for interacting with the Magic API, including timeout, retries, and backoff settings. It also retrieves or sets a valid client ID and secret key using the initialized client.", "metadata": {"repo": "magiclabs/magic-admin-ruby", "file": "lib/magic-admin.rb", "chunk_number": 4, "total_chunks": 4}, "repository_explanation": "Here is a concise description:\n\n**Purpose:** A Ruby library for interacting with Magic Labs APIs.\n\n**Content:** Includes source code and documentation for managing Magic Labs resources (e.g., users, messages) using Ruby programming language.", "file_summary": "Here is a concise summary of the file 'lib/magic-admin.rb':\n\n**Summary:** Configures Magic Admin API client settings and provides utility methods for interacting with the Magic API.\n\n**Key Features:** Initializes HTTP client, sets timeout/retries/backoff, validates/sets secret key, and configures client ID."}
{"code": "# frozen_string_literal: true\n\nmodule MagicAdmin\n\n  module Config\n\n    # Description:\n    #   Method provides you platform information\n    #\n    # Returns:\n    #   user platform information\n    def self.platform\n      RUBY_PLATFORM\n    end\n\n    # Description:\n    #   Method provides you sdk programming language\n    #\n    # Returns:\n    #   sdk programming language\n    def self.language\n      \"ruby\"\n    end\n\n    # Description:\n    #   Method provides you sdk programming language version\n    #\n    # Returns:\n    #   sdk programming language version\n    def self.language_version\n      RUBY_VERSION\n    end\n\n    # Description:\n    #   Method provides you installation machine user_name\n    #\n    # Returns:\n    #   installation machine user_name\n    def self.user_name\n      login = Etc.getlogin\n\n      return \"None\" if login.nil?\n\n      Etc.getpwnam(login).gecos.split(/,/).first\n    end\n\n    # Description:\n    #   Method provides you sdk publisher name\n    #\n    # Returns:\n    #   sdk publisher name\n    def self.publisher\n      \"MagicLabs\"", "explanation": "**Purpose:** Provides platform information for MagicAdmin SDK.\n\n**Functionality:** A set of methods that return various pieces of information about the installation machine, such as:\n\n* `platform`: RUBY_PLATFORM value.\n* `language`: Always returns \"ruby\".\n* `language_version`: RUBY_VERSION value.\n* `user_name`: Returns the username of the user who installed MagicAdmin SDK.\n* `publisher`: Always returns \"MagicLabs\".", "metadata": {"repo": "magiclabs/magic-admin-ruby", "file": "lib/magic-admin/config.rb", "chunk_number": 1, "total_chunks": 2}, "repository_explanation": "Here is a concise description:\n\n**Purpose:** A Ruby library for interacting with Magic Labs APIs.\n\n**Content:** Includes source code and documentation for managing Magic Labs resources (e.g., users, messages) using Ruby programming language.", "file_summary": "Here is a concise and holistic summary of the file 'lib/magic-admin/config.rb':\n\n**Summary:** This Ruby module provides platform information for MagicAdmin SDK, including constants for API base URL and NBF (Not Before Field) grace period, along with methods to determine machine language, user name, and publisher."}
{"code": "    end\n\n    # Description:\n    #   Method provides you api base url\n    #\n    # Returns:\n    #   api base url\n    def self.api_base\n      \"https://api.magic.link\"\n    end\n\n    # Description:\n    #   Method provides you nbf grace period\n    #\n    # Returns:\n    #   nbf grace period\n    def self.nbf_grace_period\n      300\n    end\n\n  end\nend\n", "explanation": "This block defines two class methods in Ruby:\n\n1. `api_base`: returns a constant API base URL.\n2. `nbf_grace_period`: returns an integer value representing the Not Before Field (NBF) grace period, set to 300 seconds.", "metadata": {"repo": "magiclabs/magic-admin-ruby", "file": "lib/magic-admin/config.rb", "chunk_number": 2, "total_chunks": 2}, "repository_explanation": "Here is a concise description:\n\n**Purpose:** A Ruby library for interacting with Magic Labs APIs.\n\n**Content:** Includes source code and documentation for managing Magic Labs resources (e.g., users, messages) using Ruby programming language.", "file_summary": "Here is a concise and holistic summary of the file 'lib/magic-admin/config.rb':\n\n**Summary:** This Ruby module provides platform information for MagicAdmin SDK, including constants for API base URL and NBF (Not Before Field) grace period, along with methods to determine machine language, user name, and publisher."}
{"code": "# frozen_string_literal: true\n\nmodule MagicAdmin\n\n  # MagicAdmin::MagicError class\n  class MagicError < StandardError\n\n    # attribute reader for error message\n    attr_reader :message\n\n    # Description:\n    #   The constructor allows you to specify error message\n    #\n    # Arguments:\n    #   message: error message.\n    def initialize(message)\n      @message = message\n    end\n  end\n\n  # MagicAdmin::MagicError class\n  class DIDTokenError < MagicError; end\n\n  # RequestError Class\n  class RequestError < MagicError\n    # attribute reader for http response status\n    attr_reader :http_status\n\n    # attribute reader for http response code\n    attr_reader :http_code\n\n    # attribute reader for http response\n    attr_reader :http_response\n\n    # attribute reader for http response message\n    attr_reader :http_message\n\n    # attribute reader for http response error code\n    attr_reader :http_error_code\n\n    # attribute reader for http request params\n    attr_reader :http_request_params\n\n    # attribute reader for http request data", "explanation": "Here is a concise summary of the purpose and functionality of this block:\n\n**Purpose:** Define custom error classes for MagicAdmin.\n\n**Functionality:**\n\n* `MagicError`: A base class for all errors, with an `initialize` method that takes an error message.\n* `DIDTokenError`: A subclass of `MagicError`, inheriting its behavior.\n* `RequestError`: A subclass of `MagicError`, adding additional attributes to represent HTTP response and request data.", "metadata": {"repo": "magiclabs/magic-admin-ruby", "file": "lib/magic-admin/errors.rb", "chunk_number": 1, "total_chunks": 3}, "repository_explanation": "Here is a concise description:\n\n**Purpose:** A Ruby library for interacting with Magic Labs APIs.\n\n**Content:** Includes source code and documentation for managing Magic Labs resources (e.g., users, messages) using Ruby programming language.", "file_summary": "Here is a concise summary:\n\n**lib/magic-admin/errors.rb**: Defines custom error classes for MagicAdmin, including `MagicError`, `DIDTokenError`, and `RequestError`, which inherit from a base class with an `initialize` method to create detailed error objects."}
{"code": "    attr_reader :http_request_data\n\n    # attribute reader for http request method\n    attr_reader :http_method\n\n    # Description:\n    #   The constructor allows you to specify error message\n    #   and HTTP request and response info\n    #\n    # Arguments:\n    #   message: request error message.\n    #   opt: hash of request and response info of following keys:\n    #     http_status\n    #     http_code\n    #     http_response\n    #     http_message\n    #     http_error_code\n    #     http_request_params\n    #     http_request_data\n    #     http_method\n    # Returns:\n    #   A Error object that provides additional error info for magic api call.\n    def initialize(message, opt = {})\n      super(message)\n      @http_status = opt[:http_status]\n      @http_code = opt[:http_code]\n      @http_response = opt[:http_response]\n      @http_message = opt[:http_message]\n      @http_error_code = opt[:http_error_code]\n      @http_request_params = opt[:http_request_params]\n      @http_request_data = opt[:http_request_data]", "explanation": "**Summary:**\n\nThis block is a class initializer (constructor) that creates an `Error` object with additional error information, including HTTP request and response data. It accepts two arguments: a message describing the error and a hash of optional key-value pairs containing HTTP details.", "metadata": {"repo": "magiclabs/magic-admin-ruby", "file": "lib/magic-admin/errors.rb", "chunk_number": 2, "total_chunks": 3}, "repository_explanation": "Here is a concise description:\n\n**Purpose:** A Ruby library for interacting with Magic Labs APIs.\n\n**Content:** Includes source code and documentation for managing Magic Labs resources (e.g., users, messages) using Ruby programming language.", "file_summary": "Here is a concise summary:\n\n**lib/magic-admin/errors.rb**: Defines custom error classes for MagicAdmin, including `MagicError`, `DIDTokenError`, and `RequestError`, which inherit from a base class with an `initialize` method to create detailed error objects."}
{"code": "      @http_method = opt[:http_method]\n    end\n  end\n\n  # MagicAdmin::MagicError class\n  class APIConnectionError < RequestError; end\n\n  # MagicAdmin::RateLimitingError class\n  class RateLimitingError < RequestError; end\n\n  # MagicAdmin::BadRequestError class\n  class BadRequestError < RequestError; end\n\n  # MagicAdmin::AuthenticationError class\n  class AuthenticationError < RequestError; end\n\n  # MagicAdmin::ForbiddenError class\n  class ForbiddenError < RequestError; end\n\n  # MagicAdmin::APIError class\n  class APIError < RequestError; end\n\nend\n", "explanation": "This block defines a set of error classes for handling API-related errors, including connection issues, rate limiting, bad requests, authentication failures, and forbidden access.", "metadata": {"repo": "magiclabs/magic-admin-ruby", "file": "lib/magic-admin/errors.rb", "chunk_number": 3, "total_chunks": 3}, "repository_explanation": "Here is a concise description:\n\n**Purpose:** A Ruby library for interacting with Magic Labs APIs.\n\n**Content:** Includes source code and documentation for managing Magic Labs resources (e.g., users, messages) using Ruby programming language.", "file_summary": "Here is a concise summary:\n\n**lib/magic-admin/errors.rb**: Defines custom error classes for MagicAdmin, including `MagicError`, `DIDTokenError`, and `RequestError`, which inherit from a base class with an `initialize` method to create detailed error objects."}
{"code": "# frozen_string_literal: true\n\nmodule MagicAdmin\n\n  module Http\n\n    # Http Client and its methods are accessible\n    # on the Magic instance by the http_client attribute.\n    # It provides methods to interact with the http client.\n    class Client\n\n      # attribute reader for magic api max retries\n      attr_reader :retries\n\n      # attribute reader for magic api backoff factor\n      attr_reader :backoff\n\n      # attribute reader for magic api timeout\n      attr_reader :timeout\n\n      # attribute reader for magic api base api url\n      attr_reader :base_url\n\n      # attribute reader for magic http request class\n      attr_reader :http_request\n\n      # attribute reader for magic http response class\n      attr_reader :http_response\n\n      # The constructor allows you to configure HTTP request strategy\n      # when your application interacting with the Magic API\n      #\n      # Arguments:\n      #   api_base: api base url.\n      #   req_retries: Total number of retries to allow.", "explanation": "Here is a concise summary:\n\n**Purpose:** Provides an HTTP client class for interacting with the Magic API.\n\n**Functionality:** Allows configuration of HTTP request strategy, including maximum retries, backoff factor, timeout, base URL, and custom request/response classes.", "metadata": {"repo": "magiclabs/magic-admin-ruby", "file": "lib/magic-admin/http/client.rb", "chunk_number": 1, "total_chunks": 4}, "repository_explanation": "Here is a concise description:\n\n**Purpose:** A Ruby library for interacting with Magic Labs APIs.\n\n**Content:** Includes source code and documentation for managing Magic Labs resources (e.g., users, messages) using Ruby programming language.", "file_summary": "Here is a concise summary of the file 'lib/magic-admin/http/client.rb':\n\n**Purpose:** Provides a customizable HTTP client for interacting with APIs.\n\n**Functionality:** Configurable retry behavior and timeouts for making HTTP requests with customizable methods, paths, and options."}
{"code": "      #   req_timeout: A period of time the request is going\n      #                to wait for a response.\n      #   req_backoff: A backoff factor to apply between retry attempts.\n      #\n      # Returns:\n      #   A Http Client object that provides access to\n      #   all the supported resources.\n      #\n      # Examples:\n      #   Client.new(<api_base>, <req_retries>, <req_timeout>, <req_backoff>)\n      def initialize(api_base, req_retries, req_timeout, req_backoff)\n        @retries = req_retries.to_i\n        @backoff = req_backoff.to_f\n        @timeout = req_timeout.to_f\n        @base_url = api_base\n        @http_request = Request\n        @http_response = Response\n      end\n\n      # Description:\n      #   call create http request and provide response\n      #\n      # Arguments:\n      #   method: http method\n      #   path: api path\n      #   options: a hash contains params and headers for request\n      #\n      # Returns:\n      #   A response object\n      def call(method, path, options)", "explanation": "Here is a concise summary:\n\n**Purpose:** Create an HTTP client with customizable retry behavior and timeouts.\n\n**Functionality:**\n\n* Initializes with API base URL, number of retries, timeout period, and backoff factor.\n* Provides a method (`call`) to send HTTP requests with customizable methods, paths, and options.", "metadata": {"repo": "magiclabs/magic-admin-ruby", "file": "lib/magic-admin/http/client.rb", "chunk_number": 2, "total_chunks": 4}, "repository_explanation": "Here is a concise description:\n\n**Purpose:** A Ruby library for interacting with Magic Labs APIs.\n\n**Content:** Includes source code and documentation for managing Magic Labs resources (e.g., users, messages) using Ruby programming language.", "file_summary": "Here is a concise summary of the file 'lib/magic-admin/http/client.rb':\n\n**Purpose:** Provides a customizable HTTP client for interacting with APIs.\n\n**Functionality:** Configurable retry behavior and timeouts for making HTTP requests with customizable methods, paths, and options."}
{"code": "        url = URI(\"#{base_url}#{path}\")\n        req = http_request.request(method, url, options)\n        resp = backoff_retries(retries, backoff) do\n          base_client(url, req, timeout)\n        end\n        http_response.from_net_http(resp, req)\n      end\n\n      private\n\n      # Description:\n      #   backoff_retries implementations of retries strategy\n      #   with backoff factor\n      #\n      # Arguments:\n      #   max_retries: max retries count\n      #   backoff_factor: backoff factor for configure delay in retries\n      #   block: block of code that uses retries backoff strategy\n      #\n      # Returns:\n      #   it returns, block return object\n      def backoff_retries(max_retries, backoff_factor, &block)\n        attempts = 0\n        begin\n          attempts += 1\n          block.call\n        rescue StandardError => e\n          raise e if attempts >= max_retries\n\n          sleep_seconds = backoff_factor * (2**(attempts - 1))\n          sleep sleep_seconds\n          retry\n        end\n      end\n", "explanation": "Here is a concise summary:\n\n**Purpose:** This block makes an HTTP request with retries using a backoff strategy.\n\n**Functionality:** It attempts to make a request, then retries with increasing delays (based on a backoff factor) up to a maximum number of retries. If all retries fail, it raises the original error.", "metadata": {"repo": "magiclabs/magic-admin-ruby", "file": "lib/magic-admin/http/client.rb", "chunk_number": 3, "total_chunks": 4}, "repository_explanation": "Here is a concise description:\n\n**Purpose:** A Ruby library for interacting with Magic Labs APIs.\n\n**Content:** Includes source code and documentation for managing Magic Labs resources (e.g., users, messages) using Ruby programming language.", "file_summary": "Here is a concise summary of the file 'lib/magic-admin/http/client.rb':\n\n**Purpose:** Provides a customizable HTTP client for interacting with APIs.\n\n**Functionality:** Configurable retry behavior and timeouts for making HTTP requests with customizable methods, paths, and options."}
{"code": "      # Description:\n      #   use_ssl? provide true if url uses https protocol otherwise false\n      #\n      # Arguments:\n      #   url: max retries count\n      #\n      # Returns:\n      #   boolean value\n      def use_ssl?(url)\n        url.scheme == \"https\"\n      end\n\n      # Description:\n      #   base_client is base http request/response mechanism\n      #\n      # Arguments:\n      #   url: request url\n      #   request: request object\n      #   read_timeout: read_timeout for request\n      #\n      # Returns:\n      #   response\n      def base_client(url, request, read_timeout)\n        begin\n          Net::HTTP.start(url.host, url.port, use_ssl: use_ssl?(url)) do |http|\n            http.read_timeout = read_timeout\n            http.request(request)\n          end\n        rescue SocketError => e\n          raise APIConnectionError.new(e.message)\n        end\n      end\n\n    end\n  end\nend\n", "explanation": "Here is a concise summary:\n\n**Two methods in a Ruby module:**\n\n1. `use_ssl?`: Returns a boolean indicating whether a given URL uses HTTPS.\n2. `base_client`: Makes an HTTP request to a specified URL using Net::HTTP, handling errors and timeouts.", "metadata": {"repo": "magiclabs/magic-admin-ruby", "file": "lib/magic-admin/http/client.rb", "chunk_number": 4, "total_chunks": 4}, "repository_explanation": "Here is a concise description:\n\n**Purpose:** A Ruby library for interacting with Magic Labs APIs.\n\n**Content:** Includes source code and documentation for managing Magic Labs resources (e.g., users, messages) using Ruby programming language.", "file_summary": "Here is a concise summary of the file 'lib/magic-admin/http/client.rb':\n\n**Purpose:** Provides a customizable HTTP client for interacting with APIs.\n\n**Functionality:** Configurable retry behavior and timeouts for making HTTP requests with customizable methods, paths, and options."}
{"code": "# frozen_string_literal: true\n\nmodule MagicAdmin\n\n  module Http\n\n    # Http Request and its methods are accessible\n    # on the Magic instance by the http_client.http_request attribute.\n    # It provides methods to interact with the http_request.\n    class Request\n\n      class << self\n        # Description:\n        #   Method configure request object and provides request object\n        #   based on method argument.\n        #\n        # Arguments:\n        #   method: http method\n        #   url: get request url\n        #   options: a hash contains params and headers for request\n        #\n        # Returns:\n        #   A request object.\n        def request(method, url, options)\n          case method\n          when :get, \"get\" then new.get(url, options)\n          when :post, \"post\" then new.post(url, options)\n          else\n            raise APIError.new(\"Request method not supported.\", { http_method: method })\n          end\n        end\n      end\n\n      # Description:", "explanation": "Here is a concise summary:\n\n**Purpose:** Provides a class for making HTTP requests.\n\n**Functionality:** Allows creation of a request object based on a specified HTTP method (e.g. GET, POST) and URL. Supports creating GET and POST requests only. If an unsupported method is used, it raises an APIError exception.", "metadata": {"repo": "magiclabs/magic-admin-ruby", "file": "lib/magic-admin/http/request.rb", "chunk_number": 1, "total_chunks": 3}, "repository_explanation": "Here is a concise description:\n\n**Purpose:** A Ruby library for interacting with Magic Labs APIs.\n\n**Content:** Includes source code and documentation for managing Magic Labs resources (e.g., users, messages) using Ruby programming language.", "file_summary": "Here is a concise and holistic summary of the file 'lib/magic-admin/http/request.rb':\n\n**Summary:** This Ruby class enables creation of GET and POST HTTP requests with configurable URL, parameters, and headers. It provides methods for customizing requests with headers, query parameters, and JSON-formatted data."}
{"code": "      #   Method configure request object and provides you get request object.\n      #\n      # Arguments:\n      #   url: get request url\n      #   options: a hash contains params and headers for request\n      #\n      # Returns:\n      #   A get request object.\n      def get(url, options)\n        headers = options[:headers] || {}\n        params = options[:params] || {}\n        url = url_with_params(url, params)\n        req = Net::HTTP::Get.new(url)\n        request_with_headers(req, headers)\n      end\n\n      # Description:\n      #   Method configure request object and provides you post request object.\n      #\n      # Arguments:\n      #   url: post request url\n      #   options: a hash contains params and headers for request\n      #\n      # Returns:\n      #   A post request object.\n      def post(url, options)\n        headers = options[:headers] || {}\n        params = options[:params] || {}\n        req = Net::HTTP::Post.new(url)\n        req = request_with_headers(req, headers)\n        request_with_params(req, params)", "explanation": "Here is a concise summary:\n\n**Purpose:** Configure and return HTTP GET/POST request objects.\n\n**Functionality:**\n\n* `get`: Returns a GET request object with URL, parameters, and headers.\n* `post`: Returns a POST request object with URL, parameters, and headers.", "metadata": {"repo": "magiclabs/magic-admin-ruby", "file": "lib/magic-admin/http/request.rb", "chunk_number": 2, "total_chunks": 3}, "repository_explanation": "Here is a concise description:\n\n**Purpose:** A Ruby library for interacting with Magic Labs APIs.\n\n**Content:** Includes source code and documentation for managing Magic Labs resources (e.g., users, messages) using Ruby programming language.", "file_summary": "Here is a concise and holistic summary of the file 'lib/magic-admin/http/request.rb':\n\n**Summary:** This Ruby class enables creation of GET and POST HTTP requests with configurable URL, parameters, and headers. It provides methods for customizing requests with headers, query parameters, and JSON-formatted data."}
{"code": "      end\n\n      private\n\n      def request_with_headers(req, headers)\n        headers.each do |key, val|\n          req[key.to_s] = val\n        end\n        req\n      end\n\n      def url_with_params(url, params)\n        url.query = URI.encode_www_form(params)\n        url\n      end\n\n      def request_with_params(req, params)\n        req.body = params.to_json\n        req\n      end\n\n    end\n  end\nend\n", "explanation": "This block defines a set of private methods that modify HTTP requests in Ruby:\n\n* `request_with_headers`: adds custom headers to a request\n* `url_with_params`: appends query parameters to a URL\n* `request_with_params`: sets JSON-formatted data as the body of a request", "metadata": {"repo": "magiclabs/magic-admin-ruby", "file": "lib/magic-admin/http/request.rb", "chunk_number": 3, "total_chunks": 3}, "repository_explanation": "Here is a concise description:\n\n**Purpose:** A Ruby library for interacting with Magic Labs APIs.\n\n**Content:** Includes source code and documentation for managing Magic Labs resources (e.g., users, messages) using Ruby programming language.", "file_summary": "Here is a concise and holistic summary of the file 'lib/magic-admin/http/request.rb':\n\n**Summary:** This Ruby class enables creation of GET and POST HTTP requests with configurable URL, parameters, and headers. It provides methods for customizing requests with headers, query parameters, and JSON-formatted data."}
{"code": "# frozen_string_literal: true\n\nmodule MagicAdmin\n\n  module Http\n\n    # Http Request and its methods are accessible\n    # on the Magic instance by the http_client.http_request attribute.\n    # It provides methods to interact with the http_request.\n    class Response\n\n      # attribute reader for response data\n      attr_reader :data\n\n      # attribute reader for response body\n      attr_reader :content\n\n      # attribute reader for response status_code\n      attr_reader :status_code\n\n      # Description:\n      #   Method parse Magic API response\n      #\n      # Arguments:\n      #   http_resp: Magic API response.\n      #   request: request object.\n      #\n      # Returns:\n      #   A HTTP Response object or raise an error\n      def self.from_net_http(http_resp, request)\n        resp = Response.new(http_resp)\n        error = case http_resp\n                when Net::HTTPUnauthorized then AuthenticationError\n                when Net::HTTPBadRequest then BadRequestError", "explanation": "Here is a concise summary of the purpose and functionality of this block:\n\n**Purpose:** Define a class `Response` within the `MagicAdmin::Http` module to parse and manage HTTP responses.\n\n**Functionality:** The `Response` class has attribute readers for response data, body, and status code. It also includes a method `from_net_http` that takes an HTTP response object and request as arguments, parses the response, and returns a new `Response` instance or raises an error based on the response status.", "metadata": {"repo": "magiclabs/magic-admin-ruby", "file": "lib/magic-admin/http/response.rb", "chunk_number": 1, "total_chunks": 3}, "repository_explanation": "Here is a concise description:\n\n**Purpose:** A Ruby library for interacting with Magic Labs APIs.\n\n**Content:** Includes source code and documentation for managing Magic Labs resources (e.g., users, messages) using Ruby programming language.", "file_summary": "Here is a concise and holistic summary of the file 'lib/magic-admin/http/response.rb':\n\n**Summary:** The `Response` class in `MagicAdmin::Http` parses HTTP responses, provides attribute readers for response data, body, and status code, and raises exceptions for errors with detailed error info."}
{"code": "                when Net::HTTPForbidden then ForbiddenError\n                when Net::HTTPTooManyRequests then RateLimitingError\n                when Net::HTTPServerError then APIError\n                when Net::HTTPGatewayTimeout then APIError\n                when Net::HTTPServiceUnavailable then APIError\n                when Net::HTTPBadGateway then APIError\n                end\n        return resp unless error\n\n        raise error.new(resp.data[:message], resp.error_opt(request))\n      end\n\n      # The constructor allows you to create HTTP Response Object\n      # when your application interacting with the Magic API\n      #\n      # Arguments:\n      #   http_resp: Magic API response.\n      #\n      # Returns:\n      #   A HTTP Response object that provides access to\n      #   all the supported resources.\n      #\n      # Examples:\n      #   Response.new(<http_resp>)\n      def initialize(http_resp)\n        @content = http_resp.body\n        @data = JSON.parse(http_resp.body, symbolize_names: true)", "explanation": "**Purpose:** Handle exceptions for HTTP errors.\n\n**Functionality:** Maps specific Net::HTTP status codes to corresponding error classes, then raises a new instance of the corresponding error class with a message from the response data.", "metadata": {"repo": "magiclabs/magic-admin-ruby", "file": "lib/magic-admin/http/response.rb", "chunk_number": 2, "total_chunks": 3}, "repository_explanation": "Here is a concise description:\n\n**Purpose:** A Ruby library for interacting with Magic Labs APIs.\n\n**Content:** Includes source code and documentation for managing Magic Labs resources (e.g., users, messages) using Ruby programming language.", "file_summary": "Here is a concise and holistic summary of the file 'lib/magic-admin/http/response.rb':\n\n**Summary:** The `Response` class in `MagicAdmin::Http` parses HTTP responses, provides attribute readers for response data, body, and status code, and raises exceptions for errors with detailed error info."}
{"code": "        @status_code = http_resp.code.to_i\n      end\n\n      # Description:\n      #   Method provides you error info hash\n      #\n      # Arguments:\n      #   request: request object.\n      #\n      # Returns:\n      #   hash with following keys.\n      #   http_status:\n      #   status_code:\n      #   http_response:\n      #   http_message:\n      #   http_error_code:\n      #   http_request_params:\n      #   http_request_header:\n      #   http_method:\n      def error_opt(request)\n        {\n          http_status: data[:status],\n          http_code: status_code,\n          http_response: content,\n          http_message: data[:message],\n          http_error_code: data[:error_code],\n          http_request_params: request.body,\n          http_method: request.method\n        }\n      end\n\n    end\n  end\nend\n", "explanation": "Here is a concise summary:\n\n**Block Purpose:** Extracts error information from an HTTP response.\n\n**Functionality:** Returns a hash with detailed error info, including status codes, messages, request data, and more.", "metadata": {"repo": "magiclabs/magic-admin-ruby", "file": "lib/magic-admin/http/response.rb", "chunk_number": 3, "total_chunks": 3}, "repository_explanation": "Here is a concise description:\n\n**Purpose:** A Ruby library for interacting with Magic Labs APIs.\n\n**Content:** Includes source code and documentation for managing Magic Labs resources (e.g., users, messages) using Ruby programming language.", "file_summary": "Here is a concise and holistic summary of the file 'lib/magic-admin/http/response.rb':\n\n**Summary:** The `Response` class in `MagicAdmin::Http` parses HTTP responses, provides attribute readers for response data, body, and status code, and raises exceptions for errors with detailed error info."}
{"code": "# frozen_string_literal: true\n\nmodule MagicAdmin\n\n  module Resource\n\n    # The token resource and its methods are accessible\n    # on the Magic instance by the Token attribute.\n    # It provides methods to interact with the DID Token.\n    class Token\n\n      # attribute reader for magic client object\n      attr_reader :magic\n\n      # The constructor allows you to create a token object\n      # when your application interacting with the Magic API\n      #\n      # Arguments:\n      #   magic: A Magic object.\n      #\n      # Returns:\n      #   A token object that provides access to all the supported resources.\n      #\n      # Examples:\n      #   Token.new(<magic>)\n      def initialize(magic)\n        @magic = magic\n      end\n\n      # Description:\n      #   Method validate did_token\n      #\n      # Arguments:\n      #   did_token: A DID Token generated by a Magic user on the client-side.\n      #\n      # Returns:\n      #   true or raise an error\n      def validate(did_token)\n        time = Time.now.to_i", "explanation": "Here is a concise summary of the purpose and functionality of this block:\n\n**Purpose:** The `Token` class provides methods for interacting with the DID Token, allowing access to resources through the Magic instance.\n\n**Functionality:**\n\n* Creates a token object when initialized with a Magic object.\n* Offers a method to validate a DID Token generated by a user.", "metadata": {"repo": "magiclabs/magic-admin-ruby", "file": "lib/magic-admin/resource/token.rb", "chunk_number": 1, "total_chunks": 6}, "repository_explanation": "Here is a concise description:\n\n**Purpose:** A Ruby library for interacting with Magic Labs APIs.\n\n**Content:** Includes source code and documentation for managing Magic Labs resources (e.g., users, messages) using Ruby programming language.", "file_summary": "Here's a holistic summary of the file 'lib/magic-admin/resource/token.rb' in concise terms:\n\n**Purpose:** Validate and process Decentralized Identifier (DID) Tokens, extracting user public addresses and ensuring token integrity.\n\n**Functionality:**\n\n* Decode DID Tokens into proof and claim components\n* Validate tokens against expiration dates, audience matching, signature consistency, and non-binding feature (NBF) grace periods\n* Extract issuer information from cryptographic public addresses\n\nThis summary captures the essence of the file's purpose and functionality, highlighting its focus on validating and processing DID Tokens to ensure user authentication and token integrity."}
{"code": "        proof, claim = decode(did_token)\n        rec_address = rec_pub_address(claim, proof).to_s\n\n        validate_public_address!(rec_address, did_token)\n        validate_claim_fields!(claim)\n        validate_claim_ext!(time, claim[\"ext\"])\n        validate_claim_nbf!(time, claim[\"nbf\"])\n        validate_claim_aud!(magic.client_id, claim[\"aud\"])\n      end\n\n      # Description:\n      #   Method Decodes a DID Token from a Base64 string into\n      #   a tuple of its individual components: proof and claim.\n      #   This method allows you decode the DID Token\n      #   and inspect the token\n      #\n      # Arguments:\n      #   did_token: A DID Token generated by a Magic user on the client-side.\n      #\n      # Returns:\n      #   An array containing proof and claim or raise an error\n      def decode(did_token)\n        proof = nil\n        claim = nil\n        begin\n          token_array = JSON.parse(base64_decode(did_token))\n          proof = token_array[0]\n          claim = JSON.parse(token_array[1])", "explanation": "Here is a concise summary:\n\n**Function:** Decode DID Token from Base64 string into proof and claim components.\n\n**Purpose:** To inspect and validate individual parts of a DID (Decentralized Identifier) Token generated by Magic users on the client-side.\n\n**Key Functions:**\n\n1. Decode DID Token into proof and claim.\n2. Validate public address, claim fields, expiration times, and audience.", "metadata": {"repo": "magiclabs/magic-admin-ruby", "file": "lib/magic-admin/resource/token.rb", "chunk_number": 2, "total_chunks": 6}, "repository_explanation": "Here is a concise description:\n\n**Purpose:** A Ruby library for interacting with Magic Labs APIs.\n\n**Content:** Includes source code and documentation for managing Magic Labs resources (e.g., users, messages) using Ruby programming language.", "file_summary": "Here's a holistic summary of the file 'lib/magic-admin/resource/token.rb' in concise terms:\n\n**Purpose:** Validate and process Decentralized Identifier (DID) Tokens, extracting user public addresses and ensuring token integrity.\n\n**Functionality:**\n\n* Decode DID Tokens into proof and claim components\n* Validate tokens against expiration dates, audience matching, signature consistency, and non-binding feature (NBF) grace periods\n* Extract issuer information from cryptographic public addresses\n\nThis summary captures the essence of the file's purpose and functionality, highlighting its focus on validating and processing DID Tokens to ensure user authentication and token integrity."}
{"code": "          validate_claim_fields!(claim)\n        rescue JSON::ParserError, ArgumentError\n          raise DIDTokenError, \"DID Token is malformed\"\n        end\n        [proof, claim]\n      end\n\n      # Description:\n      #   Method parse public_address and extract issuer\n      #\n      # Arguments:\n      #   public_address: Cryptographic public address of the Magic User.\n      #\n      # Returns:\n      #   issuer info\n      def construct_issuer_with_public_address(public_address)\n        \"did:ethr:#{public_address}\"\n      end\n\n      # Description:\n      #   Method parse did_token and extract issuer\n      #\n      # Arguments:\n      #   did_token: A DID Token generated by a Magic user on the client-side.\n      #\n      # Returns:\n      #   issuer info\n      def get_issuer(did_token)\n        decode(did_token).last[\"iss\"]\n      end\n\n      # Description:\n      #   Method parse did_token and extract  cryptographic public_address\n      #\n      # Arguments:\n      #   did_token: A DID Token generated by a Magic user on the client-side.", "explanation": "Here is a concise summary:\n\nThis block of code validates claim fields, parses DID tokens, and extracts issuer information from cryptographic public addresses. It contains two main methods:\n\n1. `construct_issuer_with_public_address`: creates an issuer info string from a public address.\n2. `get_issuer` and `validate_claim_fields!`: parse DID tokens to extract issuer info and validate claim fields, respectively.\n\nLet me know if you'd like me to elaborate on any specific aspect!", "metadata": {"repo": "magiclabs/magic-admin-ruby", "file": "lib/magic-admin/resource/token.rb", "chunk_number": 3, "total_chunks": 6}, "repository_explanation": "Here is a concise description:\n\n**Purpose:** A Ruby library for interacting with Magic Labs APIs.\n\n**Content:** Includes source code and documentation for managing Magic Labs resources (e.g., users, messages) using Ruby programming language.", "file_summary": "Here's a holistic summary of the file 'lib/magic-admin/resource/token.rb' in concise terms:\n\n**Purpose:** Validate and process Decentralized Identifier (DID) Tokens, extracting user public addresses and ensuring token integrity.\n\n**Functionality:**\n\n* Decode DID Tokens into proof and claim components\n* Validate tokens against expiration dates, audience matching, signature consistency, and non-binding feature (NBF) grace periods\n* Extract issuer information from cryptographic public addresses\n\nThis summary captures the essence of the file's purpose and functionality, highlighting its focus on validating and processing DID Tokens to ensure user authentication and token integrity."}
{"code": "      #\n      # Returns:\n      #   cryptographic public address of the Magic User\n      #   who generated the supplied DID Token.\n      def get_public_address(did_token)\n        get_issuer(did_token).split(\":\").last\n      end\n\n      private\n\n      def base64_decode(did_token)\n        Base64.urlsafe_decode64(did_token)\n      end\n\n      def personal_recover(claim, proof)\n        Eth::Signature.personal_recover(JSON.dump(claim), proof)\n      end\n\n      def rec_pub_address(claim, proof)\n        Eth::Util.public_key_to_address personal_recover(claim, proof)\n      end\n\n      def claim_fields\n        %w[iat ext iss sub aud nbf tid]\n      end\n\n      def validate_claim_fields!(claim)\n        missing_fields = claim_fields - claim.keys\n        return true unless missing_fields.any?\n\n        message = \"DID Token missing required fields: %s\"\n        raise DIDTokenError, message % missing_fields.join(\", \")\n      end\n\n      def validate_public_address!(rec_address, did_token)", "explanation": "Here is a concise summary:\n\nThis block of code defines methods for validating and processing Decentralized Identifier (DID) Tokens. The main purpose is to extract the public address of the user who generated the token. It includes functions for decoding tokens, recovering signatures, and validating claim fields.", "metadata": {"repo": "magiclabs/magic-admin-ruby", "file": "lib/magic-admin/resource/token.rb", "chunk_number": 4, "total_chunks": 6}, "repository_explanation": "Here is a concise description:\n\n**Purpose:** A Ruby library for interacting with Magic Labs APIs.\n\n**Content:** Includes source code and documentation for managing Magic Labs resources (e.g., users, messages) using Ruby programming language.", "file_summary": "Here's a holistic summary of the file 'lib/magic-admin/resource/token.rb' in concise terms:\n\n**Purpose:** Validate and process Decentralized Identifier (DID) Tokens, extracting user public addresses and ensuring token integrity.\n\n**Functionality:**\n\n* Decode DID Tokens into proof and claim components\n* Validate tokens against expiration dates, audience matching, signature consistency, and non-binding feature (NBF) grace periods\n* Extract issuer information from cryptographic public addresses\n\nThis summary captures the essence of the file's purpose and functionality, highlighting its focus on validating and processing DID Tokens to ensure user authentication and token integrity."}
{"code": "        return true if rec_address.eql? get_public_address(did_token)\n\n        message = \"Signature mismatch between 'proof' and 'claim'.\"\n        raise DIDTokenError, message\n      end\n\n      def validate_claim_ext!(time, claim_ext)\n        return true unless time > claim_ext\n\n        message = \"Given DID token has expired. Please generate a new one.\"\n        raise DIDTokenError, message\n      end\n\n      def apply_nbf_grace_period(claim_nbf)\n        claim_nbf - MagicAdmin::Config.nbf_grace_period\n      end\n\n      def validate_claim_nbf!(time, claim_nbf)\n        return true unless time < apply_nbf_grace_period(claim_nbf)\n\n        message = \"Given DID token cannot be used at this time.\"\n        raise DIDTokenError, message\n      end\n\n      def validate_claim_aud!(client_id, claim_aud)\n        \n        return true unless client_id != claim_aud\n\n        message = \"Audience does not match client ID. Please ensure your secret key matches the application which generated the DID token.\"", "explanation": "**Purpose:** Validate various aspects of a DID (Decentralized Identifier) token.\n\n**Functionality:**\n\n* Verifies signature consistency\n* Checks for expiration date\n* Applies a non-binding feature (NBF) grace period\n* Ensures correct audience matching between client ID and claim audience", "metadata": {"repo": "magiclabs/magic-admin-ruby", "file": "lib/magic-admin/resource/token.rb", "chunk_number": 5, "total_chunks": 6}, "repository_explanation": "Here is a concise description:\n\n**Purpose:** A Ruby library for interacting with Magic Labs APIs.\n\n**Content:** Includes source code and documentation for managing Magic Labs resources (e.g., users, messages) using Ruby programming language.", "file_summary": "Here's a holistic summary of the file 'lib/magic-admin/resource/token.rb' in concise terms:\n\n**Purpose:** Validate and process Decentralized Identifier (DID) Tokens, extracting user public addresses and ensuring token integrity.\n\n**Functionality:**\n\n* Decode DID Tokens into proof and claim components\n* Validate tokens against expiration dates, audience matching, signature consistency, and non-binding feature (NBF) grace periods\n* Extract issuer information from cryptographic public addresses\n\nThis summary captures the essence of the file's purpose and functionality, highlighting its focus on validating and processing DID Tokens to ensure user authentication and token integrity."}
{"code": "        raise DIDTokenError, message\n      end\n\n    end\n  end\nend\n\n", "explanation": "This appears to be a Ruby code snippet, specifically an exception handler. The purpose is to:\n\nRaise an error (DIDTokenError) with a specified \"message\" when encountered.", "metadata": {"repo": "magiclabs/magic-admin-ruby", "file": "lib/magic-admin/resource/token.rb", "chunk_number": 6, "total_chunks": 6}, "repository_explanation": "Here is a concise description:\n\n**Purpose:** A Ruby library for interacting with Magic Labs APIs.\n\n**Content:** Includes source code and documentation for managing Magic Labs resources (e.g., users, messages) using Ruby programming language.", "file_summary": "Here's a holistic summary of the file 'lib/magic-admin/resource/token.rb' in concise terms:\n\n**Purpose:** Validate and process Decentralized Identifier (DID) Tokens, extracting user public addresses and ensuring token integrity.\n\n**Functionality:**\n\n* Decode DID Tokens into proof and claim components\n* Validate tokens against expiration dates, audience matching, signature consistency, and non-binding feature (NBF) grace periods\n* Extract issuer information from cryptographic public addresses\n\nThis summary captures the essence of the file's purpose and functionality, highlighting its focus on validating and processing DID Tokens to ensure user authentication and token integrity."}
{"code": "# frozen_string_literal: true\n\nmodule MagicAdmin\n\n  module Resource\n\n    # The user resource and its methods are accessible\n    # on the Magic instance by the User attribute.\n    # It provides methods to interact with the User.\n    class User\n\n      # attribute reader for magic client object\n      attr_reader :magic\n\n      # The constructor allows you to create user object\n      # when your application interacting with the Magic API\n      #\n      # Arguments:\n      #   magic: A Magic object.\n      #\n      # Returns:\n      #   A user object that provides access to all the supported resources.\n      #\n      # Examples:\n      #   User.new(<magic>)\n      def initialize(magic)\n        @magic = magic\n      end\n\n      # Description:\n      #   Method Retrieves information about the user by\n      #   the supplied issuer\n      #\n      # Arguments:\n      #   issuer: Extracted iss component of DID Token generated by a Magic user\n      #     on the client-side.", "explanation": "Here is a concise summary of the block:\n\n**Purpose:** The `User` class provides methods for interacting with a User resource in the Magic Admin API.\n\n**Functionality:** It allows you to create a User object from a Magic object, and retrieve user information by issuer ID.", "metadata": {"repo": "magiclabs/magic-admin-ruby", "file": "lib/magic-admin/resource/user.rb", "chunk_number": 1, "total_chunks": 6}, "repository_explanation": "Here is a concise description:\n\n**Purpose:** A Ruby library for interacting with Magic Labs APIs.\n\n**Content:** Includes source code and documentation for managing Magic Labs resources (e.g., users, messages) using Ruby programming language.", "file_summary": "Here is a holistic summary of the file 'lib/magic-admin/resource/user.rb':\n\n**Purpose:** Retrieve metadata about a Magic user.\n\n**Functionality:** Provides methods for interacting with a User resource, including retrieving metadata by issuer ID or Ethereum public address, logging out users based on DID Token, issuer, or public address, and filtering results by wallet type."}
{"code": "      #   wallet_type: The type of wallet to retrieve.  To query specific wallet(s),\n      #     the value passed must be consistent with the enumerated values in\n      #     MagicAdmin::Resource::WalletType. ALL wallets will be returned if wallet_type=ANY\n      #     is passed. If the wallet_type is None or does not match any WalletType\n      #     enums, then no wallets are returned.\n      #\n      # Returns:\n      #   Metadata information about the user\n      def get_metadata_by_issuer(issuer, wallet_type=MagicAdmin::Resource::WalletType::NONE)\n        headers = MagicAdmin::Util.headers(magic.secret_key)\n        options = { params: { issuer: issuer , wallet_type: wallet_type }, headers: headers }\n        magic.http_client\n             .call(:get, \"/v1/admin/auth/user/get\", options)\n      end\n\n      # Description:\n      #   Method Retrieves information about the user by\n      #   the supplied public_address and wallet type\n      #\n      # Arguments:", "explanation": "Here is a concise summary:\n\n**Functionality:** Retrieves metadata information about a user.\n\n**Purpose:** Returns user data based on issuer, wallet type (optional), and API authentication.\n\nNote that I excluded unnecessary details to keep the summary brief and focused on the main purpose and functionality of the block.", "metadata": {"repo": "magiclabs/magic-admin-ruby", "file": "lib/magic-admin/resource/user.rb", "chunk_number": 2, "total_chunks": 6}, "repository_explanation": "Here is a concise description:\n\n**Purpose:** A Ruby library for interacting with Magic Labs APIs.\n\n**Content:** Includes source code and documentation for managing Magic Labs resources (e.g., users, messages) using Ruby programming language.", "file_summary": "Here is a holistic summary of the file 'lib/magic-admin/resource/user.rb':\n\n**Purpose:** Retrieve metadata about a Magic user.\n\n**Functionality:** Provides methods for interacting with a User resource, including retrieving metadata by issuer ID or Ethereum public address, logging out users based on DID Token, issuer, or public address, and filtering results by wallet type."}
{"code": "      #   public_address: Extracted The user's Ethereum public address component\n      #     of DID Token generated by a Magic user on the client-side.\n      #   wallet_type: The type of wallet to retrieve.  To query specific wallet(s), \n      #     the value passed must be consistent with the enumerated values in \n      #     MagicAdmin::Resource::WalletType. ALL wallets will be returned if wallet_type=ANY\n      #     is passed. If the wallet_type is None or does not match any WalletType \n      #     enums, then no wallets are returned.\n      #\n      # Returns:\n      #   Metadata information about the user\n      def get_metadata_by_public_address(public_address, wallet_type=MagicAdmin::Resource::WalletType::NONE)\n        issuer = token.construct_issuer_with_public_address(public_address)\n        get_metadata_by_issuer(issuer, wallet_type)\n      end\n\n      # Description:\n      #   Method Retrieves information about the user by\n      #   the supplied DID Token and wallet type\n      #\n      # Arguments:", "explanation": "Here is a concise summary:\n\n**Purpose:** Retrieve metadata about a user.\n\n**Functionality:** Uses the Ethereum public address from a Magic-generated DID Token to fetch metadata, with optional filtering by wallet type.", "metadata": {"repo": "magiclabs/magic-admin-ruby", "file": "lib/magic-admin/resource/user.rb", "chunk_number": 3, "total_chunks": 6}, "repository_explanation": "Here is a concise description:\n\n**Purpose:** A Ruby library for interacting with Magic Labs APIs.\n\n**Content:** Includes source code and documentation for managing Magic Labs resources (e.g., users, messages) using Ruby programming language.", "file_summary": "Here is a holistic summary of the file 'lib/magic-admin/resource/user.rb':\n\n**Purpose:** Retrieve metadata about a Magic user.\n\n**Functionality:** Provides methods for interacting with a User resource, including retrieving metadata by issuer ID or Ethereum public address, logging out users based on DID Token, issuer, or public address, and filtering results by wallet type."}
{"code": "      #   did_token: A DID Token generated by a Magic user on the client-side.\n      #   wallet_type: The type of wallet to retrieve.  To query specific wallet(s), \n      #     the value passed must be consistent with the enumerated values in \n      #     MagicAdmin::Resource::WalletType. ALL wallets will be returned if wallet_type=ANY\n      #     is passed. If the wallet_type is None or does not match any WalletType \n      #     enums, then no wallets are returned.\n      #\n      # Returns:\n      #   Metadata information about the user\n      def get_metadata_by_token(did_token, wallet_type=MagicAdmin::Resource::WalletType::NONE)\n        issuer = token.get_issuer(did_token)\n        get_metadata_by_issuer(issuer, wallet_type)\n      end\n\n      # Description:\n      #   Method logs a user out of all Magic SDK sessions by\n      #   the supplied issuer\n      #\n      # Arguments:\n      #   issuer: Extracted iss component of DID Token generated by a Magic user\n      #     on the client-side.\n      #\n      # Returns:", "explanation": "Here is a concise summary:\n\n**Purpose:** Retrieves metadata about a Magic user.\n\n**Functionality:** Accepts a DID token and optional wallet type, retrieves issuer, and calls `get_metadata_by_issuer` method with the results.", "metadata": {"repo": "magiclabs/magic-admin-ruby", "file": "lib/magic-admin/resource/user.rb", "chunk_number": 4, "total_chunks": 6}, "repository_explanation": "Here is a concise description:\n\n**Purpose:** A Ruby library for interacting with Magic Labs APIs.\n\n**Content:** Includes source code and documentation for managing Magic Labs resources (e.g., users, messages) using Ruby programming language.", "file_summary": "Here is a holistic summary of the file 'lib/magic-admin/resource/user.rb':\n\n**Purpose:** Retrieve metadata about a Magic user.\n\n**Functionality:** Provides methods for interacting with a User resource, including retrieving metadata by issuer ID or Ethereum public address, logging out users based on DID Token, issuer, or public address, and filtering results by wallet type."}
{"code": "      #   Magic Response\n      def logout_by_issuer(issuer)\n        headers = MagicAdmin::Util.headers(magic.secret_key)\n        options = { params: { issuer: issuer }, headers: headers }\n        magic.http_client\n             .call(:post, \"/v2/admin/auth/user/logout\", options)\n      end\n\n      # Description:\n      #   Method logs a user out of all Magic SDK sessions by\n      #   the supplied public_address\n      #\n      # Arguments:\n      #   public_address: Extracted the user's Ethereum public address component\n      #   of DID Token generated by a Magic user on the client-side.\n      #\n      # Returns:\n      #   Magic Response\n      def logout_by_public_address(public_address)\n        issuer = token.construct_issuer_with_public_address(public_address)\n        logout_by_issuer(issuer)\n      end\n\n      # Description:\n      #   Method logs a user out of all Magic SDK sessions by\n      #   the supplied DID Token\n      #\n      # Arguments:", "explanation": "**Purpose:** Two methods for logging users out of Magic SDK sessions.\n\n**Functionality:**\n\n1. `logout_by_issuer`: Logs out a user by issuer using the provided secret key.\n2. `logout_by_public_address` and `logout_by_did_token`: Log out a user by Ethereum public address or DID Token, respectively, and delegate to `logout_by_issuer`.", "metadata": {"repo": "magiclabs/magic-admin-ruby", "file": "lib/magic-admin/resource/user.rb", "chunk_number": 5, "total_chunks": 6}, "repository_explanation": "Here is a concise description:\n\n**Purpose:** A Ruby library for interacting with Magic Labs APIs.\n\n**Content:** Includes source code and documentation for managing Magic Labs resources (e.g., users, messages) using Ruby programming language.", "file_summary": "Here is a holistic summary of the file 'lib/magic-admin/resource/user.rb':\n\n**Purpose:** Retrieve metadata about a Magic user.\n\n**Functionality:** Provides methods for interacting with a User resource, including retrieving metadata by issuer ID or Ethereum public address, logging out users based on DID Token, issuer, or public address, and filtering results by wallet type."}
{"code": "      #   did_token: A DID Token generated by a Magic user on the client-side.\n      #\n      # Returns:\n      #   Magic Response\n      def logout_by_token(did_token)\n        issuer = token.get_issuer(did_token)\n        logout_by_issuer(issuer)\n      end\n\n      private\n\n      def token\n        magic.token\n      end\n\n    end\n  end\nend\n", "explanation": "Here is a concise summary:\n\nThis block defines a method `logout_by_token` that logs out a Magic user based on a DID Token, which is verified by checking the issuer. It uses the `token` helper function to retrieve the token instance.", "metadata": {"repo": "magiclabs/magic-admin-ruby", "file": "lib/magic-admin/resource/user.rb", "chunk_number": 6, "total_chunks": 6}, "repository_explanation": "Here is a concise description:\n\n**Purpose:** A Ruby library for interacting with Magic Labs APIs.\n\n**Content:** Includes source code and documentation for managing Magic Labs resources (e.g., users, messages) using Ruby programming language.", "file_summary": "Here is a holistic summary of the file 'lib/magic-admin/resource/user.rb':\n\n**Purpose:** Retrieve metadata about a Magic user.\n\n**Functionality:** Provides methods for interacting with a User resource, including retrieving metadata by issuer ID or Ethereum public address, logging out users based on DID Token, issuer, or public address, and filtering results by wallet type."}
{"code": "# frozen_string_literal: true\n\nmodule MagicAdmin\n    module Resource\n        class WalletType\n            ETH = \"ETH\"\n            HARMONY = \"HARMONY\"\n            ICON = \"ICON\"\n            FLOW = \"FLOW\"\n            TEZOS = \"TEZOS\"\n            ZILLIQA = \"ZILLIQA\"\n            POLKADOT = \"POLKADOT\"\n            SOLANA = \"SOLANA\"\n            AVAX = \"AVAX\"\n            ALGOD = \"ALGOD\"\n            COSMOS = \"COSMOS\"\n            CELO = \"CELO\"\n            BITCOIN = \"BITCOIN\"\n            NEAR = \"NEAR\"\n            HELIUM = \"HELIUM\"\n            CONFLUX = \"CONFLUX\"\n            TERRA = \"TERRA\"\n            TAQUITO = \"TAQUITO\"\n            ED = \"ED\"\n            HEDERA = \"HEDERA\"\n            NONE = \"NONE\"\n            ANY = \"ANY\"\n        end\n    end\nend", "explanation": "Here is a concise summary:\n\nThis block defines a Ruby module named `MagicAdmin::Resource::WalletType` that contains constants for various cryptocurrency names (e.g. ETH, BITCOIN, SOLANA).", "metadata": {"repo": "magiclabs/magic-admin-ruby", "file": "lib/magic-admin/resource/wallet.rb", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise description:\n\n**Purpose:** A Ruby library for interacting with Magic Labs APIs.\n\n**Content:** Includes source code and documentation for managing Magic Labs resources (e.g., users, messages) using Ruby programming language.", "file_summary": "Unfortunately, you didn't provide any code blocks summaries.\n\nHowever, based on your prompt, I'll assume you meant to provide some code block summaries related to 'lib/magic-admin/resource/wallet.rb'. If that's correct, please share them with me, and I'll create a concise summary for you. \n\nIn the meantime, here is my attempt at creating a concise summary without any information:\n\nThe file 'lib/magic-admin/resource/wallet.rb' defines a Ruby module related to wallet functionality."}
{"code": "# frozen_string_literal: true\n\nmodule MagicAdmin\n\n  module Util\n\n    # Description:\n    #   Method provides you platform information hash\n    #\n    # Returns:\n    #   hash with following keys.\n    #       platform:\n    #       language:\n    #       language_version:\n    #       user_name:\n    def self.platform_info\n      {\n        platform: Config.platform,\n        language: Config.language,\n        language_version: Config.language_version,\n        user_name: Config.user_name\n      }\n    end\n\n    # Description:\n    #   Method provides you user agent hash\n    #\n    # Returns:\n    #   hash with following keys.\n    #       sdk_version:\n    #       publisher:\n    #       platform:\n    def self.user_agent\n      {\n        sdk_version: MagicAdmin::VERSION,\n        publisher: Config.publisher,\n        platform: platform_info\n      }\n    end\n\n    # Description:\n    #   Method provides you request headers hash\n    #\n    # Arguments:\n    #   secret_key: API Secret Key.\n    #\n    # Returns:\n    #   hash with following keys.", "explanation": "Here is a concise summary:\n\n**Purpose:** The `Util` module in the `MagicAdmin` gem provides methods for generating platform information, user agent data, and request headers.\n\n**Functionality:**\n\n* `platform_info`: Returns a hash containing platform info (e.g., language, version).\n* `user_agent`: Returns a hash with SDK version, publisher info, and platform info.\n* `request_headers`: Returns a hash with request headers (not fully shown).", "metadata": {"repo": "magiclabs/magic-admin-ruby", "file": "lib/magic-admin/util.rb", "chunk_number": 1, "total_chunks": 2}, "repository_explanation": "Here is a concise description:\n\n**Purpose:** A Ruby library for interacting with Magic Labs APIs.\n\n**Content:** Includes source code and documentation for managing Magic Labs resources (e.g., users, messages) using Ruby programming language.", "file_summary": "Here is a concise summary:\n\nThe `Util` module in `lib/magic-admin/util.rb` generates platform information, user agent data, and request headers for the MagicAdmin gem. It provides methods to create hashes containing platform info, user agent data, and request headers. The file also defines a method to generate a set of HTTP headers with a secret key for API requests."}
{"code": "    #       content-type:\n    #       X-Magic-Secret-Key:\n    #       User-Agent:\n    def self.headers(secret_key)\n      {\n        \"content-type\": \"application/json\",\n        \"X-Magic-Secret-Key\": secret_key,\n        \"User-Agent\": Util.user_agent\n      }\n    end\n\n  end\nend\n", "explanation": "**Summary**\n\nThis block defines a method `self.headers(secret_key)` that returns a hash of HTTP headers, including:\n\n* `content-type`: set to `application/json`\n* `X-Magic-Secret-Key`: set to a provided secret key\n* `User-Agent`: set to a value determined by the `Util.user_agent` function\n\n**Purpose**\n\nTo generate a set of HTTP headers for API requests.", "metadata": {"repo": "magiclabs/magic-admin-ruby", "file": "lib/magic-admin/util.rb", "chunk_number": 2, "total_chunks": 2}, "repository_explanation": "Here is a concise description:\n\n**Purpose:** A Ruby library for interacting with Magic Labs APIs.\n\n**Content:** Includes source code and documentation for managing Magic Labs resources (e.g., users, messages) using Ruby programming language.", "file_summary": "Here is a concise summary:\n\nThe `Util` module in `lib/magic-admin/util.rb` generates platform information, user agent data, and request headers for the MagicAdmin gem. It provides methods to create hashes containing platform info, user agent data, and request headers. The file also defines a method to generate a set of HTTP headers with a secret key for API requests."}
{"code": "# frozen_string_literal: true\n\nmodule MagicAdmin\n  VERSION = \"1.0.0\"\nend\n", "explanation": "**Summary:** This is a Ruby module declaration with a constant definition for the version of the `MagicAdmin` gem or library.", "metadata": {"repo": "magiclabs/magic-admin-ruby", "file": "lib/magic-admin/version.rb", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise description:\n\n**Purpose:** A Ruby library for interacting with Magic Labs APIs.\n\n**Content:** Includes source code and documentation for managing Magic Labs resources (e.g., users, messages) using Ruby programming language.", "file_summary": "Here is a concise and to the point summary:\n\n**File Summary:**\n\"Declares the MagicAdmin gem/library version as a constant.\""}
{"code": "# frozen_string_literal: true\n\n$LOAD_PATH.unshift(::File.join(::File.dirname(__FILE__), \"lib\"))\n\nrequire \"magic-admin/version\"\n\nGem::Specification.new do |s|\n  s.name = \"magic-admin\"\n  s.version = MagicAdmin::VERSION\n  s.required_ruby_version = \">= 2.5.0\"\n  s.summary = \"Ruby bindings for the Magic Admin API\"\n\n  s.description = \"The Magic Admin Ruby provides convenient ways \" \\\n                  \"for developers to interact with Magic API endpoints \" \\\n                  \"and an array of utilities to handle DID Token.\"\n  s.author = \"Magic Labs Inc.\"\n  s.email = \"support@magic.link\"\n  s.homepage = \"https://docs.magic.link/admin-sdk/ruby\"\n  s.license = \"MIT\"\n\n  s.metadata = {\n  }\n\n  s.add_dependency \"eth\", \"~> 0.5\"\n  s.add_development_dependency \"byebug\", \"~> 11.0\"\n  s.add_development_dependency \"rspec\", \"~> 3.9\"\n  s.add_development_dependency \"rubocop\", \"~> 0.80\"\n  s.add_development_dependency \"webmock\", \"~> 3.8\"\n  s.add_development_dependency \"simplecov\", \"~> 0.19\"\n\n  s.files = `git ls-files`.split(\"\\n\")", "explanation": "**Summary:**\n\nThis block is a Ruby Gem specification file that defines the Magic Admin gem. It specifies the gem's name, version, required Ruby version, summary, description, authors, and dependencies, including test and development dependencies. \n\n**Key functionality:**\n\n* Defines the Magic Admin gem's metadata\n* Specifies dependencies for the gem to function correctly", "metadata": {"repo": "magiclabs/magic-admin-ruby", "file": "magic-admin.gemspec", "chunk_number": 1, "total_chunks": 2}, "repository_explanation": "Here is a concise description:\n\n**Purpose:** A Ruby library for interacting with Magic Labs APIs.\n\n**Content:** Includes source code and documentation for managing Magic Labs resources (e.g., users, messages) using Ruby programming language.", "file_summary": "Here is a concise summary of the 'magic-admin.gemspec' file:\n\n**Summary:** This Ruby Gem specification file defines the Magic Admin gem's metadata and dependencies, enabling its correct functioning and testing."}
{"code": "  s.test_files    = `git ls-files -- test/*`.split(\"\\n\")\n  s.executables   = `git ls-files -- bin/*`.split(\"\\n\")\n                                           .map { |f| ::File.basename(f) }\n  s.require_paths = [\"lib\"]\nend\n", "explanation": "This block configures a Gemfile by specifying:\n\n* Test files: executable test files in the test directory\n* Executables: executable binaries in the bin directory, with just their file names (not paths)\n* Require paths: the lib directory as a required path", "metadata": {"repo": "magiclabs/magic-admin-ruby", "file": "magic-admin.gemspec", "chunk_number": 2, "total_chunks": 2}, "repository_explanation": "Here is a concise description:\n\n**Purpose:** A Ruby library for interacting with Magic Labs APIs.\n\n**Content:** Includes source code and documentation for managing Magic Labs resources (e.g., users, messages) using Ruby programming language.", "file_summary": "Here is a concise summary of the 'magic-admin.gemspec' file:\n\n**Summary:** This Ruby Gem specification file defines the Magic Admin gem's metadata and dependencies, enabling its correct functioning and testing."}
{"code": "# frozen_string_literal: true\n\nrequire \"spec_helper\"\n\ndescribe MagicAdmin::Http::Client do\n  let(:api_base) { MagicAdmin::Config.api_base }\n  let(:retries) { 3 }\n  let(:backoff) { 0.02 }\n  let(:timeout) { 5 }\n  let(:stub_response_body) do\n    { \"data\" => {}, \"error_code\" => \"\", \"message\" => \"\", \"status\" => \"ok\" }\n  end\n\n  subject { described_class.new(api_base, retries, timeout, backoff) }\n\n  it \"present attr_reader\" do\n    expect(subject).to respond_to(:retries)\n    expect(subject).to respond_to(:backoff)\n    expect(subject).to respond_to(:timeout)\n    expect(subject).to respond_to(:base_url)\n    expect(subject).to respond_to(:http_request)\n    expect(subject).to respond_to(:http_response)\n  end\n\n  context \"#call\" do\n    it \"calling methods\" do\n      stub_request(:get, \"https://api.magic.link//v1/admin/auth/user/get\")\n        .to_return(status: 200, body: stub_response_body.to_json, headers: {})\n      expect(subject).to receive(:backoff_retries)\n        .with(subject.retries, subject.backoff)", "explanation": "Here is a concise summary:\n\nThis block appears to be a RSpec test for the `MagicAdmin::Http::Client` class. It defines a test suite with various configurations (e.g., API base URL, retries, backoff, timeout) and verifies that the client instance responds to certain methods and behaves as expected when calling its `call` method.", "metadata": {"repo": "magiclabs/magic-admin-ruby", "file": "test/http/client_test.rb", "chunk_number": 1, "total_chunks": 3}, "repository_explanation": "Here is a concise description:\n\n**Purpose:** A Ruby library for interacting with Magic Labs APIs.\n\n**Content:** Includes source code and documentation for managing Magic Labs resources (e.g., users, messages) using Ruby programming language.", "file_summary": "Here is a concise summary of the file 'test/http/client_test.rb':\n\n**Summary:** This RSpec test suite for `MagicAdmin::Http::Client` class ensures proper HTTP response handling, private method behavior, and client configuration settings are correct."}
{"code": "      expect(subject.http_response).to receive(:from_net_http)\n\n      subject.call(:get, \"/v1/admin/auth/user/get\", {})\n    end\n  end\n\n  describe \"private methods\" do\n    context \"#backoff_retries\" do\n      describe \"when raise StandardError error\" do\n        it \"retries until attempts >= max_retries\" do\n          block = proc {}\n          max_retries = 3\n\n          expect(block).to receive(:call)\n            .and_raise(StandardError)\n            .exactly(max_retries)\n            .times\n\n          expect do\n            subject.send(:backoff_retries,\n                         max_retries,\n                         backoff,\n                         &block)\n          end .to raise_error(StandardError)\n        end\n      end\n    end\n\n    context \"#use_ssl?\" do\n      it \"return true when url schema is https\" do\n        url_with_scheme = double(\"url\", scheme: \"https\")\n        expect(subject.send(:use_ssl?, url_with_scheme)).to be_truthy\n      end\n    end\n\n    context \"#base_client\" do", "explanation": "Here is a concise summary:\n\n**Block Purpose:** Test suite for an API client or wrapper.\n\n**Functionality:**\n\n* Tests HTTP response handling and private methods.\n* Verifies behavior of private methods:\n\t+ `backoff_retries`: retries until max attempts reached when encountering errors.\n\t+ `use_ssl?`: returns true if URL schema is HTTPS.\n\t+ `base_client`: (method not fully described in the snippet).", "metadata": {"repo": "magiclabs/magic-admin-ruby", "file": "test/http/client_test.rb", "chunk_number": 2, "total_chunks": 3}, "repository_explanation": "Here is a concise description:\n\n**Purpose:** A Ruby library for interacting with Magic Labs APIs.\n\n**Content:** Includes source code and documentation for managing Magic Labs resources (e.g., users, messages) using Ruby programming language.", "file_summary": "Here is a concise summary of the file 'test/http/client_test.rb':\n\n**Summary:** This RSpec test suite for `MagicAdmin::Http::Client` class ensures proper HTTP response handling, private method behavior, and client configuration settings are correct."}
{"code": "      it \"calling http request with arguments\" do\n        url = double(\"url\", scheme: \"https\", host: \"localhost\", port: 3000)\n        request = double(\"request\")\n        read_timeout = double(\"read_timeout\")\n\n        expect(Net::HTTP).to receive(:start)\n          .with(url.host, url.port, use_ssl: true)\n\n        subject.send(:base_client, url, request, read_timeout)\n      end\n    end\n  end\nend\n", "explanation": "This block simulates a HTTP call with arguments using RSpec's `expect` syntax. It sets up mock objects for URL, request, and read timeout, then tests that `Net::HTTP.start` is called with the correct parameters when `subject.base_client` is invoked.", "metadata": {"repo": "magiclabs/magic-admin-ruby", "file": "test/http/client_test.rb", "chunk_number": 3, "total_chunks": 3}, "repository_explanation": "Here is a concise description:\n\n**Purpose:** A Ruby library for interacting with Magic Labs APIs.\n\n**Content:** Includes source code and documentation for managing Magic Labs resources (e.g., users, messages) using Ruby programming language.", "file_summary": "Here is a concise summary of the file 'test/http/client_test.rb':\n\n**Summary:** This RSpec test suite for `MagicAdmin::Http::Client` class ensures proper HTTP response handling, private method behavior, and client configuration settings are correct."}
{"code": "# frozen_string_literal: true\n\nrequire \"spec_helper\"\n\ndescribe MagicAdmin::Http::Request do\n  let(:url) { URI(\"https://api.magic.link/v1/admin/auth/user/get\") }\n  let(:options) { {} }\n  describe \"class methods\" do\n    context \".request\" do\n      it \"raise error when method is not [GET POST]\" do\n        expect do\n          described_class.request(:put,\n                                  url,\n                                  options)\n        end .to raise_error(MagicAdmin::APIError,\n                            \"Request method not supported.\")\n      end\n\n      it \"when method is GET\" do\n        expect_any_instance_of(described_class).to receive(:get)\n          .with(url, options)\n\n        described_class.request(:get, url, options)\n      end\n\n      it \"when method is POST\" do\n        expect_any_instance_of(described_class).to receive(:post)\n          .with(url, options)\n\n        described_class.request(:post, url, options)\n      end\n    end\n  end\n\n  context \"#get\" do\n    it \"return response\" do", "explanation": "Here is a concise summary of the purpose and functionality of this block:\n\n**Purpose:** Test the `MagicAdmin::Http::Request` class.\n\n**Functionality:**\n\n* Test the `.request` method, which raises an error for unsupported methods (other than GET and POST).\n* Test the `.get` method, which returns a response when called with a valid GET request.\n* Verify that the `.post` method is called correctly when requested.", "metadata": {"repo": "magiclabs/magic-admin-ruby", "file": "test/http/request_test.rb", "chunk_number": 1, "total_chunks": 2}, "repository_explanation": "Here is a concise description:\n\n**Purpose:** A Ruby library for interacting with Magic Labs APIs.\n\n**Content:** Includes source code and documentation for managing Magic Labs resources (e.g., users, messages) using Ruby programming language.", "file_summary": "Here is a concise summary:\n\n**Summary:** This file (`test/http/request_test.rb`) tests the `MagicAdmin::Http::Request` class, verifying correct behavior for GET and POST requests, including method types and URL matching."}
{"code": "      expect(subject.get(url, options)).to be_instance_of(Net::HTTP::Get)\n\n      expected = \"https://api.magic.link/v1/admin/auth/user/get?\"\n      expect(subject.get(url, options).uri.to_s).to eq(expected)\n    end\n  end\n\n  context \"#post\" do\n    it \"return response\" do\n      expect(subject.post(url, options)).to be_instance_of(Net::HTTP::Post)\n\n      expected = \"https://api.magic.link/v1/admin/auth/user/get\"\n      expect(subject.post(url, options).uri.to_s).to eq(expected)\n    end\n  end\nend\n", "explanation": "**Purpose:** Verifying that HTTP requests (GET and POST) are being made with correct methods and URLs.\n\n**Functionality:** Using RSpec expectations to ensure that `subject.get` and `subject.post` return responses of the corresponding HTTP method type (`Net::HTTP::Get` and `Net::HTTP::Post`, respectively), and that their URLs match expected values.", "metadata": {"repo": "magiclabs/magic-admin-ruby", "file": "test/http/request_test.rb", "chunk_number": 2, "total_chunks": 2}, "repository_explanation": "Here is a concise description:\n\n**Purpose:** A Ruby library for interacting with Magic Labs APIs.\n\n**Content:** Includes source code and documentation for managing Magic Labs resources (e.g., users, messages) using Ruby programming language.", "file_summary": "Here is a concise summary:\n\n**Summary:** This file (`test/http/request_test.rb`) tests the `MagicAdmin::Http::Request` class, verifying correct behavior for GET and POST requests, including method types and URL matching."}
{"code": "# frozen_string_literal: true\n\nrequire \"spec_helper\"\n\ndescribe MagicAdmin::Http::Response do\n  let(:stub_response_body) do\n    { \"data\" => {}, \"error_code\" => \"\", \"message\" => \"\", \"status\" => \"ok\" }\n  end\n\n  let(:http_resp) do\n    double(\n      \"http_resp\",\n      body: stub_response_body.to_json,\n      code: 200,\n      message: \"ok\"\n    )\n  end\n\n  let(:url) { URI(\"https://api.magic.link//v1/admin/auth/user/get\") }\n  let(:request) { MagicAdmin::Http::Request.request(:get, url, {}) }\n\n  subject { described_class.new(http_resp) }\n\n  it \"present attr_reader\" do\n    expect(subject).to respond_to(:data)\n    expect(subject).to respond_to(:content)\n    expect(subject).to respond_to(:status_code)\n  end\n\n  context \"#error_opt\" do\n    it \"return response\" do\n      expect(subject.error_opt(request)).to include(\n        :http_status,\n        :http_code,\n        :http_response,\n        :http_message,\n        :http_error_code,\n        :http_request_params,\n        :http_method\n      )\n    end\n  end\n\n  describe \"class_methods\" do", "explanation": "**Summary**\n\nThis block is a RSpec test suite that describes the behavior of the `MagicAdmin::Http::Response` class.\n\n**Purpose**\n\nThe purpose of this code is to test and ensure that the `MagicAdmin::Http::Response` class has the correct attributes and methods, specifically:\n\n* The presence of certain attr_readers (data, content, status_code)\n* The return value of the error_opt method\n\n**Functionality**\n\nThe functionality of this code is to:\n\n1. Set up a test scenario with a stub response body and an HTTP response object.\n2. Create a new instance of `MagicAdmin::Http::Response` using the test setup.\n3. Test that the instance has the expected attributes (data, content, status_code).\n4. Test that the error_opt method returns the correct hash.", "metadata": {"repo": "magiclabs/magic-admin-ruby", "file": "test/http/response_test.rb", "chunk_number": 1, "total_chunks": 6}, "repository_explanation": "Here is a concise description:\n\n**Purpose:** A Ruby library for interacting with Magic Labs APIs.\n\n**Content:** Includes source code and documentation for managing Magic Labs resources (e.g., users, messages) using Ruby programming language.", "file_summary": "Here is a holistic summary of the file 'test/http/response_test.rb':\n\nThis RSpec test suite ensures that the `MagicAdmin::Http::Response` class behaves correctly in various scenarios, including:\n\n* Validating attributes (data, content, status_code) and method return values\n* Testing error handling for different HTTP errors, such as 400 Bad Request, 401 Unauthorized, and others\n\nThe tests cover specific edge cases, including:\n\n* Successful responses with expected properties\n* Error handling for various HTTP errors, raising corresponding exceptions\n* Validation of API-specific error handling for bad gateway (502), service unavailable (503), and other scenarios"}
{"code": "    context \".from_net_http\" do\n      it \"with valid request\" do\n        reps = described_class.from_net_http(http_resp, request)\n        expect(reps).to be_instance_of(MagicAdmin::Http::Response)\n\n        expect(reps.status_code).to eq(200)\n      end\n\n      context \"with invalid request\" do\n        it \"raise error BadRequestError\" do\n          error_resp = instance_double(\n            Net::HTTPBadRequest,\n            body: stub_response_body.to_json,\n            code: 400,\n            message: \"HTTP Bad Request\"\n          )\n\n          allow(Net::HTTPBadRequest).to receive(:===)\n            .with(error_resp)\n            .and_return(true)\n\n          expect do\n            described_class.from_net_http(error_resp, request)\n          end .to raise_error(MagicAdmin::BadRequestError)\n        end\n\n        it \"raise error HTTPUnauthorized\" do\n          error_resp = instance_double(\n            Net::HTTPUnauthorized,\n            body: stub_response_body.to_json,\n            code: 401,", "explanation": "**Block Purpose:** Test the `from_net_http` method's functionality.\n\n**Functionality Summary:**\n\n* Verifies that a valid HTTP request returns a successful response (200) with expected properties.\n* Tests error handling for invalid requests:\n\t+ Raises `MagicAdmin::BadRequestError` for 400 Bad Request errors.\n\t+ Raises `HTTPUnauthorized` exception for 401 Unauthorized errors.", "metadata": {"repo": "magiclabs/magic-admin-ruby", "file": "test/http/response_test.rb", "chunk_number": 2, "total_chunks": 6}, "repository_explanation": "Here is a concise description:\n\n**Purpose:** A Ruby library for interacting with Magic Labs APIs.\n\n**Content:** Includes source code and documentation for managing Magic Labs resources (e.g., users, messages) using Ruby programming language.", "file_summary": "Here is a holistic summary of the file 'test/http/response_test.rb':\n\nThis RSpec test suite ensures that the `MagicAdmin::Http::Response` class behaves correctly in various scenarios, including:\n\n* Validating attributes (data, content, status_code) and method return values\n* Testing error handling for different HTTP errors, such as 400 Bad Request, 401 Unauthorized, and others\n\nThe tests cover specific edge cases, including:\n\n* Successful responses with expected properties\n* Error handling for various HTTP errors, raising corresponding exceptions\n* Validation of API-specific error handling for bad gateway (502), service unavailable (503), and other scenarios"}
{"code": "            message: \"HTTP Unauthorized  Request Error\"\n          )\n\n          allow(Net::HTTPUnauthorized).to receive(:===)\n            .with(error_resp)\n            .and_return(true)\n\n          expect do\n            described_class.from_net_http(error_resp, request)\n          end .to raise_error(MagicAdmin::AuthenticationError)\n        end\n\n        it \"raise error HTTPForbidden\" do\n          error_resp = instance_double(\n            Net::HTTPForbidden,\n            body: stub_response_body.to_json,\n            code: 403,\n            message: \"HTTP Forbidden Request Error\"\n          )\n\n          allow(Net::HTTPForbidden).to receive(:===)\n            .with(error_resp)\n            .and_return(true)\n\n          expect do\n            described_class.from_net_http(error_resp, request)\n          end .to raise_error(MagicAdmin::ForbiddenError)\n        end\n\n        it \"raise error HTTPTooManyRequests\" do\n          error_resp = instance_double(\n            Net::HTTPTooManyRequests,\n            body: stub_response_body.to_json,", "explanation": "**Purpose:** This block tests the behavior of a method (`described_class.from_net_http`) when encountering different HTTP errors.\n\n**Functionality:**\n\n* It creates test cases for three types of HTTP errors:\n\t+ `HTTP Unauthorized`\n\t+ `HTTP Forbidden`\n\t+ `HTTP Too Many Requests`\n* For each error type, it sets up an expectation that the method will raise a specific exception (`MagicAdmin::AuthenticationError` or `MagicAdmin::ForbiddenError`)\n* It uses instance doubles and stubs to mimic the behavior of Net::HTTP classes for testing purposes.", "metadata": {"repo": "magiclabs/magic-admin-ruby", "file": "test/http/response_test.rb", "chunk_number": 3, "total_chunks": 6}, "repository_explanation": "Here is a concise description:\n\n**Purpose:** A Ruby library for interacting with Magic Labs APIs.\n\n**Content:** Includes source code and documentation for managing Magic Labs resources (e.g., users, messages) using Ruby programming language.", "file_summary": "Here is a holistic summary of the file 'test/http/response_test.rb':\n\nThis RSpec test suite ensures that the `MagicAdmin::Http::Response` class behaves correctly in various scenarios, including:\n\n* Validating attributes (data, content, status_code) and method return values\n* Testing error handling for different HTTP errors, such as 400 Bad Request, 401 Unauthorized, and others\n\nThe tests cover specific edge cases, including:\n\n* Successful responses with expected properties\n* Error handling for various HTTP errors, raising corresponding exceptions\n* Validation of API-specific error handling for bad gateway (502), service unavailable (503), and other scenarios"}
{"code": "            code: 429,\n            message: \"HTTP Many Request Error\"\n          )\n\n          allow(Net::HTTPTooManyRequests).to receive(:===)\n            .with(error_resp)\n            .and_return(true)\n\n          expect do\n            described_class.from_net_http(error_resp, request)\n          end .to raise_error(MagicAdmin::RateLimitingError)\n        end\n\n        it \"raise error HTTPServerError\" do\n          error_resp = instance_double(\n            Net::HTTPServerError,\n            body: stub_response_body.to_json,\n            code: 500,\n            message: \"HTTP Internal Server Error\"\n          )\n\n          allow(Net::HTTPServerError).to receive(:===)\n            .with(error_resp)\n            .and_return(true)\n\n          expect do\n            described_class.from_net_http(error_resp, request)\n          end .to raise_error(MagicAdmin::APIError)\n        end\n\n        it \"raise error HTTPGatewayTimeout\" do\n          error_resp = instance_double(\n            Net::HTTPGatewayTimeout,", "explanation": "**Purpose:** Test handling of various HTTP errors in a Ruby class.\n\n**Functionality:**\n\n* Test for `Net::HTTPTooManyRequests` error: Raise `MagicAdmin::RateLimitingError`.\n* Test for `Net::HTTPServerError` error (code 500): Raise `MagicAdmin::APIError`.\n* Test for `Net::HTTPGatewayTimeout` error: NOT IMPLEMENTED (error not handled).", "metadata": {"repo": "magiclabs/magic-admin-ruby", "file": "test/http/response_test.rb", "chunk_number": 4, "total_chunks": 6}, "repository_explanation": "Here is a concise description:\n\n**Purpose:** A Ruby library for interacting with Magic Labs APIs.\n\n**Content:** Includes source code and documentation for managing Magic Labs resources (e.g., users, messages) using Ruby programming language.", "file_summary": "Here is a holistic summary of the file 'test/http/response_test.rb':\n\nThis RSpec test suite ensures that the `MagicAdmin::Http::Response` class behaves correctly in various scenarios, including:\n\n* Validating attributes (data, content, status_code) and method return values\n* Testing error handling for different HTTP errors, such as 400 Bad Request, 401 Unauthorized, and others\n\nThe tests cover specific edge cases, including:\n\n* Successful responses with expected properties\n* Error handling for various HTTP errors, raising corresponding exceptions\n* Validation of API-specific error handling for bad gateway (502), service unavailable (503), and other scenarios"}
{"code": "            body: stub_response_body.to_json,\n            code: 504,\n            message: \"HTTP Gateway Timeoutr\"\n          )\n\n          allow(Net::HTTPGatewayTimeout).to receive(:===)\n            .with(error_resp)\n            .and_return(true)\n\n          expect do\n            described_class.from_net_http(error_resp, request)\n          end .to raise_error(MagicAdmin::APIError)\n        end\n\n        it \"raise error HTTPServiceUnavailable\" do\n          error_resp = instance_double(\n            Net::HTTPServiceUnavailable,\n            body: stub_response_body.to_json,\n            code: 503,\n            message: \"HTTP Service Unavailable\"\n          )\n\n          allow(Net::HTTPServiceUnavailable).to receive(:===)\n            .with(error_resp)\n            .and_return(true)\n\n          expect do\n            described_class.from_net_http(error_resp, request)\n          end .to raise_error(MagicAdmin::APIError)\n        end\n\n        it \"raise error HTTPBadGateway\" do\n          error_resp = instance_double(", "explanation": "This block appears to be a series of test cases for an API or service that handles different types of HTTP errors.\n\nThe purpose is to test how the service raises specific exceptions when encountering various types of HTTP errors, such as:\n\n* Gateway Timeout (504)\n* Service Unavailable (503)\n* Bad Gateway (502)\n\nEach test case creates a mock error response and asserts that calling `described_class.from_net_http` with this response will raise an exception of the corresponding type.", "metadata": {"repo": "magiclabs/magic-admin-ruby", "file": "test/http/response_test.rb", "chunk_number": 5, "total_chunks": 6}, "repository_explanation": "Here is a concise description:\n\n**Purpose:** A Ruby library for interacting with Magic Labs APIs.\n\n**Content:** Includes source code and documentation for managing Magic Labs resources (e.g., users, messages) using Ruby programming language.", "file_summary": "Here is a holistic summary of the file 'test/http/response_test.rb':\n\nThis RSpec test suite ensures that the `MagicAdmin::Http::Response` class behaves correctly in various scenarios, including:\n\n* Validating attributes (data, content, status_code) and method return values\n* Testing error handling for different HTTP errors, such as 400 Bad Request, 401 Unauthorized, and others\n\nThe tests cover specific edge cases, including:\n\n* Successful responses with expected properties\n* Error handling for various HTTP errors, raising corresponding exceptions\n* Validation of API-specific error handling for bad gateway (502), service unavailable (503), and other scenarios"}
{"code": "            Net::HTTPBadGateway,\n            body: stub_response_body.to_json,\n            code: 502,\n            message: \"HTTP Bad Gateway\"\n          )\n\n          allow(Net::HTTPBadGateway).to receive(:===)\n            .with(error_resp)\n            .and_return(true)\n\n          expect do\n            described_class.from_net_http(error_resp, request)\n          end .to raise_error(MagicAdmin::APIError)\n        end\n      end\n    end\n  end\nend\n", "explanation": "**Summary**\n\nThis block tests that `MagicAdmin::APIError` is raised when a `Net::HTTPBadGateway` exception occurs with a specific response body, code (502), and message (\"HTTP Bad Gateway\").", "metadata": {"repo": "magiclabs/magic-admin-ruby", "file": "test/http/response_test.rb", "chunk_number": 6, "total_chunks": 6}, "repository_explanation": "Here is a concise description:\n\n**Purpose:** A Ruby library for interacting with Magic Labs APIs.\n\n**Content:** Includes source code and documentation for managing Magic Labs resources (e.g., users, messages) using Ruby programming language.", "file_summary": "Here is a holistic summary of the file 'test/http/response_test.rb':\n\nThis RSpec test suite ensures that the `MagicAdmin::Http::Response` class behaves correctly in various scenarios, including:\n\n* Validating attributes (data, content, status_code) and method return values\n* Testing error handling for different HTTP errors, such as 400 Bad Request, 401 Unauthorized, and others\n\nThe tests cover specific edge cases, including:\n\n* Successful responses with expected properties\n* Error handling for various HTTP errors, raising corresponding exceptions\n* Validation of API-specific error handling for bad gateway (502), service unavailable (503), and other scenarios"}
{"code": "# frozen_string_literal: true\n\nrequire \"spec_helper\"\n\ndescribe Magic do\n  let(:env_secret_key) { \"<ENV_MAGIC_API_SECRET_KEY>\" }\n  let(:arg_secret_key) { \"<ARG_MAGIC_API_SECRET_KEY>\" }\n\n  let(:env_client_id) { \"<ENV_MAGIC_CLIENT_ID>\" }\n  let(:arg_client_id) { \"<ARG_MAGIC_CLIENT_ID>\" }\n  let(:returned_client_id) { \"<RETURNED_CLIENT_ID>\" }\n\n  before(:each) do\n    allow_any_instance_of(MagicAdmin::Http::Client).to receive(:call).and_return(\n      double(data: { data: { client_id: returned_client_id } })\n    )\n  end\n\n  describe \"magic object without arguments and environment variables\" do\n    it \"should raise an error\" do\n      expect { Magic.new }.to raise_exception MagicAdmin::MagicError\n    end\n  end\n\n  describe \"magic object set secret_key\" do\n    it \"should be set with environment variable\" do\n      ENV[\"MAGIC_API_SECRET_KEY\"] = env_secret_key\n      magic = Magic.new\n      expect(magic.secret_key).to eq(env_secret_key)\n    end\n\n    it \"should be set with arguments\" do", "explanation": "**Summary:**\n\nThis block is a RSpec test suite for the `Magic` class. It tests various scenarios related to setting API secret keys and client IDs, ensuring correct behavior when creating a `Magic` object with or without required parameters.", "metadata": {"repo": "magiclabs/magic-admin-ruby", "file": "test/magic_test.rb", "chunk_number": 1, "total_chunks": 6}, "repository_explanation": "Here is a concise description:\n\n**Purpose:** A Ruby library for interacting with Magic Labs APIs.\n\n**Content:** Includes source code and documentation for managing Magic Labs resources (e.g., users, messages) using Ruby programming language.", "file_summary": "Here is a concise summary of the file 'test/magic_test.rb':\n\nThis RSpec test suite thoroughly tests the functionality of the Magic class, covering various scenarios related to setting API secret keys, client IDs, retries, timeouts, and backoffs. The tests verify correct behavior when creating a Magic object with or without required parameters, ensuring that environment variables do not override provided values, and validating that custom arguments take precedence over environment variables."}
{"code": "      magic = Magic.new(api_secret_key: arg_secret_key)\n      expect(magic.secret_key).to eq(arg_secret_key)\n    end\n\n    it \"should be set with arguments ignore environment variable\" do\n      ENV[\"MAGIC_API_SECRET_KEY\"] = env_secret_key\n      magic = Magic.new(api_secret_key: arg_secret_key)\n      expect(magic.secret_key).to eq(arg_secret_key)\n      expect(magic.secret_key).not_to eq(env_secret_key)\n    end\n  end\n\n  describe \"magic object network strategy\" do\n    before(:each) do\n      ENV[\"MAGIC_API_SECRET_KEY\"] = spec_api_secret_key\n    end\n\n    describe \"set retries\" do\n      let(:default_retries) { 3 }\n      let(:env_retries) { \"4\" }\n      let(:arg_retries) { 5 }\n\n      it \"should be set with default values\" do\n        http_client = Magic.new.http_client\n        expect(http_client.retries).to eq(default_retries)\n      end\n\n      it \"should be set with environment variable\" do\n        ENV[\"MAGIC_API_RETRIES\"] = env_retries\n        http_client = Magic.new.http_client", "explanation": "Here is a concise summary:\n\nThis block tests the functionality of a `Magic` class, specifically its ability to handle secret keys and retries in different scenarios:\n\n* It verifies that the secret key passed as an argument is used by the `Magic` object.\n* It also checks that environment variables do not override the provided secret key.\n* The second part describes the \"magic object network strategy\", where it tests the setting of retries using default values, environment variables, and custom arguments.", "metadata": {"repo": "magiclabs/magic-admin-ruby", "file": "test/magic_test.rb", "chunk_number": 2, "total_chunks": 6}, "repository_explanation": "Here is a concise description:\n\n**Purpose:** A Ruby library for interacting with Magic Labs APIs.\n\n**Content:** Includes source code and documentation for managing Magic Labs resources (e.g., users, messages) using Ruby programming language.", "file_summary": "Here is a concise summary of the file 'test/magic_test.rb':\n\nThis RSpec test suite thoroughly tests the functionality of the Magic class, covering various scenarios related to setting API secret keys, client IDs, retries, timeouts, and backoffs. The tests verify correct behavior when creating a Magic object with or without required parameters, ensuring that environment variables do not override provided values, and validating that custom arguments take precedence over environment variables."}
{"code": "        expect(http_client.retries).to eq(env_retries.to_f)\n      end\n\n      it \"should be set with argument\" do\n        http_client = Magic.new(retries: arg_retries).http_client\n        expect(http_client.retries).to eq(arg_retries)\n      end\n\n      it \"should be set with argument ignore environment variable\" do\n        ENV[\"MAGIC_API_RETRIES\"] = env_retries\n        http_client = Magic.new(retries: arg_retries).http_client\n        expect(http_client.retries).to eq(arg_retries)\n      end\n    end\n\n    describe \"set timeout\" do\n      let(:default_timeout) { 5 }\n      let(:env_timeout) { \"6\" }\n      let(:arg_timeout) { 7 }\n\n      it \"should be set with default values\" do\n        http_client = Magic.new.http_client\n        expect(http_client.timeout).to eq(default_timeout)\n      end\n\n      it \"should be set with environment variable\" do\n        ENV[\"MAGIC_API_TIMEOUT\"] = env_timeout\n        http_client = Magic.new.http_client\n        expect(http_client.timeout).to eq(env_timeout.to_f)\n      end\n", "explanation": "This block tests the functionality of setting retries and timeout values for a `Magic` class's HTTP client.\n\n**Retries:**\n\n* Tests that retries are set from an environment variable.\n* Verifies that retries can be overridden with an argument.\n* Confirms that an override takes precedence over the environment variable.\n\n**Timeouts:**\n\n* Checks that timeouts default to 5 seconds.\n* Validates that timeouts can be set from an environment variable.\n* Ensures that a custom timeout value can be specified when creating the HTTP client.", "metadata": {"repo": "magiclabs/magic-admin-ruby", "file": "test/magic_test.rb", "chunk_number": 3, "total_chunks": 6}, "repository_explanation": "Here is a concise description:\n\n**Purpose:** A Ruby library for interacting with Magic Labs APIs.\n\n**Content:** Includes source code and documentation for managing Magic Labs resources (e.g., users, messages) using Ruby programming language.", "file_summary": "Here is a concise summary of the file 'test/magic_test.rb':\n\nThis RSpec test suite thoroughly tests the functionality of the Magic class, covering various scenarios related to setting API secret keys, client IDs, retries, timeouts, and backoffs. The tests verify correct behavior when creating a Magic object with or without required parameters, ensuring that environment variables do not override provided values, and validating that custom arguments take precedence over environment variables."}
{"code": "      it \"should be set with argument\" do\n        http_client = Magic.new(timeout: arg_timeout).http_client\n        expect(http_client.timeout).to eq(arg_timeout)\n      end\n\n      it \"should be set with argument ignore environment variable\" do\n        ENV[\"MAGIC_API_TIMEOUT\"] = env_timeout\n        http_client = Magic.new(timeout: arg_timeout).http_client\n        expect(http_client.timeout).to eq(arg_timeout)\n      end\n    end\n\n    describe \"set backoff\" do\n      let(:default_backoff) { 0.02 }\n      let(:env_backoff) { \"0.03\" }\n      let(:arg_backoff) { 0.04 }\n\n      it \"should be set with default values\" do\n        http_client = Magic.new.http_client\n        expect(http_client.backoff).to eq(default_backoff)\n      end\n\n      it \"should be set with environment variable\" do\n        ENV[\"MAGIC_API_BACKOFF\"] = env_backoff\n        http_client = Magic.new.http_client\n        expect(http_client.backoff).to eq(env_backoff.to_f)\n      end\n\n      it \"should be set with argument\" do", "explanation": "Here is a concise summary:\n\n**Purpose:** Test the functionality of setting timeouts and backoffs in the Magic class.\n\n**Functionality:**\n\n* Test setting timeouts using an argument, ignoring environment variables.\n* Test setting timeouts using both an argument and an environment variable.\n* Test setting backoffs with default values, from environment variables, and using arguments.", "metadata": {"repo": "magiclabs/magic-admin-ruby", "file": "test/magic_test.rb", "chunk_number": 4, "total_chunks": 6}, "repository_explanation": "Here is a concise description:\n\n**Purpose:** A Ruby library for interacting with Magic Labs APIs.\n\n**Content:** Includes source code and documentation for managing Magic Labs resources (e.g., users, messages) using Ruby programming language.", "file_summary": "Here is a concise summary of the file 'test/magic_test.rb':\n\nThis RSpec test suite thoroughly tests the functionality of the Magic class, covering various scenarios related to setting API secret keys, client IDs, retries, timeouts, and backoffs. The tests verify correct behavior when creating a Magic object with or without required parameters, ensuring that environment variables do not override provided values, and validating that custom arguments take precedence over environment variables."}
{"code": "        http_client = Magic.new(backoff: arg_backoff).http_client\n        expect(http_client.backoff).to eq(arg_backoff)\n      end\n\n      it \"should be set with argument ignore environment variable\" do\n        ENV[\"MAGIC_API_BACKOFF\"] = env_backoff\n        http_client = Magic.new(backoff: arg_backoff).http_client\n        expect(http_client.backoff).to eq(arg_backoff)\n      end\n    end\n  end\n\n  describe \"magic object set client_id\" do\n\n    let(:api_secret_key) { \"<API_SECRET_KEY>\" }\n    \n    before(:each) do\n      ENV[\"MAGIC_API_SECRET_KEY\"] = api_secret_key\n    end\n\n    it \"should be set with environment variable\" do\n      ENV[\"MAGIC_CLIENT_ID\"] = env_client_id\n      magic = Magic.new\n      expect(magic.client_id).to eq(env_client_id)\n    end\n\n    it \"should be set with argument\" do\n      ENV[\"MAGIC_CLIENT_ID\"] = nil\n      magic = Magic.new(client_id: arg_client_id)\n      expect(magic.client_id).to eq(arg_client_id)\n    end\n\n    it \"should be set with argument ignore environment variable\" do", "explanation": "**Purpose:** Test the configuration of a `Magic` object's HTTP client and `client_id` attribute.\n\n**Functionality:**\n\n1. **HTTP Client Configuration**: Verify that the `http_client` is correctly configured with a specified backoff value, even when an environment variable (`MAGIC_API_BACKOFF`) has been set.\n2. **Client ID Configuration**: Test setting the `client_id` attribute of a `Magic` object using:\n\t* An environment variable (`MAGIC_CLIENT_ID`)\n\t* An argument passed to the `Magic` constructor\n\t* Both methods simultaneously, and verify that the argument takes precedence over the environment variable", "metadata": {"repo": "magiclabs/magic-admin-ruby", "file": "test/magic_test.rb", "chunk_number": 5, "total_chunks": 6}, "repository_explanation": "Here is a concise description:\n\n**Purpose:** A Ruby library for interacting with Magic Labs APIs.\n\n**Content:** Includes source code and documentation for managing Magic Labs resources (e.g., users, messages) using Ruby programming language.", "file_summary": "Here is a concise summary of the file 'test/magic_test.rb':\n\nThis RSpec test suite thoroughly tests the functionality of the Magic class, covering various scenarios related to setting API secret keys, client IDs, retries, timeouts, and backoffs. The tests verify correct behavior when creating a Magic object with or without required parameters, ensuring that environment variables do not override provided values, and validating that custom arguments take precedence over environment variables."}
{"code": "      ENV[\"MAGIC_CLIENT_ID\"] = env_client_id\n      magic = Magic.new(client_id: arg_client_id)\n      expect(magic.client_id).to eq(arg_client_id)\n      expect(magic.client_id).not_to eq(env_client_id)\n    end\n\n    it \"should retrieve from API if not set\" do\n      ENV[\"MAGIC_CLIENT_ID\"] = nil\n      magic = Magic.new\n      expect(magic.client_id).to eq(returned_client_id)\n    end\n\n    it \"should raise an error if API key is invalid\" do\n      allow_any_instance_of(MagicAdmin::Http::Client).to receive(:call).and_return(\n        double(data: { data: { } })\n      )\n      expect { Magic.new }.to raise_exception MagicAdmin::MagicError\n    end\n  end\nend\n", "explanation": "Here is a concise summary of the block:\n\n**Block Purpose:** Test the behavior of the `Magic` class, specifically its client ID management.\n\n**Functionality:**\n\n* Tests that the client ID set via environment variable (`env_client_id`) does not match the one passed as an argument (`arg_client_id`) when creating a new `Magic` instance.\n* Verifies that if no client ID is set in the environment, it can be retrieved from the API.\n* Simulates an invalid API key and checks that a `MagicAdmin::MagicError` is raised when trying to create a new `Magic` instance.", "metadata": {"repo": "magiclabs/magic-admin-ruby", "file": "test/magic_test.rb", "chunk_number": 6, "total_chunks": 6}, "repository_explanation": "Here is a concise description:\n\n**Purpose:** A Ruby library for interacting with Magic Labs APIs.\n\n**Content:** Includes source code and documentation for managing Magic Labs resources (e.g., users, messages) using Ruby programming language.", "file_summary": "Here is a concise summary of the file 'test/magic_test.rb':\n\nThis RSpec test suite thoroughly tests the functionality of the Magic class, covering various scenarios related to setting API secret keys, client IDs, retries, timeouts, and backoffs. The tests verify correct behavior when creating a Magic object with or without required parameters, ensuring that environment variables do not override provided values, and validating that custom arguments take precedence over environment variables."}
{"code": "# frozen_string_literal: true\n\nrequire \"spec_helper\"\n\ndescribe MagicAdmin::Resource::Token do\n  let(:client_id) {'did:magic:testtest-test-test-test-testtesttest'}\n  let(:magic) { instance_double(\"MagicAdmin::Magic\", client_id: client_id) }\n\n  subject(:token) { described_class.new(magic) }\n\n  describe \"instance methods\" do\n    describe \"public methods\" do\n      it \"#validate\" do\n        claim = { \"ext\" => 1000, \"nbf\" => \"nbf\", \"aud\" => client_id }\n        rec_address = double(\"rec_address\").to_s\n        proof = double(\"proof\")\n        time_now = 1_202_020\n        allow(Time).to receive(:now).and_return(time_now)\n\n        expect(subject).to receive(:decode).and_return([proof, claim])\n        expect(subject).to receive(:validate_claim_fields!).with(claim)\n\n        expect(subject).to receive(:rec_pub_address)\n          .with(claim, proof)\n          .and_return(rec_address)\n\n        expect(subject).to receive(:validate_public_address!)\n          .with(rec_address, spec_did_token)\n", "explanation": "Here is a concise summary:\n\n**Purpose:** Test the `MagicAdmin::Resource::Token` class.\n\n**Functionality:** Create an instance of the class with a mock Magic object, verify its methods (e.g., #validate) by mocking dependencies and expected behavior.", "metadata": {"repo": "magiclabs/magic-admin-ruby", "file": "test/resource/token_test.rb", "chunk_number": 1, "total_chunks": 8}, "repository_explanation": "Here is a concise description:\n\n**Purpose:** A Ruby library for interacting with Magic Labs APIs.\n\n**Content:** Includes source code and documentation for managing Magic Labs resources (e.g., users, messages) using Ruby programming language.", "file_summary": "Here is a holistic summary of the file 'test/resource/token_test.rb':\n\n**Purpose:** Test the `MagicAdmin::Resource::Token` class for DID token validation and decoding.\n\n**Functionality:** This test suite verifies various methods, including:\n\n* Token validation (claim fields, expiration time, public address)\n* Claim field presence and expected values\n* Public address validation\n* Time validation (NBF and EXPIRES_AT claims)\n* Audience (aud) validation against client ID\n\nThe tests cover multiple scenarios to ensure correct functionality."}
{"code": "        expect(subject).to receive(:validate_claim_ext!)\n          .with(time_now, claim[\"ext\"])\n\n        expect(subject).to receive(:validate_claim_nbf!)\n          .with(time_now, claim[\"nbf\"])\n        \n        expect(subject).to receive(:validate_claim_aud!)\n          .with(client_id, claim[\"aud\"])\n\n        subject.validate(spec_did_token)\n      end\n\n      context \"#decode\" do\n        it \"with valid token\" do\n          clam_hash = {\n            \"iat\" => 1_234_512_345,\n            \"ext\" => 1_234_512_345,\n            \"iss\" => \"did:ethr:0xtest0000test0000test0000test0000test0000\",\n            \"sub\" => \"00abcdefghijklmnopqrstuvwxyz123456789000000=\",\n            \"aud\" => \"did:magic:testtest-test-test-test-testtesttest\",\n            \"nbf\" => 1_234_512_345,\n            \"tid\" => \"testtest-test-test-test-testtesttest\",\n            \"add\" => \"0x00test0000test0000test0000test0000test0000\"\\\n                     \"test0000test0000test0000test0000test0000test\"\\", "explanation": "**Purpose:** Test the validation and decoding of a DID token.\n\n**Functionality:**\n\n1. Validate the token with specific method calls:\n\t* `validate_claim_ext!` with current time and \"ext\" claim value.\n\t* `validate_claim_nbf!` with current time and \"nbf\" claim value.\n\t* `validate_claim_aud!` with client ID and \"aud\" claim value.\n2. Decode a valid token with the `decode` method, passing in a `spec_did_token`.", "metadata": {"repo": "magiclabs/magic-admin-ruby", "file": "test/resource/token_test.rb", "chunk_number": 2, "total_chunks": 8}, "repository_explanation": "Here is a concise description:\n\n**Purpose:** A Ruby library for interacting with Magic Labs APIs.\n\n**Content:** Includes source code and documentation for managing Magic Labs resources (e.g., users, messages) using Ruby programming language.", "file_summary": "Here is a holistic summary of the file 'test/resource/token_test.rb':\n\n**Purpose:** Test the `MagicAdmin::Resource::Token` class for DID token validation and decoding.\n\n**Functionality:** This test suite verifies various methods, including:\n\n* Token validation (claim fields, expiration time, public address)\n* Claim field presence and expected values\n* Public address validation\n* Time validation (NBF and EXPIRES_AT claims)\n* Audience (aud) validation against client ID\n\nThe tests cover multiple scenarios to ensure correct functionality."}
{"code": "                     \"0000test0000test0000test0000test0000test0000\"\n          }\n\n          proof_str = \"0xtest0000test0000test0000test0000test0000\"\\\n                      \"test0000test0000test0000test0000test0000test\"\\\n                      \"0000test0000test0000test0000test0000test000000\"\n\n          decode_val = [proof_str, clam_hash]\n\n          expect(subject.decode(spec_did_token)).to eq(decode_val)\n        end\n\n        it \"with invalid token\" do\n          allow(subject).to receive(:base64_decode)\n            .with(spec_did_token)\n            .and_return(\"\")\n\n          expect do\n            subject.decode(spec_did_token)\n          end .to raise_error(MagicAdmin::DIDTokenError,\n                              \"DID Token is malformed\")\n        end\n      end\n\n      context \"#construct_issuer_with_public_address\" do\n        it \"return format\" do\n          public_address = subject.construct_issuer_with_public_address(\"test_address\")\n          expected = \"did:ethr:test_address\"", "explanation": "Here is a concise summary:\n\n**Purpose:** This block of code appears to be testing the functionality of a `decode` method for a DID (Decentralized Identifier) token.\n\n**Functionality:** The code tests that the `decode` method correctly decodes a given token and returns the expected value. It also tests that an error is raised when an invalid token is provided.", "metadata": {"repo": "magiclabs/magic-admin-ruby", "file": "test/resource/token_test.rb", "chunk_number": 3, "total_chunks": 8}, "repository_explanation": "Here is a concise description:\n\n**Purpose:** A Ruby library for interacting with Magic Labs APIs.\n\n**Content:** Includes source code and documentation for managing Magic Labs resources (e.g., users, messages) using Ruby programming language.", "file_summary": "Here is a holistic summary of the file 'test/resource/token_test.rb':\n\n**Purpose:** Test the `MagicAdmin::Resource::Token` class for DID token validation and decoding.\n\n**Functionality:** This test suite verifies various methods, including:\n\n* Token validation (claim fields, expiration time, public address)\n* Claim field presence and expected values\n* Public address validation\n* Time validation (NBF and EXPIRES_AT claims)\n* Audience (aud) validation against client ID\n\nThe tests cover multiple scenarios to ensure correct functionality."}
{"code": "          expect(public_address).to eq(expected)\n        end\n      end\n\n      context \"#get_issuer\" do\n        it \"return format\" do\n          issuer = subject.get_issuer(spec_did_token)\n          expected = \"did:ethr:0xtest0000test0000test0000test0000test0000\"\n          expect(issuer).to eq(expected)\n        end\n      end\n\n      context \"#get_public_address\" do\n        it \"return format\" do\n          public_address = subject.get_public_address(spec_did_token)\n          expected = \"0xtest0000test0000test0000test0000test0000\"\n          expect(public_address).to eq(expected)\n        end\n      end\n    end\n\n    describe \"private methods\" do\n      it \"#claim_fields\" do\n        fields = subject.send(:claim_fields)\n        expect(fields).to eq(%w[iat ext iss sub aud nbf tid])\n      end\n\n      context \"#validate_claim_fields!\" do\n        it \"return true when claim keys match with claim_fields \" do\n          allow(subject).to receive(:claim_fields).and_return([])\n", "explanation": "Here is a concise summary:\n\nThis block appears to be part of a test suite, using the RSpec testing framework. It tests various methods of an object (likely a class instance) for correct functionality, including:\n\n* `get_issuer`: returns the issuer in the specified format\n* `get_public_address`: returns the public address in the specified format\n* `claim_fields` and `validate_claim_fields!`: private methods related to claim fields validation.", "metadata": {"repo": "magiclabs/magic-admin-ruby", "file": "test/resource/token_test.rb", "chunk_number": 4, "total_chunks": 8}, "repository_explanation": "Here is a concise description:\n\n**Purpose:** A Ruby library for interacting with Magic Labs APIs.\n\n**Content:** Includes source code and documentation for managing Magic Labs resources (e.g., users, messages) using Ruby programming language.", "file_summary": "Here is a holistic summary of the file 'test/resource/token_test.rb':\n\n**Purpose:** Test the `MagicAdmin::Resource::Token` class for DID token validation and decoding.\n\n**Functionality:** This test suite verifies various methods, including:\n\n* Token validation (claim fields, expiration time, public address)\n* Claim field presence and expected values\n* Public address validation\n* Time validation (NBF and EXPIRES_AT claims)\n* Audience (aud) validation against client ID\n\nThe tests cover multiple scenarios to ensure correct functionality."}
{"code": "          expect(subject.send(:validate_claim_fields!, {})).to be_truthy\n        end\n\n        it \"raise error when claim keys does not match with claim_fields \" do\n          fields = %w[iat ext iss sub aud nbf tid]\n          msg = \"DID Token missing required fields: \"\n          msg += fields.join(\", \")\n          expect do\n            subject.send(:validate_claim_fields!, { invalid: nil })\n          end .to raise_error(MagicAdmin::DIDTokenError, msg)\n        end\n      end\n\n      context \"#validate_public_address!\" do\n        it \"return true when rec_address eq did_token public_address\" do\n          allow(subject).to receive(:get_public_address)\n            .with(spec_did_token)\n            .and_return(\"test_123\")\n\n          expect(subject.send(:validate_public_address!,\n                              \"test_123\",\n                              spec_did_token)).to be_truthy\n        end\n\n        it \"raise error when rec_address not eq did_token public_address\" do", "explanation": "Here is a concise summary:\n\n**Block Purpose:** Validate DID Token functionality in Ruby code.\n\n**Functionality:**\n\n1. Verifies that required claim fields are present.\n2. Raises an error if claim keys do not match with expected values.\n3. Validates public address by comparing it to the one retrieved from the DID token.", "metadata": {"repo": "magiclabs/magic-admin-ruby", "file": "test/resource/token_test.rb", "chunk_number": 5, "total_chunks": 8}, "repository_explanation": "Here is a concise description:\n\n**Purpose:** A Ruby library for interacting with Magic Labs APIs.\n\n**Content:** Includes source code and documentation for managing Magic Labs resources (e.g., users, messages) using Ruby programming language.", "file_summary": "Here is a holistic summary of the file 'test/resource/token_test.rb':\n\n**Purpose:** Test the `MagicAdmin::Resource::Token` class for DID token validation and decoding.\n\n**Functionality:** This test suite verifies various methods, including:\n\n* Token validation (claim fields, expiration time, public address)\n* Claim field presence and expected values\n* Public address validation\n* Time validation (NBF and EXPIRES_AT claims)\n* Audience (aud) validation against client ID\n\nThe tests cover multiple scenarios to ensure correct functionality."}
{"code": "          msg = \"Signature mismatch between 'proof' and 'claim'.\"\n          expect do\n            subject.send(:validate_public_address!,\n                         \"test_123\",\n                         spec_did_token)\n          end .to raise_error(MagicAdmin::DIDTokenError, msg)\n        end\n      end\n\n      context \"#validate_claim_ext!\" do\n        it \"return true when time is not grater claim_ext\" do\n          time = Time.now.to_i\n          claim_ext = time + 100\n\n          expect(subject.send(:validate_claim_ext!,\n                              time,\n                              claim_ext)).to be_truthy\n        end\n\n        it \"raise error when time is grater claim_ext\" do\n          time = Time.now.to_i\n          claim_ext = time - 100\n          msg = \"Given DID token has expired. Please generate a new one.\"\n          expect do\n            subject.send(:validate_claim_ext!, time, claim_ext)\n          end .to raise_error(MagicAdmin::DIDTokenError, msg)\n        end\n      end\n", "explanation": "Here is a concise summary:\n\n**Purpose:** Test validation methods for DID tokens.\n\n**Functionality:**\n\n* Validate public address using `validate_public_address!` method.\n* Validate claim expiration time using `validate_claim_ext!` method, checking if it's within a certain timeframe (100 seconds).", "metadata": {"repo": "magiclabs/magic-admin-ruby", "file": "test/resource/token_test.rb", "chunk_number": 6, "total_chunks": 8}, "repository_explanation": "Here is a concise description:\n\n**Purpose:** A Ruby library for interacting with Magic Labs APIs.\n\n**Content:** Includes source code and documentation for managing Magic Labs resources (e.g., users, messages) using Ruby programming language.", "file_summary": "Here is a holistic summary of the file 'test/resource/token_test.rb':\n\n**Purpose:** Test the `MagicAdmin::Resource::Token` class for DID token validation and decoding.\n\n**Functionality:** This test suite verifies various methods, including:\n\n* Token validation (claim fields, expiration time, public address)\n* Claim field presence and expected values\n* Public address validation\n* Time validation (NBF and EXPIRES_AT claims)\n* Audience (aud) validation against client ID\n\nThe tests cover multiple scenarios to ensure correct functionality."}
{"code": "      context \"#validate_claim_nbf using apply_nbf_grace_period claim_nbf\" do\n        it \"when time is not less then return true\" do\n          time = Time.now.to_i\n          claim_nbf = double(\"claim_nbf\")\n          allow(subject).to receive(:apply_nbf_grace_period)\n            .with(claim_nbf)\n            .and_return(time - 100)\n\n          expect(subject.send(:validate_claim_nbf!,\n                              time,\n                              claim_nbf)).to be_truthy\n        end\n\n        it \"when time is less then raise error\" do\n          time = Time.now.to_i\n          claim_nbf = double(\"claim_nbf\")\n          msg = \"Given DID token cannot be used at this time.\"\n          allow(subject).to receive(:apply_nbf_grace_period)\n            .with(claim_nbf)\n            .and_return(time + 100)\n\n          expect do\n            subject.send(:validate_claim_nbf!, time, claim_nbf)\n          end .to raise_error(MagicAdmin::DIDTokenError, msg)\n        end\n      end\n      \n      context \"#validate_claim_aud!\" do", "explanation": "Here is a concise summary:\n\nThis block tests two scenarios for validating claims in the `subject` object:\n\n1. **Valid time**: Ensures that when the time is not less than or equal to the claim's NBF (not before) value, validation passes.\n2. **Invalid time**: Verifies that when the time is less than the claim's NBF value, an error is raised with a specific message.", "metadata": {"repo": "magiclabs/magic-admin-ruby", "file": "test/resource/token_test.rb", "chunk_number": 7, "total_chunks": 8}, "repository_explanation": "Here is a concise description:\n\n**Purpose:** A Ruby library for interacting with Magic Labs APIs.\n\n**Content:** Includes source code and documentation for managing Magic Labs resources (e.g., users, messages) using Ruby programming language.", "file_summary": "Here is a holistic summary of the file 'test/resource/token_test.rb':\n\n**Purpose:** Test the `MagicAdmin::Resource::Token` class for DID token validation and decoding.\n\n**Functionality:** This test suite verifies various methods, including:\n\n* Token validation (claim fields, expiration time, public address)\n* Claim field presence and expected values\n* Public address validation\n* Time validation (NBF and EXPIRES_AT claims)\n* Audience (aud) validation against client ID\n\nThe tests cover multiple scenarios to ensure correct functionality."}
{"code": "        it \"return true when aud matches\" do\n          claim_aud = 'aud'\n          client_id = 'aud'\n          expect(subject.send(:validate_claim_ext!,\n                              client_id,\n                              claim_aud)).to be_truthy\n        end\n\n        it \"raise error when aud does not match\" do\n          claim_aud = 'audDiff'\n          client_id = 'aud'\n          msg = \"Audience does not match client ID. Please ensure your secret key matches the application which generated the DID token.\"\n          expect do\n            subject.send(:validate_claim_aud!, client_id, claim_aud)\n          end .to raise_error(MagicAdmin::DIDTokenError, msg)\n        end\n      end\n    end\n  end\nend\n", "explanation": "This block is a set of tests that validate the audience (aud) in a DID token against a client ID.\n\nThere are two scenarios:\n\n1. The aud matches: It checks if validating the claim returns true.\n2. The aud does not match: It raises an error with a specific message when validation fails.", "metadata": {"repo": "magiclabs/magic-admin-ruby", "file": "test/resource/token_test.rb", "chunk_number": 8, "total_chunks": 8}, "repository_explanation": "Here is a concise description:\n\n**Purpose:** A Ruby library for interacting with Magic Labs APIs.\n\n**Content:** Includes source code and documentation for managing Magic Labs resources (e.g., users, messages) using Ruby programming language.", "file_summary": "Here is a holistic summary of the file 'test/resource/token_test.rb':\n\n**Purpose:** Test the `MagicAdmin::Resource::Token` class for DID token validation and decoding.\n\n**Functionality:** This test suite verifies various methods, including:\n\n* Token validation (claim fields, expiration time, public address)\n* Claim field presence and expected values\n* Public address validation\n* Time validation (NBF and EXPIRES_AT claims)\n* Audience (aud) validation against client ID\n\nThe tests cover multiple scenarios to ensure correct functionality."}
{"code": "# frozen_string_literal: true\n\nrequire \"spec_helper\"\n\ndescribe MagicAdmin::Resource::User do\n  let(:magic) { Magic.new(api_secret_key: spec_api_secret_key, client_id: spec_client_id) }\n  let(:public_address) do\n    MagicAdmin::Resource::Token.new(magic).get_public_address(spec_did_token)\n  end\n\n  let(:issuer) do\n    MagicAdmin::Resource::Token.new(magic).get_issuer(spec_did_token)\n  end\n\n  let(:construct_issuer_with_public_address) do\n    MagicAdmin::Resource::Token.new(magic).construct_issuer_with_public_address(public_address)\n  end\n\n  let(:stub_response_body) do\n    { \"data\" => {}, \"error_code\" => \"\", \"message\" => \"\", \"status\" => \"ok\" }\n  end\n\n  subject { described_class.new(magic) }\n\n  it \"present attr readers\" do\n    expect(subject).to respond_to(:magic)\n  end\n\n  describe \"#get_metadata_by_issuer with or without wallet\" do\n    before(:each) do\n      allow(MagicAdmin::Util).to receive(:headers)\n      .with(magic.secret_key)\n      .and_return({})\n    end\n\n    context \"#get_metadata_by_issuer no wallet\" do", "explanation": "**Summary:**\n\nThis code block is a Ruby test suite for the `MagicAdmin::Resource::User` class, using the RSpec testing framework. It sets up fixtures (e.g., `magic`, `public_address`, etc.) and tests various aspects of the class's functionality. \n\n**Key Points:**\n\n* Tests the presence of attribute readers\n* Verifies the behavior of the `#get_metadata_by_issuer` method with or without a wallet", "metadata": {"repo": "magiclabs/magic-admin-ruby", "file": "test/resource/user_test.rb", "chunk_number": 1, "total_chunks": 6}, "repository_explanation": "Here is a concise description:\n\n**Purpose:** A Ruby library for interacting with Magic Labs APIs.\n\n**Content:** Includes source code and documentation for managing Magic Labs resources (e.g., users, messages) using Ruby programming language.", "file_summary": "Here's a concise summary of the file 'test/resource/user_test.rb':\n\n**Summary:** \nThis Ruby test suite using RSpec verifies the functionality of `MagicAdmin::Resource::User` class methods related to metadata retrieval and logout.\n\n**Key Points:**\n\n* Tests presence of attribute readers\n* Verifies behavior of `get_metadata_by_issuer` method with or without a wallet\n* Confirms successful API responses for metadata retrieval and logout methods"}
{"code": "      it \"send request with options\" do\n        expect(magic.http_client).to receive(:call)\n          .with(:get,\n                \"/v1/admin/auth/user/get\",\n                {\n                  params: { issuer: issuer, wallet_type: MagicAdmin::Resource::WalletType::NONE }, headers: {}\n                })\n        subject.get_metadata_by_issuer(issuer)\n      end\n    end\n\n    context \"#get_metadata_by_issuer with wallet that does not exist\" do\n      it \"send request with options\" do\n        expect(magic.http_client).to receive(:call)\n          .with(:get,\n                \"/v1/admin/auth/user/get\",\n                {\n                  params: { issuer: issuer, wallet_type: \"dne\" }, headers: {}\n                })\n        subject.get_metadata_by_issuer(issuer, \"dne\")\n      end\n    end\n\n    context \"#get_metadata_by_issuer with wallet\" do\n      it \"send request with options\" do\n        expect(magic.http_client).to receive(:call)\n          .with(:get,\n                \"/v1/admin/auth/user/get\",\n                {", "explanation": "This block of code is a test suite that verifies the functionality of the `get_metadata_by_issuer` method in the `subject` object.\n\n* The purpose of this test suite is to ensure that when `get_metadata_by_issuer` is called with an issuer, it sends a GET request to `/v1/admin/auth/user/get` with the correct options (issuer and wallet type).\n* The tests cover two scenarios:\n\t+ When a wallet exists for the given issuer\n\t+ When a wallet does not exist for the given issuer (in which case a different wallet type is passed)", "metadata": {"repo": "magiclabs/magic-admin-ruby", "file": "test/resource/user_test.rb", "chunk_number": 2, "total_chunks": 6}, "repository_explanation": "Here is a concise description:\n\n**Purpose:** A Ruby library for interacting with Magic Labs APIs.\n\n**Content:** Includes source code and documentation for managing Magic Labs resources (e.g., users, messages) using Ruby programming language.", "file_summary": "Here's a concise summary of the file 'test/resource/user_test.rb':\n\n**Summary:** \nThis Ruby test suite using RSpec verifies the functionality of `MagicAdmin::Resource::User` class methods related to metadata retrieval and logout.\n\n**Key Points:**\n\n* Tests presence of attribute readers\n* Verifies behavior of `get_metadata_by_issuer` method with or without a wallet\n* Confirms successful API responses for metadata retrieval and logout methods"}
{"code": "                  params: { issuer: issuer, wallet_type: MagicAdmin::Resource::WalletType::ALGOD }, headers: {}\n                })\n        subject.get_metadata_by_issuer(issuer, MagicAdmin::Resource::WalletType::ALGOD)\n      end\n    end\n  end\n\n  context \"#get_metadata_by_public_address\" do\n    it \"return response\" do\n      url = \"https://api.magic.link/v1/admin/auth/user/get?issuer=\"\n      url += construct_issuer_with_public_address\n      url += \"&wallet_type=\" + MagicAdmin::Resource::WalletType::NONE\n      stub_request(:get, url)\n        .to_return(status: 200, body: stub_response_body.to_json, headers: {})\n      reps = subject.get_metadata_by_public_address(public_address)\n      expect(reps.status_code).to eq(200)\n    end\n  end\n\n  context \"#get_metadata_by_public_address\" do\n    it \"return response\" do\n      url = \"https://api.magic.link/v1/admin/auth/user/get?issuer=\"\n      url += construct_issuer_with_public_address\n      url += \"&wallet_type=\" + MagicAdmin::Resource::WalletType::SOLANA", "explanation": "Here is a concise summary of the block:\n\n**Purpose:** Test the functionality of `subject.get_metadata_by_issuer` and `subject.get_metadata_by_public_address` methods.\n\n**Functionality:** These methods are expected to return metadata in response to API requests, with different parameters (issuer/wallet type or public address) passed to them. The tests verify that these methods return a successful response with a 200 status code.", "metadata": {"repo": "magiclabs/magic-admin-ruby", "file": "test/resource/user_test.rb", "chunk_number": 3, "total_chunks": 6}, "repository_explanation": "Here is a concise description:\n\n**Purpose:** A Ruby library for interacting with Magic Labs APIs.\n\n**Content:** Includes source code and documentation for managing Magic Labs resources (e.g., users, messages) using Ruby programming language.", "file_summary": "Here's a concise summary of the file 'test/resource/user_test.rb':\n\n**Summary:** \nThis Ruby test suite using RSpec verifies the functionality of `MagicAdmin::Resource::User` class methods related to metadata retrieval and logout.\n\n**Key Points:**\n\n* Tests presence of attribute readers\n* Verifies behavior of `get_metadata_by_issuer` method with or without a wallet\n* Confirms successful API responses for metadata retrieval and logout methods"}
{"code": "      stub_request(:get, url)\n        .to_return(status: 200, body: stub_response_body.to_json, headers: {})\n      reps = subject.get_metadata_by_public_address(public_address, MagicAdmin::Resource::WalletType::SOLANA)\n      expect(reps.status_code).to eq(200)\n    end\n  end\n\n  context \"#get_metadata_by_token\" do\n    it \"return response\" do\n      url = \"https://api.magic.link/v1/admin/auth/user/get?issuer=\"\n      url += issuer\n      url += \"&wallet_type=\" + MagicAdmin::Resource::WalletType::NONE\n      stub_request(:get, url)\n        .to_return(status: 200, body: stub_response_body.to_json, headers: {})\n      reps = subject.get_metadata_by_token(spec_did_token)\n\n      expect(reps.status_code).to eq(200)\n    end\n  end\n\n  context \"#get_metadata_by_token\" do\n    it \"return response\" do\n      url = \"https://api.magic.link/v1/admin/auth/user/get?issuer=\"\n      url += issuer\n      url += \"&wallet_type=\" + MagicAdmin::Resource::WalletType::ANY\n      stub_request(:get, url)", "explanation": "**Purpose:** Test that API calls with correct status code (200) are returned from `get_metadata_by_public_address` and `get_metadata_by_token` methods.\n\n**Functionality:**\n\n* Mocks a GET request to an external API using `stub_request`.\n* Verifies that the response status code is 200 for both `get_metadata_by_public_address` and `get_metadata_by_token` methods.", "metadata": {"repo": "magiclabs/magic-admin-ruby", "file": "test/resource/user_test.rb", "chunk_number": 4, "total_chunks": 6}, "repository_explanation": "Here is a concise description:\n\n**Purpose:** A Ruby library for interacting with Magic Labs APIs.\n\n**Content:** Includes source code and documentation for managing Magic Labs resources (e.g., users, messages) using Ruby programming language.", "file_summary": "Here's a concise summary of the file 'test/resource/user_test.rb':\n\n**Summary:** \nThis Ruby test suite using RSpec verifies the functionality of `MagicAdmin::Resource::User` class methods related to metadata retrieval and logout.\n\n**Key Points:**\n\n* Tests presence of attribute readers\n* Verifies behavior of `get_metadata_by_issuer` method with or without a wallet\n* Confirms successful API responses for metadata retrieval and logout methods"}
{"code": "        .to_return(status: 200, body: stub_response_body.to_json, headers: {})\n      reps = subject.get_metadata_by_token(spec_did_token, MagicAdmin::Resource::WalletType::ANY)\n\n      expect(reps.status_code).to eq(200)\n    end\n  end\n\n  describe \"#get_metadata_by_issuer object network strategy\" do\n    before(:each) do\n      url = \"https://api.magic.link/v2/admin/auth/user/logout\"\n      stub_request(:post, url).to_return(status: 200, body: stub_response_body.to_json, headers: {})\n    end\n\n    context \"#logout_by_issuer\" do\n      it \"return response\" do\n        reps = subject.logout_by_issuer(issuer)\n        expect(reps.status_code).to eq(200)\n      end\n    end\n   \n    context \"#logout_by_public_address\" do\n      it \"return response\" do\n        reps = subject.logout_by_public_address(public_address)\n        expect(reps.status_code).to eq(200)\n      end\n    end\n\n    context \"#logout_by_token\" do\n      it \"return response\" do\n        reps = subject.logout_by_token(spec_did_token)", "explanation": "Here is a concise summary:\n\nThis block of code appears to be RSpec (Ruby testing framework) code that tests the functionality of an object's methods related to logout and metadata retrieval.\n\nIt covers three scenarios:\n\n1. `#logout_by_issuer`: Tests if logging out by issuer returns a successful response.\n2. `#logout_by_public_address`: Tests if logging out by public address returns a successful response.\n3. `#logout_by_token` and `#get_metadata_by_token`: Test if retrieving metadata or logging out by token returns a successful response with status code 200.", "metadata": {"repo": "magiclabs/magic-admin-ruby", "file": "test/resource/user_test.rb", "chunk_number": 5, "total_chunks": 6}, "repository_explanation": "Here is a concise description:\n\n**Purpose:** A Ruby library for interacting with Magic Labs APIs.\n\n**Content:** Includes source code and documentation for managing Magic Labs resources (e.g., users, messages) using Ruby programming language.", "file_summary": "Here's a concise summary of the file 'test/resource/user_test.rb':\n\n**Summary:** \nThis Ruby test suite using RSpec verifies the functionality of `MagicAdmin::Resource::User` class methods related to metadata retrieval and logout.\n\n**Key Points:**\n\n* Tests presence of attribute readers\n* Verifies behavior of `get_metadata_by_issuer` method with or without a wallet\n* Confirms successful API responses for metadata retrieval and logout methods"}
{"code": "        expect(reps.status_code).to eq(200)\n      end\n    end\n  end\nend\n", "explanation": "This block is an RSpec test assertion, expecting a \"status code\" value (likely from a HTTP request) to be equal to 200, indicating a successful response.", "metadata": {"repo": "magiclabs/magic-admin-ruby", "file": "test/resource/user_test.rb", "chunk_number": 6, "total_chunks": 6}, "repository_explanation": "Here is a concise description:\n\n**Purpose:** A Ruby library for interacting with Magic Labs APIs.\n\n**Content:** Includes source code and documentation for managing Magic Labs resources (e.g., users, messages) using Ruby programming language.", "file_summary": "Here's a concise summary of the file 'test/resource/user_test.rb':\n\n**Summary:** \nThis Ruby test suite using RSpec verifies the functionality of `MagicAdmin::Resource::User` class methods related to metadata retrieval and logout.\n\n**Key Points:**\n\n* Tests presence of attribute readers\n* Verifies behavior of `get_metadata_by_issuer` method with or without a wallet\n* Confirms successful API responses for metadata retrieval and logout methods"}
{"code": "# frozen_string_literal: true\n\nrequire \"bundler/setup\"\nBundler.setup\n\nrequire 'simplecov'\nSimpleCov.start\n\nrequire \"magic-admin\"\nrequire \"webmock/rspec\"\n\nRSpec.configure do |config|\n  # Add custom RSpec configuration here\nend\n\n# Description:\n#   Method provide sample did_token for configure specs\n#\n# Returns:\n#   did_token\n#\n\ndef spec_did_token\n  \"WyIweHRlc3QwMDAwdGVzdDAwMDB0ZXN0MDAwMHRlc3QwMDAwdGVzdDAwMDB0ZXN0MDA\"\\\n  \"wMHRlc3QwMDAwdGVzdDAwMDB0ZXN0MDAwMHRlc3QwMDAwdGVzdDAwMDB0ZXN0MDAwMH\"\\\n  \"Rlc3QwMDAwdGVzdDAwMDB0ZXN0MDAwMHRlc3QwMDAwMDAiLCJ7XCJpYXRcIjoxMjM0N\"\\\n  \"TEyMzQ1LFwiZXh0XCI6MTIzNDUxMjM0NSxcImlzc1wiOlwiZGlkOmV0aHI6MHh0ZXN0\"\\\n  \"MDAwMHRlc3QwMDAwdGVzdDAwMDB0ZXN0MDAwMHRlc3QwMDAwXCIsXCJzdWJcIjpcIjA\"\\\n  \"wYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXoxMjM0NTY3ODkwMDAwMDA9XCIsXCJhdW\"\\\n  \"RcIjpcImRpZDptYWdpYzp0ZXN0dGVzdC10ZXN0LXRlc3QtdGVzdC10ZXN0dGVzdHRlc\"\\\n  \"3RcIixcIm5iZlwiOjEyMzQ1MTIzNDUsXCJ0aWRcIjpcInRlc3R0ZXN0LXRlc3QtdGVz\"\\\n  \"dC10ZXN0LXRlc3R0ZXN0dGVzdFwiLFwiYWRkXCI6XCIweDAwdGVzdDAwMDB0ZXN0MDA\"\\", "explanation": "Here is a concise summary:\n\nThis block sets up a test environment for Ruby specs using Bundler, SimpleCov, and RSpec, and defines a utility method `spec_did_token` to provide a sample DID token for testing purposes.", "metadata": {"repo": "magiclabs/magic-admin-ruby", "file": "test/spec_helper.rb", "chunk_number": 1, "total_chunks": 2}, "repository_explanation": "Here is a concise description:\n\n**Purpose:** A Ruby library for interacting with Magic Labs APIs.\n\n**Content:** Includes source code and documentation for managing Magic Labs resources (e.g., users, messages) using Ruby programming language.", "file_summary": "Here is a concise summary of 'test/spec_helper.rb':\n\nThis file sets up a test environment with Bundler, SimpleCov, and RSpec, providing utility methods `spec_api_secret_key`, `spec_client_id` for configuration in testing/development environments."}
{"code": "  \"wMHRlc3QwMDAwdGVzdDAwMDB0ZXN0MDAwMHRlc3QwMDAwdGVzdDAwMDB0ZXN0MDAwMH\"\\\n  \"Rlc3QwMDAwdGVzdDAwMDB0ZXN0MDAwMHRlc3QwMDAwdGVzdDAwMDB0ZXN0MDAwMHRlc\"\\\n  \"3QwMDAwdGVzdDAwMDBcIn0iXQ==\"\nend\n\n# Description:\n#   Method provide sample api_secret_key for configure specs\n#\n# Returns:\n#   api_secret_key\n#\n\ndef spec_api_secret_key\n  \"sk_test_TESTTESTTESTTEST\"\nend\n\ndef spec_client_id\n  \"clientId12345=\"\nend", "explanation": "**Summary:**\n\nThis block contains a string encoded in Base64, which decodes to a repeated string, and two Ruby methods:\n\n1. `spec_api_secret_key`: Returns a sample API secret key.\n2. `spec_client_id`: Returns a sample client ID.\n\nBoth methods are used for configuration purposes, likely in a testing or development environment.", "metadata": {"repo": "magiclabs/magic-admin-ruby", "file": "test/spec_helper.rb", "chunk_number": 2, "total_chunks": 2}, "repository_explanation": "Here is a concise description:\n\n**Purpose:** A Ruby library for interacting with Magic Labs APIs.\n\n**Content:** Includes source code and documentation for managing Magic Labs resources (e.g., users, messages) using Ruby programming language.", "file_summary": "Here is a concise summary of 'test/spec_helper.rb':\n\nThis file sets up a test environment with Bundler, SimpleCov, and RSpec, providing utility methods `spec_api_secret_key`, `spec_client_id` for configuration in testing/development environments."}
{"code": "# frozen_string_literal: true\n\nrequire \"spec_helper\"\n\ndescribe MagicAdmin::Util, type: :module do\n  context \".platform_info\" do\n    it \"return respond\" do\n      expect(described_class.platform_info).to be_kind_of(Hash)\n    end\n\n    it \"include keys\" do\n      expect(described_class.platform_info).to include(:platform,\n                                                       :language,\n                                                       :language_version,\n                                                       :user_name)\n    end\n  end\n\n  context \".user_agent\" do\n    it \"return respond\" do\n      expect(described_class.user_agent).to be_kind_of(Hash)\n    end\n\n    it \"include keys\" do\n      expect(described_class.user_agent).to include(:sdk_version,\n                                                    :publisher,\n                                                    :platform)\n    end\n  end\n\n  context \".headers\" do\n    it \"return respond\" do\n      expect(described_class.headers(spec_api_secret_key)).to be_kind_of(Hash)", "explanation": "Here is a concise summary:\n\nThis block defines RSpec tests for `MagicAdmin::Util` module functions:\n\n* `.platform_info`: Returns a Hash with platform information (keys: :platform, :language, etc.)\n* `.user_agent`: Returns a Hash with user agent information (keys: :sdk_version, :publisher, etc.)\n* `.headers`: Takes a secret key and returns a Hash of headers", "metadata": {"repo": "magiclabs/magic-admin-ruby", "file": "test/util_test.rb", "chunk_number": 1, "total_chunks": 2}, "repository_explanation": "Here is a concise description:\n\n**Purpose:** A Ruby library for interacting with Magic Labs APIs.\n\n**Content:** Includes source code and documentation for managing Magic Labs resources (e.g., users, messages) using Ruby programming language.", "file_summary": "Here is a concise summary:\n\n**test/util_test.rb**: RSpec tests for MagicAdmin::Util module functions, ensuring correct platform and user agent information, as well as secret key headers in HTTP responses."}
{"code": "    end\n\n    it \"include keys\" do\n      expect(described_class.headers(spec_api_secret_key)).to include(\n        :\"content-type\", :\"X-Magic-Secret-Key\", :\"User-Agent\"\n      )\n    end\n  end\nend\n", "explanation": "**Summary:**\n\nThis block is a test case that ensures a specific class includes certain HTTP headers in its responses, including `Content-Type`, `X-Magic-Secret-Key`, and `User-Agent`.", "metadata": {"repo": "magiclabs/magic-admin-ruby", "file": "test/util_test.rb", "chunk_number": 2, "total_chunks": 2}, "repository_explanation": "Here is a concise description:\n\n**Purpose:** A Ruby library for interacting with Magic Labs APIs.\n\n**Content:** Includes source code and documentation for managing Magic Labs resources (e.g., users, messages) using Ruby programming language.", "file_summary": "Here is a concise summary:\n\n**test/util_test.rb**: RSpec tests for MagicAdmin::Util module functions, ensuring correct platform and user agent information, as well as secret key headers in HTTP responses."}

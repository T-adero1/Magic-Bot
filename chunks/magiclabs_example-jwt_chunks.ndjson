{"code": "NEXT_PUBLIC_MAGIC_PUBLISHABLE_KEY=pk_123...\nMAGIC_SECRET_KEY=sk_123...\nJWT_SECRET=\nSESSION_LENGTH_IN_DAYS=30", "explanation": "This block appears to be a set of environment variables, likely for a Next.js project, containing:\n\n* API keys (Magic Publishable Key and Secret Key)\n* A JWT secret key\n* Session length in days\n\nThese variables are used to configure authentication and session management for the application.", "metadata": {"repo": "magiclabs/example-jwt", "file": ".env.local.example", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise explanation:\n\n**Repository Name:** magiclabs/example-jwt\n\n**Purpose:** Example code for using JSON Web Tokens (JWT) in a web application.\n\n**Content:** A basic example of JWT implementation, including authentication and authorization examples written in [insert programming language(s)].", "file_summary": "Here is a concise summary of the file '.env.local.example':\n\n\"Environment configuration for Next.js project, containing API keys and secrets for authentication, as well as JWT secret key and session duration settings.\""}
{"code": "# Quick Start Instructions\n\n```txt\n$ git clone https://github.com/magiclabs/example-jwt.git\n$ cd example-jwt\n$ mv .env.local.example .env.local // enter your Magic API keys\n$ yarn install\n$ yarn dev\n```\n\n- View the example code [**here**](https://github.com/magiclabs/example-jwt).\n- Try the demo [**here**](https://magic-jwt.vercel.app/login).\n\n# Introduction\n\nWhen a user logs in with Magic, they'll remain authenticated for 7 days until having to login again. Some developers want to keep their users logged in for much longer, others much shorter (if dealing with sensitive data, such as a finance application). This tutorial will show how you can customize session lengths with Magic, using cookies and JSON web tokens (JWT).\n\n**When relying on Magic to manage sessions, the standard flow is:**\n\n- User logs in with `loginWithMagicLink`\n- Send the auth token to your backend to validate\n- On the frontend, call `magic.user.isLoggedIn()` to verify the user is authenticated\n", "explanation": "**Purpose:** Provides quick start instructions for a JWT example project and introduces a tutorial on customizing session lengths with Magic.\n\n**Functionality:**\n\n* Offers step-by-step commands to set up and run the example project.\n* Links to view the example code and try the demo.\n* Explains the standard flow of managing sessions with Magic using cookies and JWT.", "metadata": {"repo": "magiclabs/example-jwt", "file": "README.md", "chunk_number": 1, "total_chunks": 12}, "repository_explanation": "Here is a concise explanation:\n\n**Repository Name:** magiclabs/example-jwt\n\n**Purpose:** Example code for using JSON Web Tokens (JWT) in a web application.\n\n**Content:** A basic example of JWT implementation, including authentication and authorization examples written in [insert programming language(s)].", "file_summary": "Here is a concise summary:\n\n**README.md Summary:**\n\nThis project provides a quick start guide for a JWT example, showcasing how to use Magic for authentication and session management. It explains how to set up and run the example, and introduces a tutorial on customizing session lengths with Magic.\n\nThe code handles user login via Magic Link authentication, resolves auth tokens, sends them to the server for validation, retrieves user data, and updates the UserContext. It also sets JWT payloads as cookies for subsequent requests and verifies login status on page refresh.\n\nKey features include:\n\n* Customizable session expiration\n* Removing reliance on Magic after initial login\n* Verifying JWTs and refreshing user data on page load\n* Regenerating new JWT tokens with extended expiration times\n\nThis project aims to provide a more controlled experience by managing sessions directly, replacing Magic for custom session management."}
{"code": "**This tutorial will take over session management responsibilities from Magic, and the new flow will be:**\n\n- User logs in with `loginWithMagicLink`\n- Send the auth token to your backend to validate\n- Create a JWT (containing the user info) and set it inside an `httpOnly` cookie\n- On the frontend, to verify the user is authenticated, send a request to your own backend at `/api/user` (instead of calling `isLoggedIn()`), a route we'll set up to verify and refresh the cookie & JWT\n\n_Note: even though we\u2019re relying on our backend to tell if the user is logged in, they will still be authenticated with Magic for 7 days after logging in (unless they explicitly logout before then)._\n\nWith this approach, you can set the JWT and cookie to expire in 15 minutes, one month, or whatever is best for your app. And after the user logs in, since Magic is no longer relied upon, all we need to do is verify the cookie and JWT to know the user's session is valid.\n\n## What are JSON Web Tokens\n", "explanation": "**Purpose:** Replace Magic with custom session management for a more controlled experience.\n\n**Functionality:**\n\n1. User logs in using `loginWithMagicLink`.\n2. Backend validates auth token.\n3. JWT (with user info) is created and set inside an `httpOnly` cookie.\n4. Frontend verifies authentication by calling `/api/user` endpoint on backend.\n\nThis approach allows for customizable session expiration and removes reliance on Magic after initial login.", "metadata": {"repo": "magiclabs/example-jwt", "file": "README.md", "chunk_number": 2, "total_chunks": 12}, "repository_explanation": "Here is a concise explanation:\n\n**Repository Name:** magiclabs/example-jwt\n\n**Purpose:** Example code for using JSON Web Tokens (JWT) in a web application.\n\n**Content:** A basic example of JWT implementation, including authentication and authorization examples written in [insert programming language(s)].", "file_summary": "Here is a concise summary:\n\n**README.md Summary:**\n\nThis project provides a quick start guide for a JWT example, showcasing how to use Magic for authentication and session management. It explains how to set up and run the example, and introduces a tutorial on customizing session lengths with Magic.\n\nThe code handles user login via Magic Link authentication, resolves auth tokens, sends them to the server for validation, retrieves user data, and updates the UserContext. It also sets JWT payloads as cookies for subsequent requests and verifies login status on page refresh.\n\nKey features include:\n\n* Customizable session expiration\n* Removing reliance on Magic after initial login\n* Verifying JWTs and refreshing user data on page load\n* Regenerating new JWT tokens with extended expiration times\n\nThis project aims to provide a more controlled experience by managing sessions directly, replacing Magic for custom session management."}
{"code": "JWTs are a token standard that can be used as proof of identity, as well as what permissions a user has. Each JWT has three parts, a `Header`, `Payload`, and `Signature`, separated by a `.`. The `Header` specifies the signing algorithm used to sign the token, the `Payload` contains the data, such as name, email, role, expiration timestamp, etc, and the `Signature` is generated by taking the Header and Payload, and signing it using the algorithm specified in the Header with a `secret` value.\n\nExample JWT:\n\n```txt\neyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.\neyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.\nSflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c\n```\n", "explanation": "Here is a concise summary:\n\n**Purpose:** A JWT (JSON Web Token) is an identity token that proves user identity and permissions.\n\n**Functionality:** A JWT has three parts: Header, Payload, and Signature. The Payload contains user data, while the Signature authenticates it using a secret key.", "metadata": {"repo": "magiclabs/example-jwt", "file": "README.md", "chunk_number": 3, "total_chunks": 12}, "repository_explanation": "Here is a concise explanation:\n\n**Repository Name:** magiclabs/example-jwt\n\n**Purpose:** Example code for using JSON Web Tokens (JWT) in a web application.\n\n**Content:** A basic example of JWT implementation, including authentication and authorization examples written in [insert programming language(s)].", "file_summary": "Here is a concise summary:\n\n**README.md Summary:**\n\nThis project provides a quick start guide for a JWT example, showcasing how to use Magic for authentication and session management. It explains how to set up and run the example, and introduces a tutorial on customizing session lengths with Magic.\n\nThe code handles user login via Magic Link authentication, resolves auth tokens, sends them to the server for validation, retrieves user data, and updates the UserContext. It also sets JWT payloads as cookies for subsequent requests and verifies login status on page refresh.\n\nKey features include:\n\n* Customizable session expiration\n* Removing reliance on Magic after initial login\n* Verifying JWTs and refreshing user data on page load\n* Regenerating new JWT tokens with extended expiration times\n\nThis project aims to provide a more controlled experience by managing sessions directly, replacing Magic for custom session management."}
{"code": "Servers issue JWTs to users, and verify them on subsequent requests back to the server. When created, JWTs are signed with a secret that only the issuing server knows, and when verifying the authenticity of the token, the server again uses that secret. If the JWT was altered in any way, when verifying the token, the signature will not match, so the server knows to reject the token.\n\nIt's important to note that information **inside** a JWT is not encrypted or secret. For example, anyone can enter a JWT into https://jwt.io to decode and read the contents.\n\n## File Structure\n\n```txt\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 components\n\u2502   \u251c\u2500\u2500 email-form.js\n\u2502   \u251c\u2500\u2500 header.js\n\u2502   \u251c\u2500\u2500 layout.js\n\u2502   \u2514\u2500\u2500 loading.js\n\u251c\u2500\u2500 lib\n\u2502   \u251c\u2500\u2500 UserContext.js\n\u2502   \u251c\u2500\u2500 cookies.js\n\u2502   \u251c\u2500\u2500 magic.js\n\u2502   \u2514\u2500\u2500 magicAdmin.js\n\u251c\u2500\u2500 package.json\n\u251c\u2500\u2500 pages\n\u2502   \u251c\u2500\u2500 _app.js\n\u2502   \u251c\u2500\u2500 _document.js\n\u2502   \u251c\u2500\u2500 api\n\u2502   \u2502   \u251c\u2500\u2500 login.js\n\u2502   \u2502   \u251c\u2500\u2500 logout.js\n\u2502   \u2502   \u2514\u2500\u2500 user.js\n\u2502   \u251c\u2500\u2500 index.js\n\u2502   \u251c\u2500\u2500 login.js\n\u2502   \u2514\u2500\u2500 profile.js\n\u251c\u2500\u2500 public (images)\n\u251c\u2500\u2500 .env.local\n\u2514\u2500\u2500 yarn.lock\n```\n", "explanation": "Here is a concise summary:\n\n**Purpose:** Describe the purpose and functionality of a block, which appears to be documentation for an application.\n\n**Functionality:** Explain how JSON Web Tokens (JWTs) work, highlighting their security features and contrast with information within them being readable. The rest of the text describes the file structure of a project.", "metadata": {"repo": "magiclabs/example-jwt", "file": "README.md", "chunk_number": 4, "total_chunks": 12}, "repository_explanation": "Here is a concise explanation:\n\n**Repository Name:** magiclabs/example-jwt\n\n**Purpose:** Example code for using JSON Web Tokens (JWT) in a web application.\n\n**Content:** A basic example of JWT implementation, including authentication and authorization examples written in [insert programming language(s)].", "file_summary": "Here is a concise summary:\n\n**README.md Summary:**\n\nThis project provides a quick start guide for a JWT example, showcasing how to use Magic for authentication and session management. It explains how to set up and run the example, and introduces a tutorial on customizing session lengths with Magic.\n\nThe code handles user login via Magic Link authentication, resolves auth tokens, sends them to the server for validation, retrieves user data, and updates the UserContext. It also sets JWT payloads as cookies for subsequent requests and verifies login status on page refresh.\n\nKey features include:\n\n* Customizable session expiration\n* Removing reliance on Magic after initial login\n* Verifying JWTs and refreshing user data on page load\n* Regenerating new JWT tokens with extended expiration times\n\nThis project aims to provide a more controlled experience by managing sessions directly, replacing Magic for custom session management."}
{"code": "# Login\n\n## login.js (Client-side)\n\nAfter clicking the magic link, `loginWithMagicLink` resolves to an auth token, which is then sent to our backend at `/api/login`. The server will respond with user data, which we set in the `UserContext`.\n\n```js\nconst Login = () => {\n  const [disabled, setDisabled] = useState(false);\n  const [user, setUser] = useContext(UserContext);\n\n  // Redirect logged in users to /profile if trying to visit login page\n  useEffect(() => {\n    user?.issuer && Router.push('/profile');\n  }, [user]);\n\n  async function handleLoginWithEmail(email) {\n    try {\n      setDisabled(true); // disable login button to prevent multiple emails from being triggered\n\n      // Trigger Magic link to be sent to user\n      let didToken = await magic.auth.loginWithMagicLink({ email });\n\n      // Validate didToken with server\n      const res = await fetch('/api/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + didToken,\n        },", "explanation": "Here is a concise summary:\n\n**Purpose:** Handles user login via Magic Link authentication.\n\n**Functionality:** \n\n1. Resolves an auth token after clicking a magic link.\n2. Sends the token to the server at `/api/login` for validation.\n3. Retrieves user data from the server and updates the `UserContext`.\n4. Redirects logged-in users to `/profile`.", "metadata": {"repo": "magiclabs/example-jwt", "file": "README.md", "chunk_number": 5, "total_chunks": 12}, "repository_explanation": "Here is a concise explanation:\n\n**Repository Name:** magiclabs/example-jwt\n\n**Purpose:** Example code for using JSON Web Tokens (JWT) in a web application.\n\n**Content:** A basic example of JWT implementation, including authentication and authorization examples written in [insert programming language(s)].", "file_summary": "Here is a concise summary:\n\n**README.md Summary:**\n\nThis project provides a quick start guide for a JWT example, showcasing how to use Magic for authentication and session management. It explains how to set up and run the example, and introduces a tutorial on customizing session lengths with Magic.\n\nThe code handles user login via Magic Link authentication, resolves auth tokens, sends them to the server for validation, retrieves user data, and updates the UserContext. It also sets JWT payloads as cookies for subsequent requests and verifies login status on page refresh.\n\nKey features include:\n\n* Customizable session expiration\n* Removing reliance on Magic after initial login\n* Verifying JWTs and refreshing user data on page load\n* Regenerating new JWT tokens with extended expiration times\n\nThis project aims to provide a more controlled experience by managing sessions directly, replacing Magic for custom session management."}
{"code": "      });\n\n      if (res.status === 200) {\n        let data = await res.json();\n        setUser(data.user);\n        Router.push('/profile');\n      }\n    } catch (error) {\n      setDisabled(false); // re-enable login button - user may have requested to edit their email\n      console.log(error);\n    }\n  }\n\n  return; // <LoginForm />\n};\n```\n\n## /api/login (Server-side)\n\nIn our `/api/login` route, we first need to validate the auth token provided by Magic, and then use it to grab information about the user. That information is what will be stored inside the JWT payload, which itself will be stored inside a cookie, and automatically sent to our server on subsequent requests.\n\nExample of the stored cookie:\n\n```js\nexport default async function login(req, res) {\n  try {\n    const didToken = req.headers.authorization.substr(7);\n\n    await magic.token.validate(didToken);\n\n    const metadata = await magic.users.getMetadataByToken(didToken);\n", "explanation": "**Functionality Summary:**\n\nThis block of code handles a login request by:\n\n* Validating an auth token from Magic\n* Retrieving user information using the validated token\n* Storing this info in a JWT payload, which is then sent as a cookie to subsequent requests\n\n**Purpose:** This code enables user authentication and session management.", "metadata": {"repo": "magiclabs/example-jwt", "file": "README.md", "chunk_number": 6, "total_chunks": 12}, "repository_explanation": "Here is a concise explanation:\n\n**Repository Name:** magiclabs/example-jwt\n\n**Purpose:** Example code for using JSON Web Tokens (JWT) in a web application.\n\n**Content:** A basic example of JWT implementation, including authentication and authorization examples written in [insert programming language(s)].", "file_summary": "Here is a concise summary:\n\n**README.md Summary:**\n\nThis project provides a quick start guide for a JWT example, showcasing how to use Magic for authentication and session management. It explains how to set up and run the example, and introduces a tutorial on customizing session lengths with Magic.\n\nThe code handles user login via Magic Link authentication, resolves auth tokens, sends them to the server for validation, retrieves user data, and updates the UserContext. It also sets JWT payloads as cookies for subsequent requests and verifies login status on page refresh.\n\nKey features include:\n\n* Customizable session expiration\n* Removing reliance on Magic after initial login\n* Verifying JWTs and refreshing user data on page load\n* Regenerating new JWT tokens with extended expiration times\n\nThis project aims to provide a more controlled experience by managing sessions directly, replacing Magic for custom session management."}
{"code": "    // Create JWT with information about the user, expires in `SESSION_LENGTH_IN_DAYS`, and signed by `JWT_SECRET`\n    let token = jwt.sign(\n      {\n        ...metadata,\n        exp: Math.floor(Date.now() / 1000) + 60 * 60 * 24 * process.env.SESSION_LENGTH_IN_DAYS,\n      },\n      process.env.JWT_SECRET\n    );\n\n    // Set a cookie containing the JWT\n    setTokenCookie(res, token);\n\n    res.status(200).send({ user: metadata });\n  } catch (error) {\n    console.log(error);\n    res.status(500).end();\n  }\n}\n```\n\n# Persisting Login\n\n## Client-side\n\n`_app.js` is a file that initializes all of our pages, and is run when any new page is refreshed. Here, we send a request to our backend at `/api/user` to check if a user is logged in. This backend route simply verifies the cookie and JWT, and refreshes the expiration of each. If `/api/user` responds with no user, redirect the user to `/login`.\n\n```js\nfunction MyApp({ Component, pageProps }) {\n  const [user, setUser] = useState();\n", "explanation": "Here is a concise summary:\n\n**Block Purpose:** Creates and sets a JWT token for a user session, signing it with a secret key and setting a cookie.\n\n**Functionality:** Verifies user login status on page refresh by checking cookie and JWT, refreshing expiration if valid, or redirects to login page if not.", "metadata": {"repo": "magiclabs/example-jwt", "file": "README.md", "chunk_number": 7, "total_chunks": 12}, "repository_explanation": "Here is a concise explanation:\n\n**Repository Name:** magiclabs/example-jwt\n\n**Purpose:** Example code for using JSON Web Tokens (JWT) in a web application.\n\n**Content:** A basic example of JWT implementation, including authentication and authorization examples written in [insert programming language(s)].", "file_summary": "Here is a concise summary:\n\n**README.md Summary:**\n\nThis project provides a quick start guide for a JWT example, showcasing how to use Magic for authentication and session management. It explains how to set up and run the example, and introduces a tutorial on customizing session lengths with Magic.\n\nThe code handles user login via Magic Link authentication, resolves auth tokens, sends them to the server for validation, retrieves user data, and updates the UserContext. It also sets JWT payloads as cookies for subsequent requests and verifies login status on page refresh.\n\nKey features include:\n\n* Customizable session expiration\n* Removing reliance on Magic after initial login\n* Verifying JWTs and refreshing user data on page load\n* Regenerating new JWT tokens with extended expiration times\n\nThis project aims to provide a more controlled experience by managing sessions directly, replacing Magic for custom session management."}
{"code": "  // If JWT is valid, set the UserContext with returned value from /api/user\n  // Otherwise, redirect to /login and set UserContext to { user: null }\n  useEffect(() => {\n    setUser({ loading: true });\n    fetch('/api/user')\n      .then((res) => res.json())\n      .then((data) => {\n        data.user ? setUser(data.user) : Router.push('/login') && setUser({ user: null });\n      });\n  }, []);\n\n  return (\n    <UserContext.Provider value={[user, setUser]}>\n      <Layout>\n        <Component {...pageProps} />\n      </Layout>\n    </UserContext.Provider>\n  );\n}\n\nexport default MyApp;\n```\n\n## Validating Cookie and JWT (Backend)\n\nThe `/api/user` route will get a request any time a user refreshes the page. It verifies, then refreshes the JWT and cookie, and sends back the logged in user's data to our frontend. The purpose of refreshing the token is so that a user is not logged out after `SESSION_LENGTH_IN_DAYS` days after first logging in, but only logged out after `SESSION_LENGTH_IN_DAYS` days of inactivity.\n\n```js", "explanation": "Here is a concise summary:\n\n**Purpose:** Validate JWT and refresh user data on page load.\n\n**Functionality:**\n\n* Fetches user data from `/api/user`\n* If JWT is valid, sets `UserContext` with returned user data\n* If JWT is invalid, redirects to login page and sets `UserContext` to null\n\nThis functionality ensures a user remains logged in even after prolonged periods of inactivity.", "metadata": {"repo": "magiclabs/example-jwt", "file": "README.md", "chunk_number": 8, "total_chunks": 12}, "repository_explanation": "Here is a concise explanation:\n\n**Repository Name:** magiclabs/example-jwt\n\n**Purpose:** Example code for using JSON Web Tokens (JWT) in a web application.\n\n**Content:** A basic example of JWT implementation, including authentication and authorization examples written in [insert programming language(s)].", "file_summary": "Here is a concise summary:\n\n**README.md Summary:**\n\nThis project provides a quick start guide for a JWT example, showcasing how to use Magic for authentication and session management. It explains how to set up and run the example, and introduces a tutorial on customizing session lengths with Magic.\n\nThe code handles user login via Magic Link authentication, resolves auth tokens, sends them to the server for validation, retrieves user data, and updates the UserContext. It also sets JWT payloads as cookies for subsequent requests and verifies login status on page refresh.\n\nKey features include:\n\n* Customizable session expiration\n* Removing reliance on Magic after initial login\n* Verifying JWTs and refreshing user data on page load\n* Regenerating new JWT tokens with extended expiration times\n\nThis project aims to provide a more controlled experience by managing sessions directly, replacing Magic for custom session management."}
{"code": "export default async function user(req, res) {\n  try {\n    if (!req.cookies.token) return res.json({ user: null });\n\n    let token = req.cookies.token;\n\n    let user = jwt.verify(token, process.env.JWT_SECRET);\n\n    // Refresh JWT\n    let newToken = jwt.sign(\n      {\n        ...user,\n        exp: Math.floor(Date.now() / 1000) + 60 * 60 * 24 * process.env.SESSION_LENGTH_IN_DAYS,\n      },\n      process.env.JWT_SECRET\n    );\n\n    setTokenCookie(res, newToken);\n\n    res.status(200).json({ user });\n  } catch (error) {\n    res.status(200).json({ user: null });\n  }\n}\n```\n\n## Profile.js\n\nTo display information about the user, we rely on the `UserContext`. This is where we stored the user data collected from the response from `/api/user` in `_app.js`.\n\n```js\nconst Profile = () => {\n  const [user] = useContext(UserContext);\n\n  return (\n    <>\n      {!user || user.loading ? (\n        <Loading />\n      ) : (\n        user.issuer && // <ProfileInfo />\n      )}\n    </>\n  );\n};\n```\n\n# Logging a User Out\n\n## Logout\n", "explanation": "Here is a summary of the purpose and functionality:\n\n**Block Purpose:** Refreshes user JWT token on every request.\n\n**Functionality:**\n\n* Verifies user JWT token using `jwt.verify`\n* Regenerates a new JWT token with extended expiration time\n* Sets the new token as a cookie in the response\n* Returns the refreshed user data in JSON format.", "metadata": {"repo": "magiclabs/example-jwt", "file": "README.md", "chunk_number": 9, "total_chunks": 12}, "repository_explanation": "Here is a concise explanation:\n\n**Repository Name:** magiclabs/example-jwt\n\n**Purpose:** Example code for using JSON Web Tokens (JWT) in a web application.\n\n**Content:** A basic example of JWT implementation, including authentication and authorization examples written in [insert programming language(s)].", "file_summary": "Here is a concise summary:\n\n**README.md Summary:**\n\nThis project provides a quick start guide for a JWT example, showcasing how to use Magic for authentication and session management. It explains how to set up and run the example, and introduces a tutorial on customizing session lengths with Magic.\n\nThe code handles user login via Magic Link authentication, resolves auth tokens, sends them to the server for validation, retrieves user data, and updates the UserContext. It also sets JWT payloads as cookies for subsequent requests and verifies login status on page refresh.\n\nKey features include:\n\n* Customizable session expiration\n* Removing reliance on Magic after initial login\n* Verifying JWTs and refreshing user data on page load\n* Regenerating new JWT tokens with extended expiration times\n\nThis project aims to provide a more controlled experience by managing sessions directly, replacing Magic for custom session management."}
{"code": "_Note: Backing up to when a user logs in with `loginWithMagicLink`, the sdk first checks if the user has an active session with Magic, and if so, automatically logs the user in without having to click any magic link._\n\nTo manually log a user out, this will require a request to our backend at `/api/logout` to clear the cookie with the JWT that's being used to prove the user has a valid session.\n\nEven though we are managing the session with the JWT, the session with Magic is still valid for 7 days after first logging in (unless the user logs out before then). Depending on how long ago the user logged in, their session with Magic could still be active. That\u2019s why we need to attempt to log the user out with Magic as well. If the user\u2019s session with Magic is expired, it will throw an error, so this logic is wrapped in a `try / catch` block.\n\n```js\n// header.js\n<Link href='/api/logout'>\n  <TextButton color='warning' size='sm'>\n    Logout\n  </TextButton>\n</Link>\n```\n\n```js\n// /api/logout", "explanation": "**Summary:**\n\nThis block is responsible for handling user login and logout functionality with Magic, a third-party service. It automatically logs users in if they have an active session, and allows manual logout by making requests to the `/api/logout` endpoint, clearing cookies and attempting to invalidate Magic sessions within a 7-day timeframe.", "metadata": {"repo": "magiclabs/example-jwt", "file": "README.md", "chunk_number": 10, "total_chunks": 12}, "repository_explanation": "Here is a concise explanation:\n\n**Repository Name:** magiclabs/example-jwt\n\n**Purpose:** Example code for using JSON Web Tokens (JWT) in a web application.\n\n**Content:** A basic example of JWT implementation, including authentication and authorization examples written in [insert programming language(s)].", "file_summary": "Here is a concise summary:\n\n**README.md Summary:**\n\nThis project provides a quick start guide for a JWT example, showcasing how to use Magic for authentication and session management. It explains how to set up and run the example, and introduces a tutorial on customizing session lengths with Magic.\n\nThe code handles user login via Magic Link authentication, resolves auth tokens, sends them to the server for validation, retrieves user data, and updates the UserContext. It also sets JWT payloads as cookies for subsequent requests and verifies login status on page refresh.\n\nKey features include:\n\n* Customizable session expiration\n* Removing reliance on Magic after initial login\n* Verifying JWTs and refreshing user data on page load\n* Regenerating new JWT tokens with extended expiration times\n\nThis project aims to provide a more controlled experience by managing sessions directly, replacing Magic for custom session management."}
{"code": "export default async function logout(req, res) {\n  try {\n    if (!req.cookies.token) return res.status(401).json({ message: 'User is not logged in' });\n\n    let token = req.cookies.token;\n\n    let user = jwt.verify(token, process.env.JWT_SECRET);\n\n    removeTokenCookie(res);\n\n    try {\n      await magic.users.logoutByIssuer(user.issuer);\n    } catch (error) {\n      console.log('Users session with Magic already expired');\n    }\n\n    res.writeHead(302, { Location: '/login' });\n    res.end();\n  } catch (error) {\n    res.status(401).json({ message: 'User is not logged in' });\n  }\n}\n```\n", "explanation": "**Purpose:** Handles user logout functionality.\n\n**Functionality:** Verifies a user's JWT token, removes authentication cookies, and redirects them to the login page after logging out of Magic.", "metadata": {"repo": "magiclabs/example-jwt", "file": "README.md", "chunk_number": 11, "total_chunks": 12}, "repository_explanation": "Here is a concise explanation:\n\n**Repository Name:** magiclabs/example-jwt\n\n**Purpose:** Example code for using JSON Web Tokens (JWT) in a web application.\n\n**Content:** A basic example of JWT implementation, including authentication and authorization examples written in [insert programming language(s)].", "file_summary": "Here is a concise summary:\n\n**README.md Summary:**\n\nThis project provides a quick start guide for a JWT example, showcasing how to use Magic for authentication and session management. It explains how to set up and run the example, and introduces a tutorial on customizing session lengths with Magic.\n\nThe code handles user login via Magic Link authentication, resolves auth tokens, sends them to the server for validation, retrieves user data, and updates the UserContext. It also sets JWT payloads as cookies for subsequent requests and verifies login status on page refresh.\n\nKey features include:\n\n* Customizable session expiration\n* Removing reliance on Magic after initial login\n* Verifying JWTs and refreshing user data on page load\n* Regenerating new JWT tokens with extended expiration times\n\nThis project aims to provide a more controlled experience by managing sessions directly, replacing Magic for custom session management."}
{"code": "Again, it's possible that the user is logged in with our app, but has an expired session with Magic. In order for certain Magic SDK methods to work (such as to update their email using [`magic.user.updateEmail`](https://docs.magic.link/client-sdk/web/api-reference#updateemail)), the user must be logged in with Magic. So if needing to call one of these, make sure to prompt the user to login again with `loginWithMagicLink` if their session with Magic has expired.\n\n# Done\n\nYou now have a Next.js app with Magic authentication, and custom sessions!\n", "explanation": "**Purpose:** To handle Magic SDK method calls when user's session expires.\n**Functionality:** Prompt user to log in again using `loginWithMagicLink` before calling expired methods.", "metadata": {"repo": "magiclabs/example-jwt", "file": "README.md", "chunk_number": 12, "total_chunks": 12}, "repository_explanation": "Here is a concise explanation:\n\n**Repository Name:** magiclabs/example-jwt\n\n**Purpose:** Example code for using JSON Web Tokens (JWT) in a web application.\n\n**Content:** A basic example of JWT implementation, including authentication and authorization examples written in [insert programming language(s)].", "file_summary": "Here is a concise summary:\n\n**README.md Summary:**\n\nThis project provides a quick start guide for a JWT example, showcasing how to use Magic for authentication and session management. It explains how to set up and run the example, and introduces a tutorial on customizing session lengths with Magic.\n\nThe code handles user login via Magic Link authentication, resolves auth tokens, sends them to the server for validation, retrieves user data, and updates the UserContext. It also sets JWT payloads as cookies for subsequent requests and verifies login status on page refresh.\n\nKey features include:\n\n* Customizable session expiration\n* Removing reliance on Magic after initial login\n* Verifying JWTs and refreshing user data on page load\n* Regenerating new JWT tokens with extended expiration times\n\nThis project aims to provide a more controlled experience by managing sessions directly, replacing Magic for custom session management."}
{"code": "import { useState } from 'react';\nimport { Input, Icon, MonochromeIcons, CallToAction } from '@magiclabs/ui';\n\nconst EmailForm = ({ onEmailSubmit, disabled }) => {\n  const [email, setEmail] = useState('');\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    onEmailSubmit(email);\n  };\n\n  return (\n    <>\n      <form onSubmit={handleSubmit}>\n        <h3 className='form-header'>Login</h3>\n        <div className='input-wrapper'>\n          <Input\n            placeholder='Enter your email'\n            size='sm'\n            type='email'\n            value={email}\n            onChange={(e) => setEmail(e.target.value)}\n            prefix={<Icon inline type={MonochromeIcons.Envelope} size={22} />}\n          />\n        </div>\n        <div>\n          <CallToAction\n            leadingIcon={MonochromeIcons.PaperPlane}\n            color='primary'\n            size='sm'\n            disabled={disabled}\n            onClick={handleSubmit}\n          >\n            Send Magic Link\n          </CallToAction>\n        </div>", "explanation": "**Summary**\n\nThis block is a React component named `EmailForm`. Its purpose is to collect an email address from the user, validate it as an email type, and submit it when a \"Send Magic Link\" button is clicked. The form can be disabled by passing a `disabled` prop.", "metadata": {"repo": "magiclabs/example-jwt", "file": "components/email-form.js", "chunk_number": 1, "total_chunks": 2}, "repository_explanation": "Here is a concise explanation:\n\n**Repository Name:** magiclabs/example-jwt\n\n**Purpose:** Example code for using JSON Web Tokens (JWT) in a web application.\n\n**Content:** A basic example of JWT implementation, including authentication and authorization examples written in [insert programming language(s)].", "file_summary": "Here is a concise summary of the file 'components/email-form.js':\n\n**EmailForm Component**\nCollects and validates user's email address, enabling submission on \"Send Magic Link\" click with optional form disabling via `disabled` prop."}
{"code": "      </form>\n      <style jsx>{`\n        form,\n        label {\n          display: flex;\n          flex-flow: column;\n          text-align: center;\n        }\n        .form-header {\n          font-size: 22px;\n          margin-bottom: 25px;\n        }\n        .input-wrapper {\n          width: 75%;\n          margin: 0 auto 20px;\n        }\n      `}</style>\n    </>\n  );\n};\n\nexport default EmailForm;\n", "explanation": "**Summary**\n\nThis block defines a React component called `EmailForm` that contains a form with styling rules. It is likely used to collect email addresses from users in a web application.", "metadata": {"repo": "magiclabs/example-jwt", "file": "components/email-form.js", "chunk_number": 2, "total_chunks": 2}, "repository_explanation": "Here is a concise explanation:\n\n**Repository Name:** magiclabs/example-jwt\n\n**Purpose:** Example code for using JSON Web Tokens (JWT) in a web application.\n\n**Content:** A basic example of JWT implementation, including authentication and authorization examples written in [insert programming language(s)].", "file_summary": "Here is a concise summary of the file 'components/email-form.js':\n\n**EmailForm Component**\nCollects and validates user's email address, enabling submission on \"Send Magic Link\" click with optional form disabling via `disabled` prop."}
{"code": "import { useContext } from 'react';\nimport Link from 'next/link';\nimport { UserContext } from '../lib/UserContext';\nimport { CallToAction, TextButton } from '@magiclabs/ui';\n\nconst Header = () => {\n  const [user] = useContext(UserContext);\n\n  return (\n    <header>\n      <nav>\n        <ul>\n          {!user || user.loading ? (\n            // If loading, don't display any buttons specific to the loggedIn state\n            <div style={{ height: '38px' }}></div>\n          ) : user.issuer ? (\n            <>\n              <li>\n                <Link href='/'>\n                  <TextButton color='primary' size='sm'>\n                    Home\n                  </TextButton>\n                </Link>\n              </li>\n              <li>\n                <Link href='/profile'>\n                  <TextButton color='primary' size='sm'>\n                    Profile\n                  </TextButton>\n                </Link>\n              </li>\n              <li>\n                <Link href='/api/logout'>", "explanation": "**Summary:**\n\nThis block is a React functional component named `Header`. It uses the `UserContext` to retrieve the current user's data, and based on its loading state or issuer presence, renders a navigation bar with links to \"Home\" and \"Profile\" pages. When not logged in, it displays an empty space.", "metadata": {"repo": "magiclabs/example-jwt", "file": "components/header.js", "chunk_number": 1, "total_chunks": 2}, "repository_explanation": "Here is a concise explanation:\n\n**Repository Name:** magiclabs/example-jwt\n\n**Purpose:** Example code for using JSON Web Tokens (JWT) in a web application.\n\n**Content:** A basic example of JWT implementation, including authentication and authorization examples written in [insert programming language(s)].", "file_summary": "Here is a concise holistic summary of the file 'components/header.js':\n\nThe `Header` component renders a navigation bar with conditional links based on user authentication status, displaying logout for logged-in users and login link for guests."}
{"code": "                  <TextButton color='warning' size='sm'>\n                    Logout\n                  </TextButton>\n                </Link>\n              </li>\n            </>\n          ) : (\n            <li>\n              <Link href='/login'>\n                <CallToAction color='primary' size='sm'>\n                  Login\n                </CallToAction>\n              </Link>\n            </li>\n          )}\n        </ul>\n      </nav>\n      <style jsx>{`\n        nav {\n          max-width: 700px;\n          margin: 0 auto 50px;\n          padding: 20px;\n          border-bottom: 1px solid #f0f0f0;\n        }\n        ul {\n          display: flex;\n          list-style: none;\n        }\n        li {\n          margin-right: 24px;\n          line-height: 38px;\n        }\n        li:first-child {\n          margin-left: auto;\n        }\n      `}</style>\n    </header>\n  );\n};\n\nexport default Header;\n", "explanation": "Here is a summary of the purpose and functionality of this block:\n\n**Purpose:** Display navigation links (Logout or Login) in a compact header.\n\n**Functionality:** Conditional rendering of either a Logout button (for authenticated users) or a Login link (for unauthenticated users).", "metadata": {"repo": "magiclabs/example-jwt", "file": "components/header.js", "chunk_number": 2, "total_chunks": 2}, "repository_explanation": "Here is a concise explanation:\n\n**Repository Name:** magiclabs/example-jwt\n\n**Purpose:** Example code for using JSON Web Tokens (JWT) in a web application.\n\n**Content:** A basic example of JWT implementation, including authentication and authorization examples written in [insert programming language(s)].", "file_summary": "Here is a concise holistic summary of the file 'components/header.js':\n\nThe `Header` component renders a navigation bar with conditional links based on user authentication status, displaying logout for logged-in users and login link for guests."}
{"code": "import Head from 'next/head';\nimport Header from './header';\n\nconst Layout = (props) => (\n  <>\n    <Head>\n      <title>Magic</title>\n      <link rel='icon' href='/favicon.ico' />\n    </Head>\n\n    <Header />\n    <main>\n      <div className='container'>{props.children}</div>\n    </main>\n    <style jsx global>{`\n      * {\n        outline: none;\n      }\n      .container {\n        max-width: 700px;\n        margin: 0 auto;\n        padding: 0 10px;\n      }\n    `}</style>\n  </>\n);\n\nexport default Layout;\n", "explanation": "This block is a reusable React layout component, \"Layout\", that:\n\n* Sets the page title and favicon\n* Includes a Header component\n* Wraps the main content in a container with global styles", "metadata": {"repo": "magiclabs/example-jwt", "file": "components/layout.js", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise explanation:\n\n**Repository Name:** magiclabs/example-jwt\n\n**Purpose:** Example code for using JSON Web Tokens (JWT) in a web application.\n\n**Content:** A basic example of JWT implementation, including authentication and authorization examples written in [insert programming language(s)].", "file_summary": "Here is a concise summary of the file 'components/layout.js':\n\nReusable React layout component, \"Layout\", sets page metadata, includes header, and wraps main content with global styling."}
{"code": "const Loading = () => (\n  <div style={{ textAlign: 'center' }}>\n    <img src='./loading.svg' height='50px' alt='Loading' />\n  </div>\n);\n\nexport default Loading;\n", "explanation": "A React functional component that renders a loading indicator (an SVG image) with centered text, intended for displaying while data is being loaded.", "metadata": {"repo": "magiclabs/example-jwt", "file": "components/loading.js", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise explanation:\n\n**Repository Name:** magiclabs/example-jwt\n\n**Purpose:** Example code for using JSON Web Tokens (JWT) in a web application.\n\n**Content:** A basic example of JWT implementation, including authentication and authorization examples written in [insert programming language(s)].", "file_summary": "Here is a concise and to-the-point summary:\n\n**loading.js**: A React component displaying a loading indicator with centered text."}
{"code": "import { createContext } from 'react';\n\nexport const UserContext = createContext(null);\n", "explanation": "**Summary:**\n\nCreates a context named `UserContext` using React's `createContext` function, allowing for centralized state management and access to shared data across components.", "metadata": {"repo": "magiclabs/example-jwt", "file": "lib/UserContext.js", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise explanation:\n\n**Repository Name:** magiclabs/example-jwt\n\n**Purpose:** Example code for using JSON Web Tokens (JWT) in a web application.\n\n**Content:** A basic example of JWT implementation, including authentication and authorization examples written in [insert programming language(s)].", "file_summary": "Here is a holistic summary of the file 'lib/UserContext.js':\n\n\"Provides a centralized context for managing user-related data, enabling shared access across components.\""}
{"code": "import { serialize } from 'cookie';\n\nconst TOKEN_NAME = 'token';\nconst MAX_AGE = 60 * 60 * 24 * process.env.SESSION_LENGTH_IN_DAYS;\n\nexport function setTokenCookie(res, token) {\n  const cookie = serialize(TOKEN_NAME, token, {\n    maxAge: MAX_AGE,\n    expires: new Date(Date.now() + MAX_AGE * 1000),\n    httpOnly: true,\n    secure: process.env.NODE_ENV === 'production', // if true, cookie will only be set if https (won't be set if http)\n    path: '/',\n    sameSite: 'lax',\n  });\n  res.setHeader('Set-Cookie', cookie);\n}\n\nexport function removeTokenCookie(res) {\n  const cookie = serialize(TOKEN_NAME, '', {\n    maxAge: -1,\n    path: '/',\n  });\n\n  res.setHeader('Set-Cookie', cookie);\n}\n", "explanation": "Here is a concise summary:\n\nThis code sets up two functions for managing cookies related to authentication tokens.\n\n* `setTokenCookie`: Sets a token cookie with a specified max age, secure flag, and other options.\n* `removeTokenCookie`: Removes the token cookie by setting its max age to -1.", "metadata": {"repo": "magiclabs/example-jwt", "file": "lib/cookies.js", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise explanation:\n\n**Repository Name:** magiclabs/example-jwt\n\n**Purpose:** Example code for using JSON Web Tokens (JWT) in a web application.\n\n**Content:** A basic example of JWT implementation, including authentication and authorization examples written in [insert programming language(s)].", "file_summary": "Here is a concise summary of the file 'lib/cookies.js':\n\n**Cookie Management Functions**\n\nThis module provides two functions for managing authentication tokens via cookies:\n\n* `setTokenCookie`: Sets a token cookie with customizable options.\n* `removeTokenCookie`: Removes the token cookie by setting its max age to -1."}
{"code": "import { Magic } from 'magic-sdk';\n\n// Create client-side Magic instance\nconst createMagic = (key) => typeof window != 'undefined' && new Magic(key);\n\nexport const magic = createMagic(process.env.NEXT_PUBLIC_MAGIC_PUBLISHABLE_KEY);\n", "explanation": "This block creates a Magic SDK instance, which is used for authentication and user management in web applications. \n\nIn simpler terms: It sets up an authentication system using the Magic SDK with a provided API key.", "metadata": {"repo": "magiclabs/example-jwt", "file": "lib/magic.js", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise explanation:\n\n**Repository Name:** magiclabs/example-jwt\n\n**Purpose:** Example code for using JSON Web Tokens (JWT) in a web application.\n\n**Content:** A basic example of JWT implementation, including authentication and authorization examples written in [insert programming language(s)].", "file_summary": "Here's a holistic summary of the file 'lib/magic.js':\n\n**Sets up Magic SDK instance**\n\nInitializes authentication system for web apps using the Magic SDK, configured with a provided API key."}
{"code": "const { Magic } = require('@magic-sdk/admin');\n\n// initiating Magic instance for server-side methods\nexport const magic = new Magic(process.env.MAGIC_SECRET_KEY);\n", "explanation": "**Summary:**\n\nThis block initializes a Magic SDK instance on the server-side, allowing for authentication and verification of users using a secret key stored in an environment variable (`MAGIC_SECRET_KEY`).", "metadata": {"repo": "magiclabs/example-jwt", "file": "lib/magicAdmin.js", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise explanation:\n\n**Repository Name:** magiclabs/example-jwt\n\n**Purpose:** Example code for using JSON Web Tokens (JWT) in a web application.\n\n**Content:** A basic example of JWT implementation, including authentication and authorization examples written in [insert programming language(s)].", "file_summary": "Here is a concise holistic summary:\n\n**lib/magicAdmin.js:** Initializes a Magic SDK instance for server-side user authentication and verification with a secret key from `MAGIC_SECRET_KEY` env variable."}
{"code": "import Layout from '../components/layout';\nimport { UserContext } from '../lib/UserContext';\nimport { ThemeProvider } from '@magiclabs/ui';\nimport '@magiclabs/ui/dist/cjs/index.css';\nimport { useState, useEffect } from 'react';\nimport Router from 'next/router';\n\nfunction MyApp({ Component, pageProps }) {\n  const [user, setUser] = useState();\n\n  // If JWT is valid, set the UserContext with returned value from /api/user\n  // Otherwise, redirect to /login and set UserContext to { user: null }\n  useEffect(() => {\n    setUser({ loading: true });\n    fetch('/api/user')\n      .then((res) => res.json())\n      .then((data) => {\n        data.user ? setUser(data.user) : Router.push('/login') && setUser({ user: null });\n      });\n  }, []);\n\n  return (\n    <ThemeProvider root>\n      <UserContext.Provider value={[user, setUser]}>\n        <Layout>\n          <Component {...pageProps} />\n        </Layout>\n      </UserContext.Provider>\n    </ThemeProvider>\n  );\n}\n\nexport default MyApp;\n", "explanation": "**Purpose:** Initializes Next.js app with authentication and theme management.\n\n**Functionality:**\n\n* Checks JWT validity on startup\n* Fetches user data from `/api/user` if valid, sets UserContext accordingly\n* Wraps app in ThemeProvider and Layout components\n* Passes Component and pageProps to the wrapped component", "metadata": {"repo": "magiclabs/example-jwt", "file": "pages/_app.js", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise explanation:\n\n**Repository Name:** magiclabs/example-jwt\n\n**Purpose:** Example code for using JSON Web Tokens (JWT) in a web application.\n\n**Content:** A basic example of JWT implementation, including authentication and authorization examples written in [insert programming language(s)].", "file_summary": "Here is a concise and holistic summary of the file 'pages/_app.js':\n\n**Initializes Next.js App with Authentication & Theme Management**\n\nChecks JWT validity, fetches user data, and wraps app in ThemeProvider and Layout components for authentication and theme management."}
{"code": "/**\n * Can delete this file if not using @magiclabs/ui\n */\nimport Document, { Html, Head, Main, NextScript } from 'next/document';\nimport { DEFAULT_THEME, getThemeVariables } from '@magiclabs/ui';\nexport default class MyDocument extends Document {\n  render() {\n    return (\n      <Html>\n        <Head>\n          <style\n            type='text/css'\n            dangerouslySetInnerHTML={{ __html: getThemeVariables(DEFAULT_THEME).toCSS() }}\n          />\n        </Head>\n        <body>\n          <Main />\n          <NextScript />\n        </body>\n      </Html>\n    );\n  }\n}\n", "explanation": "Here is a concise summary:\n\n**Purpose:** Define a custom document layout for Next.js applications using Magic Labs UI.\n\n**Functionality:** Sets theme variables as CSS styles in the HTML head, rendering a basic page structure with `Main` and `NextScript` components.", "metadata": {"repo": "magiclabs/example-jwt", "file": "pages/_document.js", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise explanation:\n\n**Repository Name:** magiclabs/example-jwt\n\n**Purpose:** Example code for using JSON Web Tokens (JWT) in a web application.\n\n**Content:** A basic example of JWT implementation, including authentication and authorization examples written in [insert programming language(s)].", "file_summary": "Here is a concise summary:\n\n**Summary:** The file 'pages/_document.js' defines a custom Next.js document layout using Magic Labs UI, setting theme variables as CSS styles and rendering a basic page structure with `Main` and `NextScript` components."}
{"code": "import { magic } from '../../lib/magicAdmin';\nimport jwt from 'jsonwebtoken';\nimport { setTokenCookie } from '../../lib/cookies';\n\n/**\n * Use Magic to validate the DID token sent in the Autorization header\n * Create JWT containing info about the user\n * Set it inside a cookie, which will be automatically sent on subsequent requests to our server\n * Return the user data to frontend\n */\nexport default async function login(req, res) {\n  try {\n    const didToken = req.headers.authorization.substr(7);\n\n    await magic.token.validate(didToken);\n\n    const metadata = await magic.users.getMetadataByToken(didToken);\n\n    let token = jwt.sign(\n      {\n        ...metadata,\n        exp: Math.floor(Date.now() / 1000) + 60 * 60 * 24 * process.env.SESSION_LENGTH_IN_DAYS,\n      },\n      process.env.JWT_SECRET\n    );\n\n    setTokenCookie(res, token);\n\n    res.status(200).send({ user: metadata });\n  } catch (error) {\n    console.log(error);\n    res.status(500).end();\n  }\n}\n", "explanation": "**Purpose:** Validate user's DID token, create JWT, set cookie with user data, and return user info to frontend.\n\n**Functionality:**\n\n* Validate Magic DID token\n* Get user metadata from Magic\n* Create JWT with user info and expiration time\n* Set JWT in a cookie\n* Return user data to frontend", "metadata": {"repo": "magiclabs/example-jwt", "file": "pages/api/login.js", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise explanation:\n\n**Repository Name:** magiclabs/example-jwt\n\n**Purpose:** Example code for using JSON Web Tokens (JWT) in a web application.\n\n**Content:** A basic example of JWT implementation, including authentication and authorization examples written in [insert programming language(s)].", "file_summary": "Here is a concise and holistic summary of the file 'pages/api/login.js':\n\n\"Validates user's DID token, creates JWT with user metadata, sets cookie, and returns user info to frontend.\""}
{"code": "import { magic } from '../../lib/magicAdmin';\nimport { removeTokenCookie } from '../../lib/cookies';\nimport jwt from 'jsonwebtoken';\n\n/**\n * Clear the cookie with the JWT to log the user out\n * Log the user our of their session with Magic if it's still valid (valid for 7 days after initial login)\n * Redirect the user to /login\n */\nexport default async function logout(req, res) {\n  try {\n    if (!req.cookies.token) return res.status(401).json({ message: 'User is not logged in' });\n\n    let token = req.cookies.token;\n\n    let user = jwt.verify(token, process.env.JWT_SECRET);\n\n    removeTokenCookie(res);\n\n    try {\n      await magic.users.logoutByIssuer(user.issuer);\n    } catch (error) {\n      console.log('Users session with Magic already expired');\n    }\n\n    res.writeHead(302, { Location: '/login' });\n    res.end();\n  } catch (error) {\n    res.status(401).json({ message: 'User is not logged in' });\n  }\n}\n", "explanation": "Here is a concise summary of the purpose and functionality of this block:\n\n**Purpose:** Handle user logout by clearing JWT cookie and invalidating Magic session.\n\n**Functionality:** \n\n1. Verify token validity.\n2. Clear JWT cookie.\n3. Attempt to invalidate Magic session using issuer ID.\n4. Redirect user to login page if successful.", "metadata": {"repo": "magiclabs/example-jwt", "file": "pages/api/logout.js", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise explanation:\n\n**Repository Name:** magiclabs/example-jwt\n\n**Purpose:** Example code for using JSON Web Tokens (JWT) in a web application.\n\n**Content:** A basic example of JWT implementation, including authentication and authorization examples written in [insert programming language(s)].", "file_summary": "Here is a concise summary of the file 'pages/api/logout.js':\n\n**Purpose:** Handles user logout, clearing cookies and invalidating sessions.\n\n**Functionality:** Verifies token validity, clears JWT cookie, invalidates Magic session, and redirects user to login page upon success."}
{"code": "import jwt from 'jsonwebtoken';\nimport { setTokenCookie } from '../../lib/cookies';\n\n/**\n * Verify then refresh JWT each time user sends a request to /api/user\n * so they only get logged out after SESSION_LENGTH_IN_DAYS of inactivity\n */\nexport default async function user(req, res) {\n  try {\n    if (!req.cookies.token) return res.json({ user: null });\n\n    let token = req.cookies.token;\n\n    let user = jwt.verify(token, process.env.JWT_SECRET);\n\n    let newToken = jwt.sign(\n      {\n        ...user,\n        exp: Math.floor(Date.now() / 1000) + 60 * 60 * 24 * process.env.SESSION_LENGTH_IN_DAYS,\n      },\n      process.env.JWT_SECRET\n    );\n\n    setTokenCookie(res, newToken);\n\n    res.status(200).json({ user });\n  } catch (error) {\n    res.status(200).json({ user: null });\n  }\n}\n", "explanation": "Here is a concise summary:\n\n**Purpose:** Refresh JWT token for authenticated users on each request.\n\n**Functionality:** Verifies existing token, generates a new one with extended expiration date, sets it as a cookie, and returns the updated user object.", "metadata": {"repo": "magiclabs/example-jwt", "file": "pages/api/user.js", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise explanation:\n\n**Repository Name:** magiclabs/example-jwt\n\n**Purpose:** Example code for using JSON Web Tokens (JWT) in a web application.\n\n**Content:** A basic example of JWT implementation, including authentication and authorization examples written in [insert programming language(s)].", "file_summary": "Here's a concise and holistic summary of the file 'pages/api/user.js':\n\n**Purpose:** Refresh JWT token for authenticated users on each request, ensuring a secure and up-to-date authentication experience.\n\nLet me know if you'd like me to make any adjustments!"}
{"code": "import { useContext } from 'react';\nimport { UserContext } from '../lib/UserContext';\nimport Loading from '../components/loading';\n\nconst Home = () => {\n  const [user] = useContext(UserContext);\n\n  return <>{!user || user.loading ? <Loading /> : user.issuer && <div>You're logged in!</div>}</>;\n};\n\nexport default Home;\n", "explanation": "This block is a React component named \"Home\" that:\n\n* Retrieves user data from a shared context using `useContext`.\n* Displays a loading animation if no user data is available or if the data is still being loaded.\n* If user data is present and the issuer is verified, it displays a success message indicating the user is logged in.", "metadata": {"repo": "magiclabs/example-jwt", "file": "pages/index.js", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise explanation:\n\n**Repository Name:** magiclabs/example-jwt\n\n**Purpose:** Example code for using JSON Web Tokens (JWT) in a web application.\n\n**Content:** A basic example of JWT implementation, including authentication and authorization examples written in [insert programming language(s)].", "file_summary": "Here is a concise summary of the file 'pages/index.js':\n\n**Home Component Summary**\n\nThe Home component retrieves user data from context, displaying a loading animation until data is ready or verified by issuer, then shows a success message confirming user login."}
{"code": "import { useState, useContext, useEffect } from 'react';\nimport Router from 'next/router';\nimport { magic } from '../lib/magic';\nimport { UserContext } from '../lib/UserContext';\nimport EmailForm from '../components/email-form';\n\nconst Login = () => {\n  const [disabled, setDisabled] = useState(false);\n  const [user, setUser] = useContext(UserContext);\n\n  // Redirect logged in users to /profile if trying to visit login page\n  useEffect(() => {\n    user?.issuer && Router.push('/profile');\n  }, [user]);\n\n  async function handleLoginWithEmail(email) {\n    try {\n      setDisabled(true); // disable login button to prevent multiple emails from being triggered\n\n      // Trigger Magic link to be sent to user\n      let didToken = await magic.auth.loginWithMagicLink({ email });\n\n      // Validate didToken with server\n      const res = await fetch('/api/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + didToken,\n        },\n      });\n", "explanation": "Here is a concise summary:\n\nThis block, `Login`, is a React component that handles email-based login functionality. It:\n\n* Redirects logged-in users to the `/profile` page\n* Allows users to log in via email using Magic Links\n* Validates the login token with the server on successful login", "metadata": {"repo": "magiclabs/example-jwt", "file": "pages/login.js", "chunk_number": 1, "total_chunks": 2}, "repository_explanation": "Here is a concise explanation:\n\n**Repository Name:** magiclabs/example-jwt\n\n**Purpose:** Example code for using JSON Web Tokens (JWT) in a web application.\n\n**Content:** A basic example of JWT implementation, including authentication and authorization examples written in [insert programming language(s)].", "file_summary": "Here is a holistic summary of the file 'pages/login.js':\n\n**Login Component**\n\nHandles email-based login functionality:\n\n* Redirects logged-in users to /profile\n* Logs in via Magic Links using email submission\n* Validates login token with server on successful login"}
{"code": "      if (res.status === 200) {\n        let data = await res.json();\n        setUser(data.user);\n        Router.push('/profile');\n      }\n    } catch (error) {\n      setDisabled(false); // re-enable login button - user may have requested to edit their email\n      console.log(error);\n    }\n  }\n  return (\n    <div className='login'>\n      <EmailForm disabled={disabled} onEmailSubmit={handleLoginWithEmail} />\n      <style jsx>{`\n        .login {\n          max-width: 320px;\n          margin: 40px auto 0;\n          padding: 45px 15px;\n          border: 1px solid #dfe1e5;\n          border-radius: 8px;\n          text-align: center;\n          box-shadow: 0px 0px 6px 6px #f7f7f7;\n          box-sizing: border-box;\n        }\n      `}</style>\n    </div>\n  );\n};\n\nexport default Login;\n", "explanation": "Here is a concise summary of the purpose and functionality of this block:\n\n**Purpose:** Handle login with email submission.\n\n**Functionality:** \n\n* Check for successful response (200 status code) from server.\n* If successful, set user data and redirect to profile page.\n* Catch any errors that occur during this process.\n* Re-enable login button if an error occurs.", "metadata": {"repo": "magiclabs/example-jwt", "file": "pages/login.js", "chunk_number": 2, "total_chunks": 2}, "repository_explanation": "Here is a concise explanation:\n\n**Repository Name:** magiclabs/example-jwt\n\n**Purpose:** Example code for using JSON Web Tokens (JWT) in a web application.\n\n**Content:** A basic example of JWT implementation, including authentication and authorization examples written in [insert programming language(s)].", "file_summary": "Here is a holistic summary of the file 'pages/login.js':\n\n**Login Component**\n\nHandles email-based login functionality:\n\n* Redirects logged-in users to /profile\n* Logs in via Magic Links using email submission\n* Validates login token with server on successful login"}
{"code": "import { useContext } from 'react';\nimport { UserContext } from '../lib/UserContext';\nimport Loading from '../components/loading';\n\nconst Profile = () => {\n  const [user] = useContext(UserContext);\n\n  return (\n    <>\n      {!user || user.loading ? (\n        <Loading />\n      ) : (\n        user.issuer && (\n          <>\n            <div className='label'>Email</div>\n            <div className='profile-info'>{user.email}</div>\n\n            <div className='label'>User Id</div>\n            <div className='profile-info'>{user.issuer}</div>\n          </>\n        )\n      )}\n      <style jsx>{`\n        .label {\n          font-size: 12px;\n          color: #6851ff;\n          margin: 30px 0 5px;\n        }\n        .profile-info {\n          font-size: 17px;\n          word-wrap: break-word;\n        }\n      `}</style>\n    </>\n  );\n};\n\nexport default Profile;\n", "explanation": "**Summary**\n\nThis block is a React component named \"Profile\". Its purpose is to display user information, such as email and user ID, if it exists in the UserContext. If not, it displays a loading indicator. It also includes some basic styling for the displayed text.", "metadata": {"repo": "magiclabs/example-jwt", "file": "pages/profile.js", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise explanation:\n\n**Repository Name:** magiclabs/example-jwt\n\n**Purpose:** Example code for using JSON Web Tokens (JWT) in a web application.\n\n**Content:** A basic example of JWT implementation, including authentication and authorization examples written in [insert programming language(s)].", "file_summary": "Here is a concise summary of the file 'pages/profile.js':\n\n**Profile Component**\n\nDisplays user information (email & user ID) if available in UserContext; otherwise shows a loading indicator with basic styling."}
{"code": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" style=\"margin: auto; background: none; display: block; shape-rendering: auto;\" width=\"200px\" height=\"200px\" viewBox=\"0 0 100 100\" preserveAspectRatio=\"xMidYMid\">\n<path d=\"M2 50A48 48 0 0 0 98 50A48 49.9 0 0 1 2 50\" fill=\"#6851ff\" stroke=\"none\">\n  <animateTransform attributeName=\"transform\" type=\"rotate\" dur=\"1s\" repeatCount=\"indefinite\" keyTimes=\"0;1\" values=\"0 50 50.95;360 50 50.95\"></animateTransform>\n</path>\n</svg>", "explanation": "This block is an SVG (Scalable Vector Graphics) code snippet, designed to display a rotating circular shape with a cyan (#6851ff) fill color, within a 200x200 pixel area.", "metadata": {"repo": "magiclabs/example-jwt", "file": "public/loading.svg", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise explanation:\n\n**Repository Name:** magiclabs/example-jwt\n\n**Purpose:** Example code for using JSON Web Tokens (JWT) in a web application.\n\n**Content:** A basic example of JWT implementation, including authentication and authorization examples written in [insert programming language(s)].", "file_summary": "Here is a concise summary of the file 'public/loading.svg':\n\nA simple, rotating cyan-filled circle in a 200x200 pixel SVG."}

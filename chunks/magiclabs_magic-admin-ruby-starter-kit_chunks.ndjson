{"code": "source 'https://rubygems.org'\n\ngem 'eth'\ngem 'faraday'\n", "explanation": "This block specifies two gems for use in a Ruby project: `eth` and `faraday`.", "metadata": {"repo": "magiclabs/magic-admin-ruby-starter-kit", "file": "Gemfile", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise explanation:\n\n**Purpose:** A starter kit for building Magic Labs admin interfaces using Ruby.\n\n**Content:** A pre-configured project structure and dependencies for developing Magic Labs admin applications with Ruby.", "file_summary": "Here is a concise summary:\n\nThe \"Gemfile\" specifies dependencies on two gems: eth (unspecified) and faraday, used for making HTTP requests."}
{"code": "### \ud83d\udce3  The official Magic Admin Ruby SDK has been released. Please visit [magic-admin-ruby](https://github.com/magiclabs/magic-admin-ruby).\n\n# [DEPRECATED] Magic Admin Starter Kit for Ruby\n\nThis Ruby Starter Kit implements the bare minimum functionality to support server-side Magic Admin authentication flow. It is created to demonstrate how each method can be implemented. It also serves as a lighweight SDK to allow developers to quickly prototype a server-side authentication flow with Magic in Ruby. This Ruby library should not be used directly in production because it has not been optimized yet. Please use this library for prototyping only.\n\n\nIt has implemented according to the Magic Admin SDK spec (doc will be shared separately):\n\n- DID Token validation\n- DID Token issuer retrival\n- DID Token decode\n- DID Token public address retrival\n- User metadata retrival\n- User logout\n\n\n## Usage\n\n**Step 1:**\n\nRetrieve a `MAGIC_SECRET_API_KEY` from the dashboard: https://dashboard.magic.link.\n\n\n**Step 2:**\n", "explanation": "Here is a concise summary of the purpose and functionality of this block:\n\n**Purpose:** A deprecated Ruby Starter Kit for Magic Admin authentication flow.\n\n**Functionality:** Implements basic functionality to support server-side authentication, including DID Token validation, issuer retrieval, user metadata retrieval, and logout, intended for prototyping only.", "metadata": {"repo": "magiclabs/magic-admin-ruby-starter-kit", "file": "README.md", "chunk_number": 1, "total_chunks": 3}, "repository_explanation": "Here is a concise explanation:\n\n**Purpose:** A starter kit for building Magic Labs admin interfaces using Ruby.\n\n**Content:** A pre-configured project structure and dependencies for developing Magic Labs admin applications with Ruby.", "file_summary": "Here is a holistic summary of the file 'README.md':\n\n**Deprecated Ruby Starter Kit**\n\nA basic authentication flow kit for Magic Admin, intended only for prototyping purposes. It validates DID Tokens, retrieves issuers and user metadata, generates tokens client-side, and provides an API endpoint to retrieve user data by Decentralized Identifier (DID)."}
{"code": "Generate a DID Token client side (Follow https://docs.magic.link/client-sdk/browser-js). Once you have the DID Token, you can validate it (here we will use `irb`).\n\n```\n\u250c\u2500[ajen@ajen-fortmatic] - [~/pg/magic-admin-ruby-starter-kit] $\n\u2514\u2500[>] irb\nirb(main):001:0> require \"<PATH>/magic-admin-ruby-starter-kit/lib/magic-admin-ruby-starter-kit.rb\"\n=> true\n\nirb(main):002:0> didt = \"DIDT\"\nirb(main):003:0> Token.decode(didt)\n```\n\n**Step 3:**\n\nRetrieve the issuer from a given DID Token.\n\n```\n\u250c\u2500[ajen@ajen-fortmatic] - [~/pg/magic-admin-ruby-starter-kit] $\n\u2514\u2500[>] irb\nirb(main):001:0> require \"<PATH>/magic-admin-ruby-starter-kit/lib/magic-admin-ruby-starter-kit.rb\"\n=> true\n\nirb(main):002:0> didt = \"DIDT\"\nirb(main):003:0> Token.get_issuer(didt)\n=> \"did:ethr:<public_address>\"\n```\n\n**Step 4:**\n\nRetrieve user metadata by an issuer.\n\n```\n\u250c\u2500[ajen@ajen-fortmatic] - [~/pg/magic-admin-ruby-starter-kit] $\n\u2514\u2500[>] irb\nirb(main):001:0> require \"<PATH>/magic-admin-ruby-starter-kit/lib/magic-admin-ruby-starter-kit.rb\"\n=> true\n", "explanation": "Here is a concise summary:\n\n**Block Purpose:** Validate DID Token and retrieve issuer and user metadata.\n\n**Functionality:** \n\n1. Generate a DID Token client-side.\n2. Decode and validate the token using `Token.decode()`.\n3. Retrieve the issuer from the token using `Token.get_issuer()`.\n4. Retrieve user metadata by issuer using an unknown method (not specified).", "metadata": {"repo": "magiclabs/magic-admin-ruby-starter-kit", "file": "README.md", "chunk_number": 2, "total_chunks": 3}, "repository_explanation": "Here is a concise explanation:\n\n**Purpose:** A starter kit for building Magic Labs admin interfaces using Ruby.\n\n**Content:** A pre-configured project structure and dependencies for developing Magic Labs admin applications with Ruby.", "file_summary": "Here is a holistic summary of the file 'README.md':\n\n**Deprecated Ruby Starter Kit**\n\nA basic authentication flow kit for Magic Admin, intended only for prototyping purposes. It validates DID Tokens, retrieves issuers and user metadata, generates tokens client-side, and provides an API endpoint to retrieve user data by Decentralized Identifier (DID)."}
{"code": "irb(main):003:0> User.get_metadata_by_issuer(\"did:ethr:<public_address>\")\n=> {\"data\"=>{\"email\"=>\"email@example.com\", \"issuer\"=>\"did:ethr:<public_address>\", \"public_address\"=>\"<public_address>\"}, \"error_code\"=>\"\", \"message\"=>\"\", \"status\"=>\"ok\"}\n```\n\n## Methods\n\n### Token\n\n- Token.decode\n- Token.get_issuer\n- Token.get_public_address\n- Token.validate\n\n### User\n\n- Token.get_metadata_by_issuer\n- Token.logout_by_issuer\n", "explanation": "**Purpose:** API endpoint for retrieving user metadata.\n\n**Functionality:** Returns user data (email, issuer, public address) when given a DID (Decentralized Identifier) as input, along with a status message and error code.", "metadata": {"repo": "magiclabs/magic-admin-ruby-starter-kit", "file": "README.md", "chunk_number": 3, "total_chunks": 3}, "repository_explanation": "Here is a concise explanation:\n\n**Purpose:** A starter kit for building Magic Labs admin interfaces using Ruby.\n\n**Content:** A pre-configured project structure and dependencies for developing Magic Labs admin applications with Ruby.", "file_summary": "Here is a holistic summary of the file 'README.md':\n\n**Deprecated Ruby Starter Kit**\n\nA basic authentication flow kit for Magic Admin, intended only for prototyping purposes. It validates DID Tokens, retrieves issuers and user metadata, generates tokens client-side, and provides an API endpoint to retrieve user data by Decentralized Identifier (DID)."}
{"code": "require \"base64\"\nrequire \"json\"\nrequire \"Eth\"\nrequire \"faraday\"\n\n\n# Magic secret API key can be retrieved from the `https://dashboard.magic.link`.\n# This secret should be loaded from your env variable or from somewhere safe.\nMAGIC_SECRET_API_KEY = \"YOUR_SECRET_API_KEY\"\n\n\nclass Token\n\n  @@required_fields = ['iat', 'ext', 'nbf', 'iss', 'sub', 'aud', 'tid', 'add'].freeze\n\n    def self.check_required_fields(claim)\n        missing_fields = []\n\n        @@required_fields.each do |field|\n            if !claim.key?(field)\n                missing_fields << field\n            end\n        end\n\n        if missing_fields.any?\n            raise Exception.new \"DID Token missing required fields: %s\" % missing_fields.join(\", \")\n        end\n    end\n\n    # Decodes a given DID Token\n    # This method attempt to decode the passed in DID Token by:\n    #   1. First, decoding it with the base64 urlsafe method\n    #   2. Second, parsing the result of the base64 decoded string to JSON.", "explanation": "Here is a concise summary of the purpose and functionality of this block:\n\n**Purpose:** Validate and decode DID (Decentralized Identifier) Tokens using a Magic Link API.\n\n**Functionality:**\n\n1. Loads an API secret key from an environment variable.\n2. Defines a `Token` class to check if a DID Token has required fields.\n3. Provides a method to raise an exception if any required field is missing.\n4. Decodes a given DID Token using base64 URL-safe decoding and JSON parsing.\n\nThis block appears to be written in Ruby, likely for use in a web application or API integration.", "metadata": {"repo": "magiclabs/magic-admin-ruby-starter-kit", "file": "lib/magic-admin-ruby-starter-kit.rb", "chunk_number": 1, "total_chunks": 6}, "repository_explanation": "Here is a concise explanation:\n\n**Purpose:** A starter kit for building Magic Labs admin interfaces using Ruby.\n\n**Content:** A pre-configured project structure and dependencies for developing Magic Labs admin applications with Ruby.", "file_summary": "Here is a holistic summary of the file 'lib/magic-admin-ruby-starter-kit.rb':\n\n**Purpose:** A Ruby library for interacting with Magic Link API, validating and decoding DID Tokens, and managing user metadata and logout functionality.\n\n**Functionality:**\n\n1. Validates and decodes DID Tokens using Magic Link API.\n2. Provides methods to extract issuer, public Ethereum address, and validate tokens.\n3. Offers two class methods (`get_metadata_by_issuer` and `logout_by_issuer`) for interacting with the Magic API to retrieve user metadata and log out users.\n4. Handles errors and exceptions related to token validation and logout functionality.\n\n**Key Features:**\n\n* DID Token decoding and validation\n* User metadata retrieval and logout functionality\n* Error handling and exception management\n\nThis summary captures the main purpose, functionalities, and key features of the file 'lib/magic-admin-ruby-starter-kit.rb'."}
{"code": "    # The result of these two steps returns a tuple, [proof, claim]. A proof\n    # is a cryptographic signature of the claim, which we can use to verify the\n    # authenticity of the token.\n    #\n    # @param [String] :did_token A cryptographically generated token.\n    #\n    # @return [String] :proof A signed message.\n    # @return [Hash] :claim A hash of the unsigned message.\n    def self.decode(did_token)\n        begin\n            decoded_did_token = JSON.parse(Base64.urlsafe_decode64(did_token))\n        rescue Exception\n            raise Exception.new \"Malformed DID Token\"\n        end\n\n        if decoded_did_token.length != 2\n            raise Exception.new \"DID Token is malformed\"\n        end\n\n        proof = decoded_did_token[0]\n\n        begin\n            claim = JSON.parse(decoded_did_token[1])\n        rescue Exception\n            raise Exception.new \"DID Token is malformed\"\n        end\n\n        self.check_required_fields(claim)\n\n        return proof, claim\n    end\n\n    # Retrieves the issuer from the DID Token", "explanation": "Here is a concise summary:\n\n**Functionality:** Decodes a cryptographically generated token (DID Token) into a signed message (`proof`) and its corresponding unsigned message (`claim`).\n\n**Purpose:** Verifies the authenticity of the token by parsing and validating its contents, returning both the proof and claim as output.", "metadata": {"repo": "magiclabs/magic-admin-ruby-starter-kit", "file": "lib/magic-admin-ruby-starter-kit.rb", "chunk_number": 2, "total_chunks": 6}, "repository_explanation": "Here is a concise explanation:\n\n**Purpose:** A starter kit for building Magic Labs admin interfaces using Ruby.\n\n**Content:** A pre-configured project structure and dependencies for developing Magic Labs admin applications with Ruby.", "file_summary": "Here is a holistic summary of the file 'lib/magic-admin-ruby-starter-kit.rb':\n\n**Purpose:** A Ruby library for interacting with Magic Link API, validating and decoding DID Tokens, and managing user metadata and logout functionality.\n\n**Functionality:**\n\n1. Validates and decodes DID Tokens using Magic Link API.\n2. Provides methods to extract issuer, public Ethereum address, and validate tokens.\n3. Offers two class methods (`get_metadata_by_issuer` and `logout_by_issuer`) for interacting with the Magic API to retrieve user metadata and log out users.\n4. Handles errors and exceptions related to token validation and logout functionality.\n\n**Key Features:**\n\n* DID Token decoding and validation\n* User metadata retrieval and logout functionality\n* Error handling and exception management\n\nThis summary captures the main purpose, functionalities, and key features of the file 'lib/magic-admin-ruby-starter-kit.rb'."}
{"code": "    # This method parses the passed in DID Token to retrieve the issuer. An issuer\n    # has the following format `did:ethr:<public_addresser>`.\n    #\n    # @param [String] :did_token A cryptographically generated token.\n    # \n    # @return [String] The issuer of the token.\n    def self.get_issuer(did_token)\n        _, claim = self.decode(did_token)\n\n        return claim['iss']\n    end\n\n    # Retrieves the public address from the DID Token\n    # This method parses the passed in DID Token to retrieve the public address.\n    # The public address is an Ethereum public address.\n    #\n    # @param [String] :did_token A cryptographically generated token.\n    # \n    # @return [String] The public address of the DID Token.\n    def self.get_public_address(did_token)\n        issuer = self.get_issuer(did_token)\n\n        # This can also use regex to parse it.\n        return issuer.split(':')[-1]\n    end\n\n    # Validates a given DID Token.\n    # This method attempts to validate the passed in DID Token. It uses the `proof`", "explanation": "Here is a concise summary of the purpose and functionality of this block:\n\n**Purpose:** To parse and extract information from DID (Decentralized Identifier) Tokens.\n\n**Functionality:**\n\n1. **get_issuer**: Extracts the issuer from a DID Token.\n2. **get_public_address**: Retrieves the public Ethereum address from a DID Token by parsing the issuer.\n3. **validate_token**: Validates a given DID Token using the `proof` method (not shown in this code snippet).", "metadata": {"repo": "magiclabs/magic-admin-ruby-starter-kit", "file": "lib/magic-admin-ruby-starter-kit.rb", "chunk_number": 3, "total_chunks": 6}, "repository_explanation": "Here is a concise explanation:\n\n**Purpose:** A starter kit for building Magic Labs admin interfaces using Ruby.\n\n**Content:** A pre-configured project structure and dependencies for developing Magic Labs admin applications with Ruby.", "file_summary": "Here is a holistic summary of the file 'lib/magic-admin-ruby-starter-kit.rb':\n\n**Purpose:** A Ruby library for interacting with Magic Link API, validating and decoding DID Tokens, and managing user metadata and logout functionality.\n\n**Functionality:**\n\n1. Validates and decodes DID Tokens using Magic Link API.\n2. Provides methods to extract issuer, public Ethereum address, and validate tokens.\n3. Offers two class methods (`get_metadata_by_issuer` and `logout_by_issuer`) for interacting with the Magic API to retrieve user metadata and log out users.\n4. Handles errors and exceptions related to token validation and logout functionality.\n\n**Key Features:**\n\n* DID Token decoding and validation\n* User metadata retrieval and logout functionality\n* Error handling and exception management\n\nThis summary captures the main purpose, functionalities, and key features of the file 'lib/magic-admin-ruby-starter-kit.rb'."}
{"code": "    # and `claim` from the decoded token to verify the signature of the token. If\n    # the signature mismatches, it raises an exception. This methods also verifies\n    # the expiry time along with the not-before (nbf) fields from the token to\n    # ensure the validity of the token.\n    #\n    # @param [String] :did_token A cryptographically generated token.\n    # \n    # @return [Nil].\n    def self.validate(did_token)\n        proof, claim = self.decode(did_token)\n        recovered_public_address = Eth::Utils.public_key_to_address(\n            Eth::Key.personal_recover(JSON.dump(claim), proof),\n        )\n\n        if recovered_public_address != self.get_public_address(did_token)\n            raise Exception.new \"Signature mismatch between 'proof' and 'claim'.\"\n        end\n\n        current_time = Time.now.to_i\n\n        if current_time > claim['ext']\n            raise Exception.new \"Given DID token has expired. Please generate a new one.\"\n        end\n\n        if current_time < claim['nbf']", "explanation": "**Purpose:** Validates a cryptographically generated token (DID token).\n\n**Functionality:**\n\n* Verifies token signature by comparing it with the recovered public address.\n* Checks for expiration and not-before (nbf) validity timestamps.\n* Raises exceptions if signature mismatch, token has expired, or nbf timestamp is incorrect.", "metadata": {"repo": "magiclabs/magic-admin-ruby-starter-kit", "file": "lib/magic-admin-ruby-starter-kit.rb", "chunk_number": 4, "total_chunks": 6}, "repository_explanation": "Here is a concise explanation:\n\n**Purpose:** A starter kit for building Magic Labs admin interfaces using Ruby.\n\n**Content:** A pre-configured project structure and dependencies for developing Magic Labs admin applications with Ruby.", "file_summary": "Here is a holistic summary of the file 'lib/magic-admin-ruby-starter-kit.rb':\n\n**Purpose:** A Ruby library for interacting with Magic Link API, validating and decoding DID Tokens, and managing user metadata and logout functionality.\n\n**Functionality:**\n\n1. Validates and decodes DID Tokens using Magic Link API.\n2. Provides methods to extract issuer, public Ethereum address, and validate tokens.\n3. Offers two class methods (`get_metadata_by_issuer` and `logout_by_issuer`) for interacting with the Magic API to retrieve user metadata and log out users.\n4. Handles errors and exceptions related to token validation and logout functionality.\n\n**Key Features:**\n\n* DID Token decoding and validation\n* User metadata retrieval and logout functionality\n* Error handling and exception management\n\nThis summary captures the main purpose, functionalities, and key features of the file 'lib/magic-admin-ruby-starter-kit.rb'."}
{"code": "            raise Exception.new \"Given DID token cannot be used at this time.\"\n        end\n    end\n\nend\n\n\nclass User\n\n    # Retrieves user metadata from Magic API.\n    #\n    # @param [String] :issuer The issuer in the following format\n    #   `did:ethr:<public_addresser>`\n    # \n    # @return [Hash] The response from the HTTP request.\n    def self.get_metadata_by_issuer(issuer)\n        resp = Faraday.get('https://api.magic.link/v1/admin/auth/user/get') do |req|\n            req.params['issuer'] = issuer\n            req.headers['X-Magic-Secret-Key'] = MAGIC_SECRET_API_KEY\n        end\n\n        return JSON.parse(resp.body)\n    end\n\n    # Logs out the user server-side through Magic API.\n    #\n    # @param [String] :issuer The issuer in the following format\n    #   `did:ethr:<public_addresser>`\n    # \n    # @return [Hash] The response from the HTTP request.\n    def self.logout_by_issuer(issuer)\n        resp = Faraday.post('https://api.magic.link/v2/admin/auth/user/logout') do |req|", "explanation": "**Block Purpose:**\n\nThis block defines two class methods for a `User` class: `get_metadata_by_issuer` and `logout_by_issuer`. These methods interact with the Magic API to retrieve user metadata and log out users, respectively.\n\n**Functionality:**\n\n1. **`get_metadata_by_issuer`**: Retrieves user metadata from the Magic API using an issuer ID (e.g., `did:ethr:<public_addresser>`) as input.\n2. **`logout_by_issuer`**: Logs out a user server-side through the Magic API, also using an issuer ID as input.\n\n**Error Handling:**\n\n* A custom exception is raised if the DID token cannot be used at this time ( details not provided in the block).", "metadata": {"repo": "magiclabs/magic-admin-ruby-starter-kit", "file": "lib/magic-admin-ruby-starter-kit.rb", "chunk_number": 5, "total_chunks": 6}, "repository_explanation": "Here is a concise explanation:\n\n**Purpose:** A starter kit for building Magic Labs admin interfaces using Ruby.\n\n**Content:** A pre-configured project structure and dependencies for developing Magic Labs admin applications with Ruby.", "file_summary": "Here is a holistic summary of the file 'lib/magic-admin-ruby-starter-kit.rb':\n\n**Purpose:** A Ruby library for interacting with Magic Link API, validating and decoding DID Tokens, and managing user metadata and logout functionality.\n\n**Functionality:**\n\n1. Validates and decodes DID Tokens using Magic Link API.\n2. Provides methods to extract issuer, public Ethereum address, and validate tokens.\n3. Offers two class methods (`get_metadata_by_issuer` and `logout_by_issuer`) for interacting with the Magic API to retrieve user metadata and log out users.\n4. Handles errors and exceptions related to token validation and logout functionality.\n\n**Key Features:**\n\n* DID Token decoding and validation\n* User metadata retrieval and logout functionality\n* Error handling and exception management\n\nThis summary captures the main purpose, functionalities, and key features of the file 'lib/magic-admin-ruby-starter-kit.rb'."}
{"code": "            req.headers['X-Magic-Secret-Key'] = MAGIC_SECRET_API_KEY\n            req.headers['Content-Type'] = 'application/json'\n            req.body = {'issuer': issuer}.to_json\n        end\n\n        return JSON.parse(resp.body)\n    end\n\nend\n", "explanation": "Here is a concise summary:\n\n**Block Purpose:** Set API key, content type, and request body for API request.\n\n**Functionality:** Sets two headers (`X-Magic-Secret-Key` and `Content-Type`) and updates the request body with a JSON object containing an 'issuer' key. Returns the parsed response from the server.", "metadata": {"repo": "magiclabs/magic-admin-ruby-starter-kit", "file": "lib/magic-admin-ruby-starter-kit.rb", "chunk_number": 6, "total_chunks": 6}, "repository_explanation": "Here is a concise explanation:\n\n**Purpose:** A starter kit for building Magic Labs admin interfaces using Ruby.\n\n**Content:** A pre-configured project structure and dependencies for developing Magic Labs admin applications with Ruby.", "file_summary": "Here is a holistic summary of the file 'lib/magic-admin-ruby-starter-kit.rb':\n\n**Purpose:** A Ruby library for interacting with Magic Link API, validating and decoding DID Tokens, and managing user metadata and logout functionality.\n\n**Functionality:**\n\n1. Validates and decodes DID Tokens using Magic Link API.\n2. Provides methods to extract issuer, public Ethereum address, and validate tokens.\n3. Offers two class methods (`get_metadata_by_issuer` and `logout_by_issuer`) for interacting with the Magic API to retrieve user metadata and log out users.\n4. Handles errors and exceptions related to token validation and logout functionality.\n\n**Key Features:**\n\n* DID Token decoding and validation\n* User metadata retrieval and logout functionality\n* Error handling and exception management\n\nThis summary captures the main purpose, functionalities, and key features of the file 'lib/magic-admin-ruby-starter-kit.rb'."}
{"code": "Gem::Specification.new do |s|\n  s.name        = 'magic-admin-ruby-starter-kit'\n  s.version     = '0.0.0'\n  s.date        = '2020-06-30'\n  s.summary     = \"Magic\"\n  s.description = \"Magic\"\n  s.authors     = [\"Arthur Jen\"]\n  s.email       = 'arthur@magic.link'\n  s.files       = [\"lib/magic-admin-ruby-starter-kit.rb\"]\n  s.license     = 'MIT'\nend\n", "explanation": "This block defines a Ruby Gem specification, which includes metadata such as:\n\n* Name: magic-admin-ruby-starter-kit\n* Version: 0.0.0\n* Authorship information\n\nIt sets up a basic structure for a Ruby gem package, but does not include any actual functionality or code.", "metadata": {"repo": "magiclabs/magic-admin-ruby-starter-kit", "file": "magic-ruby-starter-kit.gemspec", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise explanation:\n\n**Purpose:** A starter kit for building Magic Labs admin interfaces using Ruby.\n\n**Content:** A pre-configured project structure and dependencies for developing Magic Labs admin applications with Ruby.", "file_summary": "Here is a concise summary of the file 'magic-ruby-starter-kit.gemspec':\n\nThis file defines a basic Ruby Gem specification with metadata, including name, version, and authorship information, but lacks actual functional code."}

{"code": "{\n  \"extends\": \"next/core-web-vitals\",\n  \"rules\": {\n    \"quotes\": [1, \"single\"],\n    \"indent\": [1, 2]\n  }\n}\n", "explanation": "This block is a configuration for an linter or code formatter, specifically:\n\n* Extending the \"next/core-web-vitals\" set of rules\n* Enforcing single quotes for strings and indenting with 2 spaces.", "metadata": {"repo": "magiclabs/example-zyfi-zksync-paymaster", "file": ".eslintrc.json", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise explanation:\n\n**Repository Name:** magiclabs/example-zyfi-zksync-paymaster\n\n**Purpose:** Example code for integrating ZyFi with ZkSync paymaster functionality.\n\n**Content:**\n\n* Code examples illustrating how to use ZyFi with ZkSync paymasters.\n* Possibly includes testing and deployment scripts.", "file_summary": "Here is a holistic summary of the file '.eslintrc.json':\n\nConfigures ESLint to extend the \"next/core-web-vitals\" rule set, enforcing single quotes for strings and 2-space indentation."}
{"code": "This scaffold is meant to help you bootstrap your own projects with Magic's [Dedicated Wallet](https://magic.link/docs/auth/overview). Magic is a developer SDK that integrates with your application to enable passwordless Web3 onboarding.\n\nThe folder structure of this scaffold is designed to encapsulate all things Magic into one place so you can easily add or remove components and functionality. For example, all Magic-specific components are in the `src/components/magic` directory while generic UI components are in the `src/components/ui` directory.\n\n## Next.js\n\nThis is a [Next.js](https://nextjs.org/) project bootstrapped with [`create-next-app`](https://github.com/vercel/next.js/tree/canary/packages/create-next-app).\n\n### Getting Started\n\nFirst, run the development server:\n\n```bash\nnpm run dev\n# or\nyarn dev\n# or\npnpm dev\n```\n\nOpen [http://localhost:3000](http://localhost:3000) with your browser to see the result.\n", "explanation": "**Purpose:** Bootstrap a Next.js project with Magic's Dedicated Wallet integration for passwordless Web3 onboarding.\n\n**Functionality:** A pre-built project structure with separate directories for Magic-specific and generic UI components, allowing easy customization and addition of features.", "metadata": {"repo": "magiclabs/example-zyfi-zksync-paymaster", "file": "README.md", "chunk_number": 1, "total_chunks": 3}, "repository_explanation": "Here is a concise explanation:\n\n**Repository Name:** magiclabs/example-zyfi-zksync-paymaster\n\n**Purpose:** Example code for integrating ZyFi with ZkSync paymaster functionality.\n\n**Content:**\n\n* Code examples illustrating how to use ZyFi with ZkSync paymasters.\n* Possibly includes testing and deployment scripts.", "file_summary": "Here is a concise summary of the 'README.md' file:\n\n**Bootstrapping Next.js Project with Magic's Dedicated Wallet**\n\nThis project provides a pre-built structure for passwordless Web3 onboarding using Magic's Dedicated Wallet integration. It includes separate directories for Magic-specific and generic UI components, allowing easy customization.\n\nTo get started, simply edit page content in `pages/index.tsx` or access API routes at [http://localhost:3000/api/*]."}
{"code": "You can start editing the page by modifying `pages/index.tsx`. The page auto-updates as you edit the file.\n\n[API routes](https://nextjs.org/docs/api-routes/introduction) can be accessed on [http://localhost:3000/api/hello](http://localhost:3000/api/hello). This endpoint can be edited in `pages/api/hello.ts`.\n\nThe `pages/api` directory is mapped to `/api/*`. Files in this directory are treated as [API routes](https://nextjs.org/docs/api-routes/introduction) instead of React pages.\n\nThis project uses [`next/font`](https://nextjs.org/docs/basic-features/font-optimization) to automatically optimize and load Inter, a custom Google Font.\n\n### Learn More\n\nTo learn more about Next.js, take a look at the following resources:\n\n- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.\n- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.\n", "explanation": "Here is a concise summary:\n\n**Purpose:** Guide for editing and learning about a Next.js project.\n\n**Functionality:**\n\n* Edit page content by modifying `pages/index.tsx` file.\n* Access API routes at [http://localhost:3000/api/*].\n* Use `next/font` to optimize custom Google Font.", "metadata": {"repo": "magiclabs/example-zyfi-zksync-paymaster", "file": "README.md", "chunk_number": 2, "total_chunks": 3}, "repository_explanation": "Here is a concise explanation:\n\n**Repository Name:** magiclabs/example-zyfi-zksync-paymaster\n\n**Purpose:** Example code for integrating ZyFi with ZkSync paymaster functionality.\n\n**Content:**\n\n* Code examples illustrating how to use ZyFi with ZkSync paymasters.\n* Possibly includes testing and deployment scripts.", "file_summary": "Here is a concise summary of the 'README.md' file:\n\n**Bootstrapping Next.js Project with Magic's Dedicated Wallet**\n\nThis project provides a pre-built structure for passwordless Web3 onboarding using Magic's Dedicated Wallet integration. It includes separate directories for Magic-specific and generic UI components, allowing easy customization.\n\nTo get started, simply edit page content in `pages/index.tsx` or access API routes at [http://localhost:3000/api/*]."}
{"code": "You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js/) - your feedback and contributions are welcome!\n\n### Deploy on Vercel\n\nThe easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.\n\nCheck out our [Next.js deployment documentation](https://nextjs.org/docs/deployment) for more details.\n", "explanation": "The purpose of this block is to inform users about:\n\n* The location of the official Next.js GitHub repository\n* A recommended way to deploy their Next.js app using Vercel Platform\n* Availability of deployment documentation for further reference", "metadata": {"repo": "magiclabs/example-zyfi-zksync-paymaster", "file": "README.md", "chunk_number": 3, "total_chunks": 3}, "repository_explanation": "Here is a concise explanation:\n\n**Repository Name:** magiclabs/example-zyfi-zksync-paymaster\n\n**Purpose:** Example code for integrating ZyFi with ZkSync paymaster functionality.\n\n**Content:**\n\n* Code examples illustrating how to use ZyFi with ZkSync paymasters.\n* Possibly includes testing and deployment scripts.", "file_summary": "Here is a concise summary of the 'README.md' file:\n\n**Bootstrapping Next.js Project with Magic's Dedicated Wallet**\n\nThis project provides a pre-built structure for passwordless Web3 onboarding using Magic's Dedicated Wallet integration. It includes separate directories for Magic-specific and generic UI components, allowing easy customization.\n\nTo get started, simply edit page content in `pages/index.tsx` or access API routes at [http://localhost:3000/api/*]."}
{"code": "module.exports = {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n", "explanation": "This is a JavaScript module exporting configuration for Webpack's plugin system. It enables Tailwind CSS and Autoprefixer plugins.", "metadata": {"repo": "magiclabs/example-zyfi-zksync-paymaster", "file": "postcss.config.js", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise explanation:\n\n**Repository Name:** magiclabs/example-zyfi-zksync-paymaster\n\n**Purpose:** Example code for integrating ZyFi with ZkSync paymaster functionality.\n\n**Content:**\n\n* Code examples illustrating how to use ZyFi with ZkSync paymasters.\n* Possibly includes testing and deployment scripts.", "file_summary": "Here's a concise summary:\n\nThe `postcss.config.js` file exports configuration for PostCSS, enabling Tailwind CSS and Autoprefixer plugins."}
{"code": "<svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M12 2C6.47581 2 2 6.51613 2 12C2 17.5242 6.47581 22 12 22C17.4839 22 22 17.5242 22 12C22 6.51613 17.4839 2 12 2ZM11.9999 6.19352C11.2741 6.19352 10.7096 6.79835 10.7096 7.48384C10.7096 8.20964 11.2741 8.77416 11.9999 8.77416C12.6854 8.77416 13.2903 8.20964 13.2903 7.48384C13.2903 6.79835 12.6854 6.19352 11.9999 6.19352ZM10.5483 15.8709C10.2661 15.8709 10.0645 16.1129 10.0645 16.3548V16.6774C10.0645 16.9596 10.2661 17.1613 10.5483 17.1613H13.4515C13.6935 17.1613 13.9354 16.9596 13.9354 16.6774V16.3548C13.9354 16.1129 13.6935 15.8709 13.4515 15.8709H12.9677V10.2258C12.9677 9.98384 12.7257 9.7419 12.4838 9.7419H10.5483C10.2661 9.7419 10.0645 9.98384 10.0645 10.2258V10.5484C10.0645 10.8306 10.2661 11.0322 10.5483 11.0322H11.0322V15.8709H10.5483Z\" fill=\"#4E4D52\"/>\n</svg>", "explanation": "This block is an SVG (Scalable Vector Graphics) icon, displaying a simple, circular shape with a diagonal cut through it.", "metadata": {"repo": "magiclabs/example-zyfi-zksync-paymaster", "file": "public/info.svg", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise explanation:\n\n**Repository Name:** magiclabs/example-zyfi-zksync-paymaster\n\n**Purpose:** Example code for integrating ZyFi with ZkSync paymaster functionality.\n\n**Content:**\n\n* Code examples illustrating how to use ZyFi with ZkSync paymasters.\n* Possibly includes testing and deployment scripts.", "file_summary": "Here's a concise summary:\n\n`public/info.svg`: A simple, circular SVG icon with a diagonal cut."}
{"code": "<svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">", "explanation": "This block appears to be an SVG image, likely a graphical icon or symbol, with a width and height of 24 pixels, and defined dimensions within a viewbox.", "metadata": {"repo": "magiclabs/example-zyfi-zksync-paymaster", "file": "public/link.svg", "chunk_number": 1, "total_chunks": 3}, "repository_explanation": "Here is a concise explanation:\n\n**Repository Name:** magiclabs/example-zyfi-zksync-paymaster\n\n**Purpose:** Example code for integrating ZyFi with ZkSync paymaster functionality.\n\n**Content:**\n\n* Code examples illustrating how to use ZyFi with ZkSync paymasters.\n* Possibly includes testing and deployment scripts.", "file_summary": "Here is a holistic summary of the file 'public/link.svg':\n\nThe file 'public/link.svg' is a 24x24 pixel Scalable Vector Graphics image that represents a blue rectangle with rounded corners and a complex border, likely used as a decorative icon or symbol."}
{"code": "<path d=\"M5.38889 6.33333C5.38889 6.08285 5.48839 5.84263 5.66551 5.66551C5.84263 5.48839 6.08285 5.38889 6.33333 5.38889H10.1111C10.3616 5.38889 10.6018 5.28938 10.7789 5.11227C10.9561 4.93515 11.0556 4.69493 11.0556 4.44444C11.0556 4.19396 10.9561 3.95374 10.7789 3.77662C10.6018 3.5995 10.3616 3.5 10.1111 3.5H6.33333C5.58189 3.5 4.86122 3.79851 4.32986 4.32986C3.79851 4.86122 3.5 5.58189 3.5 6.33333V17.6667C3.5 18.4181 3.79851 19.1388 4.32986 19.6701C4.86122 20.2015 5.58189 20.5 6.33333 20.5H17.6667C18.4181 20.5 19.1388 20.2015 19.6701 19.6701C20.2015 19.1388 20.5 18.4181 20.5 17.6667V13.8889C20.5 13.6384 20.4005 13.3982 20.2234 13.2211C20.0463 13.0439 19.806 12.9444 19.5556 12.9444C19.3051 12.9444 19.0648 13.0439 18.8877 13.2211C18.7106 13.3982 18.6111 13.6384 18.6111 13.8889V17.6667C18.6111 17.9171 18.5116 18.1574 18.3345 18.3345C18.1574 18.5116 17.9171 18.6111 17.6667 18.6111H6.33333C6.08285 18.6111 5.84263 18.5116 5.66551 18.3345C5.48839 18.1574 5.38889 17.9171 5.38889 17.6667V6.33333ZM14.8333 3.5C14.5829 3.5 14.3426 3.5995 14.1655 3.77662C13.9884 3.95374 13.8889 4.19396 13.8889 4.44444C13.8889 4.69493 13.9884 4.93515 14.1655 5.11227C14.3426 5.28938 14.5829 5.38889 14.8333 5.38889H17.2757L11.3323 11.3323C11.1602 11.5104 11.065 11.749 11.0672 11.9966C11.0693 12.2442 11.1687 12.4811 11.3438 12.6562C11.5189 12.8313 11.7558 12.9307 12.0034 12.9328C12.251 12.935 12.4896 12.8398 12.6677 12.6677L18.6111 6.72433V9.16667C18.6111 9.41715 18.7106 9.65737 18.8877 9.83449C19.0648 10.0116 19.3051 10.1111 19.5556 10.1111C19.806 10.1111 20.0463 10.0116 20.2234 9.83449C20.4005 9.65737 20.5 9.41715 20.5 9.16667V4.44444C20.5 4.19396 20.4005 3.95374 20.2234 3.77662C20.0463 3.5995 19.806 3.5 19.5556 3.5H14.8333Z\" fill=\"#6851FF\"/>", "explanation": "This block is a SVG path element, which is a graphical shape defined by a set of commands that draw a specific figure on a coordinate system. In this case, it appears to be a blue rectangle with rounded corners and a complex border, likely used for decorative or illustrative purposes.", "metadata": {"repo": "magiclabs/example-zyfi-zksync-paymaster", "file": "public/link.svg", "chunk_number": 2, "total_chunks": 3}, "repository_explanation": "Here is a concise explanation:\n\n**Repository Name:** magiclabs/example-zyfi-zksync-paymaster\n\n**Purpose:** Example code for integrating ZyFi with ZkSync paymaster functionality.\n\n**Content:**\n\n* Code examples illustrating how to use ZyFi with ZkSync paymasters.\n* Possibly includes testing and deployment scripts.", "file_summary": "Here is a holistic summary of the file 'public/link.svg':\n\nThe file 'public/link.svg' is a 24x24 pixel Scalable Vector Graphics image that represents a blue rectangle with rounded corners and a complex border, likely used as a decorative icon or symbol."}
{"code": "</svg>\n", "explanation": "This block is an SVG (Scalable Vector Graphics) tag, likely containing visual data or graphics.", "metadata": {"repo": "magiclabs/example-zyfi-zksync-paymaster", "file": "public/link.svg", "chunk_number": 3, "total_chunks": 3}, "repository_explanation": "Here is a concise explanation:\n\n**Repository Name:** magiclabs/example-zyfi-zksync-paymaster\n\n**Purpose:** Example code for integrating ZyFi with ZkSync paymaster functionality.\n\n**Content:**\n\n* Code examples illustrating how to use ZyFi with ZkSync paymasters.\n* Possibly includes testing and deployment scripts.", "file_summary": "Here is a holistic summary of the file 'public/link.svg':\n\nThe file 'public/link.svg' is a 24x24 pixel Scalable Vector Graphics image that represents a blue rectangle with rounded corners and a complex border, likely used as a decorative icon or symbol."}
{"code": "<svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">", "explanation": "This block is an SVG (Scalable Vector Graphics) element, which is a graphical representation of an icon or image in XML code format.\n\nThe purpose of this block is likely to display a small graphic on a webpage or other digital platform. The specific functionality depends on the context in which it's used, but it can be expected to render as a visual element, possibly with no interactive behavior.", "metadata": {"repo": "magiclabs/example-zyfi-zksync-paymaster", "file": "public/link_white.svg", "chunk_number": 1, "total_chunks": 3}, "repository_explanation": "Here is a concise explanation:\n\n**Repository Name:** magiclabs/example-zyfi-zksync-paymaster\n\n**Purpose:** Example code for integrating ZyFi with ZkSync paymaster functionality.\n\n**Content:**\n\n* Code examples illustrating how to use ZyFi with ZkSync paymasters.\n* Possibly includes testing and deployment scripts.", "file_summary": "Here is a holistic summary:\n\nThe 'public/link_white.svg' file is an SVG icon that displays a stylized graphic on webpages or digital platforms, primarily serving as a decorative visual element with no interactive behavior."}
{"code": "<path d=\"M5.38889 6.33333C5.38889 6.08285 5.48839 5.84263 5.66551 5.66551C5.84263 5.48839 6.08285 5.38889 6.33333 5.38889H10.1111C10.3616 5.38889 10.6018 5.28938 10.7789 5.11227C10.9561 4.93515 11.0556 4.69493 11.0556 4.44444C11.0556 4.19396 10.9561 3.95374 10.7789 3.77662C10.6018 3.5995 10.3616 3.5 10.1111 3.5H6.33333C5.58189 3.5 4.86122 3.79851 4.32986 4.32986C3.79851 4.86122 3.5 5.58189 3.5 6.33333V17.6667C3.5 18.4181 3.79851 19.1388 4.32986 19.6701C4.86122 20.2015 5.58189 20.5 6.33333 20.5H17.6667C18.4181 20.5 19.1388 20.2015 19.6701 19.6701C20.2015 19.1388 20.5 18.4181 20.5 17.6667V13.8889C20.5 13.6384 20.4005 13.3982 20.2234 13.2211C20.0463 13.0439 19.806 12.9444 19.5556 12.9444C19.3051 12.9444 19.0648 13.0439 18.8877 13.2211C18.7106 13.3982 18.6111 13.6384 18.6111 13.8889V17.6667C18.6111 17.9171 18.5116 18.1574 18.3345 18.3345C18.1574 18.5116 17.9171 18.6111 17.6667 18.6111H6.33333C6.08285 18.6111 5.84263 18.5116 5.66551 18.3345C5.48839 18.1574 5.38889 17.9171 5.38889 17.6667V6.33333ZM14.8333 3.5C14.5829 3.5 14.3426 3.5995 14.1655 3.77662C13.9884 3.95374 13.8889 4.19396 13.8889 4.44444C13.8889 4.69493 13.9884 4.93515 14.1655 5.11227C14.3426 5.28938 14.5829 5.38889 14.8333 5.38889H17.2757L11.3323 11.3323C11.1602 11.5104 11.065 11.749 11.0672 11.9966C11.0693 12.2442 11.1687 12.4811 11.3438 12.6562C11.5189 12.8313 11.7558 12.9307 12.0034 12.9328C12.251 12.935 12.4896 12.8398 12.6677 12.6677L18.6111 6.72433V9.16667C18.6111 9.41715 18.7106 9.65737 18.8877 9.83449C19.0648 10.0116 19.3051 10.1111 19.5556 10.1111C19.806 10.1111 20.0463 10.0116 20.2234 9.83449C20.4005 9.65737 20.5 9.41715 20.5 9.16667V4.44444C20.5 4.19396 20.4005 3.95374 20.2234 3.77662C20.0463 3.5995 19.806 3.5 19.5556 3.5H14.8333Z\" fill=\"#FFFFFF\"/>", "explanation": "This block is a graphical SVG path that represents an icon or shape, likely used as a visual element in a design or interface. It has a complex geometry with various lines, curves, and shapes, resulting in a stylized image. The purpose of this block is primarily decorative, serving to enhance the visual appeal of its surrounding context.", "metadata": {"repo": "magiclabs/example-zyfi-zksync-paymaster", "file": "public/link_white.svg", "chunk_number": 2, "total_chunks": 3}, "repository_explanation": "Here is a concise explanation:\n\n**Repository Name:** magiclabs/example-zyfi-zksync-paymaster\n\n**Purpose:** Example code for integrating ZyFi with ZkSync paymaster functionality.\n\n**Content:**\n\n* Code examples illustrating how to use ZyFi with ZkSync paymasters.\n* Possibly includes testing and deployment scripts.", "file_summary": "Here is a holistic summary:\n\nThe 'public/link_white.svg' file is an SVG icon that displays a stylized graphic on webpages or digital platforms, primarily serving as a decorative visual element with no interactive behavior."}
{"code": "</svg>", "explanation": "This is an SVG (Scalable Vector Graphics) tag, which is a text format for defining vector graphics. It does not contain any purpose or functionality other than being a declaration of an SVG element, requiring content within it.", "metadata": {"repo": "magiclabs/example-zyfi-zksync-paymaster", "file": "public/link_white.svg", "chunk_number": 3, "total_chunks": 3}, "repository_explanation": "Here is a concise explanation:\n\n**Repository Name:** magiclabs/example-zyfi-zksync-paymaster\n\n**Purpose:** Example code for integrating ZyFi with ZkSync paymaster functionality.\n\n**Content:**\n\n* Code examples illustrating how to use ZyFi with ZkSync paymasters.\n* Possibly includes testing and deployment scripts.", "file_summary": "Here is a holistic summary:\n\nThe 'public/link_white.svg' file is an SVG icon that displays a stylized graphic on webpages or digital platforms, primarily serving as a decorative visual element with no interactive behavior."}
{"code": "<svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<g id=\"Logo\">\n<g id=\"Favicon\">\n<path d=\"M16 0C17.461 1.69611 19.0723 3.27125 20.8148 4.70713C19.6537 8.27674 19.0287 12.0692 19.0287 16C19.0287 19.9308 19.6537 23.7233 20.8148 27.2929C19.0723 28.7288 17.461 30.3039 16 32C14.539 30.3039 12.9277 28.7287 11.1852 27.2929C12.3463 23.7233 12.9713 19.9308 12.9713 16C12.9713 12.0692 12.3463 8.27675 11.1852 4.70713C12.9277 3.27126 14.539 1.69612 16 0Z\" fill=\"white\"/>\n<path d=\"M7.85464 24.8249C6.01021 23.5995 4.05274 22.5166 2 21.5929C2.56942 19.8237 2.87573 17.9458 2.87573 16C2.87573 14.0542 2.56942 12.1763 2 10.4071C4.05273 9.48345 6.0102 8.40049 7.85464 7.17508C8.55991 10.0081 8.93309 12.9628 8.93309 16C8.93309 19.0372 8.55991 21.9919 7.85464 24.8249Z\" fill=\"white\"/>", "explanation": "This block is an SVG (Scalable Vector Graphics) logo consisting of two interlocking circles, represented by two paths with white fills.", "metadata": {"repo": "magiclabs/example-zyfi-zksync-paymaster", "file": "public/logo.svg", "chunk_number": 1, "total_chunks": 2}, "repository_explanation": "Here is a concise explanation:\n\n**Repository Name:** magiclabs/example-zyfi-zksync-paymaster\n\n**Purpose:** Example code for integrating ZyFi with ZkSync paymaster functionality.\n\n**Content:**\n\n* Code examples illustrating how to use ZyFi with ZkSync paymasters.\n* Possibly includes testing and deployment scripts.", "file_summary": "Here's a holistic summary of the file 'public/logo.svg':\n\nA Scalable Vector Graphics (SVG) logo consisting of two interlocking white-filled circles."}
{"code": "<path d=\"M23.0669 16C23.0669 19.0373 23.4401 21.9919 24.1454 24.8249C25.9898 23.5995 27.9473 22.5166 30 21.5929C29.4306 19.8237 29.1243 17.9458 29.1243 16C29.1243 14.0542 29.4306 12.1763 30 10.4071C27.9473 9.48345 25.9898 8.40049 24.1454 7.17507C23.4401 10.0081 23.0669 12.9628 23.0669 16Z\" fill=\"white\"/>\n</g>\n</g>\n</svg>", "explanation": "This is an SVG (Scalable Vector Graphics) code snippet that represents a geometric shape, specifically a polygon with curved sides. It defines a single element in a graphical context.", "metadata": {"repo": "magiclabs/example-zyfi-zksync-paymaster", "file": "public/logo.svg", "chunk_number": 2, "total_chunks": 2}, "repository_explanation": "Here is a concise explanation:\n\n**Repository Name:** magiclabs/example-zyfi-zksync-paymaster\n\n**Purpose:** Example code for integrating ZyFi with ZkSync paymaster functionality.\n\n**Content:**\n\n* Code examples illustrating how to use ZyFi with ZkSync paymasters.\n* Possibly includes testing and deployment scripts.", "file_summary": "Here's a holistic summary of the file 'public/logo.svg':\n\nA Scalable Vector Graphics (SVG) logo consisting of two interlocking white-filled circles."}
{"code": "import React from 'react';\nimport WalletMethods from './cards/WalletMethodsCard';\nimport SendTransaction from './cards/SendTransactionCard';\nimport Spacer from '@/components/ui/Spacer';\nimport { LoginProps } from '@/utils/types';\nimport UserInfo from './cards/UserInfoCard';\nimport DevLinks from './DevLinks';\nimport Header from './Header';\n\nexport default function Dashboard({ token, setToken }: LoginProps) {\n  return (\n    <div className=\"home-page\">\n      <Header />\n      <div className=\"cards-container\">\n        <UserInfo token={token} setToken={setToken} />\n        <Spacer size={10} />\n        <SendTransaction />\n        <Spacer size={10} />\n        <WalletMethods token={token} setToken={setToken} />\n        <Spacer size={15} />\n      </div>\n      <DevLinks primary />\n    </div>\n  );\n}\n", "explanation": "Here is a concise summary:\n\nThis block is a React component (Dashboard) that renders a user's dashboard, displaying their user information, send transaction options, wallet methods, and development links, with adjustable spacing between components.", "metadata": {"repo": "magiclabs/example-zyfi-zksync-paymaster", "file": "src/components/magic/Dashboard.tsx", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise explanation:\n\n**Repository Name:** magiclabs/example-zyfi-zksync-paymaster\n\n**Purpose:** Example code for integrating ZyFi with ZkSync paymaster functionality.\n\n**Content:**\n\n* Code examples illustrating how to use ZyFi with ZkSync paymasters.\n* Possibly includes testing and deployment scripts.", "file_summary": "Here is a concise summary of the file 'src/components/magic/Dashboard.tsx':\n\n\"React component rendering user dashboard with info, transaction options, wallet methods, and dev links.\""}
{"code": "import classNames from 'classnames';\nimport Link from 'next/link';\n\nconst DevLinks = ({ primary = false, footer = false }: { primary?: boolean; footer?: boolean }) => (\n  <div className={`links ${footer ? 'footer-links' : ''}`}>\n    <div className={`link ${primary ? 'text-[#6851ff]' : 'text-[#fff]'}`}>\n      <a href=\"https://magic.link/docs/home/welcome\" target=\"_blank\" rel=\"noreferrer\">\n        Dev Docs\n      </a>\n    </div>\n    <div className={`link-divider ${primary ? 'bg-[#DDDBE0]' : 'bg-[#a270d3]'}`} />\n    <div className={`link ${primary ? 'text-[#6851ff]' : 'text-[#fff]'}`}>\n      <a href=\"https://dashboard.magic.link/signup\" target=\"_blank\" rel=\"noreferrer\">\n        Dashboard\n      </a>\n    </div>\n    <div className={`link-divider ${primary ? 'bg-[#DDDBE0]' : 'bg-[#a270d3]'}`} />\n    <div className={`link ${primary ? 'text-[#6851ff]' : 'text-[#fff]'}`}>\n      <a href=\"https://discord.gg/magiclabs\" target=\"_blank\" rel=\"noreferrer\">\n        Discord\n      </a>\n    </div>\n  </div>\n);\n", "explanation": "Here is a concise summary of the block's purpose and functionality:\n\n**Purpose:** Display a collection of links (Dev Docs, Dashboard, Discord) with customizable styling.\n\n**Functionality:** A reusable React component that takes props for primary and footer styling, rendering a container div with three link elements and separators.", "metadata": {"repo": "magiclabs/example-zyfi-zksync-paymaster", "file": "src/components/magic/DevLinks.tsx", "chunk_number": 1, "total_chunks": 2}, "repository_explanation": "Here is a concise explanation:\n\n**Repository Name:** magiclabs/example-zyfi-zksync-paymaster\n\n**Purpose:** Example code for integrating ZyFi with ZkSync paymaster functionality.\n\n**Content:**\n\n* Code examples illustrating how to use ZyFi with ZkSync paymasters.\n* Possibly includes testing and deployment scripts.", "file_summary": "Here is a holistic summary of the file 'src/components/magic/DevLinks.tsx':\n\n**DevLinks Component**: A customizable React component displaying links (Dev Docs, Dashboard, Discord) with primary and footer styling options, providing a reusable container for links and separators."}
{"code": "export default DevLinks;\n", "explanation": "Exports a default instance of \"DevLinks\".", "metadata": {"repo": "magiclabs/example-zyfi-zksync-paymaster", "file": "src/components/magic/DevLinks.tsx", "chunk_number": 2, "total_chunks": 2}, "repository_explanation": "Here is a concise explanation:\n\n**Repository Name:** magiclabs/example-zyfi-zksync-paymaster\n\n**Purpose:** Example code for integrating ZyFi with ZkSync paymaster functionality.\n\n**Content:**\n\n* Code examples illustrating how to use ZyFi with ZkSync paymasters.\n* Possibly includes testing and deployment scripts.", "file_summary": "Here is a holistic summary of the file 'src/components/magic/DevLinks.tsx':\n\n**DevLinks Component**: A customizable React component displaying links (Dev Docs, Dashboard, Discord) with primary and footer styling options, providing a reusable container for links and separators."}
{"code": "import Image from 'next/image';\nimport Logo from 'public/logo.svg';\nimport DevLinks from './DevLinks';\n\nconst Header = () => {\n  return (\n    <div className=\"app-header-container\">\n      <div className=\"flex flex-col gap-2.5 items-center\">\n        <Image src={Logo} alt=\"logo\" />\n        <div className=\"text-center text-white text-xl font-extrabold font-['Inter'] leading-[30px]\">Magic</div>\n        <div className=\"text-center text-white text-opacity-50 text-base font-normal font-['SF Mono'] leading-normal\">\n          Demo\n        </div>\n      </div>\n      <DevLinks />\n    </div>\n  );\n};\n\nexport default Header;\n", "explanation": "**Summary:**\n\nThis block is a React component named \"Header\" that displays a logo, title (\"Magic\"), and demo text in a header container. It also includes a separate DevLinks component.", "metadata": {"repo": "magiclabs/example-zyfi-zksync-paymaster", "file": "src/components/magic/Header.tsx", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise explanation:\n\n**Repository Name:** magiclabs/example-zyfi-zksync-paymaster\n\n**Purpose:** Example code for integrating ZyFi with ZkSync paymaster functionality.\n\n**Content:**\n\n* Code examples illustrating how to use ZyFi with ZkSync paymasters.\n* Possibly includes testing and deployment scripts.", "file_summary": "Here is a concise summary:\n\n`src/components/magic/Header.tsx`: A React Header component displaying a logo, title (\"Magic\"), demo text, and a DevLinks component within a header container."}
{"code": "import { LoginProps } from '@/utils/types'\nimport Header from './Header'\n\nimport EmailOTP from './auth/EmailOTP';\n\nconst Login = ({ token, setToken }: LoginProps) => {\n  return (\n    <div className=\"login-page\">\n      <Header />\n      <div className={`max-w-[100%] grid grid-cols-1 grid-flow-row auto-rows-fr gap-5 p-4 mt-8`}>\n      \n      \n        <EmailOTP token={token} setToken={setToken} />      \n  \t\t\n      </div>\n    </div>\n  )\n}\n\nexport default Login\n", "explanation": "**Purpose:** A login page component.\n\n**Functionality:** Renders a login header, email OTP (one-time password) form, and handles token management via props passed from parent components.", "metadata": {"repo": "magiclabs/example-zyfi-zksync-paymaster", "file": "src/components/magic/Login.tsx", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise explanation:\n\n**Repository Name:** magiclabs/example-zyfi-zksync-paymaster\n\n**Purpose:** Example code for integrating ZyFi with ZkSync paymaster functionality.\n\n**Content:**\n\n* Code examples illustrating how to use ZyFi with ZkSync paymasters.\n* Possibly includes testing and deployment scripts.", "file_summary": "Here is a concise holistic summary:\n\n`src/components/magic/Login.tsx`: A self-contained login page component that renders a header, email OTP form, and manages tokens via parent-prop-pased functionality."}
{"code": "import React, { useCallback } from 'react';\nimport DevLinks from './DevLinks';\nimport Image from 'next/image';\nimport Info from 'public/info.svg';\nimport Link from 'public/link_white.svg';\nimport Logo from 'public/logo.svg';\n\nconst MagicDashboardRedirect = () => {\n  const onClick = useCallback(() => {\n    window.open('https://dashboard.magic.link/signup', '_blank');\n  }, []);\n\n  return (\n    <div className=\"redirect-container\">\n      <div className=\"flex flex-col mt-10 gap-2.5 items-center\">\n        <Image src={Logo} alt=\"logo\" />\n        <div className=\"text-center text-white text-xl font-extrabold font-['Inter'] leading-[30px]\">Magic</div>\n        <div className=\"text-center text-white text-opacity-50 text-base font-normal font-['SF Mono'] leading-normal\">\n          Demo\n        </div>\n      </div>\n      <div className=\"flex flex-col items-center flex-1\">\n        <div className=\"redirect-card\">\n          <div className=\"flex gap-2 mx-4 my-2 \">\n            <Image src={Info} alt=\"logo\" />", "explanation": "Here is a concise summary of the purpose and functionality of this block:\n\n**Purpose:** A redirect component that opens a new tab to the Magic Dashboard signup page.\n\n**Functionality:** When clicked, it opens a link in a new browser window/tab to the specified URL (`https://dashboard.magic.link/signup`).", "metadata": {"repo": "magiclabs/example-zyfi-zksync-paymaster", "file": "src/components/magic/MagicDashboardRedirect.tsx", "chunk_number": 1, "total_chunks": 2}, "repository_explanation": "Here is a concise explanation:\n\n**Repository Name:** magiclabs/example-zyfi-zksync-paymaster\n\n**Purpose:** Example code for integrating ZyFi with ZkSync paymaster functionality.\n\n**Content:**\n\n* Code examples illustrating how to use ZyFi with ZkSync paymasters.\n* Possibly includes testing and deployment scripts.", "file_summary": "Here's a concise holistic summary of the file 'src/components/magic/MagicDashboardRedirect.tsx':\n\n\"A redirect component that prompts users to set their NEXT_PUBLIC_MAGIC_API_KEY environment variable, offering a 'Get API Keys' button to guide them to the Magic Dashboard signup page.\""}
{"code": "            <h3 className=\"max-w-[480px] text-[#4E4D52] text-base font-normal\">\n              Please set your <code>NEXT_PUBLIC_MAGIC_API_KEY</code> environment variable in <code>.env</code>. You can\n              get your Magic API key from the Magic Dashboard.\n            </h3>\n          </div>\n        </div>\n\n        <button className=\"api-button\" onClick={onClick} disabled={false}>\n          Get API keys\n          <Image src={Link} alt=\"link-icon\" className=\"ml-[6px] my-auto\" />\n        </button>\n      </div>\n      <DevLinks />\n    </div>\n  );\n};\n\nexport default MagicDashboardRedirect;\n", "explanation": "Here is a summary of the purpose and functionality:\n\n**Purpose:** Inform users to set their NEXT_PUBLIC_MAGIC_API_KEY environment variable.\n\n**Functionality:** Display instructions with a \"Get API keys\" button to prompt user action.", "metadata": {"repo": "magiclabs/example-zyfi-zksync-paymaster", "file": "src/components/magic/MagicDashboardRedirect.tsx", "chunk_number": 2, "total_chunks": 2}, "repository_explanation": "Here is a concise explanation:\n\n**Repository Name:** magiclabs/example-zyfi-zksync-paymaster\n\n**Purpose:** Example code for integrating ZyFi with ZkSync paymaster functionality.\n\n**Content:**\n\n* Code examples illustrating how to use ZyFi with ZkSync paymasters.\n* Possibly includes testing and deployment scripts.", "file_summary": "Here's a concise holistic summary of the file 'src/components/magic/MagicDashboardRedirect.tsx':\n\n\"A redirect component that prompts users to set their NEXT_PUBLIC_MAGIC_API_KEY environment variable, offering a 'Get API Keys' button to guide them to the Magic Dashboard signup page.\""}
{"code": "import { getChainId, getNetworkUrl } from '@/utils/network';\nimport { OAuthExtension } from '@magic-ext/oauth';\nimport { Magic as MagicBase } from 'magic-sdk';\nimport { ReactNode, createContext, useContext, useEffect, useMemo, useState } from 'react';\nimport { Client, createWalletClient, custom } from 'viem';\nimport { zkSyncSepoliaTestnet } from 'viem/chains';\nimport { eip712WalletActions } from \"viem/zksync\"\nconst { Web3 } = require('web3');\n\nexport type Magic = MagicBase<OAuthExtension[]>;\n\ntype MagicContextType = {\n  magic: Magic | null;\n  web3: typeof Web3 | null;\n  walletClient: any | null;\n};\n\nconst MagicContext = createContext<MagicContextType>({\n  magic: null,\n  web3: null,\n  walletClient: null,\n});\n\nexport const useMagic = () => useContext(MagicContext);\n\nconst MagicProvider = ({ children }: { children: ReactNode }) => {\n  const [magic, setMagic] = useState<Magic | null>(null);\n  const [web3, setWeb3] = useState<typeof Web3 | null>(null);", "explanation": "**Summary**\n\nThis block of code creates a React context (`MagicContext`) that provides access to Magic authentication and Viem wallet functionality through hooks (`useMagic`). The context manages the state of Magic, Web3, and Viem client instances, making them available to components within its scope.", "metadata": {"repo": "magiclabs/example-zyfi-zksync-paymaster", "file": "src/components/magic/MagicProvider.tsx", "chunk_number": 1, "total_chunks": 3}, "repository_explanation": "Here is a concise explanation:\n\n**Repository Name:** magiclabs/example-zyfi-zksync-paymaster\n\n**Purpose:** Example code for integrating ZyFi with ZkSync paymaster functionality.\n\n**Content:**\n\n* Code examples illustrating how to use ZyFi with ZkSync paymasters.\n* Possibly includes testing and deployment scripts.", "file_summary": "Here is a concise summary of the file 'src/components/magic/MagicProvider.tsx':\n\n**Summary:** \n\nThis React hook (`MagicProvider`) initializes and manages a Magic wallet client using the MagicBase API, providing access to authentication and Viem wallet functionality through hooks (`useMagic`)."}
{"code": "  const [walletClient, setWalletClient] = useState<Client | null>(null);\n  useEffect(() => {\n    if (process.env.NEXT_PUBLIC_MAGIC_API_KEY) {\n      const magic = new MagicBase(process.env.NEXT_PUBLIC_MAGIC_API_KEY as string, {\n        network: {\n          rpcUrl: getNetworkUrl(),\n          chainId: getChainId(),\n        },\n        extensions: [new OAuthExtension()],\n      });\n      const initializeWalletClient = async () => {\n        const provider = await magic?.wallet.getProvider() // Correctly await the provider\n\n        const walletClient = createWalletClient({\n          chain: zkSyncSepoliaTestnet,\n          account: localStorage.getItem(\"user\") as `0x${string}`,\n          transport: custom(provider), // This now receives the awaited value\n        }).extend(eip712WalletActions());\n        setWalletClient(walletClient)\n      }\n\n      initializeWalletClient();\n      setMagic(magic);\n      setWeb3(new Web3((magic as any).rpcProvider));\n    }\n  }, []);\n\n  const value = useMemo(() => {\n    return {\n      magic,", "explanation": "Here is a concise summary:\n\n**Purpose:** Initialize and manage a wallet client using MagicBase API.\n\n**Functionality:** The block sets up a wallet client with an Ethereum provider, creates a new instance of `magic` and `web3`, and stores them in state variables for use throughout the application.", "metadata": {"repo": "magiclabs/example-zyfi-zksync-paymaster", "file": "src/components/magic/MagicProvider.tsx", "chunk_number": 2, "total_chunks": 3}, "repository_explanation": "Here is a concise explanation:\n\n**Repository Name:** magiclabs/example-zyfi-zksync-paymaster\n\n**Purpose:** Example code for integrating ZyFi with ZkSync paymaster functionality.\n\n**Content:**\n\n* Code examples illustrating how to use ZyFi with ZkSync paymasters.\n* Possibly includes testing and deployment scripts.", "file_summary": "Here is a concise summary of the file 'src/components/magic/MagicProvider.tsx':\n\n**Summary:** \n\nThis React hook (`MagicProvider`) initializes and manages a Magic wallet client using the MagicBase API, providing access to authentication and Viem wallet functionality through hooks (`useMagic`)."}
{"code": "      web3,\n      walletClient\n    };\n  }, [magic, web3, walletClient]);\n\n  return <MagicContext.Provider value={value}>{children}</MagicContext.Provider>;\n};\n\nexport default MagicProvider;\n", "explanation": "**Summary:**\n\nThis is a React hook (`MagicProvider`) that sets up a `MagicContext` with values passed as props (magic, web3, walletClient) and renders its children components within this context.", "metadata": {"repo": "magiclabs/example-zyfi-zksync-paymaster", "file": "src/components/magic/MagicProvider.tsx", "chunk_number": 3, "total_chunks": 3}, "repository_explanation": "Here is a concise explanation:\n\n**Repository Name:** magiclabs/example-zyfi-zksync-paymaster\n\n**Purpose:** Example code for integrating ZyFi with ZkSync paymaster functionality.\n\n**Content:**\n\n* Code examples illustrating how to use ZyFi with ZkSync paymasters.\n* Possibly includes testing and deployment scripts.", "file_summary": "Here is a concise summary of the file 'src/components/magic/MagicProvider.tsx':\n\n**Summary:** \n\nThis React hook (`MagicProvider`) initializes and manages a Magic wallet client using the MagicBase API, providing access to authentication and Viem wallet functionality through hooks (`useMagic`)."}
{"code": "import { useMagic } from '../MagicProvider';\nimport showToast from '@/utils/showToast';\nimport Spinner from '../../ui/Spinner';\nimport { RPCError, RPCErrorCode } from 'magic-sdk';\nimport { LoginProps } from '@/utils/types';\nimport { saveUserInfo } from '@/utils/common';\nimport Card from '../../ui/Card';\nimport CardHeader from '../../ui/CardHeader';\nimport { useState } from 'react';\nimport FormInput from '@/components/ui/FormInput';\n\nconst EmailOTP = ({ token, setToken }: LoginProps) => {\n  const { magic } = useMagic();\n  const [email, setEmail] = useState('');\n  const [emailError, setEmailError] = useState(false);\n  const [isLoginInProgress, setLoginInProgress] = useState(false);\n\n  const handleLogin = async () => {\n    if (!email.match(/^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/)) {\n      setEmailError(true);\n    } else {\n      try {\n        setLoginInProgress(true);\n        setEmailError(false);\n        const token = await magic?.auth.loginWithEmailOTP({ email });\n", "explanation": "Here is a concise summary:\n\n**Email OTP Login Block**\n\nPurpose: Handle email-based login with one-time password (OTP) verification using Magic SDK.\n\nFunctionality: \n\n* Collects user's email input\n* Validates email format\n* Submits email for login verification via Magic SDK\n* Displays progress indicator and error messages as needed.", "metadata": {"repo": "magiclabs/example-zyfi-zksync-paymaster", "file": "src/components/magic/auth/EmailOTP.tsx", "chunk_number": 1, "total_chunks": 3}, "repository_explanation": "Here is a concise explanation:\n\n**Repository Name:** magiclabs/example-zyfi-zksync-paymaster\n\n**Purpose:** Example code for integrating ZyFi with ZkSync paymaster functionality.\n\n**Content:**\n\n* Code examples illustrating how to use ZyFi with ZkSync paymasters.\n* Possibly includes testing and deployment scripts.", "file_summary": "Here's a concise summary:\n\n**Email OTP Login Block**\n\nHandles Magic SDK login functionality with email-based authentication using one-time passwords, saving user info and updating UI state."}
{"code": "        const metadata = await magic?.user.getMetadata();\n\n        if (!token || !metadata?.publicAddress) {\n          throw new Error('Magic login failed');\n        }\n\n        setToken(token);\n        saveUserInfo(token, 'EMAIL', metadata?.publicAddress);\n        setEmail('');\n      } catch (e) {\n        console.log('login error: ' + JSON.stringify(e));\n        if (e instanceof RPCError) {\n          switch (e.code) {\n            case RPCErrorCode.MagicLinkFailedVerification:\n            case RPCErrorCode.MagicLinkExpired:\n            case RPCErrorCode.MagicLinkRateLimited:\n            case RPCErrorCode.UserAlreadyLoggedIn:\n              showToast({ message: e.message, type: 'error' });\n              break;\n            default:\n              showToast({\n                message: 'Something went wrong. Please try again',\n                type: 'error',\n              });\n          }\n        }\n      } finally {\n        setLoginInProgress(false);\n      }\n    }\n  };\n\n  return (\n    <Card>", "explanation": "Here is a concise summary of the block:\n\n**Purpose:** Handle Magic login functionality, saving user info and updating UI state.\n\n**Functionality:**\n\n* Retrieves metadata from Magic API\n* Verifies token and public address\n* Saves user info and updates email input field\n* Handles login errors and displays error messages or toast notifications\n* Updates UI state to indicate login status.", "metadata": {"repo": "magiclabs/example-zyfi-zksync-paymaster", "file": "src/components/magic/auth/EmailOTP.tsx", "chunk_number": 2, "total_chunks": 3}, "repository_explanation": "Here is a concise explanation:\n\n**Repository Name:** magiclabs/example-zyfi-zksync-paymaster\n\n**Purpose:** Example code for integrating ZyFi with ZkSync paymaster functionality.\n\n**Content:**\n\n* Code examples illustrating how to use ZyFi with ZkSync paymasters.\n* Possibly includes testing and deployment scripts.", "file_summary": "Here's a concise summary:\n\n**Email OTP Login Block**\n\nHandles Magic SDK login functionality with email-based authentication using one-time passwords, saving user info and updating UI state."}
{"code": "      <CardHeader id=\"login\">Email OTP Login</CardHeader>\n      <div className=\"login-method-grid-item-container\">\n        <FormInput\n          onChange={(e) => {\n            if (emailError) setEmailError(false);\n            setEmail(e.target.value);\n          }}\n          placeholder={token.length > 0 ? 'Already logged in' : 'Email'}\n          value={email}\n        />\n        {emailError && <span className=\"error\">Enter a valid email</span>}\n        <button\n          className=\"login-button\"\n          disabled={isLoginInProgress || (token.length > 0 ? false : email.length == 0)}\n          onClick={() => handleLogin()}\n        >\n          {isLoginInProgress ? <Spinner /> : 'Log in / Sign up'}\n        </button>\n      </div>\n    </Card>\n  );\n};\n\nexport default EmailOTP;\n", "explanation": "**Summary:**\n\nThis block is a login card component that allows users to enter an email address and send an OTP (one-time password) for authentication. It contains a text input field, error message display, and a button to trigger the login process.", "metadata": {"repo": "magiclabs/example-zyfi-zksync-paymaster", "file": "src/components/magic/auth/EmailOTP.tsx", "chunk_number": 3, "total_chunks": 3}, "repository_explanation": "Here is a concise explanation:\n\n**Repository Name:** magiclabs/example-zyfi-zksync-paymaster\n\n**Purpose:** Example code for integrating ZyFi with ZkSync paymaster functionality.\n\n**Content:**\n\n* Code examples illustrating how to use ZyFi with ZkSync paymasters.\n* Possibly includes testing and deployment scripts.", "file_summary": "Here's a concise summary:\n\n**Email OTP Login Block**\n\nHandles Magic SDK login functionality with email-based authentication using one-time passwords, saving user info and updating UI state."}
{"code": "import React, { useCallback, useEffect, useState } from 'react';\nimport Divider from '@/components/ui/Divider';\nimport { useMagic } from '../MagicProvider';\nimport FormButton from '@/components/ui/FormButton';\nimport FormInput from '@/components/ui/FormInput';\nimport ErrorText from '@/components/ui/ErrorText';\nimport Card from '@/components/ui/Card';\nimport CardHeader from '@/components/ui/CardHeader';\nimport { getFaucetUrl, getNetworkToken } from '@/utils/network';\nimport showToast from '@/utils/showToast';\nimport Spacer from '@/components/ui/Spacer';\nimport TransactionHistory from '@/components/ui/TransactionHistory';\nimport Image from 'next/image';\nimport Link from 'public/link.svg';\nimport { zkSyncSepoliaTestnet } from \"viem/chains\"\n\nconst SendTransaction = () => {\n  const { web3, walletClient } = useMagic();\n  const [toAddress, setToAddress] = useState('');\n  const [amount, setAmount] = useState('');\n  const [disabled, setDisabled] = useState(!toAddress || !amount);", "explanation": "Here is a concise summary:\n\n**Purpose:** A React component for sending transactions.\n**Functionality:** Allows users to enter a recipient address and amount, then sends the transaction using Web3 and wallet client functionality.", "metadata": {"repo": "magiclabs/example-zyfi-zksync-paymaster", "file": "src/components/magic/cards/SendTransactionCard.tsx", "chunk_number": 1, "total_chunks": 5}, "repository_explanation": "Here is a concise explanation:\n\n**Repository Name:** magiclabs/example-zyfi-zksync-paymaster\n\n**Purpose:** Example code for integrating ZyFi with ZkSync paymaster functionality.\n\n**Content:**\n\n* Code examples illustrating how to use ZyFi with ZkSync paymasters.\n* Possibly includes testing and deployment scripts.", "file_summary": "Here's a concise holistic summary of the file 'src/components/magic/cards/SendTransactionCard.tsx':\n\n**Purpose:** A React component for sending transactions on ZkSync, allowing users to input recipient address and amount.\n\n**Functionality:** Validates user input, sends transaction using wallet client and API, and updates UI state with success or error messages."}
{"code": "  const [hash, setHash] = useState('');\n  const [toAddressError, setToAddressError] = useState(false);\n  const [amountError, setAmountError] = useState(false);\n  const publicAddress = localStorage.getItem('user');\n\n  useEffect(() => {\n    setDisabled(!toAddress || !amount);\n    setAmountError(false);\n    setToAddressError(false);\n  }, [amount, toAddress]);\n\n  const sendTransaction = useCallback(async () => {\n    if (!web3?.utils.isAddress(toAddress)) {\n      return setToAddressError(true);\n    }\n    if (isNaN(Number(amount))) {\n      return setAmountError(true);\n    }\n    setDisabled(true);\n\n    const res = await fetch('https://api.zyfi.org/api/erc20_paymaster/v1', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        \"feeTokenAddress\": \"0xFD1fBFf2E1bAa053C927dc513579a8B2727233D8\",\n        \"isTestnet\": true,\n        \"txData\": {\n          \"from\": publicAddress,\n          \"to\": toAddress,\n          \"value\": web3.utils.toWei(amount, 'ether'),", "explanation": "**Summary:**\n\nThis block manages user input for sending a transaction on a blockchain platform. It handles:\n\n* Form validation: checks for empty or invalid `toAddress` and `amount`\n* API call: sends a POST request to an external API with the formatted transaction data\n* State management: updates UI state (e.g., disabling buttons, showing errors) based on user input and API responses", "metadata": {"repo": "magiclabs/example-zyfi-zksync-paymaster", "file": "src/components/magic/cards/SendTransactionCard.tsx", "chunk_number": 2, "total_chunks": 5}, "repository_explanation": "Here is a concise explanation:\n\n**Repository Name:** magiclabs/example-zyfi-zksync-paymaster\n\n**Purpose:** Example code for integrating ZyFi with ZkSync paymaster functionality.\n\n**Content:**\n\n* Code examples illustrating how to use ZyFi with ZkSync paymasters.\n* Possibly includes testing and deployment scripts.", "file_summary": "Here's a concise holistic summary of the file 'src/components/magic/cards/SendTransactionCard.tsx':\n\n**Purpose:** A React component for sending transactions on ZkSync, allowing users to input recipient address and amount.\n\n**Functionality:** Validates user input, sends transaction using wallet client and API, and updates UI state with success or error messages."}
{"code": "          \"data\": \"0x\"\n        }\n      })\n    })\n\n    const { txData: apiTxData } = await res.json();\n\n    const paymasterTxData = {\n      account: publicAddress as `0x${string}`,\n      to: apiTxData.to,\n      value: BigInt(apiTxData.value),\n      chain: zkSyncSepoliaTestnet,\n      gas: BigInt(apiTxData.gasLimit),\n      gasPerPubdata: BigInt(apiTxData.customData.gasPerPubdata),\n      maxFeePerGas: BigInt(apiTxData.maxFeePerGas),\n      maxPriorityFeePerGas: BigInt(0),\n      data: apiTxData.data,\n      paymaster: apiTxData.customData.paymasterParams.paymaster,\n      paymasterInput: apiTxData.customData.paymasterParams.paymasterInput,\n    };\n\n    try {\n      const hash = await walletClient?.sendTransaction(paymasterTxData);\n      setHash(hash)\n    } catch (err) {\n      console.log(\"Something went wrong: \", err)\n    }\n\n  }, [web3, amount, publicAddress, toAddress]);\n\n  return (\n    <Card>\n      <CardHeader id=\"send-transaction\">Send Transaction</CardHeader>\n      {getFaucetUrl() && (\n        <div>", "explanation": "Here is a concise summary:\n\nThis block sends a transaction on the ZkSync network using the user's wallet client, with the paymaster data fetched from an API. It takes in `web3`, `amount`, `publicAddress`, and `toAddress` as dependencies. If successful, it sets the transaction hash.", "metadata": {"repo": "magiclabs/example-zyfi-zksync-paymaster", "file": "src/components/magic/cards/SendTransactionCard.tsx", "chunk_number": 3, "total_chunks": 5}, "repository_explanation": "Here is a concise explanation:\n\n**Repository Name:** magiclabs/example-zyfi-zksync-paymaster\n\n**Purpose:** Example code for integrating ZyFi with ZkSync paymaster functionality.\n\n**Content:**\n\n* Code examples illustrating how to use ZyFi with ZkSync paymasters.\n* Possibly includes testing and deployment scripts.", "file_summary": "Here's a concise holistic summary of the file 'src/components/magic/cards/SendTransactionCard.tsx':\n\n**Purpose:** A React component for sending transactions on ZkSync, allowing users to input recipient address and amount.\n\n**Functionality:** Validates user input, sends transaction using wallet client and API, and updates UI state with success or error messages."}
{"code": "          <a href={getFaucetUrl()} target=\"_blank\" rel=\"noreferrer\">\n            <FormButton onClick={() => null} disabled={false}>\n              Get Test {getNetworkToken()}\n              <Image src={Link} alt=\"link-icon\" className=\"ml-[3px]\" />\n            </FormButton>\n          </a>\n          <Divider />\n        </div>\n      )}\n\n      <FormInput\n        value={toAddress}\n        onChange={(e: any) => setToAddress(e.target.value)}\n        placeholder=\"Receiving Address\"\n      />\n      {toAddressError ? <ErrorText>Invalid address</ErrorText> : null}\n      <FormInput\n        value={amount}\n        onChange={(e: any) => setAmount(e.target.value)}\n        placeholder={`Amount (${getNetworkToken()})`}\n      />\n      {amountError ? <ErrorText className=\"error\">Invalid amount</ErrorText> : null}\n      <FormButton onClick={sendTransaction} disabled={!toAddress || !amount || disabled}>\n        Send Transaction\n      </FormButton>\n\n      {hash ? (\n        <>\n          <Spacer size={20} />\n          <TransactionHistory />", "explanation": "Here is a concise summary of the purpose and functionality of this block:\n\n**Purpose:** Display a form for sending a transaction, with options to get test funds and enter recipient address and amount.\n\n**Functionality:**\n\n* Get test funds button\n* Input fields for recipient address and amount\n* Error messages for invalid address or amount\n* Send Transaction button that triggers the sendTransaction function when clicked", "metadata": {"repo": "magiclabs/example-zyfi-zksync-paymaster", "file": "src/components/magic/cards/SendTransactionCard.tsx", "chunk_number": 4, "total_chunks": 5}, "repository_explanation": "Here is a concise explanation:\n\n**Repository Name:** magiclabs/example-zyfi-zksync-paymaster\n\n**Purpose:** Example code for integrating ZyFi with ZkSync paymaster functionality.\n\n**Content:**\n\n* Code examples illustrating how to use ZyFi with ZkSync paymasters.\n* Possibly includes testing and deployment scripts.", "file_summary": "Here's a concise holistic summary of the file 'src/components/magic/cards/SendTransactionCard.tsx':\n\n**Purpose:** A React component for sending transactions on ZkSync, allowing users to input recipient address and amount.\n\n**Functionality:** Validates user input, sends transaction using wallet client and API, and updates UI state with success or error messages."}
{"code": "        </>\n      ) : null}\n    </Card>\n  );\n};\n\nexport default SendTransaction;\n", "explanation": "This block is a React component named `SendTransaction`, which renders a `<Card>` element conditionally (i.e., only if the component is not null).", "metadata": {"repo": "magiclabs/example-zyfi-zksync-paymaster", "file": "src/components/magic/cards/SendTransactionCard.tsx", "chunk_number": 5, "total_chunks": 5}, "repository_explanation": "Here is a concise explanation:\n\n**Repository Name:** magiclabs/example-zyfi-zksync-paymaster\n\n**Purpose:** Example code for integrating ZyFi with ZkSync paymaster functionality.\n\n**Content:**\n\n* Code examples illustrating how to use ZyFi with ZkSync paymasters.\n* Possibly includes testing and deployment scripts.", "file_summary": "Here's a concise holistic summary of the file 'src/components/magic/cards/SendTransactionCard.tsx':\n\n**Purpose:** A React component for sending transactions on ZkSync, allowing users to input recipient address and amount.\n\n**Functionality:** Validates user input, sends transaction using wallet client and API, and updates UI state with success or error messages."}
{"code": "import { useCallback, useEffect, useMemo, useState } from 'react';\nimport Divider from '@/components/ui/Divider';\nimport { LoginProps } from '@/utils/types';\nimport { logout } from '@/utils/common';\nimport { useMagic } from '../MagicProvider';\nimport Card from '@/components/ui/Card';\nimport CardHeader from '@/components/ui/CardHeader';\nimport CardLabel from '@/components/ui/CardLabel';\nimport Spinner from '@/components/ui/Spinner';\nimport { getNetworkName, getNetworkToken } from '@/utils/network';\n\nconst UserInfo = ({ token, setToken }: LoginProps) => {\n  const { magic, web3 } = useMagic();\n\n  const [balance, setBalance] = useState('...');\n  const [copied, setCopied] = useState('Copy');\n  const [isRefreshing, setIsRefreshing] = useState(false);\n\n  const [publicAddress] = useState(localStorage.getItem('user'));\n\n  const getBalance = useCallback(async () => {\n    if (publicAddress && web3) {\n      const balance = await web3.eth.getBalance(publicAddress);\n      if (balance == BigInt(0)) {", "explanation": "Here is a concise summary of the purpose and functionality of this block:\n\n**Purpose:** Display user information, including account balance, copy public address, and refresh data.\n\n**Functionality:**\n\n* Retrieves account balance from blockchain\n* Displays \"Copy\" button that copies public address to clipboard when clicked\n* Refreshes data on click (with animation)", "metadata": {"repo": "magiclabs/example-zyfi-zksync-paymaster", "file": "src/components/magic/cards/UserInfoCard.tsx", "chunk_number": 1, "total_chunks": 3}, "repository_explanation": "Here is a concise explanation:\n\n**Repository Name:** magiclabs/example-zyfi-zksync-paymaster\n\n**Purpose:** Example code for integrating ZyFi with ZkSync paymaster functionality.\n\n**Content:**\n\n* Code examples illustrating how to use ZyFi with ZkSync paymasters.\n* Possibly includes testing and deployment scripts.", "file_summary": "Here is a concise summary of the 'src/components/magic/cards/UserInfoCard.tsx' file:\n\n**Purpose:** Display user information in a card format.\n\n**Functionality:** Shows account balance, public address, and allows users to refresh data, copy public address, and disconnect from Magic API."}
{"code": "        setBalance('0');\n      } else {\n        setBalance(web3.utils.fromWei(balance, 'ether'));\n      }\n      console.log('BALANCE: ', balance);\n    }\n  }, [web3, publicAddress]);\n\n  const refresh = useCallback(async () => {\n    setIsRefreshing(true);\n    await getBalance();\n    setTimeout(() => {\n      setIsRefreshing(false);\n    }, 500);\n  }, [getBalance]);\n\n  useEffect(() => {\n    if (web3) {\n      refresh();\n    }\n  }, [web3, refresh]);\n\n  useEffect(() => {\n    setBalance('...');\n  }, [magic]);\n\n  const disconnect = useCallback(async () => {\n    if (magic) {\n      await logout(setToken, magic);\n    }\n  }, [magic, setToken]);\n\n  const copy = useCallback(() => {\n    if (publicAddress && copied === 'Copy') {\n      setCopied('Copied!');\n      navigator.clipboard.writeText(publicAddress);\n      setTimeout(() => {\n        setCopied('Copy');\n      }, 1000);\n    }\n  }, [copied, publicAddress]);\n\n  return (\n    <Card>\n      <CardHeader id=\"Wallet\">Wallet</CardHeader>", "explanation": "Here is a concise summary of the purpose and functionality of this block:\n\n**Purpose:** Manage user wallet data, including balance refresh and logout.\n\n**Functionality:**\n\n* Refreshes user balance every time the web3 connection changes.\n* Displays balance with '...' placeholder until refreshed.\n* Allows user to copy their public address.\n* Triggers logout when user disconnects from Magic API.\n* Updates copied status after copying public address.", "metadata": {"repo": "magiclabs/example-zyfi-zksync-paymaster", "file": "src/components/magic/cards/UserInfoCard.tsx", "chunk_number": 2, "total_chunks": 3}, "repository_explanation": "Here is a concise explanation:\n\n**Repository Name:** magiclabs/example-zyfi-zksync-paymaster\n\n**Purpose:** Example code for integrating ZyFi with ZkSync paymaster functionality.\n\n**Content:**\n\n* Code examples illustrating how to use ZyFi with ZkSync paymasters.\n* Possibly includes testing and deployment scripts.", "file_summary": "Here is a concise summary of the 'src/components/magic/cards/UserInfoCard.tsx' file:\n\n**Purpose:** Display user information in a card format.\n\n**Functionality:** Shows account balance, public address, and allows users to refresh data, copy public address, and disconnect from Magic API."}
{"code": "      <CardLabel leftHeader=\"Status\" rightAction={<div onClick={disconnect}>Disconnect</div>} isDisconnect />\n      <div className=\"flex-row\">\n        <div className=\"green-dot\" />\n        <div className=\"connected\">Connected to {getNetworkName()}</div>\n      </div>\n      <Divider />\n      <CardLabel leftHeader=\"Address\" rightAction={!publicAddress ? <Spinner /> : <div onClick={copy}>{copied}</div>} />\n      <div className=\"code\">{publicAddress?.length == 0 ? 'Fetching address..' : publicAddress}</div>\n      <Divider />\n      <CardLabel\n        leftHeader=\"Balance\"\n        rightAction={\n          isRefreshing ? (\n            <div className=\"loading-container\">\n              <Spinner />\n            </div>\n          ) : (\n            <div onClick={refresh}>Refresh</div>\n          )\n        }\n      />\n      <div className=\"code\">\n        {balance.substring(0, 7)} {getNetworkToken()}\n      </div>\n    </Card>\n  );\n};\n\nexport default UserInfo;\n", "explanation": "Here is a summary of the purpose and functionality of this block:\n\n**Purpose:** Display user information in a card format.\n\n**Functionality:** Shows the user's network status, address, and balance, with options to disconnect, refresh balance, or copy the public address.", "metadata": {"repo": "magiclabs/example-zyfi-zksync-paymaster", "file": "src/components/magic/cards/UserInfoCard.tsx", "chunk_number": 3, "total_chunks": 3}, "repository_explanation": "Here is a concise explanation:\n\n**Repository Name:** magiclabs/example-zyfi-zksync-paymaster\n\n**Purpose:** Example code for integrating ZyFi with ZkSync paymaster functionality.\n\n**Content:**\n\n* Code examples illustrating how to use ZyFi with ZkSync paymasters.\n* Possibly includes testing and deployment scripts.", "file_summary": "Here is a concise summary of the 'src/components/magic/cards/UserInfoCard.tsx' file:\n\n**Purpose:** Display user information in a card format.\n\n**Functionality:** Shows account balance, public address, and allows users to refresh data, copy public address, and disconnect from Magic API."}
{"code": "import React, { useState } from 'react';\nimport Disconnect from '../wallet-methods/Disconnect';\nimport GetIdToken from '../wallet-methods/GetIdToken';\nimport GetMetadata from '../wallet-methods/GetMetadata';\nimport Divider from '@/components/ui/Divider';\nimport { LoginProps } from '@/utils/types';\nimport Card from '@/components/ui/Card';\nimport CardHeader from '@/components/ui/CardHeader';\nimport { LoginMethod } from '@/utils/common';\n\nimport UpdateEmail from '../wallet-methods/UpdateEmail'\n\nconst WalletMethods = ({ token, setToken }: LoginProps) => {\n  const [loginMethod, setLoginMethod] = useState<LoginMethod | null>(\n    localStorage.getItem('loginMethod') as LoginMethod,\n  );\n  return (\n    <Card>\n      <CardHeader id=\"methods\">User Methods</CardHeader>\n\t  \n\t  \t{loginMethod && loginMethod == 'EMAIL' && (\n\t\t\t<>\n\t\t\t\t<UpdateEmail />\n\t\t\t\t<Divider />\n\t\t\t</>\n\t\t)}\t  \n      <GetIdToken />\n      <Divider />\n      <GetMetadata />\n      <Divider />\n      <Disconnect token={token} setToken={setToken} />\n    </Card>\n  );\n};\n", "explanation": "**Summary:**\n\nThis React component (`WalletMethods`) displays user authentication methods, allowing users to update their email address or disconnect from their account. It uses local storage to remember the user's login method.", "metadata": {"repo": "magiclabs/example-zyfi-zksync-paymaster", "file": "src/components/magic/cards/WalletMethodsCard.tsx", "chunk_number": 1, "total_chunks": 2}, "repository_explanation": "Here is a concise explanation:\n\n**Repository Name:** magiclabs/example-zyfi-zksync-paymaster\n\n**Purpose:** Example code for integrating ZyFi with ZkSync paymaster functionality.\n\n**Content:**\n\n* Code examples illustrating how to use ZyFi with ZkSync paymasters.\n* Possibly includes testing and deployment scripts.", "file_summary": "Here is a concise and to-the-point summary of the file 'src/components/magic/cards/WalletMethodsCard.tsx':\n\n**Summary:** The WalletMethods component displays user authentication methods and allows updates or disconnections, remembering login method via local storage."}
{"code": "export default WalletMethods;\n", "explanation": "This block exports a class or function named \"WalletMethods\" as the default export, making it available for use elsewhere.", "metadata": {"repo": "magiclabs/example-zyfi-zksync-paymaster", "file": "src/components/magic/cards/WalletMethodsCard.tsx", "chunk_number": 2, "total_chunks": 2}, "repository_explanation": "Here is a concise explanation:\n\n**Repository Name:** magiclabs/example-zyfi-zksync-paymaster\n\n**Purpose:** Example code for integrating ZyFi with ZkSync paymaster functionality.\n\n**Content:**\n\n* Code examples illustrating how to use ZyFi with ZkSync paymasters.\n* Possibly includes testing and deployment scripts.", "file_summary": "Here is a concise and to-the-point summary of the file 'src/components/magic/cards/WalletMethodsCard.tsx':\n\n**Summary:** The WalletMethods component displays user authentication methods and allows updates or disconnections, remembering login method via local storage."}
{"code": "import React, { useCallback, useState } from 'react';\nimport { logout } from '@/utils/common';\nimport { LoginProps } from '@/utils/types';\nimport { useMagic } from '../MagicProvider';\nimport Spinner from '@/components/ui/Spinner';\n\nconst Disconnect = ({ setToken }: LoginProps) => {\n  const { magic } = useMagic();\n  const [disabled, setDisabled] = useState(false);\n\n  const disconnect = useCallback(async () => {\n    if (!magic) return;\n    try {\n      setDisabled(true);\n      await logout(setToken, magic);\n      setDisabled(false);\n    } catch (error) {\n      setDisabled(false);\n      console.error(error);\n    }\n  }, [magic, setToken]);\n\n  return (\n    <div className=\"wallet-method-container\">\n      <button className=\"wallet-method\" onClick={disconnect} disabled={disabled}>\n        {disabled ? (\n          <div className=\"loading-container w-[115px]\">\n            <Spinner />\n          </div>\n        ) : (\n          'disconnect()'\n        )}\n      </button>", "explanation": "**Summary:**\n\nThis block, a React component named `Disconnect`, allows users to disconnect from a Magic provider by logging out. It uses the `logout` function from `/@/utils/common` and toggles a loading state while awaiting completion. The button is disabled during this process.", "metadata": {"repo": "magiclabs/example-zyfi-zksync-paymaster", "file": "src/components/magic/wallet-methods/Disconnect.tsx", "chunk_number": 1, "total_chunks": 2}, "repository_explanation": "Here is a concise explanation:\n\n**Repository Name:** magiclabs/example-zyfi-zksync-paymaster\n\n**Purpose:** Example code for integrating ZyFi with ZkSync paymaster functionality.\n\n**Content:**\n\n* Code examples illustrating how to use ZyFi with ZkSync paymasters.\n* Possibly includes testing and deployment scripts.", "file_summary": "Here is a concise summary:\n\nThe `Disconnect` component logs out users from a Magic provider, displaying a loading state until completion, during which time the button is disabled."}
{"code": "      <div className=\"wallet-method-desc\">Disconnects user from dApp.</div>\n    </div>\n  );\n};\n\nexport default Disconnect;\n", "explanation": "This block is a React component named \"Disconnect\" that contains a text description indicating it disconnects a user from a decentralized application (dApp).", "metadata": {"repo": "magiclabs/example-zyfi-zksync-paymaster", "file": "src/components/magic/wallet-methods/Disconnect.tsx", "chunk_number": 2, "total_chunks": 2}, "repository_explanation": "Here is a concise explanation:\n\n**Repository Name:** magiclabs/example-zyfi-zksync-paymaster\n\n**Purpose:** Example code for integrating ZyFi with ZkSync paymaster functionality.\n\n**Content:**\n\n* Code examples illustrating how to use ZyFi with ZkSync paymasters.\n* Possibly includes testing and deployment scripts.", "file_summary": "Here is a concise summary:\n\nThe `Disconnect` component logs out users from a Magic provider, displaying a loading state until completion, during which time the button is disabled."}
{"code": "import React, { useCallback, useState } from 'react';\nimport { useMagic } from '../MagicProvider';\nimport showToast from '@/utils/showToast';\nimport Spinner from '@/components/ui/Spinner';\n\nconst GetIdToken = () => {\n  const { magic } = useMagic();\n  const [disabled, setDisabled] = useState(false);\n\n  const getWalletType = useCallback(async () => {\n    if (!magic) return;\n    try {\n      setDisabled(true);\n      const idToken = await magic.user.getIdToken();\n      setDisabled(false);\n      console.log('ID Token: ' + idToken);\n      showToast({\n        message: 'Please check console for the ID Token Log',\n        type: 'success',\n      });\n    } catch (error) {\n      setDisabled(false);\n      console.error(error);\n    }\n  }, [magic]);\n\n  return (\n    <div className=\"wallet-method-container\">\n      <button className=\"wallet-method\" onClick={getWalletType} disabled={disabled}>\n        {disabled ? (\n          <div className=\"loading-container w-[86px]\">\n            <Spinner />\n          </div>\n        ) : (", "explanation": "**Summary:**\n\nThis block, `GetIdToken`, is a React component that retrieves an ID token from a user's wallet using the Magic library. It consists of:\n\n* A button that triggers the token retrieval when clicked\n* A disabled state that prevents multiple requests at once\n* A callback function (`getWalletType`) that fetches the ID token, shows a success message, and logs the result to the console\n\n**Functionality:**\n\n1. Clicking the button initiates the ID token retrieval process.\n2. The component disables itself during the request to prevent multiple requests simultaneously.\n3. If successful, the component re-enables itself and displays a success message.\n4. If an error occurs, the component re-enables itself and logs the error to the console.", "metadata": {"repo": "magiclabs/example-zyfi-zksync-paymaster", "file": "src/components/magic/wallet-methods/GetIdToken.tsx", "chunk_number": 1, "total_chunks": 2}, "repository_explanation": "Here is a concise explanation:\n\n**Repository Name:** magiclabs/example-zyfi-zksync-paymaster\n\n**Purpose:** Example code for integrating ZyFi with ZkSync paymaster functionality.\n\n**Content:**\n\n* Code examples illustrating how to use ZyFi with ZkSync paymasters.\n* Possibly includes testing and deployment scripts.", "file_summary": "Here is a concise summary:\n\n**GetIdToken Component Summary**\n\nThe `GetIdToken` component retrieves an ID token from a user's wallet using Magic library, enabling secure authentication. It consists of a button that initiates token retrieval, disabled state to prevent multiple requests, and callback function to display success message or log error if unsuccessful."}
{"code": "          'getIdToken()'\n        )}\n      </button>\n      <div className=\"wallet-method-desc\">\n        Generates a Decentralized Id Token which acts as a proof of authentication to resource servers.\n      </div>\n    </div>\n  );\n};\n\nexport default GetIdToken;\n", "explanation": "This block generates an authentication token (\"Decentralized Id Token\") when called, acting as a proof of user authentication.", "metadata": {"repo": "magiclabs/example-zyfi-zksync-paymaster", "file": "src/components/magic/wallet-methods/GetIdToken.tsx", "chunk_number": 2, "total_chunks": 2}, "repository_explanation": "Here is a concise explanation:\n\n**Repository Name:** magiclabs/example-zyfi-zksync-paymaster\n\n**Purpose:** Example code for integrating ZyFi with ZkSync paymaster functionality.\n\n**Content:**\n\n* Code examples illustrating how to use ZyFi with ZkSync paymasters.\n* Possibly includes testing and deployment scripts.", "file_summary": "Here is a concise summary:\n\n**GetIdToken Component Summary**\n\nThe `GetIdToken` component retrieves an ID token from a user's wallet using Magic library, enabling secure authentication. It consists of a button that initiates token retrieval, disabled state to prevent multiple requests, and callback function to display success message or log error if unsuccessful."}
{"code": "import React, { useCallback, useState } from 'react';\nimport showToast from '@/utils/showToast';\nimport { useMagic } from '../MagicProvider';\nimport Spinner from '@/components/ui/Spinner';\n\nconst GetMetadata = () => {\n  const { magic } = useMagic();\n  const [disabled, setDisabled] = useState(false);\n\n  const getMetadata = useCallback(async () => {\n    if (!magic) return;\n    try {\n      setDisabled(true);\n      const userInfo = await magic.user.getInfo();\n      setDisabled(false);\n      showToast({\n        message: `Public Address: ${userInfo.publicAddress}`,\n        type: 'success',\n      });\n    } catch (error) {\n      setDisabled(false);\n      console.error(error);\n    }\n  }, [magic]);\n\n  return (\n    <div className=\"wallet-method-container\">\n      <button className=\"wallet-method\" onClick={getMetadata} disabled={disabled}>\n        {disabled ? (\n          <div className=\"loading-container w-[220px]\">\n            <Spinner />\n          </div>\n        ) : (\n          'getInfo()'\n        )}\n      </button>", "explanation": "**Summary:**\n\nThis block is a React functional component named \"GetMetadata\". Its purpose is to fetch metadata from Magic's API when clicked, displaying the user's public address via toast notification. It also displays a loading spinner while fetching data.", "metadata": {"repo": "magiclabs/example-zyfi-zksync-paymaster", "file": "src/components/magic/wallet-methods/GetMetadata.tsx", "chunk_number": 1, "total_chunks": 2}, "repository_explanation": "Here is a concise explanation:\n\n**Repository Name:** magiclabs/example-zyfi-zksync-paymaster\n\n**Purpose:** Example code for integrating ZyFi with ZkSync paymaster functionality.\n\n**Content:**\n\n* Code examples illustrating how to use ZyFi with ZkSync paymasters.\n* Possibly includes testing and deployment scripts.", "file_summary": "Here's a concise and to-the-point holistic summary:\n\n**GetMetadata Component:** A React functional component that fetches user metadata from Magic's API upon click, displaying their public address via toast notification while showing a loading spinner during data retrieval."}
{"code": "      <div className=\"wallet-method-desc\">Retrieves information for the authenticated user.</div>\n    </div>\n  );\n};\n\nexport default GetMetadata;\n", "explanation": "**Summary:**\n\nThis block, \"GetMetadata\", retrieves information for an authenticated user.\n\n(Note: The actual functionality is likely code, but this summary focuses on the provided text)", "metadata": {"repo": "magiclabs/example-zyfi-zksync-paymaster", "file": "src/components/magic/wallet-methods/GetMetadata.tsx", "chunk_number": 2, "total_chunks": 2}, "repository_explanation": "Here is a concise explanation:\n\n**Repository Name:** magiclabs/example-zyfi-zksync-paymaster\n\n**Purpose:** Example code for integrating ZyFi with ZkSync paymaster functionality.\n\n**Content:**\n\n* Code examples illustrating how to use ZyFi with ZkSync paymasters.\n* Possibly includes testing and deployment scripts.", "file_summary": "Here's a concise and to-the-point holistic summary:\n\n**GetMetadata Component:** A React functional component that fetches user metadata from Magic's API upon click, displaying their public address via toast notification while showing a loading spinner during data retrieval."}
{"code": "import React, { useCallback, useState } from 'react';\nimport ErrorText from '@/components/ui/ErrorText';\nimport Spacer from '@/components/ui/Spacer';\nimport { useMagic } from '../MagicProvider';\nimport Spinner from '@/components/ui/Spinner';\nimport FormInput from '@/components/ui/FormInput';\nimport showToast from '@/utils/showToast';\nimport { RPCError } from 'magic-sdk';\n\nconst UpdateEmail = () => {\n  const { magic } = useMagic();\n  const [disabled, setDisabled] = useState(false);\n  const [email, setEmail] = useState('');\n  const [emailError, setEmailError] = useState(false);\n\n  const updateEmail = useCallback(async () => {\n    if (!magic) return;\n    try {\n      if (!email.match(/^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/)) {\n        setEmailError(true);\n        setDisabled(false);\n      } else {\n        setDisabled(true);\n        await magic.auth.updateEmailWithUI({ email, showUI: true });\n        showToast({ message: 'Email Updated!', type: 'success' });", "explanation": "Here is a summary of the purpose and functionality of this block:\n\n**Update Email Component**\n\n* Allows users to update their email address\n* Validates input email using a regular expression\n* Uses Magic Auth SDK to update email with UI prompt if valid\n* Displays success message or error text accordingly", "metadata": {"repo": "magiclabs/example-zyfi-zksync-paymaster", "file": "src/components/magic/wallet-methods/UpdateEmail.tsx", "chunk_number": 1, "total_chunks": 3}, "repository_explanation": "Here is a concise explanation:\n\n**Repository Name:** magiclabs/example-zyfi-zksync-paymaster\n\n**Purpose:** Example code for integrating ZyFi with ZkSync paymaster functionality.\n\n**Content:**\n\n* Code examples illustrating how to use ZyFi with ZkSync paymasters.\n* Possibly includes testing and deployment scripts.", "file_summary": "Here is a concise summary:\n\n**Update Email Component:**\n\n* Updates user's email address with Magic Auth SDK validation.\n* Displays success or error messages based on update outcome."}
{"code": "        setDisabled(false);\n        setEmail('');\n      }\n    } catch (error) {\n      setDisabled(false);\n      console.error(error);\n      if (error instanceof RPCError) {\n        showToast({ message: error.message, type: 'error' });\n      } else {\n        showToast({ message: 'Update email failed', type: 'error' });\n      }\n    }\n  }, [magic, email]);\n\n  const handleEmailChange = (e: any) => {\n    setEmailError(false);\n    setEmail(e.target.value);\n  };\n\n  return (\n    <div className=\"wallet-method-container\">\n      <FormInput value={email} onChange={handleEmailChange} placeholder=\"New Email\" />\n      <button className=\"wallet-method\" onClick={updateEmail} disabled={disabled}>\n        {disabled ? (\n          <div className=\"loading-container w-[76px]\">\n            <Spinner />\n          </div>\n        ) : (\n          'updateEmail()'\n        )}\n      </button>\n      <div className=\"wallet-method-desc\">\n        Initiates the update email flow that allows a user to change their email address.\n      </div>", "explanation": "Here is a concise summary:\n\n**Purpose:** Update email function for wallet management.\n\n**Functionality:** Allows user to input new email, initiate update process, and display error messages if update fails.", "metadata": {"repo": "magiclabs/example-zyfi-zksync-paymaster", "file": "src/components/magic/wallet-methods/UpdateEmail.tsx", "chunk_number": 2, "total_chunks": 3}, "repository_explanation": "Here is a concise explanation:\n\n**Repository Name:** magiclabs/example-zyfi-zksync-paymaster\n\n**Purpose:** Example code for integrating ZyFi with ZkSync paymaster functionality.\n\n**Content:**\n\n* Code examples illustrating how to use ZyFi with ZkSync paymasters.\n* Possibly includes testing and deployment scripts.", "file_summary": "Here is a concise summary:\n\n**Update Email Component:**\n\n* Updates user's email address with Magic Auth SDK validation.\n* Displays success or error messages based on update outcome."}
{"code": "      {emailError ? (\n        <div className=\"mb-[-10px]\">\n          <Spacer size={20} />\n          <ErrorText>Enter a valid email!</ErrorText>\n        </div>\n      ) : null}\n    </div>\n  );\n};\n\nexport default UpdateEmail;\n", "explanation": "**Purpose:** Display an error message if the entered email is invalid.\n\n**Functionality:** Conditional rendering of an error message, shown when a valid email is not provided.", "metadata": {"repo": "magiclabs/example-zyfi-zksync-paymaster", "file": "src/components/magic/wallet-methods/UpdateEmail.tsx", "chunk_number": 3, "total_chunks": 3}, "repository_explanation": "Here is a concise explanation:\n\n**Repository Name:** magiclabs/example-zyfi-zksync-paymaster\n\n**Purpose:** Example code for integrating ZyFi with ZkSync paymaster functionality.\n\n**Content:**\n\n* Code examples illustrating how to use ZyFi with ZkSync paymasters.\n* Possibly includes testing and deployment scripts.", "file_summary": "Here is a concise summary:\n\n**Update Email Component:**\n\n* Updates user's email address with Magic Auth SDK validation.\n* Displays success or error messages based on update outcome."}
{"code": "import React from 'react';\n\ninterface Props {\n  children: React.ReactNode;\n}\n\nconst Card = ({ children }: Props) => {\n  return <div className=\"card\">{children}</div>;\n};\n\nexport default Card;\n", "explanation": "Here is a summary of the code block:\n\n**Purpose:** A reusable React component for rendering a card container.\n\n**Functionality:** Accepts child components or elements as props and renders them within a `<div>` with class \"card\".", "metadata": {"repo": "magiclabs/example-zyfi-zksync-paymaster", "file": "src/components/ui/Card.tsx", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise explanation:\n\n**Repository Name:** magiclabs/example-zyfi-zksync-paymaster\n\n**Purpose:** Example code for integrating ZyFi with ZkSync paymaster functionality.\n\n**Content:**\n\n* Code examples illustrating how to use ZyFi with ZkSync paymasters.\n* Possibly includes testing and deployment scripts.", "file_summary": "Here is a holistic summary of the file 'src/components/ui/Card.tsx':\n\n\"A simple, reusable React component for rendering cards that accepts child content as props.\""}
{"code": "import React from 'react'\n\ninterface Props {\n  children: React.ReactNode\n  id: string\n}\n\nconst CardHeader = ({ children, id }: Props) => {\n  return (\n    <h1 className=\"card-header\" id={id}>\n      {children}\n    </h1>\n  )\n}\n\nexport default CardHeader\n", "explanation": "**Purpose:** A React component that renders a header for a card.\n\n**Functionality:** Accepts children content and an ID, returning a `<h1>` element with the specified class and ID.", "metadata": {"repo": "magiclabs/example-zyfi-zksync-paymaster", "file": "src/components/ui/CardHeader.tsx", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise explanation:\n\n**Repository Name:** magiclabs/example-zyfi-zksync-paymaster\n\n**Purpose:** Example code for integrating ZyFi with ZkSync paymaster functionality.\n\n**Content:**\n\n* Code examples illustrating how to use ZyFi with ZkSync paymasters.\n* Possibly includes testing and deployment scripts.", "file_summary": "Here is a concise and holistic summary of the file 'src/components/ui/CardHeader.tsx':\n\n\"CardHeader: A React component that renders a customizable card header, accepting children content and an optional ID.\""}
{"code": "import React from 'react';\n\ninterface Props {\n  leftHeader?: React.ReactNode;\n  rightAction?: React.ReactNode;\n  isDisconnect?: boolean;\n  [rest: string]: any;\n}\n\nconst CardLabel = ({ leftHeader, rightAction, isDisconnect, ...rest }: Props) => {\n  return (\n    <div className=\"card-label-container\" {...rest}>\n      <div className=\"card-label\">{leftHeader}</div>\n      {rightAction ? (\n        <div className={`card-label ${isDisconnect ? 'disconnect-button' : 'action-button'}`}>{rightAction}</div>\n      ) : null}\n    </div>\n  );\n};\n\nexport default CardLabel;\n", "explanation": "**Summary:**\n\nThis block is a reusable React component called `CardLabel`. Its purpose is to display a card-like label with customizable content on both sides, including an optional disconnect button. It accepts various props (e.g., left header, right action) and uses CSS classes for styling.", "metadata": {"repo": "magiclabs/example-zyfi-zksync-paymaster", "file": "src/components/ui/CardLabel.tsx", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise explanation:\n\n**Repository Name:** magiclabs/example-zyfi-zksync-paymaster\n\n**Purpose:** Example code for integrating ZyFi with ZkSync paymaster functionality.\n\n**Content:**\n\n* Code examples illustrating how to use ZyFi with ZkSync paymasters.\n* Possibly includes testing and deployment scripts.", "file_summary": "Here's a concise summary:\n\n`CardLabel.tsx`: A reusable React component displaying a card-like label with customizable content on both sides, including an optional disconnect button."}
{"code": "import React from 'react'\n\nconst Divider = () => {\n  return <div className='divider' />\n}\n\nexport default Divider\n", "explanation": "**Purpose:** A reusable React component for rendering a basic HTML div element.\n\n**Functionality:** Simply returns an empty `<div>` with a class name of \"divider\".", "metadata": {"repo": "magiclabs/example-zyfi-zksync-paymaster", "file": "src/components/ui/Divider.tsx", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise explanation:\n\n**Repository Name:** magiclabs/example-zyfi-zksync-paymaster\n\n**Purpose:** Example code for integrating ZyFi with ZkSync paymaster functionality.\n\n**Content:**\n\n* Code examples illustrating how to use ZyFi with ZkSync paymasters.\n* Possibly includes testing and deployment scripts.", "file_summary": "Here is a concise summary:\n\nThe `Divider.tsx` file contains a reusable React component that renders a basic `<div>` element with a \"divider\" class, providing a simple visual separator."}
{"code": "import React from 'react'\n\nconst ErrorText = ({children}: any) => {\n  return <div className='error'>{children}</div>\n}\n\nexport default ErrorText\n", "explanation": "**Summary:**\n\nThis block is a reusable React component called `ErrorText`. It takes in child elements (e.g., text or other components) and renders them within a `<div>` element with a class name of \"error\".", "metadata": {"repo": "magiclabs/example-zyfi-zksync-paymaster", "file": "src/components/ui/ErrorText.tsx", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise explanation:\n\n**Repository Name:** magiclabs/example-zyfi-zksync-paymaster\n\n**Purpose:** Example code for integrating ZyFi with ZkSync paymaster functionality.\n\n**Content:**\n\n* Code examples illustrating how to use ZyFi with ZkSync paymasters.\n* Possibly includes testing and deployment scripts.", "file_summary": "Here is a concise and to-the-point summary:\n\n**Summary:** The `ErrorText` component wraps child elements in a `<div>` with class \"error\", making it reusable for displaying error text or messages."}
{"code": "import React from 'react'\n\ninterface Props {\n\tchildren: React.ReactNode\n\tonClick: () => void\n\tdisabled: boolean\n}\n\nconst FormButton = ({children, onClick, disabled}: Props) => {\n  return (\n    <button className='form-button' disabled={disabled} onClick={onClick}>\n      {children}\n    </button>\n  )\n}\n\nexport default FormButton\n", "explanation": "**Summary:**\n\nThe `FormButton` block is a reusable React component that represents a form button. It accepts children elements, an optional click event handler (`onClick`), and a disabled state flag (`disabled`). The component renders a standard HTML button element with these properties applied.", "metadata": {"repo": "magiclabs/example-zyfi-zksync-paymaster", "file": "src/components/ui/FormButton.tsx", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise explanation:\n\n**Repository Name:** magiclabs/example-zyfi-zksync-paymaster\n\n**Purpose:** Example code for integrating ZyFi with ZkSync paymaster functionality.\n\n**Content:**\n\n* Code examples illustrating how to use ZyFi with ZkSync paymasters.\n* Possibly includes testing and deployment scripts.", "file_summary": "Here is a concise summary:\n\n**src/components/ui/FormButton.tsx:**\n\nA reusable React form button component that accepts children, an optional `onClick` handler, and a `disabled` state flag, rendering a standard HTML button element with applied properties."}
{"code": "import React from 'react'\n\ninterface Props {\n\tvalue: string\n\tonChange: (e: any) => void\n\tplaceholder: string\n}\n\nconst FormInput = ({value, onChange, placeholder}: Props) => {\n  return (\n    <input\n      className='form-input'\n      value={value}\n      onChange={onChange}\n      placeholder={placeholder}\n    />\n  )\n}\n\nexport default FormInput\n", "explanation": "**Summary:**\n\nThis block is a React component named `FormInput`. Its purpose is to render an HTML input field with customizable properties (value, change event handler, and placeholder text).", "metadata": {"repo": "magiclabs/example-zyfi-zksync-paymaster", "file": "src/components/ui/FormInput.tsx", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise explanation:\n\n**Repository Name:** magiclabs/example-zyfi-zksync-paymaster\n\n**Purpose:** Example code for integrating ZyFi with ZkSync paymaster functionality.\n\n**Content:**\n\n* Code examples illustrating how to use ZyFi with ZkSync paymasters.\n* Possibly includes testing and deployment scripts.", "file_summary": "Here is a concise summary of the file:\n\n`src/components/ui/FormInput.tsx`: A reusable React component for rendering customizable form inputs."}
{"code": "import React from 'react'\n\nconst Spacer = ({ size }: { size: number }) => {\n  return <div style={{ height: `${size}px` }} />\n}\n\nexport default Spacer\n", "explanation": "**Summary:** A reusable React component that renders a blank `<div>` element with a specified height, serving as a spacer for layout purposes.", "metadata": {"repo": "magiclabs/example-zyfi-zksync-paymaster", "file": "src/components/ui/Spacer.tsx", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise explanation:\n\n**Repository Name:** magiclabs/example-zyfi-zksync-paymaster\n\n**Purpose:** Example code for integrating ZyFi with ZkSync paymaster functionality.\n\n**Content:**\n\n* Code examples illustrating how to use ZyFi with ZkSync paymasters.\n* Possibly includes testing and deployment scripts.", "file_summary": "Here is a concise and holistic summary of the file 'src/components/ui/Spacer.tsx':\n\n\"A lightweight, reusable React component that generates an empty `<div>` to serve as a spacing unit in layouts.\""}
{"code": "const Spinner = () => (\n  <div className='flex items-center justify-center'>\n    <svg\n      height='12'\n      width='12'\n      aria-hidden='true'\n      className='w-6 h-6 mr-2 text-gray-200 animate-spin dark:text-gray-600 fill-blue-600'\n      viewBox='0 0 100 101'\n      fill='none'\n      xmlns='http://www.w3.org/2000/svg'>\n      <path\n        d='M100 50.5908C100 78.2051 77.6142 100.591 50 100.591C22.3858 100.591 0 78.2051 0 50.5908C0 22.9766 22.3858 0.59082 50 0.59082C77.6142 0.59082 100 22.9766 100 50.5908ZM9.08144 50.5908C9.08144 73.1895 27.4013 91.5094 50 91.5094C72.5987 91.5094 90.9186 73.1895 90.9186 50.5908C90.9186 27.9921 72.5987 9.67226 50 9.67226C27.4013 9.67226 9.08144 27.9921 9.08144 50.5908Z'\n        fill='currentColor'\n      />\n      <path", "explanation": "**Summary**\n\nThe `Spinner` block is a React component that renders a loading animation, consisting of an SVG icon that spins on screen. Its purpose is to indicate that some data is being loaded or processed, providing visual feedback to users during this time.", "metadata": {"repo": "magiclabs/example-zyfi-zksync-paymaster", "file": "src/components/ui/Spinner.tsx", "chunk_number": 1, "total_chunks": 2}, "repository_explanation": "Here is a concise explanation:\n\n**Repository Name:** magiclabs/example-zyfi-zksync-paymaster\n\n**Purpose:** Example code for integrating ZyFi with ZkSync paymaster functionality.\n\n**Content:**\n\n* Code examples illustrating how to use ZyFi with ZkSync paymasters.\n* Possibly includes testing and deployment scripts.", "file_summary": "Here's a concise summary:\n\n**Spinner Component**\n\nA React component displaying an SVG spinning animation, indicating loading or processing of data."}
{"code": "        d='M93.9676 39.0409C96.393 38.4038 97.8624 35.9116 97.0079 33.5539C95.2932 28.8227 92.871 24.3692 89.8167 20.348C85.8452 15.1192 80.8826 10.7238 75.2124 7.41289C69.5422 4.10194 63.2754 1.94025 56.7698 1.05124C51.7666 0.367541 46.6976 0.446843 41.7345 1.27873C39.2613 1.69328 37.813 4.19778 38.4501 6.62326C39.0873 9.04874 41.5694 10.4717 44.0505 10.1071C47.8511 9.54855 51.7191 9.52689 55.5402 10.0491C60.8642 10.7766 65.9928 12.5457 70.6331 15.2552C75.2735 17.9648 79.3347 21.5619 82.5849 25.841C84.9175 28.9121 86.7997 32.2913 88.1811 35.8758C89.083 38.2158 91.5421 39.6781 93.9676 39.0409Z'\n        fill='currentFill'\n      />\n    </svg>\n  </div>\n)\n\nexport default Spinner\n", "explanation": "This block is an SVG spinner icon, likely used for loading animations.", "metadata": {"repo": "magiclabs/example-zyfi-zksync-paymaster", "file": "src/components/ui/Spinner.tsx", "chunk_number": 2, "total_chunks": 2}, "repository_explanation": "Here is a concise explanation:\n\n**Repository Name:** magiclabs/example-zyfi-zksync-paymaster\n\n**Purpose:** Example code for integrating ZyFi with ZkSync paymaster functionality.\n\n**Content:**\n\n* Code examples illustrating how to use ZyFi with ZkSync paymasters.\n* Possibly includes testing and deployment scripts.", "file_summary": "Here's a concise summary:\n\n**Spinner Component**\n\nA React component displaying an SVG spinning animation, indicating loading or processing of data."}
{"code": "import React from 'react';\nimport Image from 'next/image';\nimport Link from 'public/link.svg';\nimport { getBlockExplorer } from '@/utils/network';\n\nconst TransactionHistory = () => {\n  const publicAddress = localStorage.getItem('user');\n\n  return (\n    <a className=\"action-button\" href={getBlockExplorer(publicAddress as string)} target=\"_blank\" rel=\"noreferrer\">\n      <div className=\"flex items-center justify-center\">\n        Transaction History <Image src={Link} alt=\"link-icon\" className=\"ml-[3px]\" />\n      </div>\n    </a>\n  );\n};\n\nexport default TransactionHistory;\n", "explanation": "Here is a concise summary:\n\n**Purpose:** A React component that displays a button to view a user's transaction history.\n\n**Functionality:** Links to a blockchain explorer site with the user's address, allowing them to view their transaction history.", "metadata": {"repo": "magiclabs/example-zyfi-zksync-paymaster", "file": "src/components/ui/TransactionHistory.tsx", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise explanation:\n\n**Repository Name:** magiclabs/example-zyfi-zksync-paymaster\n\n**Purpose:** Example code for integrating ZyFi with ZkSync paymaster functionality.\n\n**Content:**\n\n* Code examples illustrating how to use ZyFi with ZkSync paymasters.\n* Possibly includes testing and deployment scripts.", "file_summary": "Here is a holistic summary of the file 'src/components/ui/TransactionHistory.tsx':\n\n**Displays Transaction History Button**\n\nA React component that shows a button to access a user's transaction history by linking to a blockchain explorer site with their address."}
{"code": "import '@/styles/globals.css'\nimport type { AppProps } from 'next/app'\n\nexport default function App({ Component, pageProps }: AppProps) {\n  return <Component {...pageProps} />\n}\n", "explanation": "**Purpose:** Define a Next.js app entry point.\n\n**Functionality:** A simple React component that renders its child component (e.g., pages) with passed props.", "metadata": {"repo": "magiclabs/example-zyfi-zksync-paymaster", "file": "src/pages/_app.tsx", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise explanation:\n\n**Repository Name:** magiclabs/example-zyfi-zksync-paymaster\n\n**Purpose:** Example code for integrating ZyFi with ZkSync paymaster functionality.\n\n**Content:**\n\n* Code examples illustrating how to use ZyFi with ZkSync paymasters.\n* Possibly includes testing and deployment scripts.", "file_summary": "Here is a concise summary:\n\nDefines the Next.js app entry point, rendering child components (pages) with passed props in a simple React setup."}
{"code": "import { Html, Head, Main, NextScript } from 'next/document'\n\nexport default function Document() {\n  return (\n    <Html lang=\"en\">\n      <Head />\n      <body>\n        <Main />\n        <NextScript />\n      </body>\n    </Html>\n  )\n}\n", "explanation": "**Purpose:** Defines the basic HTML structure for a Next.js application.\n\n**Functionality:** Provides the minimal required HTML elements (Html, Head, body, Main, and NextScript) for a Next.js page.", "metadata": {"repo": "magiclabs/example-zyfi-zksync-paymaster", "file": "src/pages/_document.tsx", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise explanation:\n\n**Repository Name:** magiclabs/example-zyfi-zksync-paymaster\n\n**Purpose:** Example code for integrating ZyFi with ZkSync paymaster functionality.\n\n**Content:**\n\n* Code examples illustrating how to use ZyFi with ZkSync paymasters.\n* Possibly includes testing and deployment scripts.", "file_summary": "Here is a concise holistic summary of the file 'src/pages/_document.tsx':\n\nDefines the basic HTML structure for a Next.js application, providing the minimum required elements for each page."}
{"code": "import MagicProvider from '../components/magic/MagicProvider';\nimport { useEffect, useState } from 'react';\nimport { ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport Login from '@/components/magic/Login';\nimport Dashboard from '@/components/magic/Dashboard';\nimport MagicDashboardRedirect from '@/components/magic/MagicDashboardRedirect';\n\nexport default function Home() {\n  const [token, setToken] = useState('');\n\n  useEffect(() => {\n    setToken(localStorage.getItem('token') ?? '');\n  }, [setToken]);\n\n  return (\n    <MagicProvider>\n      <ToastContainer />\n      {process.env.NEXT_PUBLIC_MAGIC_API_KEY ? (\n        token.length > 0 ? (\n          <Dashboard token={token} setToken={setToken} />\n        ) : (\n          <Login token={token} setToken={setToken} />\n        )\n      ) : (\n        <MagicDashboardRedirect />\n      )}\n    </MagicProvider>\n  );\n}\n", "explanation": "Here is a concise summary:\n\n**Purpose:** Home page component that handles Magic provider setup and user login/redirect logic.\n\n**Functionality:** \n\n* Uses `useState` to store token from local storage.\n* Redirects users based on Magic API key presence and token availability:\n\t+ If key exists, displays dashboard if token exists or login form if not.\n\t+ If key doesn't exist, redirects to magic dashboard redirect page.", "metadata": {"repo": "magiclabs/example-zyfi-zksync-paymaster", "file": "src/pages/index.tsx", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise explanation:\n\n**Repository Name:** magiclabs/example-zyfi-zksync-paymaster\n\n**Purpose:** Example code for integrating ZyFi with ZkSync paymaster functionality.\n\n**Content:**\n\n* Code examples illustrating how to use ZyFi with ZkSync paymasters.\n* Possibly includes testing and deployment scripts.", "file_summary": "Here is a concise and holistic summary of the file 'src/pages/index.tsx':\n\n**Summary:** The home page component handles Magic provider setup and user login/redirect logic, using local storage for token management and redirecting users based on Magic API key presence."}
{"code": "@import url('https://fonts.googleapis.com/css2?family=Inter&display=swap');\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --foreground-rgb: 0, 0, 0;\n  --background-start-rgb: 214, 219, 220;\n  --background-end-rgb: 255, 255, 255;\n}\n\n@media (prefers-color-scheme: dark) {\n  :root {\n    --foreground-rgb: 255, 255, 255;\n    --background-start-rgb: 0, 0, 0;\n    --background-end-rgb: 0, 0, 0;\n  }\n}\n\nhtml,\nbody {\n  @apply m-0 p-0 bg-[#f8f8fa] scroll-pt-12;\n  font-family: 'Inter', sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\nnav > ul > li {\n  @apply text-left list-none text-[#777679] cursor-pointer mb-[15px];\n}\n\nul {\n  @apply w-fit m-0 pl-[30px] pr-0 py-0;\n}\n\n.active {\n  @apply text-[#6851ff] font-semibold;\n}\n\n.active::before {\n  @apply content-['\\2022'] text-[#6851ff] font-[bold] inline-block w-[1em] ml-[-1em];\n}\n\n.nft {\n  @apply text-[#777679];\n}\n\n.nft-name {\n  @apply font-semibold text-black;\n  font-family: 'Inter';\n}\n\n.nft-list {\n  @apply overflow-auto max-h-[270px];\n}\n", "explanation": "This block is a CSS configuration file, likely for a Tailwind CSS project. It:\n\n* Imports Google Fonts (Inter) and sets up Tailwind CSS\n* Defines global variables for foreground and background colors with dark mode support\n* Styles HTML elements (e.g., `html`, `body`, `nav`, `ul`) using utility classes from Tailwind CSS.", "metadata": {"repo": "magiclabs/example-zyfi-zksync-paymaster", "file": "src/styles/globals.css", "chunk_number": 1, "total_chunks": 8}, "repository_explanation": "Here is a concise explanation:\n\n**Repository Name:** magiclabs/example-zyfi-zksync-paymaster\n\n**Purpose:** Example code for integrating ZyFi with ZkSync paymaster functionality.\n\n**Content:**\n\n* Code examples illustrating how to use ZyFi with ZkSync paymasters.\n* Possibly includes testing and deployment scripts.", "file_summary": "Here is a holistic summary of the file 'src/styles/globals.css':\n\n**Global Styles Configuration**\n\nThis CSS configuration file sets up global styles for a web application using Tailwind CSS. It imports Google Fonts, defines variables for foreground and background colors with dark mode support, and styles various HTML elements.\n\nThe file contains styles for multiple UI components, including:\n\n* Dropdown menus\n* Buttons (social login, API)\n* Forms (inputs, buttons)\n* Loading containers\n* Toast notifications\n* Card components (layout, typography, visuals)\n\nThe styles define layout, typography, colors, animations, and interactions like hover and active states for different screen sizes. The file provides a collection of pre-defined styles and animations to create consistent visual elements in the web application."}
{"code": ".nft:not(:last-child) {\n  @apply mb-2.5;\n}\n\n.cards-container {\n  @apply relative top-[30px] md:top-[-60px] lg:top-[-60px];\n}\n\n@media only screen and (max-width: 767px) {\n  .cards-container {\n    @apply mt-[-89px];\n  }\n}\n\n.network-dropdown {\n  @apply m-auto w-fit rounded-xl;\n}\n\n.active-network {\n  @apply border w-[264px] flex items-center cursor-pointer justify-between m-auto px-4 py-3 rounded-xl border-solid border-[#dddbe0] bg-[#fff];\n}\n\n.active-network::selection {\n  @apply bg-transparent;\n}\n\n.rotate {\n  @apply rotate-180;\n}\n\n.network-options {\n  @apply overflow-hidden w-fit border mx-auto my-[5px] px-0 py-[5px] rounded-xl border-solid border-[#dddbe0] bg-[#fff];\n}\n\n.network-dropdown-option {\n  @apply w-[264px] flex items-center justify-start transition-[0.1s] m-auto px-4 py-3 bg-[#fff];\n}\n\n.network-dropdown-option:hover {\n  @apply text-white cursor-pointer bg-[#6851ff];\n}\n\n.network-dropdown-option:active {\n  @apply opacity-50;\n}\n.magic-logo {\n  @apply mb-[15px] mx-0 text-center;\n}\n.demo-sub-header {", "explanation": "Here is a summary of the block's purpose and functionality:\n\n**Styling a dropdown network menu**\n\nThis code defines styles for a network dropdown menu, including:\n\n* Spacing and layout rules\n* Active network button styles\n* Option list styles (including hover and active states)\n* Logo styling", "metadata": {"repo": "magiclabs/example-zyfi-zksync-paymaster", "file": "src/styles/globals.css", "chunk_number": 2, "total_chunks": 8}, "repository_explanation": "Here is a concise explanation:\n\n**Repository Name:** magiclabs/example-zyfi-zksync-paymaster\n\n**Purpose:** Example code for integrating ZyFi with ZkSync paymaster functionality.\n\n**Content:**\n\n* Code examples illustrating how to use ZyFi with ZkSync paymasters.\n* Possibly includes testing and deployment scripts.", "file_summary": "Here is a holistic summary of the file 'src/styles/globals.css':\n\n**Global Styles Configuration**\n\nThis CSS configuration file sets up global styles for a web application using Tailwind CSS. It imports Google Fonts, defines variables for foreground and background colors with dark mode support, and styles various HTML elements.\n\nThe file contains styles for multiple UI components, including:\n\n* Dropdown menus\n* Buttons (social login, API)\n* Forms (inputs, buttons)\n* Loading containers\n* Toast notifications\n* Card components (layout, typography, visuals)\n\nThe styles define layout, typography, colors, animations, and interactions like hover and active states for different screen sizes. The file provides a collection of pre-defined styles and animations to create consistent visual elements in the web application."}
{"code": "  @apply text-[rgba(255,255,255,0.5)] text-xl font-normal m-0;\n  font-family: monospace;\n}\n\n.home-page {\n  @apply flex flex-col justify-center items-center min-h-screen relative bg-[length:100vw_320px] bg-no-repeat;\n}\n\n.login-page {\n  @apply flex flex-col items-center min-h-screen bg-gray-300;\n}\n.login-method-grid {\n  @apply max-w-[100%] grid-rows-3 gap-5 p-4 mt-8;\n}\n\n.login-method-grid-item-container {\n  @apply flex flex-col items-center justify-center;\n}\n\n.login-button {\n  @apply w-full h-12 text-white font-semibold text-base leading-6 transition-[0.1s] text-center transition-[0.1s] m-auto px-2 py-3 rounded-[300px] border-[none];\n  background: #8271f3;\n}\n\n.login-button:disabled {\n  background: #a799ff;\n}\n\n.login-button:hover:enabled {\n  @apply cursor-pointer;\n  background: linear-gradient(0deg, rgba(0, 0, 0, 0.05), rgba(0, 0, 0, 0.05)), #a799ff;\n}\n.login-button:active:enabled {\n  @apply opacity-50 cursor-pointer scale-[0.99];\n  background: #a799ff;\n}\n\n.links {", "explanation": "**Summary**\n\nThis block appears to be a collection of CSS styles using Tailwind CSS classes. It defines various layouts, font styles, and animations for UI elements on different pages (home page, login page) and specific components within those pages (login button, grid containers). The styles cover aspects such as typography, spacing, colors, and interactions like hover and active states.", "metadata": {"repo": "magiclabs/example-zyfi-zksync-paymaster", "file": "src/styles/globals.css", "chunk_number": 3, "total_chunks": 8}, "repository_explanation": "Here is a concise explanation:\n\n**Repository Name:** magiclabs/example-zyfi-zksync-paymaster\n\n**Purpose:** Example code for integrating ZyFi with ZkSync paymaster functionality.\n\n**Content:**\n\n* Code examples illustrating how to use ZyFi with ZkSync paymasters.\n* Possibly includes testing and deployment scripts.", "file_summary": "Here is a holistic summary of the file 'src/styles/globals.css':\n\n**Global Styles Configuration**\n\nThis CSS configuration file sets up global styles for a web application using Tailwind CSS. It imports Google Fonts, defines variables for foreground and background colors with dark mode support, and styles various HTML elements.\n\nThe file contains styles for multiple UI components, including:\n\n* Dropdown menus\n* Buttons (social login, API)\n* Forms (inputs, buttons)\n* Loading containers\n* Toast notifications\n* Card components (layout, typography, visuals)\n\nThe styles define layout, typography, colors, animations, and interactions like hover and active states for different screen sizes. The file provides a collection of pre-defined styles and animations to create consistent visual elements in the web application."}
{"code": "  @apply flex justify-center mx-auto mt-5 text-sm mb-3 font-semibold text-white;\n}\n.link {\n  @apply transition-[0.1s] px-[30px] py-0;\n}\n\n@media only screen and (max-width: 420px) {\n  .link {\n    @apply px-[15px] py-0;\n  }\n}\n@media only screen and (max-width: 320px) {\n  .link {\n    @apply px-[5px] py-0;\n  }\n}\n\n.link > a {\n  @apply cursor-pointer;\n}\n.link-divider {\n  @apply w-px h-5;\n}\n\n.footer-links {\n  @apply flex items-center absolute w-full mt-[30px] mb-0 mx-auto bottom-10;\n}\n.wallet-method-container {\n  @apply text-left;\n}\n\n.wallet-method {\n  @apply w-fit text-[#522fd4] bg-[#edebff] text-base cursor-pointer font-medium transition-[0.1s] h-8 px-3 py-1.5 rounded-[32px] border-[none];\n  font-family: monospace;\n}\n\n.wallet-method:hover:enabled {\n  background: linear-gradient(0deg, rgba(0, 0, 0, 0.05), rgba(0, 0, 0, 0.05)), #edebff;\n  background-blend-mode: color-burn, normal;\n}\n\n.wallet-method:active:enabled {\n  @apply opacity-50 scale-[0.99];\n  background: linear-gradient(0deg, rgba(0, 0, 0, 0.05), rgba(0, 0, 0, 0.05)), #edebff;", "explanation": "Here is a summary of the purpose and functionality:\n\n**Styles for UI Components**\n\nThis block contains styles for various HTML elements, including links, footers, wallet methods, and link dividers. It defines layout, typography, colors, and animations for each component, with responsive design adjustments for different screen sizes.", "metadata": {"repo": "magiclabs/example-zyfi-zksync-paymaster", "file": "src/styles/globals.css", "chunk_number": 4, "total_chunks": 8}, "repository_explanation": "Here is a concise explanation:\n\n**Repository Name:** magiclabs/example-zyfi-zksync-paymaster\n\n**Purpose:** Example code for integrating ZyFi with ZkSync paymaster functionality.\n\n**Content:**\n\n* Code examples illustrating how to use ZyFi with ZkSync paymasters.\n* Possibly includes testing and deployment scripts.", "file_summary": "Here is a holistic summary of the file 'src/styles/globals.css':\n\n**Global Styles Configuration**\n\nThis CSS configuration file sets up global styles for a web application using Tailwind CSS. It imports Google Fonts, defines variables for foreground and background colors with dark mode support, and styles various HTML elements.\n\nThe file contains styles for multiple UI components, including:\n\n* Dropdown menus\n* Buttons (social login, API)\n* Forms (inputs, buttons)\n* Loading containers\n* Toast notifications\n* Card components (layout, typography, visuals)\n\nThe styles define layout, typography, colors, animations, and interactions like hover and active states for different screen sizes. The file provides a collection of pre-defined styles and animations to create consistent visual elements in the web application."}
{"code": "}\n.wallet-method-desc {\n  @apply text-[#77767a] text-left text-sm mt-2.5;\n}\n\n.form-input {\n  @apply box-border flex flex-row items-center w-full h-12 border text-base leading-6 text-[#18171a] mb-[15px] px-4 py-3 rounded-[10px] border-solid border-[#dddbe0];\n  background: #ffffff;\n}\n\n.form-input::placeholder {\n  color: #77767a;\n}\n\n.form-button {\n  @apply flex flex-row justify-center items-center w-full h-12 text-[#522fd4] font-semibold text-base leading-6 transition-[0.1s] px-6 py-3 rounded-[300px] border-[none] bg-[#edebff];\n}\n\n.form-button:disabled {\n  @apply opacity-50;\n}\n\n.form-button:hover:enabled {\n  @apply cursor-pointer;\n  background: linear-gradient(0deg, rgba(0, 0, 0, 0.05), rgba(0, 0, 0, 0.05)), #edebff;\n}\n.form-button:active:enabled {\n  @apply opacity-50 scale-[0.99];\n  background: linear-gradient(0deg, rgba(0, 0, 0, 0.05), rgba(0, 0, 0, 0.05)), #edebff;\n}\n\n.loading-container {\n  @apply w-[50px] text-center flex items-center justify-center cursor-default;\n}\n.loading {\n  @apply cursor-default animate-spin;\n}\n", "explanation": "Here is a summary of the block's purpose and functionality:\n\n**CSS Styles**\n\nThis block defines styles for various UI components, including:\n* A wallet method description\n* Form inputs (text fields)\n* Form buttons (with hover and active states)\n* A loading container (with a spinning animation)", "metadata": {"repo": "magiclabs/example-zyfi-zksync-paymaster", "file": "src/styles/globals.css", "chunk_number": 5, "total_chunks": 8}, "repository_explanation": "Here is a concise explanation:\n\n**Repository Name:** magiclabs/example-zyfi-zksync-paymaster\n\n**Purpose:** Example code for integrating ZyFi with ZkSync paymaster functionality.\n\n**Content:**\n\n* Code examples illustrating how to use ZyFi with ZkSync paymasters.\n* Possibly includes testing and deployment scripts.", "file_summary": "Here is a holistic summary of the file 'src/styles/globals.css':\n\n**Global Styles Configuration**\n\nThis CSS configuration file sets up global styles for a web application using Tailwind CSS. It imports Google Fonts, defines variables for foreground and background colors with dark mode support, and styles various HTML elements.\n\nThe file contains styles for multiple UI components, including:\n\n* Dropdown menus\n* Buttons (social login, API)\n* Forms (inputs, buttons)\n* Loading containers\n* Toast notifications\n* Card components (layout, typography, visuals)\n\nThe styles define layout, typography, colors, animations, and interactions like hover and active states for different screen sizes. The file provides a collection of pre-defined styles and animations to create consistent visual elements in the web application."}
{"code": "@keyframes rotation {\n  0% {\n    transform: rotate(0);\n  }\n  100% {\n    transform: rotate(360deg);\n  }\n}\n\n.card {\n  @apply w-[344px] flex flex-col shadow-[0px_4px_24px_rgba(49,49,49,0.1)] mt-0 mb-[27px] mx-auto px-6 py-8 rounded-2xl bg-[#ffffff];\n}\n\n.card-header {\n  @apply text-xl font-semibold text-left mt-0 mb-[25px];\n}\n.card-label-container {\n  @apply flex items-center justify-between mb-3;\n}\n\n.card-label {\n  @apply text-sm font-medium cursor-pointer;\n}\n.toast {\n  @apply fixed w-fit text-white font-medium shadow-[4px_8px_20px_rgba(0,0,0,0.15)] mx-auto my-0 px-4 py-2 rounded-[10px] top-[30px] inset-x-0 bg-[#00875f];\n}\n\n.action-button {\n  @apply font-semibold text-[#6851ff] cursor-pointer transition-[0.1s];\n}\n.disconnect-button {\n  @apply font-semibold text-[#d43100] cursor-pointer transition-[0.1s];\n}\n.action-button:hover,\n.disconnect-button:hover {\n  @apply opacity-70;\n}\n.action-button:active,\n.disconnect-button:active {\n  @apply scale-[0.98];\n}\n.code {\n  @apply text-base text-left p-2.5 rounded-[10px];", "explanation": "**Summary**\n\nThis block appears to be a collection of CSS styles and animations using the TailwindCSS framework.\n\n**Key Components:**\n\n1. A keyframe animation for rotating elements.\n2. Styles for a \"card\" component, including layout, typography, and visuals.\n3. Styles for specific card components (header, label container, label).\n4. Styles for a toast notification element.\n5. Styles for action and disconnect buttons, including hover and active effects.\n\n**Functionality**\n\nThis code provides pre-defined styles and animations that can be used to create consistent visual elements in a web application.", "metadata": {"repo": "magiclabs/example-zyfi-zksync-paymaster", "file": "src/styles/globals.css", "chunk_number": 6, "total_chunks": 8}, "repository_explanation": "Here is a concise explanation:\n\n**Repository Name:** magiclabs/example-zyfi-zksync-paymaster\n\n**Purpose:** Example code for integrating ZyFi with ZkSync paymaster functionality.\n\n**Content:**\n\n* Code examples illustrating how to use ZyFi with ZkSync paymasters.\n* Possibly includes testing and deployment scripts.", "file_summary": "Here is a holistic summary of the file 'src/styles/globals.css':\n\n**Global Styles Configuration**\n\nThis CSS configuration file sets up global styles for a web application using Tailwind CSS. It imports Google Fonts, defines variables for foreground and background colors with dark mode support, and styles various HTML elements.\n\nThe file contains styles for multiple UI components, including:\n\n* Dropdown menus\n* Buttons (social login, API)\n* Forms (inputs, buttons)\n* Loading containers\n* Toast notifications\n* Card components (layout, typography, visuals)\n\nThe styles define layout, typography, colors, animations, and interactions like hover and active states for different screen sizes. The file provides a collection of pre-defined styles and animations to create consistent visual elements in the web application."}
{"code": "  font-family: monospace;\n  background: #f8f8fa;\n  word-wrap: break-word;\n}\n.error {\n  @apply self-start text-xs font-semibold text-red-700 justify-self-start;\n}\n.divider {\n  @apply mx-0 my-[15px] border-b-[#ededf3] border-b border-solid;\n}\n.flex-row {\n  @apply flex items-center;\n}\n.green-dot {\n  @apply h-1.5 w-1.5 bg-[#00cc8f] mr-2.5 rounded-[50%];\n}\n.connected {\n  @apply text-base mx-0 my-[5px];\n}\na {\n  all: unset;\n}\n\n.app-header-container {\n  @apply block w-full drop-shadow-[0_35px_35px_rgba(0,0,0,0.25)] min-h-[40%] flex-col gap-2.5 p-8 items-center bg-[url('/login_bg.png')] bg-cover bg-no-repeat pb-20;\n  text-align: -webkit-center;\n}\n\n.redirect-container {\n  @apply flex flex-col items-center h-screen bg-center bg-cover bg-no-repeat bg-[url('/redirect_bg.png')];\n}\n\n.redirect-card {\n  @apply bg-[#F8F8FA] rounded-[10px] shadow-[0px_4px_24px_rgba(49,49,49,0.1)] p-2 m-12;\n}\n\n.social-login-button {", "explanation": "Here is a concise summary of the purpose and functionality of each block:\n\n* Styles for various UI components (e.g. error messages, dividers, green dots)\n\t+ Define layout, typography, and visual styles for individual elements\n* `.app-header-container`:\n\t+ Styling for a header container with background image and drop shadow\n* `.redirect-container`:\n\t+ Styling for a redirect page container with background image\n* `.redirect-card`:\n\t+ Styling for a card component used in the redirect page", "metadata": {"repo": "magiclabs/example-zyfi-zksync-paymaster", "file": "src/styles/globals.css", "chunk_number": 7, "total_chunks": 8}, "repository_explanation": "Here is a concise explanation:\n\n**Repository Name:** magiclabs/example-zyfi-zksync-paymaster\n\n**Purpose:** Example code for integrating ZyFi with ZkSync paymaster functionality.\n\n**Content:**\n\n* Code examples illustrating how to use ZyFi with ZkSync paymasters.\n* Possibly includes testing and deployment scripts.", "file_summary": "Here is a holistic summary of the file 'src/styles/globals.css':\n\n**Global Styles Configuration**\n\nThis CSS configuration file sets up global styles for a web application using Tailwind CSS. It imports Google Fonts, defines variables for foreground and background colors with dark mode support, and styles various HTML elements.\n\nThe file contains styles for multiple UI components, including:\n\n* Dropdown menus\n* Buttons (social login, API)\n* Forms (inputs, buttons)\n* Loading containers\n* Toast notifications\n* Card components (layout, typography, visuals)\n\nThe styles define layout, typography, colors, animations, and interactions like hover and active states for different screen sizes. The file provides a collection of pre-defined styles and animations to create consistent visual elements in the web application."}
{"code": "  @apply flex flex-row min-w-[296px] h-12 text-[#3C4043] transition-[0.1s] px-6 py-3 rounded-[300px] bg-[#ffffff] border-2 border-[#DADCE0] relative top-16;\n}\n\n.social-login-button:disabled {\n  @apply opacity-50;\n}\n\n.social-login-button:hover:enabled {\n  @apply cursor-pointer;\n  background: linear-gradient(0deg, rgba(0, 0, 0, 0.05), rgba(0, 0, 0, 0.05)), #ffffff;\n}\n.social-login-button:active:enabled {\n  @apply opacity-50 scale-[0.99];\n  background: linear-gradient(0deg, rgba(0, 0, 0, 0.05), rgba(0, 0, 0, 0.05)), #ffffff;\n}\n\n.api-button {\n  @apply bg-[#6844bc] text-[#FFFFFF] flex w-[280px] justify-center items-center h-12 font-semibold text-base leading-6 transition-[0.1s] px-6 py-3 rounded-[300px] border-[none];\n}\n", "explanation": "Here is a summary of the purpose and functionality:\n\nThis block defines styles for two types of buttons: `.social-login-button` and `.api-button`. The social login button has hover, active, and disabled states, while the API button has a fixed style with background color, text color, and padding.", "metadata": {"repo": "magiclabs/example-zyfi-zksync-paymaster", "file": "src/styles/globals.css", "chunk_number": 8, "total_chunks": 8}, "repository_explanation": "Here is a concise explanation:\n\n**Repository Name:** magiclabs/example-zyfi-zksync-paymaster\n\n**Purpose:** Example code for integrating ZyFi with ZkSync paymaster functionality.\n\n**Content:**\n\n* Code examples illustrating how to use ZyFi with ZkSync paymasters.\n* Possibly includes testing and deployment scripts.", "file_summary": "Here is a holistic summary of the file 'src/styles/globals.css':\n\n**Global Styles Configuration**\n\nThis CSS configuration file sets up global styles for a web application using Tailwind CSS. It imports Google Fonts, defines variables for foreground and background colors with dark mode support, and styles various HTML elements.\n\nThe file contains styles for multiple UI components, including:\n\n* Dropdown menus\n* Buttons (social login, API)\n* Forms (inputs, buttons)\n* Loading containers\n* Toast notifications\n* Card components (layout, typography, visuals)\n\nThe styles define layout, typography, colors, animations, and interactions like hover and active states for different screen sizes. The file provides a collection of pre-defined styles and animations to create consistent visual elements in the web application."}
{"code": "import { Magic } from './types';\nimport { Dispatch, SetStateAction } from 'react';\n\nexport type LoginMethod = 'EMAIL' | 'SMS' | 'SOCIAL' | 'FORM';\n\nexport const logout = async (setToken: Dispatch<SetStateAction<string>>, magic: Magic | null) => {\n  if (await magic?.user.isLoggedIn()) {\n    await magic?.user.logout();\n  }\n  localStorage.setItem('token', '');\n  localStorage.setItem('user', '');\n  setToken('');\n};\n\nexport const saveUserInfo = (token: string, loginMethod: LoginMethod, userAddress: string) => {\n  localStorage.setItem('token', token);\n  localStorage.setItem('isAuthLoading', 'false');\n  localStorage.setItem('loginMethod', loginMethod);\n  localStorage.setItem('user', userAddress);\n};\n", "explanation": "Here is a concise summary of the block's purpose and functionality:\n\n**Purpose:** Handle authentication-related operations (logout and saving user info).\n\n**Functionality:**\n\n1. `logout`: Logs out current user, clears local storage, and updates token state.\n2. `saveUserInfo`: Saves user token, login method, and address to local storage.", "metadata": {"repo": "magiclabs/example-zyfi-zksync-paymaster", "file": "src/utils/common.ts", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise explanation:\n\n**Repository Name:** magiclabs/example-zyfi-zksync-paymaster\n\n**Purpose:** Example code for integrating ZyFi with ZkSync paymaster functionality.\n\n**Content:**\n\n* Code examples illustrating how to use ZyFi with ZkSync paymasters.\n* Possibly includes testing and deployment scripts.", "file_summary": "Here is a concise summary of the file 'src/utils/common.ts':\n\n**Common Utilities**\n\nHandles authentication-related operations:\n\n* Logs out current user and clears local storage\n* Saves user info (token, login method, and address) to local storage"}
{"code": "export enum Network {\n  POLYGON_AMOY = 'polygon-amoy',\n  POLYGON = 'polygon',\n  ETHEREUM_SEPOLIA = 'ethereum-sepolia',\n  ETHEREUM = 'ethereum',\n  ZKSYNC = 'zksync',\n  ZKSYNC_SEPOLIA = 'zksync-sepolia',\n}\n\nexport const getNetworkUrl = () => {\n  switch (process.env.NEXT_PUBLIC_BLOCKCHAIN_NETWORK) {\n    case Network.POLYGON:\n      return 'https://polygon-rpc.com/';\n    case Network.POLYGON_AMOY:\n      return 'https://rpc-amoy.polygon.technology/';\n    case Network.ETHEREUM_SEPOLIA:\n      return 'https://eth-sepolia.g.alchemy.com/v2/fYFybLQFR9Zr2GCRcgALmAktStFKr0i0';\n    case Network.ETHEREUM:\n      return 'https://eth-mainnet.g.alchemy.com/v2/fYFybLQFR9Zr2GCRcgALmAktStFKr0i0';\n    case Network.ZKSYNC:\n      return 'https://mainnet.era.zksync.io';\n    case Network.ZKSYNC_SEPOLIA:\n      return 'https://sepolia.era.zksync.dev';\n    default:\n      throw new Error('Network not supported');\n  }\n};\n\nexport const getChainId = () => {\n  switch (process.env.NEXT_PUBLIC_BLOCKCHAIN_NETWORK) {\n    case Network.POLYGON:", "explanation": "Here is a concise summary:\n\n**Purpose:** Define network configurations for blockchain interactions.\n\n**Functionality:** Provides an enumeration of supported networks (`Network` enum) and two utility functions:\n\n* `getNetworkUrl`: Returns the URL of the specified network's RPC endpoint based on the environment variable `NEXT_PUBLIC_BLOCKCHAIN_NETWORK`.\n* `getChainId`: Not implemented in this code snippet.", "metadata": {"repo": "magiclabs/example-zyfi-zksync-paymaster", "file": "src/utils/network.ts", "chunk_number": 1, "total_chunks": 4}, "repository_explanation": "Here is a concise explanation:\n\n**Repository Name:** magiclabs/example-zyfi-zksync-paymaster\n\n**Purpose:** Example code for integrating ZyFi with ZkSync paymaster functionality.\n\n**Content:**\n\n* Code examples illustrating how to use ZyFi with ZkSync paymasters.\n* Possibly includes testing and deployment scripts.", "file_summary": "Here is a concise summary of the file 'src/utils/network.ts':\n\n**Summary:** Defines network configurations and utility functions for blockchain interactions.\n\n**Key Functions:**\n\n* `getNetworkUrl`: Returns RPC endpoint URL based on `NEXT_PUBLIC_BLOCKCHAIN_NETWORK` environment variable.\n* `getChainId`: Not implemented (purpose unknown).\n* `getNetworkToken`, `getFaucetUrl`, and `getNetworkName`: Return network-specific details (token symbol, faucet URL, and name) using a switch statement.\n* `getBlockExplorerLink`: Returns block explorer URL based on address and `NEXT_PUBLIC_BLOCKCHAIN_NETWORK` environment variable.\n* `getSepoliaExplorerLink`: Maps an address to its corresponding Sepolia explorer link.\n\n**Purpose:** Provides utility functions for interacting with various blockchain networks."}
{"code": "      return 137;\n    case Network.POLYGON_AMOY:\n      return 80002;\n    case Network.ETHEREUM_SEPOLIA:\n      return 11155111;\n    case Network.ZKSYNC:\n      return 324;\n    case Network.ZKSYNC_SEPOLIA:\n      return 300;\n    case Network.ETHEREUM:\n      return 1;\n  }\n};\n\nexport const getNetworkToken = () => {\n  switch (process.env.NEXT_PUBLIC_BLOCKCHAIN_NETWORK) {\n    case Network.POLYGON_AMOY:\n    case Network.POLYGON:\n      return 'MATIC';\n    case Network.ETHEREUM:\n    case Network.ETHEREUM_SEPOLIA:\n    case Network.ZKSYNC:\n    case Network.ZKSYNC_SEPOLIA:\n      return 'ETH';\n  }\n};\n\nexport const getFaucetUrl = () => {\n  switch (process.env.NEXT_PUBLIC_BLOCKCHAIN_NETWORK) {\n    case Network.POLYGON_AMOY:\n      return 'https://faucet.polygon.technology/';\n    case Network.ETHEREUM_SEPOLIA:\n      return 'https://sepoliafaucet.com/';\n    case Network.ZKSYNC_SEPOLIA:\n      return 'https://faucet.quicknode.com/ethereum/sepolia'\n  }\n};\n\nexport const getNetworkName = () => {", "explanation": "Here is a summary of the purpose and functionality of this block:\n\n**Purpose:** This code snippet provides functions to determine specific blockchain network details based on an environment variable `NEXT_PUBLIC_BLOCKCHAIN_NETWORK`.\n\n**Functionality:**\n\n* `getNetworkToken`: Returns the token symbol for a given blockchain network (e.g. \"MATIC\" or \"ETH\").\n* `getFaucetUrl`: Returns the faucet URL for a given blockchain network.\n* `getNetworkName` (not fully implemented): Intended to return the name of the blockchain network, but only a placeholder function is provided.\n\nThese functions use a switch statement to evaluate the environment variable and return the corresponding value.", "metadata": {"repo": "magiclabs/example-zyfi-zksync-paymaster", "file": "src/utils/network.ts", "chunk_number": 2, "total_chunks": 4}, "repository_explanation": "Here is a concise explanation:\n\n**Repository Name:** magiclabs/example-zyfi-zksync-paymaster\n\n**Purpose:** Example code for integrating ZyFi with ZkSync paymaster functionality.\n\n**Content:**\n\n* Code examples illustrating how to use ZyFi with ZkSync paymasters.\n* Possibly includes testing and deployment scripts.", "file_summary": "Here is a concise summary of the file 'src/utils/network.ts':\n\n**Summary:** Defines network configurations and utility functions for blockchain interactions.\n\n**Key Functions:**\n\n* `getNetworkUrl`: Returns RPC endpoint URL based on `NEXT_PUBLIC_BLOCKCHAIN_NETWORK` environment variable.\n* `getChainId`: Not implemented (purpose unknown).\n* `getNetworkToken`, `getFaucetUrl`, and `getNetworkName`: Return network-specific details (token symbol, faucet URL, and name) using a switch statement.\n* `getBlockExplorerLink`: Returns block explorer URL based on address and `NEXT_PUBLIC_BLOCKCHAIN_NETWORK` environment variable.\n* `getSepoliaExplorerLink`: Maps an address to its corresponding Sepolia explorer link.\n\n**Purpose:** Provides utility functions for interacting with various blockchain networks."}
{"code": "  switch (process.env.NEXT_PUBLIC_BLOCKCHAIN_NETWORK) {\n    case Network.POLYGON:\n      return 'Polygon (Mainnet)';\n    case Network.POLYGON_AMOY:\n      return 'Polygon (Amoy)';\n    case Network.ETHEREUM_SEPOLIA:\n      return 'Ethereum (Sepolia)';\n    case Network.ETHEREUM:\n      return 'Ethereum (Mainnet)';\n    case Network.ZKSYNC:\n      return 'zkSync (Mainnet)';\n    case Network.ZKSYNC_SEPOLIA:\n      return 'zkSync (Sepolia)';\n  }\n};\n\nexport const getBlockExplorer = (address: string) => {\n  switch (process.env.NEXT_PUBLIC_BLOCKCHAIN_NETWORK) {\n    case Network.POLYGON:\n      return `https://polygonscan.com/address/${address}`;\n    case Network.POLYGON_AMOY:\n      return `https://www.oklink.com/amoy/address/${address}`;\n    case Network.ETHEREUM:\n      return `https://etherscan.io/address/${address}`;\n    case Network.ETHEREUM_SEPOLIA:\n      return `https://sepolia.etherscan.io/address/${address}`;\n    case Network.ZKSYNC:\n      return `https://explorer.zksync.io/address/${address}`;", "explanation": "**Purpose:** Returns a string describing the blockchain network based on an environment variable.\n\n**Functionality:** It uses a switch statement to determine which block explorer URL to return for a given address, based on the value of `process.env.NEXT_PUBLIC_BLOCKCHAIN_NETWORK`. \n\nFor example: If the environment variable is set to `Network.POLYGON`, it returns `'Polygon (Mainnet)'` and also provides a link to the corresponding block explorer (`https://polygonscan.com/address/${address}`).", "metadata": {"repo": "magiclabs/example-zyfi-zksync-paymaster", "file": "src/utils/network.ts", "chunk_number": 3, "total_chunks": 4}, "repository_explanation": "Here is a concise explanation:\n\n**Repository Name:** magiclabs/example-zyfi-zksync-paymaster\n\n**Purpose:** Example code for integrating ZyFi with ZkSync paymaster functionality.\n\n**Content:**\n\n* Code examples illustrating how to use ZyFi with ZkSync paymasters.\n* Possibly includes testing and deployment scripts.", "file_summary": "Here is a concise summary of the file 'src/utils/network.ts':\n\n**Summary:** Defines network configurations and utility functions for blockchain interactions.\n\n**Key Functions:**\n\n* `getNetworkUrl`: Returns RPC endpoint URL based on `NEXT_PUBLIC_BLOCKCHAIN_NETWORK` environment variable.\n* `getChainId`: Not implemented (purpose unknown).\n* `getNetworkToken`, `getFaucetUrl`, and `getNetworkName`: Return network-specific details (token symbol, faucet URL, and name) using a switch statement.\n* `getBlockExplorerLink`: Returns block explorer URL based on address and `NEXT_PUBLIC_BLOCKCHAIN_NETWORK` environment variable.\n* `getSepoliaExplorerLink`: Maps an address to its corresponding Sepolia explorer link.\n\n**Purpose:** Provides utility functions for interacting with various blockchain networks."}
{"code": "    case Network.ZKSYNC_SEPOLIA:\n      return `https://sepolia.explorer.zksync.io/address/${address}`;\n  }\n};\n", "explanation": "**Purpose:** Returns a URL for accessing an address on ZkSync's Sepolia explorer.\n\n**Functionality:** Maps an address to its corresponding Sepolia explorer link.", "metadata": {"repo": "magiclabs/example-zyfi-zksync-paymaster", "file": "src/utils/network.ts", "chunk_number": 4, "total_chunks": 4}, "repository_explanation": "Here is a concise explanation:\n\n**Repository Name:** magiclabs/example-zyfi-zksync-paymaster\n\n**Purpose:** Example code for integrating ZyFi with ZkSync paymaster functionality.\n\n**Content:**\n\n* Code examples illustrating how to use ZyFi with ZkSync paymasters.\n* Possibly includes testing and deployment scripts.", "file_summary": "Here is a concise summary of the file 'src/utils/network.ts':\n\n**Summary:** Defines network configurations and utility functions for blockchain interactions.\n\n**Key Functions:**\n\n* `getNetworkUrl`: Returns RPC endpoint URL based on `NEXT_PUBLIC_BLOCKCHAIN_NETWORK` environment variable.\n* `getChainId`: Not implemented (purpose unknown).\n* `getNetworkToken`, `getFaucetUrl`, and `getNetworkName`: Return network-specific details (token symbol, faucet URL, and name) using a switch statement.\n* `getBlockExplorerLink`: Returns block explorer URL based on address and `NEXT_PUBLIC_BLOCKCHAIN_NETWORK` environment variable.\n* `getSepoliaExplorerLink`: Maps an address to its corresponding Sepolia explorer link.\n\n**Purpose:** Provides utility functions for interacting with various blockchain networks."}
{"code": "import { toast } from 'react-toastify'\nconst showToast = ({\n  message,\n  type = 'default',\n}: {\n  message: string\n  type: 'success' | 'error' | 'info' | 'default' | 'warning'\n}) => {\n  switch (type) {\n  case 'default':\n    toast(message, {\n      position: 'top-center',\n      autoClose: 3000,\n      hideProgressBar: false,\n      closeOnClick: true,\n      pauseOnHover: true,\n      draggable: true,\n      progress: undefined,\n      theme: 'light',\n    })\n    break\n  case 'info':\n    toast.info(message, {\n      position: 'top-center',\n      autoClose: 3000,\n      hideProgressBar: false,\n      closeOnClick: true,\n      pauseOnHover: true,\n      draggable: true,\n      progress: undefined,\n      theme: 'light',\n    })\n    break\n  case 'success':\n    toast.success(message, {\n      position: 'top-center',\n      autoClose: 3000,\n      hideProgressBar: false,\n      closeOnClick: true,\n      pauseOnHover: true,\n      draggable: true,\n      progress: undefined,\n      theme: 'light',\n    })\n    break\n  case 'warning':\n    toast.warn(message, {", "explanation": "Here is a concise summary:\n\n**Purpose:** Display notifications using React Toastify.\n\n**Functionality:** A reusable function (`showToast`) that takes a message and type as input, then displays a toast notification with customizable settings (position, duration, theme) based on the provided type (default, info, success, warning, or error).", "metadata": {"repo": "magiclabs/example-zyfi-zksync-paymaster", "file": "src/utils/showToast.ts", "chunk_number": 1, "total_chunks": 2}, "repository_explanation": "Here is a concise explanation:\n\n**Repository Name:** magiclabs/example-zyfi-zksync-paymaster\n\n**Purpose:** Example code for integrating ZyFi with ZkSync paymaster functionality.\n\n**Content:**\n\n* Code examples illustrating how to use ZyFi with ZkSync paymasters.\n* Possibly includes testing and deployment scripts.", "file_summary": "Here is a concise summary of the file 'src/utils/showToast.ts':\n\n**ShowToast utility:**\nDisplays notifications using React Toastify, providing a reusable function (`showToast`) to show customizable toast messages with types (default, info, success, warning, error) for user feedback and visual cues."}
{"code": "      position: 'top-center',\n      autoClose: 3000,\n      hideProgressBar: false,\n      closeOnClick: true,\n      pauseOnHover: true,\n      draggable: true,\n      progress: undefined,\n      theme: 'light',\n    })\n    break\n  case 'error':\n    toast.error(message, {\n      position: 'top-center',\n      autoClose: 3000,\n      hideProgressBar: false,\n      closeOnClick: true,\n      pauseOnHover: true,\n      draggable: true,\n      progress: undefined,\n      theme: 'light',\n    })\n    break\n  }\n}\n\nexport default showToast\n", "explanation": "**Functionality:** Displays a toast notification with customizable settings.\n\n**Purpose:** Show informative messages or errors in an application, providing user feedback and visual cues.", "metadata": {"repo": "magiclabs/example-zyfi-zksync-paymaster", "file": "src/utils/showToast.ts", "chunk_number": 2, "total_chunks": 2}, "repository_explanation": "Here is a concise explanation:\n\n**Repository Name:** magiclabs/example-zyfi-zksync-paymaster\n\n**Purpose:** Example code for integrating ZyFi with ZkSync paymaster functionality.\n\n**Content:**\n\n* Code examples illustrating how to use ZyFi with ZkSync paymasters.\n* Possibly includes testing and deployment scripts.", "file_summary": "Here is a concise summary of the file 'src/utils/showToast.ts':\n\n**ShowToast utility:**\nDisplays notifications using React Toastify, providing a reusable function (`showToast`) to show customizable toast messages with types (default, info, success, warning, error) for user feedback and visual cues."}
{"code": "import { Dispatch, SetStateAction } from 'react'\n\nexport type LoginProps = {\n  token: string\n  setToken: Dispatch<SetStateAction<string>>\n}\n\nexport type { Magic } from '../components/magic/MagicProvider'\n", "explanation": "Here is a summary of the purpose and functionality:\n\n**Login Component**\n\nThis block defines a `LoginProps` interface, which represents the props that a login component expects. It includes a `token` value and a `setToken` function to update it. This suggests that the component is responsible for managing user authentication tokens.", "metadata": {"repo": "magiclabs/example-zyfi-zksync-paymaster", "file": "src/utils/types.ts", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise explanation:\n\n**Repository Name:** magiclabs/example-zyfi-zksync-paymaster\n\n**Purpose:** Example code for integrating ZyFi with ZkSync paymaster functionality.\n\n**Content:**\n\n* Code examples illustrating how to use ZyFi with ZkSync paymasters.\n* Possibly includes testing and deployment scripts.", "file_summary": "Here's a concise summary of the file 'src/utils/types.ts':\n\n**Types Utilities**\n\n Defines reusable type interfaces, including LoginProps, which encapsulates token management functionality for authentication-related components."}
{"code": "/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  content: [\n    './src/pages/**/*.{js,ts,jsx,tsx,mdx}',\n    './src/components/**/*.{js,ts,jsx,tsx,mdx}',\n    './src/app/**/*.{js,ts,jsx,tsx,mdx}',\n  ],\n  theme: {\n    extend: {\n      backgroundImage: {\n        'gradient-radial': 'radial-gradient(var(--tw-gradient-stops))',\n        'gradient-conic': 'conic-gradient(from 180deg at 50% 50%, var(--tw-gradient-stops))',\n      },\n    },\n  },\n  plugins: [],\n};\n", "explanation": "This block is a Tailwind CSS configuration file.\n\n**Purpose:** Configures Tailwind CSS for a project.\n\n**Functionality:** Specifies where to look for CSS content, defines custom theme colors and gradients, and lists enabled plugins.", "metadata": {"repo": "magiclabs/example-zyfi-zksync-paymaster", "file": "tailwind.config.js", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise explanation:\n\n**Repository Name:** magiclabs/example-zyfi-zksync-paymaster\n\n**Purpose:** Example code for integrating ZyFi with ZkSync paymaster functionality.\n\n**Content:**\n\n* Code examples illustrating how to use ZyFi with ZkSync paymasters.\n* Possibly includes testing and deployment scripts.", "file_summary": "Here is a concise summary of the `tailwind.config.js` file:\n\n**Summary:** Configures Tailwind CSS for a project by specifying source locations, customizing theme styles, and enabling plugins."}
{"code": "{\n  \"compilerOptions\": {\n    \"target\": \"es5\",\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"allowJs\": true,\n    \"skipLibCheck\": true,\n    \"strict\": true,\n    \"forceConsistentCasingInFileNames\": true,\n    \"noEmit\": true,\n    \"esModuleInterop\": true,\n    \"module\": \"esnext\",\n    \"moduleResolution\": \"node\",\n    \"resolveJsonModule\": true,\n    \"isolatedModules\": true,\n    \"jsx\": \"preserve\",\n    \"incremental\": true,\n    \"paths\": {\n      \"@/*\": [\"./src/*\"]\n    }\n  },\n  \"include\": [\"next-env.d.ts\", \"**/*.ts\", \"**/*.tsx\"],\n  \"exclude\": [\"node_modules\"]\n}\n", "explanation": "This block is a configuration object for a TypeScript compiler, defining settings for:\n\n* Targeting ES5 syntax\n* Enabling JavaScript files and strict mode\n* Excluding library checks and emitting code\n* Resolving modules and ES modules\n* Including certain files and excluding others\n\nIn essence, it's a set of options for compiling and running TypeScript projects.", "metadata": {"repo": "magiclabs/example-zyfi-zksync-paymaster", "file": "tsconfig.json", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise explanation:\n\n**Repository Name:** magiclabs/example-zyfi-zksync-paymaster\n\n**Purpose:** Example code for integrating ZyFi with ZkSync paymaster functionality.\n\n**Content:**\n\n* Code examples illustrating how to use ZyFi with ZkSync paymasters.\n* Possibly includes testing and deployment scripts.", "file_summary": "Here is a concise summary:\n\n**tsconfig.json**: A configuration object for compiling TypeScript projects, enabling ES5 syntax, strict mode, and module resolution, with specific file inclusions and exclusions."}

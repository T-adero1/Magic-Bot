{"code": "REACT_APP_MAGIC_PUBLISHABLE_KEY=\nINLINE_RUNTIME_CHUNK=false", "explanation": "This block appears to contain environment variables for a React application:\n\n* `REACT_APP_MAGIC_PUBLISHABLE_KEY`: a publishable key for Magic, likely used for authentication or API calls.\n* `INLINE_RUNTIME_CHUNK`: a flag controlling how JavaScript files are loaded (inline or as separate chunks).", "metadata": {"repo": "magiclabs/example-chrome-extension", "file": ".env.example", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "This repository is an example Chrome extension built with Magic Labs. Its purpose is to demonstrate a basic Chrome extension.\n\nContent:\n\n* A `manifest.json` file defining the extension's metadata\n* A JavaScript file (`contentScript.js`) running in the context of web pages\n* A popup HTML file (`popup.html`) displaying an example UI\n\nThis repository serves as a starting point for developers to create and test their own Chrome extensions using Magic Labs.", "file_summary": "Here is a concise holistic summary of the file '.env.example':\n\nThis file contains environment variables for a React application, including a Magic publishable key for authentication/API calls and a flag controlling JavaScript file loading behavior."}
{"code": "# Quick Start Instructions\n\n```txt\n$ git clone https://github.com/magiclabs/example-chrome-extension.git\n$ cd example-chrome-extension\n$ mv .env.example .env // enter your Magic Publishable API key\n$ yarn install\n$ yarn build\n```\n\nScroll down to \"Running the App Locally\" for instructions on how to upload your extension to your browser.\n\n# Resources\n\nView the example code [**here**](https://github.com/magiclabs/example-chrome-extension).\n\nTry out the browser extension [**here**](https://chrome.google.com/webstore/detail/magic-chrome-extension/ealdjejebmabnecpgbahojanllhpjlef).\n\n# Introduction\n\nMaybe you want to allow users of your extension to have profiles, or maybe you want to charge for premuim features. This tutorial shows how you can integrate Magic passwordless authentication into a Chrome browser extension using React.\n", "explanation": "Here is a concise summary:\n\n**Purpose:** Quick start guide to setting up a Chrome browser extension with Magic passwordless authentication.\n\n**Functionality:**\n\n* Clone an example repository\n* Install dependencies and build the project\n* Instructions on how to upload the extension to the browser\n\nThis block provides a brief introduction and links to additional resources, including the example code and browser extension.", "metadata": {"repo": "magiclabs/example-chrome-extension", "file": "README.md", "chunk_number": 1, "total_chunks": 8}, "repository_explanation": "This repository is an example Chrome extension built with Magic Labs. Its purpose is to demonstrate a basic Chrome extension.\n\nContent:\n\n* A `manifest.json` file defining the extension's metadata\n* A JavaScript file (`contentScript.js`) running in the context of web pages\n* A popup HTML file (`popup.html`) displaying an example UI\n\nThis repository serves as a starting point for developers to create and test their own Chrome extensions using Magic Labs.", "file_summary": "Here is a concise summary of the file 'README.md':\n\n**Purpose:** Quick start guide to setting up a Chrome browser extension with Magic passwordless authentication, including instructions for testing and publishing.\n\n**Functionality:**\n\n* Configure and build a Chrome extension using Magic authentication\n* Test locally by uploading the built extension folder\n* Publish an existing browser extension app to the Chrome Web Store\n\nThis summary captures the main purpose and functionality of the file 'README.md', providing a quick overview of the steps involved in setting up, testing, and publishing a Chrome browser extension with Magic passwordless authentication."}
{"code": "After clicking the browser extension icon and then the \"login\" button, the user will be directed to a full-page tab to complete the auth flow. After that, clicking the browser extension will show the user authenticated!\n\n_Note: The new tab is required because if we had the login form inside the browser extension popup, as soon as the user navigated away to check their email for the link, the popup page would close and the auth flow would break._\n\n## File Structure\n\nOur application's file structure will look like this.\n\n```txt\n\u251c\u2500\u2500 .env\n\u251c\u2500\u2500 build\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 package.json\n\u251c\u2500\u2500 public\n\u2502   \u251c\u2500\u2500 icon-purple.png\n\u2502   \u251c\u2500\u2500 index.html\n\u2502   \u2514\u2500\u2500 manifest.json\n\u251c\u2500\u2500 src\n\u2502   \u251c\u2500\u2500 components\n\u2502   \u2502   \u251c\u2500\u2500 App.js\n\u2502   \u2502   \u251c\u2500\u2500 Loading.js\n\u2502   \u2502   \u251c\u2500\u2500 Login.js\n\u2502   \u2502   \u2514\u2500\u2500 Profile.js\n\u2502   \u251c\u2500\u2500 index.js\n\u2502   \u251c\u2500\u2500 magic.js\n\u2502   \u2514\u2500\u2500 styles.css\n\u2514\u2500\u2500 yarn.lock\n```\n\nThe folder that we will be uploading to Chrome will be `build`, which after you run `yarn build` will look something like this.\n\n```txt\n\u251c\u2500\u2500 build\n\u2502   \u251c\u2500\u2500 asset-manifest.json", "explanation": "**Purpose:** Browser extension authentication flow.\n\n**Functionality:**\n\n1. Clicking the browser extension icon opens a login page in a new tab.\n2. After completing the auth flow, clicking the icon shows user authenticated.\n\n**File Structure:** A detailed directory layout of the application's files and folders, including the `build` folder which is uploaded to Chrome after running `yarn build`.", "metadata": {"repo": "magiclabs/example-chrome-extension", "file": "README.md", "chunk_number": 2, "total_chunks": 8}, "repository_explanation": "This repository is an example Chrome extension built with Magic Labs. Its purpose is to demonstrate a basic Chrome extension.\n\nContent:\n\n* A `manifest.json` file defining the extension's metadata\n* A JavaScript file (`contentScript.js`) running in the context of web pages\n* A popup HTML file (`popup.html`) displaying an example UI\n\nThis repository serves as a starting point for developers to create and test their own Chrome extensions using Magic Labs.", "file_summary": "Here is a concise summary of the file 'README.md':\n\n**Purpose:** Quick start guide to setting up a Chrome browser extension with Magic passwordless authentication, including instructions for testing and publishing.\n\n**Functionality:**\n\n* Configure and build a Chrome extension using Magic authentication\n* Test locally by uploading the built extension folder\n* Publish an existing browser extension app to the Chrome Web Store\n\nThis summary captures the main purpose and functionality of the file 'README.md', providing a quick overview of the steps involved in setting up, testing, and publishing a Chrome browser extension with Magic passwordless authentication."}
{"code": "\u2502   \u251c\u2500\u2500 icon-purple.png\n\u2502   \u251c\u2500\u2500 index.html\n\u2502   \u251c\u2500\u2500 manifest.json\n\u2502   \u2514\u2500\u2500 static\n\u2502       \u251c\u2500\u2500 css\n\u2502       \u2502   \u251c\u2500\u2500 main.ee12e5fd.chunk.css\n\u2502       \u2502   \u2514\u2500\u2500 main.ee12e5fd.chunk.css.map\n\u2502       \u2514\u2500\u2500 js\n\u2502           \u251c\u2500\u2500 2.c16f79f9.chunk.js\n\u2502           \u251c\u2500\u2500 2.c16f79f9.chunk.js.LICENSE.txt\n\u2502           \u251c\u2500\u2500 2.c16f79f9.chunk.js.map\n\u2502           \u251c\u2500\u2500 main.bae666a1.chunk.js\n\u2502           \u251c\u2500\u2500 main.bae666a1.chunk.js.map\n\u2502           \u251c\u2500\u2500 runtime-main.33ea36a3.js\n\u2502           \u2514\u2500\u2500 runtime-main.33ea36a3.js.map\n```\n\n# Building the App\n\nThe Magic React app boilerplate will be taken from the `Hello World (React)` template using the `npx make-magic` command.\n\n```txt\n$ npx make-magic\nnpx: installed 1 in 1.472s\n\n\n \u2588\u2580\u2580 \u2588\u2580\u2588 \u2588\u2580\u2580 \u2584\u2580\u2588 \u2580\u2588\u2580 \u2588\u2580\u2580\n \u2588\u2584\u2584 \u2588\u2580\u2584 \u2588\u2588\u2584 \u2588\u2580\u2588  \u2588  \u2588\u2588\u2584\n\n \u2588\u2580\u2584\u2580\u2588 \u2584\u2580\u2588 \u2588\u2580\u2580 \u2588 \u2588\u2580\u2580\n \u2588 \u2580 \u2588 \u2588\u2580\u2588 \u2588\u2584\u2588 \u2588 \u2588\u2584\u2584\n\n \u2584\u2580\u2588 \u2588\u2580\u2588 \u2588\u2580\u2588\n \u2588\u2580\u2588 \u2588\u2580\u2580 \u2588\u2580\u2580\n\n\nRunning scaffold create-magic-app\n\n\u2714 What is your project named? \u00b7 example-electron\n\u2714 Choose a template: \u00b7 hello-world-react\n\u2714 Enter your Magic publishable API key: \u00b7 pk_test_...\n\u2714 Choose an NPM client: yarn\n```\n", "explanation": "**Summary**\n\nThis block appears to be a file directory listing, with accompanying build instructions for a React app using the `make-magic` command. The purpose is to create a new Magic React app boilerplate from a template, using npm and yarn as package managers.", "metadata": {"repo": "magiclabs/example-chrome-extension", "file": "README.md", "chunk_number": 3, "total_chunks": 8}, "repository_explanation": "This repository is an example Chrome extension built with Magic Labs. Its purpose is to demonstrate a basic Chrome extension.\n\nContent:\n\n* A `manifest.json` file defining the extension's metadata\n* A JavaScript file (`contentScript.js`) running in the context of web pages\n* A popup HTML file (`popup.html`) displaying an example UI\n\nThis repository serves as a starting point for developers to create and test their own Chrome extensions using Magic Labs.", "file_summary": "Here is a concise summary of the file 'README.md':\n\n**Purpose:** Quick start guide to setting up a Chrome browser extension with Magic passwordless authentication, including instructions for testing and publishing.\n\n**Functionality:**\n\n* Configure and build a Chrome extension using Magic authentication\n* Test locally by uploading the built extension folder\n* Publish an existing browser extension app to the Chrome Web Store\n\nThis summary captures the main purpose and functionality of the file 'README.md', providing a quick overview of the steps involved in setting up, testing, and publishing a Chrome browser extension with Magic passwordless authentication."}
{"code": "Since there's no redirect back to the chrome extension, go ahead and delete\n\n1. the `redirectURI` parameter given to `loginWithMagicLink()`\n2. the `/components/Callback.js` component\n3. the `/callback` route in `App.js`\n\n## Manifest.json\n\nEvery browser extension needs a [`manifest.json`](https://developer.chrome.com/docs/extensions/mv3/manifest/) file, which tells Chrome important information about your extension, such as your icons, permissions (tab controls, storage access, etc), which scripts should be loaded into users browser windows, and much more.\n\n```json\n{\n  \"name\": \"Magic Chrome Extension\",\n  \"description\": \"Build a Chrome extension with Magic auth!\",\n  \"version\": \"0.1.0\",\n  \"manifest_version\": 3,\n  \"action\": {\n    \"default_popup\": \"index.html\",\n    \"default_icon\": {\n      \"16\": \"/icon-purple.png\",\n      \"48\": \"/icon-purple.png\",\n      \"128\": \"/icon-purple.png\"\n    }\n  },\n  \"icons\": {\n    \"16\": \"/icon-purple.png\",\n    \"48\": \"/icon-purple.png\",\n    \"128\": \"/icon-purple.png\"\n  }\n}\n```\n\n## Login.js\n", "explanation": "Here is a concise summary of the purpose and functionality of this block:\n\n**Purpose:** Configure a Chrome extension with Magic authentication.\n\n**Functionality:**\n\n* Remove unnecessary code related to redirecting back to the Chrome extension.\n* Update `manifest.json` file to include essential information about the extension (icons, permissions, scripts).\n* Delete unused components (`Callback.js`) and routes (`/callback`) in the extension's code.", "metadata": {"repo": "magiclabs/example-chrome-extension", "file": "README.md", "chunk_number": 4, "total_chunks": 8}, "repository_explanation": "This repository is an example Chrome extension built with Magic Labs. Its purpose is to demonstrate a basic Chrome extension.\n\nContent:\n\n* A `manifest.json` file defining the extension's metadata\n* A JavaScript file (`contentScript.js`) running in the context of web pages\n* A popup HTML file (`popup.html`) displaying an example UI\n\nThis repository serves as a starting point for developers to create and test their own Chrome extensions using Magic Labs.", "file_summary": "Here is a concise summary of the file 'README.md':\n\n**Purpose:** Quick start guide to setting up a Chrome browser extension with Magic passwordless authentication, including instructions for testing and publishing.\n\n**Functionality:**\n\n* Configure and build a Chrome extension using Magic authentication\n* Test locally by uploading the built extension folder\n* Publish an existing browser extension app to the Chrome Web Store\n\nThis summary captures the main purpose and functionality of the file 'README.md', providing a quick overview of the steps involved in setting up, testing, and publishing a Chrome browser extension with Magic passwordless authentication."}
{"code": "A few changes need to be made to the `Login.js` component which was generated for us with the `npx make-magic` command. If the window is > 400 pixels wide, it's safe to assume the user is on the full page view, and if so, we'll display the full login form. Otherwise we are assuming the user is viewing in the actual extension popup, so we'll display a button to login, which will create a new full page tab with the login form.\n\n```js\nexport default function Login() {\n  const [email, setEmail] = useState('');\n  const [isLoggingIn, setIsLoggingIn] = useState(false);\n  const [isFullPage, setIsFullPage] = useState(false);\n  const history = useHistory();\n\n  /* Relying on the page width to tell if the user is viewing in the popup or full page */\n  useEffect(() => {\n    if (window.innerWidth > 400) setIsFullPage(true);\n  }, []);\n\n  /**\n   * Perform login action via Magic's passwordless flow. Upon successuful\n   * completion of the login flow, a user is redirected to the homepage.\n   */", "explanation": "Here is a concise summary:\n\n**Purpose:** Determine whether to display full login form or button for popup view based on window width.\n\n**Functionality:** If window width > 400px, display full login form; otherwise, display login button that opens new tab with full login form.", "metadata": {"repo": "magiclabs/example-chrome-extension", "file": "README.md", "chunk_number": 5, "total_chunks": 8}, "repository_explanation": "This repository is an example Chrome extension built with Magic Labs. Its purpose is to demonstrate a basic Chrome extension.\n\nContent:\n\n* A `manifest.json` file defining the extension's metadata\n* A JavaScript file (`contentScript.js`) running in the context of web pages\n* A popup HTML file (`popup.html`) displaying an example UI\n\nThis repository serves as a starting point for developers to create and test their own Chrome extensions using Magic Labs.", "file_summary": "Here is a concise summary of the file 'README.md':\n\n**Purpose:** Quick start guide to setting up a Chrome browser extension with Magic passwordless authentication, including instructions for testing and publishing.\n\n**Functionality:**\n\n* Configure and build a Chrome extension using Magic authentication\n* Test locally by uploading the built extension folder\n* Publish an existing browser extension app to the Chrome Web Store\n\nThis summary captures the main purpose and functionality of the file 'README.md', providing a quick overview of the steps involved in setting up, testing, and publishing a Chrome browser extension with Magic passwordless authentication."}
{"code": "  const login = useCallback(async () => {\n    setIsLoggingIn(true);\n\n    try {\n      await magic.auth.loginWithMagicLink({ email });\n      history.push('/');\n    } catch {\n      setIsLoggingIn(false);\n    }\n  }, [email]);\n\n  /**\n   * Saves the value of our email input into component state.\n   */\n  const handleInputOnChange = useCallback((event) => {\n    setEmail(event.target.value);\n  }, []);\n\n  return (\n    <div className='container'>\n      {!isFullPage ? (\n        <button onClick={() => chrome.tabs.create({ url: 'index.html' })}>Login</button>\n      ) : (\n        <>\n          <h1>Please sign up or login</h1>\n          <input\n            type='email'\n            name='email'\n            required='required'\n            placeholder='Enter your email'\n            onChange={handleInputOnChange}\n            disabled={isLoggingIn}\n          />\n          <button onClick={login} disabled={isLoggingIn}>\n            Send\n          </button>\n        </>\n      )}\n    </div>\n  );\n}\n```\n\n# Running the App Locally\n", "explanation": "Here is a summary of the purpose and functionality of this code block:\n\n**Purpose:** A React functional component that handles user login with Magic Link authentication.\n\n**Functionality:**\n\n1. Saves email input into component state.\n2. Triggers Magic Link login on button click, redirecting to homepage upon success or displaying an error message.\n3. Displays a login form if the app is not in full-page mode, otherwise prompts user to sign up or log in.\n4. Enables/disables buttons and form fields based on login status.", "metadata": {"repo": "magiclabs/example-chrome-extension", "file": "README.md", "chunk_number": 6, "total_chunks": 8}, "repository_explanation": "This repository is an example Chrome extension built with Magic Labs. Its purpose is to demonstrate a basic Chrome extension.\n\nContent:\n\n* A `manifest.json` file defining the extension's metadata\n* A JavaScript file (`contentScript.js`) running in the context of web pages\n* A popup HTML file (`popup.html`) displaying an example UI\n\nThis repository serves as a starting point for developers to create and test their own Chrome extensions using Magic Labs.", "file_summary": "Here is a concise summary of the file 'README.md':\n\n**Purpose:** Quick start guide to setting up a Chrome browser extension with Magic passwordless authentication, including instructions for testing and publishing.\n\n**Functionality:**\n\n* Configure and build a Chrome extension using Magic authentication\n* Test locally by uploading the built extension folder\n* Publish an existing browser extension app to the Chrome Web Store\n\nThis summary captures the main purpose and functionality of the file 'README.md', providing a quick overview of the steps involved in setting up, testing, and publishing a Chrome browser extension with Magic passwordless authentication."}
{"code": "You need to upload your `build` folder to Chrome to test your extension locally. Run the following command in your terminal to create the `build` folder.\n\n```txt\nyarn build\n```\n\nNext, visit `chrome://extensions` in your Chrome URL bar. Then toggle `Developer Mode` on in the top right.\n\nClick \"Load unpacked\" and select your `build` folder. You should now see your Chrome extension in your browser! Test it out by clicking through and logging in.\n\n## Potential Errors\n\nYou may run into an error such as\n\n```\nRefused to execute inline script because it violates the following Content Security Policy directive: \"script-src 'self'\"...\n```\n\nChrome has CSP settings to block certain scripts from being run. If you notice yourself running into this, make sure to include `INLINE_RUNTIME_CHUNK=false` in your `.env` file when running `yarn build`.\n\n# Done\n", "explanation": "Here is a concise summary:\n\n**Purpose:** Test Chrome extensions locally by uploading the built extension folder.\n\n**Functionality:** Run `yarn build`, load unpacked extension from `chrome://extensions`, and toggle Developer Mode to enable testing.", "metadata": {"repo": "magiclabs/example-chrome-extension", "file": "README.md", "chunk_number": 7, "total_chunks": 8}, "repository_explanation": "This repository is an example Chrome extension built with Magic Labs. Its purpose is to demonstrate a basic Chrome extension.\n\nContent:\n\n* A `manifest.json` file defining the extension's metadata\n* A JavaScript file (`contentScript.js`) running in the context of web pages\n* A popup HTML file (`popup.html`) displaying an example UI\n\nThis repository serves as a starting point for developers to create and test their own Chrome extensions using Magic Labs.", "file_summary": "Here is a concise summary of the file 'README.md':\n\n**Purpose:** Quick start guide to setting up a Chrome browser extension with Magic passwordless authentication, including instructions for testing and publishing.\n\n**Functionality:**\n\n* Configure and build a Chrome extension using Magic authentication\n* Test locally by uploading the built extension folder\n* Publish an existing browser extension app to the Chrome Web Store\n\nThis summary captures the main purpose and functionality of the file 'README.md', providing a quick overview of the steps involved in setting up, testing, and publishing a Chrome browser extension with Magic passwordless authentication."}
{"code": "Your browser extension app is now secured with Magic! You can follow this link for instructions on how to publish your new extension to the Chrome Web Store https://developer.chrome.com/docs/webstore/publish/\n", "explanation": "**Purpose:** Provide a link to instructions for publishing a Chrome Web Store extension.\n\n**Functionality:** Offers guidance on publishing an existing browser extension app to the Chrome Web Store.", "metadata": {"repo": "magiclabs/example-chrome-extension", "file": "README.md", "chunk_number": 8, "total_chunks": 8}, "repository_explanation": "This repository is an example Chrome extension built with Magic Labs. Its purpose is to demonstrate a basic Chrome extension.\n\nContent:\n\n* A `manifest.json` file defining the extension's metadata\n* A JavaScript file (`contentScript.js`) running in the context of web pages\n* A popup HTML file (`popup.html`) displaying an example UI\n\nThis repository serves as a starting point for developers to create and test their own Chrome extensions using Magic Labs.", "file_summary": "Here is a concise summary of the file 'README.md':\n\n**Purpose:** Quick start guide to setting up a Chrome browser extension with Magic passwordless authentication, including instructions for testing and publishing.\n\n**Functionality:**\n\n* Configure and build a Chrome extension using Magic authentication\n* Test locally by uploading the built extension folder\n* Publish an existing browser extension app to the Chrome Web Store\n\nThis summary captures the main purpose and functionality of the file 'README.md', providing a quick overview of the steps involved in setting up, testing, and publishing a Chrome browser extension with Magic passwordless authentication."}
{"code": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n    <meta name=\"theme-color\" content=\"#000000\" />\n    <meta name=\"description\" content=\"Web site created using create-react-app\" />\n    <!--\n      manifest.json provides metadata used when your web app is installed on a\n      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/\n    -->\n    <link rel=\"manifest\" href=\"%PUBLIC_URL%/manifest.json\" />\n    <!--\n      Notice the use of %PUBLIC_URL% in the tags above.\n      It will be replaced with the URL of the `public` folder during the build.\n      Only files inside the `public` folder can be referenced from the HTML.\n      Unlike \"/favicon.ico\" or \"favicon.ico\", \"%PUBLIC_URL%/favicon.ico\" will\n      work correctly both with client-side routing and a non-root public URL.\n      Learn how to configure a non-root public URL by running `npm run build`.\n    -->", "explanation": "This block is an HTML document header, responsible for defining metadata about the web page. It sets character encoding, viewport settings, theme color, and description, as well as linking to a manifest file for mobile/desktop app installation.", "metadata": {"repo": "magiclabs/example-chrome-extension", "file": "public/index.html", "chunk_number": 1, "total_chunks": 2}, "repository_explanation": "This repository is an example Chrome extension built with Magic Labs. Its purpose is to demonstrate a basic Chrome extension.\n\nContent:\n\n* A `manifest.json` file defining the extension's metadata\n* A JavaScript file (`contentScript.js`) running in the context of web pages\n* A popup HTML file (`popup.html`) displaying an example UI\n\nThis repository serves as a starting point for developers to create and test their own Chrome extensions using Magic Labs.", "file_summary": "Here is a concise summary of `public/index.html`:\n\n\"Template HTML file defining metadata, layout settings, and mobile/desktop app installation link.\""}
{"code": "    <title>Magic Browser Extension</title>\n  </head>\n  <body>\n    <noscript>You need to enable JavaScript to run this app.</noscript>\n    <div id=\"root\"></div>\n    <!--\n      This HTML file is a template.\n      If you open it directly in the browser, you will see an empty page.\n      You can add webfonts, meta tags, or analytics to this file.\n      The build step will place the bundled scripts into the <body> tag.\n      To begin the development, run `npm start` or `yarn start`.\n      To create a production bundle, use `npm run build` or `yarn build`.\n    -->\n  </body>\n</html>\n", "explanation": "This HTML file serves as a template for a web application, providing a basic structure that will be populated by bundled scripts during the build process.", "metadata": {"repo": "magiclabs/example-chrome-extension", "file": "public/index.html", "chunk_number": 2, "total_chunks": 2}, "repository_explanation": "This repository is an example Chrome extension built with Magic Labs. Its purpose is to demonstrate a basic Chrome extension.\n\nContent:\n\n* A `manifest.json` file defining the extension's metadata\n* A JavaScript file (`contentScript.js`) running in the context of web pages\n* A popup HTML file (`popup.html`) displaying an example UI\n\nThis repository serves as a starting point for developers to create and test their own Chrome extensions using Magic Labs.", "file_summary": "Here is a concise summary of `public/index.html`:\n\n\"Template HTML file defining metadata, layout settings, and mobile/desktop app installation link.\""}
{"code": "{\n  \"name\": \"Magic Chrome Extension\",\n  \"description\": \"Build a Chrome extension with Magic auth!\",\n  \"version\": \"0.1.0\",\n  \"manifest_version\": 3,\n  \"action\": {\n    \"default_popup\": \"index.html\",\n    \"default_icon\": {\n      \"16\": \"/icon-purple.png\",\n      \"48\": \"/icon-purple.png\",\n      \"128\": \"/icon-purple.png\"\n    }\n  },\n  \"icons\": {\n    \"16\": \"/icon-purple.png\",\n    \"48\": \"/icon-purple.png\",\n    \"128\": \"/icon-purple.png\"\n  }\n}\n", "explanation": "**Chrome Extension Manifest File**\n\nThis block is a JSON object that defines the metadata for a Chrome extension.\n\n* Purpose: To declare the properties of a Chrome extension.\n* Functionality: Specifies the extension's name, description, icons, and default popup behavior.", "metadata": {"repo": "magiclabs/example-chrome-extension", "file": "public/manifest.json", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "This repository is an example Chrome extension built with Magic Labs. Its purpose is to demonstrate a basic Chrome extension.\n\nContent:\n\n* A `manifest.json` file defining the extension's metadata\n* A JavaScript file (`contentScript.js`) running in the context of web pages\n* A popup HTML file (`popup.html`) displaying an example UI\n\nThis repository serves as a starting point for developers to create and test their own Chrome extensions using Magic Labs.", "file_summary": "Here is a holistic summary of the file 'public/manifest.json':\n\n**Chrome Extension Manifest File**\n\nA JSON object that defines metadata for a Chrome extension, specifying its name, description, icons, and default popup behavior."}
{"code": "import React from 'react';\nimport { Route, Switch } from 'react-router';\nimport { BrowserRouter } from 'react-router-dom';\n\n// Views\nimport Login from './Login';\nimport Profile from './Profile';\n\nexport default function App() {\n  return (\n    <BrowserRouter>\n      <div className='App'>\n        <Switch>\n          <Route path='/login' exact>\n            <Login />\n          </Route>\n\n          <Route path='*'>\n            <Profile />\n          </Route>\n        </Switch>\n      </div>\n    </BrowserRouter>\n  );\n}\n", "explanation": "Here is a concise summary:\n\n**Purpose:** Define the main application component that renders different views based on URL routes.\n\n**Functionality:** Uses React Router to navigate between two views: Login and Profile, with the Profile view rendering by default if no specific route matches.", "metadata": {"repo": "magiclabs/example-chrome-extension", "file": "src/components/App.js", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "This repository is an example Chrome extension built with Magic Labs. Its purpose is to demonstrate a basic Chrome extension.\n\nContent:\n\n* A `manifest.json` file defining the extension's metadata\n* A JavaScript file (`contentScript.js`) running in the context of web pages\n* A popup HTML file (`popup.html`) displaying an example UI\n\nThis repository serves as a starting point for developers to create and test their own Chrome extensions using Magic Labs.", "file_summary": "Here's a concise holistic summary of the file 'src/components/App.js':\n\n**Summary:** This file defines the main application component that uses React Router to navigate between two core views: Login and Profile, with Profile rendering as the default view unless a specific route is matched."}
{"code": "import React from \"react\";\n\nexport default function Loading() {\n  return (\n    <div className=\"container\">\n      <p>Loading...</p>\n    </div>\n  );\n}\n\n", "explanation": "**Summary:** \n\nA React functional component named `Loading` that displays a simple \"Loading...\" message in a container element when rendered.", "metadata": {"repo": "magiclabs/example-chrome-extension", "file": "src/components/Loading.js", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "This repository is an example Chrome extension built with Magic Labs. Its purpose is to demonstrate a basic Chrome extension.\n\nContent:\n\n* A `manifest.json` file defining the extension's metadata\n* A JavaScript file (`contentScript.js`) running in the context of web pages\n* A popup HTML file (`popup.html`) displaying an example UI\n\nThis repository serves as a starting point for developers to create and test their own Chrome extensions using Magic Labs.", "file_summary": "Here is a concise and to-the-point summary:\n\nThe `Loading.js` file contains a basic React component, `Loading`, which renders a simple \"Loading...\" message within a containing element."}
{"code": "import React, { useCallback, useState, useEffect } from 'react';\nimport { useHistory } from 'react-router';\nimport { magic } from '../magic';\n\nexport default function Login() {\n  const [email, setEmail] = useState('');\n  const [isLoggingIn, setIsLoggingIn] = useState(false);\n  const [isFullPage, setIsFullPage] = useState(false);\n  const history = useHistory();\n\n  /* Relying on the page width to tell if the user is viewing in the popup or full page */\n  useEffect(() => {\n    if (window.innerWidth > 400) setIsFullPage(true);\n  }, []);\n\n  /**\n   * Perform login action via Magic's passwordless flow. Upon successuful\n   * completion of the login flow, a user is redirected to the homepage.\n   */\n  const login = useCallback(async () => {\n    setIsLoggingIn(true);\n\n    try {\n      await magic.auth.loginWithMagicLink({ email });\n      history.push('/');\n    } catch {\n      setIsLoggingIn(false);\n    }\n  }, [email]);\n\n  /**\n   * Saves the value of our email input into component state.\n   */", "explanation": "Here is a concise summary:\n\n**Purpose:** Handles user login via Magic's passwordless flow.\n\n**Functionality:**\n\n* Manages login state (in-progress, full-page)\n* Updates page width detection\n* Performs login action when email is entered and button clicked\n* Redirects to homepage on successful login", "metadata": {"repo": "magiclabs/example-chrome-extension", "file": "src/components/Login.js", "chunk_number": 1, "total_chunks": 2}, "repository_explanation": "This repository is an example Chrome extension built with Magic Labs. Its purpose is to demonstrate a basic Chrome extension.\n\nContent:\n\n* A `manifest.json` file defining the extension's metadata\n* A JavaScript file (`contentScript.js`) running in the context of web pages\n* A popup HTML file (`popup.html`) displaying an example UI\n\nThis repository serves as a starting point for developers to create and test their own Chrome extensions using Magic Labs.", "file_summary": "Here's a concise holistic summary of the file 'src/components/Login.js':\n\n**Summary**: This component handles user login via Magic's passwordless flow, managing login state, updating page width detection, and redirecting to homepage upon successful login, while also enabling email registration/login input handling."}
{"code": "  const handleInputOnChange = useCallback((event) => {\n    setEmail(event.target.value);\n  }, []);\n\n  return (\n    <div className='container'>\n      {!isFullPage ? (\n        <button onClick={() => chrome.tabs.create({ url: 'index.html' })}>Login</button>\n      ) : (\n        <>\n          <h1>Please sign up or login</h1>\n          <input\n            type='email'\n            name='email'\n            required='required'\n            placeholder='Enter your email'\n            onChange={handleInputOnChange}\n            disabled={isLoggingIn}\n          />\n          <button onClick={login} disabled={isLoggingIn}>\n            Send\n          </button>\n        </>\n      )}\n    </div>\n  );\n}\n", "explanation": "Here is a summary of the purpose and functionality of this block:\n\n**Purpose:** Handle user input for email registration/login.\n\n**Functionality:** Updates email input field on change, triggers login/send button click, and enables/disables buttons based on authentication state.", "metadata": {"repo": "magiclabs/example-chrome-extension", "file": "src/components/Login.js", "chunk_number": 2, "total_chunks": 2}, "repository_explanation": "This repository is an example Chrome extension built with Magic Labs. Its purpose is to demonstrate a basic Chrome extension.\n\nContent:\n\n* A `manifest.json` file defining the extension's metadata\n* A JavaScript file (`contentScript.js`) running in the context of web pages\n* A popup HTML file (`popup.html`) displaying an example UI\n\nThis repository serves as a starting point for developers to create and test their own Chrome extensions using Magic Labs.", "file_summary": "Here's a concise holistic summary of the file 'src/components/Login.js':\n\n**Summary**: This component handles user login via Magic's passwordless flow, managing login state, updating page width detection, and redirecting to homepage upon successful login, while also enabling email registration/login input handling."}
{"code": "import React, { useEffect, useState, useCallback } from 'react';\nimport { useHistory } from 'react-router';\nimport { magic } from '../magic';\nimport Loading from './Loading';\n\nexport default function Profile() {\n  const [userMetadata, setUserMetadata] = useState();\n  const history = useHistory();\n\n  useEffect(() => {\n    // On mount, we check if a user is logged in.\n    // If so, we'll retrieve the authenticated user's profile.\n    magic.user.isLoggedIn().then((magicIsLoggedIn) => {\n      if (magicIsLoggedIn) {\n        magic.user.getMetadata().then(setUserMetadata);\n      } else {\n        // If no user is logged in, redirect to `/login`\n        history.push('/login');\n      }\n    });\n  }, []);\n\n  /**\n   * Perform logout action via Magic.\n   */\n  const logout = useCallback(() => {\n    magic.user.logout().then(() => {\n      history.push('/login');\n    });\n  }, [history]);\n\n  return userMetadata ? (\n    <div className='container'>\n      <h1>Current user: {userMetadata.email}</h1>", "explanation": "**Summary**\n\nThis block is a React component named \"Profile\" that:\n\n* Checks if a user is logged in using Magic\n* Displays the authenticated user's profile information (email) when logged in\n* Redirects to \"/login\" page when not logged in\n* Provides a logout functionality via the \"logout\" function.", "metadata": {"repo": "magiclabs/example-chrome-extension", "file": "src/components/Profile.js", "chunk_number": 1, "total_chunks": 2}, "repository_explanation": "This repository is an example Chrome extension built with Magic Labs. Its purpose is to demonstrate a basic Chrome extension.\n\nContent:\n\n* A `manifest.json` file defining the extension's metadata\n* A JavaScript file (`contentScript.js`) running in the context of web pages\n* A popup HTML file (`popup.html`) displaying an example UI\n\nThis repository serves as a starting point for developers to create and test their own Chrome extensions using Magic Labs.", "file_summary": "Here is a concise holistic summary of the file 'src/components/Profile.js':\n\n**Summary**\n\nThe Profile component: checks user login status, displays authenticated email info, redirects to login page when not logged in, and provides logout functionality with loading indicator."}
{"code": "      <button onClick={logout}>Logout</button>\n    </div>\n  ) : (\n    <Loading />\n  );\n}\n", "explanation": "This block renders a logout button on click, or a loading indicator if no props are passed.", "metadata": {"repo": "magiclabs/example-chrome-extension", "file": "src/components/Profile.js", "chunk_number": 2, "total_chunks": 2}, "repository_explanation": "This repository is an example Chrome extension built with Magic Labs. Its purpose is to demonstrate a basic Chrome extension.\n\nContent:\n\n* A `manifest.json` file defining the extension's metadata\n* A JavaScript file (`contentScript.js`) running in the context of web pages\n* A popup HTML file (`popup.html`) displaying an example UI\n\nThis repository serves as a starting point for developers to create and test their own Chrome extensions using Magic Labs.", "file_summary": "Here is a concise holistic summary of the file 'src/components/Profile.js':\n\n**Summary**\n\nThe Profile component: checks user login status, displays authenticated email info, redirects to login page when not logged in, and provides logout functionality with loading indicator."}
{"code": "import React from \"react\";\nimport { render } from \"react-dom\";\nimport App from \"./components/App\";\n\nimport \"./styles.css\";\n\nrender(<App />, document.getElementById(\"root\"));\n", "explanation": "This block is a basic React application entry point, rendering an `App` component into an HTML element with ID \"root\".", "metadata": {"repo": "magiclabs/example-chrome-extension", "file": "src/index.js", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "This repository is an example Chrome extension built with Magic Labs. Its purpose is to demonstrate a basic Chrome extension.\n\nContent:\n\n* A `manifest.json` file defining the extension's metadata\n* A JavaScript file (`contentScript.js`) running in the context of web pages\n* A popup HTML file (`popup.html`) displaying an example UI\n\nThis repository serves as a starting point for developers to create and test their own Chrome extensions using Magic Labs.", "file_summary": "Here is a concise and to-the-point summary:\n\nThe file \"src/index.js\" initializes a basic React application by rendering the \"App\" component into an HTML element with ID \"root\"."}
{"code": "import { Magic } from 'magic-sdk';\nexport const magic = new Magic(process.env.REACT_APP_MAGIC_PUBLISHABLE_KEY);\n", "explanation": "**Summary:**\n\nThis block initializes the Magic SDK, a JavaScript library for authentication and identity management, using a publishable key stored in an environment variable (`REACT_APP_MAGIC_PUBLISHABLE_KEY`).", "metadata": {"repo": "magiclabs/example-chrome-extension", "file": "src/magic.js", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "This repository is an example Chrome extension built with Magic Labs. Its purpose is to demonstrate a basic Chrome extension.\n\nContent:\n\n* A `manifest.json` file defining the extension's metadata\n* A JavaScript file (`contentScript.js`) running in the context of web pages\n* A popup HTML file (`popup.html`) displaying an example UI\n\nThis repository serves as a starting point for developers to create and test their own Chrome extensions using Magic Labs.", "file_summary": "Here is a concise summary of the file 'src/magic.js':\n\n**Summary:** Initializes the Magic SDK with a publishable key from an environment variable."}
{"code": ".App {\n  align-self: center;\n  justify-self: center;\n}\n\n#root {\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen-Sans, Ubuntu, Cantarell,\n    'Helvetica Neue', sans-serif;\n  height: 550px;\n  width: 350px;\n  display: grid;\n  font-size: 18px;\n  margin: auto;\n}\n\n.container {\n  width: 300px;\n  background-color: #eee;\n  text-align: center;\n  padding: 27px 18px;\n  margin-bottom: 27px;\n}\n\nh1 {\n  margin: 0;\n  padding-bottom: 18px;\n  font-size: 18px;\n}\n\n.info {\n  max-width: 21ch;\n  margin: 0 auto;\n  margin-bottom: 18px;\n  background-color: #ddd;\n  padding: 12px 24px;\n  word-wrap: break-word;\n  font-family: 'Lucida Console', Monaco, monospace;\n  font-size: 15px;\n}\n\n.info a {\n  color: black;\n}\n\ninput,\nbutton {\n  padding: 9px;\n  font-size: 18px;\n  margin-bottom: 9px;\n}\n\ninput.full-width {\n  display: block;\n  margin: 0 auto;\n  margin-bottom: 9px;\n  text-align: center;\n}\n", "explanation": "This block defines CSS styles for a web application, specifically:\n\n* Layout and typography (e.g., font family, size, alignment)\n* Component styles (e.g., container background color, padding)\n* Element-specific styles (e.g., h1 margin, info box formatting)", "metadata": {"repo": "magiclabs/example-chrome-extension", "file": "src/styles.css", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "This repository is an example Chrome extension built with Magic Labs. Its purpose is to demonstrate a basic Chrome extension.\n\nContent:\n\n* A `manifest.json` file defining the extension's metadata\n* A JavaScript file (`contentScript.js`) running in the context of web pages\n* A popup HTML file (`popup.html`) displaying an example UI\n\nThis repository serves as a starting point for developers to create and test their own Chrome extensions using Magic Labs.", "file_summary": "Here is a concise summary of the file 'src/styles.css':\n\n**Summary:** CSS styles for a web application covering layout, typography, component styling, and element-specific formatting."}

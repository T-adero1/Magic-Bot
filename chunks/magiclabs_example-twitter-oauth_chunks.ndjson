{"code": "<!DOCTYPE html>\n<html>\n  <head>\n    <title>Magic / Twitter OAuth Demo</title>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"styles.css\" />\n    <link\n      rel=\"stylesheet\"\n      href=\"//cdnjs.cloudflare.com/ajax/libs/highlight.js/10.1.2/styles/default.min.css\"\n    />\n    <script src=\"//cdnjs.cloudflare.com/ajax/libs/highlight.js/10.1.2/highlight.min.js\"></script>\n    <script src=\"https://auth.magic.link/sdk\"></script>\n    <script src=\"https://auth.magic.link/sdk/extension/oauth\"></script>\n    <script>\n      const MAGIC_API_KEY = \"pk_live_78EABCE90112A046\";\n\n      const magic = new Magic(MAGIC_API_KEY, {\n        extensions: [new MagicOAuthExtension()]\n      });\n\n      const render = async () => {\n        let html = ``;\n\n        if (window.location.pathname === \"/callback\") {\n          try {\n            const result = await magic.oauth.getRedirectResult();", "explanation": "Here is a concise summary of the block's purpose and functionality:\n\n**Purpose:** A demonstration of Twitter OAuth authentication using Magic API.\n\n**Functionality:** This code sets up an HTML page that uses the Magic API to authenticate users with Twitter, allowing them to grant access without leaving the application.", "metadata": {"repo": "magiclabs/example-twitter-oauth", "file": "index.html", "chunk_number": 1, "total_chunks": 3}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** `magiclabs/example-twitter-oauth`\n\n**Purpose:** A simple example implementation of Twitter OAuth authentication in Python.\n\n**Content:**\n\n* Code for authenticating with Twitter using OAuth 1.0a\n* Example usage and demonstration code\n* Minimal dependencies, focused on illustrating the OAuth process", "file_summary": "Here's a concise summary:\n\n**index.html**: A demonstration page showcasing Twitter OAuth authentication using Magic API, displaying user profile info or login form based on successful authentication, with a \"pending\" state button indicating an action in progress when logging into Twitter."}
{"code": "            const profile = JSON.stringify(result.oauth.userInfo, undefined, 2);\n\n            html = `\n                <h1>It Worked! \ud83c\udf89</h1>\n                <h2>Your User Profile:</h2>\n                <pre><code class=\"json tomorrow\">${profile}</code></pre>\n              `;\n          } catch {\n            window.location.href = window.location.origin;\n          }\n        } else {\n          html = `\n              <h2>Please sign up or log in</h2>\n              <form onsubmit=\"handleLogin(event)\">\n                <button id=\"btn-send\" class=\"twitter\" type=\"submit\">\n                  <img src=\"./sign-in-with-twitter.png\" />\n                </button>\n              </form>\n            `;\n        }\n\n        document.getElementById(\"app\").innerHTML = html;\n        document.querySelectorAll(\"pre code\").forEach((block) => {\n          hljs.highlightBlock(block);\n        });\n      };\n\n      /**\n       * Starts the OAuth 2.0 login flow.\n       */\n      const handleLogin = async (e) => {\n        e.preventDefault();\n", "explanation": "Here is a concise summary:\n\n**Purpose:** Displays user profile information or login form based on successful OAuth 2.0 authentication.\n\n**Functionality:**\n\n* Upon successful authentication, displays user profile info in JSON format.\n* Upon failed authentication or no authentication attempt, displays a \"Please sign up or log in\" message and login form.\n* Updates the HTML content of an element with ID \"app\".", "metadata": {"repo": "magiclabs/example-twitter-oauth", "file": "index.html", "chunk_number": 2, "total_chunks": 3}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** `magiclabs/example-twitter-oauth`\n\n**Purpose:** A simple example implementation of Twitter OAuth authentication in Python.\n\n**Content:**\n\n* Code for authenticating with Twitter using OAuth 1.0a\n* Example usage and demonstration code\n* Minimal dependencies, focused on illustrating the OAuth process", "file_summary": "Here's a concise summary:\n\n**index.html**: A demonstration page showcasing Twitter OAuth authentication using Magic API, displaying user profile info or login form based on successful authentication, with a \"pending\" state button indicating an action in progress when logging into Twitter."}
{"code": "        // Render a button \"pending\" state.\n        const btnSend = document.getElementById(\"btn-send\");\n        btnSend.disabled = true;\n        btnSend.innerText = \"Logging in...\";\n\n        // Start the Twitter OAuth 2.0 flow!\n        const didToken = await magic.oauth.loginWithRedirect({\n          provider: \"twitter\",\n          redirectURI: `${window.location.origin}/callback`\n        });\n      };\n    </script>\n  </head>\n  <body onload=\"render()\">\n    <div id=\"app\">Loading...</div>\n  </body>\n</html>\n", "explanation": "This block renders a button with a \"pending\" state, indicating that an action is in progress (logging into Twitter). The script then initiates the OAuth login flow for Twitter.", "metadata": {"repo": "magiclabs/example-twitter-oauth", "file": "index.html", "chunk_number": 3, "total_chunks": 3}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** `magiclabs/example-twitter-oauth`\n\n**Purpose:** A simple example implementation of Twitter OAuth authentication in Python.\n\n**Content:**\n\n* Code for authenticating with Twitter using OAuth 1.0a\n* Example usage and demonstration code\n* Minimal dependencies, focused on illustrating the OAuth process", "file_summary": "Here's a concise summary:\n\n**index.html**: A demonstration page showcasing Twitter OAuth authentication using Magic API, displaying user profile info or login form based on successful authentication, with a \"pending\" state button indicating an action in progress when logging into Twitter."}
{"code": "{\n  \"infiniteLoopProtection\": true,\n  \"hardReloadOnChange\": true,\n  \"view\": \"browser\",\n  \"template\": \"static\"\n}\n", "explanation": "This block appears to be a configuration object with three properties:\n\n* Enabling infinite loop protection\n* Forcing a hard reload on template changes\n* Configuring the view type and template style", "metadata": {"repo": "magiclabs/example-twitter-oauth", "file": "sandbox.config.json", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** `magiclabs/example-twitter-oauth`\n\n**Purpose:** A simple example implementation of Twitter OAuth authentication in Python.\n\n**Content:**\n\n* Code for authenticating with Twitter using OAuth 1.0a\n* Example usage and demonstration code\n* Minimal dependencies, focused on illustrating the OAuth process", "file_summary": "Here is a holistic summary of the file 'sandbox.config.json':\n\n\"Configures sandbox environment settings, including protection against infinite loops, template updates, and display preferences.\""}
{"code": "body {\n  font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto,\n    Oxygen-Sans, Ubuntu, Cantarell, \"Helvetica Neue\", sans-serif;\n  height: 100vh;\n  display: grid;\n  font-size: 18px;\n}\n\n#app {\n  align-self: center;\n  justify-self: center;\n  text-align: center;\n  width: 500px;\n  padding: 27px 18px;\n}\n\nh1 {\n  margin: 0;\n  padding-bottom: 1.5rem;\n  font-size: 36px;\n}\n\nh2 {\n  margin: 0;\n  padding-bottom: 18px;\n  font-size: 18px;\n}\n\ninput,\nbutton:not(.twitter) {\n  padding: 9px;\n  font-size: 18px;\n  margin-bottom: 9px;\n}\n\nbutton.twitter {\n  cursor: pointer;\n  border: none;\n  background: transparent;\n  padding: 0;\n}\n\npre {\n  text-align: left;\n  background: #f0f0f0;\n  padding: 25px;\n  border-radius: 10px;\n  overflow-x: scroll;\n}\n", "explanation": "**Summary**\n\nThis block defines CSS styles for a web page, including:\n\n* Global styles for the body (font family, height, display)\n* Styles for an element with ID \"app\" (center alignment, padding, width)\n* Styles for headings (margin, padding, font size)\n* Styles for input and button elements (padding, font size, margin)\n* Style for a preformatted text block (alignment, background, padding)", "metadata": {"repo": "magiclabs/example-twitter-oauth", "file": "styles.css", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "Here is a concise explanation:\n\n**Repository:** `magiclabs/example-twitter-oauth`\n\n**Purpose:** A simple example implementation of Twitter OAuth authentication in Python.\n\n**Content:**\n\n* Code for authenticating with Twitter using OAuth 1.0a\n* Example usage and demonstration code\n* Minimal dependencies, focused on illustrating the OAuth process", "file_summary": "Here is a concise holistic summary of the file 'styles.css':\n\n**Styles.css Summary**\n\nDefines global CSS styles for a web page, including layout, typography, and element-specific styles."}

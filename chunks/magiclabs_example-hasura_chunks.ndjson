{"code": "NEXT_PUBLIC_MAGIC_PUBLISHABLE_KEY=pk_123...\nMAGIC_SECRET_KEY=sk_123...\nJWT_SECRET=your-32+-character-secret\nNEXT_PUBLIC_HASURA_GRAPHQL_URL=your-graphql-api-server\nSESSION_LENGTH_IN_DAYS=7", "explanation": "This block is a set of environment variables, specifically:\n\n* Authentication/Security keys (MAGIC_PUBLISHABLE_KEY, MAGIC_SECRET_KEY, JWT_SECRET)\n* API connection details (NEXT_PUBLIC_HASURA_GRAPHQL_URL)\n* Session management configuration (SESSION_LENGTH_IN_DAYS)\n\nIn other words, it's a collection of secrets and settings for authentication, API connectivity, and session management.", "metadata": {"repo": "magiclabs/example-hasura", "file": ".env.local.example", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "This is a placeholder answer.\n\nThe repository `magiclabs/example-hasura` appears to be an example codebase for Hasura, a GraphQL-based backend-as-a-service platform. The purpose of this repository is likely to demonstrate how to use Hasura with Magic Labs, a visual data modeling and API creation tool.", "file_summary": "Here is a concise summary:\n\nThe `.env.local.example` file contains sensitive environment variables, including auth keys, API connection details, and session management configuration."}
{"code": "# Demo\n\nhttps://magic-hasura.vercel.app/login\n\n# Quick start instructions\n\n```txt\n$ git clone https://github.com/magiclabs/example-hasura.git\n$ cd example-hasura\n$ mv .env.local.example .env.local\n$ yarn install\n$ yarn dev\n```\n\n# .env.local File\n\n```txt\nNEXT_PUBLIC_MAGIC_PUBLISHABLE_KEY=your-magic-publishable-key\nMAGIC_SECRET_KEY=your-magic-secret-key\nNEXT_PUBLIC_SERVER_URL=http://localhost:3000\nJWT_SECRET=your-32+-character-secret\nNEXT_PUBLIC_HASURA_GRAPHQL_URL=your-graphql-api-server\n```\n\n- _Note one: if you just want authentication, and not the to-do list, delete the `/components/todo` folder and the reference to `<TodoList>` in `index.js`._\n\n- _Note two: the tutorial was built using Magic UI components. If you swap them out for your own custom CSS, you can also delete the `_app.js` and `_document.js` files, and `@magiclabs/ui`, `framer-motion` and `rxjs` from your `package.json` dependencies._\n\n# Tutorial\n\nhttps://magic.link/posts/magic-hasura\n", "explanation": "Here is a concise summary of the purpose and functionality of this block:\n\n**Purpose:** A demo and tutorial for integrating Magic UI with Hasura GraphQL API.\n\n**Functionality:**\n\n* Provides a link to a live demo: https://magic-hasura.vercel.app/login\n* Offers quick start instructions for cloning and setting up the project\n* Outlines configuration options in the `.env.local` file\n* Points to a tutorial on integrating Magic UI with Hasura GraphQL API: https://magic.link/posts/magic-hasura", "metadata": {"repo": "magiclabs/example-hasura", "file": "README.md", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "This is a placeholder answer.\n\nThe repository `magiclabs/example-hasura` appears to be an example codebase for Hasura, a GraphQL-based backend-as-a-service platform. The purpose of this repository is likely to demonstrate how to use Hasura with Magic Labs, a visual data modeling and API creation tool.", "file_summary": "Here is a concise summary of the `README.md` file:\n\n**Purpose:** Demo and tutorial for integrating Magic UI with Hasura GraphQL API.\n\n**Key Features:**\n\n* Live demo link\n* Quick start instructions\n* Configuration options in `.env.local`\n* Tutorial on integrating Magic UI with Hasura GraphQL API"}
{"code": "import Link from 'next/link';\nimport { useUser } from '../lib/hooks';\nimport { CallToAction, TextButton } from '@magiclabs/ui';\n\nconst Header = () => {\n  const user = useUser();\n\n  return (\n    <header>\n      <nav>\n        <ul>\n          {!user ? (\n            <li>\n            <Link href='/login'>\n              <CallToAction color='primary' size='sm'>\n                Login\n              </CallToAction>\n            </Link>\n          </li>\n          ) : user.loading ? (\n            <div style={{ height: '38px' }}></div>\n          ) : (\n            <>\n              <li>\n                <Link href='/'>\n                  <TextButton color='primary' size='sm'>\n                    Home\n                  </TextButton>\n                </Link>\n              </li>\n              <li>\n                <Link href='/profile'>\n                  <TextButton color='primary' size='sm'>\n                    Profile\n                  </TextButton>\n                </Link>\n              </li>\n              <li>", "explanation": "Here is a concise summary:\n\n**Purpose:** The `Header` block displays navigation links for logged-in users or invites login when no user is authenticated.\n\n**Functionality:** It renders a header with navigation links (Home, Profile) if a user is logged in, otherwise it displays a \"Login\" call-to-action to prompt the user to log in.", "metadata": {"repo": "magiclabs/example-hasura", "file": "components/header.js", "chunk_number": 1, "total_chunks": 2}, "repository_explanation": "This is a placeholder answer.\n\nThe repository `magiclabs/example-hasura` appears to be an example codebase for Hasura, a GraphQL-based backend-as-a-service platform. The purpose of this repository is likely to demonstrate how to use Hasura with Magic Labs, a visual data modeling and API creation tool.", "file_summary": "Here is a concise and holistic summary of the file 'components/header.js':\n\n**Purpose:** Display navigation links or login prompt based on user authentication status.\n\n**Functionality:** Renders a customizable header with login/logout functionality, showing navigation links (Home, Profile) for logged-in users and a \"Login\" call-to-action otherwise."}
{"code": "                <Link href='/api/logout'>\n                  <TextButton color='warning' size='sm'>\n                    Logout\n                  </TextButton>\n                </Link>\n              </li>\n            </>\n          )}\n        </ul>\n      </nav>\n      <style jsx>{`\n        nav {\n          max-width: 45rem;\n          margin: 0 auto 50px;\n          padding: 1.25rem 1.25rem;\n          border-bottom: 1px solid #f0f0f0;\n        }\n        ul {\n          display: flex;\n          list-style: none;\n        }\n        li {\n          margin-right: 1.5rem;\n          line-height: 38px;\n        }\n        li:first-child {\n          margin-left: auto;\n        }\n      `}</style>\n    </header>\n  );\n};\n\nexport default Header;\n", "explanation": "**Summary**\n\nThis block creates a navigation bar with a single \"Logout\" button that links to an API logout endpoint when clicked. The design is customized using CSS styles for layout and appearance.", "metadata": {"repo": "magiclabs/example-hasura", "file": "components/header.js", "chunk_number": 2, "total_chunks": 2}, "repository_explanation": "This is a placeholder answer.\n\nThe repository `magiclabs/example-hasura` appears to be an example codebase for Hasura, a GraphQL-based backend-as-a-service platform. The purpose of this repository is likely to demonstrate how to use Hasura with Magic Labs, a visual data modeling and API creation tool.", "file_summary": "Here is a concise and holistic summary of the file 'components/header.js':\n\n**Purpose:** Display navigation links or login prompt based on user authentication status.\n\n**Functionality:** Renders a customizable header with login/logout functionality, showing navigation links (Home, Profile) for logged-in users and a \"Login\" call-to-action otherwise."}
{"code": "import Head from 'next/head';\nimport Header from './header';\n\nconst Layout = ({ children }) => (\n  <>\n    <Head>\n      <title>Magic</title>\n      <link rel='icon' href='/favicon.ico' />\n    </Head>\n\n    <Header />\n    <main>\n      <div className='container'>{children}</div>\n    </main>\n    <style jsx global>{`\n      * {\n        outline: none;\n      }\n      .container {\n        max-width: 42rem;\n        margin: 0 auto;\n        padding: 0 10px;\n      }\n    `}</style>\n  </>\n);\n\nexport default Layout;\n", "explanation": "Here is a concise summary:\n\n**Purpose:** Provides a reusable layout component for React applications.\n\n**Functionality:** Renders a basic HTML structure with a title, favicon, header, main content area, and global CSS styles. Accepts children components as props.", "metadata": {"repo": "magiclabs/example-hasura", "file": "components/layout.js", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "This is a placeholder answer.\n\nThe repository `magiclabs/example-hasura` appears to be an example codebase for Hasura, a GraphQL-based backend-as-a-service platform. The purpose of this repository is likely to demonstrate how to use Hasura with Magic Labs, a visual data modeling and API creation tool.", "file_summary": "Here's a concise holistic summary of the file 'components/layout.js':\n\n**Layout Component**: A reusable React layout component that renders a basic HTML structure, accepts children components, and includes global CSS styles."}
{"code": "const Loading = () => (\n  <div style={{ textAlign: 'center' }}>\n    <img src='./spinner.svg' height='50px' alt='Loading' />\n  </div>\n);\n\nexport default Loading;\n", "explanation": "This block is a React functional component called `Loading`. It displays a centered SVG image of a loading spinner, intended to indicate that something is loading or processing.", "metadata": {"repo": "magiclabs/example-hasura", "file": "components/loading.js", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "This is a placeholder answer.\n\nThe repository `magiclabs/example-hasura` appears to be an example codebase for Hasura, a GraphQL-based backend-as-a-service platform. The purpose of this repository is likely to demonstrate how to use Hasura with Magic Labs, a visual data modeling and API creation tool.", "file_summary": "Here is a concise summary:\n\nThe \"loading.js\" file contains a React functional component named \"Loading\" that displays a centered SVG loading spinner, indicating ongoing activity or processing."}
{"code": "import { useState } from 'react';\nimport { useUser } from '../../lib/hooks';\nimport { Input, Icon, MonochromeIcons } from '@magiclabs/ui';\n\nconst AddTodoForm = ({ getTodos, isLoading, setIsLoading }) => {\n  const user = useUser();\n  const [todo, setTodo] = useState('');\n\n  const addTodoQuery = {\n    query: `mutation {\n      insert_todos_one(object: {task: \"${todo}\", user_id: \"${user?.issuer}\", is_completed: false}) {\n        task\n      }\n    }`,\n  };\n  \n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    if (!todo) return;\n    setIsLoading(true);\n    await fetch(process.env.NEXT_PUBLIC_HASURA_GRAPHQL_URL, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        Accept: 'application/json',\n        Authorization: 'Bearer ' + user?.token,\n      },\n      body: JSON.stringify(addTodoQuery),\n    });\n    setTodo('');\n    setIsLoading(false);\n    getTodos();\n  };\n\n  return (\n      <form onSubmit={handleSubmit}>\n        <Input\n          placeholder='Enter your task'", "explanation": "**Purpose:** A React component for adding new todo items to a database.\n\n**Functionality:**\n\n* Accepts user input through a form.\n* Uses the `useState` hook to store the input text in a state variable (`todo`).\n* Utilizes the `useUser` hook to retrieve authentication information.\n* Submits the input data to a GraphQL API via a POST request when the form is submitted.\n* Updates the database and retrieves new todo items using the `getTodos` function.\n* Displays an \"Add Todo Form\" with an input field and submit button.", "metadata": {"repo": "magiclabs/example-hasura", "file": "components/todo/add-todo-form.js", "chunk_number": 1, "total_chunks": 2}, "repository_explanation": "This is a placeholder answer.\n\nThe repository `magiclabs/example-hasura` appears to be an example codebase for Hasura, a GraphQL-based backend-as-a-service platform. The purpose of this repository is likely to demonstrate how to use Hasura with Magic Labs, a visual data modeling and API creation tool.", "file_summary": "Here is a concise summary of the file 'components/todo/add-todo-form.js':\n\n\"React component for adding new todo items: accepts user input, submits to GraphQL API, updates database, and displays an interactive form with input field and submit button.\""}
{"code": "          size='lg'\n          type='text'\n          value={todo}\n          onChange={(e) => setTodo(e.target.value)}\n          prefix={<Icon inline type={MonochromeIcons.CaretRight} color={'#888'} size={26} />}\n          suffix={\n            isLoading && (\n              <img\n                height='20px'\n                src={'https://media.tenor.com/images/9da8a7cec33307a43306a32e54fbaca0/tenor.gif'}\n              />\n            )\n          }\n        />\n      </form>\n  );\n};\n\nexport default AddTodoForm;\n", "explanation": "Here is a concise summary:\n\nThis block represents a form field (likely an input text box) that allows users to enter a todo item, with optional loading animation.", "metadata": {"repo": "magiclabs/example-hasura", "file": "components/todo/add-todo-form.js", "chunk_number": 2, "total_chunks": 2}, "repository_explanation": "This is a placeholder answer.\n\nThe repository `magiclabs/example-hasura` appears to be an example codebase for Hasura, a GraphQL-based backend-as-a-service platform. The purpose of this repository is likely to demonstrate how to use Hasura with Magic Labs, a visual data modeling and API creation tool.", "file_summary": "Here is a concise summary of the file 'components/todo/add-todo-form.js':\n\n\"React component for adding new todo items: accepts user input, submits to GraphQL API, updates database, and displays an interactive form with input field and submit button.\""}
{"code": "import { DuotoneIcon, DuotoneIcons, Checkbox } from '@magiclabs/ui';\n\nconst TodoItem = ({ toggleCompleted, deleteTodo, todos }) => {\n  return (\n    <>\n      {todos?.map((todo) => {\n        return (\n          <div className='todo-item-container' key={todo.id}>\n            <div className='checkbox-todo-container'>\n              <div className='toggle-icon'>\n                <Checkbox\n                  checked={todo.is_completed}\n                  color='primary'\n                  onClick={() => toggleCompleted(todo.id, !todo.is_completed)}\n                  onChange={() => {}}\n                />\n              </div>\n              <div className={`todo ${todo.is_completed && 'completed'}`}>{todo.task}</div>\n            </div>\n            <div className='delete-btn'>\n              <DuotoneIcon\n                inline\n                type={DuotoneIcons.Remove}\n                size={28}\n                onClick={() => deleteTodo(todo.id)}\n              />\n            </div>\n          </div>\n        );\n      })}", "explanation": "**Purpose:** Render a list of todo items with checkboxes and deletion icons.\n\n**Functionality:**\n\n* Displays each todo item in a container with a checkbox, task text, and delete button.\n* Toggles checkbox completion status on click.\n* Deletes todo item when delete icon is clicked.", "metadata": {"repo": "magiclabs/example-hasura", "file": "components/todo/todo-item.js", "chunk_number": 1, "total_chunks": 2}, "repository_explanation": "This is a placeholder answer.\n\nThe repository `magiclabs/example-hasura` appears to be an example codebase for Hasura, a GraphQL-based backend-as-a-service platform. The purpose of this repository is likely to demonstrate how to use Hasura with Magic Labs, a visual data modeling and API creation tool.", "file_summary": "Here is a concise holistic summary of the file 'components/todo/todo-item.js':\n\n**Summary:**\n\nThe `TodoItem` component renders a single todo item with a checkbox, task text, and delete button, allowing users to toggle completion status and delete items as needed. It also includes styles for the todo list interface."}
{"code": "      <style jsx>{`\n        .todo-item-container,\n        .checkbox-todo-container {\n          display: flex;\n          justify-content: space-between;\n          margin: 5px 0;\n          box-sizing: border-box;\n        }\n        .todo-item-container {\n          padding: 10px;\n          border-bottom: 1px solid #dcdcdc;\n          word-wrap: break-word;\n          white-space: pre-wrap;\n          word-break: normal;\n        }\n        .todo {\n          line-height: 28px;\n        }\n        .toggle-icon {\n          margin: 5px 14px 0 5px;\n          cursor: pointer;\n        }\n        .completed {\n          text-decoration: line-through;\n          color: gray;\n        }\n        .delete-btn {\n          padding: 4px;\n          cursor: pointer;\n        }\n      `}</style>\n    </>\n  );\n};\n\nexport default TodoItem;\n", "explanation": "Here is a concise summary:\n\n**Purpose:** Styles for a todo item component, controlling layout, typography, and appearance.\n\n**Functionality:** Defines CSS styles for elements such as checkboxes, text containers, toggles, and delete buttons in a todo list interface.", "metadata": {"repo": "magiclabs/example-hasura", "file": "components/todo/todo-item.js", "chunk_number": 2, "total_chunks": 2}, "repository_explanation": "This is a placeholder answer.\n\nThe repository `magiclabs/example-hasura` appears to be an example codebase for Hasura, a GraphQL-based backend-as-a-service platform. The purpose of this repository is likely to demonstrate how to use Hasura with Magic Labs, a visual data modeling and API creation tool.", "file_summary": "Here is a concise holistic summary of the file 'components/todo/todo-item.js':\n\n**Summary:**\n\nThe `TodoItem` component renders a single todo item with a checkbox, task text, and delete button, allowing users to toggle completion status and delete items as needed. It also includes styles for the todo list interface."}
{"code": "import { useState, useEffect } from 'react';\nimport AddTodoForm from './add-todo-form';\nimport TodoItem from './todo-item';\nimport { useUser } from '../../lib/hooks';\n\nconst TodoList = ({}) => {\n  const user = useUser();\n  const [todos, setTodos] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    if (!user?.issuer) return;\n    getTodos();\n  }, [user]);\n\n  const queryHasura = async (query) => {\n    try {\n      setIsLoading(true);\n      let res = await fetch(process.env.NEXT_PUBLIC_HASURA_GRAPHQL_URL, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          Accept: 'application/json',\n          Authorization: 'Bearer ' + user?.token,\n        },\n        body: JSON.stringify(query),\n      });\n      setIsLoading(false);\n      return res;\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const getTodos = async () => {\n    const getTodosQuery = {\n      query: `{", "explanation": "**Summary:**\n\nThis block is a React component, `TodoList`, that fetches a user's todo list from a Hasura GraphQL API using their authentication token. It displays the todo items in a list format and includes a form for adding new todos. The component updates dynamically when the user's data changes.", "metadata": {"repo": "magiclabs/example-hasura", "file": "components/todo/todolist.js", "chunk_number": 1, "total_chunks": 3}, "repository_explanation": "This is a placeholder answer.\n\nThe repository `magiclabs/example-hasura` appears to be an example codebase for Hasura, a GraphQL-based backend-as-a-service platform. The purpose of this repository is likely to demonstrate how to use Hasura with Magic Labs, a visual data modeling and API creation tool.", "file_summary": "Here is a concise summary of the 'components/todo/todolist.js' file:\n\n**Summary:** A React component that fetches, displays, and manages a user's todo list from a Hasura GraphQL API. It features an add form, completion toggle, deletion options, and updates dynamically with changing data."}
{"code": "        todos(where: {user_id: {_eq: \"${user?.issuer}\"}}, order_by: {is_completed: asc, id: asc}) {\n          id\n          task\n          is_completed\n        }\n      }`,\n    };\n    try {\n      let res = await queryHasura(getTodosQuery);\n      let { data, error } = await res.json();\n      error ? console.log(error) : data.todos && setTodos(data.todos);\n    } catch (error) {\n      console.log(`Error fetching todos: ${error}`);\n    }\n  };\n\n  const toggleCompleted = async (id, isCompleted) => {\n    const toggleCompletedQuery = {\n      query: `mutation {\n        update_todos(where: {id: {_eq: \"${id}\"}, user_id: {_eq: \"${user?.issuer}\"}}, _set: {is_completed: \"${isCompleted}\"}) {\n          returning {\n            id\n          }\n        }\n      }`,\n    };\n    await queryHasura(toggleCompletedQuery);\n    getTodos();\n  };\n\n  const deleteTodo = async (todoId) => {\n    let deleteQuery = {\n      query: `mutation {\n        delete_todos(where: {id: {_eq: \"${todoId}\"}, user_id: {_eq: \"${user?.issuer}\"}}) {\n          affected_rows", "explanation": "Here is a concise summary:\n\n**Purpose:** Fetch, update, and delete todos for a user.\n\n**Functionality:**\n\n* `getTodos()`: Retrieves a list of todos for the current user.\n* `toggleCompleted(id, isCompleted)`: Updates the completion status of a todo with the given ID.\n* `deleteTodo(todoId)`: Deletes a todo with the given ID.", "metadata": {"repo": "magiclabs/example-hasura", "file": "components/todo/todolist.js", "chunk_number": 2, "total_chunks": 3}, "repository_explanation": "This is a placeholder answer.\n\nThe repository `magiclabs/example-hasura` appears to be an example codebase for Hasura, a GraphQL-based backend-as-a-service platform. The purpose of this repository is likely to demonstrate how to use Hasura with Magic Labs, a visual data modeling and API creation tool.", "file_summary": "Here is a concise summary of the 'components/todo/todolist.js' file:\n\n**Summary:** A React component that fetches, displays, and manages a user's todo list from a Hasura GraphQL API. It features an add form, completion toggle, deletion options, and updates dynamically with changing data."}
{"code": "        }\n      }`,\n    };\n    await queryHasura(deleteQuery);\n    getTodos();\n  };\n\n  return (\n    <div className='todo-list-container'>\n      <AddTodoForm \n        getTodos={getTodos}\n        isLoading={isLoading} \n        setIsLoading={setIsLoading} \n        />\n      <TodoItem \n        todos={todos} \n        deleteTodo={deleteTodo} \n        toggleCompleted={toggleCompleted} \n        />\n      <div className='number-of-tasks'>{`Tasks: ${todos?.length}`}</div>\n      <style jsx>{`\n        .todo-list-container {\n          width: 90%;\n          max-width: 32rem;\n          margin: 0 auto;\n          box-shadow: 0px 0px 6px 6px #eee;\n          border-radius: 10px;\n        }\n        .number-of-tasks {\n          color: gray;\n          padding: 10px;\n          margin: 4px 8px;\n        }\n      `}</style>\n    </div>\n  );\n};\n\nexport default TodoList;\n", "explanation": "**Purpose:** Render a todo list component with features to add, view, and delete tasks.\n\n**Functionality:** \n\n* Displays a form to add new todos\n* Lists existing todos with completion toggle and deletion options\n* Updates task count display based on todo list length\n* Manages loading state with corresponding UI updates", "metadata": {"repo": "magiclabs/example-hasura", "file": "components/todo/todolist.js", "chunk_number": 3, "total_chunks": 3}, "repository_explanation": "This is a placeholder answer.\n\nThe repository `magiclabs/example-hasura` appears to be an example codebase for Hasura, a GraphQL-based backend-as-a-service platform. The purpose of this repository is likely to demonstrate how to use Hasura with Magic Labs, a visual data modeling and API creation tool.", "file_summary": "Here is a concise summary of the 'components/todo/todolist.js' file:\n\n**Summary:** A React component that fetches, displays, and manages a user's todo list from a Hasura GraphQL API. It features an add form, completion toggle, deletion options, and updates dynamically with changing data."}
{"code": "import { serialize } from 'cookie';\n\nconst TOKEN_NAME = 'token';\nconst MAX_AGE = 60 * 60 * 24 * process.env.SESSION_LENGTH_IN_DAYS;\n\nexport function setTokenCookie(res, token) {\n  const cookie = serialize(TOKEN_NAME, token, {\n    maxAge: MAX_AGE,\n    expires: new Date(Date.now() + MAX_AGE * 1000),\n    httpOnly: true,\n    secure: process.env.NODE_ENV === 'production', // if true, cookie will only be set if https (won't be set if http)\n    path: '/',\n    sameSite: 'lax',\n  });\n  res.setHeader('Set-Cookie', cookie);\n}\n\nexport function removeTokenCookie(res) {\n  const cookie = serialize(TOKEN_NAME, '', {\n    maxAge: -1,\n    path: '/',\n  });\n\n  res.setHeader('Set-Cookie', cookie);\n}\n", "explanation": "**Purpose:** Manage authentication tokens as cookies.\n\n**Functionality:**\n\n* `setTokenCookie`: Sets a secure token cookie with specified expiration time.\n* `removeTokenCookie`: Removes the token cookie by setting its expiration date to -1 (immediately invalidating it).", "metadata": {"repo": "magiclabs/example-hasura", "file": "lib/cookies.js", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "This is a placeholder answer.\n\nThe repository `magiclabs/example-hasura` appears to be an example codebase for Hasura, a GraphQL-based backend-as-a-service platform. The purpose of this repository is likely to demonstrate how to use Hasura with Magic Labs, a visual data modeling and API creation tool.", "file_summary": "Here is a concise summary of the file 'lib/cookies.js':\n\n**Summary:** This module manages authentication tokens as secure cookies, providing methods for setting (`setTokenCookie`) and removing (`removeTokenCookie`) them with expiration control."}
{"code": "import useSWR from 'swr';\n\nconst fetchUser = async (url) =>{\n  const res = await fetch(url);\n  const data = await res.json();\n  return { user: data?.user || null };\n}\n\nexport function useUser() {\n  const { data, error } = useSWR('/api/user', fetchUser);\n  if (error) return null;\n  if (!data) return { loading: true };\n  return data.user;\n}\n", "explanation": "Here is a concise summary:\n\n**Purpose:** Fetch user data from an API.\n\n**Functionality:** Uses SWR (SWR is a React hook for fetching remote data) to load user data, handling errors and loading states. Returns the user object or null if unsuccessful.", "metadata": {"repo": "magiclabs/example-hasura", "file": "lib/hooks.js", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "This is a placeholder answer.\n\nThe repository `magiclabs/example-hasura` appears to be an example codebase for Hasura, a GraphQL-based backend-as-a-service platform. The purpose of this repository is likely to demonstrate how to use Hasura with Magic Labs, a visual data modeling and API creation tool.", "file_summary": "Here's a concise holistic summary of the file 'lib/hooks.js':\n\n**Summary:** The `hooks.js` file fetches user data from an API using SWR, handling errors and loading states, and returns the user object or null on failure."}
{"code": "import { Magic } from 'magic-sdk';\n\n// Create client-side Magic instance\nconst createMagic = (key) => (typeof window != 'undefined' &&  new Magic(key));\n\nexport const magic = createMagic(process.env.NEXT_PUBLIC_MAGIC_PUBLISHABLE_KEY);\n", "explanation": "Here is a summary of the block:\n\n**Purpose:** Initialize the Magic SDK for authentication and security purposes.\n\n**Functionality:** Creates a client-side instance of Magic using an API key, making it available as an exported variable `magic`.", "metadata": {"repo": "magiclabs/example-hasura", "file": "lib/magic.js", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "This is a placeholder answer.\n\nThe repository `magiclabs/example-hasura` appears to be an example codebase for Hasura, a GraphQL-based backend-as-a-service platform. The purpose of this repository is likely to demonstrate how to use Hasura with Magic Labs, a visual data modeling and API creation tool.", "file_summary": "Here is a holistic summary of the file 'lib/magic.js':\n\nInitializes the Magic SDK with an API key, creating a reusable client-side instance accessible through the exported `magic` variable for authentication and security purposes."}
{"code": "const { Magic } = require('@magic-sdk/admin');\n\n// initiating Magic instance for server-side methods\nexport const magic = new Magic(process.env.MAGIC_SECRET_KEY);\n", "explanation": "**Summary**\n\nThis block initializes a Magic instance, allowing server-side access to verify user identities and authenticate users using their email addresses or phone numbers. \n\n(Note: This is likely JavaScript code for authentication with the Magic API)", "metadata": {"repo": "magiclabs/example-hasura", "file": "lib/magicAdmin.js", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "This is a placeholder answer.\n\nThe repository `magiclabs/example-hasura` appears to be an example codebase for Hasura, a GraphQL-based backend-as-a-service platform. The purpose of this repository is likely to demonstrate how to use Hasura with Magic Labs, a visual data modeling and API creation tool.", "file_summary": "Here is a concise summary of `lib/magicAdmin.js`:\n\nInitializes a Magic instance for server-side identity verification and user authentication via email/phone number."}
{"code": "import Layout from '../components/layout';\nimport { ThemeProvider } from '@magiclabs/ui';\nimport '@magiclabs/ui/dist/cjs/index.css';\n\nfunction MyApp({ Component, pageProps }) {\n  return (\n    <ThemeProvider root>\n      <Layout>\n        <Component {...pageProps} />\n      </Layout>\n    </ThemeProvider>\n  );\n}\n\nexport default MyApp;\n", "explanation": "This block appears to be a Gatsby or Next.js app entry file, likely `pages/_app.js`. Its purpose is to wrap each page's component with a global layout and theme provider, making it a central hub for sharing styles and structure across the app.", "metadata": {"repo": "magiclabs/example-hasura", "file": "pages/_app.js", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "This is a placeholder answer.\n\nThe repository `magiclabs/example-hasura` appears to be an example codebase for Hasura, a GraphQL-based backend-as-a-service platform. The purpose of this repository is likely to demonstrate how to use Hasura with Magic Labs, a visual data modeling and API creation tool.", "file_summary": "Here is a concise summary of the file 'pages/_app.js':\n\n\"The `_app.js` file serves as the central hub for global layout and theme provisioning in a Gatsby/Next.js app, wrapping each page's component with shared styles and structure.\""}
{"code": "/**\n * Can delete this file if not using @magiclabs/ui\n */\nimport Document, { Html, Head, Main, NextScript } from 'next/document';\nimport { DEFAULT_THEME, getThemeVariables } from '@magiclabs/ui';\nexport default class MyDocument extends Document {\n  render() {\n    return (\n      <Html>\n        <Head>\n          <style\n            type='text/css'\n            dangerouslySetInnerHTML={{ __html: getThemeVariables(DEFAULT_THEME).toCSS() }}\n          />\n        </Head>\n        <body>\n          <Main />\n          <NextScript />\n        </body>\n      </Html>\n    );\n  }\n}\n", "explanation": "Here is a concise summary:\n\n**Custom Document Component**\n\nThis block defines a custom `Document` component for Next.js, which sets theme variables from @magiclabs/ui in the HTML <Head> section, enabling consistent styling throughout the app.", "metadata": {"repo": "magiclabs/example-hasura", "file": "pages/_document.js", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "This is a placeholder answer.\n\nThe repository `magiclabs/example-hasura` appears to be an example codebase for Hasura, a GraphQL-based backend-as-a-service platform. The purpose of this repository is likely to demonstrate how to use Hasura with Magic Labs, a visual data modeling and API creation tool.", "file_summary": "Here's a concise holistic summary of the file 'pages/_document.js':\n\n**Custom Document Component**\n\nSets theme variables from @magiclabs/ui in the HTML <Head> section for Next.js apps, ensuring consistent styling across the application."}
{"code": "import jwt from 'jsonwebtoken';\nimport { magic } from '../../lib/magicAdmin';\nimport { setTokenCookie } from '../../lib/cookies';\n\nexport default async function login(req, res) {\n  try {\n    const didToken = req.headers.authorization.substr(7);\n    await magic.token.validate(didToken);\n    const metadata = await magic.users.getMetadataByToken(didToken);\n\n    let token = jwt.sign(\n      {\n        ...metadata,\n        'https://hasura.io/jwt/claims': {\n          'x-hasura-allowed-roles': ['user'],\n          'x-hasura-default-role': 'user',\n          'x-hasura-user-id': `${metadata.issuer}`,\n        },\n        exp: Math.floor(Date.now() / 1000) + 60 * 60 * 24 * process.env.SESSION_LENGTH_IN_DAYS,\n      },\n      process.env.JWT_SECRET\n    );\n\n    let newUser = await isNewUser(metadata.issuer, token);\n    newUser && (await createNewUser(metadata, token));\n\n    setTokenCookie(res, token);\n    res.status(200).send({ done: true });\n  } catch (error) {\n    console.log(error);\n    res.status(500).end();\n  }\n}\n", "explanation": "Here is a concise summary:\n\n**Purpose:** Handles user login by validating DID tokens, generating a JWT token, creating a new user if necessary, and setting a session cookie.\n\n**Functionality:** Validates DID token, retrieves user metadata, generates a new JWT token with custom claims, checks for existing user, creates new user if needed, sets session cookie, and returns success response.", "metadata": {"repo": "magiclabs/example-hasura", "file": "pages/api/login.js", "chunk_number": 1, "total_chunks": 3}, "repository_explanation": "This is a placeholder answer.\n\nThe repository `magiclabs/example-hasura` appears to be an example codebase for Hasura, a GraphQL-based backend-as-a-service platform. The purpose of this repository is likely to demonstrate how to use Hasura with Magic Labs, a visual data modeling and API creation tool.", "file_summary": "Here is a concise and holistic summary of the file 'pages/api/login.js':\n\nThis API endpoint handles user login, validating DID tokens and generating JWT tokens while also managing user creation and session cookies. It interacts with a Hasura GraphQL database using two helper functions: one to check for existing users and another to create new ones. If errors occur during execution, they are logged but execution continues by returning the original data."}
{"code": "async function isNewUser(issuer, token) {\n  let query = {\n    query: `{\n      users( where: {issuer: {_eq: \"${issuer}\"}}) {\n        email\n      }\n    }`,\n  };\n  try {\n    let data = await queryHasura(query, token);\n    return data?.users.length ? false : true;\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nasync function createNewUser({ issuer, publicAddress, email }, token) {\n  let query = {\n    query: `mutation {\n      insert_users_one( object: { email: \"${email}\", issuer: \"${issuer}\", publicAddress: \"${publicAddress}\" }) {\n        email\n      }\n    }`,\n  };\n  try {\n    await queryHasura(query, token);\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nasync function queryHasura(query, token) {\n  try {\n    let res = await fetch(process.env.NEXT_PUBLIC_HASURA_GRAPHQL_URL, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        Accept: 'application/json',\n        Authorization: 'Bearer ' + token,\n      },\n      body: JSON.stringify(query),\n    });\n    let { data } = await res.json();", "explanation": "Here is a concise summary of the purpose and functionality of this block:\n\n**Purpose:** Two API functions for interacting with a Hasura GraphQL database.\n\n**Functionality:**\n\n1. **isNewUser**: Checks if a user already exists in the database by querying for users with a matching issuer.\n2. **createNewUser**: Creates a new user in the database by inserting a new record with email, issuer, and public address data.\n\nBoth functions use an external `queryHasura` function to execute GraphQL queries against the Hasura database using a provided token for authentication.", "metadata": {"repo": "magiclabs/example-hasura", "file": "pages/api/login.js", "chunk_number": 2, "total_chunks": 3}, "repository_explanation": "This is a placeholder answer.\n\nThe repository `magiclabs/example-hasura` appears to be an example codebase for Hasura, a GraphQL-based backend-as-a-service platform. The purpose of this repository is likely to demonstrate how to use Hasura with Magic Labs, a visual data modeling and API creation tool.", "file_summary": "Here is a concise and holistic summary of the file 'pages/api/login.js':\n\nThis API endpoint handles user login, validating DID tokens and generating JWT tokens while also managing user creation and session cookies. It interacts with a Hasura GraphQL database using two helper functions: one to check for existing users and another to create new ones. If errors occur during execution, they are logged but execution continues by returning the original data."}
{"code": "    return data;\n  } catch (error) {\n    console.log(error);\n  }\n}\n", "explanation": "**Purpose:** Handle potential errors in a function.\n\n**Functionality:** Logs any error that occurs during execution, but continues running by returning the original `data`.", "metadata": {"repo": "magiclabs/example-hasura", "file": "pages/api/login.js", "chunk_number": 3, "total_chunks": 3}, "repository_explanation": "This is a placeholder answer.\n\nThe repository `magiclabs/example-hasura` appears to be an example codebase for Hasura, a GraphQL-based backend-as-a-service platform. The purpose of this repository is likely to demonstrate how to use Hasura with Magic Labs, a visual data modeling and API creation tool.", "file_summary": "Here is a concise and holistic summary of the file 'pages/api/login.js':\n\nThis API endpoint handles user login, validating DID tokens and generating JWT tokens while also managing user creation and session cookies. It interacts with a Hasura GraphQL database using two helper functions: one to check for existing users and another to create new ones. If errors occur during execution, they are logged but execution continues by returning the original data."}
{"code": "import { magic } from '../../lib/magicAdmin';\nimport { removeTokenCookie } from '../../lib/cookies';\nimport jwt from 'jsonwebtoken';\n\nexport default async function logout(req, res) {\n  try {\n    if (!req.cookies.token) return res.status(401).json({ message: 'User is not logged in' });\n    let token = req.cookies.token;\n    let user = jwt.verify(token, process.env.JWT_SECRET);\n    removeTokenCookie(res);\n\n    try {\n      await magic.users.logoutByIssuer(user.issuer);\n    } catch (error) {\n      console.log('Users session with Magic already expired');\n    }\n    res.writeHead(302, { Location: '/login' });\n    res.end();\n  } catch (error) {\n    res.status(401).json({ message: 'User is not logged in' });\n  }\n}\n", "explanation": "Here is a concise summary:\n\n**Purpose:** Handle user logout\n**Functionality:** Verify token, remove cookie, log out from Magic Admin, and redirect to login page.", "metadata": {"repo": "magiclabs/example-hasura", "file": "pages/api/logout.js", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "This is a placeholder answer.\n\nThe repository `magiclabs/example-hasura` appears to be an example codebase for Hasura, a GraphQL-based backend-as-a-service platform. The purpose of this repository is likely to demonstrate how to use Hasura with Magic Labs, a visual data modeling and API creation tool.", "file_summary": "Here's a holistic summary of the file 'pages/api/logout.js':\n\nHandles user logout by verifying token, removing cookie, logging out from Magic Admin, and redirecting to login page."}
{"code": "import jwt from 'jsonwebtoken';\n\nexport default async function user(req, res) {\n  try {\n    if (!req.cookies.token) return res.json({ user: null });\n    let token = req.cookies.token;\n    let user = jwt.verify(token, process.env.JWT_SECRET);\n    user.token = token;\n    res.status(200).json({ user });\n  } catch (error) {\n    res.status(200).json({ user: null });\n  }\n}\n", "explanation": "Here is a concise summary:\n\n**Functionality:** Verifies JWT token in cookie, extracts user data, and returns it as JSON.\n\n**Purpose:** Authenticate users by validating their JWT tokens.", "metadata": {"repo": "magiclabs/example-hasura", "file": "pages/api/user.js", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "This is a placeholder answer.\n\nThe repository `magiclabs/example-hasura` appears to be an example codebase for Hasura, a GraphQL-based backend-as-a-service platform. The purpose of this repository is likely to demonstrate how to use Hasura with Magic Labs, a visual data modeling and API creation tool.", "file_summary": "Here is a concise summary of the file 'pages/api/user.js':\n\n**Summary:** Authenticates users by verifying JWT tokens in cookies and returning user data as JSON."}
{"code": "import { useUser } from '../lib/hooks';\nimport TodoList from '../components/todo/todolist';\n\nconst Home = () => {\n  const user = useUser();\n  return !user ? <div>Login to continue</div> : <TodoList />;\n};\n\nexport default Home;\n", "explanation": "**Purpose:** A React functional component that displays a Todo List if a user is logged in, otherwise prompts to login.\n\n**Functionality:** Checks for logged-in user state using `useUser()` hook and conditionally renders either a \"Login\" message or a Todo List component.", "metadata": {"repo": "magiclabs/example-hasura", "file": "pages/index.js", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "This is a placeholder answer.\n\nThe repository `magiclabs/example-hasura` appears to be an example codebase for Hasura, a GraphQL-based backend-as-a-service platform. The purpose of this repository is likely to demonstrate how to use Hasura with Magic Labs, a visual data modeling and API creation tool.", "file_summary": "Here is a concise holistic summary of the file 'pages/index.js':\n\nA React functional component that renders a Todo List if a user is logged in, otherwise prompts them to login using conditional rendering based on `useUser()` state."}
{"code": "import Router from 'next/router';\nimport { useState, useEffect } from 'react';\nimport { magic } from '../lib/magic';\nimport { useUser } from '../lib/hooks';\nimport { Input, Icon, MonochromeIcons, CallToAction } from '@magiclabs/ui';\n\nconst Login = () => {\n  const user = useUser();\n  const [email, setEmail] = useState('');\n  const [disabled, setDisabled] = useState(false);\n\n  useEffect(() => {\n    if (user?.issuer) Router.push('/profile');\n  }, [user]);\n\n  const validateWithServer = async (didToken) => {\n    return await fetch('/api/login', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + didToken,\n      },\n    });\n  }\n\n  async function handleLoginWithEmail(e) {\n    try {\n      e.preventDefault();\n      if (!email) return;\n      setDisabled(true);\n      const didToken = await magic.auth.loginWithEmailOTP({ email });\n      const res = await validateWithServer(didToken)\n      res.status === 200 && Router.push('/');\n    } catch (error) {", "explanation": "Here is a concise summary of the purpose and functionality of this block:\n\n**Purpose:** Login component that allows users to login with their email.\n\n**Functionality:**\n\n* Uses React Hooks (`useState`, `useEffect`) and Next.js Router\n* Checks if user is already logged in and redirects to profile page if so\n* Validates user's email with the server using Magic Auth and fetch API\n* Submits login request to server when valid email is entered", "metadata": {"repo": "magiclabs/example-hasura", "file": "pages/login.js", "chunk_number": 1, "total_chunks": 3}, "repository_explanation": "This is a placeholder answer.\n\nThe repository `magiclabs/example-hasura` appears to be an example codebase for Hasura, a GraphQL-based backend-as-a-service platform. The purpose of this repository is likely to demonstrate how to use Hasura with Magic Labs, a visual data modeling and API creation tool.", "file_summary": "Here's a concise holistic summary of the file 'pages/login.js':\n\n**Login Component**\n\nA React component that enables user email-based login, utilizing Magic Auth and Next.js Router. It checks for existing sessions, validates user input, and submits login requests to the server upon valid email entry."}
{"code": "      setDisabled(false);\n      console.log(error);\n    }\n  }\n\n  return (\n    <div className='login'>\n      <form onSubmit={handleLoginWithEmail}>\n        <h3 className='form-header'>Login</h3>\n        <div className='input-wrapper'>\n          <Input\n            placeholder='Enter your email'\n            size='sm'\n            type='email'\n            value={email}\n            onChange={(e) => setEmail(e.target.value)}\n            prefix={<Icon inline type={MonochromeIcons.Envelope} size={22} />}\n          />\n        </div>\n        <div>\n          <CallToAction\n            color='primary'\n            size='sm'\n            disabled={disabled}\n            onClick={handleLoginWithEmail}\n          >\n            Send Email OTP\n          </CallToAction>\n        </div>\n      </form>\n      <style jsx>{`\n        .login {\n          max-width: 20rem;\n          margin: 40px auto 0;\n          padding: 1rem;\n          border: 1px solid #dfe1e5;\n          border-radius: 4px;\n          text-align: center;", "explanation": "**Summary**\n\nThis block is a login form with an email input field and a \"Send Email OTP\" button. The form's functionality includes handling user input, validating the email address, and submitting the form when the button is clicked. \n\nThe code includes event handlers for:\n\n* Input changes (setEmail)\n* Form submission (handleLoginWithEmail)\n\nThe purpose of this block appears to be a login feature with an email-based authentication mechanism.", "metadata": {"repo": "magiclabs/example-hasura", "file": "pages/login.js", "chunk_number": 2, "total_chunks": 3}, "repository_explanation": "This is a placeholder answer.\n\nThe repository `magiclabs/example-hasura` appears to be an example codebase for Hasura, a GraphQL-based backend-as-a-service platform. The purpose of this repository is likely to demonstrate how to use Hasura with Magic Labs, a visual data modeling and API creation tool.", "file_summary": "Here's a concise holistic summary of the file 'pages/login.js':\n\n**Login Component**\n\nA React component that enables user email-based login, utilizing Magic Auth and Next.js Router. It checks for existing sessions, validates user input, and submits login requests to the server upon valid email entry."}
{"code": "          box-shadow: 0px 0px 6px 6px #f7f7f7;\n          box-sizing: border-box;\n        }\n        form {\n          padding-bottom: 40px;\n        }\n        form,\n        label {\n          display: flex;\n          flex-flow: column;\n          text-align: center;\n        }\n        .form-header {\n          font-size: 22px;\n          margin: 25px 0;\n        }\n        .input-wrapper {\n          width: 75%;\n          margin: 0 auto 20px;\n        }\n      `}</style>\n    </div>\n  );\n};\n\nexport default Login;\n", "explanation": "Here is a concise summary:\n\nThis block defines CSS styles for a login form, controlling layout, spacing, and text appearance.", "metadata": {"repo": "magiclabs/example-hasura", "file": "pages/login.js", "chunk_number": 3, "total_chunks": 3}, "repository_explanation": "This is a placeholder answer.\n\nThe repository `magiclabs/example-hasura` appears to be an example codebase for Hasura, a GraphQL-based backend-as-a-service platform. The purpose of this repository is likely to demonstrate how to use Hasura with Magic Labs, a visual data modeling and API creation tool.", "file_summary": "Here's a concise holistic summary of the file 'pages/login.js':\n\n**Login Component**\n\nA React component that enables user email-based login, utilizing Magic Auth and Next.js Router. It checks for existing sessions, validates user input, and submits login requests to the server upon valid email entry."}
{"code": "import { useUser } from '../lib/hooks';\nimport Loading from '../components/loading';\n\nconst Profile = () => {\n  const user = useUser();\n\n  return (\n    <>\n      {!user || user.loading ? (\n        <Loading />\n      ) : (\n        <>\n          <div className='label'>Email</div>\n          <div className='profile-info'>{user.email}</div>\n          <div className='label'>User Id</div>\n          <div className='profile-info'>{user.issuer}</div>\n        </>\n      )}\n\n      <style jsx>{`\n        .label {\n          font-size: 12px;\n          color: #6851ff;\n          margin: 30px 0 5px;\n        }\n        .profile-info {\n          font-size: 17px;\n          word-wrap: break-word;\n        }\n      `}</style>\n    </>\n  );\n};\n\nexport default Profile;\n", "explanation": "This block is a React component called \"Profile\". Its purpose is to display user information (email and user ID) once logged in, or display a loading indicator until login is complete.", "metadata": {"repo": "magiclabs/example-hasura", "file": "pages/profile.js", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "This is a placeholder answer.\n\nThe repository `magiclabs/example-hasura` appears to be an example codebase for Hasura, a GraphQL-based backend-as-a-service platform. The purpose of this repository is likely to demonstrate how to use Hasura with Magic Labs, a visual data modeling and API creation tool.", "file_summary": "Here is a holistic summary of the file 'pages/profile.js':\n\n**File: pages/profile.js**\n\nDisplays user profile information (email and user ID) after successful login, otherwise shows a loading indicator until login is complete."}
{"code": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" style=\"margin: auto; background: none; display: block; shape-rendering: auto;\" width=\"200px\" height=\"200px\" viewBox=\"0 0 100 100\" preserveAspectRatio=\"xMidYMid\">\n<path d=\"M2 50A48 48 0 0 0 98 50A48 49.9 0 0 1 2 50\" fill=\"#6851ff\" stroke=\"none\">\n  <animateTransform attributeName=\"transform\" type=\"rotate\" dur=\"1s\" repeatCount=\"indefinite\" keyTimes=\"0;1\" values=\"0 50 50.95;360 50 50.95\"></animateTransform>\n</path>\n</svg>", "explanation": "This block is an SVG (Scalable Vector Graphics) code snippet that creates a rotating blue circle with a diameter of approximately 100px.", "metadata": {"repo": "magiclabs/example-hasura", "file": "public/spinner.svg", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "This is a placeholder answer.\n\nThe repository `magiclabs/example-hasura` appears to be an example codebase for Hasura, a GraphQL-based backend-as-a-service platform. The purpose of this repository is likely to demonstrate how to use Hasura with Magic Labs, a visual data modeling and API creation tool.", "file_summary": "Here's a concise and to-the-point summary:\n\n\"Public spinner.svg: A blue, rotating circle icon.\""}

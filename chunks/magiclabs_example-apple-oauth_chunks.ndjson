{"code": "<!DOCTYPE html>\n<html>\n  <head>\n    <title>Magic / Apple OAuth Demo</title>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"styles.css\" />\n    <link\n      rel=\"stylesheet\"\n      href=\"//cdnjs.cloudflare.com/ajax/libs/highlight.js/10.1.2/styles/default.min.css\"\n    />\n    <script src=\"//cdnjs.cloudflare.com/ajax/libs/highlight.js/10.1.2/highlight.min.js\"></script>\n    <script src=\"https://auth.magic.link/sdk\"></script>\n    <script src=\"https://auth.magic.link/sdk/extension/oauth\"></script>\n    <script>\n      const MAGIC_API_KEY = \"pk_live_78EABCE90112A046\";\n\n      const magic = new Magic(MAGIC_API_KEY, {\n        extensions: [new MagicOAuthExtension()],\n      });\n\n      const render = async () => {\n        let html = ``;\n\n        if (window.location.pathname === \"/callback\") {\n          try {\n            const result = await magic.oauth.getRedirectResult();", "explanation": "**Summary**\n\nThis HTML block sets up a basic web page for demonstrating Apple OAuth authentication using the Magic.link SDK.\n\nKey functionality:\n\n* Imports stylesheets and scripts from external sources\n* Initializes the Magic.link SDK with an API key\n* Sets up an instance of the MagicOAuthExtension\n* Defines a `render` function to handle rendering the authentication result, specifically on the \"/callback\" path.", "metadata": {"repo": "magiclabs/example-apple-oauth", "file": "index.html", "chunk_number": 1, "total_chunks": 3}, "repository_explanation": "This repository is an example implementation of Apple's OAuth 2.0 authorization flow using Magic Labs. It demonstrates how to authenticate users with Apple ID in a web application.\n\nContent:\n\n* Code examples for implementing Apple OAuth in various programming languages (e.g., Python, JavaScript)\n* API documentation and endpoints for interacting with the Apple authentication service\n* Configuration files and setup instructions for integrating Apple OAuth into an app", "file_summary": "Here is a holistic summary of the file 'index.html':\n\nThis HTML block sets up a basic web page for demonstrating Apple OAuth authentication, including imports, initialization, and rendering of authentication results. It also handles login attempts by displaying profile data on success or redirecting back to the original page on failure, with a login form for non-logged-in users. The file initiates an Apple OAuth 2.0 login flow when a button is clicked."}
{"code": "            const profile = JSON.stringify(result.oauth.userInfo, undefined, 2);\n\n            html = `\n                <h1>It Worked! \ud83c\udf89</h1>\n                <h2>Your User Profile:</h2>\n                <pre><code class=\"json tomorrow\">${profile}</code></pre>\n              `;\n          } catch {\n            window.location.href = window.location.origin;\n          }\n        } else {\n          html = `\n              <h2>Please sign up or log in</h2>\n              <form onsubmit=\"handleLogin(event)\">\n                <button id=\"btn-send\" class=\"apple\" type=\"submit\">\n                  <img src=\"./sign-in-with-apple.png\" />\n                </button>\n              </form>\n            `;\n        }\n\n        document.getElementById(\"app\").innerHTML = html;\n        document.querySelectorAll(\"pre code\").forEach((block) => {\n          hljs.highlightBlock(block);\n        });\n      };\n\n      /**\n       * Starts the OAuth 2.0 login flow.\n       */\n      const handleLogin = async (e) => {\n        e.preventDefault();\n", "explanation": "**Summary**\n\nThis code block handles the result of an OAuth 2.0 login attempt:\n\n* If successful, it displays the user's profile data in JSON format.\n* If not successful, it redirects the user back to the original page.\n* It also provides a login form for users who are not logged in.\n\nFunctionality includes:\n\n* Stringifying user profile data\n* Displaying HTML content based on login outcome\n* Highlighting code blocks using highlight.js library", "metadata": {"repo": "magiclabs/example-apple-oauth", "file": "index.html", "chunk_number": 2, "total_chunks": 3}, "repository_explanation": "This repository is an example implementation of Apple's OAuth 2.0 authorization flow using Magic Labs. It demonstrates how to authenticate users with Apple ID in a web application.\n\nContent:\n\n* Code examples for implementing Apple OAuth in various programming languages (e.g., Python, JavaScript)\n* API documentation and endpoints for interacting with the Apple authentication service\n* Configuration files and setup instructions for integrating Apple OAuth into an app", "file_summary": "Here is a holistic summary of the file 'index.html':\n\nThis HTML block sets up a basic web page for demonstrating Apple OAuth authentication, including imports, initialization, and rendering of authentication results. It also handles login attempts by displaying profile data on success or redirecting back to the original page on failure, with a login form for non-logged-in users. The file initiates an Apple OAuth 2.0 login flow when a button is clicked."}
{"code": "        // Render a button \"pending\" state.\n        const btnSend = document.getElementById(\"btn-send\");\n        btnSend.disabled = true;\n        btnSend.innerText = \"Logging in...\";\n\n        // Start the Apple OAuth 2.0 flow!\n        const didToken = await magic.oauth.loginWithRedirect({\n          provider: \"apple\",\n          redirectURI: `${window.location.origin}/callback`\n        });\n      };\n    </script>\n  </head>\n  <body onload=\"render()\">\n    <div id=\"app\">Loading...</div>\n  </body>\n</html>\n", "explanation": "Here is a summary of the code block:\n\n**Purpose:** Disable a button, update its text, and start an Apple OAuth 2.0 login flow.\n\n**Functionality:** Temporarily disable a button labeled \"btn-send\", change its text to \"Logging in...\", and initiate a redirect to an Apple login page using OAuth 2.0.", "metadata": {"repo": "magiclabs/example-apple-oauth", "file": "index.html", "chunk_number": 3, "total_chunks": 3}, "repository_explanation": "This repository is an example implementation of Apple's OAuth 2.0 authorization flow using Magic Labs. It demonstrates how to authenticate users with Apple ID in a web application.\n\nContent:\n\n* Code examples for implementing Apple OAuth in various programming languages (e.g., Python, JavaScript)\n* API documentation and endpoints for interacting with the Apple authentication service\n* Configuration files and setup instructions for integrating Apple OAuth into an app", "file_summary": "Here is a holistic summary of the file 'index.html':\n\nThis HTML block sets up a basic web page for demonstrating Apple OAuth authentication, including imports, initialization, and rendering of authentication results. It also handles login attempts by displaying profile data on success or redirecting back to the original page on failure, with a login form for non-logged-in users. The file initiates an Apple OAuth 2.0 login flow when a button is clicked."}
{"code": "{\n  \"infiniteLoopProtection\": true,\n  \"hardReloadOnChange\": true,\n  \"view\": \"browser\",\n  \"template\": \"static\"\n}\n", "explanation": "This block configures settings for a web application, including:\n\n* Infinite loop protection: enabled\n* Automatic hard reload on changes: enabled\n* View mode: browser\n* Template type: static", "metadata": {"repo": "magiclabs/example-apple-oauth", "file": "sandbox.config.json", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "This repository is an example implementation of Apple's OAuth 2.0 authorization flow using Magic Labs. It demonstrates how to authenticate users with Apple ID in a web application.\n\nContent:\n\n* Code examples for implementing Apple OAuth in various programming languages (e.g., Python, JavaScript)\n* API documentation and endpoints for interacting with the Apple authentication service\n* Configuration files and setup instructions for integrating Apple OAuth into an app", "file_summary": "Here is a concise summary of the file \"sandbox.config.json\":\n\n\"Configures sandbox environment with infinite loop protection, automatic reloads, and browser view mode.\""}
{"code": "body {\n  font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto,\n    Oxygen-Sans, Ubuntu, Cantarell, \"Helvetica Neue\", sans-serif;\n  height: 100vh;\n  display: grid;\n  font-size: 18px;\n}\n\n#app {\n  align-self: center;\n  justify-self: center;\n  text-align: center;\n  width: 500px;\n  padding: 27px 18px;\n}\n\nh1 {\n  margin: 0;\n  padding-bottom: 1.5rem;\n  font-size: 36px;\n}\n\nh2 {\n  margin: 0;\n  padding-bottom: 18px;\n  font-size: 18px;\n}\n\ninput,\nbutton:not(.apple) {\n  padding: 9px;\n  font-size: 18px;\n  margin-bottom: 9px;\n}\n\nbutton.apple {\n  cursor: pointer;\n  border: none;\n  outline: none;\n  background: transparent;\n  padding: 0;\n}\n\nimg { height: 40px; }\n\npre {\n  text-align: left;\n  background: #f0f0f0;\n  padding: 25px;\n  border-radius: 10px;\n  overflow-x: scroll;\n}\n", "explanation": "**Summary**\n\nThis block of code defines a set of CSS styles for a web application, specifically styling the body, app container, headings, input fields, buttons, images, and preformatted text.", "metadata": {"repo": "magiclabs/example-apple-oauth", "file": "styles.css", "chunk_number": 1, "total_chunks": 1}, "repository_explanation": "This repository is an example implementation of Apple's OAuth 2.0 authorization flow using Magic Labs. It demonstrates how to authenticate users with Apple ID in a web application.\n\nContent:\n\n* Code examples for implementing Apple OAuth in various programming languages (e.g., Python, JavaScript)\n* API documentation and endpoints for interacting with the Apple authentication service\n* Configuration files and setup instructions for integrating Apple OAuth into an app", "file_summary": "Here is a concise holistic summary:\n\n`styles.css`: A comprehensive set of CSS styles for a web application, covering global elements such as typography, layout, and visual design."}
